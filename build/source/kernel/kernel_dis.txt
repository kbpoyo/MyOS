
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf:     file format elf32-i386
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00008b20 memsz 0x00008b20 flags r-x
    LOAD off    0x0000a000 vaddr 0x00019000 paddr 0x00019000 align 2**12
         filesz 0x000000e4 memsz 0x00057ae0 flags rw-
    LOAD off    0x0000b000 vaddr 0x80000000 paddr 0x00071000 align 2**12
         filesz 0x00000397 memsz 0x00000397 flags rwx
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000073b6  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00001760  000173c0  000173c0  000083c0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         000000e4  00019000  00019000  0000a000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00056ae0  0001a000  0001a000  0000a0e4  2**12
                  ALLOC
  4 .first_task   00000397  80000000  00071000  0000b000  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  5 .debug_line   00003f5e  00000000  00000000  0000b397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_line_str 00000b46  00000000  00000000  0000f2f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   0000cb38  00000000  00000000  0000fe3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 000031df  00000000  00000000  0001c973  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_aranges 00000380  00000000  00000000  0001fb58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    000020f5  00000000  00000000  0001fed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_rnglists 00000087  00000000  00000000  00021fcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .comment      0000002b  00000000  00000000  00022054  2**0
                  CONTENTS, READONLY
 13 .debug_frame  000026fc  00000000  00000000  00022080  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010012 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
000102e4 l     F .text	0000000d down2
000102f1 l     F .text	00000017 up2
00010308 l     F .text	0000000c write_cr3
00010314 l     F .text	0000000b pde_index
0001031f l     F .text	00000010 pte_index
0001032f l     F .text	00000027 pde_to_pt_addr
00010356 l     F .text	00000027 pte_to_pg_addr
0001037d l     F .text	0000000f get_pte_privilege
0001038c l     F .text	00000011 mmu_set_page_dir
0001a000 l     O .bss	00007e88 paddr_alloc
00022000 l     O .bss	00001000 kernel_page_dir
0001039d l     F .text	00000025 page_index
000103c2 l     F .text	00000056 page_ref_add
00010418 l     F .text	00000068 page_ref_sub
00010480 l     F .text	0000004e get_page_ref
000104ce l     F .text	00000051 clear_page_ref
0001051f l     F .text	00000087 addr_alloc_init
000105a6 l     F .text	00000067 addr_alloc_page
0001060d l     F .text	0000009c addr_free_page
000106a9 l     F .text	00000066 show_mem_info
0001070f l     F .text	00000037 total_mem_size
0001755c l     O .rodata	00000011 __func__.4
00019000 l     O .data	00000050 kernal_map.3
00017570 l     O .rodata	0000000c __func__.2
00010e2c l     F .text	00000010 curr_page_dir
0001757c l     O .rodata	00000011 __func__.1
00017590 l     O .rodata	00000009 __func__.0
00000000 l    df *ABS*	00000000 task.c
000110f1 l     F .text	0000003d list_node_init
00017758 l     O .rodata	0000000f __func__.11
0001112e l     F .text	0000002d list_node_next
000177b8 l     O .rodata	0000000f __func__.5
0001115b l     F .text	00000047 list_init
00017768 l     O .rodata	0000000a __func__.10
000111a2 l     F .text	00000035 list_is_empty
000177c8 l     O .rodata	0000000e __func__.4
000111d7 l     F .text	0000002d list_get_size
000177f8 l     O .rodata	0000000e __func__.1
00011204 l     F .text	0000002c list_get_first
000177a8 l     O .rodata	0000000f __func__.6
00011230 l     F .text	00000007 hlt
00011237 l     F .text	0000000c write_cr3
00011243 l     F .text	0000001a far_jump
0001125d l     F .text	00000017 write_tr
00011274 l     F .text	00000011 mmu_set_page_dir
00011285 l     F .text	00000017 up2
00023000 l     O .bss	000005c0 task_manager
000235c0 l     O .bss	00016400 task_table
000399c0 l     O .bss	00000014 task_table_lock
00011347 l     F .text	0000001f switch_to_tss
00011381 l     F .text	00000175 tss_init
0001774c l     O .rodata	0000000a __func__.12
00011c20 l     F .text	00000033 free_task
000399e0 l     O .bss	00000200 empty_task_stack
000116eb l     F .text	0000000a empty_task
00017774 l     O .rodata	00000010 __func__.9
00017784 l     O .rodata	0000000f __func__.8
00017794 l     O .rodata	00000011 __func__.7
000177d8 l     O .rodata	0000000f __func__.3
000177e8 l     O .rodata	00000010 __func__.2
00011bb8 l     F .text	00000068 alloc_task
00011cc0 l     F .text	00000059 copy_opened_files
00011f03 l     F .text	00000114 load_phdr
00012017 l     F .text	00000213 load_elf_file
0001222a l     F .text	000000f1 copy_args
00017808 l     O .rodata	0000000a __func__.0
00000000 l    df *ABS*	00000000 gate.c
00000000 l    df *ABS*	00000000 gdt.c
00012742 l     F .text	00000028 lgdt
00039be0 l     O .bss	00010000 gdt_table
00049be0 l     O .bss	00002000 is_alloc
0004bbe0 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 idt.c
00012978 l     F .text	00000007 cli
0001297f l     F .text	00000007 sti
00012986 l     F .text	00000007 hlt
0001298d l     F .text	0000001d inb
000129aa l     F .text	00000021 outb
000129cb l     F .text	00000028 lidt
000129f3 l     F .text	00000011 read_cr2
00012a04 l     F .text	00000010 read_eflags
00012a14 l     F .text	0000000b write_eflags
0004bc00 l     O .bss	00000800 idt_table
00012a1f l     F .text	0000010f print_exception_fram
00012b2e l     F .text	0000003e do_default_handler
00012f44 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 mmu.c
00000000 l    df *ABS*	00000000 syscall.c
00017e00 l     O .rodata	000000ec sys_table
00000000 l    df *ABS*	00000000 console.c
000133d9 l     F .text	0000001d inb
000133f6 l     F .text	00000021 outb
0004c400 l     O .bss	00000340 console_table
0004c740 l     O .bss	00000004 curr_console_index
00013417 l     F .text	00000074 read_cursor_pos
0001348b l     F .text	000000a6 update_cursor_pos
00013531 l     F .text	0000006d erase_rows
0001359e l     F .text	00000094 scroll_up
00013632 l     F .text	00000010 move_to_col0
00013642 l     F .text	00000038 move_to_next_line
0001367a l     F .text	00000077 move_forward
000136f1 l     F .text	00000095 show_char
00013786 l     F .text	00000078 move_backword
000137fe l     F .text	0000003a erase_backword
00013838 l     F .text	00000087 clear_display
000138bf l     F .text	00000051 print_table
00013a1b l     F .text	000000b2 write_normal
00013acd l     F .text	0000001e save_cursor
00013aeb l     F .text	0000001e restore_cursor
00013b09 l     F .text	00000029 clear_esc_param
00013b32 l     F .text	0000007e write_esc
00013bb0 l     F .text	0000009a set_font_style
00017f80 l     O .rodata	00000020 color_table.0
00013c4a l     F .text	0000004f erase_in_display
00013c99 l     F .text	00000022 move_cursor
00013cbb l     F .text	00000039 move_left
00013cf4 l     F .text	00000045 move_right
00013d39 l     F .text	00000104 write_esc_square
00000000 l    df *ABS*	00000000 dev.c
00019050 l     O .data	00000008 dev_des_table
0004c760 l     O .bss	00000a00 dev_table
0001401d l     F .text	00000054 is_dev_exist
00000000 l    df *ABS*	00000000 disk.c
0004d160 l     O .bss	00000118 disk_table
00000000 l    df *ABS*	00000000 keyboard.c
00014328 l     F .text	0000001d inb
00017fa0 l     O .rodata	00000200 map_table
0004d278 l     O .bss	00000004 kbd_state
00014345 l     F .text	0000001a is_make_code
0001435f l     F .text	00000015 get_key
00014374 l     F .text	00000043 do_fx_key
000143b7 l     F .text	000001e0 do_normal_key
00014597 l     F .text	0000008e do_e0_key
0004d27c l     O .bss	00000001 is_inited.1
0004d280 l     O .bss	00000004 recv_state.0
00000000 l    df *ABS*	00000000 time.c
0001473d l     F .text	00000021 outb
0004d284 l     O .bss	00000004 sys_tick
00014786 l     F .text	00000062 init_pit
00000000 l    df *ABS*	00000000 tty.c
0004d2a0 l     O .bss	000022a0 tty_table
0004f540 l     O .bss	00000004 curr_tty_index
00014800 l     F .text	0000004f get_tty
0001484f l     F .text	00000037 tty_fifo_init
00000000 l    df *ABS*	00000000 devfs.c
000190a0 l     O .data	0000000c devfs_type_list
00000000 l    df *ABS*	00000000 file.c
0004f560 l     O .bss	0001e000 file_table
0006d560 l     O .bss	00000014 file_alloc_mutex
00000000 l    df *ABS*	00000000 fs.c
0001502c l     F .text	0000002d list_node_next
0001850c l     O .rodata	0000000f __func__.3
00015059 l     F .text	00000047 list_init
00018528 l     O .rodata	0000000a __func__.1
000150a0 l     F .text	0000002c list_get_first
000184fc l     O .rodata	0000000f __func__.4
000150cc l     F .text	0000001d inb
000150e9 l     F .text	00000021 outb
0001510a l     F .text	0000001f inw
0006d580 l     O .bss	0000000c mounted_list
0006d5a0 l     O .bss	00001518 fs_table
0006eab8 l     O .bss	0000000c free_list
0006eac4 l     O .bss	00000004 temp_pos
00015129 l     F .text	0000013d read_disk
00015266 l     F .text	0000001d is_fd_bad
00015283 l     F .text	00000021 is_path_valid
0001539b l     F .text	0000002b fs_protect
000153c6 l     F .text	0000002b fs_unprotect
0001851c l     O .rodata	0000000a __func__.2
00015afb l     F .text	00000060 mount_list_init
00015b5b l     F .text	00000017 get_fs_op
00015b72 l     F .text	000001b7 mount
00018534 l     O .rodata	00000008 __func__.0
00000000 l    df *ABS*	00000000 init.c
000185d8 l     O .rodata	0000000c __func__.1
000185e4 l     O .rodata	00000013 __func__.0
00000000 l    df *ABS*	00000000 mutex.c
00015e6d l     F .text	00000047 list_init
000186a4 l     O .rodata	0000000a __func__.1
00015eb4 l     F .text	00000035 list_is_empty
000186b0 l     O .rodata	0000000e __func__.0
00018698 l     O .rodata	0000000b __func__.2
00000000 l    df *ABS*	00000000 sem.c
0001607f l     F .text	00000047 list_init
00018764 l     O .rodata	0000000a __func__.1
000160c6 l     F .text	00000035 list_is_empty
00018770 l     O .rodata	0000000e __func__.0
00018758 l     O .rodata	00000009 __func__.2
00000000 l    df *ABS*	00000000 test.c
00016253 l     F .text	00000047 list_init
00018884 l     O .rodata	0000000a __func__.3
0001629a l     F .text	0000002d list_get_size
00018890 l     O .rodata	0000000e __func__.2
000162c7 l     F .text	0000002c list_get_first
000188b0 l     O .rodata	0000000f __func__.0
000162f3 l     F .text	0000002d list_get_last
000188a0 l     O .rodata	0000000e __func__.1
00000000 l    df *ABS*	00000000 assert.c
000165fb l     F .text	00000007 hlt
00000000 l    df *ABS*	00000000 bitmap.c
00018984 l     O .rodata	0000000c __func__.3
00018990 l     O .rodata	0000000f __func__.2
000189a0 l     O .rodata	0000000f __func__.1
000189b0 l     O .rodata	00000013 __func__.0
00000000 l    df *ABS*	00000000 klib.c
000190e0 l     O .data	00000004 num_to_char.0
00000000 l    df *ABS*	00000000 list.c
00016f3e l     F .text	00000035 list_is_empty
00018ab8 l     O .rodata	0000000e __func__.5
00016f73 l     F .text	0000002d list_get_size
00018af0 l     O .rodata	0000000e __func__.2
00018aa4 l     O .rodata	00000012 __func__.6
00018ac8 l     O .rodata	00000011 __func__.4
00018adc l     O .rodata	00000012 __func__.3
00018b00 l     O .rodata	00000011 __func__.1
00018b14 l     O .rodata	0000000c __func__.0
00000000 l    df *ABS*	00000000 log.c
0006eac8 l     O .bss	00000014 mutex
0006eadc l     O .bss	00000004 log_dev_id
00000000 l    df *ABS*	00000000 first_task.c
00000000 l    df *ABS*	00000000 lib_syscall.c
000166e2 g     F .text	00000078 bitmap_get_bit
00016acc g     F .text	0000004f kernel_memcpy
00015833 g     F .text	00000109 sys_close
0001318c g     F .text	00000098 idt_enable
00011994 g     F .text	0000000a task_current
0001534b g     F .text	00000050 path_begin_with
800001e0 g     F .first_task	0000001b yield
0001702b g     F .text	0000008f list_insert_last
0001129c g     F .text	00000030 task_file
00010298 g       .text	00000000 exception_handler_kbd
00010fcb g     F .text	00000126 sys_sbrk
00011ea2 g     F .text	00000061 sys_yield
00012ca0 g     F .text	0000001c do_handler_segment_not_present
000118e2 g     F .text	00000042 task_set_ready
00016862 g     F .text	00000021 bitmap_is_set
000132c3 g     F .text	0000000b idt_enable_global
00016b1b g     F .text	00000041 kernel_memset
00014207 g     F .text	0000004c dev_write
00015781 g     F .text	000000b2 sys_lseek
00014625 g     F .text	0000004e kbd_init
00010081 g       .text	00000000 exception_handler_nmi
00010243 g       .text	00000000 exception_handler_virtual_exception
0001334a g     F .text	0000008f do_handler_syscall
00016ecb g     F .text	0000002d strings_count
000172e9 g     F .text	0000002f log_init
00011d19 g     F .text	00000189 sys_fork
00015e35 g     F .text	00000038 init_main
000101ee g       .text	00000000 exception_handler_alignment_check
00013330 g     F .text	0000001a sys_print_msg
0001697e g     F .text	00000047 kernel_strcpy
000132b8 g     F .text	0000000b idt_disable_global
00019000 g       .data	00000000 s_data
80000010 g     F .first_task	000000af first_main
00012f01 g     F .text	00000043 idt_install
800001b3 g     F .first_task	0000002d execve
80000155 g     F .first_task	0000001b getpid
0001002a g       .text	00000000 exception_handler_unknown
0001009e g       .text	00000000 exception_handler_breakpoint
00012bf8 g     F .text	0000001c do_handler_overflow
00012e75 g     F .text	0000001c do_handler_alignment_check
000155c0 g     F .text	000000fd sys_read
000152a4 g     F .text	00000058 path_next_child
00013f4d g     F .text	000000d0 console_select
0001019b g       .text	00000000 exception_handler_general_protection
00012cd8 g     F .text	000000b1 do_handler_general_protection
00012ee5 g     F .text	0000001c do_handler_control_exception
0001622a g     F .text	00000029 sem_count
00012b88 g     F .text	0000001c do_handler_divider
0001675a g     F .text	00000108 bitmap_set_bit
00012c68 g     F .text	0000001c do_handler_double_fault
00012d89 g     F .text	000000d0 do_handler_page_fault
800002ca g     F .first_task	00000021 isatty
0001012f g       .text	00000000 exception_handler_double_fault
000132ce g     F .text	00000039 pic_send_eoi
0001716b g     F .text	000000b5 list_remove_last
000118d8 g     F .text	0000000a task_first_task
00010000 g       .text	00000000 s_text
0001613d g     F .text	0000006b sem_wait
00010e0a g     F .text	00000022 memory_alloc_page_for
00010180 g       .text	00000000 exception_handler_stack_segment_fault
80000000 g       .first_task	00000000 first_task_entry
0001593c g     F .text	000000b6 sys_fstat
000141bb g     F .text	0000004c dev_read
00012829 g     F .text	000000b3 gdt_init
00012ec9 g     F .text	0000001c do_handler_virtual_exception
00014ef4 g     F .text	0000000a devfs_stat
000100bb g       .text	00000000 exception_handler_overflow
000102b5 g       .text	00000000 simple_switch
8000029d g     F .first_task	0000002d lseek
0001027b g       .text	00000000 exception_handler_time
00012ba4 g     F .text	0000001c do_handler_debug
0006eae0 g     O .bss	00002000 stack
00011c53 g     F .text	00000060 sys_sleep
00014322 g     F .text	00000006 disk_init
00015d29 g     F .text	00000050 fs_init
00014ff4 g     F .text	00000038 file_inc_ref
00010e5c g     F .text	00000099 memory_free_page
00016320 g     F .text	000002db list_test
00010260 g       .text	00000000 exception_handler_control_exception
00071000 g       *ABS*	00000000 s_first_task
0001131f g     F .text	00000028 task_remove_fd
00014ca0 g     F .text	0000000a tty_control
00013910 g     F .text	0000010b console_init
00014b84 g     F .text	0000011c tty_read
0001165b g     F .text	00000090 task_uninit
00010d52 g     F .text	000000b8 memory_alloc_for_page_dir
0001491e g     F .text	0000008d tty_fifo_get
000100d8 g       .text	00000000 exception_handler_bound_range
00014cb0 g     F .text	00000066 tty_in
00012fd7 g     F .text	000001b5 idt_init
000161a8 g     F .text	00000082 sem_notify
00010f48 g     F .text	00000083 memory_copy_uvm_data
00014253 g     F .text	0000004c dev_control
00014673 g     F .text	000000ca do_handler_kbd
00012951 g     F .text	00000027 gdt_free
00012c30 g     F .text	0000001c do_handler_invalid_opcode
0001014a g       .text	00000000 exception_handler_invalid_tss
00012e59 g     F .text	0000001c do_handler_fpu_error
000117d2 g     F .text	00000106 task_first_init
00012e91 g     F .text	0000001c do_handler_machine_check
8000024f g     F .first_task	0000002d write
000153f1 g     F .text	000001cf sys_open
800002eb g     F .first_task	00000027 fstat
000159f2 g     F .text	0000006b sys_isatty
00016fa0 g     F .text	0000008b list_insert_first
00014071 g     F .text	0000014a dev_open
000152fc g     F .text	0000004f path_to_num
00011b6d g     F .text	0000004b task_set_wakeup
00011966 g     F .text	0000002e task_ready_first
00010047 g       .text	00000000 exception_handler_divider
800000df g     F .first_task	0000004c sys_call
00010960 g     F .text	00000085 memory_creat_uvm
000169c5 g     F .text	00000051 kernel_strncpy
000156bd g     F .text	000000c4 sys_write
80000376 g     F .first_task	00000021 wait
00071397 g       *ABS*	00000000 mem_free_start
00015d79 g     F .text	00000058 kernel_init
000160fb g     F .text	00000042 sem_init
00010000 g       .text	00000000 _start
00016c04 g     F .text	0000019d kernel_vsprintf
00016ef8 g     F .text	00000046 get_file_name
00010112 g       .text	00000000 exception_handler_device_unavailable
000100f5 g       .text	00000000 exception_handler_invalid_opcode
0001429f g     F .text	00000083 dev_close
00071000 g       .first_task	00000000 e_data
80000222 g     F .first_task	0000002d read
00015f36 g     F .text	00000091 mutex_lock
000112cc g     F .text	00000053 task_alloc_fd
00014eea g     F .text	0000000a devfs_seek
00010209 g       .text	00000000 exception_handler_machine_check
00014a94 g     F .text	000000f0 tty_write
00012c84 g     F .text	0000001c do_handler_invalid_tss
00014886 g     F .text	00000098 tty_fifo_put
00013224 g     F .text	00000094 idt_disable
00071397 g       *ABS*	00000000 e_first_task
00011b11 g     F .text	0000005c task_set_sleep
00015a5d g     F .text	0000009e sys_dup
000107f6 g     F .text	000000b6 memory_creat_map
00014d3f g     F .text	0000001b devfs_mount
00012bc0 g     F .text	0000001c do_handler_nmi
000149ab g     F .text	000000e9 tty_open
80000198 g     F .first_task	0000001b fork
00015ee9 g     F .text	0000004d mutex_init
80000312 g     F .first_task	00000021 sbrk
000190c0 g     O .data	00000020 devfs_op
00014d60 g     F .text	00000127 devfs_open
00010226 g       .text	00000000 exception_handler_smd_exception
00010b72 g     F .text	000000e7 memory_destroy_uvm
00016638 g     F .text	00000016 bitmap_byte_count
00012c4c g     F .text	0000001c do_handler_device_unavailable
00013307 g     F .text	00000018 idt_enter_protection
000108ac g     F .text	000000b4 create_kernal_table
00011a06 g     F .text	0000010b task_slice_end
000109e5 g     F .text	0000018d memory_copy_uvm
00014caa g     F .text	00000006 tty_close
00014eab g     F .text	00000024 devfs_write
00015dd1 g     F .text	00000064 move_to_first_task
00014ecf g     F .text	0000001b devfs_close
00013e3d g     F .text	0000010a console_write
80000333 g     F .first_task	00000021 dup
00016b5c g     F .text	00000084 kernel_memcmp
00012ead g     F .text	0000001c do_handler_smd_exception
000101b6 g       .text	00000000 exception_handler_page_fault
00012b6c g     F .text	0000001c do_handler_unknown
00010e3c g     F .text	00000020 memory_alloc_page
000101d1 g       .text	00000000 exception_handler_fpu_error
00011366 g     F .text	0000001b task_switch_from_to
00015fc7 g     F .text	000000b8 mutex_unlock
00014efe g     F .text	00000030 file_table_init
00014fb2 g     F .text	00000042 file_free
0001199e g     F .text	00000068 task_switch
80000170 g     F .first_task	00000028 print_msg
00016a97 g     F .text	00000035 kernel_strlen
00011924 g     F .text	00000042 task_set_unready
00010064 g       .text	00000000 exception_handler_debug
0001276a g     F .text	000000bf segment_desc_set
00012c14 g     F .text	0000001c do_handler_bound_range
000102ca g       .text	00000000 exception_handler_syscall
000170ba g     F .text	000000b1 list_remove_first
00018b20 g       .rodata	00000000 e_text
00016a16 g     F .text	00000081 kernel_strncmp
0001664e g     F .text	00000094 bitmap_init
00010165 g       .text	00000000 exception_handler_segment_not_present
00016883 g     F .text	000000fb bitmap_alloc_nbits
00014f2e g     F .text	00000084 file_alloc
000116f5 g     F .text	000000dd task_manager_init
000114f6 g     F .text	00000036 task_start
00010c59 g     F .text	000000f9 memory_init
0001231b g     F .text	000001af sys_execve
00012619 g     F .text	000000e2 sys_wait
000124ca g     F .text	0000014f sys_exit
00016602 g     F .text	00000036 pannic
00014d16 g     F .text	00000029 tty_select
00013f47 g     F .text	00000006 console_close
00010ef5 g     F .text	00000053 memory_get_paddr
00012cbc g     F .text	0000001c do_handler_stack_segment_fault
00012bdc g     F .text	0000001c do_handler_breakpoint
00014d5a g     F .text	00000006 devfs_unmount
80000354 g     F .first_task	00000022 _exit
00014e87 g     F .text	00000024 devfs_read
00017318 g     F .text	0000009e log_printf
0001152c g     F .text	0000012f task_init
800001fb g     F .first_task	00000027 open
00016be0 g     F .text	00000024 kernel_sprintf
00011cb3 g     F .text	0000000d sys_getpid
000128dc g     F .text	00000075 gdt_alloc_desc
00016da1 g     F .text	0000012a kernel_itoa
00017220 g     F .text	000000c9 list_remove
000126fb g     F .text	00000047 gate_desc_set
8000012b g     F .first_task	0000002a msleep
0001331f g     F .text	00000011 idt_leave_protection
8000027c g     F .first_task	00000021 close
00010746 g     F .text	000000b0 find_pte
0001475e g     F .text	00000028 do_handler_time
000147e8 g     F .text	00000018 time_init
00019060 g     O .data	0000002c dev_tty_desc



Disassembly of section .text:

00010000 <_start>:
*            [&boot_info]
*    esp ->  [返回地址]
*   所以要想访问到&boot_info，则只需从当前esp的位置偏移+4字节即可
*/
_start:
    mov %esp, %ebp      //栈空间最好只用ebp来进行偏移访问
   10000:	89 e5                	mov    %esp,%ebp
    mov 0x4(%ebp), %eax //将&boot_info的值存入eax中
   10002:	8b 45 04             	mov    0x4(%ebp),%eax

    push %eax           //外部函数将参数压入栈中，再进行函数调用
   10005:	50                   	push   %eax
    call kernel_init    //调用内核初始化函数
   10006:	e8 6e 5d 00 00       	call   15d79 <kernel_init>

    //完成内核初始化后，进行直接跳转，以替换cs寄存器中临时的内核代码段的选择子为此时内存中真正的内核代码段选择子
    //cs:KERNEL_SELECTOR_CS, ip:gdt_reload
    jmp $KERNEL_SELECTOR_CS, $gdt_reload    
   1000b:	ea 12 00 01 00 08 00 	ljmp   $0x8,$0x10012

00010012 <gdt_reload>:

gdt_reload:
    //替换其他段寄存器中临时的内核数据段的选择子为此时内存中真正的内核数据段的选择子
    mov $KERNEL_SELECTOR_DS, %ax
   10012:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10016:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10018:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001a:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001c:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001e:	8e e8                	mov    %eax,%gs

    //重新指定栈空间位置，不再使用0~0x7c00这部分空间
    //stack段已在下面预留了KERNEL_STACK_SIZE的空间大小，直接将最高地址赋值给esp，esp便可使用这片空间
    mov $(stack + KERNEL_STACK_SIZE), %esp
   10020:	bc e0 0a 07 00       	mov    $0x70ae0,%esp

    //继续初始化内核
    //TODO:后序再来说明该函数的作用
    jmp init_main 
   10025:	e9 0b 5e 00 00       	jmp    15e35 <init_main>

0001002a <exception_handler_unknown>:
//宏结束标志
.endm

//使用定义的异常宏 ,以下都是不可屏蔽中断，cpu必须处理该中断请求。
//                |异常类型|       |IDT索引| |错误码|
exception_handler unknown,              -1, 0    //未知异常
   1002a:	6a 00                	push   $0x0
   1002c:	6a ff                	push   $0xffffffff
   1002e:	60                   	pusha  
   1002f:	1e                   	push   %ds
   10030:	06                   	push   %es
   10031:	0f a0                	push   %fs
   10033:	0f a8                	push   %gs
   10035:	54                   	push   %esp
   10036:	e8 31 2b 00 00       	call   12b6c <do_handler_unknown>
   1003b:	5c                   	pop    %esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider,              0,  0    //除0异常
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 30 2b 00 00       	call   12b88 <do_handler_divider>
   10058:	5c                   	pop    %esp
   10059:	0f a9                	pop    %gs
   1005b:	0f a1                	pop    %fs
   1005d:	07                   	pop    %es
   1005e:	1f                   	pop    %ds
   1005f:	61                   	popa   
   10060:	83 c4 08             	add    $0x8,%esp
   10063:	cf                   	iret   

00010064 <exception_handler_debug>:
exception_handler debug,                1,  0    //debug异常
   10064:	6a 00                	push   $0x0
   10066:	6a 01                	push   $0x1
   10068:	60                   	pusha  
   10069:	1e                   	push   %ds
   1006a:	06                   	push   %es
   1006b:	0f a0                	push   %fs
   1006d:	0f a8                	push   %gs
   1006f:	54                   	push   %esp
   10070:	e8 2f 2b 00 00       	call   12ba4 <do_handler_debug>
   10075:	5c                   	pop    %esp
   10076:	0f a9                	pop    %gs
   10078:	0f a1                	pop    %fs
   1007a:	07                   	pop    %es
   1007b:	1f                   	pop    %ds
   1007c:	61                   	popa   
   1007d:	83 c4 08             	add    $0x8,%esp
   10080:	cf                   	iret   

00010081 <exception_handler_nmi>:
exception_handler nmi,                  2,  0
   10081:	6a 00                	push   $0x0
   10083:	6a 02                	push   $0x2
   10085:	60                   	pusha  
   10086:	1e                   	push   %ds
   10087:	06                   	push   %es
   10088:	0f a0                	push   %fs
   1008a:	0f a8                	push   %gs
   1008c:	54                   	push   %esp
   1008d:	e8 2e 2b 00 00       	call   12bc0 <do_handler_nmi>
   10092:	5c                   	pop    %esp
   10093:	0f a9                	pop    %gs
   10095:	0f a1                	pop    %fs
   10097:	07                   	pop    %es
   10098:	1f                   	pop    %ds
   10099:	61                   	popa   
   1009a:	83 c4 08             	add    $0x8,%esp
   1009d:	cf                   	iret   

0001009e <exception_handler_breakpoint>:
exception_handler breakpoint,           3,  0
   1009e:	6a 00                	push   $0x0
   100a0:	6a 03                	push   $0x3
   100a2:	60                   	pusha  
   100a3:	1e                   	push   %ds
   100a4:	06                   	push   %es
   100a5:	0f a0                	push   %fs
   100a7:	0f a8                	push   %gs
   100a9:	54                   	push   %esp
   100aa:	e8 2d 2b 00 00       	call   12bdc <do_handler_breakpoint>
   100af:	5c                   	pop    %esp
   100b0:	0f a9                	pop    %gs
   100b2:	0f a1                	pop    %fs
   100b4:	07                   	pop    %es
   100b5:	1f                   	pop    %ds
   100b6:	61                   	popa   
   100b7:	83 c4 08             	add    $0x8,%esp
   100ba:	cf                   	iret   

000100bb <exception_handler_overflow>:
exception_handler overflow,             4,  0
   100bb:	6a 00                	push   $0x0
   100bd:	6a 04                	push   $0x4
   100bf:	60                   	pusha  
   100c0:	1e                   	push   %ds
   100c1:	06                   	push   %es
   100c2:	0f a0                	push   %fs
   100c4:	0f a8                	push   %gs
   100c6:	54                   	push   %esp
   100c7:	e8 2c 2b 00 00       	call   12bf8 <do_handler_overflow>
   100cc:	5c                   	pop    %esp
   100cd:	0f a9                	pop    %gs
   100cf:	0f a1                	pop    %fs
   100d1:	07                   	pop    %es
   100d2:	1f                   	pop    %ds
   100d3:	61                   	popa   
   100d4:	83 c4 08             	add    $0x8,%esp
   100d7:	cf                   	iret   

000100d8 <exception_handler_bound_range>:
exception_handler bound_range,          5,  0
   100d8:	6a 00                	push   $0x0
   100da:	6a 05                	push   $0x5
   100dc:	60                   	pusha  
   100dd:	1e                   	push   %ds
   100de:	06                   	push   %es
   100df:	0f a0                	push   %fs
   100e1:	0f a8                	push   %gs
   100e3:	54                   	push   %esp
   100e4:	e8 2b 2b 00 00       	call   12c14 <do_handler_bound_range>
   100e9:	5c                   	pop    %esp
   100ea:	0f a9                	pop    %gs
   100ec:	0f a1                	pop    %fs
   100ee:	07                   	pop    %es
   100ef:	1f                   	pop    %ds
   100f0:	61                   	popa   
   100f1:	83 c4 08             	add    $0x8,%esp
   100f4:	cf                   	iret   

000100f5 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode,       6,  0
   100f5:	6a 00                	push   $0x0
   100f7:	6a 06                	push   $0x6
   100f9:	60                   	pusha  
   100fa:	1e                   	push   %ds
   100fb:	06                   	push   %es
   100fc:	0f a0                	push   %fs
   100fe:	0f a8                	push   %gs
   10100:	54                   	push   %esp
   10101:	e8 2a 2b 00 00       	call   12c30 <do_handler_invalid_opcode>
   10106:	5c                   	pop    %esp
   10107:	0f a9                	pop    %gs
   10109:	0f a1                	pop    %fs
   1010b:	07                   	pop    %es
   1010c:	1f                   	pop    %ds
   1010d:	61                   	popa   
   1010e:	83 c4 08             	add    $0x8,%esp
   10111:	cf                   	iret   

00010112 <exception_handler_device_unavailable>:
exception_handler device_unavailable,   7,  0
   10112:	6a 00                	push   $0x0
   10114:	6a 07                	push   $0x7
   10116:	60                   	pusha  
   10117:	1e                   	push   %ds
   10118:	06                   	push   %es
   10119:	0f a0                	push   %fs
   1011b:	0f a8                	push   %gs
   1011d:	54                   	push   %esp
   1011e:	e8 29 2b 00 00       	call   12c4c <do_handler_device_unavailable>
   10123:	5c                   	pop    %esp
   10124:	0f a9                	pop    %gs
   10126:	0f a1                	pop    %fs
   10128:	07                   	pop    %es
   10129:	1f                   	pop    %ds
   1012a:	61                   	popa   
   1012b:	83 c4 08             	add    $0x8,%esp
   1012e:	cf                   	iret   

0001012f <exception_handler_double_fault>:
exception_handler double_fault,         8,  1
   1012f:	6a 08                	push   $0x8
   10131:	60                   	pusha  
   10132:	1e                   	push   %ds
   10133:	06                   	push   %es
   10134:	0f a0                	push   %fs
   10136:	0f a8                	push   %gs
   10138:	54                   	push   %esp
   10139:	e8 2a 2b 00 00       	call   12c68 <do_handler_double_fault>
   1013e:	5c                   	pop    %esp
   1013f:	0f a9                	pop    %gs
   10141:	0f a1                	pop    %fs
   10143:	07                   	pop    %es
   10144:	1f                   	pop    %ds
   10145:	61                   	popa   
   10146:	83 c4 08             	add    $0x8,%esp
   10149:	cf                   	iret   

0001014a <exception_handler_invalid_tss>:
exception_handler invalid_tss,          10, 1
   1014a:	6a 0a                	push   $0xa
   1014c:	60                   	pusha  
   1014d:	1e                   	push   %ds
   1014e:	06                   	push   %es
   1014f:	0f a0                	push   %fs
   10151:	0f a8                	push   %gs
   10153:	54                   	push   %esp
   10154:	e8 2b 2b 00 00       	call   12c84 <do_handler_invalid_tss>
   10159:	5c                   	pop    %esp
   1015a:	0f a9                	pop    %gs
   1015c:	0f a1                	pop    %fs
   1015e:	07                   	pop    %es
   1015f:	1f                   	pop    %ds
   10160:	61                   	popa   
   10161:	83 c4 08             	add    $0x8,%esp
   10164:	cf                   	iret   

00010165 <exception_handler_segment_not_present>:
exception_handler segment_not_present,  11, 1
   10165:	6a 0b                	push   $0xb
   10167:	60                   	pusha  
   10168:	1e                   	push   %ds
   10169:	06                   	push   %es
   1016a:	0f a0                	push   %fs
   1016c:	0f a8                	push   %gs
   1016e:	54                   	push   %esp
   1016f:	e8 2c 2b 00 00       	call   12ca0 <do_handler_segment_not_present>
   10174:	5c                   	pop    %esp
   10175:	0f a9                	pop    %gs
   10177:	0f a1                	pop    %fs
   10179:	07                   	pop    %es
   1017a:	1f                   	pop    %ds
   1017b:	61                   	popa   
   1017c:	83 c4 08             	add    $0x8,%esp
   1017f:	cf                   	iret   

00010180 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,  12, 1
   10180:	6a 0c                	push   $0xc
   10182:	60                   	pusha  
   10183:	1e                   	push   %ds
   10184:	06                   	push   %es
   10185:	0f a0                	push   %fs
   10187:	0f a8                	push   %gs
   10189:	54                   	push   %esp
   1018a:	e8 2d 2b 00 00       	call   12cbc <do_handler_stack_segment_fault>
   1018f:	5c                   	pop    %esp
   10190:	0f a9                	pop    %gs
   10192:	0f a1                	pop    %fs
   10194:	07                   	pop    %es
   10195:	1f                   	pop    %ds
   10196:	61                   	popa   
   10197:	83 c4 08             	add    $0x8,%esp
   1019a:	cf                   	iret   

0001019b <exception_handler_general_protection>:
exception_handler general_protection,   13, 1
   1019b:	6a 0d                	push   $0xd
   1019d:	60                   	pusha  
   1019e:	1e                   	push   %ds
   1019f:	06                   	push   %es
   101a0:	0f a0                	push   %fs
   101a2:	0f a8                	push   %gs
   101a4:	54                   	push   %esp
   101a5:	e8 2e 2b 00 00       	call   12cd8 <do_handler_general_protection>
   101aa:	5c                   	pop    %esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa   
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret   

000101b6 <exception_handler_page_fault>:
exception_handler page_fault,           14, 1
   101b6:	6a 0e                	push   $0xe
   101b8:	60                   	pusha  
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 c4 2b 00 00       	call   12d89 <do_handler_page_fault>
   101c5:	5c                   	pop    %esp
   101c6:	0f a9                	pop    %gs
   101c8:	0f a1                	pop    %fs
   101ca:	07                   	pop    %es
   101cb:	1f                   	pop    %ds
   101cc:	61                   	popa   
   101cd:	83 c4 08             	add    $0x8,%esp
   101d0:	cf                   	iret   

000101d1 <exception_handler_fpu_error>:
exception_handler fpu_error,            16, 0
   101d1:	6a 00                	push   $0x0
   101d3:	6a 10                	push   $0x10
   101d5:	60                   	pusha  
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 77 2c 00 00       	call   12e59 <do_handler_fpu_error>
   101e2:	5c                   	pop    %esp
   101e3:	0f a9                	pop    %gs
   101e5:	0f a1                	pop    %fs
   101e7:	07                   	pop    %es
   101e8:	1f                   	pop    %ds
   101e9:	61                   	popa   
   101ea:	83 c4 08             	add    $0x8,%esp
   101ed:	cf                   	iret   

000101ee <exception_handler_alignment_check>:
exception_handler alignment_check,      17, 1
   101ee:	6a 11                	push   $0x11
   101f0:	60                   	pusha  
   101f1:	1e                   	push   %ds
   101f2:	06                   	push   %es
   101f3:	0f a0                	push   %fs
   101f5:	0f a8                	push   %gs
   101f7:	54                   	push   %esp
   101f8:	e8 78 2c 00 00       	call   12e75 <do_handler_alignment_check>
   101fd:	5c                   	pop    %esp
   101fe:	0f a9                	pop    %gs
   10200:	0f a1                	pop    %fs
   10202:	07                   	pop    %es
   10203:	1f                   	pop    %ds
   10204:	61                   	popa   
   10205:	83 c4 08             	add    $0x8,%esp
   10208:	cf                   	iret   

00010209 <exception_handler_machine_check>:
exception_handler machine_check,        18, 0
   10209:	6a 00                	push   $0x0
   1020b:	6a 12                	push   $0x12
   1020d:	60                   	pusha  
   1020e:	1e                   	push   %ds
   1020f:	06                   	push   %es
   10210:	0f a0                	push   %fs
   10212:	0f a8                	push   %gs
   10214:	54                   	push   %esp
   10215:	e8 77 2c 00 00       	call   12e91 <do_handler_machine_check>
   1021a:	5c                   	pop    %esp
   1021b:	0f a9                	pop    %gs
   1021d:	0f a1                	pop    %fs
   1021f:	07                   	pop    %es
   10220:	1f                   	pop    %ds
   10221:	61                   	popa   
   10222:	83 c4 08             	add    $0x8,%esp
   10225:	cf                   	iret   

00010226 <exception_handler_smd_exception>:
exception_handler smd_exception,        19, 0
   10226:	6a 00                	push   $0x0
   10228:	6a 13                	push   $0x13
   1022a:	60                   	pusha  
   1022b:	1e                   	push   %ds
   1022c:	06                   	push   %es
   1022d:	0f a0                	push   %fs
   1022f:	0f a8                	push   %gs
   10231:	54                   	push   %esp
   10232:	e8 76 2c 00 00       	call   12ead <do_handler_smd_exception>
   10237:	5c                   	pop    %esp
   10238:	0f a9                	pop    %gs
   1023a:	0f a1                	pop    %fs
   1023c:	07                   	pop    %es
   1023d:	1f                   	pop    %ds
   1023e:	61                   	popa   
   1023f:	83 c4 08             	add    $0x8,%esp
   10242:	cf                   	iret   

00010243 <exception_handler_virtual_exception>:
exception_handler virtual_exception,    20, 0
   10243:	6a 00                	push   $0x0
   10245:	6a 14                	push   $0x14
   10247:	60                   	pusha  
   10248:	1e                   	push   %ds
   10249:	06                   	push   %es
   1024a:	0f a0                	push   %fs
   1024c:	0f a8                	push   %gs
   1024e:	54                   	push   %esp
   1024f:	e8 75 2c 00 00       	call   12ec9 <do_handler_virtual_exception>
   10254:	5c                   	pop    %esp
   10255:	0f a9                	pop    %gs
   10257:	0f a1                	pop    %fs
   10259:	07                   	pop    %es
   1025a:	1f                   	pop    %ds
   1025b:	61                   	popa   
   1025c:	83 c4 08             	add    $0x8,%esp
   1025f:	cf                   	iret   

00010260 <exception_handler_control_exception>:
exception_handler control_exception,    21, 1
   10260:	6a 15                	push   $0x15
   10262:	60                   	pusha  
   10263:	1e                   	push   %ds
   10264:	06                   	push   %es
   10265:	0f a0                	push   %fs
   10267:	0f a8                	push   %gs
   10269:	54                   	push   %esp
   1026a:	e8 76 2c 00 00       	call   12ee5 <do_handler_control_exception>
   1026f:	5c                   	pop    %esp
   10270:	0f a9                	pop    %gs
   10272:	0f a1                	pop    %fs
   10274:	07                   	pop    %es
   10275:	1f                   	pop    %ds
   10276:	61                   	popa   
   10277:	83 c4 08             	add    $0x8,%esp
   1027a:	cf                   	iret   

0001027b <exception_handler_time>:

//定时器的中断处理函数
exception_handler time,                 0x20, 0 
   1027b:	6a 00                	push   $0x0
   1027d:	6a 20                	push   $0x20
   1027f:	60                   	pusha  
   10280:	1e                   	push   %ds
   10281:	06                   	push   %es
   10282:	0f a0                	push   %fs
   10284:	0f a8                	push   %gs
   10286:	54                   	push   %esp
   10287:	e8 d2 44 00 00       	call   1475e <do_handler_time>
   1028c:	5c                   	pop    %esp
   1028d:	0f a9                	pop    %gs
   1028f:	0f a1                	pop    %fs
   10291:	07                   	pop    %es
   10292:	1f                   	pop    %ds
   10293:	61                   	popa   
   10294:	83 c4 08             	add    $0x8,%esp
   10297:	cf                   	iret   

00010298 <exception_handler_kbd>:
//键盘的中断处理函数
exception_handler kbd,                 0x21, 0 
   10298:	6a 00                	push   $0x0
   1029a:	6a 21                	push   $0x21
   1029c:	60                   	pusha  
   1029d:	1e                   	push   %ds
   1029e:	06                   	push   %es
   1029f:	0f a0                	push   %fs
   102a1:	0f a8                	push   %gs
   102a3:	54                   	push   %esp
   102a4:	e8 ca 43 00 00       	call   14673 <do_handler_kbd>
   102a9:	5c                   	pop    %esp
   102aa:	0f a9                	pop    %gs
   102ac:	0f a1                	pop    %fs
   102ae:	07                   	pop    %es
   102af:	1f                   	pop    %ds
   102b0:	61                   	popa   
   102b1:	83 c4 08             	add    $0x8,%esp
   102b4:	cf                   	iret   

000102b5 <simple_switch>:
//TODO:该部分为另一种任务切换时cpu上下文环境的保存方法，并未被调用
    .text
    .global simple_switch
simple_switch:  //simple_switch(from, to)
    //1.获取参数，跳过4字节的 eip
    mov 8(%esp), %edx   //获取 to, 地址(指针) --> 目标任务的栈空间对应的 esp 的值
   102b5:	8b 54 24 08          	mov    0x8(%esp),%edx
    mov 4(%esp), %eax   //获取 from, 地址(指针) --> 当前任务的栈空间对应的 esp 的值
   102b9:	8b 44 24 04          	mov    0x4(%esp),%eax


    //2.被调用者保存当前任务的 ebp, ebx, esi, edi 到当前任务的栈中
    //eax, ecx, edx, eip, eflags 已由调用者压入当前任务的栈中
    push %ebp
   102bd:	55                   	push   %ebp
    push %ebx
   102be:	53                   	push   %ebx
    push %esi
   102bf:	56                   	push   %esi
    push %edi
   102c0:	57                   	push   %edi

    //3.更新当前任务栈空间的 esp
    mov %esp, (%eax)
   102c1:	89 20                	mov    %esp,(%eax)

    //3.进行任务栈的切换
    mov (%edx), %esp
   102c3:	8b 22                	mov    (%edx),%esp


    //4.恢复切换后的任务状态，ebp, ebx, esi, edi 手动恢复
    //eax, ecx, edx, eip, eflags, 是在当前任务(c函数)调用simple_switch时已压入当前任务栈中，
    //调用 ret 后会自行弹出并恢复
    pop %edi
   102c5:	5f                   	pop    %edi
    pop %esi
   102c6:	5e                   	pop    %esi
    pop %ebx
   102c7:	5b                   	pop    %ebx
    pop %ebp
   102c8:	5d                   	pop    %ebp

    //5.恢复切换后的任务执行流，相当于此时 esp ->[eip]， 即 pop %eip
    ret 
   102c9:	c3                   	ret    

000102ca <exception_handler_syscall>:

    //注意：cpu只自动保护了 cs eip ss esp寄存器，其它寄存器没有被维护，可能在调用门处理函数里被修改
    //所以需要手动压入，即保护cpu上下文环境，也为fork系统调用提供cpu上下文环境

    //1.用 pusha 指令压入8个通用寄存器
    pusha
   102ca:	60                   	pusha  

    //2.压入其他段寄存器
    push %ds
   102cb:	1e                   	push   %ds
    push %es
   102cc:	06                   	push   %es
    push %fs
   102cd:	0f a0                	push   %fs
    push %gs
   102cf:	0f a8                	push   %gs

    //3.压入eflags寄存器
    pushf
   102d1:	9c                   	pushf  

    //4.将当前 esp 的值压入栈中，当作调用门栈帧的起始地址
    push %esp
   102d2:	54                   	push   %esp

    //5.调用系统调用处理函数，按id进一步判断需要进行的系统调用并执行
    call do_handler_syscall
   102d3:	e8 72 30 00 00       	call   1334a <do_handler_syscall>


    //5.恢复现场
    pop %esp
   102d8:	5c                   	pop    %esp
    popf
   102d9:	9d                   	popf   
    pop %gs
   102da:	0f a9                	pop    %gs
    pop %fs
   102dc:	0f a1                	pop    %fs
    pop %es
   102de:	07                   	pop    %es
    pop %ds
   102df:	1f                   	pop    %ds
    popa
   102e0:	61                   	popa   
    //如果要变换特权级，它会加载被调用者堆栈上的CS和EIP，并增加ESP跳过参数，
    //然后ESP将指向被保存过的调用者SS和ESP¹。
    //它还会对目标代码段特权级和目标栈段特权级做严格的检查，
    //要求代码段可执行特权级CPL (即DPL) == 栈段选择子请求特权级RPL == 栈段目标内存特权级DPL²。
    
    retf $(5*4) 
   102e1:	ca 14 00             	lret   $0x14

000102e4 <down2>:
 * 
 * @param size 
 * @param bound 一般取2的n次方
 * @return uint32_t 
 */
static inline uint32_t down2(uint32_t size, uint32_t bound) {
   102e4:	55                   	push   %ebp
   102e5:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);  
   102e7:	8b 45 0c             	mov    0xc(%ebp),%eax
   102ea:	f7 d8                	neg    %eax
   102ec:	23 45 08             	and    0x8(%ebp),%eax
}
   102ef:	5d                   	pop    %ebp
   102f0:	c3                   	ret    

000102f1 <up2>:
 * 
 * @param size 
 * @param bound 一般取2的n次方
 * @return uint32_t 
 */
static inline uint32_t up2(uint32_t size, uint32_t bound) {
   102f1:	55                   	push   %ebp
   102f2:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   102f4:	8b 55 08             	mov    0x8(%ebp),%edx
   102f7:	8b 45 0c             	mov    0xc(%ebp),%eax
   102fa:	01 d0                	add    %edx,%eax
   102fc:	8d 50 ff             	lea    -0x1(%eax),%edx
   102ff:	8b 45 0c             	mov    0xc(%ebp),%eax
   10302:	f7 d8                	neg    %eax
   10304:	21 d0                	and    %edx,%eax
}
   10306:	5d                   	pop    %ebp
   10307:	c3                   	ret    

00010308 <write_cr3>:
 * 它含有存放页目录表页面的物理地址，
 * 因此 CR3 也被称为 PDBR（Page-Directory Base address Register）。
 *
 * @param data
 */
static inline void write_cr3(uint32_t data) {
   10308:	55                   	push   %ebp
   10309:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("mov %[v], %%cr3" : : [v] "r"(data));
   1030b:	8b 45 08             	mov    0x8(%ebp),%eax
   1030e:	0f 22 d8             	mov    %eax,%cr3
}
   10311:	90                   	nop
   10312:	5d                   	pop    %ebp
   10313:	c3                   	ret    

00010314 <pde_index>:
 * @brief 获取虚拟地址的高10位，及对应的页目录项在页目录表中的索引
 * 
 * @param vstart 
 * @return uint32_t 
 */
static inline uint32_t pde_index(uint32_t vstart) {
   10314:	55                   	push   %ebp
   10315:	89 e5                	mov    %esp,%ebp
    return (vstart >> 22);
   10317:	8b 45 08             	mov    0x8(%ebp),%eax
   1031a:	c1 e8 16             	shr    $0x16,%eax
}
   1031d:	5d                   	pop    %ebp
   1031e:	c3                   	ret    

0001031f <pte_index>:
 * @brief 获取虚拟地址的次10位，及对应的页表项在页表中的索引
 * 
 * @param vstart 
 * @return uint32_t 
 */
static inline uint32_t pte_index(uint32_t vstart) {
   1031f:	55                   	push   %ebp
   10320:	89 e5                	mov    %esp,%ebp
    return (vstart >> 12) & 0x3ff;
   10322:	8b 45 08             	mov    0x8(%ebp),%eax
   10325:	c1 e8 0c             	shr    $0xc,%eax
   10328:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   1032d:	5d                   	pop    %ebp
   1032e:	c3                   	ret    

0001032f <pde_to_pt_addr>:
 * @brief 获取页目录项中对应的页表的起始地址，及该页表第一个页表项的地址
 * 
 * @param pde 页目录项
 * @return uint32_t 返回的页表的地址
 */
static inline uint32_t pde_to_pt_addr(pde_t *pde) {
   1032f:	55                   	push   %ebp
   10330:	89 e5                	mov    %esp,%ebp
    //高20位为页表的物理地址的有效位，将其左移12位，及按4kb对齐后才是该页的物理地址
    return pde->phy_pt_addr << 12;
   10332:	8b 45 08             	mov    0x8(%ebp),%eax
   10335:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   10339:	c0 ea 04             	shr    $0x4,%dl
   1033c:	0f b6 ca             	movzbl %dl,%ecx
   1033f:	0f b6 50 02          	movzbl 0x2(%eax),%edx
   10343:	c1 e2 04             	shl    $0x4,%edx
   10346:	09 ca                	or     %ecx,%edx
   10348:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   1034c:	c1 e0 0c             	shl    $0xc,%eax
   1034f:	09 d0                	or     %edx,%eax
   10351:	c1 e0 0c             	shl    $0xc,%eax
}
   10354:	5d                   	pop    %ebp
   10355:	c3                   	ret    

00010356 <pte_to_pg_addr>:
 * @brief 获取页表项中对应的页的起始地址
 * 
 * @param pte 页表项
 * @return uint32_t 返回的页的地址
 */
static inline uint32_t pte_to_pg_addr(pte_t *pte) {
   10356:	55                   	push   %ebp
   10357:	89 e5                	mov    %esp,%ebp
    //高20位为页的物理地址有效位，将其左移12位，及按4kb对齐后才是该页的物理地址
    return pte->phy_page_addr << 12;
   10359:	8b 45 08             	mov    0x8(%ebp),%eax
   1035c:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   10360:	c0 ea 04             	shr    $0x4,%dl
   10363:	0f b6 ca             	movzbl %dl,%ecx
   10366:	0f b6 50 02          	movzbl 0x2(%eax),%edx
   1036a:	c1 e2 04             	shl    $0x4,%edx
   1036d:	09 ca                	or     %ecx,%edx
   1036f:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   10373:	c1 e0 0c             	shl    $0xc,%eax
   10376:	09 d0                	or     %edx,%eax
   10378:	c1 e0 0c             	shl    $0xc,%eax
}
   1037b:	5d                   	pop    %ebp
   1037c:	c3                   	ret    

0001037d <get_pte_privilege>:
 * @brief 获取页表项的权限
 * 
 * @param pte 
 * @return uint32_t 
 */
static inline uint32_t get_pte_privilege(pte_t *pte) {
   1037d:	55                   	push   %ebp
   1037e:	89 e5                	mov    %esp,%ebp
    return pte->v & 0x1ff;  //直接获取低9位即为所有权限
   10380:	8b 45 08             	mov    0x8(%ebp),%eax
   10383:	8b 00                	mov    (%eax),%eax
   10385:	25 ff 01 00 00       	and    $0x1ff,%eax
}
   1038a:	5d                   	pop    %ebp
   1038b:	c3                   	ret    

0001038c <mmu_set_page_dir>:
/**
 * @brief 设置页目录表的起始地址，将起始地址写入CR3寄存器
 * 
 * @param paddr 页目录表的物理起始地址
 */
static inline void mmu_set_page_dir(uint32_t paddr) {
   1038c:	55                   	push   %ebp
   1038d:	89 e5                	mov    %esp,%ebp

    //设置cr3寄存器的高20位为页目录表的地址，因为按4kb对齐，所以
    //页目录表的起始地址page_dir的高20位才为有效位，低12位为0，将cr3的低12位就设置为0
    write_cr3(paddr);
   1038f:	ff 75 08             	push   0x8(%ebp)
   10392:	e8 71 ff ff ff       	call   10308 <write_cr3>
   10397:	83 c4 04             	add    $0x4,%esp
}
   1039a:	90                   	nop
   1039b:	c9                   	leave  
   1039c:	c3                   	ret    

0001039d <page_index>:
 * @brief 获取页的索引
 * 
 * @param alloc 
 * @param page_addr 
 */
static inline int page_index(addr_alloc_t *alloc, uint32_t page_addr) {
   1039d:	55                   	push   %ebp
   1039e:	89 e5                	mov    %esp,%ebp
   103a0:	53                   	push   %ebx
  return (page_addr - alloc->start) / alloc->page_size;
   103a1:	8b 45 08             	mov    0x8(%ebp),%eax
   103a4:	8b 50 1c             	mov    0x1c(%eax),%edx
   103a7:	8b 45 0c             	mov    0xc(%ebp),%eax
   103aa:	29 d0                	sub    %edx,%eax
   103ac:	89 c1                	mov    %eax,%ecx
   103ae:	8b 45 08             	mov    0x8(%ebp),%eax
   103b1:	8b 58 24             	mov    0x24(%eax),%ebx
   103b4:	89 c8                	mov    %ecx,%eax
   103b6:	ba 00 00 00 00       	mov    $0x0,%edx
   103bb:	f7 f3                	div    %ebx
}
   103bd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   103c0:	c9                   	leave  
   103c1:	c3                   	ret    

000103c2 <page_ref_add>:
 * @brief 为页的引用计数+1
 * 
 * @param alloc 
 * @param page_addr 页起始地址
 */
static inline void page_ref_add(addr_alloc_t *alloc, uint32_t page_addr) {
   103c2:	55                   	push   %ebp
   103c3:	89 e5                	mov    %esp,%ebp
   103c5:	83 ec 18             	sub    $0x18,%esp
  //计算出页的索引
  int index = page_index(alloc, page_addr);
   103c8:	ff 75 0c             	push   0xc(%ebp)
   103cb:	ff 75 08             	push   0x8(%ebp)
   103ce:	e8 ca ff ff ff       	call   1039d <page_index>
   103d3:	83 c4 08             	add    $0x8,%esp
   103d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
  
  mutex_lock(&alloc->mutex);
   103d9:	8b 45 08             	mov    0x8(%ebp),%eax
   103dc:	83 ec 0c             	sub    $0xc,%esp
   103df:	50                   	push   %eax
   103e0:	e8 51 5b 00 00       	call   15f36 <mutex_lock>
   103e5:	83 c4 10             	add    $0x10,%esp
  //引用计数+1
  alloc->page_ref[index]++;
   103e8:	8b 55 08             	mov    0x8(%ebp),%edx
   103eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   103ee:	01 d0                	add    %edx,%eax
   103f0:	83 c0 28             	add    $0x28,%eax
   103f3:	0f b6 00             	movzbl (%eax),%eax
   103f6:	8d 50 01             	lea    0x1(%eax),%edx
   103f9:	8b 4d 08             	mov    0x8(%ebp),%ecx
   103fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   103ff:	01 c8                	add    %ecx,%eax
   10401:	83 c0 28             	add    $0x28,%eax
   10404:	88 10                	mov    %dl,(%eax)

  mutex_unlock(&alloc->mutex);
   10406:	8b 45 08             	mov    0x8(%ebp),%eax
   10409:	83 ec 0c             	sub    $0xc,%esp
   1040c:	50                   	push   %eax
   1040d:	e8 b5 5b 00 00       	call   15fc7 <mutex_unlock>
   10412:	83 c4 10             	add    $0x10,%esp
 }
   10415:	90                   	nop
   10416:	c9                   	leave  
   10417:	c3                   	ret    

00010418 <page_ref_sub>:
 * @brief 页的引用计数-1
 * 
 * @param alloc 
 * @param page_addr 
 */
static inline void page_ref_sub(addr_alloc_t *alloc, uint32_t page_addr) {
   10418:	55                   	push   %ebp
   10419:	89 e5                	mov    %esp,%ebp
   1041b:	83 ec 18             	sub    $0x18,%esp
  //计算出页的索引
  int index = page_index(alloc, page_addr);
   1041e:	ff 75 0c             	push   0xc(%ebp)
   10421:	ff 75 08             	push   0x8(%ebp)
   10424:	e8 74 ff ff ff       	call   1039d <page_index>
   10429:	83 c4 08             	add    $0x8,%esp
   1042c:	89 45 f4             	mov    %eax,-0xc(%ebp)

  mutex_lock(&alloc->mutex);
   1042f:	8b 45 08             	mov    0x8(%ebp),%eax
   10432:	83 ec 0c             	sub    $0xc,%esp
   10435:	50                   	push   %eax
   10436:	e8 fb 5a 00 00       	call   15f36 <mutex_lock>
   1043b:	83 c4 10             	add    $0x10,%esp
  //引用计数-1
  if (alloc->page_ref[index] > 0) 
   1043e:	8b 55 08             	mov    0x8(%ebp),%edx
   10441:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10444:	01 d0                	add    %edx,%eax
   10446:	83 c0 28             	add    $0x28,%eax
   10449:	0f b6 00             	movzbl (%eax),%eax
   1044c:	84 c0                	test   %al,%al
   1044e:	74 1e                	je     1046e <page_ref_sub+0x56>
      alloc->page_ref[index]--;    
   10450:	8b 55 08             	mov    0x8(%ebp),%edx
   10453:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10456:	01 d0                	add    %edx,%eax
   10458:	83 c0 28             	add    $0x28,%eax
   1045b:	0f b6 00             	movzbl (%eax),%eax
   1045e:	8d 50 ff             	lea    -0x1(%eax),%edx
   10461:	8b 4d 08             	mov    0x8(%ebp),%ecx
   10464:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10467:	01 c8                	add    %ecx,%eax
   10469:	83 c0 28             	add    $0x28,%eax
   1046c:	88 10                	mov    %dl,(%eax)

  mutex_unlock(&alloc->mutex);
   1046e:	8b 45 08             	mov    0x8(%ebp),%eax
   10471:	83 ec 0c             	sub    $0xc,%esp
   10474:	50                   	push   %eax
   10475:	e8 4d 5b 00 00       	call   15fc7 <mutex_unlock>
   1047a:	83 c4 10             	add    $0x10,%esp
 }
   1047d:	90                   	nop
   1047e:	c9                   	leave  
   1047f:	c3                   	ret    

00010480 <get_page_ref>:
 * @brief 获取页的引用计数
 * 
 * @param alloc 
 * @param page_addr 
 */
static inline int get_page_ref(addr_alloc_t *alloc, uint32_t page_addr) {
   10480:	55                   	push   %ebp
   10481:	89 e5                	mov    %esp,%ebp
   10483:	83 ec 18             	sub    $0x18,%esp
    //计算出页的索引
  int index = page_index(alloc, page_addr);
   10486:	ff 75 0c             	push   0xc(%ebp)
   10489:	ff 75 08             	push   0x8(%ebp)
   1048c:	e8 0c ff ff ff       	call   1039d <page_index>
   10491:	83 c4 08             	add    $0x8,%esp
   10494:	89 45 f4             	mov    %eax,-0xc(%ebp)

  mutex_lock(&alloc->mutex);
   10497:	8b 45 08             	mov    0x8(%ebp),%eax
   1049a:	83 ec 0c             	sub    $0xc,%esp
   1049d:	50                   	push   %eax
   1049e:	e8 93 5a 00 00       	call   15f36 <mutex_lock>
   104a3:	83 c4 10             	add    $0x10,%esp

  int ref = alloc->page_ref[index];
   104a6:	8b 55 08             	mov    0x8(%ebp),%edx
   104a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   104ac:	01 d0                	add    %edx,%eax
   104ae:	83 c0 28             	add    $0x28,%eax
   104b1:	0f b6 00             	movzbl (%eax),%eax
   104b4:	0f b6 c0             	movzbl %al,%eax
   104b7:	89 45 f0             	mov    %eax,-0x10(%ebp)

  mutex_unlock(&alloc->mutex);
   104ba:	8b 45 08             	mov    0x8(%ebp),%eax
   104bd:	83 ec 0c             	sub    $0xc,%esp
   104c0:	50                   	push   %eax
   104c1:	e8 01 5b 00 00       	call   15fc7 <mutex_unlock>
   104c6:	83 c4 10             	add    $0x10,%esp

  return ref;
   104c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   104cc:	c9                   	leave  
   104cd:	c3                   	ret    

000104ce <clear_page_ref>:
 * @brief 清除所有页的引用
 * 
 * @param alloc 
 * @return int 
 */
static inline void clear_page_ref(addr_alloc_t *alloc) {
   104ce:	55                   	push   %ebp
   104cf:	89 e5                	mov    %esp,%ebp
   104d1:	83 ec 08             	sub    $0x8,%esp

  mutex_lock(&alloc->mutex);
   104d4:	8b 45 08             	mov    0x8(%ebp),%eax
   104d7:	83 ec 0c             	sub    $0xc,%esp
   104da:	50                   	push   %eax
   104db:	e8 56 5a 00 00       	call   15f36 <mutex_lock>
   104e0:	83 c4 10             	add    $0x10,%esp

  kernel_memset(alloc->page_ref, 0, alloc->size / alloc->page_size);
   104e3:	8b 45 08             	mov    0x8(%ebp),%eax
   104e6:	8b 40 20             	mov    0x20(%eax),%eax
   104e9:	8b 55 08             	mov    0x8(%ebp),%edx
   104ec:	8b 4a 24             	mov    0x24(%edx),%ecx
   104ef:	ba 00 00 00 00       	mov    $0x0,%edx
   104f4:	f7 f1                	div    %ecx
   104f6:	89 c2                	mov    %eax,%edx
   104f8:	8b 45 08             	mov    0x8(%ebp),%eax
   104fb:	83 c0 28             	add    $0x28,%eax
   104fe:	83 ec 04             	sub    $0x4,%esp
   10501:	52                   	push   %edx
   10502:	6a 00                	push   $0x0
   10504:	50                   	push   %eax
   10505:	e8 11 66 00 00       	call   16b1b <kernel_memset>
   1050a:	83 c4 10             	add    $0x10,%esp

  mutex_unlock(&alloc->mutex);
   1050d:	8b 45 08             	mov    0x8(%ebp),%eax
   10510:	83 ec 0c             	sub    $0xc,%esp
   10513:	50                   	push   %eax
   10514:	e8 ae 5a 00 00       	call   15fc7 <mutex_unlock>
   10519:	83 c4 10             	add    $0x10,%esp
}
   1051c:	90                   	nop
   1051d:	c9                   	leave  
   1051e:	c3                   	ret    

0001051f <addr_alloc_init>:
 * @param start 管理内存的起始地址
 * @param size 管理内存的大小
 * @param page_size 管理的内存页的大小
 */
static void addr_alloc_init(addr_alloc_t *alloc, uint8_t *bits, uint32_t start,
                            uint32_t size, uint32_t page_size) {
   1051f:	55                   	push   %ebp
   10520:	89 e5                	mov    %esp,%ebp
   10522:	83 ec 08             	sub    $0x8,%esp
  mutex_init(&alloc->mutex);
   10525:	8b 45 08             	mov    0x8(%ebp),%eax
   10528:	83 ec 0c             	sub    $0xc,%esp
   1052b:	50                   	push   %eax
   1052c:	e8 b8 59 00 00       	call   15ee9 <mutex_init>
   10531:	83 c4 10             	add    $0x10,%esp
  alloc->start = start;
   10534:	8b 45 08             	mov    0x8(%ebp),%eax
   10537:	8b 55 10             	mov    0x10(%ebp),%edx
   1053a:	89 50 1c             	mov    %edx,0x1c(%eax)
  alloc->size = size;
   1053d:	8b 45 08             	mov    0x8(%ebp),%eax
   10540:	8b 55 14             	mov    0x14(%ebp),%edx
   10543:	89 50 20             	mov    %edx,0x20(%eax)
  alloc->page_size = page_size;
   10546:	8b 45 08             	mov    0x8(%ebp),%eax
   10549:	8b 55 18             	mov    0x18(%ebp),%edx
   1054c:	89 50 24             	mov    %edx,0x24(%eax)
  bitmap_init(&alloc->bitmap, bits, alloc->size / alloc->page_size, 0);
   1054f:	8b 45 08             	mov    0x8(%ebp),%eax
   10552:	8b 40 20             	mov    0x20(%eax),%eax
   10555:	8b 55 08             	mov    0x8(%ebp),%edx
   10558:	8b 4a 24             	mov    0x24(%edx),%ecx
   1055b:	ba 00 00 00 00       	mov    $0x0,%edx
   10560:	f7 f1                	div    %ecx
   10562:	89 c2                	mov    %eax,%edx
   10564:	8b 45 08             	mov    0x8(%ebp),%eax
   10567:	83 c0 14             	add    $0x14,%eax
   1056a:	6a 00                	push   $0x0
   1056c:	52                   	push   %edx
   1056d:	ff 75 0c             	push   0xc(%ebp)
   10570:	50                   	push   %eax
   10571:	e8 d8 60 00 00       	call   1664e <bitmap_init>
   10576:	83 c4 10             	add    $0x10,%esp
  //清空页的引用数组
  kernel_memset(alloc->page_ref, 0,  alloc->size / alloc->page_size);
   10579:	8b 45 08             	mov    0x8(%ebp),%eax
   1057c:	8b 40 20             	mov    0x20(%eax),%eax
   1057f:	8b 55 08             	mov    0x8(%ebp),%edx
   10582:	8b 4a 24             	mov    0x24(%edx),%ecx
   10585:	ba 00 00 00 00       	mov    $0x0,%edx
   1058a:	f7 f1                	div    %ecx
   1058c:	89 c2                	mov    %eax,%edx
   1058e:	8b 45 08             	mov    0x8(%ebp),%eax
   10591:	83 c0 28             	add    $0x28,%eax
   10594:	83 ec 04             	sub    $0x4,%esp
   10597:	52                   	push   %edx
   10598:	6a 00                	push   $0x0
   1059a:	50                   	push   %eax
   1059b:	e8 7b 65 00 00       	call   16b1b <kernel_memset>
   105a0:	83 c4 10             	add    $0x10,%esp
}
   105a3:	90                   	nop
   105a4:	c9                   	leave  
   105a5:	c3                   	ret    

000105a6 <addr_alloc_page>:
 *
 * @param alloc
 * @param page_count 申请页的数量
 * @return uint32_t 申请的第一个页的起始地址， 0：分配失败
 */
static uint32_t addr_alloc_page(addr_alloc_t *alloc, int page_count) {
   105a6:	55                   	push   %ebp
   105a7:	89 e5                	mov    %esp,%ebp
   105a9:	83 ec 18             	sub    $0x18,%esp
  uint32_t addr = 0;  // 记录分配的页的起始地址
   105ac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  mutex_lock(&alloc->mutex);
   105b3:	8b 45 08             	mov    0x8(%ebp),%eax
   105b6:	83 ec 0c             	sub    $0xc,%esp
   105b9:	50                   	push   %eax
   105ba:	e8 77 59 00 00       	call   15f36 <mutex_lock>
   105bf:	83 c4 10             	add    $0x10,%esp

  // 在位图中取连续的page_count个页进行分配
  int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   105c2:	8b 45 08             	mov    0x8(%ebp),%eax
   105c5:	83 c0 14             	add    $0x14,%eax
   105c8:	83 ec 04             	sub    $0x4,%esp
   105cb:	ff 75 0c             	push   0xc(%ebp)
   105ce:	6a 00                	push   $0x0
   105d0:	50                   	push   %eax
   105d1:	e8 ad 62 00 00       	call   16883 <bitmap_alloc_nbits>
   105d6:	83 c4 10             	add    $0x10,%esp
   105d9:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (page_count >= 0) {
   105dc:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   105e0:	78 17                	js     105f9 <addr_alloc_page+0x53>
    // 计算出申请到的第一个页的起始地址
    addr = alloc->start + page_index * alloc->page_size;
   105e2:	8b 45 08             	mov    0x8(%ebp),%eax
   105e5:	8b 48 1c             	mov    0x1c(%eax),%ecx
   105e8:	8b 45 08             	mov    0x8(%ebp),%eax
   105eb:	8b 50 24             	mov    0x24(%eax),%edx
   105ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
   105f1:	0f af c2             	imul   %edx,%eax
   105f4:	01 c8                	add    %ecx,%eax
   105f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
  }

  mutex_unlock(&alloc->mutex);
   105f9:	8b 45 08             	mov    0x8(%ebp),%eax
   105fc:	83 ec 0c             	sub    $0xc,%esp
   105ff:	50                   	push   %eax
   10600:	e8 c2 59 00 00       	call   15fc7 <mutex_unlock>
   10605:	83 c4 10             	add    $0x10,%esp

  return addr;
   10608:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   1060b:	c9                   	leave  
   1060c:	c3                   	ret    

0001060d <addr_free_page>:
 *
 * @param alloc
 * @param addr 第一个内存页的起始地址
 * @param page_count 内存页的数量
 */
static void addr_free_page(addr_alloc_t *alloc, uint32_t addr, int page_count) {
   1060d:	55                   	push   %ebp
   1060e:	89 e5                	mov    %esp,%ebp
   10610:	83 ec 18             	sub    $0x18,%esp
  mutex_lock(&alloc->mutex);
   10613:	8b 45 08             	mov    0x8(%ebp),%eax
   10616:	83 ec 0c             	sub    $0xc,%esp
   10619:	50                   	push   %eax
   1061a:	e8 17 59 00 00       	call   15f36 <mutex_lock>
   1061f:	83 c4 10             	add    $0x10,%esp

  //将所有页引用-1
  for (int i = 0; i < page_count; ++i) {
   10622:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10629:	eb 64                	jmp    1068f <addr_free_page+0x82>
    //获取当前页的地址
    uint32_t page_addr = addr + i * MEM_PAGE_SIZE;
   1062b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1062e:	c1 e0 0c             	shl    $0xc,%eax
   10631:	89 c2                	mov    %eax,%edx
   10633:	8b 45 0c             	mov    0xc(%ebp),%eax
   10636:	01 d0                	add    %edx,%eax
   10638:	89 45 f0             	mov    %eax,-0x10(%ebp)
    //引用-1
    page_ref_sub(alloc, page_addr);
   1063b:	83 ec 08             	sub    $0x8,%esp
   1063e:	ff 75 f0             	push   -0x10(%ebp)
   10641:	ff 75 08             	push   0x8(%ebp)
   10644:	e8 cf fd ff ff       	call   10418 <page_ref_sub>
   10649:	83 c4 10             	add    $0x10,%esp
    //获取当前页引用
    int ref = get_page_ref(alloc, page_addr);
   1064c:	83 ec 08             	sub    $0x8,%esp
   1064f:	ff 75 f0             	push   -0x10(%ebp)
   10652:	ff 75 08             	push   0x8(%ebp)
   10655:	e8 26 fe ff ff       	call   10480 <get_page_ref>
   1065a:	83 c4 10             	add    $0x10,%esp
   1065d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (ref == 0)  {//引用为0，释放该页
   10660:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   10664:	75 25                	jne    1068b <addr_free_page+0x7e>
        bitmap_set_bit(&alloc->bitmap, page_index(alloc, page_addr), 1, 0);
   10666:	83 ec 08             	sub    $0x8,%esp
   10669:	ff 75 f0             	push   -0x10(%ebp)
   1066c:	ff 75 08             	push   0x8(%ebp)
   1066f:	e8 29 fd ff ff       	call   1039d <page_index>
   10674:	83 c4 10             	add    $0x10,%esp
   10677:	8b 55 08             	mov    0x8(%ebp),%edx
   1067a:	83 c2 14             	add    $0x14,%edx
   1067d:	6a 00                	push   $0x0
   1067f:	6a 01                	push   $0x1
   10681:	50                   	push   %eax
   10682:	52                   	push   %edx
   10683:	e8 d2 60 00 00       	call   1675a <bitmap_set_bit>
   10688:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < page_count; ++i) {
   1068b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1068f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10692:	3b 45 10             	cmp    0x10(%ebp),%eax
   10695:	7c 94                	jl     1062b <addr_free_page+0x1e>
    }

  }

  mutex_unlock(&alloc->mutex);
   10697:	8b 45 08             	mov    0x8(%ebp),%eax
   1069a:	83 ec 0c             	sub    $0xc,%esp
   1069d:	50                   	push   %eax
   1069e:	e8 24 59 00 00       	call   15fc7 <mutex_unlock>
   106a3:	83 c4 10             	add    $0x10,%esp
}
   106a6:	90                   	nop
   106a7:	c9                   	leave  
   106a8:	c3                   	ret    

000106a9 <show_mem_info>:
/**
 * @brief  打印1m以内内存的可用空间
 * 
 * @param boot_info 
 */
static void show_mem_info(boot_info_t *boot_info) {
   106a9:	55                   	push   %ebp
   106aa:	89 e5                	mov    %esp,%ebp
   106ac:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:\n");
   106af:	83 ec 0c             	sub    $0xc,%esp
   106b2:	68 c0 73 01 00       	push   $0x173c0
   106b7:	e8 5c 6c 00 00       	call   17318 <log_printf>
   106bc:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   106bf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   106c6:	eb 29                	jmp    106f1 <show_mem_info+0x48>
        log_printf("[%d]: 0x%x - 0x%x\n", i, boot_info->ram_region_cfg[i].start, boot_info->ram_region_cfg[i].size);
   106c8:	8b 45 08             	mov    0x8(%ebp),%eax
   106cb:	8b 55 f4             	mov    -0xc(%ebp),%edx
   106ce:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   106d2:	8b 45 08             	mov    0x8(%ebp),%eax
   106d5:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   106d8:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   106db:	52                   	push   %edx
   106dc:	50                   	push   %eax
   106dd:	ff 75 f4             	push   -0xc(%ebp)
   106e0:	68 cd 73 01 00       	push   $0x173cd
   106e5:	e8 2e 6c 00 00       	call   17318 <log_printf>
   106ea:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   106ed:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   106f1:	8b 45 08             	mov    0x8(%ebp),%eax
   106f4:	8b 40 50             	mov    0x50(%eax),%eax
   106f7:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   106fa:	7c cc                	jl     106c8 <show_mem_info+0x1f>
    }

    log_printf("\n");
   106fc:	83 ec 0c             	sub    $0xc,%esp
   106ff:	68 e0 73 01 00       	push   $0x173e0
   10704:	e8 0f 6c 00 00       	call   17318 <log_printf>
   10709:	83 c4 10             	add    $0x10,%esp
}
   1070c:	90                   	nop
   1070d:	c9                   	leave  
   1070e:	c3                   	ret    

0001070f <total_mem_size>:
 * @brief  计算总的可用内存空间大小
 * 
 * @param boot_info 
 * @return uint32_t 
 */
static uint32_t total_mem_size(boot_info_t *boot_info) {
   1070f:	55                   	push   %ebp
   10710:	89 e5                	mov    %esp,%ebp
   10712:	83 ec 10             	sub    $0x10,%esp
    uint32_t mem_size = 0;
   10715:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   1071c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   10723:	eb 11                	jmp    10736 <total_mem_size+0x27>
        mem_size += boot_info->ram_region_cfg[i].size;
   10725:	8b 45 08             	mov    0x8(%ebp),%eax
   10728:	8b 55 f8             	mov    -0x8(%ebp),%edx
   1072b:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
   1072f:	01 45 fc             	add    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   10732:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   10736:	8b 45 08             	mov    0x8(%ebp),%eax
   10739:	8b 40 50             	mov    0x50(%eax),%eax
   1073c:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   1073f:	7c e4                	jl     10725 <total_mem_size+0x16>
    }

    return mem_size;
   10741:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10744:	c9                   	leave  
   10745:	c3                   	ret    

00010746 <find_pte>:
 *                 1：表示创建一个新页目录项，并为其分配一个新页作为页表
 *                 0: 返回0
 *                
 * @return pte_t* 索引到的页表项
 */
pte_t* find_pte(pde_t* page_dir, uint32_t vstart, int is_alloc) {
   10746:	55                   	push   %ebp
   10747:	89 e5                	mov    %esp,%ebp
   10749:	83 ec 18             	sub    $0x18,%esp
  pte_t* page_table; //记录被索引的页表
  //1.通过虚拟地址高10位索引到对应的页目录项
  pde_t* pde = page_dir + pde_index(vstart);
   1074c:	ff 75 0c             	push   0xc(%ebp)
   1074f:	e8 c0 fb ff ff       	call   10314 <pde_index>
   10754:	83 c4 04             	add    $0x4,%esp
   10757:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1075e:	8b 45 08             	mov    0x8(%ebp),%eax
   10761:	01 d0                	add    %edx,%eax
   10763:	89 45 f0             	mov    %eax,-0x10(%ebp)

  //2.判断该页目录项是否已存在，及该页目录项是否已指向一个被分配的页表
  if (pde->present) { //该页目录项存在，及存在对应的页表，可以索引到对应的页表
   10766:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10769:	0f b6 00             	movzbl (%eax),%eax
   1076c:	83 e0 01             	and    $0x1,%eax
   1076f:	84 c0                	test   %al,%al
   10771:	74 10                	je     10783 <find_pte+0x3d>
    page_table = (pte_t*)pde_to_pt_addr(pde);
   10773:	ff 75 f0             	push   -0x10(%ebp)
   10776:	e8 b4 fb ff ff       	call   1032f <pde_to_pt_addr>
   1077b:	83 c4 04             	add    $0x4,%esp
   1077e:	89 45 f4             	mov    %eax,-0xc(%ebp)
   10781:	eb 57                	jmp    107da <find_pte+0x94>
  } else {//该目录项不存在内存中，及对应的页表不存在
    if (is_alloc == 0) {  //不为该目录项创建对应的页表
   10783:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10787:	75 07                	jne    10790 <find_pte+0x4a>
      return (pte_t*)0;
   10789:	b8 00 00 00 00       	mov    $0x0,%eax
   1078e:	eb 64                	jmp    107f4 <find_pte+0xae>
    }

    //为该目录项分配一页作为页表
    uint32_t pg_addr = addr_alloc_page(&paddr_alloc, 1);
   10790:	83 ec 08             	sub    $0x8,%esp
   10793:	6a 01                	push   $0x1
   10795:	68 00 a0 01 00       	push   $0x1a000
   1079a:	e8 07 fe ff ff       	call   105a6 <addr_alloc_page>
   1079f:	83 c4 10             	add    $0x10,%esp
   107a2:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pg_addr == 0) { //分配失败
   107a5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   107a9:	75 07                	jne    107b2 <find_pte+0x6c>
      return (pte_t*)0;
   107ab:	b8 00 00 00 00       	mov    $0x0,%eax
   107b0:	eb 42                	jmp    107f4 <find_pte+0xae>
    }

    //分配成功, 索引对应的页表
    page_table = (pte_t*)pg_addr;
   107b2:	8b 45 ec             	mov    -0x14(%ebp),%eax
   107b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_memset(page_table, 0, MEM_PAGE_SIZE);
   107b8:	83 ec 04             	sub    $0x4,%esp
   107bb:	68 00 10 00 00       	push   $0x1000
   107c0:	6a 00                	push   $0x0
   107c2:	ff 75 f4             	push   -0xc(%ebp)
   107c5:	e8 51 63 00 00       	call   16b1b <kernel_memset>
   107ca:	83 c4 10             	add    $0x10,%esp

    //将该页表的起始地址放入对应的页目录项中并放入页目录表中，方便后续索引到该页表
    //且权限都放宽，即普通用户可访问，对应的页表的所有页可读写，将具体的权限交给每一页来进一步限制
    pde->v = pg_addr | PDE_U | PDE_W | PDE_P;
   107cd:	8b 45 ec             	mov    -0x14(%ebp),%eax
   107d0:	83 c8 07             	or     $0x7,%eax
   107d3:	89 c2                	mov    %eax,%edx
   107d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   107d8:	89 10                	mov    %edx,(%eax)

  // log_printf("sizeof(pte_t) = %d", sizeof(pte_t));


  //3.返回在该页表中索引到的页表项
  return page_table + pte_index(vstart);
   107da:	83 ec 0c             	sub    $0xc,%esp
   107dd:	ff 75 0c             	push   0xc(%ebp)
   107e0:	e8 3a fb ff ff       	call   1031f <pte_index>
   107e5:	83 c4 10             	add    $0x10,%esp
   107e8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   107ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107f2:	01 d0                	add    %edx,%eax

}
   107f4:	c9                   	leave  
   107f5:	c3                   	ret    

000107f6 <memory_creat_map>:
 * @param pstart 物理地址的起始地址
 * @param page_count 分页数量
 * @param privilege 该段虚拟地址的特权级
 * @return int -1:分配失败
 */
int  memory_creat_map(pde_t *page_dir, uint32_t vstart, uint32_t pstart, int page_count, uint32_t privilege) {
   107f6:	55                   	push   %ebp
   107f7:	89 e5                	mov    %esp,%ebp
   107f9:	83 ec 18             	sub    $0x18,%esp
  //1.为每一页创建对应的页表项
  for (int i = 0; i < page_count; ++i) {
   107fc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10803:	e9 91 00 00 00       	jmp    10899 <memory_creat_map+0xa3>
    // //打印调试信息
    // log_printf("creat map: v-0x%x, p-0x%x, privilege:0x%x", vstart, pstart, privilege);

    //2.通过虚拟地址在页目录表中获取对应的页目录项指向的页表,
    //且当没有该页目录项时，为其分配一个页作为页表并让一个目录项指向该页表
    pte_t *pte = find_pte(page_dir, vstart, 1);
   10808:	83 ec 04             	sub    $0x4,%esp
   1080b:	6a 01                	push   $0x1
   1080d:	ff 75 0c             	push   0xc(%ebp)
   10810:	ff 75 08             	push   0x8(%ebp)
   10813:	e8 2e ff ff ff       	call   10746 <find_pte>
   10818:	83 c4 10             	add    $0x10,%esp
   1081b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pte == (pte_t*)0) {//没有找到可用的页表项
   1081e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10822:	75 17                	jne    1083b <memory_creat_map+0x45>
    log_printf("creat pte failed pte == 0\n");
   10824:	83 ec 0c             	sub    $0xc,%esp
   10827:	68 e2 73 01 00       	push   $0x173e2
   1082c:	e8 e7 6a 00 00       	call   17318 <log_printf>
   10831:	83 c4 10             	add    $0x10,%esp
      return -1;
   10834:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10839:	eb 6f                	jmp    108aa <memory_creat_map+0xb4>
    }

    // log_printf("pte addr : 0x%x", (uint32_t)pte);
    //3.确保该页并未已存在内存中
    ASSERT(pte->present == 0);
   1083b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1083e:	0f b6 00             	movzbl (%eax),%eax
   10841:	83 e0 01             	and    $0x1,%eax
   10844:	84 c0                	test   %al,%al
   10846:	74 1c                	je     10864 <memory_creat_map+0x6e>
   10848:	68 fd 73 01 00       	push   $0x173fd
   1084d:	68 5c 75 01 00       	push   $0x1755c
   10852:	68 1d 01 00 00       	push   $0x11d
   10857:	68 10 74 01 00       	push   $0x17410
   1085c:	e8 a1 5d 00 00       	call   16602 <pannic>
   10861:	83 c4 10             	add    $0x10,%esp

    //4.在页表项中创建对应的映射关系，并该页权限，页权限以当前权限为主，因为pde处已放宽权限
    pte->v = pstart | privilege | PTE_P;
   10864:	8b 45 10             	mov    0x10(%ebp),%eax
   10867:	0b 45 18             	or     0x18(%ebp),%eax
   1086a:	83 c8 01             	or     $0x1,%eax
   1086d:	89 c2                	mov    %eax,%edx
   1086f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10872:	89 10                	mov    %edx,(%eax)

    //5.将该页引用计数+1
    page_ref_add(&paddr_alloc, pstart);
   10874:	83 ec 08             	sub    $0x8,%esp
   10877:	ff 75 10             	push   0x10(%ebp)
   1087a:	68 00 a0 01 00       	push   $0x1a000
   1087f:	e8 3e fb ff ff       	call   103c2 <page_ref_add>
   10884:	83 c4 10             	add    $0x10,%esp

    //6.切换为下一页
    vstart += MEM_PAGE_SIZE;
   10887:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    pstart += MEM_PAGE_SIZE;
   1088e:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
  for (int i = 0; i < page_count; ++i) {
   10895:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10899:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1089c:	3b 45 14             	cmp    0x14(%ebp),%eax
   1089f:	0f 8c 63 ff ff ff    	jl     10808 <memory_creat_map+0x12>

  }

  return 1;
   108a5:	b8 01 00 00 00       	mov    $0x1,%eax
 }
   108aa:	c9                   	leave  
   108ab:	c3                   	ret    

000108ac <create_kernal_table>:

//TODO:编写函数注释
void create_kernal_table(void) {
   108ac:	55                   	push   %ebp
   108ad:	89 e5                	mov    %esp,%ebp
   108af:	83 ec 28             	sub    $0x28,%esp
    {(void*)CONSOLE_DISP_START_ADDR, (void*)CONSOLE_DISP_END_ADDR, (void*)CONSOLE_DISP_START_ADDR, PTE_W},//显存区域的映射关系
    {(void*)MEM_EXT_START, (void*)MEM_EXT_END, (void*)MEM_EXT_START, PTE_W}, //将1mb到127mb都映射给操作系统使用

  };

  for (int i = 0; i < sizeof(kernal_map) / sizeof(kernal_map[0]); ++i) {
   108b2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   108b9:	e9 92 00 00 00       	jmp    10950 <create_kernal_table+0xa4>
    memory_map_t *map = kernal_map + i;
   108be:	8b 45 f4             	mov    -0xc(%ebp),%eax
   108c1:	c1 e0 04             	shl    $0x4,%eax
   108c4:	05 00 90 01 00       	add    $0x19000,%eax
   108c9:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //将虚拟地址的起始地址按页大小4kb对齐，为了不丢失原有的虚拟地址空间，所以向下对齐vstart
    //理论上虚拟地址是不需要上下边缘对齐的，这里主要是为了计算所需页数
    //因为虚拟地址的每一页都和页目录项以及页表项捆绑了，
    //只需用页目录项和页表项为该页映射一个物理页即可，所以物理页才必须上下边缘按4kb对齐
    uint32_t vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   108cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   108cf:	8b 00                	mov    (%eax),%eax
   108d1:	68 00 10 00 00       	push   $0x1000
   108d6:	50                   	push   %eax
   108d7:	e8 08 fa ff ff       	call   102e4 <down2>
   108dc:	83 c4 08             	add    $0x8,%esp
   108df:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32_t pstart = down2((uint32_t)map->pstart, MEM_PAGE_SIZE);
   108e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   108e5:	8b 40 08             	mov    0x8(%eax),%eax
   108e8:	68 00 10 00 00       	push   $0x1000
   108ed:	50                   	push   %eax
   108ee:	e8 f1 f9 ff ff       	call   102e4 <down2>
   108f3:	83 c4 08             	add    $0x8,%esp
   108f6:	89 45 e8             	mov    %eax,-0x18(%ebp)
    //将虚拟地址的结束地址按页大小4kb对齐, 为了不丢失原有的虚拟地址空间，所以向上对齐vend
    uint32_t vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   108f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   108fc:	8b 40 04             	mov    0x4(%eax),%eax
   108ff:	68 00 10 00 00       	push   $0x1000
   10904:	50                   	push   %eax
   10905:	e8 e7 f9 ff ff       	call   102f1 <up2>
   1090a:	83 c4 08             	add    $0x8,%esp
   1090d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    //计算该虚拟空间需要的页数
    int page_count = (vend - vstart) / MEM_PAGE_SIZE;
   10910:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10913:	2b 45 ec             	sub    -0x14(%ebp),%eax
   10916:	c1 e8 0c             	shr    $0xc,%eax
   10919:	89 45 e0             	mov    %eax,-0x20(%ebp)

    //创建内存映射关系
    memory_creat_map(kernel_page_dir, vstart, pstart, page_count, map->privilege);
   1091c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1091f:	8b 40 0c             	mov    0xc(%eax),%eax
   10922:	83 ec 0c             	sub    $0xc,%esp
   10925:	50                   	push   %eax
   10926:	ff 75 e0             	push   -0x20(%ebp)
   10929:	ff 75 e8             	push   -0x18(%ebp)
   1092c:	ff 75 ec             	push   -0x14(%ebp)
   1092f:	68 00 20 02 00       	push   $0x22000
   10934:	e8 bd fe ff ff       	call   107f6 <memory_creat_map>
   10939:	83 c4 20             	add    $0x20,%esp
    //清空内核空间对页的引用
    clear_page_ref(&paddr_alloc);
   1093c:	83 ec 0c             	sub    $0xc,%esp
   1093f:	68 00 a0 01 00       	push   $0x1a000
   10944:	e8 85 fb ff ff       	call   104ce <clear_page_ref>
   10949:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < sizeof(kernal_map) / sizeof(kernal_map[0]); ++i) {
   1094c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10950:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10953:	83 f8 04             	cmp    $0x4,%eax
   10956:	0f 86 62 ff ff ff    	jbe    108be <create_kernal_table+0x12>

  }
}
   1095c:	90                   	nop
   1095d:	90                   	nop
   1095e:	c9                   	leave  
   1095f:	c3                   	ret    

00010960 <memory_creat_uvm>:
/**
 * @brief 创建用户进程的虚拟内存空间，即页目录表
 * 
 * @return uint32_t 
 */
uint32_t memory_creat_uvm() {
   10960:	55                   	push   %ebp
   10961:	89 e5                	mov    %esp,%ebp
   10963:	83 ec 18             	sub    $0x18,%esp
  //1.分配一页作为页目录表
  pde_t *page_dir = (pde_t *)addr_alloc_page(&paddr_alloc, 1);
   10966:	83 ec 08             	sub    $0x8,%esp
   10969:	6a 01                	push   $0x1
   1096b:	68 00 a0 01 00       	push   $0x1a000
   10970:	e8 31 fc ff ff       	call   105a6 <addr_alloc_page>
   10975:	83 c4 10             	add    $0x10,%esp
   10978:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (page_dir == 0) return 0;
   1097b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1097f:	75 07                	jne    10988 <memory_creat_uvm+0x28>
   10981:	b8 00 00 00 00       	mov    $0x0,%eax
   10986:	eb 5b                	jmp    109e3 <memory_creat_uvm+0x83>
  //TODO:新分配的页并未做虚拟内存映射，会触发缺页异常，需要处理,这里先将1mb以上的所有空间都映射给内核进程

  //2.将该页的内容清空
  kernel_memset((void*)page_dir, 0, MEM_PAGE_SIZE);
   10988:	83 ec 04             	sub    $0x4,%esp
   1098b:	68 00 10 00 00       	push   $0x1000
   10990:	6a 00                	push   $0x0
   10992:	ff 75 f0             	push   -0x10(%ebp)
   10995:	e8 81 61 00 00       	call   16b1b <kernel_memset>
   1099a:	83 c4 10             	add    $0x10,%esp

  //3.获取用户进程空间的第一个页目录项索引, 用户进程空间的起始地址MEM_TASK_BASE = 0x800 00000
  uint32_t user_pde_start = pde_index(MEM_TASK_BASE);
   1099d:	83 ec 0c             	sub    $0xc,%esp
   109a0:	68 00 00 00 80       	push   $0x80000000
   109a5:	e8 6a f9 ff ff       	call   10314 <pde_index>
   109aa:	83 c4 10             	add    $0x10,%esp
   109ad:	89 45 ec             	mov    %eax,-0x14(%ebp)

  //4.将用户进程空间以下的空间映射给操作系统使用，即将0~user_pde_start的pde提供给操作系统作为页目录项
  for (int i = 0; i < user_pde_start; ++i) {
   109b0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   109b7:	eb 1f                	jmp    109d8 <memory_creat_uvm+0x78>
      page_dir[i].v = kernel_page_dir[i].v; //所有进程都共享操作系统的页表
   109b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109bc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   109c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   109c6:	01 c2                	add    %eax,%edx
   109c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109cb:	8b 04 85 00 20 02 00 	mov    0x22000(,%eax,4),%eax
   109d2:	89 02                	mov    %eax,(%edx)
  for (int i = 0; i < user_pde_start; ++i) {
   109d4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   109d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109db:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   109de:	77 d9                	ja     109b9 <memory_creat_uvm+0x59>
  }


  return (uint32_t)page_dir;
   109e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   109e3:	c9                   	leave  
   109e4:	c3                   	ret    

000109e5 <memory_copy_uvm>:
 * 
 * @param to_page_dir 拷贝到的目标页目录表地址
 * @param from_page_dir 被拷贝的源页目录表地址
 * @return uint32_t 
 */
int memory_copy_uvm(uint32_t to_page_dir, uint32_t from_page_dir) {
   109e5:	55                   	push   %ebp
   109e6:	89 e5                	mov    %esp,%ebp
   109e8:	83 ec 38             	sub    $0x38,%esp
  //1.获取用户程序虚拟地址的起始pde索引，即0x8000 0000 的pde索引值
  uint32_t user_pde_start = pde_index(MEM_TASK_BASE);
   109eb:	68 00 00 00 80       	push   $0x80000000
   109f0:	e8 1f f9 ff ff       	call   10314 <pde_index>
   109f5:	83 c4 04             	add    $0x4,%esp
   109f8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  pde_t *pde = (pde_t *)from_page_dir + user_pde_start;
   109fb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   109fe:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10a05:	8b 45 0c             	mov    0xc(%ebp),%eax
   10a08:	01 d0                	add    %edx,%eax
   10a0a:	89 45 f4             	mov    %eax,-0xc(%ebp)

  //2.遍历源页目录表中的每一个页目录项，拷贝给目标目录
  for (int i = user_pde_start; i < PDE_CNT; ++i, ++pde) {
   10a0d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10a10:	89 45 f0             	mov    %eax,-0x10(%ebp)
   10a13:	e9 2a 01 00 00       	jmp    10b42 <memory_copy_uvm+0x15d>
    if (!pde->present)  //当前页目录项不存在
   10a18:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10a1b:	0f b6 00             	movzbl (%eax),%eax
   10a1e:	83 e0 01             	and    $0x1,%eax
   10a21:	84 c0                	test   %al,%al
   10a23:	0f 84 10 01 00 00    	je     10b39 <memory_copy_uvm+0x154>
      continue;

    //3.获取页目录项指向的页表的起始地址
    pte_t *pte = (pte_t*)pde_to_pt_addr(pde);
   10a29:	ff 75 f4             	push   -0xc(%ebp)
   10a2c:	e8 fe f8 ff ff       	call   1032f <pde_to_pt_addr>
   10a31:	83 c4 04             	add    $0x4,%esp
   10a34:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //4.遍历页表的页表项，进行读共享写复制的映射操作
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   10a37:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   10a3e:	e9 e7 00 00 00       	jmp    10b2a <memory_copy_uvm+0x145>
      if (!pte->present)  //当前页表项不存在
   10a43:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10a46:	0f b6 00             	movzbl (%eax),%eax
   10a49:	83 e0 01             	and    $0x1,%eax
   10a4c:	84 c0                	test   %al,%al
   10a4e:	0f 84 cd 00 00 00    	je     10b21 <memory_copy_uvm+0x13c>
        continue;
      
      //5.获取该页表项对应的虚拟地址
      uint32_t vaddr = (i << 22) | (j << 12);
   10a54:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10a57:	c1 e0 16             	shl    $0x16,%eax
   10a5a:	89 c2                	mov    %eax,%edx
   10a5c:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10a5f:	c1 e0 0c             	shl    $0xc,%eax
   10a62:	09 d0                	or     %edx,%eax
   10a64:	89 45 e0             	mov    %eax,-0x20(%ebp)
      
      //6.判断当前页表项指向的页是否支持写操作
      if (pte->v & PTE_W) { //7当前页支持写操作，需进行复制操作
   10a67:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10a6a:	8b 00                	mov    (%eax),%eax
   10a6c:	83 e0 02             	and    $0x2,%eax
   10a6f:	85 c0                	test   %eax,%eax
   10a71:	74 6c                	je     10adf <memory_copy_uvm+0xfa>
        //7.1分配一个新的页，进行拷贝
        uint32_t page = addr_alloc_page(&paddr_alloc, 1);
   10a73:	83 ec 08             	sub    $0x8,%esp
   10a76:	6a 01                	push   $0x1
   10a78:	68 00 a0 01 00       	push   $0x1a000
   10a7d:	e8 24 fb ff ff       	call   105a6 <addr_alloc_page>
   10a82:	83 c4 10             	add    $0x10,%esp
   10a85:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        if (page == 0)  //分配失败
   10a88:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   10a8c:	0f 84 c4 00 00 00    	je     10b56 <memory_copy_uvm+0x171>
          goto copy_uvm_failed;
        
        //7.2在目标进程空间中记录映射关系
        int err = memory_creat_map((pde_t*)to_page_dir, vaddr, page, 1, get_pte_privilege(pte));
   10a92:	83 ec 0c             	sub    $0xc,%esp
   10a95:	ff 75 ec             	push   -0x14(%ebp)
   10a98:	e8 e0 f8 ff ff       	call   1037d <get_pte_privilege>
   10a9d:	83 c4 10             	add    $0x10,%esp
   10aa0:	8b 55 08             	mov    0x8(%ebp),%edx
   10aa3:	83 ec 0c             	sub    $0xc,%esp
   10aa6:	50                   	push   %eax
   10aa7:	6a 01                	push   $0x1
   10aa9:	ff 75 d4             	push   -0x2c(%ebp)
   10aac:	ff 75 e0             	push   -0x20(%ebp)
   10aaf:	52                   	push   %edx
   10ab0:	e8 41 fd ff ff       	call   107f6 <memory_creat_map>
   10ab5:	83 c4 20             	add    $0x20,%esp
   10ab8:	89 45 d0             	mov    %eax,-0x30(%ebp)
        if (err < 0)
   10abb:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
   10abf:	0f 88 94 00 00 00    	js     10b59 <memory_copy_uvm+0x174>
          goto copy_uvm_failed;
        
        //7.3将该页内容拷贝到目标进程空间中
        kernel_memcpy((void*)page, (void*)vaddr, MEM_PAGE_SIZE);
   10ac5:	8b 55 e0             	mov    -0x20(%ebp),%edx
   10ac8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   10acb:	83 ec 04             	sub    $0x4,%esp
   10ace:	68 00 10 00 00       	push   $0x1000
   10ad3:	52                   	push   %edx
   10ad4:	50                   	push   %eax
   10ad5:	e8 f2 5f 00 00       	call   16acc <kernel_memcpy>
   10ada:	83 c4 10             	add    $0x10,%esp
   10add:	eb 43                	jmp    10b22 <memory_copy_uvm+0x13d>

      } else {  //8.当前页为只读页，直接共享该页即可，即只复制页表项即可
        //8.1获取该页的物理地址
        uint32_t page = pte_to_pg_addr(pte);
   10adf:	83 ec 0c             	sub    $0xc,%esp
   10ae2:	ff 75 ec             	push   -0x14(%ebp)
   10ae5:	e8 6c f8 ff ff       	call   10356 <pte_to_pg_addr>
   10aea:	83 c4 10             	add    $0x10,%esp
   10aed:	89 45 dc             	mov    %eax,-0x24(%ebp)
        //8.2直接在目标进程空间中记录映射关系
        int err = memory_creat_map((pde_t*)to_page_dir, vaddr, page, 1, get_pte_privilege(pte));
   10af0:	83 ec 0c             	sub    $0xc,%esp
   10af3:	ff 75 ec             	push   -0x14(%ebp)
   10af6:	e8 82 f8 ff ff       	call   1037d <get_pte_privilege>
   10afb:	83 c4 10             	add    $0x10,%esp
   10afe:	8b 55 08             	mov    0x8(%ebp),%edx
   10b01:	83 ec 0c             	sub    $0xc,%esp
   10b04:	50                   	push   %eax
   10b05:	6a 01                	push   $0x1
   10b07:	ff 75 dc             	push   -0x24(%ebp)
   10b0a:	ff 75 e0             	push   -0x20(%ebp)
   10b0d:	52                   	push   %edx
   10b0e:	e8 e3 fc ff ff       	call   107f6 <memory_creat_map>
   10b13:	83 c4 20             	add    $0x20,%esp
   10b16:	89 45 d8             	mov    %eax,-0x28(%ebp)
        if (err < 0)
   10b19:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
   10b1d:	78 3d                	js     10b5c <memory_copy_uvm+0x177>
   10b1f:	eb 01                	jmp    10b22 <memory_copy_uvm+0x13d>
        continue;
   10b21:	90                   	nop
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   10b22:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   10b26:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   10b2a:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   10b31:	0f 8e 0c ff ff ff    	jle    10a43 <memory_copy_uvm+0x5e>
   10b37:	eb 01                	jmp    10b3a <memory_copy_uvm+0x155>
      continue;
   10b39:	90                   	nop
  for (int i = user_pde_start; i < PDE_CNT; ++i, ++pde) {
   10b3a:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10b3e:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   10b42:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   10b49:	0f 8e c9 fe ff ff    	jle    10a18 <memory_copy_uvm+0x33>
      }

    }
  }

  return 1;
   10b4f:	b8 01 00 00 00       	mov    $0x1,%eax
   10b54:	eb 1a                	jmp    10b70 <memory_copy_uvm+0x18b>
          goto copy_uvm_failed;
   10b56:	90                   	nop
   10b57:	eb 04                	jmp    10b5d <memory_copy_uvm+0x178>
          goto copy_uvm_failed;
   10b59:	90                   	nop
   10b5a:	eb 01                	jmp    10b5d <memory_copy_uvm+0x178>
          goto copy_uvm_failed;
   10b5c:	90                   	nop


copy_uvm_failed:
  memory_destroy_uvm(to_page_dir);
   10b5d:	83 ec 0c             	sub    $0xc,%esp
   10b60:	ff 75 08             	push   0x8(%ebp)
   10b63:	e8 0a 00 00 00       	call   10b72 <memory_destroy_uvm>
   10b68:	83 c4 10             	add    $0x10,%esp
  return -1;
   10b6b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10b70:	c9                   	leave  
   10b71:	c3                   	ret    

00010b72 <memory_destroy_uvm>:
 * @brief 销毁该页目录表对应的所有虚拟空间资源，包括映射关系与内存空间
 * 
 * @param page_dir 页目录表的地址
 * @param is_read_share 是否开启了读共享策略，1开启，0未开启
 */
void memory_destroy_uvm(uint32_t page_dir) {
   10b72:	55                   	push   %ebp
   10b73:	89 e5                	mov    %esp,%ebp
   10b75:	83 ec 28             	sub    $0x28,%esp
  //1.获取用户进程虚拟地址的起始地址对应的该页目录项
  uint32_t user_task_start  = pde_index(MEM_TASK_BASE);
   10b78:	68 00 00 00 80       	push   $0x80000000
   10b7d:	e8 92 f7 ff ff       	call   10314 <pde_index>
   10b82:	83 c4 04             	add    $0x4,%esp
   10b85:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  pde_t *pde = (pde_t*) page_dir + user_task_start;
   10b88:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10b8b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10b92:	8b 45 08             	mov    0x8(%ebp),%eax
   10b95:	01 d0                	add    %edx,%eax
   10b97:	89 45 f4             	mov    %eax,-0xc(%ebp)

  //2.遍历每一个页目录项，清理对应资源
  for (int i = user_task_start; i < PDE_CNT; ++i, ++pde) {
   10b9a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10b9d:	89 45 f0             	mov    %eax,-0x10(%ebp)
   10ba0:	e9 8f 00 00 00       	jmp    10c34 <memory_destroy_uvm+0xc2>
    if (!pde->present) 
   10ba5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10ba8:	0f b6 00             	movzbl (%eax),%eax
   10bab:	83 e0 01             	and    $0x1,%eax
   10bae:	84 c0                	test   %al,%al
   10bb0:	74 79                	je     10c2b <memory_destroy_uvm+0xb9>
        continue;

    //3.获取页目录项对应的页表的起始地址
    pte_t *pte = (pte_t*)pde_to_pt_addr(pde);
   10bb2:	ff 75 f4             	push   -0xc(%ebp)
   10bb5:	e8 75 f7 ff ff       	call   1032f <pde_to_pt_addr>
   10bba:	83 c4 04             	add    $0x4,%esp
   10bbd:	89 45 ec             	mov    %eax,-0x14(%ebp)
    
    //4.遍历所有页表项，清理对应资源
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   10bc0:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   10bc7:	eb 36                	jmp    10bff <memory_destroy_uvm+0x8d>
      if (!pte->present)
   10bc9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10bcc:	0f b6 00             	movzbl (%eax),%eax
   10bcf:	83 e0 01             	and    $0x1,%eax
   10bd2:	84 c0                	test   %al,%al
   10bd4:	74 20                	je     10bf6 <memory_destroy_uvm+0x84>
        continue;
      
      //5.释放该物理页
      addr_free_page(&paddr_alloc, pte_to_pg_addr(pte), 1);
   10bd6:	ff 75 ec             	push   -0x14(%ebp)
   10bd9:	e8 78 f7 ff ff       	call   10356 <pte_to_pg_addr>
   10bde:	83 c4 04             	add    $0x4,%esp
   10be1:	83 ec 04             	sub    $0x4,%esp
   10be4:	6a 01                	push   $0x1
   10be6:	50                   	push   %eax
   10be7:	68 00 a0 01 00       	push   $0x1a000
   10bec:	e8 1c fa ff ff       	call   1060d <addr_free_page>
   10bf1:	83 c4 10             	add    $0x10,%esp
   10bf4:	eb 01                	jmp    10bf7 <memory_destroy_uvm+0x85>
        continue;
   10bf6:	90                   	nop
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   10bf7:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   10bfb:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   10bff:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   10c06:	7e c1                	jle    10bc9 <memory_destroy_uvm+0x57>
    }

    //6.释放存储该页表的物理页
    addr_free_page(&paddr_alloc, pde_to_pt_addr(pde), 1);
   10c08:	83 ec 0c             	sub    $0xc,%esp
   10c0b:	ff 75 f4             	push   -0xc(%ebp)
   10c0e:	e8 1c f7 ff ff       	call   1032f <pde_to_pt_addr>
   10c13:	83 c4 10             	add    $0x10,%esp
   10c16:	83 ec 04             	sub    $0x4,%esp
   10c19:	6a 01                	push   $0x1
   10c1b:	50                   	push   %eax
   10c1c:	68 00 a0 01 00       	push   $0x1a000
   10c21:	e8 e7 f9 ff ff       	call   1060d <addr_free_page>
   10c26:	83 c4 10             	add    $0x10,%esp
   10c29:	eb 01                	jmp    10c2c <memory_destroy_uvm+0xba>
        continue;
   10c2b:	90                   	nop
  for (int i = user_task_start; i < PDE_CNT; ++i, ++pde) {
   10c2c:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10c30:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   10c34:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   10c3b:	0f 8e 64 ff ff ff    	jle    10ba5 <memory_destroy_uvm+0x33>
  }


  //7.释放存储该页目录表的物理页
  addr_free_page(&paddr_alloc, page_dir, 1);
   10c41:	83 ec 04             	sub    $0x4,%esp
   10c44:	6a 01                	push   $0x1
   10c46:	ff 75 08             	push   0x8(%ebp)
   10c49:	68 00 a0 01 00       	push   $0x1a000
   10c4e:	e8 ba f9 ff ff       	call   1060d <addr_free_page>
   10c53:	83 c4 10             	add    $0x10,%esp
}
   10c56:	90                   	nop
   10c57:	c9                   	leave  
   10c58:	c3                   	ret    

00010c59 <memory_init>:
/**
 * @brief  初始化化内存
 *
 * @param boot_info cpu在实模式下检测到的可用内存对象
 */
void memory_init(boot_info_t *boot_info) {
   10c59:	55                   	push   %ebp
   10c5a:	89 e5                	mov    %esp,%ebp
   10c5c:	83 ec 18             	sub    $0x18,%esp

  
    //声明紧邻在内核bss段后面的空间地址，用于存储位图，该变量定义在kernel.lds中
    extern char mem_free_start;

    log_printf("memory init\n");
   10c5f:	83 ec 0c             	sub    $0xc,%esp
   10c62:	68 47 74 01 00       	push   $0x17447
   10c67:	e8 ac 66 00 00       	call   17318 <log_printf>
   10c6c:	83 c4 10             	add    $0x10,%esp

    log_printf("mem_free_start: 0x%x\n", &mem_free_start);
   10c6f:	83 ec 08             	sub    $0x8,%esp
   10c72:	68 97 13 07 00       	push   $0x71397
   10c77:	68 54 74 01 00       	push   $0x17454
   10c7c:	e8 97 66 00 00       	call   17318 <log_printf>
   10c81:	83 c4 10             	add    $0x10,%esp

    show_mem_info(boot_info);
   10c84:	83 ec 0c             	sub    $0xc,%esp
   10c87:	ff 75 08             	push   0x8(%ebp)
   10c8a:	e8 1a fa ff ff       	call   106a9 <show_mem_info>
   10c8f:	83 c4 10             	add    $0x10,%esp
    
    //去除保护模式下1mb大小后可用的内存空间大小
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   10c92:	83 ec 0c             	sub    $0xc,%esp
   10c95:	ff 75 08             	push   0x8(%ebp)
   10c98:	e8 72 fa ff ff       	call   1070f <total_mem_size>
   10c9d:	83 c4 10             	add    $0x10,%esp
   10ca0:	2d 00 00 10 00       	sub    $0x100000,%eax
   10ca5:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将可用空间大小下调到页大小的整数倍
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);
   10ca8:	83 ec 08             	sub    $0x8,%esp
   10cab:	68 00 10 00 00       	push   $0x1000
   10cb0:	ff 75 f4             	push   -0xc(%ebp)
   10cb3:	e8 2c f6 ff ff       	call   102e4 <down2>
   10cb8:	83 c4 10             	add    $0x10,%esp
   10cbb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    log_printf("free memory: 0x%x, size: 0x%x\n", MEM_EXT_START, mem_up1MB_free);
   10cbe:	83 ec 04             	sub    $0x4,%esp
   10cc1:	ff 75 f4             	push   -0xc(%ebp)
   10cc4:	68 00 00 10 00       	push   $0x100000
   10cc9:	68 6c 74 01 00       	push   $0x1746c
   10cce:	e8 45 66 00 00       	call   17318 <log_printf>
   10cd3:	83 c4 10             	add    $0x10,%esp

    //mem_free_start被分配的地址在链接文件中定义，紧邻着first_task段
    uint8_t *mem_free = (uint8_t*)&mem_free_start;
   10cd6:	c7 45 f0 97 13 07 00 	movl   $0x71397,-0x10(%ebp)

    //用paddr_alloc，内存页分配对象管理1mb以上的所有空闲空间，页大小为MEM_PAGE_SIZE=4kb
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   10cdd:	83 ec 0c             	sub    $0xc,%esp
   10ce0:	68 00 10 00 00       	push   $0x1000
   10ce5:	ff 75 f4             	push   -0xc(%ebp)
   10ce8:	68 00 00 10 00       	push   $0x100000
   10ced:	ff 75 f0             	push   -0x10(%ebp)
   10cf0:	68 00 a0 01 00       	push   $0x1a000
   10cf5:	e8 25 f8 ff ff       	call   1051f <addr_alloc_init>
   10cfa:	83 c4 20             	add    $0x20,%esp

    //跳过存储位图的内存区域, 位图的每一位表示一个页，计算位图所站的字节数即可跳过该区域
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);  
   10cfd:	a1 20 a0 01 00       	mov    0x1a020,%eax
   10d02:	c1 e8 0c             	shr    $0xc,%eax
   10d05:	83 ec 0c             	sub    $0xc,%esp
   10d08:	50                   	push   %eax
   10d09:	e8 2a 59 00 00       	call   16638 <bitmap_byte_count>
   10d0e:	83 c4 10             	add    $0x10,%esp
   10d11:	01 45 f0             	add    %eax,-0x10(%ebp)

    //判断mem_free是否已越过可用数据区
    ASSERT(mem_free < (uint8_t*)MEM_EBDA_START);
   10d14:	81 7d f0 ff fb 09 00 	cmpl   $0x9fbff,-0x10(%ebp)
   10d1b:	76 1c                	jbe    10d39 <memory_init+0xe0>
   10d1d:	68 8c 74 01 00       	push   $0x1748c
   10d22:	68 70 75 01 00       	push   $0x17570
   10d27:	68 f8 01 00 00       	push   $0x1f8
   10d2c:	68 10 74 01 00       	push   $0x17410
   10d31:	e8 cc 58 00 00       	call   16602 <pannic>
   10d36:	83 c4 10             	add    $0x10,%esp
    
    //创建内核的页表映射
    create_kernal_table();
   10d39:	e8 6e fb ff ff       	call   108ac <create_kernal_table>

    //设置内核的页目录表到CR3寄存器，并开启分页机制
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   10d3e:	b8 00 20 02 00       	mov    $0x22000,%eax
   10d43:	83 ec 0c             	sub    $0xc,%esp
   10d46:	50                   	push   %eax
   10d47:	e8 40 f6 ff ff       	call   1038c <mmu_set_page_dir>
   10d4c:	83 c4 10             	add    $0x10,%esp
}
   10d4f:	90                   	nop
   10d50:	c9                   	leave  
   10d51:	c3                   	ret    

00010d52 <memory_alloc_for_page_dir>:
 * @param vaddr 进程各个代码段的起始虚拟地址
 * @param alloc_size 为进程分配的页空间大小
 * @param priority 进程页空间的权限
 * @return int 
 */
int memory_alloc_for_page_dir(uint32_t page_dir, uint32_t vaddr, uint32_t alloc_size, uint32_t privilege) {
   10d52:	55                   	push   %ebp
   10d53:	89 e5                	mov    %esp,%ebp
   10d55:	83 ec 28             	sub    $0x28,%esp
  //1.记录当前分配的虚拟页的起始地址
  uint32_t curr_vaddr = vaddr;
   10d58:	8b 45 0c             	mov    0xc(%ebp),%eax
   10d5b:	89 45 f4             	mov    %eax,-0xc(%ebp)
  //2.计算需要分配多少页
  int page_count = up2(alloc_size, MEM_PAGE_SIZE) / MEM_PAGE_SIZE;
   10d5e:	68 00 10 00 00       	push   $0x1000
   10d63:	ff 75 10             	push   0x10(%ebp)
   10d66:	e8 86 f5 ff ff       	call   102f1 <up2>
   10d6b:	83 c4 08             	add    $0x8,%esp
   10d6e:	c1 e8 0c             	shr    $0xc,%eax
   10d71:	89 45 ec             	mov    %eax,-0x14(%ebp)

  //3.逐页进行映射
  for (int i = 0; i < page_count; ++i) {
   10d74:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   10d7b:	eb 7a                	jmp    10df7 <memory_alloc_for_page_dir+0xa5>
    uint32_t paddr = addr_alloc_page(&paddr_alloc, 1);
   10d7d:	83 ec 08             	sub    $0x8,%esp
   10d80:	6a 01                	push   $0x1
   10d82:	68 00 a0 01 00       	push   $0x1a000
   10d87:	e8 1a f8 ff ff       	call   105a6 <addr_alloc_page>
   10d8c:	83 c4 10             	add    $0x10,%esp
   10d8f:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (paddr == 0) {//分配失败
   10d92:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10d96:	75 17                	jne    10daf <memory_alloc_for_page_dir+0x5d>
      log_printf("mem alloc failed. no memory\n");
   10d98:	83 ec 0c             	sub    $0xc,%esp
   10d9b:	68 b0 74 01 00       	push   $0x174b0
   10da0:	e8 73 65 00 00       	call   17318 <log_printf>
   10da5:	83 c4 10             	add    $0x10,%esp
      //TODO:当分配失败时应该将之前分配的页全部归还，且将映射关系也全部解除
      return 0;
   10da8:	b8 00 00 00 00       	mov    $0x0,%eax
   10dad:	eb 59                	jmp    10e08 <memory_alloc_for_page_dir+0xb6>
    }

    int err = memory_creat_map((pde_t*)page_dir, curr_vaddr, paddr, 1, privilege);
   10daf:	8b 45 08             	mov    0x8(%ebp),%eax
   10db2:	83 ec 0c             	sub    $0xc,%esp
   10db5:	ff 75 14             	push   0x14(%ebp)
   10db8:	6a 01                	push   $0x1
   10dba:	ff 75 e8             	push   -0x18(%ebp)
   10dbd:	ff 75 f4             	push   -0xc(%ebp)
   10dc0:	50                   	push   %eax
   10dc1:	e8 30 fa ff ff       	call   107f6 <memory_creat_map>
   10dc6:	83 c4 20             	add    $0x20,%esp
   10dc9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (err < 0) {//分配失败
   10dcc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10dd0:	79 1a                	jns    10dec <memory_alloc_for_page_dir+0x9a>
      log_printf("create memory failed. err = %d\n", err);
   10dd2:	83 ec 08             	sub    $0x8,%esp
   10dd5:	ff 75 e4             	push   -0x1c(%ebp)
   10dd8:	68 d0 74 01 00       	push   $0x174d0
   10ddd:	e8 36 65 00 00       	call   17318 <log_printf>
   10de2:	83 c4 10             	add    $0x10,%esp
      //TODO:当分配失败时应该将之前分配的页全部归还，且将映射关系也全部解除
      return 0;
   10de5:	b8 00 00 00 00       	mov    $0x0,%eax
   10dea:	eb 1c                	jmp    10e08 <memory_alloc_for_page_dir+0xb6>
    }

    curr_vaddr += MEM_PAGE_SIZE;
   10dec:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
  for (int i = 0; i < page_count; ++i) {
   10df3:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10df7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10dfa:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   10dfd:	0f 8c 7a ff ff ff    	jl     10d7d <memory_alloc_for_page_dir+0x2b>
  }

  return 0;
   10e03:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10e08:	c9                   	leave  
   10e09:	c3                   	ret    

00010e0a <memory_alloc_page_for>:
 * @param vaddr 待分配空间的起始地址
 * @param alloc_size 为其分配的空间大小
 * @param privilege 对应页空间的权限
 * @return int 错误码
 */
int memory_alloc_page_for(uint32_t vaddr, uint32_t alloc_size, uint32_t privilege) {
   10e0a:	55                   	push   %ebp
   10e0b:	89 e5                	mov    %esp,%ebp
   10e0d:	83 ec 08             	sub    $0x8,%esp
  return memory_alloc_for_page_dir(task_current()->tss.cr3, vaddr, alloc_size, privilege);
   10e10:	e8 7f 0b 00 00       	call   11994 <task_current>
   10e15:	8b 40 78             	mov    0x78(%eax),%eax
   10e18:	ff 75 10             	push   0x10(%ebp)
   10e1b:	ff 75 0c             	push   0xc(%ebp)
   10e1e:	ff 75 08             	push   0x8(%ebp)
   10e21:	50                   	push   %eax
   10e22:	e8 2b ff ff ff       	call   10d52 <memory_alloc_for_page_dir>
   10e27:	83 c4 10             	add    $0x10,%esp
}
   10e2a:	c9                   	leave  
   10e2b:	c3                   	ret    

00010e2c <curr_page_dir>:
/**
 * @brief 返回当前进程的页目录表的地址
 * 
 * @return pde_t* 
 */
static pde_t* curr_page_dir() {
   10e2c:	55                   	push   %ebp
   10e2d:	89 e5                	mov    %esp,%ebp
   10e2f:	83 ec 08             	sub    $0x8,%esp
  return (pde_t*)(task_current()->tss.cr3);
   10e32:	e8 5d 0b 00 00       	call   11994 <task_current>
   10e37:	8b 40 78             	mov    0x78(%eax),%eax
}
   10e3a:	c9                   	leave  
   10e3b:	c3                   	ret    

00010e3c <memory_alloc_page>:
/**
 * @brief 为进程的内核空间分配一页内存，需特权级0访问
 * 
 * @return uint32_t 内存的起始地址
 */
uint32_t memory_alloc_page() {
   10e3c:	55                   	push   %ebp
   10e3d:	89 e5                	mov    %esp,%ebp
   10e3f:	83 ec 18             	sub    $0x18,%esp
  //因为0x100000 ~ 0x8000 0000,即低 1mb~2gb都由操作系统内核使用，
  //操作系统内核已对整个内存空间进行了一一映射，而每个程序的2gb以下空间都使用操作系统的虚拟页表
  //所以直接返回该页物理地址，也就是该页在操作系统虚拟地址空间中的虚拟地址
  //需要注意的是后续访问该页需要0特权级，因为访问的是内核空间
  uint32_t addr = addr_alloc_page(&paddr_alloc, 1);
   10e42:	83 ec 08             	sub    $0x8,%esp
   10e45:	6a 01                	push   $0x1
   10e47:	68 00 a0 01 00       	push   $0x1a000
   10e4c:	e8 55 f7 ff ff       	call   105a6 <addr_alloc_page>
   10e51:	83 c4 10             	add    $0x10,%esp
   10e54:	89 45 f4             	mov    %eax,-0xc(%ebp)
  return addr;
   10e57:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   10e5a:	c9                   	leave  
   10e5b:	c3                   	ret    

00010e5c <memory_free_page>:
 * @brief 释放一页内存空间
 * 
 * @param addr 
 */

void memory_free_page(uint32_t addr) {
   10e5c:	55                   	push   %ebp
   10e5d:	89 e5                	mov    %esp,%ebp
   10e5f:	83 ec 18             	sub    $0x18,%esp
  if (addr < MEM_TASK_BASE) { //释放内核空间的一页内存
   10e62:	8b 45 08             	mov    0x8(%ebp),%eax
   10e65:	85 c0                	test   %eax,%eax
   10e67:	78 17                	js     10e80 <memory_free_page+0x24>
    addr_free_page(&paddr_alloc, addr, 1);  //因为内核空间为一一映射关系，虚拟地址即为物理地址,且不需要解除映射关系
   10e69:	83 ec 04             	sub    $0x4,%esp
   10e6c:	6a 01                	push   $0x1
   10e6e:	ff 75 08             	push   0x8(%ebp)
   10e71:	68 00 a0 01 00       	push   $0x1a000
   10e76:	e8 92 f7 ff ff       	call   1060d <addr_free_page>
   10e7b:	83 c4 10             	add    $0x10,%esp

    //3.将页表项清空，解除映射关系
    pte->v = 0;
  }

}
   10e7e:	eb 72                	jmp    10ef2 <memory_free_page+0x96>
    pte_t *pte = find_pte(curr_page_dir(), addr, 0);
   10e80:	e8 a7 ff ff ff       	call   10e2c <curr_page_dir>
   10e85:	83 ec 04             	sub    $0x4,%esp
   10e88:	6a 00                	push   $0x0
   10e8a:	ff 75 08             	push   0x8(%ebp)
   10e8d:	50                   	push   %eax
   10e8e:	e8 b3 f8 ff ff       	call   10746 <find_pte>
   10e93:	83 c4 10             	add    $0x10,%esp
   10e96:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT(pte != (pte_t*)0 && pte->present);
   10e99:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10e9d:	74 0d                	je     10eac <memory_free_page+0x50>
   10e9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10ea2:	0f b6 00             	movzbl (%eax),%eax
   10ea5:	83 e0 01             	and    $0x1,%eax
   10ea8:	84 c0                	test   %al,%al
   10eaa:	75 1c                	jne    10ec8 <memory_free_page+0x6c>
   10eac:	68 f0 74 01 00       	push   $0x174f0
   10eb1:	68 7c 75 01 00       	push   $0x1757c
   10eb6:	68 5a 02 00 00       	push   $0x25a
   10ebb:	68 10 74 01 00       	push   $0x17410
   10ec0:	e8 3d 57 00 00       	call   16602 <pannic>
   10ec5:	83 c4 10             	add    $0x10,%esp
    addr_free_page(&paddr_alloc, pte_to_pg_addr(pte), 1);
   10ec8:	83 ec 0c             	sub    $0xc,%esp
   10ecb:	ff 75 f4             	push   -0xc(%ebp)
   10ece:	e8 83 f4 ff ff       	call   10356 <pte_to_pg_addr>
   10ed3:	83 c4 10             	add    $0x10,%esp
   10ed6:	83 ec 04             	sub    $0x4,%esp
   10ed9:	6a 01                	push   $0x1
   10edb:	50                   	push   %eax
   10edc:	68 00 a0 01 00       	push   $0x1a000
   10ee1:	e8 27 f7 ff ff       	call   1060d <addr_free_page>
   10ee6:	83 c4 10             	add    $0x10,%esp
    pte->v = 0;
   10ee9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10eec:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   10ef2:	90                   	nop
   10ef3:	c9                   	leave  
   10ef4:	c3                   	ret    

00010ef5 <memory_get_paddr>:
 * 
 * @param page_dir 
 * @param vaddr 
 * @return uint32_t 
 */
uint32_t memory_get_paddr(uint32_t page_dir, uint32_t vaddr) {
   10ef5:	55                   	push   %ebp
   10ef6:	89 e5                	mov    %esp,%ebp
   10ef8:	83 ec 18             	sub    $0x18,%esp
  //查找vaddr对应的页表项
  pte_t * pte = find_pte((pde_t*)page_dir, vaddr, 0);
   10efb:	8b 45 08             	mov    0x8(%ebp),%eax
   10efe:	83 ec 04             	sub    $0x4,%esp
   10f01:	6a 00                	push   $0x0
   10f03:	ff 75 0c             	push   0xc(%ebp)
   10f06:	50                   	push   %eax
   10f07:	e8 3a f8 ff ff       	call   10746 <find_pte>
   10f0c:	83 c4 10             	add    $0x10,%esp
   10f0f:	89 45 f4             	mov    %eax,-0xc(%ebp)

  //若没有找到该页表项或该页表项还不存在，则返回0
  if (!pte || !pte->present) {
   10f12:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10f16:	74 0d                	je     10f25 <memory_get_paddr+0x30>
   10f18:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f1b:	0f b6 00             	movzbl (%eax),%eax
   10f1e:	83 e0 01             	and    $0x1,%eax
   10f21:	84 c0                	test   %al,%al
   10f23:	75 07                	jne    10f2c <memory_get_paddr+0x37>
    return 0;
   10f25:	b8 00 00 00 00       	mov    $0x0,%eax
   10f2a:	eb 1a                	jmp    10f46 <memory_get_paddr+0x51>
  }

  //找到并存在该页表项，返回绑定的物理地址
  return pte_to_pg_addr(pte) | (vaddr & (MEM_PAGE_SIZE - 1));
   10f2c:	83 ec 0c             	sub    $0xc,%esp
   10f2f:	ff 75 f4             	push   -0xc(%ebp)
   10f32:	e8 1f f4 ff ff       	call   10356 <pte_to_pg_addr>
   10f37:	83 c4 10             	add    $0x10,%esp
   10f3a:	89 c2                	mov    %eax,%edx
   10f3c:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f3f:	25 ff 0f 00 00       	and    $0xfff,%eax
   10f44:	09 d0                	or     %edx,%eax

}
   10f46:	c9                   	leave  
   10f47:	c3                   	ret    

00010f48 <memory_copy_uvm_data>:
 * @param to_addr 目标虚拟空间的起始地址
 * @param to_page_dir 目标虚拟空间的页目录表
 * @param from_addr 当前虚拟空间中的源地址
 * @param size 拷贝的大小
 */
int memory_copy_uvm_data(uint32_t to_vaddr, uint32_t to_page_dir, uint32_t from_vaddr, uint32_t size) {
   10f48:	55                   	push   %ebp
   10f49:	89 e5                	mov    %esp,%ebp
   10f4b:	83 ec 18             	sub    $0x18,%esp

  //由于虚拟地址空间是连续的而物理地址空间不一定，所以需要一页一页的单独拷贝
  while (size > 0) {
   10f4e:	eb 6e                	jmp    10fbe <memory_copy_uvm_data+0x76>
    //1.获取to_vaddr对应的物理地址
    uint32_t to_paddr = memory_get_paddr(to_page_dir, to_vaddr);
   10f50:	83 ec 08             	sub    $0x8,%esp
   10f53:	ff 75 08             	push   0x8(%ebp)
   10f56:	ff 75 0c             	push   0xc(%ebp)
   10f59:	e8 97 ff ff ff       	call   10ef5 <memory_get_paddr>
   10f5e:	83 c4 10             	add    $0x10,%esp
   10f61:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (to_paddr == 0) {
   10f64:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10f68:	75 07                	jne    10f71 <memory_copy_uvm_data+0x29>
      return -1;
   10f6a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10f6f:	eb 58                	jmp    10fc9 <memory_copy_uvm_data+0x81>
    }

    //2.获取to_paddr所在的物理页可以写入的空间大小
    //即从to_paddr到该页的末尾的空间大小
    uint32_t offset = (MEM_PAGE_SIZE - 1) & to_paddr;
   10f71:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10f74:	25 ff 0f 00 00       	and    $0xfff,%eax
   10f79:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32_t curr_size = MEM_PAGE_SIZE - offset;
   10f7c:	b8 00 10 00 00       	mov    $0x1000,%eax
   10f81:	2b 45 ec             	sub    -0x14(%ebp),%eax
   10f84:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //3.判断size是否  < curr_size
    if (size < curr_size) { //size < curr_size则在当前物理页拷贝szie个字节即可
   10f87:	8b 45 14             	mov    0x14(%ebp),%eax
   10f8a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
   10f8d:	73 06                	jae    10f95 <memory_copy_uvm_data+0x4d>
      curr_size = size;
   10f8f:	8b 45 14             	mov    0x14(%ebp),%eax
   10f92:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    //4.拷贝内容并更新到下一个需要拷贝的地方
    kernel_memcpy((void*)to_paddr, (void*)from_vaddr, curr_size);
   10f95:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   10f98:	8b 55 10             	mov    0x10(%ebp),%edx
   10f9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10f9e:	83 ec 04             	sub    $0x4,%esp
   10fa1:	51                   	push   %ecx
   10fa2:	52                   	push   %edx
   10fa3:	50                   	push   %eax
   10fa4:	e8 23 5b 00 00       	call   16acc <kernel_memcpy>
   10fa9:	83 c4 10             	add    $0x10,%esp
    size -= curr_size;
   10fac:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10faf:	29 45 14             	sub    %eax,0x14(%ebp)
    to_vaddr += curr_size;
   10fb2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10fb5:	01 45 08             	add    %eax,0x8(%ebp)
    from_vaddr += curr_size;
   10fb8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10fbb:	01 45 10             	add    %eax,0x10(%ebp)
  while (size > 0) {
   10fbe:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   10fc2:	75 8c                	jne    10f50 <memory_copy_uvm_data+0x8>

  }
  
  return 0;
   10fc4:	b8 00 00 00 00       	mov    $0x0,%eax

}
   10fc9:	c9                   	leave  
   10fca:	c3                   	ret    

00010fcb <sys_sbrk>:
 * @brief 拓展堆区内存
 * 
 * @param incr 增长指定字节
 * @return char* 
 */
char *sys_sbrk(int incr) {
   10fcb:	55                   	push   %ebp
   10fcc:	89 e5                	mov    %esp,%ebp
   10fce:	83 ec 38             	sub    $0x38,%esp
  ASSERT(incr >= 0); //只处理堆区内存增加的情况
   10fd1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10fd5:	79 1c                	jns    10ff3 <sys_sbrk+0x28>
   10fd7:	68 11 75 01 00       	push   $0x17511
   10fdc:	68 90 75 01 00       	push   $0x17590
   10fe1:	68 a9 02 00 00       	push   $0x2a9
   10fe6:	68 10 74 01 00       	push   $0x17410
   10feb:	e8 12 56 00 00       	call   16602 <pannic>
   10ff0:	83 c4 10             	add    $0x10,%esp
  task_t *task = task_current();
   10ff3:	e8 9c 09 00 00       	call   11994 <task_current>
   10ff8:	89 45 f0             	mov    %eax,-0x10(%ebp)
  char * pre_heap_end = (char *)task->heap_end;
   10ffb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10ffe:	8b 40 14             	mov    0x14(%eax),%eax
   11001:	89 45 ec             	mov    %eax,-0x14(%ebp)
  int pre_incr = incr;
   11004:	8b 45 08             	mov    0x8(%ebp),%eax
   11007:	89 45 e8             	mov    %eax,-0x18(%ebp)

  if (incr == 0) {
   1100a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1100e:	75 1b                	jne    1102b <sys_sbrk+0x60>
    log_printf("sbrk(0): end=0x%x\n", pre_heap_end);
   11010:	83 ec 08             	sub    $0x8,%esp
   11013:	ff 75 ec             	push   -0x14(%ebp)
   11016:	68 1b 75 01 00       	push   $0x1751b
   1101b:	e8 f8 62 00 00       	call   17318 <log_printf>
   11020:	83 c4 10             	add    $0x10,%esp
    return pre_heap_end;
   11023:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11026:	e9 c4 00 00 00       	jmp    110ef <sys_sbrk+0x124>
  }

  uint32_t start = task->heap_end;  //堆区原始末尾位置
   1102b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1102e:	8b 40 14             	mov    0x14(%eax),%eax
   11031:	89 45 f4             	mov    %eax,-0xc(%ebp)
  uint32_t end = start + incr;  //需要拓展到的末尾位置
   11034:	8b 55 08             	mov    0x8(%ebp),%edx
   11037:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1103a:	01 d0                	add    %edx,%eax
   1103c:	89 45 e4             	mov    %eax,-0x1c(%ebp)

  uint32_t start_offset = start % MEM_PAGE_SIZE;  //获取末尾位置在当前页内的偏移量
   1103f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11042:	25 ff 0f 00 00       	and    $0xfff,%eax
   11047:	89 45 e0             	mov    %eax,-0x20(%ebp)
  if (start_offset) { //先将当前页的剩余空间分配出去
   1104a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   1104e:	74 3b                	je     1108b <sys_sbrk+0xc0>
    if (start_offset + incr <= MEM_PAGE_SIZE) { //当前页剩余内存可供分配
   11050:	8b 55 08             	mov    0x8(%ebp),%edx
   11053:	8b 45 e0             	mov    -0x20(%ebp),%eax
   11056:	01 d0                	add    %edx,%eax
   11058:	3d 00 10 00 00       	cmp    $0x1000,%eax
   1105d:	77 12                	ja     11071 <sys_sbrk+0xa6>
      task->heap_end = end; 
   1105f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11062:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   11065:	89 50 14             	mov    %edx,0x14(%eax)
      incr = 0;
   11068:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
   1106f:	eb 1a                	jmp    1108b <sys_sbrk+0xc0>
    } else {  //当前页剩余内存不够分配
      uint32_t curr_size = MEM_PAGE_SIZE - start_offset;  //获取当前页剩余大小
   11071:	b8 00 10 00 00       	mov    $0x1000,%eax
   11076:	2b 45 e0             	sub    -0x20(%ebp),%eax
   11079:	89 45 dc             	mov    %eax,-0x24(%ebp)
      //将当前页剩余内存全部分配出
      start += curr_size;
   1107c:	8b 45 dc             	mov    -0x24(%ebp),%eax
   1107f:	01 45 f4             	add    %eax,-0xc(%ebp)
      incr -= curr_size;
   11082:	8b 45 08             	mov    0x8(%ebp),%eax
   11085:	2b 45 dc             	sub    -0x24(%ebp),%eax
   11088:	89 45 08             	mov    %eax,0x8(%ebp)
    }
  }

  if (incr) { //还需要继续拓展
   1108b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1108f:	74 3c                	je     110cd <sys_sbrk+0x102>
    uint32_t curr_size = end - start; //还需拓展的大小
   11091:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11094:	2b 45 f4             	sub    -0xc(%ebp),%eax
   11097:	89 45 d8             	mov    %eax,-0x28(%ebp)
    int err = memory_alloc_page_for(start, curr_size, PTE_P | PTE_U |  PTE_W);  //为该部分内存创建映射关系
   1109a:	83 ec 04             	sub    $0x4,%esp
   1109d:	6a 07                	push   $0x7
   1109f:	ff 75 d8             	push   -0x28(%ebp)
   110a2:	ff 75 f4             	push   -0xc(%ebp)
   110a5:	e8 60 fd ff ff       	call   10e0a <memory_alloc_page_for>
   110aa:	83 c4 10             	add    $0x10,%esp
   110ad:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    if (err < 0) {
   110b0:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   110b4:	79 17                	jns    110cd <sys_sbrk+0x102>
      log_printf("sbrk: alloc mem failed.\n");
   110b6:	83 ec 0c             	sub    $0xc,%esp
   110b9:	68 2e 75 01 00       	push   $0x1752e
   110be:	e8 55 62 00 00       	call   17318 <log_printf>
   110c3:	83 c4 10             	add    $0x10,%esp
      return (char*)-1;
   110c6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   110cb:	eb 22                	jmp    110ef <sys_sbrk+0x124>
    }

  }

  log_printf("sbrk(%d): end=0x%x\n", pre_incr, end);
   110cd:	83 ec 04             	sub    $0x4,%esp
   110d0:	ff 75 e4             	push   -0x1c(%ebp)
   110d3:	ff 75 e8             	push   -0x18(%ebp)
   110d6:	68 47 75 01 00       	push   $0x17547
   110db:	e8 38 62 00 00       	call   17318 <log_printf>
   110e0:	83 c4 10             	add    $0x10,%esp
  task->heap_end = end;
   110e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   110e6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   110e9:	89 50 14             	mov    %edx,0x14(%eax)

  return (char*)end;
   110ec:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   110ef:	c9                   	leave  
   110f0:	c3                   	ret    

000110f1 <list_node_init>:
    list_node_t * first;
    list_node_t * last;
    int size;
}list_t;

static inline void list_node_init(list_node_t *node) {
   110f1:	55                   	push   %ebp
   110f2:	89 e5                	mov    %esp,%ebp
   110f4:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   110f7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   110fb:	75 19                	jne    11116 <list_node_init+0x25>
   110fd:	68 9c 75 01 00       	push   $0x1759c
   11102:	68 58 77 01 00       	push   $0x17758
   11107:	6a 20                	push   $0x20
   11109:	68 b4 75 01 00       	push   $0x175b4
   1110e:	e8 ef 54 00 00       	call   16602 <pannic>
   11113:	83 c4 10             	add    $0x10,%esp
    node->pre = node->next = (list_node_t*)0;
   11116:	8b 45 08             	mov    0x8(%ebp),%eax
   11119:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11120:	8b 45 08             	mov    0x8(%ebp),%eax
   11123:	8b 50 04             	mov    0x4(%eax),%edx
   11126:	8b 45 08             	mov    0x8(%ebp),%eax
   11129:	89 10                	mov    %edx,(%eax)
}
   1112b:	90                   	nop
   1112c:	c9                   	leave  
   1112d:	c3                   	ret    

0001112e <list_node_next>:
    ASSERT(node != (list_node_t*)0);

    return node->pre;
}

static inline list_node_t *list_node_next(list_node_t *node) {
   1112e:	55                   	push   %ebp
   1112f:	89 e5                	mov    %esp,%ebp
   11131:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   11134:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11138:	75 19                	jne    11153 <list_node_next+0x25>
   1113a:	68 9c 75 01 00       	push   $0x1759c
   1113f:	68 b8 77 01 00       	push   $0x177b8
   11144:	6a 2b                	push   $0x2b
   11146:	68 b4 75 01 00       	push   $0x175b4
   1114b:	e8 b2 54 00 00       	call   16602 <pannic>
   11150:	83 c4 10             	add    $0x10,%esp

    return node->next;
   11153:	8b 45 08             	mov    0x8(%ebp),%eax
   11156:	8b 40 04             	mov    0x4(%eax),%eax
}
   11159:	c9                   	leave  
   1115a:	c3                   	ret    

0001115b <list_init>:

static inline void list_init(list_t *list) {
   1115b:	55                   	push   %ebp
   1115c:	89 e5                	mov    %esp,%ebp
   1115e:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11161:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11165:	75 19                	jne    11180 <list_init+0x25>
   11167:	68 f2 75 01 00       	push   $0x175f2
   1116c:	68 68 77 01 00       	push   $0x17768
   11171:	6a 31                	push   $0x31
   11173:	68 b4 75 01 00       	push   $0x175b4
   11178:	e8 85 54 00 00       	call   16602 <pannic>
   1117d:	83 c4 10             	add    $0x10,%esp

    list->first = list->last = (list_node_t*)0;
   11180:	8b 45 08             	mov    0x8(%ebp),%eax
   11183:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1118a:	8b 45 08             	mov    0x8(%ebp),%eax
   1118d:	8b 50 04             	mov    0x4(%eax),%edx
   11190:	8b 45 08             	mov    0x8(%ebp),%eax
   11193:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   11195:	8b 45 08             	mov    0x8(%ebp),%eax
   11198:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   1119f:	90                   	nop
   111a0:	c9                   	leave  
   111a1:	c3                   	ret    

000111a2 <list_is_empty>:

static inline int list_is_empty(list_t *list) {
   111a2:	55                   	push   %ebp
   111a3:	89 e5                	mov    %esp,%ebp
   111a5:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   111a8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   111ac:	75 19                	jne    111c7 <list_is_empty+0x25>
   111ae:	68 f2 75 01 00       	push   $0x175f2
   111b3:	68 c8 77 01 00       	push   $0x177c8
   111b8:	6a 38                	push   $0x38
   111ba:	68 b4 75 01 00       	push   $0x175b4
   111bf:	e8 3e 54 00 00       	call   16602 <pannic>
   111c4:	83 c4 10             	add    $0x10,%esp

    return list->size == 0;
   111c7:	8b 45 08             	mov    0x8(%ebp),%eax
   111ca:	8b 40 08             	mov    0x8(%eax),%eax
   111cd:	85 c0                	test   %eax,%eax
   111cf:	0f 94 c0             	sete   %al
   111d2:	0f b6 c0             	movzbl %al,%eax
}
   111d5:	c9                   	leave  
   111d6:	c3                   	ret    

000111d7 <list_get_size>:

static inline int list_get_size(list_t *list) {
   111d7:	55                   	push   %ebp
   111d8:	89 e5                	mov    %esp,%ebp
   111da:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   111dd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   111e1:	75 19                	jne    111fc <list_get_size+0x25>
   111e3:	68 f2 75 01 00       	push   $0x175f2
   111e8:	68 f8 77 01 00       	push   $0x177f8
   111ed:	6a 3e                	push   $0x3e
   111ef:	68 b4 75 01 00       	push   $0x175b4
   111f4:	e8 09 54 00 00       	call   16602 <pannic>
   111f9:	83 c4 10             	add    $0x10,%esp

    return list->size;
   111fc:	8b 45 08             	mov    0x8(%ebp),%eax
   111ff:	8b 40 08             	mov    0x8(%eax),%eax
}
   11202:	c9                   	leave  
   11203:	c3                   	ret    

00011204 <list_get_first>:

static inline list_node_t *list_get_first(list_t *list) {
   11204:	55                   	push   %ebp
   11205:	89 e5                	mov    %esp,%ebp
   11207:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1120a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1120e:	75 19                	jne    11229 <list_get_first+0x25>
   11210:	68 f2 75 01 00       	push   $0x175f2
   11215:	68 a8 77 01 00       	push   $0x177a8
   1121a:	6a 44                	push   $0x44
   1121c:	68 b4 75 01 00       	push   $0x175b4
   11221:	e8 dc 53 00 00       	call   16602 <pannic>
   11226:	83 c4 10             	add    $0x10,%esp

    return list->first;
   11229:	8b 45 08             	mov    0x8(%ebp),%eax
   1122c:	8b 00                	mov    (%eax),%eax
}
   1122e:	c9                   	leave  
   1122f:	c3                   	ret    

00011230 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   11230:	55                   	push   %ebp
   11231:	89 e5                	mov    %esp,%ebp
   11233:	f4                   	hlt    
   11234:	90                   	nop
   11235:	5d                   	pop    %ebp
   11236:	c3                   	ret    

00011237 <write_cr3>:
static inline void write_cr3(uint32_t data) {
   11237:	55                   	push   %ebp
   11238:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("mov %[v], %%cr3" : : [v] "r"(data));
   1123a:	8b 45 08             	mov    0x8(%ebp),%eax
   1123d:	0f 22 d8             	mov    %eax,%cr3
}
   11240:	90                   	nop
   11241:	5d                   	pop    %ebp
   11242:	c3                   	ret    

00011243 <far_jump>:
 * @brief  远跳转，当跳转发生在TSS段之间时，cpu将会保存状态到当前TR寄存器指向的TSS段
 *
 * @param selector 选择子
 * @param offset 跳转的偏移量
 */
static inline void far_jump(uint32_t selector, uint32_t offset) {
   11243:	55                   	push   %ebp
   11244:	89 e5                	mov    %esp,%ebp
   11246:	83 ec 10             	sub    $0x10,%esp
  // 传入远跳转需要的参数, 即cs = selector, eip = offset 
  uint32_t addr[] = {offset, selector};  
   11249:	8b 45 0c             	mov    0xc(%ebp),%eax
   1124c:	89 45 f8             	mov    %eax,-0x8(%ebp)
   1124f:	8b 45 08             	mov    0x8(%ebp),%eax
   11252:	89 45 fc             	mov    %eax,-0x4(%ebp)

  __asm__ __volatile__("ljmpl *(%[a])" : : [a] "r"(addr));
   11255:	8d 45 f8             	lea    -0x8(%ebp),%eax
   11258:	ff 28                	ljmp   *(%eax)
}
   1125a:	90                   	nop
   1125b:	c9                   	leave  
   1125c:	c3                   	ret    

0001125d <write_tr>:
 * @brief   写入当前任务的TSS段描述符的选择子到TR寄存器中，告诉cpu当前段的TSS位置
 *          以便在进行任务切换时，将状态保存到该TSS段中
 * 
 * @param tss_selector 准备运行的任务的TSS段的选择子
 */
static inline void write_tr(uint16_t tss_selector) {
   1125d:	55                   	push   %ebp
   1125e:	89 e5                	mov    %esp,%ebp
   11260:	83 ec 04             	sub    $0x4,%esp
   11263:	8b 45 08             	mov    0x8(%ebp),%eax
   11266:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  __asm__ __volatile__("ltr %[v]" : : [v]"r"(tss_selector));
   1126a:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   1126e:	0f 00 d8             	ltr    %ax
}
   11271:	90                   	nop
   11272:	c9                   	leave  
   11273:	c3                   	ret    

00011274 <mmu_set_page_dir>:
static inline void mmu_set_page_dir(uint32_t paddr) {
   11274:	55                   	push   %ebp
   11275:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   11277:	ff 75 08             	push   0x8(%ebp)
   1127a:	e8 b8 ff ff ff       	call   11237 <write_cr3>
   1127f:	83 c4 04             	add    $0x4,%esp
}
   11282:	90                   	nop
   11283:	c9                   	leave  
   11284:	c3                   	ret    

00011285 <up2>:
static inline uint32_t up2(uint32_t size, uint32_t bound) {
   11285:	55                   	push   %ebp
   11286:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   11288:	8b 55 08             	mov    0x8(%ebp),%edx
   1128b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1128e:	01 d0                	add    %edx,%eax
   11290:	8d 50 ff             	lea    -0x1(%eax),%edx
   11293:	8b 45 0c             	mov    0xc(%ebp),%eax
   11296:	f7 d8                	neg    %eax
   11298:	21 d0                	and    %edx,%eax
}
   1129a:	5d                   	pop    %ebp
   1129b:	c3                   	ret    

0001129c <task_file>:
 * @brief 根据文件描述符从当前任务进程的打开文件表中返回对应的文件结构指针
 *
 * @param fd 文件描述符
 * @return file_t*
 */
file_t *task_file(int fd) {
   1129c:	55                   	push   %ebp
   1129d:	89 e5                	mov    %esp,%ebp
   1129f:	83 ec 18             	sub    $0x18,%esp
  file_t *file = (file_t *)0;
   112a2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  if (fd >= 0 && fd < TASK_OFILE_SIZE) {
   112a9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   112ad:	78 18                	js     112c7 <task_file+0x2b>
   112af:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   112b3:	7f 12                	jg     112c7 <task_file+0x2b>
    file = task_current()->file_table[fd];
   112b5:	e8 da 06 00 00       	call   11994 <task_current>
   112ba:	8b 55 08             	mov    0x8(%ebp),%edx
   112bd:	83 c2 30             	add    $0x30,%edx
   112c0:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   112c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
  }

  return file;
   112c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   112ca:	c9                   	leave  
   112cb:	c3                   	ret    

000112cc <task_alloc_fd>:
 * @brief 将已分配的文件结构指针放入当前进程的打开文件表中，并返回文件描述符
 *
 * @param file 已从系统file_table中分配的文件结构指针
 * @return int 文件描述符
 */
int task_alloc_fd(file_t *file) {
   112cc:	55                   	push   %ebp
   112cd:	89 e5                	mov    %esp,%ebp
   112cf:	83 ec 18             	sub    $0x18,%esp
  task_t *task = task_current();
   112d2:	e8 bd 06 00 00       	call   11994 <task_current>
   112d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
  for (int i = 0; i < TASK_OFILE_SIZE; ++i) {
   112da:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   112e1:	eb 2f                	jmp    11312 <task_alloc_fd+0x46>
    file_t *p = task->file_table[i];
   112e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   112e6:	8b 55 f4             	mov    -0xc(%ebp),%edx
   112e9:	83 c2 30             	add    $0x30,%edx
   112ec:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   112f0:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (p == (file_t *)0) {  // 打开文件表中的第i项未分配，对其进行分配操作
   112f3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   112f7:	75 15                	jne    1130e <task_alloc_fd+0x42>
      task->file_table[i] = file;
   112f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   112fc:	8b 55 f4             	mov    -0xc(%ebp),%edx
   112ff:	8d 4a 30             	lea    0x30(%edx),%ecx
   11302:	8b 55 08             	mov    0x8(%ebp),%edx
   11305:	89 54 88 08          	mov    %edx,0x8(%eax,%ecx,4)
      return i;
   11309:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1130c:	eb 0f                	jmp    1131d <task_alloc_fd+0x51>
  for (int i = 0; i < TASK_OFILE_SIZE; ++i) {
   1130e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11312:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   11316:	7e cb                	jle    112e3 <task_alloc_fd+0x17>
    }
  }

  return -1;
   11318:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1131d:	c9                   	leave  
   1131e:	c3                   	ret    

0001131f <task_remove_fd>:
/**
 * @brief 从当前进程的打开文件表中移除文件描述符对应的文件结构指针
 *
 * @param fd
 */
void task_remove_fd(int fd) {
   1131f:	55                   	push   %ebp
   11320:	89 e5                	mov    %esp,%ebp
   11322:	83 ec 08             	sub    $0x8,%esp
  // 清空文件描述符对应的内存资源即可
  if (fd >= 0 && fd < TASK_OFILE_SIZE) {
   11325:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11329:	78 19                	js     11344 <task_remove_fd+0x25>
   1132b:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   1132f:	7f 13                	jg     11344 <task_remove_fd+0x25>
    task_current()->file_table[fd] = (file_t *)0;
   11331:	e8 5e 06 00 00       	call   11994 <task_current>
   11336:	8b 55 08             	mov    0x8(%ebp),%edx
   11339:	83 c2 30             	add    $0x30,%edx
   1133c:	c7 44 90 08 00 00 00 	movl   $0x0,0x8(%eax,%edx,4)
   11343:	00 
  }
}
   11344:	90                   	nop
   11345:	c9                   	leave  
   11346:	c3                   	ret    

00011347 <switch_to_tss>:

static void switch_to_tss(uint16_t tss_selector) {
   11347:	55                   	push   %ebp
   11348:	89 e5                	mov    %esp,%ebp
   1134a:	83 ec 04             	sub    $0x4,%esp
   1134d:	8b 45 08             	mov    0x8(%ebp),%eax
   11350:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  // 进行远跳转，让cpu访问该tss段的描述符，cpu将重启到之前运行该tss对应的任务的状态继续运行该任务
  far_jump(tss_selector, 0);
   11354:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   11358:	6a 00                	push   $0x0
   1135a:	50                   	push   %eax
   1135b:	e8 e3 fe ff ff       	call   11243 <far_jump>
   11360:	83 c4 08             	add    $0x8,%esp
}
   11363:	90                   	nop
   11364:	c9                   	leave  
   11365:	c3                   	ret    

00011366 <task_switch_from_to>:
 * @brief  将任务从from切换到to
 *
 * @param from 切换前的任务
 * @param to 切换后的任务
 */
void task_switch_from_to(task_t *from, task_t *to) {
   11366:	55                   	push   %ebp
   11367:	89 e5                	mov    %esp,%ebp
  // 跳转到对应的tss段读取并恢复cpu任务状态
  switch_to_tss(to->tss_selector);
   11369:	8b 45 0c             	mov    0xc(%ebp),%eax
   1136c:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
   11372:	0f b7 c0             	movzwl %ax,%eax
   11375:	50                   	push   %eax
   11376:	e8 cc ff ff ff       	call   11347 <switch_to_tss>
   1137b:	83 c4 04             	add    $0x4,%esp
}
   1137e:	90                   	nop
   1137f:	c9                   	leave  
   11380:	c3                   	ret    

00011381 <tss_init>:
 * @param task 需要初始化的任务对象
 * @param entry 任务入口地址
 * @param esp 任务所用的栈顶指针
 * @param flag 任务属性标志位，如特权级
 */
static int tss_init(task_t *task, uint32_t entry, uint32_t esp, uint32_t flag) {
   11381:	55                   	push   %ebp
   11382:	89 e5                	mov    %esp,%ebp
   11384:	83 ec 28             	sub    $0x28,%esp
  // 1.将该TSS段绑定到GDT中的某个段描述符
  uint32_t tss_selector = gdt_alloc_desc();
   11387:	e8 50 15 00 00       	call   128dc <gdt_alloc_desc>
   1138c:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if (tss_selector < 0) {
    log_printf("alloc tss failed!\n");
    return -1;
  }
  segment_desc_set(tss_selector, (uint32_t)&task->tss, sizeof(task->tss),
   1138f:	8b 45 08             	mov    0x8(%ebp),%eax
   11392:	83 c0 5c             	add    $0x5c,%eax
   11395:	89 c2                	mov    %eax,%edx
   11397:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1139a:	0f b7 c0             	movzwl %ax,%eax
   1139d:	68 89 00 00 00       	push   $0x89
   113a2:	6a 68                	push   $0x68
   113a4:	52                   	push   %edx
   113a5:	50                   	push   %eax
   113a6:	e8 bf 13 00 00       	call   1276a <segment_desc_set>
   113ab:	83 c4 10             	add    $0x10,%esp
                   SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_TYPE_TSS);

  // 2.将tss段的值置空
  kernel_memset(&task->tss, 0, sizeof(task->tss));
   113ae:	8b 45 08             	mov    0x8(%ebp),%eax
   113b1:	83 c0 5c             	add    $0x5c,%eax
   113b4:	83 ec 04             	sub    $0x4,%esp
   113b7:	6a 68                	push   $0x68
   113b9:	6a 00                	push   $0x0
   113bb:	50                   	push   %eax
   113bc:	e8 5a 57 00 00       	call   16b1b <kernel_memset>
   113c1:	83 c4 10             	add    $0x10,%esp

  // 3.记录tss绑定到的描述符的选择子
  task->tss_selector = tss_selector;
   113c4:	8b 45 08             	mov    0x8(%ebp),%eax
   113c7:	8b 55 ec             	mov    -0x14(%ebp),%edx
   113ca:	89 90 c4 00 00 00    	mov    %edx,0xc4(%eax)

  // 4.根据任务的特权级来设置对应选择子的cpl
  uint32_t code_selector, data_selector;
  if (flag & TASK_FLAGS_SYSTEM) {  // 内核特权级
   113d0:	8b 45 14             	mov    0x14(%ebp),%eax
   113d3:	83 e0 01             	and    $0x1,%eax
   113d6:	85 c0                	test   %eax,%eax
   113d8:	74 10                	je     113ea <tss_init+0x69>
    code_selector = KERNEL_SELECTOR_CS;
   113da:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%ebp)
    data_selector = KERNEL_SELECTOR_DS;
   113e1:	c7 45 f0 10 00 00 00 	movl   $0x10,-0x10(%ebp)
   113e8:	eb 16                	jmp    11400 <tss_init+0x7f>
  } else {  // 用户特权级
    // 获取任务的代码段选择子和数据段选择子，并初始化其CPL,因为是平台模型，所以基本不涉及到跨段访问，所以不需要RPL
    code_selector = task_manager.app_code_selector | SEG_CPL3;
   113ea:	a1 b8 35 02 00       	mov    0x235b8,%eax
   113ef:	83 c8 03             	or     $0x3,%eax
   113f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    data_selector = task_manager.app_data_selector | SEG_CPL3;
   113f5:	a1 bc 35 02 00       	mov    0x235bc,%eax
   113fa:	83 c8 03             	or     $0x3,%eax
   113fd:	89 45 f0             	mov    %eax,-0x10(%ebp)
  }

  // 5.设置eip，即任务的起始地址
  task->tss.eip = entry;
   11400:	8b 45 08             	mov    0x8(%ebp),%eax
   11403:	8b 55 0c             	mov    0xc(%ebp),%edx
   11406:	89 50 7c             	mov    %edx,0x7c(%eax)

  // 6.根据任务的特权级设置任务所使用的栈空间
  task->tss.esp = esp;  // 特权级为3的栈空间
   11409:	8b 45 08             	mov    0x8(%ebp),%eax
   1140c:	8b 55 10             	mov    0x10(%ebp),%edx
   1140f:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
  uint32_t kernel_stack =
      memory_alloc_page();  // 分配一页作为内核特权级0的栈空间
   11415:	e8 22 fa ff ff       	call   10e3c <memory_alloc_page>
   1141a:	89 45 e8             	mov    %eax,-0x18(%ebp)
  if (kernel_stack == 0)    // 内核栈空间初始化失败
   1141d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11421:	0f 84 9e 00 00 00    	je     114c5 <tss_init+0x144>
    goto tss_init_failed;
  else
    task->tss.esp0 = kernel_stack + MEM_PAGE_SIZE;  // 特权级为0的栈空间
   11427:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1142a:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edx
   11430:	8b 45 08             	mov    0x8(%ebp),%eax
   11433:	89 50 60             	mov    %edx,0x60(%eax)

  // 7.平坦模型，初始化栈空间段寄存器
  task->tss.ss = data_selector;  // 特权级为3时使用的栈段
   11436:	8b 45 08             	mov    0x8(%ebp),%eax
   11439:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1143c:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
  task->tss.ss0 =
   11442:	8b 45 08             	mov    0x8(%ebp),%eax
   11445:	c7 40 64 10 00 00 00 	movl   $0x10,0x64(%eax)
      KERNEL_SELECTOR_DS;  // 特权级为0时使用的栈段，
                           // 由于平坦模型，其实使用的是同一片空间，只是特权级发生了变化

  // 8. 平坦模型，初始其余化段寄存器
  task->tss.es = task->tss.fs = task->tss.gs = task->tss.ds = data_selector;
   1144c:	8b 45 08             	mov    0x8(%ebp),%eax
   1144f:	8b 55 f0             	mov    -0x10(%ebp),%edx
   11452:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
   11458:	8b 45 08             	mov    0x8(%ebp),%eax
   1145b:	8b 90 b0 00 00 00    	mov    0xb0(%eax),%edx
   11461:	8b 45 08             	mov    0x8(%ebp),%eax
   11464:	89 90 b8 00 00 00    	mov    %edx,0xb8(%eax)
   1146a:	8b 45 08             	mov    0x8(%ebp),%eax
   1146d:	8b 90 b8 00 00 00    	mov    0xb8(%eax),%edx
   11473:	8b 45 08             	mov    0x8(%ebp),%eax
   11476:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)
   1147c:	8b 45 08             	mov    0x8(%ebp),%eax
   1147f:	8b 90 b4 00 00 00    	mov    0xb4(%eax),%edx
   11485:	8b 45 08             	mov    0x8(%ebp),%eax
   11488:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)

  // 9.平坦模型，初始化代码段寄存器
  task->tss.cs = code_selector;
   1148e:	8b 45 08             	mov    0x8(%ebp),%eax
   11491:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11494:	89 90 a8 00 00 00    	mov    %edx,0xa8(%eax)

  // 10.初始化eflags寄存器，使cpu中断保持开启
  task->tss.eflags = EFLAGS_DEFAULT_1 | EFLAGS_IF;
   1149a:	8b 45 08             	mov    0x8(%ebp),%eax
   1149d:	c7 80 80 00 00 00 02 	movl   $0x202,0x80(%eax)
   114a4:	02 00 00 

  // 11.创建当前进程的虚拟页目录表，并设置cr3寄存器
  uint32_t page_dir = memory_creat_uvm();
   114a7:	e8 b4 f4 ff ff       	call   10960 <memory_creat_uvm>
   114ac:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  if (page_dir == 0) goto tss_init_failed;
   114af:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   114b3:	74 13                	je     114c8 <tss_init+0x147>
  task->tss.cr3 = page_dir;
   114b5:	8b 45 08             	mov    0x8(%ebp),%eax
   114b8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   114bb:	89 50 78             	mov    %edx,0x78(%eax)

  return 0;
   114be:	b8 00 00 00 00       	mov    $0x0,%eax
   114c3:	eb 2f                	jmp    114f4 <tss_init+0x173>
    goto tss_init_failed;
   114c5:	90                   	nop
   114c6:	eb 01                	jmp    114c9 <tss_init+0x148>
  if (page_dir == 0) goto tss_init_failed;
   114c8:	90                   	nop

// tss初始化失败
tss_init_failed:
  gdt_free(tss_selector);  // 释放选择子
   114c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   114cc:	0f b7 c0             	movzwl %ax,%eax
   114cf:	83 ec 0c             	sub    $0xc,%esp
   114d2:	50                   	push   %eax
   114d3:	e8 79 14 00 00       	call   12951 <gdt_free>
   114d8:	83 c4 10             	add    $0x10,%esp

  if (kernel_stack) {  // 内核栈空间分配有效，需要释放
   114db:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   114df:	74 0e                	je     114ef <tss_init+0x16e>
    memory_free_page(kernel_stack);
   114e1:	83 ec 0c             	sub    $0xc,%esp
   114e4:	ff 75 e8             	push   -0x18(%ebp)
   114e7:	e8 70 f9 ff ff       	call   10e5c <memory_free_page>
   114ec:	83 c4 10             	add    $0x10,%esp
  }
  return -1;
   114ef:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   114f4:	c9                   	leave  
   114f5:	c3                   	ret    

000114f6 <task_start>:
/**
 * @brief 将任务插入任务链表中并设为就绪态，标志该任务可被调度
 *
 * @param task
 */
void task_start(task_t *task) {
   114f6:	55                   	push   %ebp
   114f7:	89 e5                	mov    %esp,%ebp
   114f9:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   114fc:	e8 06 1e 00 00       	call   13307 <idt_enter_protection>
   11501:	89 45 f4             	mov    %eax,-0xc(%ebp)

  //将任务设置为就绪态
  task_set_ready(task);
   11504:	83 ec 0c             	sub    $0xc,%esp
   11507:	ff 75 08             	push   0x8(%ebp)
   1150a:	e8 d3 03 00 00       	call   118e2 <task_set_ready>
   1150f:	83 c4 10             	add    $0x10,%esp
  task->state = TASK_READY;
   11512:	8b 45 08             	mov    0x8(%ebp),%eax
   11515:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

  idt_leave_protection(state);  // TODO:解锁
   1151b:	83 ec 0c             	sub    $0xc,%esp
   1151e:	ff 75 f4             	push   -0xc(%ebp)
   11521:	e8 f9 1d 00 00       	call   1331f <idt_leave_protection>
   11526:	83 c4 10             	add    $0x10,%esp
}
   11529:	90                   	nop
   1152a:	c9                   	leave  
   1152b:	c3                   	ret    

0001152c <task_init>:
 * @param esp 任务指行时所用的栈顶指针
 * @param flag 任务属性标志位，如特权级
 * @return int
 */
int task_init(task_t *task, const char *name, uint32_t entry, uint32_t esp,
              uint32_t flag) {
   1152c:	55                   	push   %ebp
   1152d:	89 e5                	mov    %esp,%ebp
   1152f:	83 ec 18             	sub    $0x18,%esp
  ASSERT(task != (task_t *)0);
   11532:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11536:	75 1c                	jne    11554 <task_init+0x28>
   11538:	68 05 76 01 00       	push   $0x17605
   1153d:	68 4c 77 01 00       	push   $0x1774c
   11542:	68 ca 00 00 00       	push   $0xca
   11547:	68 1c 76 01 00       	push   $0x1761c
   1154c:	e8 b1 50 00 00       	call   16602 <pannic>
   11551:	83 c4 10             	add    $0x10,%esp
  // 1.初始化任务TSS段
  int err = tss_init(task, entry, esp, flag);
   11554:	ff 75 18             	push   0x18(%ebp)
   11557:	ff 75 14             	push   0x14(%ebp)
   1155a:	ff 75 10             	push   0x10(%ebp)
   1155d:	ff 75 08             	push   0x8(%ebp)
   11560:	e8 1c fe ff ff       	call   11381 <tss_init>
   11565:	83 c4 10             	add    $0x10,%esp
   11568:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (err == -1) return err;
   1156b:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
   1156f:	75 08                	jne    11579 <task_init+0x4d>
   11571:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11574:	e9 e0 00 00 00       	jmp    11659 <task_init+0x12d>

  // 2.初始化任务名称
  kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   11579:	8b 45 08             	mov    0x8(%ebp),%eax
   1157c:	83 c0 24             	add    $0x24,%eax
   1157f:	83 ec 04             	sub    $0x4,%esp
   11582:	6a 20                	push   $0x20
   11584:	ff 75 0c             	push   0xc(%ebp)
   11587:	50                   	push   %eax
   11588:	e8 38 54 00 00       	call   169c5 <kernel_strncpy>
   1158d:	83 c4 10             	add    $0x10,%esp

  // 3.初始化任务队列节点及就绪队列节点
  list_node_init(&task->ready_node);
   11590:	8b 45 08             	mov    0x8(%ebp),%eax
   11593:	83 c0 44             	add    $0x44,%eax
   11596:	83 ec 0c             	sub    $0xc,%esp
   11599:	50                   	push   %eax
   1159a:	e8 52 fb ff ff       	call   110f1 <list_node_init>
   1159f:	83 c4 10             	add    $0x10,%esp
  list_node_init(&task->task_node);
   115a2:	8b 45 08             	mov    0x8(%ebp),%eax
   115a5:	83 c0 4c             	add    $0x4c,%eax
   115a8:	83 ec 0c             	sub    $0xc,%esp
   115ab:	50                   	push   %eax
   115ac:	e8 40 fb ff ff       	call   110f1 <list_node_init>
   115b1:	83 c4 10             	add    $0x10,%esp
  list_node_init(&task->wait_node);
   115b4:	8b 45 08             	mov    0x8(%ebp),%eax
   115b7:	83 c0 54             	add    $0x54,%eax
   115ba:	83 ec 0c             	sub    $0xc,%esp
   115bd:	50                   	push   %eax
   115be:	e8 2e fb ff ff       	call   110f1 <list_node_init>
   115c3:	83 c4 10             	add    $0x10,%esp

  // 4.初始化最大时间片数与当前拥有时间片数,以及延时时间片数
  task->state = TASK_CREATED;
   115c6:	8b 45 08             	mov    0x8(%ebp),%eax
   115c9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  task->slice_max = task->slice_curr = TASK_TIME_SLICE_DEFAULT;
   115cf:	8b 45 08             	mov    0x8(%ebp),%eax
   115d2:	c7 40 1c 0a 00 00 00 	movl   $0xa,0x1c(%eax)
   115d9:	8b 45 08             	mov    0x8(%ebp),%eax
   115dc:	8b 50 1c             	mov    0x1c(%eax),%edx
   115df:	8b 45 08             	mov    0x8(%ebp),%eax
   115e2:	89 50 18             	mov    %edx,0x18(%eax)
  task->sleep = 0;
   115e5:	8b 45 08             	mov    0x8(%ebp),%eax
   115e8:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
  task->pid = (uint32_t)task;
   115ef:	8b 55 08             	mov    0x8(%ebp),%edx
   115f2:	8b 45 08             	mov    0x8(%ebp),%eax
   115f5:	89 50 08             	mov    %edx,0x8(%eax)
  task->parent = (task_t *)0;
   115f8:	8b 45 08             	mov    0x8(%ebp),%eax
   115fb:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  task->heap_start = task->heap_end = 0;
   11602:	8b 45 08             	mov    0x8(%ebp),%eax
   11605:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
   1160c:	8b 45 08             	mov    0x8(%ebp),%eax
   1160f:	8b 50 14             	mov    0x14(%eax),%edx
   11612:	8b 45 08             	mov    0x8(%ebp),%eax
   11615:	89 50 10             	mov    %edx,0x10(%eax)
  task->status = 0;
   11618:	8b 45 08             	mov    0x8(%ebp),%eax
   1161b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)

  // 5.初始化文件表
  kernel_memset(&task->file_table, 0, sizeof(task->file_table));
   11622:	8b 45 08             	mov    0x8(%ebp),%eax
   11625:	05 c8 00 00 00       	add    $0xc8,%eax
   1162a:	83 ec 04             	sub    $0x4,%esp
   1162d:	68 00 02 00 00       	push   $0x200
   11632:	6a 00                	push   $0x0
   11634:	50                   	push   %eax
   11635:	e8 e1 54 00 00       	call   16b1b <kernel_memset>
   1163a:	83 c4 10             	add    $0x10,%esp

  // 6.将任务加入任务队列
  list_insert_last(&task_manager.task_list, &task->task_node);
   1163d:	8b 45 08             	mov    0x8(%ebp),%eax
   11640:	83 c0 4c             	add    $0x4c,%eax
   11643:	83 ec 08             	sub    $0x8,%esp
   11646:	50                   	push   %eax
   11647:	68 10 30 02 00       	push   $0x23010
   1164c:	e8 da 59 00 00       	call   1702b <list_insert_last>
   11651:	83 c4 10             	add    $0x10,%esp

  return 1;
   11654:	b8 01 00 00 00       	mov    $0x1,%eax
}
   11659:	c9                   	leave  
   1165a:	c3                   	ret    

0001165b <task_uninit>:
/**
 * @brief 反初始化任务对象，释放对应的资源
 *
 * @param task
 */
void task_uninit(task_t *task) {
   1165b:	55                   	push   %ebp
   1165c:	89 e5                	mov    %esp,%ebp
   1165e:	83 ec 08             	sub    $0x8,%esp
  //释放已分配的选择子
  if (task->tss_selector) {  
   11661:	8b 45 08             	mov    0x8(%ebp),%eax
   11664:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
   1166a:	85 c0                	test   %eax,%eax
   1166c:	74 18                	je     11686 <task_uninit+0x2b>
    gdt_free(task->tss_selector);
   1166e:	8b 45 08             	mov    0x8(%ebp),%eax
   11671:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
   11677:	0f b7 c0             	movzwl %ax,%eax
   1167a:	83 ec 0c             	sub    $0xc,%esp
   1167d:	50                   	push   %eax
   1167e:	e8 ce 12 00 00       	call   12951 <gdt_free>
   11683:	83 c4 10             	add    $0x10,%esp
  }

  //释放已分配的内核栈空间
  if (task->tss.esp0) {  
   11686:	8b 45 08             	mov    0x8(%ebp),%eax
   11689:	8b 40 60             	mov    0x60(%eax),%eax
   1168c:	85 c0                	test   %eax,%eax
   1168e:	74 17                	je     116a7 <task_uninit+0x4c>
    memory_free_page((uint32_t)(task->tss.esp0 - MEM_PAGE_SIZE));
   11690:	8b 45 08             	mov    0x8(%ebp),%eax
   11693:	8b 40 60             	mov    0x60(%eax),%eax
   11696:	2d 00 10 00 00       	sub    $0x1000,%eax
   1169b:	83 ec 0c             	sub    $0xc,%esp
   1169e:	50                   	push   %eax
   1169f:	e8 b8 f7 ff ff       	call   10e5c <memory_free_page>
   116a4:	83 c4 10             	add    $0x10,%esp
  }
  
  //释放为页目录分配的页空间及其映射关系
  if (task->tss.cr3) {  
   116a7:	8b 45 08             	mov    0x8(%ebp),%eax
   116aa:	8b 40 78             	mov    0x78(%eax),%eax
   116ad:	85 c0                	test   %eax,%eax
   116af:	74 12                	je     116c3 <task_uninit+0x68>
    memory_destroy_uvm(task->tss.cr3);
   116b1:	8b 45 08             	mov    0x8(%ebp),%eax
   116b4:	8b 40 78             	mov    0x78(%eax),%eax
   116b7:	83 ec 0c             	sub    $0xc,%esp
   116ba:	50                   	push   %eax
   116bb:	e8 b2 f4 ff ff       	call   10b72 <memory_destroy_uvm>
   116c0:	83 c4 10             	add    $0x10,%esp
  }


  //将任务结构从任务管理器的任务队列中取下
  list_remove(&task_manager.task_list, &task->task_node);
   116c3:	8b 45 08             	mov    0x8(%ebp),%eax
   116c6:	83 c0 4c             	add    $0x4c,%eax
   116c9:	83 ec 08             	sub    $0x8,%esp
   116cc:	50                   	push   %eax
   116cd:	68 10 30 02 00       	push   $0x23010
   116d2:	e8 49 5b 00 00       	call   17220 <list_remove>
   116d7:	83 c4 10             	add    $0x10,%esp
  
  //释放全局任务表中的task结构资源
  free_task(task);
   116da:	83 ec 0c             	sub    $0xc,%esp
   116dd:	ff 75 08             	push   0x8(%ebp)
   116e0:	e8 3b 05 00 00       	call   11c20 <free_task>
   116e5:	83 c4 10             	add    $0x10,%esp
}
   116e8:	90                   	nop
   116e9:	c9                   	leave  
   116ea:	c3                   	ret    

000116eb <empty_task>:
static uint32_t empty_task_stack[EMPTY_TASK_STACK_SIZE];
/**
 * @brief  空闲进程，当所有进程都延时运行时，让cpu运行空闲进程
 *
 */
static void empty_task(void) {
   116eb:	55                   	push   %ebp
   116ec:	89 e5                	mov    %esp,%ebp
  while (1) {
    // 停止cpu运行，让cpu等待时间中断
    hlt();
   116ee:	e8 3d fb ff ff       	call   11230 <hlt>
   116f3:	eb f9                	jmp    116ee <empty_task+0x3>

000116f5 <task_manager_init>:

/**
 * @brief  初始化任务管理器
 *
 */
void task_manager_init(void) {
   116f5:	55                   	push   %ebp
   116f6:	89 e5                	mov    %esp,%ebp
   116f8:	83 ec 18             	sub    $0x18,%esp
  // 1.初始化应用程序及所有任务的代码段选择子和数据段选择子，以区分和内核选择子的特权级
  // 应用程序运行在 DPL_3 下，
  // 内核运行在DPL_0下，配合分页机制中的us位，0为内核特权级，1为用户特权级
  // 就可做到特权级保护
  uint32_t data_selector = gdt_alloc_desc();
   116fb:	e8 dc 11 00 00       	call   128dc <gdt_alloc_desc>
   11700:	89 45 f4             	mov    %eax,-0xc(%ebp)
  uint32_t code_selector = gdt_alloc_desc();
   11703:	e8 d4 11 00 00       	call   128dc <gdt_alloc_desc>
   11708:	89 45 f0             	mov    %eax,-0x10(%ebp)
  segment_desc_set(data_selector, 0, 0xffffffff,
   1170b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1170e:	0f b7 c0             	movzwl %ax,%eax
   11711:	68 f2 40 00 00       	push   $0x40f2
   11716:	6a ff                	push   $0xffffffff
   11718:	6a 00                	push   $0x0
   1171a:	50                   	push   %eax
   1171b:	e8 4a 10 00 00       	call   1276a <segment_desc_set>
   11720:	83 c4 10             	add    $0x10,%esp
                   SEG_ATTR_P | SEG_ATTR_DPL_3 | SEG_ATTR_S_NORMAL |
                       SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);
  segment_desc_set(code_selector, 0, 0xffffffff,
   11723:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11726:	0f b7 c0             	movzwl %ax,%eax
   11729:	68 fa 40 00 00       	push   $0x40fa
   1172e:	6a ff                	push   $0xffffffff
   11730:	6a 00                	push   $0x0
   11732:	50                   	push   %eax
   11733:	e8 32 10 00 00       	call   1276a <segment_desc_set>
   11738:	83 c4 10             	add    $0x10,%esp
                   SEG_ATTR_P | SEG_ATTR_DPL_3 | SEG_ATTR_S_NORMAL |
                       SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);
  task_manager.app_code_selector = code_selector;
   1173b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1173e:	a3 b8 35 02 00       	mov    %eax,0x235b8
  task_manager.app_data_selector = data_selector;
   11743:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11746:	a3 bc 35 02 00       	mov    %eax,0x235bc

  // 2.初始化所有任务队列
  list_init(&task_manager.ready_list);
   1174b:	83 ec 0c             	sub    $0xc,%esp
   1174e:	68 04 30 02 00       	push   $0x23004
   11753:	e8 03 fa ff ff       	call   1115b <list_init>
   11758:	83 c4 10             	add    $0x10,%esp
  list_init(&task_manager.task_list);
   1175b:	83 ec 0c             	sub    $0xc,%esp
   1175e:	68 10 30 02 00       	push   $0x23010
   11763:	e8 f3 f9 ff ff       	call   1115b <list_init>
   11768:	83 c4 10             	add    $0x10,%esp
  list_init(&task_manager.sleep_list);
   1176b:	83 ec 0c             	sub    $0xc,%esp
   1176e:	68 1c 30 02 00       	push   $0x2301c
   11773:	e8 e3 f9 ff ff       	call   1115b <list_init>
   11778:	83 c4 10             	add    $0x10,%esp

  // 3.将当前任务置零
  task_manager.curr_task = (task_t *)0;
   1177b:	c7 05 00 30 02 00 00 	movl   $0x0,0x23000
   11782:	00 00 00 

  // 4.初始化空闲进程
  task_init(&task_manager.empty_task, "empty_task", (uint32_t)empty_task,
   11785:	ba e0 9b 03 00       	mov    $0x39be0,%edx
   1178a:	b8 eb 16 01 00       	mov    $0x116eb,%eax
   1178f:	83 ec 0c             	sub    $0xc,%esp
   11792:	6a 01                	push   $0x1
   11794:	52                   	push   %edx
   11795:	50                   	push   %eax
   11796:	68 51 76 01 00       	push   $0x17651
   1179b:	68 f0 32 02 00       	push   $0x232f0
   117a0:	e8 87 fd ff ff       	call   1152c <task_init>
   117a5:	83 c4 20             	add    $0x20,%esp
            (uint32_t)&empty_task_stack[EMPTY_TASK_STACK_SIZE],
            TASK_FLAGS_SYSTEM);

  // 5.初始化静态任务表,及其互斥锁
  kernel_memset(task_table, 0, sizeof(task_table));
   117a8:	83 ec 04             	sub    $0x4,%esp
   117ab:	68 00 64 01 00       	push   $0x16400
   117b0:	6a 00                	push   $0x0
   117b2:	68 c0 35 02 00       	push   $0x235c0
   117b7:	e8 5f 53 00 00       	call   16b1b <kernel_memset>
   117bc:	83 c4 10             	add    $0x10,%esp
  mutex_init(&task_table_lock);
   117bf:	83 ec 0c             	sub    $0xc,%esp
   117c2:	68 c0 99 03 00       	push   $0x399c0
   117c7:	e8 1d 47 00 00       	call   15ee9 <mutex_init>
   117cc:	83 c4 10             	add    $0x10,%esp
}
   117cf:	90                   	nop
   117d0:	c9                   	leave  
   117d1:	c3                   	ret    

000117d2 <task_first_init>:
 *     页目录表 = 1页
 * ------------------
 * 内核0特权级栈 = 1页
 * ------------------
 */
void task_first_init(void) {
   117d2:	55                   	push   %ebp
   117d3:	89 e5                	mov    %esp,%ebp
   117d5:	83 ec 18             	sub    $0x18,%esp
  void first_task_entry(void);

  // 2.确定第一个任务进程需要的空间大小
  extern char s_first_task[], e_first_task[];
  uint32_t copy_size =
      (uint32_t)(e_first_task - s_first_task);  // 进程所需空间大小
   117d8:	b8 97 13 07 00       	mov    $0x71397,%eax
   117dd:	2d 00 10 07 00       	sub    $0x71000,%eax
  uint32_t copy_size =
   117e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
  uint32_t alloc_size =
      up2(copy_size, MEM_PAGE_SIZE) +
   117e5:	68 00 10 00 00       	push   $0x1000
   117ea:	ff 75 f4             	push   -0xc(%ebp)
   117ed:	e8 93 fa ff ff       	call   11285 <up2>
   117f2:	83 c4 08             	add    $0x8,%esp
  uint32_t alloc_size =
   117f5:	05 00 a0 00 00       	add    $0xa000,%eax
   117fa:	89 45 f0             	mov    %eax,-0x10(%ebp)
      10 *
          MEM_PAGE_SIZE;  // 需要为进程分配的内存大小，按4kb对齐,并多拿五页当作栈空间
  ASSERT(copy_size < alloc_size);
   117fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11800:	3b 45 f0             	cmp    -0x10(%ebp),%eax
   11803:	72 1c                	jb     11821 <task_first_init+0x4f>
   11805:	68 5c 76 01 00       	push   $0x1765c
   1180a:	68 74 77 01 00       	push   $0x17774
   1180f:	68 6e 01 00 00       	push   $0x16e
   11814:	68 1c 76 01 00       	push   $0x1761c
   11819:	e8 e4 4d 00 00       	call   16602 <pannic>
   1181e:	83 c4 10             	add    $0x10,%esp

  uint32_t task_start_addr =
   11821:	c7 45 ec 00 00 00 80 	movl   $0x80000000,-0x14(%ebp)
      (uint32_t)first_task_entry;  // 获取第一个任务的入口地址

  // 3.初始化第一个任务,因为当前为操作系统进程，esp初始值随意赋值都可，
  //  因为当前进程已开启，cpu会在切换的时候保留真实的状态，即真实的esp值
  task_init(&task_manager.first_task, "first task", task_start_addr,
   11828:	8b 55 ec             	mov    -0x14(%ebp),%edx
   1182b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1182e:	01 d0                	add    %edx,%eax
   11830:	83 ec 0c             	sub    $0xc,%esp
   11833:	6a 00                	push   $0x0
   11835:	50                   	push   %eax
   11836:	ff 75 ec             	push   -0x14(%ebp)
   11839:	68 73 76 01 00       	push   $0x17673
   1183e:	68 28 30 02 00       	push   $0x23028
   11843:	e8 e4 fc ff ff       	call   1152c <task_init>
   11848:	83 c4 20             	add    $0x20,%esp
            task_start_addr + alloc_size, TASK_FLAGS_USER);

  // 4.初始化进程的起始堆空间 TODO:不对，此处堆区还在低2gb的内核空间中
  task_manager.first_task.heap_start =
      (uint32_t)e_first_task;  // 堆起始地址紧靠程序bss段之后
   1184b:	b8 97 13 07 00       	mov    $0x71397,%eax
  task_manager.first_task.heap_start =
   11850:	a3 38 30 02 00       	mov    %eax,0x23038
  task_manager.first_task.heap_end = (uint32_t)e_first_task;  // 堆大小初始为0
   11855:	b8 97 13 07 00       	mov    $0x71397,%eax
   1185a:	a3 3c 30 02 00       	mov    %eax,0x2303c

  // 5.将当前任务的TSS选择子告诉cpu，用来切换任务时保存状态
  write_tr(task_manager.first_task.tss_selector);
   1185f:	a1 ec 30 02 00       	mov    0x230ec,%eax
   11864:	0f b7 c0             	movzwl %ax,%eax
   11867:	83 ec 0c             	sub    $0xc,%esp
   1186a:	50                   	push   %eax
   1186b:	e8 ed f9 ff ff       	call   1125d <write_tr>
   11870:	83 c4 10             	add    $0x10,%esp

  // 6.将当前任务执行第一个任务
  task_manager.curr_task = &task_manager.first_task;
   11873:	c7 05 00 30 02 00 28 	movl   $0x23028,0x23000
   1187a:	30 02 00 

  // 7.将当前页表设置为第一个任务的页表
  mmu_set_page_dir(task_manager.first_task.tss.cr3);
   1187d:	a1 a0 30 02 00       	mov    0x230a0,%eax
   11882:	83 ec 0c             	sub    $0xc,%esp
   11885:	50                   	push   %eax
   11886:	e8 e9 f9 ff ff       	call   11274 <mmu_set_page_dir>
   1188b:	83 c4 10             	add    $0x10,%esp

  // 8.将当前任务状态设置为运行态
  task_manager.curr_task->state = TASK_RUNNING;
   1188e:	a1 00 30 02 00       	mov    0x23000,%eax
   11893:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

  // 9.进程的各个段还只是在虚拟地址中，所以要为各个段分配物理地址页空间，并进行映射
  memory_alloc_page_for(task_start_addr, alloc_size, PTE_P | PTE_W | PTE_U);
   11899:	83 ec 04             	sub    $0x4,%esp
   1189c:	6a 07                	push   $0x7
   1189e:	ff 75 f0             	push   -0x10(%ebp)
   118a1:	ff 75 ec             	push   -0x14(%ebp)
   118a4:	e8 61 f5 ff ff       	call   10e0a <memory_alloc_page_for>
   118a9:	83 c4 10             	add    $0x10,%esp

  // 10.将任务进程各个段从内核四个段之后的紧邻位置，拷贝到已分配好的且与虚拟地址对应的物理地址空间，实现代码隔离
  kernel_memcpy(first_task_entry, s_first_task, alloc_size);
   118ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
   118af:	83 ec 04             	sub    $0x4,%esp
   118b2:	50                   	push   %eax
   118b3:	68 00 10 07 00       	push   $0x71000
   118b8:	68 00 00 00 80       	push   $0x80000000
   118bd:	e8 0a 52 00 00       	call   16acc <kernel_memcpy>
   118c2:	83 c4 10             	add    $0x10,%esp

  // 11.将任务设为可被调度
  task_start(&task_manager.first_task);
   118c5:	83 ec 0c             	sub    $0xc,%esp
   118c8:	68 28 30 02 00       	push   $0x23028
   118cd:	e8 24 fc ff ff       	call   114f6 <task_start>
   118d2:	83 c4 10             	add    $0x10,%esp
}
   118d5:	90                   	nop
   118d6:	c9                   	leave  
   118d7:	c3                   	ret    

000118d8 <task_first_task>:
/**
 * @brief  获取当前任务管理器的第一个任务
 *
 * @return task_t*
 */
task_t *task_first_task(void) { return &task_manager.first_task; }
   118d8:	55                   	push   %ebp
   118d9:	89 e5                	mov    %esp,%ebp
   118db:	b8 28 30 02 00       	mov    $0x23028,%eax
   118e0:	5d                   	pop    %ebp
   118e1:	c3                   	ret    

000118e2 <task_set_ready>:
/**
 * @brief  将任务task加入就绪队列
 *
 * @param task 需要加入就绪队列的任务
 */
void task_set_ready(task_t *task) {
   118e2:	55                   	push   %ebp
   118e3:	89 e5                	mov    %esp,%ebp
   118e5:	83 ec 08             	sub    $0x8,%esp
  ASSERT(task != (task_t *)0);
   118e8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   118ec:	75 1c                	jne    1190a <task_set_ready+0x28>
   118ee:	68 05 76 01 00       	push   $0x17605
   118f3:	68 84 77 01 00       	push   $0x17784
   118f8:	68 a0 01 00 00       	push   $0x1a0
   118fd:	68 1c 76 01 00       	push   $0x1761c
   11902:	e8 fb 4c 00 00       	call   16602 <pannic>
   11907:	83 c4 10             	add    $0x10,%esp
  // if (task == (task_t*)0) return;
  // 1.将任务插入到就绪队列的尾部
  list_insert_last(&task_manager.ready_list, &task->ready_node);
   1190a:	8b 45 08             	mov    0x8(%ebp),%eax
   1190d:	83 c0 44             	add    $0x44,%eax
   11910:	83 ec 08             	sub    $0x8,%esp
   11913:	50                   	push   %eax
   11914:	68 04 30 02 00       	push   $0x23004
   11919:	e8 0d 57 00 00       	call   1702b <list_insert_last>
   1191e:	83 c4 10             	add    $0x10,%esp

  // 2.将任务状态设置为就绪态
  // task->state = TASK_READY;
}
   11921:	90                   	nop
   11922:	c9                   	leave  
   11923:	c3                   	ret    

00011924 <task_set_unready>:
/**
 * @brief  将任务task从就绪队列中取下
 *
 * @param task
 */
void task_set_unready(task_t *task) {
   11924:	55                   	push   %ebp
   11925:	89 e5                	mov    %esp,%ebp
   11927:	83 ec 08             	sub    $0x8,%esp
  ASSERT(task != (task_t *)0);
   1192a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1192e:	75 1c                	jne    1194c <task_set_unready+0x28>
   11930:	68 05 76 01 00       	push   $0x17605
   11935:	68 94 77 01 00       	push   $0x17794
   1193a:	68 af 01 00 00       	push   $0x1af
   1193f:	68 1c 76 01 00       	push   $0x1761c
   11944:	e8 b9 4c 00 00       	call   16602 <pannic>
   11949:	83 c4 10             	add    $0x10,%esp
  // if (task == (task_t*)0) return;
  list_remove(&task_manager.ready_list, &task->ready_node);
   1194c:	8b 45 08             	mov    0x8(%ebp),%eax
   1194f:	83 c0 44             	add    $0x44,%eax
   11952:	83 ec 08             	sub    $0x8,%esp
   11955:	50                   	push   %eax
   11956:	68 04 30 02 00       	push   $0x23004
   1195b:	e8 c0 58 00 00       	call   17220 <list_remove>
   11960:	83 c4 10             	add    $0x10,%esp
}
   11963:	90                   	nop
   11964:	c9                   	leave  
   11965:	c3                   	ret    

00011966 <task_ready_first>:

/**
 * @brief  获取就绪队列中的第一个任务
 *
 */
task_t *task_ready_first(void) {
   11966:	55                   	push   %ebp
   11967:	89 e5                	mov    %esp,%ebp
   11969:	83 ec 18             	sub    $0x18,%esp
  list_node_t *ready_node = list_get_first(&task_manager.ready_list);
   1196c:	83 ec 0c             	sub    $0xc,%esp
   1196f:	68 04 30 02 00       	push   $0x23004
   11974:	e8 8b f8 ff ff       	call   11204 <list_get_first>
   11979:	83 c4 10             	add    $0x10,%esp
   1197c:	89 45 f4             	mov    %eax,-0xc(%ebp)

  return list_node_parent(ready_node, task_t, ready_node);
   1197f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11983:	74 08                	je     1198d <task_ready_first+0x27>
   11985:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11988:	83 e8 44             	sub    $0x44,%eax
   1198b:	eb 05                	jmp    11992 <task_ready_first+0x2c>
   1198d:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11992:	c9                   	leave  
   11993:	c3                   	ret    

00011994 <task_current>:
/**
 * @brief  获取当前正在运行的任务
 *
 * @return task_t*
 */
task_t *task_current(void) { return task_manager.curr_task; }
   11994:	55                   	push   %ebp
   11995:	89 e5                	mov    %esp,%ebp
   11997:	a1 00 30 02 00       	mov    0x23000,%eax
   1199c:	5d                   	pop    %ebp
   1199d:	c3                   	ret    

0001199e <task_switch>:

/**
 * @brief  任务管理器进行任务切换
 *
 */
void task_switch(void) {
   1199e:	55                   	push   %ebp
   1199f:	89 e5                	mov    %esp,%ebp
   119a1:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   119a4:	e8 5e 19 00 00       	call   13307 <idt_enter_protection>
   119a9:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 1.获取就绪队列中的第一个任务
  task_t *to = task_ready_first();
   119ac:	e8 b5 ff ff ff       	call   11966 <task_ready_first>
   119b1:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 2.若获取到的任务不是当前任务就进行切换
  if (to != task_manager.curr_task) {
   119b4:	a1 00 30 02 00       	mov    0x23000,%eax
   119b9:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   119bc:	74 37                	je     119f5 <task_switch+0x57>
    // 3.获取当前任务
    task_t *from = task_manager.curr_task;
   119be:	a1 00 30 02 00       	mov    0x23000,%eax
   119c3:	89 45 ec             	mov    %eax,-0x14(%ebp)

    // 4.目标任务若为空，则所有任务都在延时，让cpu运行空闲任务
    if (to == (task_t *)0) {
   119c6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   119ca:	75 07                	jne    119d3 <task_switch+0x35>
      to = &task_manager.empty_task;
   119cc:	c7 45 f4 f0 32 02 00 	movl   $0x232f0,-0xc(%ebp)
    }
    // 5.切换当前任务, 并将当前任务置为运行态
    to->state = TASK_RUNNING;
   119d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   119d6:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    task_manager.curr_task = to;
   119dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   119df:	a3 00 30 02 00       	mov    %eax,0x23000

    // 6.进行任务切换
    task_switch_from_to(from, to);
   119e4:	83 ec 08             	sub    $0x8,%esp
   119e7:	ff 75 f4             	push   -0xc(%ebp)
   119ea:	ff 75 ec             	push   -0x14(%ebp)
   119ed:	e8 74 f9 ff ff       	call   11366 <task_switch_from_to>
   119f2:	83 c4 10             	add    $0x10,%esp
  }

  idt_leave_protection(state);  // TODO:解锁
   119f5:	83 ec 0c             	sub    $0xc,%esp
   119f8:	ff 75 f0             	push   -0x10(%ebp)
   119fb:	e8 1f 19 00 00       	call   1331f <idt_leave_protection>
   11a00:	83 c4 10             	add    $0x10,%esp
}
   11a03:	90                   	nop
   11a04:	c9                   	leave  
   11a05:	c3                   	ret    

00011a06 <task_slice_end>:
/**
 * @brief  提供给时钟中断使用，每中断一次，当前任务的时间片使用完一次
 *         减少当前任务的时间片数，并判断是否还有剩余时间片，若没有就进行任务切换
 *
 */
void task_slice_end(void) {
   11a06:	55                   	push   %ebp
   11a07:	89 e5                	mov    %esp,%ebp
   11a09:	83 ec 18             	sub    $0x18,%esp
  // 1.遍历当前延时队列，判断是否有可唤醒的任务
  list_node_t *curr_sleep_node = list_get_first(&task_manager.sleep_list);
   11a0c:	83 ec 0c             	sub    $0xc,%esp
   11a0f:	68 1c 30 02 00       	push   $0x2301c
   11a14:	e8 eb f7 ff ff       	call   11204 <list_get_first>
   11a19:	83 c4 10             	add    $0x10,%esp
   11a1c:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 2.遍历并判断每一个任务执行完当前时间片是否可被唤醒，若可以则唤醒
  while (curr_sleep_node) {
   11a1f:	eb 62                	jmp    11a83 <task_slice_end+0x7d>
    list_node_t *next_sleep_node = list_node_next(curr_sleep_node);
   11a21:	83 ec 0c             	sub    $0xc,%esp
   11a24:	ff 75 f4             	push   -0xc(%ebp)
   11a27:	e8 02 f7 ff ff       	call   1112e <list_node_next>
   11a2c:	83 c4 10             	add    $0x10,%esp
   11a2f:	89 45 ec             	mov    %eax,-0x14(%ebp)

    task_t *curr_sleep_task =
        list_node_parent(curr_sleep_node, task_t, ready_node);
   11a32:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11a36:	74 08                	je     11a40 <task_slice_end+0x3a>
   11a38:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11a3b:	83 e8 44             	sub    $0x44,%eax
   11a3e:	eb 05                	jmp    11a45 <task_slice_end+0x3f>
   11a40:	b8 00 00 00 00       	mov    $0x0,%eax
    task_t *curr_sleep_task =
   11a45:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (--curr_sleep_task->sleep == 0) {
   11a48:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11a4b:	8b 40 20             	mov    0x20(%eax),%eax
   11a4e:	8d 50 ff             	lea    -0x1(%eax),%edx
   11a51:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11a54:	89 50 20             	mov    %edx,0x20(%eax)
   11a57:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11a5a:	8b 40 20             	mov    0x20(%eax),%eax
   11a5d:	85 c0                	test   %eax,%eax
   11a5f:	75 1c                	jne    11a7d <task_slice_end+0x77>
      task_set_wakeup(curr_sleep_task);  // 从延时队列中取下
   11a61:	83 ec 0c             	sub    $0xc,%esp
   11a64:	ff 75 e8             	push   -0x18(%ebp)
   11a67:	e8 01 01 00 00       	call   11b6d <task_set_wakeup>
   11a6c:	83 c4 10             	add    $0x10,%esp
      task_set_ready(curr_sleep_task);   // 加入就绪队列
   11a6f:	83 ec 0c             	sub    $0xc,%esp
   11a72:	ff 75 e8             	push   -0x18(%ebp)
   11a75:	e8 68 fe ff ff       	call   118e2 <task_set_ready>
   11a7a:	83 c4 10             	add    $0x10,%esp
    }

    curr_sleep_node = next_sleep_node;
   11a7d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a80:	89 45 f4             	mov    %eax,-0xc(%ebp)
  while (curr_sleep_node) {
   11a83:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11a87:	75 98                	jne    11a21 <task_slice_end+0x1b>
  }

  // task_switch(); 没有必要立马进行任务切换，当前任务时间片用完后会自动切换
  // 3.获取当前任务
  task_t *curr_task = task_current();
   11a89:	e8 06 ff ff ff       	call   11994 <task_current>
   11a8e:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 4.若当前任务为空闲任务，则判断就绪队列是否为空
  if (curr_task == &task_manager.empty_task) {
   11a91:	81 7d f0 f0 32 02 00 	cmpl   $0x232f0,-0x10(%ebp)
   11a98:	75 23                	jne    11abd <task_slice_end+0xb7>
    if (list_is_empty(&task_manager.ready_list)) return;
   11a9a:	83 ec 0c             	sub    $0xc,%esp
   11a9d:	68 04 30 02 00       	push   $0x23004
   11aa2:	e8 fb f6 ff ff       	call   111a2 <list_is_empty>
   11aa7:	83 c4 10             	add    $0x10,%esp
   11aaa:	85 c0                	test   %eax,%eax
   11aac:	75 60                	jne    11b0e <task_slice_end+0x108>

    task_manager.empty_task.state = TASK_CREATED;
   11aae:	c7 05 f0 32 02 00 00 	movl   $0x0,0x232f0
   11ab5:	00 00 00 

    task_switch();  // 就绪队列有任务，则直接切换任务
   11ab8:	e8 e1 fe ff ff       	call   1199e <task_switch>
  }

  // 5.若当前任务为普通任务则，减小当前时间片数
  if (curr_task != &task_manager.empty_task && --curr_task->slice_curr == 0) {
   11abd:	81 7d f0 f0 32 02 00 	cmpl   $0x232f0,-0x10(%ebp)
   11ac4:	74 49                	je     11b0f <task_slice_end+0x109>
   11ac6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ac9:	8b 40 1c             	mov    0x1c(%eax),%eax
   11acc:	8d 50 ff             	lea    -0x1(%eax),%edx
   11acf:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ad2:	89 50 1c             	mov    %edx,0x1c(%eax)
   11ad5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ad8:	8b 40 1c             	mov    0x1c(%eax),%eax
   11adb:	85 c0                	test   %eax,%eax
   11add:	75 30                	jne    11b0f <task_slice_end+0x109>
    // 6.时间片数用完了，重置时间片并进行任务切换
    curr_task->slice_curr = curr_task->slice_max;
   11adf:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ae2:	8b 50 18             	mov    0x18(%eax),%edx
   11ae5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ae8:	89 50 1c             	mov    %edx,0x1c(%eax)
    task_set_unready(curr_task);
   11aeb:	83 ec 0c             	sub    $0xc,%esp
   11aee:	ff 75 f0             	push   -0x10(%ebp)
   11af1:	e8 2e fe ff ff       	call   11924 <task_set_unready>
   11af6:	83 c4 10             	add    $0x10,%esp
    task_set_ready(curr_task);
   11af9:	83 ec 0c             	sub    $0xc,%esp
   11afc:	ff 75 f0             	push   -0x10(%ebp)
   11aff:	e8 de fd ff ff       	call   118e2 <task_set_ready>
   11b04:	83 c4 10             	add    $0x10,%esp
    task_switch();
   11b07:	e8 92 fe ff ff       	call   1199e <task_switch>
   11b0c:	eb 01                	jmp    11b0f <task_slice_end+0x109>
    if (list_is_empty(&task_manager.ready_list)) return;
   11b0e:	90                   	nop
  }
}
   11b0f:	c9                   	leave  
   11b10:	c3                   	ret    

00011b11 <task_set_sleep>:
 * @brief  设置进程延时的时间片数
 *
 * @param task 需要延时的进程
 * @param slice 延时的时间片数
 */
void task_set_sleep(task_t *task, uint32_t slice) {
   11b11:	55                   	push   %ebp
   11b12:	89 e5                	mov    %esp,%ebp
   11b14:	83 ec 08             	sub    $0x8,%esp
  ASSERT(task != (task_t *)0);
   11b17:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11b1b:	75 1c                	jne    11b39 <task_set_sleep+0x28>
   11b1d:	68 05 76 01 00       	push   $0x17605
   11b22:	68 d8 77 01 00       	push   $0x177d8
   11b27:	68 18 02 00 00       	push   $0x218
   11b2c:	68 1c 76 01 00       	push   $0x1761c
   11b31:	e8 cc 4a 00 00       	call   16602 <pannic>
   11b36:	83 c4 10             	add    $0x10,%esp
  if (slice == 0) return;
   11b39:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11b3d:	74 2b                	je     11b6a <task_set_sleep+0x59>

  task->sleep = slice;
   11b3f:	8b 55 0c             	mov    0xc(%ebp),%edx
   11b42:	8b 45 08             	mov    0x8(%ebp),%eax
   11b45:	89 50 20             	mov    %edx,0x20(%eax)
  task->state = TASK_SLEEP;
   11b48:	8b 45 08             	mov    0x8(%ebp),%eax
   11b4b:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
  list_insert_last(&task_manager.sleep_list, &task->ready_node);
   11b51:	8b 45 08             	mov    0x8(%ebp),%eax
   11b54:	83 c0 44             	add    $0x44,%eax
   11b57:	83 ec 08             	sub    $0x8,%esp
   11b5a:	50                   	push   %eax
   11b5b:	68 1c 30 02 00       	push   $0x2301c
   11b60:	e8 c6 54 00 00       	call   1702b <list_insert_last>
   11b65:	83 c4 10             	add    $0x10,%esp
   11b68:	eb 01                	jmp    11b6b <task_set_sleep+0x5a>
  if (slice == 0) return;
   11b6a:	90                   	nop
}
   11b6b:	c9                   	leave  
   11b6c:	c3                   	ret    

00011b6d <task_set_wakeup>:
/**
 * @brief  唤醒正在延时的进程
 *
 * @param task
 */
void task_set_wakeup(task_t *task) {
   11b6d:	55                   	push   %ebp
   11b6e:	89 e5                	mov    %esp,%ebp
   11b70:	83 ec 08             	sub    $0x8,%esp
  ASSERT(task != (task_t *)0);
   11b73:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11b77:	75 1c                	jne    11b95 <task_set_wakeup+0x28>
   11b79:	68 05 76 01 00       	push   $0x17605
   11b7e:	68 e8 77 01 00       	push   $0x177e8
   11b83:	68 26 02 00 00       	push   $0x226
   11b88:	68 1c 76 01 00       	push   $0x1761c
   11b8d:	e8 70 4a 00 00       	call   16602 <pannic>
   11b92:	83 c4 10             	add    $0x10,%esp
  list_remove(&task_manager.sleep_list, &task->ready_node);
   11b95:	8b 45 08             	mov    0x8(%ebp),%eax
   11b98:	83 c0 44             	add    $0x44,%eax
   11b9b:	83 ec 08             	sub    $0x8,%esp
   11b9e:	50                   	push   %eax
   11b9f:	68 1c 30 02 00       	push   $0x2301c
   11ba4:	e8 77 56 00 00       	call   17220 <list_remove>
   11ba9:	83 c4 10             	add    $0x10,%esp
  task->state = TASK_CREATED;
   11bac:	8b 45 08             	mov    0x8(%ebp),%eax
   11baf:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   11bb5:	90                   	nop
   11bb6:	c9                   	leave  
   11bb7:	c3                   	ret    

00011bb8 <alloc_task>:
/**
 * @brief 从静态任务表中分配一个任务对象
 *
 * @return task_t*
 */
static task_t *alloc_task(void) {
   11bb8:	55                   	push   %ebp
   11bb9:	89 e5                	mov    %esp,%ebp
   11bbb:	83 ec 18             	sub    $0x18,%esp
  task_t *task = 0;
   11bbe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  //TODO:加锁
  mutex_lock(&task_table_lock);
   11bc5:	83 ec 0c             	sub    $0xc,%esp
   11bc8:	68 c0 99 03 00       	push   $0x399c0
   11bcd:	e8 64 43 00 00       	call   15f36 <mutex_lock>
   11bd2:	83 c4 10             	add    $0x10,%esp

  // 遍历静态任务表，取出未被分配的任务对象空间
  for (int i = 0; i < TASK_COUNT; ++i) {
   11bd5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11bdc:	eb 27                	jmp    11c05 <alloc_task+0x4d>
    task_t *curr = task_table + i;
   11bde:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11be1:	69 c0 c8 02 00 00    	imul   $0x2c8,%eax,%eax
   11be7:	05 c0 35 02 00       	add    $0x235c0,%eax
   11bec:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (curr->pid == 0) {
   11bef:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11bf2:	8b 40 08             	mov    0x8(%eax),%eax
   11bf5:	85 c0                	test   %eax,%eax
   11bf7:	75 08                	jne    11c01 <alloc_task+0x49>
      task = curr;
   11bf9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11bfc:	89 45 f4             	mov    %eax,-0xc(%ebp)
      break;
   11bff:	eb 0a                	jmp    11c0b <alloc_task+0x53>
  for (int i = 0; i < TASK_COUNT; ++i) {
   11c01:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   11c05:	83 7d f0 7f          	cmpl   $0x7f,-0x10(%ebp)
   11c09:	7e d3                	jle    11bde <alloc_task+0x26>
    }
  }

  //TODO:解锁
  mutex_unlock(&task_table_lock);
   11c0b:	83 ec 0c             	sub    $0xc,%esp
   11c0e:	68 c0 99 03 00       	push   $0x399c0
   11c13:	e8 af 43 00 00       	call   15fc7 <mutex_unlock>
   11c18:	83 c4 10             	add    $0x10,%esp

  return task;
   11c1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   11c1e:	c9                   	leave  
   11c1f:	c3                   	ret    

00011c20 <free_task>:
/**
 * @brief 释放静态任务表的任务对象
 *
 * @param task
 */
static void free_task(task_t *task) {
   11c20:	55                   	push   %ebp
   11c21:	89 e5                	mov    %esp,%ebp
   11c23:	83 ec 08             	sub    $0x8,%esp
  //TODO:加锁
  mutex_lock(&task_table_lock);
   11c26:	83 ec 0c             	sub    $0xc,%esp
   11c29:	68 c0 99 03 00       	push   $0x399c0
   11c2e:	e8 03 43 00 00       	call   15f36 <mutex_lock>
   11c33:	83 c4 10             	add    $0x10,%esp

  task->pid = 0;
   11c36:	8b 45 08             	mov    0x8(%ebp),%eax
   11c39:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)

  //TODO:解锁
  mutex_unlock(&task_table_lock);
   11c40:	83 ec 0c             	sub    $0xc,%esp
   11c43:	68 c0 99 03 00       	push   $0x399c0
   11c48:	e8 7a 43 00 00       	call   15fc7 <mutex_unlock>
   11c4d:	83 c4 10             	add    $0x10,%esp
}
   11c50:	90                   	nop
   11c51:	c9                   	leave  
   11c52:	c3                   	ret    

00011c53 <sys_sleep>:
/**
 * @brief  使进程进入延时状态
 *
 * @param ms 延时的时间，以ms为单位
 */
void sys_sleep(uint32_t ms) {
   11c53:	55                   	push   %ebp
   11c54:	89 e5                	mov    %esp,%ebp
   11c56:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   11c59:	e8 a9 16 00 00       	call   13307 <idt_enter_protection>
   11c5e:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 1.获取当前任务
  task_t *curr_task = task_current();
   11c61:	e8 2e fd ff ff       	call   11994 <task_current>
   11c66:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 2.将当前任务离开就绪队列
  task_set_unready(curr_task);
   11c69:	83 ec 0c             	sub    $0xc,%esp
   11c6c:	ff 75 f0             	push   -0x10(%ebp)
   11c6f:	e8 b0 fc ff ff       	call   11924 <task_set_unready>
   11c74:	83 c4 10             	add    $0x10,%esp

  // 3.计算出需要延时的时间片数，对时间片数向上取整，保证进程至少能延时指定时间
  uint32_t slice = (ms + (OS_TICKS_MS - 1)) / OS_TICKS_MS;
   11c77:	8b 45 08             	mov    0x8(%ebp),%eax
   11c7a:	83 c0 09             	add    $0x9,%eax
   11c7d:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   11c82:	f7 e2                	mul    %edx
   11c84:	89 d0                	mov    %edx,%eax
   11c86:	c1 e8 03             	shr    $0x3,%eax
   11c89:	89 45 ec             	mov    %eax,-0x14(%ebp)

  // 4.将当前任务放入延时队列，并设置延时时间片数
  task_set_sleep(curr_task, slice);
   11c8c:	83 ec 08             	sub    $0x8,%esp
   11c8f:	ff 75 ec             	push   -0x14(%ebp)
   11c92:	ff 75 f0             	push   -0x10(%ebp)
   11c95:	e8 77 fe ff ff       	call   11b11 <task_set_sleep>
   11c9a:	83 c4 10             	add    $0x10,%esp

  // 5.切换任务
  task_switch();
   11c9d:	e8 fc fc ff ff       	call   1199e <task_switch>

  idt_leave_protection(state);  // TODO:解锁
   11ca2:	83 ec 0c             	sub    $0xc,%esp
   11ca5:	ff 75 f4             	push   -0xc(%ebp)
   11ca8:	e8 72 16 00 00       	call   1331f <idt_leave_protection>
   11cad:	83 c4 10             	add    $0x10,%esp
}
   11cb0:	90                   	nop
   11cb1:	c9                   	leave  
   11cb2:	c3                   	ret    

00011cb3 <sys_getpid>:
/**
 * @brief 获取任务pid
 *
 * @return int pid
 */
int sys_getpid(void) { return task_current()->pid; }
   11cb3:	55                   	push   %ebp
   11cb4:	89 e5                	mov    %esp,%ebp
   11cb6:	e8 d9 fc ff ff       	call   11994 <task_current>
   11cbb:	8b 40 08             	mov    0x8(%eax),%eax
   11cbe:	5d                   	pop    %ebp
   11cbf:	c3                   	ret    

00011cc0 <copy_opened_files>:
/**
 * @brief 将当前进程的打开文件表复制给传入进程
 * 
 * @param child_task 
 */
static void copy_opened_files(task_t *child_task) {
   11cc0:	55                   	push   %ebp
   11cc1:	89 e5                	mov    %esp,%ebp
   11cc3:	83 ec 18             	sub    $0x18,%esp
  task_t *parent = task_current();
   11cc6:	e8 c9 fc ff ff       	call   11994 <task_current>
   11ccb:	89 45 f0             	mov    %eax,-0x10(%ebp)
  for (int i = 0; i < TASK_OFILE_SIZE; ++i) {
   11cce:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11cd5:	eb 38                	jmp    11d0f <copy_opened_files+0x4f>
    file_t *file = parent->file_table[i];
   11cd7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11cda:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11cdd:	83 c2 30             	add    $0x30,%edx
   11ce0:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   11ce4:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (file) {
   11ce7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11ceb:	74 1e                	je     11d0b <copy_opened_files+0x4b>
      file_inc_ref(file);
   11ced:	83 ec 0c             	sub    $0xc,%esp
   11cf0:	ff 75 ec             	push   -0x14(%ebp)
   11cf3:	e8 fc 32 00 00       	call   14ff4 <file_inc_ref>
   11cf8:	83 c4 10             	add    $0x10,%esp
      child_task->file_table[i] = file;
   11cfb:	8b 45 08             	mov    0x8(%ebp),%eax
   11cfe:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11d01:	8d 4a 30             	lea    0x30(%edx),%ecx
   11d04:	8b 55 ec             	mov    -0x14(%ebp),%edx
   11d07:	89 54 88 08          	mov    %edx,0x8(%eax,%ecx,4)
  for (int i = 0; i < TASK_OFILE_SIZE; ++i) {
   11d0b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11d0f:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   11d13:	7e c2                	jle    11cd7 <copy_opened_files+0x17>
    }
  }
}
   11d15:	90                   	nop
   11d16:	90                   	nop
   11d17:	c9                   	leave  
   11d18:	c3                   	ret    

00011d19 <sys_fork>:
/**
 * @brief 创建子进程
 *
 * @return int 子进程的pid
 */
int sys_fork(void) {
   11d19:	55                   	push   %ebp
   11d1a:	89 e5                	mov    %esp,%ebp
   11d1c:	83 ec 28             	sub    $0x28,%esp
  // 1.获取当前进程为fork进程的父进程
  task_t *parent_task = task_current();
   11d1f:	e8 70 fc ff ff       	call   11994 <task_current>
   11d24:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 2.分配子进程控制块
  task_t *child_task = alloc_task();
   11d27:	e8 8c fe ff ff       	call   11bb8 <alloc_task>
   11d2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (child_task == (task_t *)0) goto fork_failed;
   11d2f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11d33:	0f 84 39 01 00 00    	je     11e72 <sys_fork+0x159>

  // 3.获取系统调用的栈帧,因为每次通过调用门进入内核栈中都只会一帧该结构体的数据，
  // 所以用最高地址减去大小即可获得该帧的起始地址
  syscall_frame_t *frame =
      (syscall_frame_t *)(parent_task->tss.esp0 - sizeof(syscall_frame_t));
   11d39:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11d3c:	8b 40 60             	mov    0x60(%eax),%eax
   11d3f:	83 e8 58             	sub    $0x58,%eax
  syscall_frame_t *frame =
   11d42:	89 45 ec             	mov    %eax,-0x14(%ebp)

  // 4.初始子进程控制块，直接用父进程进入调用门的下一条指令地址作为子进程的入口地址
  int err = task_init(child_task, parent_task->name, frame->eip,
                      frame->esp + sizeof(uint32_t) * SYSCALL_PARAM_COUNT,
   11d45:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11d48:	8b 40 50             	mov    0x50(%eax),%eax
  int err = task_init(child_task, parent_task->name, frame->eip,
   11d4b:	8d 48 14             	lea    0x14(%eax),%ecx
   11d4e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11d51:	8b 40 34             	mov    0x34(%eax),%eax
   11d54:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11d57:	83 c2 24             	add    $0x24,%edx
   11d5a:	83 ec 0c             	sub    $0xc,%esp
   11d5d:	6a 00                	push   $0x0
   11d5f:	51                   	push   %ecx
   11d60:	50                   	push   %eax
   11d61:	52                   	push   %edx
   11d62:	ff 75 f0             	push   -0x10(%ebp)
   11d65:	e8 c2 f7 ff ff       	call   1152c <task_init>
   11d6a:	83 c4 20             	add    $0x20,%esp
   11d6d:	89 45 e8             	mov    %eax,-0x18(%ebp)
                      TASK_FLAGS_USER);
  if (err < 0) goto fork_failed;
   11d70:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11d74:	0f 88 fb 00 00 00    	js     11e75 <sys_fork+0x15c>

  //让子进程继承父进程的打开文件表
  copy_opened_files(child_task);
   11d7a:	83 ec 0c             	sub    $0xc,%esp
   11d7d:	ff 75 f0             	push   -0x10(%ebp)
   11d80:	e8 3b ff ff ff       	call   11cc0 <copy_opened_files>
   11d85:	83 c4 10             	add    $0x10,%esp


  // 5.恢复到父进程的上下文环境
  tss_t *tss = &(child_task->tss);
   11d88:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11d8b:	83 c0 5c             	add    $0x5c,%eax
   11d8e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  // 子进程执行的第一条指令就是从eax中取出系统用的返回值，即进程id，子进程固定获取0
  tss->eax = 0;
   11d91:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11d94:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
  tss->ebx = frame->ebx;
   11d9b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11d9e:	8b 50 24             	mov    0x24(%eax),%edx
   11da1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11da4:	89 50 34             	mov    %edx,0x34(%eax)
  tss->ecx = frame->ecx;
   11da7:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11daa:	8b 50 2c             	mov    0x2c(%eax),%edx
   11dad:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11db0:	89 50 2c             	mov    %edx,0x2c(%eax)
  tss->edx = frame->edx;
   11db3:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11db6:	8b 50 28             	mov    0x28(%eax),%edx
   11db9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11dbc:	89 50 30             	mov    %edx,0x30(%eax)
  tss->edi = frame->edi;
   11dbf:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11dc2:	8b 50 14             	mov    0x14(%eax),%edx
   11dc5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11dc8:	89 50 44             	mov    %edx,0x44(%eax)
  tss->esi = frame->esi;
   11dcb:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11dce:	8b 50 18             	mov    0x18(%eax),%edx
   11dd1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11dd4:	89 50 40             	mov    %edx,0x40(%eax)
  tss->eflags = frame->eflags;
   11dd7:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11dda:	8b 10                	mov    (%eax),%edx
   11ddc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11ddf:	89 50 24             	mov    %edx,0x24(%eax)
  tss->ebp = frame->ebp;
   11de2:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11de5:	8b 50 1c             	mov    0x1c(%eax),%edx
   11de8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11deb:	89 50 3c             	mov    %edx,0x3c(%eax)

  // 复用父进程的段寄存器
  tss->cs = frame->cs;
   11dee:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11df1:	8b 50 38             	mov    0x38(%eax),%edx
   11df4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11df7:	89 50 4c             	mov    %edx,0x4c(%eax)
  tss->ds = frame->ds;
   11dfa:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11dfd:	8b 50 10             	mov    0x10(%eax),%edx
   11e00:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11e03:	89 50 54             	mov    %edx,0x54(%eax)
  tss->es = frame->es;
   11e06:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11e09:	8b 50 0c             	mov    0xc(%eax),%edx
   11e0c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11e0f:	89 50 48             	mov    %edx,0x48(%eax)
  tss->fs = frame->fs;
   11e12:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11e15:	8b 50 08             	mov    0x8(%eax),%edx
   11e18:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11e1b:	89 50 58             	mov    %edx,0x58(%eax)
  tss->gs = frame->gs;
   11e1e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11e21:	8b 50 04             	mov    0x4(%eax),%edx
   11e24:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11e27:	89 50 5c             	mov    %edx,0x5c(%eax)
  tss->ss = frame->ss;
   11e2a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11e2d:	8b 50 54             	mov    0x54(%eax),%edx
   11e30:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11e33:	89 50 50             	mov    %edx,0x50(%eax)

  // 记录父进程地址
  child_task->parent = parent_task;
   11e36:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11e39:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11e3c:	89 50 04             	mov    %edx,0x4(%eax)

  // 7.拷贝进程虚拟页目录表和页表，即拷贝其映射关系
  if (memory_copy_uvm(tss->cr3, parent_task->tss.cr3) < 0) goto fork_failed;
   11e3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11e42:	8b 50 78             	mov    0x78(%eax),%edx
   11e45:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11e48:	8b 40 1c             	mov    0x1c(%eax),%eax
   11e4b:	83 ec 08             	sub    $0x8,%esp
   11e4e:	52                   	push   %edx
   11e4f:	50                   	push   %eax
   11e50:	e8 90 eb ff ff       	call   109e5 <memory_copy_uvm>
   11e55:	83 c4 10             	add    $0x10,%esp
   11e58:	85 c0                	test   %eax,%eax
   11e5a:	78 1c                	js     11e78 <sys_fork+0x15f>

  // 8.子进程控制块初始化完毕，设为可被调度态
  task_start(child_task);
   11e5c:	83 ec 0c             	sub    $0xc,%esp
   11e5f:	ff 75 f0             	push   -0x10(%ebp)
   11e62:	e8 8f f6 ff ff       	call   114f6 <task_start>
   11e67:	83 c4 10             	add    $0x10,%esp
  // 反回子进程id
  return child_task->pid;
   11e6a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11e6d:	8b 40 08             	mov    0x8(%eax),%eax
   11e70:	eb 2e                	jmp    11ea0 <sys_fork+0x187>
  if (child_task == (task_t *)0) goto fork_failed;
   11e72:	90                   	nop
   11e73:	eb 04                	jmp    11e79 <sys_fork+0x160>
  if (err < 0) goto fork_failed;
   11e75:	90                   	nop
   11e76:	eb 01                	jmp    11e79 <sys_fork+0x160>
  if (memory_copy_uvm(tss->cr3, parent_task->tss.cr3) < 0) goto fork_failed;
   11e78:	90                   	nop

// fork失败，清理资源
fork_failed:
  if (child_task) {  // 初始化失败，释放对应资源
   11e79:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11e7d:	74 1c                	je     11e9b <sys_fork+0x182>
    task_uninit(child_task);
   11e7f:	83 ec 0c             	sub    $0xc,%esp
   11e82:	ff 75 f0             	push   -0x10(%ebp)
   11e85:	e8 d1 f7 ff ff       	call   1165b <task_uninit>
   11e8a:	83 c4 10             	add    $0x10,%esp
    free_task(child_task);
   11e8d:	83 ec 0c             	sub    $0xc,%esp
   11e90:	ff 75 f0             	push   -0x10(%ebp)
   11e93:	e8 88 fd ff ff       	call   11c20 <free_task>
   11e98:	83 c4 10             	add    $0x10,%esp
  }

  return -1;
   11e9b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11ea0:	c9                   	leave  
   11ea1:	c3                   	ret    

00011ea2 <sys_yield>:
/**
 * @brief  使当前正在运行的任务主动让出cpu
 *
 * @return int
 */
int sys_yield(void) {
   11ea2:	55                   	push   %ebp
   11ea3:	89 e5                	mov    %esp,%ebp
   11ea5:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   11ea8:	e8 5a 14 00 00       	call   13307 <idt_enter_protection>
   11ead:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 1.判断当前就绪队列中是否有多个任务
  if (list_get_size(&task_manager.ready_list) > 1) {
   11eb0:	83 ec 0c             	sub    $0xc,%esp
   11eb3:	68 04 30 02 00       	push   $0x23004
   11eb8:	e8 1a f3 ff ff       	call   111d7 <list_get_size>
   11ebd:	83 c4 10             	add    $0x10,%esp
   11ec0:	83 f8 01             	cmp    $0x1,%eax
   11ec3:	7e 29                	jle    11eee <sys_yield+0x4c>
    // 2.获取当前任务
    task_t *curr_task = task_current();
   11ec5:	e8 ca fa ff ff       	call   11994 <task_current>
   11eca:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // 3.将当前任务从就绪队列中取下
    task_set_unready(curr_task);
   11ecd:	83 ec 0c             	sub    $0xc,%esp
   11ed0:	ff 75 f0             	push   -0x10(%ebp)
   11ed3:	e8 4c fa ff ff       	call   11924 <task_set_unready>
   11ed8:	83 c4 10             	add    $0x10,%esp

    // 4.将当前任务重新加入到就绪队列的队尾
    task_set_ready(curr_task);
   11edb:	83 ec 0c             	sub    $0xc,%esp
   11ede:	ff 75 f0             	push   -0x10(%ebp)
   11ee1:	e8 fc f9 ff ff       	call   118e2 <task_set_ready>
   11ee6:	83 c4 10             	add    $0x10,%esp

    // 5.任务管理器运行下一个任务，从而释放cpu使用权
    task_switch();
   11ee9:	e8 b0 fa ff ff       	call   1199e <task_switch>
  }

  idt_leave_protection(state);  // TODO:解锁
   11eee:	83 ec 0c             	sub    $0xc,%esp
   11ef1:	ff 75 f4             	push   -0xc(%ebp)
   11ef4:	e8 26 14 00 00       	call   1331f <idt_leave_protection>
   11ef9:	83 c4 10             	add    $0x10,%esp
  return 0;
   11efc:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11f01:	c9                   	leave  
   11f02:	c3                   	ret    

00011f03 <load_phdr>:
 * @param file elf文件描述符
 * @param elf_phdr  程序段表项
 * @param page_dir 需要加载到的目标空间的页目录表地址
 * @return int
 */
static int load_phdr(int file, Elf32_Phdr *elf_phdr, uint32_t page_dir) {
   11f03:	55                   	push   %ebp
   11f04:	89 e5                	mov    %esp,%ebp
   11f06:	83 ec 28             	sub    $0x28,%esp
  // 获取该段的权限
  uint32_t privilege = PTE_P | PTE_U;
   11f09:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
  if (elf_phdr->p_flags & PT_W) {  // 该段具有写权限
   11f10:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f13:	8b 40 18             	mov    0x18(%eax),%eax
   11f16:	83 e0 02             	and    $0x2,%eax
   11f19:	85 c0                	test   %eax,%eax
   11f1b:	74 04                	je     11f21 <load_phdr+0x1e>
    privilege |= PTE_W;
   11f1d:	83 4d f4 02          	orl    $0x2,-0xc(%ebp)
  }

  // 为该段分配页空间并创建映射关系
  int err = memory_alloc_for_page_dir(page_dir, elf_phdr->p_vaddr,
   11f21:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f24:	8b 50 14             	mov    0x14(%eax),%edx
   11f27:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f2a:	8b 40 08             	mov    0x8(%eax),%eax
   11f2d:	ff 75 f4             	push   -0xc(%ebp)
   11f30:	52                   	push   %edx
   11f31:	50                   	push   %eax
   11f32:	ff 75 10             	push   0x10(%ebp)
   11f35:	e8 18 ee ff ff       	call   10d52 <memory_alloc_for_page_dir>
   11f3a:	83 c4 10             	add    $0x10,%esp
   11f3d:	89 45 e8             	mov    %eax,-0x18(%ebp)
                                      elf_phdr->p_memsz, privilege);
  if (err < 0) {
   11f40:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11f44:	79 1a                	jns    11f60 <load_phdr+0x5d>
    log_printf("no memory\n");
   11f46:	83 ec 0c             	sub    $0xc,%esp
   11f49:	68 7e 76 01 00       	push   $0x1767e
   11f4e:	e8 c5 53 00 00       	call   17318 <log_printf>
   11f53:	83 c4 10             	add    $0x10,%esp
    return -1;
   11f56:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11f5b:	e9 b5 00 00 00       	jmp    12015 <load_phdr+0x112>
  }

  // 使文件的读取位置偏移到该程序段的起始位置
  if (sys_lseek(file, elf_phdr->p_offset, 0) < 0) {
   11f60:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f63:	8b 40 04             	mov    0x4(%eax),%eax
   11f66:	83 ec 04             	sub    $0x4,%esp
   11f69:	6a 00                	push   $0x0
   11f6b:	50                   	push   %eax
   11f6c:	ff 75 08             	push   0x8(%ebp)
   11f6f:	e8 0d 38 00 00       	call   15781 <sys_lseek>
   11f74:	83 c4 10             	add    $0x10,%esp
   11f77:	85 c0                	test   %eax,%eax
   11f79:	79 1a                	jns    11f95 <load_phdr+0x92>
    log_printf("lseek file failed\n");
   11f7b:	83 ec 0c             	sub    $0xc,%esp
   11f7e:	68 89 76 01 00       	push   $0x17689
   11f83:	e8 90 53 00 00       	call   17318 <log_printf>
   11f88:	83 c4 10             	add    $0x10,%esp
    return -1;
   11f8b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11f90:	e9 80 00 00 00       	jmp    12015 <load_phdr+0x112>
  }

  // 获取该程序段的起始虚拟地址和段在文件中的大小
  uint32_t vaddr = elf_phdr->p_vaddr;
   11f95:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f98:	8b 40 08             	mov    0x8(%eax),%eax
   11f9b:	89 45 f0             	mov    %eax,-0x10(%ebp)
  uint32_t size = elf_phdr->p_filesz;
   11f9e:	8b 45 0c             	mov    0xc(%ebp),%eax
   11fa1:	8b 40 10             	mov    0x10(%eax),%eax
   11fa4:	89 45 ec             	mov    %eax,-0x14(%ebp)

  while (size > 0) {  // 按页读取并拷贝
   11fa7:	eb 61                	jmp    1200a <load_phdr+0x107>
    // 获取需要拷贝的空间大小
    int curr_size = (size > MEM_PAGE_SIZE) ? MEM_PAGE_SIZE : size;
   11fa9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11fac:	ba 00 10 00 00       	mov    $0x1000,%edx
   11fb1:	39 d0                	cmp    %edx,%eax
   11fb3:	0f 47 c2             	cmova  %edx,%eax
   11fb6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    // 获取vaddr在page_dir中关联的物理页的物理地址
    uint32_t paddr = memory_get_paddr(page_dir, vaddr);
   11fb9:	83 ec 08             	sub    $0x8,%esp
   11fbc:	ff 75 f0             	push   -0x10(%ebp)
   11fbf:	ff 75 10             	push   0x10(%ebp)
   11fc2:	e8 2e ef ff ff       	call   10ef5 <memory_get_paddr>
   11fc7:	83 c4 10             	add    $0x10,%esp
   11fca:	89 45 e0             	mov    %eax,-0x20(%ebp)

    // 拷贝curr_size大小的内容到paddr对应的页中
    if (sys_read(file, (char *)paddr, curr_size) < curr_size) {
   11fcd:	8b 45 e0             	mov    -0x20(%ebp),%eax
   11fd0:	83 ec 04             	sub    $0x4,%esp
   11fd3:	ff 75 e4             	push   -0x1c(%ebp)
   11fd6:	50                   	push   %eax
   11fd7:	ff 75 08             	push   0x8(%ebp)
   11fda:	e8 e1 35 00 00       	call   155c0 <sys_read>
   11fdf:	83 c4 10             	add    $0x10,%esp
   11fe2:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
   11fe5:	7e 17                	jle    11ffe <load_phdr+0xfb>
      log_printf("read file failed\n");
   11fe7:	83 ec 0c             	sub    $0xc,%esp
   11fea:	68 9c 76 01 00       	push   $0x1769c
   11fef:	e8 24 53 00 00       	call   17318 <log_printf>
   11ff4:	83 c4 10             	add    $0x10,%esp
      return -1;
   11ff7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11ffc:	eb 17                	jmp    12015 <load_phdr+0x112>
    }

    size -= curr_size;
   11ffe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12001:	29 45 ec             	sub    %eax,-0x14(%ebp)
    vaddr += curr_size;
   12004:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12007:	01 45 f0             	add    %eax,-0x10(%ebp)
  while (size > 0) {  // 按页读取并拷贝
   1200a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1200e:	75 99                	jne    11fa9 <load_phdr+0xa6>
  }

  return 0;
   12010:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12015:	c9                   	leave  
   12016:	c3                   	ret    

00012017 <load_elf_file>:
 * @param name
 * @param page_dir
 * @return uint32_t
 */
static uint32_t load_elf_file(task_t *task, const char *name,
                              uint32_t page_dir) {
   12017:	55                   	push   %ebp
   12018:	89 e5                	mov    %esp,%ebp
   1201a:	83 ec 78             	sub    $0x78,%esp
  // 1.定义elf文件头对象,和程序段表项对象
  Elf32_Ehdr elf_hdr;
  Elf32_Phdr elf_phdr;

  // 2.打开文件
  int file = sys_open(name, 0);
   1201d:	83 ec 08             	sub    $0x8,%esp
   12020:	6a 00                	push   $0x0
   12022:	ff 75 0c             	push   0xc(%ebp)
   12025:	e8 c7 33 00 00       	call   153f1 <sys_open>
   1202a:	83 c4 10             	add    $0x10,%esp
   1202d:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if (file < 0) {
   12030:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   12034:	79 18                	jns    1204e <load_elf_file+0x37>
    log_printf("open failed %s\n", name);
   12036:	83 ec 08             	sub    $0x8,%esp
   12039:	ff 75 0c             	push   0xc(%ebp)
   1203c:	68 ae 76 01 00       	push   $0x176ae
   12041:	e8 d2 52 00 00       	call   17318 <log_printf>
   12046:	83 c4 10             	add    $0x10,%esp
    goto load_failed;
   12049:	e9 c1 01 00 00       	jmp    1220f <load_elf_file+0x1f8>
  }

  // 3.读取elf文件的elf头部分
  int cnt = sys_read(file, (char *)&elf_hdr, sizeof(Elf32_Ehdr));
   1204e:	83 ec 04             	sub    $0x4,%esp
   12051:	6a 34                	push   $0x34
   12053:	8d 45 b0             	lea    -0x50(%ebp),%eax
   12056:	50                   	push   %eax
   12057:	ff 75 ec             	push   -0x14(%ebp)
   1205a:	e8 61 35 00 00       	call   155c0 <sys_read>
   1205f:	83 c4 10             	add    $0x10,%esp
   12062:	89 45 e8             	mov    %eax,-0x18(%ebp)
  if (cnt < sizeof(Elf32_Ehdr)) {
   12065:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12068:	83 f8 33             	cmp    $0x33,%eax
   1206b:	77 18                	ja     12085 <load_elf_file+0x6e>
    log_printf("elf hdr too small. size=%d\n", cnt);
   1206d:	83 ec 08             	sub    $0x8,%esp
   12070:	ff 75 e8             	push   -0x18(%ebp)
   12073:	68 be 76 01 00       	push   $0x176be
   12078:	e8 9b 52 00 00       	call   17318 <log_printf>
   1207d:	83 c4 10             	add    $0x10,%esp
    goto load_failed;
   12080:	e9 8a 01 00 00       	jmp    1220f <load_elf_file+0x1f8>
  }

  // 4.判断是否为ELF文件
  if (elf_hdr.e_ident[0] != 0x7F || elf_hdr.e_ident[1] != 'E' ||
   12085:	0f b6 45 b0          	movzbl -0x50(%ebp),%eax
   12089:	3c 7f                	cmp    $0x7f,%al
   1208b:	75 18                	jne    120a5 <load_elf_file+0x8e>
   1208d:	0f b6 45 b1          	movzbl -0x4f(%ebp),%eax
   12091:	3c 45                	cmp    $0x45,%al
   12093:	75 10                	jne    120a5 <load_elf_file+0x8e>
      elf_hdr.e_ident[2] != 'L' || elf_hdr.e_ident[3] != 'F') {
   12095:	0f b6 45 b2          	movzbl -0x4e(%ebp),%eax
  if (elf_hdr.e_ident[0] != 0x7F || elf_hdr.e_ident[1] != 'E' ||
   12099:	3c 4c                	cmp    $0x4c,%al
   1209b:	75 08                	jne    120a5 <load_elf_file+0x8e>
      elf_hdr.e_ident[2] != 'L' || elf_hdr.e_ident[3] != 'F') {
   1209d:	0f b6 45 b3          	movzbl -0x4d(%ebp),%eax
   120a1:	3c 46                	cmp    $0x46,%al
   120a3:	74 15                	je     120ba <load_elf_file+0xa3>
    log_printf("check elf ident failed.\n");
   120a5:	83 ec 0c             	sub    $0xc,%esp
   120a8:	68 da 76 01 00       	push   $0x176da
   120ad:	e8 66 52 00 00       	call   17318 <log_printf>
   120b2:	83 c4 10             	add    $0x10,%esp
    goto load_failed;
   120b5:	e9 55 01 00 00       	jmp    1220f <load_elf_file+0x1f8>
  }

  // 5.必须是可执行文件和针对386处理器的类型，且有入口
  if ((elf_hdr.e_type != ET_EXEC) || (elf_hdr.e_machine != EM_386) ||
   120ba:	0f b7 45 c0          	movzwl -0x40(%ebp),%eax
   120be:	66 83 f8 02          	cmp    $0x2,%ax
   120c2:	75 11                	jne    120d5 <load_elf_file+0xbe>
   120c4:	0f b7 45 c2          	movzwl -0x3e(%ebp),%eax
   120c8:	66 83 f8 03          	cmp    $0x3,%ax
   120cc:	75 07                	jne    120d5 <load_elf_file+0xbe>
      (elf_hdr.e_entry == 0)) {
   120ce:	8b 45 c8             	mov    -0x38(%ebp),%eax
  if ((elf_hdr.e_type != ET_EXEC) || (elf_hdr.e_machine != EM_386) ||
   120d1:	85 c0                	test   %eax,%eax
   120d3:	75 15                	jne    120ea <load_elf_file+0xd3>
    log_printf("check elf type or entry failed.\n");
   120d5:	83 ec 0c             	sub    $0xc,%esp
   120d8:	68 f4 76 01 00       	push   $0x176f4
   120dd:	e8 36 52 00 00       	call   17318 <log_printf>
   120e2:	83 c4 10             	add    $0x10,%esp
    goto load_failed;
   120e5:	e9 25 01 00 00       	jmp    1220f <load_elf_file+0x1f8>
  }

  // 6.必须有程序头部
  if ((elf_hdr.e_phentsize == 0) || (elf_hdr.e_phoff == 0)) {
   120ea:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
   120ee:	66 85 c0             	test   %ax,%ax
   120f1:	74 07                	je     120fa <load_elf_file+0xe3>
   120f3:	8b 45 cc             	mov    -0x34(%ebp),%eax
   120f6:	85 c0                	test   %eax,%eax
   120f8:	75 15                	jne    1210f <load_elf_file+0xf8>
    log_printf("none programe header\n");
   120fa:	83 ec 0c             	sub    $0xc,%esp
   120fd:	68 15 77 01 00       	push   $0x17715
   12102:	e8 11 52 00 00       	call   17318 <log_printf>
   12107:	83 c4 10             	add    $0x10,%esp
    goto load_failed;
   1210a:	e9 00 01 00 00       	jmp    1220f <load_elf_file+0x1f8>
  }

  // 7.遍历elf文件的程序段，加载可加载段到内存中对应位置
  uint32_t e_phoff = elf_hdr.e_phoff;  // 获取程序段表的偏移地址
   1210f:	8b 45 cc             	mov    -0x34(%ebp),%eax
   12112:	89 45 f4             	mov    %eax,-0xc(%ebp)
  for (int i = 0; i < elf_hdr.e_phnum; ++i, e_phoff += elf_hdr.e_phentsize) {
   12115:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   1211c:	e9 cb 00 00 00       	jmp    121ec <load_elf_file+0x1d5>
    if (sys_lseek(file, e_phoff, 0) < 0) {
   12121:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12124:	83 ec 04             	sub    $0x4,%esp
   12127:	6a 00                	push   $0x0
   12129:	50                   	push   %eax
   1212a:	ff 75 ec             	push   -0x14(%ebp)
   1212d:	e8 4f 36 00 00       	call   15781 <sys_lseek>
   12132:	83 c4 10             	add    $0x10,%esp
   12135:	85 c0                	test   %eax,%eax
   12137:	79 15                	jns    1214e <load_elf_file+0x137>
      log_printf("read file failed\n");
   12139:	83 ec 0c             	sub    $0xc,%esp
   1213c:	68 9c 76 01 00       	push   $0x1769c
   12141:	e8 d2 51 00 00       	call   17318 <log_printf>
   12146:	83 c4 10             	add    $0x10,%esp
      goto load_failed;
   12149:	e9 c1 00 00 00       	jmp    1220f <load_elf_file+0x1f8>
    }

    cnt = sys_read(file, (char *)&elf_phdr, sizeof(Elf32_Phdr));
   1214e:	83 ec 04             	sub    $0x4,%esp
   12151:	6a 20                	push   $0x20
   12153:	8d 45 90             	lea    -0x70(%ebp),%eax
   12156:	50                   	push   %eax
   12157:	ff 75 ec             	push   -0x14(%ebp)
   1215a:	e8 61 34 00 00       	call   155c0 <sys_read>
   1215f:	83 c4 10             	add    $0x10,%esp
   12162:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (cnt < sizeof(Elf32_Phdr)) {
   12165:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12168:	83 f8 1f             	cmp    $0x1f,%eax
   1216b:	77 15                	ja     12182 <load_elf_file+0x16b>
      log_printf("read file failed\n");
   1216d:	83 ec 0c             	sub    $0xc,%esp
   12170:	68 9c 76 01 00       	push   $0x1769c
   12175:	e8 9e 51 00 00       	call   17318 <log_printf>
   1217a:	83 c4 10             	add    $0x10,%esp
      goto load_failed;
   1217d:	e9 8d 00 00 00       	jmp    1220f <load_elf_file+0x1f8>
    }

    // 若程序段不是可加载的或虚拟地址 < 用户程序的起始地址，则不可用
    if (elf_phdr.p_type != 1 || elf_phdr.p_vaddr < MEM_TASK_BASE) {
   12182:	8b 45 90             	mov    -0x70(%ebp),%eax
   12185:	83 f8 01             	cmp    $0x1,%eax
   12188:	75 53                	jne    121dd <load_elf_file+0x1c6>
   1218a:	8b 45 98             	mov    -0x68(%ebp),%eax
   1218d:	85 c0                	test   %eax,%eax
   1218f:	79 4c                	jns    121dd <load_elf_file+0x1c6>
      continue;
    }

    // 加载该程序段
    int err = load_phdr(file, &elf_phdr, page_dir);
   12191:	83 ec 04             	sub    $0x4,%esp
   12194:	ff 75 10             	push   0x10(%ebp)
   12197:	8d 45 90             	lea    -0x70(%ebp),%eax
   1219a:	50                   	push   %eax
   1219b:	ff 75 ec             	push   -0x14(%ebp)
   1219e:	e8 60 fd ff ff       	call   11f03 <load_phdr>
   121a3:	83 c4 10             	add    $0x10,%esp
   121a6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (err < 0) {
   121a9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   121ad:	79 12                	jns    121c1 <load_elf_file+0x1aa>
      log_printf("load program failed\n");
   121af:	83 ec 0c             	sub    $0xc,%esp
   121b2:	68 2b 77 01 00       	push   $0x1772b
   121b7:	e8 5c 51 00 00       	call   17318 <log_printf>
   121bc:	83 c4 10             	add    $0x10,%esp
      goto load_failed;
   121bf:	eb 4e                	jmp    1220f <load_elf_file+0x1f8>
    }

    // 更新堆空间的位置，紧靠最后一个可加载段
    task->heap_start = elf_phdr.p_vaddr + elf_phdr.p_memsz;
   121c1:	8b 55 98             	mov    -0x68(%ebp),%edx
   121c4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
   121c7:	01 c2                	add    %eax,%edx
   121c9:	8b 45 08             	mov    0x8(%ebp),%eax
   121cc:	89 50 10             	mov    %edx,0x10(%eax)
    task->heap_end = task->heap_start;
   121cf:	8b 45 08             	mov    0x8(%ebp),%eax
   121d2:	8b 50 10             	mov    0x10(%eax),%edx
   121d5:	8b 45 08             	mov    0x8(%ebp),%eax
   121d8:	89 50 14             	mov    %edx,0x14(%eax)
   121db:	eb 01                	jmp    121de <load_elf_file+0x1c7>
      continue;
   121dd:	90                   	nop
  for (int i = 0; i < elf_hdr.e_phnum; ++i, e_phoff += elf_hdr.e_phentsize) {
   121de:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   121e2:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
   121e6:	0f b7 c0             	movzwl %ax,%eax
   121e9:	01 45 f4             	add    %eax,-0xc(%ebp)
   121ec:	0f b7 45 dc          	movzwl -0x24(%ebp),%eax
   121f0:	0f b7 c0             	movzwl %ax,%eax
   121f3:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   121f6:	0f 8c 25 ff ff ff    	jl     12121 <load_elf_file+0x10a>
  }

  // 成功解析并加载完整个elf文件后关闭文件，并返回程序入口地址
  sys_close(file);
   121fc:	83 ec 0c             	sub    $0xc,%esp
   121ff:	ff 75 ec             	push   -0x14(%ebp)
   12202:	e8 2c 36 00 00       	call   15833 <sys_close>
   12207:	83 c4 10             	add    $0x10,%esp
  return elf_hdr.e_entry;
   1220a:	8b 45 c8             	mov    -0x38(%ebp),%eax
   1220d:	eb 19                	jmp    12228 <load_elf_file+0x211>

// 错误处理
load_failed:
  if (file >= 0) {  // 文件已被打开，则关闭该文件
   1220f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   12213:	78 0e                	js     12223 <load_elf_file+0x20c>
    sys_close(file);
   12215:	83 ec 0c             	sub    $0xc,%esp
   12218:	ff 75 ec             	push   -0x14(%ebp)
   1221b:	e8 13 36 00 00       	call   15833 <sys_close>
   12220:	83 c4 10             	add    $0x10,%esp
  }
  return 0;
   12223:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12228:	c9                   	leave  
   12229:	c3                   	ret    

0001222a <copy_args>:
 * @param argv 参数的字符串数组
 * @param argc 参数的个数
 * @return int
 */
static int copy_args(uint32_t to_page_dir, char *stack_top, char *const *argv,
                     int argc) {
   1222a:	55                   	push   %ebp
   1222b:	89 e5                	mov    %esp,%ebp
   1222d:	83 ec 38             	sub    $0x38,%esp
  task_args_t task_args;
  task_args.argc = argc;
   12230:	8b 45 14             	mov    0x14(%ebp),%eax
   12233:	89 45 d8             	mov    %eax,-0x28(%ebp)

  // 1.获取char*数组在目标虚拟空间中的的虚拟地址
  // char*数组将被拷贝到task_args的上方,所以直接让argv指向栈顶偏移task_args的大小个字节的空间即可
  // 即指向了该字符串数组第一个char*的地址
  task_args.argv = (char **)(stack_top + sizeof(task_args_t));
   12236:	8b 45 0c             	mov    0xc(%ebp),%eax
   12239:	83 c0 0c             	add    $0xc,%eax
   1223c:	89 45 dc             	mov    %eax,-0x24(%ebp)

  // 2.获取char*数组对应的虚拟空间关联的物理地址
  char **to_argv_paddr =
      (char **)memory_get_paddr(to_page_dir, (uint32_t)task_args.argv);
   1223f:	8b 45 dc             	mov    -0x24(%ebp),%eax
   12242:	83 ec 08             	sub    $0x8,%esp
   12245:	50                   	push   %eax
   12246:	ff 75 08             	push   0x8(%ebp)
   12249:	e8 a7 ec ff ff       	call   10ef5 <memory_get_paddr>
   1224e:	83 c4 10             	add    $0x10,%esp
  char **to_argv_paddr =
   12251:	89 45 ec             	mov    %eax,-0x14(%ebp)

  // 3.获取参数的存储地址, 偏移量为 task_args 加上
  // argc个参数的字符串指针的大小，
  char *dest_arg = stack_top + sizeof(task_args_t) + sizeof(char *) * argc;
   12254:	8b 45 14             	mov    0x14(%ebp),%eax
   12257:	83 c0 03             	add    $0x3,%eax
   1225a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   12261:	8b 45 0c             	mov    0xc(%ebp),%eax
   12264:	01 d0                	add    %edx,%eax
   12266:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 3.将参数拷贝到dest_arg处，并将每个参数的地址记录到task.argv指向的char*数组中
  for (int i = 0; i < argc; ++i) {
   12269:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   12270:	e9 82 00 00 00       	jmp    122f7 <copy_args+0xcd>
    char *from = argv[i];
   12275:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12278:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1227f:	8b 45 10             	mov    0x10(%ebp),%eax
   12282:	01 d0                	add    %edx,%eax
   12284:	8b 00                	mov    (%eax),%eax
   12286:	89 45 e8             	mov    %eax,-0x18(%ebp)
    int len = kernel_strlen(from) + 1;
   12289:	83 ec 0c             	sub    $0xc,%esp
   1228c:	ff 75 e8             	push   -0x18(%ebp)
   1228f:	e8 03 48 00 00       	call   16a97 <kernel_strlen>
   12294:	83 c4 10             	add    $0x10,%esp
   12297:	83 c0 01             	add    $0x1,%eax
   1229a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    int err = memory_copy_uvm_data((uint32_t)dest_arg, to_page_dir,
   1229d:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
   122a0:	8b 55 e8             	mov    -0x18(%ebp),%edx
   122a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   122a6:	51                   	push   %ecx
   122a7:	52                   	push   %edx
   122a8:	ff 75 08             	push   0x8(%ebp)
   122ab:	50                   	push   %eax
   122ac:	e8 97 ec ff ff       	call   10f48 <memory_copy_uvm_data>
   122b1:	83 c4 10             	add    $0x10,%esp
   122b4:	89 45 e0             	mov    %eax,-0x20(%ebp)
                                   (uint32_t)from, len);
    ASSERT(err >= 0);
   122b7:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   122bb:	79 1c                	jns    122d9 <copy_args+0xaf>
   122bd:	68 40 77 01 00       	push   $0x17740
   122c2:	68 08 78 01 00       	push   $0x17808
   122c7:	68 96 03 00 00       	push   $0x396
   122cc:	68 1c 76 01 00       	push   $0x1761c
   122d1:	e8 2c 43 00 00       	call   16602 <pannic>
   122d6:	83 c4 10             	add    $0x10,%esp
    to_argv_paddr[i] = dest_arg;
   122d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   122dc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   122e3:	8b 45 ec             	mov    -0x14(%ebp),%eax
   122e6:	01 c2                	add    %eax,%edx
   122e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   122eb:	89 02                	mov    %eax,(%edx)
    dest_arg += len;
   122ed:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   122f0:	01 45 f4             	add    %eax,-0xc(%ebp)
  for (int i = 0; i < argc; ++i) {
   122f3:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   122f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   122fa:	3b 45 14             	cmp    0x14(%ebp),%eax
   122fd:	0f 8c 72 ff ff ff    	jl     12275 <copy_args+0x4b>
  }

  // 4.将task_args拷贝到用户虚拟空间中,紧邻栈顶上方，作为入口函数的参数
  memory_copy_uvm_data((uint32_t)stack_top, to_page_dir, (uint32_t)&task_args,
   12303:	8d 55 d4             	lea    -0x2c(%ebp),%edx
   12306:	8b 45 0c             	mov    0xc(%ebp),%eax
   12309:	6a 0c                	push   $0xc
   1230b:	52                   	push   %edx
   1230c:	ff 75 08             	push   0x8(%ebp)
   1230f:	50                   	push   %eax
   12310:	e8 33 ec ff ff       	call   10f48 <memory_copy_uvm_data>
   12315:	83 c4 10             	add    $0x10,%esp
                       sizeof(task_args_t));
}
   12318:	90                   	nop
   12319:	c9                   	leave  
   1231a:	c3                   	ret    

0001231b <sys_execve>:
 * @param name 程序名
 * @param argv 命令行参数数组
 * @param env 程序继承的环境变量数组
 * @return int
 */
int sys_execve(char *name, char *const *argv, char *const *env) {
   1231b:	55                   	push   %ebp
   1231c:	89 e5                	mov    %esp,%ebp
   1231e:	83 ec 28             	sub    $0x28,%esp
  // 1.获取当前任务进程
  task_t *task = task_current();
   12321:	e8 6e f6 ff ff       	call   11994 <task_current>
   12326:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 2.获取当前任务的页目录表
  uint32_t old_page_dir = task->tss.cr3;
   12329:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1232c:	8b 40 78             	mov    0x78(%eax),%eax
   1232f:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 3.创建一个新的页目录表
  uint32_t new_page_dir = memory_creat_uvm();
   12332:	e8 29 e6 ff ff       	call   10960 <memory_creat_uvm>
   12337:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if (new_page_dir == 0)  // 创建失败
   1233a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1233e:	0f 84 4a 01 00 00    	je     1248e <sys_execve+0x173>
    goto exec_failed;

  // 4.加载elf文件，替换当前任务
  uint32_t entry = load_elf_file(task, name, new_page_dir);
   12344:	83 ec 04             	sub    $0x4,%esp
   12347:	ff 75 ec             	push   -0x14(%ebp)
   1234a:	ff 75 08             	push   0x8(%ebp)
   1234d:	ff 75 f4             	push   -0xc(%ebp)
   12350:	e8 c2 fc ff ff       	call   12017 <load_elf_file>
   12355:	83 c4 10             	add    $0x10,%esp
   12358:	89 45 e8             	mov    %eax,-0x18(%ebp)
  if (entry == 0) goto exec_failed;
   1235b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   1235f:	0f 84 2c 01 00 00    	je     12491 <sys_execve+0x176>

  // 5.为新进程分配用户栈空间
  uint32_t stack_top = MEM_TASK_STACK_TOP - MEM_TASK_ARG_SIZE;
   12365:	c7 45 e4 00 c0 ff df 	movl   $0xdfffc000,-0x1c(%ebp)
  int err = memory_alloc_for_page_dir(
   1236c:	6a 07                	push   $0x7
   1236e:	68 00 20 03 00       	push   $0x32000
   12373:	68 00 e0 fc df       	push   $0xdffce000
   12378:	ff 75 ec             	push   -0x14(%ebp)
   1237b:	e8 d2 e9 ff ff       	call   10d52 <memory_alloc_for_page_dir>
   12380:	83 c4 10             	add    $0x10,%esp
   12383:	89 45 e0             	mov    %eax,-0x20(%ebp)
      new_page_dir, MEM_TASK_STACK_TOP - MEM_TASK_STACK_SIZE,
      MEM_TASK_STACK_SIZE, PTE_P | PTE_U | PTE_W);

  if (err < 0) goto exec_failed;
   12386:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   1238a:	0f 88 04 01 00 00    	js     12494 <sys_execve+0x179>

  // 6.将被执行任务的入口参数拷贝到栈上方对应内存空间
  int argc = strings_count(argv);
   12390:	83 ec 0c             	sub    $0xc,%esp
   12393:	ff 75 0c             	push   0xc(%ebp)
   12396:	e8 30 4b 00 00       	call   16ecb <strings_count>
   1239b:	83 c4 10             	add    $0x10,%esp
   1239e:	89 45 dc             	mov    %eax,-0x24(%ebp)
  err = copy_args(new_page_dir, (char *)stack_top, argv, argc);
   123a1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   123a4:	ff 75 dc             	push   -0x24(%ebp)
   123a7:	ff 75 0c             	push   0xc(%ebp)
   123aa:	50                   	push   %eax
   123ab:	ff 75 ec             	push   -0x14(%ebp)
   123ae:	e8 77 fe ff ff       	call   1222a <copy_args>
   123b3:	83 c4 10             	add    $0x10,%esp
   123b6:	89 45 e0             	mov    %eax,-0x20(%ebp)
  if (err < 0) goto exec_failed;
   123b9:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   123bd:	0f 88 d4 00 00 00    	js     12497 <sys_execve+0x17c>

  // 7.获取系统调用的栈帧,因为每次通过调用门进入内核栈中都只会一帧该结构体的数据，
  // 所以用最高地址减去大小即可获得该帧的起始地址
  syscall_frame_t *frame =
      (syscall_frame_t *)(task_current()->tss.esp0 - sizeof(syscall_frame_t));
   123c3:	e8 cc f5 ff ff       	call   11994 <task_current>
   123c8:	8b 40 60             	mov    0x60(%eax),%eax
   123cb:	83 e8 58             	sub    $0x58,%eax
  syscall_frame_t *frame =
   123ce:	89 45 d8             	mov    %eax,-0x28(%ebp)

  // 8.更改进程用户栈的位置，并更改调用门返回后执行的指令地址为程序入口地址
  frame->esp = stack_top - 5 * 4;
   123d1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   123d4:	8d 50 ec             	lea    -0x14(%eax),%edx
   123d7:	8b 45 d8             	mov    -0x28(%ebp),%eax
   123da:	89 50 50             	mov    %edx,0x50(%eax)
  frame->eip = entry;
   123dd:	8b 45 d8             	mov    -0x28(%ebp),%eax
   123e0:	8b 55 e8             	mov    -0x18(%ebp),%edx
   123e3:	89 50 34             	mov    %edx,0x34(%eax)

  // 9.让进程更清爽的运行，清空通用寄存器的值
  frame->eax = frame->ebx = frame->ecx = frame->edx = 0;
   123e6:	8b 45 d8             	mov    -0x28(%ebp),%eax
   123e9:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
   123f0:	8b 45 d8             	mov    -0x28(%ebp),%eax
   123f3:	8b 50 28             	mov    0x28(%eax),%edx
   123f6:	8b 45 d8             	mov    -0x28(%ebp),%eax
   123f9:	89 50 2c             	mov    %edx,0x2c(%eax)
   123fc:	8b 45 d8             	mov    -0x28(%ebp),%eax
   123ff:	8b 50 2c             	mov    0x2c(%eax),%edx
   12402:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12405:	89 50 24             	mov    %edx,0x24(%eax)
   12408:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1240b:	8b 50 24             	mov    0x24(%eax),%edx
   1240e:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12411:	89 50 30             	mov    %edx,0x30(%eax)
  frame->esi = frame->edi = frame->ebp = 0;
   12414:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12417:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
   1241e:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12421:	8b 50 1c             	mov    0x1c(%eax),%edx
   12424:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12427:	89 50 14             	mov    %edx,0x14(%eax)
   1242a:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1242d:	8b 50 14             	mov    0x14(%eax),%edx
   12430:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12433:	89 50 18             	mov    %edx,0x18(%eax)
  frame->eflags = EFLAGS_IF | EFLAGS_DEFAULT_1;
   12436:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12439:	c7 00 02 02 00 00    	movl   $0x202,(%eax)

  // 10.修改当前任务名为被执行任务名
  kernel_strncpy(task->name, get_file_name(name), TASK_NAME_SIZE);
   1243f:	83 ec 0c             	sub    $0xc,%esp
   12442:	ff 75 08             	push   0x8(%ebp)
   12445:	e8 ae 4a 00 00       	call   16ef8 <get_file_name>
   1244a:	83 c4 10             	add    $0x10,%esp
   1244d:	8b 55 f4             	mov    -0xc(%ebp),%edx
   12450:	83 c2 24             	add    $0x24,%edx
   12453:	83 ec 04             	sub    $0x4,%esp
   12456:	6a 20                	push   $0x20
   12458:	50                   	push   %eax
   12459:	52                   	push   %edx
   1245a:	e8 66 45 00 00       	call   169c5 <kernel_strncpy>
   1245f:	83 c4 10             	add    $0x10,%esp

  // 11.记录并设置新页目录表，并销毁原页目录表的虚拟映射关系
  task->tss.cr3 = new_page_dir;
   12462:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12465:	8b 55 ec             	mov    -0x14(%ebp),%edx
   12468:	89 50 78             	mov    %edx,0x78(%eax)
  mmu_set_page_dir(new_page_dir);
   1246b:	83 ec 0c             	sub    $0xc,%esp
   1246e:	ff 75 ec             	push   -0x14(%ebp)
   12471:	e8 fe ed ff ff       	call   11274 <mmu_set_page_dir>
   12476:	83 c4 10             	add    $0x10,%esp
  memory_destroy_uvm(old_page_dir);
   12479:	83 ec 0c             	sub    $0xc,%esp
   1247c:	ff 75 f0             	push   -0x10(%ebp)
   1247f:	e8 ee e6 ff ff       	call   10b72 <memory_destroy_uvm>
   12484:	83 c4 10             	add    $0x10,%esp
  return 0;
   12487:	b8 00 00 00 00       	mov    $0x0,%eax
   1248c:	eb 3a                	jmp    124c8 <sys_execve+0x1ad>
    goto exec_failed;
   1248e:	90                   	nop
   1248f:	eb 07                	jmp    12498 <sys_execve+0x17d>
  if (entry == 0) goto exec_failed;
   12491:	90                   	nop
   12492:	eb 04                	jmp    12498 <sys_execve+0x17d>
  if (err < 0) goto exec_failed;
   12494:	90                   	nop
   12495:	eb 01                	jmp    12498 <sys_execve+0x17d>
  if (err < 0) goto exec_failed;
   12497:	90                   	nop

exec_failed:
  // 执行失败，释放资源并恢复到原进程状态
  if (new_page_dir) {
   12498:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1249c:	74 25                	je     124c3 <sys_execve+0x1a8>
    task->tss.cr3 = old_page_dir;
   1249e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   124a1:	8b 55 f0             	mov    -0x10(%ebp),%edx
   124a4:	89 50 78             	mov    %edx,0x78(%eax)
    mmu_set_page_dir(old_page_dir);
   124a7:	83 ec 0c             	sub    $0xc,%esp
   124aa:	ff 75 f0             	push   -0x10(%ebp)
   124ad:	e8 c2 ed ff ff       	call   11274 <mmu_set_page_dir>
   124b2:	83 c4 10             	add    $0x10,%esp
    memory_destroy_uvm(new_page_dir);
   124b5:	83 ec 0c             	sub    $0xc,%esp
   124b8:	ff 75 ec             	push   -0x14(%ebp)
   124bb:	e8 b2 e6 ff ff       	call   10b72 <memory_destroy_uvm>
   124c0:	83 c4 10             	add    $0x10,%esp
  }
  return -1;
   124c3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   124c8:	c9                   	leave  
   124c9:	c3                   	ret    

000124ca <sys_exit>:

/**
 * @brief 任务进程主动退出
 *
 */
void sys_exit(int status) {
   124ca:	55                   	push   %ebp
   124cb:	89 e5                	mov    %esp,%ebp
   124cd:	83 ec 28             	sub    $0x28,%esp
  // 1.获取当前任务
  task_t *curr_task = task_current();
   124d0:	e8 bf f4 ff ff       	call   11994 <task_current>
   124d5:	89 45 e8             	mov    %eax,-0x18(%ebp)

  // 2.关闭当前任务打开的文件
  for (int fd = 0; fd < TASK_OFILE_SIZE; ++fd) {
   124d8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   124df:	eb 39                	jmp    1251a <sys_exit+0x50>
    file_t *file = curr_task->file_table[fd];
   124e1:	8b 45 e8             	mov    -0x18(%ebp),%eax
   124e4:	8b 55 f4             	mov    -0xc(%ebp),%edx
   124e7:	83 c2 30             	add    $0x30,%edx
   124ea:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   124ee:	89 45 d8             	mov    %eax,-0x28(%ebp)
    if (file) {
   124f1:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
   124f5:	74 1f                	je     12516 <sys_exit+0x4c>
      sys_close(fd);
   124f7:	83 ec 0c             	sub    $0xc,%esp
   124fa:	ff 75 f4             	push   -0xc(%ebp)
   124fd:	e8 31 33 00 00       	call   15833 <sys_close>
   12502:	83 c4 10             	add    $0x10,%esp
      curr_task->file_table[fd] = (file_t *)0;
   12505:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12508:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1250b:	83 c2 30             	add    $0x30,%edx
   1250e:	c7 44 90 08 00 00 00 	movl   $0x0,0x8(%eax,%edx,4)
   12515:	00 
  for (int fd = 0; fd < TASK_OFILE_SIZE; ++fd) {
   12516:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1251a:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   1251e:	7e c1                	jle    124e1 <sys_exit+0x17>
    }
  }

  //3.将该进程的子进程的父进程设为first_task，由其进行统一回收
  int move_child = 0; //标志位，判断是否当前进程已有子进程进入僵尸态
   12520:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  //TODO:加锁
  mutex_lock(&task_table_lock);
   12527:	83 ec 0c             	sub    $0xc,%esp
   1252a:	68 c0 99 03 00       	push   $0x399c0
   1252f:	e8 02 3a 00 00       	call   15f36 <mutex_lock>
   12534:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < TASK_COUNT; ++i) {
   12537:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   1253e:	eb 3b                	jmp    1257b <sys_exit+0xb1>
    task_t *task = task_table + i;
   12540:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12543:	69 c0 c8 02 00 00    	imul   $0x2c8,%eax,%eax
   12549:	05 c0 35 02 00       	add    $0x235c0,%eax
   1254e:	89 45 dc             	mov    %eax,-0x24(%ebp)
    if (task->parent == curr_task) {
   12551:	8b 45 dc             	mov    -0x24(%ebp),%eax
   12554:	8b 40 04             	mov    0x4(%eax),%eax
   12557:	39 45 e8             	cmp    %eax,-0x18(%ebp)
   1255a:	75 1b                	jne    12577 <sys_exit+0xad>
      task->parent = &task_manager.first_task;
   1255c:	8b 45 dc             	mov    -0x24(%ebp),%eax
   1255f:	c7 40 04 28 30 02 00 	movl   $0x23028,0x4(%eax)
      if (task->state == TASK_ZOMBIE) { //已有子进程提前退出进入僵尸态，则设置标志位
   12566:	8b 45 dc             	mov    -0x24(%ebp),%eax
   12569:	8b 00                	mov    (%eax),%eax
   1256b:	83 f8 06             	cmp    $0x6,%eax
   1256e:	75 07                	jne    12577 <sys_exit+0xad>
        move_child = 1;
   12570:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
  for (int i = 0; i < TASK_COUNT; ++i) {
   12577:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   1257b:	83 7d ec 7f          	cmpl   $0x7f,-0x14(%ebp)
   1257f:	7e bf                	jle    12540 <sys_exit+0x76>
      }
    }
  }
  //TODO:解锁
  mutex_unlock(&task_table_lock);
   12581:	83 ec 0c             	sub    $0xc,%esp
   12584:	68 c0 99 03 00       	push   $0x399c0
   12589:	e8 39 3a 00 00       	call   15fc7 <mutex_unlock>
   1258e:	83 c4 10             	add    $0x10,%esp
 

  // TODO:加锁
  idt_state_t state = idt_enter_protection();
   12591:	e8 71 0d 00 00       	call   13307 <idt_enter_protection>
   12596:	89 45 e4             	mov    %eax,-0x1c(%ebp)


  // 4.获取父进程，判断父进程是否在等待回收子进程资源
  task_t *parent = (task_t *)curr_task->parent;
   12599:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1259c:	8b 40 04             	mov    0x4(%eax),%eax
   1259f:	89 45 e0             	mov    %eax,-0x20(%ebp)
  
  if (move_child && (parent != &task_manager.first_task)) {  
   125a2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   125a6:	74 23                	je     125cb <sys_exit+0x101>
   125a8:	81 7d e0 28 30 02 00 	cmpl   $0x23028,-0x20(%ebp)
   125af:	74 1a                	je     125cb <sys_exit+0x101>
    //当前进程的父进程不是first_task,
    //需要对first_task进行唤醒，以使first_task
    //对当前进程的提前死亡的子进程进行资源回收
    if (task_manager.first_task.state == TASK_WAITTING) {
   125b1:	a1 28 30 02 00       	mov    0x23028,%eax
   125b6:	83 f8 04             	cmp    $0x4,%eax
   125b9:	75 10                	jne    125cb <sys_exit+0x101>
      task_set_ready(&task_manager.first_task);
   125bb:	83 ec 0c             	sub    $0xc,%esp
   125be:	68 28 30 02 00       	push   $0x23028
   125c3:	e8 1a f3 ff ff       	call   118e2 <task_set_ready>
   125c8:	83 c4 10             	add    $0x10,%esp
    }

  }
  

  if (parent->state ==
   125cb:	8b 45 e0             	mov    -0x20(%ebp),%eax
   125ce:	8b 00                	mov    (%eax),%eax
   125d0:	83 f8 04             	cmp    $0x4,%eax
   125d3:	75 0e                	jne    125e3 <sys_exit+0x119>
      TASK_WAITTING) {  // 父进程处于阻塞并等待回收子进程资源的状态，需要唤醒父进程
    task_set_ready(parent);
   125d5:	83 ec 0c             	sub    $0xc,%esp
   125d8:	ff 75 e0             	push   -0x20(%ebp)
   125db:	e8 02 f3 ff ff       	call   118e2 <task_set_ready>
   125e0:	83 c4 10             	add    $0x10,%esp
  }

  // 3.设置进程状态标志为僵尸态并保存状态值
  curr_task->state = TASK_ZOMBIE;
   125e3:	8b 45 e8             	mov    -0x18(%ebp),%eax
   125e6:	c7 00 06 00 00 00    	movl   $0x6,(%eax)
  curr_task->status = status;
   125ec:	8b 45 e8             	mov    -0x18(%ebp),%eax
   125ef:	8b 55 08             	mov    0x8(%ebp),%edx
   125f2:	89 50 0c             	mov    %edx,0xc(%eax)

  // 5.将任务进程从就绪队列中取下
  task_set_unready(curr_task);
   125f5:	83 ec 0c             	sub    $0xc,%esp
   125f8:	ff 75 e8             	push   -0x18(%ebp)
   125fb:	e8 24 f3 ff ff       	call   11924 <task_set_unready>
   12600:	83 c4 10             	add    $0x10,%esp

  // 6.切换任务进程
  task_switch();
   12603:	e8 96 f3 ff ff       	call   1199e <task_switch>

  // TODO:解锁
  idt_leave_protection(state);
   12608:	83 ec 0c             	sub    $0xc,%esp
   1260b:	ff 75 e4             	push   -0x1c(%ebp)
   1260e:	e8 0c 0d 00 00       	call   1331f <idt_leave_protection>
   12613:	83 c4 10             	add    $0x10,%esp
}
   12616:	90                   	nop
   12617:	c9                   	leave  
   12618:	c3                   	ret    

00012619 <sys_wait>:
 * @brief 回收进程资源
 *
 * @param status 传入参数，记录被回收的进程状态值
 * @return int  被回收的进程的pid
 */
int sys_wait(int *status) {
   12619:	55                   	push   %ebp
   1261a:	89 e5                	mov    %esp,%ebp
   1261c:	83 ec 28             	sub    $0x28,%esp
  // 1.获取当前进程
  task_t *curr_task = task_current();
   1261f:	e8 70 f3 ff ff       	call   11994 <task_current>
   12624:	89 45 f0             	mov    %eax,-0x10(%ebp)

  for (;;) {
    // TODO:加锁
    mutex_lock(&task_table_lock);
   12627:	83 ec 0c             	sub    $0xc,%esp
   1262a:	68 c0 99 03 00       	push   $0x399c0
   1262f:	e8 02 39 00 00       	call   15f36 <mutex_lock>
   12634:	83 c4 10             	add    $0x10,%esp

    // 2.遍历任务表,寻找子进程
    for (int i = 0; i < TASK_COUNT; ++i) {
   12637:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1263e:	eb 6c                	jmp    126ac <sys_wait+0x93>
      task_t *task = task_table + i;
   12640:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12643:	69 c0 c8 02 00 00    	imul   $0x2c8,%eax,%eax
   12649:	05 c0 35 02 00       	add    $0x235c0,%eax
   1264e:	89 45 e8             	mov    %eax,-0x18(%ebp)
      if (task->pid != 0 && task->parent != curr_task) {
   12651:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12654:	8b 40 08             	mov    0x8(%eax),%eax
   12657:	85 c0                	test   %eax,%eax
   12659:	74 0b                	je     12666 <sys_wait+0x4d>
   1265b:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1265e:	8b 40 04             	mov    0x4(%eax),%eax
   12661:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   12664:	75 41                	jne    126a7 <sys_wait+0x8e>
        continue;
      }
      // 3.找到一个子进程，判断是否为僵尸态
      if (task->state == TASK_ZOMBIE) {  // 僵尸态，进行资源回收
   12666:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12669:	8b 00                	mov    (%eax),%eax
   1266b:	83 f8 06             	cmp    $0x6,%eax
   1266e:	75 38                	jne    126a8 <sys_wait+0x8f>
        int pid = task->pid;
   12670:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12673:	8b 40 08             	mov    0x8(%eax),%eax
   12676:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        *status = task->status;
   12679:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1267c:	8b 50 0c             	mov    0xc(%eax),%edx
   1267f:	8b 45 08             	mov    0x8(%ebp),%eax
   12682:	89 10                	mov    %edx,(%eax)

        //释放任务
        task_uninit(task);
   12684:	83 ec 0c             	sub    $0xc,%esp
   12687:	ff 75 e8             	push   -0x18(%ebp)
   1268a:	e8 cc ef ff ff       	call   1165b <task_uninit>
   1268f:	83 c4 10             	add    $0x10,%esp

        // TODO:解锁
        mutex_unlock(&task_table_lock);
   12692:	83 ec 0c             	sub    $0xc,%esp
   12695:	68 c0 99 03 00       	push   $0x399c0
   1269a:	e8 28 39 00 00       	call   15fc7 <mutex_unlock>
   1269f:	83 c4 10             	add    $0x10,%esp

        // 3.4返回该进程的pid
        return pid;
   126a2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   126a5:	eb 52                	jmp    126f9 <sys_wait+0xe0>
        continue;
   126a7:	90                   	nop
    for (int i = 0; i < TASK_COUNT; ++i) {
   126a8:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   126ac:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   126b0:	7e 8e                	jle    12640 <sys_wait+0x27>
      }
    }

    // TODO:解锁
    mutex_unlock(&task_table_lock);
   126b2:	83 ec 0c             	sub    $0xc,%esp
   126b5:	68 c0 99 03 00       	push   $0x399c0
   126ba:	e8 08 39 00 00       	call   15fc7 <mutex_unlock>
   126bf:	83 c4 10             	add    $0x10,%esp

    // 4.未找到僵尸态的子进程，则当前进程进入阻塞状态
    // TODO:加锁
    idt_state_t state = idt_enter_protection();
   126c2:	e8 40 0c 00 00       	call   13307 <idt_enter_protection>
   126c7:	89 45 ec             	mov    %eax,-0x14(%ebp)

    task_set_unready(curr_task);
   126ca:	83 ec 0c             	sub    $0xc,%esp
   126cd:	ff 75 f0             	push   -0x10(%ebp)
   126d0:	e8 4f f2 ff ff       	call   11924 <task_set_unready>
   126d5:	83 c4 10             	add    $0x10,%esp
    curr_task->state = TASK_WAITTING;
   126d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   126db:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
    task_switch();
   126e1:	e8 b8 f2 ff ff       	call   1199e <task_switch>

    // TODO:解锁
    idt_leave_protection(state);
   126e6:	83 ec 0c             	sub    $0xc,%esp
   126e9:	ff 75 ec             	push   -0x14(%ebp)
   126ec:	e8 2e 0c 00 00       	call   1331f <idt_leave_protection>
   126f1:	83 c4 10             	add    $0x10,%esp
  for (;;) {
   126f4:	e9 2e ff ff ff       	jmp    12627 <sys_wait+0xe>
  }
  return 0;
   126f9:	c9                   	leave  
   126fa:	c3                   	ret    

000126fb <gate_desc_set>:
 * @param selector 门描述符对应的处理程序所在的段的选择子
 * @param offset 门描述符对应的处理程序相对于所在段的偏移量
 * @param attr 门描述符的属性
 */
void gate_desc_set(gate_desc_t *desc, const uint16_t selector, const uint32_t offset,
                          const uint16_t attr) {
   126fb:	55                   	push   %ebp
   126fc:	89 e5                	mov    %esp,%ebp
   126fe:	83 ec 08             	sub    $0x8,%esp
   12701:	8b 55 0c             	mov    0xc(%ebp),%edx
   12704:	8b 45 14             	mov    0x14(%ebp),%eax
   12707:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   1270b:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
  // 1.初始化偏移量
  desc->offset15_0 = offset & 0xffff;
   1270f:	8b 45 10             	mov    0x10(%ebp),%eax
   12712:	89 c2                	mov    %eax,%edx
   12714:	8b 45 08             	mov    0x8(%ebp),%eax
   12717:	66 89 10             	mov    %dx,(%eax)
  desc->offset31_16 = (offset >> 16) & 0xffff;
   1271a:	8b 45 10             	mov    0x10(%ebp),%eax
   1271d:	c1 e8 10             	shr    $0x10,%eax
   12720:	89 c2                	mov    %eax,%edx
   12722:	8b 45 08             	mov    0x8(%ebp),%eax
   12725:	66 89 50 06          	mov    %dx,0x6(%eax)

  // 2.初始化选择子
  desc->selector = selector;
   12729:	8b 45 08             	mov    0x8(%ebp),%eax
   1272c:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12730:	66 89 50 02          	mov    %dx,0x2(%eax)

  // 3.初始化属性位
  desc->attr = attr;
   12734:	8b 45 08             	mov    0x8(%ebp),%eax
   12737:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   1273b:	66 89 50 04          	mov    %dx,0x4(%eax)
   1273f:	90                   	nop
   12740:	c9                   	leave  
   12741:	c3                   	ret    

00012742 <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   12742:	55                   	push   %ebp
   12743:	89 e5                	mov    %esp,%ebp
   12745:	83 ec 10             	sub    $0x10,%esp
  gdt.start31_16 = (start >> 16) & 0xffff;  // 初始化GDT地址的高16位
   12748:	8b 45 08             	mov    0x8(%ebp),%eax
   1274b:	c1 e8 10             	shr    $0x10,%eax
   1274e:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  gdt.start15_0 = start & 0xffff;           // 初始化GDT地址的低16位
   12752:	8b 45 08             	mov    0x8(%ebp),%eax
   12755:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   12759:	8b 45 0c             	mov    0xc(%ebp),%eax
   1275c:	83 e8 01             	sub    $0x1,%eax
  gdt.limit =
   1275f:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   12763:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   12767:	90                   	nop
   12768:	c9                   	leave  
   12769:	c3                   	ret    

0001276a <segment_desc_set>:
 *                 即2的13次方个段，也就是8192
 * @param base 该段在内存中的真实段基址
 * @param limit 该段的段界限，是一个偏移量，表示段中最大的偏移界限
 * @param attr 该段的属性位
 */
void segment_desc_set(uint16_t selector,  uint32_t base, uint32_t limit, uint16_t attr) {
   1276a:	55                   	push   %ebp
   1276b:	89 e5                	mov    %esp,%ebp
   1276d:	83 ec 18             	sub    $0x18,%esp
   12770:	8b 55 08             	mov    0x8(%ebp),%edx
   12773:	8b 45 14             	mov    0x14(%ebp),%eax
   12776:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
   1277a:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    //1. 获取该段描述符在内存中的起始地址，selector >> 3 取出3~15位才是其在全局描述符中的下标
    segment_desc_t *desc = gdt_table + (selector >> 3);
   1277e:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   12782:	66 c1 e8 03          	shr    $0x3,%ax
   12786:	0f b7 c0             	movzwl %ax,%eax
   12789:	c1 e0 03             	shl    $0x3,%eax
   1278c:	05 e0 9b 03 00       	add    $0x39be0,%eax
   12791:	89 45 fc             	mov    %eax,-0x4(%ebp)

    //2. 设置段基地址
    desc->base15_0 = (uint16_t)base;
   12794:	8b 45 0c             	mov    0xc(%ebp),%eax
   12797:	89 c2                	mov    %eax,%edx
   12799:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1279c:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (uint8_t)(base >> 16);
   127a0:	8b 45 0c             	mov    0xc(%ebp),%eax
   127a3:	c1 e8 10             	shr    $0x10,%eax
   127a6:	89 c2                	mov    %eax,%edx
   127a8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   127ab:	88 50 04             	mov    %dl,0x4(%eax)
    desc->base31_24 = (uint8_t)(base >> 24);
   127ae:	8b 45 0c             	mov    0xc(%ebp),%eax
   127b1:	c1 e8 18             	shr    $0x18,%eax
   127b4:	89 c2                	mov    %eax,%edx
   127b6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   127b9:	88 50 07             	mov    %dl,0x7(%eax)

    //3. 设置段界限
    if (limit > 0xfffff) { //limit大于了20位能表示的最大值
   127bc:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   127c3:	76 1d                	jbe    127e2 <segment_desc_set+0x78>
        //将limit的粒度设置为 4kb，即将属性位G置1
        desc->attr |= 0x8000;
   127c5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   127c8:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   127cc:	66 0d 00 80          	or     $0x8000,%ax
   127d0:	89 c2                	mov    %eax,%edx
   127d2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   127d5:	66 89 50 05          	mov    %dx,0x5(%eax)

        //将limit改成以 4kb 为单位
        limit /= (4 * 1024);
   127d9:	8b 45 10             	mov    0x10(%ebp),%eax
   127dc:	c1 e8 0c             	shr    $0xc,%eax
   127df:	89 45 10             	mov    %eax,0x10(%ebp)

    }
    desc->limit15_0 = (uint16_t)limit;
   127e2:	8b 45 10             	mov    0x10(%ebp),%eax
   127e5:	89 c2                	mov    %eax,%edx
   127e7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   127ea:	66 89 10             	mov    %dx,(%eax)
    desc->attr |= ((uint16_t)(limit >> 8) & 0x0f00); //将limit高4位赋值到attr的8~11位(段界限的高4位)
   127ed:	8b 45 fc             	mov    -0x4(%ebp),%eax
   127f0:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   127f4:	89 c2                	mov    %eax,%edx
   127f6:	8b 45 10             	mov    0x10(%ebp),%eax
   127f9:	c1 e8 08             	shr    $0x8,%eax
   127fc:	66 25 00 0f          	and    $0xf00,%ax
   12800:	09 d0                	or     %edx,%eax
   12802:	89 c2                	mov    %eax,%edx
   12804:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12807:	66 89 50 05          	mov    %dx,0x5(%eax)

    //4.设置属性位
    desc->attr |= attr & 0xf0ff;
   1280b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1280e:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   12812:	89 c2                	mov    %eax,%edx
   12814:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   12818:	80 e4 f0             	and    $0xf0,%ah
   1281b:	09 d0                	or     %edx,%eax
   1281d:	89 c2                	mov    %eax,%edx
   1281f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12822:	66 89 50 05          	mov    %dx,0x5(%eax)


}
   12826:	90                   	nop
   12827:	c9                   	leave  
   12828:	c3                   	ret    

00012829 <gdt_init>:

/**
 * @brief  初始化GDT
 * 
 */
void gdt_init(void) {
   12829:	55                   	push   %ebp
   1282a:	89 e5                	mov    %esp,%ebp
   1282c:	83 ec 18             	sub    $0x18,%esp
    //TODO:暂时将所有段都初始化为0
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   1282f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12836:	eb 1c                	jmp    12854 <gdt_init+0x2b>
        segment_desc_set(i << 3, 0, 0, 0);
   12838:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1283b:	c1 e0 03             	shl    $0x3,%eax
   1283e:	0f b7 c0             	movzwl %ax,%eax
   12841:	6a 00                	push   $0x0
   12843:	6a 00                	push   $0x0
   12845:	6a 00                	push   $0x0
   12847:	50                   	push   %eax
   12848:	e8 1d ff ff ff       	call   1276a <segment_desc_set>
   1284d:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   12850:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12854:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   1285b:	7e db                	jle    12838 <gdt_init+0xf>
        is_alloc[i] == 0;
    }

    //使用平坦模型，即段基址为0, 段界限直接用最大值，界限粒度为4kb，即段大小为4GB
    //1.设置内核的数据段,并将其标记
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff,
   1285d:	68 92 40 00 00       	push   $0x4092
   12862:	6a ff                	push   $0xffffffff
   12864:	6a 00                	push   $0x0
   12866:	6a 10                	push   $0x10
   12868:	e8 fd fe ff ff       	call   1276a <segment_desc_set>
   1286d:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL | 
                    SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_DS >> 3] = 1;
   12870:	c6 05 e2 9b 04 00 01 	movb   $0x1,0x49be2

    //2.设置内核的代码段，并将其标记
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff,
   12877:	68 9a 40 00 00       	push   $0x409a
   1287c:	6a ff                	push   $0xffffffff
   1287e:	6a 00                	push   $0x0
   12880:	6a 08                	push   $0x8
   12882:	e8 e3 fe ff ff       	call   1276a <segment_desc_set>
   12887:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL |
                    SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_CS >> 3] = 1;
   1288a:	c6 05 e1 9b 04 00 01 	movb   $0x1,0x49be1

    //3.初始化调用门描述符，调用门的 DPL >= CPL = 3 && DPL >= RPL = 0, 若目标代码段的特权级更高则发生特权级转换
    gate_desc_set((gate_desc_t*)(gdt_table + (SYSCALL_SELECTOR >> 3)), 
   12891:	ba ca 02 01 00       	mov    $0x102ca,%edx
   12896:	b8 f8 9b 03 00       	mov    $0x39bf8,%eax
   1289b:	68 05 ec 00 00       	push   $0xec05
   128a0:	52                   	push   %edx
   128a1:	6a 08                	push   $0x8
   128a3:	50                   	push   %eax
   128a4:	e8 52 fe ff ff       	call   126fb <gate_desc_set>
   128a9:	83 c4 10             	add    $0x10,%esp
        KERNEL_SELECTOR_CS, (uint32_t)exception_handler_syscall, 
        GATE_ATTR_P | GATE_ATTR_DPL_3 | GATE_TYPE_SYSCALL | SYSCALL_PARAM_COUNT);
    
    is_alloc[SYSCALL_SELECTOR >> 3] = 1;
   128ac:	c6 05 e3 9b 04 00 01 	movb   $0x1,0x49be3


    //4.加载新的GDT表
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   128b3:	b8 e0 9b 03 00       	mov    $0x39be0,%eax
   128b8:	83 ec 08             	sub    $0x8,%esp
   128bb:	68 00 00 01 00       	push   $0x10000
   128c0:	50                   	push   %eax
   128c1:	e8 7c fe ff ff       	call   12742 <lgdt>
   128c6:	83 c4 10             	add    $0x10,%esp

    //4.初始化互斥锁
    mutex_init(&mutex);
   128c9:	83 ec 0c             	sub    $0xc,%esp
   128cc:	68 e0 bb 04 00       	push   $0x4bbe0
   128d1:	e8 13 36 00 00       	call   15ee9 <mutex_init>
   128d6:	83 c4 10             	add    $0x10,%esp
}
   128d9:	90                   	nop
   128da:	c9                   	leave  
   128db:	c3                   	ret    

000128dc <gdt_alloc_desc>:
/**
 * @brief  寻找gdt中未赋值的段描述符空间
 * 
 * @return int 返回的找到的描述符的选择子
 */
int gdt_alloc_desc() {
   128dc:	55                   	push   %ebp
   128dd:	89 e5                	mov    %esp,%ebp
   128df:	83 ec 18             	sub    $0x18,%esp

    mutex_lock(&mutex);//TODO:加锁
   128e2:	83 ec 0c             	sub    $0xc,%esp
   128e5:	68 e0 bb 04 00       	push   $0x4bbe0
   128ea:	e8 47 36 00 00       	call   15f36 <mutex_lock>
   128ef:	83 c4 10             	add    $0x10,%esp

    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   128f2:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   128f9:	eb 36                	jmp    12931 <gdt_alloc_desc+0x55>
        if (is_alloc[i] == 0)  {
   128fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   128fe:	05 e0 9b 04 00       	add    $0x49be0,%eax
   12903:	0f b6 00             	movzbl (%eax),%eax
   12906:	84 c0                	test   %al,%al
   12908:	75 23                	jne    1292d <gdt_alloc_desc+0x51>
            is_alloc[i] = 1;
   1290a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1290d:	05 e0 9b 04 00       	add    $0x49be0,%eax
   12912:	c6 00 01             	movb   $0x1,(%eax)

            mutex_unlock(&mutex);//TODO:解锁
   12915:	83 ec 0c             	sub    $0xc,%esp
   12918:	68 e0 bb 04 00       	push   $0x4bbe0
   1291d:	e8 a5 36 00 00       	call   15fc7 <mutex_unlock>
   12922:	83 c4 10             	add    $0x10,%esp
            return (i << 3);
   12925:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12928:	c1 e0 03             	shl    $0x3,%eax
   1292b:	eb 22                	jmp    1294f <gdt_alloc_desc+0x73>
    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   1292d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12931:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   12938:	7e c1                	jle    128fb <gdt_alloc_desc+0x1f>
        }
    }

    mutex_unlock(&mutex);//TODO:解锁
   1293a:	83 ec 0c             	sub    $0xc,%esp
   1293d:	68 e0 bb 04 00       	push   $0x4bbe0
   12942:	e8 80 36 00 00       	call   15fc7 <mutex_unlock>
   12947:	83 c4 10             	add    $0x10,%esp
    return -1;
   1294a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1294f:	c9                   	leave  
   12950:	c3                   	ret    

00012951 <gdt_free>:
/**
 * @brief 释放gdt表项
 * 
 * @param selector 需要释放的表项对应的选择子
 */
void gdt_free(uint16_t selector) {
   12951:	55                   	push   %ebp
   12952:	89 e5                	mov    %esp,%ebp
   12954:	83 ec 14             	sub    $0x14,%esp
   12957:	8b 45 08             	mov    0x8(%ebp),%eax
   1295a:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    uint16_t index = selector >> 3;
   1295e:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   12962:	66 c1 e8 03          	shr    $0x3,%ax
   12966:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    is_alloc[index] = 0;
   1296a:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
   1296e:	c6 80 e0 9b 04 00 00 	movb   $0x0,0x49be0(%eax)
}
   12975:	90                   	nop
   12976:	c9                   	leave  
   12977:	c3                   	ret    

00012978 <cli>:
static inline void cli(void) { __asm__ __volatile__("cli"); }
   12978:	55                   	push   %ebp
   12979:	89 e5                	mov    %esp,%ebp
   1297b:	fa                   	cli    
   1297c:	90                   	nop
   1297d:	5d                   	pop    %ebp
   1297e:	c3                   	ret    

0001297f <sti>:
static inline void sti(void) { __asm__ __volatile__("sti"); }
   1297f:	55                   	push   %ebp
   12980:	89 e5                	mov    %esp,%ebp
   12982:	fb                   	sti    
   12983:	90                   	nop
   12984:	5d                   	pop    %ebp
   12985:	c3                   	ret    

00012986 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   12986:	55                   	push   %ebp
   12987:	89 e5                	mov    %esp,%ebp
   12989:	f4                   	hlt    
   1298a:	90                   	nop
   1298b:	5d                   	pop    %ebp
   1298c:	c3                   	ret    

0001298d <inb>:
static inline uint8_t inb(uint16_t port) {
   1298d:	55                   	push   %ebp
   1298e:	89 e5                	mov    %esp,%ebp
   12990:	83 ec 14             	sub    $0x14,%esp
   12993:	8b 45 08             	mov    0x8(%ebp),%eax
   12996:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   1299a:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1299e:	89 c2                	mov    %eax,%edx
   129a0:	ec                   	in     (%dx),%al
   129a1:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   129a4:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   129a8:	c9                   	leave  
   129a9:	c3                   	ret    

000129aa <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   129aa:	55                   	push   %ebp
   129ab:	89 e5                	mov    %esp,%ebp
   129ad:	83 ec 08             	sub    $0x8,%esp
   129b0:	8b 45 08             	mov    0x8(%ebp),%eax
   129b3:	8b 55 0c             	mov    0xc(%ebp),%edx
   129b6:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   129ba:	89 d0                	mov    %edx,%eax
   129bc:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   129bf:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   129c3:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   129c7:	ee                   	out    %al,(%dx)
}
   129c8:	90                   	nop
   129c9:	c9                   	leave  
   129ca:	c3                   	ret    

000129cb <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   129cb:	55                   	push   %ebp
   129cc:	89 e5                	mov    %esp,%ebp
   129ce:	83 ec 10             	sub    $0x10,%esp
  idt.start31_16 = (start >> 16) & 0xffff;  // 初始化IDT地址的高16位
   129d1:	8b 45 08             	mov    0x8(%ebp),%eax
   129d4:	c1 e8 10             	shr    $0x10,%eax
   129d7:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  idt.start15_0 = start & 0xffff;           // 初始化IDT地址的低16位
   129db:	8b 45 08             	mov    0x8(%ebp),%eax
   129de:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   129e2:	8b 45 0c             	mov    0xc(%ebp),%eax
   129e5:	83 e8 01             	sub    $0x1,%eax
  idt.limit =
   129e8:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   129ec:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   129f0:	90                   	nop
   129f1:	c9                   	leave  
   129f2:	c3                   	ret    

000129f3 <read_cr2>:
static inline uint32_t read_cr2(void) {
   129f3:	55                   	push   %ebp
   129f4:	89 e5                	mov    %esp,%ebp
   129f6:	83 ec 10             	sub    $0x10,%esp
  __asm__ __volatile__("mov %%cr2, %[v]" : [v] "=r"(cr2));
   129f9:	0f 20 d0             	mov    %cr2,%eax
   129fc:	89 45 fc             	mov    %eax,-0x4(%ebp)
  return cr2;
   129ff:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12a02:	c9                   	leave  
   12a03:	c3                   	ret    

00012a04 <read_eflags>:
/**
 * @brief  读取当前cpu的eflags寄存器
 * 
 * @return uint32_t 放回eflags的值
 */
static inline uint32_t read_eflags(void) {
   12a04:	55                   	push   %ebp
   12a05:	89 e5                	mov    %esp,%ebp
   12a07:	83 ec 10             	sub    $0x10,%esp
  uint32_t eflags;
  //pushf 压入eflags的值到栈中
  __asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   12a0a:	9c                   	pushf  
   12a0b:	58                   	pop    %eax
   12a0c:	89 45 fc             	mov    %eax,-0x4(%ebp)
  
  return eflags;
   12a0f:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12a12:	c9                   	leave  
   12a13:	c3                   	ret    

00012a14 <write_eflags>:
/**
 * @brief  将状态state写入eflags寄存器
 * 
 * @param state 
 */
static inline void write_eflags(uint32_t state) {
   12a14:	55                   	push   %ebp
   12a15:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("push %%eax\n\tpopf"::"a"(state));
   12a17:	8b 45 08             	mov    0x8(%ebp),%eax
   12a1a:	50                   	push   %eax
   12a1b:	9d                   	popf   
}
   12a1c:	90                   	nop
   12a1d:	5d                   	pop    %ebp
   12a1e:	c3                   	ret    

00012a1f <print_exception_fram>:
/**
 * @brief  打印异常栈帧信息
 * 
 * @param frame 栈帧
 */
static void print_exception_fram(const exception_frame_t *frame) {
   12a1f:	55                   	push   %ebp
   12a20:	89 e5                	mov    %esp,%ebp
   12a22:	57                   	push   %edi
   12a23:	56                   	push   %esi
   12a24:	53                   	push   %ebx
   12a25:	83 ec 2c             	sub    $0x2c,%esp
  uint32_t ss, esp;
  if (frame->cs & 0x3) {  //cpl不为0，因为只设置了两种特权级，所以当前cpl为3，即用户程序异常
   12a28:	8b 45 08             	mov    0x8(%ebp),%eax
   12a2b:	8b 40 3c             	mov    0x3c(%eax),%eax
   12a2e:	83 e0 03             	and    $0x3,%eax
   12a31:	85 c0                	test   %eax,%eax
   12a33:	74 14                	je     12a49 <print_exception_fram+0x2a>
    ss = frame->ss3;
   12a35:	8b 45 08             	mov    0x8(%ebp),%eax
   12a38:	8b 40 48             	mov    0x48(%eax),%eax
   12a3b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    esp = frame->esp3;
   12a3e:	8b 45 08             	mov    0x8(%ebp),%eax
   12a41:	8b 40 44             	mov    0x44(%eax),%eax
   12a44:	89 45 e0             	mov    %eax,-0x20(%ebp)
   12a47:	eb 12                	jmp    12a5b <print_exception_fram+0x3c>
  } else {  //cpl为0，即内核异常
    ss = frame->ds; //内核ss与ds相同
   12a49:	8b 45 08             	mov    0x8(%ebp),%eax
   12a4c:	8b 40 0c             	mov    0xc(%eax),%eax
   12a4f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    esp = frame->esp;
   12a52:	8b 45 08             	mov    0x8(%ebp),%eax
   12a55:	8b 40 1c             	mov    0x1c(%eax),%eax
   12a58:	89 45 e0             	mov    %eax,-0x20(%ebp)
  }

  log_printf("------------------------stack frame info---------------------\n");
   12a5b:	83 ec 0c             	sub    $0xc,%esp
   12a5e:	68 14 78 01 00       	push   $0x17814
   12a63:	e8 b0 48 00 00       	call   17318 <log_printf>
   12a68:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ:\t\t%d\nerror code:\t%d\n", frame->num, frame->error_code);
   12a6b:	8b 45 08             	mov    0x8(%ebp),%eax
   12a6e:	8b 50 34             	mov    0x34(%eax),%edx
   12a71:	8b 45 08             	mov    0x8(%ebp),%eax
   12a74:	8b 40 30             	mov    0x30(%eax),%eax
   12a77:	83 ec 04             	sub    $0x4,%esp
   12a7a:	52                   	push   %edx
   12a7b:	50                   	push   %eax
   12a7c:	68 53 78 01 00       	push   $0x17853
   12a81:	e8 92 48 00 00       	call   17318 <log_printf>
   12a86:	83 c4 10             	add    $0x10,%esp
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d\n", 
    //TODO:SS暂时没法获取，先用ds替代，之后再进行获取
    frame->cs, frame->ds, ss, frame->es, frame->fs, frame->gs
   12a89:	8b 45 08             	mov    0x8(%ebp),%eax
   12a8c:	8b 30                	mov    (%eax),%esi
   12a8e:	8b 45 08             	mov    0x8(%ebp),%eax
   12a91:	8b 58 04             	mov    0x4(%eax),%ebx
   12a94:	8b 45 08             	mov    0x8(%ebp),%eax
   12a97:	8b 48 08             	mov    0x8(%eax),%ecx
   12a9a:	8b 45 08             	mov    0x8(%ebp),%eax
   12a9d:	8b 50 0c             	mov    0xc(%eax),%edx
   12aa0:	8b 45 08             	mov    0x8(%ebp),%eax
   12aa3:	8b 40 3c             	mov    0x3c(%eax),%eax
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d\n", 
   12aa6:	83 ec 04             	sub    $0x4,%esp
   12aa9:	56                   	push   %esi
   12aaa:	53                   	push   %ebx
   12aab:	51                   	push   %ecx
   12aac:	ff 75 e4             	push   -0x1c(%ebp)
   12aaf:	52                   	push   %edx
   12ab0:	50                   	push   %eax
   12ab1:	68 6c 78 01 00       	push   $0x1786c
   12ab6:	e8 5d 48 00 00       	call   17318 <log_printf>
   12abb:	83 c4 20             	add    $0x20,%esp
              "ESI:\t\t0x%x\n"
              "EDI:\t\t0x%x\n"
              "EBP:\t\t0x%x\n"
              "ESP:\t\t0x%x\n", 
              frame->eax, frame->ebx, frame->ecx, frame->edx,
              frame->esi, frame->edi, frame->ebp, esp 
   12abe:	8b 45 08             	mov    0x8(%ebp),%eax
   12ac1:	8b 40 18             	mov    0x18(%eax),%eax
   12ac4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   12ac7:	8b 45 08             	mov    0x8(%ebp),%eax
   12aca:	8b 78 10             	mov    0x10(%eax),%edi
   12acd:	8b 45 08             	mov    0x8(%ebp),%eax
   12ad0:	8b 70 14             	mov    0x14(%eax),%esi
              frame->eax, frame->ebx, frame->ecx, frame->edx,
   12ad3:	8b 45 08             	mov    0x8(%ebp),%eax
   12ad6:	8b 58 24             	mov    0x24(%eax),%ebx
   12ad9:	8b 45 08             	mov    0x8(%ebp),%eax
   12adc:	8b 48 28             	mov    0x28(%eax),%ecx
   12adf:	8b 45 08             	mov    0x8(%ebp),%eax
   12ae2:	8b 50 20             	mov    0x20(%eax),%edx
   12ae5:	8b 45 08             	mov    0x8(%ebp),%eax
   12ae8:	8b 40 2c             	mov    0x2c(%eax),%eax
  log_printf( 
   12aeb:	83 ec 0c             	sub    $0xc,%esp
   12aee:	ff 75 e0             	push   -0x20(%ebp)
   12af1:	ff 75 d4             	push   -0x2c(%ebp)
   12af4:	57                   	push   %edi
   12af5:	56                   	push   %esi
   12af6:	53                   	push   %ebx
   12af7:	51                   	push   %ecx
   12af8:	52                   	push   %edx
   12af9:	50                   	push   %eax
   12afa:	68 a0 78 01 00       	push   $0x178a0
   12aff:	e8 14 48 00 00       	call   17318 <log_printf>
   12b04:	83 c4 30             	add    $0x30,%esp
              );

  log_printf("EIP:\t\t0x%x\nEFLAGS:\t\t0x%x\n", frame->eip, frame->eflags);
   12b07:	8b 45 08             	mov    0x8(%ebp),%eax
   12b0a:	8b 50 40             	mov    0x40(%eax),%edx
   12b0d:	8b 45 08             	mov    0x8(%ebp),%eax
   12b10:	8b 40 38             	mov    0x38(%eax),%eax
   12b13:	83 ec 04             	sub    $0x4,%esp
   12b16:	52                   	push   %edx
   12b17:	50                   	push   %eax
   12b18:	68 f9 78 01 00       	push   $0x178f9
   12b1d:	e8 f6 47 00 00       	call   17318 <log_printf>
   12b22:	83 c4 10             	add    $0x10,%esp
}
   12b25:	90                   	nop
   12b26:	8d 65 f4             	lea    -0xc(%ebp),%esp
   12b29:	5b                   	pop    %ebx
   12b2a:	5e                   	pop    %esi
   12b2b:	5f                   	pop    %edi
   12b2c:	5d                   	pop    %ebp
   12b2d:	c3                   	ret    

00012b2e <do_default_handler>:
 *
 * @param message 异常信息
 * @param fram  异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
static void do_default_handler(const exception_frame_t *frame,
                               const char *message) {
   12b2e:	55                   	push   %ebp
   12b2f:	89 e5                	mov    %esp,%ebp
   12b31:	83 ec 08             	sub    $0x8,%esp

  log_printf("---------------------------------------------------\n");
   12b34:	83 ec 0c             	sub    $0xc,%esp
   12b37:	68 14 79 01 00       	push   $0x17914
   12b3c:	e8 d7 47 00 00       	call   17318 <log_printf>
   12b41:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ/Exception happend: %s\n", message);
   12b44:	83 ec 08             	sub    $0x8,%esp
   12b47:	ff 75 0c             	push   0xc(%ebp)
   12b4a:	68 49 79 01 00       	push   $0x17949
   12b4f:	e8 c4 47 00 00       	call   17318 <log_printf>
   12b54:	83 c4 10             	add    $0x10,%esp
  print_exception_fram(frame);
   12b57:	83 ec 0c             	sub    $0xc,%esp
   12b5a:	ff 75 08             	push   0x8(%ebp)
   12b5d:	e8 bd fe ff ff       	call   12a1f <print_exception_fram>
   12b62:	83 c4 10             	add    $0x10,%esp
                              
  
  for (;;) {
    hlt();
   12b65:	e8 1c fe ff ff       	call   12986 <hlt>
   12b6a:	eb f9                	jmp    12b65 <do_default_handler+0x37>

00012b6c <do_handler_unknown>:

/**
 * @brief   对没有针对性处理程序的异常进行处理
 * @param frame 异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
void do_handler_unknown(const exception_frame_t *frame) {
   12b6c:	55                   	push   %ebp
   12b6d:	89 e5                	mov    %esp,%ebp
   12b6f:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "unknown exception");
   12b72:	83 ec 08             	sub    $0x8,%esp
   12b75:	68 64 79 01 00       	push   $0x17964
   12b7a:	ff 75 08             	push   0x8(%ebp)
   12b7d:	e8 ac ff ff ff       	call   12b2e <do_default_handler>
   12b82:	83 c4 10             	add    $0x10,%esp
}
   12b85:	90                   	nop
   12b86:	c9                   	leave  
   12b87:	c3                   	ret    

00012b88 <do_handler_divider>:
/**
 * @brief  除0异常
 *
 * @param frame 异常栈帧
 */
void do_handler_divider(const exception_frame_t *frame) {
   12b88:	55                   	push   %ebp
   12b89:	89 e5                	mov    %esp,%ebp
   12b8b:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "divider exception");
   12b8e:	83 ec 08             	sub    $0x8,%esp
   12b91:	68 76 79 01 00       	push   $0x17976
   12b96:	ff 75 08             	push   0x8(%ebp)
   12b99:	e8 90 ff ff ff       	call   12b2e <do_default_handler>
   12b9e:	83 c4 10             	add    $0x10,%esp
}
   12ba1:	90                   	nop
   12ba2:	c9                   	leave  
   12ba3:	c3                   	ret    

00012ba4 <do_handler_debug>:

void do_handler_debug(const exception_frame_t *frame) {
   12ba4:	55                   	push   %ebp
   12ba5:	89 e5                	mov    %esp,%ebp
   12ba7:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "debug exception");
   12baa:	83 ec 08             	sub    $0x8,%esp
   12bad:	68 88 79 01 00       	push   $0x17988
   12bb2:	ff 75 08             	push   0x8(%ebp)
   12bb5:	e8 74 ff ff ff       	call   12b2e <do_default_handler>
   12bba:	83 c4 10             	add    $0x10,%esp
}
   12bbd:	90                   	nop
   12bbe:	c9                   	leave  
   12bbf:	c3                   	ret    

00012bc0 <do_handler_nmi>:

void do_handler_nmi(const exception_frame_t *frame) {
   12bc0:	55                   	push   %ebp
   12bc1:	89 e5                	mov    %esp,%ebp
   12bc3:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "nmi exception");
   12bc6:	83 ec 08             	sub    $0x8,%esp
   12bc9:	68 98 79 01 00       	push   $0x17998
   12bce:	ff 75 08             	push   0x8(%ebp)
   12bd1:	e8 58 ff ff ff       	call   12b2e <do_default_handler>
   12bd6:	83 c4 10             	add    $0x10,%esp
}
   12bd9:	90                   	nop
   12bda:	c9                   	leave  
   12bdb:	c3                   	ret    

00012bdc <do_handler_breakpoint>:
void do_handler_breakpoint(const exception_frame_t *frame) {
   12bdc:	55                   	push   %ebp
   12bdd:	89 e5                	mov    %esp,%ebp
   12bdf:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "breakpoint exception");
   12be2:	83 ec 08             	sub    $0x8,%esp
   12be5:	68 a6 79 01 00       	push   $0x179a6
   12bea:	ff 75 08             	push   0x8(%ebp)
   12bed:	e8 3c ff ff ff       	call   12b2e <do_default_handler>
   12bf2:	83 c4 10             	add    $0x10,%esp
}
   12bf5:	90                   	nop
   12bf6:	c9                   	leave  
   12bf7:	c3                   	ret    

00012bf8 <do_handler_overflow>:
void do_handler_overflow(const exception_frame_t *frame) {
   12bf8:	55                   	push   %ebp
   12bf9:	89 e5                	mov    %esp,%ebp
   12bfb:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "overflow exception");
   12bfe:	83 ec 08             	sub    $0x8,%esp
   12c01:	68 bb 79 01 00       	push   $0x179bb
   12c06:	ff 75 08             	push   0x8(%ebp)
   12c09:	e8 20 ff ff ff       	call   12b2e <do_default_handler>
   12c0e:	83 c4 10             	add    $0x10,%esp
}
   12c11:	90                   	nop
   12c12:	c9                   	leave  
   12c13:	c3                   	ret    

00012c14 <do_handler_bound_range>:
void do_handler_bound_range(const exception_frame_t *frame) {
   12c14:	55                   	push   %ebp
   12c15:	89 e5                	mov    %esp,%ebp
   12c17:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "bound_range exception");
   12c1a:	83 ec 08             	sub    $0x8,%esp
   12c1d:	68 ce 79 01 00       	push   $0x179ce
   12c22:	ff 75 08             	push   0x8(%ebp)
   12c25:	e8 04 ff ff ff       	call   12b2e <do_default_handler>
   12c2a:	83 c4 10             	add    $0x10,%esp
}
   12c2d:	90                   	nop
   12c2e:	c9                   	leave  
   12c2f:	c3                   	ret    

00012c30 <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(const exception_frame_t *frame) {
   12c30:	55                   	push   %ebp
   12c31:	89 e5                	mov    %esp,%ebp
   12c33:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_opcode exception");
   12c36:	83 ec 08             	sub    $0x8,%esp
   12c39:	68 e4 79 01 00       	push   $0x179e4
   12c3e:	ff 75 08             	push   0x8(%ebp)
   12c41:	e8 e8 fe ff ff       	call   12b2e <do_default_handler>
   12c46:	83 c4 10             	add    $0x10,%esp
}
   12c49:	90                   	nop
   12c4a:	c9                   	leave  
   12c4b:	c3                   	ret    

00012c4c <do_handler_device_unavailable>:
void do_handler_device_unavailable(const exception_frame_t *frame) {
   12c4c:	55                   	push   %ebp
   12c4d:	89 e5                	mov    %esp,%ebp
   12c4f:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "device_unavailable exception");
   12c52:	83 ec 08             	sub    $0x8,%esp
   12c55:	68 fd 79 01 00       	push   $0x179fd
   12c5a:	ff 75 08             	push   0x8(%ebp)
   12c5d:	e8 cc fe ff ff       	call   12b2e <do_default_handler>
   12c62:	83 c4 10             	add    $0x10,%esp
}
   12c65:	90                   	nop
   12c66:	c9                   	leave  
   12c67:	c3                   	ret    

00012c68 <do_handler_double_fault>:
void do_handler_double_fault(const exception_frame_t *frame) {
   12c68:	55                   	push   %ebp
   12c69:	89 e5                	mov    %esp,%ebp
   12c6b:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "double_fault exception");
   12c6e:	83 ec 08             	sub    $0x8,%esp
   12c71:	68 1a 7a 01 00       	push   $0x17a1a
   12c76:	ff 75 08             	push   0x8(%ebp)
   12c79:	e8 b0 fe ff ff       	call   12b2e <do_default_handler>
   12c7e:	83 c4 10             	add    $0x10,%esp
}
   12c81:	90                   	nop
   12c82:	c9                   	leave  
   12c83:	c3                   	ret    

00012c84 <do_handler_invalid_tss>:
void do_handler_invalid_tss(const exception_frame_t *frame) {
   12c84:	55                   	push   %ebp
   12c85:	89 e5                	mov    %esp,%ebp
   12c87:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_tss exception");
   12c8a:	83 ec 08             	sub    $0x8,%esp
   12c8d:	68 31 7a 01 00       	push   $0x17a31
   12c92:	ff 75 08             	push   0x8(%ebp)
   12c95:	e8 94 fe ff ff       	call   12b2e <do_default_handler>
   12c9a:	83 c4 10             	add    $0x10,%esp
}
   12c9d:	90                   	nop
   12c9e:	c9                   	leave  
   12c9f:	c3                   	ret    

00012ca0 <do_handler_segment_not_present>:
void do_handler_segment_not_present(const exception_frame_t *frame) {
   12ca0:	55                   	push   %ebp
   12ca1:	89 e5                	mov    %esp,%ebp
   12ca3:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "segment_not_present exception");
   12ca6:	83 ec 08             	sub    $0x8,%esp
   12ca9:	68 47 7a 01 00       	push   $0x17a47
   12cae:	ff 75 08             	push   0x8(%ebp)
   12cb1:	e8 78 fe ff ff       	call   12b2e <do_default_handler>
   12cb6:	83 c4 10             	add    $0x10,%esp
}
   12cb9:	90                   	nop
   12cba:	c9                   	leave  
   12cbb:	c3                   	ret    

00012cbc <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(const exception_frame_t *frame) {
   12cbc:	55                   	push   %ebp
   12cbd:	89 e5                	mov    %esp,%ebp
   12cbf:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "stack_segment_fault exception");
   12cc2:	83 ec 08             	sub    $0x8,%esp
   12cc5:	68 65 7a 01 00       	push   $0x17a65
   12cca:	ff 75 08             	push   0x8(%ebp)
   12ccd:	e8 5c fe ff ff       	call   12b2e <do_default_handler>
   12cd2:	83 c4 10             	add    $0x10,%esp
}
   12cd5:	90                   	nop
   12cd6:	c9                   	leave  
   12cd7:	c3                   	ret    

00012cd8 <do_handler_general_protection>:
void do_handler_general_protection(const exception_frame_t *frame) {
   12cd8:	55                   	push   %ebp
   12cd9:	89 e5                	mov    %esp,%ebp
   12cdb:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------\n");
   12cde:	83 ec 0c             	sub    $0xc,%esp
   12ce1:	68 84 7a 01 00       	push   $0x17a84
   12ce6:	e8 2d 46 00 00       	call   17318 <log_printf>
   12ceb:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: General Protection.\n");
   12cee:	83 ec 0c             	sub    $0xc,%esp
   12cf1:	68 a8 7a 01 00       	push   $0x17aa8
   12cf6:	e8 1d 46 00 00       	call   17318 <log_printf>
   12cfb:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_EXT) {
   12cfe:	8b 45 08             	mov    0x8(%ebp),%eax
   12d01:	8b 40 34             	mov    0x34(%eax),%eax
   12d04:	83 e0 01             	and    $0x1,%eax
   12d07:	85 c0                	test   %eax,%eax
   12d09:	74 12                	je     12d1d <do_handler_general_protection+0x45>
        log_printf("the exception occurred during delivery of an "
   12d0b:	83 ec 0c             	sub    $0xc,%esp
   12d0e:	68 d4 7a 01 00       	push   $0x17ad4
   12d13:	e8 00 46 00 00       	call   17318 <log_printf>
   12d18:	83 c4 10             	add    $0x10,%esp
   12d1b:	eb 10                	jmp    12d2d <do_handler_general_protection+0x55>
                "event external to the program, such as an interrupt"
                "or an earlier exception.\n");
    } else {
        log_printf("the exception occurred during delivery of a"
   12d1d:	83 ec 0c             	sub    $0xc,%esp
   12d20:	68 50 7b 01 00       	push   $0x17b50
   12d25:	e8 ee 45 00 00       	call   17318 <log_printf>
   12d2a:	83 c4 10             	add    $0x10,%esp
                    "software interrupt (INT n, INT3, or INTO).\n");
    }
    
    if (frame->error_code & ERR_IDT) {
   12d2d:	8b 45 08             	mov    0x8(%ebp),%eax
   12d30:	8b 40 34             	mov    0x34(%eax),%eax
   12d33:	83 e0 02             	and    $0x2,%eax
   12d36:	85 c0                	test   %eax,%eax
   12d38:	74 12                	je     12d4c <do_handler_general_protection+0x74>
        log_printf("the index portion of the error code refers "
   12d3a:	83 ec 0c             	sub    $0xc,%esp
   12d3d:	68 a8 7b 01 00       	push   $0x17ba8
   12d42:	e8 d1 45 00 00       	call   17318 <log_printf>
   12d47:	83 c4 10             	add    $0x10,%esp
   12d4a:	eb 10                	jmp    12d5c <do_handler_general_protection+0x84>
                    "to a gate descriptor in the IDT\n");
    } else {
        log_printf("the index refers to a descriptor in the GDT\n");
   12d4c:	83 ec 0c             	sub    $0xc,%esp
   12d4f:	68 f4 7b 01 00       	push   $0x17bf4
   12d54:	e8 bf 45 00 00       	call   17318 <log_printf>
   12d59:	83 c4 10             	add    $0x10,%esp
    }
    
    log_printf("segment index: %d\n", frame->error_code & 0xFFF8);
   12d5c:	8b 45 08             	mov    0x8(%ebp),%eax
   12d5f:	8b 40 34             	mov    0x34(%eax),%eax
   12d62:	25 f8 ff 00 00       	and    $0xfff8,%eax
   12d67:	83 ec 08             	sub    $0x8,%esp
   12d6a:	50                   	push   %eax
   12d6b:	68 21 7c 01 00       	push   $0x17c21
   12d70:	e8 a3 45 00 00       	call   17318 <log_printf>
   12d75:	83 c4 10             	add    $0x10,%esp
    print_exception_fram(frame);
   12d78:	83 ec 0c             	sub    $0xc,%esp
   12d7b:	ff 75 08             	push   0x8(%ebp)
   12d7e:	e8 9c fc ff ff       	call   12a1f <print_exception_fram>
   12d83:	83 c4 10             	add    $0x10,%esp
}
   12d86:	90                   	nop
   12d87:	c9                   	leave  
   12d88:	c3                   	ret    

00012d89 <do_handler_page_fault>:
/**
 * @brief page_fault异常处理函数
 * 
 * @param frame 
 */
void do_handler_page_fault(const exception_frame_t *frame) {
   12d89:	55                   	push   %ebp
   12d8a:	89 e5                	mov    %esp,%ebp
   12d8c:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------\n");
   12d8f:	83 ec 0c             	sub    $0xc,%esp
   12d92:	68 84 7a 01 00       	push   $0x17a84
   12d97:	e8 7c 45 00 00       	call   17318 <log_printf>
   12d9c:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: Page fault.\n");
   12d9f:	83 ec 0c             	sub    $0xc,%esp
   12da2:	68 34 7c 01 00       	push   $0x17c34
   12da7:	e8 6c 45 00 00       	call   17318 <log_printf>
   12dac:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_PAGE_P) {
   12daf:	8b 45 08             	mov    0x8(%ebp),%eax
   12db2:	8b 40 34             	mov    0x34(%eax),%eax
   12db5:	83 e0 01             	and    $0x1,%eax
   12db8:	85 c0                	test   %eax,%eax
   12dba:	74 18                	je     12dd4 <do_handler_page_fault+0x4b>
        log_printf("page-level protection violation: 0x%x.\n", read_cr2());
   12dbc:	e8 32 fc ff ff       	call   129f3 <read_cr2>
   12dc1:	83 ec 08             	sub    $0x8,%esp
   12dc4:	50                   	push   %eax
   12dc5:	68 58 7c 01 00       	push   $0x17c58
   12dca:	e8 49 45 00 00       	call   17318 <log_printf>
   12dcf:	83 c4 10             	add    $0x10,%esp
   12dd2:	eb 16                	jmp    12dea <do_handler_page_fault+0x61>
    } else {
        log_printf("Page doesn't present 0x%x\n", read_cr2());
   12dd4:	e8 1a fc ff ff       	call   129f3 <read_cr2>
   12dd9:	83 ec 08             	sub    $0x8,%esp
   12ddc:	50                   	push   %eax
   12ddd:	68 80 7c 01 00       	push   $0x17c80
   12de2:	e8 31 45 00 00       	call   17318 <log_printf>
   12de7:	83 c4 10             	add    $0x10,%esp
   }
    
    if (frame->error_code & ERR_PAGE_WR) {
   12dea:	8b 45 08             	mov    0x8(%ebp),%eax
   12ded:	8b 40 34             	mov    0x34(%eax),%eax
   12df0:	83 e0 02             	and    $0x2,%eax
   12df3:	85 c0                	test   %eax,%eax
   12df5:	74 12                	je     12e09 <do_handler_page_fault+0x80>
        log_printf("The access causing the fault was a write.\n");
   12df7:	83 ec 0c             	sub    $0xc,%esp
   12dfa:	68 9c 7c 01 00       	push   $0x17c9c
   12dff:	e8 14 45 00 00       	call   17318 <log_printf>
   12e04:	83 c4 10             	add    $0x10,%esp
   12e07:	eb 10                	jmp    12e19 <do_handler_page_fault+0x90>
    } else {
        log_printf("The access causing the fault was a read.\n");
   12e09:	83 ec 0c             	sub    $0xc,%esp
   12e0c:	68 c8 7c 01 00       	push   $0x17cc8
   12e11:	e8 02 45 00 00       	call   17318 <log_printf>
   12e16:	83 c4 10             	add    $0x10,%esp
    }
    
    if (frame->error_code & ERR_PAGE_US) {
   12e19:	8b 45 08             	mov    0x8(%ebp),%eax
   12e1c:	8b 40 34             	mov    0x34(%eax),%eax
   12e1f:	83 e0 04             	and    $0x4,%eax
   12e22:	85 c0                	test   %eax,%eax
   12e24:	74 12                	je     12e38 <do_handler_page_fault+0xaf>
        log_printf("A user-mode access caused the fault.\n");
   12e26:	83 ec 0c             	sub    $0xc,%esp
   12e29:	68 f4 7c 01 00       	push   $0x17cf4
   12e2e:	e8 e5 44 00 00       	call   17318 <log_printf>
   12e33:	83 c4 10             	add    $0x10,%esp
   12e36:	eb 10                	jmp    12e48 <do_handler_page_fault+0xbf>
    } else {
        log_printf("A supervisor-mode access caused the fault.\n");
   12e38:	83 ec 0c             	sub    $0xc,%esp
   12e3b:	68 1c 7d 01 00       	push   $0x17d1c
   12e40:	e8 d3 44 00 00       	call   17318 <log_printf>
   12e45:	83 c4 10             	add    $0x10,%esp
    }

   print_exception_fram(frame);
   12e48:	83 ec 0c             	sub    $0xc,%esp
   12e4b:	ff 75 08             	push   0x8(%ebp)
   12e4e:	e8 cc fb ff ff       	call   12a1f <print_exception_fram>
   12e53:	83 c4 10             	add    $0x10,%esp
}
   12e56:	90                   	nop
   12e57:	c9                   	leave  
   12e58:	c3                   	ret    

00012e59 <do_handler_fpu_error>:

void do_handler_fpu_error(const exception_frame_t *frame) {
   12e59:	55                   	push   %ebp
   12e5a:	89 e5                	mov    %esp,%ebp
   12e5c:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "fpu_error exception\n");
   12e5f:	83 ec 08             	sub    $0x8,%esp
   12e62:	68 48 7d 01 00       	push   $0x17d48
   12e67:	ff 75 08             	push   0x8(%ebp)
   12e6a:	e8 bf fc ff ff       	call   12b2e <do_default_handler>
   12e6f:	83 c4 10             	add    $0x10,%esp
}
   12e72:	90                   	nop
   12e73:	c9                   	leave  
   12e74:	c3                   	ret    

00012e75 <do_handler_alignment_check>:
void do_handler_alignment_check(const exception_frame_t *frame) {
   12e75:	55                   	push   %ebp
   12e76:	89 e5                	mov    %esp,%ebp
   12e78:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "alignment_check exception\n");
   12e7b:	83 ec 08             	sub    $0x8,%esp
   12e7e:	68 5d 7d 01 00       	push   $0x17d5d
   12e83:	ff 75 08             	push   0x8(%ebp)
   12e86:	e8 a3 fc ff ff       	call   12b2e <do_default_handler>
   12e8b:	83 c4 10             	add    $0x10,%esp
}
   12e8e:	90                   	nop
   12e8f:	c9                   	leave  
   12e90:	c3                   	ret    

00012e91 <do_handler_machine_check>:
void do_handler_machine_check(const exception_frame_t *frame) {
   12e91:	55                   	push   %ebp
   12e92:	89 e5                	mov    %esp,%ebp
   12e94:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "machine_check exception\n");
   12e97:	83 ec 08             	sub    $0x8,%esp
   12e9a:	68 78 7d 01 00       	push   $0x17d78
   12e9f:	ff 75 08             	push   0x8(%ebp)
   12ea2:	e8 87 fc ff ff       	call   12b2e <do_default_handler>
   12ea7:	83 c4 10             	add    $0x10,%esp
}
   12eaa:	90                   	nop
   12eab:	c9                   	leave  
   12eac:	c3                   	ret    

00012ead <do_handler_smd_exception>:
void do_handler_smd_exception(const exception_frame_t *frame) {
   12ead:	55                   	push   %ebp
   12eae:	89 e5                	mov    %esp,%ebp
   12eb0:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "smd_exception exception\n");
   12eb3:	83 ec 08             	sub    $0x8,%esp
   12eb6:	68 91 7d 01 00       	push   $0x17d91
   12ebb:	ff 75 08             	push   0x8(%ebp)
   12ebe:	e8 6b fc ff ff       	call   12b2e <do_default_handler>
   12ec3:	83 c4 10             	add    $0x10,%esp
}
   12ec6:	90                   	nop
   12ec7:	c9                   	leave  
   12ec8:	c3                   	ret    

00012ec9 <do_handler_virtual_exception>:
void do_handler_virtual_exception(const exception_frame_t *frame) {
   12ec9:	55                   	push   %ebp
   12eca:	89 e5                	mov    %esp,%ebp
   12ecc:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "virtual_exception exception\n");
   12ecf:	83 ec 08             	sub    $0x8,%esp
   12ed2:	68 aa 7d 01 00       	push   $0x17daa
   12ed7:	ff 75 08             	push   0x8(%ebp)
   12eda:	e8 4f fc ff ff       	call   12b2e <do_default_handler>
   12edf:	83 c4 10             	add    $0x10,%esp
}
   12ee2:	90                   	nop
   12ee3:	c9                   	leave  
   12ee4:	c3                   	ret    

00012ee5 <do_handler_control_exception>:
void do_handler_control_exception(const exception_frame_t *frame) {
   12ee5:	55                   	push   %ebp
   12ee6:	89 e5                	mov    %esp,%ebp
   12ee8:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "control_exception exception\n");
   12eeb:	83 ec 08             	sub    $0x8,%esp
   12eee:	68 c7 7d 01 00       	push   $0x17dc7
   12ef3:	ff 75 08             	push   0x8(%ebp)
   12ef6:	e8 33 fc ff ff       	call   12b2e <do_default_handler>
   12efb:	83 c4 10             	add    $0x10,%esp
}
   12efe:	90                   	nop
   12eff:	c9                   	leave  
   12f00:	c3                   	ret    

00012f01 <idt_install>:
 *
 * @param idt_num 异常的下标
 * @param handler 异常处理程序的偏移地址
 * @return int 成功返回 0 失败放回 -1
 */
int idt_install(const int idt_num, const idt_handler_t handler) {
   12f01:	55                   	push   %ebp
   12f02:	89 e5                	mov    %esp,%ebp
   12f04:	83 ec 08             	sub    $0x8,%esp
  // 1.判断IDT下标是否越界
  if (idt_num >= IDT_TABLE_SIZE || idt_num < 0) return -1;
   12f07:	81 7d 08 ff 00 00 00 	cmpl   $0xff,0x8(%ebp)
   12f0e:	7f 06                	jg     12f16 <idt_install+0x15>
   12f10:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12f14:	79 07                	jns    12f1d <idt_install+0x1c>
   12f16:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12f1b:	eb 25                	jmp    12f42 <idt_install+0x41>
  // 2.在IDT表中设置下标为 idt_num 的中断门,中断门描述符的 DPL <= CPL, 
  //因为中断门是cpu自己从中断描述符表中索引，也可以用 int $中断号主动触发，
  //int $ 主动触发需要中断门描述符的DPL >= CPL，即只能在内核态触发
  //所以没有请求选择子即RPL不用检查，因为没有
  //若目标代码段的特权级更高则发生特权级转换
  gate_desc_set(idt_table + idt_num, KERNEL_SELECTOR_CS, (uint32_t)handler,
   12f1d:	8b 45 0c             	mov    0xc(%ebp),%eax
   12f20:	8b 55 08             	mov    0x8(%ebp),%edx
   12f23:	c1 e2 03             	shl    $0x3,%edx
   12f26:	81 c2 00 bc 04 00    	add    $0x4bc00,%edx
   12f2c:	68 00 8e 00 00       	push   $0x8e00
   12f31:	50                   	push   %eax
   12f32:	6a 08                	push   $0x8
   12f34:	52                   	push   %edx
   12f35:	e8 c1 f7 ff ff       	call   126fb <gate_desc_set>
   12f3a:	83 c4 10             	add    $0x10,%esp
                GATE_TYPE_INT | GATE_ATTR_P | GATE_ATTR_DPL_0);

  return 0;
   12f3d:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12f42:	c9                   	leave  
   12f43:	c3                   	ret    

00012f44 <init_pic>:

/**
 * @brief  初始化主从8259芯片
 * 
 */
static void init_pic(void) {
   12f44:	55                   	push   %ebp
   12f45:	89 e5                	mov    %esp,%ebp
  //1.对主片(8259A芯片)进行初始化, 写入时必须按照ICW1~4的顺序写入
  outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);  //ICW1:边缘触发，级联模式，需要ICW4
   12f47:	6a 11                	push   $0x11
   12f49:	6a 20                	push   $0x20
   12f4b:	e8 5a fa ff ff       	call   129aa <outb>
   12f50:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW2, PIC_ICW2_IDT_START);                //ICW2:起始中断向量号为0x20
   12f53:	6a 20                	push   $0x20
   12f55:	6a 21                	push   $0x21
   12f57:	e8 4e fa ff ff       	call   129aa <outb>
   12f5c:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW3, PIC_ICW3_MASTER_CASCADE);           //ICW3:主片用IR2级联从片
   12f5f:	6a 04                	push   $0x4
   12f61:	6a 21                	push   $0x21
   12f63:	e8 42 fa ff ff       	call   129aa <outb>
   12f68:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW4, PIC_ICW4_8086);                     //ICW4:8086模式，正常EOI
   12f6b:	6a 01                	push   $0x1
   12f6d:	6a 21                	push   $0x21
   12f6f:	e8 36 fa ff ff       	call   129aa <outb>
   12f74:	83 c4 08             	add    $0x8,%esp

  //2.对从片(8259A芯片)进行初始化
  outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);
   12f77:	6a 11                	push   $0x11
   12f79:	68 a0 00 00 00       	push   $0xa0
   12f7e:	e8 27 fa ff ff       	call   129aa <outb>
   12f83:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW2, PIC_ICW2_IDT_START + 8); //第一块芯片占用了8个中断，所以第二块芯片从第8个中断的下一个开始
   12f86:	6a 28                	push   $0x28
   12f88:	68 a1 00 00 00       	push   $0xa1
   12f8d:	e8 18 fa ff ff       	call   129aa <outb>
   12f92:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW3, PIC_ICW3_SLAVE_CASCADE);
   12f95:	6a 02                	push   $0x2
   12f97:	68 a1 00 00 00       	push   $0xa1
   12f9c:	e8 09 fa ff ff       	call   129aa <outb>
   12fa1:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW4, PIC_ICW4_8086);
   12fa4:	6a 01                	push   $0x1
   12fa6:	68 a1 00 00 00       	push   $0xa1
   12fab:	e8 fa f9 ff ff       	call   129aa <outb>
   12fb0:	83 c4 08             	add    $0x8,%esp


  //3.初始化完两块8259芯片后，还需要为每一个中断设置处理程序
  //才可以去接收中断，所以现在要屏蔽中断，IMR位置1则屏蔽该中断请求，0则不屏蔽
  outb(PIC0_IMR, 0xfb); //屏蔽主片除 irq2(第3位) 以外的位传来的中断，(1111 1011)
   12fb3:	68 fb 00 00 00       	push   $0xfb
   12fb8:	6a 21                	push   $0x21
   12fba:	e8 eb f9 ff ff       	call   129aa <outb>
   12fbf:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_IMR, 0xff); //屏蔽从片的所有中断
   12fc2:	68 ff 00 00 00       	push   $0xff
   12fc7:	68 a1 00 00 00       	push   $0xa1
   12fcc:	e8 d9 f9 ff ff       	call   129aa <outb>
   12fd1:	83 c4 08             	add    $0x8,%esp


}
   12fd4:	90                   	nop
   12fd5:	c9                   	leave  
   12fd6:	c3                   	ret    

00012fd7 <idt_init>:

/**
 * @brief  初始化中断向量表
 *
 */
void idt_init(void) {
   12fd7:	55                   	push   %ebp
   12fd8:	89 e5                	mov    %esp,%ebp
   12fda:	83 ec 18             	sub    $0x18,%esp
  // 1.初始化IDT中的各个中断门(未知异常类型)
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   12fdd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12fe4:	eb 17                	jmp    12ffd <idt_init+0x26>
    idt_install(i, (idt_handler_t)exception_handler_unknown);
   12fe6:	83 ec 08             	sub    $0x8,%esp
   12fe9:	68 2a 00 01 00       	push   $0x1002a
   12fee:	ff 75 f4             	push   -0xc(%ebp)
   12ff1:	e8 0b ff ff ff       	call   12f01 <idt_install>
   12ff6:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   12ff9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12ffd:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   13004:	7e e0                	jle    12fe6 <idt_init+0xf>
  }

  // 2.绑定异常中断向量表中对应下标的中断门的处理函数
  idt_install(IDT0_DE, (idt_handler_t)exception_handler_divider);
   13006:	83 ec 08             	sub    $0x8,%esp
   13009:	68 47 00 01 00       	push   $0x10047
   1300e:	6a 00                	push   $0x0
   13010:	e8 ec fe ff ff       	call   12f01 <idt_install>
   13015:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT1_DB, (idt_handler_t)exception_handler_debug);
   13018:	83 ec 08             	sub    $0x8,%esp
   1301b:	68 64 00 01 00       	push   $0x10064
   13020:	6a 01                	push   $0x1
   13022:	e8 da fe ff ff       	call   12f01 <idt_install>
   13027:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT2_NMI, (idt_handler_t)exception_handler_nmi);
   1302a:	83 ec 08             	sub    $0x8,%esp
   1302d:	68 81 00 01 00       	push   $0x10081
   13032:	6a 02                	push   $0x2
   13034:	e8 c8 fe ff ff       	call   12f01 <idt_install>
   13039:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT3_BP, (idt_handler_t)exception_handler_breakpoint);
   1303c:	83 ec 08             	sub    $0x8,%esp
   1303f:	68 9e 00 01 00       	push   $0x1009e
   13044:	6a 03                	push   $0x3
   13046:	e8 b6 fe ff ff       	call   12f01 <idt_install>
   1304b:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT4_OF, (idt_handler_t)exception_handler_overflow);
   1304e:	83 ec 08             	sub    $0x8,%esp
   13051:	68 bb 00 01 00       	push   $0x100bb
   13056:	6a 04                	push   $0x4
   13058:	e8 a4 fe ff ff       	call   12f01 <idt_install>
   1305d:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT5_BR, (idt_handler_t)exception_handler_bound_range);
   13060:	83 ec 08             	sub    $0x8,%esp
   13063:	68 d8 00 01 00       	push   $0x100d8
   13068:	6a 05                	push   $0x5
   1306a:	e8 92 fe ff ff       	call   12f01 <idt_install>
   1306f:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT6_UD, (idt_handler_t)exception_handler_invalid_opcode);
   13072:	83 ec 08             	sub    $0x8,%esp
   13075:	68 f5 00 01 00       	push   $0x100f5
   1307a:	6a 06                	push   $0x6
   1307c:	e8 80 fe ff ff       	call   12f01 <idt_install>
   13081:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT7_NM, (idt_handler_t)exception_handler_device_unavailable);
   13084:	83 ec 08             	sub    $0x8,%esp
   13087:	68 12 01 01 00       	push   $0x10112
   1308c:	6a 07                	push   $0x7
   1308e:	e8 6e fe ff ff       	call   12f01 <idt_install>
   13093:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT8_DF, (idt_handler_t)exception_handler_double_fault);
   13096:	83 ec 08             	sub    $0x8,%esp
   13099:	68 2f 01 01 00       	push   $0x1012f
   1309e:	6a 08                	push   $0x8
   130a0:	e8 5c fe ff ff       	call   12f01 <idt_install>
   130a5:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT10_TS, (idt_handler_t)exception_handler_invalid_tss);
   130a8:	83 ec 08             	sub    $0x8,%esp
   130ab:	68 4a 01 01 00       	push   $0x1014a
   130b0:	6a 0a                	push   $0xa
   130b2:	e8 4a fe ff ff       	call   12f01 <idt_install>
   130b7:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT11_NP, (idt_handler_t)exception_handler_segment_not_present);
   130ba:	83 ec 08             	sub    $0x8,%esp
   130bd:	68 65 01 01 00       	push   $0x10165
   130c2:	6a 0b                	push   $0xb
   130c4:	e8 38 fe ff ff       	call   12f01 <idt_install>
   130c9:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT12_SS, (idt_handler_t)exception_handler_stack_segment_fault);
   130cc:	83 ec 08             	sub    $0x8,%esp
   130cf:	68 80 01 01 00       	push   $0x10180
   130d4:	6a 0c                	push   $0xc
   130d6:	e8 26 fe ff ff       	call   12f01 <idt_install>
   130db:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT13_GP, (idt_handler_t)exception_handler_general_protection);
   130de:	83 ec 08             	sub    $0x8,%esp
   130e1:	68 9b 01 01 00       	push   $0x1019b
   130e6:	6a 0d                	push   $0xd
   130e8:	e8 14 fe ff ff       	call   12f01 <idt_install>
   130ed:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT14_PF, (idt_handler_t)exception_handler_page_fault);
   130f0:	83 ec 08             	sub    $0x8,%esp
   130f3:	68 b6 01 01 00       	push   $0x101b6
   130f8:	6a 0e                	push   $0xe
   130fa:	e8 02 fe ff ff       	call   12f01 <idt_install>
   130ff:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT16_MF, (idt_handler_t)exception_handler_fpu_error);
   13102:	83 ec 08             	sub    $0x8,%esp
   13105:	68 d1 01 01 00       	push   $0x101d1
   1310a:	6a 10                	push   $0x10
   1310c:	e8 f0 fd ff ff       	call   12f01 <idt_install>
   13111:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT17_AC, (idt_handler_t)exception_handler_alignment_check);
   13114:	83 ec 08             	sub    $0x8,%esp
   13117:	68 ee 01 01 00       	push   $0x101ee
   1311c:	6a 11                	push   $0x11
   1311e:	e8 de fd ff ff       	call   12f01 <idt_install>
   13123:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT18_MC, (idt_handler_t)exception_handler_machine_check);
   13126:	83 ec 08             	sub    $0x8,%esp
   13129:	68 09 02 01 00       	push   $0x10209
   1312e:	6a 12                	push   $0x12
   13130:	e8 cc fd ff ff       	call   12f01 <idt_install>
   13135:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT19_XM, (idt_handler_t)exception_handler_smd_exception);
   13138:	83 ec 08             	sub    $0x8,%esp
   1313b:	68 26 02 01 00       	push   $0x10226
   13140:	6a 13                	push   $0x13
   13142:	e8 ba fd ff ff       	call   12f01 <idt_install>
   13147:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT20_VE, (idt_handler_t)exception_handler_virtual_exception);
   1314a:	83 ec 08             	sub    $0x8,%esp
   1314d:	68 43 02 01 00       	push   $0x10243
   13152:	6a 14                	push   $0x14
   13154:	e8 a8 fd ff ff       	call   12f01 <idt_install>
   13159:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT21_CP, (idt_handler_t)exception_handler_control_exception);
   1315c:	83 ec 08             	sub    $0x8,%esp
   1315f:	68 60 02 01 00       	push   $0x10260
   13164:	6a 15                	push   $0x15
   13166:	e8 96 fd ff ff       	call   12f01 <idt_install>
   1316b:	83 c4 10             	add    $0x10,%esp

  //3.加载IDT
  lidt((uint32_t)idt_table, sizeof(idt_table));
   1316e:	b8 00 bc 04 00       	mov    $0x4bc00,%eax
   13173:	83 ec 08             	sub    $0x8,%esp
   13176:	68 00 08 00 00       	push   $0x800
   1317b:	50                   	push   %eax
   1317c:	e8 4a f8 ff ff       	call   129cb <lidt>
   13181:	83 c4 10             	add    $0x10,%esp

  //4.初始化8259设备中断芯片
  init_pic();
   13184:	e8 bb fd ff ff       	call   12f44 <init_pic>
}
   13189:	90                   	nop
   1318a:	c9                   	leave  
   1318b:	c3                   	ret    

0001318c <idt_enable>:
/**
 * @brief  开启外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号,即IDT中的下标
 */
void idt_enable(uint8_t irq_num) {
   1318c:	55                   	push   %ebp
   1318d:	89 e5                	mov    %esp,%ebp
   1318f:	53                   	push   %ebx
   13190:	83 ec 14             	sub    $0x14,%esp
   13193:	8b 45 08             	mov    0x8(%ebp),%eax
   13196:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   13199:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   1319d:	76 7f                	jbe    1321e <idt_enable+0x92>
   1319f:	80 7d e8 2e          	cmpb   $0x2e,-0x18(%ebp)
   131a3:	77 79                	ja     1321e <idt_enable+0x92>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   131a5:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置0，即不屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   131a9:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   131ad:	77 33                	ja     131e2 <idt_enable+0x56>
    uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   131af:	6a 21                	push   $0x21
   131b1:	e8 d7 f7 ff ff       	call   1298d <inb>
   131b6:	83 c4 04             	add    $0x4,%esp
   131b9:	89 c3                	mov    %eax,%ebx
   131bb:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   131bf:	ba 01 00 00 00       	mov    $0x1,%edx
   131c4:	89 c1                	mov    %eax,%ecx
   131c6:	d3 e2                	shl    %cl,%edx
   131c8:	89 d0                	mov    %edx,%eax
   131ca:	f7 d0                	not    %eax
   131cc:	21 d8                	and    %ebx,%eax
   131ce:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   131d1:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   131d5:	50                   	push   %eax
   131d6:	6a 21                	push   $0x21
   131d8:	e8 cd f7 ff ff       	call   129aa <outb>
   131dd:	83 c4 08             	add    $0x8,%esp
   131e0:	eb 3d                	jmp    1321f <idt_enable+0x93>
  } else {
    uint8_t mask = inb(PIC1_IMR) & ~(1 << (irq_num - 8));
   131e2:	68 a1 00 00 00       	push   $0xa1
   131e7:	e8 a1 f7 ff ff       	call   1298d <inb>
   131ec:	83 c4 04             	add    $0x4,%esp
   131ef:	89 c3                	mov    %eax,%ebx
   131f1:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   131f5:	83 e8 08             	sub    $0x8,%eax
   131f8:	ba 01 00 00 00       	mov    $0x1,%edx
   131fd:	89 c1                	mov    %eax,%ecx
   131ff:	d3 e2                	shl    %cl,%edx
   13201:	89 d0                	mov    %edx,%eax
   13203:	f7 d0                	not    %eax
   13205:	21 d8                	and    %ebx,%eax
   13207:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   1320a:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   1320e:	50                   	push   %eax
   1320f:	68 a1 00 00 00       	push   $0xa1
   13214:	e8 91 f7 ff ff       	call   129aa <outb>
   13219:	83 c4 08             	add    $0x8,%esp
   1321c:	eb 01                	jmp    1321f <idt_enable+0x93>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   1321e:	90                   	nop
  }
  
}
   1321f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   13222:	c9                   	leave  
   13223:	c3                   	ret    

00013224 <idt_disable>:
/**
 * @brief  关闭外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号，即IDT中的下标
 */
void idt_disable(uint8_t irq_num) {
   13224:	55                   	push   %ebp
   13225:	89 e5                	mov    %esp,%ebp
   13227:	53                   	push   %ebx
   13228:	83 ec 14             	sub    $0x14,%esp
   1322b:	8b 45 08             	mov    0x8(%ebp),%eax
   1322e:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   13231:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   13235:	76 7b                	jbe    132b2 <idt_disable+0x8e>
   13237:	80 7d e8 2f          	cmpb   $0x2f,-0x18(%ebp)
   1323b:	77 75                	ja     132b2 <idt_disable+0x8e>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   1323d:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置1，即屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   13241:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   13245:	77 31                	ja     13278 <idt_disable+0x54>
    uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   13247:	6a 21                	push   $0x21
   13249:	e8 3f f7 ff ff       	call   1298d <inb>
   1324e:	83 c4 04             	add    $0x4,%esp
   13251:	89 c3                	mov    %eax,%ebx
   13253:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   13257:	ba 01 00 00 00       	mov    $0x1,%edx
   1325c:	89 c1                	mov    %eax,%ecx
   1325e:	d3 e2                	shl    %cl,%edx
   13260:	89 d0                	mov    %edx,%eax
   13262:	09 d8                	or     %ebx,%eax
   13264:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   13267:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   1326b:	50                   	push   %eax
   1326c:	6a 21                	push   $0x21
   1326e:	e8 37 f7 ff ff       	call   129aa <outb>
   13273:	83 c4 08             	add    $0x8,%esp
   13276:	eb 3b                	jmp    132b3 <idt_disable+0x8f>
  } else {
    uint8_t mask = inb(PIC1_IMR) | (1 << (irq_num - 8));
   13278:	68 a1 00 00 00       	push   $0xa1
   1327d:	e8 0b f7 ff ff       	call   1298d <inb>
   13282:	83 c4 04             	add    $0x4,%esp
   13285:	89 c3                	mov    %eax,%ebx
   13287:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   1328b:	83 e8 08             	sub    $0x8,%eax
   1328e:	ba 01 00 00 00       	mov    $0x1,%edx
   13293:	89 c1                	mov    %eax,%ecx
   13295:	d3 e2                	shl    %cl,%edx
   13297:	89 d0                	mov    %edx,%eax
   13299:	09 d8                	or     %ebx,%eax
   1329b:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   1329e:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   132a2:	50                   	push   %eax
   132a3:	68 a1 00 00 00       	push   $0xa1
   132a8:	e8 fd f6 ff ff       	call   129aa <outb>
   132ad:	83 c4 08             	add    $0x8,%esp
   132b0:	eb 01                	jmp    132b3 <idt_disable+0x8f>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   132b2:	90                   	nop
  }
  
}
   132b3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   132b6:	c9                   	leave  
   132b7:	c3                   	ret    

000132b8 <idt_disable_global>:

/**
 * @brief  关闭全局中断
 * 
 */
void idt_disable_global(void) {
   132b8:	55                   	push   %ebp
   132b9:	89 e5                	mov    %esp,%ebp
  cli();
   132bb:	e8 b8 f6 ff ff       	call   12978 <cli>
}
   132c0:	90                   	nop
   132c1:	5d                   	pop    %ebp
   132c2:	c3                   	ret    

000132c3 <idt_enable_global>:

/**
 * @brief  开启全局中断
 * 
 */
void idt_enable_global(void) {
   132c3:	55                   	push   %ebp
   132c4:	89 e5                	mov    %esp,%ebp
  sti();
   132c6:	e8 b4 f6 ff ff       	call   1297f <sti>
}
   132cb:	90                   	nop
   132cc:	5d                   	pop    %ebp
   132cd:	c3                   	ret    

000132ce <pic_send_eoi>:
 * @brief  将OCW2寄存器的7~5位置为 001，用普通的EOI结束方式
 *         向8259A发送EOI命令，8259A会将ISR中优先级最高的位置0
 *
 * @param irq_num 中断向量号，即IDT下标
 */
void pic_send_eoi(int irq_num) {
   132ce:	55                   	push   %ebp
   132cf:	89 e5                	mov    %esp,%ebp
  //1.获取该中断对应的IRQ标号
  irq_num -= PIC_ICW2_IDT_START;
   132d1:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
  //2.判断标号是否越界,若不越界则交给对应芯片处理
  if (irq_num < 0 || irq_num > 15) return;
   132d5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   132d9:	78 29                	js     13304 <pic_send_eoi+0x36>
   132db:	83 7d 08 0f          	cmpl   $0xf,0x8(%ebp)
   132df:	7f 23                	jg     13304 <pic_send_eoi+0x36>

  //3.若中断来自主片则只需向主片发送EOI
  outb(PIC0_OCW2, PIC_OCW2_EOI);
   132e1:	6a 20                	push   $0x20
   132e3:	6a 20                	push   $0x20
   132e5:	e8 c0 f6 ff ff       	call   129aa <outb>
   132ea:	83 c4 08             	add    $0x8,%esp

  //4.若中断来自从片则还需向从片发送EOI
  if (irq_num >= 8) { 
   132ed:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   132f1:	7e 12                	jle    13305 <pic_send_eoi+0x37>
    outb(PIC1_OCW2, PIC_OCW2_EOI);
   132f3:	6a 20                	push   $0x20
   132f5:	68 a0 00 00 00       	push   $0xa0
   132fa:	e8 ab f6 ff ff       	call   129aa <outb>
   132ff:	83 c4 08             	add    $0x8,%esp
   13302:	eb 01                	jmp    13305 <pic_send_eoi+0x37>
  if (irq_num < 0 || irq_num > 15) return;
   13304:	90                   	nop
  }

}
   13305:	c9                   	leave  
   13306:	c3                   	ret    

00013307 <idt_enter_protection>:

/**
 * @brief  
 * 
 */
idt_state_t idt_enter_protection(void) {
   13307:	55                   	push   %ebp
   13308:	89 e5                	mov    %esp,%ebp
   1330a:	83 ec 10             	sub    $0x10,%esp
  idt_state_t state = read_eflags();
   1330d:	e8 f2 f6 ff ff       	call   12a04 <read_eflags>
   13312:	89 45 fc             	mov    %eax,-0x4(%ebp)
  idt_disable_global();
   13315:	e8 9e ff ff ff       	call   132b8 <idt_disable_global>
  return state;;
   1331a:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1331d:	c9                   	leave  
   1331e:	c3                   	ret    

0001331f <idt_leave_protection>:
/**
 * @brief  
 * 
 * @return idt_state_t 
 */
void idt_leave_protection(idt_state_t state){
   1331f:	55                   	push   %ebp
   13320:	89 e5                	mov    %esp,%ebp
  write_eflags(state);
   13322:	ff 75 08             	push   0x8(%ebp)
   13325:	e8 ea f6 ff ff       	call   12a14 <write_eflags>
   1332a:	83 c4 04             	add    $0x4,%esp
}
   1332d:	90                   	nop
   1332e:	c9                   	leave  
   1332f:	c3                   	ret    

00013330 <sys_print_msg>:
 * @brief 临时的格式化输出系统调用
 * 
 * @param fmt 
 * @param arg 
 */
void sys_print_msg(const char *fmt, int arg) {
   13330:	55                   	push   %ebp
   13331:	89 e5                	mov    %esp,%ebp
   13333:	83 ec 08             	sub    $0x8,%esp
    log_printf(fmt, arg);
   13336:	83 ec 08             	sub    $0x8,%esp
   13339:	ff 75 0c             	push   0xc(%ebp)
   1333c:	ff 75 08             	push   0x8(%ebp)
   1333f:	e8 d4 3f 00 00       	call   17318 <log_printf>
   13344:	83 c4 10             	add    $0x10,%esp
}
   13347:	90                   	nop
   13348:	c9                   	leave  
   13349:	c3                   	ret    

0001334a <do_handler_syscall>:
/**
 * @brief 门调用处理函数，通过定义的系统调用id，将该调用分发到正确的系统调用上
 * 
 * @param frame 
 */
void do_handler_syscall(syscall_frame_t* frame) {
   1334a:	55                   	push   %ebp
   1334b:	89 e5                	mov    %esp,%ebp
   1334d:	53                   	push   %ebx
   1334e:	83 ec 14             	sub    $0x14,%esp
    if (frame->function_id < sizeof(sys_table) / sizeof(sys_table[0])) {    //当前系统调用存在
   13351:	8b 45 08             	mov    0x8(%ebp),%eax
   13354:	8b 40 3c             	mov    0x3c(%eax),%eax
   13357:	83 f8 3a             	cmp    $0x3a,%eax
   1335a:	77 48                	ja     133a4 <do_handler_syscall+0x5a>
        sys_handler_t handler = sys_table[frame->function_id];
   1335c:	8b 45 08             	mov    0x8(%ebp),%eax
   1335f:	8b 40 3c             	mov    0x3c(%eax),%eax
   13362:	8b 04 85 00 7e 01 00 	mov    0x17e00(,%eax,4),%eax
   13369:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (handler) {
   1336c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   13370:	74 32                	je     133a4 <do_handler_syscall+0x5a>
            //直接将4个参数全部传入即可，
            //因为是按从右到左的顺序将参数压栈，所以原始的参数只要是从arg0开始赋值的即可，
            //多余的参数在高地址处，不影响handler对应的真正的系统调用
            int ret = handler(frame->arg0, frame->arg1, frame->arg2, frame->arg3);
   13372:	8b 45 08             	mov    0x8(%ebp),%eax
   13375:	8b 58 4c             	mov    0x4c(%eax),%ebx
   13378:	8b 45 08             	mov    0x8(%ebp),%eax
   1337b:	8b 48 48             	mov    0x48(%eax),%ecx
   1337e:	8b 45 08             	mov    0x8(%ebp),%eax
   13381:	8b 50 44             	mov    0x44(%eax),%edx
   13384:	8b 45 08             	mov    0x8(%ebp),%eax
   13387:	8b 40 40             	mov    0x40(%eax),%eax
   1338a:	53                   	push   %ebx
   1338b:	51                   	push   %ecx
   1338c:	52                   	push   %edx
   1338d:	50                   	push   %eax
   1338e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13391:	ff d0                	call   *%eax
   13393:	83 c4 10             	add    $0x10,%esp
   13396:	89 45 f0             	mov    %eax,-0x10(%ebp)
            //正常函数返回后会将返回值先存放到eax寄存器中，再eax中的值放入对应接收返回值的内存中
            //此处用eax先接收ret，在调用门返回后再从eax中取处该值
            frame->eax = ret;
   13399:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1339c:	8b 45 08             	mov    0x8(%ebp),%eax
   1339f:	89 50 30             	mov    %edx,0x30(%eax)
            return;
   133a2:	eb 30                	jmp    133d4 <do_handler_syscall+0x8a>
        }
    }
    
    //打印系统调用失败的异常日志
    task_t *task = task_current();
   133a4:	e8 eb e5 ff ff       	call   11994 <task_current>
   133a9:	89 45 ec             	mov    %eax,-0x14(%ebp)
    log_printf("task: %s, Unknown syscall_id: %d\n", task->name, frame->function_id);
   133ac:	8b 45 08             	mov    0x8(%ebp),%eax
   133af:	8b 40 3c             	mov    0x3c(%eax),%eax
   133b2:	8b 55 ec             	mov    -0x14(%ebp),%edx
   133b5:	83 c2 24             	add    $0x24,%edx
   133b8:	83 ec 04             	sub    $0x4,%esp
   133bb:	50                   	push   %eax
   133bc:	52                   	push   %edx
   133bd:	68 ec 7e 01 00       	push   $0x17eec
   133c2:	e8 51 3f 00 00       	call   17318 <log_printf>
   133c7:	83 c4 10             	add    $0x10,%esp
    frame->eax = -1;
   133ca:	8b 45 08             	mov    0x8(%ebp),%eax
   133cd:	c7 40 30 ff ff ff ff 	movl   $0xffffffff,0x30(%eax)

   133d4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   133d7:	c9                   	leave  
   133d8:	c3                   	ret    

000133d9 <inb>:
static inline uint8_t inb(uint16_t port) {
   133d9:	55                   	push   %ebp
   133da:	89 e5                	mov    %esp,%ebp
   133dc:	83 ec 14             	sub    $0x14,%esp
   133df:	8b 45 08             	mov    0x8(%ebp),%eax
   133e2:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   133e6:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   133ea:	89 c2                	mov    %eax,%edx
   133ec:	ec                   	in     (%dx),%al
   133ed:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   133f0:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   133f4:	c9                   	leave  
   133f5:	c3                   	ret    

000133f6 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   133f6:	55                   	push   %ebp
   133f7:	89 e5                	mov    %esp,%ebp
   133f9:	83 ec 08             	sub    $0x8,%esp
   133fc:	8b 45 08             	mov    0x8(%ebp),%eax
   133ff:	8b 55 0c             	mov    0xc(%ebp),%edx
   13402:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   13406:	89 d0                	mov    %edx,%eax
   13408:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   1340b:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1340f:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   13413:	ee                   	out    %al,(%dx)
}
   13414:	90                   	nop
   13415:	c9                   	leave  
   13416:	c3                   	ret    

00013417 <read_cursor_pos>:
/**
 * @brief 获取光标位置
 *
 * @return int
 */
static inline int read_cursor_pos(void) {
   13417:	55                   	push   %ebp
   13418:	89 e5                	mov    %esp,%ebp
   1341a:	83 ec 18             	sub    $0x18,%esp
  //TODO:加锁
  idt_state_t state = idt_enter_protection();
   1341d:	e8 e5 fe ff ff       	call   13307 <idt_enter_protection>
   13422:	89 45 f4             	mov    %eax,-0xc(%ebp)

  int pos;
  // 光标位置由两个字节组成
  outb(0x3d4, 0xf);  // 访问低8位
   13425:	83 ec 08             	sub    $0x8,%esp
   13428:	6a 0f                	push   $0xf
   1342a:	68 d4 03 00 00       	push   $0x3d4
   1342f:	e8 c2 ff ff ff       	call   133f6 <outb>
   13434:	83 c4 10             	add    $0x10,%esp
  pos = inb(0x3d5);
   13437:	83 ec 0c             	sub    $0xc,%esp
   1343a:	68 d5 03 00 00       	push   $0x3d5
   1343f:	e8 95 ff ff ff       	call   133d9 <inb>
   13444:	83 c4 10             	add    $0x10,%esp
   13447:	0f b6 c0             	movzbl %al,%eax
   1344a:	89 45 f0             	mov    %eax,-0x10(%ebp)

  outb(0x3d4, 0xe);  // 访问高8位
   1344d:	83 ec 08             	sub    $0x8,%esp
   13450:	6a 0e                	push   $0xe
   13452:	68 d4 03 00 00       	push   $0x3d4
   13457:	e8 9a ff ff ff       	call   133f6 <outb>
   1345c:	83 c4 10             	add    $0x10,%esp
  pos |= inb(0x3d5) << 8;
   1345f:	83 ec 0c             	sub    $0xc,%esp
   13462:	68 d5 03 00 00       	push   $0x3d5
   13467:	e8 6d ff ff ff       	call   133d9 <inb>
   1346c:	83 c4 10             	add    $0x10,%esp
   1346f:	0f b6 c0             	movzbl %al,%eax
   13472:	c1 e0 08             	shl    $0x8,%eax
   13475:	09 45 f0             	or     %eax,-0x10(%ebp)

  //TODO:解锁
  idt_leave_protection(state);
   13478:	83 ec 0c             	sub    $0xc,%esp
   1347b:	ff 75 f4             	push   -0xc(%ebp)
   1347e:	e8 9c fe ff ff       	call   1331f <idt_leave_protection>
   13483:	83 c4 10             	add    $0x10,%esp
  return pos;
   13486:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   13489:	c9                   	leave  
   1348a:	c3                   	ret    

0001348b <update_cursor_pos>:
 * @brief 更新光标的位置
 *
 * @param console
 * @return int
 */
static inline int update_cursor_pos(console_t *console) {
   1348b:	55                   	push   %ebp
   1348c:	89 e5                	mov    %esp,%ebp
   1348e:	83 ec 18             	sub    $0x18,%esp
  //TODO:加锁
  idt_state_t state = idt_enter_protection();
   13491:	e8 71 fe ff ff       	call   13307 <idt_enter_protection>
   13496:	89 45 f4             	mov    %eax,-0xc(%ebp)

  //计算以当前控制台为屏幕显示区域时的光标位置
  uint16_t pos = console->cursor_row * console->display_cols +
   13499:	8b 45 08             	mov    0x8(%ebp),%eax
   1349c:	8b 40 10             	mov    0x10(%eax),%eax
   1349f:	89 c2                	mov    %eax,%edx
   134a1:	8b 45 08             	mov    0x8(%ebp),%eax
   134a4:	8b 40 0c             	mov    0xc(%eax),%eax
   134a7:	0f af d0             	imul   %eax,%edx
                 console->cursor_col +
   134aa:	8b 45 08             	mov    0x8(%ebp),%eax
   134ad:	8b 40 14             	mov    0x14(%eax),%eax
  uint16_t pos = console->cursor_row * console->display_cols +
   134b0:	01 c2                	add    %eax,%edx
                 ((uint32_t)console->disp_base - CONSOLE_DISP_START_ADDR) /
   134b2:	8b 45 08             	mov    0x8(%ebp),%eax
   134b5:	8b 40 04             	mov    0x4(%eax),%eax
   134b8:	2d 00 80 0b 00       	sub    $0xb8000,%eax
   134bd:	d1 e8                	shr    %eax
  uint16_t pos = console->cursor_row * console->display_cols +
   134bf:	01 d0                	add    %edx,%eax
   134c1:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
                     sizeof(disp_char_t);

  // 光标位置由两个字节组成
  outb(0x3d4, 0xf);  // 访问低8位
   134c5:	83 ec 08             	sub    $0x8,%esp
   134c8:	6a 0f                	push   $0xf
   134ca:	68 d4 03 00 00       	push   $0x3d4
   134cf:	e8 22 ff ff ff       	call   133f6 <outb>
   134d4:	83 c4 10             	add    $0x10,%esp
  outb(0x3d5, (uint8_t)(pos & 0xff));
   134d7:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   134db:	0f b6 c0             	movzbl %al,%eax
   134de:	83 ec 08             	sub    $0x8,%esp
   134e1:	50                   	push   %eax
   134e2:	68 d5 03 00 00       	push   $0x3d5
   134e7:	e8 0a ff ff ff       	call   133f6 <outb>
   134ec:	83 c4 10             	add    $0x10,%esp

  outb(0x3d4, 0xe);  // 访问高8位
   134ef:	83 ec 08             	sub    $0x8,%esp
   134f2:	6a 0e                	push   $0xe
   134f4:	68 d4 03 00 00       	push   $0x3d4
   134f9:	e8 f8 fe ff ff       	call   133f6 <outb>
   134fe:	83 c4 10             	add    $0x10,%esp
  outb(0x3d5, (uint8_t)((pos >> 8) & 0xff));
   13501:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   13505:	66 c1 e8 08          	shr    $0x8,%ax
   13509:	0f b6 c0             	movzbl %al,%eax
   1350c:	83 ec 08             	sub    $0x8,%esp
   1350f:	50                   	push   %eax
   13510:	68 d5 03 00 00       	push   $0x3d5
   13515:	e8 dc fe ff ff       	call   133f6 <outb>
   1351a:	83 c4 10             	add    $0x10,%esp

  //TODO:解锁
  idt_leave_protection(state);
   1351d:	83 ec 0c             	sub    $0xc,%esp
   13520:	ff 75 f4             	push   -0xc(%ebp)
   13523:	e8 f7 fd ff ff       	call   1331f <idt_leave_protection>
   13528:	83 c4 10             	add    $0x10,%esp
  return pos;
   1352b:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
}
   1352f:	c9                   	leave  
   13530:	c3                   	ret    

00013531 <erase_rows>:
 *
 * @param console
 * @param start
 * @param end
 */
static inline void erase_rows(console_t *console, int start, int end) {
   13531:	55                   	push   %ebp
   13532:	89 e5                	mov    %esp,%ebp
   13534:	83 ec 10             	sub    $0x10,%esp
  disp_char_t *disp_start = console->disp_base + console->display_cols * start;
   13537:	8b 45 08             	mov    0x8(%ebp),%eax
   1353a:	8b 48 04             	mov    0x4(%eax),%ecx
   1353d:	8b 45 08             	mov    0x8(%ebp),%eax
   13540:	8b 50 0c             	mov    0xc(%eax),%edx
   13543:	8b 45 0c             	mov    0xc(%ebp),%eax
   13546:	0f af c2             	imul   %edx,%eax
   13549:	01 c0                	add    %eax,%eax
   1354b:	01 c8                	add    %ecx,%eax
   1354d:	89 45 fc             	mov    %eax,-0x4(%ebp)
  disp_char_t *disp_end =
      console->disp_base + console->display_cols * (end + 1);
   13550:	8b 45 08             	mov    0x8(%ebp),%eax
   13553:	8b 48 04             	mov    0x4(%eax),%ecx
   13556:	8b 45 08             	mov    0x8(%ebp),%eax
   13559:	8b 40 0c             	mov    0xc(%eax),%eax
   1355c:	8b 55 10             	mov    0x10(%ebp),%edx
   1355f:	83 c2 01             	add    $0x1,%edx
   13562:	0f af c2             	imul   %edx,%eax
   13565:	01 c0                	add    %eax,%eax
  disp_char_t *disp_end =
   13567:	01 c8                	add    %ecx,%eax
   13569:	89 45 f8             	mov    %eax,-0x8(%ebp)

  while (disp_start < disp_end) {
   1356c:	eb 24                	jmp    13592 <erase_rows+0x61>
    disp_start->c = ' ';
   1356e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13571:	c6 00 20             	movb   $0x20,(%eax)
    disp_start->foreground = COLOR_White;
   13574:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13577:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   1357b:	83 ca 0f             	or     $0xf,%edx
   1357e:	88 50 01             	mov    %dl,0x1(%eax)
    disp_start->background = COLOR_Black;
   13581:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13584:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   13588:	83 e2 8f             	and    $0xffffff8f,%edx
   1358b:	88 50 01             	mov    %dl,0x1(%eax)

    disp_start++;
   1358e:	83 45 fc 02          	addl   $0x2,-0x4(%ebp)
  while (disp_start < disp_end) {
   13592:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13595:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   13598:	72 d4                	jb     1356e <erase_rows+0x3d>
  }
}
   1359a:	90                   	nop
   1359b:	90                   	nop
   1359c:	c9                   	leave  
   1359d:	c3                   	ret    

0001359e <scroll_up>:
 * @brief 控制台console上滚lines行
 *
 * @param console
 * @param lines
 */
static inline void scroll_up(console_t *console, int lines) {
   1359e:	55                   	push   %ebp
   1359f:	89 e5                	mov    %esp,%ebp
   135a1:	83 ec 18             	sub    $0x18,%esp
  // 获取拷贝的目标位置
  disp_char_t *dest = console->disp_base;
   135a4:	8b 45 08             	mov    0x8(%ebp),%eax
   135a7:	8b 40 04             	mov    0x4(%eax),%eax
   135aa:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 获取拷贝的源位置
  disp_char_t *src = console->disp_base + console->display_cols * lines;
   135ad:	8b 45 08             	mov    0x8(%ebp),%eax
   135b0:	8b 48 04             	mov    0x4(%eax),%ecx
   135b3:	8b 45 08             	mov    0x8(%ebp),%eax
   135b6:	8b 50 0c             	mov    0xc(%eax),%edx
   135b9:	8b 45 0c             	mov    0xc(%ebp),%eax
   135bc:	0f af c2             	imul   %edx,%eax
   135bf:	01 c0                	add    %eax,%eax
   135c1:	01 c8                	add    %ecx,%eax
   135c3:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 获取拷贝的字节量
  uint32_t size = (console->display_rows - lines) * console->display_cols *
   135c6:	8b 45 08             	mov    0x8(%ebp),%eax
   135c9:	8b 40 08             	mov    0x8(%eax),%eax
   135cc:	8b 4d 0c             	mov    0xc(%ebp),%ecx
   135cf:	29 c8                	sub    %ecx,%eax
   135d1:	89 c2                	mov    %eax,%edx
   135d3:	8b 45 08             	mov    0x8(%ebp),%eax
   135d6:	8b 40 0c             	mov    0xc(%eax),%eax
   135d9:	0f af c2             	imul   %edx,%eax
   135dc:	01 c0                	add    %eax,%eax
   135de:	89 45 ec             	mov    %eax,-0x14(%ebp)
                  sizeof(disp_char_t);

  // 拷贝
  kernel_memcpy(dest, src, size);
   135e1:	8b 45 ec             	mov    -0x14(%ebp),%eax
   135e4:	83 ec 04             	sub    $0x4,%esp
   135e7:	50                   	push   %eax
   135e8:	ff 75 f0             	push   -0x10(%ebp)
   135eb:	ff 75 f4             	push   -0xc(%ebp)
   135ee:	e8 d9 34 00 00       	call   16acc <kernel_memcpy>
   135f3:	83 c4 10             	add    $0x10,%esp

  // 清除底部重复行
  erase_rows(console, console->display_rows - lines, console->display_rows - 1);
   135f6:	8b 45 08             	mov    0x8(%ebp),%eax
   135f9:	8b 40 08             	mov    0x8(%eax),%eax
   135fc:	83 e8 01             	sub    $0x1,%eax
   135ff:	89 c2                	mov    %eax,%edx
   13601:	8b 45 08             	mov    0x8(%ebp),%eax
   13604:	8b 40 08             	mov    0x8(%eax),%eax
   13607:	8b 4d 0c             	mov    0xc(%ebp),%ecx
   1360a:	29 c8                	sub    %ecx,%eax
   1360c:	83 ec 04             	sub    $0x4,%esp
   1360f:	52                   	push   %edx
   13610:	50                   	push   %eax
   13611:	ff 75 08             	push   0x8(%ebp)
   13614:	e8 18 ff ff ff       	call   13531 <erase_rows>
   13619:	83 c4 10             	add    $0x10,%esp

  // 光标回退到之前的最后一行的下一行
  console->cursor_row -= lines;
   1361c:	8b 45 08             	mov    0x8(%ebp),%eax
   1361f:	8b 40 10             	mov    0x10(%eax),%eax
   13622:	8b 4d 0c             	mov    0xc(%ebp),%ecx
   13625:	29 c8                	sub    %ecx,%eax
   13627:	89 c2                	mov    %eax,%edx
   13629:	8b 45 08             	mov    0x8(%ebp),%eax
   1362c:	89 50 10             	mov    %edx,0x10(%eax)
}
   1362f:	90                   	nop
   13630:	c9                   	leave  
   13631:	c3                   	ret    

00013632 <move_to_col0>:
/**
 * @brief 将控制台光标移动到第0列
 *
 * @param console
 */
static inline void move_to_col0(console_t *console) { console->cursor_col = 0; }
   13632:	55                   	push   %ebp
   13633:	89 e5                	mov    %esp,%ebp
   13635:	8b 45 08             	mov    0x8(%ebp),%eax
   13638:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
   1363f:	90                   	nop
   13640:	5d                   	pop    %ebp
   13641:	c3                   	ret    

00013642 <move_to_next_line>:
/**
 * @brief 将控制台光标移动到下一行
 *
 * @param console
 */
static inline void move_to_next_line(console_t *console) {
   13642:	55                   	push   %ebp
   13643:	89 e5                	mov    %esp,%ebp
   13645:	83 ec 08             	sub    $0x8,%esp
  console->cursor_row++;
   13648:	8b 45 08             	mov    0x8(%ebp),%eax
   1364b:	8b 40 10             	mov    0x10(%eax),%eax
   1364e:	8d 50 01             	lea    0x1(%eax),%edx
   13651:	8b 45 08             	mov    0x8(%ebp),%eax
   13654:	89 50 10             	mov    %edx,0x10(%eax)
  // 当前行已经大于最大显示行数，屏幕需要进行上滚1行
  if (console->cursor_row >= console->display_rows) {
   13657:	8b 45 08             	mov    0x8(%ebp),%eax
   1365a:	8b 50 10             	mov    0x10(%eax),%edx
   1365d:	8b 45 08             	mov    0x8(%ebp),%eax
   13660:	8b 40 08             	mov    0x8(%eax),%eax
   13663:	39 c2                	cmp    %eax,%edx
   13665:	72 10                	jb     13677 <move_to_next_line+0x35>
    scroll_up(console, 1);
   13667:	83 ec 08             	sub    $0x8,%esp
   1366a:	6a 01                	push   $0x1
   1366c:	ff 75 08             	push   0x8(%ebp)
   1366f:	e8 2a ff ff ff       	call   1359e <scroll_up>
   13674:	83 c4 10             	add    $0x10,%esp
  }
}
   13677:	90                   	nop
   13678:	c9                   	leave  
   13679:	c3                   	ret    

0001367a <move_forward>:
 * @brief 将控制台console的光标迁移n个位置
 *
 * @param console
 * @param n
 */
static inline void move_forward(console_t *console, int n) {
   1367a:	55                   	push   %ebp
   1367b:	89 e5                	mov    %esp,%ebp
   1367d:	83 ec 18             	sub    $0x18,%esp
  for (int i = 0; i < n; ++i) {
   13680:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   13687:	eb 5c                	jmp    136e5 <move_forward+0x6b>
    if (++(console->cursor_col) >=
   13689:	8b 45 08             	mov    0x8(%ebp),%eax
   1368c:	8b 40 14             	mov    0x14(%eax),%eax
   1368f:	8d 50 01             	lea    0x1(%eax),%edx
   13692:	8b 45 08             	mov    0x8(%ebp),%eax
   13695:	89 50 14             	mov    %edx,0x14(%eax)
   13698:	8b 45 08             	mov    0x8(%ebp),%eax
   1369b:	8b 50 14             	mov    0x14(%eax),%edx
        console->display_cols) {  // 光标达到最大列数，进行换行
   1369e:	8b 45 08             	mov    0x8(%ebp),%eax
   136a1:	8b 40 0c             	mov    0xc(%eax),%eax
    if (++(console->cursor_col) >=
   136a4:	39 c2                	cmp    %eax,%edx
   136a6:	72 39                	jb     136e1 <move_forward+0x67>
      console->cursor_row++;
   136a8:	8b 45 08             	mov    0x8(%ebp),%eax
   136ab:	8b 40 10             	mov    0x10(%eax),%eax
   136ae:	8d 50 01             	lea    0x1(%eax),%edx
   136b1:	8b 45 08             	mov    0x8(%ebp),%eax
   136b4:	89 50 10             	mov    %edx,0x10(%eax)
      console->cursor_col = 0;
   136b7:	8b 45 08             	mov    0x8(%ebp),%eax
   136ba:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
      // 当前行已经大于最大显示行数，屏幕需要进行上滚1行
      if (console->cursor_row >= console->display_rows) {
   136c1:	8b 45 08             	mov    0x8(%ebp),%eax
   136c4:	8b 50 10             	mov    0x10(%eax),%edx
   136c7:	8b 45 08             	mov    0x8(%ebp),%eax
   136ca:	8b 40 08             	mov    0x8(%eax),%eax
   136cd:	39 c2                	cmp    %eax,%edx
   136cf:	72 10                	jb     136e1 <move_forward+0x67>
        scroll_up(console, 1);
   136d1:	83 ec 08             	sub    $0x8,%esp
   136d4:	6a 01                	push   $0x1
   136d6:	ff 75 08             	push   0x8(%ebp)
   136d9:	e8 c0 fe ff ff       	call   1359e <scroll_up>
   136de:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < n; ++i) {
   136e1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   136e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   136e8:	3b 45 0c             	cmp    0xc(%ebp),%eax
   136eb:	7c 9c                	jl     13689 <move_forward+0xf>
      }
    }
  }
}
   136ed:	90                   	nop
   136ee:	90                   	nop
   136ef:	c9                   	leave  
   136f0:	c3                   	ret    

000136f1 <show_char>:
 * @brief 将字符c显示到控制台console上
 *
 * @param console
 * @param c
 */
static inline void show_char(console_t *console, char c) {
   136f1:	55                   	push   %ebp
   136f2:	89 e5                	mov    %esp,%ebp
   136f4:	83 ec 28             	sub    $0x28,%esp
   136f7:	8b 45 0c             	mov    0xc(%ebp),%eax
   136fa:	88 45 e4             	mov    %al,-0x1c(%ebp)
  // 计算当前光标对应控制台在现存位置中的偏移量
  int offset =
      console->cursor_col + console->cursor_row * console->display_cols;
   136fd:	8b 45 08             	mov    0x8(%ebp),%eax
   13700:	8b 48 14             	mov    0x14(%eax),%ecx
   13703:	8b 45 08             	mov    0x8(%ebp),%eax
   13706:	8b 50 10             	mov    0x10(%eax),%edx
   13709:	8b 45 08             	mov    0x8(%ebp),%eax
   1370c:	8b 40 0c             	mov    0xc(%eax),%eax
   1370f:	0f af c2             	imul   %edx,%eax
   13712:	01 c8                	add    %ecx,%eax
  int offset =
   13714:	89 45 f4             	mov    %eax,-0xc(%ebp)
  disp_char_t *p = console->disp_base + offset;
   13717:	8b 45 08             	mov    0x8(%ebp),%eax
   1371a:	8b 50 04             	mov    0x4(%eax),%edx
   1371d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13720:	01 c0                	add    %eax,%eax
   13722:	01 d0                	add    %edx,%eax
   13724:	89 45 f0             	mov    %eax,-0x10(%ebp)
  p->c = c;
   13727:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1372a:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
   1372e:	88 10                	mov    %dl,(%eax)
  p->foreground = console->foreground;
   13730:	8b 45 08             	mov    0x8(%ebp),%eax
   13733:	8b 40 18             	mov    0x18(%eax),%eax
   13736:	c1 e0 04             	shl    $0x4,%eax
   13739:	c0 f8 04             	sar    $0x4,%al
   1373c:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1373f:	83 e0 0f             	and    $0xf,%eax
   13742:	89 c1                	mov    %eax,%ecx
   13744:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   13748:	83 e0 f0             	and    $0xfffffff0,%eax
   1374b:	09 c8                	or     %ecx,%eax
   1374d:	88 42 01             	mov    %al,0x1(%edx)
  p->background = console->background;
   13750:	8b 45 08             	mov    0x8(%ebp),%eax
   13753:	8b 40 1c             	mov    0x1c(%eax),%eax
   13756:	c1 e0 05             	shl    $0x5,%eax
   13759:	c0 f8 05             	sar    $0x5,%al
   1375c:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1375f:	83 e0 07             	and    $0x7,%eax
   13762:	c1 e0 04             	shl    $0x4,%eax
   13765:	89 c1                	mov    %eax,%ecx
   13767:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   1376b:	83 e0 8f             	and    $0xffffff8f,%eax
   1376e:	09 c8                	or     %ecx,%eax
   13770:	88 42 01             	mov    %al,0x1(%edx)
  move_forward(console, 1);
   13773:	83 ec 08             	sub    $0x8,%esp
   13776:	6a 01                	push   $0x1
   13778:	ff 75 08             	push   0x8(%ebp)
   1377b:	e8 fa fe ff ff       	call   1367a <move_forward>
   13780:	83 c4 10             	add    $0x10,%esp
}
   13783:	90                   	nop
   13784:	c9                   	leave  
   13785:	c3                   	ret    

00013786 <move_backword>:
 *
 * @param console
 * @param n
 * @return int
 */
static inline int move_backword(console_t *console, int n) {
   13786:	55                   	push   %ebp
   13787:	89 e5                	mov    %esp,%ebp
   13789:	83 ec 10             	sub    $0x10,%esp
  int status = -1;
   1378c:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%ebp)
  for (int i = 0; i < n; ++i) {
   13793:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   1379a:	eb 55                	jmp    137f1 <move_backword+0x6b>
    if (console->cursor_col > 0) {  // 当前光标在行中，直接左移
   1379c:	8b 45 08             	mov    0x8(%ebp),%eax
   1379f:	8b 40 14             	mov    0x14(%eax),%eax
   137a2:	85 c0                	test   %eax,%eax
   137a4:	74 18                	je     137be <move_backword+0x38>
      console->cursor_col--;
   137a6:	8b 45 08             	mov    0x8(%ebp),%eax
   137a9:	8b 40 14             	mov    0x14(%eax),%eax
   137ac:	8d 50 ff             	lea    -0x1(%eax),%edx
   137af:	8b 45 08             	mov    0x8(%ebp),%eax
   137b2:	89 50 14             	mov    %edx,0x14(%eax)
      status = 0;
   137b5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   137bc:	eb 2f                	jmp    137ed <move_backword+0x67>
    } else if (console->cursor_row >
   137be:	8b 45 08             	mov    0x8(%ebp),%eax
   137c1:	8b 40 10             	mov    0x10(%eax),%eax
   137c4:	85 c0                	test   %eax,%eax
   137c6:	74 25                	je     137ed <move_backword+0x67>
               0) {  // 当前光标在行开头，若当前行不为第一行则可移动到上一行末尾
      console->cursor_row--;
   137c8:	8b 45 08             	mov    0x8(%ebp),%eax
   137cb:	8b 40 10             	mov    0x10(%eax),%eax
   137ce:	8d 50 ff             	lea    -0x1(%eax),%edx
   137d1:	8b 45 08             	mov    0x8(%ebp),%eax
   137d4:	89 50 10             	mov    %edx,0x10(%eax)
      console->cursor_col = console->display_cols - 1;
   137d7:	8b 45 08             	mov    0x8(%ebp),%eax
   137da:	8b 40 0c             	mov    0xc(%eax),%eax
   137dd:	8d 50 ff             	lea    -0x1(%eax),%edx
   137e0:	8b 45 08             	mov    0x8(%ebp),%eax
   137e3:	89 50 14             	mov    %edx,0x14(%eax)
      status = 0;
   137e6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  for (int i = 0; i < n; ++i) {
   137ed:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   137f1:	8b 45 f8             	mov    -0x8(%ebp),%eax
   137f4:	3b 45 0c             	cmp    0xc(%ebp),%eax
   137f7:	7c a3                	jl     1379c <move_backword+0x16>
    }
  }

  return status;
   137f9:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   137fc:	c9                   	leave  
   137fd:	c3                   	ret    

000137fe <erase_backword>:
/**
 * @brief 往左擦除一个字符
 *
 * @param console
 */
static inline void erase_backword(console_t *console) {
   137fe:	55                   	push   %ebp
   137ff:	89 e5                	mov    %esp,%ebp
   13801:	83 ec 08             	sub    $0x8,%esp
  if (move_backword(console, 1) == 0) {  // 左移成功
   13804:	6a 01                	push   $0x1
   13806:	ff 75 08             	push   0x8(%ebp)
   13809:	e8 78 ff ff ff       	call   13786 <move_backword>
   1380e:	83 c4 08             	add    $0x8,%esp
   13811:	85 c0                	test   %eax,%eax
   13813:	75 20                	jne    13835 <erase_backword+0x37>
    show_char(console, ' ');             // 用空格覆盖需要擦除的字符
   13815:	83 ec 08             	sub    $0x8,%esp
   13818:	6a 20                	push   $0x20
   1381a:	ff 75 08             	push   0x8(%ebp)
   1381d:	e8 cf fe ff ff       	call   136f1 <show_char>
   13822:	83 c4 10             	add    $0x10,%esp
    move_backword(console, 1);           // 再左移一位实现擦除
   13825:	83 ec 08             	sub    $0x8,%esp
   13828:	6a 01                	push   $0x1
   1382a:	ff 75 08             	push   0x8(%ebp)
   1382d:	e8 54 ff ff ff       	call   13786 <move_backword>
   13832:	83 c4 10             	add    $0x10,%esp
  }
}
   13835:	90                   	nop
   13836:	c9                   	leave  
   13837:	c3                   	ret    

00013838 <clear_display>:
/**
 * @brief 清空屏幕
 *
 * @param console
 */
static inline void clear_display(console_t *console) {
   13838:	55                   	push   %ebp
   13839:	89 e5                	mov    %esp,%ebp
   1383b:	83 ec 10             	sub    $0x10,%esp
  int size = console->display_cols * console->display_rows;
   1383e:	8b 45 08             	mov    0x8(%ebp),%eax
   13841:	8b 50 0c             	mov    0xc(%eax),%edx
   13844:	8b 45 08             	mov    0x8(%ebp),%eax
   13847:	8b 40 08             	mov    0x8(%eax),%eax
   1384a:	0f af c2             	imul   %edx,%eax
   1384d:	89 45 f4             	mov    %eax,-0xc(%ebp)
  disp_char_t *start = console->disp_base;
   13850:	8b 45 08             	mov    0x8(%ebp),%eax
   13853:	8b 40 04             	mov    0x4(%eax),%eax
   13856:	89 45 fc             	mov    %eax,-0x4(%ebp)
  for (int i = 0; i < size; ++i, ++start) {
   13859:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   13860:	eb 51                	jmp    138b3 <clear_display+0x7b>
    start->c = ' ';
   13862:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13865:	c6 00 20             	movb   $0x20,(%eax)
    start->foreground = console->foreground;
   13868:	8b 45 08             	mov    0x8(%ebp),%eax
   1386b:	8b 40 18             	mov    0x18(%eax),%eax
   1386e:	c1 e0 04             	shl    $0x4,%eax
   13871:	c0 f8 04             	sar    $0x4,%al
   13874:	8b 55 fc             	mov    -0x4(%ebp),%edx
   13877:	83 e0 0f             	and    $0xf,%eax
   1387a:	89 c1                	mov    %eax,%ecx
   1387c:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   13880:	83 e0 f0             	and    $0xfffffff0,%eax
   13883:	09 c8                	or     %ecx,%eax
   13885:	88 42 01             	mov    %al,0x1(%edx)
    start->background = console->background;
   13888:	8b 45 08             	mov    0x8(%ebp),%eax
   1388b:	8b 40 1c             	mov    0x1c(%eax),%eax
   1388e:	c1 e0 05             	shl    $0x5,%eax
   13891:	c0 f8 05             	sar    $0x5,%al
   13894:	8b 55 fc             	mov    -0x4(%ebp),%edx
   13897:	83 e0 07             	and    $0x7,%eax
   1389a:	c1 e0 04             	shl    $0x4,%eax
   1389d:	89 c1                	mov    %eax,%ecx
   1389f:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   138a3:	83 e0 8f             	and    $0xffffff8f,%eax
   138a6:	09 c8                	or     %ecx,%eax
   138a8:	88 42 01             	mov    %al,0x1(%edx)
  for (int i = 0; i < size; ++i, ++start) {
   138ab:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   138af:	83 45 fc 02          	addl   $0x2,-0x4(%ebp)
   138b3:	8b 45 f8             	mov    -0x8(%ebp),%eax
   138b6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
   138b9:	7c a7                	jl     13862 <clear_display+0x2a>
  }
}
   138bb:	90                   	nop
   138bc:	90                   	nop
   138bd:	c9                   	leave  
   138be:	c3                   	ret    

000138bf <print_table>:

/**
 * @brief 打印一个制表符\t
 * 
 */
static void print_table(console_t *console) {
   138bf:	55                   	push   %ebp
   138c0:	89 e5                	mov    %esp,%ebp
   138c2:	83 ec 18             	sub    $0x18,%esp

  int supplement_col = 4 - console->cursor_col % 4;
   138c5:	8b 45 08             	mov    0x8(%ebp),%eax
   138c8:	8b 40 14             	mov    0x14(%eax),%eax
   138cb:	83 e0 03             	and    $0x3,%eax
   138ce:	89 c2                	mov    %eax,%edx
   138d0:	b8 04 00 00 00       	mov    $0x4,%eax
   138d5:	29 d0                	sub    %edx,%eax
   138d7:	89 45 f0             	mov    %eax,-0x10(%ebp)

  for (int i = 0; i < supplement_col; ++i) {
   138da:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   138e1:	eb 14                	jmp    138f7 <print_table+0x38>
    show_char(console, ' ');
   138e3:	83 ec 08             	sub    $0x8,%esp
   138e6:	6a 20                	push   $0x20
   138e8:	ff 75 08             	push   0x8(%ebp)
   138eb:	e8 01 fe ff ff       	call   136f1 <show_char>
   138f0:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < supplement_col; ++i) {
   138f3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   138f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   138fa:	3b 45 f0             	cmp    -0x10(%ebp),%eax
   138fd:	7c e4                	jl     138e3 <print_table+0x24>
  }

  update_cursor_pos(console);
   138ff:	83 ec 0c             	sub    $0xc,%esp
   13902:	ff 75 08             	push   0x8(%ebp)
   13905:	e8 81 fb ff ff       	call   1348b <update_cursor_pos>
   1390a:	83 c4 10             	add    $0x10,%esp
}
   1390d:	90                   	nop
   1390e:	c9                   	leave  
   1390f:	c3                   	ret    

00013910 <console_init>:
/**
 * @brief 初始化控制台
 *
 * @return int
 */
int console_init(int index) {
   13910:	55                   	push   %ebp
   13911:	89 e5                	mov    %esp,%ebp
   13913:	83 ec 18             	sub    $0x18,%esp
  // 获取对应console，并进行初始化
  console_t *console = console_table + index;
   13916:	8b 45 08             	mov    0x8(%ebp),%eax
   13919:	6b c0 68             	imul   $0x68,%eax,%eax
   1391c:	05 00 c4 04 00       	add    $0x4c400,%eax
   13921:	89 45 f4             	mov    %eax,-0xc(%ebp)
  console->display_rows = CONSOLE_ROW_MAX;
   13924:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13927:	c7 40 08 19 00 00 00 	movl   $0x19,0x8(%eax)
  console->display_cols = CONSOLE_CLO_MAX;
   1392e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13931:	c7 40 0c 50 00 00 00 	movl   $0x50,0xc(%eax)
  console->foreground = COLOR_White;
   13938:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1393b:	c7 40 18 0f 00 00 00 	movl   $0xf,0x18(%eax)
  console->background = COLOR_Black;
   13942:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13945:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)

  // 初始化光标位置
  if (index == 0) {  // 保留bios在第一个console的输出信息
   1394c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13950:	75 38                	jne    1398a <console_init+0x7a>
    int cursor_pos = read_cursor_pos();
   13952:	e8 c0 fa ff ff       	call   13417 <read_cursor_pos>
   13957:	89 45 f0             	mov    %eax,-0x10(%ebp)
    console->cursor_row = cursor_pos / console->display_cols;
   1395a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1395d:	8b 55 f4             	mov    -0xc(%ebp),%edx
   13960:	8b 4a 0c             	mov    0xc(%edx),%ecx
   13963:	ba 00 00 00 00       	mov    $0x0,%edx
   13968:	f7 f1                	div    %ecx
   1396a:	89 c2                	mov    %eax,%edx
   1396c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1396f:	89 50 10             	mov    %edx,0x10(%eax)
    console->cursor_col = cursor_pos % console->display_cols;
   13972:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13975:	8b 55 f4             	mov    -0xc(%ebp),%edx
   13978:	8b 4a 0c             	mov    0xc(%edx),%ecx
   1397b:	ba 00 00 00 00       	mov    $0x0,%edx
   13980:	f7 f1                	div    %ecx
   13982:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13985:	89 50 14             	mov    %edx,0x14(%eax)
   13988:	eb 22                	jmp    139ac <console_init+0x9c>
  } else {  // 清空其它console，并将光标放在起始位置
    console->cursor_col = 0;
   1398a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1398d:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    console->cursor_row = 0;
   13994:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13997:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    clear_display(console);
   1399e:	83 ec 0c             	sub    $0xc,%esp
   139a1:	ff 75 f4             	push   -0xc(%ebp)
   139a4:	e8 8f fe ff ff       	call   13838 <clear_display>
   139a9:	83 c4 10             	add    $0x10,%esp
    //update_cursor_pos(console);
  }

  // 初始化上一次光标位置
  console->old_cursor_col = console->cursor_col;
   139ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
   139af:	8b 50 14             	mov    0x14(%eax),%edx
   139b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   139b5:	89 50 20             	mov    %edx,0x20(%eax)
  console->old_cursor_row = console->cursor_row;
   139b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   139bb:	8b 50 10             	mov    0x10(%eax),%edx
   139be:	8b 45 f4             	mov    -0xc(%ebp),%eax
   139c1:	89 50 24             	mov    %edx,0x24(%eax)

  // 初始化esc序列的参数数组
  kernel_memset(console->esc_param, 0, sizeof(int) * ESC_PARAM_MAX);
   139c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   139c7:	83 c0 28             	add    $0x28,%eax
   139ca:	83 ec 04             	sub    $0x4,%esp
   139cd:	6a 28                	push   $0x28
   139cf:	6a 00                	push   $0x0
   139d1:	50                   	push   %eax
   139d2:	e8 44 31 00 00       	call   16b1b <kernel_memset>
   139d7:	83 c4 10             	add    $0x10,%esp
  console->curr_param_index = 0;
   139da:	8b 45 f4             	mov    -0xc(%ebp),%eax
   139dd:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)

  // 初始化终端写入的状态
  console->write_state = CONSOLE_WRITE_NORMAL;
   139e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   139e7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

  // 计算每个终端在现存中的起始地址
  console->disp_base = (disp_char_t *)CONSOLE_DISP_START_ADDR +
   139ed:	8b 45 08             	mov    0x8(%ebp),%eax
   139f0:	69 c0 a0 0f 00 00    	imul   $0xfa0,%eax,%eax
   139f6:	8d 90 00 80 0b 00    	lea    0xb8000(%eax),%edx
   139fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   139ff:	89 50 04             	mov    %edx,0x4(%eax)
                       (index * CONSOLE_CLO_MAX * CONSOLE_ROW_MAX);

  //初始化终端互斥锁
  mutex_init(&console->mutex);
   13a02:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13a05:	83 c0 54             	add    $0x54,%eax
   13a08:	83 ec 0c             	sub    $0xc,%esp
   13a0b:	50                   	push   %eax
   13a0c:	e8 d8 24 00 00       	call   15ee9 <mutex_init>
   13a11:	83 c4 10             	add    $0x10,%esp
  return 0;
   13a14:	b8 00 00 00 00       	mov    $0x0,%eax
}
   13a19:	c9                   	leave  
   13a1a:	c3                   	ret    

00013a1b <write_normal>:
 * @brief 终端写普通字符的策略
 *
 * @param console
 * @param c
 */
static inline void write_normal(console_t *console, char c) {
   13a1b:	55                   	push   %ebp
   13a1c:	89 e5                	mov    %esp,%ebp
   13a1e:	83 ec 18             	sub    $0x18,%esp
   13a21:	8b 45 0c             	mov    0xc(%ebp),%eax
   13a24:	88 45 f4             	mov    %al,-0xc(%ebp)
  switch (c) {
   13a27:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
   13a2b:	83 f8 1b             	cmp    $0x1b,%eax
   13a2e:	7f 16                	jg     13a46 <write_normal+0x2b>
   13a30:	83 f8 08             	cmp    $0x8,%eax
   13a33:	7c 75                	jl     13aaa <write_normal+0x8f>
   13a35:	83 e8 08             	sub    $0x8,%eax
   13a38:	83 f8 13             	cmp    $0x13,%eax
   13a3b:	77 6d                	ja     13aaa <write_normal+0x8f>
   13a3d:	8b 04 85 20 7f 01 00 	mov    0x17f20(,%eax,4),%eax
   13a44:	ff e0                	jmp    *%eax
   13a46:	83 f8 7f             	cmp    $0x7f,%eax
   13a49:	74 0d                	je     13a58 <write_normal+0x3d>
   13a4b:	eb 5d                	jmp    13aaa <write_normal+0x8f>
    case ASCII_ESC:
      console->write_state = CONSOLE_WRITE_ESC;
   13a4d:	8b 45 08             	mov    0x8(%ebp),%eax
   13a50:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
      break;
   13a56:	eb 72                	jmp    13aca <write_normal+0xaf>
    case 0x7f:  // 退格
      erase_backword(console);
   13a58:	83 ec 0c             	sub    $0xc,%esp
   13a5b:	ff 75 08             	push   0x8(%ebp)
   13a5e:	e8 9b fd ff ff       	call   137fe <erase_backword>
   13a63:	83 c4 10             	add    $0x10,%esp
      break;
   13a66:	eb 62                	jmp    13aca <write_normal+0xaf>
    case '\b':  // 光标左移一位
      move_backword(console, 1);
   13a68:	83 ec 08             	sub    $0x8,%esp
   13a6b:	6a 01                	push   $0x1
   13a6d:	ff 75 08             	push   0x8(%ebp)
   13a70:	e8 11 fd ff ff       	call   13786 <move_backword>
   13a75:	83 c4 10             	add    $0x10,%esp
      break;
   13a78:	eb 50                	jmp    13aca <write_normal+0xaf>
    case '\t':  //制表符，4个空格大小
      print_table(console);
   13a7a:	83 ec 0c             	sub    $0xc,%esp
   13a7d:	ff 75 08             	push   0x8(%ebp)
   13a80:	e8 3a fe ff ff       	call   138bf <print_table>
   13a85:	83 c4 10             	add    $0x10,%esp
      break;
   13a88:	eb 40                	jmp    13aca <write_normal+0xaf>
    case '\r':  // 回车
      move_to_col0(console);
   13a8a:	83 ec 0c             	sub    $0xc,%esp
   13a8d:	ff 75 08             	push   0x8(%ebp)
   13a90:	e8 9d fb ff ff       	call   13632 <move_to_col0>
   13a95:	83 c4 10             	add    $0x10,%esp
      break;
   13a98:	eb 30                	jmp    13aca <write_normal+0xaf>
    case '\n':  // 换行
      // move_to_col0(console);
      move_to_next_line(console);
   13a9a:	83 ec 0c             	sub    $0xc,%esp
   13a9d:	ff 75 08             	push   0x8(%ebp)
   13aa0:	e8 9d fb ff ff       	call   13642 <move_to_next_line>
   13aa5:	83 c4 10             	add    $0x10,%esp
      break;
   13aa8:	eb 20                	jmp    13aca <write_normal+0xaf>
    default:
      if (c >= ' ' && c <= '~') {  // 可显示字符的范围
   13aaa:	80 7d f4 1f          	cmpb   $0x1f,-0xc(%ebp)
   13aae:	7e 19                	jle    13ac9 <write_normal+0xae>
   13ab0:	80 7d f4 7f          	cmpb   $0x7f,-0xc(%ebp)
   13ab4:	74 13                	je     13ac9 <write_normal+0xae>
        show_char(console, c);
   13ab6:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
   13aba:	83 ec 08             	sub    $0x8,%esp
   13abd:	50                   	push   %eax
   13abe:	ff 75 08             	push   0x8(%ebp)
   13ac1:	e8 2b fc ff ff       	call   136f1 <show_char>
   13ac6:	83 c4 10             	add    $0x10,%esp
      }
      break;
   13ac9:	90                   	nop
  }
}
   13aca:	90                   	nop
   13acb:	c9                   	leave  
   13acc:	c3                   	ret    

00013acd <save_cursor>:
/**
 * @brief 保存光标当前位置
 *
 * @param console
 */
static inline void save_cursor(console_t *console) {
   13acd:	55                   	push   %ebp
   13ace:	89 e5                	mov    %esp,%ebp
  console->old_cursor_col = console->cursor_col;
   13ad0:	8b 45 08             	mov    0x8(%ebp),%eax
   13ad3:	8b 50 14             	mov    0x14(%eax),%edx
   13ad6:	8b 45 08             	mov    0x8(%ebp),%eax
   13ad9:	89 50 20             	mov    %edx,0x20(%eax)
  console->old_cursor_row = console->cursor_row;
   13adc:	8b 45 08             	mov    0x8(%ebp),%eax
   13adf:	8b 50 10             	mov    0x10(%eax),%edx
   13ae2:	8b 45 08             	mov    0x8(%ebp),%eax
   13ae5:	89 50 24             	mov    %edx,0x24(%eax)
}
   13ae8:	90                   	nop
   13ae9:	5d                   	pop    %ebp
   13aea:	c3                   	ret    

00013aeb <restore_cursor>:
/**
 * @brief 恢复光标位置
 *
 * @param console
 */
static inline void restore_cursor(console_t *console) {
   13aeb:	55                   	push   %ebp
   13aec:	89 e5                	mov    %esp,%ebp
  console->cursor_col = console->old_cursor_col;
   13aee:	8b 45 08             	mov    0x8(%ebp),%eax
   13af1:	8b 50 20             	mov    0x20(%eax),%edx
   13af4:	8b 45 08             	mov    0x8(%ebp),%eax
   13af7:	89 50 14             	mov    %edx,0x14(%eax)
  console->cursor_row = console->old_cursor_row;
   13afa:	8b 45 08             	mov    0x8(%ebp),%eax
   13afd:	8b 50 24             	mov    0x24(%eax),%edx
   13b00:	8b 45 08             	mov    0x8(%ebp),%eax
   13b03:	89 50 10             	mov    %edx,0x10(%eax)
}
   13b06:	90                   	nop
   13b07:	5d                   	pop    %ebp
   13b08:	c3                   	ret    

00013b09 <clear_esc_param>:
/**
 * @brief 清空esc参数缓冲数组
 *
 * @param console
 */
static inline void clear_esc_param(console_t *console) {
   13b09:	55                   	push   %ebp
   13b0a:	89 e5                	mov    %esp,%ebp
   13b0c:	83 ec 08             	sub    $0x8,%esp
  kernel_memset(console->esc_param, 0, sizeof(int) * ESC_PARAM_MAX);
   13b0f:	8b 45 08             	mov    0x8(%ebp),%eax
   13b12:	83 c0 28             	add    $0x28,%eax
   13b15:	83 ec 04             	sub    $0x4,%esp
   13b18:	6a 28                	push   $0x28
   13b1a:	6a 00                	push   $0x0
   13b1c:	50                   	push   %eax
   13b1d:	e8 f9 2f 00 00       	call   16b1b <kernel_memset>
   13b22:	83 c4 10             	add    $0x10,%esp
  console->curr_param_index = 0;
   13b25:	8b 45 08             	mov    0x8(%ebp),%eax
   13b28:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
}
   13b2f:	90                   	nop
   13b30:	c9                   	leave  
   13b31:	c3                   	ret    

00013b32 <write_esc>:
 * @brief 终端写ESC字符的策略
 *
 * @param console
 * @param c
 */
static inline void write_esc(console_t *console, char c) {
   13b32:	55                   	push   %ebp
   13b33:	89 e5                	mov    %esp,%ebp
   13b35:	83 ec 18             	sub    $0x18,%esp
   13b38:	8b 45 0c             	mov    0xc(%ebp),%eax
   13b3b:	88 45 f4             	mov    %al,-0xc(%ebp)
  switch (c) {
   13b3e:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
   13b42:	83 f8 5b             	cmp    $0x5b,%eax
   13b45:	74 11                	je     13b58 <write_esc+0x26>
   13b47:	83 f8 5b             	cmp    $0x5b,%eax
   13b4a:	7f 57                	jg     13ba3 <write_esc+0x71>
   13b4c:	83 f8 37             	cmp    $0x37,%eax
   13b4f:	74 20                	je     13b71 <write_esc+0x3f>
   13b51:	83 f8 38             	cmp    $0x38,%eax
   13b54:	74 34                	je     13b8a <write_esc+0x58>
   13b56:	eb 4b                	jmp    13ba3 <write_esc+0x71>
    case '[':
      clear_esc_param(console);
   13b58:	83 ec 0c             	sub    $0xc,%esp
   13b5b:	ff 75 08             	push   0x8(%ebp)
   13b5e:	e8 a6 ff ff ff       	call   13b09 <clear_esc_param>
   13b63:	83 c4 10             	add    $0x10,%esp
      console->write_state = CONSOLE_WRITE_ESC_SQUARE;
   13b66:	8b 45 08             	mov    0x8(%ebp),%eax
   13b69:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
      break;
   13b6f:	eb 3c                	jmp    13bad <write_esc+0x7b>
    case '7':
      save_cursor(console);
   13b71:	83 ec 0c             	sub    $0xc,%esp
   13b74:	ff 75 08             	push   0x8(%ebp)
   13b77:	e8 51 ff ff ff       	call   13acd <save_cursor>
   13b7c:	83 c4 10             	add    $0x10,%esp
      console->write_state = CONSOLE_WRITE_NORMAL;
   13b7f:	8b 45 08             	mov    0x8(%ebp),%eax
   13b82:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      break;
   13b88:	eb 23                	jmp    13bad <write_esc+0x7b>
    case '8':
      restore_cursor(console);
   13b8a:	83 ec 0c             	sub    $0xc,%esp
   13b8d:	ff 75 08             	push   0x8(%ebp)
   13b90:	e8 56 ff ff ff       	call   13aeb <restore_cursor>
   13b95:	83 c4 10             	add    $0x10,%esp
      console->write_state = CONSOLE_WRITE_NORMAL;
   13b98:	8b 45 08             	mov    0x8(%ebp),%eax
   13b9b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      break;
   13ba1:	eb 0a                	jmp    13bad <write_esc+0x7b>
    default:
      console->write_state = CONSOLE_WRITE_NORMAL;
   13ba3:	8b 45 08             	mov    0x8(%ebp),%eax
   13ba6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      break;
   13bac:	90                   	nop
  }
}
   13bad:	90                   	nop
   13bae:	c9                   	leave  
   13baf:	c3                   	ret    

00013bb0 <set_font_style>:
/**
 * @brief 根据esc参数设置字符的风格
 *
 * @param console
 */
static inline void set_font_style(console_t *console) {
   13bb0:	55                   	push   %ebp
   13bb1:	89 e5                	mov    %esp,%ebp
   13bb3:	83 ec 10             	sub    $0x10,%esp
  static const color_t color_table[] = {COLOR_Black,  COLOR_Red,  COLOR_Green,
                                        COLOR_Yellow, COLOR_Blue, COLOR_Magenta,
                                        COLOR_Cyan,   COLOR_White};
  for (int i = 0; i <= console->curr_param_index; ++i) {
   13bb6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   13bbd:	eb 78                	jmp    13c37 <set_font_style+0x87>
    int param = console->esc_param[i];
   13bbf:	8b 45 08             	mov    0x8(%ebp),%eax
   13bc2:	8b 55 fc             	mov    -0x4(%ebp),%edx
   13bc5:	83 c2 08             	add    $0x8,%edx
   13bc8:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   13bcc:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if (param >= 30 && param <= 37) {
   13bcf:	83 7d f8 1d          	cmpl   $0x1d,-0x8(%ebp)
   13bd3:	7e 1b                	jle    13bf0 <set_font_style+0x40>
   13bd5:	83 7d f8 25          	cmpl   $0x25,-0x8(%ebp)
   13bd9:	7f 15                	jg     13bf0 <set_font_style+0x40>
      console->foreground = color_table[param - 30];
   13bdb:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13bde:	83 e8 1e             	sub    $0x1e,%eax
   13be1:	8b 14 85 80 7f 01 00 	mov    0x17f80(,%eax,4),%edx
   13be8:	8b 45 08             	mov    0x8(%ebp),%eax
   13beb:	89 50 18             	mov    %edx,0x18(%eax)
   13bee:	eb 43                	jmp    13c33 <set_font_style+0x83>
    } else if (param >= 40 && param <= 47) {
   13bf0:	83 7d f8 27          	cmpl   $0x27,-0x8(%ebp)
   13bf4:	7e 1b                	jle    13c11 <set_font_style+0x61>
   13bf6:	83 7d f8 2f          	cmpl   $0x2f,-0x8(%ebp)
   13bfa:	7f 15                	jg     13c11 <set_font_style+0x61>
      console->background = color_table[param - 40];
   13bfc:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13bff:	83 e8 28             	sub    $0x28,%eax
   13c02:	8b 14 85 80 7f 01 00 	mov    0x17f80(,%eax,4),%edx
   13c09:	8b 45 08             	mov    0x8(%ebp),%eax
   13c0c:	89 50 1c             	mov    %edx,0x1c(%eax)
   13c0f:	eb 22                	jmp    13c33 <set_font_style+0x83>
    } else if (param == 39) {
   13c11:	83 7d f8 27          	cmpl   $0x27,-0x8(%ebp)
   13c15:	75 0c                	jne    13c23 <set_font_style+0x73>
      console->foreground = COLOR_White;
   13c17:	8b 45 08             	mov    0x8(%ebp),%eax
   13c1a:	c7 40 18 0f 00 00 00 	movl   $0xf,0x18(%eax)
   13c21:	eb 10                	jmp    13c33 <set_font_style+0x83>
    } else if (param == 49) {
   13c23:	83 7d f8 31          	cmpl   $0x31,-0x8(%ebp)
   13c27:	75 0a                	jne    13c33 <set_font_style+0x83>
      console->background = COLOR_Black;
   13c29:	8b 45 08             	mov    0x8(%ebp),%eax
   13c2c:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
  for (int i = 0; i <= console->curr_param_index; ++i) {
   13c33:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   13c37:	8b 45 08             	mov    0x8(%ebp),%eax
   13c3a:	8b 40 50             	mov    0x50(%eax),%eax
   13c3d:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   13c40:	0f 8e 79 ff ff ff    	jle    13bbf <set_font_style+0xf>
    }
  }
}
   13c46:	90                   	nop
   13c47:	90                   	nop
   13c48:	c9                   	leave  
   13c49:	c3                   	ret    

00013c4a <erase_in_display>:
/**
 * @brief 擦除屏幕指定区域
 *
 * @param console
 */
static inline void erase_in_display(console_t *console) {
   13c4a:	55                   	push   %ebp
   13c4b:	89 e5                	mov    %esp,%ebp
   13c4d:	83 ec 10             	sub    $0x10,%esp
  if (console->curr_param_index < 0) {
   13c50:	8b 45 08             	mov    0x8(%ebp),%eax
   13c53:	8b 40 50             	mov    0x50(%eax),%eax
   13c56:	85 c0                	test   %eax,%eax
   13c58:	78 3c                	js     13c96 <erase_in_display+0x4c>
    return;
  }

  int param = console->esc_param[0];
   13c5a:	8b 45 08             	mov    0x8(%ebp),%eax
   13c5d:	8b 40 28             	mov    0x28(%eax),%eax
   13c60:	89 45 fc             	mov    %eax,-0x4(%ebp)
  if (param == 2) {  // 擦除整个屏幕
   13c63:	83 7d fc 02          	cmpl   $0x2,-0x4(%ebp)
   13c67:	75 2e                	jne    13c97 <erase_in_display+0x4d>
    erase_rows(console, 0, console->display_rows - 1);
   13c69:	8b 45 08             	mov    0x8(%ebp),%eax
   13c6c:	8b 40 08             	mov    0x8(%eax),%eax
   13c6f:	83 e8 01             	sub    $0x1,%eax
   13c72:	50                   	push   %eax
   13c73:	6a 00                	push   $0x0
   13c75:	ff 75 08             	push   0x8(%ebp)
   13c78:	e8 b4 f8 ff ff       	call   13531 <erase_rows>
   13c7d:	83 c4 0c             	add    $0xc,%esp
    console->cursor_col = 0;
   13c80:	8b 45 08             	mov    0x8(%ebp),%eax
   13c83:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    console->cursor_row = 0;
   13c8a:	8b 45 08             	mov    0x8(%ebp),%eax
   13c8d:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
   13c94:	eb 01                	jmp    13c97 <erase_in_display+0x4d>
    return;
   13c96:	90                   	nop
  }
}
   13c97:	c9                   	leave  
   13c98:	c3                   	ret    

00013c99 <move_cursor>:
/**
 * @brief 移动光标到指定位置
 *
 * @param console
 */
static inline void move_cursor(console_t *console) {
   13c99:	55                   	push   %ebp
   13c9a:	89 e5                	mov    %esp,%ebp
  console->cursor_row = console->esc_param[0];
   13c9c:	8b 45 08             	mov    0x8(%ebp),%eax
   13c9f:	8b 40 28             	mov    0x28(%eax),%eax
   13ca2:	89 c2                	mov    %eax,%edx
   13ca4:	8b 45 08             	mov    0x8(%ebp),%eax
   13ca7:	89 50 10             	mov    %edx,0x10(%eax)
  console->cursor_col = console->esc_param[1];
   13caa:	8b 45 08             	mov    0x8(%ebp),%eax
   13cad:	8b 40 2c             	mov    0x2c(%eax),%eax
   13cb0:	89 c2                	mov    %eax,%edx
   13cb2:	8b 45 08             	mov    0x8(%ebp),%eax
   13cb5:	89 50 14             	mov    %edx,0x14(%eax)
}
   13cb8:	90                   	nop
   13cb9:	5d                   	pop    %ebp
   13cba:	c3                   	ret    

00013cbb <move_left>:
 * @brief 将光标左移n位
 *
 * @param console
 * @param n
 */
static inline void move_left(console_t *console, int n) {
   13cbb:	55                   	push   %ebp
   13cbc:	89 e5                	mov    %esp,%ebp
   13cbe:	83 ec 10             	sub    $0x10,%esp
  if (n == 0) {  // 默认至少移动一位
   13cc1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13cc5:	75 07                	jne    13cce <move_left+0x13>
    n = 1;
   13cc7:	c7 45 0c 01 00 00 00 	movl   $0x1,0xc(%ebp)
  }

  int col = console->cursor_col - n;
   13cce:	8b 45 08             	mov    0x8(%ebp),%eax
   13cd1:	8b 40 14             	mov    0x14(%eax),%eax
   13cd4:	8b 55 0c             	mov    0xc(%ebp),%edx
   13cd7:	29 d0                	sub    %edx,%eax
   13cd9:	89 45 fc             	mov    %eax,-0x4(%ebp)
  console->cursor_col = (col > 0) ? col : 0;
   13cdc:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13cdf:	ba 00 00 00 00       	mov    $0x0,%edx
   13ce4:	85 c0                	test   %eax,%eax
   13ce6:	0f 48 c2             	cmovs  %edx,%eax
   13ce9:	89 c2                	mov    %eax,%edx
   13ceb:	8b 45 08             	mov    0x8(%ebp),%eax
   13cee:	89 50 14             	mov    %edx,0x14(%eax)
}
   13cf1:	90                   	nop
   13cf2:	c9                   	leave  
   13cf3:	c3                   	ret    

00013cf4 <move_right>:
 * @brief 将光标右移n位
 *
 * @param console
 * @param n
 */
static inline void move_right(console_t *console, int n) {
   13cf4:	55                   	push   %ebp
   13cf5:	89 e5                	mov    %esp,%ebp
   13cf7:	83 ec 10             	sub    $0x10,%esp
  if (n == 0) {  // 默认至少移动一位
   13cfa:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13cfe:	75 07                	jne    13d07 <move_right+0x13>
    n = 1;
   13d00:	c7 45 0c 01 00 00 00 	movl   $0x1,0xc(%ebp)
  }

  int col = console->cursor_col + n;
   13d07:	8b 45 08             	mov    0x8(%ebp),%eax
   13d0a:	8b 50 14             	mov    0x14(%eax),%edx
   13d0d:	8b 45 0c             	mov    0xc(%ebp),%eax
   13d10:	01 d0                	add    %edx,%eax
   13d12:	89 45 fc             	mov    %eax,-0x4(%ebp)
  console->cursor_col =
      (col >= console->display_cols) ? console->display_cols - 1 : col;
   13d15:	8b 45 08             	mov    0x8(%ebp),%eax
   13d18:	8b 50 0c             	mov    0xc(%eax),%edx
   13d1b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13d1e:	39 c2                	cmp    %eax,%edx
   13d20:	77 0b                	ja     13d2d <move_right+0x39>
   13d22:	8b 45 08             	mov    0x8(%ebp),%eax
   13d25:	8b 40 0c             	mov    0xc(%eax),%eax
   13d28:	83 e8 01             	sub    $0x1,%eax
   13d2b:	eb 03                	jmp    13d30 <move_right+0x3c>
   13d2d:	8b 45 fc             	mov    -0x4(%ebp),%eax
  console->cursor_col =
   13d30:	8b 55 08             	mov    0x8(%ebp),%edx
   13d33:	89 42 14             	mov    %eax,0x14(%edx)
}
   13d36:	90                   	nop
   13d37:	c9                   	leave  
   13d38:	c3                   	ret    

00013d39 <write_esc_square>:
 * @brief 在终端console中写入esc序列
 *
 * @param console
 * @param c
 */
static inline void write_esc_square(console_t *console, char c) {
   13d39:	55                   	push   %ebp
   13d3a:	89 e5                	mov    %esp,%ebp
   13d3c:	83 ec 14             	sub    $0x14,%esp
   13d3f:	8b 45 0c             	mov    0xc(%ebp),%eax
   13d42:	88 45 ec             	mov    %al,-0x14(%ebp)
  if (c >= '0' && c <= '9') {  // 解析出序列的参数
   13d45:	80 7d ec 2f          	cmpb   $0x2f,-0x14(%ebp)
   13d49:	7e 44                	jle    13d8f <write_esc_square+0x56>
   13d4b:	80 7d ec 39          	cmpb   $0x39,-0x14(%ebp)
   13d4f:	7f 3e                	jg     13d8f <write_esc_square+0x56>
    int *param = &console->esc_param[console->curr_param_index];
   13d51:	8b 45 08             	mov    0x8(%ebp),%eax
   13d54:	8b 40 50             	mov    0x50(%eax),%eax
   13d57:	83 c0 08             	add    $0x8,%eax
   13d5a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   13d61:	8b 45 08             	mov    0x8(%ebp),%eax
   13d64:	01 d0                	add    %edx,%eax
   13d66:	83 c0 08             	add    $0x8,%eax
   13d69:	89 45 fc             	mov    %eax,-0x4(%ebp)
    *param = (*param) * 10 + c - '0';
   13d6c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13d6f:	8b 10                	mov    (%eax),%edx
   13d71:	89 d0                	mov    %edx,%eax
   13d73:	c1 e0 02             	shl    $0x2,%eax
   13d76:	01 d0                	add    %edx,%eax
   13d78:	01 c0                	add    %eax,%eax
   13d7a:	89 c2                	mov    %eax,%edx
   13d7c:	0f be 45 ec          	movsbl -0x14(%ebp),%eax
   13d80:	01 d0                	add    %edx,%eax
   13d82:	8d 50 d0             	lea    -0x30(%eax),%edx
   13d85:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13d88:	89 10                	mov    %edx,(%eax)
  if (c >= '0' && c <= '9') {  // 解析出序列的参数
   13d8a:	e9 ab 00 00 00       	jmp    13e3a <write_esc_square+0x101>
  } else if (c == ';' && console->curr_param_index <
   13d8f:	80 7d ec 3b          	cmpb   $0x3b,-0x14(%ebp)
   13d93:	75 1f                	jne    13db4 <write_esc_square+0x7b>
   13d95:	8b 45 08             	mov    0x8(%ebp),%eax
   13d98:	8b 40 50             	mov    0x50(%eax),%eax
   13d9b:	83 f8 09             	cmp    $0x9,%eax
   13d9e:	7f 14                	jg     13db4 <write_esc_square+0x7b>
                             ESC_PARAM_MAX) {  // 解析完一个参数，索引加1
    console->curr_param_index++;
   13da0:	8b 45 08             	mov    0x8(%ebp),%eax
   13da3:	8b 40 50             	mov    0x50(%eax),%eax
   13da6:	8d 50 01             	lea    0x1(%eax),%edx
   13da9:	8b 45 08             	mov    0x8(%ebp),%eax
   13dac:	89 50 50             	mov    %edx,0x50(%eax)
   13daf:	e9 86 00 00 00       	jmp    13e3a <write_esc_square+0x101>
  } else {  // 用序列结束符判断需要进行的操作
    switch (c) {
   13db4:	0f be 45 ec          	movsbl -0x14(%ebp),%eax
   13db8:	83 f8 6d             	cmp    $0x6d,%eax
   13dbb:	74 25                	je     13de2 <write_esc_square+0xa9>
   13dbd:	83 f8 6d             	cmp    $0x6d,%eax
   13dc0:	7f 6d                	jg     13e2f <write_esc_square+0xf6>
   13dc2:	83 f8 4a             	cmp    $0x4a,%eax
   13dc5:	74 5d                	je     13e24 <write_esc_square+0xeb>
   13dc7:	83 f8 4a             	cmp    $0x4a,%eax
   13dca:	7f 63                	jg     13e2f <write_esc_square+0xf6>
   13dcc:	83 f8 48             	cmp    $0x48,%eax
   13dcf:	74 46                	je     13e17 <write_esc_square+0xde>
   13dd1:	83 f8 48             	cmp    $0x48,%eax
   13dd4:	7f 59                	jg     13e2f <write_esc_square+0xf6>
   13dd6:	83 f8 43             	cmp    $0x43,%eax
   13dd9:	74 28                	je     13e03 <write_esc_square+0xca>
   13ddb:	83 f8 44             	cmp    $0x44,%eax
   13dde:	74 0f                	je     13def <write_esc_square+0xb6>
        move_cursor(console);
        break;
      case 'J':  // 擦除屏幕指定区域
        erase_in_display(console);
      default:
        break;
   13de0:	eb 4d                	jmp    13e2f <write_esc_square+0xf6>
        set_font_style(console);
   13de2:	ff 75 08             	push   0x8(%ebp)
   13de5:	e8 c6 fd ff ff       	call   13bb0 <set_font_style>
   13dea:	83 c4 04             	add    $0x4,%esp
        break;
   13ded:	eb 41                	jmp    13e30 <write_esc_square+0xf7>
        move_left(console, console->esc_param[0]);
   13def:	8b 45 08             	mov    0x8(%ebp),%eax
   13df2:	8b 40 28             	mov    0x28(%eax),%eax
   13df5:	50                   	push   %eax
   13df6:	ff 75 08             	push   0x8(%ebp)
   13df9:	e8 bd fe ff ff       	call   13cbb <move_left>
   13dfe:	83 c4 08             	add    $0x8,%esp
        break;
   13e01:	eb 2d                	jmp    13e30 <write_esc_square+0xf7>
        move_right(console, console->esc_param[0]);
   13e03:	8b 45 08             	mov    0x8(%ebp),%eax
   13e06:	8b 40 28             	mov    0x28(%eax),%eax
   13e09:	50                   	push   %eax
   13e0a:	ff 75 08             	push   0x8(%ebp)
   13e0d:	e8 e2 fe ff ff       	call   13cf4 <move_right>
   13e12:	83 c4 08             	add    $0x8,%esp
        break;
   13e15:	eb 19                	jmp    13e30 <write_esc_square+0xf7>
        move_cursor(console);
   13e17:	ff 75 08             	push   0x8(%ebp)
   13e1a:	e8 7a fe ff ff       	call   13c99 <move_cursor>
   13e1f:	83 c4 04             	add    $0x4,%esp
        break;
   13e22:	eb 0c                	jmp    13e30 <write_esc_square+0xf7>
        erase_in_display(console);
   13e24:	ff 75 08             	push   0x8(%ebp)
   13e27:	e8 1e fe ff ff       	call   13c4a <erase_in_display>
   13e2c:	83 c4 04             	add    $0x4,%esp
        break;
   13e2f:	90                   	nop
    }

    // 执行完操作，将状态机切换回写普通字符模式
    console->write_state = CONSOLE_WRITE_NORMAL;
   13e30:	8b 45 08             	mov    0x8(%ebp),%eax
   13e33:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  }
}
   13e39:	90                   	nop
   13e3a:	90                   	nop
   13e3b:	c9                   	leave  
   13e3c:	c3                   	ret    

00013e3d <console_write>:
 * @param console 第几个控制台
 * @param data 写入的字符串
 * @param size 字符串大小
 * @return int
 */
int console_write(tty_t *tty) {
   13e3d:	55                   	push   %ebp
   13e3e:	89 e5                	mov    %esp,%ebp
   13e40:	83 ec 18             	sub    $0x18,%esp
  // 获取需要需要写入的终端
  console_t *console = console_table + tty->console_index;
   13e43:	8b 45 08             	mov    0x8(%ebp),%eax
   13e46:	8b 40 08             	mov    0x8(%eax),%eax
   13e49:	6b c0 68             	imul   $0x68,%eax,%eax
   13e4c:	05 00 c4 04 00       	add    $0x4c400,%eax
   13e51:	89 45 f0             	mov    %eax,-0x10(%ebp)
  int len = 0;
   13e54:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  //TODO:加锁
  mutex_lock(&console->mutex);
   13e5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13e5e:	83 c0 54             	add    $0x54,%eax
   13e61:	83 ec 0c             	sub    $0xc,%esp
   13e64:	50                   	push   %eax
   13e65:	e8 cc 20 00 00       	call   15f36 <mutex_lock>
   13e6a:	83 c4 10             	add    $0x10,%esp

  //在tty的缓冲队列中读取一个字符写入终端
  do {
    char c;
    int err = tty_fifo_get(&tty->out_fifo, &c);
   13e6d:	8b 45 08             	mov    0x8(%ebp),%eax
   13e70:	8d 50 0c             	lea    0xc(%eax),%edx
   13e73:	83 ec 08             	sub    $0x8,%esp
   13e76:	8d 45 eb             	lea    -0x15(%ebp),%eax
   13e79:	50                   	push   %eax
   13e7a:	52                   	push   %edx
   13e7b:	e8 9e 0a 00 00       	call   1491e <tty_fifo_get>
   13e80:	83 c4 10             	add    $0x10,%esp
   13e83:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (err < 0) {
   13e86:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   13e8a:	79 2a                	jns    13eb6 <console_write+0x79>
    len++;
  } while (1);


  //TODO:解锁
  mutex_unlock(&console->mutex);
   13e8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13e8f:	83 c0 54             	add    $0x54,%eax
   13e92:	83 ec 0c             	sub    $0xc,%esp
   13e95:	50                   	push   %eax
   13e96:	e8 2c 21 00 00       	call   15fc7 <mutex_unlock>
   13e9b:	83 c4 10             	add    $0x10,%esp

  // 更新光标的位置
  if (tty->console_index == curr_console_index) {
   13e9e:	8b 45 08             	mov    0x8(%ebp),%eax
   13ea1:	8b 50 08             	mov    0x8(%eax),%edx
   13ea4:	a1 40 c7 04 00       	mov    0x4c740,%eax
   13ea9:	39 c2                	cmp    %eax,%edx
   13eab:	0f 84 83 00 00 00    	je     13f34 <console_write+0xf7>
   13eb1:	e9 8c 00 00 00       	jmp    13f42 <console_write+0x105>
    sem_notify(&tty->out_sem);
   13eb6:	8b 45 08             	mov    0x8(%ebp),%eax
   13eb9:	83 c0 34             	add    $0x34,%eax
   13ebc:	83 ec 0c             	sub    $0xc,%esp
   13ebf:	50                   	push   %eax
   13ec0:	e8 e3 22 00 00       	call   161a8 <sem_notify>
   13ec5:	83 c4 10             	add    $0x10,%esp
    switch (console->write_state) {
   13ec8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13ecb:	8b 00                	mov    (%eax),%eax
   13ecd:	83 f8 02             	cmp    $0x2,%eax
   13ed0:	74 40                	je     13f12 <console_write+0xd5>
   13ed2:	83 f8 02             	cmp    $0x2,%eax
   13ed5:	77 53                	ja     13f2a <console_write+0xed>
   13ed7:	85 c0                	test   %eax,%eax
   13ed9:	74 07                	je     13ee2 <console_write+0xa5>
   13edb:	83 f8 01             	cmp    $0x1,%eax
   13ede:	74 1a                	je     13efa <console_write+0xbd>
        break;
   13ee0:	eb 48                	jmp    13f2a <console_write+0xed>
        write_normal(console, c);
   13ee2:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   13ee6:	0f be c0             	movsbl %al,%eax
   13ee9:	83 ec 08             	sub    $0x8,%esp
   13eec:	50                   	push   %eax
   13eed:	ff 75 f0             	push   -0x10(%ebp)
   13ef0:	e8 26 fb ff ff       	call   13a1b <write_normal>
   13ef5:	83 c4 10             	add    $0x10,%esp
        break;
   13ef8:	eb 31                	jmp    13f2b <console_write+0xee>
        write_esc(console, c);
   13efa:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   13efe:	0f be c0             	movsbl %al,%eax
   13f01:	83 ec 08             	sub    $0x8,%esp
   13f04:	50                   	push   %eax
   13f05:	ff 75 f0             	push   -0x10(%ebp)
   13f08:	e8 25 fc ff ff       	call   13b32 <write_esc>
   13f0d:	83 c4 10             	add    $0x10,%esp
        break;
   13f10:	eb 19                	jmp    13f2b <console_write+0xee>
        write_esc_square(console, c);
   13f12:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   13f16:	0f be c0             	movsbl %al,%eax
   13f19:	83 ec 08             	sub    $0x8,%esp
   13f1c:	50                   	push   %eax
   13f1d:	ff 75 f0             	push   -0x10(%ebp)
   13f20:	e8 14 fe ff ff       	call   13d39 <write_esc_square>
   13f25:	83 c4 10             	add    $0x10,%esp
        break;
   13f28:	eb 01                	jmp    13f2b <console_write+0xee>
        break;
   13f2a:	90                   	nop
    len++;
   13f2b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  do {
   13f2f:	e9 39 ff ff ff       	jmp    13e6d <console_write+0x30>
    //若当前tty设备是正在显示的设备，则更新对应的光标位置
    update_cursor_pos(console);
   13f34:	83 ec 0c             	sub    $0xc,%esp
   13f37:	ff 75 f0             	push   -0x10(%ebp)
   13f3a:	e8 4c f5 ff ff       	call   1348b <update_cursor_pos>
   13f3f:	83 c4 10             	add    $0x10,%esp
  }


  return len;
   13f42:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   13f45:	c9                   	leave  
   13f46:	c3                   	ret    

00013f47 <console_close>:
 * @brief 关闭控制台
 *
 * @param console
 * @return int
 */
void console_close(int console) {}
   13f47:	55                   	push   %ebp
   13f48:	89 e5                	mov    %esp,%ebp
   13f4a:	90                   	nop
   13f4b:	5d                   	pop    %ebp
   13f4c:	c3                   	ret    

00013f4d <console_select>:
/**
 * @brief 通过索引号更改当前系统使用的终端
 * 
 * @param console 
 */
void console_select(int console_index) {
   13f4d:	55                   	push   %ebp
   13f4e:	89 e5                	mov    %esp,%ebp
   13f50:	83 ec 18             	sub    $0x18,%esp
    console_t *console = console_table + console_index;
   13f53:	8b 45 08             	mov    0x8(%ebp),%eax
   13f56:	6b c0 68             	imul   $0x68,%eax,%eax
   13f59:	05 00 c4 04 00       	add    $0x4c400,%eax
   13f5e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (console->disp_base == 0) {  //当前控制台还未被初始化，进行初始化操作
   13f61:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13f64:	8b 40 04             	mov    0x4(%eax),%eax
   13f67:	85 c0                	test   %eax,%eax
   13f69:	75 0e                	jne    13f79 <console_select+0x2c>
      console_init(console_index);
   13f6b:	83 ec 0c             	sub    $0xc,%esp
   13f6e:	ff 75 08             	push   0x8(%ebp)
   13f71:	e8 9a f9 ff ff       	call   13910 <console_init>
   13f76:	83 c4 10             	add    $0x10,%esp
    }

    //计算屏幕显示的起始位置
    uint16_t pos = console_index * console->display_rows * console->display_cols;
   13f79:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13f7c:	8b 40 08             	mov    0x8(%eax),%eax
   13f7f:	89 c2                	mov    %eax,%edx
   13f81:	8b 45 08             	mov    0x8(%ebp),%eax
   13f84:	0f af d0             	imul   %eax,%edx
   13f87:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13f8a:	8b 40 0c             	mov    0xc(%eax),%eax
   13f8d:	0f af c2             	imul   %edx,%eax
   13f90:	66 89 45 f2          	mov    %ax,-0xe(%ebp)

    //向端口写入起始位置
    outb(0x3d4, 0xc); //告诉端口要写屏幕起始索引的高8位
   13f94:	83 ec 08             	sub    $0x8,%esp
   13f97:	6a 0c                	push   $0xc
   13f99:	68 d4 03 00 00       	push   $0x3d4
   13f9e:	e8 53 f4 ff ff       	call   133f6 <outb>
   13fa3:	83 c4 10             	add    $0x10,%esp
    outb(0x3d5, (uint8_t)((pos >> 8) & 0xff));  
   13fa6:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   13faa:	66 c1 e8 08          	shr    $0x8,%ax
   13fae:	0f b6 c0             	movzbl %al,%eax
   13fb1:	83 ec 08             	sub    $0x8,%esp
   13fb4:	50                   	push   %eax
   13fb5:	68 d5 03 00 00       	push   $0x3d5
   13fba:	e8 37 f4 ff ff       	call   133f6 <outb>
   13fbf:	83 c4 10             	add    $0x10,%esp
    outb(0x3d4, 0xd);//告诉端口要写屏幕起始索引的低8位
   13fc2:	83 ec 08             	sub    $0x8,%esp
   13fc5:	6a 0d                	push   $0xd
   13fc7:	68 d4 03 00 00       	push   $0x3d4
   13fcc:	e8 25 f4 ff ff       	call   133f6 <outb>
   13fd1:	83 c4 10             	add    $0x10,%esp
    outb(0x3d5, (uint8_t)(pos & 0xff));  
   13fd4:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   13fd8:	0f b6 c0             	movzbl %al,%eax
   13fdb:	83 ec 08             	sub    $0x8,%esp
   13fde:	50                   	push   %eax
   13fdf:	68 d5 03 00 00       	push   $0x3d5
   13fe4:	e8 0d f4 ff ff       	call   133f6 <outb>
   13fe9:	83 c4 10             	add    $0x10,%esp

    //更新当前使用控制台
    curr_console_index = console_index;
   13fec:	8b 45 08             	mov    0x8(%ebp),%eax
   13fef:	a3 40 c7 04 00       	mov    %eax,0x4c740

    //在控制台显示终端设备号
    show_char(console, console_index + '0');
   13ff4:	8b 45 08             	mov    0x8(%ebp),%eax
   13ff7:	83 c0 30             	add    $0x30,%eax
   13ffa:	0f be c0             	movsbl %al,%eax
   13ffd:	83 ec 08             	sub    $0x8,%esp
   14000:	50                   	push   %eax
   14001:	ff 75 f4             	push   -0xc(%ebp)
   14004:	e8 e8 f6 ff ff       	call   136f1 <show_char>
   14009:	83 c4 10             	add    $0x10,%esp

    //更新光标位置
    update_cursor_pos(console);
   1400c:	83 ec 0c             	sub    $0xc,%esp
   1400f:	ff 75 f4             	push   -0xc(%ebp)
   14012:	e8 74 f4 ff ff       	call   1348b <update_cursor_pos>
   14017:	83 c4 10             	add    $0x10,%esp

   

   1401a:	90                   	nop
   1401b:	c9                   	leave  
   1401c:	c3                   	ret    

0001401d <is_dev_exist>:
 * @brief 根据设备id判断设备是否存在
 * 
 * @param dev_id 
 * @return int 
 */
static int is_dev_exist(int dev_id) {
   1401d:	55                   	push   %ebp
   1401e:	89 e5                	mov    %esp,%ebp
    //dev_id越界，设备不存在
    if (dev_id < 0 || dev_id >= DEV_TABLE_SIZE) {
   14020:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   14024:	78 06                	js     1402c <is_dev_exist+0xf>
   14026:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   1402a:	7e 07                	jle    14033 <is_dev_exist+0x16>
        return 0;
   1402c:	b8 00 00 00 00       	mov    $0x0,%eax
   14031:	eb 3c                	jmp    1406f <is_dev_exist+0x52>
    }
    
    //设备空间未初始化，设备不存在
    if (dev_table[dev_id].open_count == 0 || dev_table[dev_id].desc == (dev_desc_t*)0) {
   14033:	8b 55 08             	mov    0x8(%ebp),%edx
   14036:	89 d0                	mov    %edx,%eax
   14038:	c1 e0 02             	shl    $0x2,%eax
   1403b:	01 d0                	add    %edx,%eax
   1403d:	c1 e0 02             	shl    $0x2,%eax
   14040:	05 70 c7 04 00       	add    $0x4c770,%eax
   14045:	8b 00                	mov    (%eax),%eax
   14047:	85 c0                	test   %eax,%eax
   14049:	74 18                	je     14063 <is_dev_exist+0x46>
   1404b:	8b 55 08             	mov    0x8(%ebp),%edx
   1404e:	89 d0                	mov    %edx,%eax
   14050:	c1 e0 02             	shl    $0x2,%eax
   14053:	01 d0                	add    %edx,%eax
   14055:	c1 e0 02             	shl    $0x2,%eax
   14058:	05 60 c7 04 00       	add    $0x4c760,%eax
   1405d:	8b 00                	mov    (%eax),%eax
   1405f:	85 c0                	test   %eax,%eax
   14061:	75 07                	jne    1406a <is_dev_exist+0x4d>
        return 0;
   14063:	b8 00 00 00 00       	mov    $0x0,%eax
   14068:	eb 05                	jmp    1406f <is_dev_exist+0x52>
    }

    return 1;
   1406a:	b8 01 00 00 00       	mov    $0x1,%eax
}
   1406f:	5d                   	pop    %ebp
   14070:	c3                   	ret    

00014071 <dev_open>:
 * @param dev_type 打开的设备类型
 * @param dev_index 打开的对应类型设备中的具体设备号
 * @param data 设备需要的参数数据
 * @return int 返回dev_id，该设备的描述符
 */
int dev_open(int dev_type, int dev_index, void *data) {
   14071:	55                   	push   %ebp
   14072:	89 e5                	mov    %esp,%ebp
   14074:	83 ec 28             	sub    $0x28,%esp
    //1.关中断，确保线程成功获取到设备描述符
    idt_state_t state = idt_enter_protection();
   14077:	e8 8b f2 ff ff       	call   13307 <idt_enter_protection>
   1407c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    
    //2.遍历dev_table，若该设备打开过则记录打开次数再返回描述符
    //若未打开过则在dev_table分配空间给该设备，并打开该设备
    device_t *free_dev = (device_t*)0;
   1407f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (int i = 0; i < sizeof(dev_table) / sizeof(dev_table[0]); ++i) {
   14086:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   1408d:	eb 68                	jmp    140f7 <dev_open+0x86>
        device_t *dev = dev_table + i;
   1408f:	8b 55 f0             	mov    -0x10(%ebp),%edx
   14092:	89 d0                	mov    %edx,%eax
   14094:	c1 e0 02             	shl    $0x2,%eax
   14097:	01 d0                	add    %edx,%eax
   14099:	c1 e0 02             	shl    $0x2,%eax
   1409c:	05 60 c7 04 00       	add    $0x4c760,%eax
   140a1:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (dev->open_count == 0) { 
   140a4:	8b 45 e0             	mov    -0x20(%ebp),%eax
   140a7:	8b 40 10             	mov    0x10(%eax),%eax
   140aa:	85 c0                	test   %eax,%eax
   140ac:	75 08                	jne    140b6 <dev_open+0x45>
            //需要打开的设备未打开过，为该设备分配空间
            free_dev = dev;
   140ae:	8b 45 e0             	mov    -0x20(%ebp),%eax
   140b1:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   140b4:	eb 49                	jmp    140ff <dev_open+0x8e>
        } else if (dev->desc->dev_type == dev_type && dev->dev_index == dev_index) {
   140b6:	8b 45 e0             	mov    -0x20(%ebp),%eax
   140b9:	8b 00                	mov    (%eax),%eax
   140bb:	8b 40 14             	mov    0x14(%eax),%eax
   140be:	39 45 08             	cmp    %eax,0x8(%ebp)
   140c1:	75 30                	jne    140f3 <dev_open+0x82>
   140c3:	8b 45 e0             	mov    -0x20(%ebp),%eax
   140c6:	8b 40 08             	mov    0x8(%eax),%eax
   140c9:	39 45 0c             	cmp    %eax,0xc(%ebp)
   140cc:	75 25                	jne    140f3 <dev_open+0x82>
            //设备已打开过,增加打开次数
            dev->open_count++;
   140ce:	8b 45 e0             	mov    -0x20(%ebp),%eax
   140d1:	8b 40 10             	mov    0x10(%eax),%eax
   140d4:	8d 50 01             	lea    0x1(%eax),%edx
   140d7:	8b 45 e0             	mov    -0x20(%ebp),%eax
   140da:	89 50 10             	mov    %edx,0x10(%eax)
            idt_leave_protection(state);
   140dd:	83 ec 0c             	sub    $0xc,%esp
   140e0:	ff 75 e4             	push   -0x1c(%ebp)
   140e3:	e8 37 f2 ff ff       	call   1331f <idt_leave_protection>
   140e8:	83 c4 10             	add    $0x10,%esp
            //返回设备描述符
            return i;
   140eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   140ee:	e9 c6 00 00 00       	jmp    141b9 <dev_open+0x148>
    for (int i = 0; i < sizeof(dev_table) / sizeof(dev_table[0]); ++i) {
   140f3:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   140f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   140fa:	83 f8 7f             	cmp    $0x7f,%eax
   140fd:	76 90                	jbe    1408f <dev_open+0x1e>
        }
    }

    //3.设备未打开过，遍历设备类型描述表，寻找对应的设备类型用于初始化该设备
    dev_desc_t *desc = (dev_desc_t*)0;
   140ff:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    for (int i = 0; i < sizeof(dev_des_table) / sizeof(dev_des_table[0]); ++i) {
   14106:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   1410d:	eb 24                	jmp    14133 <dev_open+0xc2>
        dev_desc_t *d = dev_des_table[i];
   1410f:	8b 45 e8             	mov    -0x18(%ebp),%eax
   14112:	8b 04 85 50 90 01 00 	mov    0x19050(,%eax,4),%eax
   14119:	89 45 dc             	mov    %eax,-0x24(%ebp)
        if (d->dev_type == dev_type) {
   1411c:	8b 45 dc             	mov    -0x24(%ebp),%eax
   1411f:	8b 40 14             	mov    0x14(%eax),%eax
   14122:	39 45 08             	cmp    %eax,0x8(%ebp)
   14125:	75 08                	jne    1412f <dev_open+0xbe>
            desc = d;
   14127:	8b 45 dc             	mov    -0x24(%ebp),%eax
   1412a:	89 45 ec             	mov    %eax,-0x14(%ebp)
            break;
   1412d:	eb 0c                	jmp    1413b <dev_open+0xca>
    for (int i = 0; i < sizeof(dev_des_table) / sizeof(dev_des_table[0]); ++i) {
   1412f:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   14133:	8b 45 e8             	mov    -0x18(%ebp),%eax
   14136:	83 f8 01             	cmp    $0x1,%eax
   14139:	76 d4                	jbe    1410f <dev_open+0x9e>
        }
    }

    //4.设备描述结构存在，设备空间分配成功，进行设备的初始化
    if (desc && free_dev) {
   1413b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1413f:	74 65                	je     141a6 <dev_open+0x135>
   14141:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   14145:	74 5f                	je     141a6 <dev_open+0x135>
        free_dev->desc = desc;
   14147:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1414a:	8b 55 ec             	mov    -0x14(%ebp),%edx
   1414d:	89 10                	mov    %edx,(%eax)
        free_dev->data = data;
   1414f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14152:	8b 55 10             	mov    0x10(%ebp),%edx
   14155:	89 50 0c             	mov    %edx,0xc(%eax)
        free_dev->dev_index = dev_index;
   14158:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1415b:	8b 55 0c             	mov    0xc(%ebp),%edx
   1415e:	89 50 08             	mov    %edx,0x8(%eax)

        //用该设备描述结构打开该设备
        int err = desc->open(free_dev);
   14161:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14164:	8b 40 18             	mov    0x18(%eax),%eax
   14167:	83 ec 0c             	sub    $0xc,%esp
   1416a:	ff 75 f4             	push   -0xc(%ebp)
   1416d:	ff d0                	call   *%eax
   1416f:	83 c4 10             	add    $0x10,%esp
   14172:	89 45 d8             	mov    %eax,-0x28(%ebp)
        if (err == 0) { //打开成功
   14175:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
   14179:	75 2b                	jne    141a6 <dev_open+0x135>
            free_dev->open_count = 1;
   1417b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1417e:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
            idt_leave_protection(state);
   14185:	83 ec 0c             	sub    $0xc,%esp
   14188:	ff 75 e4             	push   -0x1c(%ebp)
   1418b:	e8 8f f1 ff ff       	call   1331f <idt_leave_protection>
   14190:	83 c4 10             	add    $0x10,%esp
            //返回设备描述符
            return free_dev - dev_table;
   14193:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14196:	2d 60 c7 04 00       	sub    $0x4c760,%eax
   1419b:	c1 f8 02             	sar    $0x2,%eax
   1419e:	69 c0 cd cc cc cc    	imul   $0xcccccccd,%eax,%eax
   141a4:	eb 13                	jmp    141b9 <dev_open+0x148>

        }
    }

    idt_leave_protection(state);
   141a6:	83 ec 0c             	sub    $0xc,%esp
   141a9:	ff 75 e4             	push   -0x1c(%ebp)
   141ac:	e8 6e f1 ff ff       	call   1331f <idt_leave_protection>
   141b1:	83 c4 10             	add    $0x10,%esp
    return -1;
   141b4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   141b9:	c9                   	leave  
   141ba:	c3                   	ret    

000141bb <dev_read>:
 * @param addr 读取地址
 * @param buf 读取数据缓冲区
 * @param size 读取字节大小
 * @return int 成功读取大小
 */
int dev_read(int dev_id, int addr, const char *buf, int size) {
   141bb:	55                   	push   %ebp
   141bc:	89 e5                	mov    %esp,%ebp
   141be:	83 ec 18             	sub    $0x18,%esp
    //设备不存在，直接返回-1
    if (!is_dev_exist(dev_id)) {
   141c1:	ff 75 08             	push   0x8(%ebp)
   141c4:	e8 54 fe ff ff       	call   1401d <is_dev_exist>
   141c9:	83 c4 04             	add    $0x4,%esp
   141cc:	85 c0                	test   %eax,%eax
   141ce:	75 07                	jne    141d7 <dev_read+0x1c>
        return -1;
   141d0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   141d5:	eb 2e                	jmp    14205 <dev_read+0x4a>
    }

    //获取设备，并通过其描述结构的操作接口进行真正的读操作
    device_t *dev = dev_table + dev_id;
   141d7:	8b 55 08             	mov    0x8(%ebp),%edx
   141da:	89 d0                	mov    %edx,%eax
   141dc:	c1 e0 02             	shl    $0x2,%eax
   141df:	01 d0                	add    %edx,%eax
   141e1:	c1 e0 02             	shl    $0x2,%eax
   141e4:	05 60 c7 04 00       	add    $0x4c760,%eax
   141e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dev->desc->read(dev, addr, buf, size);
   141ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
   141ef:	8b 00                	mov    (%eax),%eax
   141f1:	8b 40 1c             	mov    0x1c(%eax),%eax
   141f4:	ff 75 14             	push   0x14(%ebp)
   141f7:	ff 75 10             	push   0x10(%ebp)
   141fa:	ff 75 0c             	push   0xc(%ebp)
   141fd:	ff 75 f4             	push   -0xc(%ebp)
   14200:	ff d0                	call   *%eax
   14202:	83 c4 10             	add    $0x10,%esp
}
   14205:	c9                   	leave  
   14206:	c3                   	ret    

00014207 <dev_write>:
 * @param addr 写入地址
 * @param buf 写入数据缓冲区
 * @param size 写入字节大小
 * @return int 成功写入大小
 */
int dev_write(int dev_id, int addr, const char *buf, int size)  {
   14207:	55                   	push   %ebp
   14208:	89 e5                	mov    %esp,%ebp
   1420a:	83 ec 18             	sub    $0x18,%esp
    //设备不存在，直接返回-1
    if (!is_dev_exist(dev_id)) {
   1420d:	ff 75 08             	push   0x8(%ebp)
   14210:	e8 08 fe ff ff       	call   1401d <is_dev_exist>
   14215:	83 c4 04             	add    $0x4,%esp
   14218:	85 c0                	test   %eax,%eax
   1421a:	75 07                	jne    14223 <dev_write+0x1c>
        return -1;
   1421c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14221:	eb 2e                	jmp    14251 <dev_write+0x4a>
    }

    //获取设备，并通过其描述结构的操作接口进行真正的写操作
    device_t *dev = dev_table + dev_id;
   14223:	8b 55 08             	mov    0x8(%ebp),%edx
   14226:	89 d0                	mov    %edx,%eax
   14228:	c1 e0 02             	shl    $0x2,%eax
   1422b:	01 d0                	add    %edx,%eax
   1422d:	c1 e0 02             	shl    $0x2,%eax
   14230:	05 60 c7 04 00       	add    $0x4c760,%eax
   14235:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dev->desc->write(dev, addr, buf, size);
   14238:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1423b:	8b 00                	mov    (%eax),%eax
   1423d:	8b 40 20             	mov    0x20(%eax),%eax
   14240:	ff 75 14             	push   0x14(%ebp)
   14243:	ff 75 10             	push   0x10(%ebp)
   14246:	ff 75 0c             	push   0xc(%ebp)
   14249:	ff 75 f4             	push   -0xc(%ebp)
   1424c:	ff d0                	call   *%eax
   1424e:	83 c4 10             	add    $0x10,%esp
}
   14251:	c9                   	leave  
   14252:	c3                   	ret    

00014253 <dev_control>:
 * @param cmd 控制指令
 * @param arg0 指令参数
 * @param arg1 指令参数
 * @return int 
 */
int dev_control(int dev_id, int cmd, int arg0, int arg1) {
   14253:	55                   	push   %ebp
   14254:	89 e5                	mov    %esp,%ebp
   14256:	83 ec 18             	sub    $0x18,%esp
    //设备不存在，直接返回-1
    if (!is_dev_exist(dev_id)) {
   14259:	ff 75 08             	push   0x8(%ebp)
   1425c:	e8 bc fd ff ff       	call   1401d <is_dev_exist>
   14261:	83 c4 04             	add    $0x4,%esp
   14264:	85 c0                	test   %eax,%eax
   14266:	75 07                	jne    1426f <dev_control+0x1c>
        return -1;
   14268:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1426d:	eb 2e                	jmp    1429d <dev_control+0x4a>
    }

    //获取设备，并通过其描述结构的操作接口进行真正的控制操作
    device_t *dev = dev_table + dev_id;
   1426f:	8b 55 08             	mov    0x8(%ebp),%edx
   14272:	89 d0                	mov    %edx,%eax
   14274:	c1 e0 02             	shl    $0x2,%eax
   14277:	01 d0                	add    %edx,%eax
   14279:	c1 e0 02             	shl    $0x2,%eax
   1427c:	05 60 c7 04 00       	add    $0x4c760,%eax
   14281:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dev->desc->control(dev, cmd, arg0, arg1);
   14284:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14287:	8b 00                	mov    (%eax),%eax
   14289:	8b 40 24             	mov    0x24(%eax),%eax
   1428c:	ff 75 14             	push   0x14(%ebp)
   1428f:	ff 75 10             	push   0x10(%ebp)
   14292:	ff 75 0c             	push   0xc(%ebp)
   14295:	ff 75 f4             	push   -0xc(%ebp)
   14298:	ff d0                	call   *%eax
   1429a:	83 c4 10             	add    $0x10,%esp
}
   1429d:	c9                   	leave  
   1429e:	c3                   	ret    

0001429f <dev_close>:
/**
 * @brief 关闭设备
 * 
 * @param dev_id 设备描述符
 */
void dev_close(int dev_id) {
   1429f:	55                   	push   %ebp
   142a0:	89 e5                	mov    %esp,%ebp
   142a2:	83 ec 18             	sub    $0x18,%esp
    //设备不存在，直接返回-1
    if (!is_dev_exist(dev_id)) {
   142a5:	ff 75 08             	push   0x8(%ebp)
   142a8:	e8 70 fd ff ff       	call   1401d <is_dev_exist>
   142ad:	83 c4 04             	add    $0x4,%esp
   142b0:	85 c0                	test   %eax,%eax
   142b2:	74 6b                	je     1431f <dev_close+0x80>
        return;
    }

    //获取设备，并通过其描述结构的操作接口进行真正的关闭操作
    device_t *dev = dev_table + dev_id;
   142b4:	8b 55 08             	mov    0x8(%ebp),%edx
   142b7:	89 d0                	mov    %edx,%eax
   142b9:	c1 e0 02             	shl    $0x2,%eax
   142bc:	01 d0                	add    %edx,%eax
   142be:	c1 e0 02             	shl    $0x2,%eax
   142c1:	05 60 c7 04 00       	add    $0x4c760,%eax
   142c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    //释放资源
    idt_state_t state = idt_enter_protection();
   142c9:	e8 39 f0 ff ff       	call   13307 <idt_enter_protection>
   142ce:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (--dev->open_count == 0) {   //该设备已不被操作系统引用，可以关闭
   142d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   142d4:	8b 40 10             	mov    0x10(%eax),%eax
   142d7:	8d 50 ff             	lea    -0x1(%eax),%edx
   142da:	8b 45 f4             	mov    -0xc(%ebp),%eax
   142dd:	89 50 10             	mov    %edx,0x10(%eax)
   142e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   142e3:	8b 40 10             	mov    0x10(%eax),%eax
   142e6:	85 c0                	test   %eax,%eax
   142e8:	75 25                	jne    1430f <dev_close+0x70>
        //关闭设备
        dev->desc->close(dev);
   142ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
   142ed:	8b 00                	mov    (%eax),%eax
   142ef:	8b 40 28             	mov    0x28(%eax),%eax
   142f2:	83 ec 0c             	sub    $0xc,%esp
   142f5:	ff 75 f4             	push   -0xc(%ebp)
   142f8:	ff d0                	call   *%eax
   142fa:	83 c4 10             	add    $0x10,%esp
        //释放设备空间资源
        kernel_memset(dev, 0, sizeof(device_t));
   142fd:	83 ec 04             	sub    $0x4,%esp
   14300:	6a 14                	push   $0x14
   14302:	6a 00                	push   $0x0
   14304:	ff 75 f4             	push   -0xc(%ebp)
   14307:	e8 0f 28 00 00       	call   16b1b <kernel_memset>
   1430c:	83 c4 10             	add    $0x10,%esp
    }

    idt_leave_protection(state);
   1430f:	83 ec 0c             	sub    $0xc,%esp
   14312:	ff 75 f0             	push   -0x10(%ebp)
   14315:	e8 05 f0 ff ff       	call   1331f <idt_leave_protection>
   1431a:	83 c4 10             	add    $0x10,%esp
   1431d:	eb 01                	jmp    14320 <dev_close+0x81>
        return;
   1431f:	90                   	nop
   14320:	c9                   	leave  
   14321:	c3                   	ret    

00014322 <disk_init>:

#include "dev/disk.h"

static disk_t disk_table[];

void disk_init(void) {
   14322:	55                   	push   %ebp
   14323:	89 e5                	mov    %esp,%ebp
    
   14325:	90                   	nop
   14326:	5d                   	pop    %ebp
   14327:	c3                   	ret    

00014328 <inb>:
static inline uint8_t inb(uint16_t port) {
   14328:	55                   	push   %ebp
   14329:	89 e5                	mov    %esp,%ebp
   1432b:	83 ec 14             	sub    $0x14,%esp
   1432e:	8b 45 08             	mov    0x8(%ebp),%eax
   14331:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   14335:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   14339:	89 c2                	mov    %eax,%edx
   1433b:	ec                   	in     (%dx),%al
   1433c:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   1433f:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   14343:	c9                   	leave  
   14344:	c3                   	ret    

00014345 <is_make_code>:
 * @brief 判断按键是按下还是弹起
 * 
 * @param key_code 
 * @return int 
 */
static inline int is_make_code(uint8_t key_code) {
   14345:	55                   	push   %ebp
   14346:	89 e5                	mov    %esp,%ebp
   14348:	83 ec 04             	sub    $0x4,%esp
   1434b:	8b 45 08             	mov    0x8(%ebp),%eax
   1434e:	88 45 fc             	mov    %al,-0x4(%ebp)
    return !(key_code & 0x80);  //key_code的第7位为1则为按下，为0则为弹起
   14351:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
   14355:	f7 d0                	not    %eax
   14357:	c0 e8 07             	shr    $0x7,%al
   1435a:	0f b6 c0             	movzbl %al,%eax
}
   1435d:	c9                   	leave  
   1435e:	c3                   	ret    

0001435f <get_key>:
 * @brief 获取真正的键值码，用来映射键值
 * 
 * @param key_code 
 * @return int 
 */
static inline int get_key(uint8_t key_code) {
   1435f:	55                   	push   %ebp
   14360:	89 e5                	mov    %esp,%ebp
   14362:	83 ec 04             	sub    $0x4,%esp
   14365:	8b 45 08             	mov    0x8(%ebp),%eax
   14368:	88 45 fc             	mov    %al,-0x4(%ebp)
    return key_code & 0x7f; //key_code的低7位为键值码
   1436b:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
   1436f:	83 e0 7f             	and    $0x7f,%eax
}
   14372:	c9                   	leave  
   14373:	c3                   	ret    

00014374 <do_fx_key>:
/**
 * @brief 对F1~F8功能键进行处理
 * 
 * @param key 
 */
static void do_fx_key(char key) {
   14374:	55                   	push   %ebp
   14375:	89 e5                	mov    %esp,%ebp
   14377:	83 ec 28             	sub    $0x28,%esp
   1437a:	8b 45 08             	mov    0x8(%ebp),%eax
   1437d:	88 45 e4             	mov    %al,-0x1c(%ebp)
    int index = key - KEY_F1;
   14380:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
   14384:	83 e8 3b             	sub    $0x3b,%eax
   14387:	89 45 f4             	mov    %eax,-0xc(%ebp)
    //在ctr键按下的情况下才进行处理
    if (kbd_state.lctrl_press || kbd_state.rctrl_press) {
   1438a:	0f b6 05 78 d2 04 00 	movzbl 0x4d278,%eax
   14391:	83 e0 20             	and    $0x20,%eax
   14394:	84 c0                	test   %al,%al
   14396:	75 0e                	jne    143a6 <do_fx_key+0x32>
   14398:	0f b6 05 78 d2 04 00 	movzbl 0x4d278,%eax
   1439f:	83 e0 40             	and    $0x40,%eax
   143a2:	84 c0                	test   %al,%al
   143a4:	74 0e                	je     143b4 <do_fx_key+0x40>
        tty_select(index);
   143a6:	83 ec 0c             	sub    $0xc,%esp
   143a9:	ff 75 f4             	push   -0xc(%ebp)
   143ac:	e8 65 09 00 00       	call   14d16 <tty_select>
   143b1:	83 c4 10             	add    $0x10,%esp
    }
}
   143b4:	90                   	nop
   143b5:	c9                   	leave  
   143b6:	c3                   	ret    

000143b7 <do_normal_key>:
/**
 * @brief 处理键盘按键按下时得到的原码
 *  
 * @param key_code 键按下时得到的原码
 */
static void do_normal_key(uint8_t key_code) {
   143b7:	55                   	push   %ebp
   143b8:	89 e5                	mov    %esp,%ebp
   143ba:	83 ec 28             	sub    $0x28,%esp
   143bd:	8b 45 08             	mov    0x8(%ebp),%eax
   143c0:	88 45 e4             	mov    %al,-0x1c(%ebp)
    char key = get_key(key_code);
   143c3:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
   143c7:	50                   	push   %eax
   143c8:	e8 92 ff ff ff       	call   1435f <get_key>
   143cd:	83 c4 04             	add    $0x4,%esp
   143d0:	88 45 f7             	mov    %al,-0x9(%ebp)
    int is_make = is_make_code(key_code);
   143d3:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
   143d7:	50                   	push   %eax
   143d8:	e8 68 ff ff ff       	call   14345 <is_make_code>
   143dd:	83 c4 04             	add    $0x4,%esp
   143e0:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //处理对应按键
    switch (key) {
   143e3:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   143e7:	83 e8 1d             	sub    $0x1d,%eax
   143ea:	83 f8 3b             	cmp    $0x3b,%eax
   143ed:	0f 87 06 01 00 00    	ja     144f9 <do_normal_key+0x142>
   143f3:	8b 04 85 a0 81 01 00 	mov    0x181a0(,%eax,4),%eax
   143fa:	ff e0                	jmp    *%eax
        case KEY_RSHIFT:
            kbd_state.rshift_press = is_make ? 1 : 0;
   143fc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14400:	0f 95 c0             	setne  %al
   14403:	c1 e0 07             	shl    $0x7,%eax
   14406:	c0 f8 07             	sar    $0x7,%al
   14409:	83 e0 01             	and    $0x1,%eax
   1440c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   14413:	0f b6 05 78 d2 04 00 	movzbl 0x4d278,%eax
   1441a:	83 e0 fb             	and    $0xfffffffb,%eax
   1441d:	09 d0                	or     %edx,%eax
   1441f:	a2 78 d2 04 00       	mov    %al,0x4d278
            break;
   14424:	e9 6b 01 00 00       	jmp    14594 <do_normal_key+0x1dd>
        
        case KEY_LSHIFT:
            kbd_state.lshift_press = is_make ? 1 : 0;
   14429:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1442d:	0f 95 c0             	setne  %al
   14430:	c1 e0 07             	shl    $0x7,%eax
   14433:	c0 f8 07             	sar    $0x7,%al
   14436:	83 e0 01             	and    $0x1,%eax
   14439:	8d 14 00             	lea    (%eax,%eax,1),%edx
   1443c:	0f b6 05 78 d2 04 00 	movzbl 0x4d278,%eax
   14443:	83 e0 fd             	and    $0xfffffffd,%eax
   14446:	09 d0                	or     %edx,%eax
   14448:	a2 78 d2 04 00       	mov    %al,0x4d278
            break;  
   1444d:	e9 42 01 00 00       	jmp    14594 <do_normal_key+0x1dd>
        case KEY_CAPS:
            if (is_make) {
   14452:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14456:	0f 84 34 01 00 00    	je     14590 <do_normal_key+0x1d9>
                kbd_state.caps_lock = ~kbd_state.caps_lock;
   1445c:	0f b6 05 78 d2 04 00 	movzbl 0x4d278,%eax
   14463:	c1 e0 07             	shl    $0x7,%eax
   14466:	c0 f8 07             	sar    $0x7,%al
   14469:	f7 d0                	not    %eax
   1446b:	c1 e0 07             	shl    $0x7,%eax
   1446e:	c0 f8 07             	sar    $0x7,%al
   14471:	83 e0 01             	and    $0x1,%eax
   14474:	89 c2                	mov    %eax,%edx
   14476:	0f b6 05 78 d2 04 00 	movzbl 0x4d278,%eax
   1447d:	83 e0 fe             	and    $0xfffffffe,%eax
   14480:	09 d0                	or     %edx,%eax
   14482:	a2 78 d2 04 00       	mov    %al,0x4d278
            }
            break;
   14487:	e9 04 01 00 00       	jmp    14590 <do_normal_key+0x1d9>
        
        case KEY_ALT:
            kbd_state.lalt_press = is_make ? 1 : 0;
   1448c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14490:	0f 95 c0             	setne  %al
   14493:	c1 e0 07             	shl    $0x7,%eax
   14496:	c0 f8 07             	sar    $0x7,%al
   14499:	83 e0 01             	and    $0x1,%eax
   1449c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   144a3:	0f b6 05 78 d2 04 00 	movzbl 0x4d278,%eax
   144aa:	83 e0 f7             	and    $0xfffffff7,%eax
   144ad:	09 d0                	or     %edx,%eax
   144af:	a2 78 d2 04 00       	mov    %al,0x4d278
            break;
   144b4:	e9 db 00 00 00       	jmp    14594 <do_normal_key+0x1dd>
        case KEY_CTRL:
            kbd_state.lctrl_press = is_make ? 1 : 0;
   144b9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   144bd:	0f 95 c0             	setne  %al
   144c0:	c1 e0 07             	shl    $0x7,%eax
   144c3:	c0 f8 07             	sar    $0x7,%al
   144c6:	83 e0 01             	and    $0x1,%eax
   144c9:	c1 e0 05             	shl    $0x5,%eax
   144cc:	89 c2                	mov    %eax,%edx
   144ce:	0f b6 05 78 d2 04 00 	movzbl 0x4d278,%eax
   144d5:	83 e0 df             	and    $0xffffffdf,%eax
   144d8:	09 d0                	or     %edx,%eax
   144da:	a2 78 d2 04 00       	mov    %al,0x4d278
            break;
   144df:	e9 b0 00 00 00       	jmp    14594 <do_normal_key+0x1dd>
        case KEY_F4:
        case KEY_F5:
        case KEY_F6:
        case KEY_F7:
        case KEY_F8:
            do_fx_key(key);
   144e4:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   144e8:	83 ec 0c             	sub    $0xc,%esp
   144eb:	50                   	push   %eax
   144ec:	e8 83 fe ff ff       	call   14374 <do_fx_key>
   144f1:	83 c4 10             	add    $0x10,%esp
            break;
   144f4:	e9 9b 00 00 00       	jmp    14594 <do_normal_key+0x1dd>
            break;
        case KEY_F12:
            break;

        default:    //处理可被映射的非功能键
            if (is_make) {
   144f9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   144fd:	0f 84 90 00 00 00    	je     14593 <do_normal_key+0x1dc>
                    if (kbd_state.rshift_press || kbd_state.lshift_press) {
   14503:	0f b6 05 78 d2 04 00 	movzbl 0x4d278,%eax
   1450a:	83 e0 04             	and    $0x4,%eax
   1450d:	84 c0                	test   %al,%al
   1450f:	75 0e                	jne    1451f <do_normal_key+0x168>
   14511:	0f b6 05 78 d2 04 00 	movzbl 0x4d278,%eax
   14518:	83 e0 02             	and    $0x2,%eax
   1451b:	84 c0                	test   %al,%al
   1451d:	74 11                	je     14530 <do_normal_key+0x179>
                        //shift功能键已被按下，获取该键的对应值
                        key = map_table[key].func;
   1451f:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14523:	0f b6 84 00 a1 7f 01 	movzbl 0x17fa1(%eax,%eax,1),%eax
   1452a:	00 
   1452b:	88 45 f7             	mov    %al,-0x9(%ebp)
   1452e:	eb 0f                	jmp    1453f <do_normal_key+0x188>
                    } else {
                        key = map_table[key].normal;
   14530:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14534:	0f b6 84 00 a0 7f 01 	movzbl 0x17fa0(%eax,%eax,1),%eax
   1453b:	00 
   1453c:	88 45 f7             	mov    %al,-0x9(%ebp)
                    }

                    if (kbd_state.caps_lock) {  //当前状态下大写锁定已开启
   1453f:	0f b6 05 78 d2 04 00 	movzbl 0x4d278,%eax
   14546:	83 e0 01             	and    $0x1,%eax
   14549:	84 c0                	test   %al,%al
   1454b:	74 2e                	je     1457b <do_normal_key+0x1c4>
                        if ((key >= 'A' && key <= 'Z')) {
   1454d:	80 7d f7 40          	cmpb   $0x40,-0x9(%ebp)
   14551:	7e 12                	jle    14565 <do_normal_key+0x1ae>
   14553:	80 7d f7 5a          	cmpb   $0x5a,-0x9(%ebp)
   14557:	7f 0c                	jg     14565 <do_normal_key+0x1ae>
                            key = key - 'A' + 'a';
   14559:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
   1455d:	83 c0 20             	add    $0x20,%eax
   14560:	88 45 f7             	mov    %al,-0x9(%ebp)
   14563:	eb 16                	jmp    1457b <do_normal_key+0x1c4>
                        } else if (key >= 'a' && key <= 'z') {
   14565:	80 7d f7 60          	cmpb   $0x60,-0x9(%ebp)
   14569:	7e 10                	jle    1457b <do_normal_key+0x1c4>
   1456b:	80 7d f7 7a          	cmpb   $0x7a,-0x9(%ebp)
   1456f:	7f 0a                	jg     1457b <do_normal_key+0x1c4>
                            key = key -'a' + 'A';
   14571:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
   14575:	83 e8 20             	sub    $0x20,%eax
   14578:	88 45 f7             	mov    %al,-0x9(%ebp)
                        }
                    }
                // log_printf("key: %c\n", key);
                // log_printf("sizeof(kbd_state_t) = %d\n", sizeof(kbd_state_t));
                //将读取的键值放入tty设备的输入缓冲区
                tty_in(key);
   1457b:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   1457f:	83 ec 0c             	sub    $0xc,%esp
   14582:	50                   	push   %eax
   14583:	e8 28 07 00 00       	call   14cb0 <tty_in>
   14588:	83 c4 10             	add    $0x10,%esp
            }
            break;
   1458b:	eb 06                	jmp    14593 <do_normal_key+0x1dc>
            break;
   1458d:	90                   	nop
   1458e:	eb 04                	jmp    14594 <do_normal_key+0x1dd>
            break;
   14590:	90                   	nop
   14591:	eb 01                	jmp    14594 <do_normal_key+0x1dd>
            break;
   14593:	90                   	nop
    }
}
   14594:	90                   	nop
   14595:	c9                   	leave  
   14596:	c3                   	ret    

00014597 <do_e0_key>:
/**
 * @brief 处理0xE0开头的键值码，即EBGIN_E0状态下接收到的键值码
 * 
 * @param key_code 
 */
static void do_e0_key(uint8_t key_code) {
   14597:	55                   	push   %ebp
   14598:	89 e5                	mov    %esp,%ebp
   1459a:	83 ec 14             	sub    $0x14,%esp
   1459d:	8b 45 08             	mov    0x8(%ebp),%eax
   145a0:	88 45 ec             	mov    %al,-0x14(%ebp)
    char key = get_key(key_code);
   145a3:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
   145a7:	50                   	push   %eax
   145a8:	e8 b2 fd ff ff       	call   1435f <get_key>
   145ad:	83 c4 04             	add    $0x4,%esp
   145b0:	88 45 ff             	mov    %al,-0x1(%ebp)
    int is_make = is_make_code(key_code);
   145b3:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
   145b7:	50                   	push   %eax
   145b8:	e8 88 fd ff ff       	call   14345 <is_make_code>
   145bd:	83 c4 04             	add    $0x4,%esp
   145c0:	89 45 f8             	mov    %eax,-0x8(%ebp)

    switch (key) {
   145c3:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
   145c7:	83 f8 1d             	cmp    $0x1d,%eax
   145ca:	74 07                	je     145d3 <do_e0_key+0x3c>
   145cc:	83 f8 38             	cmp    $0x38,%eax
   145cf:	74 2a                	je     145fb <do_e0_key+0x64>
        break;
    case KEY_ALT:
        kbd_state.ralt_press = is_make ? 1 : 0;
        break;
    default:
        break;
   145d1:	eb 4f                	jmp    14622 <do_e0_key+0x8b>
        kbd_state.rctrl_press = is_make ? 1 : 0;
   145d3:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
   145d7:	0f 95 c0             	setne  %al
   145da:	c1 e0 07             	shl    $0x7,%eax
   145dd:	c0 f8 07             	sar    $0x7,%al
   145e0:	83 e0 01             	and    $0x1,%eax
   145e3:	c1 e0 06             	shl    $0x6,%eax
   145e6:	89 c2                	mov    %eax,%edx
   145e8:	0f b6 05 78 d2 04 00 	movzbl 0x4d278,%eax
   145ef:	83 e0 bf             	and    $0xffffffbf,%eax
   145f2:	09 d0                	or     %edx,%eax
   145f4:	a2 78 d2 04 00       	mov    %al,0x4d278
        break;
   145f9:	eb 27                	jmp    14622 <do_e0_key+0x8b>
        kbd_state.ralt_press = is_make ? 1 : 0;
   145fb:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
   145ff:	0f 95 c0             	setne  %al
   14602:	c1 e0 07             	shl    $0x7,%eax
   14605:	c0 f8 07             	sar    $0x7,%al
   14608:	83 e0 01             	and    $0x1,%eax
   1460b:	c1 e0 04             	shl    $0x4,%eax
   1460e:	89 c2                	mov    %eax,%edx
   14610:	0f b6 05 78 d2 04 00 	movzbl 0x4d278,%eax
   14617:	83 e0 ef             	and    $0xffffffef,%eax
   1461a:	09 d0                	or     %edx,%eax
   1461c:	a2 78 d2 04 00       	mov    %al,0x4d278
        break;
   14621:	90                   	nop
    }
}
   14622:	90                   	nop
   14623:	c9                   	leave  
   14624:	c3                   	ret    

00014625 <kbd_init>:

/**
 * @brief 键盘初始化
 * 
 */
void kbd_init(void) {
   14625:	55                   	push   %ebp
   14626:	89 e5                	mov    %esp,%ebp
   14628:	83 ec 08             	sub    $0x8,%esp
    static uint8_t is_inited = 0;
    if (!is_inited)  {
   1462b:	0f b6 05 7c d2 04 00 	movzbl 0x4d27c,%eax
   14632:	84 c0                	test   %al,%al
   14634:	75 3a                	jne    14670 <kbd_init+0x4b>
        idt_install(IRQ1_KEYBOARD, (idt_handler_t)exception_handler_kbd);
   14636:	83 ec 08             	sub    $0x8,%esp
   14639:	68 98 02 01 00       	push   $0x10298
   1463e:	6a 21                	push   $0x21
   14640:	e8 bc e8 ff ff       	call   12f01 <idt_install>
   14645:	83 c4 10             	add    $0x10,%esp
        idt_enable(IRQ1_KEYBOARD);
   14648:	83 ec 0c             	sub    $0xc,%esp
   1464b:	6a 21                	push   $0x21
   1464d:	e8 3a eb ff ff       	call   1318c <idt_enable>
   14652:	83 c4 10             	add    $0x10,%esp
        kernel_memset(&kbd_state, 0, sizeof(kbd_state));
   14655:	83 ec 04             	sub    $0x4,%esp
   14658:	6a 04                	push   $0x4
   1465a:	6a 00                	push   $0x0
   1465c:	68 78 d2 04 00       	push   $0x4d278
   14661:	e8 b5 24 00 00       	call   16b1b <kernel_memset>
   14666:	83 c4 10             	add    $0x10,%esp
        is_inited = 1;
   14669:	c6 05 7c d2 04 00 01 	movb   $0x1,0x4d27c
    }
}
   14670:	90                   	nop
   14671:	c9                   	leave  
   14672:	c3                   	ret    

00014673 <do_handler_kbd>:

/**
 * @brief 键盘中断处理程序
 * 
 */
void do_handler_kbd(exception_frame_t *frame) {
   14673:	55                   	push   %ebp
   14674:	89 e5                	mov    %esp,%ebp
   14676:	83 ec 18             	sub    $0x18,%esp
        BEGIN_E0, //E0开始的键值码，占2个或4个字节
        BEGIN_E1, //E1开始的键值码，占6个字节
    }recv_state = NORMAL;

    //1.获取键盘的读取状态
    uint32_t status = inb(KBD_PORT_STAT);
   14679:	6a 64                	push   $0x64
   1467b:	e8 a8 fc ff ff       	call   14328 <inb>
   14680:	83 c4 04             	add    $0x4,%esp
   14683:	0f b6 c0             	movzbl %al,%eax
   14686:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!(status & KBD_STAT_RECV_READY)) {  //端口没有准备好的数据，直接结束中断
   14689:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1468c:	83 e0 01             	and    $0x1,%eax
   1468f:	85 c0                	test   %eax,%eax
   14691:	75 12                	jne    146a5 <do_handler_kbd+0x32>
        pic_send_eoi(IRQ1_KEYBOARD);
   14693:	83 ec 0c             	sub    $0xc,%esp
   14696:	6a 21                	push   $0x21
   14698:	e8 31 ec ff ff       	call   132ce <pic_send_eoi>
   1469d:	83 c4 10             	add    $0x10,%esp
        return;
   146a0:	e9 96 00 00 00       	jmp    1473b <do_handler_kbd+0xc8>
    }

    //2.端口数据已准备好，读取数据端口
    uint8_t key_code = inb(KBD_PORT_DATA);
   146a5:	83 ec 0c             	sub    $0xc,%esp
   146a8:	6a 60                	push   $0x60
   146aa:	e8 79 fc ff ff       	call   14328 <inb>
   146af:	83 c4 10             	add    $0x10,%esp
   146b2:	88 45 f3             	mov    %al,-0xd(%ebp)

    //3.因为ICW4的EOI位为0，所以要手动发送EOI即中断结束信号
    pic_send_eoi(IRQ1_KEYBOARD);
   146b5:	83 ec 0c             	sub    $0xc,%esp
   146b8:	6a 21                	push   $0x21
   146ba:	e8 0f ec ff ff       	call   132ce <pic_send_eoi>
   146bf:	83 c4 10             	add    $0x10,%esp

    //4.根据接受的键值原码的第一个字节，判断当前接收的原码的状态
    if (key_code == KEY_E0) {   //第一个字节为0xE0,代表还有后续字节
   146c2:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
   146c6:	75 0c                	jne    146d4 <do_handler_kbd+0x61>
        recv_state = BEGIN_E0;
   146c8:	c7 05 80 d2 04 00 01 	movl   $0x1,0x4d280
   146cf:	00 00 00 
   146d2:	eb 67                	jmp    1473b <do_handler_kbd+0xc8>
    } else if (key_code == KEY_E1) {    //第一个字节为0xE1，代表还有后续字节
   146d4:	80 7d f3 e1          	cmpb   $0xe1,-0xd(%ebp)
   146d8:	75 0c                	jne    146e6 <do_handler_kbd+0x73>
        recv_state = BEGIN_E1;
   146da:	c7 05 80 d2 04 00 02 	movl   $0x2,0x4d280
   146e1:	00 00 00 
   146e4:	eb 55                	jmp    1473b <do_handler_kbd+0xc8>
    } else {
        switch (recv_state) {
   146e6:	a1 80 d2 04 00       	mov    0x4d280,%eax
   146eb:	83 f8 02             	cmp    $0x2,%eax
   146ee:	74 3e                	je     1472e <do_handler_kbd+0xbb>
   146f0:	83 f8 02             	cmp    $0x2,%eax
   146f3:	77 45                	ja     1473a <do_handler_kbd+0xc7>
   146f5:	85 c0                	test   %eax,%eax
   146f7:	74 07                	je     14700 <do_handler_kbd+0x8d>
   146f9:	83 f8 01             	cmp    $0x1,%eax
   146fc:	74 14                	je     14712 <do_handler_kbd+0x9f>
                break;
            case BEGIN_E1://TODO: 读取的6字节原码, pause 键，暂不处理
                recv_state = NORMAL;
                break;
            default :   
                break;
   146fe:	eb 3a                	jmp    1473a <do_handler_kbd+0xc7>
                do_normal_key(key_code);
   14700:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
   14704:	83 ec 0c             	sub    $0xc,%esp
   14707:	50                   	push   %eax
   14708:	e8 aa fc ff ff       	call   143b7 <do_normal_key>
   1470d:	83 c4 10             	add    $0x10,%esp
                break;
   14710:	eb 29                	jmp    1473b <do_handler_kbd+0xc8>
                do_e0_key(key_code);
   14712:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
   14716:	83 ec 0c             	sub    $0xc,%esp
   14719:	50                   	push   %eax
   1471a:	e8 78 fe ff ff       	call   14597 <do_e0_key>
   1471f:	83 c4 10             	add    $0x10,%esp
                recv_state = NORMAL;
   14722:	c7 05 80 d2 04 00 00 	movl   $0x0,0x4d280
   14729:	00 00 00 
                break;
   1472c:	eb 0d                	jmp    1473b <do_handler_kbd+0xc8>
                recv_state = NORMAL;
   1472e:	c7 05 80 d2 04 00 00 	movl   $0x0,0x4d280
   14735:	00 00 00 
                break;
   14738:	eb 01                	jmp    1473b <do_handler_kbd+0xc8>
                break;
   1473a:	90                   	nop
        }
    }

   1473b:	c9                   	leave  
   1473c:	c3                   	ret    

0001473d <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   1473d:	55                   	push   %ebp
   1473e:	89 e5                	mov    %esp,%ebp
   14740:	83 ec 08             	sub    $0x8,%esp
   14743:	8b 45 08             	mov    0x8(%ebp),%eax
   14746:	8b 55 0c             	mov    0xc(%ebp),%edx
   14749:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   1474d:	89 d0                	mov    %edx,%eax
   1474f:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   14752:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   14756:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1475a:	ee                   	out    %al,(%dx)
}
   1475b:	90                   	nop
   1475c:	c9                   	leave  
   1475d:	c3                   	ret    

0001475e <do_handler_time>:
/**
 * @brief  处理定时器中断的c函数
 * 
 * @param frame 异常栈帧
 */
void do_handler_time(const exception_frame_t *frame) {
   1475e:	55                   	push   %ebp
   1475f:	89 e5                	mov    %esp,%ebp
   14761:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   14764:	a1 84 d2 04 00       	mov    0x4d284,%eax
   14769:	83 c0 01             	add    $0x1,%eax
   1476c:	a3 84 d2 04 00       	mov    %eax,0x4d284

    //因为ICW4的EOI位为0，所以要手动发送EOI即中断结束信号
    pic_send_eoi(IRQ0_TIMER);
   14771:	83 ec 0c             	sub    $0xc,%esp
   14774:	6a 20                	push   $0x20
   14776:	e8 53 eb ff ff       	call   132ce <pic_send_eoi>
   1477b:	83 c4 10             	add    $0x10,%esp

    //运行完一个时间片，判断是否需要执行任务切换，若需要则执行
    //必须写在发送eoi之后，防止发生任务切换导致eoi没有发送，从而无法进行下一次中断
    task_slice_end();   
   1477e:	e8 83 d2 ff ff       	call   11a06 <task_slice_end>
}
   14783:	90                   	nop
   14784:	c9                   	leave  
   14785:	c3                   	ret    

00014786 <init_pit>:

/**
 * @brief  初始化可编程定时器
 * 
 */
static void init_pit(void) {
   14786:	55                   	push   %ebp
   14787:	89 e5                	mov    %esp,%ebp
   14789:	83 ec 18             	sub    $0x18,%esp
    //1.选择定时器的计算器，读取与加载初始值模式，以及工作模式
    outb(PIT_COMMAND_MODE_PORT, PIT_SELECT_COUNTER | PIT_READ_LOAD | PIT_MODE);
   1478c:	6a 36                	push   $0x36
   1478e:	6a 43                	push   $0x43
   14790:	e8 a8 ff ff ff       	call   1473d <outb>
   14795:	83 c4 08             	add    $0x8,%esp

    //2.写入16位初始值,即一个中断后期晶体的振荡次数，由确定的加载方式知，先写入低8位，再写入高8位
    uint16_t reload_count = (PIT_OSC_FREQ / 1000) * OS_TICKS_MS;   //确定晶体一个中断周期的震荡次数
   14798:	66 c7 45 f6 9a 2e    	movw   $0x2e9a,-0xa(%ebp)
    outb(PIT_CHANNEL_DATA_PORT, reload_count & 0xff);
   1479e:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   147a2:	0f b6 c0             	movzbl %al,%eax
   147a5:	50                   	push   %eax
   147a6:	6a 40                	push   $0x40
   147a8:	e8 90 ff ff ff       	call   1473d <outb>
   147ad:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL_DATA_PORT, (reload_count >> 8) & 0xff);
   147b0:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   147b4:	66 c1 e8 08          	shr    $0x8,%ax
   147b8:	0f b6 c0             	movzbl %al,%eax
   147bb:	50                   	push   %eax
   147bc:	6a 40                	push   $0x40
   147be:	e8 7a ff ff ff       	call   1473d <outb>
   147c3:	83 c4 08             	add    $0x8,%esp

    //3.绑定定时器中断的异常处理程序,并开启该中断
    idt_install(IRQ0_TIMER, (idt_handler_t)exception_handler_time);
   147c6:	83 ec 08             	sub    $0x8,%esp
   147c9:	68 7b 02 01 00       	push   $0x1027b
   147ce:	6a 20                	push   $0x20
   147d0:	e8 2c e7 ff ff       	call   12f01 <idt_install>
   147d5:	83 c4 10             	add    $0x10,%esp
    idt_enable(IRQ0_TIMER);
   147d8:	83 ec 0c             	sub    $0xc,%esp
   147db:	6a 20                	push   $0x20
   147dd:	e8 aa e9 ff ff       	call   1318c <idt_enable>
   147e2:	83 c4 10             	add    $0x10,%esp

}
   147e5:	90                   	nop
   147e6:	c9                   	leave  
   147e7:	c3                   	ret    

000147e8 <time_init>:

/**
 * @brief  初始化定时器
 * 
 */
void time_init(void) {
   147e8:	55                   	push   %ebp
   147e9:	89 e5                	mov    %esp,%ebp
   147eb:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   147ee:	c7 05 84 d2 04 00 00 	movl   $0x0,0x4d284
   147f5:	00 00 00 
    init_pit();
   147f8:	e8 89 ff ff ff       	call   14786 <init_pit>
   147fd:	90                   	nop
   147fe:	c9                   	leave  
   147ff:	c3                   	ret    

00014800 <get_tty>:
 * @brief 根据dev结构获取到对应的tty设备结构
 * 
 * @param dev 
 * @return tty_t* 
 */
static tty_t* get_tty(device_t *dev) {
   14800:	55                   	push   %ebp
   14801:	89 e5                	mov    %esp,%ebp
   14803:	83 ec 18             	sub    $0x18,%esp
    int tty_index = dev->dev_index;
   14806:	8b 45 08             	mov    0x8(%ebp),%eax
   14809:	8b 40 08             	mov    0x8(%eax),%eax
   1480c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (tty_index < 0 || tty_index >= TTY_TABLE_SIZE || !dev->open_count) {
   1480f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   14813:	78 10                	js     14825 <get_tty+0x25>
   14815:	83 7d f4 07          	cmpl   $0x7,-0xc(%ebp)
   14819:	7f 0a                	jg     14825 <get_tty+0x25>
   1481b:	8b 45 08             	mov    0x8(%ebp),%eax
   1481e:	8b 40 10             	mov    0x10(%eax),%eax
   14821:	85 c0                	test   %eax,%eax
   14823:	75 1a                	jne    1483f <get_tty+0x3f>
        log_printf("tty is not opened. tty = %d\n", tty_index);
   14825:	83 ec 08             	sub    $0x8,%esp
   14828:	ff 75 f4             	push   -0xc(%ebp)
   1482b:	68 90 82 01 00       	push   $0x18290
   14830:	e8 e3 2a 00 00       	call   17318 <log_printf>
   14835:	83 c4 10             	add    $0x10,%esp
        return (tty_t*)0;
   14838:	b8 00 00 00 00       	mov    $0x0,%eax
   1483d:	eb 0e                	jmp    1484d <get_tty+0x4d>
    }

    return tty_table + tty_index;
   1483f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14842:	69 c0 54 04 00 00    	imul   $0x454,%eax,%eax
   14848:	05 a0 d2 04 00       	add    $0x4d2a0,%eax
}
   1484d:	c9                   	leave  
   1484e:	c3                   	ret    

0001484f <tty_fifo_init>:
 * 
 * @param fifo 
 * @param buf 
 * @param size 
 */
static void tty_fifo_init(tty_fifo_t *fifo, char *buf, int size) {
   1484f:	55                   	push   %ebp
   14850:	89 e5                	mov    %esp,%ebp
    fifo->buf = buf;
   14852:	8b 45 08             	mov    0x8(%ebp),%eax
   14855:	8b 55 0c             	mov    0xc(%ebp),%edx
   14858:	89 10                	mov    %edx,(%eax)
    fifo->count = 0;
   1485a:	8b 45 08             	mov    0x8(%ebp),%eax
   1485d:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    fifo->size = size;
   14864:	8b 45 08             	mov    0x8(%ebp),%eax
   14867:	8b 55 10             	mov    0x10(%ebp),%edx
   1486a:	89 50 04             	mov    %edx,0x4(%eax)
    fifo->read = fifo->write = 0;
   1486d:	8b 45 08             	mov    0x8(%ebp),%eax
   14870:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
   14877:	8b 45 08             	mov    0x8(%ebp),%eax
   1487a:	8b 50 0c             	mov    0xc(%eax),%edx
   1487d:	8b 45 08             	mov    0x8(%ebp),%eax
   14880:	89 50 08             	mov    %edx,0x8(%eax)
}
   14883:	90                   	nop
   14884:	5d                   	pop    %ebp
   14885:	c3                   	ret    

00014886 <tty_fifo_put>:
 * 
 * @param fifo 
 * @param c 
 * @return int 
 */
int tty_fifo_put(tty_fifo_t *fifo, char c) {
   14886:	55                   	push   %ebp
   14887:	89 e5                	mov    %esp,%ebp
   14889:	53                   	push   %ebx
   1488a:	83 ec 24             	sub    $0x24,%esp
   1488d:	8b 45 0c             	mov    0xc(%ebp),%eax
   14890:	88 45 e4             	mov    %al,-0x1c(%ebp)
    //TODO:加锁
    idt_state_t state = idt_enter_protection();
   14893:	e8 6f ea ff ff       	call   13307 <idt_enter_protection>
   14898:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //fifo已满，不能再写入
    if (fifo->count >= fifo->size) {
   1489b:	8b 45 08             	mov    0x8(%ebp),%eax
   1489e:	8b 50 10             	mov    0x10(%eax),%edx
   148a1:	8b 45 08             	mov    0x8(%ebp),%eax
   148a4:	8b 40 04             	mov    0x4(%eax),%eax
   148a7:	39 c2                	cmp    %eax,%edx
   148a9:	7c 15                	jl     148c0 <tty_fifo_put+0x3a>
    //TODO:解锁
        idt_leave_protection(state);
   148ab:	83 ec 0c             	sub    $0xc,%esp
   148ae:	ff 75 f4             	push   -0xc(%ebp)
   148b1:	e8 69 ea ff ff       	call   1331f <idt_leave_protection>
   148b6:	83 c4 10             	add    $0x10,%esp
        return -1;
   148b9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   148be:	eb 59                	jmp    14919 <tty_fifo_put+0x93>
    }

    fifo->buf[fifo->write++] = c;   //写入一个字符
   148c0:	8b 45 08             	mov    0x8(%ebp),%eax
   148c3:	8b 18                	mov    (%eax),%ebx
   148c5:	8b 45 08             	mov    0x8(%ebp),%eax
   148c8:	8b 40 0c             	mov    0xc(%eax),%eax
   148cb:	8d 48 01             	lea    0x1(%eax),%ecx
   148ce:	8b 55 08             	mov    0x8(%ebp),%edx
   148d1:	89 4a 0c             	mov    %ecx,0xc(%edx)
   148d4:	8d 14 03             	lea    (%ebx,%eax,1),%edx
   148d7:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
   148db:	88 02                	mov    %al,(%edx)
    if (fifo->write >= fifo->size) { //循环队列的方式写入
   148dd:	8b 45 08             	mov    0x8(%ebp),%eax
   148e0:	8b 50 0c             	mov    0xc(%eax),%edx
   148e3:	8b 45 08             	mov    0x8(%ebp),%eax
   148e6:	8b 40 04             	mov    0x4(%eax),%eax
   148e9:	39 c2                	cmp    %eax,%edx
   148eb:	7c 0a                	jl     148f7 <tty_fifo_put+0x71>
        fifo->write = 0;
   148ed:	8b 45 08             	mov    0x8(%ebp),%eax
   148f0:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    }

    fifo->count++;
   148f7:	8b 45 08             	mov    0x8(%ebp),%eax
   148fa:	8b 40 10             	mov    0x10(%eax),%eax
   148fd:	8d 50 01             	lea    0x1(%eax),%edx
   14900:	8b 45 08             	mov    0x8(%ebp),%eax
   14903:	89 50 10             	mov    %edx,0x10(%eax)
    
    //开中断取消资源保护
    //TODO:解锁
    idt_leave_protection(state);
   14906:	83 ec 0c             	sub    $0xc,%esp
   14909:	ff 75 f4             	push   -0xc(%ebp)
   1490c:	e8 0e ea ff ff       	call   1331f <idt_leave_protection>
   14911:	83 c4 10             	add    $0x10,%esp
    return 0;
   14914:	b8 00 00 00 00       	mov    $0x0,%eax
}
   14919:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1491c:	c9                   	leave  
   1491d:	c3                   	ret    

0001491e <tty_fifo_get>:
 * 
 * @param fifo 
 * @param c 
 * @return int 
 */
int tty_fifo_get(tty_fifo_t *fifo, char *c) {
   1491e:	55                   	push   %ebp
   1491f:	89 e5                	mov    %esp,%ebp
   14921:	53                   	push   %ebx
   14922:	83 ec 14             	sub    $0x14,%esp
    //TODO:加锁关中断进行资源保护
    idt_state_t state = idt_enter_protection();
   14925:	e8 dd e9 ff ff       	call   13307 <idt_enter_protection>
   1492a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if (fifo->count <= 0) {
   1492d:	8b 45 08             	mov    0x8(%ebp),%eax
   14930:	8b 40 10             	mov    0x10(%eax),%eax
   14933:	85 c0                	test   %eax,%eax
   14935:	7f 15                	jg     1494c <tty_fifo_get+0x2e>
    //TODO:解锁
        idt_leave_protection(state);
   14937:	83 ec 0c             	sub    $0xc,%esp
   1493a:	ff 75 f4             	push   -0xc(%ebp)
   1493d:	e8 dd e9 ff ff       	call   1331f <idt_leave_protection>
   14942:	83 c4 10             	add    $0x10,%esp
        return -1;
   14945:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1494a:	eb 5a                	jmp    149a6 <tty_fifo_get+0x88>
    }

    *c = fifo->buf[fifo->read++];   //读取一个字符
   1494c:	8b 45 08             	mov    0x8(%ebp),%eax
   1494f:	8b 18                	mov    (%eax),%ebx
   14951:	8b 45 08             	mov    0x8(%ebp),%eax
   14954:	8b 40 08             	mov    0x8(%eax),%eax
   14957:	8d 48 01             	lea    0x1(%eax),%ecx
   1495a:	8b 55 08             	mov    0x8(%ebp),%edx
   1495d:	89 4a 08             	mov    %ecx,0x8(%edx)
   14960:	01 d8                	add    %ebx,%eax
   14962:	0f b6 10             	movzbl (%eax),%edx
   14965:	8b 45 0c             	mov    0xc(%ebp),%eax
   14968:	88 10                	mov    %dl,(%eax)
    if (fifo->read >= fifo->size) { //循环队列的方式读取
   1496a:	8b 45 08             	mov    0x8(%ebp),%eax
   1496d:	8b 50 08             	mov    0x8(%eax),%edx
   14970:	8b 45 08             	mov    0x8(%ebp),%eax
   14973:	8b 40 04             	mov    0x4(%eax),%eax
   14976:	39 c2                	cmp    %eax,%edx
   14978:	7c 0a                	jl     14984 <tty_fifo_get+0x66>
        fifo->read = 0;
   1497a:	8b 45 08             	mov    0x8(%ebp),%eax
   1497d:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    }

    fifo->count--;
   14984:	8b 45 08             	mov    0x8(%ebp),%eax
   14987:	8b 40 10             	mov    0x10(%eax),%eax
   1498a:	8d 50 ff             	lea    -0x1(%eax),%edx
   1498d:	8b 45 08             	mov    0x8(%ebp),%eax
   14990:	89 50 10             	mov    %edx,0x10(%eax)

    //TODO:解锁
    idt_leave_protection(state);
   14993:	83 ec 0c             	sub    $0xc,%esp
   14996:	ff 75 f4             	push   -0xc(%ebp)
   14999:	e8 81 e9 ff ff       	call   1331f <idt_leave_protection>
   1499e:	83 c4 10             	add    $0x10,%esp
    return 0;
   149a1:	b8 00 00 00 00       	mov    $0x0,%eax
}
   149a6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   149a9:	c9                   	leave  
   149aa:	c3                   	ret    

000149ab <tty_open>:

/**
 * @brief 打开tty设备
 * 
 */
int tty_open(device_t *dev) {
   149ab:	55                   	push   %ebp
   149ac:	89 e5                	mov    %esp,%ebp
   149ae:	83 ec 18             	sub    $0x18,%esp
    int index = dev->dev_index;
   149b1:	8b 45 08             	mov    0x8(%ebp),%eax
   149b4:	8b 40 08             	mov    0x8(%eax),%eax
   149b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (index < 0 || index >= TTY_TABLE_SIZE) {
   149ba:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   149be:	78 06                	js     149c6 <tty_open+0x1b>
   149c0:	83 7d f4 07          	cmpl   $0x7,-0xc(%ebp)
   149c4:	7e 1d                	jle    149e3 <tty_open+0x38>
        log_printf("open tty failed. incorrect tty num = %d\n", index);
   149c6:	83 ec 08             	sub    $0x8,%esp
   149c9:	ff 75 f4             	push   -0xc(%ebp)
   149cc:	68 b0 82 01 00       	push   $0x182b0
   149d1:	e8 42 29 00 00       	call   17318 <log_printf>
   149d6:	83 c4 10             	add    $0x10,%esp
        return -1;
   149d9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   149de:	e9 af 00 00 00       	jmp    14a92 <tty_open+0xe7>
    }

    tty_t *tty = tty_table + index;
   149e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   149e6:	69 c0 54 04 00 00    	imul   $0x454,%eax,%eax
   149ec:	05 a0 d2 04 00       	add    $0x4d2a0,%eax
   149f1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    //初始化输入输出缓冲队列
    tty_fifo_init(&tty->out_fifo, tty->out_buf, TTY_OBUF_SIZE);
   149f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   149f7:	8d 50 54             	lea    0x54(%eax),%edx
   149fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
   149fd:	83 c0 0c             	add    $0xc,%eax
   14a00:	83 ec 04             	sub    $0x4,%esp
   14a03:	68 00 02 00 00       	push   $0x200
   14a08:	52                   	push   %edx
   14a09:	50                   	push   %eax
   14a0a:	e8 40 fe ff ff       	call   1484f <tty_fifo_init>
   14a0f:	83 c4 10             	add    $0x10,%esp
    tty_fifo_init(&tty->in_fifo, tty->in_buf, TTY_IBUF_SIZE);
   14a12:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14a15:	8d 90 54 02 00 00    	lea    0x254(%eax),%edx
   14a1b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14a1e:	83 c0 20             	add    $0x20,%eax
   14a21:	83 ec 04             	sub    $0x4,%esp
   14a24:	68 00 02 00 00       	push   $0x200
   14a29:	52                   	push   %edx
   14a2a:	50                   	push   %eax
   14a2b:	e8 1f fe ff ff       	call   1484f <tty_fifo_init>
   14a30:	83 c4 10             	add    $0x10,%esp

    //初始化缓冲区的信号量, 缓冲区的每一个字节都视为资源
    sem_init(&tty->out_sem, TTY_OBUF_SIZE); //输出缓冲区一开始有TTY_OBUF_SIZE大小的资源可写
   14a33:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14a36:	83 c0 34             	add    $0x34,%eax
   14a39:	83 ec 08             	sub    $0x8,%esp
   14a3c:	68 00 02 00 00       	push   $0x200
   14a41:	50                   	push   %eax
   14a42:	e8 b4 16 00 00       	call   160fb <sem_init>
   14a47:	83 c4 10             	add    $0x10,%esp
    sem_init(&tty->in_sem, 0);  //输入缓冲区一开始无资源可读
   14a4a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14a4d:	83 c0 44             	add    $0x44,%eax
   14a50:	83 ec 08             	sub    $0x8,%esp
   14a53:	6a 00                	push   $0x0
   14a55:	50                   	push   %eax
   14a56:	e8 a0 16 00 00       	call   160fb <sem_init>
   14a5b:	83 c4 10             	add    $0x10,%esp

    //为tty设备绑定输出终端
    tty->console_index = index;
   14a5e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14a61:	8b 55 f4             	mov    -0xc(%ebp),%edx
   14a64:	89 50 08             	mov    %edx,0x8(%eax)
    tty->oflags = TTY_OCRLF;    //默认开启输出模式下'\n'转换为'\r\n'的模式
   14a67:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14a6a:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    tty->iflags = TTY_INCLR | TTY_IECHO; //默认开启输入模式下的换行转换和字符回显
   14a70:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14a73:	c7 40 04 03 00 00 00 	movl   $0x3,0x4(%eax)

    //初始化tty设备需要的键盘与终端
    kbd_init();
   14a7a:	e8 a6 fb ff ff       	call   14625 <kbd_init>
    console_init(index);
   14a7f:	83 ec 0c             	sub    $0xc,%esp
   14a82:	ff 75 f4             	push   -0xc(%ebp)
   14a85:	e8 86 ee ff ff       	call   13910 <console_init>
   14a8a:	83 c4 10             	add    $0x10,%esp
    
    
    return 0;
   14a8d:	b8 00 00 00 00       	mov    $0x0,%eax
}
   14a92:	c9                   	leave  
   14a93:	c3                   	ret    

00014a94 <tty_write>:

/**
 * @brief 写入tty设备
 * 
 */
int tty_write(device_t *dev, int addr, char *buf, int size) {
   14a94:	55                   	push   %ebp
   14a95:	89 e5                	mov    %esp,%ebp
   14a97:	83 ec 28             	sub    $0x28,%esp
    if (size < 0) {
   14a9a:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   14a9e:	79 0a                	jns    14aaa <tty_write+0x16>
        return -1;
   14aa0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14aa5:	e9 d8 00 00 00       	jmp    14b82 <tty_write+0xee>
    }

    //根据dev结构获取到对应的tty设备结构
    tty_t *tty = get_tty(dev);
   14aaa:	83 ec 0c             	sub    $0xc,%esp
   14aad:	ff 75 08             	push   0x8(%ebp)
   14ab0:	e8 4b fd ff ff       	call   14800 <get_tty>
   14ab5:	83 c4 10             	add    $0x10,%esp
   14ab8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!tty) {
   14abb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14abf:	75 0a                	jne    14acb <tty_write+0x37>
        return -1;
   14ac1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14ac6:	e9 b7 00 00 00       	jmp    14b82 <tty_write+0xee>
    }

    int len = 0;
   14acb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (size) {
   14ad2:	e9 98 00 00 00       	jmp    14b6f <tty_write+0xdb>

        //获取待写入字符
        char c = *(buf++);
   14ad7:	8b 45 10             	mov    0x10(%ebp),%eax
   14ada:	8d 50 01             	lea    0x1(%eax),%edx
   14add:	89 55 10             	mov    %edx,0x10(%ebp)
   14ae0:	0f b6 00             	movzbl (%eax),%eax
   14ae3:	88 45 ef             	mov    %al,-0x11(%ebp)

        //当前输出为"\r\n"换行模式，
        if (c == '\n' && (tty->oflags & TTY_OCRLF)) {
   14ae6:	80 7d ef 0a          	cmpb   $0xa,-0x11(%ebp)
   14aea:	75 3b                	jne    14b27 <tty_write+0x93>
   14aec:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14aef:	8b 00                	mov    (%eax),%eax
   14af1:	83 e0 01             	and    $0x1,%eax
   14af4:	85 c0                	test   %eax,%eax
   14af6:	74 2f                	je     14b27 <tty_write+0x93>
            sem_wait(&tty->out_sem);
   14af8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14afb:	83 c0 34             	add    $0x34,%eax
   14afe:	83 ec 0c             	sub    $0xc,%esp
   14b01:	50                   	push   %eax
   14b02:	e8 36 16 00 00       	call   1613d <sem_wait>
   14b07:	83 c4 10             	add    $0x10,%esp
            int err = tty_fifo_put(&tty->out_fifo, '\r');
   14b0a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14b0d:	83 c0 0c             	add    $0xc,%eax
   14b10:	83 ec 08             	sub    $0x8,%esp
   14b13:	6a 0d                	push   $0xd
   14b15:	50                   	push   %eax
   14b16:	e8 6b fd ff ff       	call   14886 <tty_fifo_put>
   14b1b:	83 c4 10             	add    $0x10,%esp
   14b1e:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (err < 0) {
   14b21:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   14b25:	78 54                	js     14b7b <tty_write+0xe7>
            }
        }

        //先获取到访问缓冲区一个字节资源的资格
        //若缓冲区写满就阻塞住，等待中断程序将缓冲区消耗掉再写
        sem_wait(&tty->out_sem);
   14b27:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14b2a:	83 c0 34             	add    $0x34,%eax
   14b2d:	83 ec 0c             	sub    $0xc,%esp
   14b30:	50                   	push   %eax
   14b31:	e8 07 16 00 00       	call   1613d <sem_wait>
   14b36:	83 c4 10             	add    $0x10,%esp

        int err = tty_fifo_put(&tty->out_fifo, c);
   14b39:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
   14b3d:	8b 55 f0             	mov    -0x10(%ebp),%edx
   14b40:	83 c2 0c             	add    $0xc,%edx
   14b43:	83 ec 08             	sub    $0x8,%esp
   14b46:	50                   	push   %eax
   14b47:	52                   	push   %edx
   14b48:	e8 39 fd ff ff       	call   14886 <tty_fifo_put>
   14b4d:	83 c4 10             	add    $0x10,%esp
   14b50:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0) {
   14b53:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   14b57:	78 25                	js     14b7e <tty_write+0xea>
            break;
        }

        len++;
   14b59:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
        size--;
   14b5d:	83 6d 14 01          	subl   $0x1,0x14(%ebp)

        //显示器直接写显存，不需要写io端口
        //所以不需要交给中断处理程序，即当前进程自己往缓冲区写入并读取
        //此处是为了模仿当前进程对缓冲区写入的同时中断处理程序读取缓冲区
        //此处肯定不会阻塞在信号量中，但利用中断处理程序就会阻塞
        console_write(tty);
   14b61:	83 ec 0c             	sub    $0xc,%esp
   14b64:	ff 75 f0             	push   -0x10(%ebp)
   14b67:	e8 d1 f2 ff ff       	call   13e3d <console_write>
   14b6c:	83 c4 10             	add    $0x10,%esp
    while (size) {
   14b6f:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   14b73:	0f 85 5e ff ff ff    	jne    14ad7 <tty_write+0x43>
   14b79:	eb 04                	jmp    14b7f <tty_write+0xeb>
                break;
   14b7b:	90                   	nop
   14b7c:	eb 01                	jmp    14b7f <tty_write+0xeb>
            break;
   14b7e:	90                   	nop
    }
    


    return len;
   14b7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
} 
   14b82:	c9                   	leave  
   14b83:	c3                   	ret    

00014b84 <tty_read>:

/**
 * @brief 读取读取设备
 * 
 */
int tty_read(device_t *dev, int addr, char *buf, int size) {
   14b84:	55                   	push   %ebp
   14b85:	89 e5                	mov    %esp,%ebp
   14b87:	83 ec 18             	sub    $0x18,%esp
    if (size < 0) {
   14b8a:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   14b8e:	79 0a                	jns    14b9a <tty_read+0x16>
        return -1;
   14b90:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14b95:	e9 04 01 00 00       	jmp    14c9e <tty_read+0x11a>
    }

    //1.获取操作的tty设备
    tty_t *tty = get_tty(dev);
   14b9a:	83 ec 0c             	sub    $0xc,%esp
   14b9d:	ff 75 08             	push   0x8(%ebp)
   14ba0:	e8 5b fc ff ff       	call   14800 <get_tty>
   14ba5:	83 c4 10             	add    $0x10,%esp
   14ba8:	89 45 ec             	mov    %eax,-0x14(%ebp)
    
    char *pbuf = buf;
   14bab:	8b 45 10             	mov    0x10(%ebp),%eax
   14bae:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int len = 0;
   14bb1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    
    //2.从输入缓冲队列中读取字符到缓冲区buf中
    while (len < size) {
   14bb8:	e9 d2 00 00 00       	jmp    14c8f <tty_read+0x10b>
        //2.1等待资源就绪
        sem_wait(&tty->in_sem);
   14bbd:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14bc0:	83 c0 44             	add    $0x44,%eax
   14bc3:	83 ec 0c             	sub    $0xc,%esp
   14bc6:	50                   	push   %eax
   14bc7:	e8 71 15 00 00       	call   1613d <sem_wait>
   14bcc:	83 c4 10             	add    $0x10,%esp

        //2.2资源已就绪，读取一个字符
        char ch;
        tty_fifo_get(&tty->in_fifo, &ch);
   14bcf:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14bd2:	8d 50 20             	lea    0x20(%eax),%edx
   14bd5:	83 ec 08             	sub    $0x8,%esp
   14bd8:	8d 45 eb             	lea    -0x15(%ebp),%eax
   14bdb:	50                   	push   %eax
   14bdc:	52                   	push   %edx
   14bdd:	e8 3c fd ff ff       	call   1491e <tty_fifo_get>
   14be2:	83 c4 10             	add    $0x10,%esp
        switch (ch) {
   14be5:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   14be9:	0f be c0             	movsbl %al,%eax
   14bec:	83 f8 0a             	cmp    $0xa,%eax
   14bef:	74 20                	je     14c11 <tty_read+0x8d>
   14bf1:	83 f8 7f             	cmp    $0x7f,%eax
   14bf4:	75 55                	jne    14c4b <tty_read+0xc7>
        case 0x7f:  //退格键不读取并删除buf中上一个读取到的字符
            if (len == 0) {
   14bf6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14bfa:	75 05                	jne    14c01 <tty_read+0x7d>
   14bfc:	e9 8e 00 00 00       	jmp    14c8f <tty_read+0x10b>
                continue;
            } else {
                len--;
   14c01:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
                *(--pbuf) = '\0';
   14c05:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
   14c09:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14c0c:	c6 00 00             	movb   $0x0,(%eax)
            }
            break;
   14c0f:	eb 4e                	jmp    14c5f <tty_read+0xdb>
        case '\n':
            if ((tty->iflags & TTY_INCLR) && len < size - 1) {
   14c11:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14c14:	8b 40 04             	mov    0x4(%eax),%eax
   14c17:	83 e0 01             	and    $0x1,%eax
   14c1a:	85 c0                	test   %eax,%eax
   14c1c:	74 1b                	je     14c39 <tty_read+0xb5>
   14c1e:	8b 45 14             	mov    0x14(%ebp),%eax
   14c21:	83 e8 01             	sub    $0x1,%eax
   14c24:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   14c27:	7d 10                	jge    14c39 <tty_read+0xb5>
                //开启了换行转换
                *(pbuf++) = '\r';
   14c29:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14c2c:	8d 50 01             	lea    0x1(%eax),%edx
   14c2f:	89 55 f4             	mov    %edx,-0xc(%ebp)
   14c32:	c6 00 0d             	movb   $0xd,(%eax)
                len++;
   14c35:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
            }
            *(pbuf++) = '\n';
   14c39:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14c3c:	8d 50 01             	lea    0x1(%eax),%edx
   14c3f:	89 55 f4             	mov    %edx,-0xc(%ebp)
   14c42:	c6 00 0a             	movb   $0xa,(%eax)
            len++;
   14c45:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
            break;
   14c49:	eb 14                	jmp    14c5f <tty_read+0xdb>
        default:
            *(pbuf++) = ch;
   14c4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14c4e:	8d 50 01             	lea    0x1(%eax),%edx
   14c51:	89 55 f4             	mov    %edx,-0xc(%ebp)
   14c54:	0f b6 55 eb          	movzbl -0x15(%ebp),%edx
   14c58:	88 10                	mov    %dl,(%eax)
            len++;
   14c5a:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
            break;
   14c5e:	90                   	nop
        }

        //若tty设备开启了回显模式，则将输入回显到设备上
        if (tty->iflags & TTY_IECHO) {
   14c5f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14c62:	8b 40 04             	mov    0x4(%eax),%eax
   14c65:	83 e0 02             	and    $0x2,%eax
   14c68:	85 c0                	test   %eax,%eax
   14c6a:	74 13                	je     14c7f <tty_read+0xfb>
            tty_write(dev, 0, &ch, 1);
   14c6c:	6a 01                	push   $0x1
   14c6e:	8d 45 eb             	lea    -0x15(%ebp),%eax
   14c71:	50                   	push   %eax
   14c72:	6a 00                	push   $0x0
   14c74:	ff 75 08             	push   0x8(%ebp)
   14c77:	e8 18 fe ff ff       	call   14a94 <tty_write>
   14c7c:	83 c4 10             	add    $0x10,%esp
        }

        //若输入回车或者换行则直接停止读取
        if (ch == '\n' || ch == '\r') {
   14c7f:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   14c83:	3c 0a                	cmp    $0xa,%al
   14c85:	74 14                	je     14c9b <tty_read+0x117>
   14c87:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   14c8b:	3c 0d                	cmp    $0xd,%al
   14c8d:	74 0c                	je     14c9b <tty_read+0x117>
    while (len < size) {
   14c8f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14c92:	3b 45 14             	cmp    0x14(%ebp),%eax
   14c95:	0f 8c 22 ff ff ff    	jl     14bbd <tty_read+0x39>
            break;
        }

    }

    return len;
   14c9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   14c9e:	c9                   	leave  
   14c9f:	c3                   	ret    

00014ca0 <tty_control>:

/**
 * @brief 向tty设备发送控制指令
 * 
 */
int tty_control(device_t *dev, int cmd, int arg0, int arg1) {
   14ca0:	55                   	push   %ebp
   14ca1:	89 e5                	mov    %esp,%ebp

    return 0;
   14ca3:	b8 00 00 00 00       	mov    $0x0,%eax
}
   14ca8:	5d                   	pop    %ebp
   14ca9:	c3                   	ret    

00014caa <tty_close>:

/**
 * @brief 关闭tty设备
 * 
 */
void tty_close(device_t *dev) {
   14caa:	55                   	push   %ebp
   14cab:	89 e5                	mov    %esp,%ebp

}
   14cad:	90                   	nop
   14cae:	5d                   	pop    %ebp
   14caf:	c3                   	ret    

00014cb0 <tty_in>:
 * @brief 将字符放入对应索引的tty设备的输入缓冲队列中
 * 
 * @param dev_index 
 * @param ch 
 */
void tty_in(char ch) {
   14cb0:	55                   	push   %ebp
   14cb1:	89 e5                	mov    %esp,%ebp
   14cb3:	83 ec 28             	sub    $0x28,%esp
   14cb6:	8b 45 08             	mov    0x8(%ebp),%eax
   14cb9:	88 45 e4             	mov    %al,-0x1c(%ebp)
    //1.获取tty设备
    tty_t *tty = tty_table + curr_tty_index;
   14cbc:	a1 40 f5 04 00       	mov    0x4f540,%eax
   14cc1:	69 c0 54 04 00 00    	imul   $0x454,%eax,%eax
   14cc7:	05 a0 d2 04 00       	add    $0x4d2a0,%eax
   14ccc:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.判断输入缓冲区资源是否已准备满
    if (sem_count(&tty->in_sem) >= TTY_IBUF_SIZE) {
   14ccf:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14cd2:	83 c0 44             	add    $0x44,%eax
   14cd5:	83 ec 0c             	sub    $0xc,%esp
   14cd8:	50                   	push   %eax
   14cd9:	e8 4c 15 00 00       	call   1622a <sem_count>
   14cde:	83 c4 10             	add    $0x10,%esp
   14ce1:	3d ff 01 00 00       	cmp    $0x1ff,%eax
   14ce6:	7f 2b                	jg     14d13 <tty_in+0x63>
        //输入缓冲区已写满，放弃写入
        return;
    }

    //3.将字符写入输入缓冲队列
    tty_fifo_put(&tty->in_fifo, ch);
   14ce8:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
   14cec:	8b 55 f4             	mov    -0xc(%ebp),%edx
   14cef:	83 c2 20             	add    $0x20,%edx
   14cf2:	83 ec 08             	sub    $0x8,%esp
   14cf5:	50                   	push   %eax
   14cf6:	52                   	push   %edx
   14cf7:	e8 8a fb ff ff       	call   14886 <tty_fifo_put>
   14cfc:	83 c4 10             	add    $0x10,%esp
    
    //4.准备好一份可读资源，唤醒等待的进程或添加可获取资源
    sem_notify(&tty->in_sem);
   14cff:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14d02:	83 c0 44             	add    $0x44,%eax
   14d05:	83 ec 0c             	sub    $0xc,%esp
   14d08:	50                   	push   %eax
   14d09:	e8 9a 14 00 00       	call   161a8 <sem_notify>
   14d0e:	83 c4 10             	add    $0x10,%esp
   14d11:	eb 01                	jmp    14d14 <tty_in+0x64>
        return;
   14d13:	90                   	nop
}
   14d14:	c9                   	leave  
   14d15:	c3                   	ret    

00014d16 <tty_select>:
/**
 * @brief 通过索引号更改当前系统使用的tty设备
 * 
 * @param tty_index 
 */
void tty_select(int tty_index) {
   14d16:	55                   	push   %ebp
   14d17:	89 e5                	mov    %esp,%ebp
   14d19:	83 ec 08             	sub    $0x8,%esp
    if (tty_index != curr_tty_index) {
   14d1c:	a1 40 f5 04 00       	mov    0x4f540,%eax
   14d21:	39 45 08             	cmp    %eax,0x8(%ebp)
   14d24:	74 16                	je     14d3c <tty_select+0x26>
        //选择对应的终端设备
       console_select(tty_index);
   14d26:	83 ec 0c             	sub    $0xc,%esp
   14d29:	ff 75 08             	push   0x8(%ebp)
   14d2c:	e8 1c f2 ff ff       	call   13f4d <console_select>
   14d31:	83 c4 10             	add    $0x10,%esp
       curr_tty_index = tty_index; 
   14d34:	8b 45 08             	mov    0x8(%ebp),%eax
   14d37:	a3 40 f5 04 00       	mov    %eax,0x4f540
    }
}
   14d3c:	90                   	nop
   14d3d:	c9                   	leave  
   14d3e:	c3                   	ret    

00014d3f <devfs_mount>:
 * @param fs 
 * @param major 
 * @param minor 
 * @return int 
 */
int devfs_mount(struct _fs_t *fs, int major, int minor) {
   14d3f:	55                   	push   %ebp
   14d40:	89 e5                	mov    %esp,%ebp
    fs->type = FS_DEVFS;
   14d42:	8b 45 08             	mov    0x8(%ebp),%eax
   14d45:	c7 80 00 02 00 00 00 	movl   $0x0,0x200(%eax)
   14d4c:	00 00 00 
    return fs->type;
   14d4f:	8b 45 08             	mov    0x8(%ebp),%eax
   14d52:	8b 80 00 02 00 00    	mov    0x200(%eax),%eax
}
   14d58:	5d                   	pop    %ebp
   14d59:	c3                   	ret    

00014d5a <devfs_unmount>:
/**
 * @brief 卸载设备文件系统
 * 
 * @param fs 
 */
void devfs_unmount(struct _fs_t *fs) {
   14d5a:	55                   	push   %ebp
   14d5b:	89 e5                	mov    %esp,%ebp
} 
   14d5d:	90                   	nop
   14d5e:	5d                   	pop    %ebp
   14d5f:	c3                   	ret    

00014d60 <devfs_open>:
 * @param fs 
 * @param path 
 * @param file 
 * @return int 
 */
int devfs_open(struct _fs_t *fs, const char *path, file_t *file) {
   14d60:	55                   	push   %ebp
   14d61:	89 e5                	mov    %esp,%ebp
   14d63:	83 ec 28             	sub    $0x28,%esp
    //遍历设备类型表，获取需要打开的设备的信息
    for (int i = 0; i < sizeof(devfs_type_list) / sizeof(devfs_type_list[0]); ++i) {
   14d66:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   14d6d:	e9 04 01 00 00       	jmp    14e76 <devfs_open+0x116>
        devfs_type_t *type = devfs_type_list + i;
   14d72:	8b 55 f4             	mov    -0xc(%ebp),%edx
   14d75:	89 d0                	mov    %edx,%eax
   14d77:	01 c0                	add    %eax,%eax
   14d79:	01 d0                	add    %edx,%eax
   14d7b:	c1 e0 02             	shl    $0x2,%eax
   14d7e:	05 a0 90 01 00       	add    $0x190a0,%eax
   14d83:	89 45 f0             	mov    %eax,-0x10(%ebp)

        int type_name_len = kernel_strlen(type->name);
   14d86:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14d89:	8b 00                	mov    (%eax),%eax
   14d8b:	83 ec 0c             	sub    $0xc,%esp
   14d8e:	50                   	push   %eax
   14d8f:	e8 03 1d 00 00       	call   16a97 <kernel_strlen>
   14d94:	83 c4 10             	add    $0x10,%esp
   14d97:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (kernel_strncmp(path, type->name, type_name_len) == 0) {
   14d9a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14d9d:	8b 00                	mov    (%eax),%eax
   14d9f:	83 ec 04             	sub    $0x4,%esp
   14da2:	ff 75 ec             	push   -0x14(%ebp)
   14da5:	50                   	push   %eax
   14da6:	ff 75 0c             	push   0xc(%ebp)
   14da9:	e8 68 1c 00 00       	call   16a16 <kernel_strncmp>
   14dae:	83 c4 10             	add    $0x10,%esp
   14db1:	85 c0                	test   %eax,%eax
   14db3:	0f 85 b9 00 00 00    	jne    14e72 <devfs_open+0x112>
            int minor;
            //判断路径是否正确并读取路径中的设备号
            if (kernel_strlen(path) > type_name_len && path_to_num(path + type_name_len, &minor) < 0) {
   14db9:	83 ec 0c             	sub    $0xc,%esp
   14dbc:	ff 75 0c             	push   0xc(%ebp)
   14dbf:	e8 d3 1c 00 00       	call   16a97 <kernel_strlen>
   14dc4:	83 c4 10             	add    $0x10,%esp
   14dc7:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   14dca:	7d 34                	jge    14e00 <devfs_open+0xa0>
   14dcc:	8b 55 ec             	mov    -0x14(%ebp),%edx
   14dcf:	8b 45 0c             	mov    0xc(%ebp),%eax
   14dd2:	01 c2                	add    %eax,%edx
   14dd4:	83 ec 08             	sub    $0x8,%esp
   14dd7:	8d 45 e4             	lea    -0x1c(%ebp),%eax
   14dda:	50                   	push   %eax
   14ddb:	52                   	push   %edx
   14ddc:	e8 1b 05 00 00       	call   152fc <path_to_num>
   14de1:	83 c4 10             	add    $0x10,%esp
   14de4:	85 c0                	test   %eax,%eax
   14de6:	79 18                	jns    14e00 <devfs_open+0xa0>
                log_printf("Get device num failed. %s", path);
   14de8:	83 ec 08             	sub    $0x8,%esp
   14deb:	ff 75 0c             	push   0xc(%ebp)
   14dee:	68 dd 82 01 00       	push   $0x182dd
   14df3:	e8 20 25 00 00       	call   17318 <log_printf>
   14df8:	83 c4 10             	add    $0x10,%esp
                break;
   14dfb:	e9 80 00 00 00       	jmp    14e80 <devfs_open+0x120>
            }

            //打开设备
            int dev_id = dev_open(type->dev_type, minor, (void*)0);
   14e00:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   14e03:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14e06:	8b 40 04             	mov    0x4(%eax),%eax
   14e09:	83 ec 04             	sub    $0x4,%esp
   14e0c:	6a 00                	push   $0x0
   14e0e:	52                   	push   %edx
   14e0f:	50                   	push   %eax
   14e10:	e8 5c f2 ff ff       	call   14071 <dev_open>
   14e15:	83 c4 10             	add    $0x10,%esp
   14e18:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (dev_id < 0) {
   14e1b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   14e1f:	79 15                	jns    14e36 <devfs_open+0xd6>
                log_printf("open device failed: %s", path);
   14e21:	83 ec 08             	sub    $0x8,%esp
   14e24:	ff 75 0c             	push   0xc(%ebp)
   14e27:	68 f7 82 01 00       	push   $0x182f7
   14e2c:	e8 e7 24 00 00       	call   17318 <log_printf>
   14e31:	83 c4 10             	add    $0x10,%esp
                break;
   14e34:	eb 4a                	jmp    14e80 <devfs_open+0x120>
            }

            //打开成功，初始化file结构，用file记录文件信息
            file->dev_id = dev_id;
   14e36:	8b 45 10             	mov    0x10(%ebp),%eax
   14e39:	8b 55 e8             	mov    -0x18(%ebp),%edx
   14e3c:	89 50 2c             	mov    %edx,0x2c(%eax)
            file->pos = 0;
   14e3f:	8b 45 10             	mov    0x10(%ebp),%eax
   14e42:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
            file->size = 0;
   14e49:	8b 45 10             	mov    0x10(%ebp),%eax
   14e4c:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
            file->type = type->file_type;
   14e53:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14e56:	8b 40 08             	mov    0x8(%eax),%eax
   14e59:	89 c2                	mov    %eax,%edx
   14e5b:	8b 45 10             	mov    0x10(%ebp),%eax
   14e5e:	89 50 20             	mov    %edx,0x20(%eax)
            file->ref = 1;
   14e61:	8b 45 10             	mov    0x10(%ebp),%eax
   14e64:	c7 40 28 01 00 00 00 	movl   $0x1,0x28(%eax)

            return 0;
   14e6b:	b8 00 00 00 00       	mov    $0x0,%eax
   14e70:	eb 13                	jmp    14e85 <devfs_open+0x125>
    for (int i = 0; i < sizeof(devfs_type_list) / sizeof(devfs_type_list[0]); ++i) {
   14e72:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   14e76:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   14e7a:	0f 84 f2 fe ff ff    	je     14d72 <devfs_open+0x12>
        }
    }

    return 0;
   14e80:	b8 00 00 00 00       	mov    $0x0,%eax
};
   14e85:	c9                   	leave  
   14e86:	c3                   	ret    

00014e87 <devfs_read>:
 * @param buf 
 * @param size 
 * @param file 
 * @return int 
 */
int devfs_read(const char *buf, int size, file_t *file) {
   14e87:	55                   	push   %ebp
   14e88:	89 e5                	mov    %esp,%ebp
   14e8a:	83 ec 08             	sub    $0x8,%esp
    return dev_read(file->dev_id, file->pos, buf, size);
   14e8d:	8b 45 10             	mov    0x10(%ebp),%eax
   14e90:	8b 50 30             	mov    0x30(%eax),%edx
   14e93:	8b 45 10             	mov    0x10(%ebp),%eax
   14e96:	8b 40 2c             	mov    0x2c(%eax),%eax
   14e99:	ff 75 0c             	push   0xc(%ebp)
   14e9c:	ff 75 08             	push   0x8(%ebp)
   14e9f:	52                   	push   %edx
   14ea0:	50                   	push   %eax
   14ea1:	e8 15 f3 ff ff       	call   141bb <dev_read>
   14ea6:	83 c4 10             	add    $0x10,%esp
}
   14ea9:	c9                   	leave  
   14eaa:	c3                   	ret    

00014eab <devfs_write>:
 * @param buf 
 * @param size 
 * @param file 
 * @return int 
 */
int devfs_write(const char *buf, int size, file_t *file) {
   14eab:	55                   	push   %ebp
   14eac:	89 e5                	mov    %esp,%ebp
   14eae:	83 ec 08             	sub    $0x8,%esp
    return dev_write(file->dev_id, file->pos, buf, size);
   14eb1:	8b 45 10             	mov    0x10(%ebp),%eax
   14eb4:	8b 50 30             	mov    0x30(%eax),%edx
   14eb7:	8b 45 10             	mov    0x10(%ebp),%eax
   14eba:	8b 40 2c             	mov    0x2c(%eax),%eax
   14ebd:	ff 75 0c             	push   0xc(%ebp)
   14ec0:	ff 75 08             	push   0x8(%ebp)
   14ec3:	52                   	push   %edx
   14ec4:	50                   	push   %eax
   14ec5:	e8 3d f3 ff ff       	call   14207 <dev_write>
   14eca:	83 c4 10             	add    $0x10,%esp
}
   14ecd:	c9                   	leave  
   14ece:	c3                   	ret    

00014ecf <devfs_close>:
/**
 * @brief 关闭设备文件系统
 * 
 * @param file 
 */
void devfs_close(file_t *file) {
   14ecf:	55                   	push   %ebp
   14ed0:	89 e5                	mov    %esp,%ebp
   14ed2:	83 ec 08             	sub    $0x8,%esp
    dev_close(file->dev_id);
   14ed5:	8b 45 08             	mov    0x8(%ebp),%eax
   14ed8:	8b 40 2c             	mov    0x2c(%eax),%eax
   14edb:	83 ec 0c             	sub    $0xc,%esp
   14ede:	50                   	push   %eax
   14edf:	e8 bb f3 ff ff       	call   1429f <dev_close>
   14ee4:	83 c4 10             	add    $0x10,%esp
}
   14ee7:	90                   	nop
   14ee8:	c9                   	leave  
   14ee9:	c3                   	ret    

00014eea <devfs_seek>:
 * @param file 
 * @param offset 
 * @param dir 
 * @return int 
 */
int devfs_seek(file_t *file, uint32_t offset, int dir) {
   14eea:	55                   	push   %ebp
   14eeb:	89 e5                	mov    %esp,%ebp
    //设备文件系统不支持偏移调用，直接返回-1;
    return -1;
   14eed:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   14ef2:	5d                   	pop    %ebp
   14ef3:	c3                   	ret    

00014ef4 <devfs_stat>:
 * 
 * @param file 
 * @param st 
 * @return int 
 */
int devfs_stat(file_t *file, struct stat *st) {
   14ef4:	55                   	push   %ebp
   14ef5:	89 e5                	mov    %esp,%ebp
    //设备文件系统不支持该调用
    return -1;
   14ef7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   14efc:	5d                   	pop    %ebp
   14efd:	c3                   	ret    

00014efe <file_table_init>:

/**
 * @brief 初始化file_table
 * 
 */
void file_table_init(void) {
   14efe:	55                   	push   %ebp
   14eff:	89 e5                	mov    %esp,%ebp
   14f01:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&file_alloc_mutex);
   14f04:	83 ec 0c             	sub    $0xc,%esp
   14f07:	68 60 d5 06 00       	push   $0x6d560
   14f0c:	e8 d8 0f 00 00       	call   15ee9 <mutex_init>
   14f11:	83 c4 10             	add    $0x10,%esp
    kernel_memset(file_table, 0, sizeof(file_table));
   14f14:	83 ec 04             	sub    $0x4,%esp
   14f17:	68 00 e0 01 00       	push   $0x1e000
   14f1c:	6a 00                	push   $0x0
   14f1e:	68 60 f5 04 00       	push   $0x4f560
   14f23:	e8 f3 1b 00 00       	call   16b1b <kernel_memset>
   14f28:	83 c4 10             	add    $0x10,%esp
}
   14f2b:	90                   	nop
   14f2c:	c9                   	leave  
   14f2d:	c3                   	ret    

00014f2e <file_alloc>:
/**
 * @brief 从file_table中分配一个file结构
 * 
 * @return file_t* 
 */
file_t *file_alloc(void) {
   14f2e:	55                   	push   %ebp
   14f2f:	89 e5                	mov    %esp,%ebp
   14f31:	83 ec 18             	sub    $0x18,%esp
    file_t *file = (file_t*)0;
   14f34:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    //TODO:加锁
    mutex_lock(&file_alloc_mutex);
   14f3b:	83 ec 0c             	sub    $0xc,%esp
   14f3e:	68 60 d5 06 00       	push   $0x6d560
   14f43:	e8 ee 0f 00 00       	call   15f36 <mutex_lock>
   14f48:	83 c4 10             	add    $0x10,%esp

    //在file_table中获取分配一个资源
    for (int i = 0; i < FILE_TABLE_SIZE; ++i) {
   14f4b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   14f52:	eb 40                	jmp    14f94 <file_alloc+0x66>
        file_t * p_file = file_table + i;
   14f54:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14f57:	6b c0 3c             	imul   $0x3c,%eax,%eax
   14f5a:	05 60 f5 04 00       	add    $0x4f560,%eax
   14f5f:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (p_file->ref == 0) { //当前资源未被分配
   14f62:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14f65:	8b 40 28             	mov    0x28(%eax),%eax
   14f68:	85 c0                	test   %eax,%eax
   14f6a:	75 24                	jne    14f90 <file_alloc+0x62>
            kernel_memset(p_file, 0, sizeof(file_t));
   14f6c:	83 ec 04             	sub    $0x4,%esp
   14f6f:	6a 3c                	push   $0x3c
   14f71:	6a 00                	push   $0x0
   14f73:	ff 75 ec             	push   -0x14(%ebp)
   14f76:	e8 a0 1b 00 00       	call   16b1b <kernel_memset>
   14f7b:	83 c4 10             	add    $0x10,%esp
            p_file->ref = 1;    //记录被外部引用
   14f7e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14f81:	c7 40 28 01 00 00 00 	movl   $0x1,0x28(%eax)
            file = p_file;
   14f88:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14f8b:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   14f8e:	eb 0d                	jmp    14f9d <file_alloc+0x6f>
    for (int i = 0; i < FILE_TABLE_SIZE; ++i) {
   14f90:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   14f94:	81 7d f0 ff 07 00 00 	cmpl   $0x7ff,-0x10(%ebp)
   14f9b:	7e b7                	jle    14f54 <file_alloc+0x26>
        }
    }

    //TODO:解锁
    mutex_unlock(&file_alloc_mutex);
   14f9d:	83 ec 0c             	sub    $0xc,%esp
   14fa0:	68 60 d5 06 00       	push   $0x6d560
   14fa5:	e8 1d 10 00 00       	call   15fc7 <mutex_unlock>
   14faa:	83 c4 10             	add    $0x10,%esp
    return file;
   14fad:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   14fb0:	c9                   	leave  
   14fb1:	c3                   	ret    

00014fb2 <file_free>:
/**
 * @brief 释放一个文件结构资源
 * 
 * @param file 
 */
void file_free(file_t *file) {
   14fb2:	55                   	push   %ebp
   14fb3:	89 e5                	mov    %esp,%ebp
   14fb5:	83 ec 08             	sub    $0x8,%esp

    //TODO:加锁
    mutex_lock(&file_alloc_mutex);
   14fb8:	83 ec 0c             	sub    $0xc,%esp
   14fbb:	68 60 d5 06 00       	push   $0x6d560
   14fc0:	e8 71 0f 00 00       	call   15f36 <mutex_lock>
   14fc5:	83 c4 10             	add    $0x10,%esp
    
    if (file->ref > 0) {    //引用计数减1
   14fc8:	8b 45 08             	mov    0x8(%ebp),%eax
   14fcb:	8b 40 28             	mov    0x28(%eax),%eax
   14fce:	85 c0                	test   %eax,%eax
   14fd0:	7e 0f                	jle    14fe1 <file_free+0x2f>
        file->ref--;
   14fd2:	8b 45 08             	mov    0x8(%ebp),%eax
   14fd5:	8b 40 28             	mov    0x28(%eax),%eax
   14fd8:	8d 50 ff             	lea    -0x1(%eax),%edx
   14fdb:	8b 45 08             	mov    0x8(%ebp),%eax
   14fde:	89 50 28             	mov    %edx,0x28(%eax)
    }

    //TODO:解锁
    mutex_unlock(&file_alloc_mutex);
   14fe1:	83 ec 0c             	sub    $0xc,%esp
   14fe4:	68 60 d5 06 00       	push   $0x6d560
   14fe9:	e8 d9 0f 00 00       	call   15fc7 <mutex_unlock>
   14fee:	83 c4 10             	add    $0x10,%esp
}
   14ff1:	90                   	nop
   14ff2:	c9                   	leave  
   14ff3:	c3                   	ret    

00014ff4 <file_inc_ref>:
/**
 * @brief 增加文件file的引用计数
 * 
 * @param file 
 */
void file_inc_ref(file_t *file) {
   14ff4:	55                   	push   %ebp
   14ff5:	89 e5                	mov    %esp,%ebp
   14ff7:	83 ec 08             	sub    $0x8,%esp

    //TODO:加锁
    mutex_lock(&file_alloc_mutex);
   14ffa:	83 ec 0c             	sub    $0xc,%esp
   14ffd:	68 60 d5 06 00       	push   $0x6d560
   15002:	e8 2f 0f 00 00       	call   15f36 <mutex_lock>
   15007:	83 c4 10             	add    $0x10,%esp
    
    file->ref++;
   1500a:	8b 45 08             	mov    0x8(%ebp),%eax
   1500d:	8b 40 28             	mov    0x28(%eax),%eax
   15010:	8d 50 01             	lea    0x1(%eax),%edx
   15013:	8b 45 08             	mov    0x8(%ebp),%eax
   15016:	89 50 28             	mov    %edx,0x28(%eax)

    //TODO:解锁
    mutex_unlock(&file_alloc_mutex);
   15019:	83 ec 0c             	sub    $0xc,%esp
   1501c:	68 60 d5 06 00       	push   $0x6d560
   15021:	e8 a1 0f 00 00       	call   15fc7 <mutex_unlock>
   15026:	83 c4 10             	add    $0x10,%esp
   15029:	90                   	nop
   1502a:	c9                   	leave  
   1502b:	c3                   	ret    

0001502c <list_node_next>:
static inline list_node_t *list_node_next(list_node_t *node) {
   1502c:	55                   	push   %ebp
   1502d:	89 e5                	mov    %esp,%ebp
   1502f:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   15032:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15036:	75 19                	jne    15051 <list_node_next+0x25>
   15038:	68 10 83 01 00       	push   $0x18310
   1503d:	68 0c 85 01 00       	push   $0x1850c
   15042:	6a 2b                	push   $0x2b
   15044:	68 28 83 01 00       	push   $0x18328
   15049:	e8 b4 15 00 00       	call   16602 <pannic>
   1504e:	83 c4 10             	add    $0x10,%esp
    return node->next;
   15051:	8b 45 08             	mov    0x8(%ebp),%eax
   15054:	8b 40 04             	mov    0x4(%eax),%eax
}
   15057:	c9                   	leave  
   15058:	c3                   	ret    

00015059 <list_init>:
static inline void list_init(list_t *list) {
   15059:	55                   	push   %ebp
   1505a:	89 e5                	mov    %esp,%ebp
   1505c:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1505f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15063:	75 19                	jne    1507e <list_init+0x25>
   15065:	68 66 83 01 00       	push   $0x18366
   1506a:	68 28 85 01 00       	push   $0x18528
   1506f:	6a 31                	push   $0x31
   15071:	68 28 83 01 00       	push   $0x18328
   15076:	e8 87 15 00 00       	call   16602 <pannic>
   1507b:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   1507e:	8b 45 08             	mov    0x8(%ebp),%eax
   15081:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   15088:	8b 45 08             	mov    0x8(%ebp),%eax
   1508b:	8b 50 04             	mov    0x4(%eax),%edx
   1508e:	8b 45 08             	mov    0x8(%ebp),%eax
   15091:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   15093:	8b 45 08             	mov    0x8(%ebp),%eax
   15096:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   1509d:	90                   	nop
   1509e:	c9                   	leave  
   1509f:	c3                   	ret    

000150a0 <list_get_first>:
static inline list_node_t *list_get_first(list_t *list) {
   150a0:	55                   	push   %ebp
   150a1:	89 e5                	mov    %esp,%ebp
   150a3:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   150a6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   150aa:	75 19                	jne    150c5 <list_get_first+0x25>
   150ac:	68 66 83 01 00       	push   $0x18366
   150b1:	68 fc 84 01 00       	push   $0x184fc
   150b6:	6a 44                	push   $0x44
   150b8:	68 28 83 01 00       	push   $0x18328
   150bd:	e8 40 15 00 00       	call   16602 <pannic>
   150c2:	83 c4 10             	add    $0x10,%esp
    return list->first;
   150c5:	8b 45 08             	mov    0x8(%ebp),%eax
   150c8:	8b 00                	mov    (%eax),%eax
}
   150ca:	c9                   	leave  
   150cb:	c3                   	ret    

000150cc <inb>:
static inline uint8_t inb(uint16_t port) {
   150cc:	55                   	push   %ebp
   150cd:	89 e5                	mov    %esp,%ebp
   150cf:	83 ec 14             	sub    $0x14,%esp
   150d2:	8b 45 08             	mov    0x8(%ebp),%eax
   150d5:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   150d9:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   150dd:	89 c2                	mov    %eax,%edx
   150df:	ec                   	in     (%dx),%al
   150e0:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   150e3:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   150e7:	c9                   	leave  
   150e8:	c3                   	ret    

000150e9 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   150e9:	55                   	push   %ebp
   150ea:	89 e5                	mov    %esp,%ebp
   150ec:	83 ec 08             	sub    $0x8,%esp
   150ef:	8b 45 08             	mov    0x8(%ebp),%eax
   150f2:	8b 55 0c             	mov    0xc(%ebp),%edx
   150f5:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   150f9:	89 d0                	mov    %edx,%eax
   150fb:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   150fe:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   15102:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   15106:	ee                   	out    %al,(%dx)
}
   15107:	90                   	nop
   15108:	c9                   	leave  
   15109:	c3                   	ret    

0001510a <inw>:
static inline uint16_t inw(uint16_t port) {
   1510a:	55                   	push   %ebp
   1510b:	89 e5                	mov    %esp,%ebp
   1510d:	83 ec 14             	sub    $0x14,%esp
   15110:	8b 45 08             	mov    0x8(%ebp),%eax
   15113:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__("in %[p], %[v]"  // in默认就是inw, 读取一个字即16位
   15117:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1511b:	89 c2                	mov    %eax,%edx
   1511d:	66 ed                	in     (%dx),%ax
   1511f:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  return rv;
   15123:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
}
   15127:	c9                   	leave  
   15128:	c3                   	ret    

00015129 <read_disk>:
 *
 * @param sector 读取的分区号
 * @param sector_count 读取的分区数量
 * @param buf 缓冲区第一个字节的地址
 */
static void read_disk(uint32_t sector, uint16_t sector_count, uint8_t *buf) {
   15129:	55                   	push   %ebp
   1512a:	89 e5                	mov    %esp,%ebp
   1512c:	53                   	push   %ebx
   1512d:	83 ec 14             	sub    $0x14,%esp
   15130:	8b 45 0c             	mov    0xc(%ebp),%eax
   15133:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
  // 1.设置以LBA模式进行读取，即将磁盘看作一片连续的扇区
  outb(
   15137:	68 e0 00 00 00       	push   $0xe0
   1513c:	68 f6 01 00 00       	push   $0x1f6
   15141:	e8 a3 ff ff ff       	call   150e9 <outb>
   15146:	83 c4 08             	add    $0x8,%esp
                    // 将寄存器第6位置1进入LBA模式，0x0将第4位置0指定驱动器号为主盘
                    // 现在一个通道上只有一个盘，默认当作主盘

  // 2.初始化各个端口寄存器的高8位
  outb(0x1F2,
       (uint8_t)(sector_count >>
   15149:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   1514d:	66 c1 e8 08          	shr    $0x8,%ax
  outb(0x1F2,
   15151:	0f b6 c0             	movzbl %al,%eax
   15154:	50                   	push   %eax
   15155:	68 f2 01 00 00       	push   $0x1f2
   1515a:	e8 8a ff ff ff       	call   150e9 <outb>
   1515f:	83 c4 08             	add    $0x8,%esp
                 8));  // 读取扇区数的高8位
                       // 6字节LBA值，先初始化第456个字节
                       // 我暂时只用到了4个字节的LBA值, 所以第56个字节置0即可
  outb(0x1F3, (uint8_t)(sector >> 24));  // LBA4
   15162:	8b 45 08             	mov    0x8(%ebp),%eax
   15165:	c1 e8 18             	shr    $0x18,%eax
   15168:	0f b6 c0             	movzbl %al,%eax
   1516b:	50                   	push   %eax
   1516c:	68 f3 01 00 00       	push   $0x1f3
   15171:	e8 73 ff ff ff       	call   150e9 <outb>
   15176:	83 c4 08             	add    $0x8,%esp
  outb(0x1F4, 0x00);                     // LBA5
   15179:	6a 00                	push   $0x0
   1517b:	68 f4 01 00 00       	push   $0x1f4
   15180:	e8 64 ff ff ff       	call   150e9 <outb>
   15185:	83 c4 08             	add    $0x8,%esp
  outb(0x1F5, 0x00);                     // LBA6
   15188:	6a 00                	push   $0x0
   1518a:	68 f5 01 00 00       	push   $0x1f5
   1518f:	e8 55 ff ff ff       	call   150e9 <outb>
   15194:	83 c4 08             	add    $0x8,%esp

  // 3.初始化各个端口寄存器的低8位
  outb(0x1F2, (uint8_t)sector_count);    // 读取扇区数的低8位
   15197:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   1519b:	0f b6 c0             	movzbl %al,%eax
   1519e:	50                   	push   %eax
   1519f:	68 f2 01 00 00       	push   $0x1f2
   151a4:	e8 40 ff ff ff       	call   150e9 <outb>
   151a9:	83 c4 08             	add    $0x8,%esp
  outb(0x1F3, (uint8_t)sector);          // LBA1
   151ac:	8b 45 08             	mov    0x8(%ebp),%eax
   151af:	0f b6 c0             	movzbl %al,%eax
   151b2:	50                   	push   %eax
   151b3:	68 f3 01 00 00       	push   $0x1f3
   151b8:	e8 2c ff ff ff       	call   150e9 <outb>
   151bd:	83 c4 08             	add    $0x8,%esp
  outb(0x1F4, (uint8_t)(sector >> 8));   // LBA2
   151c0:	8b 45 08             	mov    0x8(%ebp),%eax
   151c3:	c1 e8 08             	shr    $0x8,%eax
   151c6:	0f b6 c0             	movzbl %al,%eax
   151c9:	50                   	push   %eax
   151ca:	68 f4 01 00 00       	push   $0x1f4
   151cf:	e8 15 ff ff ff       	call   150e9 <outb>
   151d4:	83 c4 08             	add    $0x8,%esp
  outb(0x1F5, (uint8_t)(sector >> 16));  // LBA3
   151d7:	8b 45 08             	mov    0x8(%ebp),%eax
   151da:	c1 e8 10             	shr    $0x10,%eax
   151dd:	0f b6 c0             	movzbl %al,%eax
   151e0:	50                   	push   %eax
   151e1:	68 f5 01 00 00       	push   $0x1f5
   151e6:	e8 fe fe ff ff       	call   150e9 <outb>
   151eb:	83 c4 08             	add    $0x8,%esp

  // 4.将读取扇区命令 （0x24） 发送到端口 0x1F7
  outb(0x1F7, 0x24);
   151ee:	6a 24                	push   $0x24
   151f0:	68 f7 01 00 00       	push   $0x1f7
   151f5:	e8 ef fe ff ff       	call   150e9 <outb>
   151fa:	83 c4 08             	add    $0x8,%esp

  // 5.读取状态端口寄存器，判断是否可读取,若可以则读取，否则阻塞等待
  uint16_t *data_buf = (uint16_t *)buf;  // 数据缓冲区，以后每次会读取16位数据
   151fd:	8b 45 10             	mov    0x10(%ebp),%eax
   15200:	89 45 f8             	mov    %eax,-0x8(%ebp)
  while (sector_count--) {
   15203:	eb 4a                	jmp    1524f <read_disk+0x126>
    while ((inb(0x1F7) & 0x88) != 0x8) {
   15205:	90                   	nop
   15206:	68 f7 01 00 00       	push   $0x1f7
   1520b:	e8 bc fe ff ff       	call   150cc <inb>
   15210:	83 c4 04             	add    $0x4,%esp
   15213:	0f b6 c0             	movzbl %al,%eax
   15216:	25 88 00 00 00       	and    $0x88,%eax
   1521b:	83 f8 08             	cmp    $0x8,%eax
   1521e:	75 e6                	jne    15206 <read_disk+0xdd>
    };  // 取出状态寄存器3位和7位
        // 若!=0x8即DRQ位(3位)为0，即非就绪状态
        // 或者BSY(7位)为1，即忙碌状态，都不可读取

    for (int i = 0; i < SECTOR_SIZE / 2; ++i) {
   15220:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   15227:	eb 1d                	jmp    15246 <read_disk+0x11d>
      *(data_buf++) = inw(0x1F0);  // 从数据端口寄存器中读取16位数据，即2个字节
   15229:	8b 5d f8             	mov    -0x8(%ebp),%ebx
   1522c:	8d 43 02             	lea    0x2(%ebx),%eax
   1522f:	89 45 f8             	mov    %eax,-0x8(%ebp)
   15232:	68 f0 01 00 00       	push   $0x1f0
   15237:	e8 ce fe ff ff       	call   1510a <inw>
   1523c:	83 c4 04             	add    $0x4,%esp
   1523f:	66 89 03             	mov    %ax,(%ebx)
    for (int i = 0; i < SECTOR_SIZE / 2; ++i) {
   15242:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   15246:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   1524d:	7e da                	jle    15229 <read_disk+0x100>
  while (sector_count--) {
   1524f:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   15253:	8d 50 ff             	lea    -0x1(%eax),%edx
   15256:	66 89 55 e8          	mov    %dx,-0x18(%ebp)
   1525a:	66 85 c0             	test   %ax,%ax
   1525d:	75 a6                	jne    15205 <read_disk+0xdc>
    }
  }
}
   1525f:	90                   	nop
   15260:	90                   	nop
   15261:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   15264:	c9                   	leave  
   15265:	c3                   	ret    

00015266 <is_fd_bad>:
 * @brief 检验文件描述符fd是否有效
 *
 * @param fd
 * @return int
 */
static int is_fd_bad(int fd) {
   15266:	55                   	push   %ebp
   15267:	89 e5                	mov    %esp,%ebp
  if (fd < 0 && fd >= TASK_OFILE_SIZE) {
   15269:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1526d:	79 0d                	jns    1527c <is_fd_bad+0x16>
   1526f:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   15273:	7e 07                	jle    1527c <is_fd_bad+0x16>
    return 1;
   15275:	b8 01 00 00 00       	mov    $0x1,%eax
   1527a:	eb 05                	jmp    15281 <is_fd_bad+0x1b>
  }

  return 0;
   1527c:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15281:	5d                   	pop    %ebp
   15282:	c3                   	ret    

00015283 <is_path_valid>:
 * @brief 判断文件路径是否有效
 *
 * @param path
 * @return int
 */
static int is_path_valid(const char *path) {
   15283:	55                   	push   %ebp
   15284:	89 e5                	mov    %esp,%ebp
  if (path == (const char *)0 || path[0] == '\0') {  // 路径无效
   15286:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1528a:	74 0a                	je     15296 <is_path_valid+0x13>
   1528c:	8b 45 08             	mov    0x8(%ebp),%eax
   1528f:	0f b6 00             	movzbl (%eax),%eax
   15292:	84 c0                	test   %al,%al
   15294:	75 07                	jne    1529d <is_path_valid+0x1a>
    return 0;
   15296:	b8 00 00 00 00       	mov    $0x0,%eax
   1529b:	eb 05                	jmp    152a2 <is_path_valid+0x1f>
  }

  return 1;
   1529d:	b8 01 00 00 00       	mov    $0x1,%eax
}
   152a2:	5d                   	pop    %ebp
   152a3:	c3                   	ret    

000152a4 <path_next_child>:
 * @brief 获取路径path下一级路径
 *
 * @param path
 * @return const char*
 */
const char *path_next_child(const char *path) {
   152a4:	55                   	push   %ebp
   152a5:	89 e5                	mov    %esp,%ebp
   152a7:	83 ec 10             	sub    $0x10,%esp
  const char *c = path;
   152aa:	8b 45 08             	mov    0x8(%ebp),%eax
   152ad:	89 45 fc             	mov    %eax,-0x4(%ebp)
  while (*c && (*(c++) == '/')) {
   152b0:	90                   	nop
   152b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   152b4:	0f b6 00             	movzbl (%eax),%eax
   152b7:	84 c0                	test   %al,%al
   152b9:	74 10                	je     152cb <path_next_child+0x27>
   152bb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   152be:	8d 50 01             	lea    0x1(%eax),%edx
   152c1:	89 55 fc             	mov    %edx,-0x4(%ebp)
   152c4:	0f b6 00             	movzbl (%eax),%eax
   152c7:	3c 2f                	cmp    $0x2f,%al
   152c9:	74 e6                	je     152b1 <path_next_child+0xd>
  };  // 跳过第一个'/'
  while (*c && (*(c++) != '/')) {
   152cb:	90                   	nop
   152cc:	8b 45 fc             	mov    -0x4(%ebp),%eax
   152cf:	0f b6 00             	movzbl (%eax),%eax
   152d2:	84 c0                	test   %al,%al
   152d4:	74 10                	je     152e6 <path_next_child+0x42>
   152d6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   152d9:	8d 50 01             	lea    0x1(%eax),%edx
   152dc:	89 55 fc             	mov    %edx,-0x4(%ebp)
   152df:	0f b6 00             	movzbl (%eax),%eax
   152e2:	3c 2f                	cmp    $0x2f,%al
   152e4:	75 e6                	jne    152cc <path_next_child+0x28>
  };  // 跳过一级目录到下一个'/'

  return *c ? c : (const char *)0;  // 返回第二个'/'后的部分
   152e6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   152e9:	0f b6 00             	movzbl (%eax),%eax
   152ec:	84 c0                	test   %al,%al
   152ee:	74 05                	je     152f5 <path_next_child+0x51>
   152f0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   152f3:	eb 05                	jmp    152fa <path_next_child+0x56>
   152f5:	b8 00 00 00 00       	mov    $0x0,%eax
}
   152fa:	c9                   	leave  
   152fb:	c3                   	ret    

000152fc <path_to_num>:
 *
 * @param path
 * @param num
 * @return int
 */
int path_to_num(const char *path, int *num) {
   152fc:	55                   	push   %ebp
   152fd:	89 e5                	mov    %esp,%ebp
   152ff:	83 ec 10             	sub    $0x10,%esp
  int n = 0;
   15302:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  const char *c = path;
   15309:	8b 45 08             	mov    0x8(%ebp),%eax
   1530c:	89 45 f8             	mov    %eax,-0x8(%ebp)

  while (*c) {
   1530f:	eb 23                	jmp    15334 <path_to_num+0x38>
    n = n * 10 + *c - '0';
   15311:	8b 55 fc             	mov    -0x4(%ebp),%edx
   15314:	89 d0                	mov    %edx,%eax
   15316:	c1 e0 02             	shl    $0x2,%eax
   15319:	01 d0                	add    %edx,%eax
   1531b:	01 c0                	add    %eax,%eax
   1531d:	89 c2                	mov    %eax,%edx
   1531f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   15322:	0f b6 00             	movzbl (%eax),%eax
   15325:	0f be c0             	movsbl %al,%eax
   15328:	01 d0                	add    %edx,%eax
   1532a:	83 e8 30             	sub    $0x30,%eax
   1532d:	89 45 fc             	mov    %eax,-0x4(%ebp)
    c++;
   15330:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  while (*c) {
   15334:	8b 45 f8             	mov    -0x8(%ebp),%eax
   15337:	0f b6 00             	movzbl (%eax),%eax
   1533a:	84 c0                	test   %al,%al
   1533c:	75 d3                	jne    15311 <path_to_num+0x15>
  }

  *num = n;
   1533e:	8b 45 0c             	mov    0xc(%ebp),%eax
   15341:	8b 55 fc             	mov    -0x4(%ebp),%edx
   15344:	89 10                	mov    %edx,(%eax)

  return n;
   15346:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   15349:	c9                   	leave  
   1534a:	c3                   	ret    

0001534b <path_begin_with>:
 *
 * @param path
 * @param str
 * @return int
 */
int path_begin_with(const char *path, const char *str) {
   1534b:	55                   	push   %ebp
   1534c:	89 e5                	mov    %esp,%ebp
   1534e:	83 ec 10             	sub    $0x10,%esp
  const char *s1 = path, *s2 = str;
   15351:	8b 45 08             	mov    0x8(%ebp),%eax
   15354:	89 45 fc             	mov    %eax,-0x4(%ebp)
   15357:	8b 45 0c             	mov    0xc(%ebp),%eax
   1535a:	89 45 f8             	mov    %eax,-0x8(%ebp)
  while (*s1 && *s2 && (*s1 == *s2)) {
   1535d:	eb 08                	jmp    15367 <path_begin_with+0x1c>
    s1++;
   1535f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    s2++;
   15363:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  while (*s1 && *s2 && (*s1 == *s2)) {
   15367:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1536a:	0f b6 00             	movzbl (%eax),%eax
   1536d:	84 c0                	test   %al,%al
   1536f:	74 1a                	je     1538b <path_begin_with+0x40>
   15371:	8b 45 f8             	mov    -0x8(%ebp),%eax
   15374:	0f b6 00             	movzbl (%eax),%eax
   15377:	84 c0                	test   %al,%al
   15379:	74 10                	je     1538b <path_begin_with+0x40>
   1537b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1537e:	0f b6 10             	movzbl (%eax),%edx
   15381:	8b 45 f8             	mov    -0x8(%ebp),%eax
   15384:	0f b6 00             	movzbl (%eax),%eax
   15387:	38 c2                	cmp    %al,%dl
   15389:	74 d4                	je     1535f <path_begin_with+0x14>
  }

  return *s2 == '\0';
   1538b:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1538e:	0f b6 00             	movzbl (%eax),%eax
   15391:	84 c0                	test   %al,%al
   15393:	0f 94 c0             	sete   %al
   15396:	0f b6 c0             	movzbl %al,%eax
}
   15399:	c9                   	leave  
   1539a:	c3                   	ret    

0001539b <fs_protect>:
/**
 * @brief 对文件系统的操作进行保护
 *
 * @param fs
 */
static void fs_protect(fs_t *fs) {
   1539b:	55                   	push   %ebp
   1539c:	89 e5                	mov    %esp,%ebp
   1539e:	83 ec 08             	sub    $0x8,%esp
  if (fs->mutex) {
   153a1:	8b 45 08             	mov    0x8(%ebp),%eax
   153a4:	8b 80 18 02 00 00    	mov    0x218(%eax),%eax
   153aa:	85 c0                	test   %eax,%eax
   153ac:	74 15                	je     153c3 <fs_protect+0x28>
    mutex_lock(fs->mutex);
   153ae:	8b 45 08             	mov    0x8(%ebp),%eax
   153b1:	8b 80 18 02 00 00    	mov    0x218(%eax),%eax
   153b7:	83 ec 0c             	sub    $0xc,%esp
   153ba:	50                   	push   %eax
   153bb:	e8 76 0b 00 00       	call   15f36 <mutex_lock>
   153c0:	83 c4 10             	add    $0x10,%esp
  }
}
   153c3:	90                   	nop
   153c4:	c9                   	leave  
   153c5:	c3                   	ret    

000153c6 <fs_unprotect>:
/**
 * @brief 对文件系统的操作进行保护
 *
 * @param fs
 */
static void fs_unprotect(fs_t *fs) {
   153c6:	55                   	push   %ebp
   153c7:	89 e5                	mov    %esp,%ebp
   153c9:	83 ec 08             	sub    $0x8,%esp
  if (fs->mutex) {
   153cc:	8b 45 08             	mov    0x8(%ebp),%eax
   153cf:	8b 80 18 02 00 00    	mov    0x218(%eax),%eax
   153d5:	85 c0                	test   %eax,%eax
   153d7:	74 15                	je     153ee <fs_unprotect+0x28>
    mutex_unlock(fs->mutex);
   153d9:	8b 45 08             	mov    0x8(%ebp),%eax
   153dc:	8b 80 18 02 00 00    	mov    0x218(%eax),%eax
   153e2:	83 ec 0c             	sub    $0xc,%esp
   153e5:	50                   	push   %eax
   153e6:	e8 dc 0b 00 00       	call   15fc7 <mutex_unlock>
   153eb:	83 c4 10             	add    $0x10,%esp
  }
}
   153ee:	90                   	nop
   153ef:	c9                   	leave  
   153f0:	c3                   	ret    

000153f1 <sys_open>:
 * @param name 文件路径
 * @param flags 打开方式的标志
 * @param ...
 * @return int 文件描述符
 */
int sys_open(const char *name, int flags, ...) {
   153f1:	55                   	push   %ebp
   153f2:	89 e5                	mov    %esp,%ebp
   153f4:	83 ec 28             	sub    $0x28,%esp
  // 1.判断路径是否有效
  if (!is_path_valid(name)) {  // 文件路径无效
   153f7:	ff 75 08             	push   0x8(%ebp)
   153fa:	e8 84 fe ff ff       	call   15283 <is_path_valid>
   153ff:	83 c4 04             	add    $0x4,%esp
   15402:	85 c0                	test   %eax,%eax
   15404:	75 1a                	jne    15420 <sys_open+0x2f>
    log_printf("path is not valid\n");
   15406:	83 ec 0c             	sub    $0xc,%esp
   15409:	68 79 83 01 00       	push   $0x18379
   1540e:	e8 05 1f 00 00       	call   17318 <log_printf>
   15413:	83 c4 10             	add    $0x10,%esp
    return -1;
   15416:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1541b:	e9 9e 01 00 00       	jmp    155be <sys_open+0x1cd>
  }

  if (kernel_strncmp(name, "/shell.elf", 10) == 0) {
   15420:	83 ec 04             	sub    $0x4,%esp
   15423:	6a 0a                	push   $0xa
   15425:	68 8c 83 01 00       	push   $0x1838c
   1542a:	ff 75 08             	push   0x8(%ebp)
   1542d:	e8 e4 15 00 00       	call   16a16 <kernel_strncmp>
   15432:	83 c4 10             	add    $0x10,%esp
   15435:	85 c0                	test   %eax,%eax
   15437:	75 2b                	jne    15464 <sys_open+0x73>
    // 打开外部程序
    read_disk(5000, 80, (uint8_t *)TEMP_ADDR);
   15439:	83 ec 04             	sub    $0x4,%esp
   1543c:	68 00 00 80 07       	push   $0x7800000
   15441:	6a 50                	push   $0x50
   15443:	68 88 13 00 00       	push   $0x1388
   15448:	e8 dc fc ff ff       	call   15129 <read_disk>
   1544d:	83 c4 10             	add    $0x10,%esp
    temp_pos = (uint8_t *)TEMP_ADDR;
   15450:	c7 05 c4 ea 06 00 00 	movl   $0x7800000,0x6eac4
   15457:	00 80 07 
    return TEMP_FILE_ID;
   1545a:	b8 64 00 00 00       	mov    $0x64,%eax
   1545f:	e9 5a 01 00 00       	jmp    155be <sys_open+0x1cd>
  }

  // 2.从系统file_table中分配一个文件结构
  file_t *file = file_alloc();
   15464:	e8 c5 fa ff ff       	call   14f2e <file_alloc>
   15469:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if (!file) {
   1546c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   15470:	75 0a                	jne    1547c <sys_open+0x8b>
    return -1;
   15472:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15477:	e9 42 01 00 00       	jmp    155be <sys_open+0x1cd>
  }
  // 3.将文件结构放入当前进程的打开文件表中并得到文件描述符
  int fd = task_alloc_fd(file);
   1547c:	83 ec 0c             	sub    $0xc,%esp
   1547f:	ff 75 ec             	push   -0x14(%ebp)
   15482:	e8 45 be ff ff       	call   112cc <task_alloc_fd>
   15487:	83 c4 10             	add    $0x10,%esp
   1548a:	89 45 e8             	mov    %eax,-0x18(%ebp)
  if (fd < 0) {  // 放入失败
   1548d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   15491:	0f 88 ff 00 00 00    	js     15596 <sys_open+0x1a5>
    goto sys_open_failed;
  }

  // 遍历文件系统挂载链表mounted_list,寻找需要打开的文件对应的文件系统
  fs_t *fs = (fs_t *)0;
   15497:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  list_node_t *node = list_get_first(&mounted_list);
   1549e:	83 ec 0c             	sub    $0xc,%esp
   154a1:	68 80 d5 06 00       	push   $0x6d580
   154a6:	e8 f5 fb ff ff       	call   150a0 <list_get_first>
   154ab:	83 c4 10             	add    $0x10,%esp
   154ae:	89 45 f0             	mov    %eax,-0x10(%ebp)
  while (node) {
   154b1:	eb 47                	jmp    154fa <sys_open+0x109>
    fs_t *curr = list_node_parent(node, fs_t, node);
   154b3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   154b7:	74 0a                	je     154c3 <sys_open+0xd2>
   154b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   154bc:	2d 10 02 00 00       	sub    $0x210,%eax
   154c1:	eb 05                	jmp    154c8 <sys_open+0xd7>
   154c3:	b8 00 00 00 00       	mov    $0x0,%eax
   154c8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (path_begin_with(name,
                        curr->mount_point)) {  // 该文件属于curr这个文件系统
   154cb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    if (path_begin_with(name,
   154ce:	83 ec 08             	sub    $0x8,%esp
   154d1:	50                   	push   %eax
   154d2:	ff 75 08             	push   0x8(%ebp)
   154d5:	e8 71 fe ff ff       	call   1534b <path_begin_with>
   154da:	83 c4 10             	add    $0x10,%esp
   154dd:	85 c0                	test   %eax,%eax
   154df:	74 08                	je     154e9 <sys_open+0xf8>
      fs = curr;
   154e1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   154e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
      break;
   154e7:	eb 17                	jmp    15500 <sys_open+0x10f>
    }

    node = list_node_next(node);
   154e9:	83 ec 0c             	sub    $0xc,%esp
   154ec:	ff 75 f0             	push   -0x10(%ebp)
   154ef:	e8 38 fb ff ff       	call   1502c <list_node_next>
   154f4:	83 c4 10             	add    $0x10,%esp
   154f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
  while (node) {
   154fa:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   154fe:	75 b3                	jne    154b3 <sys_open+0xc2>
  }

  if (fs) {  // 找到对应的文件系统
   15500:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   15504:	74 11                	je     15517 <sys_open+0x126>
    // 获取下一级路径
    name = path_next_child(name);
   15506:	83 ec 0c             	sub    $0xc,%esp
   15509:	ff 75 08             	push   0x8(%ebp)
   1550c:	e8 93 fd ff ff       	call   152a4 <path_next_child>
   15511:	83 c4 10             	add    $0x10,%esp
   15514:	89 45 08             	mov    %eax,0x8(%ebp)
  } else {  // 未找到对应文件系统，使用默认文件系统
  }

  // 为文件绑定模式参数和文件系统
  file->mode = flags;
   15517:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1551a:	8b 55 0c             	mov    0xc(%ebp),%edx
   1551d:	89 50 34             	mov    %edx,0x34(%eax)
  file->fs = fs;
   15520:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15523:	8b 55 f4             	mov    -0xc(%ebp),%edx
   15526:	89 50 38             	mov    %edx,0x38(%eax)
  kernel_strncpy(file->file_name, name, FILE_NAME_SIZE);
   15529:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1552c:	83 ec 04             	sub    $0x4,%esp
   1552f:	6a 20                	push   $0x20
   15531:	ff 75 08             	push   0x8(%ebp)
   15534:	50                   	push   %eax
   15535:	e8 8b 14 00 00       	call   169c5 <kernel_strncpy>
   1553a:	83 c4 10             	add    $0x10,%esp

  // 使用该文件系统打开该文件
  fs_protect(fs);
   1553d:	83 ec 0c             	sub    $0xc,%esp
   15540:	ff 75 f4             	push   -0xc(%ebp)
   15543:	e8 53 fe ff ff       	call   1539b <fs_protect>
   15548:	83 c4 10             	add    $0x10,%esp
  int err = fs->op->open(fs, name, file);
   1554b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1554e:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   15554:	8b 40 08             	mov    0x8(%eax),%eax
   15557:	83 ec 04             	sub    $0x4,%esp
   1555a:	ff 75 ec             	push   -0x14(%ebp)
   1555d:	ff 75 08             	push   0x8(%ebp)
   15560:	ff 75 f4             	push   -0xc(%ebp)
   15563:	ff d0                	call   *%eax
   15565:	83 c4 10             	add    $0x10,%esp
   15568:	89 45 e0             	mov    %eax,-0x20(%ebp)
  fs_unprotect(fs);
   1556b:	83 ec 0c             	sub    $0xc,%esp
   1556e:	ff 75 f4             	push   -0xc(%ebp)
   15571:	e8 50 fe ff ff       	call   153c6 <fs_unprotect>
   15576:	83 c4 10             	add    $0x10,%esp

  if (err < 0) {
   15579:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   1557d:	79 12                	jns    15591 <sys_open+0x1a0>
    log_printf("open failed!");
   1557f:	83 ec 0c             	sub    $0xc,%esp
   15582:	68 97 83 01 00       	push   $0x18397
   15587:	e8 8c 1d 00 00       	call   17318 <log_printf>
   1558c:	83 c4 10             	add    $0x10,%esp
    goto sys_open_failed;
   1558f:	eb 06                	jmp    15597 <sys_open+0x1a6>
  }

  // 6.返回文件描述符
  return fd;
   15591:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15594:	eb 28                	jmp    155be <sys_open+0x1cd>
    goto sys_open_failed;
   15596:	90                   	nop

// 打开失败，回收资源
sys_open_failed:
  // 释放掉已分配的file
  file_free(file);
   15597:	83 ec 0c             	sub    $0xc,%esp
   1559a:	ff 75 ec             	push   -0x14(%ebp)
   1559d:	e8 10 fa ff ff       	call   14fb2 <file_free>
   155a2:	83 c4 10             	add    $0x10,%esp
  if (fd >= 0) {  // 释放掉已分配的打开文件表的资源
   155a5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   155a9:	78 0e                	js     155b9 <sys_open+0x1c8>
    task_remove_fd(fd);
   155ab:	83 ec 0c             	sub    $0xc,%esp
   155ae:	ff 75 e8             	push   -0x18(%ebp)
   155b1:	e8 69 bd ff ff       	call   1131f <task_remove_fd>
   155b6:	83 c4 10             	add    $0x10,%esp
  }

  return -1;
   155b9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   155be:	c9                   	leave  
   155bf:	c3                   	ret    

000155c0 <sys_read>:
 * @param fd 文件描述符
 * @param buf 缓冲区地址
 * @param len 读取字节数
 * @return int 成功读取字节数
 */
int sys_read(int fd, char *buf, int len) {
   155c0:	55                   	push   %ebp
   155c1:	89 e5                	mov    %esp,%ebp
   155c3:	83 ec 18             	sub    $0x18,%esp
  if (fd == TEMP_FILE_ID) {
   155c6:	83 7d 08 64          	cmpl   $0x64,0x8(%ebp)
   155ca:	75 2f                	jne    155fb <sys_read+0x3b>
    kernel_memcpy(buf, temp_pos, len);
   155cc:	a1 c4 ea 06 00       	mov    0x6eac4,%eax
   155d1:	83 ec 04             	sub    $0x4,%esp
   155d4:	ff 75 10             	push   0x10(%ebp)
   155d7:	50                   	push   %eax
   155d8:	ff 75 0c             	push   0xc(%ebp)
   155db:	e8 ec 14 00 00       	call   16acc <kernel_memcpy>
   155e0:	83 c4 10             	add    $0x10,%esp
    temp_pos += len;
   155e3:	8b 15 c4 ea 06 00    	mov    0x6eac4,%edx
   155e9:	8b 45 10             	mov    0x10(%ebp),%eax
   155ec:	01 d0                	add    %edx,%eax
   155ee:	a3 c4 ea 06 00       	mov    %eax,0x6eac4
    return len;
   155f3:	8b 45 10             	mov    0x10(%ebp),%eax
   155f6:	e9 c0 00 00 00       	jmp    156bb <sys_read+0xfb>
  }

  if (is_fd_bad(fd) || !buf || !len) {
   155fb:	83 ec 0c             	sub    $0xc,%esp
   155fe:	ff 75 08             	push   0x8(%ebp)
   15601:	e8 60 fc ff ff       	call   15266 <is_fd_bad>
   15606:	83 c4 10             	add    $0x10,%esp
   15609:	85 c0                	test   %eax,%eax
   1560b:	75 0c                	jne    15619 <sys_read+0x59>
   1560d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   15611:	74 06                	je     15619 <sys_read+0x59>
   15613:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   15617:	75 0a                	jne    15623 <sys_read+0x63>
    return -1;
   15619:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1561e:	e9 98 00 00 00       	jmp    156bb <sys_read+0xfb>
  }

  //1.根据文件描述符从当前进程的打开文件表中获取文件指针
  file_t *file = task_file(fd);
   15623:	83 ec 0c             	sub    $0xc,%esp
   15626:	ff 75 08             	push   0x8(%ebp)
   15629:	e8 6e bc ff ff       	call   1129c <task_file>
   1562e:	83 c4 10             	add    $0x10,%esp
   15631:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (!file) {  // 获取失败
   15634:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   15638:	75 17                	jne    15651 <sys_read+0x91>
    log_printf("file not opened!\n");
   1563a:	83 ec 0c             	sub    $0xc,%esp
   1563d:	68 a4 83 01 00       	push   $0x183a4
   15642:	e8 d1 1c 00 00       	call   17318 <log_printf>
   15647:	83 c4 10             	add    $0x10,%esp
    return -1;
   1564a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1564f:	eb 6a                	jmp    156bb <sys_read+0xfb>
  }

  //2.判断文件的读写模式
  if (file->mode == O_WRONLY) { //文件只写，不可读
   15651:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15654:	8b 40 34             	mov    0x34(%eax),%eax
   15657:	83 f8 01             	cmp    $0x1,%eax
   1565a:	75 17                	jne    15673 <sys_read+0xb3>
    log_printf("file is write only!\n");
   1565c:	83 ec 0c             	sub    $0xc,%esp
   1565f:	68 b6 83 01 00       	push   $0x183b6
   15664:	e8 af 1c 00 00       	call   17318 <log_printf>
   15669:	83 c4 10             	add    $0x10,%esp
    return -1;
   1566c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15671:	eb 48                	jmp    156bb <sys_read+0xfb>
  }

  //3.获取文件对应的文件系统，并执行读操作
  fs_t *fs = file->fs;
   15673:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15676:	8b 40 38             	mov    0x38(%eax),%eax
   15679:	89 45 f0             	mov    %eax,-0x10(%ebp)
  fs_protect(fs);
   1567c:	83 ec 0c             	sub    $0xc,%esp
   1567f:	ff 75 f0             	push   -0x10(%ebp)
   15682:	e8 14 fd ff ff       	call   1539b <fs_protect>
   15687:	83 c4 10             	add    $0x10,%esp
  int err = fs->op->read(buf, len, file);
   1568a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1568d:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   15693:	8b 40 0c             	mov    0xc(%eax),%eax
   15696:	83 ec 04             	sub    $0x4,%esp
   15699:	ff 75 f4             	push   -0xc(%ebp)
   1569c:	ff 75 10             	push   0x10(%ebp)
   1569f:	ff 75 0c             	push   0xc(%ebp)
   156a2:	ff d0                	call   *%eax
   156a4:	83 c4 10             	add    $0x10,%esp
   156a7:	89 45 ec             	mov    %eax,-0x14(%ebp)
  fs_unprotect(fs);
   156aa:	83 ec 0c             	sub    $0xc,%esp
   156ad:	ff 75 f0             	push   -0x10(%ebp)
   156b0:	e8 11 fd ff ff       	call   153c6 <fs_unprotect>
   156b5:	83 c4 10             	add    $0x10,%esp

  return err;
   156b8:	8b 45 ec             	mov    -0x14(%ebp),%eax

}
   156bb:	c9                   	leave  
   156bc:	c3                   	ret    

000156bd <sys_write>:
 * @param fd 文件描述符
 * @param ptr 缓冲区地址
 * @param len 写入字节数
 * @return int 成功写入字节数
 */
int sys_write(int fd, char *buf, int len) {
   156bd:	55                   	push   %ebp
   156be:	89 e5                	mov    %esp,%ebp
   156c0:	83 ec 18             	sub    $0x18,%esp
   if (is_fd_bad(fd) || !buf || !len) {
   156c3:	ff 75 08             	push   0x8(%ebp)
   156c6:	e8 9b fb ff ff       	call   15266 <is_fd_bad>
   156cb:	83 c4 04             	add    $0x4,%esp
   156ce:	85 c0                	test   %eax,%eax
   156d0:	75 0c                	jne    156de <sys_write+0x21>
   156d2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   156d6:	74 06                	je     156de <sys_write+0x21>
   156d8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   156dc:	75 0a                	jne    156e8 <sys_write+0x2b>
    return -1;
   156de:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   156e3:	e9 97 00 00 00       	jmp    1577f <sys_write+0xc2>
  }

  //1.根据文件描述符从当前进程的打开文件表中获取文件指针
  file_t *file = task_file(fd);
   156e8:	83 ec 0c             	sub    $0xc,%esp
   156eb:	ff 75 08             	push   0x8(%ebp)
   156ee:	e8 a9 bb ff ff       	call   1129c <task_file>
   156f3:	83 c4 10             	add    $0x10,%esp
   156f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (!file) {  // 获取失败
   156f9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   156fd:	75 17                	jne    15716 <sys_write+0x59>
    log_printf("file not opened!\n");
   156ff:	83 ec 0c             	sub    $0xc,%esp
   15702:	68 a4 83 01 00       	push   $0x183a4
   15707:	e8 0c 1c 00 00       	call   17318 <log_printf>
   1570c:	83 c4 10             	add    $0x10,%esp
    return -1;
   1570f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15714:	eb 69                	jmp    1577f <sys_write+0xc2>
  }

  //2.判断文件的读写模式
  if (file->mode == O_RDONLY) { //文件只读，不可写
   15716:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15719:	8b 40 34             	mov    0x34(%eax),%eax
   1571c:	85 c0                	test   %eax,%eax
   1571e:	75 17                	jne    15737 <sys_write+0x7a>
    log_printf("file is read only!\n");
   15720:	83 ec 0c             	sub    $0xc,%esp
   15723:	68 cb 83 01 00       	push   $0x183cb
   15728:	e8 eb 1b 00 00       	call   17318 <log_printf>
   1572d:	83 c4 10             	add    $0x10,%esp
    return -1;
   15730:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15735:	eb 48                	jmp    1577f <sys_write+0xc2>
  }

  //3.获取文件对应的文件系统，并执行写操作
  fs_t *fs = file->fs;
   15737:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1573a:	8b 40 38             	mov    0x38(%eax),%eax
   1573d:	89 45 f0             	mov    %eax,-0x10(%ebp)
  fs_protect(fs);
   15740:	83 ec 0c             	sub    $0xc,%esp
   15743:	ff 75 f0             	push   -0x10(%ebp)
   15746:	e8 50 fc ff ff       	call   1539b <fs_protect>
   1574b:	83 c4 10             	add    $0x10,%esp
  int err = fs->op->write(buf, len, file);
   1574e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15751:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   15757:	8b 40 10             	mov    0x10(%eax),%eax
   1575a:	83 ec 04             	sub    $0x4,%esp
   1575d:	ff 75 f4             	push   -0xc(%ebp)
   15760:	ff 75 10             	push   0x10(%ebp)
   15763:	ff 75 0c             	push   0xc(%ebp)
   15766:	ff d0                	call   *%eax
   15768:	83 c4 10             	add    $0x10,%esp
   1576b:	89 45 ec             	mov    %eax,-0x14(%ebp)
  fs_unprotect(fs);
   1576e:	83 ec 0c             	sub    $0xc,%esp
   15771:	ff 75 f0             	push   -0x10(%ebp)
   15774:	e8 4d fc ff ff       	call   153c6 <fs_unprotect>
   15779:	83 c4 10             	add    $0x10,%esp
  
  return err;
   1577c:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
   1577f:	c9                   	leave  
   15780:	c3                   	ret    

00015781 <sys_lseek>:
 * @param fd
 * @param offset
 * @param pos
 * @return int
 */
int sys_lseek(int fd, int offset, int dir) {
   15781:	55                   	push   %ebp
   15782:	89 e5                	mov    %esp,%ebp
   15784:	83 ec 18             	sub    $0x18,%esp
  if (fd == TEMP_FILE_ID) {
   15787:	83 7d 08 64          	cmpl   $0x64,0x8(%ebp)
   1578b:	75 17                	jne    157a4 <sys_lseek+0x23>
    temp_pos = (uint8_t *)(TEMP_ADDR + offset);
   1578d:	8b 45 0c             	mov    0xc(%ebp),%eax
   15790:	05 00 00 80 07       	add    $0x7800000,%eax
   15795:	a3 c4 ea 06 00       	mov    %eax,0x6eac4
    return 0;
   1579a:	b8 00 00 00 00       	mov    $0x0,%eax
   1579f:	e9 8d 00 00 00       	jmp    15831 <sys_lseek+0xb0>
  }

  if (is_fd_bad(fd)) {
   157a4:	ff 75 08             	push   0x8(%ebp)
   157a7:	e8 ba fa ff ff       	call   15266 <is_fd_bad>
   157ac:	83 c4 04             	add    $0x4,%esp
   157af:	85 c0                	test   %eax,%eax
   157b1:	74 07                	je     157ba <sys_lseek+0x39>
    return -1;
   157b3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   157b8:	eb 77                	jmp    15831 <sys_lseek+0xb0>
  }

  //1.根据文件描述符从当前进程的打开文件表中获取文件指针
  file_t *file = task_file(fd);
   157ba:	83 ec 0c             	sub    $0xc,%esp
   157bd:	ff 75 08             	push   0x8(%ebp)
   157c0:	e8 d7 ba ff ff       	call   1129c <task_file>
   157c5:	83 c4 10             	add    $0x10,%esp
   157c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (!file) {  // 获取失败
   157cb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   157cf:	75 17                	jne    157e8 <sys_lseek+0x67>
    log_printf("file not opened!\n");
   157d1:	83 ec 0c             	sub    $0xc,%esp
   157d4:	68 a4 83 01 00       	push   $0x183a4
   157d9:	e8 3a 1b 00 00       	call   17318 <log_printf>
   157de:	83 c4 10             	add    $0x10,%esp
    return -1;
   157e1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   157e6:	eb 49                	jmp    15831 <sys_lseek+0xb0>
  }


  //2.获取文件对应的文件系统，并执行偏移操作
  fs_t *fs = file->fs;
   157e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   157eb:	8b 40 38             	mov    0x38(%eax),%eax
   157ee:	89 45 f0             	mov    %eax,-0x10(%ebp)
  fs_protect(fs);
   157f1:	83 ec 0c             	sub    $0xc,%esp
   157f4:	ff 75 f0             	push   -0x10(%ebp)
   157f7:	e8 9f fb ff ff       	call   1539b <fs_protect>
   157fc:	83 c4 10             	add    $0x10,%esp
  int err = fs->op->seek(file, offset, dir);
   157ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15802:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   15808:	8b 40 18             	mov    0x18(%eax),%eax
   1580b:	8b 55 0c             	mov    0xc(%ebp),%edx
   1580e:	83 ec 04             	sub    $0x4,%esp
   15811:	ff 75 10             	push   0x10(%ebp)
   15814:	52                   	push   %edx
   15815:	ff 75 f4             	push   -0xc(%ebp)
   15818:	ff d0                	call   *%eax
   1581a:	83 c4 10             	add    $0x10,%esp
   1581d:	89 45 ec             	mov    %eax,-0x14(%ebp)
  fs_unprotect(fs);
   15820:	83 ec 0c             	sub    $0xc,%esp
   15823:	ff 75 f0             	push   -0x10(%ebp)
   15826:	e8 9b fb ff ff       	call   153c6 <fs_unprotect>
   1582b:	83 c4 10             	add    $0x10,%esp
  
  return err;
   1582e:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
   15831:	c9                   	leave  
   15832:	c3                   	ret    

00015833 <sys_close>:
 * @brief 关闭文件
 *
 * @param fd
 * @return int
 */
int sys_close(int fd) {
   15833:	55                   	push   %ebp
   15834:	89 e5                	mov    %esp,%ebp
   15836:	83 ec 18             	sub    $0x18,%esp

  if (fd == TEMP_FILE_ID) {
   15839:	83 7d 08 64          	cmpl   $0x64,0x8(%ebp)
   1583d:	75 0a                	jne    15849 <sys_close+0x16>
    return 0;
   1583f:	b8 00 00 00 00       	mov    $0x0,%eax
   15844:	e9 f1 00 00 00       	jmp    1593a <sys_close+0x107>
  }


  if (is_fd_bad(fd)) {
   15849:	ff 75 08             	push   0x8(%ebp)
   1584c:	e8 15 fa ff ff       	call   15266 <is_fd_bad>
   15851:	83 c4 04             	add    $0x4,%esp
   15854:	85 c0                	test   %eax,%eax
   15856:	74 1a                	je     15872 <sys_close+0x3f>
    log_printf("file error");
   15858:	83 ec 0c             	sub    $0xc,%esp
   1585b:	68 df 83 01 00       	push   $0x183df
   15860:	e8 b3 1a 00 00       	call   17318 <log_printf>
   15865:	83 c4 10             	add    $0x10,%esp
    return -1;
   15868:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1586d:	e9 c8 00 00 00       	jmp    1593a <sys_close+0x107>
  }

  //1.从打开文件表中获取文件结构
  file_t *file = task_file(fd);
   15872:	83 ec 0c             	sub    $0xc,%esp
   15875:	ff 75 08             	push   0x8(%ebp)
   15878:	e8 1f ba ff ff       	call   1129c <task_file>
   1587d:	83 c4 10             	add    $0x10,%esp
   15880:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (!file) {
   15883:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   15887:	75 1a                	jne    158a3 <sys_close+0x70>
    log_printf("file not opened!\n");
   15889:	83 ec 0c             	sub    $0xc,%esp
   1588c:	68 a4 83 01 00       	push   $0x183a4
   15891:	e8 82 1a 00 00       	call   17318 <log_printf>
   15896:	83 c4 10             	add    $0x10,%esp
    return -1;
   15899:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1589e:	e9 97 00 00 00       	jmp    1593a <sys_close+0x107>
  }

  ASSERT(file->ref > 0);  //文件必须为打开状态
   158a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   158a6:	8b 40 28             	mov    0x28(%eax),%eax
   158a9:	85 c0                	test   %eax,%eax
   158ab:	7f 1c                	jg     158c9 <sys_close+0x96>
   158ad:	68 ea 83 01 00       	push   $0x183ea
   158b2:	68 1c 85 01 00       	push   $0x1851c
   158b7:	68 9c 01 00 00       	push   $0x19c
   158bc:	68 f8 83 01 00       	push   $0x183f8
   158c1:	e8 3c 0d 00 00       	call   16602 <pannic>
   158c6:	83 c4 10             	add    $0x10,%esp

  //2.若当前文件只被一个进程引用则获取对应文件系统并执行关闭操作
  if (file->ref-- == 1) {
   158c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   158cc:	8b 40 28             	mov    0x28(%eax),%eax
   158cf:	8d 48 ff             	lea    -0x1(%eax),%ecx
   158d2:	8b 55 f4             	mov    -0xc(%ebp),%edx
   158d5:	89 4a 28             	mov    %ecx,0x28(%edx)
   158d8:	83 f8 01             	cmp    $0x1,%eax
   158db:	75 4a                	jne    15927 <sys_close+0xf4>
    fs_t *fs = file->fs;
   158dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   158e0:	8b 40 38             	mov    0x38(%eax),%eax
   158e3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    fs_protect(fs);
   158e6:	83 ec 0c             	sub    $0xc,%esp
   158e9:	ff 75 f0             	push   -0x10(%ebp)
   158ec:	e8 aa fa ff ff       	call   1539b <fs_protect>
   158f1:	83 c4 10             	add    $0x10,%esp
    fs->op->close(file);
   158f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   158f7:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   158fd:	8b 40 14             	mov    0x14(%eax),%eax
   15900:	83 ec 0c             	sub    $0xc,%esp
   15903:	ff 75 f4             	push   -0xc(%ebp)
   15906:	ff d0                	call   *%eax
   15908:	83 c4 10             	add    $0x10,%esp
    fs_protect(fs);
   1590b:	83 ec 0c             	sub    $0xc,%esp
   1590e:	ff 75 f0             	push   -0x10(%ebp)
   15911:	e8 85 fa ff ff       	call   1539b <fs_protect>
   15916:	83 c4 10             	add    $0x10,%esp

    //关闭文件后释放文件结构
    file_free(file);
   15919:	83 ec 0c             	sub    $0xc,%esp
   1591c:	ff 75 f4             	push   -0xc(%ebp)
   1591f:	e8 8e f6 ff ff       	call   14fb2 <file_free>
   15924:	83 c4 10             	add    $0x10,%esp
  }

  //3.当前文件还被其它进程所引用，只在当前进程的打开文件表中释放该文件即可
  task_remove_fd(fd);
   15927:	83 ec 0c             	sub    $0xc,%esp
   1592a:	ff 75 08             	push   0x8(%ebp)
   1592d:	e8 ed b9 ff ff       	call   1131f <task_remove_fd>
   15932:	83 c4 10             	add    $0x10,%esp

  return 0;
   15935:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1593a:	c9                   	leave  
   1593b:	c3                   	ret    

0001593c <sys_fstat>:
 *
 * @param fd
 * @param st
 * @return int
 */
int sys_fstat(int fd, struct stat *st) { 
   1593c:	55                   	push   %ebp
   1593d:	89 e5                	mov    %esp,%ebp
   1593f:	83 ec 18             	sub    $0x18,%esp
  
   if (is_fd_bad(fd)) {
   15942:	ff 75 08             	push   0x8(%ebp)
   15945:	e8 1c f9 ff ff       	call   15266 <is_fd_bad>
   1594a:	83 c4 04             	add    $0x4,%esp
   1594d:	85 c0                	test   %eax,%eax
   1594f:	74 1a                	je     1596b <sys_fstat+0x2f>
    log_printf("file error");
   15951:	83 ec 0c             	sub    $0xc,%esp
   15954:	68 df 83 01 00       	push   $0x183df
   15959:	e8 ba 19 00 00       	call   17318 <log_printf>
   1595e:	83 c4 10             	add    $0x10,%esp
    return -1;
   15961:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15966:	e9 85 00 00 00       	jmp    159f0 <sys_fstat+0xb4>
  }

  //1.从打开文件表中获取文件结构
  file_t *file = task_file(fd);
   1596b:	83 ec 0c             	sub    $0xc,%esp
   1596e:	ff 75 08             	push   0x8(%ebp)
   15971:	e8 26 b9 ff ff       	call   1129c <task_file>
   15976:	83 c4 10             	add    $0x10,%esp
   15979:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (!file) {
   1597c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   15980:	75 17                	jne    15999 <sys_fstat+0x5d>
    log_printf("file not opened!\n");
   15982:	83 ec 0c             	sub    $0xc,%esp
   15985:	68 a4 83 01 00       	push   $0x183a4
   1598a:	e8 89 19 00 00       	call   17318 <log_printf>
   1598f:	83 c4 10             	add    $0x10,%esp
    return -1;
   15992:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15997:	eb 57                	jmp    159f0 <sys_fstat+0xb4>
  }

  //2.获取对应文件系统进行状态获取操作
  fs_t *fs = file->fs;
   15999:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1599c:	8b 40 38             	mov    0x38(%eax),%eax
   1599f:	89 45 f0             	mov    %eax,-0x10(%ebp)
  kernel_memset(st, 0, sizeof(struct stat));
   159a2:	83 ec 04             	sub    $0x4,%esp
   159a5:	6a 48                	push   $0x48
   159a7:	6a 00                	push   $0x0
   159a9:	ff 75 0c             	push   0xc(%ebp)
   159ac:	e8 6a 11 00 00       	call   16b1b <kernel_memset>
   159b1:	83 c4 10             	add    $0x10,%esp
  fs_protect(fs);
   159b4:	83 ec 0c             	sub    $0xc,%esp
   159b7:	ff 75 f0             	push   -0x10(%ebp)
   159ba:	e8 dc f9 ff ff       	call   1539b <fs_protect>
   159bf:	83 c4 10             	add    $0x10,%esp
  int err = fs->op->stat(file, st);
   159c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   159c5:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   159cb:	8b 40 1c             	mov    0x1c(%eax),%eax
   159ce:	83 ec 08             	sub    $0x8,%esp
   159d1:	ff 75 0c             	push   0xc(%ebp)
   159d4:	ff 75 f4             	push   -0xc(%ebp)
   159d7:	ff d0                	call   *%eax
   159d9:	83 c4 10             	add    $0x10,%esp
   159dc:	89 45 ec             	mov    %eax,-0x14(%ebp)
  fs_unprotect(fs);
   159df:	83 ec 0c             	sub    $0xc,%esp
   159e2:	ff 75 f0             	push   -0x10(%ebp)
   159e5:	e8 dc f9 ff ff       	call   153c6 <fs_unprotect>
   159ea:	83 c4 10             	add    $0x10,%esp


  return err;
   159ed:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
   159f0:	c9                   	leave  
   159f1:	c3                   	ret    

000159f2 <sys_isatty>:
 * @brief
 *
 * @param fd
 * @return int
 */
int sys_isatty(int fd) { 
   159f2:	55                   	push   %ebp
   159f3:	89 e5                	mov    %esp,%ebp
   159f5:	83 ec 18             	sub    $0x18,%esp
   if (is_fd_bad(fd)) {
   159f8:	ff 75 08             	push   0x8(%ebp)
   159fb:	e8 66 f8 ff ff       	call   15266 <is_fd_bad>
   15a00:	83 c4 04             	add    $0x4,%esp
   15a03:	85 c0                	test   %eax,%eax
   15a05:	74 17                	je     15a1e <sys_isatty+0x2c>
    log_printf("file error");
   15a07:	83 ec 0c             	sub    $0xc,%esp
   15a0a:	68 df 83 01 00       	push   $0x183df
   15a0f:	e8 04 19 00 00       	call   17318 <log_printf>
   15a14:	83 c4 10             	add    $0x10,%esp
    return -1;
   15a17:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15a1c:	eb 3d                	jmp    15a5b <sys_isatty+0x69>
  }

  //1.从打开文件表中获取文件结构
  file_t *file = task_file(fd);
   15a1e:	83 ec 0c             	sub    $0xc,%esp
   15a21:	ff 75 08             	push   0x8(%ebp)
   15a24:	e8 73 b8 ff ff       	call   1129c <task_file>
   15a29:	83 c4 10             	add    $0x10,%esp
   15a2c:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (!file) {
   15a2f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   15a33:	75 17                	jne    15a4c <sys_isatty+0x5a>
    log_printf("file not opened!\n");
   15a35:	83 ec 0c             	sub    $0xc,%esp
   15a38:	68 a4 83 01 00       	push   $0x183a4
   15a3d:	e8 d6 18 00 00       	call   17318 <log_printf>
   15a42:	83 c4 10             	add    $0x10,%esp
    return -1;
   15a45:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15a4a:	eb 0f                	jmp    15a5b <sys_isatty+0x69>
  }

  return file->type == FILE_TTY;
   15a4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15a4f:	8b 40 20             	mov    0x20(%eax),%eax
   15a52:	83 f8 01             	cmp    $0x1,%eax
   15a55:	0f 94 c0             	sete   %al
   15a58:	0f b6 c0             	movzbl %al,%eax
}
   15a5b:	c9                   	leave  
   15a5c:	c3                   	ret    

00015a5d <sys_dup>:
 * @brief 在当前进程的打开文件表中分配新的一项指向该文件描述符对应的文件指针
 *
 * @param fd 需要被多次引用的文件指针的文件描述符
 * @return int 新的文件描述符
 */
int sys_dup(int fd) {
   15a5d:	55                   	push   %ebp
   15a5e:	89 e5                	mov    %esp,%ebp
   15a60:	83 ec 18             	sub    $0x18,%esp
  if (is_fd_bad(fd)) {
   15a63:	ff 75 08             	push   0x8(%ebp)
   15a66:	e8 fb f7 ff ff       	call   15266 <is_fd_bad>
   15a6b:	83 c4 04             	add    $0x4,%esp
   15a6e:	85 c0                	test   %eax,%eax
   15a70:	74 1a                	je     15a8c <sys_dup+0x2f>
    log_printf("fd %d is not valid.", fd);
   15a72:	83 ec 08             	sub    $0x8,%esp
   15a75:	ff 75 08             	push   0x8(%ebp)
   15a78:	68 29 84 01 00       	push   $0x18429
   15a7d:	e8 96 18 00 00       	call   17318 <log_printf>
   15a82:	83 c4 10             	add    $0x10,%esp
    return -1;
   15a85:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15a8a:	eb 6d                	jmp    15af9 <sys_dup+0x9c>
  }

  // 1.获取需要重复引用的文件指针
  file_t *file = task_file(fd);
   15a8c:	83 ec 0c             	sub    $0xc,%esp
   15a8f:	ff 75 08             	push   0x8(%ebp)
   15a92:	e8 05 b8 ff ff       	call   1129c <task_file>
   15a97:	83 c4 10             	add    $0x10,%esp
   15a9a:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (!file) {
   15a9d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   15aa1:	75 17                	jne    15aba <sys_dup+0x5d>
    log_printf("file not opend!\n");
   15aa3:	83 ec 0c             	sub    $0xc,%esp
   15aa6:	68 3d 84 01 00       	push   $0x1843d
   15aab:	e8 68 18 00 00       	call   17318 <log_printf>
   15ab0:	83 c4 10             	add    $0x10,%esp
    return -1;
   15ab3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15ab8:	eb 3f                	jmp    15af9 <sys_dup+0x9c>
  }

  // 2.在打开文件表中新分配一项给该文件指针
  int new_fd = task_alloc_fd(file);
   15aba:	83 ec 0c             	sub    $0xc,%esp
   15abd:	ff 75 f4             	push   -0xc(%ebp)
   15ac0:	e8 07 b8 ff ff       	call   112cc <task_alloc_fd>
   15ac5:	83 c4 10             	add    $0x10,%esp
   15ac8:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (new_fd < 0) {
   15acb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   15acf:	79 17                	jns    15ae8 <sys_dup+0x8b>
    log_printf("no task file avaliable\n");
   15ad1:	83 ec 0c             	sub    $0xc,%esp
   15ad4:	68 4e 84 01 00       	push   $0x1844e
   15ad9:	e8 3a 18 00 00       	call   17318 <log_printf>
   15ade:	83 c4 10             	add    $0x10,%esp
    return -1;
   15ae1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15ae6:	eb 11                	jmp    15af9 <sys_dup+0x9c>
  }

  file_inc_ref(file);  // 分配成功，该文件引用次数加一
   15ae8:	83 ec 0c             	sub    $0xc,%esp
   15aeb:	ff 75 f4             	push   -0xc(%ebp)
   15aee:	e8 01 f5 ff ff       	call   14ff4 <file_inc_ref>
   15af3:	83 c4 10             	add    $0x10,%esp
  return fd;
   15af6:	8b 45 08             	mov    0x8(%ebp),%eax
}
   15af9:	c9                   	leave  
   15afa:	c3                   	ret    

00015afb <mount_list_init>:

/**
 * @brief 初始化free_list和mount_list
 *
 */
static void mount_list_init(void) {
   15afb:	55                   	push   %ebp
   15afc:	89 e5                	mov    %esp,%ebp
   15afe:	83 ec 18             	sub    $0x18,%esp
  list_init(&free_list);
   15b01:	83 ec 0c             	sub    $0xc,%esp
   15b04:	68 b8 ea 06 00       	push   $0x6eab8
   15b09:	e8 4b f5 ff ff       	call   15059 <list_init>
   15b0e:	83 c4 10             	add    $0x10,%esp
  // 将全局文件系统加入到free_list，等待被挂载
  for (int i = 0; i < FS_TABLE_SIZE; ++i) {
   15b11:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   15b18:	eb 28                	jmp    15b42 <mount_list_init+0x47>
    list_insert_first(&free_list, &(fs_table[i].node));
   15b1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15b1d:	69 c0 1c 02 00 00    	imul   $0x21c,%eax,%eax
   15b23:	05 10 02 00 00       	add    $0x210,%eax
   15b28:	05 a0 d5 06 00       	add    $0x6d5a0,%eax
   15b2d:	83 ec 08             	sub    $0x8,%esp
   15b30:	50                   	push   %eax
   15b31:	68 b8 ea 06 00       	push   $0x6eab8
   15b36:	e8 65 14 00 00       	call   16fa0 <list_insert_first>
   15b3b:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < FS_TABLE_SIZE; ++i) {
   15b3e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   15b42:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
   15b46:	7e d2                	jle    15b1a <mount_list_init+0x1f>
  }

  list_init(&mounted_list);
   15b48:	83 ec 0c             	sub    $0xc,%esp
   15b4b:	68 80 d5 06 00       	push   $0x6d580
   15b50:	e8 04 f5 ff ff       	call   15059 <list_init>
   15b55:	83 c4 10             	add    $0x10,%esp
}
   15b58:	90                   	nop
   15b59:	c9                   	leave  
   15b5a:	c3                   	ret    

00015b5b <get_fs_op>:
 *
 * @param type
 * @param major
 * @return fs_op_t*
 */
static fs_op_t *get_fs_op(fs_type_t type, int major) {
   15b5b:	55                   	push   %ebp
   15b5c:	89 e5                	mov    %esp,%ebp
  switch (type) {
   15b5e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15b62:	75 07                	jne    15b6b <get_fs_op+0x10>
    case FS_DEVFS:
      return &devfs_op;
   15b64:	b8 c0 90 01 00       	mov    $0x190c0,%eax
   15b69:	eb 05                	jmp    15b70 <get_fs_op+0x15>
      break;
    default:
      return 0;
   15b6b:	b8 00 00 00 00       	mov    $0x0,%eax
      break;
  }
}
   15b70:	5d                   	pop    %ebp
   15b71:	c3                   	ret    

00015b72 <mount>:
 * @param dev_major 具体文件的主设备号
 * @param dev_minor 具体文件的次设备号
 * @return fs_t*
 */
static fs_t *mount(fs_type_t type, const char *mount_point, int dev_major,
                   int dev_minor) {
   15b72:	55                   	push   %ebp
   15b73:	89 e5                	mov    %esp,%ebp
   15b75:	83 ec 28             	sub    $0x28,%esp
  fs_t *fs = (fs_t *)0;
   15b78:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  log_printf("mount file system, name: %s, dev: %x", mount_point, dev_major);
   15b7f:	83 ec 04             	sub    $0x4,%esp
   15b82:	ff 75 10             	push   0x10(%ebp)
   15b85:	ff 75 0c             	push   0xc(%ebp)
   15b88:	68 68 84 01 00       	push   $0x18468
   15b8d:	e8 86 17 00 00       	call   17318 <log_printf>
   15b92:	83 c4 10             	add    $0x10,%esp

  // 1.检查当前文件系统是否已被挂载
  list_node_t *curr = list_get_first(&mounted_list);
   15b95:	83 ec 0c             	sub    $0xc,%esp
   15b98:	68 80 d5 06 00       	push   $0x6d580
   15b9d:	e8 fe f4 ff ff       	call   150a0 <list_get_first>
   15ba2:	83 c4 10             	add    $0x10,%esp
   15ba5:	89 45 f0             	mov    %eax,-0x10(%ebp)
  while (curr) {
   15ba8:	eb 59                	jmp    15c03 <mount+0x91>
    fs_t *fs = list_node_parent(curr, fs_t, node);
   15baa:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   15bae:	74 0a                	je     15bba <mount+0x48>
   15bb0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15bb3:	2d 10 02 00 00       	sub    $0x210,%eax
   15bb8:	eb 05                	jmp    15bbf <mount+0x4d>
   15bba:	b8 00 00 00 00       	mov    $0x0,%eax
   15bbf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (kernel_strncmp(fs->mount_point, mount_point, FS_MOUNT_POINT_SIZE) ==
   15bc2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   15bc5:	83 ec 04             	sub    $0x4,%esp
   15bc8:	68 00 02 00 00       	push   $0x200
   15bcd:	ff 75 0c             	push   0xc(%ebp)
   15bd0:	50                   	push   %eax
   15bd1:	e8 40 0e 00 00       	call   16a16 <kernel_strncmp>
   15bd6:	83 c4 10             	add    $0x10,%esp
   15bd9:	85 c0                	test   %eax,%eax
   15bdb:	75 15                	jne    15bf2 <mount+0x80>
        0) {
      log_printf("fs already mounted!");
   15bdd:	83 ec 0c             	sub    $0xc,%esp
   15be0:	68 8d 84 01 00       	push   $0x1848d
   15be5:	e8 2e 17 00 00       	call   17318 <log_printf>
   15bea:	83 c4 10             	add    $0x10,%esp
      goto mount_failed;
   15bed:	e9 11 01 00 00       	jmp    15d03 <mount+0x191>
    }

    curr = list_node_next(curr);
   15bf2:	83 ec 0c             	sub    $0xc,%esp
   15bf5:	ff 75 f0             	push   -0x10(%ebp)
   15bf8:	e8 2f f4 ff ff       	call   1502c <list_node_next>
   15bfd:	83 c4 10             	add    $0x10,%esp
   15c00:	89 45 f0             	mov    %eax,-0x10(%ebp)
  while (curr) {
   15c03:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   15c07:	75 a1                	jne    15baa <mount+0x38>
  }

  // 2.从空闲链表中取下一个待挂载的fs对象进行挂载
  list_node_t *free_node = list_remove_first(&free_list);
   15c09:	83 ec 0c             	sub    $0xc,%esp
   15c0c:	68 b8 ea 06 00       	push   $0x6eab8
   15c11:	e8 a4 14 00 00       	call   170ba <list_remove_first>
   15c16:	83 c4 10             	add    $0x10,%esp
   15c19:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if (!free_node) {
   15c1c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   15c20:	75 15                	jne    15c37 <mount+0xc5>
    log_printf("no free fs, mount failed!");
   15c22:	83 ec 0c             	sub    $0xc,%esp
   15c25:	68 a1 84 01 00       	push   $0x184a1
   15c2a:	e8 e9 16 00 00       	call   17318 <log_printf>
   15c2f:	83 c4 10             	add    $0x10,%esp
    goto mount_failed;
   15c32:	e9 cc 00 00 00       	jmp    15d03 <mount+0x191>
  }
  fs = list_node_parent(free_node, fs_t, node);
   15c37:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   15c3b:	74 0a                	je     15c47 <mount+0xd5>
   15c3d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15c40:	2d 10 02 00 00       	sub    $0x210,%eax
   15c45:	eb 05                	jmp    15c4c <mount+0xda>
   15c47:	b8 00 00 00 00       	mov    $0x0,%eax
   15c4c:	89 45 f4             	mov    %eax,-0xc(%ebp)
  kernel_memset(fs, 0, sizeof(fs_t));
   15c4f:	83 ec 04             	sub    $0x4,%esp
   15c52:	68 1c 02 00 00       	push   $0x21c
   15c57:	6a 00                	push   $0x0
   15c59:	ff 75 f4             	push   -0xc(%ebp)
   15c5c:	e8 ba 0e 00 00       	call   16b1b <kernel_memset>
   15c61:	83 c4 10             	add    $0x10,%esp
  kernel_strncpy(fs->mount_point, mount_point, FS_MOUNT_POINT_SIZE);
   15c64:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15c67:	83 ec 04             	sub    $0x4,%esp
   15c6a:	68 00 02 00 00       	push   $0x200
   15c6f:	ff 75 0c             	push   0xc(%ebp)
   15c72:	50                   	push   %eax
   15c73:	e8 4d 0d 00 00       	call   169c5 <kernel_strncpy>
   15c78:	83 c4 10             	add    $0x10,%esp

  // 3.获取该fs对象的操作函数表并交给该对象
  fs_op_t *op = get_fs_op(type, dev_major);
   15c7b:	83 ec 08             	sub    $0x8,%esp
   15c7e:	ff 75 10             	push   0x10(%ebp)
   15c81:	ff 75 08             	push   0x8(%ebp)
   15c84:	e8 d2 fe ff ff       	call   15b5b <get_fs_op>
   15c89:	83 c4 10             	add    $0x10,%esp
   15c8c:	89 45 e8             	mov    %eax,-0x18(%ebp)
  if (!op) {
   15c8f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   15c93:	75 15                	jne    15caa <mount+0x138>
    log_printf("unsupported fs type: %d", type);
   15c95:	83 ec 08             	sub    $0x8,%esp
   15c98:	ff 75 08             	push   0x8(%ebp)
   15c9b:	68 bb 84 01 00       	push   $0x184bb
   15ca0:	e8 73 16 00 00       	call   17318 <log_printf>
   15ca5:	83 c4 10             	add    $0x10,%esp
    goto mount_failed;
   15ca8:	eb 59                	jmp    15d03 <mount+0x191>
  }
  fs->op = op;
   15caa:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15cad:	8b 55 e8             	mov    -0x18(%ebp),%edx
   15cb0:	89 90 04 02 00 00    	mov    %edx,0x204(%eax)

  // 4.挂载该文件系统类型下具体的设备
  if (op->mount(fs, dev_major, dev_minor) < 0) {
   15cb6:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15cb9:	8b 00                	mov    (%eax),%eax
   15cbb:	83 ec 04             	sub    $0x4,%esp
   15cbe:	ff 75 14             	push   0x14(%ebp)
   15cc1:	ff 75 10             	push   0x10(%ebp)
   15cc4:	ff 75 f4             	push   -0xc(%ebp)
   15cc7:	ff d0                	call   *%eax
   15cc9:	83 c4 10             	add    $0x10,%esp
   15ccc:	85 c0                	test   %eax,%eax
   15cce:	79 15                	jns    15ce5 <mount+0x173>
    log_printf("mount fs %s failed!", mount_point);
   15cd0:	83 ec 08             	sub    $0x8,%esp
   15cd3:	ff 75 0c             	push   0xc(%ebp)
   15cd6:	68 d3 84 01 00       	push   $0x184d3
   15cdb:	e8 38 16 00 00       	call   17318 <log_printf>
   15ce0:	83 c4 10             	add    $0x10,%esp
    goto mount_failed;
   15ce3:	eb 1e                	jmp    15d03 <mount+0x191>
  }

  // 5.将该文件系统挂载到mounted_list上
  list_insert_last(&mounted_list, &fs->node);
   15ce5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15ce8:	05 10 02 00 00       	add    $0x210,%eax
   15ced:	83 ec 08             	sub    $0x8,%esp
   15cf0:	50                   	push   %eax
   15cf1:	68 80 d5 06 00       	push   $0x6d580
   15cf6:	e8 30 13 00 00       	call   1702b <list_insert_last>
   15cfb:	83 c4 10             	add    $0x10,%esp

  return fs;
   15cfe:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15d01:	eb 24                	jmp    15d27 <mount+0x1b5>

// 挂载失败的异常处理
mount_failed:
  // fs不为空，证明已从free_list上取下，需要将其插回去
  if (fs) {
   15d03:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   15d07:	74 19                	je     15d22 <mount+0x1b0>
    list_insert_last(&free_list, &fs->node);
   15d09:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15d0c:	05 10 02 00 00       	add    $0x210,%eax
   15d11:	83 ec 08             	sub    $0x8,%esp
   15d14:	50                   	push   %eax
   15d15:	68 b8 ea 06 00       	push   $0x6eab8
   15d1a:	e8 0c 13 00 00       	call   1702b <list_insert_last>
   15d1f:	83 c4 10             	add    $0x10,%esp
  }
  return (fs_t *)0;
   15d22:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15d27:	c9                   	leave  
   15d28:	c3                   	ret    

00015d29 <fs_init>:

/**
 * @brief 初始化文件系统
 *
 */
void fs_init(void) {
   15d29:	55                   	push   %ebp
   15d2a:	89 e5                	mov    %esp,%ebp
   15d2c:	83 ec 18             	sub    $0x18,%esp
  mount_list_init();
   15d2f:	e8 c7 fd ff ff       	call   15afb <mount_list_init>
  file_table_init();
   15d34:	e8 c5 f1 ff ff       	call   14efe <file_table_init>

  disk_init();
   15d39:	e8 e4 e5 ff ff       	call   14322 <disk_init>

  fs_t *fs = mount(FS_DEVFS, "/dev", 0, 0);
   15d3e:	6a 00                	push   $0x0
   15d40:	6a 00                	push   $0x0
   15d42:	68 e7 84 01 00       	push   $0x184e7
   15d47:	6a 00                	push   $0x0
   15d49:	e8 24 fe ff ff       	call   15b72 <mount>
   15d4e:	83 c4 10             	add    $0x10,%esp
   15d51:	89 45 f4             	mov    %eax,-0xc(%ebp)
  ASSERT(fs != (fs_t *)0);
   15d54:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   15d58:	75 1c                	jne    15d76 <fs_init+0x4d>
   15d5a:	68 ec 84 01 00       	push   $0x184ec
   15d5f:	68 34 85 01 00       	push   $0x18534
   15d64:	68 71 02 00 00       	push   $0x271
   15d69:	68 f8 83 01 00       	push   $0x183f8
   15d6e:	e8 8f 08 00 00       	call   16602 <pannic>
   15d73:	83 c4 10             	add    $0x10,%esp
   15d76:	90                   	nop
   15d77:	c9                   	leave  
   15d78:	c3                   	ret    

00015d79 <kernel_init>:

/**
 * @brief  对内核进行初始化操作
 * 
 */
void kernel_init(boot_info_t* boot_info) {
   15d79:	55                   	push   %ebp
   15d7a:	89 e5                	mov    %esp,%ebp
   15d7c:	83 ec 08             	sub    $0x8,%esp
    //1.判断是否检测到可用内存
    ASSERT(boot_info->ram_region_count != 0);
   15d7f:	8b 45 08             	mov    0x8(%ebp),%eax
   15d82:	8b 40 50             	mov    0x50(%eax),%eax
   15d85:	85 c0                	test   %eax,%eax
   15d87:	75 19                	jne    15da2 <kernel_init+0x29>
   15d89:	68 3c 85 01 00       	push   $0x1853c
   15d8e:	68 d8 85 01 00       	push   $0x185d8
   15d93:	6a 25                	push   $0x25
   15d95:	68 60 85 01 00       	push   $0x18560
   15d9a:	e8 63 08 00 00       	call   16602 <pannic>
   15d9f:	83 c4 10             	add    $0x10,%esp
    
    //2.初始化并重新加载GDT表
    gdt_init();
   15da2:	e8 82 ca ff ff       	call   12829 <gdt_init>

    //3.初始化并加载中断描述符表IDT
    idt_init();
   15da7:	e8 2b d2 ff ff       	call   12fd7 <idt_init>
 
    //4.初始化日志程序,便于后期调用
    log_init();
   15dac:	e8 38 15 00 00       	call   172e9 <log_init>

    //5.初始化内存管理
    memory_init(boot_info);  
   15db1:	83 ec 0c             	sub    $0xc,%esp
   15db4:	ff 75 08             	push   0x8(%ebp)
   15db7:	e8 9d ae ff ff       	call   10c59 <memory_init>
   15dbc:	83 c4 10             	add    $0x10,%esp

    //6.初始化文件系统
    fs_init();
   15dbf:	e8 65 ff ff ff       	call   15d29 <fs_init>

    //6.初始化定时器的中断处理
    time_init();
   15dc4:	e8 1f ea ff ff       	call   147e8 <time_init>
    
    //7.初始化任务管理器
    task_manager_init();
   15dc9:	e8 27 b9 ff ff       	call   116f5 <task_manager_init>
   
    //初始化完成后将在汇编里重新加载内核代码段与数据段的选择子，并为内核程序分配栈空间
}
   15dce:	90                   	nop
   15dcf:	c9                   	leave  
   15dd0:	c3                   	ret    

00015dd1 <move_to_first_task>:

/**
 * @brief 跳转到第一个任务进程
 * 
 */
void move_to_first_task(void) {
   15dd1:	55                   	push   %ebp
   15dd2:	89 e5                	mov    %esp,%ebp
   15dd4:	56                   	push   %esi
   15dd5:	53                   	push   %ebx
   15dd6:	83 ec 10             	sub    $0x10,%esp
    //1.获取当前任务
    task_t *curr = task_current();
   15dd9:	e8 b6 bb ff ff       	call   11994 <task_current>
   15dde:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT(curr != 0);
   15de1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   15de5:	75 19                	jne    15e00 <move_to_first_task+0x2f>
   15de7:	68 95 85 01 00       	push   $0x18595
   15dec:	68 e4 85 01 00       	push   $0x185e4
   15df1:	6a 48                	push   $0x48
   15df3:	68 60 85 01 00       	push   $0x18560
   15df8:	e8 05 08 00 00       	call   16602 <pannic>
   15dfd:	83 c4 10             	add    $0x10,%esp

    //2.获取当前任务的tss结构
    tss_t *tss = &(curr->tss);
   15e00:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15e03:	83 c0 5c             	add    $0x5c,%eax
   15e06:	89 45 f0             	mov    %eax,-0x10(%ebp)
        "push %[ss]\n\t"
        "push %[esp]\n\t"
        "push %[eflags]\n\t"
        "push %[cs]\n\t"
        "push %[eip]\n\t"
        "iret"::[ss]"r"(tss->ss), [esp]"r"(tss->esp), [eflags]"r"(tss->eflags), [cs]"r"(tss->cs), [eip]"r"(tss->eip)
   15e09:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15e0c:	8b 40 50             	mov    0x50(%eax),%eax
   15e0f:	8b 55 f0             	mov    -0x10(%ebp),%edx
   15e12:	8b 52 38             	mov    0x38(%edx),%edx
   15e15:	8b 4d f0             	mov    -0x10(%ebp),%ecx
   15e18:	8b 49 24             	mov    0x24(%ecx),%ecx
   15e1b:	8b 5d f0             	mov    -0x10(%ebp),%ebx
   15e1e:	8b 5b 4c             	mov    0x4c(%ebx),%ebx
   15e21:	8b 75 f0             	mov    -0x10(%ebp),%esi
   15e24:	8b 76 20             	mov    0x20(%esi),%esi
     __asm__ __volatile__(
   15e27:	50                   	push   %eax
   15e28:	52                   	push   %edx
   15e29:	51                   	push   %ecx
   15e2a:	53                   	push   %ebx
   15e2b:	56                   	push   %esi
   15e2c:	cf                   	iret   

        
    );
}
   15e2d:	90                   	nop
   15e2e:	8d 65 f8             	lea    -0x8(%ebp),%esp
   15e31:	5b                   	pop    %ebx
   15e32:	5e                   	pop    %esi
   15e33:	5d                   	pop    %ebp
   15e34:	c3                   	ret    

00015e35 <init_main>:


void init_main(void) {
   15e35:	55                   	push   %ebp
   15e36:	89 e5                	mov    %esp,%ebp
   15e38:	83 ec 08             	sub    $0x8,%esp
    
    log_printf("Kernel is running......\n");
   15e3b:	83 ec 0c             	sub    $0xc,%esp
   15e3e:	68 9f 85 01 00       	push   $0x1859f
   15e43:	e8 d0 14 00 00       	call   17318 <log_printf>
   15e48:	83 c4 10             	add    $0x10,%esp
    log_printf("Name: kbOS, Version: %s\n", OS_VERSION);
   15e4b:	83 ec 08             	sub    $0x8,%esp
   15e4e:	68 b8 85 01 00       	push   $0x185b8
   15e53:	68 be 85 01 00       	push   $0x185be
   15e58:	e8 bb 14 00 00       	call   17318 <log_printf>
   15e5d:	83 c4 10             	add    $0x10,%esp


    //当前任务作为任务管理器启用时的第一个任务
    task_first_init();
   15e60:	e8 6d b9 ff ff       	call   117d2 <task_first_init>

    //跳转到第一个任务进程去运行
    move_to_first_task();
   15e65:	e8 67 ff ff ff       	call   15dd1 <move_to_first_task>
   15e6a:	90                   	nop
   15e6b:	c9                   	leave  
   15e6c:	c3                   	ret    

00015e6d <list_init>:
static inline void list_init(list_t *list) {
   15e6d:	55                   	push   %ebp
   15e6e:	89 e5                	mov    %esp,%ebp
   15e70:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   15e73:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15e77:	75 19                	jne    15e92 <list_init+0x25>
   15e79:	68 f8 85 01 00       	push   $0x185f8
   15e7e:	68 a4 86 01 00       	push   $0x186a4
   15e83:	6a 31                	push   $0x31
   15e85:	68 0c 86 01 00       	push   $0x1860c
   15e8a:	e8 73 07 00 00       	call   16602 <pannic>
   15e8f:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   15e92:	8b 45 08             	mov    0x8(%ebp),%eax
   15e95:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   15e9c:	8b 45 08             	mov    0x8(%ebp),%eax
   15e9f:	8b 50 04             	mov    0x4(%eax),%edx
   15ea2:	8b 45 08             	mov    0x8(%ebp),%eax
   15ea5:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   15ea7:	8b 45 08             	mov    0x8(%ebp),%eax
   15eaa:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   15eb1:	90                   	nop
   15eb2:	c9                   	leave  
   15eb3:	c3                   	ret    

00015eb4 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   15eb4:	55                   	push   %ebp
   15eb5:	89 e5                	mov    %esp,%ebp
   15eb7:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   15eba:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15ebe:	75 19                	jne    15ed9 <list_is_empty+0x25>
   15ec0:	68 f8 85 01 00       	push   $0x185f8
   15ec5:	68 b0 86 01 00       	push   $0x186b0
   15eca:	6a 38                	push   $0x38
   15ecc:	68 0c 86 01 00       	push   $0x1860c
   15ed1:	e8 2c 07 00 00       	call   16602 <pannic>
   15ed6:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   15ed9:	8b 45 08             	mov    0x8(%ebp),%eax
   15edc:	8b 40 08             	mov    0x8(%eax),%eax
   15edf:	85 c0                	test   %eax,%eax
   15ee1:	0f 94 c0             	sete   %al
   15ee4:	0f b6 c0             	movzbl %al,%eax
}
   15ee7:	c9                   	leave  
   15ee8:	c3                   	ret    

00015ee9 <mutex_init>:
/**
 * @brief  初始化互斥锁
 *
 * @param mutex
 */
void mutex_init(mutex_t *mutex) {
   15ee9:	55                   	push   %ebp
   15eea:	89 e5                	mov    %esp,%ebp
   15eec:	83 ec 08             	sub    $0x8,%esp
  ASSERT(mutex != (mutex_t *)0);
   15eef:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15ef3:	75 19                	jne    15f0e <mutex_init+0x25>
   15ef5:	68 4a 86 01 00       	push   $0x1864a
   15efa:	68 98 86 01 00       	push   $0x18698
   15eff:	6a 15                	push   $0x15
   15f01:	68 60 86 01 00       	push   $0x18660
   15f06:	e8 f7 06 00 00       	call   16602 <pannic>
   15f0b:	83 c4 10             	add    $0x10,%esp

  mutex->locked_count = 0;
   15f0e:	8b 45 08             	mov    0x8(%ebp),%eax
   15f11:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  mutex->owner = (task_t *)0;
   15f18:	8b 45 08             	mov    0x8(%ebp),%eax
   15f1b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  list_init(&mutex->wait_list);
   15f21:	8b 45 08             	mov    0x8(%ebp),%eax
   15f24:	83 c0 08             	add    $0x8,%eax
   15f27:	83 ec 0c             	sub    $0xc,%esp
   15f2a:	50                   	push   %eax
   15f2b:	e8 3d ff ff ff       	call   15e6d <list_init>
   15f30:	83 c4 10             	add    $0x10,%esp
}
   15f33:	90                   	nop
   15f34:	c9                   	leave  
   15f35:	c3                   	ret    

00015f36 <mutex_lock>:
/**
 * @brief  加锁
 *
 * @param mutex
 */
void mutex_lock(mutex_t *mutex) {
   15f36:	55                   	push   %ebp
   15f37:	89 e5                	mov    %esp,%ebp
   15f39:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   15f3c:	e8 c6 d3 ff ff       	call   13307 <idt_enter_protection>
   15f41:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 1. 获取当前任务
  task_t *curr = task_current();
   15f44:	e8 4b ba ff ff       	call   11994 <task_current>
   15f49:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 2.判断该锁是否已被加锁
  if (mutex->locked_count == 0) {  
   15f4c:	8b 45 08             	mov    0x8(%ebp),%eax
   15f4f:	8b 40 04             	mov    0x4(%eax),%eax
   15f52:	85 c0                	test   %eax,%eax
   15f54:	75 19                	jne    15f6f <mutex_lock+0x39>
    //3.还未被加锁，则加锁并记录拥有该锁的任务
    mutex->locked_count++;
   15f56:	8b 45 08             	mov    0x8(%ebp),%eax
   15f59:	8b 40 04             	mov    0x4(%eax),%eax
   15f5c:	8d 50 01             	lea    0x1(%eax),%edx
   15f5f:	8b 45 08             	mov    0x8(%ebp),%eax
   15f62:	89 50 04             	mov    %edx,0x4(%eax)
    mutex->owner = curr;
   15f65:	8b 45 08             	mov    0x8(%ebp),%eax
   15f68:	8b 55 f0             	mov    -0x10(%ebp),%edx
   15f6b:	89 10                	mov    %edx,(%eax)
   15f6d:	eb 47                	jmp    15fb6 <mutex_lock+0x80>
  } else if (mutex->owner == curr) {
   15f6f:	8b 45 08             	mov    0x8(%ebp),%eax
   15f72:	8b 00                	mov    (%eax),%eax
   15f74:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   15f77:	75 11                	jne    15f8a <mutex_lock+0x54>
    //4.已被加锁，但当前加锁请求的任务为当前锁的拥有者，直接再加锁即可
    mutex->locked_count++;
   15f79:	8b 45 08             	mov    0x8(%ebp),%eax
   15f7c:	8b 40 04             	mov    0x4(%eax),%eax
   15f7f:	8d 50 01             	lea    0x1(%eax),%edx
   15f82:	8b 45 08             	mov    0x8(%ebp),%eax
   15f85:	89 50 04             	mov    %edx,0x4(%eax)
   15f88:	eb 2c                	jmp    15fb6 <mutex_lock+0x80>
  } else {  
    //5.已被加锁，且当前任务不是锁的拥有者，则当前任务进入锁的等待队列，被阻塞住
    task_set_unready(curr);
   15f8a:	83 ec 0c             	sub    $0xc,%esp
   15f8d:	ff 75 f0             	push   -0x10(%ebp)
   15f90:	e8 8f b9 ff ff       	call   11924 <task_set_unready>
   15f95:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&mutex->wait_list, &curr->wait_node);
   15f98:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15f9b:	8d 50 54             	lea    0x54(%eax),%edx
   15f9e:	8b 45 08             	mov    0x8(%ebp),%eax
   15fa1:	83 c0 08             	add    $0x8,%eax
   15fa4:	83 ec 08             	sub    $0x8,%esp
   15fa7:	52                   	push   %edx
   15fa8:	50                   	push   %eax
   15fa9:	e8 7d 10 00 00       	call   1702b <list_insert_last>
   15fae:	83 c4 10             	add    $0x10,%esp
    task_switch();
   15fb1:	e8 e8 b9 ff ff       	call   1199e <task_switch>
  }

  idt_leave_protection(state);  // TODO:解锁
   15fb6:	83 ec 0c             	sub    $0xc,%esp
   15fb9:	ff 75 f4             	push   -0xc(%ebp)
   15fbc:	e8 5e d3 ff ff       	call   1331f <idt_leave_protection>
   15fc1:	83 c4 10             	add    $0x10,%esp
}
   15fc4:	90                   	nop
   15fc5:	c9                   	leave  
   15fc6:	c3                   	ret    

00015fc7 <mutex_unlock>:
/**
 * @brief  解锁
 *
 * @param mutex
 */
void mutex_unlock(mutex_t *mutex) {
   15fc7:	55                   	push   %ebp
   15fc8:	89 e5                	mov    %esp,%ebp
   15fca:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   15fcd:	e8 35 d3 ff ff       	call   13307 <idt_enter_protection>
   15fd2:	89 45 f4             	mov    %eax,-0xc(%ebp)

  task_t *curr = task_current();
   15fd5:	e8 ba b9 ff ff       	call   11994 <task_current>
   15fda:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 1.判断当前任务是否是锁的拥有者
  if (mutex->owner == curr) {
   15fdd:	8b 45 08             	mov    0x8(%ebp),%eax
   15fe0:	8b 00                	mov    (%eax),%eax
   15fe2:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   15fe5:	0f 85 83 00 00 00    	jne    1606e <mutex_unlock+0xa7>
    //2.当前任务是锁的拥有者,对锁进行一次解锁，并判断是否已完全解锁
    if (--mutex->locked_count == 0) {
   15feb:	8b 45 08             	mov    0x8(%ebp),%eax
   15fee:	8b 40 04             	mov    0x4(%eax),%eax
   15ff1:	8d 50 ff             	lea    -0x1(%eax),%edx
   15ff4:	8b 45 08             	mov    0x8(%ebp),%eax
   15ff7:	89 50 04             	mov    %edx,0x4(%eax)
   15ffa:	8b 45 08             	mov    0x8(%ebp),%eax
   15ffd:	8b 40 04             	mov    0x4(%eax),%eax
   16000:	85 c0                	test   %eax,%eax
   16002:	75 6a                	jne    1606e <mutex_unlock+0xa7>
      //3.锁已被完全解锁,将锁的所有者置空
      mutex->owner = (task_t*)0;
   16004:	8b 45 08             	mov    0x8(%ebp),%eax
   16007:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      //4.判断当前等待队列是否为空
      if (!list_is_empty(&mutex->wait_list)) { 
   1600d:	8b 45 08             	mov    0x8(%ebp),%eax
   16010:	83 c0 08             	add    $0x8,%eax
   16013:	83 ec 0c             	sub    $0xc,%esp
   16016:	50                   	push   %eax
   16017:	e8 98 fe ff ff       	call   15eb4 <list_is_empty>
   1601c:	83 c4 10             	add    $0x10,%esp
   1601f:	85 c0                	test   %eax,%eax
   16021:	75 4b                	jne    1606e <mutex_unlock+0xa7>
        //5.当前等待队列不为空,对锁进行加锁，并交给等待队列的第一个任务
        list_node_t *node = list_remove_first(&mutex->wait_list);
   16023:	8b 45 08             	mov    0x8(%ebp),%eax
   16026:	83 c0 08             	add    $0x8,%eax
   16029:	83 ec 0c             	sub    $0xc,%esp
   1602c:	50                   	push   %eax
   1602d:	e8 88 10 00 00       	call   170ba <list_remove_first>
   16032:	83 c4 10             	add    $0x10,%esp
   16035:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t *task_wait = list_node_parent(node, task_t, wait_node);
   16038:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1603c:	74 08                	je     16046 <mutex_unlock+0x7f>
   1603e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16041:	83 e8 54             	sub    $0x54,%eax
   16044:	eb 05                	jmp    1604b <mutex_unlock+0x84>
   16046:	b8 00 00 00 00       	mov    $0x0,%eax
   1604b:	89 45 e8             	mov    %eax,-0x18(%ebp)
        mutex->locked_count = 1;
   1604e:	8b 45 08             	mov    0x8(%ebp),%eax
   16051:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        mutex->owner = task_wait;
   16058:	8b 45 08             	mov    0x8(%ebp),%eax
   1605b:	8b 55 e8             	mov    -0x18(%ebp),%edx
   1605e:	89 10                	mov    %edx,(%eax)
        //6.让该任务进入就绪队列
        task_set_ready(task_wait);
   16060:	83 ec 0c             	sub    $0xc,%esp
   16063:	ff 75 e8             	push   -0x18(%ebp)
   16066:	e8 77 b8 ff ff       	call   118e2 <task_set_ready>
   1606b:	83 c4 10             	add    $0x10,%esp
      }
    }
  }

  idt_leave_protection(state);  // TODO:解锁
   1606e:	83 ec 0c             	sub    $0xc,%esp
   16071:	ff 75 f4             	push   -0xc(%ebp)
   16074:	e8 a6 d2 ff ff       	call   1331f <idt_leave_protection>
   16079:	83 c4 10             	add    $0x10,%esp
}
   1607c:	90                   	nop
   1607d:	c9                   	leave  
   1607e:	c3                   	ret    

0001607f <list_init>:
static inline void list_init(list_t *list) {
   1607f:	55                   	push   %ebp
   16080:	89 e5                	mov    %esp,%ebp
   16082:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   16085:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   16089:	75 19                	jne    160a4 <list_init+0x25>
   1608b:	68 c0 86 01 00       	push   $0x186c0
   16090:	68 64 87 01 00       	push   $0x18764
   16095:	6a 31                	push   $0x31
   16097:	68 d4 86 01 00       	push   $0x186d4
   1609c:	e8 61 05 00 00       	call   16602 <pannic>
   160a1:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   160a4:	8b 45 08             	mov    0x8(%ebp),%eax
   160a7:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   160ae:	8b 45 08             	mov    0x8(%ebp),%eax
   160b1:	8b 50 04             	mov    0x4(%eax),%edx
   160b4:	8b 45 08             	mov    0x8(%ebp),%eax
   160b7:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   160b9:	8b 45 08             	mov    0x8(%ebp),%eax
   160bc:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   160c3:	90                   	nop
   160c4:	c9                   	leave  
   160c5:	c3                   	ret    

000160c6 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   160c6:	55                   	push   %ebp
   160c7:	89 e5                	mov    %esp,%ebp
   160c9:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   160cc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   160d0:	75 19                	jne    160eb <list_is_empty+0x25>
   160d2:	68 c0 86 01 00       	push   $0x186c0
   160d7:	68 70 87 01 00       	push   $0x18770
   160dc:	6a 38                	push   $0x38
   160de:	68 d4 86 01 00       	push   $0x186d4
   160e3:	e8 1a 05 00 00       	call   16602 <pannic>
   160e8:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   160eb:	8b 45 08             	mov    0x8(%ebp),%eax
   160ee:	8b 40 08             	mov    0x8(%eax),%eax
   160f1:	85 c0                	test   %eax,%eax
   160f3:	0f 94 c0             	sete   %al
   160f6:	0f b6 c0             	movzbl %al,%eax
}
   160f9:	c9                   	leave  
   160fa:	c3                   	ret    

000160fb <sem_init>:
 * @brief  初始化信号量对象
 * 
 * @param sem 信号量对象
 * @param init_count 初始化信号量数量 
 */
void sem_init(sem_t *sem, int init_count) {
   160fb:	55                   	push   %ebp
   160fc:	89 e5                	mov    %esp,%ebp
   160fe:	83 ec 08             	sub    $0x8,%esp
    ASSERT(sem != (sem_t*)0);
   16101:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   16105:	75 19                	jne    16120 <sem_init+0x25>
   16107:	68 12 87 01 00       	push   $0x18712
   1610c:	68 58 87 01 00       	push   $0x18758
   16111:	6a 18                	push   $0x18
   16113:	68 24 87 01 00       	push   $0x18724
   16118:	e8 e5 04 00 00       	call   16602 <pannic>
   1611d:	83 c4 10             	add    $0x10,%esp
    sem->count = init_count;
   16120:	8b 45 08             	mov    0x8(%ebp),%eax
   16123:	8b 55 0c             	mov    0xc(%ebp),%edx
   16126:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   16128:	8b 45 08             	mov    0x8(%ebp),%eax
   1612b:	83 c0 04             	add    $0x4,%eax
   1612e:	83 ec 0c             	sub    $0xc,%esp
   16131:	50                   	push   %eax
   16132:	e8 48 ff ff ff       	call   1607f <list_init>
   16137:	83 c4 10             	add    $0x10,%esp
}
   1613a:	90                   	nop
   1613b:	c9                   	leave  
   1613c:	c3                   	ret    

0001613d <sem_wait>:
 *         信号量相当于入场券，获取信号量之后才有资格访问信号量保护的资源
 * 
 * @param sem 
 * @param init_count 
 */
void sem_wait(sem_t *sem) {
   1613d:	55                   	push   %ebp
   1613e:	89 e5                	mov    %esp,%ebp
   16140:	83 ec 18             	sub    $0x18,%esp
    
    idt_state_t state = idt_enter_protection();//TODO:加锁
   16143:	e8 bf d1 ff ff       	call   13307 <idt_enter_protection>
   16148:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //1.判断信号量是否还有剩余
    if(sem->count > 0) {//有剩余，直接使用，任务获取信号量继续执行
   1614b:	8b 45 08             	mov    0x8(%ebp),%eax
   1614e:	8b 00                	mov    (%eax),%eax
   16150:	85 c0                	test   %eax,%eax
   16152:	7e 0f                	jle    16163 <sem_wait+0x26>
        --sem->count;   
   16154:	8b 45 08             	mov    0x8(%ebp),%eax
   16157:	8b 00                	mov    (%eax),%eax
   16159:	8d 50 ff             	lea    -0x1(%eax),%edx
   1615c:	8b 45 08             	mov    0x8(%ebp),%eax
   1615f:	89 10                	mov    %edx,(%eax)
   16161:	eb 34                	jmp    16197 <sem_wait+0x5a>
    } else {//没有剩余，任务进入延时队列等待信号量
        task_t *curr = task_current();
   16163:	e8 2c b8 ff ff       	call   11994 <task_current>
   16168:	89 45 f0             	mov    %eax,-0x10(%ebp)
        //2.将当前任务从就绪队列中取下
        task_set_unready(curr); 
   1616b:	83 ec 0c             	sub    $0xc,%esp
   1616e:	ff 75 f0             	push   -0x10(%ebp)
   16171:	e8 ae b7 ff ff       	call   11924 <task_set_unready>
   16176:	83 c4 10             	add    $0x10,%esp
        //3.将当前任务加入到信号量等待队列
        list_insert_last(&sem->wait_list, &curr->wait_node); 
   16179:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1617c:	8d 50 54             	lea    0x54(%eax),%edx
   1617f:	8b 45 08             	mov    0x8(%ebp),%eax
   16182:	83 c0 04             	add    $0x4,%eax
   16185:	83 ec 08             	sub    $0x8,%esp
   16188:	52                   	push   %edx
   16189:	50                   	push   %eax
   1618a:	e8 9c 0e 00 00       	call   1702b <list_insert_last>
   1618f:	83 c4 10             	add    $0x10,%esp
        //4.切换任务
        task_switch();
   16192:	e8 07 b8 ff ff       	call   1199e <task_switch>
    }

    idt_leave_protection(state);//TODO:解锁
   16197:	83 ec 0c             	sub    $0xc,%esp
   1619a:	ff 75 f4             	push   -0xc(%ebp)
   1619d:	e8 7d d1 ff ff       	call   1331f <idt_leave_protection>
   161a2:	83 c4 10             	add    $0x10,%esp
}
   161a5:	90                   	nop
   161a6:	c9                   	leave  
   161a7:	c3                   	ret    

000161a8 <sem_notify>:
 *        等待队列中若有任务则直接获取该信号量，继续执行即访问资源
 *         若没有任务，则信号量对象记录的信号量数量加1，预留给下一次获取
 * 
 * @param sem 
 */
void sem_notify(sem_t *sem) {
   161a8:	55                   	push   %ebp
   161a9:	89 e5                	mov    %esp,%ebp
   161ab:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   161ae:	e8 54 d1 ff ff       	call   13307 <idt_enter_protection>
   161b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if (!list_is_empty(&sem->wait_list)) {
   161b6:	8b 45 08             	mov    0x8(%ebp),%eax
   161b9:	83 c0 04             	add    $0x4,%eax
   161bc:	83 ec 0c             	sub    $0xc,%esp
   161bf:	50                   	push   %eax
   161c0:	e8 01 ff ff ff       	call   160c6 <list_is_empty>
   161c5:	83 c4 10             	add    $0x10,%esp
   161c8:	85 c0                	test   %eax,%eax
   161ca:	75 40                	jne    1620c <sem_notify+0x64>
        list_node_t *node = list_remove_first(&sem->wait_list);
   161cc:	8b 45 08             	mov    0x8(%ebp),%eax
   161cf:	83 c0 04             	add    $0x4,%eax
   161d2:	83 ec 0c             	sub    $0xc,%esp
   161d5:	50                   	push   %eax
   161d6:	e8 df 0e 00 00       	call   170ba <list_remove_first>
   161db:	83 c4 10             	add    $0x10,%esp
   161de:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t *task = list_node_parent(node, task_t, wait_node);
   161e1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   161e5:	74 08                	je     161ef <sem_notify+0x47>
   161e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   161ea:	83 e8 54             	sub    $0x54,%eax
   161ed:	eb 05                	jmp    161f4 <sem_notify+0x4c>
   161ef:	b8 00 00 00 00       	mov    $0x0,%eax
   161f4:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   161f7:	83 ec 0c             	sub    $0xc,%esp
   161fa:	ff 75 ec             	push   -0x14(%ebp)
   161fd:	e8 e0 b6 ff ff       	call   118e2 <task_set_ready>
   16202:	83 c4 10             	add    $0x10,%esp
        task_switch();
   16205:	e8 94 b7 ff ff       	call   1199e <task_switch>
   1620a:	eb 0d                	jmp    16219 <sem_notify+0x71>
    } else {
        sem->count++;
   1620c:	8b 45 08             	mov    0x8(%ebp),%eax
   1620f:	8b 00                	mov    (%eax),%eax
   16211:	8d 50 01             	lea    0x1(%eax),%edx
   16214:	8b 45 08             	mov    0x8(%ebp),%eax
   16217:	89 10                	mov    %edx,(%eax)
    }

    idt_leave_protection(state);//TODO:解锁
   16219:	83 ec 0c             	sub    $0xc,%esp
   1621c:	ff 75 f4             	push   -0xc(%ebp)
   1621f:	e8 fb d0 ff ff       	call   1331f <idt_leave_protection>
   16224:	83 c4 10             	add    $0x10,%esp

}
   16227:	90                   	nop
   16228:	c9                   	leave  
   16229:	c3                   	ret    

0001622a <sem_count>:

int sem_count(sem_t *sem) {
   1622a:	55                   	push   %ebp
   1622b:	89 e5                	mov    %esp,%ebp
   1622d:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   16230:	e8 d2 d0 ff ff       	call   13307 <idt_enter_protection>
   16235:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   16238:	8b 45 08             	mov    0x8(%ebp),%eax
   1623b:	8b 00                	mov    (%eax),%eax
   1623d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    idt_leave_protection(state);//TODO:解锁
   16240:	83 ec 0c             	sub    $0xc,%esp
   16243:	ff 75 f4             	push   -0xc(%ebp)
   16246:	e8 d4 d0 ff ff       	call   1331f <idt_leave_protection>
   1624b:	83 c4 10             	add    $0x10,%esp

    return count;
   1624e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16251:	c9                   	leave  
   16252:	c3                   	ret    

00016253 <list_init>:
static inline void list_init(list_t *list) {
   16253:	55                   	push   %ebp
   16254:	89 e5                	mov    %esp,%ebp
   16256:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   16259:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1625d:	75 19                	jne    16278 <list_init+0x25>
   1625f:	68 80 87 01 00       	push   $0x18780
   16264:	68 84 88 01 00       	push   $0x18884
   16269:	6a 31                	push   $0x31
   1626b:	68 94 87 01 00       	push   $0x18794
   16270:	e8 8d 03 00 00       	call   16602 <pannic>
   16275:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   16278:	8b 45 08             	mov    0x8(%ebp),%eax
   1627b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   16282:	8b 45 08             	mov    0x8(%ebp),%eax
   16285:	8b 50 04             	mov    0x4(%eax),%edx
   16288:	8b 45 08             	mov    0x8(%ebp),%eax
   1628b:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   1628d:	8b 45 08             	mov    0x8(%ebp),%eax
   16290:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   16297:	90                   	nop
   16298:	c9                   	leave  
   16299:	c3                   	ret    

0001629a <list_get_size>:
static inline int list_get_size(list_t *list) {
   1629a:	55                   	push   %ebp
   1629b:	89 e5                	mov    %esp,%ebp
   1629d:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   162a0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   162a4:	75 19                	jne    162bf <list_get_size+0x25>
   162a6:	68 80 87 01 00       	push   $0x18780
   162ab:	68 90 88 01 00       	push   $0x18890
   162b0:	6a 3e                	push   $0x3e
   162b2:	68 94 87 01 00       	push   $0x18794
   162b7:	e8 46 03 00 00       	call   16602 <pannic>
   162bc:	83 c4 10             	add    $0x10,%esp
    return list->size;
   162bf:	8b 45 08             	mov    0x8(%ebp),%eax
   162c2:	8b 40 08             	mov    0x8(%eax),%eax
}
   162c5:	c9                   	leave  
   162c6:	c3                   	ret    

000162c7 <list_get_first>:
static inline list_node_t *list_get_first(list_t *list) {
   162c7:	55                   	push   %ebp
   162c8:	89 e5                	mov    %esp,%ebp
   162ca:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   162cd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   162d1:	75 19                	jne    162ec <list_get_first+0x25>
   162d3:	68 80 87 01 00       	push   $0x18780
   162d8:	68 b0 88 01 00       	push   $0x188b0
   162dd:	6a 44                	push   $0x44
   162df:	68 94 87 01 00       	push   $0x18794
   162e4:	e8 19 03 00 00       	call   16602 <pannic>
   162e9:	83 c4 10             	add    $0x10,%esp
    return list->first;
   162ec:	8b 45 08             	mov    0x8(%ebp),%eax
   162ef:	8b 00                	mov    (%eax),%eax
}
   162f1:	c9                   	leave  
   162f2:	c3                   	ret    

000162f3 <list_get_last>:

static inline list_node_t *list_get_last(list_t *list) {
   162f3:	55                   	push   %ebp
   162f4:	89 e5                	mov    %esp,%ebp
   162f6:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   162f9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   162fd:	75 19                	jne    16318 <list_get_last+0x25>
   162ff:	68 80 87 01 00       	push   $0x18780
   16304:	68 a0 88 01 00       	push   $0x188a0
   16309:	6a 4a                	push   $0x4a
   1630b:	68 94 87 01 00       	push   $0x18794
   16310:	e8 ed 02 00 00       	call   16602 <pannic>
   16315:	83 c4 10             	add    $0x10,%esp

    return list->last;
   16318:	8b 45 08             	mov    0x8(%ebp),%eax
   1631b:	8b 40 04             	mov    0x4(%eax),%eax
}
   1631e:	c9                   	leave  
   1631f:	c3                   	ret    

00016320 <list_test>:

#include "tools/list.h"
#include "tools/log.h"
#include "common/types.h"

void list_test(void) {
   16320:	55                   	push   %ebp
   16321:	89 e5                	mov    %esp,%ebp
   16323:	56                   	push   %esi
   16324:	53                   	push   %ebx
   16325:	83 ec 70             	sub    $0x70,%esp
    list_t list;
    list_node_t nodes[5];

    list_init(&list);
   16328:	83 ec 0c             	sub    $0xc,%esp
   1632b:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1632e:	50                   	push   %eax
   1632f:	e8 1f ff ff ff       	call   16253 <list_init>
   16334:	83 c4 10             	add    $0x10,%esp
    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   16337:	83 ec 0c             	sub    $0xc,%esp
   1633a:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1633d:	50                   	push   %eax
   1633e:	e8 57 ff ff ff       	call   1629a <list_get_size>
   16343:	83 c4 10             	add    $0x10,%esp
   16346:	89 c6                	mov    %eax,%esi
   16348:	83 ec 0c             	sub    $0xc,%esp
   1634b:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1634e:	50                   	push   %eax
   1634f:	e8 9f ff ff ff       	call   162f3 <list_get_last>
   16354:	83 c4 10             	add    $0x10,%esp
   16357:	89 c3                	mov    %eax,%ebx
   16359:	83 ec 0c             	sub    $0xc,%esp
   1635c:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1635f:	50                   	push   %eax
   16360:	e8 62 ff ff ff       	call   162c7 <list_get_first>
   16365:	83 c4 10             	add    $0x10,%esp
   16368:	56                   	push   %esi
   16369:	53                   	push   %ebx
   1636a:	50                   	push   %eax
   1636b:	68 d4 87 01 00       	push   $0x187d4
   16370:	e8 a3 0f 00 00       	call   17318 <log_printf>
   16375:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_insert_first
    for (int i = 0; i < 5; ++i) {
   16378:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1637f:	eb 3f                	jmp    163c0 <list_test+0xa0>
        list_node_t *node = nodes + i;
   16381:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16384:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   1638b:	8d 45 9c             	lea    -0x64(%ebp),%eax
   1638e:	01 d0                	add    %edx,%eax
   16390:	89 45 d0             	mov    %eax,-0x30(%ebp)

        log_printf("insert first to list: %d, 0x%x", i, (uint32_t)node);
   16393:	8b 45 d0             	mov    -0x30(%ebp),%eax
   16396:	83 ec 04             	sub    $0x4,%esp
   16399:	50                   	push   %eax
   1639a:	ff 75 f4             	push   -0xc(%ebp)
   1639d:	68 fc 87 01 00       	push   $0x187fc
   163a2:	e8 71 0f 00 00       	call   17318 <log_printf>
   163a7:	83 c4 10             	add    $0x10,%esp
        list_insert_first(&list, node);
   163aa:	83 ec 08             	sub    $0x8,%esp
   163ad:	ff 75 d0             	push   -0x30(%ebp)
   163b0:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   163b3:	50                   	push   %eax
   163b4:	e8 e7 0b 00 00       	call   16fa0 <list_insert_first>
   163b9:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   163bc:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   163c0:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   163c4:	7e bb                	jle    16381 <list_test+0x61>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   163c6:	83 ec 0c             	sub    $0xc,%esp
   163c9:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   163cc:	50                   	push   %eax
   163cd:	e8 c8 fe ff ff       	call   1629a <list_get_size>
   163d2:	83 c4 10             	add    $0x10,%esp
   163d5:	89 c6                	mov    %eax,%esi
   163d7:	83 ec 0c             	sub    $0xc,%esp
   163da:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   163dd:	50                   	push   %eax
   163de:	e8 10 ff ff ff       	call   162f3 <list_get_last>
   163e3:	83 c4 10             	add    $0x10,%esp
   163e6:	89 c3                	mov    %eax,%ebx
   163e8:	83 ec 0c             	sub    $0xc,%esp
   163eb:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   163ee:	50                   	push   %eax
   163ef:	e8 d3 fe ff ff       	call   162c7 <list_get_first>
   163f4:	83 c4 10             	add    $0x10,%esp
   163f7:	56                   	push   %esi
   163f8:	53                   	push   %ebx
   163f9:	50                   	push   %eax
   163fa:	68 d4 87 01 00       	push   $0x187d4
   163ff:	e8 14 0f 00 00       	call   17318 <log_printf>
   16404:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

   
    //测试list_remove_first
    for (int i = 0; i < 5; ++i) {
   16407:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   1640e:	eb 2d                	jmp    1643d <list_test+0x11d>
        list_node_t *node = list_remove_first(&list);
   16410:	83 ec 0c             	sub    $0xc,%esp
   16413:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   16416:	50                   	push   %eax
   16417:	e8 9e 0c 00 00       	call   170ba <list_remove_first>
   1641c:	83 c4 10             	add    $0x10,%esp
   1641f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        log_printf("remove first: %d, 0x%x", i, (uint32_t)node);
   16422:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   16425:	83 ec 04             	sub    $0x4,%esp
   16428:	50                   	push   %eax
   16429:	ff 75 f0             	push   -0x10(%ebp)
   1642c:	68 1b 88 01 00       	push   $0x1881b
   16431:	e8 e2 0e 00 00       	call   17318 <log_printf>
   16436:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   16439:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   1643d:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   16441:	7e cd                	jle    16410 <list_test+0xf0>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   16443:	83 ec 0c             	sub    $0xc,%esp
   16446:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   16449:	50                   	push   %eax
   1644a:	e8 4b fe ff ff       	call   1629a <list_get_size>
   1644f:	83 c4 10             	add    $0x10,%esp
   16452:	89 c6                	mov    %eax,%esi
   16454:	83 ec 0c             	sub    $0xc,%esp
   16457:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1645a:	50                   	push   %eax
   1645b:	e8 93 fe ff ff       	call   162f3 <list_get_last>
   16460:	83 c4 10             	add    $0x10,%esp
   16463:	89 c3                	mov    %eax,%ebx
   16465:	83 ec 0c             	sub    $0xc,%esp
   16468:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1646b:	50                   	push   %eax
   1646c:	e8 56 fe ff ff       	call   162c7 <list_get_first>
   16471:	83 c4 10             	add    $0x10,%esp
   16474:	56                   	push   %esi
   16475:	53                   	push   %ebx
   16476:	50                   	push   %eax
   16477:	68 d4 87 01 00       	push   $0x187d4
   1647c:	e8 97 0e 00 00       	call   17318 <log_printf>
   16481:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    

    //测试list_insert_last
    for (int i = 0; i < 5; ++i) {
   16484:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   1648b:	eb 3f                	jmp    164cc <list_test+0x1ac>
        list_node_t *node = nodes + i;
   1648d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16490:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   16497:	8d 45 9c             	lea    -0x64(%ebp),%eax
   1649a:	01 d0                	add    %edx,%eax
   1649c:	89 45 d8             	mov    %eax,-0x28(%ebp)

        log_printf("insert last to list: %d, 0x%x", i, (uint32_t)node);
   1649f:	8b 45 d8             	mov    -0x28(%ebp),%eax
   164a2:	83 ec 04             	sub    $0x4,%esp
   164a5:	50                   	push   %eax
   164a6:	ff 75 ec             	push   -0x14(%ebp)
   164a9:	68 32 88 01 00       	push   $0x18832
   164ae:	e8 65 0e 00 00       	call   17318 <log_printf>
   164b3:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&list, node);
   164b6:	83 ec 08             	sub    $0x8,%esp
   164b9:	ff 75 d8             	push   -0x28(%ebp)
   164bc:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   164bf:	50                   	push   %eax
   164c0:	e8 66 0b 00 00       	call   1702b <list_insert_last>
   164c5:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   164c8:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   164cc:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   164d0:	7e bb                	jle    1648d <list_test+0x16d>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   164d2:	83 ec 0c             	sub    $0xc,%esp
   164d5:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   164d8:	50                   	push   %eax
   164d9:	e8 bc fd ff ff       	call   1629a <list_get_size>
   164de:	83 c4 10             	add    $0x10,%esp
   164e1:	89 c6                	mov    %eax,%esi
   164e3:	83 ec 0c             	sub    $0xc,%esp
   164e6:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   164e9:	50                   	push   %eax
   164ea:	e8 04 fe ff ff       	call   162f3 <list_get_last>
   164ef:	83 c4 10             	add    $0x10,%esp
   164f2:	89 c3                	mov    %eax,%ebx
   164f4:	83 ec 0c             	sub    $0xc,%esp
   164f7:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   164fa:	50                   	push   %eax
   164fb:	e8 c7 fd ff ff       	call   162c7 <list_get_first>
   16500:	83 c4 10             	add    $0x10,%esp
   16503:	56                   	push   %esi
   16504:	53                   	push   %ebx
   16505:	50                   	push   %eax
   16506:	68 d4 87 01 00       	push   $0x187d4
   1650b:	e8 08 0e 00 00       	call   17318 <log_printf>
   16510:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_remove_last
    for (int i = 0; i < 5; ++i) {
   16513:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   1651a:	eb 2d                	jmp    16549 <list_test+0x229>
        list_node_t *node = list_remove_last(&list);
   1651c:	83 ec 0c             	sub    $0xc,%esp
   1651f:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   16522:	50                   	push   %eax
   16523:	e8 43 0c 00 00       	call   1716b <list_remove_last>
   16528:	83 c4 10             	add    $0x10,%esp
   1652b:	89 45 dc             	mov    %eax,-0x24(%ebp)
        log_printf("remove last: %d, 0x%x", i, (uint32_t)node);
   1652e:	8b 45 dc             	mov    -0x24(%ebp),%eax
   16531:	83 ec 04             	sub    $0x4,%esp
   16534:	50                   	push   %eax
   16535:	ff 75 e8             	push   -0x18(%ebp)
   16538:	68 50 88 01 00       	push   $0x18850
   1653d:	e8 d6 0d 00 00       	call   17318 <log_printf>
   16542:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   16545:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   16549:	83 7d e8 04          	cmpl   $0x4,-0x18(%ebp)
   1654d:	7e cd                	jle    1651c <list_test+0x1fc>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   1654f:	83 ec 0c             	sub    $0xc,%esp
   16552:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   16555:	50                   	push   %eax
   16556:	e8 3f fd ff ff       	call   1629a <list_get_size>
   1655b:	83 c4 10             	add    $0x10,%esp
   1655e:	89 c6                	mov    %eax,%esi
   16560:	83 ec 0c             	sub    $0xc,%esp
   16563:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   16566:	50                   	push   %eax
   16567:	e8 87 fd ff ff       	call   162f3 <list_get_last>
   1656c:	83 c4 10             	add    $0x10,%esp
   1656f:	89 c3                	mov    %eax,%ebx
   16571:	83 ec 0c             	sub    $0xc,%esp
   16574:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   16577:	50                   	push   %eax
   16578:	e8 4a fd ff ff       	call   162c7 <list_get_first>
   1657d:	83 c4 10             	add    $0x10,%esp
   16580:	56                   	push   %esi
   16581:	53                   	push   %ebx
   16582:	50                   	push   %eax
   16583:	68 d4 87 01 00       	push   $0x187d4
   16588:	e8 8b 0d 00 00       	call   17318 <log_printf>
   1658d:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    
    struct type_t {
        int i;
        list_node_t node;
    }v = {0x123456};
   16590:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
   16597:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
   1659e:	c7 45 98 00 00 00 00 	movl   $0x0,-0x68(%ebp)
   165a5:	c7 45 90 56 34 12 00 	movl   $0x123456,-0x70(%ebp)

    list_node_t *v_node = &v.node;
   165ac:	8d 45 90             	lea    -0x70(%ebp),%eax
   165af:	83 c0 04             	add    $0x4,%eax
   165b2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    struct type_t *p = list_node_parent(v_node, struct type_t, node);  
   165b5:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   165b9:	74 08                	je     165c3 <list_test+0x2a3>
   165bb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   165be:	83 e8 04             	sub    $0x4,%eax
   165c1:	eb 05                	jmp    165c8 <list_test+0x2a8>
   165c3:	b8 00 00 00 00       	mov    $0x0,%eax
   165c8:	89 45 e0             	mov    %eax,-0x20(%ebp)

    log_printf("v addr = 0x%x", (uint32_t)&v);
   165cb:	8d 45 90             	lea    -0x70(%ebp),%eax
   165ce:	83 ec 08             	sub    $0x8,%esp
   165d1:	50                   	push   %eax
   165d2:	68 66 88 01 00       	push   $0x18866
   165d7:	e8 3c 0d 00 00       	call   17318 <log_printf>
   165dc:	83 c4 10             	add    $0x10,%esp
    log_printf("p addr = 0x%x", (uint32_t)p);  
   165df:	8b 45 e0             	mov    -0x20(%ebp),%eax
   165e2:	83 ec 08             	sub    $0x8,%esp
   165e5:	50                   	push   %eax
   165e6:	68 74 88 01 00       	push   $0x18874
   165eb:	e8 28 0d 00 00       	call   17318 <log_printf>
   165f0:	83 c4 10             	add    $0x10,%esp

 }
   165f3:	90                   	nop
   165f4:	8d 65 f8             	lea    -0x8(%ebp),%esp
   165f7:	5b                   	pop    %ebx
   165f8:	5e                   	pop    %esi
   165f9:	5d                   	pop    %ebp
   165fa:	c3                   	ret    

000165fb <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   165fb:	55                   	push   %ebp
   165fc:	89 e5                	mov    %esp,%ebp
   165fe:	f4                   	hlt    
   165ff:	90                   	nop
   16600:	5d                   	pop    %ebp
   16601:	c3                   	ret    

00016602 <pannic>:
 * @param file 异常所在文件绝对路径
 * @param line 异常所在行号
 * @param func 异常所在函数名 
 * @param reason 异常的原因
 */
void pannic(const char *file, int line, const char *func, const char *reason) {
   16602:	55                   	push   %ebp
   16603:	89 e5                	mov    %esp,%ebp
   16605:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert faild! %s\n", reason);
   16608:	83 ec 08             	sub    $0x8,%esp
   1660b:	ff 75 14             	push   0x14(%ebp)
   1660e:	68 bf 88 01 00       	push   $0x188bf
   16613:	e8 00 0d 00 00       	call   17318 <log_printf>
   16618:	83 c4 10             	add    $0x10,%esp
    log_printf("file:\t%s\nline:\t%d\nfunc:\t%s\n", file, line, func);
   1661b:	ff 75 10             	push   0x10(%ebp)
   1661e:	ff 75 0c             	push   0xc(%ebp)
   16621:	ff 75 08             	push   0x8(%ebp)
   16624:	68 d1 88 01 00       	push   $0x188d1
   16629:	e8 ea 0c 00 00       	call   17318 <log_printf>
   1662e:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   16631:	e8 c5 ff ff ff       	call   165fb <hlt>
   16636:	eb f9                	jmp    16631 <pannic+0x2f>

00016638 <bitmap_byte_count>:
 * @brief  向上取整获取位图数组中有多少字节
 * 
 * @param bit_count  位图数组拥有的bit位数
 * @return int 向上取整得到的字节数
 */
int bitmap_byte_count(int bit_count) {
   16638:	55                   	push   %ebp
   16639:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8;
   1663b:	8b 45 08             	mov    0x8(%ebp),%eax
   1663e:	83 c0 07             	add    $0x7,%eax
   16641:	8d 50 07             	lea    0x7(%eax),%edx
   16644:	85 c0                	test   %eax,%eax
   16646:	0f 48 c2             	cmovs  %edx,%eax
   16649:	c1 f8 03             	sar    $0x3,%eax
}
   1664c:	5d                   	pop    %ebp
   1664d:	c3                   	ret    

0001664e <bitmap_init>:
 * @param bitmap 需要初始化的位图
 * @param bits 位图所包含的位图数组的起始地址
 * @param count 页的数量
 * @param init_bit 将位图数组的每一位设置为init_bit
 */
void bitmap_init(bitmap_t *bitmap, uint8_t *bits, int count, int init_bit) {
   1664e:	55                   	push   %ebp
   1664f:	89 e5                	mov    %esp,%ebp
   16651:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   16654:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   16658:	75 19                	jne    16673 <bitmap_init+0x25>
   1665a:	68 f0 88 01 00       	push   $0x188f0
   1665f:	68 84 89 01 00       	push   $0x18984
   16664:	6a 24                	push   $0x24
   16666:	68 08 89 01 00       	push   $0x18908
   1666b:	e8 92 ff ff ff       	call   16602 <pannic>
   16670:	83 c4 10             	add    $0x10,%esp
    ASSERT(bits != (uint8_t*)0);
   16673:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   16677:	75 19                	jne    16692 <bitmap_init+0x44>
   16679:	68 40 89 01 00       	push   $0x18940
   1667e:	68 84 89 01 00       	push   $0x18984
   16683:	6a 25                	push   $0x25
   16685:	68 08 89 01 00       	push   $0x18908
   1668a:	e8 73 ff ff ff       	call   16602 <pannic>
   1668f:	83 c4 10             	add    $0x10,%esp

    bitmap->bit_count = count;
   16692:	8b 45 08             	mov    0x8(%ebp),%eax
   16695:	8b 55 10             	mov    0x10(%ebp),%edx
   16698:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   1669a:	8b 45 08             	mov    0x8(%ebp),%eax
   1669d:	8b 55 0c             	mov    0xc(%ebp),%edx
   166a0:	89 50 04             	mov    %edx,0x4(%eax)

    //计算该位图需要多少字节
    int bytes = bitmap_byte_count(bitmap->bit_count);
   166a3:	8b 45 08             	mov    0x8(%ebp),%eax
   166a6:	8b 00                	mov    (%eax),%eax
   166a8:	83 ec 0c             	sub    $0xc,%esp
   166ab:	50                   	push   %eax
   166ac:	e8 87 ff ff ff       	call   16638 <bitmap_byte_count>
   166b1:	83 c4 10             	add    $0x10,%esp
   166b4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    kernel_memset(bitmap->bits, init_bit ? 0xff : 0, bytes);
   166b7:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   166bb:	74 07                	je     166c4 <bitmap_init+0x76>
   166bd:	ba ff 00 00 00       	mov    $0xff,%edx
   166c2:	eb 05                	jmp    166c9 <bitmap_init+0x7b>
   166c4:	ba 00 00 00 00       	mov    $0x0,%edx
   166c9:	8b 45 08             	mov    0x8(%ebp),%eax
   166cc:	8b 40 04             	mov    0x4(%eax),%eax
   166cf:	83 ec 04             	sub    $0x4,%esp
   166d2:	ff 75 f4             	push   -0xc(%ebp)
   166d5:	52                   	push   %edx
   166d6:	50                   	push   %eax
   166d7:	e8 3f 04 00 00       	call   16b1b <kernel_memset>
   166dc:	83 c4 10             	add    $0x10,%esp

}
   166df:	90                   	nop
   166e0:	c9                   	leave  
   166e1:	c3                   	ret    

000166e2 <bitmap_get_bit>:
 * 
 * @param bitmap 
 * @param index 
 * @return uint8_t 
 */
uint8_t bitmap_get_bit(bitmap_t *bitmap, int index) {
   166e2:	55                   	push   %ebp
   166e3:	89 e5                	mov    %esp,%ebp
   166e5:	53                   	push   %ebx
   166e6:	83 ec 04             	sub    $0x4,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   166e9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   166ed:	75 19                	jne    16708 <bitmap_get_bit+0x26>
   166ef:	68 f0 88 01 00       	push   $0x188f0
   166f4:	68 90 89 01 00       	push   $0x18990
   166f9:	6a 39                	push   $0x39
   166fb:	68 08 89 01 00       	push   $0x18908
   16700:	e8 fd fe ff ff       	call   16602 <pannic>
   16705:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0);
   16708:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1670c:	79 19                	jns    16727 <bitmap_get_bit+0x45>
   1670e:	68 54 89 01 00       	push   $0x18954
   16713:	68 90 89 01 00       	push   $0x18990
   16718:	6a 3a                	push   $0x3a
   1671a:	68 08 89 01 00       	push   $0x18908
   1671f:	e8 de fe ff ff       	call   16602 <pannic>
   16724:	83 c4 10             	add    $0x10,%esp

    return (bitmap->bits[index / 8] & (1 << (index % 8)));
   16727:	8b 45 08             	mov    0x8(%ebp),%eax
   1672a:	8b 48 04             	mov    0x4(%eax),%ecx
   1672d:	8b 45 0c             	mov    0xc(%ebp),%eax
   16730:	8d 50 07             	lea    0x7(%eax),%edx
   16733:	85 c0                	test   %eax,%eax
   16735:	0f 48 c2             	cmovs  %edx,%eax
   16738:	c1 f8 03             	sar    $0x3,%eax
   1673b:	01 c8                	add    %ecx,%eax
   1673d:	0f b6 00             	movzbl (%eax),%eax
   16740:	89 c3                	mov    %eax,%ebx
   16742:	8b 45 0c             	mov    0xc(%ebp),%eax
   16745:	83 e0 07             	and    $0x7,%eax
   16748:	ba 01 00 00 00       	mov    $0x1,%edx
   1674d:	89 c1                	mov    %eax,%ecx
   1674f:	d3 e2                	shl    %cl,%edx
   16751:	89 d0                	mov    %edx,%eax
   16753:	21 d8                	and    %ebx,%eax
}
   16755:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   16758:	c9                   	leave  
   16759:	c3                   	ret    

0001675a <bitmap_set_bit>:
 * @param bitmap 
 * @param index 
 * @param count 
 * @param bit 
 */
void bitmap_set_bit(bitmap_t *bitmap, int index, int count, int bit) {
   1675a:	55                   	push   %ebp
   1675b:	89 e5                	mov    %esp,%ebp
   1675d:	56                   	push   %esi
   1675e:	53                   	push   %ebx
   1675f:	83 ec 10             	sub    $0x10,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   16762:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   16766:	75 19                	jne    16781 <bitmap_set_bit+0x27>
   16768:	68 f0 88 01 00       	push   $0x188f0
   1676d:	68 a0 89 01 00       	push   $0x189a0
   16772:	6a 48                	push   $0x48
   16774:	68 08 89 01 00       	push   $0x18908
   16779:	e8 84 fe ff ff       	call   16602 <pannic>
   1677e:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0 && count >= 0);
   16781:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   16785:	78 06                	js     1678d <bitmap_set_bit+0x33>
   16787:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1678b:	79 19                	jns    167a6 <bitmap_set_bit+0x4c>
   1678d:	68 5f 89 01 00       	push   $0x1895f
   16792:	68 a0 89 01 00       	push   $0x189a0
   16797:	6a 49                	push   $0x49
   16799:	68 08 89 01 00       	push   $0x18908
   1679e:	e8 5f fe ff ff       	call   16602 <pannic>
   167a3:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   167a6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   167ad:	e9 92 00 00 00       	jmp    16844 <bitmap_set_bit+0xea>
        if (bit) {
   167b2:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   167b6:	74 42                	je     167fa <bitmap_set_bit+0xa0>
            bitmap->bits[index / 8] |= (1 << (index % 8));
   167b8:	8b 45 08             	mov    0x8(%ebp),%eax
   167bb:	8b 48 04             	mov    0x4(%eax),%ecx
   167be:	8b 45 0c             	mov    0xc(%ebp),%eax
   167c1:	8d 50 07             	lea    0x7(%eax),%edx
   167c4:	85 c0                	test   %eax,%eax
   167c6:	0f 48 c2             	cmovs  %edx,%eax
   167c9:	c1 f8 03             	sar    $0x3,%eax
   167cc:	89 c2                	mov    %eax,%edx
   167ce:	89 d0                	mov    %edx,%eax
   167d0:	01 c8                	add    %ecx,%eax
   167d2:	0f b6 00             	movzbl (%eax),%eax
   167d5:	89 c6                	mov    %eax,%esi
   167d7:	8b 45 0c             	mov    0xc(%ebp),%eax
   167da:	83 e0 07             	and    $0x7,%eax
   167dd:	bb 01 00 00 00       	mov    $0x1,%ebx
   167e2:	89 c1                	mov    %eax,%ecx
   167e4:	d3 e3                	shl    %cl,%ebx
   167e6:	89 d8                	mov    %ebx,%eax
   167e8:	89 f1                	mov    %esi,%ecx
   167ea:	09 c1                	or     %eax,%ecx
   167ec:	8b 45 08             	mov    0x8(%ebp),%eax
   167ef:	8b 40 04             	mov    0x4(%eax),%eax
   167f2:	01 d0                	add    %edx,%eax
   167f4:	89 ca                	mov    %ecx,%edx
   167f6:	88 10                	mov    %dl,(%eax)
   167f8:	eb 42                	jmp    1683c <bitmap_set_bit+0xe2>
        } else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   167fa:	8b 45 08             	mov    0x8(%ebp),%eax
   167fd:	8b 48 04             	mov    0x4(%eax),%ecx
   16800:	8b 45 0c             	mov    0xc(%ebp),%eax
   16803:	8d 50 07             	lea    0x7(%eax),%edx
   16806:	85 c0                	test   %eax,%eax
   16808:	0f 48 c2             	cmovs  %edx,%eax
   1680b:	c1 f8 03             	sar    $0x3,%eax
   1680e:	89 c2                	mov    %eax,%edx
   16810:	89 d0                	mov    %edx,%eax
   16812:	01 c8                	add    %ecx,%eax
   16814:	0f b6 00             	movzbl (%eax),%eax
   16817:	89 c6                	mov    %eax,%esi
   16819:	8b 45 0c             	mov    0xc(%ebp),%eax
   1681c:	83 e0 07             	and    $0x7,%eax
   1681f:	bb 01 00 00 00       	mov    $0x1,%ebx
   16824:	89 c1                	mov    %eax,%ecx
   16826:	d3 e3                	shl    %cl,%ebx
   16828:	89 d8                	mov    %ebx,%eax
   1682a:	f7 d0                	not    %eax
   1682c:	89 f1                	mov    %esi,%ecx
   1682e:	21 c1                	and    %eax,%ecx
   16830:	8b 45 08             	mov    0x8(%ebp),%eax
   16833:	8b 40 04             	mov    0x4(%eax),%eax
   16836:	01 d0                	add    %edx,%eax
   16838:	89 ca                	mov    %ecx,%edx
   1683a:	88 10                	mov    %dl,(%eax)
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   1683c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   16840:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   16844:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16847:	3b 45 10             	cmp    0x10(%ebp),%eax
   1684a:	7d 0e                	jge    1685a <bitmap_set_bit+0x100>
   1684c:	8b 45 08             	mov    0x8(%ebp),%eax
   1684f:	8b 00                	mov    (%eax),%eax
   16851:	39 45 0c             	cmp    %eax,0xc(%ebp)
   16854:	0f 8c 58 ff ff ff    	jl     167b2 <bitmap_set_bit+0x58>
        }
    }
}
   1685a:	90                   	nop
   1685b:	8d 65 f8             	lea    -0x8(%ebp),%esp
   1685e:	5b                   	pop    %ebx
   1685f:	5e                   	pop    %esi
   16860:	5d                   	pop    %ebp
   16861:	c3                   	ret    

00016862 <bitmap_is_set>:
 * 
 * @param bitmap 
 * @param index 
 * @return int 
 */
int bitmap_is_set(bitmap_t *bitmap, int index) {
   16862:	55                   	push   %ebp
   16863:	89 e5                	mov    %esp,%ebp
   16865:	83 ec 08             	sub    $0x8,%esp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   16868:	83 ec 08             	sub    $0x8,%esp
   1686b:	ff 75 0c             	push   0xc(%ebp)
   1686e:	ff 75 08             	push   0x8(%ebp)
   16871:	e8 6c fe ff ff       	call   166e2 <bitmap_get_bit>
   16876:	83 c4 10             	add    $0x10,%esp
   16879:	84 c0                	test   %al,%al
   1687b:	0f 95 c0             	setne  %al
   1687e:	0f b6 c0             	movzbl %al,%eax
}
   16881:	c9                   	leave  
   16882:	c3                   	ret    

00016883 <bitmap_alloc_nbits>:
 * @param bitmap 
 * @param bit 当某一位的值为bit时表示该位空闲，可供分配
 * @param count 
 * @return int 
 */
int bitmap_alloc_nbits(bitmap_t *bitmap, int bit, int count) {
   16883:	55                   	push   %ebp
   16884:	89 e5                	mov    %esp,%ebp
   16886:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   16889:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1688d:	75 19                	jne    168a8 <bitmap_alloc_nbits+0x25>
   1688f:	68 f0 88 01 00       	push   $0x188f0
   16894:	68 b0 89 01 00       	push   $0x189b0
   16899:	6a 68                	push   $0x68
   1689b:	68 08 89 01 00       	push   $0x18908
   168a0:	e8 5d fd ff ff       	call   16602 <pannic>
   168a5:	83 c4 10             	add    $0x10,%esp
    ASSERT(count >= 0);
   168a8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   168ac:	79 19                	jns    168c7 <bitmap_alloc_nbits+0x44>
   168ae:	68 78 89 01 00       	push   $0x18978
   168b3:	68 b0 89 01 00       	push   $0x189b0
   168b8:	6a 69                	push   $0x69
   168ba:	68 08 89 01 00       	push   $0x18908
   168bf:	e8 3e fd ff ff       	call   16602 <pannic>
   168c4:	83 c4 10             	add    $0x10,%esp

    int search_index = 0;
   168c7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    int ok_index = -1;
   168ce:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
    while (search_index < bitmap->bit_count) {
   168d5:	e9 8f 00 00 00       	jmp    16969 <bitmap_alloc_nbits+0xe6>
        //确定可分配空间的起始索引
        if (bitmap_get_bit(bitmap, search_index) != bit) {
   168da:	83 ec 08             	sub    $0x8,%esp
   168dd:	ff 75 f4             	push   -0xc(%ebp)
   168e0:	ff 75 08             	push   0x8(%ebp)
   168e3:	e8 fa fd ff ff       	call   166e2 <bitmap_get_bit>
   168e8:	83 c4 10             	add    $0x10,%esp
   168eb:	0f b6 c0             	movzbl %al,%eax
   168ee:	39 45 0c             	cmp    %eax,0xc(%ebp)
   168f1:	74 06                	je     168f9 <bitmap_alloc_nbits+0x76>
            search_index++;
   168f3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
            continue;
   168f7:	eb 70                	jmp    16969 <bitmap_alloc_nbits+0xe6>
        }

        //记录可分配空间的起始索引
        ok_index = search_index;
   168f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   168fc:	89 45 f0             	mov    %eax,-0x10(%ebp)

        //判断该空间是否大小满足要求
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   168ff:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
   16906:	eb 2d                	jmp    16935 <bitmap_alloc_nbits+0xb2>
            //空间大小不满足要求, 分配失败
            if (bitmap_get_bit(bitmap, search_index++) != bit) {
   16908:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1690b:	8d 50 01             	lea    0x1(%eax),%edx
   1690e:	89 55 f4             	mov    %edx,-0xc(%ebp)
   16911:	83 ec 08             	sub    $0x8,%esp
   16914:	50                   	push   %eax
   16915:	ff 75 08             	push   0x8(%ebp)
   16918:	e8 c5 fd ff ff       	call   166e2 <bitmap_get_bit>
   1691d:	83 c4 10             	add    $0x10,%esp
   16920:	0f b6 c0             	movzbl %al,%eax
   16923:	39 45 0c             	cmp    %eax,0xc(%ebp)
   16926:	74 09                	je     16931 <bitmap_alloc_nbits+0xae>
                ok_index = -1;
   16928:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
                break;
   1692f:	eb 16                	jmp    16947 <bitmap_alloc_nbits+0xc4>
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   16931:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   16935:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16938:	3b 45 10             	cmp    0x10(%ebp),%eax
   1693b:	7d 0a                	jge    16947 <bitmap_alloc_nbits+0xc4>
   1693d:	8b 45 08             	mov    0x8(%ebp),%eax
   16940:	8b 00                	mov    (%eax),%eax
   16942:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   16945:	7c c1                	jl     16908 <bitmap_alloc_nbits+0x85>
            }
        }

        if (ok_index != -1) {//分配成功
   16947:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
   1694b:	74 1c                	je     16969 <bitmap_alloc_nbits+0xe6>
            //将该片空间标记为已分配状态, 并返回起始索引
            bitmap_set_bit(bitmap, ok_index, count, ~bit);
   1694d:	8b 45 0c             	mov    0xc(%ebp),%eax
   16950:	f7 d0                	not    %eax
   16952:	50                   	push   %eax
   16953:	ff 75 10             	push   0x10(%ebp)
   16956:	ff 75 f0             	push   -0x10(%ebp)
   16959:	ff 75 08             	push   0x8(%ebp)
   1695c:	e8 f9 fd ff ff       	call   1675a <bitmap_set_bit>
   16961:	83 c4 10             	add    $0x10,%esp
            return ok_index;
   16964:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16967:	eb 13                	jmp    1697c <bitmap_alloc_nbits+0xf9>
    while (search_index < bitmap->bit_count) {
   16969:	8b 45 08             	mov    0x8(%ebp),%eax
   1696c:	8b 00                	mov    (%eax),%eax
   1696e:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   16971:	0f 8c 63 ff ff ff    	jl     168da <bitmap_alloc_nbits+0x57>
        }
    }
    
    //遍历完整个位图也没有满足要求的空间则返回-1
    return -1;
   16977:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

   1697c:	c9                   	leave  
   1697d:	c3                   	ret    

0001697e <kernel_strcpy>:
 * @brief  拷贝字符串
 *
 * @param dest 目标字符串
 * @param src  源字符串
 */
void kernel_strcpy(char *dest, const char *src) {
   1697e:	55                   	push   %ebp
   1697f:	89 e5                	mov    %esp,%ebp
  // 1.判断是否为NULL
  if (!dest || !src) return;
   16981:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   16985:	74 3b                	je     169c2 <kernel_strcpy+0x44>
   16987:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1698b:	74 35                	je     169c2 <kernel_strcpy+0x44>

  // 2.拷贝 src '\0' 以前的部分到 dest中
  // TODO:完成（访问未初始化的内存）的异常中断后就只判断src是否读到'\0'
  while (*dest && *src) {
   1698d:	eb 17                	jmp    169a6 <kernel_strcpy+0x28>
    *(dest++) = *(src++);
   1698f:	8b 55 0c             	mov    0xc(%ebp),%edx
   16992:	8d 42 01             	lea    0x1(%edx),%eax
   16995:	89 45 0c             	mov    %eax,0xc(%ebp)
   16998:	8b 45 08             	mov    0x8(%ebp),%eax
   1699b:	8d 48 01             	lea    0x1(%eax),%ecx
   1699e:	89 4d 08             	mov    %ecx,0x8(%ebp)
   169a1:	0f b6 12             	movzbl (%edx),%edx
   169a4:	88 10                	mov    %dl,(%eax)
  while (*dest && *src) {
   169a6:	8b 45 08             	mov    0x8(%ebp),%eax
   169a9:	0f b6 00             	movzbl (%eax),%eax
   169ac:	84 c0                	test   %al,%al
   169ae:	74 0a                	je     169ba <kernel_strcpy+0x3c>
   169b0:	8b 45 0c             	mov    0xc(%ebp),%eax
   169b3:	0f b6 00             	movzbl (%eax),%eax
   169b6:	84 c0                	test   %al,%al
   169b8:	75 d5                	jne    1698f <kernel_strcpy+0x11>
  }

  // 3.添加结束符
  *dest = '\0';
   169ba:	8b 45 08             	mov    0x8(%ebp),%eax
   169bd:	c6 00 00             	movb   $0x0,(%eax)
   169c0:	eb 01                	jmp    169c3 <kernel_strcpy+0x45>
  if (!dest || !src) return;
   169c2:	90                   	nop
}
   169c3:	5d                   	pop    %ebp
   169c4:	c3                   	ret    

000169c5 <kernel_strncpy>:
 *
 * @param dest 目的字符串
 * @param src 源字符串
 * @param size 拷贝字符串的长度，包含'\0'
 */
void kernel_strncpy(char *dest, const char *src, int size) {
   169c5:	55                   	push   %ebp
   169c6:	89 e5                	mov    %esp,%ebp
  // 1.判断是否需要拷贝
  if (!dest || !src || !size) return;
   169c8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   169cc:	74 45                	je     16a13 <kernel_strncpy+0x4e>
   169ce:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   169d2:	74 3f                	je     16a13 <kernel_strncpy+0x4e>
   169d4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   169d8:	74 39                	je     16a13 <kernel_strncpy+0x4e>

  // 2.size的大小包含了'\0'，所以要预留一个空间给'\0'，只能拷贝 size - 1个字符
  while ((size-- > 1) && (*src)) {
   169da:	eb 17                	jmp    169f3 <kernel_strncpy+0x2e>
    *(dest++) = *(src++);
   169dc:	8b 55 0c             	mov    0xc(%ebp),%edx
   169df:	8d 42 01             	lea    0x1(%edx),%eax
   169e2:	89 45 0c             	mov    %eax,0xc(%ebp)
   169e5:	8b 45 08             	mov    0x8(%ebp),%eax
   169e8:	8d 48 01             	lea    0x1(%eax),%ecx
   169eb:	89 4d 08             	mov    %ecx,0x8(%ebp)
   169ee:	0f b6 12             	movzbl (%edx),%edx
   169f1:	88 10                	mov    %dl,(%eax)
  while ((size-- > 1) && (*src)) {
   169f3:	8b 45 10             	mov    0x10(%ebp),%eax
   169f6:	8d 50 ff             	lea    -0x1(%eax),%edx
   169f9:	89 55 10             	mov    %edx,0x10(%ebp)
   169fc:	83 f8 01             	cmp    $0x1,%eax
   169ff:	7e 0a                	jle    16a0b <kernel_strncpy+0x46>
   16a01:	8b 45 0c             	mov    0xc(%ebp),%eax
   16a04:	0f b6 00             	movzbl (%eax),%eax
   16a07:	84 c0                	test   %al,%al
   16a09:	75 d1                	jne    169dc <kernel_strncpy+0x17>
  }

  // 3.添加结束符
  *dest = '\0';
   16a0b:	8b 45 08             	mov    0x8(%ebp),%eax
   16a0e:	c6 00 00             	movb   $0x0,(%eax)
   16a11:	eb 01                	jmp    16a14 <kernel_strncpy+0x4f>
  if (!dest || !src || !size) return;
   16a13:	90                   	nop
}
   16a14:	5d                   	pop    %ebp
   16a15:	c3                   	ret    

00016a16 <kernel_strncmp>:
 * @param s2 字符串2
 * @param size 比较前比较的子串长度，从下标0开始到(size - 1)
 *
 * @return int ==: 0, > : 1, < : -1
 */
int kernel_strncmp(const char *s1, const char *s2, int size) {
   16a16:	55                   	push   %ebp
   16a17:	89 e5                	mov    %esp,%ebp
  if (!s1 || !s2) return 0;
   16a19:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   16a1d:	74 06                	je     16a25 <kernel_strncmp+0xf>
   16a1f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   16a23:	75 0f                	jne    16a34 <kernel_strncmp+0x1e>
   16a25:	b8 00 00 00 00       	mov    $0x0,%eax
   16a2a:	eb 69                	jmp    16a95 <kernel_strncmp+0x7f>

  while (*s1 && *s2 && --size && *s1 == *s2) {
    ++s1;
   16a2c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
    ++s2;
   16a30:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
  while (*s1 && *s2 && --size && *s1 == *s2) {
   16a34:	8b 45 08             	mov    0x8(%ebp),%eax
   16a37:	0f b6 00             	movzbl (%eax),%eax
   16a3a:	84 c0                	test   %al,%al
   16a3c:	74 24                	je     16a62 <kernel_strncmp+0x4c>
   16a3e:	8b 45 0c             	mov    0xc(%ebp),%eax
   16a41:	0f b6 00             	movzbl (%eax),%eax
   16a44:	84 c0                	test   %al,%al
   16a46:	74 1a                	je     16a62 <kernel_strncmp+0x4c>
   16a48:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   16a4c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   16a50:	74 10                	je     16a62 <kernel_strncmp+0x4c>
   16a52:	8b 45 08             	mov    0x8(%ebp),%eax
   16a55:	0f b6 10             	movzbl (%eax),%edx
   16a58:	8b 45 0c             	mov    0xc(%ebp),%eax
   16a5b:	0f b6 00             	movzbl (%eax),%eax
   16a5e:	38 c2                	cmp    %al,%dl
   16a60:	74 ca                	je     16a2c <kernel_strncmp+0x16>
  }

  if (*s1 > *s2) {
   16a62:	8b 45 08             	mov    0x8(%ebp),%eax
   16a65:	0f b6 10             	movzbl (%eax),%edx
   16a68:	8b 45 0c             	mov    0xc(%ebp),%eax
   16a6b:	0f b6 00             	movzbl (%eax),%eax
   16a6e:	38 c2                	cmp    %al,%dl
   16a70:	7e 07                	jle    16a79 <kernel_strncmp+0x63>
    return 1;
   16a72:	b8 01 00 00 00       	mov    $0x1,%eax
   16a77:	eb 1c                	jmp    16a95 <kernel_strncmp+0x7f>
  } else if (*s1 < *s2) {
   16a79:	8b 45 08             	mov    0x8(%ebp),%eax
   16a7c:	0f b6 10             	movzbl (%eax),%edx
   16a7f:	8b 45 0c             	mov    0xc(%ebp),%eax
   16a82:	0f b6 00             	movzbl (%eax),%eax
   16a85:	38 c2                	cmp    %al,%dl
   16a87:	7d 07                	jge    16a90 <kernel_strncmp+0x7a>
    return -1;
   16a89:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16a8e:	eb 05                	jmp    16a95 <kernel_strncmp+0x7f>
  } else {
    return 0;
   16a90:	b8 00 00 00 00       	mov    $0x0,%eax
  }
}
   16a95:	5d                   	pop    %ebp
   16a96:	c3                   	ret    

00016a97 <kernel_strlen>:
 * @brief  获取字符串str的长度, 不含'\0'
 *
 * @param str
 * @return int
 */
int kernel_strlen(const char *str) {
   16a97:	55                   	push   %ebp
   16a98:	89 e5                	mov    %esp,%ebp
   16a9a:	83 ec 10             	sub    $0x10,%esp
  if (!str) return 0;
   16a9d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   16aa1:	75 07                	jne    16aaa <kernel_strlen+0x13>
   16aa3:	b8 00 00 00 00       	mov    $0x0,%eax
   16aa8:	eb 20                	jmp    16aca <kernel_strlen+0x33>

  int len = 0;
   16aaa:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  while (*(str++)) len++;
   16ab1:	eb 04                	jmp    16ab7 <kernel_strlen+0x20>
   16ab3:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   16ab7:	8b 45 08             	mov    0x8(%ebp),%eax
   16aba:	8d 50 01             	lea    0x1(%eax),%edx
   16abd:	89 55 08             	mov    %edx,0x8(%ebp)
   16ac0:	0f b6 00             	movzbl (%eax),%eax
   16ac3:	84 c0                	test   %al,%al
   16ac5:	75 ec                	jne    16ab3 <kernel_strlen+0x1c>

  return len;
   16ac7:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   16aca:	c9                   	leave  
   16acb:	c3                   	ret    

00016acc <kernel_memcpy>:
 *
 * @param dest 目的内存的起始地址
 * @param src 原内存的起始地址
 * @param size 复制的内存字节大小
 */
void kernel_memcpy(void *dest, const void *src, int size) {
   16acc:	55                   	push   %ebp
   16acd:	89 e5                	mov    %esp,%ebp
   16acf:	83 ec 10             	sub    $0x10,%esp
  if (!dest || !src || !size) return;
   16ad2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   16ad6:	74 40                	je     16b18 <kernel_memcpy+0x4c>
   16ad8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   16adc:	74 3a                	je     16b18 <kernel_memcpy+0x4c>
   16ade:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   16ae2:	74 34                	je     16b18 <kernel_memcpy+0x4c>

  uint8_t *d = (uint8_t *)dest;
   16ae4:	8b 45 08             	mov    0x8(%ebp),%eax
   16ae7:	89 45 fc             	mov    %eax,-0x4(%ebp)
  uint8_t *s = (uint8_t *)src;
   16aea:	8b 45 0c             	mov    0xc(%ebp),%eax
   16aed:	89 45 f8             	mov    %eax,-0x8(%ebp)

  while (size--) {
   16af0:	eb 17                	jmp    16b09 <kernel_memcpy+0x3d>
    *(d++) = *(s++);
   16af2:	8b 55 f8             	mov    -0x8(%ebp),%edx
   16af5:	8d 42 01             	lea    0x1(%edx),%eax
   16af8:	89 45 f8             	mov    %eax,-0x8(%ebp)
   16afb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   16afe:	8d 48 01             	lea    0x1(%eax),%ecx
   16b01:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   16b04:	0f b6 12             	movzbl (%edx),%edx
   16b07:	88 10                	mov    %dl,(%eax)
  while (size--) {
   16b09:	8b 45 10             	mov    0x10(%ebp),%eax
   16b0c:	8d 50 ff             	lea    -0x1(%eax),%edx
   16b0f:	89 55 10             	mov    %edx,0x10(%ebp)
   16b12:	85 c0                	test   %eax,%eax
   16b14:	75 dc                	jne    16af2 <kernel_memcpy+0x26>
   16b16:	eb 01                	jmp    16b19 <kernel_memcpy+0x4d>
  if (!dest || !src || !size) return;
   16b18:	90                   	nop
  }
}
   16b19:	c9                   	leave  
   16b1a:	c3                   	ret    

00016b1b <kernel_memset>:
 *
 * @param dest 区域起始地址
 * @param v 每个字节的值
 * @param size 赋值的内存的大小
 */
void kernel_memset(void *dest, uint8_t v, int size) {
   16b1b:	55                   	push   %ebp
   16b1c:	89 e5                	mov    %esp,%ebp
   16b1e:	83 ec 14             	sub    $0x14,%esp
   16b21:	8b 45 0c             	mov    0xc(%ebp),%eax
   16b24:	88 45 ec             	mov    %al,-0x14(%ebp)
  if (!dest || !size) return;
   16b27:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   16b2b:	74 2c                	je     16b59 <kernel_memset+0x3e>
   16b2d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   16b31:	74 26                	je     16b59 <kernel_memset+0x3e>

  uint8_t *d = (uint8_t *)dest;
   16b33:	8b 45 08             	mov    0x8(%ebp),%eax
   16b36:	89 45 fc             	mov    %eax,-0x4(%ebp)

  while (size--) {
   16b39:	eb 0f                	jmp    16b4a <kernel_memset+0x2f>
    *(d++) = v;
   16b3b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   16b3e:	8d 50 01             	lea    0x1(%eax),%edx
   16b41:	89 55 fc             	mov    %edx,-0x4(%ebp)
   16b44:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   16b48:	88 10                	mov    %dl,(%eax)
  while (size--) {
   16b4a:	8b 45 10             	mov    0x10(%ebp),%eax
   16b4d:	8d 50 ff             	lea    -0x1(%eax),%edx
   16b50:	89 55 10             	mov    %edx,0x10(%ebp)
   16b53:	85 c0                	test   %eax,%eax
   16b55:	75 e4                	jne    16b3b <kernel_memset+0x20>
   16b57:	eb 01                	jmp    16b5a <kernel_memset+0x3f>
  if (!dest || !size) return;
   16b59:	90                   	nop
  }
}
   16b5a:	c9                   	leave  
   16b5b:	c3                   	ret    

00016b5c <kernel_memcmp>:
 * @param d1 区域1的起始地址
 * @param d2 区域2的起始地址
 * @param size 比较的字节数量
 * @return int ==:0, >:1, <:-1
 */
int kernel_memcmp(const void *dest1, const void *dest2, int size) {
   16b5c:	55                   	push   %ebp
   16b5d:	89 e5                	mov    %esp,%ebp
   16b5f:	83 ec 10             	sub    $0x10,%esp
  if (!dest1 || !dest2 || !size) return 0;
   16b62:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   16b66:	74 0c                	je     16b74 <kernel_memcmp+0x18>
   16b68:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   16b6c:	74 06                	je     16b74 <kernel_memcmp+0x18>
   16b6e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   16b72:	75 07                	jne    16b7b <kernel_memcmp+0x1f>
   16b74:	b8 00 00 00 00       	mov    $0x0,%eax
   16b79:	eb 63                	jmp    16bde <kernel_memcmp+0x82>

  uint8_t *d1 = (uint8_t *)dest1;
   16b7b:	8b 45 08             	mov    0x8(%ebp),%eax
   16b7e:	89 45 fc             	mov    %eax,-0x4(%ebp)
  uint8_t *d2 = (uint8_t *)dest2;
   16b81:	8b 45 0c             	mov    0xc(%ebp),%eax
   16b84:	89 45 f8             	mov    %eax,-0x8(%ebp)

  while (--size && *d1 == *d2) {
   16b87:	eb 08                	jmp    16b91 <kernel_memcmp+0x35>
    d1++;
   16b89:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    d2++;
   16b8d:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  while (--size && *d1 == *d2) {
   16b91:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   16b95:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   16b99:	74 10                	je     16bab <kernel_memcmp+0x4f>
   16b9b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   16b9e:	0f b6 10             	movzbl (%eax),%edx
   16ba1:	8b 45 f8             	mov    -0x8(%ebp),%eax
   16ba4:	0f b6 00             	movzbl (%eax),%eax
   16ba7:	38 c2                	cmp    %al,%dl
   16ba9:	74 de                	je     16b89 <kernel_memcmp+0x2d>
  }

  if (*d1 > *d2)
   16bab:	8b 45 fc             	mov    -0x4(%ebp),%eax
   16bae:	0f b6 10             	movzbl (%eax),%edx
   16bb1:	8b 45 f8             	mov    -0x8(%ebp),%eax
   16bb4:	0f b6 00             	movzbl (%eax),%eax
   16bb7:	38 c2                	cmp    %al,%dl
   16bb9:	76 07                	jbe    16bc2 <kernel_memcmp+0x66>
    return 1;
   16bbb:	b8 01 00 00 00       	mov    $0x1,%eax
   16bc0:	eb 1c                	jmp    16bde <kernel_memcmp+0x82>
  else if (*d1 < *d2)
   16bc2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   16bc5:	0f b6 10             	movzbl (%eax),%edx
   16bc8:	8b 45 f8             	mov    -0x8(%ebp),%eax
   16bcb:	0f b6 00             	movzbl (%eax),%eax
   16bce:	38 c2                	cmp    %al,%dl
   16bd0:	73 07                	jae    16bd9 <kernel_memcmp+0x7d>
    return -1;
   16bd2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16bd7:	eb 05                	jmp    16bde <kernel_memcmp+0x82>
  else
    return 0;
   16bd9:	b8 00 00 00 00       	mov    $0x0,%eax
}
   16bde:	c9                   	leave  
   16bdf:	c3                   	ret    

00016be0 <kernel_sprintf>:

void kernel_sprintf(char *buf, const char *formate, ...) {
   16be0:	55                   	push   %ebp
   16be1:	89 e5                	mov    %esp,%ebp
   16be3:	83 ec 18             	sub    $0x18,%esp
  // 获取可变参数并将其格式化到缓冲区中
  va_list args;
  va_start(args, formate);
   16be6:	8d 45 10             	lea    0x10(%ebp),%eax
   16be9:	89 45 f4             	mov    %eax,-0xc(%ebp)
  kernel_vsprintf(buf, formate, args);
   16bec:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16bef:	83 ec 04             	sub    $0x4,%esp
   16bf2:	50                   	push   %eax
   16bf3:	ff 75 0c             	push   0xc(%ebp)
   16bf6:	ff 75 08             	push   0x8(%ebp)
   16bf9:	e8 06 00 00 00       	call   16c04 <kernel_vsprintf>
   16bfe:	83 c4 10             	add    $0x10,%esp
  va_end(args);
}
   16c01:	90                   	nop
   16c02:	c9                   	leave  
   16c03:	c3                   	ret    

00016c04 <kernel_vsprintf>:
 *
 * @param buf
 * @param formate
 * @param args
 */
void kernel_vsprintf(char *buf, const char *formate, va_list args) {
   16c04:	55                   	push   %ebp
   16c05:	89 e5                	mov    %esp,%ebp
   16c07:	83 ec 28             	sub    $0x28,%esp
  // 定义状态机，包含两种状态
  enum { NORMAL, READ_FMT } state = NORMAL;
   16c0a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  char *curr = buf;
   16c11:	8b 45 08             	mov    0x8(%ebp),%eax
   16c14:	89 45 f0             	mov    %eax,-0x10(%ebp)

  char ch;

  while ((ch = *(formate++)) != '\0') {
   16c17:	e9 68 01 00 00       	jmp    16d84 <kernel_vsprintf+0x180>
    switch (state) {
   16c1c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   16c20:	74 0b                	je     16c2d <kernel_vsprintf+0x29>
   16c22:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   16c26:	74 2b                	je     16c53 <kernel_vsprintf+0x4f>
   16c28:	e9 56 01 00 00       	jmp    16d83 <kernel_vsprintf+0x17f>
      case NORMAL:
        if (ch == '%')
   16c2d:	80 7d e7 25          	cmpb   $0x25,-0x19(%ebp)
   16c31:	75 0c                	jne    16c3f <kernel_vsprintf+0x3b>
          state = READ_FMT;
   16c33:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   16c3a:	e9 45 01 00 00       	jmp    16d84 <kernel_vsprintf+0x180>
        else
          *(curr++) = ch;
   16c3f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16c42:	8d 50 01             	lea    0x1(%eax),%edx
   16c45:	89 55 f0             	mov    %edx,-0x10(%ebp)
   16c48:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   16c4c:	88 10                	mov    %dl,(%eax)
        break;
   16c4e:	e9 31 01 00 00       	jmp    16d84 <kernel_vsprintf+0x180>
      case READ_FMT:
        if (ch == 's') {
   16c53:	80 7d e7 73          	cmpb   $0x73,-0x19(%ebp)
   16c57:	75 47                	jne    16ca0 <kernel_vsprintf+0x9c>
          const char *str = va_arg(args, char *);
   16c59:	8b 45 10             	mov    0x10(%ebp),%eax
   16c5c:	8d 50 04             	lea    0x4(%eax),%edx
   16c5f:	89 55 10             	mov    %edx,0x10(%ebp)
   16c62:	8b 00                	mov    (%eax),%eax
   16c64:	89 45 ec             	mov    %eax,-0x14(%ebp)
          int len = kernel_strlen(str);
   16c67:	ff 75 ec             	push   -0x14(%ebp)
   16c6a:	e8 28 fe ff ff       	call   16a97 <kernel_strlen>
   16c6f:	83 c4 04             	add    $0x4,%esp
   16c72:	89 45 e8             	mov    %eax,-0x18(%ebp)
          while (len--) {
   16c75:	eb 17                	jmp    16c8e <kernel_vsprintf+0x8a>
            *(curr++) = *(str++);
   16c77:	8b 55 ec             	mov    -0x14(%ebp),%edx
   16c7a:	8d 42 01             	lea    0x1(%edx),%eax
   16c7d:	89 45 ec             	mov    %eax,-0x14(%ebp)
   16c80:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16c83:	8d 48 01             	lea    0x1(%eax),%ecx
   16c86:	89 4d f0             	mov    %ecx,-0x10(%ebp)
   16c89:	0f b6 12             	movzbl (%edx),%edx
   16c8c:	88 10                	mov    %dl,(%eax)
          while (len--) {
   16c8e:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16c91:	8d 50 ff             	lea    -0x1(%eax),%edx
   16c94:	89 55 e8             	mov    %edx,-0x18(%ebp)
   16c97:	85 c0                	test   %eax,%eax
   16c99:	75 dc                	jne    16c77 <kernel_vsprintf+0x73>
   16c9b:	e9 da 00 00 00       	jmp    16d7a <kernel_vsprintf+0x176>
          }
        } else if (ch == 'd') {
   16ca0:	80 7d e7 64          	cmpb   $0x64,-0x19(%ebp)
   16ca4:	75 37                	jne    16cdd <kernel_vsprintf+0xd9>
          const int num = va_arg(args, int);
   16ca6:	8b 45 10             	mov    0x10(%ebp),%eax
   16ca9:	8d 50 04             	lea    0x4(%eax),%edx
   16cac:	89 55 10             	mov    %edx,0x10(%ebp)
   16caf:	8b 00                	mov    (%eax),%eax
   16cb1:	89 45 d8             	mov    %eax,-0x28(%ebp)
          kernel_itoa(curr, num, 10);
   16cb4:	83 ec 04             	sub    $0x4,%esp
   16cb7:	6a 0a                	push   $0xa
   16cb9:	ff 75 d8             	push   -0x28(%ebp)
   16cbc:	ff 75 f0             	push   -0x10(%ebp)
   16cbf:	e8 dd 00 00 00       	call   16da1 <kernel_itoa>
   16cc4:	83 c4 10             	add    $0x10,%esp
          curr += kernel_strlen(curr);
   16cc7:	83 ec 0c             	sub    $0xc,%esp
   16cca:	ff 75 f0             	push   -0x10(%ebp)
   16ccd:	e8 c5 fd ff ff       	call   16a97 <kernel_strlen>
   16cd2:	83 c4 10             	add    $0x10,%esp
   16cd5:	01 45 f0             	add    %eax,-0x10(%ebp)
   16cd8:	e9 9d 00 00 00       	jmp    16d7a <kernel_vsprintf+0x176>
        } else if (ch == 'x' || ch == 'X') {
   16cdd:	80 7d e7 78          	cmpb   $0x78,-0x19(%ebp)
   16ce1:	74 06                	je     16ce9 <kernel_vsprintf+0xe5>
   16ce3:	80 7d e7 58          	cmpb   $0x58,-0x19(%ebp)
   16ce7:	75 34                	jne    16d1d <kernel_vsprintf+0x119>
          const int num = va_arg(args, int);
   16ce9:	8b 45 10             	mov    0x10(%ebp),%eax
   16cec:	8d 50 04             	lea    0x4(%eax),%edx
   16cef:	89 55 10             	mov    %edx,0x10(%ebp)
   16cf2:	8b 00                	mov    (%eax),%eax
   16cf4:	89 45 dc             	mov    %eax,-0x24(%ebp)
          kernel_itoa(curr, num, 16);
   16cf7:	83 ec 04             	sub    $0x4,%esp
   16cfa:	6a 10                	push   $0x10
   16cfc:	ff 75 dc             	push   -0x24(%ebp)
   16cff:	ff 75 f0             	push   -0x10(%ebp)
   16d02:	e8 9a 00 00 00       	call   16da1 <kernel_itoa>
   16d07:	83 c4 10             	add    $0x10,%esp
          curr += kernel_strlen(curr);
   16d0a:	83 ec 0c             	sub    $0xc,%esp
   16d0d:	ff 75 f0             	push   -0x10(%ebp)
   16d10:	e8 82 fd ff ff       	call   16a97 <kernel_strlen>
   16d15:	83 c4 10             	add    $0x10,%esp
   16d18:	01 45 f0             	add    %eax,-0x10(%ebp)
        } else if (ch == 'x' || ch == 'X') {
   16d1b:	eb 5d                	jmp    16d7a <kernel_vsprintf+0x176>
        } else if (ch == 'b') {
   16d1d:	80 7d e7 62          	cmpb   $0x62,-0x19(%ebp)
   16d21:	75 34                	jne    16d57 <kernel_vsprintf+0x153>
          const int num = va_arg(args, int);
   16d23:	8b 45 10             	mov    0x10(%ebp),%eax
   16d26:	8d 50 04             	lea    0x4(%eax),%edx
   16d29:	89 55 10             	mov    %edx,0x10(%ebp)
   16d2c:	8b 00                	mov    (%eax),%eax
   16d2e:	89 45 e0             	mov    %eax,-0x20(%ebp)
          kernel_itoa(curr, num, 2);
   16d31:	83 ec 04             	sub    $0x4,%esp
   16d34:	6a 02                	push   $0x2
   16d36:	ff 75 e0             	push   -0x20(%ebp)
   16d39:	ff 75 f0             	push   -0x10(%ebp)
   16d3c:	e8 60 00 00 00       	call   16da1 <kernel_itoa>
   16d41:	83 c4 10             	add    $0x10,%esp
          curr += kernel_strlen(curr);
   16d44:	83 ec 0c             	sub    $0xc,%esp
   16d47:	ff 75 f0             	push   -0x10(%ebp)
   16d4a:	e8 48 fd ff ff       	call   16a97 <kernel_strlen>
   16d4f:	83 c4 10             	add    $0x10,%esp
   16d52:	01 45 f0             	add    %eax,-0x10(%ebp)
   16d55:	eb 23                	jmp    16d7a <kernel_vsprintf+0x176>
        } else if (ch == 'c') {
   16d57:	80 7d e7 63          	cmpb   $0x63,-0x19(%ebp)
   16d5b:	75 1d                	jne    16d7a <kernel_vsprintf+0x176>
          char c = va_arg(args, int);
   16d5d:	8b 45 10             	mov    0x10(%ebp),%eax
   16d60:	8d 50 04             	lea    0x4(%eax),%edx
   16d63:	89 55 10             	mov    %edx,0x10(%ebp)
   16d66:	8b 00                	mov    (%eax),%eax
   16d68:	88 45 e6             	mov    %al,-0x1a(%ebp)
          *(curr++) = c;
   16d6b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16d6e:	8d 50 01             	lea    0x1(%eax),%edx
   16d71:	89 55 f0             	mov    %edx,-0x10(%ebp)
   16d74:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   16d78:	88 10                	mov    %dl,(%eax)
        }
        state = NORMAL;
   16d7a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        break;
   16d81:	eb 01                	jmp    16d84 <kernel_vsprintf+0x180>
      default:
        break;
   16d83:	90                   	nop
  while ((ch = *(formate++)) != '\0') {
   16d84:	8b 45 0c             	mov    0xc(%ebp),%eax
   16d87:	8d 50 01             	lea    0x1(%eax),%edx
   16d8a:	89 55 0c             	mov    %edx,0xc(%ebp)
   16d8d:	0f b6 00             	movzbl (%eax),%eax
   16d90:	88 45 e7             	mov    %al,-0x19(%ebp)
   16d93:	80 7d e7 00          	cmpb   $0x0,-0x19(%ebp)
   16d97:	0f 85 7f fe ff ff    	jne    16c1c <kernel_vsprintf+0x18>
    }
  }
}
   16d9d:	90                   	nop
   16d9e:	90                   	nop
   16d9f:	c9                   	leave  
   16da0:	c3                   	ret    

00016da1 <kernel_itoa>:
 *
 * @param buf 缓冲区
 * @param num 整数
 * @param base 转换的进制规则
 */
void kernel_itoa(char *buf, int num, int base) {
   16da1:	55                   	push   %ebp
   16da2:	89 e5                	mov    %esp,%ebp
   16da4:	53                   	push   %ebx
   16da5:	81 ec 90 00 00 00    	sub    $0x90,%esp

  if (base != 2 && base != 8 && base != 10 && base != 16) {
   16dab:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   16daf:	74 1d                	je     16dce <kernel_itoa+0x2d>
   16db1:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   16db5:	74 17                	je     16dce <kernel_itoa+0x2d>
   16db7:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   16dbb:	74 11                	je     16dce <kernel_itoa+0x2d>
   16dbd:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   16dc1:	74 0b                	je     16dce <kernel_itoa+0x2d>
    *buf = '\0';
   16dc3:	8b 45 08             	mov    0x8(%ebp),%eax
   16dc6:	c6 00 00             	movb   $0x0,(%eax)
    return;
   16dc9:	e9 f8 00 00 00       	jmp    16ec6 <kernel_itoa+0x125>
  }

  if (num == 0) {
   16dce:	8b 45 0c             	mov    0xc(%ebp),%eax
   16dd1:	85 c0                	test   %eax,%eax
   16dd3:	75 17                	jne    16dec <kernel_itoa+0x4b>
    *(buf++) = '0';
   16dd5:	8b 45 08             	mov    0x8(%ebp),%eax
   16dd8:	8d 50 01             	lea    0x1(%eax),%edx
   16ddb:	89 55 08             	mov    %edx,0x8(%ebp)
   16dde:	c6 00 30             	movb   $0x30,(%eax)
    *buf = '\0';
   16de1:	8b 45 08             	mov    0x8(%ebp),%eax
   16de4:	c6 00 00             	movb   $0x0,(%eax)
    return;
   16de7:	e9 da 00 00 00       	jmp    16ec6 <kernel_itoa+0x125>
  }

  char *p = buf;
   16dec:	8b 45 08             	mov    0x8(%ebp),%eax
   16def:	89 45 f8             	mov    %eax,-0x8(%ebp)
  uint32_t u_num = 0;
   16df2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  if (base == 10) {
   16df9:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   16dfd:	75 41                	jne    16e40 <kernel_itoa+0x9f>
    u_num = num;
   16dff:	8b 45 0c             	mov    0xc(%ebp),%eax
   16e02:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (num < 0) {
   16e05:	8b 45 0c             	mov    0xc(%ebp),%eax
   16e08:	85 c0                	test   %eax,%eax
   16e0a:	79 16                	jns    16e22 <kernel_itoa+0x81>
      *(p++) = '-';
   16e0c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   16e0f:	8d 50 01             	lea    0x1(%eax),%edx
   16e12:	89 55 f8             	mov    %edx,-0x8(%ebp)
   16e15:	c6 00 2d             	movb   $0x2d,(%eax)
      u_num = -1 * num;
   16e18:	8b 45 0c             	mov    0xc(%ebp),%eax
   16e1b:	f7 d8                	neg    %eax
   16e1d:	89 45 f4             	mov    %eax,-0xc(%ebp)
   16e20:	eb 26                	jmp    16e48 <kernel_itoa+0xa7>
    } else if (num == 0) {
   16e22:	8b 45 0c             	mov    0xc(%ebp),%eax
   16e25:	85 c0                	test   %eax,%eax
   16e27:	75 1f                	jne    16e48 <kernel_itoa+0xa7>
      *(p++) = '0';
   16e29:	8b 45 f8             	mov    -0x8(%ebp),%eax
   16e2c:	8d 50 01             	lea    0x1(%eax),%edx
   16e2f:	89 55 f8             	mov    %edx,-0x8(%ebp)
   16e32:	c6 00 30             	movb   $0x30,(%eax)
      *p = '\0';
   16e35:	8b 45 f8             	mov    -0x8(%ebp),%eax
   16e38:	c6 00 00             	movb   $0x0,(%eax)
      return;
   16e3b:	e9 86 00 00 00       	jmp    16ec6 <kernel_itoa+0x125>
    }
  } else {
    u_num = *((uint32_t *)&num);
   16e40:	8d 45 0c             	lea    0xc(%ebp),%eax
   16e43:	8b 00                	mov    (%eax),%eax
   16e45:	89 45 f4             	mov    %eax,-0xc(%ebp)
  }

  static const char *num_to_char = {"0123456789abcdef"};
  char arr[128];
  int len = 0;
   16e48:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  while (u_num > 0) {
   16e4f:	eb 3b                	jmp    16e8c <kernel_itoa+0xeb>
    arr[len++] = num_to_char[u_num % base];
   16e51:	8b 1d e0 90 01 00    	mov    0x190e0,%ebx
   16e57:	8b 4d 10             	mov    0x10(%ebp),%ecx
   16e5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16e5d:	ba 00 00 00 00       	mov    $0x0,%edx
   16e62:	f7 f1                	div    %ecx
   16e64:	89 d0                	mov    %edx,%eax
   16e66:	8d 0c 03             	lea    (%ebx,%eax,1),%ecx
   16e69:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16e6c:	8d 50 01             	lea    0x1(%eax),%edx
   16e6f:	89 55 f0             	mov    %edx,-0x10(%ebp)
   16e72:	0f b6 11             	movzbl (%ecx),%edx
   16e75:	88 94 05 6c ff ff ff 	mov    %dl,-0x94(%ebp,%eax,1)
    u_num /= base;
   16e7c:	8b 5d 10             	mov    0x10(%ebp),%ebx
   16e7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16e82:	ba 00 00 00 00       	mov    $0x0,%edx
   16e87:	f7 f3                	div    %ebx
   16e89:	89 45 f4             	mov    %eax,-0xc(%ebp)
  while (u_num > 0) {
   16e8c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   16e90:	75 bf                	jne    16e51 <kernel_itoa+0xb0>
  }

  for (int i = len - 1; i >= 0; --i) {
   16e92:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16e95:	83 e8 01             	sub    $0x1,%eax
   16e98:	89 45 ec             	mov    %eax,-0x14(%ebp)
   16e9b:	eb 1d                	jmp    16eba <kernel_itoa+0x119>
    *(p++) = arr[i];
   16e9d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   16ea0:	8d 50 01             	lea    0x1(%eax),%edx
   16ea3:	89 55 f8             	mov    %edx,-0x8(%ebp)
   16ea6:	8d 8d 6c ff ff ff    	lea    -0x94(%ebp),%ecx
   16eac:	8b 55 ec             	mov    -0x14(%ebp),%edx
   16eaf:	01 ca                	add    %ecx,%edx
   16eb1:	0f b6 12             	movzbl (%edx),%edx
   16eb4:	88 10                	mov    %dl,(%eax)
  for (int i = len - 1; i >= 0; --i) {
   16eb6:	83 6d ec 01          	subl   $0x1,-0x14(%ebp)
   16eba:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   16ebe:	79 dd                	jns    16e9d <kernel_itoa+0xfc>
  }
  *p = '\0';
   16ec0:	8b 45 f8             	mov    -0x8(%ebp),%eax
   16ec3:	c6 00 00             	movb   $0x0,(%eax)
}
   16ec6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   16ec9:	c9                   	leave  
   16eca:	c3                   	ret    

00016ecb <strings_count>:
 * @brief 计算字符串数组str中字符串的个数
 *
 * @param str
 * @return int
 */
int strings_count(char *const *strs) {
   16ecb:	55                   	push   %ebp
   16ecc:	89 e5                	mov    %esp,%ebp
   16ece:	83 ec 10             	sub    $0x10,%esp
  int count = 0;
   16ed1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  if (strs) {
   16ed8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   16edc:	74 15                	je     16ef3 <strings_count+0x28>
    while (*(strs++)) {
   16ede:	eb 04                	jmp    16ee4 <strings_count+0x19>
      count++;
   16ee0:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    while (*(strs++)) {
   16ee4:	8b 45 08             	mov    0x8(%ebp),%eax
   16ee7:	8d 50 04             	lea    0x4(%eax),%edx
   16eea:	89 55 08             	mov    %edx,0x8(%ebp)
   16eed:	8b 00                	mov    (%eax),%eax
   16eef:	85 c0                	test   %eax,%eax
   16ef1:	75 ed                	jne    16ee0 <strings_count+0x15>
    }
  }

  return count;
   16ef3:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   16ef6:	c9                   	leave  
   16ef7:	c3                   	ret    

00016ef8 <get_file_name>:
 * @brief 根据文件路径获取文件名
 *
 * @param path
 * @return char*
 */
const char *get_file_name(const char *path) {
   16ef8:	55                   	push   %ebp
   16ef9:	89 e5                	mov    %esp,%ebp
   16efb:	83 ec 10             	sub    $0x10,%esp
  const char *s = path;
   16efe:	8b 45 08             	mov    0x8(%ebp),%eax
   16f01:	89 45 fc             	mov    %eax,-0x4(%ebp)
  while (*s != '\0') {
   16f04:	eb 04                	jmp    16f0a <get_file_name+0x12>
    s++;
   16f06:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  while (*s != '\0') {
   16f0a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   16f0d:	0f b6 00             	movzbl (%eax),%eax
   16f10:	84 c0                	test   %al,%al
   16f12:	75 f2                	jne    16f06 <get_file_name+0xe>
  }

  while ((*s != '/') && (*s != '\\') && (s >= path)) {
   16f14:	eb 04                	jmp    16f1a <get_file_name+0x22>
    s--;
   16f16:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
  while ((*s != '/') && (*s != '\\') && (s >= path)) {
   16f1a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   16f1d:	0f b6 00             	movzbl (%eax),%eax
   16f20:	3c 2f                	cmp    $0x2f,%al
   16f22:	74 12                	je     16f36 <get_file_name+0x3e>
   16f24:	8b 45 fc             	mov    -0x4(%ebp),%eax
   16f27:	0f b6 00             	movzbl (%eax),%eax
   16f2a:	3c 5c                	cmp    $0x5c,%al
   16f2c:	74 08                	je     16f36 <get_file_name+0x3e>
   16f2e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   16f31:	3b 45 08             	cmp    0x8(%ebp),%eax
   16f34:	73 e0                	jae    16f16 <get_file_name+0x1e>
  }

  return s + 1;
   16f36:	8b 45 fc             	mov    -0x4(%ebp),%eax
   16f39:	83 c0 01             	add    $0x1,%eax
   16f3c:	c9                   	leave  
   16f3d:	c3                   	ret    

00016f3e <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   16f3e:	55                   	push   %ebp
   16f3f:	89 e5                	mov    %esp,%ebp
   16f41:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   16f44:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   16f48:	75 19                	jne    16f63 <list_is_empty+0x25>
   16f4a:	68 d4 89 01 00       	push   $0x189d4
   16f4f:	68 b8 8a 01 00       	push   $0x18ab8
   16f54:	6a 38                	push   $0x38
   16f56:	68 e8 89 01 00       	push   $0x189e8
   16f5b:	e8 a2 f6 ff ff       	call   16602 <pannic>
   16f60:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   16f63:	8b 45 08             	mov    0x8(%ebp),%eax
   16f66:	8b 40 08             	mov    0x8(%eax),%eax
   16f69:	85 c0                	test   %eax,%eax
   16f6b:	0f 94 c0             	sete   %al
   16f6e:	0f b6 c0             	movzbl %al,%eax
}
   16f71:	c9                   	leave  
   16f72:	c3                   	ret    

00016f73 <list_get_size>:
static inline int list_get_size(list_t *list) {
   16f73:	55                   	push   %ebp
   16f74:	89 e5                	mov    %esp,%ebp
   16f76:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   16f79:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   16f7d:	75 19                	jne    16f98 <list_get_size+0x25>
   16f7f:	68 d4 89 01 00       	push   $0x189d4
   16f84:	68 f0 8a 01 00       	push   $0x18af0
   16f89:	6a 3e                	push   $0x3e
   16f8b:	68 e8 89 01 00       	push   $0x189e8
   16f90:	e8 6d f6 ff ff       	call   16602 <pannic>
   16f95:	83 c4 10             	add    $0x10,%esp
    return list->size;
   16f98:	8b 45 08             	mov    0x8(%ebp),%eax
   16f9b:	8b 40 08             	mov    0x8(%eax),%eax
}
   16f9e:	c9                   	leave  
   16f9f:	c3                   	ret    

00016fa0 <list_insert_first>:
 * 
 */

#include "tools/list.h"

void list_insert_first(list_t *list, list_node_t *node) {
   16fa0:	55                   	push   %ebp
   16fa1:	89 e5                	mov    %esp,%ebp
   16fa3:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   16fa6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   16faa:	74 06                	je     16fb2 <list_insert_first+0x12>
   16fac:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   16fb0:	75 19                	jne    16fcb <list_insert_first+0x2b>
   16fb2:	68 28 8a 01 00       	push   $0x18a28
   16fb7:	68 a4 8a 01 00       	push   $0x18aa4
   16fbc:	6a 0f                	push   $0xf
   16fbe:	68 58 8a 01 00       	push   $0x18a58
   16fc3:	e8 3a f6 ff ff       	call   16602 <pannic>
   16fc8:	83 c4 10             	add    $0x10,%esp

    // if (node == (list_node_t*)0) return;

    node->next = list->first;
   16fcb:	8b 45 08             	mov    0x8(%ebp),%eax
   16fce:	8b 10                	mov    (%eax),%edx
   16fd0:	8b 45 0c             	mov    0xc(%ebp),%eax
   16fd3:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   16fd6:	8b 45 0c             	mov    0xc(%ebp),%eax
   16fd9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   16fdf:	83 ec 0c             	sub    $0xc,%esp
   16fe2:	ff 75 08             	push   0x8(%ebp)
   16fe5:	e8 54 ff ff ff       	call   16f3e <list_is_empty>
   16fea:	83 c4 10             	add    $0x10,%esp
   16fed:	85 c0                	test   %eax,%eax
   16fef:	74 16                	je     17007 <list_insert_first+0x67>
        list->first = list->last = node;
   16ff1:	8b 45 08             	mov    0x8(%ebp),%eax
   16ff4:	8b 55 0c             	mov    0xc(%ebp),%edx
   16ff7:	89 50 04             	mov    %edx,0x4(%eax)
   16ffa:	8b 45 08             	mov    0x8(%ebp),%eax
   16ffd:	8b 50 04             	mov    0x4(%eax),%edx
   17000:	8b 45 08             	mov    0x8(%ebp),%eax
   17003:	89 10                	mov    %edx,(%eax)
   17005:	eb 12                	jmp    17019 <list_insert_first+0x79>
    } else {
        list->first->pre = node;
   17007:	8b 45 08             	mov    0x8(%ebp),%eax
   1700a:	8b 00                	mov    (%eax),%eax
   1700c:	8b 55 0c             	mov    0xc(%ebp),%edx
   1700f:	89 10                	mov    %edx,(%eax)
        list->first = node;
   17011:	8b 45 08             	mov    0x8(%ebp),%eax
   17014:	8b 55 0c             	mov    0xc(%ebp),%edx
   17017:	89 10                	mov    %edx,(%eax)
    }

    list->size++;
   17019:	8b 45 08             	mov    0x8(%ebp),%eax
   1701c:	8b 40 08             	mov    0x8(%eax),%eax
   1701f:	8d 50 01             	lea    0x1(%eax),%edx
   17022:	8b 45 08             	mov    0x8(%ebp),%eax
   17025:	89 50 08             	mov    %edx,0x8(%eax)
}
   17028:	90                   	nop
   17029:	c9                   	leave  
   1702a:	c3                   	ret    

0001702b <list_insert_last>:

void list_insert_last(list_t *list, list_node_t *node) {
   1702b:	55                   	push   %ebp
   1702c:	89 e5                	mov    %esp,%ebp
   1702e:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   17031:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   17035:	74 06                	je     1703d <list_insert_last+0x12>
   17037:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1703b:	75 19                	jne    17056 <list_insert_last+0x2b>
   1703d:	68 28 8a 01 00       	push   $0x18a28
   17042:	68 c8 8a 01 00       	push   $0x18ac8
   17047:	6a 21                	push   $0x21
   17049:	68 58 8a 01 00       	push   $0x18a58
   1704e:	e8 af f5 ff ff       	call   16602 <pannic>
   17053:	83 c4 10             	add    $0x10,%esp
    // if (node == (list_node_t*)0) return;

    node->pre = list->last;
   17056:	8b 45 08             	mov    0x8(%ebp),%eax
   17059:	8b 50 04             	mov    0x4(%eax),%edx
   1705c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1705f:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   17061:	8b 45 0c             	mov    0xc(%ebp),%eax
   17064:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)


    if (list_is_empty(list)) {
   1706b:	83 ec 0c             	sub    $0xc,%esp
   1706e:	ff 75 08             	push   0x8(%ebp)
   17071:	e8 c8 fe ff ff       	call   16f3e <list_is_empty>
   17076:	83 c4 10             	add    $0x10,%esp
   17079:	85 c0                	test   %eax,%eax
   1707b:	74 16                	je     17093 <list_insert_last+0x68>
        list->first = list->last = node;
   1707d:	8b 45 08             	mov    0x8(%ebp),%eax
   17080:	8b 55 0c             	mov    0xc(%ebp),%edx
   17083:	89 50 04             	mov    %edx,0x4(%eax)
   17086:	8b 45 08             	mov    0x8(%ebp),%eax
   17089:	8b 50 04             	mov    0x4(%eax),%edx
   1708c:	8b 45 08             	mov    0x8(%ebp),%eax
   1708f:	89 10                	mov    %edx,(%eax)
   17091:	eb 15                	jmp    170a8 <list_insert_last+0x7d>
    } else {
        list->last->next = node;
   17093:	8b 45 08             	mov    0x8(%ebp),%eax
   17096:	8b 40 04             	mov    0x4(%eax),%eax
   17099:	8b 55 0c             	mov    0xc(%ebp),%edx
   1709c:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   1709f:	8b 45 08             	mov    0x8(%ebp),%eax
   170a2:	8b 55 0c             	mov    0xc(%ebp),%edx
   170a5:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->size++;
   170a8:	8b 45 08             	mov    0x8(%ebp),%eax
   170ab:	8b 40 08             	mov    0x8(%eax),%eax
   170ae:	8d 50 01             	lea    0x1(%eax),%edx
   170b1:	8b 45 08             	mov    0x8(%ebp),%eax
   170b4:	89 50 08             	mov    %edx,0x8(%eax)

}
   170b7:	90                   	nop
   170b8:	c9                   	leave  
   170b9:	c3                   	ret    

000170ba <list_remove_first>:

list_node_t* list_remove_first(list_t *list){
   170ba:	55                   	push   %ebp
   170bb:	89 e5                	mov    %esp,%ebp
   170bd:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   170c0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   170c4:	75 19                	jne    170df <list_remove_first+0x25>
   170c6:	68 8e 8a 01 00       	push   $0x18a8e
   170cb:	68 dc 8a 01 00       	push   $0x18adc
   170d0:	6a 34                	push   $0x34
   170d2:	68 58 8a 01 00       	push   $0x18a58
   170d7:	e8 26 f5 ff ff       	call   16602 <pannic>
   170dc:	83 c4 10             	add    $0x10,%esp

    if (list_is_empty(list)) {
   170df:	83 ec 0c             	sub    $0xc,%esp
   170e2:	ff 75 08             	push   0x8(%ebp)
   170e5:	e8 54 fe ff ff       	call   16f3e <list_is_empty>
   170ea:	83 c4 10             	add    $0x10,%esp
   170ed:	85 c0                	test   %eax,%eax
   170ef:	74 07                	je     170f8 <list_remove_first+0x3e>
        return (list_node_t*)0;
   170f1:	b8 00 00 00 00       	mov    $0x0,%eax
   170f6:	eb 71                	jmp    17169 <list_remove_first+0xaf>
    }

    list_node_t *ret = list->first;
   170f8:	8b 45 08             	mov    0x8(%ebp),%eax
   170fb:	8b 00                	mov    (%eax),%eax
   170fd:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   17100:	83 ec 0c             	sub    $0xc,%esp
   17103:	ff 75 08             	push   0x8(%ebp)
   17106:	e8 68 fe ff ff       	call   16f73 <list_get_size>
   1710b:	83 c4 10             	add    $0x10,%esp
   1710e:	83 f8 01             	cmp    $0x1,%eax
   17111:	75 17                	jne    1712a <list_remove_first+0x70>
        list->first = list->last = (list_node_t*)0;
   17113:	8b 45 08             	mov    0x8(%ebp),%eax
   17116:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1711d:	8b 45 08             	mov    0x8(%ebp),%eax
   17120:	8b 50 04             	mov    0x4(%eax),%edx
   17123:	8b 45 08             	mov    0x8(%ebp),%eax
   17126:	89 10                	mov    %edx,(%eax)
   17128:	eb 18                	jmp    17142 <list_remove_first+0x88>
    } else {
        list->first = list->first->next;
   1712a:	8b 45 08             	mov    0x8(%ebp),%eax
   1712d:	8b 00                	mov    (%eax),%eax
   1712f:	8b 50 04             	mov    0x4(%eax),%edx
   17132:	8b 45 08             	mov    0x8(%ebp),%eax
   17135:	89 10                	mov    %edx,(%eax)
        list->first->pre = (list_node_t*)0;
   17137:	8b 45 08             	mov    0x8(%ebp),%eax
   1713a:	8b 00                	mov    (%eax),%eax
   1713c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    list->size--;
   17142:	8b 45 08             	mov    0x8(%ebp),%eax
   17145:	8b 40 08             	mov    0x8(%eax),%eax
   17148:	8d 50 ff             	lea    -0x1(%eax),%edx
   1714b:	8b 45 08             	mov    0x8(%ebp),%eax
   1714e:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   17151:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17154:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1715b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1715e:	8b 50 04             	mov    0x4(%eax),%edx
   17161:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17164:	89 10                	mov    %edx,(%eax)
    return ret;
   17166:	8b 45 f4             	mov    -0xc(%ebp),%eax
 }
   17169:	c9                   	leave  
   1716a:	c3                   	ret    

0001716b <list_remove_last>:

list_node_t* list_remove_last(list_t *list) {
   1716b:	55                   	push   %ebp
   1716c:	89 e5                	mov    %esp,%ebp
   1716e:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   17171:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   17175:	75 19                	jne    17190 <list_remove_last+0x25>
   17177:	68 8e 8a 01 00       	push   $0x18a8e
   1717c:	68 00 8b 01 00       	push   $0x18b00
   17181:	6a 4a                	push   $0x4a
   17183:	68 58 8a 01 00       	push   $0x18a58
   17188:	e8 75 f4 ff ff       	call   16602 <pannic>
   1718d:	83 c4 10             	add    $0x10,%esp

     if (list_is_empty(list)) {
   17190:	83 ec 0c             	sub    $0xc,%esp
   17193:	ff 75 08             	push   0x8(%ebp)
   17196:	e8 a3 fd ff ff       	call   16f3e <list_is_empty>
   1719b:	83 c4 10             	add    $0x10,%esp
   1719e:	85 c0                	test   %eax,%eax
   171a0:	74 07                	je     171a9 <list_remove_last+0x3e>
        return (list_node_t*)0;
   171a2:	b8 00 00 00 00       	mov    $0x0,%eax
   171a7:	eb 75                	jmp    1721e <list_remove_last+0xb3>
    }

    list_node_t *ret = list->last;
   171a9:	8b 45 08             	mov    0x8(%ebp),%eax
   171ac:	8b 40 04             	mov    0x4(%eax),%eax
   171af:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   171b2:	83 ec 0c             	sub    $0xc,%esp
   171b5:	ff 75 08             	push   0x8(%ebp)
   171b8:	e8 b6 fd ff ff       	call   16f73 <list_get_size>
   171bd:	83 c4 10             	add    $0x10,%esp
   171c0:	83 f8 01             	cmp    $0x1,%eax
   171c3:	75 17                	jne    171dc <list_remove_last+0x71>
        list->first = list->last = (list_node_t*)0;
   171c5:	8b 45 08             	mov    0x8(%ebp),%eax
   171c8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   171cf:	8b 45 08             	mov    0x8(%ebp),%eax
   171d2:	8b 50 04             	mov    0x4(%eax),%edx
   171d5:	8b 45 08             	mov    0x8(%ebp),%eax
   171d8:	89 10                	mov    %edx,(%eax)
   171da:	eb 1b                	jmp    171f7 <list_remove_last+0x8c>
    } else {
        list->last = list->last->pre;
   171dc:	8b 45 08             	mov    0x8(%ebp),%eax
   171df:	8b 40 04             	mov    0x4(%eax),%eax
   171e2:	8b 10                	mov    (%eax),%edx
   171e4:	8b 45 08             	mov    0x8(%ebp),%eax
   171e7:	89 50 04             	mov    %edx,0x4(%eax)
        list->last->next = (list_node_t*)0;
   171ea:	8b 45 08             	mov    0x8(%ebp),%eax
   171ed:	8b 40 04             	mov    0x4(%eax),%eax
   171f0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    }

    list->size--;
   171f7:	8b 45 08             	mov    0x8(%ebp),%eax
   171fa:	8b 40 08             	mov    0x8(%eax),%eax
   171fd:	8d 50 ff             	lea    -0x1(%eax),%edx
   17200:	8b 45 08             	mov    0x8(%ebp),%eax
   17203:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   17206:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17209:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   17210:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17213:	8b 50 04             	mov    0x4(%eax),%edx
   17216:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17219:	89 10                	mov    %edx,(%eax)
    return ret;
   1721b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   1721e:	c9                   	leave  
   1721f:	c3                   	ret    

00017220 <list_remove>:

list_node_t* list_remove(list_t *list, list_node_t *node) {
   17220:	55                   	push   %ebp
   17221:	89 e5                	mov    %esp,%ebp
   17223:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   17226:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1722a:	74 06                	je     17232 <list_remove+0x12>
   1722c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   17230:	75 19                	jne    1724b <list_remove+0x2b>
   17232:	68 28 8a 01 00       	push   $0x18a28
   17237:	68 14 8b 01 00       	push   $0x18b14
   1723c:	6a 60                	push   $0x60
   1723e:	68 58 8a 01 00       	push   $0x18a58
   17243:	e8 ba f3 ff ff       	call   16602 <pannic>
   17248:	83 c4 10             	add    $0x10,%esp

    if (list_is_empty(list)) {
   1724b:	83 ec 0c             	sub    $0xc,%esp
   1724e:	ff 75 08             	push   0x8(%ebp)
   17251:	e8 e8 fc ff ff       	call   16f3e <list_is_empty>
   17256:	83 c4 10             	add    $0x10,%esp
   17259:	85 c0                	test   %eax,%eax
   1725b:	74 0a                	je     17267 <list_remove+0x47>
        return (list_node_t*)0;
   1725d:	b8 00 00 00 00       	mov    $0x0,%eax
   17262:	e9 80 00 00 00       	jmp    172e7 <list_remove+0xc7>
    }

    if (node == list->first) list->first = node->next;
   17267:	8b 45 08             	mov    0x8(%ebp),%eax
   1726a:	8b 00                	mov    (%eax),%eax
   1726c:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1726f:	75 0b                	jne    1727c <list_remove+0x5c>
   17271:	8b 45 0c             	mov    0xc(%ebp),%eax
   17274:	8b 50 04             	mov    0x4(%eax),%edx
   17277:	8b 45 08             	mov    0x8(%ebp),%eax
   1727a:	89 10                	mov    %edx,(%eax)
    if (node == list->last) list->last = node->pre;
   1727c:	8b 45 08             	mov    0x8(%ebp),%eax
   1727f:	8b 40 04             	mov    0x4(%eax),%eax
   17282:	39 45 0c             	cmp    %eax,0xc(%ebp)
   17285:	75 0b                	jne    17292 <list_remove+0x72>
   17287:	8b 45 0c             	mov    0xc(%ebp),%eax
   1728a:	8b 10                	mov    (%eax),%edx
   1728c:	8b 45 08             	mov    0x8(%ebp),%eax
   1728f:	89 50 04             	mov    %edx,0x4(%eax)

    if (node->pre) node->pre->next = node->next;
   17292:	8b 45 0c             	mov    0xc(%ebp),%eax
   17295:	8b 00                	mov    (%eax),%eax
   17297:	85 c0                	test   %eax,%eax
   17299:	74 0e                	je     172a9 <list_remove+0x89>
   1729b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1729e:	8b 00                	mov    (%eax),%eax
   172a0:	8b 55 0c             	mov    0xc(%ebp),%edx
   172a3:	8b 52 04             	mov    0x4(%edx),%edx
   172a6:	89 50 04             	mov    %edx,0x4(%eax)
    if (node->next) node->next->pre = node->pre;
   172a9:	8b 45 0c             	mov    0xc(%ebp),%eax
   172ac:	8b 40 04             	mov    0x4(%eax),%eax
   172af:	85 c0                	test   %eax,%eax
   172b1:	74 0d                	je     172c0 <list_remove+0xa0>
   172b3:	8b 45 0c             	mov    0xc(%ebp),%eax
   172b6:	8b 40 04             	mov    0x4(%eax),%eax
   172b9:	8b 55 0c             	mov    0xc(%ebp),%edx
   172bc:	8b 12                	mov    (%edx),%edx
   172be:	89 10                	mov    %edx,(%eax)

    node->pre = node->next = (list_node_t*)0;
   172c0:	8b 45 0c             	mov    0xc(%ebp),%eax
   172c3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   172ca:	8b 45 0c             	mov    0xc(%ebp),%eax
   172cd:	8b 50 04             	mov    0x4(%eax),%edx
   172d0:	8b 45 0c             	mov    0xc(%ebp),%eax
   172d3:	89 10                	mov    %edx,(%eax)
    list->size--;
   172d5:	8b 45 08             	mov    0x8(%ebp),%eax
   172d8:	8b 40 08             	mov    0x8(%eax),%eax
   172db:	8d 50 ff             	lea    -0x1(%eax),%edx
   172de:	8b 45 08             	mov    0x8(%ebp),%eax
   172e1:	89 50 08             	mov    %edx,0x8(%eax)

    return node;
   172e4:	8b 45 0c             	mov    0xc(%ebp),%eax
   172e7:	c9                   	leave  
   172e8:	c3                   	ret    

000172e9 <log_init>:

/**
 * @brief  初始化串行端口寄存器COM1
 * 
 */
void log_init(void) {
   172e9:	55                   	push   %ebp
   172ea:	89 e5                	mov    %esp,%ebp
   172ec:	83 ec 08             	sub    $0x8,%esp
    outb(COM1_PORT + 2, 0xc7);
    outb(COM1_PORT + 4, 0x0f);

#endif 
    //初始化互斥锁
    mutex_init(&mutex);
   172ef:	83 ec 0c             	sub    $0xc,%esp
   172f2:	68 c8 ea 06 00       	push   $0x6eac8
   172f7:	e8 ed eb ff ff       	call   15ee9 <mutex_init>
   172fc:	83 c4 10             	add    $0x10,%esp

    //打开一个tty设备用于日志打印
    log_dev_id = dev_open(DEV_TTY, 0, (void*)0);
   172ff:	83 ec 04             	sub    $0x4,%esp
   17302:	6a 00                	push   $0x0
   17304:	6a 00                	push   $0x0
   17306:	6a 01                	push   $0x1
   17308:	e8 64 cd ff ff       	call   14071 <dev_open>
   1730d:	83 c4 10             	add    $0x10,%esp
   17310:	a3 dc ea 06 00       	mov    %eax,0x6eadc
}
   17315:	90                   	nop
   17316:	c9                   	leave  
   17317:	c3                   	ret    

00017318 <log_printf>:
 * @brief  格式化输出到串口
 * 
 * @param formate 
 * @param ... 
 */
void log_printf(const char *formate, ...) {
   17318:	55                   	push   %ebp
   17319:	89 e5                	mov    %esp,%ebp
   1731b:	81 ec 98 00 00 00    	sub    $0x98,%esp
    //1.设置字符缓冲区
    char str_buf[128];
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   17321:	83 ec 04             	sub    $0x4,%esp
   17324:	68 80 00 00 00       	push   $0x80
   17329:	6a 00                	push   $0x0
   1732b:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   17331:	50                   	push   %eax
   17332:	e8 e4 f7 ff ff       	call   16b1b <kernel_memset>
   17337:	83 c4 10             	add    $0x10,%esp
    
    //2.获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   1733a:	8d 45 0c             	lea    0xc(%ebp),%eax
   1733d:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, formate, args);
   17343:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   17349:	83 ec 04             	sub    $0x4,%esp
   1734c:	50                   	push   %eax
   1734d:	ff 75 08             	push   0x8(%ebp)
   17350:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   17356:	50                   	push   %eax
   17357:	e8 a8 f8 ff ff       	call   16c04 <kernel_vsprintf>
   1735c:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    const char *p = str_buf;
   1735f:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   17365:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将以下资源放入临界资源包含区，防止在运行时发生进程切换（cpu关中断）
    mutex_lock(&mutex); //TODO:加锁
   17368:	83 ec 0c             	sub    $0xc,%esp
   1736b:	68 c8 ea 06 00       	push   $0x6eac8
   17370:	e8 c1 eb ff ff       	call   15f36 <mutex_lock>
   17375:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');

#else
    //console_write(0, str_buf, kernel_strlen(str_buf));
    //tty设备在显示器上写入时是根据当前光标位置来的，所以不需要传入addr参数
    dev_write(log_dev_id, 0, str_buf, kernel_strlen(str_buf));
   17378:	83 ec 0c             	sub    $0xc,%esp
   1737b:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   17381:	50                   	push   %eax
   17382:	e8 10 f7 ff ff       	call   16a97 <kernel_strlen>
   17387:	83 c4 10             	add    $0x10,%esp
   1738a:	8b 15 dc ea 06 00    	mov    0x6eadc,%edx
   17390:	50                   	push   %eax
   17391:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   17397:	50                   	push   %eax
   17398:	6a 00                	push   $0x0
   1739a:	52                   	push   %edx
   1739b:	e8 67 ce ff ff       	call   14207 <dev_write>
   173a0:	83 c4 10             	add    $0x10,%esp
    //console_write(0, &c, 1); 
#endif

    //执行完毕，将资源离开临界资源保护区，(cpu开中断)
    mutex_unlock(&mutex); //TODO:解锁
   173a3:	83 ec 0c             	sub    $0xc,%esp
   173a6:	68 c8 ea 06 00       	push   $0x6eac8
   173ab:	e8 17 ec ff ff       	call   15fc7 <mutex_unlock>
   173b0:	83 c4 10             	add    $0x10,%esp
   173b3:	90                   	nop
   173b4:	c9                   	leave  
   173b5:	c3                   	ret    

Disassembly of section .first_task:

80000000 <first_task_entry>:
//第一个任务进程入口函数
first_task_entry:
    //iret指令返回后，将之前压入的 ss,esp,eflags,cs,eip 寄存器值返回给对应寄存器，
	//由于cpu从0特权级切换到了3特权级，而之前其余的段寄存器都是0特权级，不能供3特权级使用，
	//所以cpu将其余寄存器置零，这里直接用ss寄存器再初始化其余段寄存器即可
	mov %ss, %ax
80000000:	66 8c d0             	mov    %ss,%ax
	mov %ax, %ds
80000003:	8e d8                	mov    %eax,%ds
	mov %ax, %es
80000005:	8e c0                	mov    %eax,%es
	mov %ax, %fs
80000007:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
80000009:	8e e8                	mov    %eax,%gs

    //因为cs寄存器已由操作系统分配，所以直接跳转即可
8000000b:	e9 00 00 00 00       	jmp    80000010 <first_main>

80000010 <first_main>:
#include "tools/log.h"
#include "core/task.h"
#include  "applib/lib_syscall.h"
#include "dev/tty.h"

int first_main(void) {
80000010:	55                   	push   %ebp
80000011:	89 e5                	mov    %esp,%ebp
80000013:	83 ec 28             	sub    $0x28,%esp
    // for (;;)
    // {
    // }

    //为每个tty设备创建一个进程
    for (int i = 0; i < 1; ++i) {
80000016:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
8000001d:	eb 7e                	jmp    8000009d <first_main+0x8d>
        int pid = fork();
8000001f:	e8 74 01 00 00       	call   80000198 <fork>
80000024:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pid < 0) {
80000027:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
8000002b:	79 14                	jns    80000041 <first_main+0x31>
            print_msg("create shell failed.", 0);
8000002d:	83 ec 08             	sub    $0x8,%esp
80000030:	6a 00                	push   $0x0
80000032:	68 bf 00 00 80       	push   $0x800000bf
80000037:	e8 34 01 00 00       	call   80000170 <print_msg>
8000003c:	83 c4 10             	add    $0x10,%esp
            break;
8000003f:	eb 66                	jmp    800000a7 <first_main+0x97>
        } else if (pid == 0) {
80000041:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80000045:	75 52                	jne    80000099 <first_main+0x89>
            char tty_num[] = "/dev/tty?";
80000047:	c7 45 e6 2f 64 65 76 	movl   $0x7665642f,-0x1a(%ebp)
8000004e:	c7 45 ea 2f 74 74 79 	movl   $0x7974742f,-0x16(%ebp)
80000055:	66 c7 45 ee 3f 00    	movw   $0x3f,-0x12(%ebp)
            tty_num[sizeof(tty_num) - 2] = i + '0';
8000005b:	8b 45 f4             	mov    -0xc(%ebp),%eax
8000005e:	83 c0 30             	add    $0x30,%eax
80000061:	88 45 ee             	mov    %al,-0x12(%ebp)
            char * const argv[] = {tty_num, 0};
80000064:	8d 45 e6             	lea    -0x1a(%ebp),%eax
80000067:	89 45 dc             	mov    %eax,-0x24(%ebp)
8000006a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
            execve("/shell.elf", argv, 0);
80000071:	83 ec 04             	sub    $0x4,%esp
80000074:	6a 00                	push   $0x0
80000076:	8d 45 dc             	lea    -0x24(%ebp),%eax
80000079:	50                   	push   %eax
8000007a:	68 d4 00 00 80       	push   $0x800000d4
8000007f:	e8 2f 01 00 00       	call   800001b3 <execve>
80000084:	83 c4 10             	add    $0x10,%esp
            while (1)   {
                msleep(1000);
80000087:	83 ec 0c             	sub    $0xc,%esp
8000008a:	68 e8 03 00 00       	push   $0x3e8
8000008f:	e8 97 00 00 00       	call   8000012b <msleep>
80000094:	83 c4 10             	add    $0x10,%esp
80000097:	eb ee                	jmp    80000087 <first_main+0x77>
    for (int i = 0; i < 1; ++i) {
80000099:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
8000009d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
800000a1:	0f 8e 78 ff ff ff    	jle    8000001f <first_main+0xf>
        }
    }    

    for (;;) {
        //回收所有孤儿进程
        int status = 0;
800000a7:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
        wait(&status);
800000ae:	83 ec 0c             	sub    $0xc,%esp
800000b1:	8d 45 d8             	lea    -0x28(%ebp),%eax
800000b4:	50                   	push   %eax
800000b5:	e8 bc 02 00 00       	call   80000376 <wait>
800000ba:	83 c4 10             	add    $0x10,%esp
    for (;;) {
800000bd:	eb e8                	jmp    800000a7 <first_main+0x97>
800000bf:	63 72 65             	arpl   %si,0x65(%edx)
800000c2:	61                   	popa   
800000c3:	74 65                	je     8000012a <sys_call+0x4b>
800000c5:	20 73 68             	and    %dh,0x68(%ebx)
800000c8:	65 6c                	gs insb (%dx),%es:(%edi)
800000ca:	6c                   	insb   (%dx),%es:(%edi)
800000cb:	20 66 61             	and    %ah,0x61(%esi)
800000ce:	69 6c 65 64 2e 00 2f 	imul   $0x732f002e,0x64(%ebp,%eiz,2),%ebp
800000d5:	73 
800000d6:	68 65 6c 6c 2e       	push   $0x2e6c6c65
800000db:	65 6c                	gs insb (%dx),%es:(%edi)
800000dd:	66                   	data16
	...

800000df <sys_call>:
#include    "cpu/syscall.h"
#include    "os_cfg.h"
#include    "lib_syscall.h"


int sys_call(syscall_args_t *args) {
800000df:	55                   	push   %ebp
800000e0:	89 e5                	mov    %esp,%ebp
800000e2:	57                   	push   %edi
800000e3:	56                   	push   %esi
800000e4:	53                   	push   %ebx
800000e5:	83 ec 10             	sub    $0x10,%esp
    // 传入远跳转需要的参数, 即cs = selector, eip = offset 
    //为调用门选择子赋予0特权级,调用门的 cpl 和 RPL <= 系统调用段描述符的DPL
    //门描述符中目标选择子的 CPL <= 门描述符的 DPL
    uint32_t addr[] = {0, SYSCALL_SELECTOR | 0};  
800000e8:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
800000ef:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%ebp)
        "push %[arg1]\n\t"
        "push %[arg0]\n\t"
        "push %[id]\n\t"
        "lcalll *(%[addr])\n\t"
        :"=a"(ret)
        :[arg3]"r"(args->arg3), 
800000f6:	8b 45 08             	mov    0x8(%ebp),%eax
800000f9:	8b 40 10             	mov    0x10(%eax),%eax
         [arg2]"r"(args->arg2), 
800000fc:	8b 55 08             	mov    0x8(%ebp),%edx
800000ff:	8b 52 0c             	mov    0xc(%edx),%edx
         [arg1]"r"(args->arg1),
80000102:	8b 4d 08             	mov    0x8(%ebp),%ecx
80000105:	8b 49 08             	mov    0x8(%ecx),%ecx
         [arg0]"r"(args->arg0), 
80000108:	8b 5d 08             	mov    0x8(%ebp),%ebx
8000010b:	8b 5b 04             	mov    0x4(%ebx),%ebx
         [id]"r"(args->id), 
8000010e:	8b 75 08             	mov    0x8(%ebp),%esi
80000111:	8b 36                	mov    (%esi),%esi
     __asm__ __volatile__(
80000113:	8d 7d e8             	lea    -0x18(%ebp),%edi
80000116:	50                   	push   %eax
80000117:	52                   	push   %edx
80000118:	51                   	push   %ecx
80000119:	53                   	push   %ebx
8000011a:	56                   	push   %esi
8000011b:	ff 1f                	lcall  *(%edi)
8000011d:	89 45 f0             	mov    %eax,-0x10(%ebp)
         [addr]"r"(addr)
    );

    return ret;
80000120:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
80000123:	83 c4 10             	add    $0x10,%esp
80000126:	5b                   	pop    %ebx
80000127:	5e                   	pop    %esi
80000128:	5f                   	pop    %edi
80000129:	5d                   	pop    %ebp
8000012a:	c3                   	ret    

8000012b <msleep>:
/**
 * @brief 以ms为单位进行延时
 * 
 * @param ms 
 */
void msleep(int ms) {
8000012b:	55                   	push   %ebp
8000012c:	89 e5                	mov    %esp,%ebp
8000012e:	83 ec 20             	sub    $0x20,%esp
    if (ms <= 0) return;
80000131:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
80000135:	7e 1b                	jle    80000152 <msleep+0x27>

    syscall_args_t args;
    args.id = SYS_sleep;
80000137:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    args.arg0 = ms;
8000013e:	8b 45 08             	mov    0x8(%ebp),%eax
80000141:	89 45 f0             	mov    %eax,-0x10(%ebp)

    sys_call(&args);
80000144:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000147:	50                   	push   %eax
80000148:	e8 92 ff ff ff       	call   800000df <sys_call>
8000014d:	83 c4 04             	add    $0x4,%esp
80000150:	eb 01                	jmp    80000153 <msleep+0x28>
    if (ms <= 0) return;
80000152:	90                   	nop

}
80000153:	c9                   	leave  
80000154:	c3                   	ret    

80000155 <getpid>:
/**
 * @brief 获取用户进程id
 * 
 * @return int 
 */
int getpid(void) {
80000155:	55                   	push   %ebp
80000156:	89 e5                	mov    %esp,%ebp
80000158:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_getpid;
8000015b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)

    return sys_call(&args);
80000162:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000165:	50                   	push   %eax
80000166:	e8 74 ff ff ff       	call   800000df <sys_call>
8000016b:	83 c4 04             	add    $0x4,%esp
}
8000016e:	c9                   	leave  
8000016f:	c3                   	ret    

80000170 <print_msg>:

void print_msg(const char *fmt, int arg) {
80000170:	55                   	push   %ebp
80000171:	89 e5                	mov    %esp,%ebp
80000173:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_printmsg;
80000176:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
    args.arg0 = (int)fmt;
8000017d:	8b 45 08             	mov    0x8(%ebp),%eax
80000180:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = arg;
80000183:	8b 45 0c             	mov    0xc(%ebp),%eax
80000186:	89 45 f4             	mov    %eax,-0xc(%ebp)

    sys_call(&args);
80000189:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000018c:	50                   	push   %eax
8000018d:	e8 4d ff ff ff       	call   800000df <sys_call>
80000192:	83 c4 04             	add    $0x4,%esp
}
80000195:	90                   	nop
80000196:	c9                   	leave  
80000197:	c3                   	ret    

80000198 <fork>:

int fork (void) {
80000198:	55                   	push   %ebp
80000199:	89 e5                	mov    %esp,%ebp
8000019b:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fork;
8000019e:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)

    return sys_call(&args);
800001a5:	8d 45 ec             	lea    -0x14(%ebp),%eax
800001a8:	50                   	push   %eax
800001a9:	e8 31 ff ff ff       	call   800000df <sys_call>
800001ae:	83 c4 04             	add    $0x4,%esp
}
800001b1:	c9                   	leave  
800001b2:	c3                   	ret    

800001b3 <execve>:
 * @param name 外部程序名
 * @param argv 外部程序的参数，字符串常量指针，即字符串数组，数组中的char*值为常量
 * @param env  所加载程序的环境变量
 * @return int 
 */
int execve(const char *name, char * const * argv, char * const * env) {
800001b3:	55                   	push   %ebp
800001b4:	89 e5                	mov    %esp,%ebp
800001b6:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_execve;
800001b9:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
    args.arg0 = (int)name;
800001c0:	8b 45 08             	mov    0x8(%ebp),%eax
800001c3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)argv;
800001c6:	8b 45 0c             	mov    0xc(%ebp),%eax
800001c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = (int)env;
800001cc:	8b 45 10             	mov    0x10(%ebp),%eax
800001cf:	89 45 f8             	mov    %eax,-0x8(%ebp)


    return sys_call(&args);
800001d2:	8d 45 ec             	lea    -0x14(%ebp),%eax
800001d5:	50                   	push   %eax
800001d6:	e8 04 ff ff ff       	call   800000df <sys_call>
800001db:	83 c4 04             	add    $0x4,%esp
}
800001de:	c9                   	leave  
800001df:	c3                   	ret    

800001e0 <yield>:
/**
 * @brief 进程主动放弃cpu
 * 
 * @return int 
 */
int yield (void) {
800001e0:	55                   	push   %ebp
800001e1:	89 e5                	mov    %esp,%ebp
800001e3:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_yield;
800001e6:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)

    return sys_call(&args);
800001ed:	8d 45 ec             	lea    -0x14(%ebp),%eax
800001f0:	50                   	push   %eax
800001f1:	e8 e9 fe ff ff       	call   800000df <sys_call>
800001f6:	83 c4 04             	add    $0x4,%esp
}
800001f9:	c9                   	leave  
800001fa:	c3                   	ret    

800001fb <open>:
 * @param name 
 * @param flags 
 * @param ... 
 * @return int 
 */
int open(const char *name, int flags, ...) {
800001fb:	55                   	push   %ebp
800001fc:	89 e5                	mov    %esp,%ebp
800001fe:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_open;
80000201:	c7 45 ec 32 00 00 00 	movl   $0x32,-0x14(%ebp)
    args.arg0 = (int)name;
80000208:	8b 45 08             	mov    0x8(%ebp),%eax
8000020b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = flags;
8000020e:	8b 45 0c             	mov    0xc(%ebp),%eax
80000211:	89 45 f4             	mov    %eax,-0xc(%ebp)

    return sys_call(&args);
80000214:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000217:	50                   	push   %eax
80000218:	e8 c2 fe ff ff       	call   800000df <sys_call>
8000021d:	83 c4 04             	add    $0x4,%esp
}
80000220:	c9                   	leave  
80000221:	c3                   	ret    

80000222 <read>:
 * @param file 
 * @param ptr 
 * @param len 
 * @return int 
 */
int read(int file, char *ptr, int len) {
80000222:	55                   	push   %ebp
80000223:	89 e5                	mov    %esp,%ebp
80000225:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_read;
80000228:	c7 45 ec 33 00 00 00 	movl   $0x33,-0x14(%ebp)
    args.arg0 = file;
8000022f:	8b 45 08             	mov    0x8(%ebp),%eax
80000232:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
80000235:	8b 45 0c             	mov    0xc(%ebp),%eax
80000238:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
8000023b:	8b 45 10             	mov    0x10(%ebp),%eax
8000023e:	89 45 f8             	mov    %eax,-0x8(%ebp)

    return sys_call(&args);
80000241:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000244:	50                   	push   %eax
80000245:	e8 95 fe ff ff       	call   800000df <sys_call>
8000024a:	83 c4 04             	add    $0x4,%esp
}
8000024d:	c9                   	leave  
8000024e:	c3                   	ret    

8000024f <write>:
 * @param file 
 * @param ptr 
 * @param len 
 * @return int 
 */
int write(int file, char *ptr, int len) {
8000024f:	55                   	push   %ebp
80000250:	89 e5                	mov    %esp,%ebp
80000252:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_write;
80000255:	c7 45 ec 34 00 00 00 	movl   $0x34,-0x14(%ebp)
    args.arg0 = file;
8000025c:	8b 45 08             	mov    0x8(%ebp),%eax
8000025f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
80000262:	8b 45 0c             	mov    0xc(%ebp),%eax
80000265:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
80000268:	8b 45 10             	mov    0x10(%ebp),%eax
8000026b:	89 45 f8             	mov    %eax,-0x8(%ebp)

    return sys_call(&args);
8000026e:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000271:	50                   	push   %eax
80000272:	e8 68 fe ff ff       	call   800000df <sys_call>
80000277:	83 c4 04             	add    $0x4,%esp
}
8000027a:	c9                   	leave  
8000027b:	c3                   	ret    

8000027c <close>:
 * @brief 关闭文件描述符
 * 
 * @param file 
 * @return int 
 */
int close(int file) {
8000027c:	55                   	push   %ebp
8000027d:	89 e5                	mov    %esp,%ebp
8000027f:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_close;
80000282:	c7 45 ec 35 00 00 00 	movl   $0x35,-0x14(%ebp)
    args.arg0 = file;
80000289:	8b 45 08             	mov    0x8(%ebp),%eax
8000028c:	89 45 f0             	mov    %eax,-0x10(%ebp)

    return sys_call(&args);
8000028f:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000292:	50                   	push   %eax
80000293:	e8 47 fe ff ff       	call   800000df <sys_call>
80000298:	83 c4 04             	add    $0x4,%esp
}
8000029b:	c9                   	leave  
8000029c:	c3                   	ret    

8000029d <lseek>:
 * @param file 
 * @param offset 
 * @param dir 
 * @return int 
 */
int lseek(int file, int offset, int dir) {
8000029d:	55                   	push   %ebp
8000029e:	89 e5                	mov    %esp,%ebp
800002a0:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_lseek;
800002a3:	c7 45 ec 36 00 00 00 	movl   $0x36,-0x14(%ebp)
    args.arg0 = file;
800002aa:	8b 45 08             	mov    0x8(%ebp),%eax
800002ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = offset;
800002b0:	8b 45 0c             	mov    0xc(%ebp),%eax
800002b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = dir;
800002b6:	8b 45 10             	mov    0x10(%ebp),%eax
800002b9:	89 45 f8             	mov    %eax,-0x8(%ebp)

    return sys_call(&args);
800002bc:	8d 45 ec             	lea    -0x14(%ebp),%eax
800002bf:	50                   	push   %eax
800002c0:	e8 1a fe ff ff       	call   800000df <sys_call>
800002c5:	83 c4 04             	add    $0x4,%esp
}
800002c8:	c9                   	leave  
800002c9:	c3                   	ret    

800002ca <isatty>:
 * @brief 
 * 
 * @param file 
 * @return int 
 */
int isatty(int file) {
800002ca:	55                   	push   %ebp
800002cb:	89 e5                	mov    %esp,%ebp
800002cd:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_isatty;
800002d0:	c7 45 ec 37 00 00 00 	movl   $0x37,-0x14(%ebp)
    args.arg0 = file;
800002d7:	8b 45 08             	mov    0x8(%ebp),%eax
800002da:	89 45 f0             	mov    %eax,-0x10(%ebp)

    return sys_call(&args);
800002dd:	8d 45 ec             	lea    -0x14(%ebp),%eax
800002e0:	50                   	push   %eax
800002e1:	e8 f9 fd ff ff       	call   800000df <sys_call>
800002e6:	83 c4 04             	add    $0x4,%esp
}
800002e9:	c9                   	leave  
800002ea:	c3                   	ret    

800002eb <fstat>:
 * 
 * @param file 
 * @param st 
 * @return int 
 */
int fstat(int file, struct stat *st) {
800002eb:	55                   	push   %ebp
800002ec:	89 e5                	mov    %esp,%ebp
800002ee:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fstat;
800002f1:	c7 45 ec 38 00 00 00 	movl   $0x38,-0x14(%ebp)
    args.arg0 = file;
800002f8:	8b 45 08             	mov    0x8(%ebp),%eax
800002fb:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)st;
800002fe:	8b 45 0c             	mov    0xc(%ebp),%eax
80000301:	89 45 f4             	mov    %eax,-0xc(%ebp)

    return sys_call(&args);
80000304:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000307:	50                   	push   %eax
80000308:	e8 d2 fd ff ff       	call   800000df <sys_call>
8000030d:	83 c4 04             	add    $0x4,%esp
}
80000310:	c9                   	leave  
80000311:	c3                   	ret    

80000312 <sbrk>:
 * @brief 
 * 
 * @param incr 
 * @return void* 
 */
char *sbrk(ptrdiff_t incr) {
80000312:	55                   	push   %ebp
80000313:	89 e5                	mov    %esp,%ebp
80000315:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_sbrk;
80000318:	c7 45 ec 39 00 00 00 	movl   $0x39,-0x14(%ebp)
    args.arg0 = (int)incr;
8000031f:	8b 45 08             	mov    0x8(%ebp),%eax
80000322:	89 45 f0             	mov    %eax,-0x10(%ebp)

    return (char*)sys_call(&args);
80000325:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000328:	50                   	push   %eax
80000329:	e8 b1 fd ff ff       	call   800000df <sys_call>
8000032e:	83 c4 04             	add    $0x4,%esp
}
80000331:	c9                   	leave  
80000332:	c3                   	ret    

80000333 <dup>:
 * @brief 在当前进程的打开文件表中分配新的一项指向该文件描述符对应的文件指针
 * 
 * @param file 需要被多次引用的文件指针的文件描述符
 * @return int 新的文件描述符
 */
int dup(int file) {
80000333:	55                   	push   %ebp
80000334:	89 e5                	mov    %esp,%ebp
80000336:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_dup;
80000339:	c7 45 ec 3a 00 00 00 	movl   $0x3a,-0x14(%ebp)
    args.arg0 = file;
80000340:	8b 45 08             	mov    0x8(%ebp),%eax
80000343:	89 45 f0             	mov    %eax,-0x10(%ebp)

    return sys_call(&args);
80000346:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000349:	50                   	push   %eax
8000034a:	e8 90 fd ff ff       	call   800000df <sys_call>
8000034f:	83 c4 04             	add    $0x4,%esp
}
80000352:	c9                   	leave  
80000353:	c3                   	ret    

80000354 <_exit>:
/**
 * @brief 进程退出的系统调用
 * 
 * @param status 
 */
void _exit(int status) {
80000354:	55                   	push   %ebp
80000355:	89 e5                	mov    %esp,%ebp
80000357:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_exit;
8000035a:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
    args.arg0 = status;
80000361:	8b 45 08             	mov    0x8(%ebp),%eax
80000364:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    sys_call(&args);
80000367:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000036a:	50                   	push   %eax
8000036b:	e8 6f fd ff ff       	call   800000df <sys_call>
80000370:	83 c4 04             	add    $0x4,%esp
}
80000373:	90                   	nop
80000374:	c9                   	leave  
80000375:	c3                   	ret    

80000376 <wait>:
 * @brief 回收进程资源
 * 
 * @param status 
 * @return int 
 */
int wait(int *status) {
80000376:	55                   	push   %ebp
80000377:	89 e5                	mov    %esp,%ebp
80000379:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_wait;
8000037c:	c7 45 ec 06 00 00 00 	movl   $0x6,-0x14(%ebp)
    args.arg0 = (int)status;
80000383:	8b 45 08             	mov    0x8(%ebp),%eax
80000386:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    return sys_call(&args);
80000389:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000038c:	50                   	push   %eax
8000038d:	e8 4d fd ff ff       	call   800000df <sys_call>
80000392:	83 c4 04             	add    $0x4,%esp
80000395:	c9                   	leave  
80000396:	c3                   	ret    
