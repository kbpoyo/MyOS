
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf:     file format elf32-i386
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x000049f0 memsz 0x000049f0 flags r-x
    LOAD off    0x00006000 vaddr 0x00015000 paddr 0x00015000 align 2**12
         filesz 0x00000044 memsz 0x0001da20 flags rw-
    LOAD off    0x00007000 vaddr 0x80000000 paddr 0x00033000 align 2**12
         filesz 0x00000124 memsz 0x00000124 flags rwx
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003ad1  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000f10  00013ae0  00013ae0  00004ae0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000044  00015000  00015000  00006000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0001ca20  00016000  00016000  00006044  2**12
                  ALLOC
  4 .first_task   00000124  80000000  00033000  00007000  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  5 .debug_line   000020d6  00000000  00000000  00007124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_line_str 00000780  00000000  00000000  000091fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   00005f6f  00000000  00000000  0000997a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00001cf0  00000000  00000000  0000f8e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_aranges 00000260  00000000  00000000  000115e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    00001355  00000000  00000000  00011840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .comment      0000002b  00000000  00000000  00012b95  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00001678  00000000  00000000  00012bc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010012 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
000102c7 l     F .text	0000000d down2
000102d4 l     F .text	00000017 up2
000102eb l     F .text	0000000c write_cr3
000102f7 l     F .text	0000000b pde_index
00010302 l     F .text	00000010 pte_index
00010312 l     F .text	00000027 pde_to_pt_addr
00010339 l     F .text	00000027 pte_to_pg_addr
00010360 l     F .text	00000011 mmu_set_page_dir
00016000 l     O .bss	00000028 paddr_alloc
00017000 l     O .bss	00001000 kernel_page_dir
00010371 l     F .text	0000005d addr_alloc_init
000103ce l     F .text	00000067 addr_alloc_page
00010435 l     F .text	00000061 addr_free_page
00010496 l     F .text	00000066 show_mem_info
000104fc l     F .text	00000037 total_mem_size
00013c28 l     O .rodata	00000011 __func__.3
00015000 l     O .data	00000040 kernal_map.2
00013c3c l     O .rodata	0000000c __func__.1
000109a6 l     F .text	00000010 curr_page_dir
00013c48 l     O .rodata	00000011 __func__.0
00000000 l    df *ABS*	00000000 task.c
00010a4f l     F .text	0000003d list_node_init
00013d48 l     O .rodata	0000000f __func__.10
00010a8c l     F .text	0000002d list_node_next
00013db8 l     O .rodata	0000000f __func__.3
00010ab9 l     F .text	00000047 list_init
00013d58 l     O .rodata	0000000a __func__.9
00010b00 l     F .text	00000035 list_is_empty
00013dc8 l     O .rodata	0000000e __func__.2
00010b35 l     F .text	0000002d list_get_size
00013da8 l     O .rodata	0000000e __func__.4
00010b62 l     F .text	0000002c list_get_first
00013d98 l     O .rodata	0000000f __func__.5
00010b8e l     F .text	00000017 up2
00010ba5 l     F .text	00000007 hlt
00010bac l     F .text	0000000c write_cr3
00010bb8 l     F .text	0000001a far_jump
00010bd2 l     F .text	00000017 write_tr
00010be9 l     F .text	00000011 mmu_set_page_dir
00018000 l     O .bss	000001a8 task_manager
000181c0 l     O .bss	00005e00 task_table
0001dfc0 l     O .bss	00000014 task_table_lock
00010bfa l     F .text	0000001f switch_to_tss
00010c34 l     F .text	00000172 tss_init
00013d3c l     O .rodata	0000000a __func__.11
0001dfe0 l     O .bss	00000200 empty_task_stack
00010f3e l     F .text	0000000a empty_task
00013d64 l     O .rodata	00000010 __func__.8
00013d74 l     O .rodata	0000000f __func__.7
00013d84 l     O .rodata	00000011 __func__.6
00013dd8 l     O .rodata	0000000f __func__.1
00013de8 l     O .rodata	00000010 __func__.0
00011474 l     F .text	00000068 alloc_task
000114dc l     F .text	00000033 free_task
00000000 l    df *ABS*	00000000 gate.c
00000000 l    df *ABS*	00000000 gdt.c
00011729 l     F .text	00000028 lgdt
0001e1e0 l     O .bss	00010000 gdt_table
0002e1e0 l     O .bss	00002000 is_alloc
000301e0 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 idt.c
0001195f l     F .text	00000007 cli
00011966 l     F .text	00000007 sti
0001196d l     F .text	00000007 hlt
00011974 l     F .text	0000001d inb
00011991 l     F .text	00000021 outb
000119b2 l     F .text	00000028 lidt
000119da l     F .text	00000011 read_cr2
000119eb l     F .text	00000010 read_eflags
000119fb l     F .text	0000000b write_eflags
00030200 l     O .bss	00000800 idt_table
00011a06 l     F .text	0000010f print_exception_fram
00011b15 l     F .text	0000003e do_default_handler
00011f2b l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 mmu.c
00000000 l    df *ABS*	00000000 syscall.c
000143c0 l     O .rodata	0000002c sys_table
00000000 l    df *ABS*	00000000 time.c
000123c0 l     F .text	00000021 outb
00030a00 l     O .bss	00000004 sys_tick
00012409 l     F .text	00000062 init_pit
00000000 l    df *ABS*	00000000 init.c
000144ac l     O .rodata	0000000c __func__.1
000144b8 l     O .rodata	00000013 __func__.0
00000000 l    df *ABS*	00000000 mutex.c
00012577 l     F .text	00000047 list_init
00014578 l     O .rodata	0000000a __func__.1
000125be l     F .text	00000035 list_is_empty
00014584 l     O .rodata	0000000e __func__.0
0001456c l     O .rodata	0000000b __func__.2
00000000 l    df *ABS*	00000000 sem.c
00012789 l     F .text	00000047 list_init
00014638 l     O .rodata	0000000a __func__.1
000127d0 l     F .text	00000035 list_is_empty
00014644 l     O .rodata	0000000e __func__.0
0001462c l     O .rodata	00000009 __func__.2
00000000 l    df *ABS*	00000000 test.c
00012959 l     F .text	00000047 list_init
00014758 l     O .rodata	0000000a __func__.3
000129a0 l     F .text	0000002d list_get_size
00014764 l     O .rodata	0000000e __func__.2
000129cd l     F .text	0000002c list_get_first
00014784 l     O .rodata	0000000f __func__.0
000129f9 l     F .text	0000002d list_get_last
00014774 l     O .rodata	0000000e __func__.1
00000000 l    df *ABS*	00000000 assert.c
00012d01 l     F .text	00000007 hlt
00000000 l    df *ABS*	00000000 bitmap.c
00014854 l     O .rodata	0000000c __func__.3
00014860 l     O .rodata	0000000f __func__.2
00014870 l     O .rodata	0000000f __func__.1
00014880 l     O .rodata	00000013 __func__.0
00000000 l    df *ABS*	00000000 klib.c
00015040 l     O .data	00000004 num_to_char.0
00000000 l    df *ABS*	00000000 list.c
00013566 l     F .text	00000035 list_is_empty
00014988 l     O .rodata	0000000e __func__.5
0001359b l     F .text	0000002d list_get_size
000149c0 l     O .rodata	0000000e __func__.2
00014974 l     O .rodata	00000012 __func__.6
00014998 l     O .rodata	00000011 __func__.4
000149ac l     O .rodata	00000012 __func__.3
000149d0 l     O .rodata	00000011 __func__.1
000149e4 l     O .rodata	0000000c __func__.0
00000000 l    df *ABS*	00000000 log.c
00013911 l     F .text	0000001d inb
0001392e l     F .text	00000021 outb
00030a04 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 first_task.c
80000010 l     F .first_task	0000004c sys_call
8000005c l     F .first_task	0000002a msleep
80000086 l     F .first_task	0000001b getpid
800000a1 l     F .first_task	00000028 print_msg
800000c9 l     F .first_task	0000001b fork
00012de8 g     F .text	00000078 bitmap_get_bit
000131bb g     F .text	0000004f kernel_memcpy
00012173 g     F .text	00000098 idt_enable
000111ef g     F .text	0000000a task_current
00013653 g     F .text	0000008f list_insert_last
00011261 g     F .text	00000061 sys_yield
00011c87 g     F .text	0000001c do_handler_segment_not_present
0001112b g     F .text	0000004b task_set_ready
00012f68 g     F .text	00000021 bitmap_is_set
000122aa g     F .text	0000000b idt_enable_global
0001320a g     F .text	00000041 kernel_memset
00010081 g       .text	00000000 exception_handler_nmi
00010243 g       .text	00000000 exception_handler_virtual_exception
00012331 g     F .text	0000008f do_handler_syscall
0001394f g     F .text	00000088 log_init
0001157c g     F .text	00000166 sys_fork
0001253a g     F .text	0000003d init_main
000101ee g       .text	00000000 exception_handler_alignment_check
00012317 g     F .text	0000001a sys_print_msg
00013084 g     F .text	00000047 kernel_strcpy
0001229f g     F .text	0000000b idt_disable_global
00015000 g       .data	00000000 s_data
800000e4 g     F .first_task	00000035 first_main
00011ee8 g     F .text	00000043 idt_install
0001002a g       .text	00000000 exception_handler_unknown
0001009e g       .text	00000000 exception_handler_breakpoint
00011bdf g     F .text	0000001c do_handler_overflow
00011e5c g     F .text	0000001c do_handler_alignment_check
0001019b g       .text	00000000 exception_handler_general_protection
00011cbf g     F .text	000000b1 do_handler_general_protection
00011ecc g     F .text	0000001c do_handler_control_exception
00012930 g     F .text	00000029 sem_count
00011b6f g     F .text	0000001c do_handler_divider
00012e60 g     F .text	00000108 bitmap_set_bit
00011c4f g     F .text	0000001c do_handler_double_fault
00011d70 g     F .text	000000d0 do_handler_page_fault
0001012f g       .text	00000000 exception_handler_double_fault
000122b5 g     F .text	00000039 pic_send_eoi
00013793 g     F .text	000000b5 list_remove_last
00011121 g     F .text	0000000a task_first_task
00010000 g       .text	00000000 s_text
00012848 g     F .text	0000006b sem_wait
00010964 g     F .text	00000022 memory_alloc_page_for
00010180 g       .text	00000000 exception_handler_stack_segment_fault
80000000 g       .first_task	00000000 first_task_entry
00011810 g     F .text	000000b3 gdt_init
00011eb0 g     F .text	0000001c do_handler_virtual_exception
000100bb g       .text	00000000 exception_handler_overflow
00010298 g       .text	00000000 simple_switch
0001027b g       .text	00000000 exception_handler_time
00011b8b g     F .text	0000001c do_handler_debug
00030a20 g     O .bss	00002000 stack
0001150f g     F .text	00000060 sys_sleep
000109b6 g     F .text	00000099 memory_free_page
00012a26 g     F .text	000002db list_test
00010260 g       .text	00000000 exception_handler_control_exception
00033000 g       *ABS*	00000000 s_first_task
00010ebe g     F .text	00000080 task_uninit
000108ac g     F .text	000000b8 memory_alloc_for_page_dir
000100d8 g       .text	00000000 exception_handler_bound_range
00011fbe g     F .text	000001b5 idt_init
000128b3 g     F .text	0000007d sem_notify
00011938 g     F .text	00000027 gdt_free
00011c17 g     F .text	0000001c do_handler_invalid_opcode
0001014a g       .text	00000000 exception_handler_invalid_tss
00011e40 g     F .text	0000001c do_handler_fpu_error
0001103f g     F .text	000000e2 task_first_init
00011e78 g     F .text	0000001c do_handler_machine_check
000135c8 g     F .text	0000008b list_insert_first
00011429 g     F .text	0000004b task_set_wakeup
000111c1 g     F .text	0000002e task_ready_first
00010047 g       .text	00000000 exception_handler_divider
00010722 g     F .text	00000085 memory_creat_uvm
000130cb g     F .text	00000051 kernel_strncpy
00033124 g       *ABS*	00000000 mem_free_start
00012483 g     F .text	00000053 kernel_init
00012805 g     F .text	00000043 sem_init
00010000 g       .text	00000000 _start
000132f3 g     F .text	0000019d kernel_vsprintf
00010112 g       .text	00000000 exception_handler_device_unavailable
000100f5 g       .text	00000000 exception_handler_invalid_opcode
00033000 g       .first_task	00000000 e_data
00012640 g     F .text	00000091 mutex_lock
00010209 g       .text	00000000 exception_handler_machine_check
00011c6b g     F .text	0000001c do_handler_invalid_tss
0001220b g     F .text	00000094 idt_disable
00033124 g       *ABS*	00000000 e_first_task
000113cd g     F .text	0000005c task_set_sleep
000105e3 g     F .text	0000009b memory_creat_map
00011ba7 g     F .text	0000001c do_handler_nmi
000125f3 g     F .text	0000004d mutex_init
00010226 g       .text	00000000 exception_handler_smd_exception
000107ad g     F .text	00000006 memory_destroy_uvm
00012d3e g     F .text	00000016 bitmap_byte_count
00011c33 g     F .text	0000001c do_handler_device_unavailable
000122ee g     F .text	00000018 idt_enter_protection
0001067e g     F .text	000000a4 create_kernal_table
000112c2 g     F .text	0000010b task_slice_end
000107a7 g     F .text	00000006 memory_copy_uvm
000124d6 g     F .text	00000064 move_to_first_task
0001324b g     F .text	00000084 kernel_memcmp
00011e94 g     F .text	0000001c do_handler_smd_exception
000101b6 g       .text	00000000 exception_handler_page_fault
00011b53 g     F .text	0000001c do_handler_unknown
00010986 g     F .text	00000020 memory_alloc_page
000101d1 g       .text	00000000 exception_handler_fpu_error
00010c19 g     F .text	0000001b task_switch_from_to
000126d1 g     F .text	000000b8 mutex_unlock
000111f9 g     F .text	00000068 task_switch
00013186 g     F .text	00000035 kernel_strlen
00011176 g     F .text	0000004b task_set_unready
00010064 g       .text	00000000 exception_handler_debug
00011751 g     F .text	000000bf segment_desc_set
00011bfb g     F .text	0000001c do_handler_bound_range
000102ad g       .text	00000000 exception_handler_syscall
000136e2 g     F .text	000000b1 list_remove_first
000149f0 g       .rodata	00000000 e_text
0001311c g     F .text	0000006a kernel_strncmp
00012d54 g     F .text	00000094 bitmap_init
00010165 g       .text	00000000 exception_handler_segment_not_present
00012f89 g     F .text	000000fb bitmap_alloc_nbits
00010f48 g     F .text	000000f7 task_manager_init
000107b3 g     F .text	000000f9 memory_init
00012d08 g     F .text	00000036 pannic
00011ca3 g     F .text	0000001c do_handler_stack_segment_fault
00011bc3 g     F .text	0000001c do_handler_breakpoint
000139d7 g     F .text	000000fa log_printf
00010da6 g     F .text	00000118 task_init
000132cf g     F .text	00000024 kernel_sprintf
0001156f g     F .text	0000000d sys_getpid
000118c3 g     F .text	00000075 gdt_alloc_desc
00013490 g     F .text	000000d6 kernel_itoa
00013848 g     F .text	000000c9 list_remove
000116e2 g     F .text	00000047 gate_desc_set
00012306 g     F .text	00000011 idt_leave_protection
00010533 g     F .text	000000b0 find_pte
000123e1 g     F .text	00000028 do_handler_time
0001246b g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
*            [&boot_info]
*    esp ->  [返回地址]
*   所以要想访问到&boot_info，则只需从当前esp的位置偏移+4字节即可
*/
_start:
    mov %esp, %ebp      //栈空间最好只用ebp来进行偏移访问
   10000:	89 e5                	mov    %esp,%ebp
    mov 0x4(%ebp), %eax //将&boot_info的值存入eax中
   10002:	8b 45 04             	mov    0x4(%ebp),%eax

    push %eax           //外部函数将参数压入栈中，再进行函数调用
   10005:	50                   	push   %eax
    call kernel_init    //调用内核初始化函数
   10006:	e8 78 24 00 00       	call   12483 <kernel_init>

    //完成内核初始化后，进行直接跳转，以替换cs寄存器中临时的内核代码段的选择子为此时内存中真正的内核代码段选择子
    //cs:KERNEL_SELECTOR_CS, ip:gdt_reload
    jmp $KERNEL_SELECTOR_CS, $gdt_reload    
   1000b:	ea 12 00 01 00 08 00 	ljmp   $0x8,$0x10012

00010012 <gdt_reload>:

gdt_reload:
    //替换其他段寄存器中临时的内核数据段的选择子为此时内存中真正的内核数据段的选择子
    mov $KERNEL_SELECTOR_DS, %ax
   10012:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10016:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10018:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001a:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001c:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001e:	8e e8                	mov    %eax,%gs

    //重新指定栈空间位置，不再使用0~0x7c00这部分空间
    //stack段已在下面预留了KERNEL_STACK_SIZE的空间大小，直接将最高地址赋值给esp，esp便可使用这片空间
    mov $(stack + KERNEL_STACK_SIZE), %esp
   10020:	bc 20 2a 03 00       	mov    $0x32a20,%esp

    //继续初始化内核
    //TODO:后序再来说明该函数的作用
    jmp init_main 
   10025:	e9 10 25 00 00       	jmp    1253a <init_main>

0001002a <exception_handler_unknown>:
//宏结束标志
.endm

//使用定义的异常宏 ,以下都是不可屏蔽中断，cpu必须处理该中断请求。
//                |异常类型|       |IDT索引| |错误码|
exception_handler unknown,              -1, 0    //未知异常
   1002a:	6a 00                	push   $0x0
   1002c:	6a ff                	push   $0xffffffff
   1002e:	60                   	pusha  
   1002f:	1e                   	push   %ds
   10030:	06                   	push   %es
   10031:	0f a0                	push   %fs
   10033:	0f a8                	push   %gs
   10035:	54                   	push   %esp
   10036:	e8 18 1b 00 00       	call   11b53 <do_handler_unknown>
   1003b:	5c                   	pop    %esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider,              0,  0    //除0异常
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 17 1b 00 00       	call   11b6f <do_handler_divider>
   10058:	5c                   	pop    %esp
   10059:	0f a9                	pop    %gs
   1005b:	0f a1                	pop    %fs
   1005d:	07                   	pop    %es
   1005e:	1f                   	pop    %ds
   1005f:	61                   	popa   
   10060:	83 c4 08             	add    $0x8,%esp
   10063:	cf                   	iret   

00010064 <exception_handler_debug>:
exception_handler debug,                1,  0    //debug异常
   10064:	6a 00                	push   $0x0
   10066:	6a 01                	push   $0x1
   10068:	60                   	pusha  
   10069:	1e                   	push   %ds
   1006a:	06                   	push   %es
   1006b:	0f a0                	push   %fs
   1006d:	0f a8                	push   %gs
   1006f:	54                   	push   %esp
   10070:	e8 16 1b 00 00       	call   11b8b <do_handler_debug>
   10075:	5c                   	pop    %esp
   10076:	0f a9                	pop    %gs
   10078:	0f a1                	pop    %fs
   1007a:	07                   	pop    %es
   1007b:	1f                   	pop    %ds
   1007c:	61                   	popa   
   1007d:	83 c4 08             	add    $0x8,%esp
   10080:	cf                   	iret   

00010081 <exception_handler_nmi>:
exception_handler nmi,                  2,  0
   10081:	6a 00                	push   $0x0
   10083:	6a 02                	push   $0x2
   10085:	60                   	pusha  
   10086:	1e                   	push   %ds
   10087:	06                   	push   %es
   10088:	0f a0                	push   %fs
   1008a:	0f a8                	push   %gs
   1008c:	54                   	push   %esp
   1008d:	e8 15 1b 00 00       	call   11ba7 <do_handler_nmi>
   10092:	5c                   	pop    %esp
   10093:	0f a9                	pop    %gs
   10095:	0f a1                	pop    %fs
   10097:	07                   	pop    %es
   10098:	1f                   	pop    %ds
   10099:	61                   	popa   
   1009a:	83 c4 08             	add    $0x8,%esp
   1009d:	cf                   	iret   

0001009e <exception_handler_breakpoint>:
exception_handler breakpoint,           3,  0
   1009e:	6a 00                	push   $0x0
   100a0:	6a 03                	push   $0x3
   100a2:	60                   	pusha  
   100a3:	1e                   	push   %ds
   100a4:	06                   	push   %es
   100a5:	0f a0                	push   %fs
   100a7:	0f a8                	push   %gs
   100a9:	54                   	push   %esp
   100aa:	e8 14 1b 00 00       	call   11bc3 <do_handler_breakpoint>
   100af:	5c                   	pop    %esp
   100b0:	0f a9                	pop    %gs
   100b2:	0f a1                	pop    %fs
   100b4:	07                   	pop    %es
   100b5:	1f                   	pop    %ds
   100b6:	61                   	popa   
   100b7:	83 c4 08             	add    $0x8,%esp
   100ba:	cf                   	iret   

000100bb <exception_handler_overflow>:
exception_handler overflow,             4,  0
   100bb:	6a 00                	push   $0x0
   100bd:	6a 04                	push   $0x4
   100bf:	60                   	pusha  
   100c0:	1e                   	push   %ds
   100c1:	06                   	push   %es
   100c2:	0f a0                	push   %fs
   100c4:	0f a8                	push   %gs
   100c6:	54                   	push   %esp
   100c7:	e8 13 1b 00 00       	call   11bdf <do_handler_overflow>
   100cc:	5c                   	pop    %esp
   100cd:	0f a9                	pop    %gs
   100cf:	0f a1                	pop    %fs
   100d1:	07                   	pop    %es
   100d2:	1f                   	pop    %ds
   100d3:	61                   	popa   
   100d4:	83 c4 08             	add    $0x8,%esp
   100d7:	cf                   	iret   

000100d8 <exception_handler_bound_range>:
exception_handler bound_range,          5,  0
   100d8:	6a 00                	push   $0x0
   100da:	6a 05                	push   $0x5
   100dc:	60                   	pusha  
   100dd:	1e                   	push   %ds
   100de:	06                   	push   %es
   100df:	0f a0                	push   %fs
   100e1:	0f a8                	push   %gs
   100e3:	54                   	push   %esp
   100e4:	e8 12 1b 00 00       	call   11bfb <do_handler_bound_range>
   100e9:	5c                   	pop    %esp
   100ea:	0f a9                	pop    %gs
   100ec:	0f a1                	pop    %fs
   100ee:	07                   	pop    %es
   100ef:	1f                   	pop    %ds
   100f0:	61                   	popa   
   100f1:	83 c4 08             	add    $0x8,%esp
   100f4:	cf                   	iret   

000100f5 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode,       6,  0
   100f5:	6a 00                	push   $0x0
   100f7:	6a 06                	push   $0x6
   100f9:	60                   	pusha  
   100fa:	1e                   	push   %ds
   100fb:	06                   	push   %es
   100fc:	0f a0                	push   %fs
   100fe:	0f a8                	push   %gs
   10100:	54                   	push   %esp
   10101:	e8 11 1b 00 00       	call   11c17 <do_handler_invalid_opcode>
   10106:	5c                   	pop    %esp
   10107:	0f a9                	pop    %gs
   10109:	0f a1                	pop    %fs
   1010b:	07                   	pop    %es
   1010c:	1f                   	pop    %ds
   1010d:	61                   	popa   
   1010e:	83 c4 08             	add    $0x8,%esp
   10111:	cf                   	iret   

00010112 <exception_handler_device_unavailable>:
exception_handler device_unavailable,   7,  0
   10112:	6a 00                	push   $0x0
   10114:	6a 07                	push   $0x7
   10116:	60                   	pusha  
   10117:	1e                   	push   %ds
   10118:	06                   	push   %es
   10119:	0f a0                	push   %fs
   1011b:	0f a8                	push   %gs
   1011d:	54                   	push   %esp
   1011e:	e8 10 1b 00 00       	call   11c33 <do_handler_device_unavailable>
   10123:	5c                   	pop    %esp
   10124:	0f a9                	pop    %gs
   10126:	0f a1                	pop    %fs
   10128:	07                   	pop    %es
   10129:	1f                   	pop    %ds
   1012a:	61                   	popa   
   1012b:	83 c4 08             	add    $0x8,%esp
   1012e:	cf                   	iret   

0001012f <exception_handler_double_fault>:
exception_handler double_fault,         8,  1
   1012f:	6a 08                	push   $0x8
   10131:	60                   	pusha  
   10132:	1e                   	push   %ds
   10133:	06                   	push   %es
   10134:	0f a0                	push   %fs
   10136:	0f a8                	push   %gs
   10138:	54                   	push   %esp
   10139:	e8 11 1b 00 00       	call   11c4f <do_handler_double_fault>
   1013e:	5c                   	pop    %esp
   1013f:	0f a9                	pop    %gs
   10141:	0f a1                	pop    %fs
   10143:	07                   	pop    %es
   10144:	1f                   	pop    %ds
   10145:	61                   	popa   
   10146:	83 c4 08             	add    $0x8,%esp
   10149:	cf                   	iret   

0001014a <exception_handler_invalid_tss>:
exception_handler invalid_tss,          10, 1
   1014a:	6a 0a                	push   $0xa
   1014c:	60                   	pusha  
   1014d:	1e                   	push   %ds
   1014e:	06                   	push   %es
   1014f:	0f a0                	push   %fs
   10151:	0f a8                	push   %gs
   10153:	54                   	push   %esp
   10154:	e8 12 1b 00 00       	call   11c6b <do_handler_invalid_tss>
   10159:	5c                   	pop    %esp
   1015a:	0f a9                	pop    %gs
   1015c:	0f a1                	pop    %fs
   1015e:	07                   	pop    %es
   1015f:	1f                   	pop    %ds
   10160:	61                   	popa   
   10161:	83 c4 08             	add    $0x8,%esp
   10164:	cf                   	iret   

00010165 <exception_handler_segment_not_present>:
exception_handler segment_not_present,  11, 1
   10165:	6a 0b                	push   $0xb
   10167:	60                   	pusha  
   10168:	1e                   	push   %ds
   10169:	06                   	push   %es
   1016a:	0f a0                	push   %fs
   1016c:	0f a8                	push   %gs
   1016e:	54                   	push   %esp
   1016f:	e8 13 1b 00 00       	call   11c87 <do_handler_segment_not_present>
   10174:	5c                   	pop    %esp
   10175:	0f a9                	pop    %gs
   10177:	0f a1                	pop    %fs
   10179:	07                   	pop    %es
   1017a:	1f                   	pop    %ds
   1017b:	61                   	popa   
   1017c:	83 c4 08             	add    $0x8,%esp
   1017f:	cf                   	iret   

00010180 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,  12, 1
   10180:	6a 0c                	push   $0xc
   10182:	60                   	pusha  
   10183:	1e                   	push   %ds
   10184:	06                   	push   %es
   10185:	0f a0                	push   %fs
   10187:	0f a8                	push   %gs
   10189:	54                   	push   %esp
   1018a:	e8 14 1b 00 00       	call   11ca3 <do_handler_stack_segment_fault>
   1018f:	5c                   	pop    %esp
   10190:	0f a9                	pop    %gs
   10192:	0f a1                	pop    %fs
   10194:	07                   	pop    %es
   10195:	1f                   	pop    %ds
   10196:	61                   	popa   
   10197:	83 c4 08             	add    $0x8,%esp
   1019a:	cf                   	iret   

0001019b <exception_handler_general_protection>:
exception_handler general_protection,   13, 1
   1019b:	6a 0d                	push   $0xd
   1019d:	60                   	pusha  
   1019e:	1e                   	push   %ds
   1019f:	06                   	push   %es
   101a0:	0f a0                	push   %fs
   101a2:	0f a8                	push   %gs
   101a4:	54                   	push   %esp
   101a5:	e8 15 1b 00 00       	call   11cbf <do_handler_general_protection>
   101aa:	5c                   	pop    %esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa   
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret   

000101b6 <exception_handler_page_fault>:
exception_handler page_fault,           14, 1
   101b6:	6a 0e                	push   $0xe
   101b8:	60                   	pusha  
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 ab 1b 00 00       	call   11d70 <do_handler_page_fault>
   101c5:	5c                   	pop    %esp
   101c6:	0f a9                	pop    %gs
   101c8:	0f a1                	pop    %fs
   101ca:	07                   	pop    %es
   101cb:	1f                   	pop    %ds
   101cc:	61                   	popa   
   101cd:	83 c4 08             	add    $0x8,%esp
   101d0:	cf                   	iret   

000101d1 <exception_handler_fpu_error>:
exception_handler fpu_error,            16, 0
   101d1:	6a 00                	push   $0x0
   101d3:	6a 10                	push   $0x10
   101d5:	60                   	pusha  
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 5e 1c 00 00       	call   11e40 <do_handler_fpu_error>
   101e2:	5c                   	pop    %esp
   101e3:	0f a9                	pop    %gs
   101e5:	0f a1                	pop    %fs
   101e7:	07                   	pop    %es
   101e8:	1f                   	pop    %ds
   101e9:	61                   	popa   
   101ea:	83 c4 08             	add    $0x8,%esp
   101ed:	cf                   	iret   

000101ee <exception_handler_alignment_check>:
exception_handler alignment_check,      17, 1
   101ee:	6a 11                	push   $0x11
   101f0:	60                   	pusha  
   101f1:	1e                   	push   %ds
   101f2:	06                   	push   %es
   101f3:	0f a0                	push   %fs
   101f5:	0f a8                	push   %gs
   101f7:	54                   	push   %esp
   101f8:	e8 5f 1c 00 00       	call   11e5c <do_handler_alignment_check>
   101fd:	5c                   	pop    %esp
   101fe:	0f a9                	pop    %gs
   10200:	0f a1                	pop    %fs
   10202:	07                   	pop    %es
   10203:	1f                   	pop    %ds
   10204:	61                   	popa   
   10205:	83 c4 08             	add    $0x8,%esp
   10208:	cf                   	iret   

00010209 <exception_handler_machine_check>:
exception_handler machine_check,        18, 0
   10209:	6a 00                	push   $0x0
   1020b:	6a 12                	push   $0x12
   1020d:	60                   	pusha  
   1020e:	1e                   	push   %ds
   1020f:	06                   	push   %es
   10210:	0f a0                	push   %fs
   10212:	0f a8                	push   %gs
   10214:	54                   	push   %esp
   10215:	e8 5e 1c 00 00       	call   11e78 <do_handler_machine_check>
   1021a:	5c                   	pop    %esp
   1021b:	0f a9                	pop    %gs
   1021d:	0f a1                	pop    %fs
   1021f:	07                   	pop    %es
   10220:	1f                   	pop    %ds
   10221:	61                   	popa   
   10222:	83 c4 08             	add    $0x8,%esp
   10225:	cf                   	iret   

00010226 <exception_handler_smd_exception>:
exception_handler smd_exception,        19, 0
   10226:	6a 00                	push   $0x0
   10228:	6a 13                	push   $0x13
   1022a:	60                   	pusha  
   1022b:	1e                   	push   %ds
   1022c:	06                   	push   %es
   1022d:	0f a0                	push   %fs
   1022f:	0f a8                	push   %gs
   10231:	54                   	push   %esp
   10232:	e8 5d 1c 00 00       	call   11e94 <do_handler_smd_exception>
   10237:	5c                   	pop    %esp
   10238:	0f a9                	pop    %gs
   1023a:	0f a1                	pop    %fs
   1023c:	07                   	pop    %es
   1023d:	1f                   	pop    %ds
   1023e:	61                   	popa   
   1023f:	83 c4 08             	add    $0x8,%esp
   10242:	cf                   	iret   

00010243 <exception_handler_virtual_exception>:
exception_handler virtual_exception,    20, 0
   10243:	6a 00                	push   $0x0
   10245:	6a 14                	push   $0x14
   10247:	60                   	pusha  
   10248:	1e                   	push   %ds
   10249:	06                   	push   %es
   1024a:	0f a0                	push   %fs
   1024c:	0f a8                	push   %gs
   1024e:	54                   	push   %esp
   1024f:	e8 5c 1c 00 00       	call   11eb0 <do_handler_virtual_exception>
   10254:	5c                   	pop    %esp
   10255:	0f a9                	pop    %gs
   10257:	0f a1                	pop    %fs
   10259:	07                   	pop    %es
   1025a:	1f                   	pop    %ds
   1025b:	61                   	popa   
   1025c:	83 c4 08             	add    $0x8,%esp
   1025f:	cf                   	iret   

00010260 <exception_handler_control_exception>:
exception_handler control_exception,    21, 1
   10260:	6a 15                	push   $0x15
   10262:	60                   	pusha  
   10263:	1e                   	push   %ds
   10264:	06                   	push   %es
   10265:	0f a0                	push   %fs
   10267:	0f a8                	push   %gs
   10269:	54                   	push   %esp
   1026a:	e8 5d 1c 00 00       	call   11ecc <do_handler_control_exception>
   1026f:	5c                   	pop    %esp
   10270:	0f a9                	pop    %gs
   10272:	0f a1                	pop    %fs
   10274:	07                   	pop    %es
   10275:	1f                   	pop    %ds
   10276:	61                   	popa   
   10277:	83 c4 08             	add    $0x8,%esp
   1027a:	cf                   	iret   

0001027b <exception_handler_time>:

//定时器的中断处理函数
exception_handler time,                 0x20, 0 
   1027b:	6a 00                	push   $0x0
   1027d:	6a 20                	push   $0x20
   1027f:	60                   	pusha  
   10280:	1e                   	push   %ds
   10281:	06                   	push   %es
   10282:	0f a0                	push   %fs
   10284:	0f a8                	push   %gs
   10286:	54                   	push   %esp
   10287:	e8 55 21 00 00       	call   123e1 <do_handler_time>
   1028c:	5c                   	pop    %esp
   1028d:	0f a9                	pop    %gs
   1028f:	0f a1                	pop    %fs
   10291:	07                   	pop    %es
   10292:	1f                   	pop    %ds
   10293:	61                   	popa   
   10294:	83 c4 08             	add    $0x8,%esp
   10297:	cf                   	iret   

00010298 <simple_switch>:
//TODO:该部分为另一种任务切换时cpu上下文环境的保存方法，并未被调用
    .text
    .global simple_switch
simple_switch:  //simple_switch(from, to)
    //1.获取参数，跳过4字节的 eip
    mov 8(%esp), %edx   //获取 to, 地址(指针) --> 目标任务的栈空间对应的 esp 的值
   10298:	8b 54 24 08          	mov    0x8(%esp),%edx
    mov 4(%esp), %eax   //获取 from, 地址(指针) --> 当前任务的栈空间对应的 esp 的值
   1029c:	8b 44 24 04          	mov    0x4(%esp),%eax


    //2.被调用者保存当前任务的 ebp, ebx, esi, edi 到当前任务的栈中
    //eax, ecx, edx, eip, eflags 已由调用者压入当前任务的栈中
    push %ebp
   102a0:	55                   	push   %ebp
    push %ebx
   102a1:	53                   	push   %ebx
    push %esi
   102a2:	56                   	push   %esi
    push %edi
   102a3:	57                   	push   %edi

    //3.更新当前任务栈空间的 esp
    mov %esp, (%eax)
   102a4:	89 20                	mov    %esp,(%eax)

    //3.进行任务栈的切换
    mov (%edx), %esp
   102a6:	8b 22                	mov    (%edx),%esp


    //4.恢复切换后的任务状态，ebp, ebx, esi, edi 手动恢复
    //eax, ecx, edx, eip, eflags, 是在当前任务(c函数)调用simple_switch时已压入当前任务栈中，
    //调用 ret 后会自行弹出并恢复
    pop %edi
   102a8:	5f                   	pop    %edi
    pop %esi
   102a9:	5e                   	pop    %esi
    pop %ebx
   102aa:	5b                   	pop    %ebx
    pop %ebp
   102ab:	5d                   	pop    %ebp

    //5.恢复切换后的任务执行流，相当于此时 esp ->[eip]， 即 pop %eip
    ret 
   102ac:	c3                   	ret    

000102ad <exception_handler_syscall>:

    //注意：cpu只自动保护了 cs eip ss esp寄存器，其它寄存器没有被维护，可能在调用门处理函数里被修改
    //所以需要手动压入，即保护cpu上下文环境，也为fork系统调用提供cpu上下文环境

    //1.用 pusha 指令压入8个通用寄存器
    pusha
   102ad:	60                   	pusha  

    //2.压入其他段寄存器
    push %ds
   102ae:	1e                   	push   %ds
    push %es
   102af:	06                   	push   %es
    push %fs
   102b0:	0f a0                	push   %fs
    push %gs
   102b2:	0f a8                	push   %gs

    //3.压入eflags寄存器
    pushf
   102b4:	9c                   	pushf  

    //4.将当前 esp 的值压入栈中，当作调用门栈帧的起始地址
    push %esp
   102b5:	54                   	push   %esp

    //5.调用系统调用处理函数，按id进一步判断需要进行的系统调用并执行
    call do_handler_syscall
   102b6:	e8 76 20 00 00       	call   12331 <do_handler_syscall>


    //5.恢复现场
    pop %esp
   102bb:	5c                   	pop    %esp
    popf
   102bc:	9d                   	popf   
    pop %gs
   102bd:	0f a9                	pop    %gs
    pop %fs
   102bf:	0f a1                	pop    %fs
    pop %es
   102c1:	07                   	pop    %es
    pop %ds
   102c2:	1f                   	pop    %ds
    popa
   102c3:	61                   	popa   
    //如果要变换特权级，它会加载被调用者堆栈上的CS和EIP，并增加ESP跳过参数，
    //然后ESP将指向被保存过的调用者SS和ESP¹。
    //它还会对目标代码段特权级和目标栈段特权级做严格的检查，
    //要求代码段可执行特权级CPL (即DPL) == 栈段选择子请求特权级RPL == 栈段目标内存特权级DPL²。
    
    retf $(5*4) 
   102c4:	ca 14 00             	lret   $0x14

000102c7 <down2>:
 * 
 * @param size 
 * @param bound 一般取2的n次方
 * @return uint32_t 
 */
static inline uint32_t down2(uint32_t size, uint32_t bound) {
   102c7:	55                   	push   %ebp
   102c8:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);  
   102ca:	8b 45 0c             	mov    0xc(%ebp),%eax
   102cd:	f7 d8                	neg    %eax
   102cf:	23 45 08             	and    0x8(%ebp),%eax
}
   102d2:	5d                   	pop    %ebp
   102d3:	c3                   	ret    

000102d4 <up2>:
 * 
 * @param size 
 * @param bound 一般取2的n次方
 * @return uint32_t 
 */
static inline uint32_t up2(uint32_t size, uint32_t bound) {
   102d4:	55                   	push   %ebp
   102d5:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   102d7:	8b 55 08             	mov    0x8(%ebp),%edx
   102da:	8b 45 0c             	mov    0xc(%ebp),%eax
   102dd:	01 d0                	add    %edx,%eax
   102df:	8d 50 ff             	lea    -0x1(%eax),%edx
   102e2:	8b 45 0c             	mov    0xc(%ebp),%eax
   102e5:	f7 d8                	neg    %eax
   102e7:	21 d0                	and    %edx,%eax
}
   102e9:	5d                   	pop    %ebp
   102ea:	c3                   	ret    

000102eb <write_cr3>:
 * 它含有存放页目录表页面的物理地址，
 * 因此 CR3 也被称为 PDBR（Page-Directory Base address Register）。
 *
 * @param data
 */
static inline void write_cr3(uint32_t data) {
   102eb:	55                   	push   %ebp
   102ec:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("mov %[v], %%cr3" : : [v] "r"(data));
   102ee:	8b 45 08             	mov    0x8(%ebp),%eax
   102f1:	0f 22 d8             	mov    %eax,%cr3
}
   102f4:	90                   	nop
   102f5:	5d                   	pop    %ebp
   102f6:	c3                   	ret    

000102f7 <pde_index>:
 * @brief 获取虚拟地址的高10位，及对应的页目录项在页目录表中的索引
 * 
 * @param vstart 
 * @return uint32_t 
 */
static inline uint32_t pde_index(uint32_t vstart) {
   102f7:	55                   	push   %ebp
   102f8:	89 e5                	mov    %esp,%ebp
    return (vstart >> 22);
   102fa:	8b 45 08             	mov    0x8(%ebp),%eax
   102fd:	c1 e8 16             	shr    $0x16,%eax
}
   10300:	5d                   	pop    %ebp
   10301:	c3                   	ret    

00010302 <pte_index>:
 * @brief 获取虚拟地址的次10位，及对应的页表项在页表中的索引
 * 
 * @param vstart 
 * @return uint32_t 
 */
static inline uint32_t pte_index(uint32_t vstart) {
   10302:	55                   	push   %ebp
   10303:	89 e5                	mov    %esp,%ebp
    return (vstart >> 12) & 0x3ff;
   10305:	8b 45 08             	mov    0x8(%ebp),%eax
   10308:	c1 e8 0c             	shr    $0xc,%eax
   1030b:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   10310:	5d                   	pop    %ebp
   10311:	c3                   	ret    

00010312 <pde_to_pt_addr>:
 * @brief 获取页目录项中对应的页表的起始地址，及该页表第一个页表项的地址
 * 
 * @param pde 页目录项
 * @return uint32_t 返回的页表的地址
 */
static inline uint32_t pde_to_pt_addr(pde_t *pde) {
   10312:	55                   	push   %ebp
   10313:	89 e5                	mov    %esp,%ebp
    //高20位为页表的物理地址的有效位，将其左移12位，及按4kb对齐后才是该页的物理地址
    return pde->phy_pt_addr << 12;
   10315:	8b 45 08             	mov    0x8(%ebp),%eax
   10318:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   1031c:	c0 ea 04             	shr    $0x4,%dl
   1031f:	0f b6 ca             	movzbl %dl,%ecx
   10322:	0f b6 50 02          	movzbl 0x2(%eax),%edx
   10326:	c1 e2 04             	shl    $0x4,%edx
   10329:	09 ca                	or     %ecx,%edx
   1032b:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   1032f:	c1 e0 0c             	shl    $0xc,%eax
   10332:	09 d0                	or     %edx,%eax
   10334:	c1 e0 0c             	shl    $0xc,%eax
}
   10337:	5d                   	pop    %ebp
   10338:	c3                   	ret    

00010339 <pte_to_pg_addr>:
 * @brief 获取页表项中对应的页的起始地址
 * 
 * @param pte 页表项
 * @return uint32_t 返回的页的地址
 */
static inline uint32_t pte_to_pg_addr(pte_t *pte) {
   10339:	55                   	push   %ebp
   1033a:	89 e5                	mov    %esp,%ebp
    //高20位为页的物理地址有效位，将其左移12位，及按4kb对齐后才是该页的物理地址
    return pte->phy_page_addr << 12;
   1033c:	8b 45 08             	mov    0x8(%ebp),%eax
   1033f:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   10343:	c0 ea 04             	shr    $0x4,%dl
   10346:	0f b6 ca             	movzbl %dl,%ecx
   10349:	0f b6 50 02          	movzbl 0x2(%eax),%edx
   1034d:	c1 e2 04             	shl    $0x4,%edx
   10350:	09 ca                	or     %ecx,%edx
   10352:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   10356:	c1 e0 0c             	shl    $0xc,%eax
   10359:	09 d0                	or     %edx,%eax
   1035b:	c1 e0 0c             	shl    $0xc,%eax
}
   1035e:	5d                   	pop    %ebp
   1035f:	c3                   	ret    

00010360 <mmu_set_page_dir>:
/**
 * @brief 设置页目录表的起始地址，将起始地址写入CR3寄存器
 * 
 * @param paddr 页目录表的物理起始地址
 */
static inline void mmu_set_page_dir(uint32_t paddr) {
   10360:	55                   	push   %ebp
   10361:	89 e5                	mov    %esp,%ebp

    //设置cr3寄存器的高20位为页目录表的地址，因为按4kb对齐，所以
    //页目录表的起始地址page_dir的高20位才为有效位，低12位为0，将cr3的低12位就设置为0
    write_cr3(paddr);
   10363:	ff 75 08             	push   0x8(%ebp)
   10366:	e8 80 ff ff ff       	call   102eb <write_cr3>
   1036b:	83 c4 04             	add    $0x4,%esp
}
   1036e:	90                   	nop
   1036f:	c9                   	leave  
   10370:	c3                   	ret    

00010371 <addr_alloc_init>:
 * @param start 管理内存的起始地址
 * @param size 管理内存的大小
 * @param page_size 管理的内存页的大小
 */
static void addr_alloc_init(addr_alloc_t *alloc, uint8_t *bits, uint32_t start,
                            uint32_t size, uint32_t page_size) {
   10371:	55                   	push   %ebp
   10372:	89 e5                	mov    %esp,%ebp
   10374:	83 ec 08             	sub    $0x8,%esp
  mutex_init(&alloc->mutex);
   10377:	8b 45 08             	mov    0x8(%ebp),%eax
   1037a:	83 ec 0c             	sub    $0xc,%esp
   1037d:	50                   	push   %eax
   1037e:	e8 70 22 00 00       	call   125f3 <mutex_init>
   10383:	83 c4 10             	add    $0x10,%esp
  alloc->start = start;
   10386:	8b 45 08             	mov    0x8(%ebp),%eax
   10389:	8b 55 10             	mov    0x10(%ebp),%edx
   1038c:	89 50 1c             	mov    %edx,0x1c(%eax)
  alloc->size = size;
   1038f:	8b 45 08             	mov    0x8(%ebp),%eax
   10392:	8b 55 14             	mov    0x14(%ebp),%edx
   10395:	89 50 20             	mov    %edx,0x20(%eax)
  alloc->page_size = page_size;
   10398:	8b 45 08             	mov    0x8(%ebp),%eax
   1039b:	8b 55 18             	mov    0x18(%ebp),%edx
   1039e:	89 50 24             	mov    %edx,0x24(%eax)
  bitmap_init(&alloc->bitmap, bits, alloc->size / alloc->page_size, 0);
   103a1:	8b 45 08             	mov    0x8(%ebp),%eax
   103a4:	8b 40 20             	mov    0x20(%eax),%eax
   103a7:	8b 55 08             	mov    0x8(%ebp),%edx
   103aa:	8b 4a 24             	mov    0x24(%edx),%ecx
   103ad:	ba 00 00 00 00       	mov    $0x0,%edx
   103b2:	f7 f1                	div    %ecx
   103b4:	89 c2                	mov    %eax,%edx
   103b6:	8b 45 08             	mov    0x8(%ebp),%eax
   103b9:	83 c0 14             	add    $0x14,%eax
   103bc:	6a 00                	push   $0x0
   103be:	52                   	push   %edx
   103bf:	ff 75 0c             	push   0xc(%ebp)
   103c2:	50                   	push   %eax
   103c3:	e8 8c 29 00 00       	call   12d54 <bitmap_init>
   103c8:	83 c4 10             	add    $0x10,%esp
}
   103cb:	90                   	nop
   103cc:	c9                   	leave  
   103cd:	c3                   	ret    

000103ce <addr_alloc_page>:
 *
 * @param alloc
 * @param page_count 申请页的数量
 * @return uint32_t 申请的第一个页的起始地址， 0：分配失败
 */
static uint32_t addr_alloc_page(addr_alloc_t *alloc, int page_count) {
   103ce:	55                   	push   %ebp
   103cf:	89 e5                	mov    %esp,%ebp
   103d1:	83 ec 18             	sub    $0x18,%esp
  uint32_t addr = 0;  // 记录分配的页的起始地址
   103d4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  mutex_lock(&alloc->mutex);
   103db:	8b 45 08             	mov    0x8(%ebp),%eax
   103de:	83 ec 0c             	sub    $0xc,%esp
   103e1:	50                   	push   %eax
   103e2:	e8 59 22 00 00       	call   12640 <mutex_lock>
   103e7:	83 c4 10             	add    $0x10,%esp

  // 在位图中取连续的page_count个页进行分配
  int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   103ea:	8b 45 08             	mov    0x8(%ebp),%eax
   103ed:	83 c0 14             	add    $0x14,%eax
   103f0:	83 ec 04             	sub    $0x4,%esp
   103f3:	ff 75 0c             	push   0xc(%ebp)
   103f6:	6a 00                	push   $0x0
   103f8:	50                   	push   %eax
   103f9:	e8 8b 2b 00 00       	call   12f89 <bitmap_alloc_nbits>
   103fe:	83 c4 10             	add    $0x10,%esp
   10401:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (page_count >= 0) {
   10404:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10408:	78 17                	js     10421 <addr_alloc_page+0x53>
    // 计算出申请到的第一个页的起始地址
    addr = alloc->start + page_index * alloc->page_size;
   1040a:	8b 45 08             	mov    0x8(%ebp),%eax
   1040d:	8b 48 1c             	mov    0x1c(%eax),%ecx
   10410:	8b 45 08             	mov    0x8(%ebp),%eax
   10413:	8b 50 24             	mov    0x24(%eax),%edx
   10416:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10419:	0f af c2             	imul   %edx,%eax
   1041c:	01 c8                	add    %ecx,%eax
   1041e:	89 45 f4             	mov    %eax,-0xc(%ebp)
  }

  mutex_unlock(&alloc->mutex);
   10421:	8b 45 08             	mov    0x8(%ebp),%eax
   10424:	83 ec 0c             	sub    $0xc,%esp
   10427:	50                   	push   %eax
   10428:	e8 a4 22 00 00       	call   126d1 <mutex_unlock>
   1042d:	83 c4 10             	add    $0x10,%esp

  return addr;
   10430:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   10433:	c9                   	leave  
   10434:	c3                   	ret    

00010435 <addr_free_page>:
 *
 * @param alloc
 * @param addr 第一个内存页的起始地址
 * @param page_count 内存页的数量
 */
static void addr_free_page(addr_alloc_t *alloc, uint32_t addr, int page_count) {
   10435:	55                   	push   %ebp
   10436:	89 e5                	mov    %esp,%ebp
   10438:	53                   	push   %ebx
   10439:	83 ec 14             	sub    $0x14,%esp
  mutex_lock(&alloc->mutex);
   1043c:	8b 45 08             	mov    0x8(%ebp),%eax
   1043f:	83 ec 0c             	sub    $0xc,%esp
   10442:	50                   	push   %eax
   10443:	e8 f8 21 00 00       	call   12640 <mutex_lock>
   10448:	83 c4 10             	add    $0x10,%esp

  // 计算出第一个页在位图中的索引
  int page_index = (addr - alloc->start) / alloc->page_size;
   1044b:	8b 45 08             	mov    0x8(%ebp),%eax
   1044e:	8b 50 1c             	mov    0x1c(%eax),%edx
   10451:	8b 45 0c             	mov    0xc(%ebp),%eax
   10454:	29 d0                	sub    %edx,%eax
   10456:	89 c1                	mov    %eax,%ecx
   10458:	8b 45 08             	mov    0x8(%ebp),%eax
   1045b:	8b 58 24             	mov    0x24(%eax),%ebx
   1045e:	89 c8                	mov    %ecx,%eax
   10460:	ba 00 00 00 00       	mov    $0x0,%edx
   10465:	f7 f3                	div    %ebx
   10467:	89 45 f4             	mov    %eax,-0xc(%ebp)

  bitmap_set_bit(&alloc->bitmap, page_index, page_count, 0);
   1046a:	8b 45 08             	mov    0x8(%ebp),%eax
   1046d:	83 c0 14             	add    $0x14,%eax
   10470:	6a 00                	push   $0x0
   10472:	ff 75 10             	push   0x10(%ebp)
   10475:	ff 75 f4             	push   -0xc(%ebp)
   10478:	50                   	push   %eax
   10479:	e8 e2 29 00 00       	call   12e60 <bitmap_set_bit>
   1047e:	83 c4 10             	add    $0x10,%esp

  mutex_unlock(&alloc->mutex);
   10481:	8b 45 08             	mov    0x8(%ebp),%eax
   10484:	83 ec 0c             	sub    $0xc,%esp
   10487:	50                   	push   %eax
   10488:	e8 44 22 00 00       	call   126d1 <mutex_unlock>
   1048d:	83 c4 10             	add    $0x10,%esp
}
   10490:	90                   	nop
   10491:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10494:	c9                   	leave  
   10495:	c3                   	ret    

00010496 <show_mem_info>:
/**
 * @brief  打印1m以内内存的可用空间
 * 
 * @param boot_info 
 */
static void show_mem_info(boot_info_t *boot_info) {
   10496:	55                   	push   %ebp
   10497:	89 e5                	mov    %esp,%ebp
   10499:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:");
   1049c:	83 ec 0c             	sub    $0xc,%esp
   1049f:	68 e0 3a 01 00       	push   $0x13ae0
   104a4:	e8 2e 35 00 00       	call   139d7 <log_printf>
   104a9:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   104ac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   104b3:	eb 29                	jmp    104de <show_mem_info+0x48>
        log_printf("[%d]: 0x%x - 0x%x", i, boot_info->ram_region_cfg[i].start, boot_info->ram_region_cfg[i].size);
   104b5:	8b 45 08             	mov    0x8(%ebp),%eax
   104b8:	8b 55 f4             	mov    -0xc(%ebp),%edx
   104bb:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   104bf:	8b 45 08             	mov    0x8(%ebp),%eax
   104c2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   104c5:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   104c8:	52                   	push   %edx
   104c9:	50                   	push   %eax
   104ca:	ff 75 f4             	push   -0xc(%ebp)
   104cd:	68 ec 3a 01 00       	push   $0x13aec
   104d2:	e8 00 35 00 00       	call   139d7 <log_printf>
   104d7:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   104da:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   104de:	8b 45 08             	mov    0x8(%ebp),%eax
   104e1:	8b 40 50             	mov    0x50(%eax),%eax
   104e4:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   104e7:	7c cc                	jl     104b5 <show_mem_info+0x1f>
    }

    log_printf("");
   104e9:	83 ec 0c             	sub    $0xc,%esp
   104ec:	68 fe 3a 01 00       	push   $0x13afe
   104f1:	e8 e1 34 00 00       	call   139d7 <log_printf>
   104f6:	83 c4 10             	add    $0x10,%esp
}
   104f9:	90                   	nop
   104fa:	c9                   	leave  
   104fb:	c3                   	ret    

000104fc <total_mem_size>:
 * @brief  计算总的可用内存空间大小
 * 
 * @param boot_info 
 * @return uint32_t 
 */
static uint32_t total_mem_size(boot_info_t *boot_info) {
   104fc:	55                   	push   %ebp
   104fd:	89 e5                	mov    %esp,%ebp
   104ff:	83 ec 10             	sub    $0x10,%esp
    uint32_t mem_size = 0;
   10502:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   10509:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   10510:	eb 11                	jmp    10523 <total_mem_size+0x27>
        mem_size += boot_info->ram_region_cfg[i].size;
   10512:	8b 45 08             	mov    0x8(%ebp),%eax
   10515:	8b 55 f8             	mov    -0x8(%ebp),%edx
   10518:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
   1051c:	01 45 fc             	add    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   1051f:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   10523:	8b 45 08             	mov    0x8(%ebp),%eax
   10526:	8b 40 50             	mov    0x50(%eax),%eax
   10529:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   1052c:	7c e4                	jl     10512 <total_mem_size+0x16>
    }

    return mem_size;
   1052e:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10531:	c9                   	leave  
   10532:	c3                   	ret    

00010533 <find_pte>:
 *                 1：表示创建一个新页目录项，并为其分配一个新页作为页表
 *                 0: 返回0
 *                
 * @return pte_t* 索引到的页表项
 */
pte_t* find_pte(pde_t* page_dir, uint32_t vstart, int is_alloc) {
   10533:	55                   	push   %ebp
   10534:	89 e5                	mov    %esp,%ebp
   10536:	83 ec 18             	sub    $0x18,%esp
  pte_t* page_table; //记录被索引的页表
  //1.通过虚拟地址高10位索引到对应的页目录项
  pde_t* pde = page_dir + pde_index(vstart);
   10539:	ff 75 0c             	push   0xc(%ebp)
   1053c:	e8 b6 fd ff ff       	call   102f7 <pde_index>
   10541:	83 c4 04             	add    $0x4,%esp
   10544:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1054b:	8b 45 08             	mov    0x8(%ebp),%eax
   1054e:	01 d0                	add    %edx,%eax
   10550:	89 45 f0             	mov    %eax,-0x10(%ebp)

  //2.判断该页目录项是否已存在，及该页目录项是否已指向一个被分配的页表
  if (pde->present) { //该页目录项存在，及存在对应的页表，可以索引到对应的页表
   10553:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10556:	0f b6 00             	movzbl (%eax),%eax
   10559:	83 e0 01             	and    $0x1,%eax
   1055c:	84 c0                	test   %al,%al
   1055e:	74 10                	je     10570 <find_pte+0x3d>
    page_table = (pte_t*)pde_to_pt_addr(pde);
   10560:	ff 75 f0             	push   -0x10(%ebp)
   10563:	e8 aa fd ff ff       	call   10312 <pde_to_pt_addr>
   10568:	83 c4 04             	add    $0x4,%esp
   1056b:	89 45 f4             	mov    %eax,-0xc(%ebp)
   1056e:	eb 57                	jmp    105c7 <find_pte+0x94>
  } else {//该目录项不存在内存中，及对应的页表不存在
    if (is_alloc == 0) {  //不为该目录项创建对应的页表
   10570:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10574:	75 07                	jne    1057d <find_pte+0x4a>
      return (pte_t*)0;
   10576:	b8 00 00 00 00       	mov    $0x0,%eax
   1057b:	eb 64                	jmp    105e1 <find_pte+0xae>
    }

    //为该目录项分配一页作为页表
    uint32_t pg_addr = addr_alloc_page(&paddr_alloc, 1);
   1057d:	83 ec 08             	sub    $0x8,%esp
   10580:	6a 01                	push   $0x1
   10582:	68 00 60 01 00       	push   $0x16000
   10587:	e8 42 fe ff ff       	call   103ce <addr_alloc_page>
   1058c:	83 c4 10             	add    $0x10,%esp
   1058f:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pg_addr == 0) { //分配失败
   10592:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   10596:	75 07                	jne    1059f <find_pte+0x6c>
      return (pte_t*)0;
   10598:	b8 00 00 00 00       	mov    $0x0,%eax
   1059d:	eb 42                	jmp    105e1 <find_pte+0xae>
    }

    //分配成功, 索引对应的页表
    page_table = (pte_t*)pg_addr;
   1059f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   105a2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_memset(page_table, 0, MEM_PAGE_SIZE);
   105a5:	83 ec 04             	sub    $0x4,%esp
   105a8:	68 00 10 00 00       	push   $0x1000
   105ad:	6a 00                	push   $0x0
   105af:	ff 75 f4             	push   -0xc(%ebp)
   105b2:	e8 53 2c 00 00       	call   1320a <kernel_memset>
   105b7:	83 c4 10             	add    $0x10,%esp

    //将该页表的起始地址放入对应的页目录项中并放入页目录表中，方便后续索引到该页表
    //且权限都放宽，即普通用户可访问，对应的页表的所有页可读写，将具体的权限交给每一页来进一步限制
    pde->v = pg_addr | PDE_U | PDE_W | PDE_P;
   105ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
   105bd:	83 c8 07             	or     $0x7,%eax
   105c0:	89 c2                	mov    %eax,%edx
   105c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   105c5:	89 10                	mov    %edx,(%eax)

  // log_printf("sizeof(pte_t) = %d", sizeof(pte_t));


  //3.返回在该页表中索引到的页表项
  return page_table + pte_index(vstart);
   105c7:	83 ec 0c             	sub    $0xc,%esp
   105ca:	ff 75 0c             	push   0xc(%ebp)
   105cd:	e8 30 fd ff ff       	call   10302 <pte_index>
   105d2:	83 c4 10             	add    $0x10,%esp
   105d5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   105dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   105df:	01 d0                	add    %edx,%eax

}
   105e1:	c9                   	leave  
   105e2:	c3                   	ret    

000105e3 <memory_creat_map>:
 * @param pstart 物理地址的起始地址
 * @param page_count 分页数量
 * @param privilege 该段虚拟地址的特权级
 * @return int -1:分配失败
 */
int  memory_creat_map(pde_t *page_dir, uint32_t vstart, uint32_t pstart, int page_count, uint32_t privilege) {
   105e3:	55                   	push   %ebp
   105e4:	89 e5                	mov    %esp,%ebp
   105e6:	83 ec 18             	sub    $0x18,%esp
  //1.为每一页创建对应的页表项
  for (int i = 0; i < page_count; ++i) {
   105e9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   105f0:	eb 7e                	jmp    10670 <memory_creat_map+0x8d>
    // //打印调试信息
    // log_printf("creat map: v-0x%x, p-0x%x, privilege:0x%x", vstart, pstart, privilege);

    //2.通过虚拟地址在页目录表中获取对应的页目录项指向的页表,
    //且当没有该页目录项时，为其分配一个页作为页表并让一个目录项指向该页表
    pte_t *pte = find_pte(page_dir, vstart, 1);
   105f2:	83 ec 04             	sub    $0x4,%esp
   105f5:	6a 01                	push   $0x1
   105f7:	ff 75 0c             	push   0xc(%ebp)
   105fa:	ff 75 08             	push   0x8(%ebp)
   105fd:	e8 31 ff ff ff       	call   10533 <find_pte>
   10602:	83 c4 10             	add    $0x10,%esp
   10605:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pte == (pte_t*)0) {//没有找到可用的页表项
   10608:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1060c:	75 17                	jne    10625 <memory_creat_map+0x42>
    log_printf("creat pte failed pte == 0");
   1060e:	83 ec 0c             	sub    $0xc,%esp
   10611:	68 ff 3a 01 00       	push   $0x13aff
   10616:	e8 bc 33 00 00       	call   139d7 <log_printf>
   1061b:	83 c4 10             	add    $0x10,%esp
      return -1;
   1061e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10623:	eb 57                	jmp    1067c <memory_creat_map+0x99>
    }

    // log_printf("pte addr : 0x%x", (uint32_t)pte);
    //3.确保该页并未已存在内存中
    ASSERT(pte->present == 0);
   10625:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10628:	0f b6 00             	movzbl (%eax),%eax
   1062b:	83 e0 01             	and    $0x1,%eax
   1062e:	84 c0                	test   %al,%al
   10630:	74 1c                	je     1064e <memory_creat_map+0x6b>
   10632:	68 19 3b 01 00       	push   $0x13b19
   10637:	68 28 3c 01 00       	push   $0x13c28
   1063c:	68 c1 00 00 00       	push   $0xc1
   10641:	68 2c 3b 01 00       	push   $0x13b2c
   10646:	e8 bd 26 00 00       	call   12d08 <pannic>
   1064b:	83 c4 10             	add    $0x10,%esp

    //4.在页表项中创建对应的映射关系，并该页权限，页权限以当前权限为主，因为pde处已放宽权限
    pte->v = pstart | privilege | PTE_P;
   1064e:	8b 45 10             	mov    0x10(%ebp),%eax
   10651:	0b 45 18             	or     0x18(%ebp),%eax
   10654:	83 c8 01             	or     $0x1,%eax
   10657:	89 c2                	mov    %eax,%edx
   10659:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1065c:	89 10                	mov    %edx,(%eax)

    //5.切换为下一页
    vstart += MEM_PAGE_SIZE;
   1065e:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    pstart += MEM_PAGE_SIZE;
   10665:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
  for (int i = 0; i < page_count; ++i) {
   1066c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10670:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10673:	3b 45 14             	cmp    0x14(%ebp),%eax
   10676:	0f 8c 76 ff ff ff    	jl     105f2 <memory_creat_map+0xf>

  }
 }
   1067c:	c9                   	leave  
   1067d:	c3                   	ret    

0001067e <create_kernal_table>:

//TODO:编写函数注释
void create_kernal_table(void) {
   1067e:	55                   	push   %ebp
   1067f:	89 e5                	mov    %esp,%ebp
   10681:	83 ec 28             	sub    $0x28,%esp
    {&s_data, (void*)MEM_EBDA_START, &s_data, PTE_W},    //可读写段的映射关系，一直到bios的拓展数据区(内核.data与.bss段再加上剩余的可用数据区域)
    {(void*)MEM_EXT_START, (void*)MEM_EXT_END, (void*)MEM_EXT_START, PTE_W}, //将1mb到127mb都映射给操作系统使用

  };

  for (int i = 0; i < sizeof(kernal_map) / sizeof(kernal_map[0]); ++i) {
   10684:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1068b:	e9 82 00 00 00       	jmp    10712 <create_kernal_table+0x94>
    memory_map_t *map = kernal_map + i;
   10690:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10693:	c1 e0 04             	shl    $0x4,%eax
   10696:	05 00 50 01 00       	add    $0x15000,%eax
   1069b:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //将虚拟地址的起始地址按页大小4kb对齐，为了不丢失原有的虚拟地址空间，所以向下对齐vstart
    //理论上虚拟地址是不需要上下边缘对齐的，这里主要是为了计算所需页数
    //因为虚拟地址的每一页都和页目录项以及页表项捆绑了，
    //只需用页目录项和页表项为该页映射一个物理页即可，所以物理页才必须上下边缘按4kb对齐
    uint32_t vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   1069e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106a1:	8b 00                	mov    (%eax),%eax
   106a3:	68 00 10 00 00       	push   $0x1000
   106a8:	50                   	push   %eax
   106a9:	e8 19 fc ff ff       	call   102c7 <down2>
   106ae:	83 c4 08             	add    $0x8,%esp
   106b1:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32_t pstart = down2((uint32_t)map->pstart, MEM_PAGE_SIZE);
   106b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106b7:	8b 40 08             	mov    0x8(%eax),%eax
   106ba:	68 00 10 00 00       	push   $0x1000
   106bf:	50                   	push   %eax
   106c0:	e8 02 fc ff ff       	call   102c7 <down2>
   106c5:	83 c4 08             	add    $0x8,%esp
   106c8:	89 45 e8             	mov    %eax,-0x18(%ebp)
    //将虚拟地址的结束地址按页大小4kb对齐, 为了不丢失原有的虚拟地址空间，所以向上对齐vend
    uint32_t vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   106cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106ce:	8b 40 04             	mov    0x4(%eax),%eax
   106d1:	68 00 10 00 00       	push   $0x1000
   106d6:	50                   	push   %eax
   106d7:	e8 f8 fb ff ff       	call   102d4 <up2>
   106dc:	83 c4 08             	add    $0x8,%esp
   106df:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    //计算该虚拟空间需要的页数
    int page_count = (vend - vstart) / MEM_PAGE_SIZE;
   106e2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   106e5:	2b 45 ec             	sub    -0x14(%ebp),%eax
   106e8:	c1 e8 0c             	shr    $0xc,%eax
   106eb:	89 45 e0             	mov    %eax,-0x20(%ebp)

    //创建内存映射关系
    memory_creat_map(kernel_page_dir, vstart, pstart, page_count, map->privilege);
   106ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106f1:	8b 40 0c             	mov    0xc(%eax),%eax
   106f4:	83 ec 0c             	sub    $0xc,%esp
   106f7:	50                   	push   %eax
   106f8:	ff 75 e0             	push   -0x20(%ebp)
   106fb:	ff 75 e8             	push   -0x18(%ebp)
   106fe:	ff 75 ec             	push   -0x14(%ebp)
   10701:	68 00 70 01 00       	push   $0x17000
   10706:	e8 d8 fe ff ff       	call   105e3 <memory_creat_map>
   1070b:	83 c4 20             	add    $0x20,%esp
  for (int i = 0; i < sizeof(kernal_map) / sizeof(kernal_map[0]); ++i) {
   1070e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10712:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10715:	83 f8 03             	cmp    $0x3,%eax
   10718:	0f 86 72 ff ff ff    	jbe    10690 <create_kernal_table+0x12>

  }
}
   1071e:	90                   	nop
   1071f:	90                   	nop
   10720:	c9                   	leave  
   10721:	c3                   	ret    

00010722 <memory_creat_uvm>:
/**
 * @brief 创建用户进程的虚拟内存空间，即页目录表
 * 
 * @return uint32_t 
 */
uint32_t memory_creat_uvm() {
   10722:	55                   	push   %ebp
   10723:	89 e5                	mov    %esp,%ebp
   10725:	83 ec 18             	sub    $0x18,%esp
  //1.分配一页作为页目录表
  pde_t *page_dir = (pde_t *)addr_alloc_page(&paddr_alloc, 1);
   10728:	83 ec 08             	sub    $0x8,%esp
   1072b:	6a 01                	push   $0x1
   1072d:	68 00 60 01 00       	push   $0x16000
   10732:	e8 97 fc ff ff       	call   103ce <addr_alloc_page>
   10737:	83 c4 10             	add    $0x10,%esp
   1073a:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (page_dir == 0) return 0;
   1073d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10741:	75 07                	jne    1074a <memory_creat_uvm+0x28>
   10743:	b8 00 00 00 00       	mov    $0x0,%eax
   10748:	eb 5b                	jmp    107a5 <memory_creat_uvm+0x83>
  //TODO:新分配的页并未做虚拟内存映射，会触发缺页异常，需要处理,这里先将1mb以上的所有空间都映射给内核进程

  //2.将该页的内容清空
  kernel_memset((void*)page_dir, 0, MEM_PAGE_SIZE);
   1074a:	83 ec 04             	sub    $0x4,%esp
   1074d:	68 00 10 00 00       	push   $0x1000
   10752:	6a 00                	push   $0x0
   10754:	ff 75 f0             	push   -0x10(%ebp)
   10757:	e8 ae 2a 00 00       	call   1320a <kernel_memset>
   1075c:	83 c4 10             	add    $0x10,%esp

  //3.获取用户进程空间的第一个页目录项索引, 用户进程空间的起始地址MEM_TASK_BASE = 0x800 00000
  uint32_t user_pde_start = pde_index(MEM_TASK_BASE);
   1075f:	83 ec 0c             	sub    $0xc,%esp
   10762:	68 00 00 00 80       	push   $0x80000000
   10767:	e8 8b fb ff ff       	call   102f7 <pde_index>
   1076c:	83 c4 10             	add    $0x10,%esp
   1076f:	89 45 ec             	mov    %eax,-0x14(%ebp)

  //4.将用户进程空间以下的空间映射给操作系统使用，即将0~user_pde_start的pde提供给操作系统作为页目录项
  for (int i = 0; i < user_pde_start; ++i) {
   10772:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10779:	eb 1f                	jmp    1079a <memory_creat_uvm+0x78>
      page_dir[i].v = kernel_page_dir[i].v; //所有进程都共享操作系统的页表
   1077b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1077e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10785:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10788:	01 c2                	add    %eax,%edx
   1078a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1078d:	8b 04 85 00 70 01 00 	mov    0x17000(,%eax,4),%eax
   10794:	89 02                	mov    %eax,(%edx)
  for (int i = 0; i < user_pde_start; ++i) {
   10796:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1079a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1079d:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   107a0:	77 d9                	ja     1077b <memory_creat_uvm+0x59>
  }


  return (uint32_t)page_dir;
   107a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   107a5:	c9                   	leave  
   107a6:	c3                   	ret    

000107a7 <memory_copy_uvm>:
 * 
 * @param to_page_dir 拷贝到的目标页目录表地址
 * @param from_page_dir 被拷贝的源页目录表地址
 * @return uint32_t 
 */
uint32_t memory_copy_uvm(uint32_t to_page_dir, uint32_t from_page_dir) {
   107a7:	55                   	push   %ebp
   107a8:	89 e5                	mov    %esp,%ebp


}
   107aa:	90                   	nop
   107ab:	5d                   	pop    %ebp
   107ac:	c3                   	ret    

000107ad <memory_destroy_uvm>:


void memory_destroy_uvm(uint32_t page_dir) {
   107ad:	55                   	push   %ebp
   107ae:	89 e5                	mov    %esp,%ebp
  
}
   107b0:	90                   	nop
   107b1:	5d                   	pop    %ebp
   107b2:	c3                   	ret    

000107b3 <memory_init>:
/**
 * @brief  初始化化内存
 *
 * @param boot_info cpu在实模式下检测到的可用内存对象
 */
void memory_init(boot_info_t *boot_info) {
   107b3:	55                   	push   %ebp
   107b4:	89 e5                	mov    %esp,%ebp
   107b6:	83 ec 18             	sub    $0x18,%esp

  
    //声明紧邻在内核bss段后面的空间地址，用于存储位图，该变量定义在kernel.lds中
    extern char mem_free_start;

    log_printf("memory init");
   107b9:	83 ec 0c             	sub    $0xc,%esp
   107bc:	68 63 3b 01 00       	push   $0x13b63
   107c1:	e8 11 32 00 00       	call   139d7 <log_printf>
   107c6:	83 c4 10             	add    $0x10,%esp

    log_printf("mem_free_start: 0x%x", &mem_free_start);
   107c9:	83 ec 08             	sub    $0x8,%esp
   107cc:	68 24 31 03 00       	push   $0x33124
   107d1:	68 6f 3b 01 00       	push   $0x13b6f
   107d6:	e8 fc 31 00 00       	call   139d7 <log_printf>
   107db:	83 c4 10             	add    $0x10,%esp

    show_mem_info(boot_info);
   107de:	83 ec 0c             	sub    $0xc,%esp
   107e1:	ff 75 08             	push   0x8(%ebp)
   107e4:	e8 ad fc ff ff       	call   10496 <show_mem_info>
   107e9:	83 c4 10             	add    $0x10,%esp
    
    //去除保护模式下1mb大小后可用的内存空间大小
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   107ec:	83 ec 0c             	sub    $0xc,%esp
   107ef:	ff 75 08             	push   0x8(%ebp)
   107f2:	e8 05 fd ff ff       	call   104fc <total_mem_size>
   107f7:	83 c4 10             	add    $0x10,%esp
   107fa:	2d 00 00 10 00       	sub    $0x100000,%eax
   107ff:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将可用空间大小下调到页大小的整数倍
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);
   10802:	83 ec 08             	sub    $0x8,%esp
   10805:	68 00 10 00 00       	push   $0x1000
   1080a:	ff 75 f4             	push   -0xc(%ebp)
   1080d:	e8 b5 fa ff ff       	call   102c7 <down2>
   10812:	83 c4 10             	add    $0x10,%esp
   10815:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    log_printf("free memory: 0x%x, size: 0x%x", MEM_EXT_START, mem_up1MB_free);
   10818:	83 ec 04             	sub    $0x4,%esp
   1081b:	ff 75 f4             	push   -0xc(%ebp)
   1081e:	68 00 00 10 00       	push   $0x100000
   10823:	68 84 3b 01 00       	push   $0x13b84
   10828:	e8 aa 31 00 00       	call   139d7 <log_printf>
   1082d:	83 c4 10             	add    $0x10,%esp

    //mem_free_start被分配的地址在链接文件中定义，紧邻着内核的.bss段
    uint8_t *mem_free = (uint8_t*)&mem_free_start;
   10830:	c7 45 f0 24 31 03 00 	movl   $0x33124,-0x10(%ebp)

    //用paddr_alloc，内存页分配对象管理1mb以上的所有空闲空间，页大小为MEM_PAGE_SIZE=4kb
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   10837:	83 ec 0c             	sub    $0xc,%esp
   1083a:	68 00 10 00 00       	push   $0x1000
   1083f:	ff 75 f4             	push   -0xc(%ebp)
   10842:	68 00 00 10 00       	push   $0x100000
   10847:	ff 75 f0             	push   -0x10(%ebp)
   1084a:	68 00 60 01 00       	push   $0x16000
   1084f:	e8 1d fb ff ff       	call   10371 <addr_alloc_init>
   10854:	83 c4 20             	add    $0x20,%esp

    //跳过存储位图的内存区域, 位图的每一位表示一个页，计算位图所站的字节数即可跳过该区域
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);  
   10857:	a1 20 60 01 00       	mov    0x16020,%eax
   1085c:	c1 e8 0c             	shr    $0xc,%eax
   1085f:	83 ec 0c             	sub    $0xc,%esp
   10862:	50                   	push   %eax
   10863:	e8 d6 24 00 00       	call   12d3e <bitmap_byte_count>
   10868:	83 c4 10             	add    $0x10,%esp
   1086b:	01 45 f0             	add    %eax,-0x10(%ebp)

    //判断mem_free是否已越过可用数据区
    ASSERT(mem_free < (uint8_t*)MEM_EBDA_START);
   1086e:	81 7d f0 ff fb 09 00 	cmpl   $0x9fbff,-0x10(%ebp)
   10875:	76 1c                	jbe    10893 <memory_init+0xe0>
   10877:	68 a4 3b 01 00       	push   $0x13ba4
   1087c:	68 3c 3c 01 00       	push   $0x13c3c
   10881:	68 40 01 00 00       	push   $0x140
   10886:	68 2c 3b 01 00       	push   $0x13b2c
   1088b:	e8 78 24 00 00       	call   12d08 <pannic>
   10890:	83 c4 10             	add    $0x10,%esp
    
    //创建内核的页表映射
    create_kernal_table();
   10893:	e8 e6 fd ff ff       	call   1067e <create_kernal_table>

    //设置内核的页目录表到CR3寄存器，并开启分页机制
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   10898:	b8 00 70 01 00       	mov    $0x17000,%eax
   1089d:	83 ec 0c             	sub    $0xc,%esp
   108a0:	50                   	push   %eax
   108a1:	e8 ba fa ff ff       	call   10360 <mmu_set_page_dir>
   108a6:	83 c4 10             	add    $0x10,%esp
}
   108a9:	90                   	nop
   108aa:	c9                   	leave  
   108ab:	c3                   	ret    

000108ac <memory_alloc_for_page_dir>:
 * @param vaddr 进程各个代码段的起始虚拟地址
 * @param alloc_size 为进程分配的页空间大小
 * @param priority 进程页空间的权限
 * @return int 
 */
int memory_alloc_for_page_dir(uint32_t page_dir, uint32_t vaddr, uint32_t alloc_size, uint32_t privilege) {
   108ac:	55                   	push   %ebp
   108ad:	89 e5                	mov    %esp,%ebp
   108af:	83 ec 28             	sub    $0x28,%esp
  //1.记录当前分配的虚拟页的起始地址
  uint32_t curr_vaddr = vaddr;
   108b2:	8b 45 0c             	mov    0xc(%ebp),%eax
   108b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
  //2.计算需要分配多少页
  int page_count = up2(alloc_size, MEM_PAGE_SIZE) / MEM_PAGE_SIZE;
   108b8:	68 00 10 00 00       	push   $0x1000
   108bd:	ff 75 10             	push   0x10(%ebp)
   108c0:	e8 0f fa ff ff       	call   102d4 <up2>
   108c5:	83 c4 08             	add    $0x8,%esp
   108c8:	c1 e8 0c             	shr    $0xc,%eax
   108cb:	89 45 ec             	mov    %eax,-0x14(%ebp)

  //3.逐页进行映射
  for (int i = 0; i < page_count; ++i) {
   108ce:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   108d5:	eb 7a                	jmp    10951 <memory_alloc_for_page_dir+0xa5>
    uint32_t paddr = addr_alloc_page(&paddr_alloc, 1);
   108d7:	83 ec 08             	sub    $0x8,%esp
   108da:	6a 01                	push   $0x1
   108dc:	68 00 60 01 00       	push   $0x16000
   108e1:	e8 e8 fa ff ff       	call   103ce <addr_alloc_page>
   108e6:	83 c4 10             	add    $0x10,%esp
   108e9:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (paddr == 0) {//分配失败
   108ec:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   108f0:	75 17                	jne    10909 <memory_alloc_for_page_dir+0x5d>
      log_printf("mem alloc failed. no memory");
   108f2:	83 ec 0c             	sub    $0xc,%esp
   108f5:	68 c8 3b 01 00       	push   $0x13bc8
   108fa:	e8 d8 30 00 00       	call   139d7 <log_printf>
   108ff:	83 c4 10             	add    $0x10,%esp
      //TODO:当分配失败时应该将之前分配的页全部归还，且将映射关系也全部解除
      return 0;
   10902:	b8 00 00 00 00       	mov    $0x0,%eax
   10907:	eb 59                	jmp    10962 <memory_alloc_for_page_dir+0xb6>
    }

    int err = memory_creat_map((pde_t*)page_dir, curr_vaddr, paddr, 1, privilege);
   10909:	8b 45 08             	mov    0x8(%ebp),%eax
   1090c:	83 ec 0c             	sub    $0xc,%esp
   1090f:	ff 75 14             	push   0x14(%ebp)
   10912:	6a 01                	push   $0x1
   10914:	ff 75 e8             	push   -0x18(%ebp)
   10917:	ff 75 f4             	push   -0xc(%ebp)
   1091a:	50                   	push   %eax
   1091b:	e8 c3 fc ff ff       	call   105e3 <memory_creat_map>
   10920:	83 c4 20             	add    $0x20,%esp
   10923:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (err < 0) {//分配失败
   10926:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   1092a:	79 1a                	jns    10946 <memory_alloc_for_page_dir+0x9a>
      log_printf("create memory failed. err = %d", err);
   1092c:	83 ec 08             	sub    $0x8,%esp
   1092f:	ff 75 e4             	push   -0x1c(%ebp)
   10932:	68 e4 3b 01 00       	push   $0x13be4
   10937:	e8 9b 30 00 00       	call   139d7 <log_printf>
   1093c:	83 c4 10             	add    $0x10,%esp
      //TODO:当分配失败时应该将之前分配的页全部归还，且将映射关系也全部解除
      return 0;
   1093f:	b8 00 00 00 00       	mov    $0x0,%eax
   10944:	eb 1c                	jmp    10962 <memory_alloc_for_page_dir+0xb6>
    }

    curr_vaddr += MEM_PAGE_SIZE;
   10946:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
  for (int i = 0; i < page_count; ++i) {
   1094d:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10951:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10954:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   10957:	0f 8c 7a ff ff ff    	jl     108d7 <memory_alloc_for_page_dir+0x2b>
  }

  return 0;
   1095d:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10962:	c9                   	leave  
   10963:	c3                   	ret    

00010964 <memory_alloc_page_for>:
 * @param vaddr 待分配空间的起始地址
 * @param alloc_size 为其分配的空间大小
 * @param privilege 对应页空间的权限
 * @return int 错误码
 */
int memory_alloc_page_for(uint32_t vaddr, uint32_t alloc_size, uint32_t privilege) {
   10964:	55                   	push   %ebp
   10965:	89 e5                	mov    %esp,%ebp
   10967:	83 ec 08             	sub    $0x8,%esp
  return memory_alloc_for_page_dir(task_current()->tss.cr3, vaddr, alloc_size, privilege);
   1096a:	e8 80 08 00 00       	call   111ef <task_current>
   1096f:	8b 40 6c             	mov    0x6c(%eax),%eax
   10972:	ff 75 10             	push   0x10(%ebp)
   10975:	ff 75 0c             	push   0xc(%ebp)
   10978:	ff 75 08             	push   0x8(%ebp)
   1097b:	50                   	push   %eax
   1097c:	e8 2b ff ff ff       	call   108ac <memory_alloc_for_page_dir>
   10981:	83 c4 10             	add    $0x10,%esp
}
   10984:	c9                   	leave  
   10985:	c3                   	ret    

00010986 <memory_alloc_page>:
/**
 * @brief 为进程的内核空间分配一页内存，需特权级0访问
 * 
 * @return uint32_t 内存的起始地址
 */
uint32_t memory_alloc_page() {
   10986:	55                   	push   %ebp
   10987:	89 e5                	mov    %esp,%ebp
   10989:	83 ec 18             	sub    $0x18,%esp
  //因为0x100000 ~ 0x8000 0000,即低 1mb~2gb都由操作系统内核使用，
  //操作系统内核已对整个内存空间进行了一一映射，而每个程序的2gb以下空间都使用操作系统的虚拟页表
  //所以直接返回该页物理地址，也就是该页在操作系统虚拟地址空间中的虚拟地址
  //需要注意的是后续访问该页需要0特权级，因为访问的是内核空间
  uint32_t addr = addr_alloc_page(&paddr_alloc, 1);
   1098c:	83 ec 08             	sub    $0x8,%esp
   1098f:	6a 01                	push   $0x1
   10991:	68 00 60 01 00       	push   $0x16000
   10996:	e8 33 fa ff ff       	call   103ce <addr_alloc_page>
   1099b:	83 c4 10             	add    $0x10,%esp
   1099e:	89 45 f4             	mov    %eax,-0xc(%ebp)
  return addr;
   109a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   109a4:	c9                   	leave  
   109a5:	c3                   	ret    

000109a6 <curr_page_dir>:
/**
 * @brief 返回当前进程的页目录表的地址
 * 
 * @return pde_t* 
 */
static pde_t* curr_page_dir() {
   109a6:	55                   	push   %ebp
   109a7:	89 e5                	mov    %esp,%ebp
   109a9:	83 ec 08             	sub    $0x8,%esp
  return (pde_t*)(task_current()->tss.cr3);
   109ac:	e8 3e 08 00 00       	call   111ef <task_current>
   109b1:	8b 40 6c             	mov    0x6c(%eax),%eax
}
   109b4:	c9                   	leave  
   109b5:	c3                   	ret    

000109b6 <memory_free_page>:
 * @brief 释放一页内存空间
 * 
 * @param addr 
 */

void memory_free_page(uint32_t addr) {
   109b6:	55                   	push   %ebp
   109b7:	89 e5                	mov    %esp,%ebp
   109b9:	83 ec 18             	sub    $0x18,%esp
  if (addr < MEM_TASK_BASE) { //释放内核空间的一页内存
   109bc:	8b 45 08             	mov    0x8(%ebp),%eax
   109bf:	85 c0                	test   %eax,%eax
   109c1:	78 17                	js     109da <memory_free_page+0x24>
    addr_free_page(&paddr_alloc, addr, 1);  //因为内核空间为一一映射关系，虚拟地址即为物理地址,且不需要解除映射关系
   109c3:	83 ec 04             	sub    $0x4,%esp
   109c6:	6a 01                	push   $0x1
   109c8:	ff 75 08             	push   0x8(%ebp)
   109cb:	68 00 60 01 00       	push   $0x16000
   109d0:	e8 60 fa ff ff       	call   10435 <addr_free_page>
   109d5:	83 c4 10             	add    $0x10,%esp

    //3.将页表项清空，解除映射关系
    pte->v = 0;
  }

}
   109d8:	eb 72                	jmp    10a4c <memory_free_page+0x96>
    pte_t *pte = find_pte(curr_page_dir(), addr, 0);
   109da:	e8 c7 ff ff ff       	call   109a6 <curr_page_dir>
   109df:	83 ec 04             	sub    $0x4,%esp
   109e2:	6a 00                	push   $0x0
   109e4:	ff 75 08             	push   0x8(%ebp)
   109e7:	50                   	push   %eax
   109e8:	e8 46 fb ff ff       	call   10533 <find_pte>
   109ed:	83 c4 10             	add    $0x10,%esp
   109f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT(pte != (pte_t*)0 && pte->present);
   109f3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   109f7:	74 0d                	je     10a06 <memory_free_page+0x50>
   109f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109fc:	0f b6 00             	movzbl (%eax),%eax
   109ff:	83 e0 01             	and    $0x1,%eax
   10a02:	84 c0                	test   %al,%al
   10a04:	75 1c                	jne    10a22 <memory_free_page+0x6c>
   10a06:	68 04 3c 01 00       	push   $0x13c04
   10a0b:	68 48 3c 01 00       	push   $0x13c48
   10a10:	68 9e 01 00 00       	push   $0x19e
   10a15:	68 2c 3b 01 00       	push   $0x13b2c
   10a1a:	e8 e9 22 00 00       	call   12d08 <pannic>
   10a1f:	83 c4 10             	add    $0x10,%esp
    addr_free_page(&paddr_alloc, pte_to_pg_addr(pte), 1);
   10a22:	83 ec 0c             	sub    $0xc,%esp
   10a25:	ff 75 f4             	push   -0xc(%ebp)
   10a28:	e8 0c f9 ff ff       	call   10339 <pte_to_pg_addr>
   10a2d:	83 c4 10             	add    $0x10,%esp
   10a30:	83 ec 04             	sub    $0x4,%esp
   10a33:	6a 01                	push   $0x1
   10a35:	50                   	push   %eax
   10a36:	68 00 60 01 00       	push   $0x16000
   10a3b:	e8 f5 f9 ff ff       	call   10435 <addr_free_page>
   10a40:	83 c4 10             	add    $0x10,%esp
    pte->v = 0;
   10a43:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10a46:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   10a4c:	90                   	nop
   10a4d:	c9                   	leave  
   10a4e:	c3                   	ret    

00010a4f <list_node_init>:
    list_node_t * first;
    list_node_t * last;
    int size;
}list_t;

static inline void list_node_init(list_node_t *node) {
   10a4f:	55                   	push   %ebp
   10a50:	89 e5                	mov    %esp,%ebp
   10a52:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   10a55:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10a59:	75 19                	jne    10a74 <list_node_init+0x25>
   10a5b:	68 5c 3c 01 00       	push   $0x13c5c
   10a60:	68 48 3d 01 00       	push   $0x13d48
   10a65:	6a 20                	push   $0x20
   10a67:	68 74 3c 01 00       	push   $0x13c74
   10a6c:	e8 97 22 00 00       	call   12d08 <pannic>
   10a71:	83 c4 10             	add    $0x10,%esp
    node->pre = node->next = (list_node_t*)0;
   10a74:	8b 45 08             	mov    0x8(%ebp),%eax
   10a77:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   10a7e:	8b 45 08             	mov    0x8(%ebp),%eax
   10a81:	8b 50 04             	mov    0x4(%eax),%edx
   10a84:	8b 45 08             	mov    0x8(%ebp),%eax
   10a87:	89 10                	mov    %edx,(%eax)
}
   10a89:	90                   	nop
   10a8a:	c9                   	leave  
   10a8b:	c3                   	ret    

00010a8c <list_node_next>:
    ASSERT(node != (list_node_t*)0);

    return node->pre;
}

static inline list_node_t *list_node_next(list_node_t *node) {
   10a8c:	55                   	push   %ebp
   10a8d:	89 e5                	mov    %esp,%ebp
   10a8f:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   10a92:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10a96:	75 19                	jne    10ab1 <list_node_next+0x25>
   10a98:	68 5c 3c 01 00       	push   $0x13c5c
   10a9d:	68 b8 3d 01 00       	push   $0x13db8
   10aa2:	6a 2b                	push   $0x2b
   10aa4:	68 74 3c 01 00       	push   $0x13c74
   10aa9:	e8 5a 22 00 00       	call   12d08 <pannic>
   10aae:	83 c4 10             	add    $0x10,%esp

    return node->next;
   10ab1:	8b 45 08             	mov    0x8(%ebp),%eax
   10ab4:	8b 40 04             	mov    0x4(%eax),%eax
}
   10ab7:	c9                   	leave  
   10ab8:	c3                   	ret    

00010ab9 <list_init>:

static inline void list_init(list_t *list) {
   10ab9:	55                   	push   %ebp
   10aba:	89 e5                	mov    %esp,%ebp
   10abc:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10abf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10ac3:	75 19                	jne    10ade <list_init+0x25>
   10ac5:	68 b2 3c 01 00       	push   $0x13cb2
   10aca:	68 58 3d 01 00       	push   $0x13d58
   10acf:	6a 31                	push   $0x31
   10ad1:	68 74 3c 01 00       	push   $0x13c74
   10ad6:	e8 2d 22 00 00       	call   12d08 <pannic>
   10adb:	83 c4 10             	add    $0x10,%esp

    list->first = list->last = (list_node_t*)0;
   10ade:	8b 45 08             	mov    0x8(%ebp),%eax
   10ae1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   10ae8:	8b 45 08             	mov    0x8(%ebp),%eax
   10aeb:	8b 50 04             	mov    0x4(%eax),%edx
   10aee:	8b 45 08             	mov    0x8(%ebp),%eax
   10af1:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   10af3:	8b 45 08             	mov    0x8(%ebp),%eax
   10af6:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   10afd:	90                   	nop
   10afe:	c9                   	leave  
   10aff:	c3                   	ret    

00010b00 <list_is_empty>:

static inline int list_is_empty(list_t *list) {
   10b00:	55                   	push   %ebp
   10b01:	89 e5                	mov    %esp,%ebp
   10b03:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10b06:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10b0a:	75 19                	jne    10b25 <list_is_empty+0x25>
   10b0c:	68 b2 3c 01 00       	push   $0x13cb2
   10b11:	68 c8 3d 01 00       	push   $0x13dc8
   10b16:	6a 38                	push   $0x38
   10b18:	68 74 3c 01 00       	push   $0x13c74
   10b1d:	e8 e6 21 00 00       	call   12d08 <pannic>
   10b22:	83 c4 10             	add    $0x10,%esp

    return list->size == 0;
   10b25:	8b 45 08             	mov    0x8(%ebp),%eax
   10b28:	8b 40 08             	mov    0x8(%eax),%eax
   10b2b:	85 c0                	test   %eax,%eax
   10b2d:	0f 94 c0             	sete   %al
   10b30:	0f b6 c0             	movzbl %al,%eax
}
   10b33:	c9                   	leave  
   10b34:	c3                   	ret    

00010b35 <list_get_size>:

static inline int list_get_size(list_t *list) {
   10b35:	55                   	push   %ebp
   10b36:	89 e5                	mov    %esp,%ebp
   10b38:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10b3b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10b3f:	75 19                	jne    10b5a <list_get_size+0x25>
   10b41:	68 b2 3c 01 00       	push   $0x13cb2
   10b46:	68 a8 3d 01 00       	push   $0x13da8
   10b4b:	6a 3e                	push   $0x3e
   10b4d:	68 74 3c 01 00       	push   $0x13c74
   10b52:	e8 b1 21 00 00       	call   12d08 <pannic>
   10b57:	83 c4 10             	add    $0x10,%esp

    return list->size;
   10b5a:	8b 45 08             	mov    0x8(%ebp),%eax
   10b5d:	8b 40 08             	mov    0x8(%eax),%eax
}
   10b60:	c9                   	leave  
   10b61:	c3                   	ret    

00010b62 <list_get_first>:

static inline list_node_t *list_get_first(list_t *list) {
   10b62:	55                   	push   %ebp
   10b63:	89 e5                	mov    %esp,%ebp
   10b65:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10b68:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10b6c:	75 19                	jne    10b87 <list_get_first+0x25>
   10b6e:	68 b2 3c 01 00       	push   $0x13cb2
   10b73:	68 98 3d 01 00       	push   $0x13d98
   10b78:	6a 44                	push   $0x44
   10b7a:	68 74 3c 01 00       	push   $0x13c74
   10b7f:	e8 84 21 00 00       	call   12d08 <pannic>
   10b84:	83 c4 10             	add    $0x10,%esp

    return list->first;
   10b87:	8b 45 08             	mov    0x8(%ebp),%eax
   10b8a:	8b 00                	mov    (%eax),%eax
}
   10b8c:	c9                   	leave  
   10b8d:	c3                   	ret    

00010b8e <up2>:
static inline uint32_t up2(uint32_t size, uint32_t bound) {
   10b8e:	55                   	push   %ebp
   10b8f:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   10b91:	8b 55 08             	mov    0x8(%ebp),%edx
   10b94:	8b 45 0c             	mov    0xc(%ebp),%eax
   10b97:	01 d0                	add    %edx,%eax
   10b99:	8d 50 ff             	lea    -0x1(%eax),%edx
   10b9c:	8b 45 0c             	mov    0xc(%ebp),%eax
   10b9f:	f7 d8                	neg    %eax
   10ba1:	21 d0                	and    %edx,%eax
}
   10ba3:	5d                   	pop    %ebp
   10ba4:	c3                   	ret    

00010ba5 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   10ba5:	55                   	push   %ebp
   10ba6:	89 e5                	mov    %esp,%ebp
   10ba8:	f4                   	hlt    
   10ba9:	90                   	nop
   10baa:	5d                   	pop    %ebp
   10bab:	c3                   	ret    

00010bac <write_cr3>:
static inline void write_cr3(uint32_t data) {
   10bac:	55                   	push   %ebp
   10bad:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("mov %[v], %%cr3" : : [v] "r"(data));
   10baf:	8b 45 08             	mov    0x8(%ebp),%eax
   10bb2:	0f 22 d8             	mov    %eax,%cr3
}
   10bb5:	90                   	nop
   10bb6:	5d                   	pop    %ebp
   10bb7:	c3                   	ret    

00010bb8 <far_jump>:
 * @brief  远跳转，当跳转发生在TSS段之间时，cpu将会保存状态到当前TR寄存器指向的TSS段
 *
 * @param selector 选择子
 * @param offset 跳转的偏移量
 */
static inline void far_jump(uint32_t selector, uint32_t offset) {
   10bb8:	55                   	push   %ebp
   10bb9:	89 e5                	mov    %esp,%ebp
   10bbb:	83 ec 10             	sub    $0x10,%esp
  // 传入远跳转需要的参数, 即cs = selector, eip = offset 
  uint32_t addr[] = {offset, selector};  
   10bbe:	8b 45 0c             	mov    0xc(%ebp),%eax
   10bc1:	89 45 f8             	mov    %eax,-0x8(%ebp)
   10bc4:	8b 45 08             	mov    0x8(%ebp),%eax
   10bc7:	89 45 fc             	mov    %eax,-0x4(%ebp)

  __asm__ __volatile__("ljmpl *(%[a])" : : [a] "r"(addr));
   10bca:	8d 45 f8             	lea    -0x8(%ebp),%eax
   10bcd:	ff 28                	ljmp   *(%eax)
}
   10bcf:	90                   	nop
   10bd0:	c9                   	leave  
   10bd1:	c3                   	ret    

00010bd2 <write_tr>:
 * @brief   写入当前任务的TSS段描述符的选择子到TR寄存器中，告诉cpu当前段的TSS位置
 *          以便在进行任务切换时，将状态保存到该TSS段中
 * 
 * @param tss_selector 准备运行的任务的TSS段的选择子
 */
static inline void write_tr(uint16_t tss_selector) {
   10bd2:	55                   	push   %ebp
   10bd3:	89 e5                	mov    %esp,%ebp
   10bd5:	83 ec 04             	sub    $0x4,%esp
   10bd8:	8b 45 08             	mov    0x8(%ebp),%eax
   10bdb:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  __asm__ __volatile__("ltr %[v]" : : [v]"r"(tss_selector));
   10bdf:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   10be3:	0f 00 d8             	ltr    %ax
}
   10be6:	90                   	nop
   10be7:	c9                   	leave  
   10be8:	c3                   	ret    

00010be9 <mmu_set_page_dir>:
static inline void mmu_set_page_dir(uint32_t paddr) {
   10be9:	55                   	push   %ebp
   10bea:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   10bec:	ff 75 08             	push   0x8(%ebp)
   10bef:	e8 b8 ff ff ff       	call   10bac <write_cr3>
   10bf4:	83 c4 04             	add    $0x4,%esp
}
   10bf7:	90                   	nop
   10bf8:	c9                   	leave  
   10bf9:	c3                   	ret    

00010bfa <switch_to_tss>:
static task_t task_table[TASK_COUNT];
//定义用于维护task_table的互斥锁
static mutex_t task_table_lock;


static void switch_to_tss(uint16_t tss_selector) {
   10bfa:	55                   	push   %ebp
   10bfb:	89 e5                	mov    %esp,%ebp
   10bfd:	83 ec 04             	sub    $0x4,%esp
   10c00:	8b 45 08             	mov    0x8(%ebp),%eax
   10c03:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    //进行远跳转，让cpu访问该tss段的描述符，cpu将重启到之前运行该tss对应的任务的状态继续运行该任务
    far_jump(tss_selector, 0);
   10c07:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   10c0b:	6a 00                	push   $0x0
   10c0d:	50                   	push   %eax
   10c0e:	e8 a5 ff ff ff       	call   10bb8 <far_jump>
   10c13:	83 c4 08             	add    $0x8,%esp
}
   10c16:	90                   	nop
   10c17:	c9                   	leave  
   10c18:	c3                   	ret    

00010c19 <task_switch_from_to>:
 * @brief  将任务从from切换到to
 * 
 * @param from 切换前的任务
 * @param to 切换后的任务
 */
void task_switch_from_to(task_t *from, task_t *to) {
   10c19:	55                   	push   %ebp
   10c1a:	89 e5                	mov    %esp,%ebp
    //跳转到对应的tss段读取并恢复cpu任务状态
    switch_to_tss(to->tss_selector);
   10c1c:	8b 45 0c             	mov    0xc(%ebp),%eax
   10c1f:	8b 80 b8 00 00 00    	mov    0xb8(%eax),%eax
   10c25:	0f b7 c0             	movzwl %ax,%eax
   10c28:	50                   	push   %eax
   10c29:	e8 cc ff ff ff       	call   10bfa <switch_to_tss>
   10c2e:	83 c4 04             	add    $0x4,%esp
}
   10c31:	90                   	nop
   10c32:	c9                   	leave  
   10c33:	c3                   	ret    

00010c34 <tss_init>:
 * @param task 需要初始化的任务对象
 * @param entry 任务入口地址
 * @param esp 任务所用的栈顶指针
 * @param flag 任务属性标志位，如特权级
 */
static int tss_init(task_t *task, uint32_t entry, uint32_t esp, uint32_t flag) {
   10c34:	55                   	push   %ebp
   10c35:	89 e5                	mov    %esp,%ebp
   10c37:	83 ec 28             	sub    $0x28,%esp
   //1.将该TSS段绑定到GDT中的某个段描述符
    uint32_t tss_selector = gdt_alloc_desc();
   10c3a:	e8 84 0c 00 00       	call   118c3 <gdt_alloc_desc>
   10c3f:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (tss_selector < 0) {
        log_printf("alloc tss failed!");
        return -1;
    }
    segment_desc_set(tss_selector, (uint32_t)&task->tss, sizeof(task->tss), 
   10c42:	8b 45 08             	mov    0x8(%ebp),%eax
   10c45:	83 c0 50             	add    $0x50,%eax
   10c48:	89 c2                	mov    %eax,%edx
   10c4a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10c4d:	0f b7 c0             	movzwl %ax,%eax
   10c50:	68 89 00 00 00       	push   $0x89
   10c55:	6a 68                	push   $0x68
   10c57:	52                   	push   %edx
   10c58:	50                   	push   %eax
   10c59:	e8 f3 0a 00 00       	call   11751 <segment_desc_set>
   10c5e:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_TYPE_TSS);


    //2.将tss段的值置空
    kernel_memset(&task->tss, 0, sizeof(task->tss));
   10c61:	8b 45 08             	mov    0x8(%ebp),%eax
   10c64:	83 c0 50             	add    $0x50,%eax
   10c67:	83 ec 04             	sub    $0x4,%esp
   10c6a:	6a 68                	push   $0x68
   10c6c:	6a 00                	push   $0x0
   10c6e:	50                   	push   %eax
   10c6f:	e8 96 25 00 00       	call   1320a <kernel_memset>
   10c74:	83 c4 10             	add    $0x10,%esp

    //3.记录tss绑定到的描述符的选择子
    task->tss_selector = tss_selector;
   10c77:	8b 45 08             	mov    0x8(%ebp),%eax
   10c7a:	8b 55 ec             	mov    -0x14(%ebp),%edx
   10c7d:	89 90 b8 00 00 00    	mov    %edx,0xb8(%eax)


    //4.根据任务的特权级来设置对应选择子的cpl
    uint32_t code_selector, data_selector;
    if (flag & TASK_FLAGS_SYSTEM) { //内核特权级
   10c83:	8b 45 14             	mov    0x14(%ebp),%eax
   10c86:	83 e0 01             	and    $0x1,%eax
   10c89:	85 c0                	test   %eax,%eax
   10c8b:	74 10                	je     10c9d <tss_init+0x69>
        code_selector = KERNEL_SELECTOR_CS;
   10c8d:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%ebp)
        data_selector = KERNEL_SELECTOR_DS;
   10c94:	c7 45 f0 10 00 00 00 	movl   $0x10,-0x10(%ebp)
   10c9b:	eb 16                	jmp    10cb3 <tss_init+0x7f>
    } else {    //用户特权级
        //获取任务的代码段选择子和数据段选择子，并初始化其CPL,因为是平台模型，所以基本不涉及到跨段访问，所以不需要RPL
        code_selector = task_manager.app_code_selector | SEG_CPL3;
   10c9d:	a1 a0 81 01 00       	mov    0x181a0,%eax
   10ca2:	83 c8 03             	or     $0x3,%eax
   10ca5:	89 45 f4             	mov    %eax,-0xc(%ebp)
        data_selector = task_manager.app_data_selector | SEG_CPL3;
   10ca8:	a1 a4 81 01 00       	mov    0x181a4,%eax
   10cad:	83 c8 03             	or     $0x3,%eax
   10cb0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }


    //5.设置eip，即任务的起始地址
    task->tss.eip = entry;
   10cb3:	8b 45 08             	mov    0x8(%ebp),%eax
   10cb6:	8b 55 0c             	mov    0xc(%ebp),%edx
   10cb9:	89 50 70             	mov    %edx,0x70(%eax)

    //6.根据任务的特权级设置任务所使用的栈空间
    task->tss.esp =  esp;   //特权级为3的栈空间
   10cbc:	8b 45 08             	mov    0x8(%ebp),%eax
   10cbf:	8b 55 10             	mov    0x10(%ebp),%edx
   10cc2:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
    uint32_t kernel_stack = memory_alloc_page();  //分配一页作为内核特权级0的栈空间
   10cc8:	e8 b9 fc ff ff       	call   10986 <memory_alloc_page>
   10ccd:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (kernel_stack == 0) //内核栈空间初始化失败
   10cd0:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10cd4:	0f 84 9b 00 00 00    	je     10d75 <tss_init+0x141>
        goto tss_init_failed;   
    else task->tss.esp0 =  kernel_stack + MEM_PAGE_SIZE;//特权级为0的栈空间
   10cda:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10cdd:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edx
   10ce3:	8b 45 08             	mov    0x8(%ebp),%eax
   10ce6:	89 50 54             	mov    %edx,0x54(%eax)

    //7.平坦模型，初始化栈空间段寄存器
    task->tss.ss =  data_selector;  //特权级为3时使用的栈段
   10ce9:	8b 45 08             	mov    0x8(%ebp),%eax
   10cec:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10cef:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
    task->tss.ss0 = KERNEL_SELECTOR_DS; //特权级为0时使用的栈段，
   10cf5:	8b 45 08             	mov    0x8(%ebp),%eax
   10cf8:	c7 40 58 10 00 00 00 	movl   $0x10,0x58(%eax)
                                        //由于平坦模型，其实使用的是同一片空间，只是特权级发生了变化

    //8. 平坦模型，初始其余化段寄存器
    task->tss.es = task->tss.fs = task->tss.gs = task->tss.ds = data_selector;
   10cff:	8b 45 08             	mov    0x8(%ebp),%eax
   10d02:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10d05:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
   10d0b:	8b 45 08             	mov    0x8(%ebp),%eax
   10d0e:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
   10d14:	8b 45 08             	mov    0x8(%ebp),%eax
   10d17:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
   10d1d:	8b 45 08             	mov    0x8(%ebp),%eax
   10d20:	8b 90 ac 00 00 00    	mov    0xac(%eax),%edx
   10d26:	8b 45 08             	mov    0x8(%ebp),%eax
   10d29:	89 90 a8 00 00 00    	mov    %edx,0xa8(%eax)
   10d2f:	8b 45 08             	mov    0x8(%ebp),%eax
   10d32:	8b 90 a8 00 00 00    	mov    0xa8(%eax),%edx
   10d38:	8b 45 08             	mov    0x8(%ebp),%eax
   10d3b:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)

    //9.平坦模型，初始化代码段寄存器
    task->tss.cs = code_selector;
   10d41:	8b 45 08             	mov    0x8(%ebp),%eax
   10d44:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10d47:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)

    //10.初始化eflags寄存器，使cpu中断保持开启
    task->tss.eflags = EFLAGS_DEFAULT_1 | EFLAGS_IF;
   10d4d:	8b 45 08             	mov    0x8(%ebp),%eax
   10d50:	c7 40 74 02 02 00 00 	movl   $0x202,0x74(%eax)

    //11.创建当前进程的虚拟页目录表，并设置cr3寄存器
    uint32_t page_dir = memory_creat_uvm();
   10d57:	e8 c6 f9 ff ff       	call   10722 <memory_creat_uvm>
   10d5c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (page_dir == 0) 
   10d5f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10d63:	74 13                	je     10d78 <tss_init+0x144>
        goto tss_init_failed;
    task->tss.cr3 = page_dir;
   10d65:	8b 45 08             	mov    0x8(%ebp),%eax
   10d68:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   10d6b:	89 50 6c             	mov    %edx,0x6c(%eax)
    
    return 0;
   10d6e:	b8 00 00 00 00       	mov    $0x0,%eax
   10d73:	eb 2f                	jmp    10da4 <tss_init+0x170>
        goto tss_init_failed;   
   10d75:	90                   	nop
   10d76:	eb 01                	jmp    10d79 <tss_init+0x145>
        goto tss_init_failed;
   10d78:	90                   	nop

//tss初始化失败
tss_init_failed:
    gdt_free(tss_selector);  //释放选择子
   10d79:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10d7c:	0f b7 c0             	movzwl %ax,%eax
   10d7f:	83 ec 0c             	sub    $0xc,%esp
   10d82:	50                   	push   %eax
   10d83:	e8 b0 0b 00 00       	call   11938 <gdt_free>
   10d88:	83 c4 10             	add    $0x10,%esp

    if (kernel_stack) { //内核栈空间分配有效，需要释放
   10d8b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10d8f:	74 0e                	je     10d9f <tss_init+0x16b>
        memory_free_page(kernel_stack);
   10d91:	83 ec 0c             	sub    $0xc,%esp
   10d94:	ff 75 e8             	push   -0x18(%ebp)
   10d97:	e8 1a fc ff ff       	call   109b6 <memory_free_page>
   10d9c:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   10d9f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10da4:	c9                   	leave  
   10da5:	c3                   	ret    

00010da6 <task_init>:
 * @param entry 任务的入口地址
 * @param esp 任务指行时所用的栈顶指针
 * @param flag 任务属性标志位，如特权级
 * @return int 
 */
int task_init(task_t *task, const char* name, uint32_t entry, uint32_t esp, uint32_t flag) {
   10da6:	55                   	push   %ebp
   10da7:	89 e5                	mov    %esp,%ebp
   10da9:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t*)0);
   10dac:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10db0:	75 1c                	jne    10dce <task_init+0x28>
   10db2:	68 c5 3c 01 00       	push   $0x13cc5
   10db7:	68 3c 3d 01 00       	push   $0x13d3c
   10dbc:	68 8b 00 00 00       	push   $0x8b
   10dc1:	68 d8 3c 01 00       	push   $0x13cd8
   10dc6:	e8 3d 1f 00 00       	call   12d08 <pannic>
   10dcb:	83 c4 10             	add    $0x10,%esp
    //1.初始化任务TSS段
    int err = tss_init(task, entry, esp, flag);
   10dce:	ff 75 18             	push   0x18(%ebp)
   10dd1:	ff 75 14             	push   0x14(%ebp)
   10dd4:	ff 75 10             	push   0x10(%ebp)
   10dd7:	ff 75 08             	push   0x8(%ebp)
   10dda:	e8 55 fe ff ff       	call   10c34 <tss_init>
   10ddf:	83 c4 10             	add    $0x10,%esp
   10de2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (err == -1)
   10de5:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
   10de9:	75 08                	jne    10df3 <task_init+0x4d>
        return err;
   10deb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10dee:	e9 c9 00 00 00       	jmp    10ebc <task_init+0x116>
    

    //2.初始化任务名称
    kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   10df3:	8b 45 08             	mov    0x8(%ebp),%eax
   10df6:	83 c0 18             	add    $0x18,%eax
   10df9:	83 ec 04             	sub    $0x4,%esp
   10dfc:	6a 20                	push   $0x20
   10dfe:	ff 75 0c             	push   0xc(%ebp)
   10e01:	50                   	push   %eax
   10e02:	e8 c4 22 00 00       	call   130cb <kernel_strncpy>
   10e07:	83 c4 10             	add    $0x10,%esp

    //3.初始化任务队列节点及就绪队列节点
    list_node_init(&task->ready_node);
   10e0a:	8b 45 08             	mov    0x8(%ebp),%eax
   10e0d:	83 c0 38             	add    $0x38,%eax
   10e10:	83 ec 0c             	sub    $0xc,%esp
   10e13:	50                   	push   %eax
   10e14:	e8 36 fc ff ff       	call   10a4f <list_node_init>
   10e19:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->task_node);
   10e1c:	8b 45 08             	mov    0x8(%ebp),%eax
   10e1f:	83 c0 40             	add    $0x40,%eax
   10e22:	83 ec 0c             	sub    $0xc,%esp
   10e25:	50                   	push   %eax
   10e26:	e8 24 fc ff ff       	call   10a4f <list_node_init>
   10e2b:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   10e2e:	8b 45 08             	mov    0x8(%ebp),%eax
   10e31:	83 c0 48             	add    $0x48,%eax
   10e34:	83 ec 0c             	sub    $0xc,%esp
   10e37:	50                   	push   %eax
   10e38:	e8 12 fc ff ff       	call   10a4f <list_node_init>
   10e3d:	83 c4 10             	add    $0x10,%esp

    //4.初始化最大时间片数与当前拥有时间片数,以及延时时间片数
    task->state = TASK_CREATED;
   10e40:	8b 45 08             	mov    0x8(%ebp),%eax
   10e43:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    task->slice_max = task->slice_curr = TASK_TIME_SLICE_DEFAULT;
   10e49:	8b 45 08             	mov    0x8(%ebp),%eax
   10e4c:	c7 40 10 0a 00 00 00 	movl   $0xa,0x10(%eax)
   10e53:	8b 45 08             	mov    0x8(%ebp),%eax
   10e56:	8b 50 10             	mov    0x10(%eax),%edx
   10e59:	8b 45 08             	mov    0x8(%ebp),%eax
   10e5c:	89 50 0c             	mov    %edx,0xc(%eax)
    task->sleep = 0;
   10e5f:	8b 45 08             	mov    0x8(%ebp),%eax
   10e62:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    task->pid = (uint32_t)task;
   10e69:	8b 55 08             	mov    0x8(%ebp),%edx
   10e6c:	8b 45 08             	mov    0x8(%ebp),%eax
   10e6f:	89 50 08             	mov    %edx,0x8(%eax)
    task->parent = (task_t*)0;
   10e72:	8b 45 08             	mov    0x8(%ebp),%eax
   10e75:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    
    idt_state_t state = idt_enter_protection();//TODO:加锁
   10e7c:	e8 6d 14 00 00       	call   122ee <idt_enter_protection>
   10e81:	89 45 f0             	mov    %eax,-0x10(%ebp)
   
    //5.将任务加入任务队列
    list_insert_last(&task_manager.task_list, &task->task_node);
   10e84:	8b 45 08             	mov    0x8(%ebp),%eax
   10e87:	83 c0 40             	add    $0x40,%eax
   10e8a:	83 ec 08             	sub    $0x8,%esp
   10e8d:	50                   	push   %eax
   10e8e:	68 10 80 01 00       	push   $0x18010
   10e93:	e8 bb 27 00 00       	call   13653 <list_insert_last>
   10e98:	83 c4 10             	add    $0x10,%esp

    //6.将任务设置为就绪态
    task_set_ready(task);
   10e9b:	83 ec 0c             	sub    $0xc,%esp
   10e9e:	ff 75 08             	push   0x8(%ebp)
   10ea1:	e8 85 02 00 00       	call   1112b <task_set_ready>
   10ea6:	83 c4 10             	add    $0x10,%esp

    
    idt_leave_protection(state);//TODO:解锁
   10ea9:	83 ec 0c             	sub    $0xc,%esp
   10eac:	ff 75 f0             	push   -0x10(%ebp)
   10eaf:	e8 52 14 00 00       	call   12306 <idt_leave_protection>
   10eb4:	83 c4 10             	add    $0x10,%esp

    return 1;
   10eb7:	b8 01 00 00 00       	mov    $0x1,%eax
}
   10ebc:	c9                   	leave  
   10ebd:	c3                   	ret    

00010ebe <task_uninit>:
/**
 * @brief 反初始化任务对象，释放对应的资源
 * 
 * @param task 
 */
void task_uninit(task_t *task) {
   10ebe:	55                   	push   %ebp
   10ebf:	89 e5                	mov    %esp,%ebp
   10ec1:	83 ec 08             	sub    $0x8,%esp
    if (task->tss_selector) {   //释放已分配的选择子
   10ec4:	8b 45 08             	mov    0x8(%ebp),%eax
   10ec7:	8b 80 b8 00 00 00    	mov    0xb8(%eax),%eax
   10ecd:	85 c0                	test   %eax,%eax
   10ecf:	74 18                	je     10ee9 <task_uninit+0x2b>
        gdt_free(task->tss_selector);
   10ed1:	8b 45 08             	mov    0x8(%ebp),%eax
   10ed4:	8b 80 b8 00 00 00    	mov    0xb8(%eax),%eax
   10eda:	0f b7 c0             	movzwl %ax,%eax
   10edd:	83 ec 0c             	sub    $0xc,%esp
   10ee0:	50                   	push   %eax
   10ee1:	e8 52 0a 00 00       	call   11938 <gdt_free>
   10ee6:	83 c4 10             	add    $0x10,%esp
    }

    if (task->tss.esp0) {   //释放已分配的内核栈空间
   10ee9:	8b 45 08             	mov    0x8(%ebp),%eax
   10eec:	8b 40 54             	mov    0x54(%eax),%eax
   10eef:	85 c0                	test   %eax,%eax
   10ef1:	74 17                	je     10f0a <task_uninit+0x4c>
        memory_free_page((uint32_t)(task->tss.esp0 - MEM_PAGE_SIZE));
   10ef3:	8b 45 08             	mov    0x8(%ebp),%eax
   10ef6:	8b 40 54             	mov    0x54(%eax),%eax
   10ef9:	2d 00 10 00 00       	sub    $0x1000,%eax
   10efe:	83 ec 0c             	sub    $0xc,%esp
   10f01:	50                   	push   %eax
   10f02:	e8 af fa ff ff       	call   109b6 <memory_free_page>
   10f07:	83 c4 10             	add    $0x10,%esp
    }

    if (task->tss.cr3) {    //释放为页目录分配的页空间及其映射关系
   10f0a:	8b 45 08             	mov    0x8(%ebp),%eax
   10f0d:	8b 40 6c             	mov    0x6c(%eax),%eax
   10f10:	85 c0                	test   %eax,%eax
   10f12:	74 12                	je     10f26 <task_uninit+0x68>
        memory_destroy_uvm(task->tss.cr3);
   10f14:	8b 45 08             	mov    0x8(%ebp),%eax
   10f17:	8b 40 6c             	mov    0x6c(%eax),%eax
   10f1a:	83 ec 0c             	sub    $0xc,%esp
   10f1d:	50                   	push   %eax
   10f1e:	e8 8a f8 ff ff       	call   107ad <memory_destroy_uvm>
   10f23:	83 c4 10             	add    $0x10,%esp
    }

    kernel_memset(task, 0, sizeof(task_t));
   10f26:	83 ec 04             	sub    $0x4,%esp
   10f29:	68 bc 00 00 00       	push   $0xbc
   10f2e:	6a 00                	push   $0x0
   10f30:	ff 75 08             	push   0x8(%ebp)
   10f33:	e8 d2 22 00 00       	call   1320a <kernel_memset>
   10f38:	83 c4 10             	add    $0x10,%esp
}
   10f3b:	90                   	nop
   10f3c:	c9                   	leave  
   10f3d:	c3                   	ret    

00010f3e <empty_task>:
static uint32_t empty_task_stack[EMPTY_TASK_STACK_SIZE];
/**
 * @brief  空闲进程，当所有进程都延时运行时，让cpu运行空闲进程
 * 
 */
static void empty_task(void) {
   10f3e:	55                   	push   %ebp
   10f3f:	89 e5                	mov    %esp,%ebp

    while(1) {
        //停止cpu运行，让cpu等待时间中断
        hlt();
   10f41:	e8 5f fc ff ff       	call   10ba5 <hlt>
   10f46:	eb f9                	jmp    10f41 <empty_task+0x3>

00010f48 <task_manager_init>:

/**
 * @brief  初始化任务管理器
 * 
 */
void task_manager_init(void) {
   10f48:	55                   	push   %ebp
   10f49:	89 e5                	mov    %esp,%ebp
   10f4b:	83 ec 18             	sub    $0x18,%esp
    //1.初始化应用程序及所有任务的代码段选择子和数据段选择子，以区分和内核选择子的特权级
    //应用程序运行在 DPL_3 下， 内核运行在DPL_0下，配合分页机制中的us位，0为内核特权级，1为用户特权级
    //就可做到特权级保护
    uint32_t data_selector = gdt_alloc_desc();
   10f4e:	e8 70 09 00 00       	call   118c3 <gdt_alloc_desc>
   10f53:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t code_selector = gdt_alloc_desc();
   10f56:	e8 68 09 00 00       	call   118c3 <gdt_alloc_desc>
   10f5b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    segment_desc_set(data_selector, 0, 0xffffffff, SEG_ATTR_P | SEG_ATTR_DPL_3 | SEG_ATTR_S_NORMAL | SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);
   10f5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f61:	0f b7 c0             	movzwl %ax,%eax
   10f64:	68 f2 40 00 00       	push   $0x40f2
   10f69:	6a ff                	push   $0xffffffff
   10f6b:	6a 00                	push   $0x0
   10f6d:	50                   	push   %eax
   10f6e:	e8 de 07 00 00       	call   11751 <segment_desc_set>
   10f73:	83 c4 10             	add    $0x10,%esp
    segment_desc_set(code_selector, 0, 0xffffffff, SEG_ATTR_P | SEG_ATTR_DPL_3 | SEG_ATTR_S_NORMAL | SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);
   10f76:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10f79:	0f b7 c0             	movzwl %ax,%eax
   10f7c:	68 fa 40 00 00       	push   $0x40fa
   10f81:	6a ff                	push   $0xffffffff
   10f83:	6a 00                	push   $0x0
   10f85:	50                   	push   %eax
   10f86:	e8 c6 07 00 00       	call   11751 <segment_desc_set>
   10f8b:	83 c4 10             	add    $0x10,%esp
    task_manager.app_code_selector = code_selector;
   10f8e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10f91:	a3 a0 81 01 00       	mov    %eax,0x181a0
    task_manager.app_data_selector = data_selector;
   10f96:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f99:	a3 a4 81 01 00       	mov    %eax,0x181a4
    
    //2.初始化所有任务队列
    list_init(&task_manager.ready_list);
   10f9e:	83 ec 0c             	sub    $0xc,%esp
   10fa1:	68 04 80 01 00       	push   $0x18004
   10fa6:	e8 0e fb ff ff       	call   10ab9 <list_init>
   10fab:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   10fae:	83 ec 0c             	sub    $0xc,%esp
   10fb1:	68 10 80 01 00       	push   $0x18010
   10fb6:	e8 fe fa ff ff       	call   10ab9 <list_init>
   10fbb:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   10fbe:	83 ec 0c             	sub    $0xc,%esp
   10fc1:	68 1c 80 01 00       	push   $0x1801c
   10fc6:	e8 ee fa ff ff       	call   10ab9 <list_init>
   10fcb:	83 c4 10             	add    $0x10,%esp

    //3.将当前任务置零
    task_manager.curr_task = (task_t*)0;
   10fce:	c7 05 00 80 01 00 00 	movl   $0x0,0x18000
   10fd5:	00 00 00 

    //4.初始化空闲进程
    task_init(  &task_manager.empty_task,
   10fd8:	ba e0 e1 01 00       	mov    $0x1e1e0,%edx
   10fdd:	b8 3e 0f 01 00       	mov    $0x10f3e,%eax
   10fe2:	83 ec 0c             	sub    $0xc,%esp
   10fe5:	6a 01                	push   $0x1
   10fe7:	52                   	push   %edx
   10fe8:	50                   	push   %eax
   10fe9:	68 0d 3d 01 00       	push   $0x13d0d
   10fee:	68 e4 80 01 00       	push   $0x180e4
   10ff3:	e8 ae fd ff ff       	call   10da6 <task_init>
   10ff8:	83 c4 20             	add    $0x20,%esp
                 (uint32_t)empty_task,
                 (uint32_t)&empty_task_stack[EMPTY_TASK_STACK_SIZE], TASK_FLAGS_SYSTEM);
                 

    //5.将空闲进程从就绪队列中取出
    task_set_unready(&task_manager.empty_task);
   10ffb:	83 ec 0c             	sub    $0xc,%esp
   10ffe:	68 e4 80 01 00       	push   $0x180e4
   11003:	e8 6e 01 00 00       	call   11176 <task_set_unready>
   11008:	83 c4 10             	add    $0x10,%esp
    task_manager.empty_task.state = TASK_CREATED;
   1100b:	c7 05 e4 80 01 00 00 	movl   $0x0,0x180e4
   11012:	00 00 00 


    //6.初始化静态任务表,及其互斥锁
    kernel_memset(task_table, 0, sizeof(task_table));
   11015:	83 ec 04             	sub    $0x4,%esp
   11018:	68 00 5e 00 00       	push   $0x5e00
   1101d:	6a 00                	push   $0x0
   1101f:	68 c0 81 01 00       	push   $0x181c0
   11024:	e8 e1 21 00 00       	call   1320a <kernel_memset>
   11029:	83 c4 10             	add    $0x10,%esp
    mutex_init(&task_table_lock);
   1102c:	83 ec 0c             	sub    $0xc,%esp
   1102f:	68 c0 df 01 00       	push   $0x1dfc0
   11034:	e8 ba 15 00 00       	call   125f3 <mutex_init>
   11039:	83 c4 10             	add    $0x10,%esp

  
}
   1103c:	90                   	nop
   1103d:	c9                   	leave  
   1103e:	c3                   	ret    

0001103f <task_first_init>:
 *     页目录表 = 1页
 * ------------------
 * 内核0特权级栈 = 1页
 * ------------------
 */
void task_first_init(void) {
   1103f:	55                   	push   %ebp
   11040:	89 e5                	mov    %esp,%ebp
   11042:	83 ec 18             	sub    $0x18,%esp
    //1.声明第一个任务的符号
    void first_task_entry(void);

    //2.确定第一个任务进程需要的空间大小
    extern char s_first_task, e_first_task;
    uint32_t copy_size = (uint32_t)(&e_first_task - &s_first_task);   //进程所需空间大小
   11045:	b8 24 31 03 00       	mov    $0x33124,%eax
   1104a:	2d 00 30 03 00       	sub    $0x33000,%eax
   1104f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t alloc_size = up2(copy_size, MEM_PAGE_SIZE) + 10 * MEM_PAGE_SIZE;   //需要为进程分配的内存大小，按4kb对齐,并多拿五页当作栈空间
   11052:	68 00 10 00 00       	push   $0x1000
   11057:	ff 75 f4             	push   -0xc(%ebp)
   1105a:	e8 2f fb ff ff       	call   10b8e <up2>
   1105f:	83 c4 08             	add    $0x8,%esp
   11062:	05 00 a0 00 00       	add    $0xa000,%eax
   11067:	89 45 f0             	mov    %eax,-0x10(%ebp)
    ASSERT(copy_size < alloc_size);
   1106a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1106d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
   11070:	72 1c                	jb     1108e <task_first_init+0x4f>
   11072:	68 18 3d 01 00       	push   $0x13d18
   11077:	68 64 3d 01 00       	push   $0x13d64
   1107c:	68 2f 01 00 00       	push   $0x12f
   11081:	68 d8 3c 01 00       	push   $0x13cd8
   11086:	e8 7d 1c 00 00       	call   12d08 <pannic>
   1108b:	83 c4 10             	add    $0x10,%esp

    uint32_t task_start = (uint32_t)first_task_entry;
   1108e:	c7 45 ec 00 00 00 80 	movl   $0x80000000,-0x14(%ebp)

    //3.初始化第一个任务,因为当前为操作系统进程，esp初始值随意赋值都可，
    // 因为当前进程已开启，cpu会在切换的时候保留真实的状态，即真实的esp值
    task_init(&task_manager.first_task, "first task", task_start, task_start + alloc_size, TASK_FLAGS_USER);
   11095:	8b 55 ec             	mov    -0x14(%ebp),%edx
   11098:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1109b:	01 d0                	add    %edx,%eax
   1109d:	83 ec 0c             	sub    $0xc,%esp
   110a0:	6a 00                	push   $0x0
   110a2:	50                   	push   %eax
   110a3:	ff 75 ec             	push   -0x14(%ebp)
   110a6:	68 2f 3d 01 00       	push   $0x13d2f
   110ab:	68 28 80 01 00       	push   $0x18028
   110b0:	e8 f1 fc ff ff       	call   10da6 <task_init>
   110b5:	83 c4 20             	add    $0x20,%esp
      
    //4.将当前任务的TSS选择子告诉cpu，用来切换任务时保存状态
    write_tr(task_manager.first_task.tss_selector);
   110b8:	a1 e0 80 01 00       	mov    0x180e0,%eax
   110bd:	0f b7 c0             	movzwl %ax,%eax
   110c0:	83 ec 0c             	sub    $0xc,%esp
   110c3:	50                   	push   %eax
   110c4:	e8 09 fb ff ff       	call   10bd2 <write_tr>
   110c9:	83 c4 10             	add    $0x10,%esp

    //5.将当前任务执行第一个任务
    task_manager.curr_task = &task_manager.first_task;
   110cc:	c7 05 00 80 01 00 28 	movl   $0x18028,0x18000
   110d3:	80 01 00 

    //6.将当前页表设置为第一个任务的页表
    mmu_set_page_dir(task_manager.first_task.tss.cr3);
   110d6:	a1 94 80 01 00       	mov    0x18094,%eax
   110db:	83 ec 0c             	sub    $0xc,%esp
   110de:	50                   	push   %eax
   110df:	e8 05 fb ff ff       	call   10be9 <mmu_set_page_dir>
   110e4:	83 c4 10             	add    $0x10,%esp

    //7.将当前任务状态设置为运行态
    task_manager.curr_task->state = TASK_RUNNING;
   110e7:	a1 00 80 01 00       	mov    0x18000,%eax
   110ec:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

    //8.进程的各个段还只是在虚拟地址中，所以要为各个段分配物理地址页空间，并进行映射
    memory_alloc_page_for(task_start, alloc_size, PTE_P | PTE_W | PTE_U);
   110f2:	83 ec 04             	sub    $0x4,%esp
   110f5:	6a 07                	push   $0x7
   110f7:	ff 75 f0             	push   -0x10(%ebp)
   110fa:	ff 75 ec             	push   -0x14(%ebp)
   110fd:	e8 62 f8 ff ff       	call   10964 <memory_alloc_page_for>
   11102:	83 c4 10             	add    $0x10,%esp

    //9.将任务进程各个段从内核四个段之后的紧邻位置，拷贝到已分配好的且与虚拟地址对应的物理地址空间，实现代码隔离
    kernel_memcpy(first_task_entry, &s_first_task, alloc_size);
   11105:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11108:	83 ec 04             	sub    $0x4,%esp
   1110b:	50                   	push   %eax
   1110c:	68 00 30 03 00       	push   $0x33000
   11111:	68 00 00 00 80       	push   $0x80000000
   11116:	e8 a0 20 00 00       	call   131bb <kernel_memcpy>
   1111b:	83 c4 10             	add    $0x10,%esp
}
   1111e:	90                   	nop
   1111f:	c9                   	leave  
   11120:	c3                   	ret    

00011121 <task_first_task>:
/**
 * @brief  获取当前任务管理器的第一个任务
 * 
 * @return task_t* 
 */
task_t *task_first_task(void) {
   11121:	55                   	push   %ebp
   11122:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   11124:	b8 28 80 01 00       	mov    $0x18028,%eax
}
   11129:	5d                   	pop    %ebp
   1112a:	c3                   	ret    

0001112b <task_set_ready>:
/**
 * @brief  将任务task加入就绪队列
 * 
 * @param task 需要加入就绪队列的任务
 */
void task_set_ready(task_t *task) {
   1112b:	55                   	push   %ebp
   1112c:	89 e5                	mov    %esp,%ebp
   1112e:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   11131:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11135:	75 1c                	jne    11153 <task_set_ready+0x28>
   11137:	68 c5 3c 01 00       	push   $0x13cc5
   1113c:	68 74 3d 01 00       	push   $0x13d74
   11141:	68 59 01 00 00       	push   $0x159
   11146:	68 d8 3c 01 00       	push   $0x13cd8
   1114b:	e8 b8 1b 00 00       	call   12d08 <pannic>
   11150:	83 c4 10             	add    $0x10,%esp
    //1.将任务插入到就绪队列的尾部
    list_insert_last(&task_manager.ready_list, &task->ready_node);
   11153:	8b 45 08             	mov    0x8(%ebp),%eax
   11156:	83 c0 38             	add    $0x38,%eax
   11159:	83 ec 08             	sub    $0x8,%esp
   1115c:	50                   	push   %eax
   1115d:	68 04 80 01 00       	push   $0x18004
   11162:	e8 ec 24 00 00       	call   13653 <list_insert_last>
   11167:	83 c4 10             	add    $0x10,%esp

    //2.将任务状态设置为就绪态
    task->state = TASK_READY;
   1116a:	8b 45 08             	mov    0x8(%ebp),%eax
   1116d:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
}
   11173:	90                   	nop
   11174:	c9                   	leave  
   11175:	c3                   	ret    

00011176 <task_set_unready>:
/**
 * @brief  将任务task从就绪队列中取下
 * 
 * @param task 
 */
void task_set_unready(task_t *task) {
   11176:	55                   	push   %ebp
   11177:	89 e5                	mov    %esp,%ebp
   11179:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   1117c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11180:	75 1c                	jne    1119e <task_set_unready+0x28>
   11182:	68 c5 3c 01 00       	push   $0x13cc5
   11187:	68 84 3d 01 00       	push   $0x13d84
   1118c:	68 68 01 00 00       	push   $0x168
   11191:	68 d8 3c 01 00       	push   $0x13cd8
   11196:	e8 6d 1b 00 00       	call   12d08 <pannic>
   1119b:	83 c4 10             	add    $0x10,%esp
    list_remove(&task_manager.ready_list, &task->ready_node);
   1119e:	8b 45 08             	mov    0x8(%ebp),%eax
   111a1:	83 c0 38             	add    $0x38,%eax
   111a4:	83 ec 08             	sub    $0x8,%esp
   111a7:	50                   	push   %eax
   111a8:	68 04 80 01 00       	push   $0x18004
   111ad:	e8 96 26 00 00       	call   13848 <list_remove>
   111b2:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   111b5:	8b 45 08             	mov    0x8(%ebp),%eax
   111b8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   111be:	90                   	nop
   111bf:	c9                   	leave  
   111c0:	c3                   	ret    

000111c1 <task_ready_first>:

/**
 * @brief  获取就绪队列中的第一个任务
 * 
 */
task_t* task_ready_first(void) {
   111c1:	55                   	push   %ebp
   111c2:	89 e5                	mov    %esp,%ebp
   111c4:	83 ec 18             	sub    $0x18,%esp
    list_node_t *ready_node = list_get_first(&task_manager.ready_list);
   111c7:	83 ec 0c             	sub    $0xc,%esp
   111ca:	68 04 80 01 00       	push   $0x18004
   111cf:	e8 8e f9 ff ff       	call   10b62 <list_get_first>
   111d4:	83 c4 10             	add    $0x10,%esp
   111d7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    return list_node_parent(ready_node, task_t, ready_node);
   111da:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   111de:	74 08                	je     111e8 <task_ready_first+0x27>
   111e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   111e3:	83 e8 38             	sub    $0x38,%eax
   111e6:	eb 05                	jmp    111ed <task_ready_first+0x2c>
   111e8:	b8 00 00 00 00       	mov    $0x0,%eax
}
   111ed:	c9                   	leave  
   111ee:	c3                   	ret    

000111ef <task_current>:
/**
 * @brief  获取当前正在运行的任务
 * 
 * @return task_t* 
 */
task_t *task_current(void) {
   111ef:	55                   	push   %ebp
   111f0:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   111f2:	a1 00 80 01 00       	mov    0x18000,%eax
}
   111f7:	5d                   	pop    %ebp
   111f8:	c3                   	ret    

000111f9 <task_switch>:

/**
 * @brief  任务管理器进行任务切换
 * 
 */
void task_switch(void) {
   111f9:	55                   	push   %ebp
   111fa:	89 e5                	mov    %esp,%ebp
   111fc:	83 ec 18             	sub    $0x18,%esp

    idt_state_t state = idt_enter_protection();//TODO:加锁
   111ff:	e8 ea 10 00 00       	call   122ee <idt_enter_protection>
   11204:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //1.获取就绪队列中的第一个任务
    task_t *to = task_ready_first();
   11207:	e8 b5 ff ff ff       	call   111c1 <task_ready_first>
   1120c:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.若获取到的任务不是当前任务就进行切换
    if (to != task_manager.curr_task) {
   1120f:	a1 00 80 01 00       	mov    0x18000,%eax
   11214:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   11217:	74 37                	je     11250 <task_switch+0x57>
        //3.获取当前任务
        task_t *from = task_manager.curr_task;
   11219:	a1 00 80 01 00       	mov    0x18000,%eax
   1121e:	89 45 ec             	mov    %eax,-0x14(%ebp)

        //4.目标任务若为空，则所有任务都在延时，让cpu运行空闲任务
        if (to == (task_t*)0) { 
   11221:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11225:	75 07                	jne    1122e <task_switch+0x35>
            to = &task_manager.empty_task;
   11227:	c7 45 f4 e4 80 01 00 	movl   $0x180e4,-0xc(%ebp)
        }
        //5.切换当前任务, 并将当前任务置为运行态
        to->state = TASK_RUNNING;
   1122e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11231:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        task_manager.curr_task = to;
   11237:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1123a:	a3 00 80 01 00       	mov    %eax,0x18000
        

        //6.进行任务切换
        task_switch_from_to(from, to);
   1123f:	83 ec 08             	sub    $0x8,%esp
   11242:	ff 75 f4             	push   -0xc(%ebp)
   11245:	ff 75 ec             	push   -0x14(%ebp)
   11248:	e8 cc f9 ff ff       	call   10c19 <task_switch_from_to>
   1124d:	83 c4 10             	add    $0x10,%esp
    } 

    idt_leave_protection(state);//TODO:解锁
   11250:	83 ec 0c             	sub    $0xc,%esp
   11253:	ff 75 f0             	push   -0x10(%ebp)
   11256:	e8 ab 10 00 00       	call   12306 <idt_leave_protection>
   1125b:	83 c4 10             	add    $0x10,%esp
}
   1125e:	90                   	nop
   1125f:	c9                   	leave  
   11260:	c3                   	ret    

00011261 <sys_yield>:
/**
 * @brief  使当前正在运行的任务主动让出cpu
 * 
 * @return int 
 */
int sys_yield(void) {
   11261:	55                   	push   %ebp
   11262:	89 e5                	mov    %esp,%ebp
   11264:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   11267:	e8 82 10 00 00       	call   122ee <idt_enter_protection>
   1126c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    //1.判断当前就绪队列中是否有多个任务
    if (list_get_size(&task_manager.ready_list) > 1) {
   1126f:	83 ec 0c             	sub    $0xc,%esp
   11272:	68 04 80 01 00       	push   $0x18004
   11277:	e8 b9 f8 ff ff       	call   10b35 <list_get_size>
   1127c:	83 c4 10             	add    $0x10,%esp
   1127f:	83 f8 01             	cmp    $0x1,%eax
   11282:	7e 29                	jle    112ad <sys_yield+0x4c>
        //2.获取当前任务  
        task_t *curr_task = task_current();
   11284:	e8 66 ff ff ff       	call   111ef <task_current>
   11289:	89 45 f0             	mov    %eax,-0x10(%ebp)
        
        //3.将当前任务从就绪队列中取下
        task_set_unready(curr_task);
   1128c:	83 ec 0c             	sub    $0xc,%esp
   1128f:	ff 75 f0             	push   -0x10(%ebp)
   11292:	e8 df fe ff ff       	call   11176 <task_set_unready>
   11297:	83 c4 10             	add    $0x10,%esp

        //4.将当前任务重新加入到就绪队列的队尾
        task_set_ready(curr_task);
   1129a:	83 ec 0c             	sub    $0xc,%esp
   1129d:	ff 75 f0             	push   -0x10(%ebp)
   112a0:	e8 86 fe ff ff       	call   1112b <task_set_ready>
   112a5:	83 c4 10             	add    $0x10,%esp

        //5.任务管理器运行下一个任务，从而释放cpu使用权
        task_switch();
   112a8:	e8 4c ff ff ff       	call   111f9 <task_switch>
    }
    
    idt_leave_protection(state);//TODO:解锁
   112ad:	83 ec 0c             	sub    $0xc,%esp
   112b0:	ff 75 f4             	push   -0xc(%ebp)
   112b3:	e8 4e 10 00 00       	call   12306 <idt_leave_protection>
   112b8:	83 c4 10             	add    $0x10,%esp
    return 0;
   112bb:	b8 00 00 00 00       	mov    $0x0,%eax
}
   112c0:	c9                   	leave  
   112c1:	c3                   	ret    

000112c2 <task_slice_end>:
/**
 * @brief  提供给时钟中断使用，每中断一次，当前任务的时间片使用完一次
 *         减少当前任务的时间片数，并判断是否还有剩余时间片，若没有就进行任务切换
 * 
 */
void task_slice_end(void) {
   112c2:	55                   	push   %ebp
   112c3:	89 e5                	mov    %esp,%ebp
   112c5:	83 ec 18             	sub    $0x18,%esp

    //1.遍历当前延时队列，判断是否有可唤醒的任务
    list_node_t *curr_sleep_node = list_get_first(&task_manager.sleep_list);
   112c8:	83 ec 0c             	sub    $0xc,%esp
   112cb:	68 1c 80 01 00       	push   $0x1801c
   112d0:	e8 8d f8 ff ff       	call   10b62 <list_get_first>
   112d5:	83 c4 10             	add    $0x10,%esp
   112d8:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.遍历并判断每一个任务执行完当前时间片是否可被唤醒，若可以则唤醒
    while (curr_sleep_node) {
   112db:	eb 62                	jmp    1133f <task_slice_end+0x7d>
        
        list_node_t *next_sleep_node = list_node_next(curr_sleep_node);
   112dd:	83 ec 0c             	sub    $0xc,%esp
   112e0:	ff 75 f4             	push   -0xc(%ebp)
   112e3:	e8 a4 f7 ff ff       	call   10a8c <list_node_next>
   112e8:	83 c4 10             	add    $0x10,%esp
   112eb:	89 45 ec             	mov    %eax,-0x14(%ebp)
        
        task_t *curr_sleep_task = list_node_parent(curr_sleep_node, task_t, ready_node);
   112ee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   112f2:	74 08                	je     112fc <task_slice_end+0x3a>
   112f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   112f7:	83 e8 38             	sub    $0x38,%eax
   112fa:	eb 05                	jmp    11301 <task_slice_end+0x3f>
   112fc:	b8 00 00 00 00       	mov    $0x0,%eax
   11301:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (--curr_sleep_task->sleep == 0) {
   11304:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11307:	8b 40 14             	mov    0x14(%eax),%eax
   1130a:	8d 50 ff             	lea    -0x1(%eax),%edx
   1130d:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11310:	89 50 14             	mov    %edx,0x14(%eax)
   11313:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11316:	8b 40 14             	mov    0x14(%eax),%eax
   11319:	85 c0                	test   %eax,%eax
   1131b:	75 1c                	jne    11339 <task_slice_end+0x77>
            task_set_wakeup(curr_sleep_task);   //从延时队列中取下
   1131d:	83 ec 0c             	sub    $0xc,%esp
   11320:	ff 75 e8             	push   -0x18(%ebp)
   11323:	e8 01 01 00 00       	call   11429 <task_set_wakeup>
   11328:	83 c4 10             	add    $0x10,%esp
            task_set_ready(curr_sleep_task);    //加入就绪队列
   1132b:	83 ec 0c             	sub    $0xc,%esp
   1132e:	ff 75 e8             	push   -0x18(%ebp)
   11331:	e8 f5 fd ff ff       	call   1112b <task_set_ready>
   11336:	83 c4 10             	add    $0x10,%esp
        }

        curr_sleep_node = next_sleep_node;
   11339:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1133c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr_sleep_node) {
   1133f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11343:	75 98                	jne    112dd <task_slice_end+0x1b>
    }

    // task_switch(); 没有必要立马进行任务切换，当前任务时间片用完后会自动切换
    //3.获取当前任务
    task_t *curr_task = task_current();
   11345:	e8 a5 fe ff ff       	call   111ef <task_current>
   1134a:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //4.若当前任务为空闲任务，则判断就绪队列是否为空
    if (curr_task == &task_manager.empty_task) {
   1134d:	81 7d f0 e4 80 01 00 	cmpl   $0x180e4,-0x10(%ebp)
   11354:	75 23                	jne    11379 <task_slice_end+0xb7>
        
        if (list_is_empty(&task_manager.ready_list)) return;
   11356:	83 ec 0c             	sub    $0xc,%esp
   11359:	68 04 80 01 00       	push   $0x18004
   1135e:	e8 9d f7 ff ff       	call   10b00 <list_is_empty>
   11363:	83 c4 10             	add    $0x10,%esp
   11366:	85 c0                	test   %eax,%eax
   11368:	75 60                	jne    113ca <task_slice_end+0x108>
        
        task_manager.empty_task.state = TASK_CREATED;
   1136a:	c7 05 e4 80 01 00 00 	movl   $0x0,0x180e4
   11371:	00 00 00 
        
        task_switch();//就绪队列有任务，则直接切换任务
   11374:	e8 80 fe ff ff       	call   111f9 <task_switch>
    }

    //5.若当前任务为普通任务则，减小当前时间片数
    if (curr_task != &task_manager.empty_task && --curr_task->slice_curr == 0) {
   11379:	81 7d f0 e4 80 01 00 	cmpl   $0x180e4,-0x10(%ebp)
   11380:	74 49                	je     113cb <task_slice_end+0x109>
   11382:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11385:	8b 40 10             	mov    0x10(%eax),%eax
   11388:	8d 50 ff             	lea    -0x1(%eax),%edx
   1138b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1138e:	89 50 10             	mov    %edx,0x10(%eax)
   11391:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11394:	8b 40 10             	mov    0x10(%eax),%eax
   11397:	85 c0                	test   %eax,%eax
   11399:	75 30                	jne    113cb <task_slice_end+0x109>
        //6.时间片数用完了，重置时间片并进行任务切换
        curr_task->slice_curr = curr_task->slice_max;
   1139b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1139e:	8b 50 0c             	mov    0xc(%eax),%edx
   113a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   113a4:	89 50 10             	mov    %edx,0x10(%eax)
        task_set_unready(curr_task);
   113a7:	83 ec 0c             	sub    $0xc,%esp
   113aa:	ff 75 f0             	push   -0x10(%ebp)
   113ad:	e8 c4 fd ff ff       	call   11176 <task_set_unready>
   113b2:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   113b5:	83 ec 0c             	sub    $0xc,%esp
   113b8:	ff 75 f0             	push   -0x10(%ebp)
   113bb:	e8 6b fd ff ff       	call   1112b <task_set_ready>
   113c0:	83 c4 10             	add    $0x10,%esp
        task_switch();
   113c3:	e8 31 fe ff ff       	call   111f9 <task_switch>
   113c8:	eb 01                	jmp    113cb <task_slice_end+0x109>
        if (list_is_empty(&task_manager.ready_list)) return;
   113ca:	90                   	nop
    }
}
   113cb:	c9                   	leave  
   113cc:	c3                   	ret    

000113cd <task_set_sleep>:
 * @brief  设置进程延时的时间片数
 * 
 * @param task 需要延时的进程
 * @param slice 延时的时间片数
 */
void task_set_sleep(task_t *task, uint32_t slice) {
   113cd:	55                   	push   %ebp
   113ce:	89 e5                	mov    %esp,%ebp
   113d0:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   113d3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   113d7:	75 1c                	jne    113f5 <task_set_sleep+0x28>
   113d9:	68 c5 3c 01 00       	push   $0x13cc5
   113de:	68 d8 3d 01 00       	push   $0x13dd8
   113e3:	68 f6 01 00 00       	push   $0x1f6
   113e8:	68 d8 3c 01 00       	push   $0x13cd8
   113ed:	e8 16 19 00 00       	call   12d08 <pannic>
   113f2:	83 c4 10             	add    $0x10,%esp
    if (slice == 0) return;
   113f5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   113f9:	74 2b                	je     11426 <task_set_sleep+0x59>

    task->sleep = slice;
   113fb:	8b 55 0c             	mov    0xc(%ebp),%edx
   113fe:	8b 45 08             	mov    0x8(%ebp),%eax
   11401:	89 50 14             	mov    %edx,0x14(%eax)
    task->state = TASK_SLEEP;
   11404:	8b 45 08             	mov    0x8(%ebp),%eax
   11407:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    list_insert_last(&task_manager.sleep_list, &task->ready_node);
   1140d:	8b 45 08             	mov    0x8(%ebp),%eax
   11410:	83 c0 38             	add    $0x38,%eax
   11413:	83 ec 08             	sub    $0x8,%esp
   11416:	50                   	push   %eax
   11417:	68 1c 80 01 00       	push   $0x1801c
   1141c:	e8 32 22 00 00       	call   13653 <list_insert_last>
   11421:	83 c4 10             	add    $0x10,%esp
   11424:	eb 01                	jmp    11427 <task_set_sleep+0x5a>
    if (slice == 0) return;
   11426:	90                   	nop
}
   11427:	c9                   	leave  
   11428:	c3                   	ret    

00011429 <task_set_wakeup>:
/**
 * @brief  唤醒正在延时的进程
 * 
 * @param task 
 */
void task_set_wakeup(task_t *task) {
   11429:	55                   	push   %ebp
   1142a:	89 e5                	mov    %esp,%ebp
   1142c:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   1142f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11433:	75 1c                	jne    11451 <task_set_wakeup+0x28>
   11435:	68 c5 3c 01 00       	push   $0x13cc5
   1143a:	68 e8 3d 01 00       	push   $0x13de8
   1143f:	68 04 02 00 00       	push   $0x204
   11444:	68 d8 3c 01 00       	push   $0x13cd8
   11449:	e8 ba 18 00 00       	call   12d08 <pannic>
   1144e:	83 c4 10             	add    $0x10,%esp
    list_remove(&task_manager.sleep_list, &task->ready_node);
   11451:	8b 45 08             	mov    0x8(%ebp),%eax
   11454:	83 c0 38             	add    $0x38,%eax
   11457:	83 ec 08             	sub    $0x8,%esp
   1145a:	50                   	push   %eax
   1145b:	68 1c 80 01 00       	push   $0x1801c
   11460:	e8 e3 23 00 00       	call   13848 <list_remove>
   11465:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   11468:	8b 45 08             	mov    0x8(%ebp),%eax
   1146b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   11471:	90                   	nop
   11472:	c9                   	leave  
   11473:	c3                   	ret    

00011474 <alloc_task>:
/**
 * @brief 从静态任务表中分配一个任务对象
 * 
 * @return task_t* 
 */
static task_t *alloc_task(void) {
   11474:	55                   	push   %ebp
   11475:	89 e5                	mov    %esp,%ebp
   11477:	83 ec 18             	sub    $0x18,%esp
    task_t *task = 0;
   1147a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_lock(&task_table_lock);
   11481:	83 ec 0c             	sub    $0xc,%esp
   11484:	68 c0 df 01 00       	push   $0x1dfc0
   11489:	e8 b2 11 00 00       	call   12640 <mutex_lock>
   1148e:	83 c4 10             	add    $0x10,%esp
    
    //遍历静态任务表，取出未被分配的任务对象空间
    for (int i = 0; i < TASK_COUNT; ++i) {
   11491:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11498:	eb 27                	jmp    114c1 <alloc_task+0x4d>
        task_t *curr = task_table + i;
   1149a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1149d:	69 c0 bc 00 00 00    	imul   $0xbc,%eax,%eax
   114a3:	05 c0 81 01 00       	add    $0x181c0,%eax
   114a8:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (curr->pid == 0) {
   114ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
   114ae:	8b 40 08             	mov    0x8(%eax),%eax
   114b1:	85 c0                	test   %eax,%eax
   114b3:	75 08                	jne    114bd <alloc_task+0x49>
            task = curr;
   114b5:	8b 45 ec             	mov    -0x14(%ebp),%eax
   114b8:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   114bb:	eb 0a                	jmp    114c7 <alloc_task+0x53>
    for (int i = 0; i < TASK_COUNT; ++i) {
   114bd:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   114c1:	83 7d f0 7f          	cmpl   $0x7f,-0x10(%ebp)
   114c5:	7e d3                	jle    1149a <alloc_task+0x26>
        }
    }

    mutex_unlock(&task_table_lock);
   114c7:	83 ec 0c             	sub    $0xc,%esp
   114ca:	68 c0 df 01 00       	push   $0x1dfc0
   114cf:	e8 fd 11 00 00       	call   126d1 <mutex_unlock>
   114d4:	83 c4 10             	add    $0x10,%esp

    return task;
   114d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   114da:	c9                   	leave  
   114db:	c3                   	ret    

000114dc <free_task>:
/**
 * @brief 释放静态任务表的任务对象
 * 
 * @param task 
 */
static void free_task(task_t *task) {
   114dc:	55                   	push   %ebp
   114dd:	89 e5                	mov    %esp,%ebp
   114df:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&task_table_lock);
   114e2:	83 ec 0c             	sub    $0xc,%esp
   114e5:	68 c0 df 01 00       	push   $0x1dfc0
   114ea:	e8 51 11 00 00       	call   12640 <mutex_lock>
   114ef:	83 c4 10             	add    $0x10,%esp
    
    task->pid = 0;
   114f2:	8b 45 08             	mov    0x8(%ebp),%eax
   114f5:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)

    mutex_unlock(&task_table_lock);
   114fc:	83 ec 0c             	sub    $0xc,%esp
   114ff:	68 c0 df 01 00       	push   $0x1dfc0
   11504:	e8 c8 11 00 00       	call   126d1 <mutex_unlock>
   11509:	83 c4 10             	add    $0x10,%esp
}
   1150c:	90                   	nop
   1150d:	c9                   	leave  
   1150e:	c3                   	ret    

0001150f <sys_sleep>:
/**
 * @brief  使进程进入延时状态
 * 
 * @param ms 延时的时间，以ms为单位
 */
void sys_sleep(uint32_t ms) {
   1150f:	55                   	push   %ebp
   11510:	89 e5                	mov    %esp,%ebp
   11512:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection(); //TODO:加锁
   11515:	e8 d4 0d 00 00       	call   122ee <idt_enter_protection>
   1151a:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //1.获取当前任务  
    task_t *curr_task = task_current();
   1151d:	e8 cd fc ff ff       	call   111ef <task_current>
   11522:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    //2.将当前任务离开就绪队列
    task_set_unready(curr_task);
   11525:	83 ec 0c             	sub    $0xc,%esp
   11528:	ff 75 f0             	push   -0x10(%ebp)
   1152b:	e8 46 fc ff ff       	call   11176 <task_set_unready>
   11530:	83 c4 10             	add    $0x10,%esp

    //3.计算出需要延时的时间片数，对时间片数向上取整，保证进程至少能延时指定时间
    uint32_t slice = (ms + (OS_TICKS_MS - 1)) / OS_TICKS_MS;
   11533:	8b 45 08             	mov    0x8(%ebp),%eax
   11536:	83 c0 09             	add    $0x9,%eax
   11539:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   1153e:	f7 e2                	mul    %edx
   11540:	89 d0                	mov    %edx,%eax
   11542:	c1 e8 03             	shr    $0x3,%eax
   11545:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //4.将当前任务放入延时队列，并设置延时时间片数
    task_set_sleep(curr_task, slice);
   11548:	83 ec 08             	sub    $0x8,%esp
   1154b:	ff 75 ec             	push   -0x14(%ebp)
   1154e:	ff 75 f0             	push   -0x10(%ebp)
   11551:	e8 77 fe ff ff       	call   113cd <task_set_sleep>
   11556:	83 c4 10             	add    $0x10,%esp

    //5.切换任务
    task_switch();
   11559:	e8 9b fc ff ff       	call   111f9 <task_switch>

    idt_leave_protection(state); //TODO:解锁
   1155e:	83 ec 0c             	sub    $0xc,%esp
   11561:	ff 75 f4             	push   -0xc(%ebp)
   11564:	e8 9d 0d 00 00       	call   12306 <idt_leave_protection>
   11569:	83 c4 10             	add    $0x10,%esp
}
   1156c:	90                   	nop
   1156d:	c9                   	leave  
   1156e:	c3                   	ret    

0001156f <sys_getpid>:
/**
 * @brief 获取任务pid
 * 
 * @return int pid
 */
int sys_getpid(void) {
   1156f:	55                   	push   %ebp
   11570:	89 e5                	mov    %esp,%ebp
    return task_current()->pid;
   11572:	e8 78 fc ff ff       	call   111ef <task_current>
   11577:	8b 40 08             	mov    0x8(%eax),%eax
}
   1157a:	5d                   	pop    %ebp
   1157b:	c3                   	ret    

0001157c <sys_fork>:
/**
 * @brief 创建子进程
 * 
 * @return int 子进程的pid
 */
int sys_fork(void) {
   1157c:	55                   	push   %ebp
   1157d:	89 e5                	mov    %esp,%ebp
   1157f:	83 ec 28             	sub    $0x28,%esp

    //获取当前进程为fork进程的父进程
    task_t *parent_task = task_current();
   11582:	e8 68 fc ff ff       	call   111ef <task_current>
   11587:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //分配子进程控制块
    task_t *child_task = alloc_task();
   1158a:	e8 e5 fe ff ff       	call   11474 <alloc_task>
   1158f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (child_task == (task_t*)0)
   11592:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11596:	0f 84 19 01 00 00    	je     116b5 <sys_fork+0x139>
        goto fork_failed;

    //获取系统调用的栈帧,因为每次通过调用门进入内核栈中都只会一帧该结构体的数据，
    //所以用最高地址减去大小即可获得该帧的起始地址
    syscall_frame_t *frame = (syscall_frame_t*)(parent_task->tss.esp0 - sizeof(syscall_frame_t));
   1159c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1159f:	8b 40 54             	mov    0x54(%eax),%eax
   115a2:	83 e8 58             	sub    $0x58,%eax
   115a5:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //初始子进程控制块，直接用父进程进入调用门的下一条指令地址作为子进程的入口地址
    int err = task_init(child_task, parent_task->name, frame->eip, frame->esp + sizeof(uint32_t)*SYSCALL_PARAM_COUNT, TASK_FLAGS_USER);
   115a8:	8b 45 ec             	mov    -0x14(%ebp),%eax
   115ab:	8b 40 50             	mov    0x50(%eax),%eax
   115ae:	8d 48 14             	lea    0x14(%eax),%ecx
   115b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
   115b4:	8b 40 34             	mov    0x34(%eax),%eax
   115b7:	8b 55 f4             	mov    -0xc(%ebp),%edx
   115ba:	83 c2 18             	add    $0x18,%edx
   115bd:	83 ec 0c             	sub    $0xc,%esp
   115c0:	6a 00                	push   $0x0
   115c2:	51                   	push   %ecx
   115c3:	50                   	push   %eax
   115c4:	52                   	push   %edx
   115c5:	ff 75 f0             	push   -0x10(%ebp)
   115c8:	e8 d9 f7 ff ff       	call   10da6 <task_init>
   115cd:	83 c4 20             	add    $0x20,%esp
   115d0:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (err < 0)
   115d3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   115d7:	0f 88 db 00 00 00    	js     116b8 <sys_fork+0x13c>
        goto fork_failed;

    //恢复到父进程的上下文环境
    tss_t *tss = &(child_task->tss);
   115dd:	8b 45 f0             	mov    -0x10(%ebp),%eax
   115e0:	83 c0 50             	add    $0x50,%eax
   115e3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    //子进程执行的第一条指令就是从eax中取出系统用的返回值，即进程id，子进程固定获取0
    tss->eax = 0;   
   115e6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   115e9:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    tss->ebx = frame->ebx;
   115f0:	8b 45 ec             	mov    -0x14(%ebp),%eax
   115f3:	8b 50 24             	mov    0x24(%eax),%edx
   115f6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   115f9:	89 50 34             	mov    %edx,0x34(%eax)
    tss->ecx = frame->ecx;
   115fc:	8b 45 ec             	mov    -0x14(%ebp),%eax
   115ff:	8b 50 2c             	mov    0x2c(%eax),%edx
   11602:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11605:	89 50 2c             	mov    %edx,0x2c(%eax)
    tss->edx = frame->edx;
   11608:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1160b:	8b 50 28             	mov    0x28(%eax),%edx
   1160e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11611:	89 50 30             	mov    %edx,0x30(%eax)
    tss->edi = frame->edi;
   11614:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11617:	8b 50 14             	mov    0x14(%eax),%edx
   1161a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1161d:	89 50 44             	mov    %edx,0x44(%eax)
    tss->esi = frame->esi;
   11620:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11623:	8b 50 18             	mov    0x18(%eax),%edx
   11626:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11629:	89 50 40             	mov    %edx,0x40(%eax)
    tss->eflags = frame->eflags;
   1162c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1162f:	8b 10                	mov    (%eax),%edx
   11631:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11634:	89 50 24             	mov    %edx,0x24(%eax)
    tss->ebp = frame->ebp;
   11637:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1163a:	8b 50 1c             	mov    0x1c(%eax),%edx
   1163d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11640:	89 50 3c             	mov    %edx,0x3c(%eax)

    //复用父进程的段寄存器
    tss->cs = frame->cs;
   11643:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11646:	8b 50 38             	mov    0x38(%eax),%edx
   11649:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1164c:	89 50 4c             	mov    %edx,0x4c(%eax)
    tss->ds = frame->ds;
   1164f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11652:	8b 50 10             	mov    0x10(%eax),%edx
   11655:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11658:	89 50 54             	mov    %edx,0x54(%eax)
    tss->es = frame->es;
   1165b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1165e:	8b 50 0c             	mov    0xc(%eax),%edx
   11661:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11664:	89 50 48             	mov    %edx,0x48(%eax)
    tss->fs = frame->fs;
   11667:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1166a:	8b 50 08             	mov    0x8(%eax),%edx
   1166d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11670:	89 50 58             	mov    %edx,0x58(%eax)
    tss->gs = frame->gs;
   11673:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11676:	8b 50 04             	mov    0x4(%eax),%edx
   11679:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1167c:	89 50 5c             	mov    %edx,0x5c(%eax)
    tss->ss = frame->ss;
   1167f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11682:	8b 50 54             	mov    0x54(%eax),%edx
   11685:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11688:	89 50 50             	mov    %edx,0x50(%eax)

    //记录父进程地址
    child_task->parent = parent_task;
   1168b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1168e:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11691:	89 50 04             	mov    %edx,0x4(%eax)

    //拷贝进程虚拟页目录表和页表，即拷贝其映射关系
    if (memory_copy_uvm(tss->cr3, parent_task->tss.cr3) < 0)
   11694:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11697:	8b 50 6c             	mov    0x6c(%eax),%edx
   1169a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1169d:	8b 40 1c             	mov    0x1c(%eax),%eax
   116a0:	83 ec 08             	sub    $0x8,%esp
   116a3:	52                   	push   %edx
   116a4:	50                   	push   %eax
   116a5:	e8 fd f0 ff ff       	call   107a7 <memory_copy_uvm>
   116aa:	83 c4 10             	add    $0x10,%esp
        goto fork_failed;

    //反回子进程id
    return child_task->pid;
   116ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
   116b0:	8b 40 08             	mov    0x8(%eax),%eax
   116b3:	eb 2b                	jmp    116e0 <sys_fork+0x164>
        goto fork_failed;
   116b5:	90                   	nop
   116b6:	eb 01                	jmp    116b9 <sys_fork+0x13d>
        goto fork_failed;
   116b8:	90                   	nop

//fork失败，清理资源
fork_failed:
    if (child_task) {   //初始化失败，释放对应资源
   116b9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   116bd:	74 1c                	je     116db <sys_fork+0x15f>
        task_uninit(child_task);
   116bf:	83 ec 0c             	sub    $0xc,%esp
   116c2:	ff 75 f0             	push   -0x10(%ebp)
   116c5:	e8 f4 f7 ff ff       	call   10ebe <task_uninit>
   116ca:	83 c4 10             	add    $0x10,%esp
        free_task(child_task);
   116cd:	83 ec 0c             	sub    $0xc,%esp
   116d0:	ff 75 f0             	push   -0x10(%ebp)
   116d3:	e8 04 fe ff ff       	call   114dc <free_task>
   116d8:	83 c4 10             	add    $0x10,%esp
    }

    return -1;
   116db:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   116e0:	c9                   	leave  
   116e1:	c3                   	ret    

000116e2 <gate_desc_set>:
 * @param selector 门描述符对应的处理程序所在的段的选择子
 * @param offset 门描述符对应的处理程序相对于所在段的偏移量
 * @param attr 门描述符的属性
 */
void gate_desc_set(gate_desc_t *desc, const uint16_t selector, const uint32_t offset,
                          const uint16_t attr) {
   116e2:	55                   	push   %ebp
   116e3:	89 e5                	mov    %esp,%ebp
   116e5:	83 ec 08             	sub    $0x8,%esp
   116e8:	8b 55 0c             	mov    0xc(%ebp),%edx
   116eb:	8b 45 14             	mov    0x14(%ebp),%eax
   116ee:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   116f2:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
  // 1.初始化偏移量
  desc->offset15_0 = offset & 0xffff;
   116f6:	8b 45 10             	mov    0x10(%ebp),%eax
   116f9:	89 c2                	mov    %eax,%edx
   116fb:	8b 45 08             	mov    0x8(%ebp),%eax
   116fe:	66 89 10             	mov    %dx,(%eax)
  desc->offset31_16 = (offset >> 16) & 0xffff;
   11701:	8b 45 10             	mov    0x10(%ebp),%eax
   11704:	c1 e8 10             	shr    $0x10,%eax
   11707:	89 c2                	mov    %eax,%edx
   11709:	8b 45 08             	mov    0x8(%ebp),%eax
   1170c:	66 89 50 06          	mov    %dx,0x6(%eax)

  // 2.初始化选择子
  desc->selector = selector;
   11710:	8b 45 08             	mov    0x8(%ebp),%eax
   11713:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11717:	66 89 50 02          	mov    %dx,0x2(%eax)

  // 3.初始化属性位
  desc->attr = attr;
   1171b:	8b 45 08             	mov    0x8(%ebp),%eax
   1171e:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   11722:	66 89 50 04          	mov    %dx,0x4(%eax)
   11726:	90                   	nop
   11727:	c9                   	leave  
   11728:	c3                   	ret    

00011729 <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   11729:	55                   	push   %ebp
   1172a:	89 e5                	mov    %esp,%ebp
   1172c:	83 ec 10             	sub    $0x10,%esp
  gdt.start31_16 = (start >> 16) & 0xffff;  // 初始化GDT地址的高16位
   1172f:	8b 45 08             	mov    0x8(%ebp),%eax
   11732:	c1 e8 10             	shr    $0x10,%eax
   11735:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  gdt.start15_0 = start & 0xffff;           // 初始化GDT地址的低16位
   11739:	8b 45 08             	mov    0x8(%ebp),%eax
   1173c:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   11740:	8b 45 0c             	mov    0xc(%ebp),%eax
   11743:	83 e8 01             	sub    $0x1,%eax
  gdt.limit =
   11746:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   1174a:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   1174e:	90                   	nop
   1174f:	c9                   	leave  
   11750:	c3                   	ret    

00011751 <segment_desc_set>:
 *                 即2的13次方个段，也就是8192
 * @param base 该段在内存中的真实段基址
 * @param limit 该段的段界限，是一个偏移量，表示段中最大的偏移界限
 * @param attr 该段的属性位
 */
void segment_desc_set(uint16_t selector,  uint32_t base, uint32_t limit, uint16_t attr) {
   11751:	55                   	push   %ebp
   11752:	89 e5                	mov    %esp,%ebp
   11754:	83 ec 18             	sub    $0x18,%esp
   11757:	8b 55 08             	mov    0x8(%ebp),%edx
   1175a:	8b 45 14             	mov    0x14(%ebp),%eax
   1175d:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
   11761:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    //1. 获取该段描述符在内存中的起始地址，selector >> 3 取出3~15位才是其在全局描述符中的下标
    segment_desc_t *desc = gdt_table + (selector >> 3);
   11765:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   11769:	66 c1 e8 03          	shr    $0x3,%ax
   1176d:	0f b7 c0             	movzwl %ax,%eax
   11770:	c1 e0 03             	shl    $0x3,%eax
   11773:	05 e0 e1 01 00       	add    $0x1e1e0,%eax
   11778:	89 45 fc             	mov    %eax,-0x4(%ebp)

    //2. 设置段基地址
    desc->base15_0 = (uint16_t)base;
   1177b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1177e:	89 c2                	mov    %eax,%edx
   11780:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11783:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (uint8_t)(base >> 16);
   11787:	8b 45 0c             	mov    0xc(%ebp),%eax
   1178a:	c1 e8 10             	shr    $0x10,%eax
   1178d:	89 c2                	mov    %eax,%edx
   1178f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11792:	88 50 04             	mov    %dl,0x4(%eax)
    desc->base31_24 = (uint8_t)(base >> 24);
   11795:	8b 45 0c             	mov    0xc(%ebp),%eax
   11798:	c1 e8 18             	shr    $0x18,%eax
   1179b:	89 c2                	mov    %eax,%edx
   1179d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   117a0:	88 50 07             	mov    %dl,0x7(%eax)

    //3. 设置段界限
    if (limit > 0xfffff) { //limit大于了20位能表示的最大值
   117a3:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   117aa:	76 1d                	jbe    117c9 <segment_desc_set+0x78>
        //将limit的粒度设置为 4kb，即将属性位G置1
        desc->attr |= 0x8000;
   117ac:	8b 45 fc             	mov    -0x4(%ebp),%eax
   117af:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   117b3:	66 0d 00 80          	or     $0x8000,%ax
   117b7:	89 c2                	mov    %eax,%edx
   117b9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   117bc:	66 89 50 05          	mov    %dx,0x5(%eax)

        //将limit改成以 4kb 为单位
        limit /= (4 * 1024);
   117c0:	8b 45 10             	mov    0x10(%ebp),%eax
   117c3:	c1 e8 0c             	shr    $0xc,%eax
   117c6:	89 45 10             	mov    %eax,0x10(%ebp)

    }
    desc->limit15_0 = (uint16_t)limit;
   117c9:	8b 45 10             	mov    0x10(%ebp),%eax
   117cc:	89 c2                	mov    %eax,%edx
   117ce:	8b 45 fc             	mov    -0x4(%ebp),%eax
   117d1:	66 89 10             	mov    %dx,(%eax)
    desc->attr |= ((uint16_t)(limit >> 8) & 0x0f00); //将limit高4位赋值到attr的8~11位(段界限的高4位)
   117d4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   117d7:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   117db:	89 c2                	mov    %eax,%edx
   117dd:	8b 45 10             	mov    0x10(%ebp),%eax
   117e0:	c1 e8 08             	shr    $0x8,%eax
   117e3:	66 25 00 0f          	and    $0xf00,%ax
   117e7:	09 d0                	or     %edx,%eax
   117e9:	89 c2                	mov    %eax,%edx
   117eb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   117ee:	66 89 50 05          	mov    %dx,0x5(%eax)

    //4.设置属性位
    desc->attr |= attr & 0xf0ff;
   117f2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   117f5:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   117f9:	89 c2                	mov    %eax,%edx
   117fb:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   117ff:	80 e4 f0             	and    $0xf0,%ah
   11802:	09 d0                	or     %edx,%eax
   11804:	89 c2                	mov    %eax,%edx
   11806:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11809:	66 89 50 05          	mov    %dx,0x5(%eax)


}
   1180d:	90                   	nop
   1180e:	c9                   	leave  
   1180f:	c3                   	ret    

00011810 <gdt_init>:

/**
 * @brief  初始化GDT
 * 
 */
void gdt_init(void) {
   11810:	55                   	push   %ebp
   11811:	89 e5                	mov    %esp,%ebp
   11813:	83 ec 18             	sub    $0x18,%esp
    //TODO:暂时将所有段都初始化为0
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   11816:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1181d:	eb 1c                	jmp    1183b <gdt_init+0x2b>
        segment_desc_set(i << 3, 0, 0, 0);
   1181f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11822:	c1 e0 03             	shl    $0x3,%eax
   11825:	0f b7 c0             	movzwl %ax,%eax
   11828:	6a 00                	push   $0x0
   1182a:	6a 00                	push   $0x0
   1182c:	6a 00                	push   $0x0
   1182e:	50                   	push   %eax
   1182f:	e8 1d ff ff ff       	call   11751 <segment_desc_set>
   11834:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   11837:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1183b:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   11842:	7e db                	jle    1181f <gdt_init+0xf>
        is_alloc[i] == 0;
    }

    //使用平坦模型，即段基址为0, 段界限直接用最大值，界限粒度为4kb，即段大小为4GB
    //1.设置内核的数据段,并将其标记
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff,
   11844:	68 92 40 00 00       	push   $0x4092
   11849:	6a ff                	push   $0xffffffff
   1184b:	6a 00                	push   $0x0
   1184d:	6a 10                	push   $0x10
   1184f:	e8 fd fe ff ff       	call   11751 <segment_desc_set>
   11854:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL | 
                    SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_DS >> 3] = 1;
   11857:	c6 05 e2 e1 02 00 01 	movb   $0x1,0x2e1e2

    //2.设置内核的代码段，并将其标记
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff,
   1185e:	68 9a 40 00 00       	push   $0x409a
   11863:	6a ff                	push   $0xffffffff
   11865:	6a 00                	push   $0x0
   11867:	6a 08                	push   $0x8
   11869:	e8 e3 fe ff ff       	call   11751 <segment_desc_set>
   1186e:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL |
                    SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_CS >> 3] = 1;
   11871:	c6 05 e1 e1 02 00 01 	movb   $0x1,0x2e1e1

    //3.初始化调用门描述符，调用门的 DPL >= CPL && DPL >= RPL, 若目标代码段的特权级更高则发生特权级转换
    gate_desc_set((gate_desc_t*)(gdt_table + (SYSCALL_SELECTOR >> 3)), 
   11878:	ba ad 02 01 00       	mov    $0x102ad,%edx
   1187d:	b8 f8 e1 01 00       	mov    $0x1e1f8,%eax
   11882:	68 05 ec 00 00       	push   $0xec05
   11887:	52                   	push   %edx
   11888:	6a 08                	push   $0x8
   1188a:	50                   	push   %eax
   1188b:	e8 52 fe ff ff       	call   116e2 <gate_desc_set>
   11890:	83 c4 10             	add    $0x10,%esp
        KERNEL_SELECTOR_CS, (uint32_t)exception_handler_syscall, 
        GATE_ATTR_P | GATE_ATTR_DPL_3 | GATE_TYPE_SYSCALL | SYSCALL_PARAM_COUNT);
    
    is_alloc[SYSCALL_SELECTOR >> 3] = 1;
   11893:	c6 05 e3 e1 02 00 01 	movb   $0x1,0x2e1e3


    //4.加载新的GDT表
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   1189a:	b8 e0 e1 01 00       	mov    $0x1e1e0,%eax
   1189f:	83 ec 08             	sub    $0x8,%esp
   118a2:	68 00 00 01 00       	push   $0x10000
   118a7:	50                   	push   %eax
   118a8:	e8 7c fe ff ff       	call   11729 <lgdt>
   118ad:	83 c4 10             	add    $0x10,%esp

    //4.初始化互斥锁
    mutex_init(&mutex);
   118b0:	83 ec 0c             	sub    $0xc,%esp
   118b3:	68 e0 01 03 00       	push   $0x301e0
   118b8:	e8 36 0d 00 00       	call   125f3 <mutex_init>
   118bd:	83 c4 10             	add    $0x10,%esp
}
   118c0:	90                   	nop
   118c1:	c9                   	leave  
   118c2:	c3                   	ret    

000118c3 <gdt_alloc_desc>:
/**
 * @brief  寻找gdt中未赋值的段描述符空间
 * 
 * @return int 返回的找到的描述符的选择子
 */
int gdt_alloc_desc() {
   118c3:	55                   	push   %ebp
   118c4:	89 e5                	mov    %esp,%ebp
   118c6:	83 ec 18             	sub    $0x18,%esp

    mutex_lock(&mutex);//TODO:加锁
   118c9:	83 ec 0c             	sub    $0xc,%esp
   118cc:	68 e0 01 03 00       	push   $0x301e0
   118d1:	e8 6a 0d 00 00       	call   12640 <mutex_lock>
   118d6:	83 c4 10             	add    $0x10,%esp

    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   118d9:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   118e0:	eb 36                	jmp    11918 <gdt_alloc_desc+0x55>
        if (is_alloc[i] == 0)  {
   118e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   118e5:	05 e0 e1 02 00       	add    $0x2e1e0,%eax
   118ea:	0f b6 00             	movzbl (%eax),%eax
   118ed:	84 c0                	test   %al,%al
   118ef:	75 23                	jne    11914 <gdt_alloc_desc+0x51>
            is_alloc[i] = 1;
   118f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   118f4:	05 e0 e1 02 00       	add    $0x2e1e0,%eax
   118f9:	c6 00 01             	movb   $0x1,(%eax)

            mutex_unlock(&mutex);//TODO:解锁
   118fc:	83 ec 0c             	sub    $0xc,%esp
   118ff:	68 e0 01 03 00       	push   $0x301e0
   11904:	e8 c8 0d 00 00       	call   126d1 <mutex_unlock>
   11909:	83 c4 10             	add    $0x10,%esp
            return (i << 3);
   1190c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1190f:	c1 e0 03             	shl    $0x3,%eax
   11912:	eb 22                	jmp    11936 <gdt_alloc_desc+0x73>
    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   11914:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11918:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   1191f:	7e c1                	jle    118e2 <gdt_alloc_desc+0x1f>
        }
    }

    mutex_unlock(&mutex);//TODO:解锁
   11921:	83 ec 0c             	sub    $0xc,%esp
   11924:	68 e0 01 03 00       	push   $0x301e0
   11929:	e8 a3 0d 00 00       	call   126d1 <mutex_unlock>
   1192e:	83 c4 10             	add    $0x10,%esp
    return -1;
   11931:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11936:	c9                   	leave  
   11937:	c3                   	ret    

00011938 <gdt_free>:
/**
 * @brief 释放gdt表项
 * 
 * @param selector 需要释放的表项对应的选择子
 */
void gdt_free(uint16_t selector) {
   11938:	55                   	push   %ebp
   11939:	89 e5                	mov    %esp,%ebp
   1193b:	83 ec 14             	sub    $0x14,%esp
   1193e:	8b 45 08             	mov    0x8(%ebp),%eax
   11941:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    uint16_t index = selector >> 3;
   11945:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   11949:	66 c1 e8 03          	shr    $0x3,%ax
   1194d:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    is_alloc[index] = 0;
   11951:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
   11955:	c6 80 e0 e1 02 00 00 	movb   $0x0,0x2e1e0(%eax)
}
   1195c:	90                   	nop
   1195d:	c9                   	leave  
   1195e:	c3                   	ret    

0001195f <cli>:
static inline void cli(void) { __asm__ __volatile__("cli"); }
   1195f:	55                   	push   %ebp
   11960:	89 e5                	mov    %esp,%ebp
   11962:	fa                   	cli    
   11963:	90                   	nop
   11964:	5d                   	pop    %ebp
   11965:	c3                   	ret    

00011966 <sti>:
static inline void sti(void) { __asm__ __volatile__("sti"); }
   11966:	55                   	push   %ebp
   11967:	89 e5                	mov    %esp,%ebp
   11969:	fb                   	sti    
   1196a:	90                   	nop
   1196b:	5d                   	pop    %ebp
   1196c:	c3                   	ret    

0001196d <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   1196d:	55                   	push   %ebp
   1196e:	89 e5                	mov    %esp,%ebp
   11970:	f4                   	hlt    
   11971:	90                   	nop
   11972:	5d                   	pop    %ebp
   11973:	c3                   	ret    

00011974 <inb>:
static inline uint8_t inb(uint16_t port) {
   11974:	55                   	push   %ebp
   11975:	89 e5                	mov    %esp,%ebp
   11977:	83 ec 14             	sub    $0x14,%esp
   1197a:	8b 45 08             	mov    0x8(%ebp),%eax
   1197d:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   11981:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   11985:	89 c2                	mov    %eax,%edx
   11987:	ec                   	in     (%dx),%al
   11988:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   1198b:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   1198f:	c9                   	leave  
   11990:	c3                   	ret    

00011991 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   11991:	55                   	push   %ebp
   11992:	89 e5                	mov    %esp,%ebp
   11994:	83 ec 08             	sub    $0x8,%esp
   11997:	8b 45 08             	mov    0x8(%ebp),%eax
   1199a:	8b 55 0c             	mov    0xc(%ebp),%edx
   1199d:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   119a1:	89 d0                	mov    %edx,%eax
   119a3:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   119a6:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   119aa:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   119ae:	ee                   	out    %al,(%dx)
}
   119af:	90                   	nop
   119b0:	c9                   	leave  
   119b1:	c3                   	ret    

000119b2 <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   119b2:	55                   	push   %ebp
   119b3:	89 e5                	mov    %esp,%ebp
   119b5:	83 ec 10             	sub    $0x10,%esp
  idt.start31_16 = (start >> 16) & 0xffff;  // 初始化IDT地址的高16位
   119b8:	8b 45 08             	mov    0x8(%ebp),%eax
   119bb:	c1 e8 10             	shr    $0x10,%eax
   119be:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  idt.start15_0 = start & 0xffff;           // 初始化IDT地址的低16位
   119c2:	8b 45 08             	mov    0x8(%ebp),%eax
   119c5:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   119c9:	8b 45 0c             	mov    0xc(%ebp),%eax
   119cc:	83 e8 01             	sub    $0x1,%eax
  idt.limit =
   119cf:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   119d3:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   119d7:	90                   	nop
   119d8:	c9                   	leave  
   119d9:	c3                   	ret    

000119da <read_cr2>:
static inline uint32_t read_cr2(void) {
   119da:	55                   	push   %ebp
   119db:	89 e5                	mov    %esp,%ebp
   119dd:	83 ec 10             	sub    $0x10,%esp
  __asm__ __volatile__("mov %%cr2, %[v]" : [v] "=r"(cr2));
   119e0:	0f 20 d0             	mov    %cr2,%eax
   119e3:	89 45 fc             	mov    %eax,-0x4(%ebp)
  return cr2;
   119e6:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   119e9:	c9                   	leave  
   119ea:	c3                   	ret    

000119eb <read_eflags>:
/**
 * @brief  读取当前cpu的eflags寄存器
 * 
 * @return uint32_t 放回eflags的值
 */
static inline uint32_t read_eflags(void) {
   119eb:	55                   	push   %ebp
   119ec:	89 e5                	mov    %esp,%ebp
   119ee:	83 ec 10             	sub    $0x10,%esp
  uint32_t eflags;
  //pushf 压入eflags的值到栈中
  __asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   119f1:	9c                   	pushf  
   119f2:	58                   	pop    %eax
   119f3:	89 45 fc             	mov    %eax,-0x4(%ebp)
  
  return eflags;
   119f6:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   119f9:	c9                   	leave  
   119fa:	c3                   	ret    

000119fb <write_eflags>:
/**
 * @brief  将状态state写入eflags寄存器
 * 
 * @param state 
 */
static inline void write_eflags(uint32_t state) {
   119fb:	55                   	push   %ebp
   119fc:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("push %%eax\n\tpopf"::"a"(state));
   119fe:	8b 45 08             	mov    0x8(%ebp),%eax
   11a01:	50                   	push   %eax
   11a02:	9d                   	popf   
}
   11a03:	90                   	nop
   11a04:	5d                   	pop    %ebp
   11a05:	c3                   	ret    

00011a06 <print_exception_fram>:
/**
 * @brief  打印异常栈帧信息
 * 
 * @param frame 栈帧
 */
static void print_exception_fram(const exception_frame_t *frame) {
   11a06:	55                   	push   %ebp
   11a07:	89 e5                	mov    %esp,%ebp
   11a09:	57                   	push   %edi
   11a0a:	56                   	push   %esi
   11a0b:	53                   	push   %ebx
   11a0c:	83 ec 2c             	sub    $0x2c,%esp
  uint32_t ss, esp;
  if (frame->cs & 0x3) {  //cpl不为0，因为只设置了两种特权级，所以当前cpl为3，即用户程序异常
   11a0f:	8b 45 08             	mov    0x8(%ebp),%eax
   11a12:	8b 40 3c             	mov    0x3c(%eax),%eax
   11a15:	83 e0 03             	and    $0x3,%eax
   11a18:	85 c0                	test   %eax,%eax
   11a1a:	74 14                	je     11a30 <print_exception_fram+0x2a>
    ss = frame->ss3;
   11a1c:	8b 45 08             	mov    0x8(%ebp),%eax
   11a1f:	8b 40 48             	mov    0x48(%eax),%eax
   11a22:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    esp = frame->esp3;
   11a25:	8b 45 08             	mov    0x8(%ebp),%eax
   11a28:	8b 40 44             	mov    0x44(%eax),%eax
   11a2b:	89 45 e0             	mov    %eax,-0x20(%ebp)
   11a2e:	eb 12                	jmp    11a42 <print_exception_fram+0x3c>
  } else {  //cpl为0，即内核异常
    ss = frame->ds; //内核ss与ds相同
   11a30:	8b 45 08             	mov    0x8(%ebp),%eax
   11a33:	8b 40 0c             	mov    0xc(%eax),%eax
   11a36:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    esp = frame->esp;
   11a39:	8b 45 08             	mov    0x8(%ebp),%eax
   11a3c:	8b 40 1c             	mov    0x1c(%eax),%eax
   11a3f:	89 45 e0             	mov    %eax,-0x20(%ebp)
  }

  log_printf("------------------------stack frame info---------------------");
   11a42:	83 ec 0c             	sub    $0xc,%esp
   11a45:	68 f8 3d 01 00       	push   $0x13df8
   11a4a:	e8 88 1f 00 00       	call   139d7 <log_printf>
   11a4f:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ:\t\t%d\nerror code:\t%d", frame->num, frame->error_code);
   11a52:	8b 45 08             	mov    0x8(%ebp),%eax
   11a55:	8b 50 34             	mov    0x34(%eax),%edx
   11a58:	8b 45 08             	mov    0x8(%ebp),%eax
   11a5b:	8b 40 30             	mov    0x30(%eax),%eax
   11a5e:	83 ec 04             	sub    $0x4,%esp
   11a61:	52                   	push   %edx
   11a62:	50                   	push   %eax
   11a63:	68 36 3e 01 00       	push   $0x13e36
   11a68:	e8 6a 1f 00 00       	call   139d7 <log_printf>
   11a6d:	83 c4 10             	add    $0x10,%esp
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
    //TODO:SS暂时没法获取，先用ds替代，之后再进行获取
    frame->cs, frame->ds, ss, frame->es, frame->fs, frame->gs
   11a70:	8b 45 08             	mov    0x8(%ebp),%eax
   11a73:	8b 30                	mov    (%eax),%esi
   11a75:	8b 45 08             	mov    0x8(%ebp),%eax
   11a78:	8b 58 04             	mov    0x4(%eax),%ebx
   11a7b:	8b 45 08             	mov    0x8(%ebp),%eax
   11a7e:	8b 48 08             	mov    0x8(%eax),%ecx
   11a81:	8b 45 08             	mov    0x8(%ebp),%eax
   11a84:	8b 50 0c             	mov    0xc(%eax),%edx
   11a87:	8b 45 08             	mov    0x8(%ebp),%eax
   11a8a:	8b 40 3c             	mov    0x3c(%eax),%eax
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
   11a8d:	83 ec 04             	sub    $0x4,%esp
   11a90:	56                   	push   %esi
   11a91:	53                   	push   %ebx
   11a92:	51                   	push   %ecx
   11a93:	ff 75 e4             	push   -0x1c(%ebp)
   11a96:	52                   	push   %edx
   11a97:	50                   	push   %eax
   11a98:	68 50 3e 01 00       	push   $0x13e50
   11a9d:	e8 35 1f 00 00       	call   139d7 <log_printf>
   11aa2:	83 c4 20             	add    $0x20,%esp
              "ESI:\t\t0x%x\n"
              "EDI:\t\t0x%x\n"
              "EBP:\t\t0x%x\n"
              "ESP:\t\t0x%x", 
              frame->eax, frame->ebx, frame->ecx, frame->edx,
              frame->esi, frame->edi, frame->ebp, esp 
   11aa5:	8b 45 08             	mov    0x8(%ebp),%eax
   11aa8:	8b 40 18             	mov    0x18(%eax),%eax
   11aab:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   11aae:	8b 45 08             	mov    0x8(%ebp),%eax
   11ab1:	8b 78 10             	mov    0x10(%eax),%edi
   11ab4:	8b 45 08             	mov    0x8(%ebp),%eax
   11ab7:	8b 70 14             	mov    0x14(%eax),%esi
              frame->eax, frame->ebx, frame->ecx, frame->edx,
   11aba:	8b 45 08             	mov    0x8(%ebp),%eax
   11abd:	8b 58 24             	mov    0x24(%eax),%ebx
   11ac0:	8b 45 08             	mov    0x8(%ebp),%eax
   11ac3:	8b 48 28             	mov    0x28(%eax),%ecx
   11ac6:	8b 45 08             	mov    0x8(%ebp),%eax
   11ac9:	8b 50 20             	mov    0x20(%eax),%edx
   11acc:	8b 45 08             	mov    0x8(%ebp),%eax
   11acf:	8b 40 2c             	mov    0x2c(%eax),%eax
  log_printf( 
   11ad2:	83 ec 0c             	sub    $0xc,%esp
   11ad5:	ff 75 e0             	push   -0x20(%ebp)
   11ad8:	ff 75 d4             	push   -0x2c(%ebp)
   11adb:	57                   	push   %edi
   11adc:	56                   	push   %esi
   11add:	53                   	push   %ebx
   11ade:	51                   	push   %ecx
   11adf:	52                   	push   %edx
   11ae0:	50                   	push   %eax
   11ae1:	68 80 3e 01 00       	push   $0x13e80
   11ae6:	e8 ec 1e 00 00       	call   139d7 <log_printf>
   11aeb:	83 c4 30             	add    $0x30,%esp
              );

  log_printf("EIP:\t\t0x%x\nEFLAGS:\t\t0x%x", frame->eip, frame->eflags);
   11aee:	8b 45 08             	mov    0x8(%ebp),%eax
   11af1:	8b 50 40             	mov    0x40(%eax),%edx
   11af4:	8b 45 08             	mov    0x8(%ebp),%eax
   11af7:	8b 40 38             	mov    0x38(%eax),%eax
   11afa:	83 ec 04             	sub    $0x4,%esp
   11afd:	52                   	push   %edx
   11afe:	50                   	push   %eax
   11aff:	68 d8 3e 01 00       	push   $0x13ed8
   11b04:	e8 ce 1e 00 00       	call   139d7 <log_printf>
   11b09:	83 c4 10             	add    $0x10,%esp
}
   11b0c:	90                   	nop
   11b0d:	8d 65 f4             	lea    -0xc(%ebp),%esp
   11b10:	5b                   	pop    %ebx
   11b11:	5e                   	pop    %esi
   11b12:	5f                   	pop    %edi
   11b13:	5d                   	pop    %ebp
   11b14:	c3                   	ret    

00011b15 <do_default_handler>:
 *
 * @param message 异常信息
 * @param fram  异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
static void do_default_handler(const exception_frame_t *frame,
                               const char *message) {
   11b15:	55                   	push   %ebp
   11b16:	89 e5                	mov    %esp,%ebp
   11b18:	83 ec 08             	sub    $0x8,%esp

  log_printf("---------------------------------------------------");
   11b1b:	83 ec 0c             	sub    $0xc,%esp
   11b1e:	68 f4 3e 01 00       	push   $0x13ef4
   11b23:	e8 af 1e 00 00       	call   139d7 <log_printf>
   11b28:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ/Exception happend: %s", message);
   11b2b:	83 ec 08             	sub    $0x8,%esp
   11b2e:	ff 75 0c             	push   0xc(%ebp)
   11b31:	68 28 3f 01 00       	push   $0x13f28
   11b36:	e8 9c 1e 00 00       	call   139d7 <log_printf>
   11b3b:	83 c4 10             	add    $0x10,%esp
  print_exception_fram(frame);
   11b3e:	83 ec 0c             	sub    $0xc,%esp
   11b41:	ff 75 08             	push   0x8(%ebp)
   11b44:	e8 bd fe ff ff       	call   11a06 <print_exception_fram>
   11b49:	83 c4 10             	add    $0x10,%esp
                              
  
  for (;;) {
    hlt();
   11b4c:	e8 1c fe ff ff       	call   1196d <hlt>
   11b51:	eb f9                	jmp    11b4c <do_default_handler+0x37>

00011b53 <do_handler_unknown>:

/**
 * @brief   对没有针对性处理程序的异常进行处理
 * @param frame 异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
void do_handler_unknown(const exception_frame_t *frame) {
   11b53:	55                   	push   %ebp
   11b54:	89 e5                	mov    %esp,%ebp
   11b56:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "unknown exception");
   11b59:	83 ec 08             	sub    $0x8,%esp
   11b5c:	68 42 3f 01 00       	push   $0x13f42
   11b61:	ff 75 08             	push   0x8(%ebp)
   11b64:	e8 ac ff ff ff       	call   11b15 <do_default_handler>
   11b69:	83 c4 10             	add    $0x10,%esp
}
   11b6c:	90                   	nop
   11b6d:	c9                   	leave  
   11b6e:	c3                   	ret    

00011b6f <do_handler_divider>:
/**
 * @brief  除0异常
 *
 * @param frame 异常栈帧
 */
void do_handler_divider(const exception_frame_t *frame) {
   11b6f:	55                   	push   %ebp
   11b70:	89 e5                	mov    %esp,%ebp
   11b72:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "divider exception");
   11b75:	83 ec 08             	sub    $0x8,%esp
   11b78:	68 54 3f 01 00       	push   $0x13f54
   11b7d:	ff 75 08             	push   0x8(%ebp)
   11b80:	e8 90 ff ff ff       	call   11b15 <do_default_handler>
   11b85:	83 c4 10             	add    $0x10,%esp
}
   11b88:	90                   	nop
   11b89:	c9                   	leave  
   11b8a:	c3                   	ret    

00011b8b <do_handler_debug>:

void do_handler_debug(const exception_frame_t *frame) {
   11b8b:	55                   	push   %ebp
   11b8c:	89 e5                	mov    %esp,%ebp
   11b8e:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "debug exception");
   11b91:	83 ec 08             	sub    $0x8,%esp
   11b94:	68 66 3f 01 00       	push   $0x13f66
   11b99:	ff 75 08             	push   0x8(%ebp)
   11b9c:	e8 74 ff ff ff       	call   11b15 <do_default_handler>
   11ba1:	83 c4 10             	add    $0x10,%esp
}
   11ba4:	90                   	nop
   11ba5:	c9                   	leave  
   11ba6:	c3                   	ret    

00011ba7 <do_handler_nmi>:

void do_handler_nmi(const exception_frame_t *frame) {
   11ba7:	55                   	push   %ebp
   11ba8:	89 e5                	mov    %esp,%ebp
   11baa:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "nmi exception");
   11bad:	83 ec 08             	sub    $0x8,%esp
   11bb0:	68 76 3f 01 00       	push   $0x13f76
   11bb5:	ff 75 08             	push   0x8(%ebp)
   11bb8:	e8 58 ff ff ff       	call   11b15 <do_default_handler>
   11bbd:	83 c4 10             	add    $0x10,%esp
}
   11bc0:	90                   	nop
   11bc1:	c9                   	leave  
   11bc2:	c3                   	ret    

00011bc3 <do_handler_breakpoint>:
void do_handler_breakpoint(const exception_frame_t *frame) {
   11bc3:	55                   	push   %ebp
   11bc4:	89 e5                	mov    %esp,%ebp
   11bc6:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "breakpoint exception");
   11bc9:	83 ec 08             	sub    $0x8,%esp
   11bcc:	68 84 3f 01 00       	push   $0x13f84
   11bd1:	ff 75 08             	push   0x8(%ebp)
   11bd4:	e8 3c ff ff ff       	call   11b15 <do_default_handler>
   11bd9:	83 c4 10             	add    $0x10,%esp
}
   11bdc:	90                   	nop
   11bdd:	c9                   	leave  
   11bde:	c3                   	ret    

00011bdf <do_handler_overflow>:
void do_handler_overflow(const exception_frame_t *frame) {
   11bdf:	55                   	push   %ebp
   11be0:	89 e5                	mov    %esp,%ebp
   11be2:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "overflow exception");
   11be5:	83 ec 08             	sub    $0x8,%esp
   11be8:	68 99 3f 01 00       	push   $0x13f99
   11bed:	ff 75 08             	push   0x8(%ebp)
   11bf0:	e8 20 ff ff ff       	call   11b15 <do_default_handler>
   11bf5:	83 c4 10             	add    $0x10,%esp
}
   11bf8:	90                   	nop
   11bf9:	c9                   	leave  
   11bfa:	c3                   	ret    

00011bfb <do_handler_bound_range>:
void do_handler_bound_range(const exception_frame_t *frame) {
   11bfb:	55                   	push   %ebp
   11bfc:	89 e5                	mov    %esp,%ebp
   11bfe:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "bound_range exception");
   11c01:	83 ec 08             	sub    $0x8,%esp
   11c04:	68 ac 3f 01 00       	push   $0x13fac
   11c09:	ff 75 08             	push   0x8(%ebp)
   11c0c:	e8 04 ff ff ff       	call   11b15 <do_default_handler>
   11c11:	83 c4 10             	add    $0x10,%esp
}
   11c14:	90                   	nop
   11c15:	c9                   	leave  
   11c16:	c3                   	ret    

00011c17 <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(const exception_frame_t *frame) {
   11c17:	55                   	push   %ebp
   11c18:	89 e5                	mov    %esp,%ebp
   11c1a:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_opcode exception");
   11c1d:	83 ec 08             	sub    $0x8,%esp
   11c20:	68 c2 3f 01 00       	push   $0x13fc2
   11c25:	ff 75 08             	push   0x8(%ebp)
   11c28:	e8 e8 fe ff ff       	call   11b15 <do_default_handler>
   11c2d:	83 c4 10             	add    $0x10,%esp
}
   11c30:	90                   	nop
   11c31:	c9                   	leave  
   11c32:	c3                   	ret    

00011c33 <do_handler_device_unavailable>:
void do_handler_device_unavailable(const exception_frame_t *frame) {
   11c33:	55                   	push   %ebp
   11c34:	89 e5                	mov    %esp,%ebp
   11c36:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "device_unavailable exception");
   11c39:	83 ec 08             	sub    $0x8,%esp
   11c3c:	68 db 3f 01 00       	push   $0x13fdb
   11c41:	ff 75 08             	push   0x8(%ebp)
   11c44:	e8 cc fe ff ff       	call   11b15 <do_default_handler>
   11c49:	83 c4 10             	add    $0x10,%esp
}
   11c4c:	90                   	nop
   11c4d:	c9                   	leave  
   11c4e:	c3                   	ret    

00011c4f <do_handler_double_fault>:
void do_handler_double_fault(const exception_frame_t *frame) {
   11c4f:	55                   	push   %ebp
   11c50:	89 e5                	mov    %esp,%ebp
   11c52:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "double_fault exception");
   11c55:	83 ec 08             	sub    $0x8,%esp
   11c58:	68 f8 3f 01 00       	push   $0x13ff8
   11c5d:	ff 75 08             	push   0x8(%ebp)
   11c60:	e8 b0 fe ff ff       	call   11b15 <do_default_handler>
   11c65:	83 c4 10             	add    $0x10,%esp
}
   11c68:	90                   	nop
   11c69:	c9                   	leave  
   11c6a:	c3                   	ret    

00011c6b <do_handler_invalid_tss>:
void do_handler_invalid_tss(const exception_frame_t *frame) {
   11c6b:	55                   	push   %ebp
   11c6c:	89 e5                	mov    %esp,%ebp
   11c6e:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_tss exception");
   11c71:	83 ec 08             	sub    $0x8,%esp
   11c74:	68 0f 40 01 00       	push   $0x1400f
   11c79:	ff 75 08             	push   0x8(%ebp)
   11c7c:	e8 94 fe ff ff       	call   11b15 <do_default_handler>
   11c81:	83 c4 10             	add    $0x10,%esp
}
   11c84:	90                   	nop
   11c85:	c9                   	leave  
   11c86:	c3                   	ret    

00011c87 <do_handler_segment_not_present>:
void do_handler_segment_not_present(const exception_frame_t *frame) {
   11c87:	55                   	push   %ebp
   11c88:	89 e5                	mov    %esp,%ebp
   11c8a:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "segment_not_present exception");
   11c8d:	83 ec 08             	sub    $0x8,%esp
   11c90:	68 25 40 01 00       	push   $0x14025
   11c95:	ff 75 08             	push   0x8(%ebp)
   11c98:	e8 78 fe ff ff       	call   11b15 <do_default_handler>
   11c9d:	83 c4 10             	add    $0x10,%esp
}
   11ca0:	90                   	nop
   11ca1:	c9                   	leave  
   11ca2:	c3                   	ret    

00011ca3 <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(const exception_frame_t *frame) {
   11ca3:	55                   	push   %ebp
   11ca4:	89 e5                	mov    %esp,%ebp
   11ca6:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "stack_segment_fault exception");
   11ca9:	83 ec 08             	sub    $0x8,%esp
   11cac:	68 43 40 01 00       	push   $0x14043
   11cb1:	ff 75 08             	push   0x8(%ebp)
   11cb4:	e8 5c fe ff ff       	call   11b15 <do_default_handler>
   11cb9:	83 c4 10             	add    $0x10,%esp
}
   11cbc:	90                   	nop
   11cbd:	c9                   	leave  
   11cbe:	c3                   	ret    

00011cbf <do_handler_general_protection>:
void do_handler_general_protection(const exception_frame_t *frame) {
   11cbf:	55                   	push   %ebp
   11cc0:	89 e5                	mov    %esp,%ebp
   11cc2:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   11cc5:	83 ec 0c             	sub    $0xc,%esp
   11cc8:	68 64 40 01 00       	push   $0x14064
   11ccd:	e8 05 1d 00 00       	call   139d7 <log_printf>
   11cd2:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: General Protection.");
   11cd5:	83 ec 0c             	sub    $0xc,%esp
   11cd8:	68 88 40 01 00       	push   $0x14088
   11cdd:	e8 f5 1c 00 00       	call   139d7 <log_printf>
   11ce2:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_EXT) {
   11ce5:	8b 45 08             	mov    0x8(%ebp),%eax
   11ce8:	8b 40 34             	mov    0x34(%eax),%eax
   11ceb:	83 e0 01             	and    $0x1,%eax
   11cee:	85 c0                	test   %eax,%eax
   11cf0:	74 12                	je     11d04 <do_handler_general_protection+0x45>
        log_printf("the exception occurred during delivery of an "
   11cf2:	83 ec 0c             	sub    $0xc,%esp
   11cf5:	68 b4 40 01 00       	push   $0x140b4
   11cfa:	e8 d8 1c 00 00       	call   139d7 <log_printf>
   11cff:	83 c4 10             	add    $0x10,%esp
   11d02:	eb 10                	jmp    11d14 <do_handler_general_protection+0x55>
                "event external to the program, such as an interrupt"
                "or an earlier exception.");
    } else {
        log_printf("the exception occurred during delivery of a"
   11d04:	83 ec 0c             	sub    $0xc,%esp
   11d07:	68 30 41 01 00       	push   $0x14130
   11d0c:	e8 c6 1c 00 00       	call   139d7 <log_printf>
   11d11:	83 c4 10             	add    $0x10,%esp
                    "software interrupt (INT n, INT3, or INTO).");
    }
    
    if (frame->error_code & ERR_IDT) {
   11d14:	8b 45 08             	mov    0x8(%ebp),%eax
   11d17:	8b 40 34             	mov    0x34(%eax),%eax
   11d1a:	83 e0 02             	and    $0x2,%eax
   11d1d:	85 c0                	test   %eax,%eax
   11d1f:	74 12                	je     11d33 <do_handler_general_protection+0x74>
        log_printf("the index portion of the error code refers "
   11d21:	83 ec 0c             	sub    $0xc,%esp
   11d24:	68 88 41 01 00       	push   $0x14188
   11d29:	e8 a9 1c 00 00       	call   139d7 <log_printf>
   11d2e:	83 c4 10             	add    $0x10,%esp
   11d31:	eb 10                	jmp    11d43 <do_handler_general_protection+0x84>
                    "to a gate descriptor in the IDT");
    } else {
        log_printf("the index refers to a descriptor in the GDT");
   11d33:	83 ec 0c             	sub    $0xc,%esp
   11d36:	68 d4 41 01 00       	push   $0x141d4
   11d3b:	e8 97 1c 00 00       	call   139d7 <log_printf>
   11d40:	83 c4 10             	add    $0x10,%esp
    }
    
    log_printf("segment index: %d", frame->error_code & 0xFFF8);
   11d43:	8b 45 08             	mov    0x8(%ebp),%eax
   11d46:	8b 40 34             	mov    0x34(%eax),%eax
   11d49:	25 f8 ff 00 00       	and    $0xfff8,%eax
   11d4e:	83 ec 08             	sub    $0x8,%esp
   11d51:	50                   	push   %eax
   11d52:	68 00 42 01 00       	push   $0x14200
   11d57:	e8 7b 1c 00 00       	call   139d7 <log_printf>
   11d5c:	83 c4 10             	add    $0x10,%esp
    print_exception_fram(frame);
   11d5f:	83 ec 0c             	sub    $0xc,%esp
   11d62:	ff 75 08             	push   0x8(%ebp)
   11d65:	e8 9c fc ff ff       	call   11a06 <print_exception_fram>
   11d6a:	83 c4 10             	add    $0x10,%esp
}
   11d6d:	90                   	nop
   11d6e:	c9                   	leave  
   11d6f:	c3                   	ret    

00011d70 <do_handler_page_fault>:
/**
 * @brief page_fault异常处理函数
 * 
 * @param frame 
 */
void do_handler_page_fault(const exception_frame_t *frame) {
   11d70:	55                   	push   %ebp
   11d71:	89 e5                	mov    %esp,%ebp
   11d73:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   11d76:	83 ec 0c             	sub    $0xc,%esp
   11d79:	68 64 40 01 00       	push   $0x14064
   11d7e:	e8 54 1c 00 00       	call   139d7 <log_printf>
   11d83:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: Page fault.");
   11d86:	83 ec 0c             	sub    $0xc,%esp
   11d89:	68 14 42 01 00       	push   $0x14214
   11d8e:	e8 44 1c 00 00       	call   139d7 <log_printf>
   11d93:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_PAGE_P) {
   11d96:	8b 45 08             	mov    0x8(%ebp),%eax
   11d99:	8b 40 34             	mov    0x34(%eax),%eax
   11d9c:	83 e0 01             	and    $0x1,%eax
   11d9f:	85 c0                	test   %eax,%eax
   11da1:	74 18                	je     11dbb <do_handler_page_fault+0x4b>
        log_printf("page-level protection violation: 0x%x.", read_cr2());
   11da3:	e8 32 fc ff ff       	call   119da <read_cr2>
   11da8:	83 ec 08             	sub    $0x8,%esp
   11dab:	50                   	push   %eax
   11dac:	68 38 42 01 00       	push   $0x14238
   11db1:	e8 21 1c 00 00       	call   139d7 <log_printf>
   11db6:	83 c4 10             	add    $0x10,%esp
   11db9:	eb 16                	jmp    11dd1 <do_handler_page_fault+0x61>
    } else {
        log_printf("Page doesn't present 0x%x", read_cr2());
   11dbb:	e8 1a fc ff ff       	call   119da <read_cr2>
   11dc0:	83 ec 08             	sub    $0x8,%esp
   11dc3:	50                   	push   %eax
   11dc4:	68 5f 42 01 00       	push   $0x1425f
   11dc9:	e8 09 1c 00 00       	call   139d7 <log_printf>
   11dce:	83 c4 10             	add    $0x10,%esp
   }
    
    if (frame->error_code & ERR_PAGE_WR) {
   11dd1:	8b 45 08             	mov    0x8(%ebp),%eax
   11dd4:	8b 40 34             	mov    0x34(%eax),%eax
   11dd7:	83 e0 02             	and    $0x2,%eax
   11dda:	85 c0                	test   %eax,%eax
   11ddc:	74 12                	je     11df0 <do_handler_page_fault+0x80>
        log_printf("The access causing the fault was a write.");
   11dde:	83 ec 0c             	sub    $0xc,%esp
   11de1:	68 7c 42 01 00       	push   $0x1427c
   11de6:	e8 ec 1b 00 00       	call   139d7 <log_printf>
   11deb:	83 c4 10             	add    $0x10,%esp
   11dee:	eb 10                	jmp    11e00 <do_handler_page_fault+0x90>
    } else {
        log_printf("The access causing the fault was a read.");
   11df0:	83 ec 0c             	sub    $0xc,%esp
   11df3:	68 a8 42 01 00       	push   $0x142a8
   11df8:	e8 da 1b 00 00       	call   139d7 <log_printf>
   11dfd:	83 c4 10             	add    $0x10,%esp
    }
    
    if (frame->error_code & ERR_PAGE_US) {
   11e00:	8b 45 08             	mov    0x8(%ebp),%eax
   11e03:	8b 40 34             	mov    0x34(%eax),%eax
   11e06:	83 e0 04             	and    $0x4,%eax
   11e09:	85 c0                	test   %eax,%eax
   11e0b:	74 12                	je     11e1f <do_handler_page_fault+0xaf>
        log_printf("A user-mode access caused the fault.");
   11e0d:	83 ec 0c             	sub    $0xc,%esp
   11e10:	68 d4 42 01 00       	push   $0x142d4
   11e15:	e8 bd 1b 00 00       	call   139d7 <log_printf>
   11e1a:	83 c4 10             	add    $0x10,%esp
   11e1d:	eb 10                	jmp    11e2f <do_handler_page_fault+0xbf>
    } else {
        log_printf("A supervisor-mode access caused the fault.");
   11e1f:	83 ec 0c             	sub    $0xc,%esp
   11e22:	68 fc 42 01 00       	push   $0x142fc
   11e27:	e8 ab 1b 00 00       	call   139d7 <log_printf>
   11e2c:	83 c4 10             	add    $0x10,%esp
    }

   print_exception_fram(frame);
   11e2f:	83 ec 0c             	sub    $0xc,%esp
   11e32:	ff 75 08             	push   0x8(%ebp)
   11e35:	e8 cc fb ff ff       	call   11a06 <print_exception_fram>
   11e3a:	83 c4 10             	add    $0x10,%esp
}
   11e3d:	90                   	nop
   11e3e:	c9                   	leave  
   11e3f:	c3                   	ret    

00011e40 <do_handler_fpu_error>:

void do_handler_fpu_error(const exception_frame_t *frame) {
   11e40:	55                   	push   %ebp
   11e41:	89 e5                	mov    %esp,%ebp
   11e43:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "fpu_error exception");
   11e46:	83 ec 08             	sub    $0x8,%esp
   11e49:	68 27 43 01 00       	push   $0x14327
   11e4e:	ff 75 08             	push   0x8(%ebp)
   11e51:	e8 bf fc ff ff       	call   11b15 <do_default_handler>
   11e56:	83 c4 10             	add    $0x10,%esp
}
   11e59:	90                   	nop
   11e5a:	c9                   	leave  
   11e5b:	c3                   	ret    

00011e5c <do_handler_alignment_check>:
void do_handler_alignment_check(const exception_frame_t *frame) {
   11e5c:	55                   	push   %ebp
   11e5d:	89 e5                	mov    %esp,%ebp
   11e5f:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "alignment_check exception");
   11e62:	83 ec 08             	sub    $0x8,%esp
   11e65:	68 3b 43 01 00       	push   $0x1433b
   11e6a:	ff 75 08             	push   0x8(%ebp)
   11e6d:	e8 a3 fc ff ff       	call   11b15 <do_default_handler>
   11e72:	83 c4 10             	add    $0x10,%esp
}
   11e75:	90                   	nop
   11e76:	c9                   	leave  
   11e77:	c3                   	ret    

00011e78 <do_handler_machine_check>:
void do_handler_machine_check(const exception_frame_t *frame) {
   11e78:	55                   	push   %ebp
   11e79:	89 e5                	mov    %esp,%ebp
   11e7b:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "machine_check exception");
   11e7e:	83 ec 08             	sub    $0x8,%esp
   11e81:	68 55 43 01 00       	push   $0x14355
   11e86:	ff 75 08             	push   0x8(%ebp)
   11e89:	e8 87 fc ff ff       	call   11b15 <do_default_handler>
   11e8e:	83 c4 10             	add    $0x10,%esp
}
   11e91:	90                   	nop
   11e92:	c9                   	leave  
   11e93:	c3                   	ret    

00011e94 <do_handler_smd_exception>:
void do_handler_smd_exception(const exception_frame_t *frame) {
   11e94:	55                   	push   %ebp
   11e95:	89 e5                	mov    %esp,%ebp
   11e97:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "smd_exception exception");
   11e9a:	83 ec 08             	sub    $0x8,%esp
   11e9d:	68 6d 43 01 00       	push   $0x1436d
   11ea2:	ff 75 08             	push   0x8(%ebp)
   11ea5:	e8 6b fc ff ff       	call   11b15 <do_default_handler>
   11eaa:	83 c4 10             	add    $0x10,%esp
}
   11ead:	90                   	nop
   11eae:	c9                   	leave  
   11eaf:	c3                   	ret    

00011eb0 <do_handler_virtual_exception>:
void do_handler_virtual_exception(const exception_frame_t *frame) {
   11eb0:	55                   	push   %ebp
   11eb1:	89 e5                	mov    %esp,%ebp
   11eb3:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "virtual_exception exception");
   11eb6:	83 ec 08             	sub    $0x8,%esp
   11eb9:	68 85 43 01 00       	push   $0x14385
   11ebe:	ff 75 08             	push   0x8(%ebp)
   11ec1:	e8 4f fc ff ff       	call   11b15 <do_default_handler>
   11ec6:	83 c4 10             	add    $0x10,%esp
}
   11ec9:	90                   	nop
   11eca:	c9                   	leave  
   11ecb:	c3                   	ret    

00011ecc <do_handler_control_exception>:
void do_handler_control_exception(const exception_frame_t *frame) {
   11ecc:	55                   	push   %ebp
   11ecd:	89 e5                	mov    %esp,%ebp
   11ecf:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "control_exception exception");
   11ed2:	83 ec 08             	sub    $0x8,%esp
   11ed5:	68 a1 43 01 00       	push   $0x143a1
   11eda:	ff 75 08             	push   0x8(%ebp)
   11edd:	e8 33 fc ff ff       	call   11b15 <do_default_handler>
   11ee2:	83 c4 10             	add    $0x10,%esp
}
   11ee5:	90                   	nop
   11ee6:	c9                   	leave  
   11ee7:	c3                   	ret    

00011ee8 <idt_install>:
 *
 * @param idt_num 异常的下标
 * @param handler 异常处理程序的偏移地址
 * @return int 成功返回 0 失败放回 -1
 */
int idt_install(const int idt_num, const idt_handler_t handler) {
   11ee8:	55                   	push   %ebp
   11ee9:	89 e5                	mov    %esp,%ebp
   11eeb:	83 ec 08             	sub    $0x8,%esp
  // 1.判断IDT下标是否越界
  if (idt_num >= IDT_TABLE_SIZE || idt_num < 0) return -1;
   11eee:	81 7d 08 ff 00 00 00 	cmpl   $0xff,0x8(%ebp)
   11ef5:	7f 06                	jg     11efd <idt_install+0x15>
   11ef7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11efb:	79 07                	jns    11f04 <idt_install+0x1c>
   11efd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11f02:	eb 25                	jmp    11f29 <idt_install+0x41>
  // 2.在IDT表中设置下标为 idt_num 的中断门,中断门描述符的 DPL <= CPL, 
  //因为中断门是cpu自己从中断描述符表中索引，也可以用 int $中断号主动触发，
  //int $ 主动触发需要中断门描述符的DPL >= CPL
  //所以没有请求选择子即RPL用检查因为没有
  //若目标代码段的特权级更高则发生特权级转换
  gate_desc_set(idt_table + idt_num, KERNEL_SELECTOR_CS, (uint32_t)handler,
   11f04:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f07:	8b 55 08             	mov    0x8(%ebp),%edx
   11f0a:	c1 e2 03             	shl    $0x3,%edx
   11f0d:	81 c2 00 02 03 00    	add    $0x30200,%edx
   11f13:	68 00 8e 00 00       	push   $0x8e00
   11f18:	50                   	push   %eax
   11f19:	6a 08                	push   $0x8
   11f1b:	52                   	push   %edx
   11f1c:	e8 c1 f7 ff ff       	call   116e2 <gate_desc_set>
   11f21:	83 c4 10             	add    $0x10,%esp
                GATE_TYPE_INT | GATE_ATTR_P | GATE_ATTR_DPL_0);

  return 0;
   11f24:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11f29:	c9                   	leave  
   11f2a:	c3                   	ret    

00011f2b <init_pic>:

/**
 * @brief  初始化主从8259芯片
 * 
 */
static void init_pic(void) {
   11f2b:	55                   	push   %ebp
   11f2c:	89 e5                	mov    %esp,%ebp
  //1.对主片(8259A芯片)进行初始化, 写入时必须按照ICW1~4的顺序写入
  outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);  //ICW1:边缘触发，级联模式，需要ICW4
   11f2e:	6a 11                	push   $0x11
   11f30:	6a 20                	push   $0x20
   11f32:	e8 5a fa ff ff       	call   11991 <outb>
   11f37:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW2, PIC_ICW2_IDT_START);                //ICW2:起始中断向量号为0x20
   11f3a:	6a 20                	push   $0x20
   11f3c:	6a 21                	push   $0x21
   11f3e:	e8 4e fa ff ff       	call   11991 <outb>
   11f43:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW3, PIC_ICW3_MASTER_CASCADE);           //ICW3:主片用IR2级联从片
   11f46:	6a 04                	push   $0x4
   11f48:	6a 21                	push   $0x21
   11f4a:	e8 42 fa ff ff       	call   11991 <outb>
   11f4f:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW4, PIC_ICW4_8086);                     //ICW4:8086模式，正常EOI
   11f52:	6a 01                	push   $0x1
   11f54:	6a 21                	push   $0x21
   11f56:	e8 36 fa ff ff       	call   11991 <outb>
   11f5b:	83 c4 08             	add    $0x8,%esp

  //2.对从片(8259A芯片)进行初始化
  outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);
   11f5e:	6a 11                	push   $0x11
   11f60:	68 a0 00 00 00       	push   $0xa0
   11f65:	e8 27 fa ff ff       	call   11991 <outb>
   11f6a:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW2, PIC_ICW2_IDT_START + 8); //第一块芯片占用了8个中断，所以第二块芯片从第8个中断的下一个开始
   11f6d:	6a 28                	push   $0x28
   11f6f:	68 a1 00 00 00       	push   $0xa1
   11f74:	e8 18 fa ff ff       	call   11991 <outb>
   11f79:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW3, PIC_ICW3_SLAVE_CASCADE);
   11f7c:	6a 02                	push   $0x2
   11f7e:	68 a1 00 00 00       	push   $0xa1
   11f83:	e8 09 fa ff ff       	call   11991 <outb>
   11f88:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW4, PIC_ICW4_8086);
   11f8b:	6a 01                	push   $0x1
   11f8d:	68 a1 00 00 00       	push   $0xa1
   11f92:	e8 fa f9 ff ff       	call   11991 <outb>
   11f97:	83 c4 08             	add    $0x8,%esp


  //3.初始化完两块8259芯片后，还需要为每一个中断设置处理程序
  //才可以去接收中断，所以现在要屏蔽中断，IMR位置1则屏蔽该中断请求，0则不屏蔽
  outb(PIC0_IMR, 0xfb); //屏蔽主片除 irq2(第3位) 以外的位传来的中断，(1111 1011)
   11f9a:	68 fb 00 00 00       	push   $0xfb
   11f9f:	6a 21                	push   $0x21
   11fa1:	e8 eb f9 ff ff       	call   11991 <outb>
   11fa6:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_IMR, 0xff); //屏蔽从片的所有中断
   11fa9:	68 ff 00 00 00       	push   $0xff
   11fae:	68 a1 00 00 00       	push   $0xa1
   11fb3:	e8 d9 f9 ff ff       	call   11991 <outb>
   11fb8:	83 c4 08             	add    $0x8,%esp


}
   11fbb:	90                   	nop
   11fbc:	c9                   	leave  
   11fbd:	c3                   	ret    

00011fbe <idt_init>:

/**
 * @brief  初始化中断向量表
 *
 */
void idt_init(void) {
   11fbe:	55                   	push   %ebp
   11fbf:	89 e5                	mov    %esp,%ebp
   11fc1:	83 ec 18             	sub    $0x18,%esp
  // 1.初始化IDT中的各个中断门(未知异常类型)
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   11fc4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11fcb:	eb 17                	jmp    11fe4 <idt_init+0x26>
    idt_install(i, (idt_handler_t)exception_handler_unknown);
   11fcd:	83 ec 08             	sub    $0x8,%esp
   11fd0:	68 2a 00 01 00       	push   $0x1002a
   11fd5:	ff 75 f4             	push   -0xc(%ebp)
   11fd8:	e8 0b ff ff ff       	call   11ee8 <idt_install>
   11fdd:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   11fe0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11fe4:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   11feb:	7e e0                	jle    11fcd <idt_init+0xf>
  }

  // 2.绑定异常中断向量表中对应下标的中断门的处理函数
  idt_install(IDT0_DE, (idt_handler_t)exception_handler_divider);
   11fed:	83 ec 08             	sub    $0x8,%esp
   11ff0:	68 47 00 01 00       	push   $0x10047
   11ff5:	6a 00                	push   $0x0
   11ff7:	e8 ec fe ff ff       	call   11ee8 <idt_install>
   11ffc:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT1_DB, (idt_handler_t)exception_handler_debug);
   11fff:	83 ec 08             	sub    $0x8,%esp
   12002:	68 64 00 01 00       	push   $0x10064
   12007:	6a 01                	push   $0x1
   12009:	e8 da fe ff ff       	call   11ee8 <idt_install>
   1200e:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT2_NMI, (idt_handler_t)exception_handler_nmi);
   12011:	83 ec 08             	sub    $0x8,%esp
   12014:	68 81 00 01 00       	push   $0x10081
   12019:	6a 02                	push   $0x2
   1201b:	e8 c8 fe ff ff       	call   11ee8 <idt_install>
   12020:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT3_BP, (idt_handler_t)exception_handler_breakpoint);
   12023:	83 ec 08             	sub    $0x8,%esp
   12026:	68 9e 00 01 00       	push   $0x1009e
   1202b:	6a 03                	push   $0x3
   1202d:	e8 b6 fe ff ff       	call   11ee8 <idt_install>
   12032:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT4_OF, (idt_handler_t)exception_handler_overflow);
   12035:	83 ec 08             	sub    $0x8,%esp
   12038:	68 bb 00 01 00       	push   $0x100bb
   1203d:	6a 04                	push   $0x4
   1203f:	e8 a4 fe ff ff       	call   11ee8 <idt_install>
   12044:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT5_BR, (idt_handler_t)exception_handler_bound_range);
   12047:	83 ec 08             	sub    $0x8,%esp
   1204a:	68 d8 00 01 00       	push   $0x100d8
   1204f:	6a 05                	push   $0x5
   12051:	e8 92 fe ff ff       	call   11ee8 <idt_install>
   12056:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT6_UD, (idt_handler_t)exception_handler_invalid_opcode);
   12059:	83 ec 08             	sub    $0x8,%esp
   1205c:	68 f5 00 01 00       	push   $0x100f5
   12061:	6a 06                	push   $0x6
   12063:	e8 80 fe ff ff       	call   11ee8 <idt_install>
   12068:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT7_NM, (idt_handler_t)exception_handler_device_unavailable);
   1206b:	83 ec 08             	sub    $0x8,%esp
   1206e:	68 12 01 01 00       	push   $0x10112
   12073:	6a 07                	push   $0x7
   12075:	e8 6e fe ff ff       	call   11ee8 <idt_install>
   1207a:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT8_DF, (idt_handler_t)exception_handler_double_fault);
   1207d:	83 ec 08             	sub    $0x8,%esp
   12080:	68 2f 01 01 00       	push   $0x1012f
   12085:	6a 08                	push   $0x8
   12087:	e8 5c fe ff ff       	call   11ee8 <idt_install>
   1208c:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT10_TS, (idt_handler_t)exception_handler_invalid_tss);
   1208f:	83 ec 08             	sub    $0x8,%esp
   12092:	68 4a 01 01 00       	push   $0x1014a
   12097:	6a 0a                	push   $0xa
   12099:	e8 4a fe ff ff       	call   11ee8 <idt_install>
   1209e:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT11_NP, (idt_handler_t)exception_handler_segment_not_present);
   120a1:	83 ec 08             	sub    $0x8,%esp
   120a4:	68 65 01 01 00       	push   $0x10165
   120a9:	6a 0b                	push   $0xb
   120ab:	e8 38 fe ff ff       	call   11ee8 <idt_install>
   120b0:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT12_SS, (idt_handler_t)exception_handler_stack_segment_fault);
   120b3:	83 ec 08             	sub    $0x8,%esp
   120b6:	68 80 01 01 00       	push   $0x10180
   120bb:	6a 0c                	push   $0xc
   120bd:	e8 26 fe ff ff       	call   11ee8 <idt_install>
   120c2:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT13_GP, (idt_handler_t)exception_handler_general_protection);
   120c5:	83 ec 08             	sub    $0x8,%esp
   120c8:	68 9b 01 01 00       	push   $0x1019b
   120cd:	6a 0d                	push   $0xd
   120cf:	e8 14 fe ff ff       	call   11ee8 <idt_install>
   120d4:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT14_PF, (idt_handler_t)exception_handler_page_fault);
   120d7:	83 ec 08             	sub    $0x8,%esp
   120da:	68 b6 01 01 00       	push   $0x101b6
   120df:	6a 0e                	push   $0xe
   120e1:	e8 02 fe ff ff       	call   11ee8 <idt_install>
   120e6:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT16_MF, (idt_handler_t)exception_handler_fpu_error);
   120e9:	83 ec 08             	sub    $0x8,%esp
   120ec:	68 d1 01 01 00       	push   $0x101d1
   120f1:	6a 10                	push   $0x10
   120f3:	e8 f0 fd ff ff       	call   11ee8 <idt_install>
   120f8:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT17_AC, (idt_handler_t)exception_handler_alignment_check);
   120fb:	83 ec 08             	sub    $0x8,%esp
   120fe:	68 ee 01 01 00       	push   $0x101ee
   12103:	6a 11                	push   $0x11
   12105:	e8 de fd ff ff       	call   11ee8 <idt_install>
   1210a:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT18_MC, (idt_handler_t)exception_handler_machine_check);
   1210d:	83 ec 08             	sub    $0x8,%esp
   12110:	68 09 02 01 00       	push   $0x10209
   12115:	6a 12                	push   $0x12
   12117:	e8 cc fd ff ff       	call   11ee8 <idt_install>
   1211c:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT19_XM, (idt_handler_t)exception_handler_smd_exception);
   1211f:	83 ec 08             	sub    $0x8,%esp
   12122:	68 26 02 01 00       	push   $0x10226
   12127:	6a 13                	push   $0x13
   12129:	e8 ba fd ff ff       	call   11ee8 <idt_install>
   1212e:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT20_VE, (idt_handler_t)exception_handler_virtual_exception);
   12131:	83 ec 08             	sub    $0x8,%esp
   12134:	68 43 02 01 00       	push   $0x10243
   12139:	6a 14                	push   $0x14
   1213b:	e8 a8 fd ff ff       	call   11ee8 <idt_install>
   12140:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT21_CP, (idt_handler_t)exception_handler_control_exception);
   12143:	83 ec 08             	sub    $0x8,%esp
   12146:	68 60 02 01 00       	push   $0x10260
   1214b:	6a 15                	push   $0x15
   1214d:	e8 96 fd ff ff       	call   11ee8 <idt_install>
   12152:	83 c4 10             	add    $0x10,%esp

  //3.加载IDT
  lidt((uint32_t)idt_table, sizeof(idt_table));
   12155:	b8 00 02 03 00       	mov    $0x30200,%eax
   1215a:	83 ec 08             	sub    $0x8,%esp
   1215d:	68 00 08 00 00       	push   $0x800
   12162:	50                   	push   %eax
   12163:	e8 4a f8 ff ff       	call   119b2 <lidt>
   12168:	83 c4 10             	add    $0x10,%esp

  //4.初始化8259设备中断芯片
  init_pic();
   1216b:	e8 bb fd ff ff       	call   11f2b <init_pic>
}
   12170:	90                   	nop
   12171:	c9                   	leave  
   12172:	c3                   	ret    

00012173 <idt_enable>:
/**
 * @brief  开启外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号,即IDT中的下标
 */
void idt_enable(uint8_t irq_num) {
   12173:	55                   	push   %ebp
   12174:	89 e5                	mov    %esp,%ebp
   12176:	53                   	push   %ebx
   12177:	83 ec 14             	sub    $0x14,%esp
   1217a:	8b 45 08             	mov    0x8(%ebp),%eax
   1217d:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   12180:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   12184:	76 7f                	jbe    12205 <idt_enable+0x92>
   12186:	80 7d e8 2e          	cmpb   $0x2e,-0x18(%ebp)
   1218a:	77 79                	ja     12205 <idt_enable+0x92>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   1218c:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置0，即不屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   12190:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   12194:	77 33                	ja     121c9 <idt_enable+0x56>
    uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   12196:	6a 21                	push   $0x21
   12198:	e8 d7 f7 ff ff       	call   11974 <inb>
   1219d:	83 c4 04             	add    $0x4,%esp
   121a0:	89 c3                	mov    %eax,%ebx
   121a2:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   121a6:	ba 01 00 00 00       	mov    $0x1,%edx
   121ab:	89 c1                	mov    %eax,%ecx
   121ad:	d3 e2                	shl    %cl,%edx
   121af:	89 d0                	mov    %edx,%eax
   121b1:	f7 d0                	not    %eax
   121b3:	21 d8                	and    %ebx,%eax
   121b5:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   121b8:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   121bc:	50                   	push   %eax
   121bd:	6a 21                	push   $0x21
   121bf:	e8 cd f7 ff ff       	call   11991 <outb>
   121c4:	83 c4 08             	add    $0x8,%esp
   121c7:	eb 3d                	jmp    12206 <idt_enable+0x93>
  } else {
    uint8_t mask = inb(PIC1_IMR) & ~(1 << (irq_num - 8));
   121c9:	68 a1 00 00 00       	push   $0xa1
   121ce:	e8 a1 f7 ff ff       	call   11974 <inb>
   121d3:	83 c4 04             	add    $0x4,%esp
   121d6:	89 c3                	mov    %eax,%ebx
   121d8:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   121dc:	83 e8 08             	sub    $0x8,%eax
   121df:	ba 01 00 00 00       	mov    $0x1,%edx
   121e4:	89 c1                	mov    %eax,%ecx
   121e6:	d3 e2                	shl    %cl,%edx
   121e8:	89 d0                	mov    %edx,%eax
   121ea:	f7 d0                	not    %eax
   121ec:	21 d8                	and    %ebx,%eax
   121ee:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   121f1:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   121f5:	50                   	push   %eax
   121f6:	68 a1 00 00 00       	push   $0xa1
   121fb:	e8 91 f7 ff ff       	call   11991 <outb>
   12200:	83 c4 08             	add    $0x8,%esp
   12203:	eb 01                	jmp    12206 <idt_enable+0x93>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   12205:	90                   	nop
  }
  
}
   12206:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   12209:	c9                   	leave  
   1220a:	c3                   	ret    

0001220b <idt_disable>:
/**
 * @brief  关闭外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号，即IDT中的下标
 */
void idt_disable(uint8_t irq_num) {
   1220b:	55                   	push   %ebp
   1220c:	89 e5                	mov    %esp,%ebp
   1220e:	53                   	push   %ebx
   1220f:	83 ec 14             	sub    $0x14,%esp
   12212:	8b 45 08             	mov    0x8(%ebp),%eax
   12215:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   12218:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   1221c:	76 7b                	jbe    12299 <idt_disable+0x8e>
   1221e:	80 7d e8 2f          	cmpb   $0x2f,-0x18(%ebp)
   12222:	77 75                	ja     12299 <idt_disable+0x8e>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   12224:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置1，即屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   12228:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   1222c:	77 31                	ja     1225f <idt_disable+0x54>
    uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   1222e:	6a 21                	push   $0x21
   12230:	e8 3f f7 ff ff       	call   11974 <inb>
   12235:	83 c4 04             	add    $0x4,%esp
   12238:	89 c3                	mov    %eax,%ebx
   1223a:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   1223e:	ba 01 00 00 00       	mov    $0x1,%edx
   12243:	89 c1                	mov    %eax,%ecx
   12245:	d3 e2                	shl    %cl,%edx
   12247:	89 d0                	mov    %edx,%eax
   12249:	09 d8                	or     %ebx,%eax
   1224b:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   1224e:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   12252:	50                   	push   %eax
   12253:	6a 21                	push   $0x21
   12255:	e8 37 f7 ff ff       	call   11991 <outb>
   1225a:	83 c4 08             	add    $0x8,%esp
   1225d:	eb 3b                	jmp    1229a <idt_disable+0x8f>
  } else {
    uint8_t mask = inb(PIC1_IMR) | (1 << (irq_num - 8));
   1225f:	68 a1 00 00 00       	push   $0xa1
   12264:	e8 0b f7 ff ff       	call   11974 <inb>
   12269:	83 c4 04             	add    $0x4,%esp
   1226c:	89 c3                	mov    %eax,%ebx
   1226e:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   12272:	83 e8 08             	sub    $0x8,%eax
   12275:	ba 01 00 00 00       	mov    $0x1,%edx
   1227a:	89 c1                	mov    %eax,%ecx
   1227c:	d3 e2                	shl    %cl,%edx
   1227e:	89 d0                	mov    %edx,%eax
   12280:	09 d8                	or     %ebx,%eax
   12282:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   12285:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   12289:	50                   	push   %eax
   1228a:	68 a1 00 00 00       	push   $0xa1
   1228f:	e8 fd f6 ff ff       	call   11991 <outb>
   12294:	83 c4 08             	add    $0x8,%esp
   12297:	eb 01                	jmp    1229a <idt_disable+0x8f>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   12299:	90                   	nop
  }
  
}
   1229a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1229d:	c9                   	leave  
   1229e:	c3                   	ret    

0001229f <idt_disable_global>:

/**
 * @brief  关闭全局中断
 * 
 */
void idt_disable_global(void) {
   1229f:	55                   	push   %ebp
   122a0:	89 e5                	mov    %esp,%ebp
  cli();
   122a2:	e8 b8 f6 ff ff       	call   1195f <cli>
}
   122a7:	90                   	nop
   122a8:	5d                   	pop    %ebp
   122a9:	c3                   	ret    

000122aa <idt_enable_global>:

/**
 * @brief  开启全局中断
 * 
 */
void idt_enable_global(void) {
   122aa:	55                   	push   %ebp
   122ab:	89 e5                	mov    %esp,%ebp
  sti();
   122ad:	e8 b4 f6 ff ff       	call   11966 <sti>
}
   122b2:	90                   	nop
   122b3:	5d                   	pop    %ebp
   122b4:	c3                   	ret    

000122b5 <pic_send_eoi>:
 * @brief  将OCW2寄存器的7~5位置为 001，用普通的EOI结束方式
 *         向8259A发送EOI命令，8259A会将ISR中优先级最高的位置0
 *
 * @param irq_num 中断向量号，即IDT下标
 */
void pic_send_eoi(int irq_num) {
   122b5:	55                   	push   %ebp
   122b6:	89 e5                	mov    %esp,%ebp
  //1.获取该中断对应的IRQ标号
  irq_num -= PIC_ICW2_IDT_START;
   122b8:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
  //2.判断标号是否越界,若不越界则交给对应芯片处理
  if (irq_num < 0 || irq_num > 15) return;
   122bc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   122c0:	78 29                	js     122eb <pic_send_eoi+0x36>
   122c2:	83 7d 08 0f          	cmpl   $0xf,0x8(%ebp)
   122c6:	7f 23                	jg     122eb <pic_send_eoi+0x36>

  //3.若中断来自主片则只需向主片发送EOI
  outb(PIC0_OCW2, PIC_OCW2_EOI);
   122c8:	6a 20                	push   $0x20
   122ca:	6a 20                	push   $0x20
   122cc:	e8 c0 f6 ff ff       	call   11991 <outb>
   122d1:	83 c4 08             	add    $0x8,%esp

  //4.若中断来自从片则还需向从片发送EOI
  if (irq_num >= 8) { 
   122d4:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   122d8:	7e 12                	jle    122ec <pic_send_eoi+0x37>
    outb(PIC1_OCW2, PIC_OCW2_EOI);
   122da:	6a 20                	push   $0x20
   122dc:	68 a0 00 00 00       	push   $0xa0
   122e1:	e8 ab f6 ff ff       	call   11991 <outb>
   122e6:	83 c4 08             	add    $0x8,%esp
   122e9:	eb 01                	jmp    122ec <pic_send_eoi+0x37>
  if (irq_num < 0 || irq_num > 15) return;
   122eb:	90                   	nop
  }

}
   122ec:	c9                   	leave  
   122ed:	c3                   	ret    

000122ee <idt_enter_protection>:

/**
 * @brief  
 * 
 */
idt_state_t idt_enter_protection(void) {
   122ee:	55                   	push   %ebp
   122ef:	89 e5                	mov    %esp,%ebp
   122f1:	83 ec 10             	sub    $0x10,%esp
  idt_state_t state = read_eflags();
   122f4:	e8 f2 f6 ff ff       	call   119eb <read_eflags>
   122f9:	89 45 fc             	mov    %eax,-0x4(%ebp)
  idt_disable_global();
   122fc:	e8 9e ff ff ff       	call   1229f <idt_disable_global>
  return state;;
   12301:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12304:	c9                   	leave  
   12305:	c3                   	ret    

00012306 <idt_leave_protection>:
/**
 * @brief  
 * 
 * @return idt_state_t 
 */
idt_state_t idt_leave_protection(idt_state_t state){
   12306:	55                   	push   %ebp
   12307:	89 e5                	mov    %esp,%ebp
  write_eflags(state);
   12309:	ff 75 08             	push   0x8(%ebp)
   1230c:	e8 ea f6 ff ff       	call   119fb <write_eflags>
   12311:	83 c4 04             	add    $0x4,%esp
}
   12314:	90                   	nop
   12315:	c9                   	leave  
   12316:	c3                   	ret    

00012317 <sys_print_msg>:
 * @brief 临时的格式化输出系统调用
 * 
 * @param fmt 
 * @param arg 
 */
void sys_print_msg(const char *fmt, int arg) {
   12317:	55                   	push   %ebp
   12318:	89 e5                	mov    %esp,%ebp
   1231a:	83 ec 08             	sub    $0x8,%esp
    log_printf(fmt, arg);
   1231d:	83 ec 08             	sub    $0x8,%esp
   12320:	ff 75 0c             	push   0xc(%ebp)
   12323:	ff 75 08             	push   0x8(%ebp)
   12326:	e8 ac 16 00 00       	call   139d7 <log_printf>
   1232b:	83 c4 10             	add    $0x10,%esp
}
   1232e:	90                   	nop
   1232f:	c9                   	leave  
   12330:	c3                   	ret    

00012331 <do_handler_syscall>:
/**
 * @brief 门调用处理函数，通过定义的系统调用id，将该调用分发到正确的系统调用上
 * 
 * @param frame 
 */
void do_handler_syscall(syscall_frame_t* frame) {
   12331:	55                   	push   %ebp
   12332:	89 e5                	mov    %esp,%ebp
   12334:	53                   	push   %ebx
   12335:	83 ec 14             	sub    $0x14,%esp
    if (frame->function_id < sizeof(sys_table) / sizeof(sys_table[0])) {    //当前系统调用存在
   12338:	8b 45 08             	mov    0x8(%ebp),%eax
   1233b:	8b 40 3c             	mov    0x3c(%eax),%eax
   1233e:	83 f8 0a             	cmp    $0xa,%eax
   12341:	77 48                	ja     1238b <do_handler_syscall+0x5a>
        sys_handler_t handler = sys_table[frame->function_id];
   12343:	8b 45 08             	mov    0x8(%ebp),%eax
   12346:	8b 40 3c             	mov    0x3c(%eax),%eax
   12349:	8b 04 85 c0 43 01 00 	mov    0x143c0(,%eax,4),%eax
   12350:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (handler) {
   12353:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12357:	74 32                	je     1238b <do_handler_syscall+0x5a>
            //直接将4个参数全部传入即可，
            //因为是按从右到左的顺序将参数压栈，所以原始的参数只要是从arg0开始赋值的即可，
            //多余的参数在高地址处，不影响handler对应的真正的系统调用
            int ret = handler(frame->arg0, frame->arg1, frame->arg2, frame->arg3);
   12359:	8b 45 08             	mov    0x8(%ebp),%eax
   1235c:	8b 58 4c             	mov    0x4c(%eax),%ebx
   1235f:	8b 45 08             	mov    0x8(%ebp),%eax
   12362:	8b 48 48             	mov    0x48(%eax),%ecx
   12365:	8b 45 08             	mov    0x8(%ebp),%eax
   12368:	8b 50 44             	mov    0x44(%eax),%edx
   1236b:	8b 45 08             	mov    0x8(%ebp),%eax
   1236e:	8b 40 40             	mov    0x40(%eax),%eax
   12371:	53                   	push   %ebx
   12372:	51                   	push   %ecx
   12373:	52                   	push   %edx
   12374:	50                   	push   %eax
   12375:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12378:	ff d0                	call   *%eax
   1237a:	83 c4 10             	add    $0x10,%esp
   1237d:	89 45 f0             	mov    %eax,-0x10(%ebp)
            //正常函数返回后会将返回值先存放到eax寄存器中，再eax中的值放入对应接收返回值的内存中
            //此处用eax先接收ret，在调用门返回后再从eax中取处该值
            frame->eax = ret;
   12380:	8b 55 f0             	mov    -0x10(%ebp),%edx
   12383:	8b 45 08             	mov    0x8(%ebp),%eax
   12386:	89 50 30             	mov    %edx,0x30(%eax)
            return;
   12389:	eb 30                	jmp    123bb <do_handler_syscall+0x8a>
        }
    }
    
    //打印系统调用失败的异常日志
    task_t *task = task_current();
   1238b:	e8 5f ee ff ff       	call   111ef <task_current>
   12390:	89 45 ec             	mov    %eax,-0x14(%ebp)
    log_printf("task: %s, Unknown syscall_id: %d", task->name, frame->function_id);
   12393:	8b 45 08             	mov    0x8(%ebp),%eax
   12396:	8b 40 3c             	mov    0x3c(%eax),%eax
   12399:	8b 55 ec             	mov    -0x14(%ebp),%edx
   1239c:	83 c2 18             	add    $0x18,%edx
   1239f:	83 ec 04             	sub    $0x4,%esp
   123a2:	50                   	push   %eax
   123a3:	52                   	push   %edx
   123a4:	68 ec 43 01 00       	push   $0x143ec
   123a9:	e8 29 16 00 00       	call   139d7 <log_printf>
   123ae:	83 c4 10             	add    $0x10,%esp
    frame->eax = -1;
   123b1:	8b 45 08             	mov    0x8(%ebp),%eax
   123b4:	c7 40 30 ff ff ff ff 	movl   $0xffffffff,0x30(%eax)

   123bb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   123be:	c9                   	leave  
   123bf:	c3                   	ret    

000123c0 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   123c0:	55                   	push   %ebp
   123c1:	89 e5                	mov    %esp,%ebp
   123c3:	83 ec 08             	sub    $0x8,%esp
   123c6:	8b 45 08             	mov    0x8(%ebp),%eax
   123c9:	8b 55 0c             	mov    0xc(%ebp),%edx
   123cc:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   123d0:	89 d0                	mov    %edx,%eax
   123d2:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   123d5:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   123d9:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   123dd:	ee                   	out    %al,(%dx)
}
   123de:	90                   	nop
   123df:	c9                   	leave  
   123e0:	c3                   	ret    

000123e1 <do_handler_time>:
/**
 * @brief  处理定时器中断的c函数
 * 
 * @param frame 异常栈帧
 */
void do_handler_time(const exception_frame_t *frame) {
   123e1:	55                   	push   %ebp
   123e2:	89 e5                	mov    %esp,%ebp
   123e4:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   123e7:	a1 00 0a 03 00       	mov    0x30a00,%eax
   123ec:	83 c0 01             	add    $0x1,%eax
   123ef:	a3 00 0a 03 00       	mov    %eax,0x30a00

    //因为ICW4的EOI位为0，所以要手动发送EOI即中断结束信号
    pic_send_eoi(IRQ0_TIMER);
   123f4:	83 ec 0c             	sub    $0xc,%esp
   123f7:	6a 20                	push   $0x20
   123f9:	e8 b7 fe ff ff       	call   122b5 <pic_send_eoi>
   123fe:	83 c4 10             	add    $0x10,%esp

    //运行完一个时间片，判断是否需要执行任务切换，若需要则执行
    //必须写在发送eoi之后，防止发生任务切换导致eoi没有发送，从而无法进行下一次中断
    task_slice_end();   
   12401:	e8 bc ee ff ff       	call   112c2 <task_slice_end>
}
   12406:	90                   	nop
   12407:	c9                   	leave  
   12408:	c3                   	ret    

00012409 <init_pit>:

/**
 * @brief  初始化可编程定时器
 * 
 */
static void init_pit(void) {
   12409:	55                   	push   %ebp
   1240a:	89 e5                	mov    %esp,%ebp
   1240c:	83 ec 18             	sub    $0x18,%esp
    //1.选择定时器的计算器，读取与加载初始值模式，以及工作模式
    outb(PIT_COMMAND_MODE_PORT, PIT_SELECT_COUNTER | PIT_READ_LOAD | PIT_MODE);
   1240f:	6a 36                	push   $0x36
   12411:	6a 43                	push   $0x43
   12413:	e8 a8 ff ff ff       	call   123c0 <outb>
   12418:	83 c4 08             	add    $0x8,%esp

    //2.写入16位初始值,即一个中断后期晶体的振荡次数，由确定的加载方式知，先写入低8位，再写入高8位
    uint16_t reload_count = (PIT_OSC_FREQ / 1000) * OS_TICKS_MS;   //确定晶体一个中断周期的震荡次数
   1241b:	66 c7 45 f6 9a 2e    	movw   $0x2e9a,-0xa(%ebp)
    outb(PIT_CHANNEL_DATA_PORT, reload_count & 0xff);
   12421:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   12425:	0f b6 c0             	movzbl %al,%eax
   12428:	50                   	push   %eax
   12429:	6a 40                	push   $0x40
   1242b:	e8 90 ff ff ff       	call   123c0 <outb>
   12430:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL_DATA_PORT, (reload_count >> 8) & 0xff);
   12433:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   12437:	66 c1 e8 08          	shr    $0x8,%ax
   1243b:	0f b6 c0             	movzbl %al,%eax
   1243e:	50                   	push   %eax
   1243f:	6a 40                	push   $0x40
   12441:	e8 7a ff ff ff       	call   123c0 <outb>
   12446:	83 c4 08             	add    $0x8,%esp

    //3.绑定定时器中断的异常处理程序,并开启该中断
    idt_install(IRQ0_TIMER, (idt_handler_t)exception_handler_time);
   12449:	83 ec 08             	sub    $0x8,%esp
   1244c:	68 7b 02 01 00       	push   $0x1027b
   12451:	6a 20                	push   $0x20
   12453:	e8 90 fa ff ff       	call   11ee8 <idt_install>
   12458:	83 c4 10             	add    $0x10,%esp
    idt_enable(IRQ0_TIMER);
   1245b:	83 ec 0c             	sub    $0xc,%esp
   1245e:	6a 20                	push   $0x20
   12460:	e8 0e fd ff ff       	call   12173 <idt_enable>
   12465:	83 c4 10             	add    $0x10,%esp

}
   12468:	90                   	nop
   12469:	c9                   	leave  
   1246a:	c3                   	ret    

0001246b <time_init>:

/**
 * @brief  初始化定时器
 * 
 */
void time_init(void) {
   1246b:	55                   	push   %ebp
   1246c:	89 e5                	mov    %esp,%ebp
   1246e:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   12471:	c7 05 00 0a 03 00 00 	movl   $0x0,0x30a00
   12478:	00 00 00 
    init_pit();
   1247b:	e8 89 ff ff ff       	call   12409 <init_pit>
   12480:	90                   	nop
   12481:	c9                   	leave  
   12482:	c3                   	ret    

00012483 <kernel_init>:

/**
 * @brief  对内核进行初始化操作
 * 
 */
void kernel_init(boot_info_t* boot_info) {
   12483:	55                   	push   %ebp
   12484:	89 e5                	mov    %esp,%ebp
   12486:	83 ec 08             	sub    $0x8,%esp
    //1.判断是否检测到可用内存
    ASSERT(boot_info->ram_region_count != 0);
   12489:	8b 45 08             	mov    0x8(%ebp),%eax
   1248c:	8b 40 50             	mov    0x50(%eax),%eax
   1248f:	85 c0                	test   %eax,%eax
   12491:	75 19                	jne    124ac <kernel_init+0x29>
   12493:	68 10 44 01 00       	push   $0x14410
   12498:	68 ac 44 01 00       	push   $0x144ac
   1249d:	6a 22                	push   $0x22
   1249f:	68 34 44 01 00       	push   $0x14434
   124a4:	e8 5f 08 00 00       	call   12d08 <pannic>
   124a9:	83 c4 10             	add    $0x10,%esp
    
    //2.初始化日志程序,便于后期调用
    log_init();
   124ac:	e8 9e 14 00 00       	call   1394f <log_init>

    //3.初始化内存管理
    memory_init(boot_info);  
   124b1:	83 ec 0c             	sub    $0xc,%esp
   124b4:	ff 75 08             	push   0x8(%ebp)
   124b7:	e8 f7 e2 ff ff       	call   107b3 <memory_init>
   124bc:	83 c4 10             	add    $0x10,%esp

    //4.初始化并重新加载GDT表
    gdt_init();
   124bf:	e8 4c f3 ff ff       	call   11810 <gdt_init>

    //5.初始化并加载中断描述符表IDT
    idt_init();
   124c4:	e8 f5 fa ff ff       	call   11fbe <idt_init>

    //6.初始化定时器的中断处理
    time_init();
   124c9:	e8 9d ff ff ff       	call   1246b <time_init>

    //7.初始化任务管理器
    task_manager_init();
   124ce:	e8 75 ea ff ff       	call   10f48 <task_manager_init>
    //初始化完成后将在汇编里重新加载内核代码段与数据段的选择子，并为内核程序分配栈空间

}
   124d3:	90                   	nop
   124d4:	c9                   	leave  
   124d5:	c3                   	ret    

000124d6 <move_to_first_task>:

/**
 * @brief 跳转到第一个任务进程
 * 
 */
void move_to_first_task(void) {
   124d6:	55                   	push   %ebp
   124d7:	89 e5                	mov    %esp,%ebp
   124d9:	56                   	push   %esi
   124da:	53                   	push   %ebx
   124db:	83 ec 10             	sub    $0x10,%esp
    //1.获取当前任务
    task_t *curr = task_current();
   124de:	e8 0c ed ff ff       	call   111ef <task_current>
   124e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT(curr != 0);
   124e6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   124ea:	75 19                	jne    12505 <move_to_first_task+0x2f>
   124ec:	68 69 44 01 00       	push   $0x14469
   124f1:	68 b8 44 01 00       	push   $0x144b8
   124f6:	6a 42                	push   $0x42
   124f8:	68 34 44 01 00       	push   $0x14434
   124fd:	e8 06 08 00 00       	call   12d08 <pannic>
   12502:	83 c4 10             	add    $0x10,%esp

    //2.获取当前任务的tss结构
    tss_t *tss = &(curr->tss);
   12505:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12508:	83 c0 50             	add    $0x50,%eax
   1250b:	89 45 f0             	mov    %eax,-0x10(%ebp)
        "push %[ss]\n\t"
        "push %[esp]\n\t"
        "push %[eflags]\n\t"
        "push %[cs]\n\t"
        "push %[eip]\n\t"
        "iret"::[ss]"r"(tss->ss), [esp]"r"(tss->esp), [eflags]"r"(tss->eflags), [cs]"r"(tss->cs), [eip]"r"(tss->eip)
   1250e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12511:	8b 40 50             	mov    0x50(%eax),%eax
   12514:	8b 55 f0             	mov    -0x10(%ebp),%edx
   12517:	8b 52 38             	mov    0x38(%edx),%edx
   1251a:	8b 4d f0             	mov    -0x10(%ebp),%ecx
   1251d:	8b 49 24             	mov    0x24(%ecx),%ecx
   12520:	8b 5d f0             	mov    -0x10(%ebp),%ebx
   12523:	8b 5b 4c             	mov    0x4c(%ebx),%ebx
   12526:	8b 75 f0             	mov    -0x10(%ebp),%esi
   12529:	8b 76 20             	mov    0x20(%esi),%esi
     __asm__ __volatile__(
   1252c:	50                   	push   %eax
   1252d:	52                   	push   %edx
   1252e:	51                   	push   %ecx
   1252f:	53                   	push   %ebx
   12530:	56                   	push   %esi
   12531:	cf                   	iret   

        
    );
}
   12532:	90                   	nop
   12533:	8d 65 f8             	lea    -0x8(%ebp),%esp
   12536:	5b                   	pop    %ebx
   12537:	5e                   	pop    %esi
   12538:	5d                   	pop    %ebp
   12539:	c3                   	ret    

0001253a <init_main>:


void init_main(void) {
   1253a:	55                   	push   %ebp
   1253b:	89 e5                	mov    %esp,%ebp
   1253d:	83 ec 08             	sub    $0x8,%esp
    
    log_printf("Kernel is running......");
   12540:	83 ec 0c             	sub    $0xc,%esp
   12543:	68 73 44 01 00       	push   $0x14473
   12548:	e8 8a 14 00 00       	call   139d7 <log_printf>
   1254d:	83 c4 10             	add    $0x10,%esp
    log_printf("Name: %s, Version: %s", "KbOS", OS_VERSION);
   12550:	83 ec 04             	sub    $0x4,%esp
   12553:	68 8b 44 01 00       	push   $0x1448b
   12558:	68 91 44 01 00       	push   $0x14491
   1255d:	68 96 44 01 00       	push   $0x14496
   12562:	e8 70 14 00 00       	call   139d7 <log_printf>
   12567:	83 c4 10             	add    $0x10,%esp


    //当前任务作为任务管理器启用时的第一个任务
    task_first_init();
   1256a:	e8 d0 ea ff ff       	call   1103f <task_first_init>

    //跳转到第一个任务进程去运行
    move_to_first_task();
   1256f:	e8 62 ff ff ff       	call   124d6 <move_to_first_task>
   12574:	90                   	nop
   12575:	c9                   	leave  
   12576:	c3                   	ret    

00012577 <list_init>:
static inline void list_init(list_t *list) {
   12577:	55                   	push   %ebp
   12578:	89 e5                	mov    %esp,%ebp
   1257a:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1257d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12581:	75 19                	jne    1259c <list_init+0x25>
   12583:	68 cc 44 01 00       	push   $0x144cc
   12588:	68 78 45 01 00       	push   $0x14578
   1258d:	6a 31                	push   $0x31
   1258f:	68 e0 44 01 00       	push   $0x144e0
   12594:	e8 6f 07 00 00       	call   12d08 <pannic>
   12599:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   1259c:	8b 45 08             	mov    0x8(%ebp),%eax
   1259f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   125a6:	8b 45 08             	mov    0x8(%ebp),%eax
   125a9:	8b 50 04             	mov    0x4(%eax),%edx
   125ac:	8b 45 08             	mov    0x8(%ebp),%eax
   125af:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   125b1:	8b 45 08             	mov    0x8(%ebp),%eax
   125b4:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   125bb:	90                   	nop
   125bc:	c9                   	leave  
   125bd:	c3                   	ret    

000125be <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   125be:	55                   	push   %ebp
   125bf:	89 e5                	mov    %esp,%ebp
   125c1:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   125c4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   125c8:	75 19                	jne    125e3 <list_is_empty+0x25>
   125ca:	68 cc 44 01 00       	push   $0x144cc
   125cf:	68 84 45 01 00       	push   $0x14584
   125d4:	6a 38                	push   $0x38
   125d6:	68 e0 44 01 00       	push   $0x144e0
   125db:	e8 28 07 00 00       	call   12d08 <pannic>
   125e0:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   125e3:	8b 45 08             	mov    0x8(%ebp),%eax
   125e6:	8b 40 08             	mov    0x8(%eax),%eax
   125e9:	85 c0                	test   %eax,%eax
   125eb:	0f 94 c0             	sete   %al
   125ee:	0f b6 c0             	movzbl %al,%eax
}
   125f1:	c9                   	leave  
   125f2:	c3                   	ret    

000125f3 <mutex_init>:
/**
 * @brief  初始化互斥锁
 *
 * @param mutex
 */
void mutex_init(mutex_t *mutex) {
   125f3:	55                   	push   %ebp
   125f4:	89 e5                	mov    %esp,%ebp
   125f6:	83 ec 08             	sub    $0x8,%esp
  ASSERT(mutex != (mutex_t *)0);
   125f9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   125fd:	75 19                	jne    12618 <mutex_init+0x25>
   125ff:	68 1e 45 01 00       	push   $0x1451e
   12604:	68 6c 45 01 00       	push   $0x1456c
   12609:	6a 15                	push   $0x15
   1260b:	68 34 45 01 00       	push   $0x14534
   12610:	e8 f3 06 00 00       	call   12d08 <pannic>
   12615:	83 c4 10             	add    $0x10,%esp

  mutex->locked_count = 0;
   12618:	8b 45 08             	mov    0x8(%ebp),%eax
   1261b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  mutex->owner = (task_t *)0;
   12622:	8b 45 08             	mov    0x8(%ebp),%eax
   12625:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  list_init(&mutex->wait_list);
   1262b:	8b 45 08             	mov    0x8(%ebp),%eax
   1262e:	83 c0 08             	add    $0x8,%eax
   12631:	83 ec 0c             	sub    $0xc,%esp
   12634:	50                   	push   %eax
   12635:	e8 3d ff ff ff       	call   12577 <list_init>
   1263a:	83 c4 10             	add    $0x10,%esp
}
   1263d:	90                   	nop
   1263e:	c9                   	leave  
   1263f:	c3                   	ret    

00012640 <mutex_lock>:
/**
 * @brief  加锁
 *
 * @param mutex
 */
void mutex_lock(mutex_t *mutex) {
   12640:	55                   	push   %ebp
   12641:	89 e5                	mov    %esp,%ebp
   12643:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   12646:	e8 a3 fc ff ff       	call   122ee <idt_enter_protection>
   1264b:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 1. 获取当前任务
  task_t *curr = task_current();
   1264e:	e8 9c eb ff ff       	call   111ef <task_current>
   12653:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 2.判断该锁是否已被加锁
  if (mutex->locked_count == 0) {  
   12656:	8b 45 08             	mov    0x8(%ebp),%eax
   12659:	8b 40 04             	mov    0x4(%eax),%eax
   1265c:	85 c0                	test   %eax,%eax
   1265e:	75 19                	jne    12679 <mutex_lock+0x39>
    //3.还未被加锁，则加锁并记录拥有该锁的任务
    mutex->locked_count++;
   12660:	8b 45 08             	mov    0x8(%ebp),%eax
   12663:	8b 40 04             	mov    0x4(%eax),%eax
   12666:	8d 50 01             	lea    0x1(%eax),%edx
   12669:	8b 45 08             	mov    0x8(%ebp),%eax
   1266c:	89 50 04             	mov    %edx,0x4(%eax)
    mutex->owner = curr;
   1266f:	8b 45 08             	mov    0x8(%ebp),%eax
   12672:	8b 55 f0             	mov    -0x10(%ebp),%edx
   12675:	89 10                	mov    %edx,(%eax)
   12677:	eb 47                	jmp    126c0 <mutex_lock+0x80>
  } else if (mutex->owner == curr) {
   12679:	8b 45 08             	mov    0x8(%ebp),%eax
   1267c:	8b 00                	mov    (%eax),%eax
   1267e:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   12681:	75 11                	jne    12694 <mutex_lock+0x54>
    //4.已被加锁，但当前加锁请求的任务为当前锁的拥有者，直接再加锁即可
    mutex->locked_count++;
   12683:	8b 45 08             	mov    0x8(%ebp),%eax
   12686:	8b 40 04             	mov    0x4(%eax),%eax
   12689:	8d 50 01             	lea    0x1(%eax),%edx
   1268c:	8b 45 08             	mov    0x8(%ebp),%eax
   1268f:	89 50 04             	mov    %edx,0x4(%eax)
   12692:	eb 2c                	jmp    126c0 <mutex_lock+0x80>
  } else {  
    //5.已被加锁，且当前任务不是锁的拥有者，则当前任务进入锁的等待队列，被阻塞住
    task_set_unready(curr);
   12694:	83 ec 0c             	sub    $0xc,%esp
   12697:	ff 75 f0             	push   -0x10(%ebp)
   1269a:	e8 d7 ea ff ff       	call   11176 <task_set_unready>
   1269f:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&mutex->wait_list, &curr->wait_node);
   126a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   126a5:	8d 50 48             	lea    0x48(%eax),%edx
   126a8:	8b 45 08             	mov    0x8(%ebp),%eax
   126ab:	83 c0 08             	add    $0x8,%eax
   126ae:	83 ec 08             	sub    $0x8,%esp
   126b1:	52                   	push   %edx
   126b2:	50                   	push   %eax
   126b3:	e8 9b 0f 00 00       	call   13653 <list_insert_last>
   126b8:	83 c4 10             	add    $0x10,%esp
    task_switch();
   126bb:	e8 39 eb ff ff       	call   111f9 <task_switch>
  }

  idt_leave_protection(state);  // TODO:解锁
   126c0:	83 ec 0c             	sub    $0xc,%esp
   126c3:	ff 75 f4             	push   -0xc(%ebp)
   126c6:	e8 3b fc ff ff       	call   12306 <idt_leave_protection>
   126cb:	83 c4 10             	add    $0x10,%esp
}
   126ce:	90                   	nop
   126cf:	c9                   	leave  
   126d0:	c3                   	ret    

000126d1 <mutex_unlock>:
/**
 * @brief  解锁
 *
 * @param mutex
 */
void mutex_unlock(mutex_t *mutex) {
   126d1:	55                   	push   %ebp
   126d2:	89 e5                	mov    %esp,%ebp
   126d4:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   126d7:	e8 12 fc ff ff       	call   122ee <idt_enter_protection>
   126dc:	89 45 f4             	mov    %eax,-0xc(%ebp)

  task_t *curr = task_current();
   126df:	e8 0b eb ff ff       	call   111ef <task_current>
   126e4:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 1.判断当前任务是否是锁的拥有者
  if (mutex->owner == curr) {
   126e7:	8b 45 08             	mov    0x8(%ebp),%eax
   126ea:	8b 00                	mov    (%eax),%eax
   126ec:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   126ef:	0f 85 83 00 00 00    	jne    12778 <mutex_unlock+0xa7>
    //2.当前任务是锁的拥有者,对锁进行一次解锁，并判断是否已完全解锁
    if (--mutex->locked_count == 0) {
   126f5:	8b 45 08             	mov    0x8(%ebp),%eax
   126f8:	8b 40 04             	mov    0x4(%eax),%eax
   126fb:	8d 50 ff             	lea    -0x1(%eax),%edx
   126fe:	8b 45 08             	mov    0x8(%ebp),%eax
   12701:	89 50 04             	mov    %edx,0x4(%eax)
   12704:	8b 45 08             	mov    0x8(%ebp),%eax
   12707:	8b 40 04             	mov    0x4(%eax),%eax
   1270a:	85 c0                	test   %eax,%eax
   1270c:	75 6a                	jne    12778 <mutex_unlock+0xa7>
      //3.锁已被完全解锁,将锁的所有者置空
      mutex->owner = (task_t*)0;
   1270e:	8b 45 08             	mov    0x8(%ebp),%eax
   12711:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      //4.判断当前等待队列是否为空
      if (!list_is_empty(&mutex->wait_list)) { 
   12717:	8b 45 08             	mov    0x8(%ebp),%eax
   1271a:	83 c0 08             	add    $0x8,%eax
   1271d:	83 ec 0c             	sub    $0xc,%esp
   12720:	50                   	push   %eax
   12721:	e8 98 fe ff ff       	call   125be <list_is_empty>
   12726:	83 c4 10             	add    $0x10,%esp
   12729:	85 c0                	test   %eax,%eax
   1272b:	75 4b                	jne    12778 <mutex_unlock+0xa7>
        //5.当前等待队列不为空,对锁进行加锁，并交给等待队列的第一个任务
        list_node_t *node = list_remove_first(&mutex->wait_list);
   1272d:	8b 45 08             	mov    0x8(%ebp),%eax
   12730:	83 c0 08             	add    $0x8,%eax
   12733:	83 ec 0c             	sub    $0xc,%esp
   12736:	50                   	push   %eax
   12737:	e8 a6 0f 00 00       	call   136e2 <list_remove_first>
   1273c:	83 c4 10             	add    $0x10,%esp
   1273f:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t *task_wait = list_node_parent(node, task_t, wait_node);
   12742:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   12746:	74 08                	je     12750 <mutex_unlock+0x7f>
   12748:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1274b:	83 e8 48             	sub    $0x48,%eax
   1274e:	eb 05                	jmp    12755 <mutex_unlock+0x84>
   12750:	b8 00 00 00 00       	mov    $0x0,%eax
   12755:	89 45 e8             	mov    %eax,-0x18(%ebp)
        mutex->locked_count = 1;
   12758:	8b 45 08             	mov    0x8(%ebp),%eax
   1275b:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        mutex->owner = task_wait;
   12762:	8b 45 08             	mov    0x8(%ebp),%eax
   12765:	8b 55 e8             	mov    -0x18(%ebp),%edx
   12768:	89 10                	mov    %edx,(%eax)
        //6.让该任务进入就绪队列
        task_set_ready(task_wait);
   1276a:	83 ec 0c             	sub    $0xc,%esp
   1276d:	ff 75 e8             	push   -0x18(%ebp)
   12770:	e8 b6 e9 ff ff       	call   1112b <task_set_ready>
   12775:	83 c4 10             	add    $0x10,%esp
      }
    }
  }

  idt_leave_protection(state);  // TODO:解锁
   12778:	83 ec 0c             	sub    $0xc,%esp
   1277b:	ff 75 f4             	push   -0xc(%ebp)
   1277e:	e8 83 fb ff ff       	call   12306 <idt_leave_protection>
   12783:	83 c4 10             	add    $0x10,%esp
}
   12786:	90                   	nop
   12787:	c9                   	leave  
   12788:	c3                   	ret    

00012789 <list_init>:
static inline void list_init(list_t *list) {
   12789:	55                   	push   %ebp
   1278a:	89 e5                	mov    %esp,%ebp
   1278c:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1278f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12793:	75 19                	jne    127ae <list_init+0x25>
   12795:	68 94 45 01 00       	push   $0x14594
   1279a:	68 38 46 01 00       	push   $0x14638
   1279f:	6a 31                	push   $0x31
   127a1:	68 a8 45 01 00       	push   $0x145a8
   127a6:	e8 5d 05 00 00       	call   12d08 <pannic>
   127ab:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   127ae:	8b 45 08             	mov    0x8(%ebp),%eax
   127b1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   127b8:	8b 45 08             	mov    0x8(%ebp),%eax
   127bb:	8b 50 04             	mov    0x4(%eax),%edx
   127be:	8b 45 08             	mov    0x8(%ebp),%eax
   127c1:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   127c3:	8b 45 08             	mov    0x8(%ebp),%eax
   127c6:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   127cd:	90                   	nop
   127ce:	c9                   	leave  
   127cf:	c3                   	ret    

000127d0 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   127d0:	55                   	push   %ebp
   127d1:	89 e5                	mov    %esp,%ebp
   127d3:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   127d6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   127da:	75 19                	jne    127f5 <list_is_empty+0x25>
   127dc:	68 94 45 01 00       	push   $0x14594
   127e1:	68 44 46 01 00       	push   $0x14644
   127e6:	6a 38                	push   $0x38
   127e8:	68 a8 45 01 00       	push   $0x145a8
   127ed:	e8 16 05 00 00       	call   12d08 <pannic>
   127f2:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   127f5:	8b 45 08             	mov    0x8(%ebp),%eax
   127f8:	8b 40 08             	mov    0x8(%eax),%eax
   127fb:	85 c0                	test   %eax,%eax
   127fd:	0f 94 c0             	sete   %al
   12800:	0f b6 c0             	movzbl %al,%eax
}
   12803:	c9                   	leave  
   12804:	c3                   	ret    

00012805 <sem_init>:
 * @brief  初始化信号量对象
 * 
 * @param sem 信号量对象
 * @param init_count 初始化信号量数量 
 */
void sem_init(sem_t *sem, int init_count) {
   12805:	55                   	push   %ebp
   12806:	89 e5                	mov    %esp,%ebp
   12808:	83 ec 08             	sub    $0x8,%esp
    ASSERT(sem != (sem_t*)0);
   1280b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1280f:	75 19                	jne    1282a <sem_init+0x25>
   12811:	68 e6 45 01 00       	push   $0x145e6
   12816:	68 2c 46 01 00       	push   $0x1462c
   1281b:	6a 18                	push   $0x18
   1281d:	68 f8 45 01 00       	push   $0x145f8
   12822:	e8 e1 04 00 00       	call   12d08 <pannic>
   12827:	83 c4 10             	add    $0x10,%esp
    sem->count = 0;
   1282a:	8b 45 08             	mov    0x8(%ebp),%eax
   1282d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list_init(&sem->wait_list);
   12833:	8b 45 08             	mov    0x8(%ebp),%eax
   12836:	83 c0 04             	add    $0x4,%eax
   12839:	83 ec 0c             	sub    $0xc,%esp
   1283c:	50                   	push   %eax
   1283d:	e8 47 ff ff ff       	call   12789 <list_init>
   12842:	83 c4 10             	add    $0x10,%esp
}
   12845:	90                   	nop
   12846:	c9                   	leave  
   12847:	c3                   	ret    

00012848 <sem_wait>:
 *         信号量相当于入场券，获取信号量之后才有资格访问信号量保护的资源
 * 
 * @param sem 
 * @param init_count 
 */
void sem_wait(sem_t *sem) {
   12848:	55                   	push   %ebp
   12849:	89 e5                	mov    %esp,%ebp
   1284b:	83 ec 18             	sub    $0x18,%esp
    
    idt_state_t state = idt_enter_protection();//TODO:加锁
   1284e:	e8 9b fa ff ff       	call   122ee <idt_enter_protection>
   12853:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //1.判断信号量是否还有剩余
    if(sem->count > 0) {//有剩余，直接使用，任务获取信号量继续执行
   12856:	8b 45 08             	mov    0x8(%ebp),%eax
   12859:	8b 00                	mov    (%eax),%eax
   1285b:	85 c0                	test   %eax,%eax
   1285d:	7e 0f                	jle    1286e <sem_wait+0x26>
        --sem->count;   
   1285f:	8b 45 08             	mov    0x8(%ebp),%eax
   12862:	8b 00                	mov    (%eax),%eax
   12864:	8d 50 ff             	lea    -0x1(%eax),%edx
   12867:	8b 45 08             	mov    0x8(%ebp),%eax
   1286a:	89 10                	mov    %edx,(%eax)
   1286c:	eb 34                	jmp    128a2 <sem_wait+0x5a>
    } else {//没有剩余，任务进入延时队列等待信号量
        task_t *curr = task_current();
   1286e:	e8 7c e9 ff ff       	call   111ef <task_current>
   12873:	89 45 f0             	mov    %eax,-0x10(%ebp)
        //2.将当前任务从就绪队列中取下
        task_set_unready(curr); 
   12876:	83 ec 0c             	sub    $0xc,%esp
   12879:	ff 75 f0             	push   -0x10(%ebp)
   1287c:	e8 f5 e8 ff ff       	call   11176 <task_set_unready>
   12881:	83 c4 10             	add    $0x10,%esp
        //3.将当前任务加入到信号量等待队列
        list_insert_last(&sem->wait_list, &curr->wait_node); 
   12884:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12887:	8d 50 48             	lea    0x48(%eax),%edx
   1288a:	8b 45 08             	mov    0x8(%ebp),%eax
   1288d:	83 c0 04             	add    $0x4,%eax
   12890:	83 ec 08             	sub    $0x8,%esp
   12893:	52                   	push   %edx
   12894:	50                   	push   %eax
   12895:	e8 b9 0d 00 00       	call   13653 <list_insert_last>
   1289a:	83 c4 10             	add    $0x10,%esp
        //4.切换任务
        task_switch();
   1289d:	e8 57 e9 ff ff       	call   111f9 <task_switch>
    }

    idt_leave_protection(state);//TODO:解锁
   128a2:	83 ec 0c             	sub    $0xc,%esp
   128a5:	ff 75 f4             	push   -0xc(%ebp)
   128a8:	e8 59 fa ff ff       	call   12306 <idt_leave_protection>
   128ad:	83 c4 10             	add    $0x10,%esp
}
   128b0:	90                   	nop
   128b1:	c9                   	leave  
   128b2:	c3                   	ret    

000128b3 <sem_notify>:
 *        等待队列中若有任务则直接获取该信号量，继续执行即访问资源
 *         若没有任务，则信号量对象记录的信号量数量加1，预留给下一次获取
 * 
 * @param sem 
 */
void sem_notify(sem_t *sem) {
   128b3:	55                   	push   %ebp
   128b4:	89 e5                	mov    %esp,%ebp
   128b6:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   128b9:	e8 30 fa ff ff       	call   122ee <idt_enter_protection>
   128be:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if (!list_is_empty(&sem->wait_list)) {
   128c1:	8b 45 08             	mov    0x8(%ebp),%eax
   128c4:	83 c0 04             	add    $0x4,%eax
   128c7:	83 ec 0c             	sub    $0xc,%esp
   128ca:	50                   	push   %eax
   128cb:	e8 00 ff ff ff       	call   127d0 <list_is_empty>
   128d0:	83 c4 10             	add    $0x10,%esp
   128d3:	85 c0                	test   %eax,%eax
   128d5:	75 3b                	jne    12912 <sem_notify+0x5f>
        list_node_t *node = list_remove_first(&sem->wait_list);
   128d7:	8b 45 08             	mov    0x8(%ebp),%eax
   128da:	83 c0 04             	add    $0x4,%eax
   128dd:	83 ec 0c             	sub    $0xc,%esp
   128e0:	50                   	push   %eax
   128e1:	e8 fc 0d 00 00       	call   136e2 <list_remove_first>
   128e6:	83 c4 10             	add    $0x10,%esp
   128e9:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t *task = list_node_parent(node, task_t, wait_node);
   128ec:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   128f0:	74 08                	je     128fa <sem_notify+0x47>
   128f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   128f5:	83 e8 48             	sub    $0x48,%eax
   128f8:	eb 05                	jmp    128ff <sem_notify+0x4c>
   128fa:	b8 00 00 00 00       	mov    $0x0,%eax
   128ff:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   12902:	83 ec 0c             	sub    $0xc,%esp
   12905:	ff 75 ec             	push   -0x14(%ebp)
   12908:	e8 1e e8 ff ff       	call   1112b <task_set_ready>
   1290d:	83 c4 10             	add    $0x10,%esp
   12910:	eb 0d                	jmp    1291f <sem_notify+0x6c>
    } else {
        sem->count++;
   12912:	8b 45 08             	mov    0x8(%ebp),%eax
   12915:	8b 00                	mov    (%eax),%eax
   12917:	8d 50 01             	lea    0x1(%eax),%edx
   1291a:	8b 45 08             	mov    0x8(%ebp),%eax
   1291d:	89 10                	mov    %edx,(%eax)
    }

    idt_leave_protection(state);//TODO:解锁
   1291f:	83 ec 0c             	sub    $0xc,%esp
   12922:	ff 75 f4             	push   -0xc(%ebp)
   12925:	e8 dc f9 ff ff       	call   12306 <idt_leave_protection>
   1292a:	83 c4 10             	add    $0x10,%esp

}
   1292d:	90                   	nop
   1292e:	c9                   	leave  
   1292f:	c3                   	ret    

00012930 <sem_count>:

int sem_count(sem_t *sem) {
   12930:	55                   	push   %ebp
   12931:	89 e5                	mov    %esp,%ebp
   12933:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   12936:	e8 b3 f9 ff ff       	call   122ee <idt_enter_protection>
   1293b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   1293e:	8b 45 08             	mov    0x8(%ebp),%eax
   12941:	8b 00                	mov    (%eax),%eax
   12943:	89 45 f0             	mov    %eax,-0x10(%ebp)
    idt_leave_protection(state);//TODO:解锁
   12946:	83 ec 0c             	sub    $0xc,%esp
   12949:	ff 75 f4             	push   -0xc(%ebp)
   1294c:	e8 b5 f9 ff ff       	call   12306 <idt_leave_protection>
   12951:	83 c4 10             	add    $0x10,%esp

    return count;
   12954:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12957:	c9                   	leave  
   12958:	c3                   	ret    

00012959 <list_init>:
static inline void list_init(list_t *list) {
   12959:	55                   	push   %ebp
   1295a:	89 e5                	mov    %esp,%ebp
   1295c:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1295f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12963:	75 19                	jne    1297e <list_init+0x25>
   12965:	68 54 46 01 00       	push   $0x14654
   1296a:	68 58 47 01 00       	push   $0x14758
   1296f:	6a 31                	push   $0x31
   12971:	68 68 46 01 00       	push   $0x14668
   12976:	e8 8d 03 00 00       	call   12d08 <pannic>
   1297b:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   1297e:	8b 45 08             	mov    0x8(%ebp),%eax
   12981:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12988:	8b 45 08             	mov    0x8(%ebp),%eax
   1298b:	8b 50 04             	mov    0x4(%eax),%edx
   1298e:	8b 45 08             	mov    0x8(%ebp),%eax
   12991:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   12993:	8b 45 08             	mov    0x8(%ebp),%eax
   12996:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   1299d:	90                   	nop
   1299e:	c9                   	leave  
   1299f:	c3                   	ret    

000129a0 <list_get_size>:
static inline int list_get_size(list_t *list) {
   129a0:	55                   	push   %ebp
   129a1:	89 e5                	mov    %esp,%ebp
   129a3:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   129a6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   129aa:	75 19                	jne    129c5 <list_get_size+0x25>
   129ac:	68 54 46 01 00       	push   $0x14654
   129b1:	68 64 47 01 00       	push   $0x14764
   129b6:	6a 3e                	push   $0x3e
   129b8:	68 68 46 01 00       	push   $0x14668
   129bd:	e8 46 03 00 00       	call   12d08 <pannic>
   129c2:	83 c4 10             	add    $0x10,%esp
    return list->size;
   129c5:	8b 45 08             	mov    0x8(%ebp),%eax
   129c8:	8b 40 08             	mov    0x8(%eax),%eax
}
   129cb:	c9                   	leave  
   129cc:	c3                   	ret    

000129cd <list_get_first>:
static inline list_node_t *list_get_first(list_t *list) {
   129cd:	55                   	push   %ebp
   129ce:	89 e5                	mov    %esp,%ebp
   129d0:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   129d3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   129d7:	75 19                	jne    129f2 <list_get_first+0x25>
   129d9:	68 54 46 01 00       	push   $0x14654
   129de:	68 84 47 01 00       	push   $0x14784
   129e3:	6a 44                	push   $0x44
   129e5:	68 68 46 01 00       	push   $0x14668
   129ea:	e8 19 03 00 00       	call   12d08 <pannic>
   129ef:	83 c4 10             	add    $0x10,%esp
    return list->first;
   129f2:	8b 45 08             	mov    0x8(%ebp),%eax
   129f5:	8b 00                	mov    (%eax),%eax
}
   129f7:	c9                   	leave  
   129f8:	c3                   	ret    

000129f9 <list_get_last>:

static inline list_node_t *list_get_last(list_t *list) {
   129f9:	55                   	push   %ebp
   129fa:	89 e5                	mov    %esp,%ebp
   129fc:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   129ff:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12a03:	75 19                	jne    12a1e <list_get_last+0x25>
   12a05:	68 54 46 01 00       	push   $0x14654
   12a0a:	68 74 47 01 00       	push   $0x14774
   12a0f:	6a 4a                	push   $0x4a
   12a11:	68 68 46 01 00       	push   $0x14668
   12a16:	e8 ed 02 00 00       	call   12d08 <pannic>
   12a1b:	83 c4 10             	add    $0x10,%esp

    return list->last;
   12a1e:	8b 45 08             	mov    0x8(%ebp),%eax
   12a21:	8b 40 04             	mov    0x4(%eax),%eax
}
   12a24:	c9                   	leave  
   12a25:	c3                   	ret    

00012a26 <list_test>:

#include "tools/list.h"
#include "tools/log.h"
#include "common/types.h"

void list_test(void) {
   12a26:	55                   	push   %ebp
   12a27:	89 e5                	mov    %esp,%ebp
   12a29:	56                   	push   %esi
   12a2a:	53                   	push   %ebx
   12a2b:	83 ec 70             	sub    $0x70,%esp
    list_t list;
    list_node_t nodes[5];

    list_init(&list);
   12a2e:	83 ec 0c             	sub    $0xc,%esp
   12a31:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12a34:	50                   	push   %eax
   12a35:	e8 1f ff ff ff       	call   12959 <list_init>
   12a3a:	83 c4 10             	add    $0x10,%esp
    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   12a3d:	83 ec 0c             	sub    $0xc,%esp
   12a40:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12a43:	50                   	push   %eax
   12a44:	e8 57 ff ff ff       	call   129a0 <list_get_size>
   12a49:	83 c4 10             	add    $0x10,%esp
   12a4c:	89 c6                	mov    %eax,%esi
   12a4e:	83 ec 0c             	sub    $0xc,%esp
   12a51:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12a54:	50                   	push   %eax
   12a55:	e8 9f ff ff ff       	call   129f9 <list_get_last>
   12a5a:	83 c4 10             	add    $0x10,%esp
   12a5d:	89 c3                	mov    %eax,%ebx
   12a5f:	83 ec 0c             	sub    $0xc,%esp
   12a62:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12a65:	50                   	push   %eax
   12a66:	e8 62 ff ff ff       	call   129cd <list_get_first>
   12a6b:	83 c4 10             	add    $0x10,%esp
   12a6e:	56                   	push   %esi
   12a6f:	53                   	push   %ebx
   12a70:	50                   	push   %eax
   12a71:	68 a8 46 01 00       	push   $0x146a8
   12a76:	e8 5c 0f 00 00       	call   139d7 <log_printf>
   12a7b:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_insert_first
    for (int i = 0; i < 5; ++i) {
   12a7e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12a85:	eb 3f                	jmp    12ac6 <list_test+0xa0>
        list_node_t *node = nodes + i;
   12a87:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12a8a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   12a91:	8d 45 9c             	lea    -0x64(%ebp),%eax
   12a94:	01 d0                	add    %edx,%eax
   12a96:	89 45 d0             	mov    %eax,-0x30(%ebp)

        log_printf("insert first to list: %d, 0x%x", i, (uint32_t)node);
   12a99:	8b 45 d0             	mov    -0x30(%ebp),%eax
   12a9c:	83 ec 04             	sub    $0x4,%esp
   12a9f:	50                   	push   %eax
   12aa0:	ff 75 f4             	push   -0xc(%ebp)
   12aa3:	68 d0 46 01 00       	push   $0x146d0
   12aa8:	e8 2a 0f 00 00       	call   139d7 <log_printf>
   12aad:	83 c4 10             	add    $0x10,%esp
        list_insert_first(&list, node);
   12ab0:	83 ec 08             	sub    $0x8,%esp
   12ab3:	ff 75 d0             	push   -0x30(%ebp)
   12ab6:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12ab9:	50                   	push   %eax
   12aba:	e8 09 0b 00 00       	call   135c8 <list_insert_first>
   12abf:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   12ac2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12ac6:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   12aca:	7e bb                	jle    12a87 <list_test+0x61>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   12acc:	83 ec 0c             	sub    $0xc,%esp
   12acf:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12ad2:	50                   	push   %eax
   12ad3:	e8 c8 fe ff ff       	call   129a0 <list_get_size>
   12ad8:	83 c4 10             	add    $0x10,%esp
   12adb:	89 c6                	mov    %eax,%esi
   12add:	83 ec 0c             	sub    $0xc,%esp
   12ae0:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12ae3:	50                   	push   %eax
   12ae4:	e8 10 ff ff ff       	call   129f9 <list_get_last>
   12ae9:	83 c4 10             	add    $0x10,%esp
   12aec:	89 c3                	mov    %eax,%ebx
   12aee:	83 ec 0c             	sub    $0xc,%esp
   12af1:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12af4:	50                   	push   %eax
   12af5:	e8 d3 fe ff ff       	call   129cd <list_get_first>
   12afa:	83 c4 10             	add    $0x10,%esp
   12afd:	56                   	push   %esi
   12afe:	53                   	push   %ebx
   12aff:	50                   	push   %eax
   12b00:	68 a8 46 01 00       	push   $0x146a8
   12b05:	e8 cd 0e 00 00       	call   139d7 <log_printf>
   12b0a:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

   
    //测试list_remove_first
    for (int i = 0; i < 5; ++i) {
   12b0d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   12b14:	eb 2d                	jmp    12b43 <list_test+0x11d>
        list_node_t *node = list_remove_first(&list);
   12b16:	83 ec 0c             	sub    $0xc,%esp
   12b19:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12b1c:	50                   	push   %eax
   12b1d:	e8 c0 0b 00 00       	call   136e2 <list_remove_first>
   12b22:	83 c4 10             	add    $0x10,%esp
   12b25:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        log_printf("remove first: %d, 0x%x", i, (uint32_t)node);
   12b28:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   12b2b:	83 ec 04             	sub    $0x4,%esp
   12b2e:	50                   	push   %eax
   12b2f:	ff 75 f0             	push   -0x10(%ebp)
   12b32:	68 ef 46 01 00       	push   $0x146ef
   12b37:	e8 9b 0e 00 00       	call   139d7 <log_printf>
   12b3c:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   12b3f:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   12b43:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   12b47:	7e cd                	jle    12b16 <list_test+0xf0>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   12b49:	83 ec 0c             	sub    $0xc,%esp
   12b4c:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12b4f:	50                   	push   %eax
   12b50:	e8 4b fe ff ff       	call   129a0 <list_get_size>
   12b55:	83 c4 10             	add    $0x10,%esp
   12b58:	89 c6                	mov    %eax,%esi
   12b5a:	83 ec 0c             	sub    $0xc,%esp
   12b5d:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12b60:	50                   	push   %eax
   12b61:	e8 93 fe ff ff       	call   129f9 <list_get_last>
   12b66:	83 c4 10             	add    $0x10,%esp
   12b69:	89 c3                	mov    %eax,%ebx
   12b6b:	83 ec 0c             	sub    $0xc,%esp
   12b6e:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12b71:	50                   	push   %eax
   12b72:	e8 56 fe ff ff       	call   129cd <list_get_first>
   12b77:	83 c4 10             	add    $0x10,%esp
   12b7a:	56                   	push   %esi
   12b7b:	53                   	push   %ebx
   12b7c:	50                   	push   %eax
   12b7d:	68 a8 46 01 00       	push   $0x146a8
   12b82:	e8 50 0e 00 00       	call   139d7 <log_printf>
   12b87:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    

    //测试list_insert_last
    for (int i = 0; i < 5; ++i) {
   12b8a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   12b91:	eb 3f                	jmp    12bd2 <list_test+0x1ac>
        list_node_t *node = nodes + i;
   12b93:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12b96:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   12b9d:	8d 45 9c             	lea    -0x64(%ebp),%eax
   12ba0:	01 d0                	add    %edx,%eax
   12ba2:	89 45 d8             	mov    %eax,-0x28(%ebp)

        log_printf("insert last to list: %d, 0x%x", i, (uint32_t)node);
   12ba5:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12ba8:	83 ec 04             	sub    $0x4,%esp
   12bab:	50                   	push   %eax
   12bac:	ff 75 ec             	push   -0x14(%ebp)
   12baf:	68 06 47 01 00       	push   $0x14706
   12bb4:	e8 1e 0e 00 00       	call   139d7 <log_printf>
   12bb9:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&list, node);
   12bbc:	83 ec 08             	sub    $0x8,%esp
   12bbf:	ff 75 d8             	push   -0x28(%ebp)
   12bc2:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12bc5:	50                   	push   %eax
   12bc6:	e8 88 0a 00 00       	call   13653 <list_insert_last>
   12bcb:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   12bce:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   12bd2:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   12bd6:	7e bb                	jle    12b93 <list_test+0x16d>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   12bd8:	83 ec 0c             	sub    $0xc,%esp
   12bdb:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12bde:	50                   	push   %eax
   12bdf:	e8 bc fd ff ff       	call   129a0 <list_get_size>
   12be4:	83 c4 10             	add    $0x10,%esp
   12be7:	89 c6                	mov    %eax,%esi
   12be9:	83 ec 0c             	sub    $0xc,%esp
   12bec:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12bef:	50                   	push   %eax
   12bf0:	e8 04 fe ff ff       	call   129f9 <list_get_last>
   12bf5:	83 c4 10             	add    $0x10,%esp
   12bf8:	89 c3                	mov    %eax,%ebx
   12bfa:	83 ec 0c             	sub    $0xc,%esp
   12bfd:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12c00:	50                   	push   %eax
   12c01:	e8 c7 fd ff ff       	call   129cd <list_get_first>
   12c06:	83 c4 10             	add    $0x10,%esp
   12c09:	56                   	push   %esi
   12c0a:	53                   	push   %ebx
   12c0b:	50                   	push   %eax
   12c0c:	68 a8 46 01 00       	push   $0x146a8
   12c11:	e8 c1 0d 00 00       	call   139d7 <log_printf>
   12c16:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_remove_last
    for (int i = 0; i < 5; ++i) {
   12c19:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   12c20:	eb 2d                	jmp    12c4f <list_test+0x229>
        list_node_t *node = list_remove_last(&list);
   12c22:	83 ec 0c             	sub    $0xc,%esp
   12c25:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12c28:	50                   	push   %eax
   12c29:	e8 65 0b 00 00       	call   13793 <list_remove_last>
   12c2e:	83 c4 10             	add    $0x10,%esp
   12c31:	89 45 dc             	mov    %eax,-0x24(%ebp)
        log_printf("remove last: %d, 0x%x", i, (uint32_t)node);
   12c34:	8b 45 dc             	mov    -0x24(%ebp),%eax
   12c37:	83 ec 04             	sub    $0x4,%esp
   12c3a:	50                   	push   %eax
   12c3b:	ff 75 e8             	push   -0x18(%ebp)
   12c3e:	68 24 47 01 00       	push   $0x14724
   12c43:	e8 8f 0d 00 00       	call   139d7 <log_printf>
   12c48:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   12c4b:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   12c4f:	83 7d e8 04          	cmpl   $0x4,-0x18(%ebp)
   12c53:	7e cd                	jle    12c22 <list_test+0x1fc>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   12c55:	83 ec 0c             	sub    $0xc,%esp
   12c58:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12c5b:	50                   	push   %eax
   12c5c:	e8 3f fd ff ff       	call   129a0 <list_get_size>
   12c61:	83 c4 10             	add    $0x10,%esp
   12c64:	89 c6                	mov    %eax,%esi
   12c66:	83 ec 0c             	sub    $0xc,%esp
   12c69:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12c6c:	50                   	push   %eax
   12c6d:	e8 87 fd ff ff       	call   129f9 <list_get_last>
   12c72:	83 c4 10             	add    $0x10,%esp
   12c75:	89 c3                	mov    %eax,%ebx
   12c77:	83 ec 0c             	sub    $0xc,%esp
   12c7a:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12c7d:	50                   	push   %eax
   12c7e:	e8 4a fd ff ff       	call   129cd <list_get_first>
   12c83:	83 c4 10             	add    $0x10,%esp
   12c86:	56                   	push   %esi
   12c87:	53                   	push   %ebx
   12c88:	50                   	push   %eax
   12c89:	68 a8 46 01 00       	push   $0x146a8
   12c8e:	e8 44 0d 00 00       	call   139d7 <log_printf>
   12c93:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    
    struct type_t {
        int i;
        list_node_t node;
    }v = {0x123456};
   12c96:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
   12c9d:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
   12ca4:	c7 45 98 00 00 00 00 	movl   $0x0,-0x68(%ebp)
   12cab:	c7 45 90 56 34 12 00 	movl   $0x123456,-0x70(%ebp)

    list_node_t *v_node = &v.node;
   12cb2:	8d 45 90             	lea    -0x70(%ebp),%eax
   12cb5:	83 c0 04             	add    $0x4,%eax
   12cb8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    struct type_t *p = list_node_parent(v_node, struct type_t, node);  
   12cbb:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   12cbf:	74 08                	je     12cc9 <list_test+0x2a3>
   12cc1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12cc4:	83 e8 04             	sub    $0x4,%eax
   12cc7:	eb 05                	jmp    12cce <list_test+0x2a8>
   12cc9:	b8 00 00 00 00       	mov    $0x0,%eax
   12cce:	89 45 e0             	mov    %eax,-0x20(%ebp)

    log_printf("v addr = 0x%x", (uint32_t)&v);
   12cd1:	8d 45 90             	lea    -0x70(%ebp),%eax
   12cd4:	83 ec 08             	sub    $0x8,%esp
   12cd7:	50                   	push   %eax
   12cd8:	68 3a 47 01 00       	push   $0x1473a
   12cdd:	e8 f5 0c 00 00       	call   139d7 <log_printf>
   12ce2:	83 c4 10             	add    $0x10,%esp
    log_printf("p addr = 0x%x", (uint32_t)p);  
   12ce5:	8b 45 e0             	mov    -0x20(%ebp),%eax
   12ce8:	83 ec 08             	sub    $0x8,%esp
   12ceb:	50                   	push   %eax
   12cec:	68 48 47 01 00       	push   $0x14748
   12cf1:	e8 e1 0c 00 00       	call   139d7 <log_printf>
   12cf6:	83 c4 10             	add    $0x10,%esp

 }
   12cf9:	90                   	nop
   12cfa:	8d 65 f8             	lea    -0x8(%ebp),%esp
   12cfd:	5b                   	pop    %ebx
   12cfe:	5e                   	pop    %esi
   12cff:	5d                   	pop    %ebp
   12d00:	c3                   	ret    

00012d01 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   12d01:	55                   	push   %ebp
   12d02:	89 e5                	mov    %esp,%ebp
   12d04:	f4                   	hlt    
   12d05:	90                   	nop
   12d06:	5d                   	pop    %ebp
   12d07:	c3                   	ret    

00012d08 <pannic>:
 * @param file 异常所在文件绝对路径
 * @param line 异常所在行号
 * @param func 异常所在函数名 
 * @param reason 异常的原因
 */
void pannic(const char *file, int line, const char *func, const char *reason) {
   12d08:	55                   	push   %ebp
   12d09:	89 e5                	mov    %esp,%ebp
   12d0b:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert faild! %s", reason);
   12d0e:	83 ec 08             	sub    $0x8,%esp
   12d11:	ff 75 14             	push   0x14(%ebp)
   12d14:	68 93 47 01 00       	push   $0x14793
   12d19:	e8 b9 0c 00 00       	call   139d7 <log_printf>
   12d1e:	83 c4 10             	add    $0x10,%esp
    log_printf("file:\t%s\nline:\t%d\nfunc:\t%s", file, line, func);
   12d21:	ff 75 10             	push   0x10(%ebp)
   12d24:	ff 75 0c             	push   0xc(%ebp)
   12d27:	ff 75 08             	push   0x8(%ebp)
   12d2a:	68 a4 47 01 00       	push   $0x147a4
   12d2f:	e8 a3 0c 00 00       	call   139d7 <log_printf>
   12d34:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   12d37:	e8 c5 ff ff ff       	call   12d01 <hlt>
   12d3c:	eb f9                	jmp    12d37 <pannic+0x2f>

00012d3e <bitmap_byte_count>:
 * @brief  向上取整获取位图数组中有多少字节
 * 
 * @param bit_count  位图数组拥有的bit位数
 * @return int 向上取整得到的字节数
 */
int bitmap_byte_count(int bit_count) {
   12d3e:	55                   	push   %ebp
   12d3f:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8;
   12d41:	8b 45 08             	mov    0x8(%ebp),%eax
   12d44:	83 c0 07             	add    $0x7,%eax
   12d47:	8d 50 07             	lea    0x7(%eax),%edx
   12d4a:	85 c0                	test   %eax,%eax
   12d4c:	0f 48 c2             	cmovs  %edx,%eax
   12d4f:	c1 f8 03             	sar    $0x3,%eax
}
   12d52:	5d                   	pop    %ebp
   12d53:	c3                   	ret    

00012d54 <bitmap_init>:
 * @param bitmap 需要初始化的位图
 * @param bits 位图所包含的位图数组的起始地址
 * @param count 页的数量
 * @param init_bit 将位图数组的每一位设置为init_bit
 */
void bitmap_init(bitmap_t *bitmap, uint8_t *bits, int count, int init_bit) {
   12d54:	55                   	push   %ebp
   12d55:	89 e5                	mov    %esp,%ebp
   12d57:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   12d5a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12d5e:	75 19                	jne    12d79 <bitmap_init+0x25>
   12d60:	68 c0 47 01 00       	push   $0x147c0
   12d65:	68 54 48 01 00       	push   $0x14854
   12d6a:	6a 24                	push   $0x24
   12d6c:	68 d8 47 01 00       	push   $0x147d8
   12d71:	e8 92 ff ff ff       	call   12d08 <pannic>
   12d76:	83 c4 10             	add    $0x10,%esp
    ASSERT(bits != (uint8_t*)0);
   12d79:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12d7d:	75 19                	jne    12d98 <bitmap_init+0x44>
   12d7f:	68 10 48 01 00       	push   $0x14810
   12d84:	68 54 48 01 00       	push   $0x14854
   12d89:	6a 25                	push   $0x25
   12d8b:	68 d8 47 01 00       	push   $0x147d8
   12d90:	e8 73 ff ff ff       	call   12d08 <pannic>
   12d95:	83 c4 10             	add    $0x10,%esp

    bitmap->bit_count = count;
   12d98:	8b 45 08             	mov    0x8(%ebp),%eax
   12d9b:	8b 55 10             	mov    0x10(%ebp),%edx
   12d9e:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   12da0:	8b 45 08             	mov    0x8(%ebp),%eax
   12da3:	8b 55 0c             	mov    0xc(%ebp),%edx
   12da6:	89 50 04             	mov    %edx,0x4(%eax)

    //计算该位图需要多少字节
    int bytes = bitmap_byte_count(bitmap->bit_count);
   12da9:	8b 45 08             	mov    0x8(%ebp),%eax
   12dac:	8b 00                	mov    (%eax),%eax
   12dae:	83 ec 0c             	sub    $0xc,%esp
   12db1:	50                   	push   %eax
   12db2:	e8 87 ff ff ff       	call   12d3e <bitmap_byte_count>
   12db7:	83 c4 10             	add    $0x10,%esp
   12dba:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    kernel_memset(bitmap->bits, init_bit ? 0xff : 0, bytes);
   12dbd:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   12dc1:	74 07                	je     12dca <bitmap_init+0x76>
   12dc3:	ba ff 00 00 00       	mov    $0xff,%edx
   12dc8:	eb 05                	jmp    12dcf <bitmap_init+0x7b>
   12dca:	ba 00 00 00 00       	mov    $0x0,%edx
   12dcf:	8b 45 08             	mov    0x8(%ebp),%eax
   12dd2:	8b 40 04             	mov    0x4(%eax),%eax
   12dd5:	83 ec 04             	sub    $0x4,%esp
   12dd8:	ff 75 f4             	push   -0xc(%ebp)
   12ddb:	52                   	push   %edx
   12ddc:	50                   	push   %eax
   12ddd:	e8 28 04 00 00       	call   1320a <kernel_memset>
   12de2:	83 c4 10             	add    $0x10,%esp

}
   12de5:	90                   	nop
   12de6:	c9                   	leave  
   12de7:	c3                   	ret    

00012de8 <bitmap_get_bit>:
 * 
 * @param bitmap 
 * @param index 
 * @return uint8_t 
 */
uint8_t bitmap_get_bit(bitmap_t *bitmap, int index) {
   12de8:	55                   	push   %ebp
   12de9:	89 e5                	mov    %esp,%ebp
   12deb:	53                   	push   %ebx
   12dec:	83 ec 04             	sub    $0x4,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   12def:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12df3:	75 19                	jne    12e0e <bitmap_get_bit+0x26>
   12df5:	68 c0 47 01 00       	push   $0x147c0
   12dfa:	68 60 48 01 00       	push   $0x14860
   12dff:	6a 39                	push   $0x39
   12e01:	68 d8 47 01 00       	push   $0x147d8
   12e06:	e8 fd fe ff ff       	call   12d08 <pannic>
   12e0b:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0);
   12e0e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12e12:	79 19                	jns    12e2d <bitmap_get_bit+0x45>
   12e14:	68 24 48 01 00       	push   $0x14824
   12e19:	68 60 48 01 00       	push   $0x14860
   12e1e:	6a 3a                	push   $0x3a
   12e20:	68 d8 47 01 00       	push   $0x147d8
   12e25:	e8 de fe ff ff       	call   12d08 <pannic>
   12e2a:	83 c4 10             	add    $0x10,%esp

    return (bitmap->bits[index / 8] & (1 << (index % 8)));
   12e2d:	8b 45 08             	mov    0x8(%ebp),%eax
   12e30:	8b 48 04             	mov    0x4(%eax),%ecx
   12e33:	8b 45 0c             	mov    0xc(%ebp),%eax
   12e36:	8d 50 07             	lea    0x7(%eax),%edx
   12e39:	85 c0                	test   %eax,%eax
   12e3b:	0f 48 c2             	cmovs  %edx,%eax
   12e3e:	c1 f8 03             	sar    $0x3,%eax
   12e41:	01 c8                	add    %ecx,%eax
   12e43:	0f b6 00             	movzbl (%eax),%eax
   12e46:	89 c3                	mov    %eax,%ebx
   12e48:	8b 45 0c             	mov    0xc(%ebp),%eax
   12e4b:	83 e0 07             	and    $0x7,%eax
   12e4e:	ba 01 00 00 00       	mov    $0x1,%edx
   12e53:	89 c1                	mov    %eax,%ecx
   12e55:	d3 e2                	shl    %cl,%edx
   12e57:	89 d0                	mov    %edx,%eax
   12e59:	21 d8                	and    %ebx,%eax
}
   12e5b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   12e5e:	c9                   	leave  
   12e5f:	c3                   	ret    

00012e60 <bitmap_set_bit>:
 * @param bitmap 
 * @param index 
 * @param count 
 * @param bit 
 */
void bitmap_set_bit(bitmap_t *bitmap, int index, int count, int bit) {
   12e60:	55                   	push   %ebp
   12e61:	89 e5                	mov    %esp,%ebp
   12e63:	56                   	push   %esi
   12e64:	53                   	push   %ebx
   12e65:	83 ec 10             	sub    $0x10,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   12e68:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12e6c:	75 19                	jne    12e87 <bitmap_set_bit+0x27>
   12e6e:	68 c0 47 01 00       	push   $0x147c0
   12e73:	68 70 48 01 00       	push   $0x14870
   12e78:	6a 48                	push   $0x48
   12e7a:	68 d8 47 01 00       	push   $0x147d8
   12e7f:	e8 84 fe ff ff       	call   12d08 <pannic>
   12e84:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0 && count >= 0);
   12e87:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12e8b:	78 06                	js     12e93 <bitmap_set_bit+0x33>
   12e8d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12e91:	79 19                	jns    12eac <bitmap_set_bit+0x4c>
   12e93:	68 2f 48 01 00       	push   $0x1482f
   12e98:	68 70 48 01 00       	push   $0x14870
   12e9d:	6a 49                	push   $0x49
   12e9f:	68 d8 47 01 00       	push   $0x147d8
   12ea4:	e8 5f fe ff ff       	call   12d08 <pannic>
   12ea9:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   12eac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12eb3:	e9 92 00 00 00       	jmp    12f4a <bitmap_set_bit+0xea>
        if (bit) {
   12eb8:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   12ebc:	74 42                	je     12f00 <bitmap_set_bit+0xa0>
            bitmap->bits[index / 8] |= (1 << (index % 8));
   12ebe:	8b 45 08             	mov    0x8(%ebp),%eax
   12ec1:	8b 48 04             	mov    0x4(%eax),%ecx
   12ec4:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ec7:	8d 50 07             	lea    0x7(%eax),%edx
   12eca:	85 c0                	test   %eax,%eax
   12ecc:	0f 48 c2             	cmovs  %edx,%eax
   12ecf:	c1 f8 03             	sar    $0x3,%eax
   12ed2:	89 c2                	mov    %eax,%edx
   12ed4:	89 d0                	mov    %edx,%eax
   12ed6:	01 c8                	add    %ecx,%eax
   12ed8:	0f b6 00             	movzbl (%eax),%eax
   12edb:	89 c6                	mov    %eax,%esi
   12edd:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ee0:	83 e0 07             	and    $0x7,%eax
   12ee3:	bb 01 00 00 00       	mov    $0x1,%ebx
   12ee8:	89 c1                	mov    %eax,%ecx
   12eea:	d3 e3                	shl    %cl,%ebx
   12eec:	89 d8                	mov    %ebx,%eax
   12eee:	89 f1                	mov    %esi,%ecx
   12ef0:	09 c1                	or     %eax,%ecx
   12ef2:	8b 45 08             	mov    0x8(%ebp),%eax
   12ef5:	8b 40 04             	mov    0x4(%eax),%eax
   12ef8:	01 d0                	add    %edx,%eax
   12efa:	89 ca                	mov    %ecx,%edx
   12efc:	88 10                	mov    %dl,(%eax)
   12efe:	eb 42                	jmp    12f42 <bitmap_set_bit+0xe2>
        } else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   12f00:	8b 45 08             	mov    0x8(%ebp),%eax
   12f03:	8b 48 04             	mov    0x4(%eax),%ecx
   12f06:	8b 45 0c             	mov    0xc(%ebp),%eax
   12f09:	8d 50 07             	lea    0x7(%eax),%edx
   12f0c:	85 c0                	test   %eax,%eax
   12f0e:	0f 48 c2             	cmovs  %edx,%eax
   12f11:	c1 f8 03             	sar    $0x3,%eax
   12f14:	89 c2                	mov    %eax,%edx
   12f16:	89 d0                	mov    %edx,%eax
   12f18:	01 c8                	add    %ecx,%eax
   12f1a:	0f b6 00             	movzbl (%eax),%eax
   12f1d:	89 c6                	mov    %eax,%esi
   12f1f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12f22:	83 e0 07             	and    $0x7,%eax
   12f25:	bb 01 00 00 00       	mov    $0x1,%ebx
   12f2a:	89 c1                	mov    %eax,%ecx
   12f2c:	d3 e3                	shl    %cl,%ebx
   12f2e:	89 d8                	mov    %ebx,%eax
   12f30:	f7 d0                	not    %eax
   12f32:	89 f1                	mov    %esi,%ecx
   12f34:	21 c1                	and    %eax,%ecx
   12f36:	8b 45 08             	mov    0x8(%ebp),%eax
   12f39:	8b 40 04             	mov    0x4(%eax),%eax
   12f3c:	01 d0                	add    %edx,%eax
   12f3e:	89 ca                	mov    %ecx,%edx
   12f40:	88 10                	mov    %dl,(%eax)
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   12f42:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12f46:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   12f4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12f4d:	3b 45 10             	cmp    0x10(%ebp),%eax
   12f50:	7d 0e                	jge    12f60 <bitmap_set_bit+0x100>
   12f52:	8b 45 08             	mov    0x8(%ebp),%eax
   12f55:	8b 00                	mov    (%eax),%eax
   12f57:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12f5a:	0f 8c 58 ff ff ff    	jl     12eb8 <bitmap_set_bit+0x58>
        }
    }
}
   12f60:	90                   	nop
   12f61:	8d 65 f8             	lea    -0x8(%ebp),%esp
   12f64:	5b                   	pop    %ebx
   12f65:	5e                   	pop    %esi
   12f66:	5d                   	pop    %ebp
   12f67:	c3                   	ret    

00012f68 <bitmap_is_set>:
 * 
 * @param bitmap 
 * @param index 
 * @return int 
 */
int bitmap_is_set(bitmap_t *bitmap, int index) {
   12f68:	55                   	push   %ebp
   12f69:	89 e5                	mov    %esp,%ebp
   12f6b:	83 ec 08             	sub    $0x8,%esp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   12f6e:	83 ec 08             	sub    $0x8,%esp
   12f71:	ff 75 0c             	push   0xc(%ebp)
   12f74:	ff 75 08             	push   0x8(%ebp)
   12f77:	e8 6c fe ff ff       	call   12de8 <bitmap_get_bit>
   12f7c:	83 c4 10             	add    $0x10,%esp
   12f7f:	84 c0                	test   %al,%al
   12f81:	0f 95 c0             	setne  %al
   12f84:	0f b6 c0             	movzbl %al,%eax
}
   12f87:	c9                   	leave  
   12f88:	c3                   	ret    

00012f89 <bitmap_alloc_nbits>:
 * @param bitmap 
 * @param bit 当某一位的值为bit时表示该位空闲，可供分配
 * @param count 
 * @return int 
 */
int bitmap_alloc_nbits(bitmap_t *bitmap, int bit, int count) {
   12f89:	55                   	push   %ebp
   12f8a:	89 e5                	mov    %esp,%ebp
   12f8c:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   12f8f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12f93:	75 19                	jne    12fae <bitmap_alloc_nbits+0x25>
   12f95:	68 c0 47 01 00       	push   $0x147c0
   12f9a:	68 80 48 01 00       	push   $0x14880
   12f9f:	6a 68                	push   $0x68
   12fa1:	68 d8 47 01 00       	push   $0x147d8
   12fa6:	e8 5d fd ff ff       	call   12d08 <pannic>
   12fab:	83 c4 10             	add    $0x10,%esp
    ASSERT(count >= 0);
   12fae:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12fb2:	79 19                	jns    12fcd <bitmap_alloc_nbits+0x44>
   12fb4:	68 48 48 01 00       	push   $0x14848
   12fb9:	68 80 48 01 00       	push   $0x14880
   12fbe:	6a 69                	push   $0x69
   12fc0:	68 d8 47 01 00       	push   $0x147d8
   12fc5:	e8 3e fd ff ff       	call   12d08 <pannic>
   12fca:	83 c4 10             	add    $0x10,%esp

    int search_index = 0;
   12fcd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    int ok_index = -1;
   12fd4:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
    while (search_index < bitmap->bit_count) {
   12fdb:	e9 8f 00 00 00       	jmp    1306f <bitmap_alloc_nbits+0xe6>
        //确定可分配空间的起始索引
        if (bitmap_get_bit(bitmap, search_index) != bit) {
   12fe0:	83 ec 08             	sub    $0x8,%esp
   12fe3:	ff 75 f4             	push   -0xc(%ebp)
   12fe6:	ff 75 08             	push   0x8(%ebp)
   12fe9:	e8 fa fd ff ff       	call   12de8 <bitmap_get_bit>
   12fee:	83 c4 10             	add    $0x10,%esp
   12ff1:	0f b6 c0             	movzbl %al,%eax
   12ff4:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12ff7:	74 06                	je     12fff <bitmap_alloc_nbits+0x76>
            search_index++;
   12ff9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
            continue;
   12ffd:	eb 70                	jmp    1306f <bitmap_alloc_nbits+0xe6>
        }

        //记录可分配空间的起始索引
        ok_index = search_index;
   12fff:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13002:	89 45 f0             	mov    %eax,-0x10(%ebp)

        //判断该空间是否大小满足要求
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   13005:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
   1300c:	eb 2d                	jmp    1303b <bitmap_alloc_nbits+0xb2>
            //空间大小不满足要求, 分配失败
            if (bitmap_get_bit(bitmap, search_index++) != bit) {
   1300e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13011:	8d 50 01             	lea    0x1(%eax),%edx
   13014:	89 55 f4             	mov    %edx,-0xc(%ebp)
   13017:	83 ec 08             	sub    $0x8,%esp
   1301a:	50                   	push   %eax
   1301b:	ff 75 08             	push   0x8(%ebp)
   1301e:	e8 c5 fd ff ff       	call   12de8 <bitmap_get_bit>
   13023:	83 c4 10             	add    $0x10,%esp
   13026:	0f b6 c0             	movzbl %al,%eax
   13029:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1302c:	74 09                	je     13037 <bitmap_alloc_nbits+0xae>
                ok_index = -1;
   1302e:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
                break;
   13035:	eb 16                	jmp    1304d <bitmap_alloc_nbits+0xc4>
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   13037:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   1303b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1303e:	3b 45 10             	cmp    0x10(%ebp),%eax
   13041:	7d 0a                	jge    1304d <bitmap_alloc_nbits+0xc4>
   13043:	8b 45 08             	mov    0x8(%ebp),%eax
   13046:	8b 00                	mov    (%eax),%eax
   13048:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   1304b:	7c c1                	jl     1300e <bitmap_alloc_nbits+0x85>
            }
        }

        if (ok_index != -1) {//分配成功
   1304d:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
   13051:	74 1c                	je     1306f <bitmap_alloc_nbits+0xe6>
            //将该片空间标记为已分配状态, 并返回起始索引
            bitmap_set_bit(bitmap, ok_index, count, ~bit);
   13053:	8b 45 0c             	mov    0xc(%ebp),%eax
   13056:	f7 d0                	not    %eax
   13058:	50                   	push   %eax
   13059:	ff 75 10             	push   0x10(%ebp)
   1305c:	ff 75 f0             	push   -0x10(%ebp)
   1305f:	ff 75 08             	push   0x8(%ebp)
   13062:	e8 f9 fd ff ff       	call   12e60 <bitmap_set_bit>
   13067:	83 c4 10             	add    $0x10,%esp
            return ok_index;
   1306a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1306d:	eb 13                	jmp    13082 <bitmap_alloc_nbits+0xf9>
    while (search_index < bitmap->bit_count) {
   1306f:	8b 45 08             	mov    0x8(%ebp),%eax
   13072:	8b 00                	mov    (%eax),%eax
   13074:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   13077:	0f 8c 63 ff ff ff    	jl     12fe0 <bitmap_alloc_nbits+0x57>
        }
    }
    
    //遍历完整个位图也没有满足要求的空间则返回-1
    return -1;
   1307d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

   13082:	c9                   	leave  
   13083:	c3                   	ret    

00013084 <kernel_strcpy>:
 * @brief  拷贝字符串
 * 
 * @param dest 目标字符串
 * @param src  源字符串
 */
void kernel_strcpy(char *dest, const char *src) {
   13084:	55                   	push   %ebp
   13085:	89 e5                	mov    %esp,%ebp
    //1.判断是否为NULL
    if (!dest || !src) return;
   13087:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1308b:	74 3b                	je     130c8 <kernel_strcpy+0x44>
   1308d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13091:	74 35                	je     130c8 <kernel_strcpy+0x44>

    //2.拷贝 src '\0' 以前的部分到 dest中
    //TODO:完成（访问未初始化的内存）的异常中断后就只判断src是否读到'\0'
    while (*dest && *src) {
   13093:	eb 17                	jmp    130ac <kernel_strcpy+0x28>
        *(dest++) = *(src++);
   13095:	8b 55 0c             	mov    0xc(%ebp),%edx
   13098:	8d 42 01             	lea    0x1(%edx),%eax
   1309b:	89 45 0c             	mov    %eax,0xc(%ebp)
   1309e:	8b 45 08             	mov    0x8(%ebp),%eax
   130a1:	8d 48 01             	lea    0x1(%eax),%ecx
   130a4:	89 4d 08             	mov    %ecx,0x8(%ebp)
   130a7:	0f b6 12             	movzbl (%edx),%edx
   130aa:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   130ac:	8b 45 08             	mov    0x8(%ebp),%eax
   130af:	0f b6 00             	movzbl (%eax),%eax
   130b2:	84 c0                	test   %al,%al
   130b4:	74 0a                	je     130c0 <kernel_strcpy+0x3c>
   130b6:	8b 45 0c             	mov    0xc(%ebp),%eax
   130b9:	0f b6 00             	movzbl (%eax),%eax
   130bc:	84 c0                	test   %al,%al
   130be:	75 d5                	jne    13095 <kernel_strcpy+0x11>
    }

    //3.添加结束符
    *dest = '\0';
   130c0:	8b 45 08             	mov    0x8(%ebp),%eax
   130c3:	c6 00 00             	movb   $0x0,(%eax)
   130c6:	eb 01                	jmp    130c9 <kernel_strcpy+0x45>
    if (!dest || !src) return;
   130c8:	90                   	nop
    
}
   130c9:	5d                   	pop    %ebp
   130ca:	c3                   	ret    

000130cb <kernel_strncpy>:
 * 
 * @param dest 目的字符串
 * @param src 源字符串
 * @param size 拷贝字符串的长度，包含'\0'
 */
void kernel_strncpy(char* dest, const char *src, int size) {
   130cb:	55                   	push   %ebp
   130cc:	89 e5                	mov    %esp,%ebp
    //1.判断是否需要拷贝
    if (!dest || !src || !size) return;
   130ce:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   130d2:	74 45                	je     13119 <kernel_strncpy+0x4e>
   130d4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   130d8:	74 3f                	je     13119 <kernel_strncpy+0x4e>
   130da:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   130de:	74 39                	je     13119 <kernel_strncpy+0x4e>

    //2.size的大小包含了'\0'，所以要预留一个空间给'\0'，只能拷贝 size - 1个字符
    while ((size-- > 1) && (*src)) {
   130e0:	eb 17                	jmp    130f9 <kernel_strncpy+0x2e>
        *(dest++) = *(src++);
   130e2:	8b 55 0c             	mov    0xc(%ebp),%edx
   130e5:	8d 42 01             	lea    0x1(%edx),%eax
   130e8:	89 45 0c             	mov    %eax,0xc(%ebp)
   130eb:	8b 45 08             	mov    0x8(%ebp),%eax
   130ee:	8d 48 01             	lea    0x1(%eax),%ecx
   130f1:	89 4d 08             	mov    %ecx,0x8(%ebp)
   130f4:	0f b6 12             	movzbl (%edx),%edx
   130f7:	88 10                	mov    %dl,(%eax)
    while ((size-- > 1) && (*src)) {
   130f9:	8b 45 10             	mov    0x10(%ebp),%eax
   130fc:	8d 50 ff             	lea    -0x1(%eax),%edx
   130ff:	89 55 10             	mov    %edx,0x10(%ebp)
   13102:	83 f8 01             	cmp    $0x1,%eax
   13105:	7e 0a                	jle    13111 <kernel_strncpy+0x46>
   13107:	8b 45 0c             	mov    0xc(%ebp),%eax
   1310a:	0f b6 00             	movzbl (%eax),%eax
   1310d:	84 c0                	test   %al,%al
   1310f:	75 d1                	jne    130e2 <kernel_strncpy+0x17>
    }

    //3.添加结束符
    *dest = '\0';
   13111:	8b 45 08             	mov    0x8(%ebp),%eax
   13114:	c6 00 00             	movb   $0x0,(%eax)
   13117:	eb 01                	jmp    1311a <kernel_strncpy+0x4f>
    if (!dest || !src || !size) return;
   13119:	90                   	nop
}
   1311a:	5d                   	pop    %ebp
   1311b:	c3                   	ret    

0001311c <kernel_strncmp>:
 * @param s2 字符串2
 * @param size 比较前比较的子串长度，从下标0开始到(size - 1)
 * 
 * @return int ==: 0, > : 1, < : -1
 */
int kernel_strncmp(const char *s1, const char *s2, int size) {
   1311c:	55                   	push   %ebp
   1311d:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) return 0;
   1311f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13123:	74 06                	je     1312b <kernel_strncmp+0xf>
   13125:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13129:	75 0f                	jne    1313a <kernel_strncmp+0x1e>
   1312b:	b8 00 00 00 00       	mov    $0x0,%eax
   13130:	eb 52                	jmp    13184 <kernel_strncmp+0x68>

    while (*s1 && *s2 && --size && *s1 == *s2 ) {
        ++s1;
   13132:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        ++s2;        
   13136:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && --size && *s1 == *s2 ) {
   1313a:	8b 45 08             	mov    0x8(%ebp),%eax
   1313d:	0f b6 00             	movzbl (%eax),%eax
   13140:	84 c0                	test   %al,%al
   13142:	74 24                	je     13168 <kernel_strncmp+0x4c>
   13144:	8b 45 0c             	mov    0xc(%ebp),%eax
   13147:	0f b6 00             	movzbl (%eax),%eax
   1314a:	84 c0                	test   %al,%al
   1314c:	74 1a                	je     13168 <kernel_strncmp+0x4c>
   1314e:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   13152:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   13156:	74 10                	je     13168 <kernel_strncmp+0x4c>
   13158:	8b 45 08             	mov    0x8(%ebp),%eax
   1315b:	0f b6 10             	movzbl (%eax),%edx
   1315e:	8b 45 0c             	mov    0xc(%ebp),%eax
   13161:	0f b6 00             	movzbl (%eax),%eax
   13164:	38 c2                	cmp    %al,%dl
   13166:	74 ca                	je     13132 <kernel_strncmp+0x16>
    }

    if (*s1 > *s2) return 1;
   13168:	8b 45 08             	mov    0x8(%ebp),%eax
   1316b:	0f b6 10             	movzbl (%eax),%edx
   1316e:	8b 45 0c             	mov    0xc(%ebp),%eax
   13171:	0f b6 00             	movzbl (%eax),%eax
   13174:	38 c2                	cmp    %al,%dl
   13176:	7e 07                	jle    1317f <kernel_strncmp+0x63>
   13178:	b8 01 00 00 00       	mov    $0x1,%eax
   1317d:	eb 05                	jmp    13184 <kernel_strncmp+0x68>
    else if (*s1 < *s1) return -1;
    else return 0;
   1317f:	b8 00 00 00 00       	mov    $0x0,%eax
    
}
   13184:	5d                   	pop    %ebp
   13185:	c3                   	ret    

00013186 <kernel_strlen>:
 * @brief  获取字符串str的长度
 * 
 * @param str 
 * @return int 
 */
int kernel_strlen(const char *str) {
   13186:	55                   	push   %ebp
   13187:	89 e5                	mov    %esp,%ebp
   13189:	83 ec 10             	sub    $0x10,%esp
    if (!str) return 0;
   1318c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13190:	75 07                	jne    13199 <kernel_strlen+0x13>
   13192:	b8 00 00 00 00       	mov    $0x0,%eax
   13197:	eb 20                	jmp    131b9 <kernel_strlen+0x33>

    int len = 0;
   13199:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*(str++)) len++;
   131a0:	eb 04                	jmp    131a6 <kernel_strlen+0x20>
   131a2:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   131a6:	8b 45 08             	mov    0x8(%ebp),%eax
   131a9:	8d 50 01             	lea    0x1(%eax),%edx
   131ac:	89 55 08             	mov    %edx,0x8(%ebp)
   131af:	0f b6 00             	movzbl (%eax),%eax
   131b2:	84 c0                	test   %al,%al
   131b4:	75 ec                	jne    131a2 <kernel_strlen+0x1c>

    return len;
   131b6:	8b 45 fc             	mov    -0x4(%ebp),%eax
    
}
   131b9:	c9                   	leave  
   131ba:	c3                   	ret    

000131bb <kernel_memcpy>:
 * 
 * @param dest 目的内存的起始地址
 * @param src 原内存的起始地址
 * @param size 复制的内存字节大小
 */
void kernel_memcpy(void *dest, const void *src, int size) {
   131bb:	55                   	push   %ebp
   131bc:	89 e5                	mov    %esp,%ebp
   131be:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) return;
   131c1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   131c5:	74 40                	je     13207 <kernel_memcpy+0x4c>
   131c7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   131cb:	74 3a                	je     13207 <kernel_memcpy+0x4c>
   131cd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   131d1:	74 34                	je     13207 <kernel_memcpy+0x4c>

    uint8_t *d = (uint8_t*)dest;
   131d3:	8b 45 08             	mov    0x8(%ebp),%eax
   131d6:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *s = (uint8_t*)src;
   131d9:	8b 45 0c             	mov    0xc(%ebp),%eax
   131dc:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (size--) {
   131df:	eb 17                	jmp    131f8 <kernel_memcpy+0x3d>
        *(d++) = *(s++);
   131e1:	8b 55 f8             	mov    -0x8(%ebp),%edx
   131e4:	8d 42 01             	lea    0x1(%edx),%eax
   131e7:	89 45 f8             	mov    %eax,-0x8(%ebp)
   131ea:	8b 45 fc             	mov    -0x4(%ebp),%eax
   131ed:	8d 48 01             	lea    0x1(%eax),%ecx
   131f0:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   131f3:	0f b6 12             	movzbl (%edx),%edx
   131f6:	88 10                	mov    %dl,(%eax)
    while (size--) {
   131f8:	8b 45 10             	mov    0x10(%ebp),%eax
   131fb:	8d 50 ff             	lea    -0x1(%eax),%edx
   131fe:	89 55 10             	mov    %edx,0x10(%ebp)
   13201:	85 c0                	test   %eax,%eax
   13203:	75 dc                	jne    131e1 <kernel_memcpy+0x26>
   13205:	eb 01                	jmp    13208 <kernel_memcpy+0x4d>
    if (!dest || !src || !size) return;
   13207:	90                   	nop
    }
    
}
   13208:	c9                   	leave  
   13209:	c3                   	ret    

0001320a <kernel_memset>:
 * 
 * @param dest 区域起始地址
 * @param v 每个字节的值
 * @param size 赋值的内存的大小
 */
void kernel_memset(void *dest, uint8_t v, int size) {
   1320a:	55                   	push   %ebp
   1320b:	89 e5                	mov    %esp,%ebp
   1320d:	83 ec 14             	sub    $0x14,%esp
   13210:	8b 45 0c             	mov    0xc(%ebp),%eax
   13213:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size) return;
   13216:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1321a:	74 2c                	je     13248 <kernel_memset+0x3e>
   1321c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   13220:	74 26                	je     13248 <kernel_memset+0x3e>

    uint8_t *d = (uint8_t*)dest;
   13222:	8b 45 08             	mov    0x8(%ebp),%eax
   13225:	89 45 fc             	mov    %eax,-0x4(%ebp)
    
    while (size--) {
   13228:	eb 0f                	jmp    13239 <kernel_memset+0x2f>
        *(d++) = v;
   1322a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1322d:	8d 50 01             	lea    0x1(%eax),%edx
   13230:	89 55 fc             	mov    %edx,-0x4(%ebp)
   13233:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   13237:	88 10                	mov    %dl,(%eax)
    while (size--) {
   13239:	8b 45 10             	mov    0x10(%ebp),%eax
   1323c:	8d 50 ff             	lea    -0x1(%eax),%edx
   1323f:	89 55 10             	mov    %edx,0x10(%ebp)
   13242:	85 c0                	test   %eax,%eax
   13244:	75 e4                	jne    1322a <kernel_memset+0x20>
   13246:	eb 01                	jmp    13249 <kernel_memset+0x3f>
    if (!dest || !size) return;
   13248:	90                   	nop
    }
    
}
   13249:	c9                   	leave  
   1324a:	c3                   	ret    

0001324b <kernel_memcmp>:
 * @param d1 区域1的起始地址
 * @param d2 区域2的起始地址
 * @param size 比较的字节数量
 * @return int ==:0, >:1, <:-1
 */
int kernel_memcmp(const void *dest1, const void *dest2, int size) {
   1324b:	55                   	push   %ebp
   1324c:	89 e5                	mov    %esp,%ebp
   1324e:	83 ec 10             	sub    $0x10,%esp
    if (!dest1 || !dest2 || !size) return 0;
   13251:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13255:	74 0c                	je     13263 <kernel_memcmp+0x18>
   13257:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1325b:	74 06                	je     13263 <kernel_memcmp+0x18>
   1325d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   13261:	75 07                	jne    1326a <kernel_memcmp+0x1f>
   13263:	b8 00 00 00 00       	mov    $0x0,%eax
   13268:	eb 63                	jmp    132cd <kernel_memcmp+0x82>

    uint8_t *d1 = (uint8_t*)dest1;
   1326a:	8b 45 08             	mov    0x8(%ebp),%eax
   1326d:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d2 = (uint8_t*)dest2;
   13270:	8b 45 0c             	mov    0xc(%ebp),%eax
   13273:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (--size && *d1 == *d2) {
   13276:	eb 08                	jmp    13280 <kernel_memcmp+0x35>
        d1++;
   13278:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
        d2++;
   1327c:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (--size && *d1 == *d2) {
   13280:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   13284:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   13288:	74 10                	je     1329a <kernel_memcmp+0x4f>
   1328a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1328d:	0f b6 10             	movzbl (%eax),%edx
   13290:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13293:	0f b6 00             	movzbl (%eax),%eax
   13296:	38 c2                	cmp    %al,%dl
   13298:	74 de                	je     13278 <kernel_memcmp+0x2d>
    }

    if (*d1 > *d2) return 1;
   1329a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1329d:	0f b6 10             	movzbl (%eax),%edx
   132a0:	8b 45 f8             	mov    -0x8(%ebp),%eax
   132a3:	0f b6 00             	movzbl (%eax),%eax
   132a6:	38 c2                	cmp    %al,%dl
   132a8:	76 07                	jbe    132b1 <kernel_memcmp+0x66>
   132aa:	b8 01 00 00 00       	mov    $0x1,%eax
   132af:	eb 1c                	jmp    132cd <kernel_memcmp+0x82>
    else if (*d1 < *d2) return -1;
   132b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   132b4:	0f b6 10             	movzbl (%eax),%edx
   132b7:	8b 45 f8             	mov    -0x8(%ebp),%eax
   132ba:	0f b6 00             	movzbl (%eax),%eax
   132bd:	38 c2                	cmp    %al,%dl
   132bf:	73 07                	jae    132c8 <kernel_memcmp+0x7d>
   132c1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   132c6:	eb 05                	jmp    132cd <kernel_memcmp+0x82>
    else return 0;
   132c8:	b8 00 00 00 00       	mov    $0x0,%eax

}
   132cd:	c9                   	leave  
   132ce:	c3                   	ret    

000132cf <kernel_sprintf>:



void kernel_sprintf(char *buf, const char *formate, ...) {
   132cf:	55                   	push   %ebp
   132d0:	89 e5                	mov    %esp,%ebp
   132d2:	83 ec 18             	sub    $0x18,%esp
    //获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   132d5:	8d 45 10             	lea    0x10(%ebp),%eax
   132d8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_vsprintf(buf, formate, args);
   132db:	8b 45 f4             	mov    -0xc(%ebp),%eax
   132de:	83 ec 04             	sub    $0x4,%esp
   132e1:	50                   	push   %eax
   132e2:	ff 75 0c             	push   0xc(%ebp)
   132e5:	ff 75 08             	push   0x8(%ebp)
   132e8:	e8 06 00 00 00       	call   132f3 <kernel_vsprintf>
   132ed:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   132f0:	90                   	nop
   132f1:	c9                   	leave  
   132f2:	c3                   	ret    

000132f3 <kernel_vsprintf>:
 * 
 * @param buf 
 * @param formate 
 * @param args 
 */
void kernel_vsprintf(char *buf, const char *formate, va_list args) {
   132f3:	55                   	push   %ebp
   132f4:	89 e5                	mov    %esp,%ebp
   132f6:	83 ec 28             	sub    $0x28,%esp
    //定义状态机，包含两种状态
    enum {NORMAL, READ_FMT} state = NORMAL;
   132f9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    
    char *curr = buf;
   13300:	8b 45 08             	mov    0x8(%ebp),%eax
   13303:	89 45 f0             	mov    %eax,-0x10(%ebp)

    char ch;

    while ((ch = *(formate++)) != '\0') {
   13306:	e9 68 01 00 00       	jmp    13473 <kernel_vsprintf+0x180>
        switch (state) {
   1330b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1330f:	74 0b                	je     1331c <kernel_vsprintf+0x29>
   13311:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   13315:	74 2b                	je     13342 <kernel_vsprintf+0x4f>
   13317:	e9 56 01 00 00       	jmp    13472 <kernel_vsprintf+0x17f>
        case NORMAL: 
            if (ch == '%') state = READ_FMT;
   1331c:	80 7d e7 25          	cmpb   $0x25,-0x19(%ebp)
   13320:	75 0c                	jne    1332e <kernel_vsprintf+0x3b>
   13322:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   13329:	e9 45 01 00 00       	jmp    13473 <kernel_vsprintf+0x180>
            else *(curr++) = ch;
   1332e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13331:	8d 50 01             	lea    0x1(%eax),%edx
   13334:	89 55 f0             	mov    %edx,-0x10(%ebp)
   13337:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   1333b:	88 10                	mov    %dl,(%eax)
            break;
   1333d:	e9 31 01 00 00       	jmp    13473 <kernel_vsprintf+0x180>
        case READ_FMT:
            if (ch == 's') {
   13342:	80 7d e7 73          	cmpb   $0x73,-0x19(%ebp)
   13346:	75 47                	jne    1338f <kernel_vsprintf+0x9c>
                const char * str = va_arg(args, char *);
   13348:	8b 45 10             	mov    0x10(%ebp),%eax
   1334b:	8d 50 04             	lea    0x4(%eax),%edx
   1334e:	89 55 10             	mov    %edx,0x10(%ebp)
   13351:	8b 00                	mov    (%eax),%eax
   13353:	89 45 ec             	mov    %eax,-0x14(%ebp)
                int len = kernel_strlen(str);
   13356:	ff 75 ec             	push   -0x14(%ebp)
   13359:	e8 28 fe ff ff       	call   13186 <kernel_strlen>
   1335e:	83 c4 04             	add    $0x4,%esp
   13361:	89 45 e8             	mov    %eax,-0x18(%ebp)
                while (len--) {
   13364:	eb 17                	jmp    1337d <kernel_vsprintf+0x8a>
                    *(curr++) = *(str++);
   13366:	8b 55 ec             	mov    -0x14(%ebp),%edx
   13369:	8d 42 01             	lea    0x1(%edx),%eax
   1336c:	89 45 ec             	mov    %eax,-0x14(%ebp)
   1336f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13372:	8d 48 01             	lea    0x1(%eax),%ecx
   13375:	89 4d f0             	mov    %ecx,-0x10(%ebp)
   13378:	0f b6 12             	movzbl (%edx),%edx
   1337b:	88 10                	mov    %dl,(%eax)
                while (len--) {
   1337d:	8b 45 e8             	mov    -0x18(%ebp),%eax
   13380:	8d 50 ff             	lea    -0x1(%eax),%edx
   13383:	89 55 e8             	mov    %edx,-0x18(%ebp)
   13386:	85 c0                	test   %eax,%eax
   13388:	75 dc                	jne    13366 <kernel_vsprintf+0x73>
   1338a:	e9 da 00 00 00       	jmp    13469 <kernel_vsprintf+0x176>
                }
            } else if (ch == 'd') {
   1338f:	80 7d e7 64          	cmpb   $0x64,-0x19(%ebp)
   13393:	75 37                	jne    133cc <kernel_vsprintf+0xd9>
                const int num = va_arg(args, int);
   13395:	8b 45 10             	mov    0x10(%ebp),%eax
   13398:	8d 50 04             	lea    0x4(%eax),%edx
   1339b:	89 55 10             	mov    %edx,0x10(%ebp)
   1339e:	8b 00                	mov    (%eax),%eax
   133a0:	89 45 d8             	mov    %eax,-0x28(%ebp)
                kernel_itoa(curr, num, 10);
   133a3:	83 ec 04             	sub    $0x4,%esp
   133a6:	6a 0a                	push   $0xa
   133a8:	ff 75 d8             	push   -0x28(%ebp)
   133ab:	ff 75 f0             	push   -0x10(%ebp)
   133ae:	e8 dd 00 00 00       	call   13490 <kernel_itoa>
   133b3:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr);   
   133b6:	83 ec 0c             	sub    $0xc,%esp
   133b9:	ff 75 f0             	push   -0x10(%ebp)
   133bc:	e8 c5 fd ff ff       	call   13186 <kernel_strlen>
   133c1:	83 c4 10             	add    $0x10,%esp
   133c4:	01 45 f0             	add    %eax,-0x10(%ebp)
   133c7:	e9 9d 00 00 00       	jmp    13469 <kernel_vsprintf+0x176>
            } else if (ch == 'x' || ch == 'X') {
   133cc:	80 7d e7 78          	cmpb   $0x78,-0x19(%ebp)
   133d0:	74 06                	je     133d8 <kernel_vsprintf+0xe5>
   133d2:	80 7d e7 58          	cmpb   $0x58,-0x19(%ebp)
   133d6:	75 34                	jne    1340c <kernel_vsprintf+0x119>
                const int num = va_arg(args, int);
   133d8:	8b 45 10             	mov    0x10(%ebp),%eax
   133db:	8d 50 04             	lea    0x4(%eax),%edx
   133de:	89 55 10             	mov    %edx,0x10(%ebp)
   133e1:	8b 00                	mov    (%eax),%eax
   133e3:	89 45 dc             	mov    %eax,-0x24(%ebp)
                kernel_itoa(curr, num, 16);
   133e6:	83 ec 04             	sub    $0x4,%esp
   133e9:	6a 10                	push   $0x10
   133eb:	ff 75 dc             	push   -0x24(%ebp)
   133ee:	ff 75 f0             	push   -0x10(%ebp)
   133f1:	e8 9a 00 00 00       	call   13490 <kernel_itoa>
   133f6:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr); 
   133f9:	83 ec 0c             	sub    $0xc,%esp
   133fc:	ff 75 f0             	push   -0x10(%ebp)
   133ff:	e8 82 fd ff ff       	call   13186 <kernel_strlen>
   13404:	83 c4 10             	add    $0x10,%esp
   13407:	01 45 f0             	add    %eax,-0x10(%ebp)
            } else if (ch == 'x' || ch == 'X') {
   1340a:	eb 5d                	jmp    13469 <kernel_vsprintf+0x176>
            } else if (ch == 'b') {
   1340c:	80 7d e7 62          	cmpb   $0x62,-0x19(%ebp)
   13410:	75 34                	jne    13446 <kernel_vsprintf+0x153>
                 const int num = va_arg(args, int);
   13412:	8b 45 10             	mov    0x10(%ebp),%eax
   13415:	8d 50 04             	lea    0x4(%eax),%edx
   13418:	89 55 10             	mov    %edx,0x10(%ebp)
   1341b:	8b 00                	mov    (%eax),%eax
   1341d:	89 45 e0             	mov    %eax,-0x20(%ebp)
                kernel_itoa(curr, num, 2);
   13420:	83 ec 04             	sub    $0x4,%esp
   13423:	6a 02                	push   $0x2
   13425:	ff 75 e0             	push   -0x20(%ebp)
   13428:	ff 75 f0             	push   -0x10(%ebp)
   1342b:	e8 60 00 00 00       	call   13490 <kernel_itoa>
   13430:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr); 
   13433:	83 ec 0c             	sub    $0xc,%esp
   13436:	ff 75 f0             	push   -0x10(%ebp)
   13439:	e8 48 fd ff ff       	call   13186 <kernel_strlen>
   1343e:	83 c4 10             	add    $0x10,%esp
   13441:	01 45 f0             	add    %eax,-0x10(%ebp)
   13444:	eb 23                	jmp    13469 <kernel_vsprintf+0x176>
            } else if (ch == 'c') {
   13446:	80 7d e7 63          	cmpb   $0x63,-0x19(%ebp)
   1344a:	75 1d                	jne    13469 <kernel_vsprintf+0x176>
                char c = va_arg(args, int);
   1344c:	8b 45 10             	mov    0x10(%ebp),%eax
   1344f:	8d 50 04             	lea    0x4(%eax),%edx
   13452:	89 55 10             	mov    %edx,0x10(%ebp)
   13455:	8b 00                	mov    (%eax),%eax
   13457:	88 45 e6             	mov    %al,-0x1a(%ebp)
                *(curr++) = c;
   1345a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1345d:	8d 50 01             	lea    0x1(%eax),%edx
   13460:	89 55 f0             	mov    %edx,-0x10(%ebp)
   13463:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   13467:	88 10                	mov    %dl,(%eax)
            }
            state = NORMAL;
   13469:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            break;
   13470:	eb 01                	jmp    13473 <kernel_vsprintf+0x180>
        default:
            break;
   13472:	90                   	nop
    while ((ch = *(formate++)) != '\0') {
   13473:	8b 45 0c             	mov    0xc(%ebp),%eax
   13476:	8d 50 01             	lea    0x1(%eax),%edx
   13479:	89 55 0c             	mov    %edx,0xc(%ebp)
   1347c:	0f b6 00             	movzbl (%eax),%eax
   1347f:	88 45 e7             	mov    %al,-0x19(%ebp)
   13482:	80 7d e7 00          	cmpb   $0x0,-0x19(%ebp)
   13486:	0f 85 7f fe ff ff    	jne    1330b <kernel_vsprintf+0x18>
        }
    }
    

}
   1348c:	90                   	nop
   1348d:	90                   	nop
   1348e:	c9                   	leave  
   1348f:	c3                   	ret    

00013490 <kernel_itoa>:
 * 
 * @param buf 缓冲区
 * @param num 整数
 * @param base 转换的进制规则
 */
void kernel_itoa(char *buf, int num, int base) {
   13490:	55                   	push   %ebp
   13491:	89 e5                	mov    %esp,%ebp
   13493:	81 ec 90 00 00 00    	sub    $0x90,%esp
    char * p = buf;
   13499:	8b 45 08             	mov    0x8(%ebp),%eax
   1349c:	89 45 fc             	mov    %eax,-0x4(%ebp)

    if (base != 2 && base != 8 && base != 10 && base != 16) {
   1349f:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   134a3:	74 1d                	je     134c2 <kernel_itoa+0x32>
   134a5:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   134a9:	74 17                	je     134c2 <kernel_itoa+0x32>
   134ab:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   134af:	74 11                	je     134c2 <kernel_itoa+0x32>
   134b1:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   134b5:	74 0b                	je     134c2 <kernel_itoa+0x32>
        *buf = '\0';
   134b7:	8b 45 08             	mov    0x8(%ebp),%eax
   134ba:	c6 00 00             	movb   $0x0,(%eax)
        return;
   134bd:	e9 a2 00 00 00       	jmp    13564 <kernel_itoa+0xd4>
    }

    if(num < 0)  {
   134c2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   134c6:	79 11                	jns    134d9 <kernel_itoa+0x49>
        *(p++) = '-';
   134c8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   134cb:	8d 50 01             	lea    0x1(%eax),%edx
   134ce:	89 55 fc             	mov    %edx,-0x4(%ebp)
   134d1:	c6 00 2d             	movb   $0x2d,(%eax)
        num = -num;
   134d4:	f7 5d 0c             	negl   0xc(%ebp)
   134d7:	eb 1a                	jmp    134f3 <kernel_itoa+0x63>
    } else if (num == 0) {
   134d9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   134dd:	75 14                	jne    134f3 <kernel_itoa+0x63>
        *(p++) = '0';
   134df:	8b 45 fc             	mov    -0x4(%ebp),%eax
   134e2:	8d 50 01             	lea    0x1(%eax),%edx
   134e5:	89 55 fc             	mov    %edx,-0x4(%ebp)
   134e8:	c6 00 30             	movb   $0x30,(%eax)
        *p = '\0';
   134eb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   134ee:	c6 00 00             	movb   $0x0,(%eax)
        return;
   134f1:	eb 71                	jmp    13564 <kernel_itoa+0xd4>
    }
    

    static const char *num_to_char = {"0123456789abcdef"};
    char arr[128];
    int len = 0;
   134f3:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (num > 0) {
   134fa:	eb 2e                	jmp    1352a <kernel_itoa+0x9a>
        arr[len++] = num_to_char[num % base];
   134fc:	8b 0d 40 50 01 00    	mov    0x15040,%ecx
   13502:	8b 45 0c             	mov    0xc(%ebp),%eax
   13505:	99                   	cltd   
   13506:	f7 7d 10             	idivl  0x10(%ebp)
   13509:	89 d0                	mov    %edx,%eax
   1350b:	01 c1                	add    %eax,%ecx
   1350d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13510:	8d 50 01             	lea    0x1(%eax),%edx
   13513:	89 55 f8             	mov    %edx,-0x8(%ebp)
   13516:	0f b6 11             	movzbl (%ecx),%edx
   13519:	88 94 05 74 ff ff ff 	mov    %dl,-0x8c(%ebp,%eax,1)
        num /= base;
   13520:	8b 45 0c             	mov    0xc(%ebp),%eax
   13523:	99                   	cltd   
   13524:	f7 7d 10             	idivl  0x10(%ebp)
   13527:	89 45 0c             	mov    %eax,0xc(%ebp)
    while (num > 0) {
   1352a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1352e:	7f cc                	jg     134fc <kernel_itoa+0x6c>
    }

    for (int i = len - 1; i >= 0; --i) {
   13530:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13533:	83 e8 01             	sub    $0x1,%eax
   13536:	89 45 f4             	mov    %eax,-0xc(%ebp)
   13539:	eb 1d                	jmp    13558 <kernel_itoa+0xc8>
            *(p++) = arr[i];
   1353b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1353e:	8d 50 01             	lea    0x1(%eax),%edx
   13541:	89 55 fc             	mov    %edx,-0x4(%ebp)
   13544:	8d 8d 74 ff ff ff    	lea    -0x8c(%ebp),%ecx
   1354a:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1354d:	01 ca                	add    %ecx,%edx
   1354f:	0f b6 12             	movzbl (%edx),%edx
   13552:	88 10                	mov    %dl,(%eax)
    for (int i = len - 1; i >= 0; --i) {
   13554:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
   13558:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1355c:	79 dd                	jns    1353b <kernel_itoa+0xab>
    }
    *p = '\0';
   1355e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13561:	c6 00 00             	movb   $0x0,(%eax)
   13564:	c9                   	leave  
   13565:	c3                   	ret    

00013566 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   13566:	55                   	push   %ebp
   13567:	89 e5                	mov    %esp,%ebp
   13569:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1356c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13570:	75 19                	jne    1358b <list_is_empty+0x25>
   13572:	68 a4 48 01 00       	push   $0x148a4
   13577:	68 88 49 01 00       	push   $0x14988
   1357c:	6a 38                	push   $0x38
   1357e:	68 b8 48 01 00       	push   $0x148b8
   13583:	e8 80 f7 ff ff       	call   12d08 <pannic>
   13588:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   1358b:	8b 45 08             	mov    0x8(%ebp),%eax
   1358e:	8b 40 08             	mov    0x8(%eax),%eax
   13591:	85 c0                	test   %eax,%eax
   13593:	0f 94 c0             	sete   %al
   13596:	0f b6 c0             	movzbl %al,%eax
}
   13599:	c9                   	leave  
   1359a:	c3                   	ret    

0001359b <list_get_size>:
static inline int list_get_size(list_t *list) {
   1359b:	55                   	push   %ebp
   1359c:	89 e5                	mov    %esp,%ebp
   1359e:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   135a1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   135a5:	75 19                	jne    135c0 <list_get_size+0x25>
   135a7:	68 a4 48 01 00       	push   $0x148a4
   135ac:	68 c0 49 01 00       	push   $0x149c0
   135b1:	6a 3e                	push   $0x3e
   135b3:	68 b8 48 01 00       	push   $0x148b8
   135b8:	e8 4b f7 ff ff       	call   12d08 <pannic>
   135bd:	83 c4 10             	add    $0x10,%esp
    return list->size;
   135c0:	8b 45 08             	mov    0x8(%ebp),%eax
   135c3:	8b 40 08             	mov    0x8(%eax),%eax
}
   135c6:	c9                   	leave  
   135c7:	c3                   	ret    

000135c8 <list_insert_first>:
 * 
 */

#include "tools/list.h"

void list_insert_first(list_t *list, list_node_t *node) {
   135c8:	55                   	push   %ebp
   135c9:	89 e5                	mov    %esp,%ebp
   135cb:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   135ce:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   135d2:	74 06                	je     135da <list_insert_first+0x12>
   135d4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   135d8:	75 19                	jne    135f3 <list_insert_first+0x2b>
   135da:	68 f8 48 01 00       	push   $0x148f8
   135df:	68 74 49 01 00       	push   $0x14974
   135e4:	6a 0f                	push   $0xf
   135e6:	68 28 49 01 00       	push   $0x14928
   135eb:	e8 18 f7 ff ff       	call   12d08 <pannic>
   135f0:	83 c4 10             	add    $0x10,%esp

    node->next = list->first;
   135f3:	8b 45 08             	mov    0x8(%ebp),%eax
   135f6:	8b 10                	mov    (%eax),%edx
   135f8:	8b 45 0c             	mov    0xc(%ebp),%eax
   135fb:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   135fe:	8b 45 0c             	mov    0xc(%ebp),%eax
   13601:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   13607:	83 ec 0c             	sub    $0xc,%esp
   1360a:	ff 75 08             	push   0x8(%ebp)
   1360d:	e8 54 ff ff ff       	call   13566 <list_is_empty>
   13612:	83 c4 10             	add    $0x10,%esp
   13615:	85 c0                	test   %eax,%eax
   13617:	74 16                	je     1362f <list_insert_first+0x67>
        list->first = list->last = node;
   13619:	8b 45 08             	mov    0x8(%ebp),%eax
   1361c:	8b 55 0c             	mov    0xc(%ebp),%edx
   1361f:	89 50 04             	mov    %edx,0x4(%eax)
   13622:	8b 45 08             	mov    0x8(%ebp),%eax
   13625:	8b 50 04             	mov    0x4(%eax),%edx
   13628:	8b 45 08             	mov    0x8(%ebp),%eax
   1362b:	89 10                	mov    %edx,(%eax)
   1362d:	eb 12                	jmp    13641 <list_insert_first+0x79>
    } else {
        list->first->pre = node;
   1362f:	8b 45 08             	mov    0x8(%ebp),%eax
   13632:	8b 00                	mov    (%eax),%eax
   13634:	8b 55 0c             	mov    0xc(%ebp),%edx
   13637:	89 10                	mov    %edx,(%eax)
        list->first = node;
   13639:	8b 45 08             	mov    0x8(%ebp),%eax
   1363c:	8b 55 0c             	mov    0xc(%ebp),%edx
   1363f:	89 10                	mov    %edx,(%eax)
    }

    list->size++;
   13641:	8b 45 08             	mov    0x8(%ebp),%eax
   13644:	8b 40 08             	mov    0x8(%eax),%eax
   13647:	8d 50 01             	lea    0x1(%eax),%edx
   1364a:	8b 45 08             	mov    0x8(%ebp),%eax
   1364d:	89 50 08             	mov    %edx,0x8(%eax)
}
   13650:	90                   	nop
   13651:	c9                   	leave  
   13652:	c3                   	ret    

00013653 <list_insert_last>:

void list_insert_last(list_t *list, list_node_t *node) {
   13653:	55                   	push   %ebp
   13654:	89 e5                	mov    %esp,%ebp
   13656:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   13659:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1365d:	74 06                	je     13665 <list_insert_last+0x12>
   1365f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13663:	75 19                	jne    1367e <list_insert_last+0x2b>
   13665:	68 f8 48 01 00       	push   $0x148f8
   1366a:	68 98 49 01 00       	push   $0x14998
   1366f:	6a 1f                	push   $0x1f
   13671:	68 28 49 01 00       	push   $0x14928
   13676:	e8 8d f6 ff ff       	call   12d08 <pannic>
   1367b:	83 c4 10             	add    $0x10,%esp

    node->pre = list->last;
   1367e:	8b 45 08             	mov    0x8(%ebp),%eax
   13681:	8b 50 04             	mov    0x4(%eax),%edx
   13684:	8b 45 0c             	mov    0xc(%ebp),%eax
   13687:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   13689:	8b 45 0c             	mov    0xc(%ebp),%eax
   1368c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)


    if (list_is_empty(list)) {
   13693:	83 ec 0c             	sub    $0xc,%esp
   13696:	ff 75 08             	push   0x8(%ebp)
   13699:	e8 c8 fe ff ff       	call   13566 <list_is_empty>
   1369e:	83 c4 10             	add    $0x10,%esp
   136a1:	85 c0                	test   %eax,%eax
   136a3:	74 16                	je     136bb <list_insert_last+0x68>
        list->first = list->last = node;
   136a5:	8b 45 08             	mov    0x8(%ebp),%eax
   136a8:	8b 55 0c             	mov    0xc(%ebp),%edx
   136ab:	89 50 04             	mov    %edx,0x4(%eax)
   136ae:	8b 45 08             	mov    0x8(%ebp),%eax
   136b1:	8b 50 04             	mov    0x4(%eax),%edx
   136b4:	8b 45 08             	mov    0x8(%ebp),%eax
   136b7:	89 10                	mov    %edx,(%eax)
   136b9:	eb 15                	jmp    136d0 <list_insert_last+0x7d>
    } else {
        list->last->next = node;
   136bb:	8b 45 08             	mov    0x8(%ebp),%eax
   136be:	8b 40 04             	mov    0x4(%eax),%eax
   136c1:	8b 55 0c             	mov    0xc(%ebp),%edx
   136c4:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   136c7:	8b 45 08             	mov    0x8(%ebp),%eax
   136ca:	8b 55 0c             	mov    0xc(%ebp),%edx
   136cd:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->size++;
   136d0:	8b 45 08             	mov    0x8(%ebp),%eax
   136d3:	8b 40 08             	mov    0x8(%eax),%eax
   136d6:	8d 50 01             	lea    0x1(%eax),%edx
   136d9:	8b 45 08             	mov    0x8(%ebp),%eax
   136dc:	89 50 08             	mov    %edx,0x8(%eax)

}
   136df:	90                   	nop
   136e0:	c9                   	leave  
   136e1:	c3                   	ret    

000136e2 <list_remove_first>:

list_node_t* list_remove_first(list_t *list){
   136e2:	55                   	push   %ebp
   136e3:	89 e5                	mov    %esp,%ebp
   136e5:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   136e8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   136ec:	75 19                	jne    13707 <list_remove_first+0x25>
   136ee:	68 5e 49 01 00       	push   $0x1495e
   136f3:	68 ac 49 01 00       	push   $0x149ac
   136f8:	6a 31                	push   $0x31
   136fa:	68 28 49 01 00       	push   $0x14928
   136ff:	e8 04 f6 ff ff       	call   12d08 <pannic>
   13704:	83 c4 10             	add    $0x10,%esp
    if (list_is_empty(list)) {
   13707:	83 ec 0c             	sub    $0xc,%esp
   1370a:	ff 75 08             	push   0x8(%ebp)
   1370d:	e8 54 fe ff ff       	call   13566 <list_is_empty>
   13712:	83 c4 10             	add    $0x10,%esp
   13715:	85 c0                	test   %eax,%eax
   13717:	74 07                	je     13720 <list_remove_first+0x3e>
        return (list_node_t*)0;
   13719:	b8 00 00 00 00       	mov    $0x0,%eax
   1371e:	eb 71                	jmp    13791 <list_remove_first+0xaf>
    }

    list_node_t *ret = list->first;
   13720:	8b 45 08             	mov    0x8(%ebp),%eax
   13723:	8b 00                	mov    (%eax),%eax
   13725:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   13728:	83 ec 0c             	sub    $0xc,%esp
   1372b:	ff 75 08             	push   0x8(%ebp)
   1372e:	e8 68 fe ff ff       	call   1359b <list_get_size>
   13733:	83 c4 10             	add    $0x10,%esp
   13736:	83 f8 01             	cmp    $0x1,%eax
   13739:	75 17                	jne    13752 <list_remove_first+0x70>
        list->first = list->last = (list_node_t*)0;
   1373b:	8b 45 08             	mov    0x8(%ebp),%eax
   1373e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   13745:	8b 45 08             	mov    0x8(%ebp),%eax
   13748:	8b 50 04             	mov    0x4(%eax),%edx
   1374b:	8b 45 08             	mov    0x8(%ebp),%eax
   1374e:	89 10                	mov    %edx,(%eax)
   13750:	eb 18                	jmp    1376a <list_remove_first+0x88>
    } else {
        list->first = list->first->next;
   13752:	8b 45 08             	mov    0x8(%ebp),%eax
   13755:	8b 00                	mov    (%eax),%eax
   13757:	8b 50 04             	mov    0x4(%eax),%edx
   1375a:	8b 45 08             	mov    0x8(%ebp),%eax
   1375d:	89 10                	mov    %edx,(%eax)
        list->first->pre = (list_node_t*)0;
   1375f:	8b 45 08             	mov    0x8(%ebp),%eax
   13762:	8b 00                	mov    (%eax),%eax
   13764:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    list->size--;
   1376a:	8b 45 08             	mov    0x8(%ebp),%eax
   1376d:	8b 40 08             	mov    0x8(%eax),%eax
   13770:	8d 50 ff             	lea    -0x1(%eax),%edx
   13773:	8b 45 08             	mov    0x8(%ebp),%eax
   13776:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   13779:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1377c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   13783:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13786:	8b 50 04             	mov    0x4(%eax),%edx
   13789:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1378c:	89 10                	mov    %edx,(%eax)
    return ret;
   1378e:	8b 45 f4             	mov    -0xc(%ebp),%eax
 }
   13791:	c9                   	leave  
   13792:	c3                   	ret    

00013793 <list_remove_last>:

list_node_t* list_remove_last(list_t *list) {
   13793:	55                   	push   %ebp
   13794:	89 e5                	mov    %esp,%ebp
   13796:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   13799:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1379d:	75 19                	jne    137b8 <list_remove_last+0x25>
   1379f:	68 5e 49 01 00       	push   $0x1495e
   137a4:	68 d0 49 01 00       	push   $0x149d0
   137a9:	6a 46                	push   $0x46
   137ab:	68 28 49 01 00       	push   $0x14928
   137b0:	e8 53 f5 ff ff       	call   12d08 <pannic>
   137b5:	83 c4 10             	add    $0x10,%esp
     if (list_is_empty(list)) {
   137b8:	83 ec 0c             	sub    $0xc,%esp
   137bb:	ff 75 08             	push   0x8(%ebp)
   137be:	e8 a3 fd ff ff       	call   13566 <list_is_empty>
   137c3:	83 c4 10             	add    $0x10,%esp
   137c6:	85 c0                	test   %eax,%eax
   137c8:	74 07                	je     137d1 <list_remove_last+0x3e>
        return (list_node_t*)0;
   137ca:	b8 00 00 00 00       	mov    $0x0,%eax
   137cf:	eb 75                	jmp    13846 <list_remove_last+0xb3>
    }

    list_node_t *ret = list->last;
   137d1:	8b 45 08             	mov    0x8(%ebp),%eax
   137d4:	8b 40 04             	mov    0x4(%eax),%eax
   137d7:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   137da:	83 ec 0c             	sub    $0xc,%esp
   137dd:	ff 75 08             	push   0x8(%ebp)
   137e0:	e8 b6 fd ff ff       	call   1359b <list_get_size>
   137e5:	83 c4 10             	add    $0x10,%esp
   137e8:	83 f8 01             	cmp    $0x1,%eax
   137eb:	75 17                	jne    13804 <list_remove_last+0x71>
        list->first = list->last = (list_node_t*)0;
   137ed:	8b 45 08             	mov    0x8(%ebp),%eax
   137f0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   137f7:	8b 45 08             	mov    0x8(%ebp),%eax
   137fa:	8b 50 04             	mov    0x4(%eax),%edx
   137fd:	8b 45 08             	mov    0x8(%ebp),%eax
   13800:	89 10                	mov    %edx,(%eax)
   13802:	eb 1b                	jmp    1381f <list_remove_last+0x8c>
    } else {
        list->last = list->last->pre;
   13804:	8b 45 08             	mov    0x8(%ebp),%eax
   13807:	8b 40 04             	mov    0x4(%eax),%eax
   1380a:	8b 10                	mov    (%eax),%edx
   1380c:	8b 45 08             	mov    0x8(%ebp),%eax
   1380f:	89 50 04             	mov    %edx,0x4(%eax)
        list->last->next = (list_node_t*)0;
   13812:	8b 45 08             	mov    0x8(%ebp),%eax
   13815:	8b 40 04             	mov    0x4(%eax),%eax
   13818:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    }

    list->size--;
   1381f:	8b 45 08             	mov    0x8(%ebp),%eax
   13822:	8b 40 08             	mov    0x8(%eax),%eax
   13825:	8d 50 ff             	lea    -0x1(%eax),%edx
   13828:	8b 45 08             	mov    0x8(%ebp),%eax
   1382b:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   1382e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13831:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   13838:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1383b:	8b 50 04             	mov    0x4(%eax),%edx
   1383e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13841:	89 10                	mov    %edx,(%eax)
    return ret;
   13843:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   13846:	c9                   	leave  
   13847:	c3                   	ret    

00013848 <list_remove>:

list_node_t* list_remove(list_t *list, list_node_t *node) {
   13848:	55                   	push   %ebp
   13849:	89 e5                	mov    %esp,%ebp
   1384b:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   1384e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13852:	74 06                	je     1385a <list_remove+0x12>
   13854:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13858:	75 19                	jne    13873 <list_remove+0x2b>
   1385a:	68 f8 48 01 00       	push   $0x148f8
   1385f:	68 e4 49 01 00       	push   $0x149e4
   13864:	6a 5b                	push   $0x5b
   13866:	68 28 49 01 00       	push   $0x14928
   1386b:	e8 98 f4 ff ff       	call   12d08 <pannic>
   13870:	83 c4 10             	add    $0x10,%esp

    if (list_is_empty(list)) {
   13873:	83 ec 0c             	sub    $0xc,%esp
   13876:	ff 75 08             	push   0x8(%ebp)
   13879:	e8 e8 fc ff ff       	call   13566 <list_is_empty>
   1387e:	83 c4 10             	add    $0x10,%esp
   13881:	85 c0                	test   %eax,%eax
   13883:	74 0a                	je     1388f <list_remove+0x47>
        return (list_node_t*)0;
   13885:	b8 00 00 00 00       	mov    $0x0,%eax
   1388a:	e9 80 00 00 00       	jmp    1390f <list_remove+0xc7>
    }

    if (node == list->first) list->first = node->next;
   1388f:	8b 45 08             	mov    0x8(%ebp),%eax
   13892:	8b 00                	mov    (%eax),%eax
   13894:	39 45 0c             	cmp    %eax,0xc(%ebp)
   13897:	75 0b                	jne    138a4 <list_remove+0x5c>
   13899:	8b 45 0c             	mov    0xc(%ebp),%eax
   1389c:	8b 50 04             	mov    0x4(%eax),%edx
   1389f:	8b 45 08             	mov    0x8(%ebp),%eax
   138a2:	89 10                	mov    %edx,(%eax)
    if (node == list->last) list->last = node->pre;
   138a4:	8b 45 08             	mov    0x8(%ebp),%eax
   138a7:	8b 40 04             	mov    0x4(%eax),%eax
   138aa:	39 45 0c             	cmp    %eax,0xc(%ebp)
   138ad:	75 0b                	jne    138ba <list_remove+0x72>
   138af:	8b 45 0c             	mov    0xc(%ebp),%eax
   138b2:	8b 10                	mov    (%eax),%edx
   138b4:	8b 45 08             	mov    0x8(%ebp),%eax
   138b7:	89 50 04             	mov    %edx,0x4(%eax)

    if (node->pre) node->pre->next = node->next;
   138ba:	8b 45 0c             	mov    0xc(%ebp),%eax
   138bd:	8b 00                	mov    (%eax),%eax
   138bf:	85 c0                	test   %eax,%eax
   138c1:	74 0e                	je     138d1 <list_remove+0x89>
   138c3:	8b 45 0c             	mov    0xc(%ebp),%eax
   138c6:	8b 00                	mov    (%eax),%eax
   138c8:	8b 55 0c             	mov    0xc(%ebp),%edx
   138cb:	8b 52 04             	mov    0x4(%edx),%edx
   138ce:	89 50 04             	mov    %edx,0x4(%eax)
    if (node->next) node->next->pre = node->pre;
   138d1:	8b 45 0c             	mov    0xc(%ebp),%eax
   138d4:	8b 40 04             	mov    0x4(%eax),%eax
   138d7:	85 c0                	test   %eax,%eax
   138d9:	74 0d                	je     138e8 <list_remove+0xa0>
   138db:	8b 45 0c             	mov    0xc(%ebp),%eax
   138de:	8b 40 04             	mov    0x4(%eax),%eax
   138e1:	8b 55 0c             	mov    0xc(%ebp),%edx
   138e4:	8b 12                	mov    (%edx),%edx
   138e6:	89 10                	mov    %edx,(%eax)

    node->pre = node->next = (list_node_t*)0;
   138e8:	8b 45 0c             	mov    0xc(%ebp),%eax
   138eb:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   138f2:	8b 45 0c             	mov    0xc(%ebp),%eax
   138f5:	8b 50 04             	mov    0x4(%eax),%edx
   138f8:	8b 45 0c             	mov    0xc(%ebp),%eax
   138fb:	89 10                	mov    %edx,(%eax)
    list->size--;
   138fd:	8b 45 08             	mov    0x8(%ebp),%eax
   13900:	8b 40 08             	mov    0x8(%eax),%eax
   13903:	8d 50 ff             	lea    -0x1(%eax),%edx
   13906:	8b 45 08             	mov    0x8(%ebp),%eax
   13909:	89 50 08             	mov    %edx,0x8(%eax)

    return node;
   1390c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1390f:	c9                   	leave  
   13910:	c3                   	ret    

00013911 <inb>:
static inline uint8_t inb(uint16_t port) {
   13911:	55                   	push   %ebp
   13912:	89 e5                	mov    %esp,%ebp
   13914:	83 ec 14             	sub    $0x14,%esp
   13917:	8b 45 08             	mov    0x8(%ebp),%eax
   1391a:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   1391e:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   13922:	89 c2                	mov    %eax,%edx
   13924:	ec                   	in     (%dx),%al
   13925:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   13928:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   1392c:	c9                   	leave  
   1392d:	c3                   	ret    

0001392e <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   1392e:	55                   	push   %ebp
   1392f:	89 e5                	mov    %esp,%ebp
   13931:	83 ec 08             	sub    $0x8,%esp
   13934:	8b 45 08             	mov    0x8(%ebp),%eax
   13937:	8b 55 0c             	mov    0xc(%ebp),%edx
   1393a:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   1393e:	89 d0                	mov    %edx,%eax
   13940:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   13943:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   13947:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1394b:	ee                   	out    %al,(%dx)
}
   1394c:	90                   	nop
   1394d:	c9                   	leave  
   1394e:	c3                   	ret    

0001394f <log_init>:

/**
 * @brief  初始化串行端口寄存器COM1
 * 
 */
void log_init(void) {
   1394f:	55                   	push   %ebp
   13950:	89 e5                	mov    %esp,%ebp
   13952:	83 ec 08             	sub    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   13955:	6a 00                	push   $0x0
   13957:	68 f9 03 00 00       	push   $0x3f9
   1395c:	e8 cd ff ff ff       	call   1392e <outb>
   13961:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   13964:	68 80 00 00 00       	push   $0x80
   13969:	68 fb 03 00 00       	push   $0x3fb
   1396e:	e8 bb ff ff ff       	call   1392e <outb>
   13973:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   13976:	6a 03                	push   $0x3
   13978:	68 f8 03 00 00       	push   $0x3f8
   1397d:	e8 ac ff ff ff       	call   1392e <outb>
   13982:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   13985:	6a 00                	push   $0x0
   13987:	68 f9 03 00 00       	push   $0x3f9
   1398c:	e8 9d ff ff ff       	call   1392e <outb>
   13991:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   13994:	6a 03                	push   $0x3
   13996:	68 fb 03 00 00       	push   $0x3fb
   1399b:	e8 8e ff ff ff       	call   1392e <outb>
   139a0:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0xc7);
   139a3:	68 c7 00 00 00       	push   $0xc7
   139a8:	68 fa 03 00 00       	push   $0x3fa
   139ad:	e8 7c ff ff ff       	call   1392e <outb>
   139b2:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0f);
   139b5:	6a 0f                	push   $0xf
   139b7:	68 fc 03 00 00       	push   $0x3fc
   139bc:	e8 6d ff ff ff       	call   1392e <outb>
   139c1:	83 c4 08             	add    $0x8,%esp

    //初始化互斥锁
    mutex_init(&mutex);
   139c4:	83 ec 0c             	sub    $0xc,%esp
   139c7:	68 04 0a 03 00       	push   $0x30a04
   139cc:	e8 22 ec ff ff       	call   125f3 <mutex_init>
   139d1:	83 c4 10             	add    $0x10,%esp
}
   139d4:	90                   	nop
   139d5:	c9                   	leave  
   139d6:	c3                   	ret    

000139d7 <log_printf>:
 * @brief  格式化输出到串口
 * 
 * @param formate 
 * @param ... 
 */
void log_printf(const char *formate, ...) {
   139d7:	55                   	push   %ebp
   139d8:	89 e5                	mov    %esp,%ebp
   139da:	81 ec 98 00 00 00    	sub    $0x98,%esp
    //1.设置字符缓冲区
    char str_buf[128];
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   139e0:	83 ec 04             	sub    $0x4,%esp
   139e3:	68 80 00 00 00       	push   $0x80
   139e8:	6a 00                	push   $0x0
   139ea:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   139f0:	50                   	push   %eax
   139f1:	e8 14 f8 ff ff       	call   1320a <kernel_memset>
   139f6:	83 c4 10             	add    $0x10,%esp
    
    //2.获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   139f9:	8d 45 0c             	lea    0xc(%ebp),%eax
   139fc:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, formate, args);
   13a02:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   13a08:	83 ec 04             	sub    $0x4,%esp
   13a0b:	50                   	push   %eax
   13a0c:	ff 75 08             	push   0x8(%ebp)
   13a0f:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   13a15:	50                   	push   %eax
   13a16:	e8 d8 f8 ff ff       	call   132f3 <kernel_vsprintf>
   13a1b:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    const char *p = str_buf;
   13a1e:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   13a24:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将以下资源放入临界资源包含区，防止在运行时发生进程切换（cpu关中断）
    mutex_lock(&mutex); //TODO:加锁
   13a27:	83 ec 0c             	sub    $0xc,%esp
   13a2a:	68 04 0a 03 00       	push   $0x30a04
   13a2f:	e8 0c ec ff ff       	call   12640 <mutex_lock>
   13a34:	83 c4 10             	add    $0x10,%esp

    //3.将字符串输出到串口
    while (*p != '\0') {
   13a37:	eb 57                	jmp    13a90 <log_printf+0xb9>
        //4.判断串口是否正在忙碌，是则阻塞等待
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0);
   13a39:	90                   	nop
   13a3a:	83 ec 0c             	sub    $0xc,%esp
   13a3d:	68 fd 03 00 00       	push   $0x3fd
   13a42:	e8 ca fe ff ff       	call   13911 <inb>
   13a47:	83 c4 10             	add    $0x10,%esp
   13a4a:	0f b6 c0             	movzbl %al,%eax
   13a4d:	83 e0 40             	and    $0x40,%eax
   13a50:	85 c0                	test   %eax,%eax
   13a52:	74 e6                	je     13a3a <log_printf+0x63>

        if (*p == '\n') outb(COM1_PORT, '\r');
   13a54:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13a57:	0f b6 00             	movzbl (%eax),%eax
   13a5a:	3c 0a                	cmp    $0xa,%al
   13a5c:	75 12                	jne    13a70 <log_printf+0x99>
   13a5e:	83 ec 08             	sub    $0x8,%esp
   13a61:	6a 0d                	push   $0xd
   13a63:	68 f8 03 00 00       	push   $0x3f8
   13a68:	e8 c1 fe ff ff       	call   1392e <outb>
   13a6d:	83 c4 10             	add    $0x10,%esp
        
        outb(COM1_PORT, *(p++));
   13a70:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13a73:	8d 50 01             	lea    0x1(%eax),%edx
   13a76:	89 55 f4             	mov    %edx,-0xc(%ebp)
   13a79:	0f b6 00             	movzbl (%eax),%eax
   13a7c:	0f b6 c0             	movzbl %al,%eax
   13a7f:	83 ec 08             	sub    $0x8,%esp
   13a82:	50                   	push   %eax
   13a83:	68 f8 03 00 00       	push   $0x3f8
   13a88:	e8 a1 fe ff ff       	call   1392e <outb>
   13a8d:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0') {
   13a90:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13a93:	0f b6 00             	movzbl (%eax),%eax
   13a96:	84 c0                	test   %al,%al
   13a98:	75 9f                	jne    13a39 <log_printf+0x62>
    }
    
    //5.换行
    outb(COM1_PORT, '\r');
   13a9a:	83 ec 08             	sub    $0x8,%esp
   13a9d:	6a 0d                	push   $0xd
   13a9f:	68 f8 03 00 00       	push   $0x3f8
   13aa4:	e8 85 fe ff ff       	call   1392e <outb>
   13aa9:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   13aac:	83 ec 08             	sub    $0x8,%esp
   13aaf:	6a 0a                	push   $0xa
   13ab1:	68 f8 03 00 00       	push   $0x3f8
   13ab6:	e8 73 fe ff ff       	call   1392e <outb>
   13abb:	83 c4 10             	add    $0x10,%esp

    //执行完毕，将资源离开临界资源保护区，(cpu开中断)
    mutex_unlock(&mutex); //TODO:解锁
   13abe:	83 ec 0c             	sub    $0xc,%esp
   13ac1:	68 04 0a 03 00       	push   $0x30a04
   13ac6:	e8 06 ec ff ff       	call   126d1 <mutex_unlock>
   13acb:	83 c4 10             	add    $0x10,%esp
   13ace:	90                   	nop
   13acf:	c9                   	leave  
   13ad0:	c3                   	ret    

Disassembly of section .first_task:

80000000 <first_task_entry>:
//第一个任务进程入口函数
first_task_entry:
    //iret指令返回后，将之前压入的 ss,esp,eflags,cs,eip 寄存器值返回给对应寄存器，
	//由于cpu从0特权级切换到了3特权级，而之前其余的段寄存器都是0特权级，不能供3特权级使用，
	//所以cpu将其余寄存器置零，这里直接用ss寄存器再初始化其余段寄存器即可
	mov %ss, %ax
80000000:	66 8c d0             	mov    %ss,%ax
	mov %ax, %ds
80000003:	8e d8                	mov    %eax,%ds
	mov %ax, %es
80000005:	8e c0                	mov    %eax,%es
	mov %ax, %fs
80000007:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
80000009:	8e e8                	mov    %eax,%gs

    //因为cs寄存器已由操作系统分配，所以直接跳转即可
8000000b:	e9 d4 00 00 00       	jmp    800000e4 <first_main>

80000010 <sys_call>:
}syscall_args_t;




static inline int sys_call(syscall_args_t *args) {
80000010:	55                   	push   %ebp
80000011:	89 e5                	mov    %esp,%ebp
80000013:	57                   	push   %edi
80000014:	56                   	push   %esi
80000015:	53                   	push   %ebx
80000016:	83 ec 10             	sub    $0x10,%esp
    // 传入远跳转需要的参数, 即cs = selector, eip = offset 
    //为调用门选择子赋予0特权级,调用门的 cpl 和 RPL <= 系统调用段描述符的DPL
    //门描述符中目标选择子的 CPL <= 门描述符的 DPL
    uint32_t addr[] = {0, SYSCALL_SELECTOR | 0};  
80000019:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
80000020:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%ebp)
        "push %[arg1]\n\t"
        "push %[arg0]\n\t"
        "push %[id]\n\t"
        "lcalll *(%[addr])\n\t"
        :"=a"(ret)
        :[arg3]"r"(args->arg3), 
80000027:	8b 45 08             	mov    0x8(%ebp),%eax
8000002a:	8b 40 10             	mov    0x10(%eax),%eax
         [arg2]"r"(args->arg2), 
8000002d:	8b 55 08             	mov    0x8(%ebp),%edx
80000030:	8b 52 0c             	mov    0xc(%edx),%edx
         [arg1]"r"(args->arg1),
80000033:	8b 4d 08             	mov    0x8(%ebp),%ecx
80000036:	8b 49 08             	mov    0x8(%ecx),%ecx
         [arg0]"r"(args->arg0), 
80000039:	8b 5d 08             	mov    0x8(%ebp),%ebx
8000003c:	8b 5b 04             	mov    0x4(%ebx),%ebx
         [id]"r"(args->id), 
8000003f:	8b 75 08             	mov    0x8(%ebp),%esi
80000042:	8b 36                	mov    (%esi),%esi
     __asm__ __volatile__(
80000044:	8d 7d e8             	lea    -0x18(%ebp),%edi
80000047:	50                   	push   %eax
80000048:	52                   	push   %edx
80000049:	51                   	push   %ecx
8000004a:	53                   	push   %ebx
8000004b:	56                   	push   %esi
8000004c:	ff 1f                	lcall  *(%edi)
8000004e:	89 45 f0             	mov    %eax,-0x10(%ebp)
         [addr]"r"(addr)
    );

    return ret;
80000051:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
80000054:	83 c4 10             	add    $0x10,%esp
80000057:	5b                   	pop    %ebx
80000058:	5e                   	pop    %esi
80000059:	5f                   	pop    %edi
8000005a:	5d                   	pop    %ebp
8000005b:	c3                   	ret    

8000005c <msleep>:
/**
 * @brief 以ms为单位进行延时
 * 
 * @param ms 
 */
static inline void msleep(int ms) {
8000005c:	55                   	push   %ebp
8000005d:	89 e5                	mov    %esp,%ebp
8000005f:	83 ec 20             	sub    $0x20,%esp
    if (ms <= 0) return;
80000062:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
80000066:	7e 1b                	jle    80000083 <msleep+0x27>

    syscall_args_t args;
    args.id = SYS_sleep;
80000068:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    args.arg0 = ms;
8000006f:	8b 45 08             	mov    0x8(%ebp),%eax
80000072:	89 45 f0             	mov    %eax,-0x10(%ebp)

    sys_call(&args);
80000075:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000078:	50                   	push   %eax
80000079:	e8 92 ff ff ff       	call   80000010 <sys_call>
8000007e:	83 c4 04             	add    $0x4,%esp
80000081:	eb 01                	jmp    80000084 <msleep+0x28>
    if (ms <= 0) return;
80000083:	90                   	nop

}
80000084:	c9                   	leave  
80000085:	c3                   	ret    

80000086 <getpid>:
/**
 * @brief 获取用户进程id
 * 
 * @return int 
 */
static inline int getpid(void) {
80000086:	55                   	push   %ebp
80000087:	89 e5                	mov    %esp,%ebp
80000089:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_getpid;
8000008c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)

    return sys_call(&args);
80000093:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000096:	50                   	push   %eax
80000097:	e8 74 ff ff ff       	call   80000010 <sys_call>
8000009c:	83 c4 04             	add    $0x4,%esp
}
8000009f:	c9                   	leave  
800000a0:	c3                   	ret    

800000a1 <print_msg>:

static inline void print_msg(const char *fmt, int arg) {
800000a1:	55                   	push   %ebp
800000a2:	89 e5                	mov    %esp,%ebp
800000a4:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_printmsg;
800000a7:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
    args.arg0 = (int)fmt;
800000ae:	8b 45 08             	mov    0x8(%ebp),%eax
800000b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = arg;
800000b4:	8b 45 0c             	mov    0xc(%ebp),%eax
800000b7:	89 45 f4             	mov    %eax,-0xc(%ebp)

    sys_call(&args);
800000ba:	8d 45 ec             	lea    -0x14(%ebp),%eax
800000bd:	50                   	push   %eax
800000be:	e8 4d ff ff ff       	call   80000010 <sys_call>
800000c3:	83 c4 04             	add    $0x4,%esp
}
800000c6:	90                   	nop
800000c7:	c9                   	leave  
800000c8:	c3                   	ret    

800000c9 <fork>:

static inline int fork (void) {
800000c9:	55                   	push   %ebp
800000ca:	89 e5                	mov    %esp,%ebp
800000cc:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fork;
800000cf:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)

    return sys_call(&args);
800000d6:	8d 45 ec             	lea    -0x14(%ebp),%eax
800000d9:	50                   	push   %eax
800000da:	e8 31 ff ff ff       	call   80000010 <sys_call>
800000df:	83 c4 04             	add    $0x4,%esp
}
800000e2:	c9                   	leave  
800000e3:	c3                   	ret    

800000e4 <first_main>:

#include "tools/log.h"
#include "core/task.h"
#include  "applib/lib_syscall.h"

int first_main(void) {
800000e4:	55                   	push   %ebp
800000e5:	89 e5                	mov    %esp,%ebp
800000e7:	83 ec 10             	sub    $0x10,%esp
    int pid = getpid();
800000ea:	e8 97 ff ff ff       	call   80000086 <getpid>
800000ef:	89 45 fc             	mov    %eax,-0x4(%ebp)

    int cpid = fork();
800000f2:	e8 d2 ff ff ff       	call   800000c9 <fork>
800000f7:	89 45 f8             	mov    %eax,-0x8(%ebp)

    for (;;) {
        print_msg("task id=%d", pid);
800000fa:	ff 75 fc             	push   -0x4(%ebp)
800000fd:	68 19 01 00 80       	push   $0x80000119
80000102:	e8 9a ff ff ff       	call   800000a1 <print_msg>
80000107:	83 c4 08             	add    $0x8,%esp
        msleep(1000);
8000010a:	68 e8 03 00 00       	push   $0x3e8
8000010f:	e8 48 ff ff ff       	call   8000005c <msleep>
80000114:	83 c4 04             	add    $0x4,%esp
        print_msg("task id=%d", pid);
80000117:	eb e1                	jmp    800000fa <first_main+0x16>
80000119:	74 61                	je     8000017c <first_main+0x98>
8000011b:	73 6b                	jae    80000188 <first_main+0xa4>
8000011d:	20 69 64             	and    %ch,0x64(%ecx)
80000120:	3d                   	.byte 0x3d
80000121:	25                   	.byte 0x25
80000122:	64                   	fs
	...
