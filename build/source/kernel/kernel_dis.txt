
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf:     file format elf32-i386
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000335 memsz 0x00023340 flags rwx
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000311  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000024  00010311  00010311  00001311  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .bss          00023000  00010340  00010340  00001335  2**5
                  ALLOC
  3 .debug_line   000002c9  00000000  00000000  00001335  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  4 .debug_line_str 000001c3  00000000  00000000  000015fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_info   000007c3  00000000  00000000  000017c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_abbrev 00000397  00000000  00000000  00001f84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_aranges 00000080  00000000  00000000  00002320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_str    00000337  00000000  00000000  000023a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .comment      0000002b  00000000  00000000  000026d7  2**0
                  CONTENTS, READONLY
 10 .debug_frame  000001ac  00000000  00000000  00002704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010012 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 gdt.c
00010064 l     F .text	00000028 lgdt
00010340 l     O .bss	00010000 gdt_table
0001008c l     F .text	000000bf segment_desc_set
00000000 l    df *ABS*	00000000 idt.c
000101bb l     F .text	00000028 lidt
00020340 l     O .bss	00000800 idt_table
000101e3 l     F .text	00000005 do_default_handler
00010214 l     F .text	00000047 gate_desc_set
0001025b l     F .text	0000003a idt_install
00000000 l    df *ABS*	00000000 init.c
00020b40 l     O .bss	00010000 gdt_table
00030b40 l     O .bss	00000800 idt_table
000102f9 g     F .text	00000018 init_main
0001002a g       .text	00000000 exception_handler_unknown
000101fe g     F .text	00000016 do_handler_divider
0001014b g     F .text	00000070 gdt_init
00031340 g     O .bss	00002000 stack
00010295 g     F .text	00000051 idt_init
00010047 g       .text	00000000 exception_handler_divider
000102e6 g     F .text	00000013 kernel_init
00010000 g       .text	00000000 _start
000101e8 g     F .text	00000016 do_handler_unknown



Disassembly of section .text:

00010000 <_start>:
*            [&boot_info]
*    esp ->  [返回地址]
*   所以要想访问到&boot_info，则只需从当前esp的位置偏移+4字节即可
*/
_start:
    mov %esp, %ebp      //栈空间最好只用ebp来进行偏移访问
   10000:	89 e5                	mov    %esp,%ebp
    mov 0x4(%ebp), %eax //将&boot_info的值存入eax中
   10002:	8b 45 04             	mov    0x4(%ebp),%eax

    push %eax           //外部函数将参数压入栈中，再进行函数调用
   10005:	50                   	push   %eax
    call kernel_init    //调用内核初始化函数
   10006:	e8 db 02 00 00       	call   102e6 <kernel_init>

    //完成内核初始化后，进行直接跳转，以替换cs寄存器中临时的内核代码段的选择子为此时内存中真正的内核代码段选择子
    //cs:KERNEL_SELECTOR_CS, ip:gdt_reload
    jmp $KERNEL_SELECTOR_CS, $gdt_reload    
   1000b:	ea 12 00 01 00 08 00 	ljmp   $0x8,$0x10012

00010012 <gdt_reload>:

gdt_reload:
    //替换其他段寄存器中临时的内核数据段的选择子为此时内存中真正的内核数据段的选择子
    mov $KERNEL_SELECTOR_DS, %ax
   10012:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10016:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10018:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001a:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001c:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001e:	8e e8                	mov    %eax,%gs

    //重新指定栈空间位置，不再使用0~0x7c00这部分空间
    //stack段已在下面预留了KERNEL_STACK_SIZE的空间大小，直接将最高地址赋值给esp，esp便可使用这片空间
    mov $(stack + KERNEL_STACK_SIZE), %esp
   10020:	bc 40 33 03 00       	mov    $0x33340,%esp

    //继续初始化内核
    //TODO:后序再来说明该函数的作用
    jmp init_main 
   10025:	e9 cf 02 00 00       	jmp    102f9 <init_main>

0001002a <exception_handler_unknown>:

//宏结束标志
.endm

//使用定义的异常宏
exception_handler unknown, -1, 0    //未知异常
   1002a:	6a 00                	push   $0x0
   1002c:	6a ff                	push   $0xffffffff
   1002e:	60                   	pusha  
   1002f:	1e                   	push   %ds
   10030:	06                   	push   %es
   10031:	0f a0                	push   %fs
   10033:	0f a8                	push   %gs
   10035:	54                   	push   %esp
   10036:	e8 ad 01 00 00       	call   101e8 <do_handler_unknown>
   1003b:	5c                   	pop    %esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:

   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 a6 01 00 00       	call   101fe <do_handler_divider>
   10058:	5c                   	pop    %esp
   10059:	0f a9                	pop    %gs
   1005b:	0f a1                	pop    %fs
   1005d:	07                   	pop    %es
   1005e:	1f                   	pop    %ds
   1005f:	61                   	popa   
   10060:	83 c4 08             	add    $0x8,%esp
   10063:	cf                   	iret   

00010064 <lgdt>:
 * @brief  加载全局描述符表
 *
 * @param start 加载到内存中的位置
 * @param size 所占内存空间
 */
static inline void lgdt(uint32_t start, uint32_t size) {
   10064:	55                   	push   %ebp
   10065:	89 e5                	mov    %esp,%ebp
   10067:	83 ec 10             	sub    $0x10,%esp
    uint16_t limit;       // GDT的在内存中的逻辑边界
    uint16_t start15_0;   // GDT地址的低16位
    uint16_t start31_16;  // GDT地址的高16位
  } gdt;

  gdt.start31_16 = (start >> 16) & 0xffff;    // 初始化GDT地址的高16位
   1006a:	8b 45 08             	mov    0x8(%ebp),%eax
   1006d:	c1 e8 10             	shr    $0x10,%eax
   10070:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  gdt.start15_0 = start & 0xffff;  // 初始化GDT地址的低16位
   10074:	8b 45 08             	mov    0x8(%ebp),%eax
   10077:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  gdt.limit =
      size -
   1007b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1007e:	83 e8 01             	sub    $0x1,%eax
  gdt.limit =
   10081:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
      1;  // 初始化GDT的在内存中的逻辑边界，根据首地址进行偏移所以是size - 1

  __asm__ __volatile__(
   10085:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
      "lgdt %[g]"
      :
      : [g] "m"(gdt));  //"m"表示指令直接作用于该内存位置
                        // 即此处表示lgdt直接加载gdt所在的内存区域的内容
}
   10089:	90                   	nop
   1008a:	c9                   	leave  
   1008b:	c3                   	ret    

0001008c <segment_desc_set>:
 *                 即2的13次方个段，也就是8192
 * @param base 该段在内存中的真实段基址
 * @param limit 该段的段界限，是一个偏移量，表示段中最大的偏移界限
 * @param attr 该段的属性位
 */
static void segment_desc_set(uint16_t selector,  uint32_t base, uint32_t limit, uint16_t attr) {
   1008c:	55                   	push   %ebp
   1008d:	89 e5                	mov    %esp,%ebp
   1008f:	83 ec 18             	sub    $0x18,%esp
   10092:	8b 55 08             	mov    0x8(%ebp),%edx
   10095:	8b 45 14             	mov    0x14(%ebp),%eax
   10098:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
   1009c:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    //1. 获取该段描述符在内存中的起始地址，selector >> 3 取出3~15位才是其在全局描述符中的下标
    segment_desc_t *desc = gdt_table + (selector >> 3);
   100a0:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   100a4:	66 c1 e8 03          	shr    $0x3,%ax
   100a8:	0f b7 c0             	movzwl %ax,%eax
   100ab:	c1 e0 03             	shl    $0x3,%eax
   100ae:	05 40 03 01 00       	add    $0x10340,%eax
   100b3:	89 45 fc             	mov    %eax,-0x4(%ebp)

    //2. 设置段基地址
    desc->base15_0 = (uint16_t)base;
   100b6:	8b 45 0c             	mov    0xc(%ebp),%eax
   100b9:	89 c2                	mov    %eax,%edx
   100bb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   100be:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (uint8_t)(base >> 16);
   100c2:	8b 45 0c             	mov    0xc(%ebp),%eax
   100c5:	c1 e8 10             	shr    $0x10,%eax
   100c8:	89 c2                	mov    %eax,%edx
   100ca:	8b 45 fc             	mov    -0x4(%ebp),%eax
   100cd:	88 50 04             	mov    %dl,0x4(%eax)
    desc->base31_24 = (uint8_t)(base >> 24);
   100d0:	8b 45 0c             	mov    0xc(%ebp),%eax
   100d3:	c1 e8 18             	shr    $0x18,%eax
   100d6:	89 c2                	mov    %eax,%edx
   100d8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   100db:	88 50 07             	mov    %dl,0x7(%eax)

    //3. 设置段界限
    if (limit > 0xfffff) { //limit大于了20位能表示的最大值
   100de:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   100e5:	76 1d                	jbe    10104 <segment_desc_set+0x78>
        //将limit的粒度设置为 4kb，即将属性位G置1
        desc->attr |= 0x8000;
   100e7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   100ea:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   100ee:	66 0d 00 80          	or     $0x8000,%ax
   100f2:	89 c2                	mov    %eax,%edx
   100f4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   100f7:	66 89 50 05          	mov    %dx,0x5(%eax)

        //将limit改成以 4kb 为单位
        limit /= (4 * 1024);
   100fb:	8b 45 10             	mov    0x10(%ebp),%eax
   100fe:	c1 e8 0c             	shr    $0xc,%eax
   10101:	89 45 10             	mov    %eax,0x10(%ebp)

    }
    desc->limit15_0 = (uint16_t)limit;
   10104:	8b 45 10             	mov    0x10(%ebp),%eax
   10107:	89 c2                	mov    %eax,%edx
   10109:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1010c:	66 89 10             	mov    %dx,(%eax)
    desc->attr |= ((uint16_t)(limit >> 8) & 0x0f00); //将limit高4位赋值到attr的8~11位(段界限的高4位)
   1010f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10112:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10116:	89 c2                	mov    %eax,%edx
   10118:	8b 45 10             	mov    0x10(%ebp),%eax
   1011b:	c1 e8 08             	shr    $0x8,%eax
   1011e:	66 25 00 0f          	and    $0xf00,%ax
   10122:	09 d0                	or     %edx,%eax
   10124:	89 c2                	mov    %eax,%edx
   10126:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10129:	66 89 50 05          	mov    %dx,0x5(%eax)

    //4.设置属性位
    desc->attr |= attr & 0xf0ff;
   1012d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10130:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10134:	89 c2                	mov    %eax,%edx
   10136:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   1013a:	80 e4 f0             	and    $0xf0,%ah
   1013d:	09 d0                	or     %edx,%eax
   1013f:	89 c2                	mov    %eax,%edx
   10141:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10144:	66 89 50 05          	mov    %dx,0x5(%eax)


}
   10148:	90                   	nop
   10149:	c9                   	leave  
   1014a:	c3                   	ret    

0001014b <gdt_init>:

/**
 * @brief  初始化GDT
 * 
 */
void gdt_init(void) {
   1014b:	55                   	push   %ebp
   1014c:	89 e5                	mov    %esp,%ebp
   1014e:	83 ec 10             	sub    $0x10,%esp
    //TODO:暂时将所有段都初始化为0
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   10151:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10158:	eb 1c                	jmp    10176 <gdt_init+0x2b>
        segment_desc_set(i << 3, 0, 0, 0);
   1015a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1015d:	c1 e0 03             	shl    $0x3,%eax
   10160:	0f b7 c0             	movzwl %ax,%eax
   10163:	6a 00                	push   $0x0
   10165:	6a 00                	push   $0x0
   10167:	6a 00                	push   $0x0
   10169:	50                   	push   %eax
   1016a:	e8 1d ff ff ff       	call   1008c <segment_desc_set>
   1016f:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   10172:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10176:	81 7d fc ff 1f 00 00 	cmpl   $0x1fff,-0x4(%ebp)
   1017d:	7e db                	jle    1015a <gdt_init+0xf>
    }

    //使用平坦模型，即段基址为0, 段界限直接用最大值，界限粒度为4kb，即段大小为4GB
    //1.设置内核的数据段
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff,
   1017f:	68 92 40 00 00       	push   $0x4092
   10184:	6a ff                	push   $0xffffffff
   10186:	6a 00                	push   $0x0
   10188:	6a 10                	push   $0x10
   1018a:	e8 fd fe ff ff       	call   1008c <segment_desc_set>
   1018f:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL | 
                    SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    //2.设置内核的代码段
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff,
   10192:	68 9a 40 00 00       	push   $0x409a
   10197:	6a ff                	push   $0xffffffff
   10199:	6a 00                	push   $0x0
   1019b:	6a 08                	push   $0x8
   1019d:	e8 ea fe ff ff       	call   1008c <segment_desc_set>
   101a2:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL |
                    SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    //3.加载新的GDT表
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   101a5:	b8 40 03 01 00       	mov    $0x10340,%eax
   101aa:	68 00 00 01 00       	push   $0x10000
   101af:	50                   	push   %eax
   101b0:	e8 af fe ff ff       	call   10064 <lgdt>
   101b5:	83 c4 08             	add    $0x8,%esp
}
   101b8:	90                   	nop
   101b9:	c9                   	leave  
   101ba:	c3                   	ret    

000101bb <lidt>:
 * @brief  加载中断描述符表
 *
 * @param start 加载到内存中的位置
 * @param size 所占内存空间
 */
static inline void lidt(uint32_t start, uint32_t size) {
   101bb:	55                   	push   %ebp
   101bc:	89 e5                	mov    %esp,%ebp
   101be:	83 ec 10             	sub    $0x10,%esp
    uint16_t limit;     // IDT的在内存中的逻辑边界
    uint16_t start15_0; // IDT地址的低16位
    uint16_t start31_16;// IDT地址的高16位
  } idt;

  idt.start31_16 = (start >> 16) & 0xffff;  // 初始化IDT地址的高16位
   101c1:	8b 45 08             	mov    0x8(%ebp),%eax
   101c4:	c1 e8 10             	shr    $0x10,%eax
   101c7:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  idt.start15_0 = start & 0xffff;           // 初始化IDT地址的低16位
   101cb:	8b 45 08             	mov    0x8(%ebp),%eax
   101ce:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  idt.limit = size - 1;                     // 初始化IDT的在内存中的逻辑边界，根据首地址进行偏移所以是size - 1
   101d2:	8b 45 0c             	mov    0xc(%ebp),%eax
   101d5:	83 e8 01             	sub    $0x1,%eax
   101d8:	66 89 45 fa          	mov    %ax,-0x6(%ebp)

  __asm__ __volatile__(
   101dc:	0f 01 5d fa          	lidtl  -0x6(%ebp)
      "lidt %[g]"
      :
      : [g] "m"(idt));  //"m"表示指令直接作用于该内存位置
                        // 即此处表示lidt直接加载idt所在的内存区域的内容
}
   101e0:	90                   	nop
   101e1:	c9                   	leave  
   101e2:	c3                   	ret    

000101e3 <do_default_handler>:
 * @brief  默认的异常处理函数
 * 
 * @param message 异常信息
 * @param fram  异常发生后压入的寄存器信息以及错误代码所组成的栈帧 
 */
static void do_default_handler(const exception_frame_t *frame, const char *message) {
   101e3:	55                   	push   %ebp
   101e4:	89 e5                	mov    %esp,%ebp
  for (;;) {}
   101e6:	eb fe                	jmp    101e6 <do_default_handler+0x3>

000101e8 <do_handler_unknown>:

/**
 * @brief   对没有针对性处理程序的异常进行处理
 * @param frame 异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
void do_handler_unknown(const exception_frame_t *frame) {
   101e8:	55                   	push   %ebp
   101e9:	89 e5                	mov    %esp,%ebp
  do_default_handler(frame, "unknown exception");
   101eb:	68 11 03 01 00       	push   $0x10311
   101f0:	ff 75 08             	push   0x8(%ebp)
   101f3:	e8 eb ff ff ff       	call   101e3 <do_default_handler>
   101f8:	83 c4 08             	add    $0x8,%esp

}
   101fb:	90                   	nop
   101fc:	c9                   	leave  
   101fd:	c3                   	ret    

000101fe <do_handler_divider>:
/**
 * @brief  除0异常
 * 
 * @param frame 异常栈帧
 */
void do_handler_divider (exception_frame_t *frame) {
   101fe:	55                   	push   %ebp
   101ff:	89 e5                	mov    %esp,%ebp
  do_default_handler(frame, "divider exception");
   10201:	68 23 03 01 00       	push   $0x10323
   10206:	ff 75 08             	push   0x8(%ebp)
   10209:	e8 d5 ff ff ff       	call   101e3 <do_default_handler>
   1020e:	83 c4 08             	add    $0x8,%esp
}
   10211:	90                   	nop
   10212:	c9                   	leave  
   10213:	c3                   	ret    

00010214 <gate_desc_set>:
 * @param selector 中断门对应的处理程序所在的段的选择子
 * @param offset 中段门对应的处理程序相对于所在段的偏移量
 * @param attr 中段门的属性
 */
static void gate_desc_set(gate_desc_t *desc, uint16_t selector, uint32_t offset,
                   uint16_t attr) {
   10214:	55                   	push   %ebp
   10215:	89 e5                	mov    %esp,%ebp
   10217:	83 ec 08             	sub    $0x8,%esp
   1021a:	8b 55 0c             	mov    0xc(%ebp),%edx
   1021d:	8b 45 14             	mov    0x14(%ebp),%eax
   10220:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10224:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
  // 1.初始化偏移量
  desc->offset15_0 = offset & 0xffff;
   10228:	8b 45 10             	mov    0x10(%ebp),%eax
   1022b:	89 c2                	mov    %eax,%edx
   1022d:	8b 45 08             	mov    0x8(%ebp),%eax
   10230:	66 89 10             	mov    %dx,(%eax)
  desc->offset31_16 = (offset >> 16) & 0xffff;
   10233:	8b 45 10             	mov    0x10(%ebp),%eax
   10236:	c1 e8 10             	shr    $0x10,%eax
   10239:	89 c2                	mov    %eax,%edx
   1023b:	8b 45 08             	mov    0x8(%ebp),%eax
   1023e:	66 89 50 06          	mov    %dx,0x6(%eax)

  // 2.初始化选择子
  desc->selector = selector;
   10242:	8b 45 08             	mov    0x8(%ebp),%eax
   10245:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10249:	66 89 50 02          	mov    %dx,0x2(%eax)

  // 3.初始化属性位
  desc->attr = attr;
   1024d:	8b 45 08             	mov    0x8(%ebp),%eax
   10250:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   10254:	66 89 50 04          	mov    %dx,0x4(%eax)
}
   10258:	90                   	nop
   10259:	c9                   	leave  
   1025a:	c3                   	ret    

0001025b <idt_install>:
 * 
 * @param idt_num 异常的下标
 * @param handler 异常处理程序的偏移地址
 * @return int 成功返回 0 失败放回 -1
 */
static int idt_install(int idt_num, idt_handler_t handler) {
   1025b:	55                   	push   %ebp
   1025c:	89 e5                	mov    %esp,%ebp
  //1.判断IDT下标是否越界
  if (idt_num >= IDT_TABLE_SIZE) return -1;
   1025e:	81 7d 08 ff 00 00 00 	cmpl   $0xff,0x8(%ebp)
   10265:	7e 07                	jle    1026e <idt_install+0x13>
   10267:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1026c:	eb 25                	jmp    10293 <idt_install+0x38>

  //2.在IDT表中设置下标为 idt_num 的中断门
  gate_desc_set(idt_table + idt_num, KERNEL_SELECTOR_CS, (uint32_t)handler,
   1026e:	8b 45 0c             	mov    0xc(%ebp),%eax
   10271:	8b 55 08             	mov    0x8(%ebp),%edx
   10274:	c1 e2 03             	shl    $0x3,%edx
   10277:	81 c2 40 03 02 00    	add    $0x20340,%edx
   1027d:	68 00 8e 00 00       	push   $0x8e00
   10282:	50                   	push   %eax
   10283:	6a 08                	push   $0x8
   10285:	52                   	push   %edx
   10286:	e8 89 ff ff ff       	call   10214 <gate_desc_set>
   1028b:	83 c4 10             	add    $0x10,%esp
                GATE_TYPE_INT | GATE_ATTR_P | GATE_ATTR_DPL_0);

  return 0;
   1028e:	b8 00 00 00 00       	mov    $0x0,%eax

}
   10293:	c9                   	leave  
   10294:	c3                   	ret    

00010295 <idt_init>:

/**
 * @brief  初始化中断向量表
 * 
 */
void idt_init(void) {
   10295:	55                   	push   %ebp
   10296:	89 e5                	mov    %esp,%ebp
   10298:	83 ec 10             	sub    $0x10,%esp
  // 1.初始化IDT中的各个中断门(未知异常类型)
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   1029b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   102a2:	eb 14                	jmp    102b8 <idt_init+0x23>
   idt_install(i, (idt_handler_t)exception_handler_unknown);
   102a4:	68 2a 00 01 00       	push   $0x1002a
   102a9:	ff 75 fc             	push   -0x4(%ebp)
   102ac:	e8 aa ff ff ff       	call   1025b <idt_install>
   102b1:	83 c4 08             	add    $0x8,%esp
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   102b4:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   102b8:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   102bf:	7e e3                	jle    102a4 <idt_init+0xf>
  }

  //2.绑定异常中断向量表中对应下标的中断门的处理函数
  idt_install(EXC_DIVIDER, (idt_handler_t)exception_handler_divider);
   102c1:	68 47 00 01 00       	push   $0x10047
   102c6:	6a 00                	push   $0x0
   102c8:	e8 8e ff ff ff       	call   1025b <idt_install>
   102cd:	83 c4 08             	add    $0x8,%esp

  //3.加载IDT
  lidt((uint32_t)idt_table, sizeof(idt_table));
   102d0:	b8 40 03 02 00       	mov    $0x20340,%eax
   102d5:	68 00 08 00 00       	push   $0x800
   102da:	50                   	push   %eax
   102db:	e8 db fe ff ff       	call   101bb <lidt>
   102e0:	83 c4 08             	add    $0x8,%esp
}
   102e3:	90                   	nop
   102e4:	c9                   	leave  
   102e5:	c3                   	ret    

000102e6 <kernel_init>:

/**
 * @brief  对内核进行初始化操作
 * 
 */
void kernel_init(boot_info_t* boot_info) {
   102e6:	55                   	push   %ebp
   102e7:	89 e5                	mov    %esp,%ebp
   102e9:	83 ec 08             	sub    $0x8,%esp
    //1.初始化并重新加载GDT表
    gdt_init();
   102ec:	e8 5a fe ff ff       	call   1014b <gdt_init>

    //2.初始化并加载中断描述符表IDT
    idt_init();
   102f1:	e8 9f ff ff ff       	call   10295 <idt_init>

}
   102f6:	90                   	nop
   102f7:	c9                   	leave  
   102f8:	c3                   	ret    

000102f9 <init_main>:


void init_main(void) {
   102f9:	55                   	push   %ebp
   102fa:	89 e5                	mov    %esp,%ebp
   102fc:	83 ec 10             	sub    $0x10,%esp
    int a = 3 / 0;
   102ff:	b8 03 00 00 00       	mov    $0x3,%eax
   10304:	b9 00 00 00 00       	mov    $0x0,%ecx
   10309:	99                   	cltd   
   1030a:	f7 f9                	idiv   %ecx
   1030c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    for (;;){}
   1030f:	eb fe                	jmp    1030f <init_main+0x16>
