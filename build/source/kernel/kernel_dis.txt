
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf:     file format elf32-i386
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00100000

Program Header:
    LOAD off    0x00000000 vaddr 0x000ff000 paddr 0x000ff000 align 2**12
         filesz 0x00000094 memsz 0x00000094 flags r--
    LOAD off    0x00001000 vaddr 0x00100000 paddr 0x00100000 align 2**12
         filesz 0x00000012 memsz 0x00000012 flags r-x
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000012  00100000  00100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      0000002b  00000000  00000000  00001012  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000040  00000000  00000000  00001040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  3 .debug_info   00000103  00000000  00000000  00001080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  4 .debug_abbrev 000000c6  00000000  00000000  00001183  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_line   000000ad  00000000  00000000  00001249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_frame  0000002c  00000000  00000000  000012f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_str    00000177  00000000  00000000  00001324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line_str 000000d7  00000000  00000000  0000149b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 init.c
0010000d g     F .text	00000005 kernel_init
00100000 g       .text	00000000 _start
00101000 g       .text	00000000 __bss_start
00101000 g       .text	00000000 _edata
00101000 g       .text	00000000 _end



Disassembly of section .text:

00100000 <_start>:
*            [&boot_info]
*    esp ->  [返回地址]
*   所以要想访问到&boot_info，则只需从当前esp的位置偏移+4字节即可
*/
_start:
    mov %esp, %ebp      //栈空间最好只用ebp来进行偏移访问
  100000:	89 e5                	mov    %esp,%ebp
    mov 0x4(%ebp), %eax //将&boot_info的值存入eax中
  100002:	8b 45 04             	mov    0x4(%ebp),%eax

    push %eax           //外部函数将参数压入栈中，再进行函数调用
  100005:	50                   	push   %eax
    call kernel_init    //调用内核初始化函数
  100006:	e8 02 00 00 00       	call   10000d <kernel_init>
    jmp .
  10000b:	eb fe                	jmp    10000b <_start+0xb>

0010000d <kernel_init>:

/**
 * @brief  对内核进行初始化操作
 * 
 */
void kernel_init(_boot_info_t_* boot_info) {
  10000d:	55                   	push   %ebp
  10000e:	89 e5                	mov    %esp,%ebp
    for (;;){}
  100010:	eb fe                	jmp    100010 <kernel_init+0x3>
