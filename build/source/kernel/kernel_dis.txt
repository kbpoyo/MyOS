
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf:     file format elf32-i386
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00002b94 memsz 0x000178c0 flags rwx
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023a6  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       000007e8  000123a8  000123a8  000033a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000004  00012b90  00012b90  00003b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00014d20  00012ba0  00012ba0  00003b94  2**5
                  ALLOC
  4 .debug_line   000012b5  00000000  00000000  00003b94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_line_str 00000534  00000000  00000000  00004e49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   00002b41  00000000  00000000  0000537d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00000fa5  00000000  00000000  00007ebe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_aranges 00000160  00000000  00000000  00008e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    00000d50  00000000  00000000  00008fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .comment      0000002b  00000000  00000000  00009d18  2**0
                  CONTENTS, READONLY
 11 .debug_frame  00000e54  00000000  00000000  00009d44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010012 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 task.c
000102ad l     F .text	0000003d list_node_init
0001247c l     O .rodata	0000000f __func__.4
000102ea l     F .text	0000002d list_node_next
000124b8 l     O .rodata	0000000f __func__.0
00010317 l     F .text	00000047 list_init
0001248c l     O .rodata	0000000a __func__.3
0001035e l     F .text	0000002d list_get_size
000124a8 l     O .rodata	0000000e __func__.1
0001038b l     F .text	0000002c list_get_first
00012498 l     O .rodata	0000000f __func__.2
000103b7 l     F .text	00000007 hlt
000103be l     F .text	0000001a far_jump
000103d8 l     F .text	00000017 write_tr
00012ba0 l     O .bss	00000180 task_manager
000103ef l     F .text	0000001f switch_to_tss
00010429 l     F .text	000000f8 tss_init
00012470 l     O .rodata	0000000a __func__.5
00012d20 l     O .bss	00000200 empty_task_stack
000105f3 l     F .text	0000000a empty_task
00010730 l     F .text	0000000a task_current
00000000 l    df *ABS*	00000000 gdt.c
0001098d l     F .text	00000028 lgdt
00012f20 l     O .bss	00010000 gdt_table
00000000 l    df *ABS*	00000000 idt.c
00010b28 l     F .text	00000007 cli
00010b2f l     F .text	00000007 sti
00010b36 l     F .text	00000007 hlt
00010b3d l     F .text	0000001d inb
00010b5a l     F .text	00000021 outb
00010b7b l     F .text	00000028 lidt
00010ba3 l     F .text	00000010 read_eflags
00010bb3 l     F .text	0000000b write_eflags
00022f20 l     O .bss	00000800 idt_table
00010bbe l     F .text	000000e9 print_exception_fram
00010ca7 l     F .text	0000003e do_default_handler
00010f31 l     F .text	00000047 gate_desc_set
00010fb8 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 time.c
00011362 l     F .text	00000021 outb
00023720 l     O .bss	00000004 sys_tick
000113ab l     F .text	00000062 init_pit
00000000 l    df *ABS*	00000000 init.c
00011425 l     F .text	00000007 sti
000128bc l     O .rodata	0000000c __func__.0
00023740 l     O .bss	000000ac task_test_task_1
00023800 l     O .bss	000000ac task_test_task_2
000238c0 l     O .bss	00001000 test_task_1_stack
000248c0 l     O .bss	00001000 test_task_2_stack
00000000 l    df *ABS*	00000000 test.c
00011591 l     F .text	00000047 list_init
000129cc l     O .rodata	0000000a __func__.3
000115d8 l     F .text	0000002d list_get_size
000129d8 l     O .rodata	0000000e __func__.2
00011605 l     F .text	0000002c list_get_first
000129f8 l     O .rodata	0000000f __func__.0
00011631 l     F .text	0000002d list_get_last
000129e8 l     O .rodata	0000000e __func__.1
00000000 l    df *ABS*	00000000 assert.c
00011939 l     F .text	00000007 hlt
00000000 l    df *ABS*	00000000 klib.c
00012b90 l     O .data	00000004 num_to_char.0
00000000 l    df *ABS*	00000000 list.c
00011e58 l     F .text	00000035 list_is_empty
00012b28 l     O .rodata	0000000e __func__.5
00011e8d l     F .text	0000002d list_get_size
00012b60 l     O .rodata	0000000e __func__.2
00012b14 l     O .rodata	00000012 __func__.6
00012b38 l     O .rodata	00000011 __func__.4
00012b4c l     O .rodata	00000012 __func__.3
00012b70 l     O .rodata	00000011 __func__.1
00012b84 l     O .rodata	0000000c __func__.0
00000000 l    df *ABS*	00000000 log.c
00012203 l     F .text	0000001d inb
00012220 l     F .text	00000021 outb
00011aad g     F .text	0000004f kernel_memcpy
000111be g     F .text	00000098 idt_enable
00011f45 g     F .text	0000008f list_insert_last
00010795 g     F .text	00000061 sys_yield
00010e19 g     F .text	0000001c do_handler_segment_not_present
000106b0 g     F .text	00000029 task_set_ready
000112f5 g     F .text	0000000b idt_enable_global
00011afc g     F .text	00000041 kernel_memset
00010081 g       .text	00000000 exception_handler_nmi
00010243 g       .text	00000000 exception_handler_virtual_exception
00012241 g     F .text	00000075 log_init
000114e3 g     F .text	000000ae init_main
000101ee g       .text	00000000 exception_handler_alignment_check
00011976 g     F .text	00000047 kernel_strcpy
000112ea g     F .text	0000000b idt_disable_global
00010f78 g     F .text	00000040 idt_install
0001002a g       .text	00000000 exception_handler_unknown
0001009e g       .text	00000000 exception_handler_breakpoint
00010d71 g     F .text	0000001c do_handler_overflow
00010ea5 g     F .text	0000001c do_handler_alignment_check
0001019b g       .text	00000000 exception_handler_general_protection
00010e51 g     F .text	0000001c do_handler_general_protection
00010f15 g     F .text	0000001c do_handler_control_exception
00010d01 g     F .text	0000001c do_handler_divider
00010de1 g     F .text	0000001c do_handler_double_fault
00010e6d g     F .text	0000001c do_handler_page_fault
0001012f g       .text	00000000 exception_handler_double_fault
00011300 g     F .text	00000039 pic_send_eoi
00012085 g     F .text	000000b5 list_remove_last
000106a6 g     F .text	0000000a task_first_task
00010180 g       .text	00000000 exception_handler_stack_segment_fault
00010a74 g     F .text	00000070 gdt_init
00010ef9 g     F .text	0000001c do_handler_virtual_exception
000100bb g       .text	00000000 exception_handler_overflow
00010298 g       .text	00000000 simple_switch
0001027b g       .text	00000000 exception_handler_time
00010d1d g     F .text	0000001c do_handler_debug
000258c0 g     O .bss	00002000 stack
0001092d g     F .text	00000060 sys_sleep
000114aa g     F .text	00000039 test_task_2
0001165e g     F .text	000002db list_test
00010260 g       .text	00000000 exception_handler_control_exception
000100d8 g       .text	00000000 exception_handler_bound_range
0001104b g     F .text	00000173 idt_init
00010da9 g     F .text	0000001c do_handler_invalid_opcode
0001014a g       .text	00000000 exception_handler_invalid_tss
00010e89 g     F .text	0000001c do_handler_fpu_error
0001065e g     F .text	00000048 task_first_init
00010ec1 g     F .text	0000001c do_handler_machine_check
00011eba g     F .text	0000008b list_insert_first
00010904 g     F .text	00000029 task_set_wakeup
00010702 g     F .text	0000002e task_ready_first
00010047 g       .text	00000000 exception_handler_divider
000119bd g     F .text	00000051 kernel_strncpy
0001142c g     F .text	00000045 kernel_init
00010000 g       .text	00000000 _start
00011be5 g     F .text	0000019d kernel_vsprintf
00010112 g       .text	00000000 exception_handler_device_unavailable
000100f5 g       .text	00000000 exception_handler_invalid_opcode
00010209 g       .text	00000000 exception_handler_machine_check
00010dfd g     F .text	0000001c do_handler_invalid_tss
00011256 g     F .text	00000094 idt_disable
000108ca g     F .text	0000003a task_set_sleep
00010d39 g     F .text	0000001c do_handler_nmi
00011471 g     F .text	00000039 test_task_1
00010226 g       .text	00000000 exception_handler_smd_exception
00010dc5 g     F .text	0000001c do_handler_device_unavailable
00011339 g     F .text	00000018 idt_enter_protection
000107f6 g     F .text	000000d4 task_slice_end
00011b3d g     F .text	00000084 kernel_memcmp
00010edd g     F .text	0000001c do_handler_smd_exception
000101b6 g       .text	00000000 exception_handler_page_fault
00010ce5 g     F .text	0000001c do_handler_unknown
000101d1 g       .text	00000000 exception_handler_fpu_error
0001040e g     F .text	0000001b task_switch_from_to
0001073a g     F .text	0000005b task_switch
00011a78 g     F .text	00000035 kernel_strlen
000106d9 g     F .text	00000029 task_set_unready
00010064 g       .text	00000000 exception_handler_debug
000109b5 g     F .text	000000bf segment_desc_set
00010d8d g     F .text	0000001c do_handler_bound_range
00011fd4 g     F .text	000000b1 list_remove_first
00011a0e g     F .text	0000006a kernel_strncmp
00010165 g       .text	00000000 exception_handler_segment_not_present
000105fd g     F .text	00000061 task_manager_init
00011940 g     F .text	00000036 pannic
00010e35 g     F .text	0000001c do_handler_stack_segment_fault
00010d55 g     F .text	0000001c do_handler_breakpoint
000122b6 g     F .text	000000f0 log_printf
00010521 g     F .text	000000d2 task_init
00011bc1 g     F .text	00000024 kernel_sprintf
00010ae4 g     F .text	00000044 gdt_alloc_desc
00011d82 g     F .text	000000d6 kernel_itoa
0001213a g     F .text	000000c9 list_remove
00011351 g     F .text	00000011 idt_leave_protection
00011383 g     F .text	00000028 do_handler_time
0001140d g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
*            [&boot_info]
*    esp ->  [返回地址]
*   所以要想访问到&boot_info，则只需从当前esp的位置偏移+4字节即可
*/
_start:
    mov %esp, %ebp      //栈空间最好只用ebp来进行偏移访问
   10000:	89 e5                	mov    %esp,%ebp
    mov 0x4(%ebp), %eax //将&boot_info的值存入eax中
   10002:	8b 45 04             	mov    0x4(%ebp),%eax

    push %eax           //外部函数将参数压入栈中，再进行函数调用
   10005:	50                   	push   %eax
    call kernel_init    //调用内核初始化函数
   10006:	e8 21 14 00 00       	call   1142c <kernel_init>

    //完成内核初始化后，进行直接跳转，以替换cs寄存器中临时的内核代码段的选择子为此时内存中真正的内核代码段选择子
    //cs:KERNEL_SELECTOR_CS, ip:gdt_reload
    jmp $KERNEL_SELECTOR_CS, $gdt_reload    
   1000b:	ea 12 00 01 00 08 00 	ljmp   $0x8,$0x10012

00010012 <gdt_reload>:

gdt_reload:
    //替换其他段寄存器中临时的内核数据段的选择子为此时内存中真正的内核数据段的选择子
    mov $KERNEL_SELECTOR_DS, %ax
   10012:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10016:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10018:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001a:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001c:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001e:	8e e8                	mov    %eax,%gs

    //重新指定栈空间位置，不再使用0~0x7c00这部分空间
    //stack段已在下面预留了KERNEL_STACK_SIZE的空间大小，直接将最高地址赋值给esp，esp便可使用这片空间
    mov $(stack + KERNEL_STACK_SIZE), %esp
   10020:	bc c0 78 02 00       	mov    $0x278c0,%esp

    //继续初始化内核
    //TODO:后序再来说明该函数的作用
    jmp init_main 
   10025:	e9 b9 14 00 00       	jmp    114e3 <init_main>

0001002a <exception_handler_unknown>:
//宏结束标志
.endm

//使用定义的异常宏 
//                |异常类型|       |IDT索引| |错误码|
exception_handler unknown,              -1, 0    //未知异常
   1002a:	6a 00                	push   $0x0
   1002c:	6a ff                	push   $0xffffffff
   1002e:	60                   	pusha  
   1002f:	1e                   	push   %ds
   10030:	06                   	push   %es
   10031:	0f a0                	push   %fs
   10033:	0f a8                	push   %gs
   10035:	54                   	push   %esp
   10036:	e8 aa 0c 00 00       	call   10ce5 <do_handler_unknown>
   1003b:	5c                   	pop    %esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider,              0,  0    //除0异常
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 a9 0c 00 00       	call   10d01 <do_handler_divider>
   10058:	5c                   	pop    %esp
   10059:	0f a9                	pop    %gs
   1005b:	0f a1                	pop    %fs
   1005d:	07                   	pop    %es
   1005e:	1f                   	pop    %ds
   1005f:	61                   	popa   
   10060:	83 c4 08             	add    $0x8,%esp
   10063:	cf                   	iret   

00010064 <exception_handler_debug>:
exception_handler debug,                1,  0    //debug异常
   10064:	6a 00                	push   $0x0
   10066:	6a 01                	push   $0x1
   10068:	60                   	pusha  
   10069:	1e                   	push   %ds
   1006a:	06                   	push   %es
   1006b:	0f a0                	push   %fs
   1006d:	0f a8                	push   %gs
   1006f:	54                   	push   %esp
   10070:	e8 a8 0c 00 00       	call   10d1d <do_handler_debug>
   10075:	5c                   	pop    %esp
   10076:	0f a9                	pop    %gs
   10078:	0f a1                	pop    %fs
   1007a:	07                   	pop    %es
   1007b:	1f                   	pop    %ds
   1007c:	61                   	popa   
   1007d:	83 c4 08             	add    $0x8,%esp
   10080:	cf                   	iret   

00010081 <exception_handler_nmi>:
exception_handler nmi,                  2,  0
   10081:	6a 00                	push   $0x0
   10083:	6a 02                	push   $0x2
   10085:	60                   	pusha  
   10086:	1e                   	push   %ds
   10087:	06                   	push   %es
   10088:	0f a0                	push   %fs
   1008a:	0f a8                	push   %gs
   1008c:	54                   	push   %esp
   1008d:	e8 a7 0c 00 00       	call   10d39 <do_handler_nmi>
   10092:	5c                   	pop    %esp
   10093:	0f a9                	pop    %gs
   10095:	0f a1                	pop    %fs
   10097:	07                   	pop    %es
   10098:	1f                   	pop    %ds
   10099:	61                   	popa   
   1009a:	83 c4 08             	add    $0x8,%esp
   1009d:	cf                   	iret   

0001009e <exception_handler_breakpoint>:
exception_handler breakpoint,           3,  0
   1009e:	6a 00                	push   $0x0
   100a0:	6a 03                	push   $0x3
   100a2:	60                   	pusha  
   100a3:	1e                   	push   %ds
   100a4:	06                   	push   %es
   100a5:	0f a0                	push   %fs
   100a7:	0f a8                	push   %gs
   100a9:	54                   	push   %esp
   100aa:	e8 a6 0c 00 00       	call   10d55 <do_handler_breakpoint>
   100af:	5c                   	pop    %esp
   100b0:	0f a9                	pop    %gs
   100b2:	0f a1                	pop    %fs
   100b4:	07                   	pop    %es
   100b5:	1f                   	pop    %ds
   100b6:	61                   	popa   
   100b7:	83 c4 08             	add    $0x8,%esp
   100ba:	cf                   	iret   

000100bb <exception_handler_overflow>:
exception_handler overflow,             4,  0
   100bb:	6a 00                	push   $0x0
   100bd:	6a 04                	push   $0x4
   100bf:	60                   	pusha  
   100c0:	1e                   	push   %ds
   100c1:	06                   	push   %es
   100c2:	0f a0                	push   %fs
   100c4:	0f a8                	push   %gs
   100c6:	54                   	push   %esp
   100c7:	e8 a5 0c 00 00       	call   10d71 <do_handler_overflow>
   100cc:	5c                   	pop    %esp
   100cd:	0f a9                	pop    %gs
   100cf:	0f a1                	pop    %fs
   100d1:	07                   	pop    %es
   100d2:	1f                   	pop    %ds
   100d3:	61                   	popa   
   100d4:	83 c4 08             	add    $0x8,%esp
   100d7:	cf                   	iret   

000100d8 <exception_handler_bound_range>:
exception_handler bound_range,          5,  0
   100d8:	6a 00                	push   $0x0
   100da:	6a 05                	push   $0x5
   100dc:	60                   	pusha  
   100dd:	1e                   	push   %ds
   100de:	06                   	push   %es
   100df:	0f a0                	push   %fs
   100e1:	0f a8                	push   %gs
   100e3:	54                   	push   %esp
   100e4:	e8 a4 0c 00 00       	call   10d8d <do_handler_bound_range>
   100e9:	5c                   	pop    %esp
   100ea:	0f a9                	pop    %gs
   100ec:	0f a1                	pop    %fs
   100ee:	07                   	pop    %es
   100ef:	1f                   	pop    %ds
   100f0:	61                   	popa   
   100f1:	83 c4 08             	add    $0x8,%esp
   100f4:	cf                   	iret   

000100f5 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode,       6,  0
   100f5:	6a 00                	push   $0x0
   100f7:	6a 06                	push   $0x6
   100f9:	60                   	pusha  
   100fa:	1e                   	push   %ds
   100fb:	06                   	push   %es
   100fc:	0f a0                	push   %fs
   100fe:	0f a8                	push   %gs
   10100:	54                   	push   %esp
   10101:	e8 a3 0c 00 00       	call   10da9 <do_handler_invalid_opcode>
   10106:	5c                   	pop    %esp
   10107:	0f a9                	pop    %gs
   10109:	0f a1                	pop    %fs
   1010b:	07                   	pop    %es
   1010c:	1f                   	pop    %ds
   1010d:	61                   	popa   
   1010e:	83 c4 08             	add    $0x8,%esp
   10111:	cf                   	iret   

00010112 <exception_handler_device_unavailable>:
exception_handler device_unavailable,   7,  0
   10112:	6a 00                	push   $0x0
   10114:	6a 07                	push   $0x7
   10116:	60                   	pusha  
   10117:	1e                   	push   %ds
   10118:	06                   	push   %es
   10119:	0f a0                	push   %fs
   1011b:	0f a8                	push   %gs
   1011d:	54                   	push   %esp
   1011e:	e8 a2 0c 00 00       	call   10dc5 <do_handler_device_unavailable>
   10123:	5c                   	pop    %esp
   10124:	0f a9                	pop    %gs
   10126:	0f a1                	pop    %fs
   10128:	07                   	pop    %es
   10129:	1f                   	pop    %ds
   1012a:	61                   	popa   
   1012b:	83 c4 08             	add    $0x8,%esp
   1012e:	cf                   	iret   

0001012f <exception_handler_double_fault>:
exception_handler double_fault,         8,  1
   1012f:	6a 08                	push   $0x8
   10131:	60                   	pusha  
   10132:	1e                   	push   %ds
   10133:	06                   	push   %es
   10134:	0f a0                	push   %fs
   10136:	0f a8                	push   %gs
   10138:	54                   	push   %esp
   10139:	e8 a3 0c 00 00       	call   10de1 <do_handler_double_fault>
   1013e:	5c                   	pop    %esp
   1013f:	0f a9                	pop    %gs
   10141:	0f a1                	pop    %fs
   10143:	07                   	pop    %es
   10144:	1f                   	pop    %ds
   10145:	61                   	popa   
   10146:	83 c4 08             	add    $0x8,%esp
   10149:	cf                   	iret   

0001014a <exception_handler_invalid_tss>:
exception_handler invalid_tss,          10, 1
   1014a:	6a 0a                	push   $0xa
   1014c:	60                   	pusha  
   1014d:	1e                   	push   %ds
   1014e:	06                   	push   %es
   1014f:	0f a0                	push   %fs
   10151:	0f a8                	push   %gs
   10153:	54                   	push   %esp
   10154:	e8 a4 0c 00 00       	call   10dfd <do_handler_invalid_tss>
   10159:	5c                   	pop    %esp
   1015a:	0f a9                	pop    %gs
   1015c:	0f a1                	pop    %fs
   1015e:	07                   	pop    %es
   1015f:	1f                   	pop    %ds
   10160:	61                   	popa   
   10161:	83 c4 08             	add    $0x8,%esp
   10164:	cf                   	iret   

00010165 <exception_handler_segment_not_present>:
exception_handler segment_not_present,  11, 1
   10165:	6a 0b                	push   $0xb
   10167:	60                   	pusha  
   10168:	1e                   	push   %ds
   10169:	06                   	push   %es
   1016a:	0f a0                	push   %fs
   1016c:	0f a8                	push   %gs
   1016e:	54                   	push   %esp
   1016f:	e8 a5 0c 00 00       	call   10e19 <do_handler_segment_not_present>
   10174:	5c                   	pop    %esp
   10175:	0f a9                	pop    %gs
   10177:	0f a1                	pop    %fs
   10179:	07                   	pop    %es
   1017a:	1f                   	pop    %ds
   1017b:	61                   	popa   
   1017c:	83 c4 08             	add    $0x8,%esp
   1017f:	cf                   	iret   

00010180 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,  12, 1
   10180:	6a 0c                	push   $0xc
   10182:	60                   	pusha  
   10183:	1e                   	push   %ds
   10184:	06                   	push   %es
   10185:	0f a0                	push   %fs
   10187:	0f a8                	push   %gs
   10189:	54                   	push   %esp
   1018a:	e8 a6 0c 00 00       	call   10e35 <do_handler_stack_segment_fault>
   1018f:	5c                   	pop    %esp
   10190:	0f a9                	pop    %gs
   10192:	0f a1                	pop    %fs
   10194:	07                   	pop    %es
   10195:	1f                   	pop    %ds
   10196:	61                   	popa   
   10197:	83 c4 08             	add    $0x8,%esp
   1019a:	cf                   	iret   

0001019b <exception_handler_general_protection>:
exception_handler general_protection,   13, 1
   1019b:	6a 0d                	push   $0xd
   1019d:	60                   	pusha  
   1019e:	1e                   	push   %ds
   1019f:	06                   	push   %es
   101a0:	0f a0                	push   %fs
   101a2:	0f a8                	push   %gs
   101a4:	54                   	push   %esp
   101a5:	e8 a7 0c 00 00       	call   10e51 <do_handler_general_protection>
   101aa:	5c                   	pop    %esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa   
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret   

000101b6 <exception_handler_page_fault>:
exception_handler page_fault,           14, 1
   101b6:	6a 0e                	push   $0xe
   101b8:	60                   	pusha  
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 a8 0c 00 00       	call   10e6d <do_handler_page_fault>
   101c5:	5c                   	pop    %esp
   101c6:	0f a9                	pop    %gs
   101c8:	0f a1                	pop    %fs
   101ca:	07                   	pop    %es
   101cb:	1f                   	pop    %ds
   101cc:	61                   	popa   
   101cd:	83 c4 08             	add    $0x8,%esp
   101d0:	cf                   	iret   

000101d1 <exception_handler_fpu_error>:
exception_handler fpu_error,            16, 0
   101d1:	6a 00                	push   $0x0
   101d3:	6a 10                	push   $0x10
   101d5:	60                   	pusha  
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 a7 0c 00 00       	call   10e89 <do_handler_fpu_error>
   101e2:	5c                   	pop    %esp
   101e3:	0f a9                	pop    %gs
   101e5:	0f a1                	pop    %fs
   101e7:	07                   	pop    %es
   101e8:	1f                   	pop    %ds
   101e9:	61                   	popa   
   101ea:	83 c4 08             	add    $0x8,%esp
   101ed:	cf                   	iret   

000101ee <exception_handler_alignment_check>:
exception_handler alignment_check,      17, 1
   101ee:	6a 11                	push   $0x11
   101f0:	60                   	pusha  
   101f1:	1e                   	push   %ds
   101f2:	06                   	push   %es
   101f3:	0f a0                	push   %fs
   101f5:	0f a8                	push   %gs
   101f7:	54                   	push   %esp
   101f8:	e8 a8 0c 00 00       	call   10ea5 <do_handler_alignment_check>
   101fd:	5c                   	pop    %esp
   101fe:	0f a9                	pop    %gs
   10200:	0f a1                	pop    %fs
   10202:	07                   	pop    %es
   10203:	1f                   	pop    %ds
   10204:	61                   	popa   
   10205:	83 c4 08             	add    $0x8,%esp
   10208:	cf                   	iret   

00010209 <exception_handler_machine_check>:
exception_handler machine_check,        18, 0
   10209:	6a 00                	push   $0x0
   1020b:	6a 12                	push   $0x12
   1020d:	60                   	pusha  
   1020e:	1e                   	push   %ds
   1020f:	06                   	push   %es
   10210:	0f a0                	push   %fs
   10212:	0f a8                	push   %gs
   10214:	54                   	push   %esp
   10215:	e8 a7 0c 00 00       	call   10ec1 <do_handler_machine_check>
   1021a:	5c                   	pop    %esp
   1021b:	0f a9                	pop    %gs
   1021d:	0f a1                	pop    %fs
   1021f:	07                   	pop    %es
   10220:	1f                   	pop    %ds
   10221:	61                   	popa   
   10222:	83 c4 08             	add    $0x8,%esp
   10225:	cf                   	iret   

00010226 <exception_handler_smd_exception>:
exception_handler smd_exception,        19, 0
   10226:	6a 00                	push   $0x0
   10228:	6a 13                	push   $0x13
   1022a:	60                   	pusha  
   1022b:	1e                   	push   %ds
   1022c:	06                   	push   %es
   1022d:	0f a0                	push   %fs
   1022f:	0f a8                	push   %gs
   10231:	54                   	push   %esp
   10232:	e8 a6 0c 00 00       	call   10edd <do_handler_smd_exception>
   10237:	5c                   	pop    %esp
   10238:	0f a9                	pop    %gs
   1023a:	0f a1                	pop    %fs
   1023c:	07                   	pop    %es
   1023d:	1f                   	pop    %ds
   1023e:	61                   	popa   
   1023f:	83 c4 08             	add    $0x8,%esp
   10242:	cf                   	iret   

00010243 <exception_handler_virtual_exception>:
exception_handler virtual_exception,    20, 0
   10243:	6a 00                	push   $0x0
   10245:	6a 14                	push   $0x14
   10247:	60                   	pusha  
   10248:	1e                   	push   %ds
   10249:	06                   	push   %es
   1024a:	0f a0                	push   %fs
   1024c:	0f a8                	push   %gs
   1024e:	54                   	push   %esp
   1024f:	e8 a5 0c 00 00       	call   10ef9 <do_handler_virtual_exception>
   10254:	5c                   	pop    %esp
   10255:	0f a9                	pop    %gs
   10257:	0f a1                	pop    %fs
   10259:	07                   	pop    %es
   1025a:	1f                   	pop    %ds
   1025b:	61                   	popa   
   1025c:	83 c4 08             	add    $0x8,%esp
   1025f:	cf                   	iret   

00010260 <exception_handler_control_exception>:
exception_handler control_exception,    21, 1
   10260:	6a 15                	push   $0x15
   10262:	60                   	pusha  
   10263:	1e                   	push   %ds
   10264:	06                   	push   %es
   10265:	0f a0                	push   %fs
   10267:	0f a8                	push   %gs
   10269:	54                   	push   %esp
   1026a:	e8 a6 0c 00 00       	call   10f15 <do_handler_control_exception>
   1026f:	5c                   	pop    %esp
   10270:	0f a9                	pop    %gs
   10272:	0f a1                	pop    %fs
   10274:	07                   	pop    %es
   10275:	1f                   	pop    %ds
   10276:	61                   	popa   
   10277:	83 c4 08             	add    $0x8,%esp
   1027a:	cf                   	iret   

0001027b <exception_handler_time>:

//定时器的中断处理函数
exception_handler time,                 0x20, 0 
   1027b:	6a 00                	push   $0x0
   1027d:	6a 20                	push   $0x20
   1027f:	60                   	pusha  
   10280:	1e                   	push   %ds
   10281:	06                   	push   %es
   10282:	0f a0                	push   %fs
   10284:	0f a8                	push   %gs
   10286:	54                   	push   %esp
   10287:	e8 f7 10 00 00       	call   11383 <do_handler_time>
   1028c:	5c                   	pop    %esp
   1028d:	0f a9                	pop    %gs
   1028f:	0f a1                	pop    %fs
   10291:	07                   	pop    %es
   10292:	1f                   	pop    %ds
   10293:	61                   	popa   
   10294:	83 c4 08             	add    $0x8,%esp
   10297:	cf                   	iret   

00010298 <simple_switch>:

    .text
    .global simple_switch
simple_switch:  //simple_switch(from, to)
    //1.获取参数
    mov 8(%esp), %edx   //获取 to, 地址(指针) --> 目标任务的栈空间对应的 esp 的值
   10298:	8b 54 24 08          	mov    0x8(%esp),%edx
    mov 4(%esp), %eax   //获取 from, 地址(指针) --> 当前任务的栈空间对应的 esp 的值
   1029c:	8b 44 24 04          	mov    0x4(%esp),%eax


    //2.被调用者保存当前任务的 ebp, ebx, esi, edi 到当前任务的栈中
    //eax, ecx, edx, eip, eflags 已由调用者压入当前任务的栈中
    push %ebp
   102a0:	55                   	push   %ebp
    push %ebx
   102a1:	53                   	push   %ebx
    push %esi
   102a2:	56                   	push   %esi
    push %edi
   102a3:	57                   	push   %edi

    //3.更新当前任务栈空间的 esp
    mov %esp, (%eax)
   102a4:	89 20                	mov    %esp,(%eax)

    //3.进行栈任务栈的切换
    mov (%edx), %esp
   102a6:	8b 22                	mov    (%edx),%esp


    //4.恢复切换后的任务状态，ebp, ebx, esi, edi 手动恢复
    //eax, ecx, edx, eip, eflags, 是在当前任务(c函数)调用simple_switch时已压入当前任务栈中，
    //调用 ret 后会自行弹出并恢复
    pop %edi
   102a8:	5f                   	pop    %edi
    pop %esi
   102a9:	5e                   	pop    %esi
    pop %ebx
   102aa:	5b                   	pop    %ebx
    pop %ebp
   102ab:	5d                   	pop    %ebp

    //5.恢复切换后的任务执行流，相当于此时 esp ->[eip]， 即 pop %eip
   102ac:	c3                   	ret    

000102ad <list_node_init>:
    list_node_t * first;
    list_node_t * last;
    int size;
}list_t;

static inline void list_node_init(list_node_t *node) {
   102ad:	55                   	push   %ebp
   102ae:	89 e5                	mov    %esp,%ebp
   102b0:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   102b3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   102b7:	75 19                	jne    102d2 <list_node_init+0x25>
   102b9:	68 a8 23 01 00       	push   $0x123a8
   102be:	68 7c 24 01 00       	push   $0x1247c
   102c3:	6a 20                	push   $0x20
   102c5:	68 c0 23 01 00       	push   $0x123c0
   102ca:	e8 71 16 00 00       	call   11940 <pannic>
   102cf:	83 c4 10             	add    $0x10,%esp
    node->pre = node->next = (list_node_t*)0;
   102d2:	8b 45 08             	mov    0x8(%ebp),%eax
   102d5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   102dc:	8b 45 08             	mov    0x8(%ebp),%eax
   102df:	8b 50 04             	mov    0x4(%eax),%edx
   102e2:	8b 45 08             	mov    0x8(%ebp),%eax
   102e5:	89 10                	mov    %edx,(%eax)
}
   102e7:	90                   	nop
   102e8:	c9                   	leave  
   102e9:	c3                   	ret    

000102ea <list_node_next>:
    ASSERT(node != (list_node_t*)0);

    return node->pre;
}

static inline list_node_t *list_node_next(list_node_t *node) {
   102ea:	55                   	push   %ebp
   102eb:	89 e5                	mov    %esp,%ebp
   102ed:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   102f0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   102f4:	75 19                	jne    1030f <list_node_next+0x25>
   102f6:	68 a8 23 01 00       	push   $0x123a8
   102fb:	68 b8 24 01 00       	push   $0x124b8
   10300:	6a 2b                	push   $0x2b
   10302:	68 c0 23 01 00       	push   $0x123c0
   10307:	e8 34 16 00 00       	call   11940 <pannic>
   1030c:	83 c4 10             	add    $0x10,%esp

    return node->next;
   1030f:	8b 45 08             	mov    0x8(%ebp),%eax
   10312:	8b 40 04             	mov    0x4(%eax),%eax
}
   10315:	c9                   	leave  
   10316:	c3                   	ret    

00010317 <list_init>:

static inline void list_init(list_t *list) {
   10317:	55                   	push   %ebp
   10318:	89 e5                	mov    %esp,%ebp
   1031a:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1031d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10321:	75 19                	jne    1033c <list_init+0x25>
   10323:	68 fe 23 01 00       	push   $0x123fe
   10328:	68 8c 24 01 00       	push   $0x1248c
   1032d:	6a 31                	push   $0x31
   1032f:	68 c0 23 01 00       	push   $0x123c0
   10334:	e8 07 16 00 00       	call   11940 <pannic>
   10339:	83 c4 10             	add    $0x10,%esp

    list->first = list->last = (list_node_t*)0;
   1033c:	8b 45 08             	mov    0x8(%ebp),%eax
   1033f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   10346:	8b 45 08             	mov    0x8(%ebp),%eax
   10349:	8b 50 04             	mov    0x4(%eax),%edx
   1034c:	8b 45 08             	mov    0x8(%ebp),%eax
   1034f:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   10351:	8b 45 08             	mov    0x8(%ebp),%eax
   10354:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   1035b:	90                   	nop
   1035c:	c9                   	leave  
   1035d:	c3                   	ret    

0001035e <list_get_size>:
    ASSERT(list != (list_t*)0);

    return list->size == 0;
}

static inline int list_get_size(list_t *list) {
   1035e:	55                   	push   %ebp
   1035f:	89 e5                	mov    %esp,%ebp
   10361:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10364:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10368:	75 19                	jne    10383 <list_get_size+0x25>
   1036a:	68 fe 23 01 00       	push   $0x123fe
   1036f:	68 a8 24 01 00       	push   $0x124a8
   10374:	6a 3e                	push   $0x3e
   10376:	68 c0 23 01 00       	push   $0x123c0
   1037b:	e8 c0 15 00 00       	call   11940 <pannic>
   10380:	83 c4 10             	add    $0x10,%esp

    return list->size;
   10383:	8b 45 08             	mov    0x8(%ebp),%eax
   10386:	8b 40 08             	mov    0x8(%eax),%eax
}
   10389:	c9                   	leave  
   1038a:	c3                   	ret    

0001038b <list_get_first>:

static inline list_node_t *list_get_first(list_t *list) {
   1038b:	55                   	push   %ebp
   1038c:	89 e5                	mov    %esp,%ebp
   1038e:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10391:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10395:	75 19                	jne    103b0 <list_get_first+0x25>
   10397:	68 fe 23 01 00       	push   $0x123fe
   1039c:	68 98 24 01 00       	push   $0x12498
   103a1:	6a 44                	push   $0x44
   103a3:	68 c0 23 01 00       	push   $0x123c0
   103a8:	e8 93 15 00 00       	call   11940 <pannic>
   103ad:	83 c4 10             	add    $0x10,%esp

    return list->first;
   103b0:	8b 45 08             	mov    0x8(%ebp),%eax
   103b3:	8b 00                	mov    (%eax),%eax
}
   103b5:	c9                   	leave  
   103b6:	c3                   	ret    

000103b7 <hlt>:
/**
 * @brief  暂停cpu的运行,ip寄存器指向下一条指令
 *         此时cpu可以接收中断
 *
 */
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   103b7:	55                   	push   %ebp
   103b8:	89 e5                	mov    %esp,%ebp
   103ba:	f4                   	hlt    
   103bb:	90                   	nop
   103bc:	5d                   	pop    %ebp
   103bd:	c3                   	ret    

000103be <far_jump>:
 * @brief  远跳转，当跳转发生在TSS段之间时，cpu将会保存状态到当前TR寄存器指向的TSS段
 *
 * @param selector 选择子
 * @param offset 跳转的偏移量
 */
static inline void far_jump(uint32_t selector, uint32_t offset) {
   103be:	55                   	push   %ebp
   103bf:	89 e5                	mov    %esp,%ebp
   103c1:	83 ec 10             	sub    $0x10,%esp
  // 传入远跳转需要的参数, 即cs = selector, eip = offset 
  uint32_t addr[] = {offset, selector};  
   103c4:	8b 45 0c             	mov    0xc(%ebp),%eax
   103c7:	89 45 f8             	mov    %eax,-0x8(%ebp)
   103ca:	8b 45 08             	mov    0x8(%ebp),%eax
   103cd:	89 45 fc             	mov    %eax,-0x4(%ebp)

  __asm__ __volatile__("ljmpl *(%[a])" : : [a] "r"(addr));
   103d0:	8d 45 f8             	lea    -0x8(%ebp),%eax
   103d3:	ff 28                	ljmp   *(%eax)
}
   103d5:	90                   	nop
   103d6:	c9                   	leave  
   103d7:	c3                   	ret    

000103d8 <write_tr>:
 * @brief   写入当前任务的TSS段描述符的选择子到TR寄存器中，告诉cpu当前段的TSS位置
 *          以便在进行任务切换时，将状态保存到该TSS段中
 * 
 * @param tss_selector 准备运行的任务的TSS段的选择子
 */
static inline void write_tr(uint16_t tss_selector) {
   103d8:	55                   	push   %ebp
   103d9:	89 e5                	mov    %esp,%ebp
   103db:	83 ec 04             	sub    $0x4,%esp
   103de:	8b 45 08             	mov    0x8(%ebp),%eax
   103e1:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  __asm__ __volatile__("ltr %[v]" : : [v]"r"(tss_selector));
   103e5:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   103e9:	0f 00 d8             	ltr    %ax
}
   103ec:	90                   	nop
   103ed:	c9                   	leave  
   103ee:	c3                   	ret    

000103ef <switch_to_tss>:

//定义全局唯一的任务管理器对象
static task_manager_t task_manager;


static void switch_to_tss(uint16_t tss_selector) {
   103ef:	55                   	push   %ebp
   103f0:	89 e5                	mov    %esp,%ebp
   103f2:	83 ec 04             	sub    $0x4,%esp
   103f5:	8b 45 08             	mov    0x8(%ebp),%eax
   103f8:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    //进行远跳转，让cpu访问该tss段的描述符，cpu将重启到之前运行该tss对应的任务的状态继续运行该任务
    far_jump(tss_selector, 0);
   103fc:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   10400:	6a 00                	push   $0x0
   10402:	50                   	push   %eax
   10403:	e8 b6 ff ff ff       	call   103be <far_jump>
   10408:	83 c4 08             	add    $0x8,%esp
}
   1040b:	90                   	nop
   1040c:	c9                   	leave  
   1040d:	c3                   	ret    

0001040e <task_switch_from_to>:
 * @brief  将任务从from切换到to
 * 
 * @param from 切换前的任务
 * @param to 切换后的任务
 */
void task_switch_from_to(task_t *from, task_t *to) {
   1040e:	55                   	push   %ebp
   1040f:	89 e5                	mov    %esp,%ebp
    //跳转到对应的tss段读取并恢复cpu任务状态
    switch_to_tss(to->tss_selector);
   10411:	8b 45 0c             	mov    0xc(%ebp),%eax
   10414:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
   1041a:	0f b7 c0             	movzwl %ax,%eax
   1041d:	50                   	push   %eax
   1041e:	e8 cc ff ff ff       	call   103ef <switch_to_tss>
   10423:	83 c4 04             	add    $0x4,%esp
}
   10426:	90                   	nop
   10427:	c9                   	leave  
   10428:	c3                   	ret    

00010429 <tss_init>:
 * 
 * @param task 需要初始化的任务对象
 * @param entry 任务入口地址
 * @param esp 任务所用的栈顶指针
 */
static void tss_init(task_t *task, uint32_t entry, uint32_t esp) {
   10429:	55                   	push   %ebp
   1042a:	89 e5                	mov    %esp,%ebp
   1042c:	83 ec 18             	sub    $0x18,%esp

    //1.将tss段的值置空
    kernel_memset(&task->tss, 0, sizeof(task->tss));
   1042f:	8b 45 08             	mov    0x8(%ebp),%eax
   10432:	83 c0 40             	add    $0x40,%eax
   10435:	83 ec 04             	sub    $0x4,%esp
   10438:	6a 68                	push   $0x68
   1043a:	6a 00                	push   $0x0
   1043c:	50                   	push   %eax
   1043d:	e8 ba 16 00 00       	call   11afc <kernel_memset>
   10442:	83 c4 10             	add    $0x10,%esp

    //2.设置eip，即任务的起始地址
    task->tss.eip = entry;
   10445:	8b 45 08             	mov    0x8(%ebp),%eax
   10448:	8b 55 0c             	mov    0xc(%ebp),%edx
   1044b:	89 50 60             	mov    %edx,0x60(%eax)

    //3.根据任务的特权级设置任务所使用的栈空间
    task->tss.esp = task->tss.esp0 = esp;
   1044e:	8b 45 08             	mov    0x8(%ebp),%eax
   10451:	8b 55 10             	mov    0x10(%ebp),%edx
   10454:	89 50 44             	mov    %edx,0x44(%eax)
   10457:	8b 45 08             	mov    0x8(%ebp),%eax
   1045a:	8b 50 44             	mov    0x44(%eax),%edx
   1045d:	8b 45 08             	mov    0x8(%ebp),%eax
   10460:	89 50 78             	mov    %edx,0x78(%eax)

    //4.平坦模型，初始化栈空间段寄存器
    task->tss.ss = task->tss.ss0 = KERNEL_SELECTOR_DS;
   10463:	8b 45 08             	mov    0x8(%ebp),%eax
   10466:	c7 40 48 10 00 00 00 	movl   $0x10,0x48(%eax)
   1046d:	8b 45 08             	mov    0x8(%ebp),%eax
   10470:	8b 50 48             	mov    0x48(%eax),%edx
   10473:	8b 45 08             	mov    0x8(%ebp),%eax
   10476:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)

    //5. 平坦模型，初始其余化段寄存器
    task->tss.es = task->tss.fs = task->tss.gs = task->tss.ds = KERNEL_SELECTOR_DS;
   1047c:	8b 45 08             	mov    0x8(%ebp),%eax
   1047f:	c7 80 94 00 00 00 10 	movl   $0x10,0x94(%eax)
   10486:	00 00 00 
   10489:	8b 45 08             	mov    0x8(%ebp),%eax
   1048c:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
   10492:	8b 45 08             	mov    0x8(%ebp),%eax
   10495:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
   1049b:	8b 45 08             	mov    0x8(%ebp),%eax
   1049e:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
   104a4:	8b 45 08             	mov    0x8(%ebp),%eax
   104a7:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
   104ad:	8b 45 08             	mov    0x8(%ebp),%eax
   104b0:	8b 90 98 00 00 00    	mov    0x98(%eax),%edx
   104b6:	8b 45 08             	mov    0x8(%ebp),%eax
   104b9:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)

    //6.平坦模型，初始化代码段寄存器
    task->tss.cs = KERNEL_SELECTOR_CS;
   104bf:	8b 45 08             	mov    0x8(%ebp),%eax
   104c2:	c7 80 8c 00 00 00 08 	movl   $0x8,0x8c(%eax)
   104c9:	00 00 00 

    //7.初始化eflags寄存器，使cpu中断保持开启
    task->tss.eflags = EFLAGS_DEFAULT_1 | EFLAGS_IF;
   104cc:	8b 45 08             	mov    0x8(%ebp),%eax
   104cf:	c7 40 64 02 02 00 00 	movl   $0x202,0x64(%eax)

    
    idt_state_t state = idt_enter_protection();//TODO:加锁
   104d6:	e8 5e 0e 00 00       	call   11339 <idt_enter_protection>
   104db:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //8.将该TSS段绑定到GDT中的某个段描述符
    uint32_t tss_selector = gdt_alloc_desc();
   104de:	e8 01 06 00 00       	call   10ae4 <gdt_alloc_desc>
   104e3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (tss_selector < 0) {
        log_printf("alloc tss failed!");
        return;
    }

    segment_desc_set(tss_selector, (uint32_t)&task->tss, sizeof(task->tss), 
   104e6:	8b 45 08             	mov    0x8(%ebp),%eax
   104e9:	83 c0 40             	add    $0x40,%eax
   104ec:	89 c2                	mov    %eax,%edx
   104ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
   104f1:	0f b7 c0             	movzwl %ax,%eax
   104f4:	68 89 00 00 00       	push   $0x89
   104f9:	6a 68                	push   $0x68
   104fb:	52                   	push   %edx
   104fc:	50                   	push   %eax
   104fd:	e8 b3 04 00 00       	call   109b5 <segment_desc_set>
   10502:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_TYPE_TSS);


    idt_leave_protection(state);//TODO:解锁 
   10505:	83 ec 0c             	sub    $0xc,%esp
   10508:	ff 75 f4             	push   -0xc(%ebp)
   1050b:	e8 41 0e 00 00       	call   11351 <idt_leave_protection>
   10510:	83 c4 10             	add    $0x10,%esp

    //9.记录tss绑定到的描述符的选择子
    task->tss_selector = tss_selector;
   10513:	8b 45 08             	mov    0x8(%ebp),%eax
   10516:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10519:	89 90 a8 00 00 00    	mov    %edx,0xa8(%eax)
}
   1051f:	c9                   	leave  
   10520:	c3                   	ret    

00010521 <task_init>:
 * @param task 任务对象
 * @param entry 任务的入口地址
 * @param esp 任务指行时所用的栈顶指针
 * @return int 
 */
void task_init(task_t *task, const char* name, uint32_t entry, uint32_t esp) {
   10521:	55                   	push   %ebp
   10522:	89 e5                	mov    %esp,%ebp
   10524:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t*)0);
   10527:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1052b:	75 19                	jne    10546 <task_init+0x25>
   1052d:	68 11 24 01 00       	push   $0x12411
   10532:	68 70 24 01 00       	push   $0x12470
   10537:	6a 65                	push   $0x65
   10539:	68 24 24 01 00       	push   $0x12424
   1053e:	e8 fd 13 00 00       	call   11940 <pannic>
   10543:	83 c4 10             	add    $0x10,%esp
    //1.初始化任务TSS段
    tss_init(task, entry, esp);
   10546:	83 ec 04             	sub    $0x4,%esp
   10549:	ff 75 14             	push   0x14(%ebp)
   1054c:	ff 75 10             	push   0x10(%ebp)
   1054f:	ff 75 08             	push   0x8(%ebp)
   10552:	e8 d2 fe ff ff       	call   10429 <tss_init>
   10557:	83 c4 10             	add    $0x10,%esp

    //2.初始化任务名称
    kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   1055a:	8b 45 08             	mov    0x8(%ebp),%eax
   1055d:	83 c0 10             	add    $0x10,%eax
   10560:	83 ec 04             	sub    $0x4,%esp
   10563:	6a 20                	push   $0x20
   10565:	ff 75 0c             	push   0xc(%ebp)
   10568:	50                   	push   %eax
   10569:	e8 4f 14 00 00       	call   119bd <kernel_strncpy>
   1056e:	83 c4 10             	add    $0x10,%esp

    //3.初始化任务队列节点及就绪队列节点
    list_node_init(&task->ready_node);
   10571:	8b 45 08             	mov    0x8(%ebp),%eax
   10574:	83 c0 30             	add    $0x30,%eax
   10577:	83 ec 0c             	sub    $0xc,%esp
   1057a:	50                   	push   %eax
   1057b:	e8 2d fd ff ff       	call   102ad <list_node_init>
   10580:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->task_node);
   10583:	8b 45 08             	mov    0x8(%ebp),%eax
   10586:	83 c0 38             	add    $0x38,%eax
   10589:	83 ec 0c             	sub    $0xc,%esp
   1058c:	50                   	push   %eax
   1058d:	e8 1b fd ff ff       	call   102ad <list_node_init>
   10592:	83 c4 10             	add    $0x10,%esp

    //4.初始化最大时间片数与当前拥有时间片数,以及延时时间片数
    task->slice_max = task->slice_curr = TASK_TIME_SLICE_DEFAULT;
   10595:	8b 45 08             	mov    0x8(%ebp),%eax
   10598:	c7 40 08 0a 00 00 00 	movl   $0xa,0x8(%eax)
   1059f:	8b 45 08             	mov    0x8(%ebp),%eax
   105a2:	8b 50 08             	mov    0x8(%eax),%edx
   105a5:	8b 45 08             	mov    0x8(%ebp),%eax
   105a8:	89 50 04             	mov    %edx,0x4(%eax)
    task->sleep = 0;
   105ab:	8b 45 08             	mov    0x8(%ebp),%eax
   105ae:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)

    
    idt_state_t state = idt_enter_protection();//TODO:加锁
   105b5:	e8 7f 0d 00 00       	call   11339 <idt_enter_protection>
   105ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
   
    //5.将任务加入任务队列
    list_insert_last(&task_manager.task_list, &task->task_node);
   105bd:	8b 45 08             	mov    0x8(%ebp),%eax
   105c0:	83 c0 38             	add    $0x38,%eax
   105c3:	83 ec 08             	sub    $0x8,%esp
   105c6:	50                   	push   %eax
   105c7:	68 b0 2b 01 00       	push   $0x12bb0
   105cc:	e8 74 19 00 00       	call   11f45 <list_insert_last>
   105d1:	83 c4 10             	add    $0x10,%esp

    //6.将任务设置为就绪态
    task_set_ready(task);
   105d4:	83 ec 0c             	sub    $0xc,%esp
   105d7:	ff 75 08             	push   0x8(%ebp)
   105da:	e8 d1 00 00 00       	call   106b0 <task_set_ready>
   105df:	83 c4 10             	add    $0x10,%esp

    
    idt_leave_protection(state);//TODO:解锁
   105e2:	83 ec 0c             	sub    $0xc,%esp
   105e5:	ff 75 f4             	push   -0xc(%ebp)
   105e8:	e8 64 0d 00 00       	call   11351 <idt_leave_protection>
   105ed:	83 c4 10             	add    $0x10,%esp
}
   105f0:	90                   	nop
   105f1:	c9                   	leave  
   105f2:	c3                   	ret    

000105f3 <empty_task>:
static uint32_t empty_task_stack[EMPTY_TASK_STACK_SIZE];
/**
 * @brief  空闲进程，当所有进程都延时运行时，让cpu运行空闲进程
 * 
 */
static void empty_task(void) {
   105f3:	55                   	push   %ebp
   105f4:	89 e5                	mov    %esp,%ebp
    while(1) {
        //停止cpu运行，让cpu等待时间中断
        hlt();
   105f6:	e8 bc fd ff ff       	call   103b7 <hlt>
   105fb:	eb f9                	jmp    105f6 <empty_task+0x3>

000105fd <task_manager_init>:

/**
 * @brief  初始化任务管理器
 * 
 */
void task_manager_init(void) {
   105fd:	55                   	push   %ebp
   105fe:	89 e5                	mov    %esp,%ebp
   10600:	83 ec 08             	sub    $0x8,%esp
    //1.初始化所有任务队列
    list_init(&task_manager.ready_list);
   10603:	83 ec 0c             	sub    $0xc,%esp
   10606:	68 a4 2b 01 00       	push   $0x12ba4
   1060b:	e8 07 fd ff ff       	call   10317 <list_init>
   10610:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   10613:	83 ec 0c             	sub    $0xc,%esp
   10616:	68 b0 2b 01 00       	push   $0x12bb0
   1061b:	e8 f7 fc ff ff       	call   10317 <list_init>
   10620:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   10623:	83 ec 0c             	sub    $0xc,%esp
   10626:	68 bc 2b 01 00       	push   $0x12bbc
   1062b:	e8 e7 fc ff ff       	call   10317 <list_init>
   10630:	83 c4 10             	add    $0x10,%esp

    //2.将当前任务置零
    task_manager.curr_task = (task_t*)0;
   10633:	c7 05 a0 2b 01 00 00 	movl   $0x0,0x12ba0
   1063a:	00 00 00 

    //3.初始化空闲进程
    task_init(  &task_manager.empty_task,
   1063d:	a1 20 2f 01 00       	mov    0x12f20,%eax
   10642:	ba f3 05 01 00       	mov    $0x105f3,%edx
   10647:	50                   	push   %eax
   10648:	52                   	push   %edx
   10649:	68 59 24 01 00       	push   $0x12459
   1064e:	68 74 2c 01 00       	push   $0x12c74
   10653:	e8 c9 fe ff ff       	call   10521 <task_init>
   10658:	83 c4 10             	add    $0x10,%esp
                 "empty_task", 
                 (uint32_t)empty_task,
                 empty_task_stack[EMPTY_TASK_STACK_SIZE]);
}
   1065b:	90                   	nop
   1065c:	c9                   	leave  
   1065d:	c3                   	ret    

0001065e <task_first_init>:

/**
 * @brief  初始化第一个任务
 * 
 */
void task_first_init(void) {
   1065e:	55                   	push   %ebp
   1065f:	89 e5                	mov    %esp,%ebp
   10661:	83 ec 08             	sub    $0x8,%esp
      //1.初始化任务，当前任务是在任务管理器启用前就执行的，
      //拥有自己的栈空间，所以入口地址直接和栈空间都置0即可
      //这一步只是为当前任务绑定一个TSS段并将其绑定到一个task对象
      task_init(&task_manager.first_task, "first task", 0, 0);
   10664:	6a 00                	push   $0x0
   10666:	6a 00                	push   $0x0
   10668:	68 64 24 01 00       	push   $0x12464
   1066d:	68 c8 2b 01 00       	push   $0x12bc8
   10672:	e8 aa fe ff ff       	call   10521 <task_init>
   10677:	83 c4 10             	add    $0x10,%esp
      
      //2.将当前任务的TSS选择子告诉cpu，用来切换任务时保存状态
      write_tr(task_manager.first_task.tss_selector);
   1067a:	a1 70 2c 01 00       	mov    0x12c70,%eax
   1067f:	0f b7 c0             	movzwl %ax,%eax
   10682:	83 ec 0c             	sub    $0xc,%esp
   10685:	50                   	push   %eax
   10686:	e8 4d fd ff ff       	call   103d8 <write_tr>
   1068b:	83 c4 10             	add    $0x10,%esp

      //3.将当前任务执行第一个任务
      task_manager.curr_task = &task_manager.first_task;
   1068e:	c7 05 a0 2b 01 00 c8 	movl   $0x12bc8,0x12ba0
   10695:	2b 01 00 

      //4.将当前任务状态设置为运行态
      task_manager.curr_task->state = TASK_RUNNING;
   10698:	a1 a0 2b 01 00       	mov    0x12ba0,%eax
   1069d:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
}
   106a3:	90                   	nop
   106a4:	c9                   	leave  
   106a5:	c3                   	ret    

000106a6 <task_first_task>:
/**
 * @brief  获取当前任务管理器的第一个任务
 * 
 * @return task_t* 
 */
task_t *task_first_task(void) {
   106a6:	55                   	push   %ebp
   106a7:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   106a9:	b8 c8 2b 01 00       	mov    $0x12bc8,%eax
}
   106ae:	5d                   	pop    %ebp
   106af:	c3                   	ret    

000106b0 <task_set_ready>:
/**
 * @brief  将任务task加入就绪队列
 * 
 * @param task 需要加入就绪队列的任务
 */
void task_set_ready(task_t *task) {
   106b0:	55                   	push   %ebp
   106b1:	89 e5                	mov    %esp,%ebp
   106b3:	83 ec 08             	sub    $0x8,%esp
    //1.将任务插入到就绪队列的尾部
    list_insert_last(&task_manager.ready_list, &task->ready_node);
   106b6:	8b 45 08             	mov    0x8(%ebp),%eax
   106b9:	83 c0 30             	add    $0x30,%eax
   106bc:	83 ec 08             	sub    $0x8,%esp
   106bf:	50                   	push   %eax
   106c0:	68 a4 2b 01 00       	push   $0x12ba4
   106c5:	e8 7b 18 00 00       	call   11f45 <list_insert_last>
   106ca:	83 c4 10             	add    $0x10,%esp

    //2.将任务状态设置为就绪态
    task->state = TASK_READY;
   106cd:	8b 45 08             	mov    0x8(%ebp),%eax
   106d0:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
}
   106d6:	90                   	nop
   106d7:	c9                   	leave  
   106d8:	c3                   	ret    

000106d9 <task_set_unready>:
/**
 * @brief  将任务task从就绪队列中取下
 * 
 * @param task 
 */
void task_set_unready(task_t *task) {
   106d9:	55                   	push   %ebp
   106da:	89 e5                	mov    %esp,%ebp
   106dc:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.ready_list, &task->ready_node);
   106df:	8b 45 08             	mov    0x8(%ebp),%eax
   106e2:	83 c0 30             	add    $0x30,%eax
   106e5:	83 ec 08             	sub    $0x8,%esp
   106e8:	50                   	push   %eax
   106e9:	68 a4 2b 01 00       	push   $0x12ba4
   106ee:	e8 47 1a 00 00       	call   1213a <list_remove>
   106f3:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   106f6:	8b 45 08             	mov    0x8(%ebp),%eax
   106f9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   106ff:	90                   	nop
   10700:	c9                   	leave  
   10701:	c3                   	ret    

00010702 <task_ready_first>:

/**
 * @brief  获取就绪队列中的第一个任务
 * 
 */
task_t* task_ready_first(void) {
   10702:	55                   	push   %ebp
   10703:	89 e5                	mov    %esp,%ebp
   10705:	83 ec 18             	sub    $0x18,%esp
    list_node_t *ready_node = list_get_first(&task_manager.ready_list);
   10708:	83 ec 0c             	sub    $0xc,%esp
   1070b:	68 a4 2b 01 00       	push   $0x12ba4
   10710:	e8 76 fc ff ff       	call   1038b <list_get_first>
   10715:	83 c4 10             	add    $0x10,%esp
   10718:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return list_node_parent(ready_node, task_t, ready_node);
   1071b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1071f:	74 08                	je     10729 <task_ready_first+0x27>
   10721:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10724:	83 e8 30             	sub    $0x30,%eax
   10727:	eb 05                	jmp    1072e <task_ready_first+0x2c>
   10729:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1072e:	c9                   	leave  
   1072f:	c3                   	ret    

00010730 <task_current>:
/**
 * @brief  获取当前正在运行的任务
 * 
 * @return task_t* 
 */
static task_t *task_current(void) {
   10730:	55                   	push   %ebp
   10731:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   10733:	a1 a0 2b 01 00       	mov    0x12ba0,%eax
}
   10738:	5d                   	pop    %ebp
   10739:	c3                   	ret    

0001073a <task_switch>:

/**
 * @brief  任务管理器进行任务切换
 * 
 */
void task_switch(void) {
   1073a:	55                   	push   %ebp
   1073b:	89 e5                	mov    %esp,%ebp
   1073d:	83 ec 18             	sub    $0x18,%esp

    idt_state_t state = idt_enter_protection();//TODO:加锁
   10740:	e8 f4 0b 00 00       	call   11339 <idt_enter_protection>
   10745:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //1.获取就绪队列中的第一个任务
    task_t *to = task_ready_first();
   10748:	e8 b5 ff ff ff       	call   10702 <task_ready_first>
   1074d:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //2.若获取到的任务不是当前任务就进行切换
    if (to != task_manager.curr_task) {
   10750:	a1 a0 2b 01 00       	mov    0x12ba0,%eax
   10755:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   10758:	74 2a                	je     10784 <task_switch+0x4a>
        //3.获取当前任务
        task_t *from = task_manager.curr_task;
   1075a:	a1 a0 2b 01 00       	mov    0x12ba0,%eax
   1075f:	89 45 ec             	mov    %eax,-0x14(%ebp)

        //4.切换当前任务, 并将当前任务置为运行态
        to->state = TASK_RUNNING;
   10762:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10765:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        task_manager.curr_task = to;
   1076b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1076e:	a3 a0 2b 01 00       	mov    %eax,0x12ba0
        

        //5.进行任务切换
        task_switch_from_to(from, to);
   10773:	83 ec 08             	sub    $0x8,%esp
   10776:	ff 75 f0             	push   -0x10(%ebp)
   10779:	ff 75 ec             	push   -0x14(%ebp)
   1077c:	e8 8d fc ff ff       	call   1040e <task_switch_from_to>
   10781:	83 c4 10             	add    $0x10,%esp
    } 

    idt_leave_protection(state);//TODO:解锁
   10784:	83 ec 0c             	sub    $0xc,%esp
   10787:	ff 75 f4             	push   -0xc(%ebp)
   1078a:	e8 c2 0b 00 00       	call   11351 <idt_leave_protection>
   1078f:	83 c4 10             	add    $0x10,%esp
}
   10792:	90                   	nop
   10793:	c9                   	leave  
   10794:	c3                   	ret    

00010795 <sys_yield>:
/**
 * @brief  使当前正在运行的任务主动让出cpu
 * 
 * @return int 
 */
int sys_yield(void) {
   10795:	55                   	push   %ebp
   10796:	89 e5                	mov    %esp,%ebp
   10798:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   1079b:	e8 99 0b 00 00       	call   11339 <idt_enter_protection>
   107a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    //1.判断当前就绪队列中是否有多个任务
    if (list_get_size(&task_manager.ready_list) > 1) {
   107a3:	83 ec 0c             	sub    $0xc,%esp
   107a6:	68 a4 2b 01 00       	push   $0x12ba4
   107ab:	e8 ae fb ff ff       	call   1035e <list_get_size>
   107b0:	83 c4 10             	add    $0x10,%esp
   107b3:	83 f8 01             	cmp    $0x1,%eax
   107b6:	7e 29                	jle    107e1 <sys_yield+0x4c>
        //2.获取当前任务  
        task_t *curr_task = task_current();
   107b8:	e8 73 ff ff ff       	call   10730 <task_current>
   107bd:	89 45 f0             	mov    %eax,-0x10(%ebp)
        
        //3.将当前任务从就绪队列中取下
        task_set_unready(curr_task);
   107c0:	83 ec 0c             	sub    $0xc,%esp
   107c3:	ff 75 f0             	push   -0x10(%ebp)
   107c6:	e8 0e ff ff ff       	call   106d9 <task_set_unready>
   107cb:	83 c4 10             	add    $0x10,%esp

        //4.将当前任务重新加入到就绪队列的队尾
        task_set_ready(curr_task);
   107ce:	83 ec 0c             	sub    $0xc,%esp
   107d1:	ff 75 f0             	push   -0x10(%ebp)
   107d4:	e8 d7 fe ff ff       	call   106b0 <task_set_ready>
   107d9:	83 c4 10             	add    $0x10,%esp

        //5.任务管理器运行下一个任务，从而释放cpu使用权
        task_switch();
   107dc:	e8 59 ff ff ff       	call   1073a <task_switch>
    }
    
    idt_leave_protection(state);//TODO:解锁
   107e1:	83 ec 0c             	sub    $0xc,%esp
   107e4:	ff 75 f4             	push   -0xc(%ebp)
   107e7:	e8 65 0b 00 00       	call   11351 <idt_leave_protection>
   107ec:	83 c4 10             	add    $0x10,%esp
    return 0;
   107ef:	b8 00 00 00 00       	mov    $0x0,%eax
}
   107f4:	c9                   	leave  
   107f5:	c3                   	ret    

000107f6 <task_slice_end>:
/**
 * @brief  提供给时钟中断使用，每中断一次，当前任务的时间片使用完一次
 *         减少当前任务的时间片数，并判断是否还有剩余时间片，若没有就进行任务切换
 * 
 */
void task_slice_end(void) {
   107f6:	55                   	push   %ebp
   107f7:	89 e5                	mov    %esp,%ebp
   107f9:	83 ec 18             	sub    $0x18,%esp

    //1.遍历当前延时队列，判断是否有可唤醒的任务
    list_node_t *curr_sleep_node = list_get_first(&task_manager.sleep_list);
   107fc:	83 ec 0c             	sub    $0xc,%esp
   107ff:	68 bc 2b 01 00       	push   $0x12bbc
   10804:	e8 82 fb ff ff       	call   1038b <list_get_first>
   10809:	83 c4 10             	add    $0x10,%esp
   1080c:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.遍历并判断每一个任务执行完当前时间片是否可被唤醒，若可以则唤醒
    while (curr_sleep_node) {
   1080f:	eb 62                	jmp    10873 <task_slice_end+0x7d>
        
        list_node_t *next_sleep_node = list_node_next(curr_sleep_node);
   10811:	83 ec 0c             	sub    $0xc,%esp
   10814:	ff 75 f4             	push   -0xc(%ebp)
   10817:	e8 ce fa ff ff       	call   102ea <list_node_next>
   1081c:	83 c4 10             	add    $0x10,%esp
   1081f:	89 45 ec             	mov    %eax,-0x14(%ebp)
        
        task_t *curr_sleep_task = list_node_parent(curr_sleep_node, task_t, ready_node);
   10822:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10826:	74 08                	je     10830 <task_slice_end+0x3a>
   10828:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1082b:	83 e8 30             	sub    $0x30,%eax
   1082e:	eb 05                	jmp    10835 <task_slice_end+0x3f>
   10830:	b8 00 00 00 00       	mov    $0x0,%eax
   10835:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (--curr_sleep_task->sleep == 0) {
   10838:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1083b:	8b 40 0c             	mov    0xc(%eax),%eax
   1083e:	8d 50 ff             	lea    -0x1(%eax),%edx
   10841:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10844:	89 50 0c             	mov    %edx,0xc(%eax)
   10847:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1084a:	8b 40 0c             	mov    0xc(%eax),%eax
   1084d:	85 c0                	test   %eax,%eax
   1084f:	75 1c                	jne    1086d <task_slice_end+0x77>
            task_set_wakeup(curr_sleep_task);   //从延时队列中取下
   10851:	83 ec 0c             	sub    $0xc,%esp
   10854:	ff 75 e8             	push   -0x18(%ebp)
   10857:	e8 a8 00 00 00       	call   10904 <task_set_wakeup>
   1085c:	83 c4 10             	add    $0x10,%esp
            task_set_ready(curr_sleep_task);    //加入就绪队列
   1085f:	83 ec 0c             	sub    $0xc,%esp
   10862:	ff 75 e8             	push   -0x18(%ebp)
   10865:	e8 46 fe ff ff       	call   106b0 <task_set_ready>
   1086a:	83 c4 10             	add    $0x10,%esp
        }

        curr_sleep_node = next_sleep_node;
   1086d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10870:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr_sleep_node) {
   10873:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10877:	75 98                	jne    10811 <task_slice_end+0x1b>
    }

    // task_switch(); 没有必要立马进行任务切换，当前任务时间片用完后会自动切换
    //1.获取当前任务
    task_t *curr_task = task_current();
   10879:	e8 b2 fe ff ff       	call   10730 <task_current>
   1087e:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //2.减小当前时间片数
    if (--curr_task->slice_curr == 0) {
   10881:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10884:	8b 40 08             	mov    0x8(%eax),%eax
   10887:	8d 50 ff             	lea    -0x1(%eax),%edx
   1088a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1088d:	89 50 08             	mov    %edx,0x8(%eax)
   10890:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10893:	8b 40 08             	mov    0x8(%eax),%eax
   10896:	85 c0                	test   %eax,%eax
   10898:	75 2d                	jne    108c7 <task_slice_end+0xd1>
        //3.时间片数用完了，重置时间片并进行任务切换
        curr_task->slice_curr = curr_task->slice_max;
   1089a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1089d:	8b 50 04             	mov    0x4(%eax),%edx
   108a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   108a3:	89 50 08             	mov    %edx,0x8(%eax)
        task_set_unready(curr_task);
   108a6:	83 ec 0c             	sub    $0xc,%esp
   108a9:	ff 75 f0             	push   -0x10(%ebp)
   108ac:	e8 28 fe ff ff       	call   106d9 <task_set_unready>
   108b1:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   108b4:	83 ec 0c             	sub    $0xc,%esp
   108b7:	ff 75 f0             	push   -0x10(%ebp)
   108ba:	e8 f1 fd ff ff       	call   106b0 <task_set_ready>
   108bf:	83 c4 10             	add    $0x10,%esp
        task_switch();
   108c2:	e8 73 fe ff ff       	call   1073a <task_switch>
    }
}
   108c7:	90                   	nop
   108c8:	c9                   	leave  
   108c9:	c3                   	ret    

000108ca <task_set_sleep>:
 * @brief  设置进程延时的时间片数
 * 
 * @param task 需要延时的进程
 * @param slice 延时的时间片数
 */
void task_set_sleep(task_t *task, uint32_t slice) {
   108ca:	55                   	push   %ebp
   108cb:	89 e5                	mov    %esp,%ebp
   108cd:	83 ec 08             	sub    $0x8,%esp
    if (slice == 0) return;
   108d0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   108d4:	74 2b                	je     10901 <task_set_sleep+0x37>

    task->sleep = slice;
   108d6:	8b 55 0c             	mov    0xc(%ebp),%edx
   108d9:	8b 45 08             	mov    0x8(%ebp),%eax
   108dc:	89 50 0c             	mov    %edx,0xc(%eax)
    task->state = TASK_SLEEP;
   108df:	8b 45 08             	mov    0x8(%ebp),%eax
   108e2:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    list_insert_last(&task_manager.sleep_list, &task->ready_node);
   108e8:	8b 45 08             	mov    0x8(%ebp),%eax
   108eb:	83 c0 30             	add    $0x30,%eax
   108ee:	83 ec 08             	sub    $0x8,%esp
   108f1:	50                   	push   %eax
   108f2:	68 bc 2b 01 00       	push   $0x12bbc
   108f7:	e8 49 16 00 00       	call   11f45 <list_insert_last>
   108fc:	83 c4 10             	add    $0x10,%esp
   108ff:	eb 01                	jmp    10902 <task_set_sleep+0x38>
    if (slice == 0) return;
   10901:	90                   	nop
}
   10902:	c9                   	leave  
   10903:	c3                   	ret    

00010904 <task_set_wakeup>:
/**
 * @brief  唤醒正在延时的进程
 * 
 * @param task 
 */
void task_set_wakeup(task_t *task) {
   10904:	55                   	push   %ebp
   10905:	89 e5                	mov    %esp,%ebp
   10907:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.sleep_list, &task->ready_node);
   1090a:	8b 45 08             	mov    0x8(%ebp),%eax
   1090d:	83 c0 30             	add    $0x30,%eax
   10910:	83 ec 08             	sub    $0x8,%esp
   10913:	50                   	push   %eax
   10914:	68 bc 2b 01 00       	push   $0x12bbc
   10919:	e8 1c 18 00 00       	call   1213a <list_remove>
   1091e:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   10921:	8b 45 08             	mov    0x8(%ebp),%eax
   10924:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   1092a:	90                   	nop
   1092b:	c9                   	leave  
   1092c:	c3                   	ret    

0001092d <sys_sleep>:
/**
 * @brief  使进程进入延时状态
 * 
 * @param ms 延时的时间，以ms为单位
 */
void sys_sleep(uint32_t ms) {
   1092d:	55                   	push   %ebp
   1092e:	89 e5                	mov    %esp,%ebp
   10930:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection(); //TODO:加锁
   10933:	e8 01 0a 00 00       	call   11339 <idt_enter_protection>
   10938:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //1.获取当前任务  
    task_t *curr_task = task_current();
   1093b:	e8 f0 fd ff ff       	call   10730 <task_current>
   10940:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    //2.将当前任务离开就绪队列
    task_set_unready(curr_task);
   10943:	83 ec 0c             	sub    $0xc,%esp
   10946:	ff 75 f0             	push   -0x10(%ebp)
   10949:	e8 8b fd ff ff       	call   106d9 <task_set_unready>
   1094e:	83 c4 10             	add    $0x10,%esp

    //3.计算出需要延时的时间片数，对时间片数向上取整，保证进程至少能延时指定时间
    uint32_t slice = (ms + (OS_TICKS_MS - 1)) / OS_TICKS_MS;
   10951:	8b 45 08             	mov    0x8(%ebp),%eax
   10954:	83 c0 09             	add    $0x9,%eax
   10957:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   1095c:	f7 e2                	mul    %edx
   1095e:	89 d0                	mov    %edx,%eax
   10960:	c1 e8 03             	shr    $0x3,%eax
   10963:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //4.将当前任务放入延时队列，并设置延时时间片数
    task_set_sleep(curr_task, slice);
   10966:	83 ec 08             	sub    $0x8,%esp
   10969:	ff 75 ec             	push   -0x14(%ebp)
   1096c:	ff 75 f0             	push   -0x10(%ebp)
   1096f:	e8 56 ff ff ff       	call   108ca <task_set_sleep>
   10974:	83 c4 10             	add    $0x10,%esp

    //5.切换任务
    task_switch();
   10977:	e8 be fd ff ff       	call   1073a <task_switch>

    idt_leave_protection(state); //TODO:解锁
   1097c:	83 ec 0c             	sub    $0xc,%esp
   1097f:	ff 75 f4             	push   -0xc(%ebp)
   10982:	e8 ca 09 00 00       	call   11351 <idt_leave_protection>
   10987:	83 c4 10             	add    $0x10,%esp
   1098a:	90                   	nop
   1098b:	c9                   	leave  
   1098c:	c3                   	ret    

0001098d <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   1098d:	55                   	push   %ebp
   1098e:	89 e5                	mov    %esp,%ebp
   10990:	83 ec 10             	sub    $0x10,%esp
  gdt.start31_16 = (start >> 16) & 0xffff;  // 初始化GDT地址的高16位
   10993:	8b 45 08             	mov    0x8(%ebp),%eax
   10996:	c1 e8 10             	shr    $0x10,%eax
   10999:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  gdt.start15_0 = start & 0xffff;           // 初始化GDT地址的低16位
   1099d:	8b 45 08             	mov    0x8(%ebp),%eax
   109a0:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   109a4:	8b 45 0c             	mov    0xc(%ebp),%eax
   109a7:	83 e8 01             	sub    $0x1,%eax
  gdt.limit =
   109aa:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   109ae:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   109b2:	90                   	nop
   109b3:	c9                   	leave  
   109b4:	c3                   	ret    

000109b5 <segment_desc_set>:
 *                 即2的13次方个段，也就是8192
 * @param base 该段在内存中的真实段基址
 * @param limit 该段的段界限，是一个偏移量，表示段中最大的偏移界限
 * @param attr 该段的属性位
 */
void segment_desc_set(uint16_t selector,  uint32_t base, uint32_t limit, uint16_t attr) {
   109b5:	55                   	push   %ebp
   109b6:	89 e5                	mov    %esp,%ebp
   109b8:	83 ec 18             	sub    $0x18,%esp
   109bb:	8b 55 08             	mov    0x8(%ebp),%edx
   109be:	8b 45 14             	mov    0x14(%ebp),%eax
   109c1:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
   109c5:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    //1. 获取该段描述符在内存中的起始地址，selector >> 3 取出3~15位才是其在全局描述符中的下标
    segment_desc_t *desc = gdt_table + (selector >> 3);
   109c9:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   109cd:	66 c1 e8 03          	shr    $0x3,%ax
   109d1:	0f b7 c0             	movzwl %ax,%eax
   109d4:	c1 e0 03             	shl    $0x3,%eax
   109d7:	05 20 2f 01 00       	add    $0x12f20,%eax
   109dc:	89 45 fc             	mov    %eax,-0x4(%ebp)

    //2. 设置段基地址
    desc->base15_0 = (uint16_t)base;
   109df:	8b 45 0c             	mov    0xc(%ebp),%eax
   109e2:	89 c2                	mov    %eax,%edx
   109e4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   109e7:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (uint8_t)(base >> 16);
   109eb:	8b 45 0c             	mov    0xc(%ebp),%eax
   109ee:	c1 e8 10             	shr    $0x10,%eax
   109f1:	89 c2                	mov    %eax,%edx
   109f3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   109f6:	88 50 04             	mov    %dl,0x4(%eax)
    desc->base31_24 = (uint8_t)(base >> 24);
   109f9:	8b 45 0c             	mov    0xc(%ebp),%eax
   109fc:	c1 e8 18             	shr    $0x18,%eax
   109ff:	89 c2                	mov    %eax,%edx
   10a01:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10a04:	88 50 07             	mov    %dl,0x7(%eax)

    //3. 设置段界限
    if (limit > 0xfffff) { //limit大于了20位能表示的最大值
   10a07:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   10a0e:	76 1d                	jbe    10a2d <segment_desc_set+0x78>
        //将limit的粒度设置为 4kb，即将属性位G置1
        desc->attr |= 0x8000;
   10a10:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10a13:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10a17:	66 0d 00 80          	or     $0x8000,%ax
   10a1b:	89 c2                	mov    %eax,%edx
   10a1d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10a20:	66 89 50 05          	mov    %dx,0x5(%eax)

        //将limit改成以 4kb 为单位
        limit /= (4 * 1024);
   10a24:	8b 45 10             	mov    0x10(%ebp),%eax
   10a27:	c1 e8 0c             	shr    $0xc,%eax
   10a2a:	89 45 10             	mov    %eax,0x10(%ebp)

    }
    desc->limit15_0 = (uint16_t)limit;
   10a2d:	8b 45 10             	mov    0x10(%ebp),%eax
   10a30:	89 c2                	mov    %eax,%edx
   10a32:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10a35:	66 89 10             	mov    %dx,(%eax)
    desc->attr |= ((uint16_t)(limit >> 8) & 0x0f00); //将limit高4位赋值到attr的8~11位(段界限的高4位)
   10a38:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10a3b:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10a3f:	89 c2                	mov    %eax,%edx
   10a41:	8b 45 10             	mov    0x10(%ebp),%eax
   10a44:	c1 e8 08             	shr    $0x8,%eax
   10a47:	66 25 00 0f          	and    $0xf00,%ax
   10a4b:	09 d0                	or     %edx,%eax
   10a4d:	89 c2                	mov    %eax,%edx
   10a4f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10a52:	66 89 50 05          	mov    %dx,0x5(%eax)

    //4.设置属性位
    desc->attr |= attr & 0xf0ff;
   10a56:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10a59:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10a5d:	89 c2                	mov    %eax,%edx
   10a5f:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   10a63:	80 e4 f0             	and    $0xf0,%ah
   10a66:	09 d0                	or     %edx,%eax
   10a68:	89 c2                	mov    %eax,%edx
   10a6a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10a6d:	66 89 50 05          	mov    %dx,0x5(%eax)


}
   10a71:	90                   	nop
   10a72:	c9                   	leave  
   10a73:	c3                   	ret    

00010a74 <gdt_init>:

/**
 * @brief  初始化GDT
 * 
 */
void gdt_init(void) {
   10a74:	55                   	push   %ebp
   10a75:	89 e5                	mov    %esp,%ebp
   10a77:	83 ec 10             	sub    $0x10,%esp
    //TODO:暂时将所有段都初始化为0
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   10a7a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10a81:	eb 1c                	jmp    10a9f <gdt_init+0x2b>
        segment_desc_set(i << 3, 0, 0, 0);
   10a83:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10a86:	c1 e0 03             	shl    $0x3,%eax
   10a89:	0f b7 c0             	movzwl %ax,%eax
   10a8c:	6a 00                	push   $0x0
   10a8e:	6a 00                	push   $0x0
   10a90:	6a 00                	push   $0x0
   10a92:	50                   	push   %eax
   10a93:	e8 1d ff ff ff       	call   109b5 <segment_desc_set>
   10a98:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   10a9b:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10a9f:	81 7d fc ff 1f 00 00 	cmpl   $0x1fff,-0x4(%ebp)
   10aa6:	7e db                	jle    10a83 <gdt_init+0xf>
    }

    //使用平坦模型，即段基址为0, 段界限直接用最大值，界限粒度为4kb，即段大小为4GB
    //1.设置内核的数据段
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff,
   10aa8:	68 92 40 00 00       	push   $0x4092
   10aad:	6a ff                	push   $0xffffffff
   10aaf:	6a 00                	push   $0x0
   10ab1:	6a 10                	push   $0x10
   10ab3:	e8 fd fe ff ff       	call   109b5 <segment_desc_set>
   10ab8:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL | 
                    SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    //2.设置内核的代码段
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff,
   10abb:	68 9a 40 00 00       	push   $0x409a
   10ac0:	6a ff                	push   $0xffffffff
   10ac2:	6a 00                	push   $0x0
   10ac4:	6a 08                	push   $0x8
   10ac6:	e8 ea fe ff ff       	call   109b5 <segment_desc_set>
   10acb:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL |
                    SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    //3.加载新的GDT表
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   10ace:	b8 20 2f 01 00       	mov    $0x12f20,%eax
   10ad3:	68 00 00 01 00       	push   $0x10000
   10ad8:	50                   	push   %eax
   10ad9:	e8 af fe ff ff       	call   1098d <lgdt>
   10ade:	83 c4 08             	add    $0x8,%esp
}
   10ae1:	90                   	nop
   10ae2:	c9                   	leave  
   10ae3:	c3                   	ret    

00010ae4 <gdt_alloc_desc>:
/**
 * @brief  寻找gdt中未赋值的段描述符空间
 * 
 * @return int 返回的找到的描述符的选择子
 */
int gdt_alloc_desc() {
   10ae4:	55                   	push   %ebp
   10ae5:	89 e5                	mov    %esp,%ebp
   10ae7:	83 ec 10             	sub    $0x10,%esp
    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   10aea:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   10af1:	eb 25                	jmp    10b18 <gdt_alloc_desc+0x34>
        segment_desc_t *desc = gdt_table + i;
   10af3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10af6:	c1 e0 03             	shl    $0x3,%eax
   10af9:	05 20 2f 01 00       	add    $0x12f20,%eax
   10afe:	89 45 f8             	mov    %eax,-0x8(%ebp)
        if (desc->limit15_0 == 0) {
   10b01:	8b 45 f8             	mov    -0x8(%ebp),%eax
   10b04:	0f b7 00             	movzwl (%eax),%eax
   10b07:	66 85 c0             	test   %ax,%ax
   10b0a:	75 08                	jne    10b14 <gdt_alloc_desc+0x30>
            return i << 3;
   10b0c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10b0f:	c1 e0 03             	shl    $0x3,%eax
   10b12:	eb 12                	jmp    10b26 <gdt_alloc_desc+0x42>
    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   10b14:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10b18:	81 7d fc ff 1f 00 00 	cmpl   $0x1fff,-0x4(%ebp)
   10b1f:	7e d2                	jle    10af3 <gdt_alloc_desc+0xf>
        }
    }

    return -1;
   10b21:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10b26:	c9                   	leave  
   10b27:	c3                   	ret    

00010b28 <cli>:
static inline void cli(void) { __asm__ __volatile__("cli"); }
   10b28:	55                   	push   %ebp
   10b29:	89 e5                	mov    %esp,%ebp
   10b2b:	fa                   	cli    
   10b2c:	90                   	nop
   10b2d:	5d                   	pop    %ebp
   10b2e:	c3                   	ret    

00010b2f <sti>:
static inline void sti(void) { __asm__ __volatile__("sti"); }
   10b2f:	55                   	push   %ebp
   10b30:	89 e5                	mov    %esp,%ebp
   10b32:	fb                   	sti    
   10b33:	90                   	nop
   10b34:	5d                   	pop    %ebp
   10b35:	c3                   	ret    

00010b36 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   10b36:	55                   	push   %ebp
   10b37:	89 e5                	mov    %esp,%ebp
   10b39:	f4                   	hlt    
   10b3a:	90                   	nop
   10b3b:	5d                   	pop    %ebp
   10b3c:	c3                   	ret    

00010b3d <inb>:
static inline uint8_t inb(uint16_t port) {
   10b3d:	55                   	push   %ebp
   10b3e:	89 e5                	mov    %esp,%ebp
   10b40:	83 ec 14             	sub    $0x14,%esp
   10b43:	8b 45 08             	mov    0x8(%ebp),%eax
   10b46:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   10b4a:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   10b4e:	89 c2                	mov    %eax,%edx
   10b50:	ec                   	in     (%dx),%al
   10b51:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   10b54:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   10b58:	c9                   	leave  
   10b59:	c3                   	ret    

00010b5a <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   10b5a:	55                   	push   %ebp
   10b5b:	89 e5                	mov    %esp,%ebp
   10b5d:	83 ec 08             	sub    $0x8,%esp
   10b60:	8b 45 08             	mov    0x8(%ebp),%eax
   10b63:	8b 55 0c             	mov    0xc(%ebp),%edx
   10b66:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   10b6a:	89 d0                	mov    %edx,%eax
   10b6c:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   10b6f:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10b73:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10b77:	ee                   	out    %al,(%dx)
}
   10b78:	90                   	nop
   10b79:	c9                   	leave  
   10b7a:	c3                   	ret    

00010b7b <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   10b7b:	55                   	push   %ebp
   10b7c:	89 e5                	mov    %esp,%ebp
   10b7e:	83 ec 10             	sub    $0x10,%esp
  idt.start31_16 = (start >> 16) & 0xffff;  // 初始化IDT地址的高16位
   10b81:	8b 45 08             	mov    0x8(%ebp),%eax
   10b84:	c1 e8 10             	shr    $0x10,%eax
   10b87:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  idt.start15_0 = start & 0xffff;           // 初始化IDT地址的低16位
   10b8b:	8b 45 08             	mov    0x8(%ebp),%eax
   10b8e:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   10b92:	8b 45 0c             	mov    0xc(%ebp),%eax
   10b95:	83 e8 01             	sub    $0x1,%eax
  idt.limit =
   10b98:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   10b9c:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   10ba0:	90                   	nop
   10ba1:	c9                   	leave  
   10ba2:	c3                   	ret    

00010ba3 <read_eflags>:
/**
 * @brief  读取当前cpu的eflags寄存器
 * 
 * @return uint32_t 放回eflags的值
 */
static inline uint32_t read_eflags(void) {
   10ba3:	55                   	push   %ebp
   10ba4:	89 e5                	mov    %esp,%ebp
   10ba6:	83 ec 10             	sub    $0x10,%esp
  uint32_t eflags;
  //pushf 压入eflags的值到栈中
  __asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   10ba9:	9c                   	pushf  
   10baa:	58                   	pop    %eax
   10bab:	89 45 fc             	mov    %eax,-0x4(%ebp)
  
  return eflags;
   10bae:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10bb1:	c9                   	leave  
   10bb2:	c3                   	ret    

00010bb3 <write_eflags>:
/**
 * @brief  将状态state写入eflags寄存器
 * 
 * @param state 
 */
static inline void write_eflags(uint32_t state) {
   10bb3:	55                   	push   %ebp
   10bb4:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("push %%eax\n\tpopf"::"a"(state));
   10bb6:	8b 45 08             	mov    0x8(%ebp),%eax
   10bb9:	50                   	push   %eax
   10bba:	9d                   	popf   
}
   10bbb:	90                   	nop
   10bbc:	5d                   	pop    %ebp
   10bbd:	c3                   	ret    

00010bbe <print_exception_fram>:
/**
 * @brief  打印异常栈帧信息
 * 
 * @param frame 栈帧
 */
static void print_exception_fram(const exception_frame_t *frame) {
   10bbe:	55                   	push   %ebp
   10bbf:	89 e5                	mov    %esp,%ebp
   10bc1:	57                   	push   %edi
   10bc2:	56                   	push   %esi
   10bc3:	53                   	push   %ebx
   10bc4:	83 ec 1c             	sub    $0x1c,%esp

  log_printf("------------------------stack frame info---------------------");
   10bc7:	83 ec 0c             	sub    $0xc,%esp
   10bca:	68 c8 24 01 00       	push   $0x124c8
   10bcf:	e8 e2 16 00 00       	call   122b6 <log_printf>
   10bd4:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ:\t\t%d\nerror code:\t%d", frame->num, frame->error_code);
   10bd7:	8b 45 08             	mov    0x8(%ebp),%eax
   10bda:	8b 50 34             	mov    0x34(%eax),%edx
   10bdd:	8b 45 08             	mov    0x8(%ebp),%eax
   10be0:	8b 40 30             	mov    0x30(%eax),%eax
   10be3:	83 ec 04             	sub    $0x4,%esp
   10be6:	52                   	push   %edx
   10be7:	50                   	push   %eax
   10be8:	68 06 25 01 00       	push   $0x12506
   10bed:	e8 c4 16 00 00       	call   122b6 <log_printf>
   10bf2:	83 c4 10             	add    $0x10,%esp
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
    //TODO:SS暂时没法获取，先用ds替代，之后再进行获取
    frame->cs, frame->ds, frame->ds, frame->es, frame->fs, frame->gs
   10bf5:	8b 45 08             	mov    0x8(%ebp),%eax
   10bf8:	8b 38                	mov    (%eax),%edi
   10bfa:	8b 45 08             	mov    0x8(%ebp),%eax
   10bfd:	8b 70 04             	mov    0x4(%eax),%esi
   10c00:	8b 45 08             	mov    0x8(%ebp),%eax
   10c03:	8b 58 08             	mov    0x8(%eax),%ebx
   10c06:	8b 45 08             	mov    0x8(%ebp),%eax
   10c09:	8b 48 0c             	mov    0xc(%eax),%ecx
   10c0c:	8b 45 08             	mov    0x8(%ebp),%eax
   10c0f:	8b 50 0c             	mov    0xc(%eax),%edx
   10c12:	8b 45 08             	mov    0x8(%ebp),%eax
   10c15:	8b 40 3c             	mov    0x3c(%eax),%eax
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
   10c18:	83 ec 04             	sub    $0x4,%esp
   10c1b:	57                   	push   %edi
   10c1c:	56                   	push   %esi
   10c1d:	53                   	push   %ebx
   10c1e:	51                   	push   %ecx
   10c1f:	52                   	push   %edx
   10c20:	50                   	push   %eax
   10c21:	68 20 25 01 00       	push   $0x12520
   10c26:	e8 8b 16 00 00       	call   122b6 <log_printf>
   10c2b:	83 c4 20             	add    $0x20,%esp
              "ESI:\t\t0x%x\n"
              "EDI:\t\t0x%x\n"
              "EBP:\t\t0x%x\n"
              "ESP:\t\t0x%x", 
              frame->eax, frame->ebx, frame->ecx, frame->edx,
              frame->esi, frame->edi, frame->ebp, frame->esp 
   10c2e:	8b 45 08             	mov    0x8(%ebp),%eax
   10c31:	8b 48 1c             	mov    0x1c(%eax),%ecx
   10c34:	8b 45 08             	mov    0x8(%ebp),%eax
   10c37:	8b 40 18             	mov    0x18(%eax),%eax
   10c3a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   10c3d:	8b 45 08             	mov    0x8(%ebp),%eax
   10c40:	8b 58 10             	mov    0x10(%eax),%ebx
   10c43:	89 5d e0             	mov    %ebx,-0x20(%ebp)
   10c46:	8b 45 08             	mov    0x8(%ebp),%eax
   10c49:	8b 78 14             	mov    0x14(%eax),%edi
              frame->eax, frame->ebx, frame->ecx, frame->edx,
   10c4c:	8b 45 08             	mov    0x8(%ebp),%eax
   10c4f:	8b 70 24             	mov    0x24(%eax),%esi
   10c52:	8b 45 08             	mov    0x8(%ebp),%eax
   10c55:	8b 58 28             	mov    0x28(%eax),%ebx
   10c58:	8b 45 08             	mov    0x8(%ebp),%eax
   10c5b:	8b 50 20             	mov    0x20(%eax),%edx
   10c5e:	8b 45 08             	mov    0x8(%ebp),%eax
   10c61:	8b 40 2c             	mov    0x2c(%eax),%eax
  log_printf( 
   10c64:	83 ec 0c             	sub    $0xc,%esp
   10c67:	51                   	push   %ecx
   10c68:	ff 75 e4             	push   -0x1c(%ebp)
   10c6b:	ff 75 e0             	push   -0x20(%ebp)
   10c6e:	57                   	push   %edi
   10c6f:	56                   	push   %esi
   10c70:	53                   	push   %ebx
   10c71:	52                   	push   %edx
   10c72:	50                   	push   %eax
   10c73:	68 50 25 01 00       	push   $0x12550
   10c78:	e8 39 16 00 00       	call   122b6 <log_printf>
   10c7d:	83 c4 30             	add    $0x30,%esp
              );

  log_printf("EIP:\t\t0x%x\nEFLAGS:\t\t0x%x", frame->eip, frame->eflags);
   10c80:	8b 45 08             	mov    0x8(%ebp),%eax
   10c83:	8b 50 40             	mov    0x40(%eax),%edx
   10c86:	8b 45 08             	mov    0x8(%ebp),%eax
   10c89:	8b 40 38             	mov    0x38(%eax),%eax
   10c8c:	83 ec 04             	sub    $0x4,%esp
   10c8f:	52                   	push   %edx
   10c90:	50                   	push   %eax
   10c91:	68 a8 25 01 00       	push   $0x125a8
   10c96:	e8 1b 16 00 00       	call   122b6 <log_printf>
   10c9b:	83 c4 10             	add    $0x10,%esp
}
   10c9e:	90                   	nop
   10c9f:	8d 65 f4             	lea    -0xc(%ebp),%esp
   10ca2:	5b                   	pop    %ebx
   10ca3:	5e                   	pop    %esi
   10ca4:	5f                   	pop    %edi
   10ca5:	5d                   	pop    %ebp
   10ca6:	c3                   	ret    

00010ca7 <do_default_handler>:
 *
 * @param message 异常信息
 * @param fram  异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
static void do_default_handler(const exception_frame_t *frame,
                               const char *message) {
   10ca7:	55                   	push   %ebp
   10ca8:	89 e5                	mov    %esp,%ebp
   10caa:	83 ec 08             	sub    $0x8,%esp

  log_printf("---------------------------------------------------");
   10cad:	83 ec 0c             	sub    $0xc,%esp
   10cb0:	68 c4 25 01 00       	push   $0x125c4
   10cb5:	e8 fc 15 00 00       	call   122b6 <log_printf>
   10cba:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ/Exception happend: %s", message);
   10cbd:	83 ec 08             	sub    $0x8,%esp
   10cc0:	ff 75 0c             	push   0xc(%ebp)
   10cc3:	68 f8 25 01 00       	push   $0x125f8
   10cc8:	e8 e9 15 00 00       	call   122b6 <log_printf>
   10ccd:	83 c4 10             	add    $0x10,%esp
  print_exception_fram(frame);
   10cd0:	83 ec 0c             	sub    $0xc,%esp
   10cd3:	ff 75 08             	push   0x8(%ebp)
   10cd6:	e8 e3 fe ff ff       	call   10bbe <print_exception_fram>
   10cdb:	83 c4 10             	add    $0x10,%esp
                              
  
  for (;;) {
    hlt();
   10cde:	e8 53 fe ff ff       	call   10b36 <hlt>
   10ce3:	eb f9                	jmp    10cde <do_default_handler+0x37>

00010ce5 <do_handler_unknown>:

/**
 * @brief   对没有针对性处理程序的异常进行处理
 * @param frame 异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
void do_handler_unknown(const exception_frame_t *frame) {
   10ce5:	55                   	push   %ebp
   10ce6:	89 e5                	mov    %esp,%ebp
   10ce8:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "unknown exception");
   10ceb:	83 ec 08             	sub    $0x8,%esp
   10cee:	68 12 26 01 00       	push   $0x12612
   10cf3:	ff 75 08             	push   0x8(%ebp)
   10cf6:	e8 ac ff ff ff       	call   10ca7 <do_default_handler>
   10cfb:	83 c4 10             	add    $0x10,%esp
}
   10cfe:	90                   	nop
   10cff:	c9                   	leave  
   10d00:	c3                   	ret    

00010d01 <do_handler_divider>:
/**
 * @brief  除0异常
 *
 * @param frame 异常栈帧
 */
void do_handler_divider(const exception_frame_t *frame) {
   10d01:	55                   	push   %ebp
   10d02:	89 e5                	mov    %esp,%ebp
   10d04:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "divider exception");
   10d07:	83 ec 08             	sub    $0x8,%esp
   10d0a:	68 24 26 01 00       	push   $0x12624
   10d0f:	ff 75 08             	push   0x8(%ebp)
   10d12:	e8 90 ff ff ff       	call   10ca7 <do_default_handler>
   10d17:	83 c4 10             	add    $0x10,%esp
}
   10d1a:	90                   	nop
   10d1b:	c9                   	leave  
   10d1c:	c3                   	ret    

00010d1d <do_handler_debug>:

void do_handler_debug(const exception_frame_t *frame) {
   10d1d:	55                   	push   %ebp
   10d1e:	89 e5                	mov    %esp,%ebp
   10d20:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "debug exception");
   10d23:	83 ec 08             	sub    $0x8,%esp
   10d26:	68 36 26 01 00       	push   $0x12636
   10d2b:	ff 75 08             	push   0x8(%ebp)
   10d2e:	e8 74 ff ff ff       	call   10ca7 <do_default_handler>
   10d33:	83 c4 10             	add    $0x10,%esp
}
   10d36:	90                   	nop
   10d37:	c9                   	leave  
   10d38:	c3                   	ret    

00010d39 <do_handler_nmi>:

void do_handler_nmi(const exception_frame_t *frame) {
   10d39:	55                   	push   %ebp
   10d3a:	89 e5                	mov    %esp,%ebp
   10d3c:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "nmi exception");
   10d3f:	83 ec 08             	sub    $0x8,%esp
   10d42:	68 46 26 01 00       	push   $0x12646
   10d47:	ff 75 08             	push   0x8(%ebp)
   10d4a:	e8 58 ff ff ff       	call   10ca7 <do_default_handler>
   10d4f:	83 c4 10             	add    $0x10,%esp
}
   10d52:	90                   	nop
   10d53:	c9                   	leave  
   10d54:	c3                   	ret    

00010d55 <do_handler_breakpoint>:
void do_handler_breakpoint(const exception_frame_t *frame) {
   10d55:	55                   	push   %ebp
   10d56:	89 e5                	mov    %esp,%ebp
   10d58:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "breakpoint exception");
   10d5b:	83 ec 08             	sub    $0x8,%esp
   10d5e:	68 54 26 01 00       	push   $0x12654
   10d63:	ff 75 08             	push   0x8(%ebp)
   10d66:	e8 3c ff ff ff       	call   10ca7 <do_default_handler>
   10d6b:	83 c4 10             	add    $0x10,%esp
}
   10d6e:	90                   	nop
   10d6f:	c9                   	leave  
   10d70:	c3                   	ret    

00010d71 <do_handler_overflow>:
void do_handler_overflow(const exception_frame_t *frame) {
   10d71:	55                   	push   %ebp
   10d72:	89 e5                	mov    %esp,%ebp
   10d74:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "overflow exception");
   10d77:	83 ec 08             	sub    $0x8,%esp
   10d7a:	68 69 26 01 00       	push   $0x12669
   10d7f:	ff 75 08             	push   0x8(%ebp)
   10d82:	e8 20 ff ff ff       	call   10ca7 <do_default_handler>
   10d87:	83 c4 10             	add    $0x10,%esp
}
   10d8a:	90                   	nop
   10d8b:	c9                   	leave  
   10d8c:	c3                   	ret    

00010d8d <do_handler_bound_range>:
void do_handler_bound_range(const exception_frame_t *frame) {
   10d8d:	55                   	push   %ebp
   10d8e:	89 e5                	mov    %esp,%ebp
   10d90:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "bound_range exception");
   10d93:	83 ec 08             	sub    $0x8,%esp
   10d96:	68 7c 26 01 00       	push   $0x1267c
   10d9b:	ff 75 08             	push   0x8(%ebp)
   10d9e:	e8 04 ff ff ff       	call   10ca7 <do_default_handler>
   10da3:	83 c4 10             	add    $0x10,%esp
}
   10da6:	90                   	nop
   10da7:	c9                   	leave  
   10da8:	c3                   	ret    

00010da9 <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(const exception_frame_t *frame) {
   10da9:	55                   	push   %ebp
   10daa:	89 e5                	mov    %esp,%ebp
   10dac:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_opcode exception");
   10daf:	83 ec 08             	sub    $0x8,%esp
   10db2:	68 92 26 01 00       	push   $0x12692
   10db7:	ff 75 08             	push   0x8(%ebp)
   10dba:	e8 e8 fe ff ff       	call   10ca7 <do_default_handler>
   10dbf:	83 c4 10             	add    $0x10,%esp
}
   10dc2:	90                   	nop
   10dc3:	c9                   	leave  
   10dc4:	c3                   	ret    

00010dc5 <do_handler_device_unavailable>:
void do_handler_device_unavailable(const exception_frame_t *frame) {
   10dc5:	55                   	push   %ebp
   10dc6:	89 e5                	mov    %esp,%ebp
   10dc8:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "device_unavailable exception");
   10dcb:	83 ec 08             	sub    $0x8,%esp
   10dce:	68 ab 26 01 00       	push   $0x126ab
   10dd3:	ff 75 08             	push   0x8(%ebp)
   10dd6:	e8 cc fe ff ff       	call   10ca7 <do_default_handler>
   10ddb:	83 c4 10             	add    $0x10,%esp
}
   10dde:	90                   	nop
   10ddf:	c9                   	leave  
   10de0:	c3                   	ret    

00010de1 <do_handler_double_fault>:
void do_handler_double_fault(const exception_frame_t *frame) {
   10de1:	55                   	push   %ebp
   10de2:	89 e5                	mov    %esp,%ebp
   10de4:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "double_fault exception");
   10de7:	83 ec 08             	sub    $0x8,%esp
   10dea:	68 c8 26 01 00       	push   $0x126c8
   10def:	ff 75 08             	push   0x8(%ebp)
   10df2:	e8 b0 fe ff ff       	call   10ca7 <do_default_handler>
   10df7:	83 c4 10             	add    $0x10,%esp
}
   10dfa:	90                   	nop
   10dfb:	c9                   	leave  
   10dfc:	c3                   	ret    

00010dfd <do_handler_invalid_tss>:
void do_handler_invalid_tss(const exception_frame_t *frame) {
   10dfd:	55                   	push   %ebp
   10dfe:	89 e5                	mov    %esp,%ebp
   10e00:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_tss exception");
   10e03:	83 ec 08             	sub    $0x8,%esp
   10e06:	68 df 26 01 00       	push   $0x126df
   10e0b:	ff 75 08             	push   0x8(%ebp)
   10e0e:	e8 94 fe ff ff       	call   10ca7 <do_default_handler>
   10e13:	83 c4 10             	add    $0x10,%esp
}
   10e16:	90                   	nop
   10e17:	c9                   	leave  
   10e18:	c3                   	ret    

00010e19 <do_handler_segment_not_present>:
void do_handler_segment_not_present(const exception_frame_t *frame) {
   10e19:	55                   	push   %ebp
   10e1a:	89 e5                	mov    %esp,%ebp
   10e1c:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "segment_not_present exception");
   10e1f:	83 ec 08             	sub    $0x8,%esp
   10e22:	68 f5 26 01 00       	push   $0x126f5
   10e27:	ff 75 08             	push   0x8(%ebp)
   10e2a:	e8 78 fe ff ff       	call   10ca7 <do_default_handler>
   10e2f:	83 c4 10             	add    $0x10,%esp
}
   10e32:	90                   	nop
   10e33:	c9                   	leave  
   10e34:	c3                   	ret    

00010e35 <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(const exception_frame_t *frame) {
   10e35:	55                   	push   %ebp
   10e36:	89 e5                	mov    %esp,%ebp
   10e38:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "stack_segment_fault exception");
   10e3b:	83 ec 08             	sub    $0x8,%esp
   10e3e:	68 13 27 01 00       	push   $0x12713
   10e43:	ff 75 08             	push   0x8(%ebp)
   10e46:	e8 5c fe ff ff       	call   10ca7 <do_default_handler>
   10e4b:	83 c4 10             	add    $0x10,%esp
}
   10e4e:	90                   	nop
   10e4f:	c9                   	leave  
   10e50:	c3                   	ret    

00010e51 <do_handler_general_protection>:
void do_handler_general_protection(const exception_frame_t *frame) {
   10e51:	55                   	push   %ebp
   10e52:	89 e5                	mov    %esp,%ebp
   10e54:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "general_protection exception");
   10e57:	83 ec 08             	sub    $0x8,%esp
   10e5a:	68 31 27 01 00       	push   $0x12731
   10e5f:	ff 75 08             	push   0x8(%ebp)
   10e62:	e8 40 fe ff ff       	call   10ca7 <do_default_handler>
   10e67:	83 c4 10             	add    $0x10,%esp
}
   10e6a:	90                   	nop
   10e6b:	c9                   	leave  
   10e6c:	c3                   	ret    

00010e6d <do_handler_page_fault>:
void do_handler_page_fault(const exception_frame_t *frame) {
   10e6d:	55                   	push   %ebp
   10e6e:	89 e5                	mov    %esp,%ebp
   10e70:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "page_fault exception");
   10e73:	83 ec 08             	sub    $0x8,%esp
   10e76:	68 4e 27 01 00       	push   $0x1274e
   10e7b:	ff 75 08             	push   0x8(%ebp)
   10e7e:	e8 24 fe ff ff       	call   10ca7 <do_default_handler>
   10e83:	83 c4 10             	add    $0x10,%esp
}
   10e86:	90                   	nop
   10e87:	c9                   	leave  
   10e88:	c3                   	ret    

00010e89 <do_handler_fpu_error>:
void do_handler_fpu_error(const exception_frame_t *frame) {
   10e89:	55                   	push   %ebp
   10e8a:	89 e5                	mov    %esp,%ebp
   10e8c:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "fpu_error exception");
   10e8f:	83 ec 08             	sub    $0x8,%esp
   10e92:	68 63 27 01 00       	push   $0x12763
   10e97:	ff 75 08             	push   0x8(%ebp)
   10e9a:	e8 08 fe ff ff       	call   10ca7 <do_default_handler>
   10e9f:	83 c4 10             	add    $0x10,%esp
}
   10ea2:	90                   	nop
   10ea3:	c9                   	leave  
   10ea4:	c3                   	ret    

00010ea5 <do_handler_alignment_check>:
void do_handler_alignment_check(const exception_frame_t *frame) {
   10ea5:	55                   	push   %ebp
   10ea6:	89 e5                	mov    %esp,%ebp
   10ea8:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "alignment_check exception");
   10eab:	83 ec 08             	sub    $0x8,%esp
   10eae:	68 77 27 01 00       	push   $0x12777
   10eb3:	ff 75 08             	push   0x8(%ebp)
   10eb6:	e8 ec fd ff ff       	call   10ca7 <do_default_handler>
   10ebb:	83 c4 10             	add    $0x10,%esp
}
   10ebe:	90                   	nop
   10ebf:	c9                   	leave  
   10ec0:	c3                   	ret    

00010ec1 <do_handler_machine_check>:
void do_handler_machine_check(const exception_frame_t *frame) {
   10ec1:	55                   	push   %ebp
   10ec2:	89 e5                	mov    %esp,%ebp
   10ec4:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "machine_check exception");
   10ec7:	83 ec 08             	sub    $0x8,%esp
   10eca:	68 91 27 01 00       	push   $0x12791
   10ecf:	ff 75 08             	push   0x8(%ebp)
   10ed2:	e8 d0 fd ff ff       	call   10ca7 <do_default_handler>
   10ed7:	83 c4 10             	add    $0x10,%esp
}
   10eda:	90                   	nop
   10edb:	c9                   	leave  
   10edc:	c3                   	ret    

00010edd <do_handler_smd_exception>:
void do_handler_smd_exception(const exception_frame_t *frame) {
   10edd:	55                   	push   %ebp
   10ede:	89 e5                	mov    %esp,%ebp
   10ee0:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "smd_exception exception");
   10ee3:	83 ec 08             	sub    $0x8,%esp
   10ee6:	68 a9 27 01 00       	push   $0x127a9
   10eeb:	ff 75 08             	push   0x8(%ebp)
   10eee:	e8 b4 fd ff ff       	call   10ca7 <do_default_handler>
   10ef3:	83 c4 10             	add    $0x10,%esp
}
   10ef6:	90                   	nop
   10ef7:	c9                   	leave  
   10ef8:	c3                   	ret    

00010ef9 <do_handler_virtual_exception>:
void do_handler_virtual_exception(const exception_frame_t *frame) {
   10ef9:	55                   	push   %ebp
   10efa:	89 e5                	mov    %esp,%ebp
   10efc:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "virtual_exception exception");
   10eff:	83 ec 08             	sub    $0x8,%esp
   10f02:	68 c1 27 01 00       	push   $0x127c1
   10f07:	ff 75 08             	push   0x8(%ebp)
   10f0a:	e8 98 fd ff ff       	call   10ca7 <do_default_handler>
   10f0f:	83 c4 10             	add    $0x10,%esp
}
   10f12:	90                   	nop
   10f13:	c9                   	leave  
   10f14:	c3                   	ret    

00010f15 <do_handler_control_exception>:
void do_handler_control_exception(const exception_frame_t *frame) {
   10f15:	55                   	push   %ebp
   10f16:	89 e5                	mov    %esp,%ebp
   10f18:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "control_exception exception");
   10f1b:	83 ec 08             	sub    $0x8,%esp
   10f1e:	68 dd 27 01 00       	push   $0x127dd
   10f23:	ff 75 08             	push   0x8(%ebp)
   10f26:	e8 7c fd ff ff       	call   10ca7 <do_default_handler>
   10f2b:	83 c4 10             	add    $0x10,%esp
}
   10f2e:	90                   	nop
   10f2f:	c9                   	leave  
   10f30:	c3                   	ret    

00010f31 <gate_desc_set>:
 * @param selector 中断门对应的处理程序所在的段的选择子
 * @param offset 中段门对应的处理程序相对于所在段的偏移量
 * @param attr 中段门的属性
 */
static void gate_desc_set(gate_desc_t *desc, const uint16_t selector, const uint32_t offset,
                          const uint16_t attr) {
   10f31:	55                   	push   %ebp
   10f32:	89 e5                	mov    %esp,%ebp
   10f34:	83 ec 08             	sub    $0x8,%esp
   10f37:	8b 55 0c             	mov    0xc(%ebp),%edx
   10f3a:	8b 45 14             	mov    0x14(%ebp),%eax
   10f3d:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10f41:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
  // 1.初始化偏移量
  desc->offset15_0 = offset & 0xffff;
   10f45:	8b 45 10             	mov    0x10(%ebp),%eax
   10f48:	89 c2                	mov    %eax,%edx
   10f4a:	8b 45 08             	mov    0x8(%ebp),%eax
   10f4d:	66 89 10             	mov    %dx,(%eax)
  desc->offset31_16 = (offset >> 16) & 0xffff;
   10f50:	8b 45 10             	mov    0x10(%ebp),%eax
   10f53:	c1 e8 10             	shr    $0x10,%eax
   10f56:	89 c2                	mov    %eax,%edx
   10f58:	8b 45 08             	mov    0x8(%ebp),%eax
   10f5b:	66 89 50 06          	mov    %dx,0x6(%eax)

  // 2.初始化选择子
  desc->selector = selector;
   10f5f:	8b 45 08             	mov    0x8(%ebp),%eax
   10f62:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10f66:	66 89 50 02          	mov    %dx,0x2(%eax)

  // 3.初始化属性位
  desc->attr = attr;
   10f6a:	8b 45 08             	mov    0x8(%ebp),%eax
   10f6d:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   10f71:	66 89 50 04          	mov    %dx,0x4(%eax)
}
   10f75:	90                   	nop
   10f76:	c9                   	leave  
   10f77:	c3                   	ret    

00010f78 <idt_install>:
 *
 * @param idt_num 异常的下标
 * @param handler 异常处理程序的偏移地址
 * @return int 成功返回 0 失败放回 -1
 */
int idt_install(const int idt_num, const idt_handler_t handler) {
   10f78:	55                   	push   %ebp
   10f79:	89 e5                	mov    %esp,%ebp
  // 1.判断IDT下标是否越界
  if (idt_num >= IDT_TABLE_SIZE || idt_num < 0) return -1;
   10f7b:	81 7d 08 ff 00 00 00 	cmpl   $0xff,0x8(%ebp)
   10f82:	7f 06                	jg     10f8a <idt_install+0x12>
   10f84:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10f88:	79 07                	jns    10f91 <idt_install+0x19>
   10f8a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10f8f:	eb 25                	jmp    10fb6 <idt_install+0x3e>

  // 2.在IDT表中设置下标为 idt_num 的中断门
  gate_desc_set(idt_table + idt_num, KERNEL_SELECTOR_CS, (uint32_t)handler,
   10f91:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f94:	8b 55 08             	mov    0x8(%ebp),%edx
   10f97:	c1 e2 03             	shl    $0x3,%edx
   10f9a:	81 c2 20 2f 02 00    	add    $0x22f20,%edx
   10fa0:	68 00 8e 00 00       	push   $0x8e00
   10fa5:	50                   	push   %eax
   10fa6:	6a 08                	push   $0x8
   10fa8:	52                   	push   %edx
   10fa9:	e8 83 ff ff ff       	call   10f31 <gate_desc_set>
   10fae:	83 c4 10             	add    $0x10,%esp
                GATE_TYPE_INT | GATE_ATTR_P | GATE_ATTR_DPL_0);

  return 0;
   10fb1:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10fb6:	c9                   	leave  
   10fb7:	c3                   	ret    

00010fb8 <init_pic>:

/**
 * @brief  初始化主从8259芯片
 * 
 */
static void init_pic(void) {
   10fb8:	55                   	push   %ebp
   10fb9:	89 e5                	mov    %esp,%ebp
  //1.对主片(8259A芯片)进行初始化, 写入时必须按照ICW1~4的顺序写入
  outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);  //ICW1:边缘触发，级联模式，需要ICW4
   10fbb:	6a 11                	push   $0x11
   10fbd:	6a 20                	push   $0x20
   10fbf:	e8 96 fb ff ff       	call   10b5a <outb>
   10fc4:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW2, PIC_ICW2_IDT_START);                //ICW2:起始中断向量号为0x20
   10fc7:	6a 20                	push   $0x20
   10fc9:	6a 21                	push   $0x21
   10fcb:	e8 8a fb ff ff       	call   10b5a <outb>
   10fd0:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW3, PIC_ICW3_MASTER_CASCADE);           //ICW3:主片用IR2级联从片
   10fd3:	6a 04                	push   $0x4
   10fd5:	6a 21                	push   $0x21
   10fd7:	e8 7e fb ff ff       	call   10b5a <outb>
   10fdc:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW4, PIC_ICW4_8086);                     //ICW4:8086模式，正常EOI
   10fdf:	6a 01                	push   $0x1
   10fe1:	6a 21                	push   $0x21
   10fe3:	e8 72 fb ff ff       	call   10b5a <outb>
   10fe8:	83 c4 08             	add    $0x8,%esp

  //2.对从片(8259A芯片)进行初始化
  outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);
   10feb:	6a 11                	push   $0x11
   10fed:	68 a0 00 00 00       	push   $0xa0
   10ff2:	e8 63 fb ff ff       	call   10b5a <outb>
   10ff7:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW2, PIC_ICW2_IDT_START + 8); //第一块芯片占用了8个中断，所以第二块芯片从第8个中断的下一个开始
   10ffa:	6a 28                	push   $0x28
   10ffc:	68 a1 00 00 00       	push   $0xa1
   11001:	e8 54 fb ff ff       	call   10b5a <outb>
   11006:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW3, PIC_ICW3_SLAVE_CASCADE);
   11009:	6a 02                	push   $0x2
   1100b:	68 a1 00 00 00       	push   $0xa1
   11010:	e8 45 fb ff ff       	call   10b5a <outb>
   11015:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW4, PIC_ICW4_8086);
   11018:	6a 01                	push   $0x1
   1101a:	68 a1 00 00 00       	push   $0xa1
   1101f:	e8 36 fb ff ff       	call   10b5a <outb>
   11024:	83 c4 08             	add    $0x8,%esp


  //3.初始化完两块8259芯片后，还需要为每一个中断设置处理程序
  //才可以去接收中断，所以现在要屏蔽中断，IMR位置1则屏蔽该中断请求，0则不屏蔽
  outb(PIC0_IMR, 0xfb); //屏蔽主片除 irq2(第3位) 以外的位传来的中断，(1111 1011)
   11027:	68 fb 00 00 00       	push   $0xfb
   1102c:	6a 21                	push   $0x21
   1102e:	e8 27 fb ff ff       	call   10b5a <outb>
   11033:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_IMR, 0xff); //屏蔽从片的所有中断
   11036:	68 ff 00 00 00       	push   $0xff
   1103b:	68 a1 00 00 00       	push   $0xa1
   11040:	e8 15 fb ff ff       	call   10b5a <outb>
   11045:	83 c4 08             	add    $0x8,%esp


}
   11048:	90                   	nop
   11049:	c9                   	leave  
   1104a:	c3                   	ret    

0001104b <idt_init>:

/**
 * @brief  初始化中断向量表
 *
 */
void idt_init(void) {
   1104b:	55                   	push   %ebp
   1104c:	89 e5                	mov    %esp,%ebp
   1104e:	83 ec 10             	sub    $0x10,%esp
  // 1.初始化IDT中的各个中断门(未知异常类型)
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   11051:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   11058:	eb 14                	jmp    1106e <idt_init+0x23>
    idt_install(i, (idt_handler_t)exception_handler_unknown);
   1105a:	68 2a 00 01 00       	push   $0x1002a
   1105f:	ff 75 fc             	push   -0x4(%ebp)
   11062:	e8 11 ff ff ff       	call   10f78 <idt_install>
   11067:	83 c4 08             	add    $0x8,%esp
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   1106a:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   1106e:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   11075:	7e e3                	jle    1105a <idt_init+0xf>
  }

  // 2.绑定异常中断向量表中对应下标的中断门的处理函数
  idt_install(IDT0_DE, (idt_handler_t)exception_handler_divider);
   11077:	68 47 00 01 00       	push   $0x10047
   1107c:	6a 00                	push   $0x0
   1107e:	e8 f5 fe ff ff       	call   10f78 <idt_install>
   11083:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT1_DB, (idt_handler_t)exception_handler_debug);
   11086:	68 64 00 01 00       	push   $0x10064
   1108b:	6a 01                	push   $0x1
   1108d:	e8 e6 fe ff ff       	call   10f78 <idt_install>
   11092:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT2_NMI, (idt_handler_t)exception_handler_nmi);
   11095:	68 81 00 01 00       	push   $0x10081
   1109a:	6a 02                	push   $0x2
   1109c:	e8 d7 fe ff ff       	call   10f78 <idt_install>
   110a1:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT3_BP, (idt_handler_t)exception_handler_breakpoint);
   110a4:	68 9e 00 01 00       	push   $0x1009e
   110a9:	6a 03                	push   $0x3
   110ab:	e8 c8 fe ff ff       	call   10f78 <idt_install>
   110b0:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT4_OF, (idt_handler_t)exception_handler_overflow);
   110b3:	68 bb 00 01 00       	push   $0x100bb
   110b8:	6a 04                	push   $0x4
   110ba:	e8 b9 fe ff ff       	call   10f78 <idt_install>
   110bf:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT5_BR, (idt_handler_t)exception_handler_bound_range);
   110c2:	68 d8 00 01 00       	push   $0x100d8
   110c7:	6a 05                	push   $0x5
   110c9:	e8 aa fe ff ff       	call   10f78 <idt_install>
   110ce:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT6_UD, (idt_handler_t)exception_handler_invalid_opcode);
   110d1:	68 f5 00 01 00       	push   $0x100f5
   110d6:	6a 06                	push   $0x6
   110d8:	e8 9b fe ff ff       	call   10f78 <idt_install>
   110dd:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT7_NM, (idt_handler_t)exception_handler_device_unavailable);
   110e0:	68 12 01 01 00       	push   $0x10112
   110e5:	6a 07                	push   $0x7
   110e7:	e8 8c fe ff ff       	call   10f78 <idt_install>
   110ec:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT8_DF, (idt_handler_t)exception_handler_double_fault);
   110ef:	68 2f 01 01 00       	push   $0x1012f
   110f4:	6a 08                	push   $0x8
   110f6:	e8 7d fe ff ff       	call   10f78 <idt_install>
   110fb:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT10_TS, (idt_handler_t)exception_handler_invalid_tss);
   110fe:	68 4a 01 01 00       	push   $0x1014a
   11103:	6a 0a                	push   $0xa
   11105:	e8 6e fe ff ff       	call   10f78 <idt_install>
   1110a:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT11_NP, (idt_handler_t)exception_handler_segment_not_present);
   1110d:	68 65 01 01 00       	push   $0x10165
   11112:	6a 0b                	push   $0xb
   11114:	e8 5f fe ff ff       	call   10f78 <idt_install>
   11119:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT12_SS, (idt_handler_t)exception_handler_stack_segment_fault);
   1111c:	68 80 01 01 00       	push   $0x10180
   11121:	6a 0c                	push   $0xc
   11123:	e8 50 fe ff ff       	call   10f78 <idt_install>
   11128:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT13_GP, (idt_handler_t)exception_handler_general_protection);
   1112b:	68 9b 01 01 00       	push   $0x1019b
   11130:	6a 0d                	push   $0xd
   11132:	e8 41 fe ff ff       	call   10f78 <idt_install>
   11137:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT14_PF, (idt_handler_t)exception_handler_page_fault);
   1113a:	68 b6 01 01 00       	push   $0x101b6
   1113f:	6a 0e                	push   $0xe
   11141:	e8 32 fe ff ff       	call   10f78 <idt_install>
   11146:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT16_MF, (idt_handler_t)exception_handler_fpu_error);
   11149:	68 d1 01 01 00       	push   $0x101d1
   1114e:	6a 10                	push   $0x10
   11150:	e8 23 fe ff ff       	call   10f78 <idt_install>
   11155:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT17_AC, (idt_handler_t)exception_handler_alignment_check);
   11158:	68 ee 01 01 00       	push   $0x101ee
   1115d:	6a 11                	push   $0x11
   1115f:	e8 14 fe ff ff       	call   10f78 <idt_install>
   11164:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT18_MC, (idt_handler_t)exception_handler_machine_check);
   11167:	68 09 02 01 00       	push   $0x10209
   1116c:	6a 12                	push   $0x12
   1116e:	e8 05 fe ff ff       	call   10f78 <idt_install>
   11173:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT19_XM, (idt_handler_t)exception_handler_smd_exception);
   11176:	68 26 02 01 00       	push   $0x10226
   1117b:	6a 13                	push   $0x13
   1117d:	e8 f6 fd ff ff       	call   10f78 <idt_install>
   11182:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT20_VE, (idt_handler_t)exception_handler_virtual_exception);
   11185:	68 43 02 01 00       	push   $0x10243
   1118a:	6a 14                	push   $0x14
   1118c:	e8 e7 fd ff ff       	call   10f78 <idt_install>
   11191:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT21_CP, (idt_handler_t)exception_handler_control_exception);
   11194:	68 60 02 01 00       	push   $0x10260
   11199:	6a 15                	push   $0x15
   1119b:	e8 d8 fd ff ff       	call   10f78 <idt_install>
   111a0:	83 c4 08             	add    $0x8,%esp

  //3.加载IDT
  lidt((uint32_t)idt_table, sizeof(idt_table));
   111a3:	b8 20 2f 02 00       	mov    $0x22f20,%eax
   111a8:	68 00 08 00 00       	push   $0x800
   111ad:	50                   	push   %eax
   111ae:	e8 c8 f9 ff ff       	call   10b7b <lidt>
   111b3:	83 c4 08             	add    $0x8,%esp

  //4.初始化8259设备中断芯片
  init_pic();
   111b6:	e8 fd fd ff ff       	call   10fb8 <init_pic>
}
   111bb:	90                   	nop
   111bc:	c9                   	leave  
   111bd:	c3                   	ret    

000111be <idt_enable>:
/**
 * @brief  开启外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号,即IDT中的下标
 */
void idt_enable(uint8_t irq_num) {
   111be:	55                   	push   %ebp
   111bf:	89 e5                	mov    %esp,%ebp
   111c1:	53                   	push   %ebx
   111c2:	83 ec 14             	sub    $0x14,%esp
   111c5:	8b 45 08             	mov    0x8(%ebp),%eax
   111c8:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   111cb:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   111cf:	76 7f                	jbe    11250 <idt_enable+0x92>
   111d1:	80 7d e8 2e          	cmpb   $0x2e,-0x18(%ebp)
   111d5:	77 79                	ja     11250 <idt_enable+0x92>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   111d7:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置0，即不屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   111db:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   111df:	77 33                	ja     11214 <idt_enable+0x56>
    uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   111e1:	6a 21                	push   $0x21
   111e3:	e8 55 f9 ff ff       	call   10b3d <inb>
   111e8:	83 c4 04             	add    $0x4,%esp
   111eb:	89 c3                	mov    %eax,%ebx
   111ed:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   111f1:	ba 01 00 00 00       	mov    $0x1,%edx
   111f6:	89 c1                	mov    %eax,%ecx
   111f8:	d3 e2                	shl    %cl,%edx
   111fa:	89 d0                	mov    %edx,%eax
   111fc:	f7 d0                	not    %eax
   111fe:	21 d8                	and    %ebx,%eax
   11200:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   11203:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11207:	50                   	push   %eax
   11208:	6a 21                	push   $0x21
   1120a:	e8 4b f9 ff ff       	call   10b5a <outb>
   1120f:	83 c4 08             	add    $0x8,%esp
   11212:	eb 3d                	jmp    11251 <idt_enable+0x93>
  } else {
    uint8_t mask = inb(PIC1_IMR) & ~(1 << (irq_num - 8));
   11214:	68 a1 00 00 00       	push   $0xa1
   11219:	e8 1f f9 ff ff       	call   10b3d <inb>
   1121e:	83 c4 04             	add    $0x4,%esp
   11221:	89 c3                	mov    %eax,%ebx
   11223:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   11227:	83 e8 08             	sub    $0x8,%eax
   1122a:	ba 01 00 00 00       	mov    $0x1,%edx
   1122f:	89 c1                	mov    %eax,%ecx
   11231:	d3 e2                	shl    %cl,%edx
   11233:	89 d0                	mov    %edx,%eax
   11235:	f7 d0                	not    %eax
   11237:	21 d8                	and    %ebx,%eax
   11239:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   1123c:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11240:	50                   	push   %eax
   11241:	68 a1 00 00 00       	push   $0xa1
   11246:	e8 0f f9 ff ff       	call   10b5a <outb>
   1124b:	83 c4 08             	add    $0x8,%esp
   1124e:	eb 01                	jmp    11251 <idt_enable+0x93>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   11250:	90                   	nop
  }
  
}
   11251:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11254:	c9                   	leave  
   11255:	c3                   	ret    

00011256 <idt_disable>:
/**
 * @brief  关闭外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号，即IDT中的下标
 */
void idt_disable(uint8_t irq_num) {
   11256:	55                   	push   %ebp
   11257:	89 e5                	mov    %esp,%ebp
   11259:	53                   	push   %ebx
   1125a:	83 ec 14             	sub    $0x14,%esp
   1125d:	8b 45 08             	mov    0x8(%ebp),%eax
   11260:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   11263:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   11267:	76 7b                	jbe    112e4 <idt_disable+0x8e>
   11269:	80 7d e8 2f          	cmpb   $0x2f,-0x18(%ebp)
   1126d:	77 75                	ja     112e4 <idt_disable+0x8e>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   1126f:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置1，即屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   11273:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   11277:	77 31                	ja     112aa <idt_disable+0x54>
    uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   11279:	6a 21                	push   $0x21
   1127b:	e8 bd f8 ff ff       	call   10b3d <inb>
   11280:	83 c4 04             	add    $0x4,%esp
   11283:	89 c3                	mov    %eax,%ebx
   11285:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   11289:	ba 01 00 00 00       	mov    $0x1,%edx
   1128e:	89 c1                	mov    %eax,%ecx
   11290:	d3 e2                	shl    %cl,%edx
   11292:	89 d0                	mov    %edx,%eax
   11294:	09 d8                	or     %ebx,%eax
   11296:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   11299:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   1129d:	50                   	push   %eax
   1129e:	6a 21                	push   $0x21
   112a0:	e8 b5 f8 ff ff       	call   10b5a <outb>
   112a5:	83 c4 08             	add    $0x8,%esp
   112a8:	eb 3b                	jmp    112e5 <idt_disable+0x8f>
  } else {
    uint8_t mask = inb(PIC1_IMR) | (1 << (irq_num - 8));
   112aa:	68 a1 00 00 00       	push   $0xa1
   112af:	e8 89 f8 ff ff       	call   10b3d <inb>
   112b4:	83 c4 04             	add    $0x4,%esp
   112b7:	89 c3                	mov    %eax,%ebx
   112b9:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   112bd:	83 e8 08             	sub    $0x8,%eax
   112c0:	ba 01 00 00 00       	mov    $0x1,%edx
   112c5:	89 c1                	mov    %eax,%ecx
   112c7:	d3 e2                	shl    %cl,%edx
   112c9:	89 d0                	mov    %edx,%eax
   112cb:	09 d8                	or     %ebx,%eax
   112cd:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   112d0:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   112d4:	50                   	push   %eax
   112d5:	68 a1 00 00 00       	push   $0xa1
   112da:	e8 7b f8 ff ff       	call   10b5a <outb>
   112df:	83 c4 08             	add    $0x8,%esp
   112e2:	eb 01                	jmp    112e5 <idt_disable+0x8f>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   112e4:	90                   	nop
  }
  
}
   112e5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   112e8:	c9                   	leave  
   112e9:	c3                   	ret    

000112ea <idt_disable_global>:

/**
 * @brief  关闭全局中断
 * 
 */
void idt_disable_global(void) {
   112ea:	55                   	push   %ebp
   112eb:	89 e5                	mov    %esp,%ebp
  cli();
   112ed:	e8 36 f8 ff ff       	call   10b28 <cli>
}
   112f2:	90                   	nop
   112f3:	5d                   	pop    %ebp
   112f4:	c3                   	ret    

000112f5 <idt_enable_global>:

/**
 * @brief  开启全局中断
 * 
 */
void idt_enable_global(void) {
   112f5:	55                   	push   %ebp
   112f6:	89 e5                	mov    %esp,%ebp
  sti();
   112f8:	e8 32 f8 ff ff       	call   10b2f <sti>
}
   112fd:	90                   	nop
   112fe:	5d                   	pop    %ebp
   112ff:	c3                   	ret    

00011300 <pic_send_eoi>:
 * @brief  将OCW2寄存器的7~5位置为 001，用普通的EOI结束方式
 *         向8259A发送EOI命令，8259A会将ISR中优先级最高的位置0
 *
 * @param irq_num 中断向量号，即IDT下标
 */
void pic_send_eoi(int irq_num) {
   11300:	55                   	push   %ebp
   11301:	89 e5                	mov    %esp,%ebp
  //1.获取该中断对应的IRQ标号
  irq_num -= PIC_ICW2_IDT_START;
   11303:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
  //2.判断标号是否越界,若不越界则交给对应芯片处理
  if (irq_num < 0 || irq_num > 15) return;
   11307:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1130b:	78 29                	js     11336 <pic_send_eoi+0x36>
   1130d:	83 7d 08 0f          	cmpl   $0xf,0x8(%ebp)
   11311:	7f 23                	jg     11336 <pic_send_eoi+0x36>

  //3.若中断来自主片则只需向主片发送EOI
  outb(PIC0_OCW2, PIC_OCW2_EOI);
   11313:	6a 20                	push   $0x20
   11315:	6a 20                	push   $0x20
   11317:	e8 3e f8 ff ff       	call   10b5a <outb>
   1131c:	83 c4 08             	add    $0x8,%esp

  //4.若中断来自从片则还需向从片发送EOI
  if (irq_num >= 8) { 
   1131f:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11323:	7e 12                	jle    11337 <pic_send_eoi+0x37>
    outb(PIC1_OCW2, PIC_OCW2_EOI);
   11325:	6a 20                	push   $0x20
   11327:	68 a0 00 00 00       	push   $0xa0
   1132c:	e8 29 f8 ff ff       	call   10b5a <outb>
   11331:	83 c4 08             	add    $0x8,%esp
   11334:	eb 01                	jmp    11337 <pic_send_eoi+0x37>
  if (irq_num < 0 || irq_num > 15) return;
   11336:	90                   	nop
  }

}
   11337:	c9                   	leave  
   11338:	c3                   	ret    

00011339 <idt_enter_protection>:

/**
 * @brief  
 * 
 */
idt_state_t idt_enter_protection(void) {
   11339:	55                   	push   %ebp
   1133a:	89 e5                	mov    %esp,%ebp
   1133c:	83 ec 10             	sub    $0x10,%esp
  idt_state_t state = read_eflags();
   1133f:	e8 5f f8 ff ff       	call   10ba3 <read_eflags>
   11344:	89 45 fc             	mov    %eax,-0x4(%ebp)
  idt_disable_global();
   11347:	e8 9e ff ff ff       	call   112ea <idt_disable_global>
  return state;;
   1134c:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1134f:	c9                   	leave  
   11350:	c3                   	ret    

00011351 <idt_leave_protection>:
/**
 * @brief  
 * 
 * @return idt_state_t 
 */
idt_state_t idt_leave_protection(idt_state_t state){
   11351:	55                   	push   %ebp
   11352:	89 e5                	mov    %esp,%ebp
  write_eflags(state);
   11354:	ff 75 08             	push   0x8(%ebp)
   11357:	e8 57 f8 ff ff       	call   10bb3 <write_eflags>
   1135c:	83 c4 04             	add    $0x4,%esp
}
   1135f:	90                   	nop
   11360:	c9                   	leave  
   11361:	c3                   	ret    

00011362 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   11362:	55                   	push   %ebp
   11363:	89 e5                	mov    %esp,%ebp
   11365:	83 ec 08             	sub    $0x8,%esp
   11368:	8b 45 08             	mov    0x8(%ebp),%eax
   1136b:	8b 55 0c             	mov    0xc(%ebp),%edx
   1136e:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   11372:	89 d0                	mov    %edx,%eax
   11374:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   11377:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1137b:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1137f:	ee                   	out    %al,(%dx)
}
   11380:	90                   	nop
   11381:	c9                   	leave  
   11382:	c3                   	ret    

00011383 <do_handler_time>:
/**
 * @brief  处理定时器中断的c函数
 * 
 * @param frame 异常栈帧
 */
void do_handler_time(const exception_frame_t *frame) {
   11383:	55                   	push   %ebp
   11384:	89 e5                	mov    %esp,%ebp
   11386:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   11389:	a1 20 37 02 00       	mov    0x23720,%eax
   1138e:	83 c0 01             	add    $0x1,%eax
   11391:	a3 20 37 02 00       	mov    %eax,0x23720

    //因为ICW4的EOI位为0，所以要手动发送EOI即中断结束信号
    pic_send_eoi(IRQ0_TIMER);
   11396:	83 ec 0c             	sub    $0xc,%esp
   11399:	6a 20                	push   $0x20
   1139b:	e8 60 ff ff ff       	call   11300 <pic_send_eoi>
   113a0:	83 c4 10             	add    $0x10,%esp

    //运行完一个时间片，判断是否需要执行任务切换，若需要则执行
    //必须写在发送eoi之后，防止发生任务切换导致eoi没有发送，从而无法进行下一次中断
    task_slice_end();   
   113a3:	e8 4e f4 ff ff       	call   107f6 <task_slice_end>
}
   113a8:	90                   	nop
   113a9:	c9                   	leave  
   113aa:	c3                   	ret    

000113ab <init_pit>:

/**
 * @brief  初始化可编程定时器
 * 
 */
static void init_pit(void) {
   113ab:	55                   	push   %ebp
   113ac:	89 e5                	mov    %esp,%ebp
   113ae:	83 ec 18             	sub    $0x18,%esp
    //1.选择定时器的计算器，读取与加载初始值模式，以及工作模式
    outb(PIT_COMMAND_MODE_PORT, PIT_SELECT_COUNTER | PIT_READ_LOAD | PIT_MODE);
   113b1:	6a 36                	push   $0x36
   113b3:	6a 43                	push   $0x43
   113b5:	e8 a8 ff ff ff       	call   11362 <outb>
   113ba:	83 c4 08             	add    $0x8,%esp

    //2.写入16位初始值,即一个中断后期晶体的振荡次数，由确定的加载方式知，先写入低8位，再写入高8位
    uint16_t reload_count = (PIT_OSC_FREQ / 1000) * OS_TICKS_MS;   //确定晶体一个中断周期的震荡次数
   113bd:	66 c7 45 f6 9a 2e    	movw   $0x2e9a,-0xa(%ebp)
    outb(PIT_CHANNEL_DATA_PORT, reload_count & 0xff);
   113c3:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   113c7:	0f b6 c0             	movzbl %al,%eax
   113ca:	50                   	push   %eax
   113cb:	6a 40                	push   $0x40
   113cd:	e8 90 ff ff ff       	call   11362 <outb>
   113d2:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL_DATA_PORT, (reload_count >> 8) & 0xff);
   113d5:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   113d9:	66 c1 e8 08          	shr    $0x8,%ax
   113dd:	0f b6 c0             	movzbl %al,%eax
   113e0:	50                   	push   %eax
   113e1:	6a 40                	push   $0x40
   113e3:	e8 7a ff ff ff       	call   11362 <outb>
   113e8:	83 c4 08             	add    $0x8,%esp

    //3.绑定定时器中断的异常处理程序,并开启该中断
    idt_install(IRQ0_TIMER, (idt_handler_t)exception_handler_time);
   113eb:	83 ec 08             	sub    $0x8,%esp
   113ee:	68 7b 02 01 00       	push   $0x1027b
   113f3:	6a 20                	push   $0x20
   113f5:	e8 7e fb ff ff       	call   10f78 <idt_install>
   113fa:	83 c4 10             	add    $0x10,%esp
    idt_enable(IRQ0_TIMER);
   113fd:	83 ec 0c             	sub    $0xc,%esp
   11400:	6a 20                	push   $0x20
   11402:	e8 b7 fd ff ff       	call   111be <idt_enable>
   11407:	83 c4 10             	add    $0x10,%esp

}
   1140a:	90                   	nop
   1140b:	c9                   	leave  
   1140c:	c3                   	ret    

0001140d <time_init>:

/**
 * @brief  初始化定时器
 * 
 */
void time_init(void) {
   1140d:	55                   	push   %ebp
   1140e:	89 e5                	mov    %esp,%ebp
   11410:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   11413:	c7 05 20 37 02 00 00 	movl   $0x0,0x23720
   1141a:	00 00 00 
    init_pit();
   1141d:	e8 89 ff ff ff       	call   113ab <init_pit>
   11422:	90                   	nop
   11423:	c9                   	leave  
   11424:	c3                   	ret    

00011425 <sti>:
static inline void sti(void) { __asm__ __volatile__("sti"); }
   11425:	55                   	push   %ebp
   11426:	89 e5                	mov    %esp,%ebp
   11428:	fb                   	sti    
   11429:	90                   	nop
   1142a:	5d                   	pop    %ebp
   1142b:	c3                   	ret    

0001142c <kernel_init>:

/**
 * @brief  对内核进行初始化操作
 * 
 */
void kernel_init(boot_info_t* boot_info) {
   1142c:	55                   	push   %ebp
   1142d:	89 e5                	mov    %esp,%ebp
   1142f:	83 ec 08             	sub    $0x8,%esp
    //1.判断是否检测到可用内存
    ASSERT(boot_info->ram_region_count != 0);
   11432:	8b 45 08             	mov    0x8(%ebp),%eax
   11435:	8b 40 50             	mov    0x50(%eax),%eax
   11438:	85 c0                	test   %eax,%eax
   1143a:	75 19                	jne    11455 <kernel_init+0x29>
   1143c:	68 fc 27 01 00       	push   $0x127fc
   11441:	68 bc 28 01 00       	push   $0x128bc
   11446:	6a 1f                	push   $0x1f
   11448:	68 20 28 01 00       	push   $0x12820
   1144d:	e8 ee 04 00 00       	call   11940 <pannic>
   11452:	83 c4 10             	add    $0x10,%esp

    //2.初始化日志程序,便于后期调用
    log_init();
   11455:	e8 e7 0d 00 00       	call   12241 <log_init>

    //3.初始化并重新加载GDT表
    gdt_init();
   1145a:	e8 15 f6 ff ff       	call   10a74 <gdt_init>

    //4.初始化并加载中断描述符表IDT
    idt_init();
   1145f:	e8 e7 fb ff ff       	call   1104b <idt_init>

    //5.初始化定时器的中断处理
    time_init();
   11464:	e8 a4 ff ff ff       	call   1140d <time_init>

    //6.初始化任务管理器
    task_manager_init();
   11469:	e8 8f f1 ff ff       	call   105fd <task_manager_init>
    //初始化完成后将在汇编里重新加载内核代码段与数据段的选择子，并为内核程序分配栈空间

}
   1146e:	90                   	nop
   1146f:	c9                   	leave  
   11470:	c3                   	ret    

00011471 <test_task_1>:
static task_t task_test_task_1;
static task_t task_test_task_2;
static uint32_t test_task_1_stack[1024]; 
static uint32_t test_task_2_stack[1024]; 

void test_task_1(void) {
   11471:	55                   	push   %ebp
   11472:	89 e5                	mov    %esp,%ebp
   11474:	83 ec 18             	sub    $0x18,%esp

    int count = 0;
   11477:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    for (;;) {
        log_printf("task_1: %d", count++);
   1147e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11481:	8d 50 01             	lea    0x1(%eax),%edx
   11484:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11487:	83 ec 08             	sub    $0x8,%esp
   1148a:	50                   	push   %eax
   1148b:	68 55 28 01 00       	push   $0x12855
   11490:	e8 21 0e 00 00       	call   122b6 <log_printf>
   11495:	83 c4 10             	add    $0x10,%esp
        sys_sleep(2000);
   11498:	83 ec 0c             	sub    $0xc,%esp
   1149b:	68 d0 07 00 00       	push   $0x7d0
   114a0:	e8 88 f4 ff ff       	call   1092d <sys_sleep>
   114a5:	83 c4 10             	add    $0x10,%esp
        log_printf("task_1: %d", count++);
   114a8:	eb d4                	jmp    1147e <test_task_1+0xd>

000114aa <test_task_2>:
     }
}

void test_task_2(void) {
   114aa:	55                   	push   %ebp
   114ab:	89 e5                	mov    %esp,%ebp
   114ad:	83 ec 18             	sub    $0x18,%esp

    int count = 0;
   114b0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    for (;;) {
        log_printf("task_2: %d", count++);
   114b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   114ba:	8d 50 01             	lea    0x1(%eax),%edx
   114bd:	89 55 f4             	mov    %edx,-0xc(%ebp)
   114c0:	83 ec 08             	sub    $0x8,%esp
   114c3:	50                   	push   %eax
   114c4:	68 60 28 01 00       	push   $0x12860
   114c9:	e8 e8 0d 00 00       	call   122b6 <log_printf>
   114ce:	83 c4 10             	add    $0x10,%esp
        sys_sleep(1000);
   114d1:	83 ec 0c             	sub    $0xc,%esp
   114d4:	68 e8 03 00 00       	push   $0x3e8
   114d9:	e8 4f f4 ff ff       	call   1092d <sys_sleep>
   114de:	83 c4 10             	add    $0x10,%esp
        log_printf("task_2: %d", count++);
   114e1:	eb d4                	jmp    114b7 <test_task_2+0xd>

000114e3 <init_main>:
     }
}



void init_main(void) {
   114e3:	55                   	push   %ebp
   114e4:	89 e5                	mov    %esp,%ebp
   114e6:	83 ec 18             	sub    $0x18,%esp


    list_test();
   114e9:	e8 70 01 00 00       	call   1165e <list_test>

    log_printf("Kernel is running......");
   114ee:	83 ec 0c             	sub    $0xc,%esp
   114f1:	68 6b 28 01 00       	push   $0x1286b
   114f6:	e8 bb 0d 00 00       	call   122b6 <log_printf>
   114fb:	83 c4 10             	add    $0x10,%esp
    log_printf("Name: %s, Version: %s", "KbOS", OS_VERSION);
   114fe:	83 ec 04             	sub    $0x4,%esp
   11501:	68 83 28 01 00       	push   $0x12883
   11506:	68 89 28 01 00       	push   $0x12889
   1150b:	68 8e 28 01 00       	push   $0x1288e
   11510:	e8 a1 0d 00 00       	call   122b6 <log_printf>
   11515:	83 c4 10             	add    $0x10,%esp

    //当前任务作为任务管理器启用时的第一个任务
    task_first_init();
   11518:	e8 41 f1 ff ff       	call   1065e <task_first_init>
    task_init(&task_test_task_1, "test_task_1", (uint32_t)test_task_1, (uint32_t)&test_task_1_stack[1024]);
   1151d:	ba c0 48 02 00       	mov    $0x248c0,%edx
   11522:	b8 71 14 01 00       	mov    $0x11471,%eax
   11527:	52                   	push   %edx
   11528:	50                   	push   %eax
   11529:	68 a4 28 01 00       	push   $0x128a4
   1152e:	68 40 37 02 00       	push   $0x23740
   11533:	e8 e9 ef ff ff       	call   10521 <task_init>
   11538:	83 c4 10             	add    $0x10,%esp
    task_init(&task_test_task_2, "test_task_2", (uint32_t)test_task_2, (uint32_t)&test_task_2_stack[1024]);
   1153b:	ba c0 58 02 00       	mov    $0x258c0,%edx
   11540:	b8 aa 14 01 00       	mov    $0x114aa,%eax
   11545:	52                   	push   %edx
   11546:	50                   	push   %eax
   11547:	68 b0 28 01 00       	push   $0x128b0
   1154c:	68 00 38 02 00       	push   $0x23800
   11551:	e8 cb ef ff ff       	call   10521 <task_init>
   11556:	83 c4 10             	add    $0x10,%esp


    sti();
   11559:	e8 c7 fe ff ff       	call   11425 <sti>

    int count = 0;
   1155e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;) {
        log_printf("task_2: %d", count++);
   11565:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11568:	8d 50 01             	lea    0x1(%eax),%edx
   1156b:	89 55 f4             	mov    %edx,-0xc(%ebp)
   1156e:	83 ec 08             	sub    $0x8,%esp
   11571:	50                   	push   %eax
   11572:	68 60 28 01 00       	push   $0x12860
   11577:	e8 3a 0d 00 00       	call   122b6 <log_printf>
   1157c:	83 c4 10             	add    $0x10,%esp
        sys_sleep(1000);
   1157f:	83 ec 0c             	sub    $0xc,%esp
   11582:	68 e8 03 00 00       	push   $0x3e8
   11587:	e8 a1 f3 ff ff       	call   1092d <sys_sleep>
   1158c:	83 c4 10             	add    $0x10,%esp
        log_printf("task_2: %d", count++);
   1158f:	eb d4                	jmp    11565 <init_main+0x82>

00011591 <list_init>:
static inline void list_init(list_t *list) {
   11591:	55                   	push   %ebp
   11592:	89 e5                	mov    %esp,%ebp
   11594:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11597:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1159b:	75 19                	jne    115b6 <list_init+0x25>
   1159d:	68 c8 28 01 00       	push   $0x128c8
   115a2:	68 cc 29 01 00       	push   $0x129cc
   115a7:	6a 31                	push   $0x31
   115a9:	68 dc 28 01 00       	push   $0x128dc
   115ae:	e8 8d 03 00 00       	call   11940 <pannic>
   115b3:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   115b6:	8b 45 08             	mov    0x8(%ebp),%eax
   115b9:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   115c0:	8b 45 08             	mov    0x8(%ebp),%eax
   115c3:	8b 50 04             	mov    0x4(%eax),%edx
   115c6:	8b 45 08             	mov    0x8(%ebp),%eax
   115c9:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   115cb:	8b 45 08             	mov    0x8(%ebp),%eax
   115ce:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   115d5:	90                   	nop
   115d6:	c9                   	leave  
   115d7:	c3                   	ret    

000115d8 <list_get_size>:
static inline int list_get_size(list_t *list) {
   115d8:	55                   	push   %ebp
   115d9:	89 e5                	mov    %esp,%ebp
   115db:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   115de:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   115e2:	75 19                	jne    115fd <list_get_size+0x25>
   115e4:	68 c8 28 01 00       	push   $0x128c8
   115e9:	68 d8 29 01 00       	push   $0x129d8
   115ee:	6a 3e                	push   $0x3e
   115f0:	68 dc 28 01 00       	push   $0x128dc
   115f5:	e8 46 03 00 00       	call   11940 <pannic>
   115fa:	83 c4 10             	add    $0x10,%esp
    return list->size;
   115fd:	8b 45 08             	mov    0x8(%ebp),%eax
   11600:	8b 40 08             	mov    0x8(%eax),%eax
}
   11603:	c9                   	leave  
   11604:	c3                   	ret    

00011605 <list_get_first>:
static inline list_node_t *list_get_first(list_t *list) {
   11605:	55                   	push   %ebp
   11606:	89 e5                	mov    %esp,%ebp
   11608:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1160b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1160f:	75 19                	jne    1162a <list_get_first+0x25>
   11611:	68 c8 28 01 00       	push   $0x128c8
   11616:	68 f8 29 01 00       	push   $0x129f8
   1161b:	6a 44                	push   $0x44
   1161d:	68 dc 28 01 00       	push   $0x128dc
   11622:	e8 19 03 00 00       	call   11940 <pannic>
   11627:	83 c4 10             	add    $0x10,%esp
    return list->first;
   1162a:	8b 45 08             	mov    0x8(%ebp),%eax
   1162d:	8b 00                	mov    (%eax),%eax
}
   1162f:	c9                   	leave  
   11630:	c3                   	ret    

00011631 <list_get_last>:

static inline list_node_t *list_get_last(list_t *list) {
   11631:	55                   	push   %ebp
   11632:	89 e5                	mov    %esp,%ebp
   11634:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11637:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1163b:	75 19                	jne    11656 <list_get_last+0x25>
   1163d:	68 c8 28 01 00       	push   $0x128c8
   11642:	68 e8 29 01 00       	push   $0x129e8
   11647:	6a 4a                	push   $0x4a
   11649:	68 dc 28 01 00       	push   $0x128dc
   1164e:	e8 ed 02 00 00       	call   11940 <pannic>
   11653:	83 c4 10             	add    $0x10,%esp

    return list->last;
   11656:	8b 45 08             	mov    0x8(%ebp),%eax
   11659:	8b 40 04             	mov    0x4(%eax),%eax
}
   1165c:	c9                   	leave  
   1165d:	c3                   	ret    

0001165e <list_test>:

#include "tools/list.h"
#include "tools/log.h"
#include "common/types.h"

void list_test(void) {
   1165e:	55                   	push   %ebp
   1165f:	89 e5                	mov    %esp,%ebp
   11661:	56                   	push   %esi
   11662:	53                   	push   %ebx
   11663:	83 ec 70             	sub    $0x70,%esp
    list_t list;
    list_node_t nodes[5];

    list_init(&list);
   11666:	83 ec 0c             	sub    $0xc,%esp
   11669:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1166c:	50                   	push   %eax
   1166d:	e8 1f ff ff ff       	call   11591 <list_init>
   11672:	83 c4 10             	add    $0x10,%esp
    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   11675:	83 ec 0c             	sub    $0xc,%esp
   11678:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1167b:	50                   	push   %eax
   1167c:	e8 57 ff ff ff       	call   115d8 <list_get_size>
   11681:	83 c4 10             	add    $0x10,%esp
   11684:	89 c6                	mov    %eax,%esi
   11686:	83 ec 0c             	sub    $0xc,%esp
   11689:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1168c:	50                   	push   %eax
   1168d:	e8 9f ff ff ff       	call   11631 <list_get_last>
   11692:	83 c4 10             	add    $0x10,%esp
   11695:	89 c3                	mov    %eax,%ebx
   11697:	83 ec 0c             	sub    $0xc,%esp
   1169a:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1169d:	50                   	push   %eax
   1169e:	e8 62 ff ff ff       	call   11605 <list_get_first>
   116a3:	83 c4 10             	add    $0x10,%esp
   116a6:	56                   	push   %esi
   116a7:	53                   	push   %ebx
   116a8:	50                   	push   %eax
   116a9:	68 1c 29 01 00       	push   $0x1291c
   116ae:	e8 03 0c 00 00       	call   122b6 <log_printf>
   116b3:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_insert_first
    for (int i = 0; i < 5; ++i) {
   116b6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   116bd:	eb 3f                	jmp    116fe <list_test+0xa0>
        list_node_t *node = nodes + i;
   116bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
   116c2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   116c9:	8d 45 9c             	lea    -0x64(%ebp),%eax
   116cc:	01 d0                	add    %edx,%eax
   116ce:	89 45 d0             	mov    %eax,-0x30(%ebp)

        log_printf("insert first to list: %d, 0x%x", i, (uint32_t)node);
   116d1:	8b 45 d0             	mov    -0x30(%ebp),%eax
   116d4:	83 ec 04             	sub    $0x4,%esp
   116d7:	50                   	push   %eax
   116d8:	ff 75 f4             	push   -0xc(%ebp)
   116db:	68 44 29 01 00       	push   $0x12944
   116e0:	e8 d1 0b 00 00       	call   122b6 <log_printf>
   116e5:	83 c4 10             	add    $0x10,%esp
        list_insert_first(&list, node);
   116e8:	83 ec 08             	sub    $0x8,%esp
   116eb:	ff 75 d0             	push   -0x30(%ebp)
   116ee:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   116f1:	50                   	push   %eax
   116f2:	e8 c3 07 00 00       	call   11eba <list_insert_first>
   116f7:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   116fa:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   116fe:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   11702:	7e bb                	jle    116bf <list_test+0x61>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   11704:	83 ec 0c             	sub    $0xc,%esp
   11707:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1170a:	50                   	push   %eax
   1170b:	e8 c8 fe ff ff       	call   115d8 <list_get_size>
   11710:	83 c4 10             	add    $0x10,%esp
   11713:	89 c6                	mov    %eax,%esi
   11715:	83 ec 0c             	sub    $0xc,%esp
   11718:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1171b:	50                   	push   %eax
   1171c:	e8 10 ff ff ff       	call   11631 <list_get_last>
   11721:	83 c4 10             	add    $0x10,%esp
   11724:	89 c3                	mov    %eax,%ebx
   11726:	83 ec 0c             	sub    $0xc,%esp
   11729:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1172c:	50                   	push   %eax
   1172d:	e8 d3 fe ff ff       	call   11605 <list_get_first>
   11732:	83 c4 10             	add    $0x10,%esp
   11735:	56                   	push   %esi
   11736:	53                   	push   %ebx
   11737:	50                   	push   %eax
   11738:	68 1c 29 01 00       	push   $0x1291c
   1173d:	e8 74 0b 00 00       	call   122b6 <log_printf>
   11742:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

   
    //测试list_remove_first
    for (int i = 0; i < 5; ++i) {
   11745:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   1174c:	eb 2d                	jmp    1177b <list_test+0x11d>
        list_node_t *node = list_remove_first(&list);
   1174e:	83 ec 0c             	sub    $0xc,%esp
   11751:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11754:	50                   	push   %eax
   11755:	e8 7a 08 00 00       	call   11fd4 <list_remove_first>
   1175a:	83 c4 10             	add    $0x10,%esp
   1175d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        log_printf("remove first: %d, 0x%x", i, (uint32_t)node);
   11760:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   11763:	83 ec 04             	sub    $0x4,%esp
   11766:	50                   	push   %eax
   11767:	ff 75 f0             	push   -0x10(%ebp)
   1176a:	68 63 29 01 00       	push   $0x12963
   1176f:	e8 42 0b 00 00       	call   122b6 <log_printf>
   11774:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   11777:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   1177b:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   1177f:	7e cd                	jle    1174e <list_test+0xf0>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   11781:	83 ec 0c             	sub    $0xc,%esp
   11784:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11787:	50                   	push   %eax
   11788:	e8 4b fe ff ff       	call   115d8 <list_get_size>
   1178d:	83 c4 10             	add    $0x10,%esp
   11790:	89 c6                	mov    %eax,%esi
   11792:	83 ec 0c             	sub    $0xc,%esp
   11795:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11798:	50                   	push   %eax
   11799:	e8 93 fe ff ff       	call   11631 <list_get_last>
   1179e:	83 c4 10             	add    $0x10,%esp
   117a1:	89 c3                	mov    %eax,%ebx
   117a3:	83 ec 0c             	sub    $0xc,%esp
   117a6:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   117a9:	50                   	push   %eax
   117aa:	e8 56 fe ff ff       	call   11605 <list_get_first>
   117af:	83 c4 10             	add    $0x10,%esp
   117b2:	56                   	push   %esi
   117b3:	53                   	push   %ebx
   117b4:	50                   	push   %eax
   117b5:	68 1c 29 01 00       	push   $0x1291c
   117ba:	e8 f7 0a 00 00       	call   122b6 <log_printf>
   117bf:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    

    //测试list_insert_last
    for (int i = 0; i < 5; ++i) {
   117c2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   117c9:	eb 3f                	jmp    1180a <list_test+0x1ac>
        list_node_t *node = nodes + i;
   117cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
   117ce:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   117d5:	8d 45 9c             	lea    -0x64(%ebp),%eax
   117d8:	01 d0                	add    %edx,%eax
   117da:	89 45 d8             	mov    %eax,-0x28(%ebp)

        log_printf("insert last to list: %d, 0x%x", i, (uint32_t)node);
   117dd:	8b 45 d8             	mov    -0x28(%ebp),%eax
   117e0:	83 ec 04             	sub    $0x4,%esp
   117e3:	50                   	push   %eax
   117e4:	ff 75 ec             	push   -0x14(%ebp)
   117e7:	68 7a 29 01 00       	push   $0x1297a
   117ec:	e8 c5 0a 00 00       	call   122b6 <log_printf>
   117f1:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&list, node);
   117f4:	83 ec 08             	sub    $0x8,%esp
   117f7:	ff 75 d8             	push   -0x28(%ebp)
   117fa:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   117fd:	50                   	push   %eax
   117fe:	e8 42 07 00 00       	call   11f45 <list_insert_last>
   11803:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   11806:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   1180a:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   1180e:	7e bb                	jle    117cb <list_test+0x16d>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   11810:	83 ec 0c             	sub    $0xc,%esp
   11813:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11816:	50                   	push   %eax
   11817:	e8 bc fd ff ff       	call   115d8 <list_get_size>
   1181c:	83 c4 10             	add    $0x10,%esp
   1181f:	89 c6                	mov    %eax,%esi
   11821:	83 ec 0c             	sub    $0xc,%esp
   11824:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11827:	50                   	push   %eax
   11828:	e8 04 fe ff ff       	call   11631 <list_get_last>
   1182d:	83 c4 10             	add    $0x10,%esp
   11830:	89 c3                	mov    %eax,%ebx
   11832:	83 ec 0c             	sub    $0xc,%esp
   11835:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11838:	50                   	push   %eax
   11839:	e8 c7 fd ff ff       	call   11605 <list_get_first>
   1183e:	83 c4 10             	add    $0x10,%esp
   11841:	56                   	push   %esi
   11842:	53                   	push   %ebx
   11843:	50                   	push   %eax
   11844:	68 1c 29 01 00       	push   $0x1291c
   11849:	e8 68 0a 00 00       	call   122b6 <log_printf>
   1184e:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_remove_last
    for (int i = 0; i < 5; ++i) {
   11851:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   11858:	eb 2d                	jmp    11887 <list_test+0x229>
        list_node_t *node = list_remove_last(&list);
   1185a:	83 ec 0c             	sub    $0xc,%esp
   1185d:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11860:	50                   	push   %eax
   11861:	e8 1f 08 00 00       	call   12085 <list_remove_last>
   11866:	83 c4 10             	add    $0x10,%esp
   11869:	89 45 dc             	mov    %eax,-0x24(%ebp)
        log_printf("remove last: %d, 0x%x", i, (uint32_t)node);
   1186c:	8b 45 dc             	mov    -0x24(%ebp),%eax
   1186f:	83 ec 04             	sub    $0x4,%esp
   11872:	50                   	push   %eax
   11873:	ff 75 e8             	push   -0x18(%ebp)
   11876:	68 98 29 01 00       	push   $0x12998
   1187b:	e8 36 0a 00 00       	call   122b6 <log_printf>
   11880:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   11883:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   11887:	83 7d e8 04          	cmpl   $0x4,-0x18(%ebp)
   1188b:	7e cd                	jle    1185a <list_test+0x1fc>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   1188d:	83 ec 0c             	sub    $0xc,%esp
   11890:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11893:	50                   	push   %eax
   11894:	e8 3f fd ff ff       	call   115d8 <list_get_size>
   11899:	83 c4 10             	add    $0x10,%esp
   1189c:	89 c6                	mov    %eax,%esi
   1189e:	83 ec 0c             	sub    $0xc,%esp
   118a1:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   118a4:	50                   	push   %eax
   118a5:	e8 87 fd ff ff       	call   11631 <list_get_last>
   118aa:	83 c4 10             	add    $0x10,%esp
   118ad:	89 c3                	mov    %eax,%ebx
   118af:	83 ec 0c             	sub    $0xc,%esp
   118b2:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   118b5:	50                   	push   %eax
   118b6:	e8 4a fd ff ff       	call   11605 <list_get_first>
   118bb:	83 c4 10             	add    $0x10,%esp
   118be:	56                   	push   %esi
   118bf:	53                   	push   %ebx
   118c0:	50                   	push   %eax
   118c1:	68 1c 29 01 00       	push   $0x1291c
   118c6:	e8 eb 09 00 00       	call   122b6 <log_printf>
   118cb:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    
    struct type_t {
        int i;
        list_node_t node;
    }v = {0x123456};
   118ce:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
   118d5:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
   118dc:	c7 45 98 00 00 00 00 	movl   $0x0,-0x68(%ebp)
   118e3:	c7 45 90 56 34 12 00 	movl   $0x123456,-0x70(%ebp)

    list_node_t *v_node = &v.node;
   118ea:	8d 45 90             	lea    -0x70(%ebp),%eax
   118ed:	83 c0 04             	add    $0x4,%eax
   118f0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    struct type_t *p = list_node_parent(v_node, struct type_t, node);  
   118f3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   118f7:	74 08                	je     11901 <list_test+0x2a3>
   118f9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   118fc:	83 e8 04             	sub    $0x4,%eax
   118ff:	eb 05                	jmp    11906 <list_test+0x2a8>
   11901:	b8 00 00 00 00       	mov    $0x0,%eax
   11906:	89 45 e0             	mov    %eax,-0x20(%ebp)

    log_printf("v addr = 0x%x", (uint32_t)&v);
   11909:	8d 45 90             	lea    -0x70(%ebp),%eax
   1190c:	83 ec 08             	sub    $0x8,%esp
   1190f:	50                   	push   %eax
   11910:	68 ae 29 01 00       	push   $0x129ae
   11915:	e8 9c 09 00 00       	call   122b6 <log_printf>
   1191a:	83 c4 10             	add    $0x10,%esp
    log_printf("p addr = 0x%x", (uint32_t)p);  
   1191d:	8b 45 e0             	mov    -0x20(%ebp),%eax
   11920:	83 ec 08             	sub    $0x8,%esp
   11923:	50                   	push   %eax
   11924:	68 bc 29 01 00       	push   $0x129bc
   11929:	e8 88 09 00 00       	call   122b6 <log_printf>
   1192e:	83 c4 10             	add    $0x10,%esp

 }
   11931:	90                   	nop
   11932:	8d 65 f8             	lea    -0x8(%ebp),%esp
   11935:	5b                   	pop    %ebx
   11936:	5e                   	pop    %esi
   11937:	5d                   	pop    %ebp
   11938:	c3                   	ret    

00011939 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   11939:	55                   	push   %ebp
   1193a:	89 e5                	mov    %esp,%ebp
   1193c:	f4                   	hlt    
   1193d:	90                   	nop
   1193e:	5d                   	pop    %ebp
   1193f:	c3                   	ret    

00011940 <pannic>:
 * @param file 异常所在文件绝对路径
 * @param line 异常所在行号
 * @param func 异常所在函数名 
 * @param reason 异常的原因
 */
void pannic(const char *file, int line, const char *func, const char *reason) {
   11940:	55                   	push   %ebp
   11941:	89 e5                	mov    %esp,%ebp
   11943:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert faild! %s", reason);
   11946:	83 ec 08             	sub    $0x8,%esp
   11949:	ff 75 14             	push   0x14(%ebp)
   1194c:	68 07 2a 01 00       	push   $0x12a07
   11951:	e8 60 09 00 00       	call   122b6 <log_printf>
   11956:	83 c4 10             	add    $0x10,%esp
    log_printf("file:\t%s\nline:\t%d\nfunc:\t%s", file, line, func);
   11959:	ff 75 10             	push   0x10(%ebp)
   1195c:	ff 75 0c             	push   0xc(%ebp)
   1195f:	ff 75 08             	push   0x8(%ebp)
   11962:	68 18 2a 01 00       	push   $0x12a18
   11967:	e8 4a 09 00 00       	call   122b6 <log_printf>
   1196c:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   1196f:	e8 c5 ff ff ff       	call   11939 <hlt>
   11974:	eb f9                	jmp    1196f <pannic+0x2f>

00011976 <kernel_strcpy>:
 * @brief  拷贝字符串
 * 
 * @param dest 目标字符串
 * @param src  源字符串
 */
void kernel_strcpy(char *dest, const char *src) {
   11976:	55                   	push   %ebp
   11977:	89 e5                	mov    %esp,%ebp
    //1.判断是否为NULL
    if (!dest || !src) return;
   11979:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1197d:	74 3b                	je     119ba <kernel_strcpy+0x44>
   1197f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11983:	74 35                	je     119ba <kernel_strcpy+0x44>

    //2.拷贝 src '\0' 以前的部分到 dest中
    //TODO:完成（访问未初始化的内存）的异常中断后就只判断src是否读到'\0'
    while (*dest && *src) {
   11985:	eb 17                	jmp    1199e <kernel_strcpy+0x28>
        *(dest++) = *(src++);
   11987:	8b 55 0c             	mov    0xc(%ebp),%edx
   1198a:	8d 42 01             	lea    0x1(%edx),%eax
   1198d:	89 45 0c             	mov    %eax,0xc(%ebp)
   11990:	8b 45 08             	mov    0x8(%ebp),%eax
   11993:	8d 48 01             	lea    0x1(%eax),%ecx
   11996:	89 4d 08             	mov    %ecx,0x8(%ebp)
   11999:	0f b6 12             	movzbl (%edx),%edx
   1199c:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   1199e:	8b 45 08             	mov    0x8(%ebp),%eax
   119a1:	0f b6 00             	movzbl (%eax),%eax
   119a4:	84 c0                	test   %al,%al
   119a6:	74 0a                	je     119b2 <kernel_strcpy+0x3c>
   119a8:	8b 45 0c             	mov    0xc(%ebp),%eax
   119ab:	0f b6 00             	movzbl (%eax),%eax
   119ae:	84 c0                	test   %al,%al
   119b0:	75 d5                	jne    11987 <kernel_strcpy+0x11>
    }

    //3.添加结束符
    *dest = '\0';
   119b2:	8b 45 08             	mov    0x8(%ebp),%eax
   119b5:	c6 00 00             	movb   $0x0,(%eax)
   119b8:	eb 01                	jmp    119bb <kernel_strcpy+0x45>
    if (!dest || !src) return;
   119ba:	90                   	nop
    
}
   119bb:	5d                   	pop    %ebp
   119bc:	c3                   	ret    

000119bd <kernel_strncpy>:
 * 
 * @param dest 目的字符串
 * @param src 源字符串
 * @param size 拷贝字符串的长度，包含'\0'
 */
void kernel_strncpy(char* dest, const char *src, int size) {
   119bd:	55                   	push   %ebp
   119be:	89 e5                	mov    %esp,%ebp
    //1.判断是否需要拷贝
    if (!dest || !src || !size) return;
   119c0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   119c4:	74 45                	je     11a0b <kernel_strncpy+0x4e>
   119c6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   119ca:	74 3f                	je     11a0b <kernel_strncpy+0x4e>
   119cc:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   119d0:	74 39                	je     11a0b <kernel_strncpy+0x4e>

    //2.size的大小包含了'\0'，所以要预留一个空间给'\0'，只能拷贝 size - 1个字符
    while ((size-- > 1) && (*src)) {
   119d2:	eb 17                	jmp    119eb <kernel_strncpy+0x2e>
        *(dest++) = *(src++);
   119d4:	8b 55 0c             	mov    0xc(%ebp),%edx
   119d7:	8d 42 01             	lea    0x1(%edx),%eax
   119da:	89 45 0c             	mov    %eax,0xc(%ebp)
   119dd:	8b 45 08             	mov    0x8(%ebp),%eax
   119e0:	8d 48 01             	lea    0x1(%eax),%ecx
   119e3:	89 4d 08             	mov    %ecx,0x8(%ebp)
   119e6:	0f b6 12             	movzbl (%edx),%edx
   119e9:	88 10                	mov    %dl,(%eax)
    while ((size-- > 1) && (*src)) {
   119eb:	8b 45 10             	mov    0x10(%ebp),%eax
   119ee:	8d 50 ff             	lea    -0x1(%eax),%edx
   119f1:	89 55 10             	mov    %edx,0x10(%ebp)
   119f4:	83 f8 01             	cmp    $0x1,%eax
   119f7:	7e 0a                	jle    11a03 <kernel_strncpy+0x46>
   119f9:	8b 45 0c             	mov    0xc(%ebp),%eax
   119fc:	0f b6 00             	movzbl (%eax),%eax
   119ff:	84 c0                	test   %al,%al
   11a01:	75 d1                	jne    119d4 <kernel_strncpy+0x17>
    }

    //3.添加结束符
    *dest = '\0';
   11a03:	8b 45 08             	mov    0x8(%ebp),%eax
   11a06:	c6 00 00             	movb   $0x0,(%eax)
   11a09:	eb 01                	jmp    11a0c <kernel_strncpy+0x4f>
    if (!dest || !src || !size) return;
   11a0b:	90                   	nop
}
   11a0c:	5d                   	pop    %ebp
   11a0d:	c3                   	ret    

00011a0e <kernel_strncmp>:
 * @param s2 字符串2
 * @param size 比较前比较的子串长度，从下标0开始到(size - 1)
 * 
 * @return int ==: 0, > : 1, < : -1
 */
int kernel_strncmp(const char *s1, const char *s2, int size) {
   11a0e:	55                   	push   %ebp
   11a0f:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) return 0;
   11a11:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11a15:	74 06                	je     11a1d <kernel_strncmp+0xf>
   11a17:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11a1b:	75 0f                	jne    11a2c <kernel_strncmp+0x1e>
   11a1d:	b8 00 00 00 00       	mov    $0x0,%eax
   11a22:	eb 52                	jmp    11a76 <kernel_strncmp+0x68>

    while (*s1 && *s2 && --size && *s1 == *s2 ) {
        ++s1;
   11a24:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        ++s2;        
   11a28:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && --size && *s1 == *s2 ) {
   11a2c:	8b 45 08             	mov    0x8(%ebp),%eax
   11a2f:	0f b6 00             	movzbl (%eax),%eax
   11a32:	84 c0                	test   %al,%al
   11a34:	74 24                	je     11a5a <kernel_strncmp+0x4c>
   11a36:	8b 45 0c             	mov    0xc(%ebp),%eax
   11a39:	0f b6 00             	movzbl (%eax),%eax
   11a3c:	84 c0                	test   %al,%al
   11a3e:	74 1a                	je     11a5a <kernel_strncmp+0x4c>
   11a40:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   11a44:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11a48:	74 10                	je     11a5a <kernel_strncmp+0x4c>
   11a4a:	8b 45 08             	mov    0x8(%ebp),%eax
   11a4d:	0f b6 10             	movzbl (%eax),%edx
   11a50:	8b 45 0c             	mov    0xc(%ebp),%eax
   11a53:	0f b6 00             	movzbl (%eax),%eax
   11a56:	38 c2                	cmp    %al,%dl
   11a58:	74 ca                	je     11a24 <kernel_strncmp+0x16>
    }

    if (*s1 > *s2) return 1;
   11a5a:	8b 45 08             	mov    0x8(%ebp),%eax
   11a5d:	0f b6 10             	movzbl (%eax),%edx
   11a60:	8b 45 0c             	mov    0xc(%ebp),%eax
   11a63:	0f b6 00             	movzbl (%eax),%eax
   11a66:	38 c2                	cmp    %al,%dl
   11a68:	7e 07                	jle    11a71 <kernel_strncmp+0x63>
   11a6a:	b8 01 00 00 00       	mov    $0x1,%eax
   11a6f:	eb 05                	jmp    11a76 <kernel_strncmp+0x68>
    else if (*s1 < *s1) return -1;
    else return 0;
   11a71:	b8 00 00 00 00       	mov    $0x0,%eax
    
}
   11a76:	5d                   	pop    %ebp
   11a77:	c3                   	ret    

00011a78 <kernel_strlen>:
 * @brief  获取字符串str的长度
 * 
 * @param str 
 * @return int 
 */
int kernel_strlen(const char *str) {
   11a78:	55                   	push   %ebp
   11a79:	89 e5                	mov    %esp,%ebp
   11a7b:	83 ec 10             	sub    $0x10,%esp
    if (!str) return 0;
   11a7e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11a82:	75 07                	jne    11a8b <kernel_strlen+0x13>
   11a84:	b8 00 00 00 00       	mov    $0x0,%eax
   11a89:	eb 20                	jmp    11aab <kernel_strlen+0x33>

    int len = 0;
   11a8b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*(str++)) len++;
   11a92:	eb 04                	jmp    11a98 <kernel_strlen+0x20>
   11a94:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   11a98:	8b 45 08             	mov    0x8(%ebp),%eax
   11a9b:	8d 50 01             	lea    0x1(%eax),%edx
   11a9e:	89 55 08             	mov    %edx,0x8(%ebp)
   11aa1:	0f b6 00             	movzbl (%eax),%eax
   11aa4:	84 c0                	test   %al,%al
   11aa6:	75 ec                	jne    11a94 <kernel_strlen+0x1c>

    return len;
   11aa8:	8b 45 fc             	mov    -0x4(%ebp),%eax
    
}
   11aab:	c9                   	leave  
   11aac:	c3                   	ret    

00011aad <kernel_memcpy>:
 * 
 * @param dest 目的内存的起始地址
 * @param src 原内存的起始地址
 * @param size 复制的内存字节大小
 */
void kernel_memcpy(void *dest, const void *src, int size) {
   11aad:	55                   	push   %ebp
   11aae:	89 e5                	mov    %esp,%ebp
   11ab0:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) return;
   11ab3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11ab7:	74 40                	je     11af9 <kernel_memcpy+0x4c>
   11ab9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11abd:	74 3a                	je     11af9 <kernel_memcpy+0x4c>
   11abf:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11ac3:	74 34                	je     11af9 <kernel_memcpy+0x4c>

    uint8_t *d = (uint8_t*)dest;
   11ac5:	8b 45 08             	mov    0x8(%ebp),%eax
   11ac8:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *s = (uint8_t*)src;
   11acb:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ace:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (size--) {
   11ad1:	eb 17                	jmp    11aea <kernel_memcpy+0x3d>
        *(d++) = *(s++);
   11ad3:	8b 55 f8             	mov    -0x8(%ebp),%edx
   11ad6:	8d 42 01             	lea    0x1(%edx),%eax
   11ad9:	89 45 f8             	mov    %eax,-0x8(%ebp)
   11adc:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11adf:	8d 48 01             	lea    0x1(%eax),%ecx
   11ae2:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   11ae5:	0f b6 12             	movzbl (%edx),%edx
   11ae8:	88 10                	mov    %dl,(%eax)
    while (size--) {
   11aea:	8b 45 10             	mov    0x10(%ebp),%eax
   11aed:	8d 50 ff             	lea    -0x1(%eax),%edx
   11af0:	89 55 10             	mov    %edx,0x10(%ebp)
   11af3:	85 c0                	test   %eax,%eax
   11af5:	75 dc                	jne    11ad3 <kernel_memcpy+0x26>
   11af7:	eb 01                	jmp    11afa <kernel_memcpy+0x4d>
    if (!dest || !src || !size) return;
   11af9:	90                   	nop
    }
    
}
   11afa:	c9                   	leave  
   11afb:	c3                   	ret    

00011afc <kernel_memset>:
 * 
 * @param dest 区域起始地址
 * @param v 每个字节的值
 * @param size 赋值的内存的大小
 */
void kernel_memset(void *dest, uint8_t v, int size) {
   11afc:	55                   	push   %ebp
   11afd:	89 e5                	mov    %esp,%ebp
   11aff:	83 ec 14             	sub    $0x14,%esp
   11b02:	8b 45 0c             	mov    0xc(%ebp),%eax
   11b05:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size) return;
   11b08:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11b0c:	74 2c                	je     11b3a <kernel_memset+0x3e>
   11b0e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11b12:	74 26                	je     11b3a <kernel_memset+0x3e>

    uint8_t *d = (uint8_t*)dest;
   11b14:	8b 45 08             	mov    0x8(%ebp),%eax
   11b17:	89 45 fc             	mov    %eax,-0x4(%ebp)
    
    while (size--) {
   11b1a:	eb 0f                	jmp    11b2b <kernel_memset+0x2f>
        *(d++) = v;
   11b1c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11b1f:	8d 50 01             	lea    0x1(%eax),%edx
   11b22:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11b25:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   11b29:	88 10                	mov    %dl,(%eax)
    while (size--) {
   11b2b:	8b 45 10             	mov    0x10(%ebp),%eax
   11b2e:	8d 50 ff             	lea    -0x1(%eax),%edx
   11b31:	89 55 10             	mov    %edx,0x10(%ebp)
   11b34:	85 c0                	test   %eax,%eax
   11b36:	75 e4                	jne    11b1c <kernel_memset+0x20>
   11b38:	eb 01                	jmp    11b3b <kernel_memset+0x3f>
    if (!dest || !size) return;
   11b3a:	90                   	nop
    }
    
}
   11b3b:	c9                   	leave  
   11b3c:	c3                   	ret    

00011b3d <kernel_memcmp>:
 * @param d1 区域1的起始地址
 * @param d2 区域2的起始地址
 * @param size 比较的字节数量
 * @return int ==:0, >:1, <:-1
 */
int kernel_memcmp(const void *dest1, const void *dest2, int size) {
   11b3d:	55                   	push   %ebp
   11b3e:	89 e5                	mov    %esp,%ebp
   11b40:	83 ec 10             	sub    $0x10,%esp
    if (!dest1 || !dest2 || !size) return 0;
   11b43:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11b47:	74 0c                	je     11b55 <kernel_memcmp+0x18>
   11b49:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11b4d:	74 06                	je     11b55 <kernel_memcmp+0x18>
   11b4f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11b53:	75 07                	jne    11b5c <kernel_memcmp+0x1f>
   11b55:	b8 00 00 00 00       	mov    $0x0,%eax
   11b5a:	eb 63                	jmp    11bbf <kernel_memcmp+0x82>

    uint8_t *d1 = (uint8_t*)dest1;
   11b5c:	8b 45 08             	mov    0x8(%ebp),%eax
   11b5f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d2 = (uint8_t*)dest2;
   11b62:	8b 45 0c             	mov    0xc(%ebp),%eax
   11b65:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (--size && *d1 == *d2) {
   11b68:	eb 08                	jmp    11b72 <kernel_memcmp+0x35>
        d1++;
   11b6a:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
        d2++;
   11b6e:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (--size && *d1 == *d2) {
   11b72:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   11b76:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11b7a:	74 10                	je     11b8c <kernel_memcmp+0x4f>
   11b7c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11b7f:	0f b6 10             	movzbl (%eax),%edx
   11b82:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11b85:	0f b6 00             	movzbl (%eax),%eax
   11b88:	38 c2                	cmp    %al,%dl
   11b8a:	74 de                	je     11b6a <kernel_memcmp+0x2d>
    }

    if (*d1 > *d2) return 1;
   11b8c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11b8f:	0f b6 10             	movzbl (%eax),%edx
   11b92:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11b95:	0f b6 00             	movzbl (%eax),%eax
   11b98:	38 c2                	cmp    %al,%dl
   11b9a:	76 07                	jbe    11ba3 <kernel_memcmp+0x66>
   11b9c:	b8 01 00 00 00       	mov    $0x1,%eax
   11ba1:	eb 1c                	jmp    11bbf <kernel_memcmp+0x82>
    else if (*d1 < *d2) return -1;
   11ba3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11ba6:	0f b6 10             	movzbl (%eax),%edx
   11ba9:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11bac:	0f b6 00             	movzbl (%eax),%eax
   11baf:	38 c2                	cmp    %al,%dl
   11bb1:	73 07                	jae    11bba <kernel_memcmp+0x7d>
   11bb3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11bb8:	eb 05                	jmp    11bbf <kernel_memcmp+0x82>
    else return 0;
   11bba:	b8 00 00 00 00       	mov    $0x0,%eax

}
   11bbf:	c9                   	leave  
   11bc0:	c3                   	ret    

00011bc1 <kernel_sprintf>:



void kernel_sprintf(char *buf, const char *formate, ...) {
   11bc1:	55                   	push   %ebp
   11bc2:	89 e5                	mov    %esp,%ebp
   11bc4:	83 ec 18             	sub    $0x18,%esp
    //获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   11bc7:	8d 45 10             	lea    0x10(%ebp),%eax
   11bca:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_vsprintf(buf, formate, args);
   11bcd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11bd0:	83 ec 04             	sub    $0x4,%esp
   11bd3:	50                   	push   %eax
   11bd4:	ff 75 0c             	push   0xc(%ebp)
   11bd7:	ff 75 08             	push   0x8(%ebp)
   11bda:	e8 06 00 00 00       	call   11be5 <kernel_vsprintf>
   11bdf:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   11be2:	90                   	nop
   11be3:	c9                   	leave  
   11be4:	c3                   	ret    

00011be5 <kernel_vsprintf>:
 * 
 * @param buf 
 * @param formate 
 * @param args 
 */
void kernel_vsprintf(char *buf, const char *formate, va_list args) {
   11be5:	55                   	push   %ebp
   11be6:	89 e5                	mov    %esp,%ebp
   11be8:	83 ec 28             	sub    $0x28,%esp
    //定义状态机，包含两种状态
    enum {NORMAL, READ_FMT} state = NORMAL;
   11beb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    
    char *curr = buf;
   11bf2:	8b 45 08             	mov    0x8(%ebp),%eax
   11bf5:	89 45 f0             	mov    %eax,-0x10(%ebp)

    char ch;

    while ((ch = *(formate++)) != '\0') {
   11bf8:	e9 68 01 00 00       	jmp    11d65 <kernel_vsprintf+0x180>
        switch (state) {
   11bfd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11c01:	74 0b                	je     11c0e <kernel_vsprintf+0x29>
   11c03:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   11c07:	74 2b                	je     11c34 <kernel_vsprintf+0x4f>
   11c09:	e9 56 01 00 00       	jmp    11d64 <kernel_vsprintf+0x17f>
        case NORMAL: 
            if (ch == '%') state = READ_FMT;
   11c0e:	80 7d e7 25          	cmpb   $0x25,-0x19(%ebp)
   11c12:	75 0c                	jne    11c20 <kernel_vsprintf+0x3b>
   11c14:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   11c1b:	e9 45 01 00 00       	jmp    11d65 <kernel_vsprintf+0x180>
            else *(curr++) = ch;
   11c20:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11c23:	8d 50 01             	lea    0x1(%eax),%edx
   11c26:	89 55 f0             	mov    %edx,-0x10(%ebp)
   11c29:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   11c2d:	88 10                	mov    %dl,(%eax)
            break;
   11c2f:	e9 31 01 00 00       	jmp    11d65 <kernel_vsprintf+0x180>
        case READ_FMT:
            if (ch == 's') {
   11c34:	80 7d e7 73          	cmpb   $0x73,-0x19(%ebp)
   11c38:	75 47                	jne    11c81 <kernel_vsprintf+0x9c>
                const char * str = va_arg(args, char *);
   11c3a:	8b 45 10             	mov    0x10(%ebp),%eax
   11c3d:	8d 50 04             	lea    0x4(%eax),%edx
   11c40:	89 55 10             	mov    %edx,0x10(%ebp)
   11c43:	8b 00                	mov    (%eax),%eax
   11c45:	89 45 ec             	mov    %eax,-0x14(%ebp)
                int len = kernel_strlen(str);
   11c48:	ff 75 ec             	push   -0x14(%ebp)
   11c4b:	e8 28 fe ff ff       	call   11a78 <kernel_strlen>
   11c50:	83 c4 04             	add    $0x4,%esp
   11c53:	89 45 e8             	mov    %eax,-0x18(%ebp)
                while (len--) {
   11c56:	eb 17                	jmp    11c6f <kernel_vsprintf+0x8a>
                    *(curr++) = *(str++);
   11c58:	8b 55 ec             	mov    -0x14(%ebp),%edx
   11c5b:	8d 42 01             	lea    0x1(%edx),%eax
   11c5e:	89 45 ec             	mov    %eax,-0x14(%ebp)
   11c61:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11c64:	8d 48 01             	lea    0x1(%eax),%ecx
   11c67:	89 4d f0             	mov    %ecx,-0x10(%ebp)
   11c6a:	0f b6 12             	movzbl (%edx),%edx
   11c6d:	88 10                	mov    %dl,(%eax)
                while (len--) {
   11c6f:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11c72:	8d 50 ff             	lea    -0x1(%eax),%edx
   11c75:	89 55 e8             	mov    %edx,-0x18(%ebp)
   11c78:	85 c0                	test   %eax,%eax
   11c7a:	75 dc                	jne    11c58 <kernel_vsprintf+0x73>
   11c7c:	e9 da 00 00 00       	jmp    11d5b <kernel_vsprintf+0x176>
                }
            } else if (ch == 'd') {
   11c81:	80 7d e7 64          	cmpb   $0x64,-0x19(%ebp)
   11c85:	75 37                	jne    11cbe <kernel_vsprintf+0xd9>
                const int num = va_arg(args, int);
   11c87:	8b 45 10             	mov    0x10(%ebp),%eax
   11c8a:	8d 50 04             	lea    0x4(%eax),%edx
   11c8d:	89 55 10             	mov    %edx,0x10(%ebp)
   11c90:	8b 00                	mov    (%eax),%eax
   11c92:	89 45 d8             	mov    %eax,-0x28(%ebp)
                kernel_itoa(curr, num, 10);
   11c95:	83 ec 04             	sub    $0x4,%esp
   11c98:	6a 0a                	push   $0xa
   11c9a:	ff 75 d8             	push   -0x28(%ebp)
   11c9d:	ff 75 f0             	push   -0x10(%ebp)
   11ca0:	e8 dd 00 00 00       	call   11d82 <kernel_itoa>
   11ca5:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr);   
   11ca8:	83 ec 0c             	sub    $0xc,%esp
   11cab:	ff 75 f0             	push   -0x10(%ebp)
   11cae:	e8 c5 fd ff ff       	call   11a78 <kernel_strlen>
   11cb3:	83 c4 10             	add    $0x10,%esp
   11cb6:	01 45 f0             	add    %eax,-0x10(%ebp)
   11cb9:	e9 9d 00 00 00       	jmp    11d5b <kernel_vsprintf+0x176>
            } else if (ch == 'x' || ch == 'X') {
   11cbe:	80 7d e7 78          	cmpb   $0x78,-0x19(%ebp)
   11cc2:	74 06                	je     11cca <kernel_vsprintf+0xe5>
   11cc4:	80 7d e7 58          	cmpb   $0x58,-0x19(%ebp)
   11cc8:	75 34                	jne    11cfe <kernel_vsprintf+0x119>
                const int num = va_arg(args, int);
   11cca:	8b 45 10             	mov    0x10(%ebp),%eax
   11ccd:	8d 50 04             	lea    0x4(%eax),%edx
   11cd0:	89 55 10             	mov    %edx,0x10(%ebp)
   11cd3:	8b 00                	mov    (%eax),%eax
   11cd5:	89 45 dc             	mov    %eax,-0x24(%ebp)
                kernel_itoa(curr, num, 16);
   11cd8:	83 ec 04             	sub    $0x4,%esp
   11cdb:	6a 10                	push   $0x10
   11cdd:	ff 75 dc             	push   -0x24(%ebp)
   11ce0:	ff 75 f0             	push   -0x10(%ebp)
   11ce3:	e8 9a 00 00 00       	call   11d82 <kernel_itoa>
   11ce8:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr); 
   11ceb:	83 ec 0c             	sub    $0xc,%esp
   11cee:	ff 75 f0             	push   -0x10(%ebp)
   11cf1:	e8 82 fd ff ff       	call   11a78 <kernel_strlen>
   11cf6:	83 c4 10             	add    $0x10,%esp
   11cf9:	01 45 f0             	add    %eax,-0x10(%ebp)
            } else if (ch == 'x' || ch == 'X') {
   11cfc:	eb 5d                	jmp    11d5b <kernel_vsprintf+0x176>
            } else if (ch == 'b') {
   11cfe:	80 7d e7 62          	cmpb   $0x62,-0x19(%ebp)
   11d02:	75 34                	jne    11d38 <kernel_vsprintf+0x153>
                 const int num = va_arg(args, int);
   11d04:	8b 45 10             	mov    0x10(%ebp),%eax
   11d07:	8d 50 04             	lea    0x4(%eax),%edx
   11d0a:	89 55 10             	mov    %edx,0x10(%ebp)
   11d0d:	8b 00                	mov    (%eax),%eax
   11d0f:	89 45 e0             	mov    %eax,-0x20(%ebp)
                kernel_itoa(curr, num, 2);
   11d12:	83 ec 04             	sub    $0x4,%esp
   11d15:	6a 02                	push   $0x2
   11d17:	ff 75 e0             	push   -0x20(%ebp)
   11d1a:	ff 75 f0             	push   -0x10(%ebp)
   11d1d:	e8 60 00 00 00       	call   11d82 <kernel_itoa>
   11d22:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr); 
   11d25:	83 ec 0c             	sub    $0xc,%esp
   11d28:	ff 75 f0             	push   -0x10(%ebp)
   11d2b:	e8 48 fd ff ff       	call   11a78 <kernel_strlen>
   11d30:	83 c4 10             	add    $0x10,%esp
   11d33:	01 45 f0             	add    %eax,-0x10(%ebp)
   11d36:	eb 23                	jmp    11d5b <kernel_vsprintf+0x176>
            } else if (ch == 'c') {
   11d38:	80 7d e7 63          	cmpb   $0x63,-0x19(%ebp)
   11d3c:	75 1d                	jne    11d5b <kernel_vsprintf+0x176>
                char c = va_arg(args, int);
   11d3e:	8b 45 10             	mov    0x10(%ebp),%eax
   11d41:	8d 50 04             	lea    0x4(%eax),%edx
   11d44:	89 55 10             	mov    %edx,0x10(%ebp)
   11d47:	8b 00                	mov    (%eax),%eax
   11d49:	88 45 e6             	mov    %al,-0x1a(%ebp)
                *(curr++) = c;
   11d4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11d4f:	8d 50 01             	lea    0x1(%eax),%edx
   11d52:	89 55 f0             	mov    %edx,-0x10(%ebp)
   11d55:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   11d59:	88 10                	mov    %dl,(%eax)
            }
            state = NORMAL;
   11d5b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            break;
   11d62:	eb 01                	jmp    11d65 <kernel_vsprintf+0x180>
        default:
            break;
   11d64:	90                   	nop
    while ((ch = *(formate++)) != '\0') {
   11d65:	8b 45 0c             	mov    0xc(%ebp),%eax
   11d68:	8d 50 01             	lea    0x1(%eax),%edx
   11d6b:	89 55 0c             	mov    %edx,0xc(%ebp)
   11d6e:	0f b6 00             	movzbl (%eax),%eax
   11d71:	88 45 e7             	mov    %al,-0x19(%ebp)
   11d74:	80 7d e7 00          	cmpb   $0x0,-0x19(%ebp)
   11d78:	0f 85 7f fe ff ff    	jne    11bfd <kernel_vsprintf+0x18>
        }
    }
    

}
   11d7e:	90                   	nop
   11d7f:	90                   	nop
   11d80:	c9                   	leave  
   11d81:	c3                   	ret    

00011d82 <kernel_itoa>:
 * 
 * @param buf 缓冲区
 * @param num 整数
 * @param base 转换的进制规则
 */
void kernel_itoa(char *buf, int num, int base) {
   11d82:	55                   	push   %ebp
   11d83:	89 e5                	mov    %esp,%ebp
   11d85:	81 ec 90 00 00 00    	sub    $0x90,%esp
    char * p = buf;
   11d8b:	8b 45 08             	mov    0x8(%ebp),%eax
   11d8e:	89 45 fc             	mov    %eax,-0x4(%ebp)

    if (base != 2 && base != 8 && base != 10 && base != 16) {
   11d91:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   11d95:	74 1d                	je     11db4 <kernel_itoa+0x32>
   11d97:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   11d9b:	74 17                	je     11db4 <kernel_itoa+0x32>
   11d9d:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   11da1:	74 11                	je     11db4 <kernel_itoa+0x32>
   11da3:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   11da7:	74 0b                	je     11db4 <kernel_itoa+0x32>
        *buf = '\0';
   11da9:	8b 45 08             	mov    0x8(%ebp),%eax
   11dac:	c6 00 00             	movb   $0x0,(%eax)
        return;
   11daf:	e9 a2 00 00 00       	jmp    11e56 <kernel_itoa+0xd4>
    }

    if(num < 0)  {
   11db4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11db8:	79 11                	jns    11dcb <kernel_itoa+0x49>
        *(p++) = '-';
   11dba:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11dbd:	8d 50 01             	lea    0x1(%eax),%edx
   11dc0:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11dc3:	c6 00 2d             	movb   $0x2d,(%eax)
        num = -num;
   11dc6:	f7 5d 0c             	negl   0xc(%ebp)
   11dc9:	eb 1a                	jmp    11de5 <kernel_itoa+0x63>
    } else if (num == 0) {
   11dcb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11dcf:	75 14                	jne    11de5 <kernel_itoa+0x63>
        *(p++) = '0';
   11dd1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11dd4:	8d 50 01             	lea    0x1(%eax),%edx
   11dd7:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11dda:	c6 00 30             	movb   $0x30,(%eax)
        *p = '\0';
   11ddd:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11de0:	c6 00 00             	movb   $0x0,(%eax)
        return;
   11de3:	eb 71                	jmp    11e56 <kernel_itoa+0xd4>
    }
    

    static const char *num_to_char = {"0123456789abcdef"};
    char arr[128];
    int len = 0;
   11de5:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (num > 0) {
   11dec:	eb 2e                	jmp    11e1c <kernel_itoa+0x9a>
        arr[len++] = num_to_char[num % base];
   11dee:	8b 0d 90 2b 01 00    	mov    0x12b90,%ecx
   11df4:	8b 45 0c             	mov    0xc(%ebp),%eax
   11df7:	99                   	cltd   
   11df8:	f7 7d 10             	idivl  0x10(%ebp)
   11dfb:	89 d0                	mov    %edx,%eax
   11dfd:	01 c1                	add    %eax,%ecx
   11dff:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11e02:	8d 50 01             	lea    0x1(%eax),%edx
   11e05:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11e08:	0f b6 11             	movzbl (%ecx),%edx
   11e0b:	88 94 05 74 ff ff ff 	mov    %dl,-0x8c(%ebp,%eax,1)
        num /= base;
   11e12:	8b 45 0c             	mov    0xc(%ebp),%eax
   11e15:	99                   	cltd   
   11e16:	f7 7d 10             	idivl  0x10(%ebp)
   11e19:	89 45 0c             	mov    %eax,0xc(%ebp)
    while (num > 0) {
   11e1c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11e20:	7f cc                	jg     11dee <kernel_itoa+0x6c>
    }

    for (int i = len - 1; i >= 0; --i) {
   11e22:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11e25:	83 e8 01             	sub    $0x1,%eax
   11e28:	89 45 f4             	mov    %eax,-0xc(%ebp)
   11e2b:	eb 1d                	jmp    11e4a <kernel_itoa+0xc8>
            *(p++) = arr[i];
   11e2d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11e30:	8d 50 01             	lea    0x1(%eax),%edx
   11e33:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11e36:	8d 8d 74 ff ff ff    	lea    -0x8c(%ebp),%ecx
   11e3c:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11e3f:	01 ca                	add    %ecx,%edx
   11e41:	0f b6 12             	movzbl (%edx),%edx
   11e44:	88 10                	mov    %dl,(%eax)
    for (int i = len - 1; i >= 0; --i) {
   11e46:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
   11e4a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11e4e:	79 dd                	jns    11e2d <kernel_itoa+0xab>
    }
    *p = '\0';
   11e50:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11e53:	c6 00 00             	movb   $0x0,(%eax)
   11e56:	c9                   	leave  
   11e57:	c3                   	ret    

00011e58 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   11e58:	55                   	push   %ebp
   11e59:	89 e5                	mov    %esp,%ebp
   11e5b:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11e5e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11e62:	75 19                	jne    11e7d <list_is_empty+0x25>
   11e64:	68 44 2a 01 00       	push   $0x12a44
   11e69:	68 28 2b 01 00       	push   $0x12b28
   11e6e:	6a 38                	push   $0x38
   11e70:	68 58 2a 01 00       	push   $0x12a58
   11e75:	e8 c6 fa ff ff       	call   11940 <pannic>
   11e7a:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   11e7d:	8b 45 08             	mov    0x8(%ebp),%eax
   11e80:	8b 40 08             	mov    0x8(%eax),%eax
   11e83:	85 c0                	test   %eax,%eax
   11e85:	0f 94 c0             	sete   %al
   11e88:	0f b6 c0             	movzbl %al,%eax
}
   11e8b:	c9                   	leave  
   11e8c:	c3                   	ret    

00011e8d <list_get_size>:
static inline int list_get_size(list_t *list) {
   11e8d:	55                   	push   %ebp
   11e8e:	89 e5                	mov    %esp,%ebp
   11e90:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11e93:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11e97:	75 19                	jne    11eb2 <list_get_size+0x25>
   11e99:	68 44 2a 01 00       	push   $0x12a44
   11e9e:	68 60 2b 01 00       	push   $0x12b60
   11ea3:	6a 3e                	push   $0x3e
   11ea5:	68 58 2a 01 00       	push   $0x12a58
   11eaa:	e8 91 fa ff ff       	call   11940 <pannic>
   11eaf:	83 c4 10             	add    $0x10,%esp
    return list->size;
   11eb2:	8b 45 08             	mov    0x8(%ebp),%eax
   11eb5:	8b 40 08             	mov    0x8(%eax),%eax
}
   11eb8:	c9                   	leave  
   11eb9:	c3                   	ret    

00011eba <list_insert_first>:
 * 
 */

#include "tools/list.h"

void list_insert_first(list_t *list, list_node_t *node) {
   11eba:	55                   	push   %ebp
   11ebb:	89 e5                	mov    %esp,%ebp
   11ebd:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   11ec0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11ec4:	74 06                	je     11ecc <list_insert_first+0x12>
   11ec6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11eca:	75 19                	jne    11ee5 <list_insert_first+0x2b>
   11ecc:	68 98 2a 01 00       	push   $0x12a98
   11ed1:	68 14 2b 01 00       	push   $0x12b14
   11ed6:	6a 0f                	push   $0xf
   11ed8:	68 c8 2a 01 00       	push   $0x12ac8
   11edd:	e8 5e fa ff ff       	call   11940 <pannic>
   11ee2:	83 c4 10             	add    $0x10,%esp

    node->next = list->first;
   11ee5:	8b 45 08             	mov    0x8(%ebp),%eax
   11ee8:	8b 10                	mov    (%eax),%edx
   11eea:	8b 45 0c             	mov    0xc(%ebp),%eax
   11eed:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   11ef0:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ef3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   11ef9:	83 ec 0c             	sub    $0xc,%esp
   11efc:	ff 75 08             	push   0x8(%ebp)
   11eff:	e8 54 ff ff ff       	call   11e58 <list_is_empty>
   11f04:	83 c4 10             	add    $0x10,%esp
   11f07:	85 c0                	test   %eax,%eax
   11f09:	74 16                	je     11f21 <list_insert_first+0x67>
        list->first = list->last = node;
   11f0b:	8b 45 08             	mov    0x8(%ebp),%eax
   11f0e:	8b 55 0c             	mov    0xc(%ebp),%edx
   11f11:	89 50 04             	mov    %edx,0x4(%eax)
   11f14:	8b 45 08             	mov    0x8(%ebp),%eax
   11f17:	8b 50 04             	mov    0x4(%eax),%edx
   11f1a:	8b 45 08             	mov    0x8(%ebp),%eax
   11f1d:	89 10                	mov    %edx,(%eax)
   11f1f:	eb 12                	jmp    11f33 <list_insert_first+0x79>
    } else {
        list->first->pre = node;
   11f21:	8b 45 08             	mov    0x8(%ebp),%eax
   11f24:	8b 00                	mov    (%eax),%eax
   11f26:	8b 55 0c             	mov    0xc(%ebp),%edx
   11f29:	89 10                	mov    %edx,(%eax)
        list->first = node;
   11f2b:	8b 45 08             	mov    0x8(%ebp),%eax
   11f2e:	8b 55 0c             	mov    0xc(%ebp),%edx
   11f31:	89 10                	mov    %edx,(%eax)
    }

    list->size++;
   11f33:	8b 45 08             	mov    0x8(%ebp),%eax
   11f36:	8b 40 08             	mov    0x8(%eax),%eax
   11f39:	8d 50 01             	lea    0x1(%eax),%edx
   11f3c:	8b 45 08             	mov    0x8(%ebp),%eax
   11f3f:	89 50 08             	mov    %edx,0x8(%eax)
}
   11f42:	90                   	nop
   11f43:	c9                   	leave  
   11f44:	c3                   	ret    

00011f45 <list_insert_last>:

void list_insert_last(list_t *list, list_node_t *node) {
   11f45:	55                   	push   %ebp
   11f46:	89 e5                	mov    %esp,%ebp
   11f48:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   11f4b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11f4f:	74 06                	je     11f57 <list_insert_last+0x12>
   11f51:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11f55:	75 19                	jne    11f70 <list_insert_last+0x2b>
   11f57:	68 98 2a 01 00       	push   $0x12a98
   11f5c:	68 38 2b 01 00       	push   $0x12b38
   11f61:	6a 1f                	push   $0x1f
   11f63:	68 c8 2a 01 00       	push   $0x12ac8
   11f68:	e8 d3 f9 ff ff       	call   11940 <pannic>
   11f6d:	83 c4 10             	add    $0x10,%esp

    node->pre = list->last;
   11f70:	8b 45 08             	mov    0x8(%ebp),%eax
   11f73:	8b 50 04             	mov    0x4(%eax),%edx
   11f76:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f79:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   11f7b:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f7e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)


    if (list_is_empty(list)) {
   11f85:	83 ec 0c             	sub    $0xc,%esp
   11f88:	ff 75 08             	push   0x8(%ebp)
   11f8b:	e8 c8 fe ff ff       	call   11e58 <list_is_empty>
   11f90:	83 c4 10             	add    $0x10,%esp
   11f93:	85 c0                	test   %eax,%eax
   11f95:	74 16                	je     11fad <list_insert_last+0x68>
        list->first = list->last = node;
   11f97:	8b 45 08             	mov    0x8(%ebp),%eax
   11f9a:	8b 55 0c             	mov    0xc(%ebp),%edx
   11f9d:	89 50 04             	mov    %edx,0x4(%eax)
   11fa0:	8b 45 08             	mov    0x8(%ebp),%eax
   11fa3:	8b 50 04             	mov    0x4(%eax),%edx
   11fa6:	8b 45 08             	mov    0x8(%ebp),%eax
   11fa9:	89 10                	mov    %edx,(%eax)
   11fab:	eb 15                	jmp    11fc2 <list_insert_last+0x7d>
    } else {
        list->last->next = node;
   11fad:	8b 45 08             	mov    0x8(%ebp),%eax
   11fb0:	8b 40 04             	mov    0x4(%eax),%eax
   11fb3:	8b 55 0c             	mov    0xc(%ebp),%edx
   11fb6:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   11fb9:	8b 45 08             	mov    0x8(%ebp),%eax
   11fbc:	8b 55 0c             	mov    0xc(%ebp),%edx
   11fbf:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->size++;
   11fc2:	8b 45 08             	mov    0x8(%ebp),%eax
   11fc5:	8b 40 08             	mov    0x8(%eax),%eax
   11fc8:	8d 50 01             	lea    0x1(%eax),%edx
   11fcb:	8b 45 08             	mov    0x8(%ebp),%eax
   11fce:	89 50 08             	mov    %edx,0x8(%eax)

}
   11fd1:	90                   	nop
   11fd2:	c9                   	leave  
   11fd3:	c3                   	ret    

00011fd4 <list_remove_first>:

list_node_t* list_remove_first(list_t *list){
   11fd4:	55                   	push   %ebp
   11fd5:	89 e5                	mov    %esp,%ebp
   11fd7:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   11fda:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11fde:	75 19                	jne    11ff9 <list_remove_first+0x25>
   11fe0:	68 fe 2a 01 00       	push   $0x12afe
   11fe5:	68 4c 2b 01 00       	push   $0x12b4c
   11fea:	6a 31                	push   $0x31
   11fec:	68 c8 2a 01 00       	push   $0x12ac8
   11ff1:	e8 4a f9 ff ff       	call   11940 <pannic>
   11ff6:	83 c4 10             	add    $0x10,%esp
    if (list_is_empty(list)) {
   11ff9:	83 ec 0c             	sub    $0xc,%esp
   11ffc:	ff 75 08             	push   0x8(%ebp)
   11fff:	e8 54 fe ff ff       	call   11e58 <list_is_empty>
   12004:	83 c4 10             	add    $0x10,%esp
   12007:	85 c0                	test   %eax,%eax
   12009:	74 07                	je     12012 <list_remove_first+0x3e>
        return (list_node_t*)0;
   1200b:	b8 00 00 00 00       	mov    $0x0,%eax
   12010:	eb 71                	jmp    12083 <list_remove_first+0xaf>
    }

    list_node_t *ret = list->first;
   12012:	8b 45 08             	mov    0x8(%ebp),%eax
   12015:	8b 00                	mov    (%eax),%eax
   12017:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   1201a:	83 ec 0c             	sub    $0xc,%esp
   1201d:	ff 75 08             	push   0x8(%ebp)
   12020:	e8 68 fe ff ff       	call   11e8d <list_get_size>
   12025:	83 c4 10             	add    $0x10,%esp
   12028:	83 f8 01             	cmp    $0x1,%eax
   1202b:	75 17                	jne    12044 <list_remove_first+0x70>
        list->first = list->last = (list_node_t*)0;
   1202d:	8b 45 08             	mov    0x8(%ebp),%eax
   12030:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12037:	8b 45 08             	mov    0x8(%ebp),%eax
   1203a:	8b 50 04             	mov    0x4(%eax),%edx
   1203d:	8b 45 08             	mov    0x8(%ebp),%eax
   12040:	89 10                	mov    %edx,(%eax)
   12042:	eb 18                	jmp    1205c <list_remove_first+0x88>
    } else {
        list->first = list->first->next;
   12044:	8b 45 08             	mov    0x8(%ebp),%eax
   12047:	8b 00                	mov    (%eax),%eax
   12049:	8b 50 04             	mov    0x4(%eax),%edx
   1204c:	8b 45 08             	mov    0x8(%ebp),%eax
   1204f:	89 10                	mov    %edx,(%eax)
        list->first->pre = (list_node_t*)0;
   12051:	8b 45 08             	mov    0x8(%ebp),%eax
   12054:	8b 00                	mov    (%eax),%eax
   12056:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    list->size--;
   1205c:	8b 45 08             	mov    0x8(%ebp),%eax
   1205f:	8b 40 08             	mov    0x8(%eax),%eax
   12062:	8d 50 ff             	lea    -0x1(%eax),%edx
   12065:	8b 45 08             	mov    0x8(%ebp),%eax
   12068:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   1206b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1206e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12075:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12078:	8b 50 04             	mov    0x4(%eax),%edx
   1207b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1207e:	89 10                	mov    %edx,(%eax)
    return ret;
   12080:	8b 45 f4             	mov    -0xc(%ebp),%eax
 }
   12083:	c9                   	leave  
   12084:	c3                   	ret    

00012085 <list_remove_last>:

list_node_t* list_remove_last(list_t *list) {
   12085:	55                   	push   %ebp
   12086:	89 e5                	mov    %esp,%ebp
   12088:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   1208b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1208f:	75 19                	jne    120aa <list_remove_last+0x25>
   12091:	68 fe 2a 01 00       	push   $0x12afe
   12096:	68 70 2b 01 00       	push   $0x12b70
   1209b:	6a 46                	push   $0x46
   1209d:	68 c8 2a 01 00       	push   $0x12ac8
   120a2:	e8 99 f8 ff ff       	call   11940 <pannic>
   120a7:	83 c4 10             	add    $0x10,%esp
     if (list_is_empty(list)) {
   120aa:	83 ec 0c             	sub    $0xc,%esp
   120ad:	ff 75 08             	push   0x8(%ebp)
   120b0:	e8 a3 fd ff ff       	call   11e58 <list_is_empty>
   120b5:	83 c4 10             	add    $0x10,%esp
   120b8:	85 c0                	test   %eax,%eax
   120ba:	74 07                	je     120c3 <list_remove_last+0x3e>
        return (list_node_t*)0;
   120bc:	b8 00 00 00 00       	mov    $0x0,%eax
   120c1:	eb 75                	jmp    12138 <list_remove_last+0xb3>
    }

    list_node_t *ret = list->last;
   120c3:	8b 45 08             	mov    0x8(%ebp),%eax
   120c6:	8b 40 04             	mov    0x4(%eax),%eax
   120c9:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   120cc:	83 ec 0c             	sub    $0xc,%esp
   120cf:	ff 75 08             	push   0x8(%ebp)
   120d2:	e8 b6 fd ff ff       	call   11e8d <list_get_size>
   120d7:	83 c4 10             	add    $0x10,%esp
   120da:	83 f8 01             	cmp    $0x1,%eax
   120dd:	75 17                	jne    120f6 <list_remove_last+0x71>
        list->first = list->last = (list_node_t*)0;
   120df:	8b 45 08             	mov    0x8(%ebp),%eax
   120e2:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   120e9:	8b 45 08             	mov    0x8(%ebp),%eax
   120ec:	8b 50 04             	mov    0x4(%eax),%edx
   120ef:	8b 45 08             	mov    0x8(%ebp),%eax
   120f2:	89 10                	mov    %edx,(%eax)
   120f4:	eb 1b                	jmp    12111 <list_remove_last+0x8c>
    } else {
        list->last = list->last->pre;
   120f6:	8b 45 08             	mov    0x8(%ebp),%eax
   120f9:	8b 40 04             	mov    0x4(%eax),%eax
   120fc:	8b 10                	mov    (%eax),%edx
   120fe:	8b 45 08             	mov    0x8(%ebp),%eax
   12101:	89 50 04             	mov    %edx,0x4(%eax)
        list->last->next = (list_node_t*)0;
   12104:	8b 45 08             	mov    0x8(%ebp),%eax
   12107:	8b 40 04             	mov    0x4(%eax),%eax
   1210a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    }

    list->size--;
   12111:	8b 45 08             	mov    0x8(%ebp),%eax
   12114:	8b 40 08             	mov    0x8(%eax),%eax
   12117:	8d 50 ff             	lea    -0x1(%eax),%edx
   1211a:	8b 45 08             	mov    0x8(%ebp),%eax
   1211d:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   12120:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12123:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1212a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1212d:	8b 50 04             	mov    0x4(%eax),%edx
   12130:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12133:	89 10                	mov    %edx,(%eax)
    return ret;
   12135:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   12138:	c9                   	leave  
   12139:	c3                   	ret    

0001213a <list_remove>:

list_node_t* list_remove(list_t *list, list_node_t *node) {
   1213a:	55                   	push   %ebp
   1213b:	89 e5                	mov    %esp,%ebp
   1213d:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   12140:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12144:	74 06                	je     1214c <list_remove+0x12>
   12146:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1214a:	75 19                	jne    12165 <list_remove+0x2b>
   1214c:	68 98 2a 01 00       	push   $0x12a98
   12151:	68 84 2b 01 00       	push   $0x12b84
   12156:	6a 5b                	push   $0x5b
   12158:	68 c8 2a 01 00       	push   $0x12ac8
   1215d:	e8 de f7 ff ff       	call   11940 <pannic>
   12162:	83 c4 10             	add    $0x10,%esp

    if (list_is_empty(list)) {
   12165:	83 ec 0c             	sub    $0xc,%esp
   12168:	ff 75 08             	push   0x8(%ebp)
   1216b:	e8 e8 fc ff ff       	call   11e58 <list_is_empty>
   12170:	83 c4 10             	add    $0x10,%esp
   12173:	85 c0                	test   %eax,%eax
   12175:	74 0a                	je     12181 <list_remove+0x47>
        return (list_node_t*)0;
   12177:	b8 00 00 00 00       	mov    $0x0,%eax
   1217c:	e9 80 00 00 00       	jmp    12201 <list_remove+0xc7>
    }

    if (node == list->first) list->first = node->next;
   12181:	8b 45 08             	mov    0x8(%ebp),%eax
   12184:	8b 00                	mov    (%eax),%eax
   12186:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12189:	75 0b                	jne    12196 <list_remove+0x5c>
   1218b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1218e:	8b 50 04             	mov    0x4(%eax),%edx
   12191:	8b 45 08             	mov    0x8(%ebp),%eax
   12194:	89 10                	mov    %edx,(%eax)
    if (node == list->last) list->last = node->pre;
   12196:	8b 45 08             	mov    0x8(%ebp),%eax
   12199:	8b 40 04             	mov    0x4(%eax),%eax
   1219c:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1219f:	75 0b                	jne    121ac <list_remove+0x72>
   121a1:	8b 45 0c             	mov    0xc(%ebp),%eax
   121a4:	8b 10                	mov    (%eax),%edx
   121a6:	8b 45 08             	mov    0x8(%ebp),%eax
   121a9:	89 50 04             	mov    %edx,0x4(%eax)

    if (node->pre) node->pre->next = node->next;
   121ac:	8b 45 0c             	mov    0xc(%ebp),%eax
   121af:	8b 00                	mov    (%eax),%eax
   121b1:	85 c0                	test   %eax,%eax
   121b3:	74 0e                	je     121c3 <list_remove+0x89>
   121b5:	8b 45 0c             	mov    0xc(%ebp),%eax
   121b8:	8b 00                	mov    (%eax),%eax
   121ba:	8b 55 0c             	mov    0xc(%ebp),%edx
   121bd:	8b 52 04             	mov    0x4(%edx),%edx
   121c0:	89 50 04             	mov    %edx,0x4(%eax)
    if (node->next) node->next->pre = node->pre;
   121c3:	8b 45 0c             	mov    0xc(%ebp),%eax
   121c6:	8b 40 04             	mov    0x4(%eax),%eax
   121c9:	85 c0                	test   %eax,%eax
   121cb:	74 0d                	je     121da <list_remove+0xa0>
   121cd:	8b 45 0c             	mov    0xc(%ebp),%eax
   121d0:	8b 40 04             	mov    0x4(%eax),%eax
   121d3:	8b 55 0c             	mov    0xc(%ebp),%edx
   121d6:	8b 12                	mov    (%edx),%edx
   121d8:	89 10                	mov    %edx,(%eax)

    node->pre = node->next = (list_node_t*)0;
   121da:	8b 45 0c             	mov    0xc(%ebp),%eax
   121dd:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   121e4:	8b 45 0c             	mov    0xc(%ebp),%eax
   121e7:	8b 50 04             	mov    0x4(%eax),%edx
   121ea:	8b 45 0c             	mov    0xc(%ebp),%eax
   121ed:	89 10                	mov    %edx,(%eax)
    list->size--;
   121ef:	8b 45 08             	mov    0x8(%ebp),%eax
   121f2:	8b 40 08             	mov    0x8(%eax),%eax
   121f5:	8d 50 ff             	lea    -0x1(%eax),%edx
   121f8:	8b 45 08             	mov    0x8(%ebp),%eax
   121fb:	89 50 08             	mov    %edx,0x8(%eax)

    return node;
   121fe:	8b 45 0c             	mov    0xc(%ebp),%eax
   12201:	c9                   	leave  
   12202:	c3                   	ret    

00012203 <inb>:
static inline uint8_t inb(uint16_t port) {
   12203:	55                   	push   %ebp
   12204:	89 e5                	mov    %esp,%ebp
   12206:	83 ec 14             	sub    $0x14,%esp
   12209:	8b 45 08             	mov    0x8(%ebp),%eax
   1220c:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   12210:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   12214:	89 c2                	mov    %eax,%edx
   12216:	ec                   	in     (%dx),%al
   12217:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   1221a:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   1221e:	c9                   	leave  
   1221f:	c3                   	ret    

00012220 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   12220:	55                   	push   %ebp
   12221:	89 e5                	mov    %esp,%ebp
   12223:	83 ec 08             	sub    $0x8,%esp
   12226:	8b 45 08             	mov    0x8(%ebp),%eax
   12229:	8b 55 0c             	mov    0xc(%ebp),%edx
   1222c:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   12230:	89 d0                	mov    %edx,%eax
   12232:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   12235:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12239:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1223d:	ee                   	out    %al,(%dx)
}
   1223e:	90                   	nop
   1223f:	c9                   	leave  
   12240:	c3                   	ret    

00012241 <log_init>:
#include "cpu/idt.h"
/**
 * @brief  初始化串行端口寄存器COM1
 * 
 */
void log_init(void) {
   12241:	55                   	push   %ebp
   12242:	89 e5                	mov    %esp,%ebp
    outb(COM1_PORT + 1, 0x00);
   12244:	6a 00                	push   $0x0
   12246:	68 f9 03 00 00       	push   $0x3f9
   1224b:	e8 d0 ff ff ff       	call   12220 <outb>
   12250:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   12253:	68 80 00 00 00       	push   $0x80
   12258:	68 fb 03 00 00       	push   $0x3fb
   1225d:	e8 be ff ff ff       	call   12220 <outb>
   12262:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   12265:	6a 03                	push   $0x3
   12267:	68 f8 03 00 00       	push   $0x3f8
   1226c:	e8 af ff ff ff       	call   12220 <outb>
   12271:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   12274:	6a 00                	push   $0x0
   12276:	68 f9 03 00 00       	push   $0x3f9
   1227b:	e8 a0 ff ff ff       	call   12220 <outb>
   12280:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   12283:	6a 03                	push   $0x3
   12285:	68 fb 03 00 00       	push   $0x3fb
   1228a:	e8 91 ff ff ff       	call   12220 <outb>
   1228f:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0xc7);
   12292:	68 c7 00 00 00       	push   $0xc7
   12297:	68 fa 03 00 00       	push   $0x3fa
   1229c:	e8 7f ff ff ff       	call   12220 <outb>
   122a1:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0f);
   122a4:	6a 0f                	push   $0xf
   122a6:	68 fc 03 00 00       	push   $0x3fc
   122ab:	e8 70 ff ff ff       	call   12220 <outb>
   122b0:	83 c4 08             	add    $0x8,%esp
}
   122b3:	90                   	nop
   122b4:	c9                   	leave  
   122b5:	c3                   	ret    

000122b6 <log_printf>:
 * @brief  格式化输出到串口
 * 
 * @param formate 
 * @param ... 
 */
void log_printf(const char *formate, ...) {
   122b6:	55                   	push   %ebp
   122b7:	89 e5                	mov    %esp,%ebp
   122b9:	81 ec 98 00 00 00    	sub    $0x98,%esp
    //1.设置字符缓冲区
    char str_buf[128];
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   122bf:	83 ec 04             	sub    $0x4,%esp
   122c2:	68 80 00 00 00       	push   $0x80
   122c7:	6a 00                	push   $0x0
   122c9:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
   122cf:	50                   	push   %eax
   122d0:	e8 27 f8 ff ff       	call   11afc <kernel_memset>
   122d5:	83 c4 10             	add    $0x10,%esp
    
    //2.获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   122d8:	8d 45 0c             	lea    0xc(%ebp),%eax
   122db:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
    kernel_vsprintf(str_buf, formate, args);
   122e1:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
   122e7:	83 ec 04             	sub    $0x4,%esp
   122ea:	50                   	push   %eax
   122eb:	ff 75 08             	push   0x8(%ebp)
   122ee:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
   122f4:	50                   	push   %eax
   122f5:	e8 eb f8 ff ff       	call   11be5 <kernel_vsprintf>
   122fa:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    const char *p = str_buf;
   122fd:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
   12303:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将以下资源放入临界资源包含区，防止在运行时发生进程切换（cpu关中断）
    idt_state_t state = idt_enter_protection(); //TODO:加锁
   12306:	e8 2e f0 ff ff       	call   11339 <idt_enter_protection>
   1230b:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //3.将字符串输出到串口
    while (*p != '\0') {
   1230e:	eb 57                	jmp    12367 <log_printf+0xb1>
        //4.判断串口是否正在忙碌，是则阻塞等待
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0);
   12310:	90                   	nop
   12311:	83 ec 0c             	sub    $0xc,%esp
   12314:	68 fd 03 00 00       	push   $0x3fd
   12319:	e8 e5 fe ff ff       	call   12203 <inb>
   1231e:	83 c4 10             	add    $0x10,%esp
   12321:	0f b6 c0             	movzbl %al,%eax
   12324:	83 e0 40             	and    $0x40,%eax
   12327:	85 c0                	test   %eax,%eax
   12329:	74 e6                	je     12311 <log_printf+0x5b>

        if (*p == '\n') outb(COM1_PORT, '\r');
   1232b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1232e:	0f b6 00             	movzbl (%eax),%eax
   12331:	3c 0a                	cmp    $0xa,%al
   12333:	75 12                	jne    12347 <log_printf+0x91>
   12335:	83 ec 08             	sub    $0x8,%esp
   12338:	6a 0d                	push   $0xd
   1233a:	68 f8 03 00 00       	push   $0x3f8
   1233f:	e8 dc fe ff ff       	call   12220 <outb>
   12344:	83 c4 10             	add    $0x10,%esp
        
        outb(COM1_PORT, *(p++));
   12347:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1234a:	8d 50 01             	lea    0x1(%eax),%edx
   1234d:	89 55 f4             	mov    %edx,-0xc(%ebp)
   12350:	0f b6 00             	movzbl (%eax),%eax
   12353:	0f b6 c0             	movzbl %al,%eax
   12356:	83 ec 08             	sub    $0x8,%esp
   12359:	50                   	push   %eax
   1235a:	68 f8 03 00 00       	push   $0x3f8
   1235f:	e8 bc fe ff ff       	call   12220 <outb>
   12364:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0') {
   12367:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1236a:	0f b6 00             	movzbl (%eax),%eax
   1236d:	84 c0                	test   %al,%al
   1236f:	75 9f                	jne    12310 <log_printf+0x5a>
    }
    
    //5.换行
    outb(COM1_PORT, '\r');
   12371:	83 ec 08             	sub    $0x8,%esp
   12374:	6a 0d                	push   $0xd
   12376:	68 f8 03 00 00       	push   $0x3f8
   1237b:	e8 a0 fe ff ff       	call   12220 <outb>
   12380:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   12383:	83 ec 08             	sub    $0x8,%esp
   12386:	6a 0a                	push   $0xa
   12388:	68 f8 03 00 00       	push   $0x3f8
   1238d:	e8 8e fe ff ff       	call   12220 <outb>
   12392:	83 c4 10             	add    $0x10,%esp

    //执行完毕，将资源离开临界资源保护区，(cpu开中断)
    idt_leave_protection(state);    //TODO:解锁
   12395:	83 ec 0c             	sub    $0xc,%esp
   12398:	ff 75 f0             	push   -0x10(%ebp)
   1239b:	e8 b1 ef ff ff       	call   11351 <idt_leave_protection>
   123a0:	83 c4 10             	add    $0x10,%esp
   123a3:	90                   	nop
   123a4:	c9                   	leave  
   123a5:	c3                   	ret    
