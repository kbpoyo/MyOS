
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf:     file format elf32-i386
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x000058b0 memsz 0x000058b0 flags r-x
    LOAD off    0x00007000 vaddr 0x00016000 paddr 0x00016000 align 2**12
         filesz 0x00000044 memsz 0x00024a20 flags rw-
    LOAD off    0x00008000 vaddr 0x80000000 paddr 0x0003b000 align 2**12
         filesz 0x0000019e memsz 0x0000019e flags rwx
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000048a5  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000ff0  000148c0  000148c0  000058c0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000044  00016000  00016000  00007000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00023a20  00017000  00017000  00007044  2**12
                  ALLOC
  4 .first_task   0000019e  80000000  0003b000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  5 .debug_line   0000275f  00000000  00000000  0000819e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_line_str 0000081c  00000000  00000000  0000a8fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   00006d88  00000000  00000000  0000b119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00001eac  00000000  00000000  00011ea1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_aranges 00000280  00000000  00000000  00013d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    00001622  00000000  00000000  00013fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_rnglists 0000004e  00000000  00000000  000155f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .comment      0000002b  00000000  00000000  00015640  2**0
                  CONTENTS, READONLY
 13 .debug_frame  00001990  00000000  00000000  0001566c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010012 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
000102c7 l     F .text	0000000d down2
000102d4 l     F .text	00000017 up2
000102eb l     F .text	0000000c write_cr3
000102f7 l     F .text	0000000b pde_index
00010302 l     F .text	00000010 pte_index
00010312 l     F .text	00000027 pde_to_pt_addr
00010339 l     F .text	00000027 pte_to_pg_addr
00010360 l     F .text	0000000f get_pte_privilege
0001036f l     F .text	00000011 mmu_set_page_dir
00017000 l     O .bss	00007e88 paddr_alloc
0001f000 l     O .bss	00001000 kernel_page_dir
00010380 l     F .text	00000025 page_index
000103a5 l     F .text	00000056 page_ref_add
000103fb l     F .text	00000068 page_ref_sub
00010463 l     F .text	0000004e get_page_ref
000104b1 l     F .text	00000051 clear_page_ref
00010502 l     F .text	00000087 addr_alloc_init
00010589 l     F .text	00000067 addr_alloc_page
000105f0 l     F .text	0000009c addr_free_page
0001068c l     F .text	00000066 show_mem_info
000106f2 l     F .text	00000037 total_mem_size
00014a08 l     O .rodata	00000011 __func__.3
00016000 l     O .data	00000040 kernal_map.2
00014a1c l     O .rodata	0000000c __func__.1
00010e0f l     F .text	00000010 curr_page_dir
00014a28 l     O .rodata	00000011 __func__.0
00000000 l    df *ABS*	00000000 task.c
00010fae l     F .text	0000003d list_node_init
00014bec l     O .rodata	0000000f __func__.11
00010feb l     F .text	0000002d list_node_next
00014c4c l     O .rodata	0000000f __func__.5
00011018 l     F .text	00000047 list_init
00014bfc l     O .rodata	0000000a __func__.10
0001105f l     F .text	00000035 list_is_empty
00014c5c l     O .rodata	0000000e __func__.4
00011094 l     F .text	0000002d list_get_size
00014c8c l     O .rodata	0000000e __func__.1
000110c1 l     F .text	0000002c list_get_first
00014c3c l     O .rodata	0000000f __func__.6
000110ed l     F .text	00000017 up2
00011104 l     F .text	00000007 hlt
0001110b l     F .text	0000000c write_cr3
00011117 l     F .text	0000001a far_jump
00011131 l     F .text	00000017 write_tr
00011148 l     F .text	00000011 mmu_set_page_dir
00020000 l     O .bss	000001a8 task_manager
000201c0 l     O .bss	00005e00 task_table
00025fc0 l     O .bss	00000014 task_table_lock
00011159 l     F .text	0000001f switch_to_tss
00011193 l     F .text	00000172 tss_init
00014be0 l     O .rodata	0000000a __func__.12
00025fe0 l     O .bss	00000200 empty_task_stack
000114a6 l     F .text	0000000a empty_task
00014c08 l     O .rodata	00000010 __func__.9
00014c18 l     O .rodata	0000000f __func__.8
00014c28 l     O .rodata	00000011 __func__.7
00014c6c l     O .rodata	0000000f __func__.3
00014c7c l     O .rodata	00000010 __func__.2
00011971 l     F .text	00000068 alloc_task
000119d9 l     F .text	00000033 free_task
00011c55 l     F .text	00000114 load_phdr
00011d69 l     F .text	000001f4 load_elf_file
00011f5d l     F .text	000000f1 copy_args
00014c9c l     O .rodata	0000000a __func__.0
00000000 l    df *ABS*	00000000 gate.c
00000000 l    df *ABS*	00000000 gdt.c
00012244 l     F .text	00000028 lgdt
000261e0 l     O .bss	00010000 gdt_table
000361e0 l     O .bss	00002000 is_alloc
000381e0 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 idt.c
0001247a l     F .text	00000007 cli
00012481 l     F .text	00000007 sti
00012488 l     F .text	00000007 hlt
0001248f l     F .text	0000001d inb
000124ac l     F .text	00000021 outb
000124cd l     F .text	00000028 lidt
000124f5 l     F .text	00000011 read_cr2
00012506 l     F .text	00000010 read_eflags
00012516 l     F .text	0000000b write_eflags
00038200 l     O .bss	00000800 idt_table
00012521 l     F .text	0000010f print_exception_fram
00012630 l     F .text	0000003e do_default_handler
00012a46 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 mmu.c
00000000 l    df *ABS*	00000000 syscall.c
00015280 l     O .rodata	0000002c sys_table
00000000 l    df *ABS*	00000000 time.c
00012edb l     F .text	00000021 outb
00038a00 l     O .bss	00000004 sys_tick
00012f24 l     F .text	00000062 init_pit
00000000 l    df *ABS*	00000000 fs.c
00012f9e l     F .text	0000001d inb
00012fbb l     F .text	00000021 outb
00012fdc l     F .text	0000001f inw
00038a04 l     O .bss	00000004 temp_pos
00012ffb l     F .text	0000013d read_disk
00000000 l    df *ABS*	00000000 init.c
0001536c l     O .rodata	0000000c __func__.1
00015378 l     O .rodata	00000013 __func__.0
00000000 l    df *ABS*	00000000 mutex.c
000132d8 l     F .text	00000047 list_init
00015438 l     O .rodata	0000000a __func__.1
0001331f l     F .text	00000035 list_is_empty
00015444 l     O .rodata	0000000e __func__.0
0001542c l     O .rodata	0000000b __func__.2
00000000 l    df *ABS*	00000000 sem.c
000134ea l     F .text	00000047 list_init
000154f8 l     O .rodata	0000000a __func__.1
00013531 l     F .text	00000035 list_is_empty
00015504 l     O .rodata	0000000e __func__.0
000154ec l     O .rodata	00000009 __func__.2
00000000 l    df *ABS*	00000000 test.c
000136ba l     F .text	00000047 list_init
00015618 l     O .rodata	0000000a __func__.3
00013701 l     F .text	0000002d list_get_size
00015624 l     O .rodata	0000000e __func__.2
0001372e l     F .text	0000002c list_get_first
00015644 l     O .rodata	0000000f __func__.0
0001375a l     F .text	0000002d list_get_last
00015634 l     O .rodata	0000000e __func__.1
00000000 l    df *ABS*	00000000 assert.c
00013a62 l     F .text	00000007 hlt
00000000 l    df *ABS*	00000000 bitmap.c
00015714 l     O .rodata	0000000c __func__.3
00015720 l     O .rodata	0000000f __func__.2
00015730 l     O .rodata	0000000f __func__.1
00015740 l     O .rodata	00000013 __func__.0
00000000 l    df *ABS*	00000000 klib.c
00016040 l     O .data	00000004 num_to_char.0
00000000 l    df *ABS*	00000000 list.c
0001433a l     F .text	00000035 list_is_empty
00015848 l     O .rodata	0000000e __func__.5
0001436f l     F .text	0000002d list_get_size
00015880 l     O .rodata	0000000e __func__.2
00015834 l     O .rodata	00000012 __func__.6
00015858 l     O .rodata	00000011 __func__.4
0001586c l     O .rodata	00000012 __func__.3
00015890 l     O .rodata	00000011 __func__.1
000158a4 l     O .rodata	0000000c __func__.0
00000000 l    df *ABS*	00000000 log.c
000146e5 l     F .text	0000001d inb
00014702 l     F .text	00000021 outb
00038a08 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 first_task.c
80000010 l     F .first_task	0000004c sys_call
8000005c l     F .first_task	0000001b getpid
80000077 l     F .first_task	00000028 print_msg
8000009f l     F .first_task	0000001b fork
800000ba l     F .first_task	0000002d execve
00013b49 g     F .text	00000078 bitmap_get_bit
00013f1c g     F .text	0000004f kernel_memcpy
000131da g     F .text	0000000a sys_close
00012c8e g     F .text	00000098 idt_enable
0001174d g     F .text	0000000a task_current
00014427 g     F .text	0000008f list_insert_last
00011bf4 g     F .text	00000061 sys_yield
000127a2 g     F .text	0000001c do_handler_segment_not_present
00011689 g     F .text	0000004b task_set_ready
00013cc9 g     F .text	00000021 bitmap_is_set
00012dc5 g     F .text	0000000b idt_enable_global
00013f6b g     F .text	00000041 kernel_memset
000131b6 g     F .text	00000024 sys_lseek
00010081 g       .text	00000000 exception_handler_nmi
00010243 g       .text	00000000 exception_handler_virtual_exception
00012e4c g     F .text	0000008f do_handler_syscall
000142c7 g     F .text	0000002d strings_count
00014723 g     F .text	00000088 log_init
00011a79 g     F .text	0000017b sys_fork
0001329b g     F .text	0000003d init_main
000101ee g       .text	00000000 exception_handler_alignment_check
00012e32 g     F .text	0000001a sys_print_msg
00013de5 g     F .text	00000047 kernel_strcpy
00012dba g     F .text	0000000b idt_disable_global
00016000 g       .data	00000000 s_data
800000e7 g     F .first_task	0000007e first_main
00012a03 g     F .text	00000043 idt_install
0001002a g       .text	00000000 exception_handler_unknown
0001009e g       .text	00000000 exception_handler_breakpoint
000126fa g     F .text	0000001c do_handler_overflow
00012977 g     F .text	0000001c do_handler_alignment_check
00013171 g     F .text	0000003f sys_read
0001019b g       .text	00000000 exception_handler_general_protection
000127da g     F .text	000000b1 do_handler_general_protection
000129e7 g     F .text	0000001c do_handler_control_exception
00013691 g     F .text	00000029 sem_count
0001268a g     F .text	0000001c do_handler_divider
00013bc1 g     F .text	00000108 bitmap_set_bit
0001276a g     F .text	0000001c do_handler_double_fault
0001288b g     F .text	000000d0 do_handler_page_fault
0001012f g       .text	00000000 exception_handler_double_fault
00012dd0 g     F .text	00000039 pic_send_eoi
00014567 g     F .text	000000b5 list_remove_last
0001167f g     F .text	0000000a task_first_task
00010000 g       .text	00000000 s_text
000135a9 g     F .text	0000006b sem_wait
00010ded g     F .text	00000022 memory_alloc_page_for
00010180 g       .text	00000000 exception_handler_stack_segment_fault
80000000 g       .first_task	00000000 first_task_entry
0001232b g     F .text	000000b3 gdt_init
000129cb g     F .text	0000001c do_handler_virtual_exception
000100bb g       .text	00000000 exception_handler_overflow
00010298 g       .text	00000000 simple_switch
0001027b g       .text	00000000 exception_handler_time
000126a6 g     F .text	0000001c do_handler_debug
00038a20 g     O .bss	00002000 stack
00011a0c g     F .text	00000060 sys_sleep
00010e3f g     F .text	00000099 memory_free_page
00013787 g     F .text	000002db list_test
00010260 g       .text	00000000 exception_handler_control_exception
0003b000 g       *ABS*	00000000 s_first_task
00011426 g     F .text	00000080 task_uninit
00010d35 g     F .text	000000b8 memory_alloc_for_page_dir
000100d8 g       .text	00000000 exception_handler_bound_range
00012ad9 g     F .text	000001b5 idt_init
00013614 g     F .text	0000007d sem_notify
00010f2b g     F .text	00000083 memory_copy_uvm_data
00012453 g     F .text	00000027 gdt_free
00012732 g     F .text	0000001c do_handler_invalid_opcode
0001014a g       .text	00000000 exception_handler_invalid_tss
0001295b g     F .text	0000001c do_handler_fpu_error
0001158d g     F .text	000000f2 task_first_init
00012993 g     F .text	0000001c do_handler_machine_check
00013138 g     F .text	00000039 sys_open
0001439c g     F .text	0000008b list_insert_first
00011926 g     F .text	0000004b task_set_wakeup
0001171f g     F .text	0000002e task_ready_first
00010047 g       .text	00000000 exception_handler_divider
00010943 g     F .text	00000085 memory_creat_uvm
00013e2c g     F .text	00000051 kernel_strncpy
000131b0 g     F .text	00000006 sys_write
0003b19e g       *ABS*	00000000 mem_free_start
000131e4 g     F .text	00000053 kernel_init
00013566 g     F .text	00000043 sem_init
00010000 g       .text	00000000 _start
00014054 g     F .text	0000019d kernel_vsprintf
000142f4 g     F .text	00000046 get_file_name
00010112 g       .text	00000000 exception_handler_device_unavailable
000100f5 g       .text	00000000 exception_handler_invalid_opcode
0003b000 g       .first_task	00000000 e_data
000133a1 g     F .text	00000091 mutex_lock
00010209 g       .text	00000000 exception_handler_machine_check
00012786 g     F .text	0000001c do_handler_invalid_tss
00012d26 g     F .text	00000094 idt_disable
0003b19e g       *ABS*	00000000 e_first_task
000118ca g     F .text	0000005c task_set_sleep
000107d9 g     F .text	000000b6 memory_creat_map
000126c2 g     F .text	0000001c do_handler_nmi
00013354 g     F .text	0000004d mutex_init
00010226 g       .text	00000000 exception_handler_smd_exception
00010b55 g     F .text	000000e7 memory_destroy_uvm
00013a9f g     F .text	00000016 bitmap_byte_count
0001274e g     F .text	0000001c do_handler_device_unavailable
00012e09 g     F .text	00000018 idt_enter_protection
0001088f g     F .text	000000b4 create_kernal_table
000117bf g     F .text	0000010b task_slice_end
000109c8 g     F .text	0000018d memory_copy_uvm
00013237 g     F .text	00000064 move_to_first_task
00013fac g     F .text	00000084 kernel_memcmp
000129af g     F .text	0000001c do_handler_smd_exception
000101b6 g       .text	00000000 exception_handler_page_fault
0001266e g     F .text	0000001c do_handler_unknown
00010e1f g     F .text	00000020 memory_alloc_page
000101d1 g       .text	00000000 exception_handler_fpu_error
00011178 g     F .text	0000001b task_switch_from_to
00013432 g     F .text	000000b8 mutex_unlock
00011757 g     F .text	00000068 task_switch
00013ee7 g     F .text	00000035 kernel_strlen
000116d4 g     F .text	0000004b task_set_unready
00010064 g       .text	00000000 exception_handler_debug
0001226c g     F .text	000000bf segment_desc_set
00012716 g     F .text	0000001c do_handler_bound_range
000102ad g       .text	00000000 exception_handler_syscall
000144b6 g     F .text	000000b1 list_remove_first
000158b0 g       .rodata	00000000 e_text
00013e7d g     F .text	0000006a kernel_strncmp
00013ab5 g     F .text	00000094 bitmap_init
00010165 g       .text	00000000 exception_handler_segment_not_present
00013cea g     F .text	000000fb bitmap_alloc_nbits
000114b0 g     F .text	000000dd task_manager_init
00011305 g     F .text	00000044 task_start
00010c3c g     F .text	000000f9 memory_init
0001204e g     F .text	000001af sys_execve
00013a69 g     F .text	00000036 pannic
00010ed8 g     F .text	00000053 memory_get_paddr
000127be g     F .text	0000001c do_handler_stack_segment_fault
000126de g     F .text	0000001c do_handler_breakpoint
000147ab g     F .text	000000fa log_printf
00011349 g     F .text	000000dd task_init
00014030 g     F .text	00000024 kernel_sprintf
00011a6c g     F .text	0000000d sys_getpid
000123de g     F .text	00000075 gdt_alloc_desc
000141f1 g     F .text	000000d6 kernel_itoa
0001461c g     F .text	000000c9 list_remove
000121fd g     F .text	00000047 gate_desc_set
00012e21 g     F .text	00000011 idt_leave_protection
00010729 g     F .text	000000b0 find_pte
00012efc g     F .text	00000028 do_handler_time
00012f86 g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
*            [&boot_info]
*    esp ->  [返回地址]
*   所以要想访问到&boot_info，则只需从当前esp的位置偏移+4字节即可
*/
_start:
    mov %esp, %ebp      //栈空间最好只用ebp来进行偏移访问
   10000:	89 e5                	mov    %esp,%ebp
    mov 0x4(%ebp), %eax //将&boot_info的值存入eax中
   10002:	8b 45 04             	mov    0x4(%ebp),%eax

    push %eax           //外部函数将参数压入栈中，再进行函数调用
   10005:	50                   	push   %eax
    call kernel_init    //调用内核初始化函数
   10006:	e8 d9 31 00 00       	call   131e4 <kernel_init>

    //完成内核初始化后，进行直接跳转，以替换cs寄存器中临时的内核代码段的选择子为此时内存中真正的内核代码段选择子
    //cs:KERNEL_SELECTOR_CS, ip:gdt_reload
    jmp $KERNEL_SELECTOR_CS, $gdt_reload    
   1000b:	ea 12 00 01 00 08 00 	ljmp   $0x8,$0x10012

00010012 <gdt_reload>:

gdt_reload:
    //替换其他段寄存器中临时的内核数据段的选择子为此时内存中真正的内核数据段的选择子
    mov $KERNEL_SELECTOR_DS, %ax
   10012:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10016:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10018:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001a:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001c:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001e:	8e e8                	mov    %eax,%gs

    //重新指定栈空间位置，不再使用0~0x7c00这部分空间
    //stack段已在下面预留了KERNEL_STACK_SIZE的空间大小，直接将最高地址赋值给esp，esp便可使用这片空间
    mov $(stack + KERNEL_STACK_SIZE), %esp
   10020:	bc 20 aa 03 00       	mov    $0x3aa20,%esp

    //继续初始化内核
    //TODO:后序再来说明该函数的作用
    jmp init_main 
   10025:	e9 71 32 00 00       	jmp    1329b <init_main>

0001002a <exception_handler_unknown>:
//宏结束标志
.endm

//使用定义的异常宏 ,以下都是不可屏蔽中断，cpu必须处理该中断请求。
//                |异常类型|       |IDT索引| |错误码|
exception_handler unknown,              -1, 0    //未知异常
   1002a:	6a 00                	push   $0x0
   1002c:	6a ff                	push   $0xffffffff
   1002e:	60                   	pusha  
   1002f:	1e                   	push   %ds
   10030:	06                   	push   %es
   10031:	0f a0                	push   %fs
   10033:	0f a8                	push   %gs
   10035:	54                   	push   %esp
   10036:	e8 33 26 00 00       	call   1266e <do_handler_unknown>
   1003b:	5c                   	pop    %esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider,              0,  0    //除0异常
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 32 26 00 00       	call   1268a <do_handler_divider>
   10058:	5c                   	pop    %esp
   10059:	0f a9                	pop    %gs
   1005b:	0f a1                	pop    %fs
   1005d:	07                   	pop    %es
   1005e:	1f                   	pop    %ds
   1005f:	61                   	popa   
   10060:	83 c4 08             	add    $0x8,%esp
   10063:	cf                   	iret   

00010064 <exception_handler_debug>:
exception_handler debug,                1,  0    //debug异常
   10064:	6a 00                	push   $0x0
   10066:	6a 01                	push   $0x1
   10068:	60                   	pusha  
   10069:	1e                   	push   %ds
   1006a:	06                   	push   %es
   1006b:	0f a0                	push   %fs
   1006d:	0f a8                	push   %gs
   1006f:	54                   	push   %esp
   10070:	e8 31 26 00 00       	call   126a6 <do_handler_debug>
   10075:	5c                   	pop    %esp
   10076:	0f a9                	pop    %gs
   10078:	0f a1                	pop    %fs
   1007a:	07                   	pop    %es
   1007b:	1f                   	pop    %ds
   1007c:	61                   	popa   
   1007d:	83 c4 08             	add    $0x8,%esp
   10080:	cf                   	iret   

00010081 <exception_handler_nmi>:
exception_handler nmi,                  2,  0
   10081:	6a 00                	push   $0x0
   10083:	6a 02                	push   $0x2
   10085:	60                   	pusha  
   10086:	1e                   	push   %ds
   10087:	06                   	push   %es
   10088:	0f a0                	push   %fs
   1008a:	0f a8                	push   %gs
   1008c:	54                   	push   %esp
   1008d:	e8 30 26 00 00       	call   126c2 <do_handler_nmi>
   10092:	5c                   	pop    %esp
   10093:	0f a9                	pop    %gs
   10095:	0f a1                	pop    %fs
   10097:	07                   	pop    %es
   10098:	1f                   	pop    %ds
   10099:	61                   	popa   
   1009a:	83 c4 08             	add    $0x8,%esp
   1009d:	cf                   	iret   

0001009e <exception_handler_breakpoint>:
exception_handler breakpoint,           3,  0
   1009e:	6a 00                	push   $0x0
   100a0:	6a 03                	push   $0x3
   100a2:	60                   	pusha  
   100a3:	1e                   	push   %ds
   100a4:	06                   	push   %es
   100a5:	0f a0                	push   %fs
   100a7:	0f a8                	push   %gs
   100a9:	54                   	push   %esp
   100aa:	e8 2f 26 00 00       	call   126de <do_handler_breakpoint>
   100af:	5c                   	pop    %esp
   100b0:	0f a9                	pop    %gs
   100b2:	0f a1                	pop    %fs
   100b4:	07                   	pop    %es
   100b5:	1f                   	pop    %ds
   100b6:	61                   	popa   
   100b7:	83 c4 08             	add    $0x8,%esp
   100ba:	cf                   	iret   

000100bb <exception_handler_overflow>:
exception_handler overflow,             4,  0
   100bb:	6a 00                	push   $0x0
   100bd:	6a 04                	push   $0x4
   100bf:	60                   	pusha  
   100c0:	1e                   	push   %ds
   100c1:	06                   	push   %es
   100c2:	0f a0                	push   %fs
   100c4:	0f a8                	push   %gs
   100c6:	54                   	push   %esp
   100c7:	e8 2e 26 00 00       	call   126fa <do_handler_overflow>
   100cc:	5c                   	pop    %esp
   100cd:	0f a9                	pop    %gs
   100cf:	0f a1                	pop    %fs
   100d1:	07                   	pop    %es
   100d2:	1f                   	pop    %ds
   100d3:	61                   	popa   
   100d4:	83 c4 08             	add    $0x8,%esp
   100d7:	cf                   	iret   

000100d8 <exception_handler_bound_range>:
exception_handler bound_range,          5,  0
   100d8:	6a 00                	push   $0x0
   100da:	6a 05                	push   $0x5
   100dc:	60                   	pusha  
   100dd:	1e                   	push   %ds
   100de:	06                   	push   %es
   100df:	0f a0                	push   %fs
   100e1:	0f a8                	push   %gs
   100e3:	54                   	push   %esp
   100e4:	e8 2d 26 00 00       	call   12716 <do_handler_bound_range>
   100e9:	5c                   	pop    %esp
   100ea:	0f a9                	pop    %gs
   100ec:	0f a1                	pop    %fs
   100ee:	07                   	pop    %es
   100ef:	1f                   	pop    %ds
   100f0:	61                   	popa   
   100f1:	83 c4 08             	add    $0x8,%esp
   100f4:	cf                   	iret   

000100f5 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode,       6,  0
   100f5:	6a 00                	push   $0x0
   100f7:	6a 06                	push   $0x6
   100f9:	60                   	pusha  
   100fa:	1e                   	push   %ds
   100fb:	06                   	push   %es
   100fc:	0f a0                	push   %fs
   100fe:	0f a8                	push   %gs
   10100:	54                   	push   %esp
   10101:	e8 2c 26 00 00       	call   12732 <do_handler_invalid_opcode>
   10106:	5c                   	pop    %esp
   10107:	0f a9                	pop    %gs
   10109:	0f a1                	pop    %fs
   1010b:	07                   	pop    %es
   1010c:	1f                   	pop    %ds
   1010d:	61                   	popa   
   1010e:	83 c4 08             	add    $0x8,%esp
   10111:	cf                   	iret   

00010112 <exception_handler_device_unavailable>:
exception_handler device_unavailable,   7,  0
   10112:	6a 00                	push   $0x0
   10114:	6a 07                	push   $0x7
   10116:	60                   	pusha  
   10117:	1e                   	push   %ds
   10118:	06                   	push   %es
   10119:	0f a0                	push   %fs
   1011b:	0f a8                	push   %gs
   1011d:	54                   	push   %esp
   1011e:	e8 2b 26 00 00       	call   1274e <do_handler_device_unavailable>
   10123:	5c                   	pop    %esp
   10124:	0f a9                	pop    %gs
   10126:	0f a1                	pop    %fs
   10128:	07                   	pop    %es
   10129:	1f                   	pop    %ds
   1012a:	61                   	popa   
   1012b:	83 c4 08             	add    $0x8,%esp
   1012e:	cf                   	iret   

0001012f <exception_handler_double_fault>:
exception_handler double_fault,         8,  1
   1012f:	6a 08                	push   $0x8
   10131:	60                   	pusha  
   10132:	1e                   	push   %ds
   10133:	06                   	push   %es
   10134:	0f a0                	push   %fs
   10136:	0f a8                	push   %gs
   10138:	54                   	push   %esp
   10139:	e8 2c 26 00 00       	call   1276a <do_handler_double_fault>
   1013e:	5c                   	pop    %esp
   1013f:	0f a9                	pop    %gs
   10141:	0f a1                	pop    %fs
   10143:	07                   	pop    %es
   10144:	1f                   	pop    %ds
   10145:	61                   	popa   
   10146:	83 c4 08             	add    $0x8,%esp
   10149:	cf                   	iret   

0001014a <exception_handler_invalid_tss>:
exception_handler invalid_tss,          10, 1
   1014a:	6a 0a                	push   $0xa
   1014c:	60                   	pusha  
   1014d:	1e                   	push   %ds
   1014e:	06                   	push   %es
   1014f:	0f a0                	push   %fs
   10151:	0f a8                	push   %gs
   10153:	54                   	push   %esp
   10154:	e8 2d 26 00 00       	call   12786 <do_handler_invalid_tss>
   10159:	5c                   	pop    %esp
   1015a:	0f a9                	pop    %gs
   1015c:	0f a1                	pop    %fs
   1015e:	07                   	pop    %es
   1015f:	1f                   	pop    %ds
   10160:	61                   	popa   
   10161:	83 c4 08             	add    $0x8,%esp
   10164:	cf                   	iret   

00010165 <exception_handler_segment_not_present>:
exception_handler segment_not_present,  11, 1
   10165:	6a 0b                	push   $0xb
   10167:	60                   	pusha  
   10168:	1e                   	push   %ds
   10169:	06                   	push   %es
   1016a:	0f a0                	push   %fs
   1016c:	0f a8                	push   %gs
   1016e:	54                   	push   %esp
   1016f:	e8 2e 26 00 00       	call   127a2 <do_handler_segment_not_present>
   10174:	5c                   	pop    %esp
   10175:	0f a9                	pop    %gs
   10177:	0f a1                	pop    %fs
   10179:	07                   	pop    %es
   1017a:	1f                   	pop    %ds
   1017b:	61                   	popa   
   1017c:	83 c4 08             	add    $0x8,%esp
   1017f:	cf                   	iret   

00010180 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,  12, 1
   10180:	6a 0c                	push   $0xc
   10182:	60                   	pusha  
   10183:	1e                   	push   %ds
   10184:	06                   	push   %es
   10185:	0f a0                	push   %fs
   10187:	0f a8                	push   %gs
   10189:	54                   	push   %esp
   1018a:	e8 2f 26 00 00       	call   127be <do_handler_stack_segment_fault>
   1018f:	5c                   	pop    %esp
   10190:	0f a9                	pop    %gs
   10192:	0f a1                	pop    %fs
   10194:	07                   	pop    %es
   10195:	1f                   	pop    %ds
   10196:	61                   	popa   
   10197:	83 c4 08             	add    $0x8,%esp
   1019a:	cf                   	iret   

0001019b <exception_handler_general_protection>:
exception_handler general_protection,   13, 1
   1019b:	6a 0d                	push   $0xd
   1019d:	60                   	pusha  
   1019e:	1e                   	push   %ds
   1019f:	06                   	push   %es
   101a0:	0f a0                	push   %fs
   101a2:	0f a8                	push   %gs
   101a4:	54                   	push   %esp
   101a5:	e8 30 26 00 00       	call   127da <do_handler_general_protection>
   101aa:	5c                   	pop    %esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa   
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret   

000101b6 <exception_handler_page_fault>:
exception_handler page_fault,           14, 1
   101b6:	6a 0e                	push   $0xe
   101b8:	60                   	pusha  
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 c6 26 00 00       	call   1288b <do_handler_page_fault>
   101c5:	5c                   	pop    %esp
   101c6:	0f a9                	pop    %gs
   101c8:	0f a1                	pop    %fs
   101ca:	07                   	pop    %es
   101cb:	1f                   	pop    %ds
   101cc:	61                   	popa   
   101cd:	83 c4 08             	add    $0x8,%esp
   101d0:	cf                   	iret   

000101d1 <exception_handler_fpu_error>:
exception_handler fpu_error,            16, 0
   101d1:	6a 00                	push   $0x0
   101d3:	6a 10                	push   $0x10
   101d5:	60                   	pusha  
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 79 27 00 00       	call   1295b <do_handler_fpu_error>
   101e2:	5c                   	pop    %esp
   101e3:	0f a9                	pop    %gs
   101e5:	0f a1                	pop    %fs
   101e7:	07                   	pop    %es
   101e8:	1f                   	pop    %ds
   101e9:	61                   	popa   
   101ea:	83 c4 08             	add    $0x8,%esp
   101ed:	cf                   	iret   

000101ee <exception_handler_alignment_check>:
exception_handler alignment_check,      17, 1
   101ee:	6a 11                	push   $0x11
   101f0:	60                   	pusha  
   101f1:	1e                   	push   %ds
   101f2:	06                   	push   %es
   101f3:	0f a0                	push   %fs
   101f5:	0f a8                	push   %gs
   101f7:	54                   	push   %esp
   101f8:	e8 7a 27 00 00       	call   12977 <do_handler_alignment_check>
   101fd:	5c                   	pop    %esp
   101fe:	0f a9                	pop    %gs
   10200:	0f a1                	pop    %fs
   10202:	07                   	pop    %es
   10203:	1f                   	pop    %ds
   10204:	61                   	popa   
   10205:	83 c4 08             	add    $0x8,%esp
   10208:	cf                   	iret   

00010209 <exception_handler_machine_check>:
exception_handler machine_check,        18, 0
   10209:	6a 00                	push   $0x0
   1020b:	6a 12                	push   $0x12
   1020d:	60                   	pusha  
   1020e:	1e                   	push   %ds
   1020f:	06                   	push   %es
   10210:	0f a0                	push   %fs
   10212:	0f a8                	push   %gs
   10214:	54                   	push   %esp
   10215:	e8 79 27 00 00       	call   12993 <do_handler_machine_check>
   1021a:	5c                   	pop    %esp
   1021b:	0f a9                	pop    %gs
   1021d:	0f a1                	pop    %fs
   1021f:	07                   	pop    %es
   10220:	1f                   	pop    %ds
   10221:	61                   	popa   
   10222:	83 c4 08             	add    $0x8,%esp
   10225:	cf                   	iret   

00010226 <exception_handler_smd_exception>:
exception_handler smd_exception,        19, 0
   10226:	6a 00                	push   $0x0
   10228:	6a 13                	push   $0x13
   1022a:	60                   	pusha  
   1022b:	1e                   	push   %ds
   1022c:	06                   	push   %es
   1022d:	0f a0                	push   %fs
   1022f:	0f a8                	push   %gs
   10231:	54                   	push   %esp
   10232:	e8 78 27 00 00       	call   129af <do_handler_smd_exception>
   10237:	5c                   	pop    %esp
   10238:	0f a9                	pop    %gs
   1023a:	0f a1                	pop    %fs
   1023c:	07                   	pop    %es
   1023d:	1f                   	pop    %ds
   1023e:	61                   	popa   
   1023f:	83 c4 08             	add    $0x8,%esp
   10242:	cf                   	iret   

00010243 <exception_handler_virtual_exception>:
exception_handler virtual_exception,    20, 0
   10243:	6a 00                	push   $0x0
   10245:	6a 14                	push   $0x14
   10247:	60                   	pusha  
   10248:	1e                   	push   %ds
   10249:	06                   	push   %es
   1024a:	0f a0                	push   %fs
   1024c:	0f a8                	push   %gs
   1024e:	54                   	push   %esp
   1024f:	e8 77 27 00 00       	call   129cb <do_handler_virtual_exception>
   10254:	5c                   	pop    %esp
   10255:	0f a9                	pop    %gs
   10257:	0f a1                	pop    %fs
   10259:	07                   	pop    %es
   1025a:	1f                   	pop    %ds
   1025b:	61                   	popa   
   1025c:	83 c4 08             	add    $0x8,%esp
   1025f:	cf                   	iret   

00010260 <exception_handler_control_exception>:
exception_handler control_exception,    21, 1
   10260:	6a 15                	push   $0x15
   10262:	60                   	pusha  
   10263:	1e                   	push   %ds
   10264:	06                   	push   %es
   10265:	0f a0                	push   %fs
   10267:	0f a8                	push   %gs
   10269:	54                   	push   %esp
   1026a:	e8 78 27 00 00       	call   129e7 <do_handler_control_exception>
   1026f:	5c                   	pop    %esp
   10270:	0f a9                	pop    %gs
   10272:	0f a1                	pop    %fs
   10274:	07                   	pop    %es
   10275:	1f                   	pop    %ds
   10276:	61                   	popa   
   10277:	83 c4 08             	add    $0x8,%esp
   1027a:	cf                   	iret   

0001027b <exception_handler_time>:

//定时器的中断处理函数
exception_handler time,                 0x20, 0 
   1027b:	6a 00                	push   $0x0
   1027d:	6a 20                	push   $0x20
   1027f:	60                   	pusha  
   10280:	1e                   	push   %ds
   10281:	06                   	push   %es
   10282:	0f a0                	push   %fs
   10284:	0f a8                	push   %gs
   10286:	54                   	push   %esp
   10287:	e8 70 2c 00 00       	call   12efc <do_handler_time>
   1028c:	5c                   	pop    %esp
   1028d:	0f a9                	pop    %gs
   1028f:	0f a1                	pop    %fs
   10291:	07                   	pop    %es
   10292:	1f                   	pop    %ds
   10293:	61                   	popa   
   10294:	83 c4 08             	add    $0x8,%esp
   10297:	cf                   	iret   

00010298 <simple_switch>:
//TODO:该部分为另一种任务切换时cpu上下文环境的保存方法，并未被调用
    .text
    .global simple_switch
simple_switch:  //simple_switch(from, to)
    //1.获取参数，跳过4字节的 eip
    mov 8(%esp), %edx   //获取 to, 地址(指针) --> 目标任务的栈空间对应的 esp 的值
   10298:	8b 54 24 08          	mov    0x8(%esp),%edx
    mov 4(%esp), %eax   //获取 from, 地址(指针) --> 当前任务的栈空间对应的 esp 的值
   1029c:	8b 44 24 04          	mov    0x4(%esp),%eax


    //2.被调用者保存当前任务的 ebp, ebx, esi, edi 到当前任务的栈中
    //eax, ecx, edx, eip, eflags 已由调用者压入当前任务的栈中
    push %ebp
   102a0:	55                   	push   %ebp
    push %ebx
   102a1:	53                   	push   %ebx
    push %esi
   102a2:	56                   	push   %esi
    push %edi
   102a3:	57                   	push   %edi

    //3.更新当前任务栈空间的 esp
    mov %esp, (%eax)
   102a4:	89 20                	mov    %esp,(%eax)

    //3.进行任务栈的切换
    mov (%edx), %esp
   102a6:	8b 22                	mov    (%edx),%esp


    //4.恢复切换后的任务状态，ebp, ebx, esi, edi 手动恢复
    //eax, ecx, edx, eip, eflags, 是在当前任务(c函数)调用simple_switch时已压入当前任务栈中，
    //调用 ret 后会自行弹出并恢复
    pop %edi
   102a8:	5f                   	pop    %edi
    pop %esi
   102a9:	5e                   	pop    %esi
    pop %ebx
   102aa:	5b                   	pop    %ebx
    pop %ebp
   102ab:	5d                   	pop    %ebp

    //5.恢复切换后的任务执行流，相当于此时 esp ->[eip]， 即 pop %eip
    ret 
   102ac:	c3                   	ret    

000102ad <exception_handler_syscall>:

    //注意：cpu只自动保护了 cs eip ss esp寄存器，其它寄存器没有被维护，可能在调用门处理函数里被修改
    //所以需要手动压入，即保护cpu上下文环境，也为fork系统调用提供cpu上下文环境

    //1.用 pusha 指令压入8个通用寄存器
    pusha
   102ad:	60                   	pusha  

    //2.压入其他段寄存器
    push %ds
   102ae:	1e                   	push   %ds
    push %es
   102af:	06                   	push   %es
    push %fs
   102b0:	0f a0                	push   %fs
    push %gs
   102b2:	0f a8                	push   %gs

    //3.压入eflags寄存器
    pushf
   102b4:	9c                   	pushf  

    //4.将当前 esp 的值压入栈中，当作调用门栈帧的起始地址
    push %esp
   102b5:	54                   	push   %esp

    //5.调用系统调用处理函数，按id进一步判断需要进行的系统调用并执行
    call do_handler_syscall
   102b6:	e8 91 2b 00 00       	call   12e4c <do_handler_syscall>


    //5.恢复现场
    pop %esp
   102bb:	5c                   	pop    %esp
    popf
   102bc:	9d                   	popf   
    pop %gs
   102bd:	0f a9                	pop    %gs
    pop %fs
   102bf:	0f a1                	pop    %fs
    pop %es
   102c1:	07                   	pop    %es
    pop %ds
   102c2:	1f                   	pop    %ds
    popa
   102c3:	61                   	popa   
    //如果要变换特权级，它会加载被调用者堆栈上的CS和EIP，并增加ESP跳过参数，
    //然后ESP将指向被保存过的调用者SS和ESP¹。
    //它还会对目标代码段特权级和目标栈段特权级做严格的检查，
    //要求代码段可执行特权级CPL (即DPL) == 栈段选择子请求特权级RPL == 栈段目标内存特权级DPL²。
    
    retf $(5*4) 
   102c4:	ca 14 00             	lret   $0x14

000102c7 <down2>:
 * 
 * @param size 
 * @param bound 一般取2的n次方
 * @return uint32_t 
 */
static inline uint32_t down2(uint32_t size, uint32_t bound) {
   102c7:	55                   	push   %ebp
   102c8:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);  
   102ca:	8b 45 0c             	mov    0xc(%ebp),%eax
   102cd:	f7 d8                	neg    %eax
   102cf:	23 45 08             	and    0x8(%ebp),%eax
}
   102d2:	5d                   	pop    %ebp
   102d3:	c3                   	ret    

000102d4 <up2>:
 * 
 * @param size 
 * @param bound 一般取2的n次方
 * @return uint32_t 
 */
static inline uint32_t up2(uint32_t size, uint32_t bound) {
   102d4:	55                   	push   %ebp
   102d5:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   102d7:	8b 55 08             	mov    0x8(%ebp),%edx
   102da:	8b 45 0c             	mov    0xc(%ebp),%eax
   102dd:	01 d0                	add    %edx,%eax
   102df:	8d 50 ff             	lea    -0x1(%eax),%edx
   102e2:	8b 45 0c             	mov    0xc(%ebp),%eax
   102e5:	f7 d8                	neg    %eax
   102e7:	21 d0                	and    %edx,%eax
}
   102e9:	5d                   	pop    %ebp
   102ea:	c3                   	ret    

000102eb <write_cr3>:
 * 它含有存放页目录表页面的物理地址，
 * 因此 CR3 也被称为 PDBR（Page-Directory Base address Register）。
 *
 * @param data
 */
static inline void write_cr3(uint32_t data) {
   102eb:	55                   	push   %ebp
   102ec:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("mov %[v], %%cr3" : : [v] "r"(data));
   102ee:	8b 45 08             	mov    0x8(%ebp),%eax
   102f1:	0f 22 d8             	mov    %eax,%cr3
}
   102f4:	90                   	nop
   102f5:	5d                   	pop    %ebp
   102f6:	c3                   	ret    

000102f7 <pde_index>:
 * @brief 获取虚拟地址的高10位，及对应的页目录项在页目录表中的索引
 * 
 * @param vstart 
 * @return uint32_t 
 */
static inline uint32_t pde_index(uint32_t vstart) {
   102f7:	55                   	push   %ebp
   102f8:	89 e5                	mov    %esp,%ebp
    return (vstart >> 22);
   102fa:	8b 45 08             	mov    0x8(%ebp),%eax
   102fd:	c1 e8 16             	shr    $0x16,%eax
}
   10300:	5d                   	pop    %ebp
   10301:	c3                   	ret    

00010302 <pte_index>:
 * @brief 获取虚拟地址的次10位，及对应的页表项在页表中的索引
 * 
 * @param vstart 
 * @return uint32_t 
 */
static inline uint32_t pte_index(uint32_t vstart) {
   10302:	55                   	push   %ebp
   10303:	89 e5                	mov    %esp,%ebp
    return (vstart >> 12) & 0x3ff;
   10305:	8b 45 08             	mov    0x8(%ebp),%eax
   10308:	c1 e8 0c             	shr    $0xc,%eax
   1030b:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   10310:	5d                   	pop    %ebp
   10311:	c3                   	ret    

00010312 <pde_to_pt_addr>:
 * @brief 获取页目录项中对应的页表的起始地址，及该页表第一个页表项的地址
 * 
 * @param pde 页目录项
 * @return uint32_t 返回的页表的地址
 */
static inline uint32_t pde_to_pt_addr(pde_t *pde) {
   10312:	55                   	push   %ebp
   10313:	89 e5                	mov    %esp,%ebp
    //高20位为页表的物理地址的有效位，将其左移12位，及按4kb对齐后才是该页的物理地址
    return pde->phy_pt_addr << 12;
   10315:	8b 45 08             	mov    0x8(%ebp),%eax
   10318:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   1031c:	c0 ea 04             	shr    $0x4,%dl
   1031f:	0f b6 ca             	movzbl %dl,%ecx
   10322:	0f b6 50 02          	movzbl 0x2(%eax),%edx
   10326:	c1 e2 04             	shl    $0x4,%edx
   10329:	09 ca                	or     %ecx,%edx
   1032b:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   1032f:	c1 e0 0c             	shl    $0xc,%eax
   10332:	09 d0                	or     %edx,%eax
   10334:	c1 e0 0c             	shl    $0xc,%eax
}
   10337:	5d                   	pop    %ebp
   10338:	c3                   	ret    

00010339 <pte_to_pg_addr>:
 * @brief 获取页表项中对应的页的起始地址
 * 
 * @param pte 页表项
 * @return uint32_t 返回的页的地址
 */
static inline uint32_t pte_to_pg_addr(pte_t *pte) {
   10339:	55                   	push   %ebp
   1033a:	89 e5                	mov    %esp,%ebp
    //高20位为页的物理地址有效位，将其左移12位，及按4kb对齐后才是该页的物理地址
    return pte->phy_page_addr << 12;
   1033c:	8b 45 08             	mov    0x8(%ebp),%eax
   1033f:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   10343:	c0 ea 04             	shr    $0x4,%dl
   10346:	0f b6 ca             	movzbl %dl,%ecx
   10349:	0f b6 50 02          	movzbl 0x2(%eax),%edx
   1034d:	c1 e2 04             	shl    $0x4,%edx
   10350:	09 ca                	or     %ecx,%edx
   10352:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   10356:	c1 e0 0c             	shl    $0xc,%eax
   10359:	09 d0                	or     %edx,%eax
   1035b:	c1 e0 0c             	shl    $0xc,%eax
}
   1035e:	5d                   	pop    %ebp
   1035f:	c3                   	ret    

00010360 <get_pte_privilege>:
 * @brief 获取页表项的权限
 * 
 * @param pte 
 * @return uint32_t 
 */
static inline uint32_t get_pte_privilege(pte_t *pte) {
   10360:	55                   	push   %ebp
   10361:	89 e5                	mov    %esp,%ebp
    return pte->v & 0x1ff;  //直接获取低9位即为所有权限
   10363:	8b 45 08             	mov    0x8(%ebp),%eax
   10366:	8b 00                	mov    (%eax),%eax
   10368:	25 ff 01 00 00       	and    $0x1ff,%eax
}
   1036d:	5d                   	pop    %ebp
   1036e:	c3                   	ret    

0001036f <mmu_set_page_dir>:
/**
 * @brief 设置页目录表的起始地址，将起始地址写入CR3寄存器
 * 
 * @param paddr 页目录表的物理起始地址
 */
static inline void mmu_set_page_dir(uint32_t paddr) {
   1036f:	55                   	push   %ebp
   10370:	89 e5                	mov    %esp,%ebp

    //设置cr3寄存器的高20位为页目录表的地址，因为按4kb对齐，所以
    //页目录表的起始地址page_dir的高20位才为有效位，低12位为0，将cr3的低12位就设置为0
    write_cr3(paddr);
   10372:	ff 75 08             	push   0x8(%ebp)
   10375:	e8 71 ff ff ff       	call   102eb <write_cr3>
   1037a:	83 c4 04             	add    $0x4,%esp
}
   1037d:	90                   	nop
   1037e:	c9                   	leave  
   1037f:	c3                   	ret    

00010380 <page_index>:
 * @brief 获取页的索引
 * 
 * @param alloc 
 * @param page_addr 
 */
static inline int page_index(addr_alloc_t *alloc, uint32_t page_addr) {
   10380:	55                   	push   %ebp
   10381:	89 e5                	mov    %esp,%ebp
   10383:	53                   	push   %ebx
  return (page_addr - alloc->start) / alloc->page_size;
   10384:	8b 45 08             	mov    0x8(%ebp),%eax
   10387:	8b 50 1c             	mov    0x1c(%eax),%edx
   1038a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1038d:	29 d0                	sub    %edx,%eax
   1038f:	89 c1                	mov    %eax,%ecx
   10391:	8b 45 08             	mov    0x8(%ebp),%eax
   10394:	8b 58 24             	mov    0x24(%eax),%ebx
   10397:	89 c8                	mov    %ecx,%eax
   10399:	ba 00 00 00 00       	mov    $0x0,%edx
   1039e:	f7 f3                	div    %ebx
}
   103a0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   103a3:	c9                   	leave  
   103a4:	c3                   	ret    

000103a5 <page_ref_add>:
 * @brief 为页的引用计数+1
 * 
 * @param alloc 
 * @param page_addr 页起始地址
 */
static inline void page_ref_add(addr_alloc_t *alloc, uint32_t page_addr) {
   103a5:	55                   	push   %ebp
   103a6:	89 e5                	mov    %esp,%ebp
   103a8:	83 ec 18             	sub    $0x18,%esp
  //计算出页的索引
  int index = page_index(alloc, page_addr);
   103ab:	ff 75 0c             	push   0xc(%ebp)
   103ae:	ff 75 08             	push   0x8(%ebp)
   103b1:	e8 ca ff ff ff       	call   10380 <page_index>
   103b6:	83 c4 08             	add    $0x8,%esp
   103b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
  
  mutex_lock(&alloc->mutex);
   103bc:	8b 45 08             	mov    0x8(%ebp),%eax
   103bf:	83 ec 0c             	sub    $0xc,%esp
   103c2:	50                   	push   %eax
   103c3:	e8 d9 2f 00 00       	call   133a1 <mutex_lock>
   103c8:	83 c4 10             	add    $0x10,%esp
  //引用计数+1
  alloc->page_ref[index]++;
   103cb:	8b 55 08             	mov    0x8(%ebp),%edx
   103ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
   103d1:	01 d0                	add    %edx,%eax
   103d3:	83 c0 28             	add    $0x28,%eax
   103d6:	0f b6 00             	movzbl (%eax),%eax
   103d9:	8d 50 01             	lea    0x1(%eax),%edx
   103dc:	8b 4d 08             	mov    0x8(%ebp),%ecx
   103df:	8b 45 f4             	mov    -0xc(%ebp),%eax
   103e2:	01 c8                	add    %ecx,%eax
   103e4:	83 c0 28             	add    $0x28,%eax
   103e7:	88 10                	mov    %dl,(%eax)

  mutex_unlock(&alloc->mutex);
   103e9:	8b 45 08             	mov    0x8(%ebp),%eax
   103ec:	83 ec 0c             	sub    $0xc,%esp
   103ef:	50                   	push   %eax
   103f0:	e8 3d 30 00 00       	call   13432 <mutex_unlock>
   103f5:	83 c4 10             	add    $0x10,%esp
 }
   103f8:	90                   	nop
   103f9:	c9                   	leave  
   103fa:	c3                   	ret    

000103fb <page_ref_sub>:
 * @brief 页的引用计数-1
 * 
 * @param alloc 
 * @param page_addr 
 */
static inline void page_ref_sub(addr_alloc_t *alloc, uint32_t page_addr) {
   103fb:	55                   	push   %ebp
   103fc:	89 e5                	mov    %esp,%ebp
   103fe:	83 ec 18             	sub    $0x18,%esp
  //计算出页的索引
  int index = page_index(alloc, page_addr);
   10401:	ff 75 0c             	push   0xc(%ebp)
   10404:	ff 75 08             	push   0x8(%ebp)
   10407:	e8 74 ff ff ff       	call   10380 <page_index>
   1040c:	83 c4 08             	add    $0x8,%esp
   1040f:	89 45 f4             	mov    %eax,-0xc(%ebp)

  mutex_lock(&alloc->mutex);
   10412:	8b 45 08             	mov    0x8(%ebp),%eax
   10415:	83 ec 0c             	sub    $0xc,%esp
   10418:	50                   	push   %eax
   10419:	e8 83 2f 00 00       	call   133a1 <mutex_lock>
   1041e:	83 c4 10             	add    $0x10,%esp
  //引用计数-1
  if (alloc->page_ref[index] > 0) 
   10421:	8b 55 08             	mov    0x8(%ebp),%edx
   10424:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10427:	01 d0                	add    %edx,%eax
   10429:	83 c0 28             	add    $0x28,%eax
   1042c:	0f b6 00             	movzbl (%eax),%eax
   1042f:	84 c0                	test   %al,%al
   10431:	74 1e                	je     10451 <page_ref_sub+0x56>
      alloc->page_ref[index]--;    
   10433:	8b 55 08             	mov    0x8(%ebp),%edx
   10436:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10439:	01 d0                	add    %edx,%eax
   1043b:	83 c0 28             	add    $0x28,%eax
   1043e:	0f b6 00             	movzbl (%eax),%eax
   10441:	8d 50 ff             	lea    -0x1(%eax),%edx
   10444:	8b 4d 08             	mov    0x8(%ebp),%ecx
   10447:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1044a:	01 c8                	add    %ecx,%eax
   1044c:	83 c0 28             	add    $0x28,%eax
   1044f:	88 10                	mov    %dl,(%eax)

  mutex_unlock(&alloc->mutex);
   10451:	8b 45 08             	mov    0x8(%ebp),%eax
   10454:	83 ec 0c             	sub    $0xc,%esp
   10457:	50                   	push   %eax
   10458:	e8 d5 2f 00 00       	call   13432 <mutex_unlock>
   1045d:	83 c4 10             	add    $0x10,%esp
 }
   10460:	90                   	nop
   10461:	c9                   	leave  
   10462:	c3                   	ret    

00010463 <get_page_ref>:
 * @brief 获取页的引用计数
 * 
 * @param alloc 
 * @param page_addr 
 */
static inline int get_page_ref(addr_alloc_t *alloc, uint32_t page_addr) {
   10463:	55                   	push   %ebp
   10464:	89 e5                	mov    %esp,%ebp
   10466:	83 ec 18             	sub    $0x18,%esp
    //计算出页的索引
  int index = page_index(alloc, page_addr);
   10469:	ff 75 0c             	push   0xc(%ebp)
   1046c:	ff 75 08             	push   0x8(%ebp)
   1046f:	e8 0c ff ff ff       	call   10380 <page_index>
   10474:	83 c4 08             	add    $0x8,%esp
   10477:	89 45 f4             	mov    %eax,-0xc(%ebp)

  mutex_lock(&alloc->mutex);
   1047a:	8b 45 08             	mov    0x8(%ebp),%eax
   1047d:	83 ec 0c             	sub    $0xc,%esp
   10480:	50                   	push   %eax
   10481:	e8 1b 2f 00 00       	call   133a1 <mutex_lock>
   10486:	83 c4 10             	add    $0x10,%esp

  int ref = alloc->page_ref[index];
   10489:	8b 55 08             	mov    0x8(%ebp),%edx
   1048c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1048f:	01 d0                	add    %edx,%eax
   10491:	83 c0 28             	add    $0x28,%eax
   10494:	0f b6 00             	movzbl (%eax),%eax
   10497:	0f b6 c0             	movzbl %al,%eax
   1049a:	89 45 f0             	mov    %eax,-0x10(%ebp)

  mutex_unlock(&alloc->mutex);
   1049d:	8b 45 08             	mov    0x8(%ebp),%eax
   104a0:	83 ec 0c             	sub    $0xc,%esp
   104a3:	50                   	push   %eax
   104a4:	e8 89 2f 00 00       	call   13432 <mutex_unlock>
   104a9:	83 c4 10             	add    $0x10,%esp

  return ref;
   104ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   104af:	c9                   	leave  
   104b0:	c3                   	ret    

000104b1 <clear_page_ref>:
 * @brief 清除所有页的引用
 * 
 * @param alloc 
 * @return int 
 */
static inline void clear_page_ref(addr_alloc_t *alloc) {
   104b1:	55                   	push   %ebp
   104b2:	89 e5                	mov    %esp,%ebp
   104b4:	83 ec 08             	sub    $0x8,%esp

  mutex_lock(&alloc->mutex);
   104b7:	8b 45 08             	mov    0x8(%ebp),%eax
   104ba:	83 ec 0c             	sub    $0xc,%esp
   104bd:	50                   	push   %eax
   104be:	e8 de 2e 00 00       	call   133a1 <mutex_lock>
   104c3:	83 c4 10             	add    $0x10,%esp

  kernel_memset(alloc->page_ref, 0, alloc->size / alloc->page_size);
   104c6:	8b 45 08             	mov    0x8(%ebp),%eax
   104c9:	8b 40 20             	mov    0x20(%eax),%eax
   104cc:	8b 55 08             	mov    0x8(%ebp),%edx
   104cf:	8b 4a 24             	mov    0x24(%edx),%ecx
   104d2:	ba 00 00 00 00       	mov    $0x0,%edx
   104d7:	f7 f1                	div    %ecx
   104d9:	89 c2                	mov    %eax,%edx
   104db:	8b 45 08             	mov    0x8(%ebp),%eax
   104de:	83 c0 28             	add    $0x28,%eax
   104e1:	83 ec 04             	sub    $0x4,%esp
   104e4:	52                   	push   %edx
   104e5:	6a 00                	push   $0x0
   104e7:	50                   	push   %eax
   104e8:	e8 7e 3a 00 00       	call   13f6b <kernel_memset>
   104ed:	83 c4 10             	add    $0x10,%esp

  mutex_unlock(&alloc->mutex);
   104f0:	8b 45 08             	mov    0x8(%ebp),%eax
   104f3:	83 ec 0c             	sub    $0xc,%esp
   104f6:	50                   	push   %eax
   104f7:	e8 36 2f 00 00       	call   13432 <mutex_unlock>
   104fc:	83 c4 10             	add    $0x10,%esp
}
   104ff:	90                   	nop
   10500:	c9                   	leave  
   10501:	c3                   	ret    

00010502 <addr_alloc_init>:
 * @param start 管理内存的起始地址
 * @param size 管理内存的大小
 * @param page_size 管理的内存页的大小
 */
static void addr_alloc_init(addr_alloc_t *alloc, uint8_t *bits, uint32_t start,
                            uint32_t size, uint32_t page_size) {
   10502:	55                   	push   %ebp
   10503:	89 e5                	mov    %esp,%ebp
   10505:	83 ec 08             	sub    $0x8,%esp
  mutex_init(&alloc->mutex);
   10508:	8b 45 08             	mov    0x8(%ebp),%eax
   1050b:	83 ec 0c             	sub    $0xc,%esp
   1050e:	50                   	push   %eax
   1050f:	e8 40 2e 00 00       	call   13354 <mutex_init>
   10514:	83 c4 10             	add    $0x10,%esp
  alloc->start = start;
   10517:	8b 45 08             	mov    0x8(%ebp),%eax
   1051a:	8b 55 10             	mov    0x10(%ebp),%edx
   1051d:	89 50 1c             	mov    %edx,0x1c(%eax)
  alloc->size = size;
   10520:	8b 45 08             	mov    0x8(%ebp),%eax
   10523:	8b 55 14             	mov    0x14(%ebp),%edx
   10526:	89 50 20             	mov    %edx,0x20(%eax)
  alloc->page_size = page_size;
   10529:	8b 45 08             	mov    0x8(%ebp),%eax
   1052c:	8b 55 18             	mov    0x18(%ebp),%edx
   1052f:	89 50 24             	mov    %edx,0x24(%eax)
  bitmap_init(&alloc->bitmap, bits, alloc->size / alloc->page_size, 0);
   10532:	8b 45 08             	mov    0x8(%ebp),%eax
   10535:	8b 40 20             	mov    0x20(%eax),%eax
   10538:	8b 55 08             	mov    0x8(%ebp),%edx
   1053b:	8b 4a 24             	mov    0x24(%edx),%ecx
   1053e:	ba 00 00 00 00       	mov    $0x0,%edx
   10543:	f7 f1                	div    %ecx
   10545:	89 c2                	mov    %eax,%edx
   10547:	8b 45 08             	mov    0x8(%ebp),%eax
   1054a:	83 c0 14             	add    $0x14,%eax
   1054d:	6a 00                	push   $0x0
   1054f:	52                   	push   %edx
   10550:	ff 75 0c             	push   0xc(%ebp)
   10553:	50                   	push   %eax
   10554:	e8 5c 35 00 00       	call   13ab5 <bitmap_init>
   10559:	83 c4 10             	add    $0x10,%esp
  //清空页的引用数组
  kernel_memset(alloc->page_ref, 0,  alloc->size / alloc->page_size);
   1055c:	8b 45 08             	mov    0x8(%ebp),%eax
   1055f:	8b 40 20             	mov    0x20(%eax),%eax
   10562:	8b 55 08             	mov    0x8(%ebp),%edx
   10565:	8b 4a 24             	mov    0x24(%edx),%ecx
   10568:	ba 00 00 00 00       	mov    $0x0,%edx
   1056d:	f7 f1                	div    %ecx
   1056f:	89 c2                	mov    %eax,%edx
   10571:	8b 45 08             	mov    0x8(%ebp),%eax
   10574:	83 c0 28             	add    $0x28,%eax
   10577:	83 ec 04             	sub    $0x4,%esp
   1057a:	52                   	push   %edx
   1057b:	6a 00                	push   $0x0
   1057d:	50                   	push   %eax
   1057e:	e8 e8 39 00 00       	call   13f6b <kernel_memset>
   10583:	83 c4 10             	add    $0x10,%esp
}
   10586:	90                   	nop
   10587:	c9                   	leave  
   10588:	c3                   	ret    

00010589 <addr_alloc_page>:
 *
 * @param alloc
 * @param page_count 申请页的数量
 * @return uint32_t 申请的第一个页的起始地址， 0：分配失败
 */
static uint32_t addr_alloc_page(addr_alloc_t *alloc, int page_count) {
   10589:	55                   	push   %ebp
   1058a:	89 e5                	mov    %esp,%ebp
   1058c:	83 ec 18             	sub    $0x18,%esp
  uint32_t addr = 0;  // 记录分配的页的起始地址
   1058f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  mutex_lock(&alloc->mutex);
   10596:	8b 45 08             	mov    0x8(%ebp),%eax
   10599:	83 ec 0c             	sub    $0xc,%esp
   1059c:	50                   	push   %eax
   1059d:	e8 ff 2d 00 00       	call   133a1 <mutex_lock>
   105a2:	83 c4 10             	add    $0x10,%esp

  // 在位图中取连续的page_count个页进行分配
  int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   105a5:	8b 45 08             	mov    0x8(%ebp),%eax
   105a8:	83 c0 14             	add    $0x14,%eax
   105ab:	83 ec 04             	sub    $0x4,%esp
   105ae:	ff 75 0c             	push   0xc(%ebp)
   105b1:	6a 00                	push   $0x0
   105b3:	50                   	push   %eax
   105b4:	e8 31 37 00 00       	call   13cea <bitmap_alloc_nbits>
   105b9:	83 c4 10             	add    $0x10,%esp
   105bc:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (page_count >= 0) {
   105bf:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   105c3:	78 17                	js     105dc <addr_alloc_page+0x53>
    // 计算出申请到的第一个页的起始地址
    addr = alloc->start + page_index * alloc->page_size;
   105c5:	8b 45 08             	mov    0x8(%ebp),%eax
   105c8:	8b 48 1c             	mov    0x1c(%eax),%ecx
   105cb:	8b 45 08             	mov    0x8(%ebp),%eax
   105ce:	8b 50 24             	mov    0x24(%eax),%edx
   105d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   105d4:	0f af c2             	imul   %edx,%eax
   105d7:	01 c8                	add    %ecx,%eax
   105d9:	89 45 f4             	mov    %eax,-0xc(%ebp)
  }

  mutex_unlock(&alloc->mutex);
   105dc:	8b 45 08             	mov    0x8(%ebp),%eax
   105df:	83 ec 0c             	sub    $0xc,%esp
   105e2:	50                   	push   %eax
   105e3:	e8 4a 2e 00 00       	call   13432 <mutex_unlock>
   105e8:	83 c4 10             	add    $0x10,%esp

  return addr;
   105eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   105ee:	c9                   	leave  
   105ef:	c3                   	ret    

000105f0 <addr_free_page>:
 *
 * @param alloc
 * @param addr 第一个内存页的起始地址
 * @param page_count 内存页的数量
 */
static void addr_free_page(addr_alloc_t *alloc, uint32_t addr, int page_count) {
   105f0:	55                   	push   %ebp
   105f1:	89 e5                	mov    %esp,%ebp
   105f3:	83 ec 18             	sub    $0x18,%esp
  mutex_lock(&alloc->mutex);
   105f6:	8b 45 08             	mov    0x8(%ebp),%eax
   105f9:	83 ec 0c             	sub    $0xc,%esp
   105fc:	50                   	push   %eax
   105fd:	e8 9f 2d 00 00       	call   133a1 <mutex_lock>
   10602:	83 c4 10             	add    $0x10,%esp

  //将所有页引用-1
  for (int i = 0; i < page_count; ++i) {
   10605:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1060c:	eb 64                	jmp    10672 <addr_free_page+0x82>
    //获取当前页的地址
    uint32_t page_addr = addr + i * MEM_PAGE_SIZE;
   1060e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10611:	c1 e0 0c             	shl    $0xc,%eax
   10614:	89 c2                	mov    %eax,%edx
   10616:	8b 45 0c             	mov    0xc(%ebp),%eax
   10619:	01 d0                	add    %edx,%eax
   1061b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    //引用-1
    page_ref_sub(alloc, page_addr);
   1061e:	83 ec 08             	sub    $0x8,%esp
   10621:	ff 75 f0             	push   -0x10(%ebp)
   10624:	ff 75 08             	push   0x8(%ebp)
   10627:	e8 cf fd ff ff       	call   103fb <page_ref_sub>
   1062c:	83 c4 10             	add    $0x10,%esp
    //获取当前页引用
    int ref = get_page_ref(alloc, page_addr);
   1062f:	83 ec 08             	sub    $0x8,%esp
   10632:	ff 75 f0             	push   -0x10(%ebp)
   10635:	ff 75 08             	push   0x8(%ebp)
   10638:	e8 26 fe ff ff       	call   10463 <get_page_ref>
   1063d:	83 c4 10             	add    $0x10,%esp
   10640:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (ref == 0)  {//引用为0，释放该页
   10643:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   10647:	75 25                	jne    1066e <addr_free_page+0x7e>
        bitmap_set_bit(&alloc->bitmap, page_index(alloc, page_addr), 1, 0);
   10649:	83 ec 08             	sub    $0x8,%esp
   1064c:	ff 75 f0             	push   -0x10(%ebp)
   1064f:	ff 75 08             	push   0x8(%ebp)
   10652:	e8 29 fd ff ff       	call   10380 <page_index>
   10657:	83 c4 10             	add    $0x10,%esp
   1065a:	8b 55 08             	mov    0x8(%ebp),%edx
   1065d:	83 c2 14             	add    $0x14,%edx
   10660:	6a 00                	push   $0x0
   10662:	6a 01                	push   $0x1
   10664:	50                   	push   %eax
   10665:	52                   	push   %edx
   10666:	e8 56 35 00 00       	call   13bc1 <bitmap_set_bit>
   1066b:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < page_count; ++i) {
   1066e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10672:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10675:	3b 45 10             	cmp    0x10(%ebp),%eax
   10678:	7c 94                	jl     1060e <addr_free_page+0x1e>
    }

  }

  mutex_unlock(&alloc->mutex);
   1067a:	8b 45 08             	mov    0x8(%ebp),%eax
   1067d:	83 ec 0c             	sub    $0xc,%esp
   10680:	50                   	push   %eax
   10681:	e8 ac 2d 00 00       	call   13432 <mutex_unlock>
   10686:	83 c4 10             	add    $0x10,%esp
}
   10689:	90                   	nop
   1068a:	c9                   	leave  
   1068b:	c3                   	ret    

0001068c <show_mem_info>:
/**
 * @brief  打印1m以内内存的可用空间
 * 
 * @param boot_info 
 */
static void show_mem_info(boot_info_t *boot_info) {
   1068c:	55                   	push   %ebp
   1068d:	89 e5                	mov    %esp,%ebp
   1068f:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:");
   10692:	83 ec 0c             	sub    $0xc,%esp
   10695:	68 c0 48 01 00       	push   $0x148c0
   1069a:	e8 0c 41 00 00       	call   147ab <log_printf>
   1069f:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   106a2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   106a9:	eb 29                	jmp    106d4 <show_mem_info+0x48>
        log_printf("[%d]: 0x%x - 0x%x", i, boot_info->ram_region_cfg[i].start, boot_info->ram_region_cfg[i].size);
   106ab:	8b 45 08             	mov    0x8(%ebp),%eax
   106ae:	8b 55 f4             	mov    -0xc(%ebp),%edx
   106b1:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   106b5:	8b 45 08             	mov    0x8(%ebp),%eax
   106b8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   106bb:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   106be:	52                   	push   %edx
   106bf:	50                   	push   %eax
   106c0:	ff 75 f4             	push   -0xc(%ebp)
   106c3:	68 cc 48 01 00       	push   $0x148cc
   106c8:	e8 de 40 00 00       	call   147ab <log_printf>
   106cd:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   106d0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   106d4:	8b 45 08             	mov    0x8(%ebp),%eax
   106d7:	8b 40 50             	mov    0x50(%eax),%eax
   106da:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   106dd:	7c cc                	jl     106ab <show_mem_info+0x1f>
    }

    log_printf("");
   106df:	83 ec 0c             	sub    $0xc,%esp
   106e2:	68 de 48 01 00       	push   $0x148de
   106e7:	e8 bf 40 00 00       	call   147ab <log_printf>
   106ec:	83 c4 10             	add    $0x10,%esp
}
   106ef:	90                   	nop
   106f0:	c9                   	leave  
   106f1:	c3                   	ret    

000106f2 <total_mem_size>:
 * @brief  计算总的可用内存空间大小
 * 
 * @param boot_info 
 * @return uint32_t 
 */
static uint32_t total_mem_size(boot_info_t *boot_info) {
   106f2:	55                   	push   %ebp
   106f3:	89 e5                	mov    %esp,%ebp
   106f5:	83 ec 10             	sub    $0x10,%esp
    uint32_t mem_size = 0;
   106f8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   106ff:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   10706:	eb 11                	jmp    10719 <total_mem_size+0x27>
        mem_size += boot_info->ram_region_cfg[i].size;
   10708:	8b 45 08             	mov    0x8(%ebp),%eax
   1070b:	8b 55 f8             	mov    -0x8(%ebp),%edx
   1070e:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
   10712:	01 45 fc             	add    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   10715:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   10719:	8b 45 08             	mov    0x8(%ebp),%eax
   1071c:	8b 40 50             	mov    0x50(%eax),%eax
   1071f:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   10722:	7c e4                	jl     10708 <total_mem_size+0x16>
    }

    return mem_size;
   10724:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10727:	c9                   	leave  
   10728:	c3                   	ret    

00010729 <find_pte>:
 *                 1：表示创建一个新页目录项，并为其分配一个新页作为页表
 *                 0: 返回0
 *                
 * @return pte_t* 索引到的页表项
 */
pte_t* find_pte(pde_t* page_dir, uint32_t vstart, int is_alloc) {
   10729:	55                   	push   %ebp
   1072a:	89 e5                	mov    %esp,%ebp
   1072c:	83 ec 18             	sub    $0x18,%esp
  pte_t* page_table; //记录被索引的页表
  //1.通过虚拟地址高10位索引到对应的页目录项
  pde_t* pde = page_dir + pde_index(vstart);
   1072f:	ff 75 0c             	push   0xc(%ebp)
   10732:	e8 c0 fb ff ff       	call   102f7 <pde_index>
   10737:	83 c4 04             	add    $0x4,%esp
   1073a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10741:	8b 45 08             	mov    0x8(%ebp),%eax
   10744:	01 d0                	add    %edx,%eax
   10746:	89 45 f0             	mov    %eax,-0x10(%ebp)

  //2.判断该页目录项是否已存在，及该页目录项是否已指向一个被分配的页表
  if (pde->present) { //该页目录项存在，及存在对应的页表，可以索引到对应的页表
   10749:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1074c:	0f b6 00             	movzbl (%eax),%eax
   1074f:	83 e0 01             	and    $0x1,%eax
   10752:	84 c0                	test   %al,%al
   10754:	74 10                	je     10766 <find_pte+0x3d>
    page_table = (pte_t*)pde_to_pt_addr(pde);
   10756:	ff 75 f0             	push   -0x10(%ebp)
   10759:	e8 b4 fb ff ff       	call   10312 <pde_to_pt_addr>
   1075e:	83 c4 04             	add    $0x4,%esp
   10761:	89 45 f4             	mov    %eax,-0xc(%ebp)
   10764:	eb 57                	jmp    107bd <find_pte+0x94>
  } else {//该目录项不存在内存中，及对应的页表不存在
    if (is_alloc == 0) {  //不为该目录项创建对应的页表
   10766:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1076a:	75 07                	jne    10773 <find_pte+0x4a>
      return (pte_t*)0;
   1076c:	b8 00 00 00 00       	mov    $0x0,%eax
   10771:	eb 64                	jmp    107d7 <find_pte+0xae>
    }

    //为该目录项分配一页作为页表
    uint32_t pg_addr = addr_alloc_page(&paddr_alloc, 1);
   10773:	83 ec 08             	sub    $0x8,%esp
   10776:	6a 01                	push   $0x1
   10778:	68 00 70 01 00       	push   $0x17000
   1077d:	e8 07 fe ff ff       	call   10589 <addr_alloc_page>
   10782:	83 c4 10             	add    $0x10,%esp
   10785:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pg_addr == 0) { //分配失败
   10788:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1078c:	75 07                	jne    10795 <find_pte+0x6c>
      return (pte_t*)0;
   1078e:	b8 00 00 00 00       	mov    $0x0,%eax
   10793:	eb 42                	jmp    107d7 <find_pte+0xae>
    }

    //分配成功, 索引对应的页表
    page_table = (pte_t*)pg_addr;
   10795:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10798:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_memset(page_table, 0, MEM_PAGE_SIZE);
   1079b:	83 ec 04             	sub    $0x4,%esp
   1079e:	68 00 10 00 00       	push   $0x1000
   107a3:	6a 00                	push   $0x0
   107a5:	ff 75 f4             	push   -0xc(%ebp)
   107a8:	e8 be 37 00 00       	call   13f6b <kernel_memset>
   107ad:	83 c4 10             	add    $0x10,%esp

    //将该页表的起始地址放入对应的页目录项中并放入页目录表中，方便后续索引到该页表
    //且权限都放宽，即普通用户可访问，对应的页表的所有页可读写，将具体的权限交给每一页来进一步限制
    pde->v = pg_addr | PDE_U | PDE_W | PDE_P;
   107b0:	8b 45 ec             	mov    -0x14(%ebp),%eax
   107b3:	83 c8 07             	or     $0x7,%eax
   107b6:	89 c2                	mov    %eax,%edx
   107b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   107bb:	89 10                	mov    %edx,(%eax)

  // log_printf("sizeof(pte_t) = %d", sizeof(pte_t));


  //3.返回在该页表中索引到的页表项
  return page_table + pte_index(vstart);
   107bd:	83 ec 0c             	sub    $0xc,%esp
   107c0:	ff 75 0c             	push   0xc(%ebp)
   107c3:	e8 3a fb ff ff       	call   10302 <pte_index>
   107c8:	83 c4 10             	add    $0x10,%esp
   107cb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   107d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107d5:	01 d0                	add    %edx,%eax

}
   107d7:	c9                   	leave  
   107d8:	c3                   	ret    

000107d9 <memory_creat_map>:
 * @param pstart 物理地址的起始地址
 * @param page_count 分页数量
 * @param privilege 该段虚拟地址的特权级
 * @return int -1:分配失败
 */
int  memory_creat_map(pde_t *page_dir, uint32_t vstart, uint32_t pstart, int page_count, uint32_t privilege) {
   107d9:	55                   	push   %ebp
   107da:	89 e5                	mov    %esp,%ebp
   107dc:	83 ec 18             	sub    $0x18,%esp
  //1.为每一页创建对应的页表项
  for (int i = 0; i < page_count; ++i) {
   107df:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   107e6:	e9 91 00 00 00       	jmp    1087c <memory_creat_map+0xa3>
    // //打印调试信息
    // log_printf("creat map: v-0x%x, p-0x%x, privilege:0x%x", vstart, pstart, privilege);

    //2.通过虚拟地址在页目录表中获取对应的页目录项指向的页表,
    //且当没有该页目录项时，为其分配一个页作为页表并让一个目录项指向该页表
    pte_t *pte = find_pte(page_dir, vstart, 1);
   107eb:	83 ec 04             	sub    $0x4,%esp
   107ee:	6a 01                	push   $0x1
   107f0:	ff 75 0c             	push   0xc(%ebp)
   107f3:	ff 75 08             	push   0x8(%ebp)
   107f6:	e8 2e ff ff ff       	call   10729 <find_pte>
   107fb:	83 c4 10             	add    $0x10,%esp
   107fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pte == (pte_t*)0) {//没有找到可用的页表项
   10801:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10805:	75 17                	jne    1081e <memory_creat_map+0x45>
    log_printf("creat pte failed pte == 0");
   10807:	83 ec 0c             	sub    $0xc,%esp
   1080a:	68 df 48 01 00       	push   $0x148df
   1080f:	e8 97 3f 00 00       	call   147ab <log_printf>
   10814:	83 c4 10             	add    $0x10,%esp
      return -1;
   10817:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1081c:	eb 6f                	jmp    1088d <memory_creat_map+0xb4>
    }

    // log_printf("pte addr : 0x%x", (uint32_t)pte);
    //3.确保该页并未已存在内存中
    ASSERT(pte->present == 0);
   1081e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10821:	0f b6 00             	movzbl (%eax),%eax
   10824:	83 e0 01             	and    $0x1,%eax
   10827:	84 c0                	test   %al,%al
   10829:	74 1c                	je     10847 <memory_creat_map+0x6e>
   1082b:	68 f9 48 01 00       	push   $0x148f9
   10830:	68 08 4a 01 00       	push   $0x14a08
   10835:	68 1c 01 00 00       	push   $0x11c
   1083a:	68 0c 49 01 00       	push   $0x1490c
   1083f:	e8 25 32 00 00       	call   13a69 <pannic>
   10844:	83 c4 10             	add    $0x10,%esp

    //4.在页表项中创建对应的映射关系，并该页权限，页权限以当前权限为主，因为pde处已放宽权限
    pte->v = pstart | privilege | PTE_P;
   10847:	8b 45 10             	mov    0x10(%ebp),%eax
   1084a:	0b 45 18             	or     0x18(%ebp),%eax
   1084d:	83 c8 01             	or     $0x1,%eax
   10850:	89 c2                	mov    %eax,%edx
   10852:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10855:	89 10                	mov    %edx,(%eax)

    //5.将该页引用计数+1
    page_ref_add(&paddr_alloc, pstart);
   10857:	83 ec 08             	sub    $0x8,%esp
   1085a:	ff 75 10             	push   0x10(%ebp)
   1085d:	68 00 70 01 00       	push   $0x17000
   10862:	e8 3e fb ff ff       	call   103a5 <page_ref_add>
   10867:	83 c4 10             	add    $0x10,%esp

    //6.切换为下一页
    vstart += MEM_PAGE_SIZE;
   1086a:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    pstart += MEM_PAGE_SIZE;
   10871:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
  for (int i = 0; i < page_count; ++i) {
   10878:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1087c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1087f:	3b 45 14             	cmp    0x14(%ebp),%eax
   10882:	0f 8c 63 ff ff ff    	jl     107eb <memory_creat_map+0x12>

  }

  return 1;
   10888:	b8 01 00 00 00       	mov    $0x1,%eax
 }
   1088d:	c9                   	leave  
   1088e:	c3                   	ret    

0001088f <create_kernal_table>:

//TODO:编写函数注释
void create_kernal_table(void) {
   1088f:	55                   	push   %ebp
   10890:	89 e5                	mov    %esp,%ebp
   10892:	83 ec 28             	sub    $0x28,%esp
    {&s_data, (void*)MEM_EBDA_START, &s_data, PTE_W},    //可读写段的映射关系，一直到bios的拓展数据区(内核.data与.bss段再加上剩余的可用数据区域)
    {(void*)MEM_EXT_START, (void*)MEM_EXT_END, (void*)MEM_EXT_START, PTE_W}, //将1mb到127mb都映射给操作系统使用

  };

  for (int i = 0; i < sizeof(kernal_map) / sizeof(kernal_map[0]); ++i) {
   10895:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1089c:	e9 92 00 00 00       	jmp    10933 <create_kernal_table+0xa4>
    memory_map_t *map = kernal_map + i;
   108a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   108a4:	c1 e0 04             	shl    $0x4,%eax
   108a7:	05 00 60 01 00       	add    $0x16000,%eax
   108ac:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //将虚拟地址的起始地址按页大小4kb对齐，为了不丢失原有的虚拟地址空间，所以向下对齐vstart
    //理论上虚拟地址是不需要上下边缘对齐的，这里主要是为了计算所需页数
    //因为虚拟地址的每一页都和页目录项以及页表项捆绑了，
    //只需用页目录项和页表项为该页映射一个物理页即可，所以物理页才必须上下边缘按4kb对齐
    uint32_t vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   108af:	8b 45 f0             	mov    -0x10(%ebp),%eax
   108b2:	8b 00                	mov    (%eax),%eax
   108b4:	68 00 10 00 00       	push   $0x1000
   108b9:	50                   	push   %eax
   108ba:	e8 08 fa ff ff       	call   102c7 <down2>
   108bf:	83 c4 08             	add    $0x8,%esp
   108c2:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32_t pstart = down2((uint32_t)map->pstart, MEM_PAGE_SIZE);
   108c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   108c8:	8b 40 08             	mov    0x8(%eax),%eax
   108cb:	68 00 10 00 00       	push   $0x1000
   108d0:	50                   	push   %eax
   108d1:	e8 f1 f9 ff ff       	call   102c7 <down2>
   108d6:	83 c4 08             	add    $0x8,%esp
   108d9:	89 45 e8             	mov    %eax,-0x18(%ebp)
    //将虚拟地址的结束地址按页大小4kb对齐, 为了不丢失原有的虚拟地址空间，所以向上对齐vend
    uint32_t vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   108dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   108df:	8b 40 04             	mov    0x4(%eax),%eax
   108e2:	68 00 10 00 00       	push   $0x1000
   108e7:	50                   	push   %eax
   108e8:	e8 e7 f9 ff ff       	call   102d4 <up2>
   108ed:	83 c4 08             	add    $0x8,%esp
   108f0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    //计算该虚拟空间需要的页数
    int page_count = (vend - vstart) / MEM_PAGE_SIZE;
   108f3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   108f6:	2b 45 ec             	sub    -0x14(%ebp),%eax
   108f9:	c1 e8 0c             	shr    $0xc,%eax
   108fc:	89 45 e0             	mov    %eax,-0x20(%ebp)

    //创建内存映射关系
    memory_creat_map(kernel_page_dir, vstart, pstart, page_count, map->privilege);
   108ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10902:	8b 40 0c             	mov    0xc(%eax),%eax
   10905:	83 ec 0c             	sub    $0xc,%esp
   10908:	50                   	push   %eax
   10909:	ff 75 e0             	push   -0x20(%ebp)
   1090c:	ff 75 e8             	push   -0x18(%ebp)
   1090f:	ff 75 ec             	push   -0x14(%ebp)
   10912:	68 00 f0 01 00       	push   $0x1f000
   10917:	e8 bd fe ff ff       	call   107d9 <memory_creat_map>
   1091c:	83 c4 20             	add    $0x20,%esp
    //清空内核空间对页的引用
    clear_page_ref(&paddr_alloc);
   1091f:	83 ec 0c             	sub    $0xc,%esp
   10922:	68 00 70 01 00       	push   $0x17000
   10927:	e8 85 fb ff ff       	call   104b1 <clear_page_ref>
   1092c:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < sizeof(kernal_map) / sizeof(kernal_map[0]); ++i) {
   1092f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10933:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10936:	83 f8 03             	cmp    $0x3,%eax
   10939:	0f 86 62 ff ff ff    	jbe    108a1 <create_kernal_table+0x12>

  }
}
   1093f:	90                   	nop
   10940:	90                   	nop
   10941:	c9                   	leave  
   10942:	c3                   	ret    

00010943 <memory_creat_uvm>:
/**
 * @brief 创建用户进程的虚拟内存空间，即页目录表
 * 
 * @return uint32_t 
 */
uint32_t memory_creat_uvm() {
   10943:	55                   	push   %ebp
   10944:	89 e5                	mov    %esp,%ebp
   10946:	83 ec 18             	sub    $0x18,%esp
  //1.分配一页作为页目录表
  pde_t *page_dir = (pde_t *)addr_alloc_page(&paddr_alloc, 1);
   10949:	83 ec 08             	sub    $0x8,%esp
   1094c:	6a 01                	push   $0x1
   1094e:	68 00 70 01 00       	push   $0x17000
   10953:	e8 31 fc ff ff       	call   10589 <addr_alloc_page>
   10958:	83 c4 10             	add    $0x10,%esp
   1095b:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (page_dir == 0) return 0;
   1095e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10962:	75 07                	jne    1096b <memory_creat_uvm+0x28>
   10964:	b8 00 00 00 00       	mov    $0x0,%eax
   10969:	eb 5b                	jmp    109c6 <memory_creat_uvm+0x83>
  //TODO:新分配的页并未做虚拟内存映射，会触发缺页异常，需要处理,这里先将1mb以上的所有空间都映射给内核进程

  //2.将该页的内容清空
  kernel_memset((void*)page_dir, 0, MEM_PAGE_SIZE);
   1096b:	83 ec 04             	sub    $0x4,%esp
   1096e:	68 00 10 00 00       	push   $0x1000
   10973:	6a 00                	push   $0x0
   10975:	ff 75 f0             	push   -0x10(%ebp)
   10978:	e8 ee 35 00 00       	call   13f6b <kernel_memset>
   1097d:	83 c4 10             	add    $0x10,%esp

  //3.获取用户进程空间的第一个页目录项索引, 用户进程空间的起始地址MEM_TASK_BASE = 0x800 00000
  uint32_t user_pde_start = pde_index(MEM_TASK_BASE);
   10980:	83 ec 0c             	sub    $0xc,%esp
   10983:	68 00 00 00 80       	push   $0x80000000
   10988:	e8 6a f9 ff ff       	call   102f7 <pde_index>
   1098d:	83 c4 10             	add    $0x10,%esp
   10990:	89 45 ec             	mov    %eax,-0x14(%ebp)

  //4.将用户进程空间以下的空间映射给操作系统使用，即将0~user_pde_start的pde提供给操作系统作为页目录项
  for (int i = 0; i < user_pde_start; ++i) {
   10993:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1099a:	eb 1f                	jmp    109bb <memory_creat_uvm+0x78>
      page_dir[i].v = kernel_page_dir[i].v; //所有进程都共享操作系统的页表
   1099c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1099f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   109a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   109a9:	01 c2                	add    %eax,%edx
   109ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109ae:	8b 04 85 00 f0 01 00 	mov    0x1f000(,%eax,4),%eax
   109b5:	89 02                	mov    %eax,(%edx)
  for (int i = 0; i < user_pde_start; ++i) {
   109b7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   109bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109be:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   109c1:	77 d9                	ja     1099c <memory_creat_uvm+0x59>
  }


  return (uint32_t)page_dir;
   109c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   109c6:	c9                   	leave  
   109c7:	c3                   	ret    

000109c8 <memory_copy_uvm>:
 * 
 * @param to_page_dir 拷贝到的目标页目录表地址
 * @param from_page_dir 被拷贝的源页目录表地址
 * @return uint32_t 
 */
int memory_copy_uvm(uint32_t to_page_dir, uint32_t from_page_dir) {
   109c8:	55                   	push   %ebp
   109c9:	89 e5                	mov    %esp,%ebp
   109cb:	83 ec 38             	sub    $0x38,%esp
  //1.获取用户程序虚拟地址的起始pde索引，即0x8000 0000 的pde索引值
  uint32_t user_pde_start = pde_index(MEM_TASK_BASE);
   109ce:	68 00 00 00 80       	push   $0x80000000
   109d3:	e8 1f f9 ff ff       	call   102f7 <pde_index>
   109d8:	83 c4 04             	add    $0x4,%esp
   109db:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  pde_t *pde = (pde_t *)from_page_dir + user_pde_start;
   109de:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   109e1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   109e8:	8b 45 0c             	mov    0xc(%ebp),%eax
   109eb:	01 d0                	add    %edx,%eax
   109ed:	89 45 f4             	mov    %eax,-0xc(%ebp)

  //2.遍历源页目录表中的每一个页目录项，拷贝给目标目录
  for (int i = user_pde_start; i < PDE_CNT; ++i, ++pde) {
   109f0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   109f3:	89 45 f0             	mov    %eax,-0x10(%ebp)
   109f6:	e9 2a 01 00 00       	jmp    10b25 <memory_copy_uvm+0x15d>
    if (!pde->present)  //当前页目录项不存在
   109fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109fe:	0f b6 00             	movzbl (%eax),%eax
   10a01:	83 e0 01             	and    $0x1,%eax
   10a04:	84 c0                	test   %al,%al
   10a06:	0f 84 10 01 00 00    	je     10b1c <memory_copy_uvm+0x154>
      continue;

    //3.获取页目录项指向的页表的起始地址
    pte_t *pte = (pte_t*)pde_to_pt_addr(pde);
   10a0c:	ff 75 f4             	push   -0xc(%ebp)
   10a0f:	e8 fe f8 ff ff       	call   10312 <pde_to_pt_addr>
   10a14:	83 c4 04             	add    $0x4,%esp
   10a17:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //4.遍历页表的页表项，进行读共享写复制的映射操作
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   10a1a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   10a21:	e9 e7 00 00 00       	jmp    10b0d <memory_copy_uvm+0x145>
      if (!pte->present)  //当前页表项不存在
   10a26:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10a29:	0f b6 00             	movzbl (%eax),%eax
   10a2c:	83 e0 01             	and    $0x1,%eax
   10a2f:	84 c0                	test   %al,%al
   10a31:	0f 84 cd 00 00 00    	je     10b04 <memory_copy_uvm+0x13c>
        continue;
      
      //5.获取该页表项对应的虚拟地址
      uint32_t vaddr = (i << 22) | (j << 12);
   10a37:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10a3a:	c1 e0 16             	shl    $0x16,%eax
   10a3d:	89 c2                	mov    %eax,%edx
   10a3f:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10a42:	c1 e0 0c             	shl    $0xc,%eax
   10a45:	09 d0                	or     %edx,%eax
   10a47:	89 45 e0             	mov    %eax,-0x20(%ebp)
      
      //6.判断当前页表项指向的页是否支持写操作
      if (pte->v & PTE_W) { //当前页支持写操作，需进行复制操作
   10a4a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10a4d:	8b 00                	mov    (%eax),%eax
   10a4f:	83 e0 02             	and    $0x2,%eax
   10a52:	85 c0                	test   %eax,%eax
   10a54:	74 6c                	je     10ac2 <memory_copy_uvm+0xfa>
        //分配一个新的页，进行拷贝
        uint32_t page = addr_alloc_page(&paddr_alloc, 1);
   10a56:	83 ec 08             	sub    $0x8,%esp
   10a59:	6a 01                	push   $0x1
   10a5b:	68 00 70 01 00       	push   $0x17000
   10a60:	e8 24 fb ff ff       	call   10589 <addr_alloc_page>
   10a65:	83 c4 10             	add    $0x10,%esp
   10a68:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        if (page == 0)  //分配失败
   10a6b:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   10a6f:	0f 84 c4 00 00 00    	je     10b39 <memory_copy_uvm+0x171>
          goto copy_uvm_failed;
        
        //记录映射关系
        int err = memory_creat_map((pde_t*)to_page_dir, vaddr, page, 1, get_pte_privilege(pte));
   10a75:	83 ec 0c             	sub    $0xc,%esp
   10a78:	ff 75 ec             	push   -0x14(%ebp)
   10a7b:	e8 e0 f8 ff ff       	call   10360 <get_pte_privilege>
   10a80:	83 c4 10             	add    $0x10,%esp
   10a83:	8b 55 08             	mov    0x8(%ebp),%edx
   10a86:	83 ec 0c             	sub    $0xc,%esp
   10a89:	50                   	push   %eax
   10a8a:	6a 01                	push   $0x1
   10a8c:	ff 75 d4             	push   -0x2c(%ebp)
   10a8f:	ff 75 e0             	push   -0x20(%ebp)
   10a92:	52                   	push   %edx
   10a93:	e8 41 fd ff ff       	call   107d9 <memory_creat_map>
   10a98:	83 c4 20             	add    $0x20,%esp
   10a9b:	89 45 d0             	mov    %eax,-0x30(%ebp)
        if (err < 0)
   10a9e:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
   10aa2:	0f 88 94 00 00 00    	js     10b3c <memory_copy_uvm+0x174>
          goto copy_uvm_failed;
        
        //拷贝该页内容
        kernel_memcpy((void*)page, (void*)vaddr, MEM_PAGE_SIZE);
   10aa8:	8b 55 e0             	mov    -0x20(%ebp),%edx
   10aab:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   10aae:	83 ec 04             	sub    $0x4,%esp
   10ab1:	68 00 10 00 00       	push   $0x1000
   10ab6:	52                   	push   %edx
   10ab7:	50                   	push   %eax
   10ab8:	e8 5f 34 00 00       	call   13f1c <kernel_memcpy>
   10abd:	83 c4 10             	add    $0x10,%esp
   10ac0:	eb 43                	jmp    10b05 <memory_copy_uvm+0x13d>

      } else {  //当前页为只读页，直接共享该页即可，即只复制页表项即可
        //获取该页的地址
        uint32_t page = pte_to_pg_addr(pte);
   10ac2:	83 ec 0c             	sub    $0xc,%esp
   10ac5:	ff 75 ec             	push   -0x14(%ebp)
   10ac8:	e8 6c f8 ff ff       	call   10339 <pte_to_pg_addr>
   10acd:	83 c4 10             	add    $0x10,%esp
   10ad0:	89 45 dc             	mov    %eax,-0x24(%ebp)
        //记录映射关系
        int err = memory_creat_map((pde_t*)to_page_dir, vaddr, page, 1, get_pte_privilege(pte));
   10ad3:	83 ec 0c             	sub    $0xc,%esp
   10ad6:	ff 75 ec             	push   -0x14(%ebp)
   10ad9:	e8 82 f8 ff ff       	call   10360 <get_pte_privilege>
   10ade:	83 c4 10             	add    $0x10,%esp
   10ae1:	8b 55 08             	mov    0x8(%ebp),%edx
   10ae4:	83 ec 0c             	sub    $0xc,%esp
   10ae7:	50                   	push   %eax
   10ae8:	6a 01                	push   $0x1
   10aea:	ff 75 dc             	push   -0x24(%ebp)
   10aed:	ff 75 e0             	push   -0x20(%ebp)
   10af0:	52                   	push   %edx
   10af1:	e8 e3 fc ff ff       	call   107d9 <memory_creat_map>
   10af6:	83 c4 20             	add    $0x20,%esp
   10af9:	89 45 d8             	mov    %eax,-0x28(%ebp)
        if (err < 0)
   10afc:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
   10b00:	78 3d                	js     10b3f <memory_copy_uvm+0x177>
   10b02:	eb 01                	jmp    10b05 <memory_copy_uvm+0x13d>
        continue;
   10b04:	90                   	nop
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   10b05:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   10b09:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   10b0d:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   10b14:	0f 8e 0c ff ff ff    	jle    10a26 <memory_copy_uvm+0x5e>
   10b1a:	eb 01                	jmp    10b1d <memory_copy_uvm+0x155>
      continue;
   10b1c:	90                   	nop
  for (int i = user_pde_start; i < PDE_CNT; ++i, ++pde) {
   10b1d:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10b21:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   10b25:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   10b2c:	0f 8e c9 fe ff ff    	jle    109fb <memory_copy_uvm+0x33>
      }

    }
  }

  return 1;
   10b32:	b8 01 00 00 00       	mov    $0x1,%eax
   10b37:	eb 1a                	jmp    10b53 <memory_copy_uvm+0x18b>
          goto copy_uvm_failed;
   10b39:	90                   	nop
   10b3a:	eb 04                	jmp    10b40 <memory_copy_uvm+0x178>
          goto copy_uvm_failed;
   10b3c:	90                   	nop
   10b3d:	eb 01                	jmp    10b40 <memory_copy_uvm+0x178>
          goto copy_uvm_failed;
   10b3f:	90                   	nop


copy_uvm_failed:
  //copy虚拟空间映射失败，以开启读共享的方式清理对应资源
  memory_destroy_uvm(to_page_dir);
   10b40:	83 ec 0c             	sub    $0xc,%esp
   10b43:	ff 75 08             	push   0x8(%ebp)
   10b46:	e8 0a 00 00 00       	call   10b55 <memory_destroy_uvm>
   10b4b:	83 c4 10             	add    $0x10,%esp
  return -1;
   10b4e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10b53:	c9                   	leave  
   10b54:	c3                   	ret    

00010b55 <memory_destroy_uvm>:
 *        //TODO:进行了读不释放写释放的处理操作，只能供memory_copy_uvm函数失败时调用
 * 
 * @param page_dir 页目录表的地址
 * @param is_read_share 是否开启了读共享策略，1开启，0未开启
 */
void memory_destroy_uvm(uint32_t page_dir) {
   10b55:	55                   	push   %ebp
   10b56:	89 e5                	mov    %esp,%ebp
   10b58:	83 ec 28             	sub    $0x28,%esp
  //1.获取用户进程虚拟地址的起始地址对应的该页目录项
  uint32_t user_task_start  = pde_index(MEM_TASK_BASE);
   10b5b:	68 00 00 00 80       	push   $0x80000000
   10b60:	e8 92 f7 ff ff       	call   102f7 <pde_index>
   10b65:	83 c4 04             	add    $0x4,%esp
   10b68:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  pde_t *pde = (pde_t*) page_dir + user_task_start;
   10b6b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10b6e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10b75:	8b 45 08             	mov    0x8(%ebp),%eax
   10b78:	01 d0                	add    %edx,%eax
   10b7a:	89 45 f4             	mov    %eax,-0xc(%ebp)

  //2.遍历每一个页目录项，清理对应资源
  for (int i = user_task_start; i < PDE_CNT; ++i, ++pde) {
   10b7d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10b80:	89 45 f0             	mov    %eax,-0x10(%ebp)
   10b83:	e9 8f 00 00 00       	jmp    10c17 <memory_destroy_uvm+0xc2>
    if (!pde->present) 
   10b88:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b8b:	0f b6 00             	movzbl (%eax),%eax
   10b8e:	83 e0 01             	and    $0x1,%eax
   10b91:	84 c0                	test   %al,%al
   10b93:	74 79                	je     10c0e <memory_destroy_uvm+0xb9>
        continue;

    //3.获取页目录项对应的页表的起始地址
    pte_t *pte = (pte_t*)pde_to_pt_addr(pde);
   10b95:	ff 75 f4             	push   -0xc(%ebp)
   10b98:	e8 75 f7 ff ff       	call   10312 <pde_to_pt_addr>
   10b9d:	83 c4 04             	add    $0x4,%esp
   10ba0:	89 45 ec             	mov    %eax,-0x14(%ebp)
    
    //4.遍历所有页表项，清理对应资源
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   10ba3:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   10baa:	eb 36                	jmp    10be2 <memory_destroy_uvm+0x8d>
      if (!pte->present)
   10bac:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10baf:	0f b6 00             	movzbl (%eax),%eax
   10bb2:	83 e0 01             	and    $0x1,%eax
   10bb5:	84 c0                	test   %al,%al
   10bb7:	74 20                	je     10bd9 <memory_destroy_uvm+0x84>
        continue;
      
      //5.释放该物理页
      addr_free_page(&paddr_alloc, pte_to_pg_addr(pte), 1);
   10bb9:	ff 75 ec             	push   -0x14(%ebp)
   10bbc:	e8 78 f7 ff ff       	call   10339 <pte_to_pg_addr>
   10bc1:	83 c4 04             	add    $0x4,%esp
   10bc4:	83 ec 04             	sub    $0x4,%esp
   10bc7:	6a 01                	push   $0x1
   10bc9:	50                   	push   %eax
   10bca:	68 00 70 01 00       	push   $0x17000
   10bcf:	e8 1c fa ff ff       	call   105f0 <addr_free_page>
   10bd4:	83 c4 10             	add    $0x10,%esp
   10bd7:	eb 01                	jmp    10bda <memory_destroy_uvm+0x85>
        continue;
   10bd9:	90                   	nop
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   10bda:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   10bde:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   10be2:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   10be9:	7e c1                	jle    10bac <memory_destroy_uvm+0x57>
    }

    //6.释放存储该页表的物理页
    addr_free_page(&paddr_alloc, pde_to_pt_addr(pde), 1);
   10beb:	83 ec 0c             	sub    $0xc,%esp
   10bee:	ff 75 f4             	push   -0xc(%ebp)
   10bf1:	e8 1c f7 ff ff       	call   10312 <pde_to_pt_addr>
   10bf6:	83 c4 10             	add    $0x10,%esp
   10bf9:	83 ec 04             	sub    $0x4,%esp
   10bfc:	6a 01                	push   $0x1
   10bfe:	50                   	push   %eax
   10bff:	68 00 70 01 00       	push   $0x17000
   10c04:	e8 e7 f9 ff ff       	call   105f0 <addr_free_page>
   10c09:	83 c4 10             	add    $0x10,%esp
   10c0c:	eb 01                	jmp    10c0f <memory_destroy_uvm+0xba>
        continue;
   10c0e:	90                   	nop
  for (int i = user_task_start; i < PDE_CNT; ++i, ++pde) {
   10c0f:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10c13:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   10c17:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   10c1e:	0f 8e 64 ff ff ff    	jle    10b88 <memory_destroy_uvm+0x33>
  }


  //7.释放存储该页目录表的物理页
  addr_free_page(&paddr_alloc, page_dir, 1);
   10c24:	83 ec 04             	sub    $0x4,%esp
   10c27:	6a 01                	push   $0x1
   10c29:	ff 75 08             	push   0x8(%ebp)
   10c2c:	68 00 70 01 00       	push   $0x17000
   10c31:	e8 ba f9 ff ff       	call   105f0 <addr_free_page>
   10c36:	83 c4 10             	add    $0x10,%esp
}
   10c39:	90                   	nop
   10c3a:	c9                   	leave  
   10c3b:	c3                   	ret    

00010c3c <memory_init>:
/**
 * @brief  初始化化内存
 *
 * @param boot_info cpu在实模式下检测到的可用内存对象
 */
void memory_init(boot_info_t *boot_info) {
   10c3c:	55                   	push   %ebp
   10c3d:	89 e5                	mov    %esp,%ebp
   10c3f:	83 ec 18             	sub    $0x18,%esp

  
    //声明紧邻在内核bss段后面的空间地址，用于存储位图，该变量定义在kernel.lds中
    extern char mem_free_start;

    log_printf("memory init");
   10c42:	83 ec 0c             	sub    $0xc,%esp
   10c45:	68 43 49 01 00       	push   $0x14943
   10c4a:	e8 5c 3b 00 00       	call   147ab <log_printf>
   10c4f:	83 c4 10             	add    $0x10,%esp

    log_printf("mem_free_start: 0x%x", &mem_free_start);
   10c52:	83 ec 08             	sub    $0x8,%esp
   10c55:	68 9e b1 03 00       	push   $0x3b19e
   10c5a:	68 4f 49 01 00       	push   $0x1494f
   10c5f:	e8 47 3b 00 00       	call   147ab <log_printf>
   10c64:	83 c4 10             	add    $0x10,%esp

    show_mem_info(boot_info);
   10c67:	83 ec 0c             	sub    $0xc,%esp
   10c6a:	ff 75 08             	push   0x8(%ebp)
   10c6d:	e8 1a fa ff ff       	call   1068c <show_mem_info>
   10c72:	83 c4 10             	add    $0x10,%esp
    
    //去除保护模式下1mb大小后可用的内存空间大小
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   10c75:	83 ec 0c             	sub    $0xc,%esp
   10c78:	ff 75 08             	push   0x8(%ebp)
   10c7b:	e8 72 fa ff ff       	call   106f2 <total_mem_size>
   10c80:	83 c4 10             	add    $0x10,%esp
   10c83:	2d 00 00 10 00       	sub    $0x100000,%eax
   10c88:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将可用空间大小下调到页大小的整数倍
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);
   10c8b:	83 ec 08             	sub    $0x8,%esp
   10c8e:	68 00 10 00 00       	push   $0x1000
   10c93:	ff 75 f4             	push   -0xc(%ebp)
   10c96:	e8 2c f6 ff ff       	call   102c7 <down2>
   10c9b:	83 c4 10             	add    $0x10,%esp
   10c9e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    log_printf("free memory: 0x%x, size: 0x%x", MEM_EXT_START, mem_up1MB_free);
   10ca1:	83 ec 04             	sub    $0x4,%esp
   10ca4:	ff 75 f4             	push   -0xc(%ebp)
   10ca7:	68 00 00 10 00       	push   $0x100000
   10cac:	68 64 49 01 00       	push   $0x14964
   10cb1:	e8 f5 3a 00 00       	call   147ab <log_printf>
   10cb6:	83 c4 10             	add    $0x10,%esp

    //mem_free_start被分配的地址在链接文件中定义，紧邻着first_task段
    uint8_t *mem_free = (uint8_t*)&mem_free_start;
   10cb9:	c7 45 f0 9e b1 03 00 	movl   $0x3b19e,-0x10(%ebp)

    //用paddr_alloc，内存页分配对象管理1mb以上的所有空闲空间，页大小为MEM_PAGE_SIZE=4kb
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   10cc0:	83 ec 0c             	sub    $0xc,%esp
   10cc3:	68 00 10 00 00       	push   $0x1000
   10cc8:	ff 75 f4             	push   -0xc(%ebp)
   10ccb:	68 00 00 10 00       	push   $0x100000
   10cd0:	ff 75 f0             	push   -0x10(%ebp)
   10cd3:	68 00 70 01 00       	push   $0x17000
   10cd8:	e8 25 f8 ff ff       	call   10502 <addr_alloc_init>
   10cdd:	83 c4 20             	add    $0x20,%esp

    //跳过存储位图的内存区域, 位图的每一位表示一个页，计算位图所站的字节数即可跳过该区域
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);  
   10ce0:	a1 20 70 01 00       	mov    0x17020,%eax
   10ce5:	c1 e8 0c             	shr    $0xc,%eax
   10ce8:	83 ec 0c             	sub    $0xc,%esp
   10ceb:	50                   	push   %eax
   10cec:	e8 ae 2d 00 00       	call   13a9f <bitmap_byte_count>
   10cf1:	83 c4 10             	add    $0x10,%esp
   10cf4:	01 45 f0             	add    %eax,-0x10(%ebp)

    //判断mem_free是否已越过可用数据区
    ASSERT(mem_free < (uint8_t*)MEM_EBDA_START);
   10cf7:	81 7d f0 ff fb 09 00 	cmpl   $0x9fbff,-0x10(%ebp)
   10cfe:	76 1c                	jbe    10d1c <memory_init+0xe0>
   10d00:	68 84 49 01 00       	push   $0x14984
   10d05:	68 1c 4a 01 00       	push   $0x14a1c
   10d0a:	68 f9 01 00 00       	push   $0x1f9
   10d0f:	68 0c 49 01 00       	push   $0x1490c
   10d14:	e8 50 2d 00 00       	call   13a69 <pannic>
   10d19:	83 c4 10             	add    $0x10,%esp
    
    //创建内核的页表映射
    create_kernal_table();
   10d1c:	e8 6e fb ff ff       	call   1088f <create_kernal_table>

    //设置内核的页目录表到CR3寄存器，并开启分页机制
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   10d21:	b8 00 f0 01 00       	mov    $0x1f000,%eax
   10d26:	83 ec 0c             	sub    $0xc,%esp
   10d29:	50                   	push   %eax
   10d2a:	e8 40 f6 ff ff       	call   1036f <mmu_set_page_dir>
   10d2f:	83 c4 10             	add    $0x10,%esp
}
   10d32:	90                   	nop
   10d33:	c9                   	leave  
   10d34:	c3                   	ret    

00010d35 <memory_alloc_for_page_dir>:
 * @param vaddr 进程各个代码段的起始虚拟地址
 * @param alloc_size 为进程分配的页空间大小
 * @param priority 进程页空间的权限
 * @return int 
 */
int memory_alloc_for_page_dir(uint32_t page_dir, uint32_t vaddr, uint32_t alloc_size, uint32_t privilege) {
   10d35:	55                   	push   %ebp
   10d36:	89 e5                	mov    %esp,%ebp
   10d38:	83 ec 28             	sub    $0x28,%esp
  //1.记录当前分配的虚拟页的起始地址
  uint32_t curr_vaddr = vaddr;
   10d3b:	8b 45 0c             	mov    0xc(%ebp),%eax
   10d3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
  //2.计算需要分配多少页
  int page_count = up2(alloc_size, MEM_PAGE_SIZE) / MEM_PAGE_SIZE;
   10d41:	68 00 10 00 00       	push   $0x1000
   10d46:	ff 75 10             	push   0x10(%ebp)
   10d49:	e8 86 f5 ff ff       	call   102d4 <up2>
   10d4e:	83 c4 08             	add    $0x8,%esp
   10d51:	c1 e8 0c             	shr    $0xc,%eax
   10d54:	89 45 ec             	mov    %eax,-0x14(%ebp)

  //3.逐页进行映射
  for (int i = 0; i < page_count; ++i) {
   10d57:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   10d5e:	eb 7a                	jmp    10dda <memory_alloc_for_page_dir+0xa5>
    uint32_t paddr = addr_alloc_page(&paddr_alloc, 1);
   10d60:	83 ec 08             	sub    $0x8,%esp
   10d63:	6a 01                	push   $0x1
   10d65:	68 00 70 01 00       	push   $0x17000
   10d6a:	e8 1a f8 ff ff       	call   10589 <addr_alloc_page>
   10d6f:	83 c4 10             	add    $0x10,%esp
   10d72:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (paddr == 0) {//分配失败
   10d75:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10d79:	75 17                	jne    10d92 <memory_alloc_for_page_dir+0x5d>
      log_printf("mem alloc failed. no memory");
   10d7b:	83 ec 0c             	sub    $0xc,%esp
   10d7e:	68 a8 49 01 00       	push   $0x149a8
   10d83:	e8 23 3a 00 00       	call   147ab <log_printf>
   10d88:	83 c4 10             	add    $0x10,%esp
      //TODO:当分配失败时应该将之前分配的页全部归还，且将映射关系也全部解除
      return 0;
   10d8b:	b8 00 00 00 00       	mov    $0x0,%eax
   10d90:	eb 59                	jmp    10deb <memory_alloc_for_page_dir+0xb6>
    }

    int err = memory_creat_map((pde_t*)page_dir, curr_vaddr, paddr, 1, privilege);
   10d92:	8b 45 08             	mov    0x8(%ebp),%eax
   10d95:	83 ec 0c             	sub    $0xc,%esp
   10d98:	ff 75 14             	push   0x14(%ebp)
   10d9b:	6a 01                	push   $0x1
   10d9d:	ff 75 e8             	push   -0x18(%ebp)
   10da0:	ff 75 f4             	push   -0xc(%ebp)
   10da3:	50                   	push   %eax
   10da4:	e8 30 fa ff ff       	call   107d9 <memory_creat_map>
   10da9:	83 c4 20             	add    $0x20,%esp
   10dac:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (err < 0) {//分配失败
   10daf:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10db3:	79 1a                	jns    10dcf <memory_alloc_for_page_dir+0x9a>
      log_printf("create memory failed. err = %d", err);
   10db5:	83 ec 08             	sub    $0x8,%esp
   10db8:	ff 75 e4             	push   -0x1c(%ebp)
   10dbb:	68 c4 49 01 00       	push   $0x149c4
   10dc0:	e8 e6 39 00 00       	call   147ab <log_printf>
   10dc5:	83 c4 10             	add    $0x10,%esp
      //TODO:当分配失败时应该将之前分配的页全部归还，且将映射关系也全部解除
      return 0;
   10dc8:	b8 00 00 00 00       	mov    $0x0,%eax
   10dcd:	eb 1c                	jmp    10deb <memory_alloc_for_page_dir+0xb6>
    }

    curr_vaddr += MEM_PAGE_SIZE;
   10dcf:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
  for (int i = 0; i < page_count; ++i) {
   10dd6:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10dda:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10ddd:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   10de0:	0f 8c 7a ff ff ff    	jl     10d60 <memory_alloc_for_page_dir+0x2b>
  }

  return 0;
   10de6:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10deb:	c9                   	leave  
   10dec:	c3                   	ret    

00010ded <memory_alloc_page_for>:
 * @param vaddr 待分配空间的起始地址
 * @param alloc_size 为其分配的空间大小
 * @param privilege 对应页空间的权限
 * @return int 错误码
 */
int memory_alloc_page_for(uint32_t vaddr, uint32_t alloc_size, uint32_t privilege) {
   10ded:	55                   	push   %ebp
   10dee:	89 e5                	mov    %esp,%ebp
   10df0:	83 ec 08             	sub    $0x8,%esp
  return memory_alloc_for_page_dir(task_current()->tss.cr3, vaddr, alloc_size, privilege);
   10df3:	e8 55 09 00 00       	call   1174d <task_current>
   10df8:	8b 40 6c             	mov    0x6c(%eax),%eax
   10dfb:	ff 75 10             	push   0x10(%ebp)
   10dfe:	ff 75 0c             	push   0xc(%ebp)
   10e01:	ff 75 08             	push   0x8(%ebp)
   10e04:	50                   	push   %eax
   10e05:	e8 2b ff ff ff       	call   10d35 <memory_alloc_for_page_dir>
   10e0a:	83 c4 10             	add    $0x10,%esp
}
   10e0d:	c9                   	leave  
   10e0e:	c3                   	ret    

00010e0f <curr_page_dir>:
/**
 * @brief 返回当前进程的页目录表的地址
 * 
 * @return pde_t* 
 */
static pde_t* curr_page_dir() {
   10e0f:	55                   	push   %ebp
   10e10:	89 e5                	mov    %esp,%ebp
   10e12:	83 ec 08             	sub    $0x8,%esp
  return (pde_t*)(task_current()->tss.cr3);
   10e15:	e8 33 09 00 00       	call   1174d <task_current>
   10e1a:	8b 40 6c             	mov    0x6c(%eax),%eax
}
   10e1d:	c9                   	leave  
   10e1e:	c3                   	ret    

00010e1f <memory_alloc_page>:
/**
 * @brief 为进程的内核空间分配一页内存，需特权级0访问
 * 
 * @return uint32_t 内存的起始地址
 */
uint32_t memory_alloc_page() {
   10e1f:	55                   	push   %ebp
   10e20:	89 e5                	mov    %esp,%ebp
   10e22:	83 ec 18             	sub    $0x18,%esp
  //因为0x100000 ~ 0x8000 0000,即低 1mb~2gb都由操作系统内核使用，
  //操作系统内核已对整个内存空间进行了一一映射，而每个程序的2gb以下空间都使用操作系统的虚拟页表
  //所以直接返回该页物理地址，也就是该页在操作系统虚拟地址空间中的虚拟地址
  //需要注意的是后续访问该页需要0特权级，因为访问的是内核空间
  uint32_t addr = addr_alloc_page(&paddr_alloc, 1);
   10e25:	83 ec 08             	sub    $0x8,%esp
   10e28:	6a 01                	push   $0x1
   10e2a:	68 00 70 01 00       	push   $0x17000
   10e2f:	e8 55 f7 ff ff       	call   10589 <addr_alloc_page>
   10e34:	83 c4 10             	add    $0x10,%esp
   10e37:	89 45 f4             	mov    %eax,-0xc(%ebp)
  return addr;
   10e3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   10e3d:	c9                   	leave  
   10e3e:	c3                   	ret    

00010e3f <memory_free_page>:
 * @brief 释放一页内存空间
 * 
 * @param addr 
 */

void memory_free_page(uint32_t addr) {
   10e3f:	55                   	push   %ebp
   10e40:	89 e5                	mov    %esp,%ebp
   10e42:	83 ec 18             	sub    $0x18,%esp
  if (addr < MEM_TASK_BASE) { //释放内核空间的一页内存
   10e45:	8b 45 08             	mov    0x8(%ebp),%eax
   10e48:	85 c0                	test   %eax,%eax
   10e4a:	78 17                	js     10e63 <memory_free_page+0x24>
    addr_free_page(&paddr_alloc, addr, 1);  //因为内核空间为一一映射关系，虚拟地址即为物理地址,且不需要解除映射关系
   10e4c:	83 ec 04             	sub    $0x4,%esp
   10e4f:	6a 01                	push   $0x1
   10e51:	ff 75 08             	push   0x8(%ebp)
   10e54:	68 00 70 01 00       	push   $0x17000
   10e59:	e8 92 f7 ff ff       	call   105f0 <addr_free_page>
   10e5e:	83 c4 10             	add    $0x10,%esp

    //3.将页表项清空，解除映射关系
    pte->v = 0;
  }

}
   10e61:	eb 72                	jmp    10ed5 <memory_free_page+0x96>
    pte_t *pte = find_pte(curr_page_dir(), addr, 0);
   10e63:	e8 a7 ff ff ff       	call   10e0f <curr_page_dir>
   10e68:	83 ec 04             	sub    $0x4,%esp
   10e6b:	6a 00                	push   $0x0
   10e6d:	ff 75 08             	push   0x8(%ebp)
   10e70:	50                   	push   %eax
   10e71:	e8 b3 f8 ff ff       	call   10729 <find_pte>
   10e76:	83 c4 10             	add    $0x10,%esp
   10e79:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT(pte != (pte_t*)0 && pte->present);
   10e7c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10e80:	74 0d                	je     10e8f <memory_free_page+0x50>
   10e82:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e85:	0f b6 00             	movzbl (%eax),%eax
   10e88:	83 e0 01             	and    $0x1,%eax
   10e8b:	84 c0                	test   %al,%al
   10e8d:	75 1c                	jne    10eab <memory_free_page+0x6c>
   10e8f:	68 e4 49 01 00       	push   $0x149e4
   10e94:	68 28 4a 01 00       	push   $0x14a28
   10e99:	68 5b 02 00 00       	push   $0x25b
   10e9e:	68 0c 49 01 00       	push   $0x1490c
   10ea3:	e8 c1 2b 00 00       	call   13a69 <pannic>
   10ea8:	83 c4 10             	add    $0x10,%esp
    addr_free_page(&paddr_alloc, pte_to_pg_addr(pte), 1);
   10eab:	83 ec 0c             	sub    $0xc,%esp
   10eae:	ff 75 f4             	push   -0xc(%ebp)
   10eb1:	e8 83 f4 ff ff       	call   10339 <pte_to_pg_addr>
   10eb6:	83 c4 10             	add    $0x10,%esp
   10eb9:	83 ec 04             	sub    $0x4,%esp
   10ebc:	6a 01                	push   $0x1
   10ebe:	50                   	push   %eax
   10ebf:	68 00 70 01 00       	push   $0x17000
   10ec4:	e8 27 f7 ff ff       	call   105f0 <addr_free_page>
   10ec9:	83 c4 10             	add    $0x10,%esp
    pte->v = 0;
   10ecc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10ecf:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   10ed5:	90                   	nop
   10ed6:	c9                   	leave  
   10ed7:	c3                   	ret    

00010ed8 <memory_get_paddr>:
 * 
 * @param page_dir 
 * @param vaddr 
 * @return uint32_t 
 */
uint32_t memory_get_paddr(uint32_t page_dir, uint32_t vaddr) {
   10ed8:	55                   	push   %ebp
   10ed9:	89 e5                	mov    %esp,%ebp
   10edb:	83 ec 18             	sub    $0x18,%esp
  //查找vaddr对应的页表项
  pte_t * pte = find_pte((pde_t*)page_dir, vaddr, 0);
   10ede:	8b 45 08             	mov    0x8(%ebp),%eax
   10ee1:	83 ec 04             	sub    $0x4,%esp
   10ee4:	6a 00                	push   $0x0
   10ee6:	ff 75 0c             	push   0xc(%ebp)
   10ee9:	50                   	push   %eax
   10eea:	e8 3a f8 ff ff       	call   10729 <find_pte>
   10eef:	83 c4 10             	add    $0x10,%esp
   10ef2:	89 45 f4             	mov    %eax,-0xc(%ebp)

  //若没有找到该页表项或该页表项还不存在，则返回0
  if (!pte || !pte->present) {
   10ef5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10ef9:	74 0d                	je     10f08 <memory_get_paddr+0x30>
   10efb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10efe:	0f b6 00             	movzbl (%eax),%eax
   10f01:	83 e0 01             	and    $0x1,%eax
   10f04:	84 c0                	test   %al,%al
   10f06:	75 07                	jne    10f0f <memory_get_paddr+0x37>
    return 0;
   10f08:	b8 00 00 00 00       	mov    $0x0,%eax
   10f0d:	eb 1a                	jmp    10f29 <memory_get_paddr+0x51>
  }

  //找到并存在该页表项，返回绑定的物理地址
  return pte_to_pg_addr(pte) | (vaddr & (MEM_PAGE_SIZE - 1));
   10f0f:	83 ec 0c             	sub    $0xc,%esp
   10f12:	ff 75 f4             	push   -0xc(%ebp)
   10f15:	e8 1f f4 ff ff       	call   10339 <pte_to_pg_addr>
   10f1a:	83 c4 10             	add    $0x10,%esp
   10f1d:	89 c2                	mov    %eax,%edx
   10f1f:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f22:	25 ff 0f 00 00       	and    $0xfff,%eax
   10f27:	09 d0                	or     %edx,%eax

}
   10f29:	c9                   	leave  
   10f2a:	c3                   	ret    

00010f2b <memory_copy_uvm_data>:
 * @param to_addr 目标虚拟空间的起始地址
 * @param to_page_dir 目标虚拟空间的页目录表
 * @param from_addr 当前虚拟空间中的源地址
 * @param size 拷贝的大小
 */
int memory_copy_uvm_data(uint32_t to_vaddr, uint32_t to_page_dir, uint32_t from_vaddr, uint32_t size) {
   10f2b:	55                   	push   %ebp
   10f2c:	89 e5                	mov    %esp,%ebp
   10f2e:	83 ec 18             	sub    $0x18,%esp

  //由于虚拟地址空间是连续的而物理地址空间不一定，所以需要一页一页的单独拷贝
  while (size > 0) {
   10f31:	eb 6e                	jmp    10fa1 <memory_copy_uvm_data+0x76>
    //1.获取to_vaddr对应的物理地址
    uint32_t to_paddr = memory_get_paddr(to_page_dir, to_vaddr);
   10f33:	83 ec 08             	sub    $0x8,%esp
   10f36:	ff 75 08             	push   0x8(%ebp)
   10f39:	ff 75 0c             	push   0xc(%ebp)
   10f3c:	e8 97 ff ff ff       	call   10ed8 <memory_get_paddr>
   10f41:	83 c4 10             	add    $0x10,%esp
   10f44:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (to_paddr == 0) {
   10f47:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10f4b:	75 07                	jne    10f54 <memory_copy_uvm_data+0x29>
      return -1;
   10f4d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10f52:	eb 58                	jmp    10fac <memory_copy_uvm_data+0x81>
    }

    //2.获取to_paddr所在的物理页可以写入的空间大小
    //即从to_paddr到该页的末尾的空间大小
    uint32_t offset = (MEM_PAGE_SIZE - 1) & to_paddr;
   10f54:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10f57:	25 ff 0f 00 00       	and    $0xfff,%eax
   10f5c:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32_t curr_size = MEM_PAGE_SIZE - offset;
   10f5f:	b8 00 10 00 00       	mov    $0x1000,%eax
   10f64:	2b 45 ec             	sub    -0x14(%ebp),%eax
   10f67:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //3.判断size是否  < curr_size
    if (size < curr_size) { //size < curr_size则在当前物理页拷贝szie个字节即可
   10f6a:	8b 45 14             	mov    0x14(%ebp),%eax
   10f6d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
   10f70:	73 06                	jae    10f78 <memory_copy_uvm_data+0x4d>
      curr_size = size;
   10f72:	8b 45 14             	mov    0x14(%ebp),%eax
   10f75:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    //4.拷贝内容并更新到下一个需要拷贝的地方
    kernel_memcpy((void*)to_paddr, (void*)from_vaddr, curr_size);
   10f78:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   10f7b:	8b 55 10             	mov    0x10(%ebp),%edx
   10f7e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10f81:	83 ec 04             	sub    $0x4,%esp
   10f84:	51                   	push   %ecx
   10f85:	52                   	push   %edx
   10f86:	50                   	push   %eax
   10f87:	e8 90 2f 00 00       	call   13f1c <kernel_memcpy>
   10f8c:	83 c4 10             	add    $0x10,%esp
    size -= curr_size;
   10f8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f92:	29 45 14             	sub    %eax,0x14(%ebp)
    to_vaddr += curr_size;
   10f95:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f98:	01 45 08             	add    %eax,0x8(%ebp)
    from_vaddr += curr_size;
   10f9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f9e:	01 45 10             	add    %eax,0x10(%ebp)
  while (size > 0) {
   10fa1:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   10fa5:	75 8c                	jne    10f33 <memory_copy_uvm_data+0x8>

  }
  
  return 0;
   10fa7:	b8 00 00 00 00       	mov    $0x0,%eax

   10fac:	c9                   	leave  
   10fad:	c3                   	ret    

00010fae <list_node_init>:
    list_node_t * first;
    list_node_t * last;
    int size;
}list_t;

static inline void list_node_init(list_node_t *node) {
   10fae:	55                   	push   %ebp
   10faf:	89 e5                	mov    %esp,%ebp
   10fb1:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   10fb4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10fb8:	75 19                	jne    10fd3 <list_node_init+0x25>
   10fba:	68 3c 4a 01 00       	push   $0x14a3c
   10fbf:	68 ec 4b 01 00       	push   $0x14bec
   10fc4:	6a 20                	push   $0x20
   10fc6:	68 54 4a 01 00       	push   $0x14a54
   10fcb:	e8 99 2a 00 00       	call   13a69 <pannic>
   10fd0:	83 c4 10             	add    $0x10,%esp
    node->pre = node->next = (list_node_t*)0;
   10fd3:	8b 45 08             	mov    0x8(%ebp),%eax
   10fd6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   10fdd:	8b 45 08             	mov    0x8(%ebp),%eax
   10fe0:	8b 50 04             	mov    0x4(%eax),%edx
   10fe3:	8b 45 08             	mov    0x8(%ebp),%eax
   10fe6:	89 10                	mov    %edx,(%eax)
}
   10fe8:	90                   	nop
   10fe9:	c9                   	leave  
   10fea:	c3                   	ret    

00010feb <list_node_next>:
    ASSERT(node != (list_node_t*)0);

    return node->pre;
}

static inline list_node_t *list_node_next(list_node_t *node) {
   10feb:	55                   	push   %ebp
   10fec:	89 e5                	mov    %esp,%ebp
   10fee:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   10ff1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10ff5:	75 19                	jne    11010 <list_node_next+0x25>
   10ff7:	68 3c 4a 01 00       	push   $0x14a3c
   10ffc:	68 4c 4c 01 00       	push   $0x14c4c
   11001:	6a 2b                	push   $0x2b
   11003:	68 54 4a 01 00       	push   $0x14a54
   11008:	e8 5c 2a 00 00       	call   13a69 <pannic>
   1100d:	83 c4 10             	add    $0x10,%esp

    return node->next;
   11010:	8b 45 08             	mov    0x8(%ebp),%eax
   11013:	8b 40 04             	mov    0x4(%eax),%eax
}
   11016:	c9                   	leave  
   11017:	c3                   	ret    

00011018 <list_init>:

static inline void list_init(list_t *list) {
   11018:	55                   	push   %ebp
   11019:	89 e5                	mov    %esp,%ebp
   1101b:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1101e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11022:	75 19                	jne    1103d <list_init+0x25>
   11024:	68 92 4a 01 00       	push   $0x14a92
   11029:	68 fc 4b 01 00       	push   $0x14bfc
   1102e:	6a 31                	push   $0x31
   11030:	68 54 4a 01 00       	push   $0x14a54
   11035:	e8 2f 2a 00 00       	call   13a69 <pannic>
   1103a:	83 c4 10             	add    $0x10,%esp

    list->first = list->last = (list_node_t*)0;
   1103d:	8b 45 08             	mov    0x8(%ebp),%eax
   11040:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11047:	8b 45 08             	mov    0x8(%ebp),%eax
   1104a:	8b 50 04             	mov    0x4(%eax),%edx
   1104d:	8b 45 08             	mov    0x8(%ebp),%eax
   11050:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   11052:	8b 45 08             	mov    0x8(%ebp),%eax
   11055:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   1105c:	90                   	nop
   1105d:	c9                   	leave  
   1105e:	c3                   	ret    

0001105f <list_is_empty>:

static inline int list_is_empty(list_t *list) {
   1105f:	55                   	push   %ebp
   11060:	89 e5                	mov    %esp,%ebp
   11062:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11065:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11069:	75 19                	jne    11084 <list_is_empty+0x25>
   1106b:	68 92 4a 01 00       	push   $0x14a92
   11070:	68 5c 4c 01 00       	push   $0x14c5c
   11075:	6a 38                	push   $0x38
   11077:	68 54 4a 01 00       	push   $0x14a54
   1107c:	e8 e8 29 00 00       	call   13a69 <pannic>
   11081:	83 c4 10             	add    $0x10,%esp

    return list->size == 0;
   11084:	8b 45 08             	mov    0x8(%ebp),%eax
   11087:	8b 40 08             	mov    0x8(%eax),%eax
   1108a:	85 c0                	test   %eax,%eax
   1108c:	0f 94 c0             	sete   %al
   1108f:	0f b6 c0             	movzbl %al,%eax
}
   11092:	c9                   	leave  
   11093:	c3                   	ret    

00011094 <list_get_size>:

static inline int list_get_size(list_t *list) {
   11094:	55                   	push   %ebp
   11095:	89 e5                	mov    %esp,%ebp
   11097:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1109a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1109e:	75 19                	jne    110b9 <list_get_size+0x25>
   110a0:	68 92 4a 01 00       	push   $0x14a92
   110a5:	68 8c 4c 01 00       	push   $0x14c8c
   110aa:	6a 3e                	push   $0x3e
   110ac:	68 54 4a 01 00       	push   $0x14a54
   110b1:	e8 b3 29 00 00       	call   13a69 <pannic>
   110b6:	83 c4 10             	add    $0x10,%esp

    return list->size;
   110b9:	8b 45 08             	mov    0x8(%ebp),%eax
   110bc:	8b 40 08             	mov    0x8(%eax),%eax
}
   110bf:	c9                   	leave  
   110c0:	c3                   	ret    

000110c1 <list_get_first>:

static inline list_node_t *list_get_first(list_t *list) {
   110c1:	55                   	push   %ebp
   110c2:	89 e5                	mov    %esp,%ebp
   110c4:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   110c7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   110cb:	75 19                	jne    110e6 <list_get_first+0x25>
   110cd:	68 92 4a 01 00       	push   $0x14a92
   110d2:	68 3c 4c 01 00       	push   $0x14c3c
   110d7:	6a 44                	push   $0x44
   110d9:	68 54 4a 01 00       	push   $0x14a54
   110de:	e8 86 29 00 00       	call   13a69 <pannic>
   110e3:	83 c4 10             	add    $0x10,%esp

    return list->first;
   110e6:	8b 45 08             	mov    0x8(%ebp),%eax
   110e9:	8b 00                	mov    (%eax),%eax
}
   110eb:	c9                   	leave  
   110ec:	c3                   	ret    

000110ed <up2>:
static inline uint32_t up2(uint32_t size, uint32_t bound) {
   110ed:	55                   	push   %ebp
   110ee:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   110f0:	8b 55 08             	mov    0x8(%ebp),%edx
   110f3:	8b 45 0c             	mov    0xc(%ebp),%eax
   110f6:	01 d0                	add    %edx,%eax
   110f8:	8d 50 ff             	lea    -0x1(%eax),%edx
   110fb:	8b 45 0c             	mov    0xc(%ebp),%eax
   110fe:	f7 d8                	neg    %eax
   11100:	21 d0                	and    %edx,%eax
}
   11102:	5d                   	pop    %ebp
   11103:	c3                   	ret    

00011104 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   11104:	55                   	push   %ebp
   11105:	89 e5                	mov    %esp,%ebp
   11107:	f4                   	hlt    
   11108:	90                   	nop
   11109:	5d                   	pop    %ebp
   1110a:	c3                   	ret    

0001110b <write_cr3>:
static inline void write_cr3(uint32_t data) {
   1110b:	55                   	push   %ebp
   1110c:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("mov %[v], %%cr3" : : [v] "r"(data));
   1110e:	8b 45 08             	mov    0x8(%ebp),%eax
   11111:	0f 22 d8             	mov    %eax,%cr3
}
   11114:	90                   	nop
   11115:	5d                   	pop    %ebp
   11116:	c3                   	ret    

00011117 <far_jump>:
 * @brief  远跳转，当跳转发生在TSS段之间时，cpu将会保存状态到当前TR寄存器指向的TSS段
 *
 * @param selector 选择子
 * @param offset 跳转的偏移量
 */
static inline void far_jump(uint32_t selector, uint32_t offset) {
   11117:	55                   	push   %ebp
   11118:	89 e5                	mov    %esp,%ebp
   1111a:	83 ec 10             	sub    $0x10,%esp
  // 传入远跳转需要的参数, 即cs = selector, eip = offset 
  uint32_t addr[] = {offset, selector};  
   1111d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11120:	89 45 f8             	mov    %eax,-0x8(%ebp)
   11123:	8b 45 08             	mov    0x8(%ebp),%eax
   11126:	89 45 fc             	mov    %eax,-0x4(%ebp)

  __asm__ __volatile__("ljmpl *(%[a])" : : [a] "r"(addr));
   11129:	8d 45 f8             	lea    -0x8(%ebp),%eax
   1112c:	ff 28                	ljmp   *(%eax)
}
   1112e:	90                   	nop
   1112f:	c9                   	leave  
   11130:	c3                   	ret    

00011131 <write_tr>:
 * @brief   写入当前任务的TSS段描述符的选择子到TR寄存器中，告诉cpu当前段的TSS位置
 *          以便在进行任务切换时，将状态保存到该TSS段中
 * 
 * @param tss_selector 准备运行的任务的TSS段的选择子
 */
static inline void write_tr(uint16_t tss_selector) {
   11131:	55                   	push   %ebp
   11132:	89 e5                	mov    %esp,%ebp
   11134:	83 ec 04             	sub    $0x4,%esp
   11137:	8b 45 08             	mov    0x8(%ebp),%eax
   1113a:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  __asm__ __volatile__("ltr %[v]" : : [v]"r"(tss_selector));
   1113e:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   11142:	0f 00 d8             	ltr    %ax
}
   11145:	90                   	nop
   11146:	c9                   	leave  
   11147:	c3                   	ret    

00011148 <mmu_set_page_dir>:
static inline void mmu_set_page_dir(uint32_t paddr) {
   11148:	55                   	push   %ebp
   11149:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   1114b:	ff 75 08             	push   0x8(%ebp)
   1114e:	e8 b8 ff ff ff       	call   1110b <write_cr3>
   11153:	83 c4 04             	add    $0x4,%esp
}
   11156:	90                   	nop
   11157:	c9                   	leave  
   11158:	c3                   	ret    

00011159 <switch_to_tss>:
static task_t task_table[TASK_COUNT];
//定义用于维护task_table的互斥锁
static mutex_t task_table_lock;


static void switch_to_tss(uint16_t tss_selector) {
   11159:	55                   	push   %ebp
   1115a:	89 e5                	mov    %esp,%ebp
   1115c:	83 ec 04             	sub    $0x4,%esp
   1115f:	8b 45 08             	mov    0x8(%ebp),%eax
   11162:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    //进行远跳转，让cpu访问该tss段的描述符，cpu将重启到之前运行该tss对应的任务的状态继续运行该任务
    far_jump(tss_selector, 0);
   11166:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   1116a:	6a 00                	push   $0x0
   1116c:	50                   	push   %eax
   1116d:	e8 a5 ff ff ff       	call   11117 <far_jump>
   11172:	83 c4 08             	add    $0x8,%esp
}
   11175:	90                   	nop
   11176:	c9                   	leave  
   11177:	c3                   	ret    

00011178 <task_switch_from_to>:
 * @brief  将任务从from切换到to
 * 
 * @param from 切换前的任务
 * @param to 切换后的任务
 */
void task_switch_from_to(task_t *from, task_t *to) {
   11178:	55                   	push   %ebp
   11179:	89 e5                	mov    %esp,%ebp
    //跳转到对应的tss段读取并恢复cpu任务状态
    switch_to_tss(to->tss_selector);
   1117b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1117e:	8b 80 b8 00 00 00    	mov    0xb8(%eax),%eax
   11184:	0f b7 c0             	movzwl %ax,%eax
   11187:	50                   	push   %eax
   11188:	e8 cc ff ff ff       	call   11159 <switch_to_tss>
   1118d:	83 c4 04             	add    $0x4,%esp
}
   11190:	90                   	nop
   11191:	c9                   	leave  
   11192:	c3                   	ret    

00011193 <tss_init>:
 * @param task 需要初始化的任务对象
 * @param entry 任务入口地址
 * @param esp 任务所用的栈顶指针
 * @param flag 任务属性标志位，如特权级
 */
static int tss_init(task_t *task, uint32_t entry, uint32_t esp, uint32_t flag) {
   11193:	55                   	push   %ebp
   11194:	89 e5                	mov    %esp,%ebp
   11196:	83 ec 28             	sub    $0x28,%esp
   //1.将该TSS段绑定到GDT中的某个段描述符
    uint32_t tss_selector = gdt_alloc_desc();
   11199:	e8 40 12 00 00       	call   123de <gdt_alloc_desc>
   1119e:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (tss_selector < 0) {
        log_printf("alloc tss failed!");
        return -1;
    }
    segment_desc_set(tss_selector, (uint32_t)&task->tss, sizeof(task->tss), 
   111a1:	8b 45 08             	mov    0x8(%ebp),%eax
   111a4:	83 c0 50             	add    $0x50,%eax
   111a7:	89 c2                	mov    %eax,%edx
   111a9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   111ac:	0f b7 c0             	movzwl %ax,%eax
   111af:	68 89 00 00 00       	push   $0x89
   111b4:	6a 68                	push   $0x68
   111b6:	52                   	push   %edx
   111b7:	50                   	push   %eax
   111b8:	e8 af 10 00 00       	call   1226c <segment_desc_set>
   111bd:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_TYPE_TSS);


    //2.将tss段的值置空
    kernel_memset(&task->tss, 0, sizeof(task->tss));
   111c0:	8b 45 08             	mov    0x8(%ebp),%eax
   111c3:	83 c0 50             	add    $0x50,%eax
   111c6:	83 ec 04             	sub    $0x4,%esp
   111c9:	6a 68                	push   $0x68
   111cb:	6a 00                	push   $0x0
   111cd:	50                   	push   %eax
   111ce:	e8 98 2d 00 00       	call   13f6b <kernel_memset>
   111d3:	83 c4 10             	add    $0x10,%esp

    //3.记录tss绑定到的描述符的选择子
    task->tss_selector = tss_selector;
   111d6:	8b 45 08             	mov    0x8(%ebp),%eax
   111d9:	8b 55 ec             	mov    -0x14(%ebp),%edx
   111dc:	89 90 b8 00 00 00    	mov    %edx,0xb8(%eax)


    //4.根据任务的特权级来设置对应选择子的cpl
    uint32_t code_selector, data_selector;
    if (flag & TASK_FLAGS_SYSTEM) { //内核特权级
   111e2:	8b 45 14             	mov    0x14(%ebp),%eax
   111e5:	83 e0 01             	and    $0x1,%eax
   111e8:	85 c0                	test   %eax,%eax
   111ea:	74 10                	je     111fc <tss_init+0x69>
        code_selector = KERNEL_SELECTOR_CS;
   111ec:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%ebp)
        data_selector = KERNEL_SELECTOR_DS;
   111f3:	c7 45 f0 10 00 00 00 	movl   $0x10,-0x10(%ebp)
   111fa:	eb 16                	jmp    11212 <tss_init+0x7f>
    } else {    //用户特权级
        //获取任务的代码段选择子和数据段选择子，并初始化其CPL,因为是平台模型，所以基本不涉及到跨段访问，所以不需要RPL
        code_selector = task_manager.app_code_selector | SEG_CPL3;
   111fc:	a1 a0 01 02 00       	mov    0x201a0,%eax
   11201:	83 c8 03             	or     $0x3,%eax
   11204:	89 45 f4             	mov    %eax,-0xc(%ebp)
        data_selector = task_manager.app_data_selector | SEG_CPL3;
   11207:	a1 a4 01 02 00       	mov    0x201a4,%eax
   1120c:	83 c8 03             	or     $0x3,%eax
   1120f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }


    //5.设置eip，即任务的起始地址
    task->tss.eip = entry;
   11212:	8b 45 08             	mov    0x8(%ebp),%eax
   11215:	8b 55 0c             	mov    0xc(%ebp),%edx
   11218:	89 50 70             	mov    %edx,0x70(%eax)

    //6.根据任务的特权级设置任务所使用的栈空间
    task->tss.esp =  esp;   //特权级为3的栈空间
   1121b:	8b 45 08             	mov    0x8(%ebp),%eax
   1121e:	8b 55 10             	mov    0x10(%ebp),%edx
   11221:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
    uint32_t kernel_stack = memory_alloc_page();  //分配一页作为内核特权级0的栈空间
   11227:	e8 f3 fb ff ff       	call   10e1f <memory_alloc_page>
   1122c:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (kernel_stack == 0) //内核栈空间初始化失败
   1122f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11233:	0f 84 9b 00 00 00    	je     112d4 <tss_init+0x141>
        goto tss_init_failed;   
    else task->tss.esp0 =  kernel_stack + MEM_PAGE_SIZE;//特权级为0的栈空间
   11239:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1123c:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edx
   11242:	8b 45 08             	mov    0x8(%ebp),%eax
   11245:	89 50 54             	mov    %edx,0x54(%eax)

    //7.平坦模型，初始化栈空间段寄存器
    task->tss.ss =  data_selector;  //特权级为3时使用的栈段
   11248:	8b 45 08             	mov    0x8(%ebp),%eax
   1124b:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1124e:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
    task->tss.ss0 = KERNEL_SELECTOR_DS; //特权级为0时使用的栈段，
   11254:	8b 45 08             	mov    0x8(%ebp),%eax
   11257:	c7 40 58 10 00 00 00 	movl   $0x10,0x58(%eax)
                                        //由于平坦模型，其实使用的是同一片空间，只是特权级发生了变化

    //8. 平坦模型，初始其余化段寄存器
    task->tss.es = task->tss.fs = task->tss.gs = task->tss.ds = data_selector;
   1125e:	8b 45 08             	mov    0x8(%ebp),%eax
   11261:	8b 55 f0             	mov    -0x10(%ebp),%edx
   11264:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
   1126a:	8b 45 08             	mov    0x8(%ebp),%eax
   1126d:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
   11273:	8b 45 08             	mov    0x8(%ebp),%eax
   11276:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
   1127c:	8b 45 08             	mov    0x8(%ebp),%eax
   1127f:	8b 90 ac 00 00 00    	mov    0xac(%eax),%edx
   11285:	8b 45 08             	mov    0x8(%ebp),%eax
   11288:	89 90 a8 00 00 00    	mov    %edx,0xa8(%eax)
   1128e:	8b 45 08             	mov    0x8(%ebp),%eax
   11291:	8b 90 a8 00 00 00    	mov    0xa8(%eax),%edx
   11297:	8b 45 08             	mov    0x8(%ebp),%eax
   1129a:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)

    //9.平坦模型，初始化代码段寄存器
    task->tss.cs = code_selector;
   112a0:	8b 45 08             	mov    0x8(%ebp),%eax
   112a3:	8b 55 f4             	mov    -0xc(%ebp),%edx
   112a6:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)

    //10.初始化eflags寄存器，使cpu中断保持开启
    task->tss.eflags = EFLAGS_DEFAULT_1 | EFLAGS_IF;
   112ac:	8b 45 08             	mov    0x8(%ebp),%eax
   112af:	c7 40 74 02 02 00 00 	movl   $0x202,0x74(%eax)

    //11.创建当前进程的虚拟页目录表，并设置cr3寄存器
    uint32_t page_dir = memory_creat_uvm();
   112b6:	e8 88 f6 ff ff       	call   10943 <memory_creat_uvm>
   112bb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (page_dir == 0) 
   112be:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   112c2:	74 13                	je     112d7 <tss_init+0x144>
        goto tss_init_failed;
    task->tss.cr3 = page_dir;
   112c4:	8b 45 08             	mov    0x8(%ebp),%eax
   112c7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   112ca:	89 50 6c             	mov    %edx,0x6c(%eax)
    
    return 0;
   112cd:	b8 00 00 00 00       	mov    $0x0,%eax
   112d2:	eb 2f                	jmp    11303 <tss_init+0x170>
        goto tss_init_failed;   
   112d4:	90                   	nop
   112d5:	eb 01                	jmp    112d8 <tss_init+0x145>
        goto tss_init_failed;
   112d7:	90                   	nop

//tss初始化失败
tss_init_failed:
    gdt_free(tss_selector);  //释放选择子
   112d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
   112db:	0f b7 c0             	movzwl %ax,%eax
   112de:	83 ec 0c             	sub    $0xc,%esp
   112e1:	50                   	push   %eax
   112e2:	e8 6c 11 00 00       	call   12453 <gdt_free>
   112e7:	83 c4 10             	add    $0x10,%esp

    if (kernel_stack) { //内核栈空间分配有效，需要释放
   112ea:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   112ee:	74 0e                	je     112fe <tss_init+0x16b>
        memory_free_page(kernel_stack);
   112f0:	83 ec 0c             	sub    $0xc,%esp
   112f3:	ff 75 e8             	push   -0x18(%ebp)
   112f6:	e8 44 fb ff ff       	call   10e3f <memory_free_page>
   112fb:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   112fe:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11303:	c9                   	leave  
   11304:	c3                   	ret    

00011305 <task_start>:
/**
 * @brief 将任务插入任务链表中并设为就绪态，标志该任务可被调度
 * 
 * @param task 
 */
void task_start(task_t *task) {
   11305:	55                   	push   %ebp
   11306:	89 e5                	mov    %esp,%ebp
   11308:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   1130b:	e8 f9 1a 00 00       	call   12e09 <idt_enter_protection>
   11310:	89 45 f4             	mov    %eax,-0xc(%ebp)
   
    //5.将任务加入任务队列
    list_insert_last(&task_manager.task_list, &task->task_node);
   11313:	8b 45 08             	mov    0x8(%ebp),%eax
   11316:	83 c0 40             	add    $0x40,%eax
   11319:	83 ec 08             	sub    $0x8,%esp
   1131c:	50                   	push   %eax
   1131d:	68 10 00 02 00       	push   $0x20010
   11322:	e8 00 31 00 00       	call   14427 <list_insert_last>
   11327:	83 c4 10             	add    $0x10,%esp

    //6.将任务设置为就绪态
    task_set_ready(task);
   1132a:	83 ec 0c             	sub    $0xc,%esp
   1132d:	ff 75 08             	push   0x8(%ebp)
   11330:	e8 54 03 00 00       	call   11689 <task_set_ready>
   11335:	83 c4 10             	add    $0x10,%esp

    
    idt_leave_protection(state);//TODO:解锁
   11338:	83 ec 0c             	sub    $0xc,%esp
   1133b:	ff 75 f4             	push   -0xc(%ebp)
   1133e:	e8 de 1a 00 00       	call   12e21 <idt_leave_protection>
   11343:	83 c4 10             	add    $0x10,%esp
}
   11346:	90                   	nop
   11347:	c9                   	leave  
   11348:	c3                   	ret    

00011349 <task_init>:
 * @param entry 任务的入口地址
 * @param esp 任务指行时所用的栈顶指针
 * @param flag 任务属性标志位，如特权级
 * @return int 
 */
int task_init(task_t *task, const char* name, uint32_t entry, uint32_t esp, uint32_t flag) {
   11349:	55                   	push   %ebp
   1134a:	89 e5                	mov    %esp,%ebp
   1134c:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t*)0);
   1134f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11353:	75 1c                	jne    11371 <task_init+0x28>
   11355:	68 a5 4a 01 00       	push   $0x14aa5
   1135a:	68 e0 4b 01 00       	push   $0x14be0
   1135f:	68 9f 00 00 00       	push   $0x9f
   11364:	68 b8 4a 01 00       	push   $0x14ab8
   11369:	e8 fb 26 00 00       	call   13a69 <pannic>
   1136e:	83 c4 10             	add    $0x10,%esp
    //1.初始化任务TSS段
    int err = tss_init(task, entry, esp, flag);
   11371:	ff 75 18             	push   0x18(%ebp)
   11374:	ff 75 14             	push   0x14(%ebp)
   11377:	ff 75 10             	push   0x10(%ebp)
   1137a:	ff 75 08             	push   0x8(%ebp)
   1137d:	e8 11 fe ff ff       	call   11193 <tss_init>
   11382:	83 c4 10             	add    $0x10,%esp
   11385:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (err == -1)
   11388:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
   1138c:	75 08                	jne    11396 <task_init+0x4d>
        return err;
   1138e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11391:	e9 8e 00 00 00       	jmp    11424 <task_init+0xdb>
    

    //2.初始化任务名称
    kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   11396:	8b 45 08             	mov    0x8(%ebp),%eax
   11399:	83 c0 18             	add    $0x18,%eax
   1139c:	83 ec 04             	sub    $0x4,%esp
   1139f:	6a 20                	push   $0x20
   113a1:	ff 75 0c             	push   0xc(%ebp)
   113a4:	50                   	push   %eax
   113a5:	e8 82 2a 00 00       	call   13e2c <kernel_strncpy>
   113aa:	83 c4 10             	add    $0x10,%esp

    //3.初始化任务队列节点及就绪队列节点
    list_node_init(&task->ready_node);
   113ad:	8b 45 08             	mov    0x8(%ebp),%eax
   113b0:	83 c0 38             	add    $0x38,%eax
   113b3:	83 ec 0c             	sub    $0xc,%esp
   113b6:	50                   	push   %eax
   113b7:	e8 f2 fb ff ff       	call   10fae <list_node_init>
   113bc:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->task_node);
   113bf:	8b 45 08             	mov    0x8(%ebp),%eax
   113c2:	83 c0 40             	add    $0x40,%eax
   113c5:	83 ec 0c             	sub    $0xc,%esp
   113c8:	50                   	push   %eax
   113c9:	e8 e0 fb ff ff       	call   10fae <list_node_init>
   113ce:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   113d1:	8b 45 08             	mov    0x8(%ebp),%eax
   113d4:	83 c0 48             	add    $0x48,%eax
   113d7:	83 ec 0c             	sub    $0xc,%esp
   113da:	50                   	push   %eax
   113db:	e8 ce fb ff ff       	call   10fae <list_node_init>
   113e0:	83 c4 10             	add    $0x10,%esp

    //4.初始化最大时间片数与当前拥有时间片数,以及延时时间片数
    task->state = TASK_CREATED;
   113e3:	8b 45 08             	mov    0x8(%ebp),%eax
   113e6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    task->slice_max = task->slice_curr = TASK_TIME_SLICE_DEFAULT;
   113ec:	8b 45 08             	mov    0x8(%ebp),%eax
   113ef:	c7 40 10 0a 00 00 00 	movl   $0xa,0x10(%eax)
   113f6:	8b 45 08             	mov    0x8(%ebp),%eax
   113f9:	8b 50 10             	mov    0x10(%eax),%edx
   113fc:	8b 45 08             	mov    0x8(%ebp),%eax
   113ff:	89 50 0c             	mov    %edx,0xc(%eax)
    task->sleep = 0;
   11402:	8b 45 08             	mov    0x8(%ebp),%eax
   11405:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    task->pid = (uint32_t)task;
   1140c:	8b 55 08             	mov    0x8(%ebp),%edx
   1140f:	8b 45 08             	mov    0x8(%ebp),%eax
   11412:	89 50 08             	mov    %edx,0x8(%eax)
    task->parent = (task_t*)0;
   11415:	8b 45 08             	mov    0x8(%ebp),%eax
   11418:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   

    return 1;
   1141f:	b8 01 00 00 00       	mov    $0x1,%eax
}
   11424:	c9                   	leave  
   11425:	c3                   	ret    

00011426 <task_uninit>:
/**
 * @brief 反初始化任务对象，释放对应的资源
 * 
 * @param task 
 */
void task_uninit(task_t *task) {
   11426:	55                   	push   %ebp
   11427:	89 e5                	mov    %esp,%ebp
   11429:	83 ec 08             	sub    $0x8,%esp
    if (task->tss_selector) {   //释放已分配的选择子
   1142c:	8b 45 08             	mov    0x8(%ebp),%eax
   1142f:	8b 80 b8 00 00 00    	mov    0xb8(%eax),%eax
   11435:	85 c0                	test   %eax,%eax
   11437:	74 18                	je     11451 <task_uninit+0x2b>
        gdt_free(task->tss_selector);
   11439:	8b 45 08             	mov    0x8(%ebp),%eax
   1143c:	8b 80 b8 00 00 00    	mov    0xb8(%eax),%eax
   11442:	0f b7 c0             	movzwl %ax,%eax
   11445:	83 ec 0c             	sub    $0xc,%esp
   11448:	50                   	push   %eax
   11449:	e8 05 10 00 00       	call   12453 <gdt_free>
   1144e:	83 c4 10             	add    $0x10,%esp
    }

    if (task->tss.esp0) {   //释放已分配的内核栈空间
   11451:	8b 45 08             	mov    0x8(%ebp),%eax
   11454:	8b 40 54             	mov    0x54(%eax),%eax
   11457:	85 c0                	test   %eax,%eax
   11459:	74 17                	je     11472 <task_uninit+0x4c>
        memory_free_page((uint32_t)(task->tss.esp0 - MEM_PAGE_SIZE));
   1145b:	8b 45 08             	mov    0x8(%ebp),%eax
   1145e:	8b 40 54             	mov    0x54(%eax),%eax
   11461:	2d 00 10 00 00       	sub    $0x1000,%eax
   11466:	83 ec 0c             	sub    $0xc,%esp
   11469:	50                   	push   %eax
   1146a:	e8 d0 f9 ff ff       	call   10e3f <memory_free_page>
   1146f:	83 c4 10             	add    $0x10,%esp
    }

    if (task->tss.cr3) {    //释放为页目录分配的页空间及其映射关系
   11472:	8b 45 08             	mov    0x8(%ebp),%eax
   11475:	8b 40 6c             	mov    0x6c(%eax),%eax
   11478:	85 c0                	test   %eax,%eax
   1147a:	74 12                	je     1148e <task_uninit+0x68>
        memory_destroy_uvm(task->tss.cr3);
   1147c:	8b 45 08             	mov    0x8(%ebp),%eax
   1147f:	8b 40 6c             	mov    0x6c(%eax),%eax
   11482:	83 ec 0c             	sub    $0xc,%esp
   11485:	50                   	push   %eax
   11486:	e8 ca f6 ff ff       	call   10b55 <memory_destroy_uvm>
   1148b:	83 c4 10             	add    $0x10,%esp
    }

    kernel_memset(task, 0, sizeof(task_t));
   1148e:	83 ec 04             	sub    $0x4,%esp
   11491:	68 bc 00 00 00       	push   $0xbc
   11496:	6a 00                	push   $0x0
   11498:	ff 75 08             	push   0x8(%ebp)
   1149b:	e8 cb 2a 00 00       	call   13f6b <kernel_memset>
   114a0:	83 c4 10             	add    $0x10,%esp
}
   114a3:	90                   	nop
   114a4:	c9                   	leave  
   114a5:	c3                   	ret    

000114a6 <empty_task>:
static uint32_t empty_task_stack[EMPTY_TASK_STACK_SIZE];
/**
 * @brief  空闲进程，当所有进程都延时运行时，让cpu运行空闲进程
 * 
 */
static void empty_task(void) {
   114a6:	55                   	push   %ebp
   114a7:	89 e5                	mov    %esp,%ebp

    while(1) {
        //停止cpu运行，让cpu等待时间中断
        hlt();
   114a9:	e8 56 fc ff ff       	call   11104 <hlt>
   114ae:	eb f9                	jmp    114a9 <empty_task+0x3>

000114b0 <task_manager_init>:

/**
 * @brief  初始化任务管理器
 * 
 */
void task_manager_init(void) {
   114b0:	55                   	push   %ebp
   114b1:	89 e5                	mov    %esp,%ebp
   114b3:	83 ec 18             	sub    $0x18,%esp
    //1.初始化应用程序及所有任务的代码段选择子和数据段选择子，以区分和内核选择子的特权级
    //应用程序运行在 DPL_3 下， 内核运行在DPL_0下，配合分页机制中的us位，0为内核特权级，1为用户特权级
    //就可做到特权级保护
    uint32_t data_selector = gdt_alloc_desc();
   114b6:	e8 23 0f 00 00       	call   123de <gdt_alloc_desc>
   114bb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t code_selector = gdt_alloc_desc();
   114be:	e8 1b 0f 00 00       	call   123de <gdt_alloc_desc>
   114c3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    segment_desc_set(data_selector, 0, 0xffffffff, SEG_ATTR_P | SEG_ATTR_DPL_3 | SEG_ATTR_S_NORMAL | SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);
   114c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   114c9:	0f b7 c0             	movzwl %ax,%eax
   114cc:	68 f2 40 00 00       	push   $0x40f2
   114d1:	6a ff                	push   $0xffffffff
   114d3:	6a 00                	push   $0x0
   114d5:	50                   	push   %eax
   114d6:	e8 91 0d 00 00       	call   1226c <segment_desc_set>
   114db:	83 c4 10             	add    $0x10,%esp
    segment_desc_set(code_selector, 0, 0xffffffff, SEG_ATTR_P | SEG_ATTR_DPL_3 | SEG_ATTR_S_NORMAL | SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);
   114de:	8b 45 f0             	mov    -0x10(%ebp),%eax
   114e1:	0f b7 c0             	movzwl %ax,%eax
   114e4:	68 fa 40 00 00       	push   $0x40fa
   114e9:	6a ff                	push   $0xffffffff
   114eb:	6a 00                	push   $0x0
   114ed:	50                   	push   %eax
   114ee:	e8 79 0d 00 00       	call   1226c <segment_desc_set>
   114f3:	83 c4 10             	add    $0x10,%esp
    task_manager.app_code_selector = code_selector;
   114f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   114f9:	a3 a0 01 02 00       	mov    %eax,0x201a0
    task_manager.app_data_selector = data_selector;
   114fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11501:	a3 a4 01 02 00       	mov    %eax,0x201a4
    
    //2.初始化所有任务队列
    list_init(&task_manager.ready_list);
   11506:	83 ec 0c             	sub    $0xc,%esp
   11509:	68 04 00 02 00       	push   $0x20004
   1150e:	e8 05 fb ff ff       	call   11018 <list_init>
   11513:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   11516:	83 ec 0c             	sub    $0xc,%esp
   11519:	68 10 00 02 00       	push   $0x20010
   1151e:	e8 f5 fa ff ff       	call   11018 <list_init>
   11523:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   11526:	83 ec 0c             	sub    $0xc,%esp
   11529:	68 1c 00 02 00       	push   $0x2001c
   1152e:	e8 e5 fa ff ff       	call   11018 <list_init>
   11533:	83 c4 10             	add    $0x10,%esp

    //3.将当前任务置零
    task_manager.curr_task = (task_t*)0;
   11536:	c7 05 00 00 02 00 00 	movl   $0x0,0x20000
   1153d:	00 00 00 

    //4.初始化空闲进程
    task_init(  &task_manager.empty_task,
   11540:	ba e0 61 02 00       	mov    $0x261e0,%edx
   11545:	b8 a6 14 01 00       	mov    $0x114a6,%eax
   1154a:	83 ec 0c             	sub    $0xc,%esp
   1154d:	6a 01                	push   $0x1
   1154f:	52                   	push   %edx
   11550:	50                   	push   %eax
   11551:	68 ed 4a 01 00       	push   $0x14aed
   11556:	68 e4 00 02 00       	push   $0x200e4
   1155b:	e8 e9 fd ff ff       	call   11349 <task_init>
   11560:	83 c4 20             	add    $0x20,%esp
                 (uint32_t)&empty_task_stack[EMPTY_TASK_STACK_SIZE], TASK_FLAGS_SYSTEM);
                 


    //5.初始化静态任务表,及其互斥锁
    kernel_memset(task_table, 0, sizeof(task_table));
   11563:	83 ec 04             	sub    $0x4,%esp
   11566:	68 00 5e 00 00       	push   $0x5e00
   1156b:	6a 00                	push   $0x0
   1156d:	68 c0 01 02 00       	push   $0x201c0
   11572:	e8 f4 29 00 00       	call   13f6b <kernel_memset>
   11577:	83 c4 10             	add    $0x10,%esp
    mutex_init(&task_table_lock);
   1157a:	83 ec 0c             	sub    $0xc,%esp
   1157d:	68 c0 5f 02 00       	push   $0x25fc0
   11582:	e8 cd 1d 00 00       	call   13354 <mutex_init>
   11587:	83 c4 10             	add    $0x10,%esp
  
}
   1158a:	90                   	nop
   1158b:	c9                   	leave  
   1158c:	c3                   	ret    

0001158d <task_first_init>:
 *     页目录表 = 1页
 * ------------------
 * 内核0特权级栈 = 1页
 * ------------------
 */
void task_first_init(void) {
   1158d:	55                   	push   %ebp
   1158e:	89 e5                	mov    %esp,%ebp
   11590:	83 ec 18             	sub    $0x18,%esp
    //1.声明第一个任务的符号
    void first_task_entry(void);

    //2.确定第一个任务进程需要的空间大小
    extern char s_first_task, e_first_task;
    uint32_t copy_size = (uint32_t)(&e_first_task - &s_first_task);   //进程所需空间大小
   11593:	b8 9e b1 03 00       	mov    $0x3b19e,%eax
   11598:	2d 00 b0 03 00       	sub    $0x3b000,%eax
   1159d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t alloc_size = up2(copy_size, MEM_PAGE_SIZE) + 10 * MEM_PAGE_SIZE;   //需要为进程分配的内存大小，按4kb对齐,并多拿五页当作栈空间
   115a0:	68 00 10 00 00       	push   $0x1000
   115a5:	ff 75 f4             	push   -0xc(%ebp)
   115a8:	e8 40 fb ff ff       	call   110ed <up2>
   115ad:	83 c4 08             	add    $0x8,%esp
   115b0:	05 00 a0 00 00       	add    $0xa000,%eax
   115b5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    ASSERT(copy_size < alloc_size);
   115b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   115bb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
   115be:	72 1c                	jb     115dc <task_first_init+0x4f>
   115c0:	68 f8 4a 01 00       	push   $0x14af8
   115c5:	68 08 4c 01 00       	push   $0x14c08
   115ca:	68 34 01 00 00       	push   $0x134
   115cf:	68 b8 4a 01 00       	push   $0x14ab8
   115d4:	e8 90 24 00 00       	call   13a69 <pannic>
   115d9:	83 c4 10             	add    $0x10,%esp

    uint32_t task_start_addr = (uint32_t)first_task_entry;  //获取第一个任务的入口地址
   115dc:	c7 45 ec 00 00 00 80 	movl   $0x80000000,-0x14(%ebp)

    //3.初始化第一个任务,因为当前为操作系统进程，esp初始值随意赋值都可，
    // 因为当前进程已开启，cpu会在切换的时候保留真实的状态，即真实的esp值
    task_init(&task_manager.first_task, "first task", task_start_addr, task_start_addr + alloc_size, TASK_FLAGS_USER);
   115e3:	8b 55 ec             	mov    -0x14(%ebp),%edx
   115e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   115e9:	01 d0                	add    %edx,%eax
   115eb:	83 ec 0c             	sub    $0xc,%esp
   115ee:	6a 00                	push   $0x0
   115f0:	50                   	push   %eax
   115f1:	ff 75 ec             	push   -0x14(%ebp)
   115f4:	68 0f 4b 01 00       	push   $0x14b0f
   115f9:	68 28 00 02 00       	push   $0x20028
   115fe:	e8 46 fd ff ff       	call   11349 <task_init>
   11603:	83 c4 20             	add    $0x20,%esp
      
    //4.将当前任务的TSS选择子告诉cpu，用来切换任务时保存状态
    write_tr(task_manager.first_task.tss_selector);
   11606:	a1 e0 00 02 00       	mov    0x200e0,%eax
   1160b:	0f b7 c0             	movzwl %ax,%eax
   1160e:	83 ec 0c             	sub    $0xc,%esp
   11611:	50                   	push   %eax
   11612:	e8 1a fb ff ff       	call   11131 <write_tr>
   11617:	83 c4 10             	add    $0x10,%esp

    //5.将当前任务执行第一个任务
    task_manager.curr_task = &task_manager.first_task;
   1161a:	c7 05 00 00 02 00 28 	movl   $0x20028,0x20000
   11621:	00 02 00 

    //6.将当前页表设置为第一个任务的页表
    mmu_set_page_dir(task_manager.first_task.tss.cr3);
   11624:	a1 94 00 02 00       	mov    0x20094,%eax
   11629:	83 ec 0c             	sub    $0xc,%esp
   1162c:	50                   	push   %eax
   1162d:	e8 16 fb ff ff       	call   11148 <mmu_set_page_dir>
   11632:	83 c4 10             	add    $0x10,%esp

    //7.将当前任务状态设置为运行态
    task_manager.curr_task->state = TASK_RUNNING;
   11635:	a1 00 00 02 00       	mov    0x20000,%eax
   1163a:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

    //8.进程的各个段还只是在虚拟地址中，所以要为各个段分配物理地址页空间，并进行映射
    memory_alloc_page_for(task_start_addr, alloc_size, PTE_P | PTE_W | PTE_U);
   11640:	83 ec 04             	sub    $0x4,%esp
   11643:	6a 07                	push   $0x7
   11645:	ff 75 f0             	push   -0x10(%ebp)
   11648:	ff 75 ec             	push   -0x14(%ebp)
   1164b:	e8 9d f7 ff ff       	call   10ded <memory_alloc_page_for>
   11650:	83 c4 10             	add    $0x10,%esp

    //9.将任务进程各个段从内核四个段之后的紧邻位置，拷贝到已分配好的且与虚拟地址对应的物理地址空间，实现代码隔离
    kernel_memcpy(first_task_entry, &s_first_task, alloc_size);
   11653:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11656:	83 ec 04             	sub    $0x4,%esp
   11659:	50                   	push   %eax
   1165a:	68 00 b0 03 00       	push   $0x3b000
   1165f:	68 00 00 00 80       	push   $0x80000000
   11664:	e8 b3 28 00 00       	call   13f1c <kernel_memcpy>
   11669:	83 c4 10             	add    $0x10,%esp

    //10.将任务设为可被调度
    task_start(&task_manager.first_task);
   1166c:	83 ec 0c             	sub    $0xc,%esp
   1166f:	68 28 00 02 00       	push   $0x20028
   11674:	e8 8c fc ff ff       	call   11305 <task_start>
   11679:	83 c4 10             	add    $0x10,%esp
}
   1167c:	90                   	nop
   1167d:	c9                   	leave  
   1167e:	c3                   	ret    

0001167f <task_first_task>:
/**
 * @brief  获取当前任务管理器的第一个任务
 * 
 * @return task_t* 
 */
task_t *task_first_task(void) {
   1167f:	55                   	push   %ebp
   11680:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   11682:	b8 28 00 02 00       	mov    $0x20028,%eax
}
   11687:	5d                   	pop    %ebp
   11688:	c3                   	ret    

00011689 <task_set_ready>:
/**
 * @brief  将任务task加入就绪队列
 * 
 * @param task 需要加入就绪队列的任务
 */
void task_set_ready(task_t *task) {
   11689:	55                   	push   %ebp
   1168a:	89 e5                	mov    %esp,%ebp
   1168c:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   1168f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11693:	75 1c                	jne    116b1 <task_set_ready+0x28>
   11695:	68 a5 4a 01 00       	push   $0x14aa5
   1169a:	68 18 4c 01 00       	push   $0x14c18
   1169f:	68 61 01 00 00       	push   $0x161
   116a4:	68 b8 4a 01 00       	push   $0x14ab8
   116a9:	e8 bb 23 00 00       	call   13a69 <pannic>
   116ae:	83 c4 10             	add    $0x10,%esp
    //1.将任务插入到就绪队列的尾部
    list_insert_last(&task_manager.ready_list, &task->ready_node);
   116b1:	8b 45 08             	mov    0x8(%ebp),%eax
   116b4:	83 c0 38             	add    $0x38,%eax
   116b7:	83 ec 08             	sub    $0x8,%esp
   116ba:	50                   	push   %eax
   116bb:	68 04 00 02 00       	push   $0x20004
   116c0:	e8 62 2d 00 00       	call   14427 <list_insert_last>
   116c5:	83 c4 10             	add    $0x10,%esp

    //2.将任务状态设置为就绪态
    task->state = TASK_READY;
   116c8:	8b 45 08             	mov    0x8(%ebp),%eax
   116cb:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
}
   116d1:	90                   	nop
   116d2:	c9                   	leave  
   116d3:	c3                   	ret    

000116d4 <task_set_unready>:
/**
 * @brief  将任务task从就绪队列中取下
 * 
 * @param task 
 */
void task_set_unready(task_t *task) {
   116d4:	55                   	push   %ebp
   116d5:	89 e5                	mov    %esp,%ebp
   116d7:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   116da:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   116de:	75 1c                	jne    116fc <task_set_unready+0x28>
   116e0:	68 a5 4a 01 00       	push   $0x14aa5
   116e5:	68 28 4c 01 00       	push   $0x14c28
   116ea:	68 70 01 00 00       	push   $0x170
   116ef:	68 b8 4a 01 00       	push   $0x14ab8
   116f4:	e8 70 23 00 00       	call   13a69 <pannic>
   116f9:	83 c4 10             	add    $0x10,%esp
    list_remove(&task_manager.ready_list, &task->ready_node);
   116fc:	8b 45 08             	mov    0x8(%ebp),%eax
   116ff:	83 c0 38             	add    $0x38,%eax
   11702:	83 ec 08             	sub    $0x8,%esp
   11705:	50                   	push   %eax
   11706:	68 04 00 02 00       	push   $0x20004
   1170b:	e8 0c 2f 00 00       	call   1461c <list_remove>
   11710:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   11713:	8b 45 08             	mov    0x8(%ebp),%eax
   11716:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   1171c:	90                   	nop
   1171d:	c9                   	leave  
   1171e:	c3                   	ret    

0001171f <task_ready_first>:

/**
 * @brief  获取就绪队列中的第一个任务
 * 
 */
task_t* task_ready_first(void) {
   1171f:	55                   	push   %ebp
   11720:	89 e5                	mov    %esp,%ebp
   11722:	83 ec 18             	sub    $0x18,%esp
    list_node_t *ready_node = list_get_first(&task_manager.ready_list);
   11725:	83 ec 0c             	sub    $0xc,%esp
   11728:	68 04 00 02 00       	push   $0x20004
   1172d:	e8 8f f9 ff ff       	call   110c1 <list_get_first>
   11732:	83 c4 10             	add    $0x10,%esp
   11735:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    return list_node_parent(ready_node, task_t, ready_node);
   11738:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1173c:	74 08                	je     11746 <task_ready_first+0x27>
   1173e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11741:	83 e8 38             	sub    $0x38,%eax
   11744:	eb 05                	jmp    1174b <task_ready_first+0x2c>
   11746:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1174b:	c9                   	leave  
   1174c:	c3                   	ret    

0001174d <task_current>:
/**
 * @brief  获取当前正在运行的任务
 * 
 * @return task_t* 
 */
task_t *task_current(void) {
   1174d:	55                   	push   %ebp
   1174e:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   11750:	a1 00 00 02 00       	mov    0x20000,%eax
}
   11755:	5d                   	pop    %ebp
   11756:	c3                   	ret    

00011757 <task_switch>:

/**
 * @brief  任务管理器进行任务切换
 * 
 */
void task_switch(void) {
   11757:	55                   	push   %ebp
   11758:	89 e5                	mov    %esp,%ebp
   1175a:	83 ec 18             	sub    $0x18,%esp

    idt_state_t state = idt_enter_protection();//TODO:加锁
   1175d:	e8 a7 16 00 00       	call   12e09 <idt_enter_protection>
   11762:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //1.获取就绪队列中的第一个任务
    task_t *to = task_ready_first();
   11765:	e8 b5 ff ff ff       	call   1171f <task_ready_first>
   1176a:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.若获取到的任务不是当前任务就进行切换
    if (to != task_manager.curr_task) {
   1176d:	a1 00 00 02 00       	mov    0x20000,%eax
   11772:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   11775:	74 37                	je     117ae <task_switch+0x57>
        //3.获取当前任务
        task_t *from = task_manager.curr_task;
   11777:	a1 00 00 02 00       	mov    0x20000,%eax
   1177c:	89 45 ec             	mov    %eax,-0x14(%ebp)

        //4.目标任务若为空，则所有任务都在延时，让cpu运行空闲任务
        if (to == (task_t*)0) { 
   1177f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11783:	75 07                	jne    1178c <task_switch+0x35>
            to = &task_manager.empty_task;
   11785:	c7 45 f4 e4 00 02 00 	movl   $0x200e4,-0xc(%ebp)
        }
        //5.切换当前任务, 并将当前任务置为运行态
        to->state = TASK_RUNNING;
   1178c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1178f:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        task_manager.curr_task = to;
   11795:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11798:	a3 00 00 02 00       	mov    %eax,0x20000
        

        //6.进行任务切换
        task_switch_from_to(from, to);
   1179d:	83 ec 08             	sub    $0x8,%esp
   117a0:	ff 75 f4             	push   -0xc(%ebp)
   117a3:	ff 75 ec             	push   -0x14(%ebp)
   117a6:	e8 cd f9 ff ff       	call   11178 <task_switch_from_to>
   117ab:	83 c4 10             	add    $0x10,%esp
    } 

    idt_leave_protection(state);//TODO:解锁
   117ae:	83 ec 0c             	sub    $0xc,%esp
   117b1:	ff 75 f0             	push   -0x10(%ebp)
   117b4:	e8 68 16 00 00       	call   12e21 <idt_leave_protection>
   117b9:	83 c4 10             	add    $0x10,%esp
}
   117bc:	90                   	nop
   117bd:	c9                   	leave  
   117be:	c3                   	ret    

000117bf <task_slice_end>:
/**
 * @brief  提供给时钟中断使用，每中断一次，当前任务的时间片使用完一次
 *         减少当前任务的时间片数，并判断是否还有剩余时间片，若没有就进行任务切换
 * 
 */
void task_slice_end(void) {
   117bf:	55                   	push   %ebp
   117c0:	89 e5                	mov    %esp,%ebp
   117c2:	83 ec 18             	sub    $0x18,%esp

    //1.遍历当前延时队列，判断是否有可唤醒的任务
    list_node_t *curr_sleep_node = list_get_first(&task_manager.sleep_list);
   117c5:	83 ec 0c             	sub    $0xc,%esp
   117c8:	68 1c 00 02 00       	push   $0x2001c
   117cd:	e8 ef f8 ff ff       	call   110c1 <list_get_first>
   117d2:	83 c4 10             	add    $0x10,%esp
   117d5:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.遍历并判断每一个任务执行完当前时间片是否可被唤醒，若可以则唤醒
    while (curr_sleep_node) {
   117d8:	eb 62                	jmp    1183c <task_slice_end+0x7d>
        
        list_node_t *next_sleep_node = list_node_next(curr_sleep_node);
   117da:	83 ec 0c             	sub    $0xc,%esp
   117dd:	ff 75 f4             	push   -0xc(%ebp)
   117e0:	e8 06 f8 ff ff       	call   10feb <list_node_next>
   117e5:	83 c4 10             	add    $0x10,%esp
   117e8:	89 45 ec             	mov    %eax,-0x14(%ebp)
        
        task_t *curr_sleep_task = list_node_parent(curr_sleep_node, task_t, ready_node);
   117eb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   117ef:	74 08                	je     117f9 <task_slice_end+0x3a>
   117f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   117f4:	83 e8 38             	sub    $0x38,%eax
   117f7:	eb 05                	jmp    117fe <task_slice_end+0x3f>
   117f9:	b8 00 00 00 00       	mov    $0x0,%eax
   117fe:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (--curr_sleep_task->sleep == 0) {
   11801:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11804:	8b 40 14             	mov    0x14(%eax),%eax
   11807:	8d 50 ff             	lea    -0x1(%eax),%edx
   1180a:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1180d:	89 50 14             	mov    %edx,0x14(%eax)
   11810:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11813:	8b 40 14             	mov    0x14(%eax),%eax
   11816:	85 c0                	test   %eax,%eax
   11818:	75 1c                	jne    11836 <task_slice_end+0x77>
            task_set_wakeup(curr_sleep_task);   //从延时队列中取下
   1181a:	83 ec 0c             	sub    $0xc,%esp
   1181d:	ff 75 e8             	push   -0x18(%ebp)
   11820:	e8 01 01 00 00       	call   11926 <task_set_wakeup>
   11825:	83 c4 10             	add    $0x10,%esp
            task_set_ready(curr_sleep_task);    //加入就绪队列
   11828:	83 ec 0c             	sub    $0xc,%esp
   1182b:	ff 75 e8             	push   -0x18(%ebp)
   1182e:	e8 56 fe ff ff       	call   11689 <task_set_ready>
   11833:	83 c4 10             	add    $0x10,%esp
        }

        curr_sleep_node = next_sleep_node;
   11836:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11839:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr_sleep_node) {
   1183c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11840:	75 98                	jne    117da <task_slice_end+0x1b>
    }

    // task_switch(); 没有必要立马进行任务切换，当前任务时间片用完后会自动切换
    //3.获取当前任务
    task_t *curr_task = task_current();
   11842:	e8 06 ff ff ff       	call   1174d <task_current>
   11847:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //4.若当前任务为空闲任务，则判断就绪队列是否为空
    if (curr_task == &task_manager.empty_task) {
   1184a:	81 7d f0 e4 00 02 00 	cmpl   $0x200e4,-0x10(%ebp)
   11851:	75 23                	jne    11876 <task_slice_end+0xb7>
        
        if (list_is_empty(&task_manager.ready_list)) return;
   11853:	83 ec 0c             	sub    $0xc,%esp
   11856:	68 04 00 02 00       	push   $0x20004
   1185b:	e8 ff f7 ff ff       	call   1105f <list_is_empty>
   11860:	83 c4 10             	add    $0x10,%esp
   11863:	85 c0                	test   %eax,%eax
   11865:	75 60                	jne    118c7 <task_slice_end+0x108>
        
        task_manager.empty_task.state = TASK_CREATED;
   11867:	c7 05 e4 00 02 00 00 	movl   $0x0,0x200e4
   1186e:	00 00 00 
        
        task_switch();//就绪队列有任务，则直接切换任务
   11871:	e8 e1 fe ff ff       	call   11757 <task_switch>
    }

    //5.若当前任务为普通任务则，减小当前时间片数
    if (curr_task != &task_manager.empty_task && --curr_task->slice_curr == 0) {
   11876:	81 7d f0 e4 00 02 00 	cmpl   $0x200e4,-0x10(%ebp)
   1187d:	74 49                	je     118c8 <task_slice_end+0x109>
   1187f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11882:	8b 40 10             	mov    0x10(%eax),%eax
   11885:	8d 50 ff             	lea    -0x1(%eax),%edx
   11888:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1188b:	89 50 10             	mov    %edx,0x10(%eax)
   1188e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11891:	8b 40 10             	mov    0x10(%eax),%eax
   11894:	85 c0                	test   %eax,%eax
   11896:	75 30                	jne    118c8 <task_slice_end+0x109>
        //6.时间片数用完了，重置时间片并进行任务切换
        curr_task->slice_curr = curr_task->slice_max;
   11898:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1189b:	8b 50 0c             	mov    0xc(%eax),%edx
   1189e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   118a1:	89 50 10             	mov    %edx,0x10(%eax)
        task_set_unready(curr_task);
   118a4:	83 ec 0c             	sub    $0xc,%esp
   118a7:	ff 75 f0             	push   -0x10(%ebp)
   118aa:	e8 25 fe ff ff       	call   116d4 <task_set_unready>
   118af:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   118b2:	83 ec 0c             	sub    $0xc,%esp
   118b5:	ff 75 f0             	push   -0x10(%ebp)
   118b8:	e8 cc fd ff ff       	call   11689 <task_set_ready>
   118bd:	83 c4 10             	add    $0x10,%esp
        task_switch();
   118c0:	e8 92 fe ff ff       	call   11757 <task_switch>
   118c5:	eb 01                	jmp    118c8 <task_slice_end+0x109>
        if (list_is_empty(&task_manager.ready_list)) return;
   118c7:	90                   	nop
    }
}
   118c8:	c9                   	leave  
   118c9:	c3                   	ret    

000118ca <task_set_sleep>:
 * @brief  设置进程延时的时间片数
 * 
 * @param task 需要延时的进程
 * @param slice 延时的时间片数
 */
void task_set_sleep(task_t *task, uint32_t slice) {
   118ca:	55                   	push   %ebp
   118cb:	89 e5                	mov    %esp,%ebp
   118cd:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   118d0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   118d4:	75 1c                	jne    118f2 <task_set_sleep+0x28>
   118d6:	68 a5 4a 01 00       	push   $0x14aa5
   118db:	68 6c 4c 01 00       	push   $0x14c6c
   118e0:	68 e5 01 00 00       	push   $0x1e5
   118e5:	68 b8 4a 01 00       	push   $0x14ab8
   118ea:	e8 7a 21 00 00       	call   13a69 <pannic>
   118ef:	83 c4 10             	add    $0x10,%esp
    if (slice == 0) return;
   118f2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   118f6:	74 2b                	je     11923 <task_set_sleep+0x59>

    task->sleep = slice;
   118f8:	8b 55 0c             	mov    0xc(%ebp),%edx
   118fb:	8b 45 08             	mov    0x8(%ebp),%eax
   118fe:	89 50 14             	mov    %edx,0x14(%eax)
    task->state = TASK_SLEEP;
   11901:	8b 45 08             	mov    0x8(%ebp),%eax
   11904:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    list_insert_last(&task_manager.sleep_list, &task->ready_node);
   1190a:	8b 45 08             	mov    0x8(%ebp),%eax
   1190d:	83 c0 38             	add    $0x38,%eax
   11910:	83 ec 08             	sub    $0x8,%esp
   11913:	50                   	push   %eax
   11914:	68 1c 00 02 00       	push   $0x2001c
   11919:	e8 09 2b 00 00       	call   14427 <list_insert_last>
   1191e:	83 c4 10             	add    $0x10,%esp
   11921:	eb 01                	jmp    11924 <task_set_sleep+0x5a>
    if (slice == 0) return;
   11923:	90                   	nop
}
   11924:	c9                   	leave  
   11925:	c3                   	ret    

00011926 <task_set_wakeup>:
/**
 * @brief  唤醒正在延时的进程
 * 
 * @param task 
 */
void task_set_wakeup(task_t *task) {
   11926:	55                   	push   %ebp
   11927:	89 e5                	mov    %esp,%ebp
   11929:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   1192c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11930:	75 1c                	jne    1194e <task_set_wakeup+0x28>
   11932:	68 a5 4a 01 00       	push   $0x14aa5
   11937:	68 7c 4c 01 00       	push   $0x14c7c
   1193c:	68 f3 01 00 00       	push   $0x1f3
   11941:	68 b8 4a 01 00       	push   $0x14ab8
   11946:	e8 1e 21 00 00       	call   13a69 <pannic>
   1194b:	83 c4 10             	add    $0x10,%esp
    list_remove(&task_manager.sleep_list, &task->ready_node);
   1194e:	8b 45 08             	mov    0x8(%ebp),%eax
   11951:	83 c0 38             	add    $0x38,%eax
   11954:	83 ec 08             	sub    $0x8,%esp
   11957:	50                   	push   %eax
   11958:	68 1c 00 02 00       	push   $0x2001c
   1195d:	e8 ba 2c 00 00       	call   1461c <list_remove>
   11962:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   11965:	8b 45 08             	mov    0x8(%ebp),%eax
   11968:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   1196e:	90                   	nop
   1196f:	c9                   	leave  
   11970:	c3                   	ret    

00011971 <alloc_task>:
/**
 * @brief 从静态任务表中分配一个任务对象
 * 
 * @return task_t* 
 */
static task_t *alloc_task(void) {
   11971:	55                   	push   %ebp
   11972:	89 e5                	mov    %esp,%ebp
   11974:	83 ec 18             	sub    $0x18,%esp
    task_t *task = 0;
   11977:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_lock(&task_table_lock);
   1197e:	83 ec 0c             	sub    $0xc,%esp
   11981:	68 c0 5f 02 00       	push   $0x25fc0
   11986:	e8 16 1a 00 00       	call   133a1 <mutex_lock>
   1198b:	83 c4 10             	add    $0x10,%esp
    
    //遍历静态任务表，取出未被分配的任务对象空间
    for (int i = 0; i < TASK_COUNT; ++i) {
   1198e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11995:	eb 27                	jmp    119be <alloc_task+0x4d>
        task_t *curr = task_table + i;
   11997:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1199a:	69 c0 bc 00 00 00    	imul   $0xbc,%eax,%eax
   119a0:	05 c0 01 02 00       	add    $0x201c0,%eax
   119a5:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (curr->pid == 0) {
   119a8:	8b 45 ec             	mov    -0x14(%ebp),%eax
   119ab:	8b 40 08             	mov    0x8(%eax),%eax
   119ae:	85 c0                	test   %eax,%eax
   119b0:	75 08                	jne    119ba <alloc_task+0x49>
            task = curr;
   119b2:	8b 45 ec             	mov    -0x14(%ebp),%eax
   119b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   119b8:	eb 0a                	jmp    119c4 <alloc_task+0x53>
    for (int i = 0; i < TASK_COUNT; ++i) {
   119ba:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   119be:	83 7d f0 7f          	cmpl   $0x7f,-0x10(%ebp)
   119c2:	7e d3                	jle    11997 <alloc_task+0x26>
        }
    }

    mutex_unlock(&task_table_lock);
   119c4:	83 ec 0c             	sub    $0xc,%esp
   119c7:	68 c0 5f 02 00       	push   $0x25fc0
   119cc:	e8 61 1a 00 00       	call   13432 <mutex_unlock>
   119d1:	83 c4 10             	add    $0x10,%esp

    return task;
   119d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   119d7:	c9                   	leave  
   119d8:	c3                   	ret    

000119d9 <free_task>:
/**
 * @brief 释放静态任务表的任务对象
 * 
 * @param task 
 */
static void free_task(task_t *task) {
   119d9:	55                   	push   %ebp
   119da:	89 e5                	mov    %esp,%ebp
   119dc:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&task_table_lock);
   119df:	83 ec 0c             	sub    $0xc,%esp
   119e2:	68 c0 5f 02 00       	push   $0x25fc0
   119e7:	e8 b5 19 00 00       	call   133a1 <mutex_lock>
   119ec:	83 c4 10             	add    $0x10,%esp
    
    task->pid = 0;
   119ef:	8b 45 08             	mov    0x8(%ebp),%eax
   119f2:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)

    mutex_unlock(&task_table_lock);
   119f9:	83 ec 0c             	sub    $0xc,%esp
   119fc:	68 c0 5f 02 00       	push   $0x25fc0
   11a01:	e8 2c 1a 00 00       	call   13432 <mutex_unlock>
   11a06:	83 c4 10             	add    $0x10,%esp
}
   11a09:	90                   	nop
   11a0a:	c9                   	leave  
   11a0b:	c3                   	ret    

00011a0c <sys_sleep>:
/**
 * @brief  使进程进入延时状态
 * 
 * @param ms 延时的时间，以ms为单位
 */
void sys_sleep(uint32_t ms) {
   11a0c:	55                   	push   %ebp
   11a0d:	89 e5                	mov    %esp,%ebp
   11a0f:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection(); //TODO:加锁
   11a12:	e8 f2 13 00 00       	call   12e09 <idt_enter_protection>
   11a17:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //1.获取当前任务  
    task_t *curr_task = task_current();
   11a1a:	e8 2e fd ff ff       	call   1174d <task_current>
   11a1f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    //2.将当前任务离开就绪队列
    task_set_unready(curr_task);
   11a22:	83 ec 0c             	sub    $0xc,%esp
   11a25:	ff 75 f0             	push   -0x10(%ebp)
   11a28:	e8 a7 fc ff ff       	call   116d4 <task_set_unready>
   11a2d:	83 c4 10             	add    $0x10,%esp

    //3.计算出需要延时的时间片数，对时间片数向上取整，保证进程至少能延时指定时间
    uint32_t slice = (ms + (OS_TICKS_MS - 1)) / OS_TICKS_MS;
   11a30:	8b 45 08             	mov    0x8(%ebp),%eax
   11a33:	83 c0 09             	add    $0x9,%eax
   11a36:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   11a3b:	f7 e2                	mul    %edx
   11a3d:	89 d0                	mov    %edx,%eax
   11a3f:	c1 e8 03             	shr    $0x3,%eax
   11a42:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //4.将当前任务放入延时队列，并设置延时时间片数
    task_set_sleep(curr_task, slice);
   11a45:	83 ec 08             	sub    $0x8,%esp
   11a48:	ff 75 ec             	push   -0x14(%ebp)
   11a4b:	ff 75 f0             	push   -0x10(%ebp)
   11a4e:	e8 77 fe ff ff       	call   118ca <task_set_sleep>
   11a53:	83 c4 10             	add    $0x10,%esp

    //5.切换任务
    task_switch();
   11a56:	e8 fc fc ff ff       	call   11757 <task_switch>

    idt_leave_protection(state); //TODO:解锁
   11a5b:	83 ec 0c             	sub    $0xc,%esp
   11a5e:	ff 75 f4             	push   -0xc(%ebp)
   11a61:	e8 bb 13 00 00       	call   12e21 <idt_leave_protection>
   11a66:	83 c4 10             	add    $0x10,%esp
}
   11a69:	90                   	nop
   11a6a:	c9                   	leave  
   11a6b:	c3                   	ret    

00011a6c <sys_getpid>:
/**
 * @brief 获取任务pid
 * 
 * @return int pid
 */
int sys_getpid(void) {
   11a6c:	55                   	push   %ebp
   11a6d:	89 e5                	mov    %esp,%ebp
    return task_current()->pid;
   11a6f:	e8 d9 fc ff ff       	call   1174d <task_current>
   11a74:	8b 40 08             	mov    0x8(%eax),%eax
}
   11a77:	5d                   	pop    %ebp
   11a78:	c3                   	ret    

00011a79 <sys_fork>:
/**
 * @brief 创建子进程
 * 
 * @return int 子进程的pid
 */
int sys_fork(void) {
   11a79:	55                   	push   %ebp
   11a7a:	89 e5                	mov    %esp,%ebp
   11a7c:	83 ec 28             	sub    $0x28,%esp

    //获取当前进程为fork进程的父进程
    task_t *parent_task = task_current();
   11a7f:	e8 c9 fc ff ff       	call   1174d <task_current>
   11a84:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //分配子进程控制块
    task_t *child_task = alloc_task();
   11a87:	e8 e5 fe ff ff       	call   11971 <alloc_task>
   11a8c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (child_task == (task_t*)0)
   11a8f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11a93:	0f 84 2b 01 00 00    	je     11bc4 <sys_fork+0x14b>
        goto fork_failed;

    //获取系统调用的栈帧,因为每次通过调用门进入内核栈中都只会一帧该结构体的数据，
    //所以用最高地址减去大小即可获得该帧的起始地址
    syscall_frame_t *frame = (syscall_frame_t*)(parent_task->tss.esp0 - sizeof(syscall_frame_t));
   11a99:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11a9c:	8b 40 54             	mov    0x54(%eax),%eax
   11a9f:	83 e8 58             	sub    $0x58,%eax
   11aa2:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //初始子进程控制块，直接用父进程进入调用门的下一条指令地址作为子进程的入口地址
    int err = task_init(child_task, parent_task->name, frame->eip, frame->esp + sizeof(uint32_t)*SYSCALL_PARAM_COUNT, TASK_FLAGS_USER);
   11aa5:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11aa8:	8b 40 50             	mov    0x50(%eax),%eax
   11aab:	8d 48 14             	lea    0x14(%eax),%ecx
   11aae:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11ab1:	8b 40 34             	mov    0x34(%eax),%eax
   11ab4:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11ab7:	83 c2 18             	add    $0x18,%edx
   11aba:	83 ec 0c             	sub    $0xc,%esp
   11abd:	6a 00                	push   $0x0
   11abf:	51                   	push   %ecx
   11ac0:	50                   	push   %eax
   11ac1:	52                   	push   %edx
   11ac2:	ff 75 f0             	push   -0x10(%ebp)
   11ac5:	e8 7f f8 ff ff       	call   11349 <task_init>
   11aca:	83 c4 20             	add    $0x20,%esp
   11acd:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (err < 0)
   11ad0:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11ad4:	0f 88 ed 00 00 00    	js     11bc7 <sys_fork+0x14e>
        goto fork_failed;

    //恢复到父进程的上下文环境
    tss_t *tss = &(child_task->tss);
   11ada:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11add:	83 c0 50             	add    $0x50,%eax
   11ae0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    //子进程执行的第一条指令就是从eax中取出系统用的返回值，即进程id，子进程固定获取0
    tss->eax = 0;   
   11ae3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11ae6:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    tss->ebx = frame->ebx;
   11aed:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11af0:	8b 50 24             	mov    0x24(%eax),%edx
   11af3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11af6:	89 50 34             	mov    %edx,0x34(%eax)
    tss->ecx = frame->ecx;
   11af9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11afc:	8b 50 2c             	mov    0x2c(%eax),%edx
   11aff:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b02:	89 50 2c             	mov    %edx,0x2c(%eax)
    tss->edx = frame->edx;
   11b05:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b08:	8b 50 28             	mov    0x28(%eax),%edx
   11b0b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b0e:	89 50 30             	mov    %edx,0x30(%eax)
    tss->edi = frame->edi;
   11b11:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b14:	8b 50 14             	mov    0x14(%eax),%edx
   11b17:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b1a:	89 50 44             	mov    %edx,0x44(%eax)
    tss->esi = frame->esi;
   11b1d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b20:	8b 50 18             	mov    0x18(%eax),%edx
   11b23:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b26:	89 50 40             	mov    %edx,0x40(%eax)
    tss->eflags = frame->eflags;
   11b29:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b2c:	8b 10                	mov    (%eax),%edx
   11b2e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b31:	89 50 24             	mov    %edx,0x24(%eax)
    tss->ebp = frame->ebp;
   11b34:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b37:	8b 50 1c             	mov    0x1c(%eax),%edx
   11b3a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b3d:	89 50 3c             	mov    %edx,0x3c(%eax)

    //复用父进程的段寄存器
    tss->cs = frame->cs;
   11b40:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b43:	8b 50 38             	mov    0x38(%eax),%edx
   11b46:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b49:	89 50 4c             	mov    %edx,0x4c(%eax)
    tss->ds = frame->ds;
   11b4c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b4f:	8b 50 10             	mov    0x10(%eax),%edx
   11b52:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b55:	89 50 54             	mov    %edx,0x54(%eax)
    tss->es = frame->es;
   11b58:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b5b:	8b 50 0c             	mov    0xc(%eax),%edx
   11b5e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b61:	89 50 48             	mov    %edx,0x48(%eax)
    tss->fs = frame->fs;
   11b64:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b67:	8b 50 08             	mov    0x8(%eax),%edx
   11b6a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b6d:	89 50 58             	mov    %edx,0x58(%eax)
    tss->gs = frame->gs;
   11b70:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b73:	8b 50 04             	mov    0x4(%eax),%edx
   11b76:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b79:	89 50 5c             	mov    %edx,0x5c(%eax)
    tss->ss = frame->ss;
   11b7c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b7f:	8b 50 54             	mov    0x54(%eax),%edx
   11b82:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b85:	89 50 50             	mov    %edx,0x50(%eax)

    //记录父进程地址
    child_task->parent = parent_task;
   11b88:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11b8b:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11b8e:	89 50 04             	mov    %edx,0x4(%eax)

    //拷贝进程虚拟页目录表和页表，即拷贝其映射关系
    if (memory_copy_uvm(tss->cr3, parent_task->tss.cr3) < 0)
   11b91:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11b94:	8b 50 6c             	mov    0x6c(%eax),%edx
   11b97:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b9a:	8b 40 1c             	mov    0x1c(%eax),%eax
   11b9d:	83 ec 08             	sub    $0x8,%esp
   11ba0:	52                   	push   %edx
   11ba1:	50                   	push   %eax
   11ba2:	e8 21 ee ff ff       	call   109c8 <memory_copy_uvm>
   11ba7:	83 c4 10             	add    $0x10,%esp
   11baa:	85 c0                	test   %eax,%eax
   11bac:	78 1c                	js     11bca <sys_fork+0x151>
        goto fork_failed;

    //子进程控制块初始化完毕，设为可被调度态
    task_start(child_task);
   11bae:	83 ec 0c             	sub    $0xc,%esp
   11bb1:	ff 75 f0             	push   -0x10(%ebp)
   11bb4:	e8 4c f7 ff ff       	call   11305 <task_start>
   11bb9:	83 c4 10             	add    $0x10,%esp
    //反回子进程id
    return child_task->pid;
   11bbc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11bbf:	8b 40 08             	mov    0x8(%eax),%eax
   11bc2:	eb 2e                	jmp    11bf2 <sys_fork+0x179>
        goto fork_failed;
   11bc4:	90                   	nop
   11bc5:	eb 04                	jmp    11bcb <sys_fork+0x152>
        goto fork_failed;
   11bc7:	90                   	nop
   11bc8:	eb 01                	jmp    11bcb <sys_fork+0x152>
        goto fork_failed;
   11bca:	90                   	nop

//fork失败，清理资源
fork_failed:
    if (child_task) {   //初始化失败，释放对应资源
   11bcb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11bcf:	74 1c                	je     11bed <sys_fork+0x174>
        task_uninit(child_task);
   11bd1:	83 ec 0c             	sub    $0xc,%esp
   11bd4:	ff 75 f0             	push   -0x10(%ebp)
   11bd7:	e8 4a f8 ff ff       	call   11426 <task_uninit>
   11bdc:	83 c4 10             	add    $0x10,%esp
        free_task(child_task);
   11bdf:	83 ec 0c             	sub    $0xc,%esp
   11be2:	ff 75 f0             	push   -0x10(%ebp)
   11be5:	e8 ef fd ff ff       	call   119d9 <free_task>
   11bea:	83 c4 10             	add    $0x10,%esp
    }

    return -1;
   11bed:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11bf2:	c9                   	leave  
   11bf3:	c3                   	ret    

00011bf4 <sys_yield>:
/**
 * @brief  使当前正在运行的任务主动让出cpu
 * 
 * @return int 
 */
int sys_yield(void) {
   11bf4:	55                   	push   %ebp
   11bf5:	89 e5                	mov    %esp,%ebp
   11bf7:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   11bfa:	e8 0a 12 00 00       	call   12e09 <idt_enter_protection>
   11bff:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    //1.判断当前就绪队列中是否有多个任务
    if (list_get_size(&task_manager.ready_list) > 1) {
   11c02:	83 ec 0c             	sub    $0xc,%esp
   11c05:	68 04 00 02 00       	push   $0x20004
   11c0a:	e8 85 f4 ff ff       	call   11094 <list_get_size>
   11c0f:	83 c4 10             	add    $0x10,%esp
   11c12:	83 f8 01             	cmp    $0x1,%eax
   11c15:	7e 29                	jle    11c40 <sys_yield+0x4c>
        //2.获取当前任务  
        task_t *curr_task = task_current();
   11c17:	e8 31 fb ff ff       	call   1174d <task_current>
   11c1c:	89 45 f0             	mov    %eax,-0x10(%ebp)
        
        //3.将当前任务从就绪队列中取下
        task_set_unready(curr_task);
   11c1f:	83 ec 0c             	sub    $0xc,%esp
   11c22:	ff 75 f0             	push   -0x10(%ebp)
   11c25:	e8 aa fa ff ff       	call   116d4 <task_set_unready>
   11c2a:	83 c4 10             	add    $0x10,%esp

        //4.将当前任务重新加入到就绪队列的队尾
        task_set_ready(curr_task);
   11c2d:	83 ec 0c             	sub    $0xc,%esp
   11c30:	ff 75 f0             	push   -0x10(%ebp)
   11c33:	e8 51 fa ff ff       	call   11689 <task_set_ready>
   11c38:	83 c4 10             	add    $0x10,%esp

        //5.任务管理器运行下一个任务，从而释放cpu使用权
        task_switch();
   11c3b:	e8 17 fb ff ff       	call   11757 <task_switch>
    }
    
    idt_leave_protection(state);//TODO:解锁
   11c40:	83 ec 0c             	sub    $0xc,%esp
   11c43:	ff 75 f4             	push   -0xc(%ebp)
   11c46:	e8 d6 11 00 00       	call   12e21 <idt_leave_protection>
   11c4b:	83 c4 10             	add    $0x10,%esp
    return 0;
   11c4e:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11c53:	c9                   	leave  
   11c54:	c3                   	ret    

00011c55 <load_phdr>:
 * @param file elf文件描述符
 * @param elf_phdr  程序段表项
 * @param page_dir 需要加载到的目标空间的页目录表地址
 * @return int 
 */
static int load_phdr(int file, Elf32_Phdr *elf_phdr, uint32_t page_dir) {
   11c55:	55                   	push   %ebp
   11c56:	89 e5                	mov    %esp,%ebp
   11c58:	83 ec 28             	sub    $0x28,%esp
    //获取该段的权限
    uint32_t privilege = PTE_P | PTE_U;
   11c5b:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
    if (elf_phdr->p_flags & PT_W) { //该段具有写权限
   11c62:	8b 45 0c             	mov    0xc(%ebp),%eax
   11c65:	8b 40 18             	mov    0x18(%eax),%eax
   11c68:	83 e0 02             	and    $0x2,%eax
   11c6b:	85 c0                	test   %eax,%eax
   11c6d:	74 04                	je     11c73 <load_phdr+0x1e>
        privilege |= PTE_W;
   11c6f:	83 4d f4 02          	orl    $0x2,-0xc(%ebp)
    }

    //为该段分配页空间并创建映射关系
    int err = memory_alloc_for_page_dir(page_dir, elf_phdr->p_vaddr, elf_phdr->p_memsz, privilege);
   11c73:	8b 45 0c             	mov    0xc(%ebp),%eax
   11c76:	8b 50 14             	mov    0x14(%eax),%edx
   11c79:	8b 45 0c             	mov    0xc(%ebp),%eax
   11c7c:	8b 40 08             	mov    0x8(%eax),%eax
   11c7f:	ff 75 f4             	push   -0xc(%ebp)
   11c82:	52                   	push   %edx
   11c83:	50                   	push   %eax
   11c84:	ff 75 10             	push   0x10(%ebp)
   11c87:	e8 a9 f0 ff ff       	call   10d35 <memory_alloc_for_page_dir>
   11c8c:	83 c4 10             	add    $0x10,%esp
   11c8f:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (err < 0) {
   11c92:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11c96:	79 1a                	jns    11cb2 <load_phdr+0x5d>
        log_printf("no memory");
   11c98:	83 ec 0c             	sub    $0xc,%esp
   11c9b:	68 1a 4b 01 00       	push   $0x14b1a
   11ca0:	e8 06 2b 00 00       	call   147ab <log_printf>
   11ca5:	83 c4 10             	add    $0x10,%esp
        return -1;
   11ca8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11cad:	e9 b5 00 00 00       	jmp    11d67 <load_phdr+0x112>
    }

    //使文件的读取位置偏移到该程序段的起始位置
    if (sys_lseek(file, elf_phdr->p_offset, 0) < 0) {
   11cb2:	8b 45 0c             	mov    0xc(%ebp),%eax
   11cb5:	8b 40 04             	mov    0x4(%eax),%eax
   11cb8:	83 ec 04             	sub    $0x4,%esp
   11cbb:	6a 00                	push   $0x0
   11cbd:	50                   	push   %eax
   11cbe:	ff 75 08             	push   0x8(%ebp)
   11cc1:	e8 f0 14 00 00       	call   131b6 <sys_lseek>
   11cc6:	83 c4 10             	add    $0x10,%esp
   11cc9:	85 c0                	test   %eax,%eax
   11ccb:	79 1a                	jns    11ce7 <load_phdr+0x92>
        log_printf("lseek file failed");
   11ccd:	83 ec 0c             	sub    $0xc,%esp
   11cd0:	68 24 4b 01 00       	push   $0x14b24
   11cd5:	e8 d1 2a 00 00       	call   147ab <log_printf>
   11cda:	83 c4 10             	add    $0x10,%esp
        return -1;
   11cdd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11ce2:	e9 80 00 00 00       	jmp    11d67 <load_phdr+0x112>
    }

    //获取该程序段的起始虚拟地址和段在文件中的大小
    uint32_t vaddr = elf_phdr->p_vaddr;
   11ce7:	8b 45 0c             	mov    0xc(%ebp),%eax
   11cea:	8b 40 08             	mov    0x8(%eax),%eax
   11ced:	89 45 f0             	mov    %eax,-0x10(%ebp)
    uint32_t size = elf_phdr->p_filesz;
   11cf0:	8b 45 0c             	mov    0xc(%ebp),%eax
   11cf3:	8b 40 10             	mov    0x10(%eax),%eax
   11cf6:	89 45 ec             	mov    %eax,-0x14(%ebp)

    while (size > 0) {  //按页读取并拷贝
   11cf9:	eb 61                	jmp    11d5c <load_phdr+0x107>
        //获取需要拷贝的空间大小
        int curr_size = (size > MEM_PAGE_SIZE) ? MEM_PAGE_SIZE : size;
   11cfb:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11cfe:	ba 00 10 00 00       	mov    $0x1000,%edx
   11d03:	39 d0                	cmp    %edx,%eax
   11d05:	0f 47 c2             	cmova  %edx,%eax
   11d08:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        //获取vaddr在page_dir中关联的物理页的物理地址
        uint32_t paddr = memory_get_paddr(page_dir, vaddr);
   11d0b:	83 ec 08             	sub    $0x8,%esp
   11d0e:	ff 75 f0             	push   -0x10(%ebp)
   11d11:	ff 75 10             	push   0x10(%ebp)
   11d14:	e8 bf f1 ff ff       	call   10ed8 <memory_get_paddr>
   11d19:	83 c4 10             	add    $0x10,%esp
   11d1c:	89 45 e0             	mov    %eax,-0x20(%ebp)

        //拷贝curr_size大小的内容到paddr对应的页中
        if (sys_read(file, (char*)paddr, curr_size) < curr_size) {
   11d1f:	8b 45 e0             	mov    -0x20(%ebp),%eax
   11d22:	83 ec 04             	sub    $0x4,%esp
   11d25:	ff 75 e4             	push   -0x1c(%ebp)
   11d28:	50                   	push   %eax
   11d29:	ff 75 08             	push   0x8(%ebp)
   11d2c:	e8 40 14 00 00       	call   13171 <sys_read>
   11d31:	83 c4 10             	add    $0x10,%esp
   11d34:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
   11d37:	7e 17                	jle    11d50 <load_phdr+0xfb>
            log_printf("read file failed");
   11d39:	83 ec 0c             	sub    $0xc,%esp
   11d3c:	68 36 4b 01 00       	push   $0x14b36
   11d41:	e8 65 2a 00 00       	call   147ab <log_printf>
   11d46:	83 c4 10             	add    $0x10,%esp
            return -1;
   11d49:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11d4e:	eb 17                	jmp    11d67 <load_phdr+0x112>
        }

        size -= curr_size;
   11d50:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11d53:	29 45 ec             	sub    %eax,-0x14(%ebp)
        vaddr += curr_size;
   11d56:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11d59:	01 45 f0             	add    %eax,-0x10(%ebp)
    while (size > 0) {  //按页读取并拷贝
   11d5c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11d60:	75 99                	jne    11cfb <load_phdr+0xa6>
    }

    return 0;
   11d62:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11d67:	c9                   	leave  
   11d68:	c3                   	ret    

00011d69 <load_elf_file>:
 * @param task 
 * @param name 
 * @param page_dir 
 * @return uint32_t 
 */
static uint32_t load_elf_file(task_t *task, const char * name, uint32_t page_dir) {
   11d69:	55                   	push   %ebp
   11d6a:	89 e5                	mov    %esp,%ebp
   11d6c:	83 ec 78             	sub    $0x78,%esp
    //1.定义elf文件头对象,和程序段表项对象
    Elf32_Ehdr elf_hdr;
    Elf32_Phdr elf_phdr;

    //2.打开文件
    int file = sys_open(name, 0);
   11d6f:	83 ec 08             	sub    $0x8,%esp
   11d72:	6a 00                	push   $0x0
   11d74:	ff 75 0c             	push   0xc(%ebp)
   11d77:	e8 bc 13 00 00       	call   13138 <sys_open>
   11d7c:	83 c4 10             	add    $0x10,%esp
   11d7f:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (file < 0) {
   11d82:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11d86:	79 18                	jns    11da0 <load_elf_file+0x37>
        log_printf("open failed %s", name);
   11d88:	83 ec 08             	sub    $0x8,%esp
   11d8b:	ff 75 0c             	push   0xc(%ebp)
   11d8e:	68 47 4b 01 00       	push   $0x14b47
   11d93:	e8 13 2a 00 00       	call   147ab <log_printf>
   11d98:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11d9b:	e9 a2 01 00 00       	jmp    11f42 <load_elf_file+0x1d9>
    }

    //3.读取elf文件的elf头部分
    int cnt = sys_read(file, (char*)&elf_hdr, sizeof(Elf32_Ehdr));
   11da0:	83 ec 04             	sub    $0x4,%esp
   11da3:	6a 34                	push   $0x34
   11da5:	8d 45 b0             	lea    -0x50(%ebp),%eax
   11da8:	50                   	push   %eax
   11da9:	ff 75 ec             	push   -0x14(%ebp)
   11dac:	e8 c0 13 00 00       	call   13171 <sys_read>
   11db1:	83 c4 10             	add    $0x10,%esp
   11db4:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (cnt < sizeof(Elf32_Ehdr)) {
   11db7:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11dba:	83 f8 33             	cmp    $0x33,%eax
   11dbd:	77 18                	ja     11dd7 <load_elf_file+0x6e>
        log_printf("elf hdr too small. size=%d", cnt);
   11dbf:	83 ec 08             	sub    $0x8,%esp
   11dc2:	ff 75 e8             	push   -0x18(%ebp)
   11dc5:	68 56 4b 01 00       	push   $0x14b56
   11dca:	e8 dc 29 00 00       	call   147ab <log_printf>
   11dcf:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11dd2:	e9 6b 01 00 00       	jmp    11f42 <load_elf_file+0x1d9>
    }

    //4.判断是否为ELF文件
    if (elf_hdr.e_ident[0] != 0x7F || elf_hdr.e_ident[1] != 'E' 
   11dd7:	0f b6 45 b0          	movzbl -0x50(%ebp),%eax
   11ddb:	3c 7f                	cmp    $0x7f,%al
   11ddd:	75 18                	jne    11df7 <load_elf_file+0x8e>
   11ddf:	0f b6 45 b1          	movzbl -0x4f(%ebp),%eax
   11de3:	3c 45                	cmp    $0x45,%al
   11de5:	75 10                	jne    11df7 <load_elf_file+0x8e>
        || elf_hdr.e_ident[2] != 'L' || elf_hdr.e_ident[3] != 'F') {
   11de7:	0f b6 45 b2          	movzbl -0x4e(%ebp),%eax
   11deb:	3c 4c                	cmp    $0x4c,%al
   11ded:	75 08                	jne    11df7 <load_elf_file+0x8e>
   11def:	0f b6 45 b3          	movzbl -0x4d(%ebp),%eax
   11df3:	3c 46                	cmp    $0x46,%al
   11df5:	74 15                	je     11e0c <load_elf_file+0xa3>
            log_printf("check elf ident failed.");
   11df7:	83 ec 0c             	sub    $0xc,%esp
   11dfa:	68 71 4b 01 00       	push   $0x14b71
   11dff:	e8 a7 29 00 00       	call   147ab <log_printf>
   11e04:	83 c4 10             	add    $0x10,%esp
            goto load_failed;
   11e07:	e9 36 01 00 00       	jmp    11f42 <load_elf_file+0x1d9>
    }

    
    //5.必须是可执行文件和针对386处理器的类型，且有入口
    if ((elf_hdr.e_type != ET_EXEC) || (elf_hdr.e_machine != EM_386) || (elf_hdr.e_entry == 0)) {
   11e0c:	0f b7 45 c0          	movzwl -0x40(%ebp),%eax
   11e10:	66 83 f8 02          	cmp    $0x2,%ax
   11e14:	75 11                	jne    11e27 <load_elf_file+0xbe>
   11e16:	0f b7 45 c2          	movzwl -0x3e(%ebp),%eax
   11e1a:	66 83 f8 03          	cmp    $0x3,%ax
   11e1e:	75 07                	jne    11e27 <load_elf_file+0xbe>
   11e20:	8b 45 c8             	mov    -0x38(%ebp),%eax
   11e23:	85 c0                	test   %eax,%eax
   11e25:	75 15                	jne    11e3c <load_elf_file+0xd3>
        log_printf("check elf type or entry failed.");
   11e27:	83 ec 0c             	sub    $0xc,%esp
   11e2a:	68 8c 4b 01 00       	push   $0x14b8c
   11e2f:	e8 77 29 00 00       	call   147ab <log_printf>
   11e34:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11e37:	e9 06 01 00 00       	jmp    11f42 <load_elf_file+0x1d9>
    }

    //6.必须有程序头部
    if ((elf_hdr.e_phentsize == 0) || (elf_hdr.e_phoff == 0)) {
   11e3c:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
   11e40:	66 85 c0             	test   %ax,%ax
   11e43:	74 07                	je     11e4c <load_elf_file+0xe3>
   11e45:	8b 45 cc             	mov    -0x34(%ebp),%eax
   11e48:	85 c0                	test   %eax,%eax
   11e4a:	75 15                	jne    11e61 <load_elf_file+0xf8>
        log_printf("none programe header");
   11e4c:	83 ec 0c             	sub    $0xc,%esp
   11e4f:	68 ac 4b 01 00       	push   $0x14bac
   11e54:	e8 52 29 00 00       	call   147ab <log_printf>
   11e59:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11e5c:	e9 e1 00 00 00       	jmp    11f42 <load_elf_file+0x1d9>
    }

    //7.遍历elf文件的程序段，加载可加载段到内存中对应位置
    uint32_t e_phoff = elf_hdr.e_phoff; //获取程序段表的偏移地址
   11e61:	8b 45 cc             	mov    -0x34(%ebp),%eax
   11e64:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (int i = 0; i < elf_hdr.e_phnum; ++i, e_phoff += elf_hdr.e_phentsize) {
   11e67:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11e6e:	e9 ac 00 00 00       	jmp    11f1f <load_elf_file+0x1b6>
        if (sys_lseek(file, e_phoff, 0) < 0) {
   11e73:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11e76:	83 ec 04             	sub    $0x4,%esp
   11e79:	6a 00                	push   $0x0
   11e7b:	50                   	push   %eax
   11e7c:	ff 75 ec             	push   -0x14(%ebp)
   11e7f:	e8 32 13 00 00       	call   131b6 <sys_lseek>
   11e84:	83 c4 10             	add    $0x10,%esp
   11e87:	85 c0                	test   %eax,%eax
   11e89:	79 15                	jns    11ea0 <load_elf_file+0x137>
            log_printf("read file failed");
   11e8b:	83 ec 0c             	sub    $0xc,%esp
   11e8e:	68 36 4b 01 00       	push   $0x14b36
   11e93:	e8 13 29 00 00       	call   147ab <log_printf>
   11e98:	83 c4 10             	add    $0x10,%esp
            goto load_failed;
   11e9b:	e9 a2 00 00 00       	jmp    11f42 <load_elf_file+0x1d9>
        }

        cnt = sys_read(file, (char*)&elf_phdr, sizeof(Elf32_Phdr));
   11ea0:	83 ec 04             	sub    $0x4,%esp
   11ea3:	6a 20                	push   $0x20
   11ea5:	8d 45 90             	lea    -0x70(%ebp),%eax
   11ea8:	50                   	push   %eax
   11ea9:	ff 75 ec             	push   -0x14(%ebp)
   11eac:	e8 c0 12 00 00       	call   13171 <sys_read>
   11eb1:	83 c4 10             	add    $0x10,%esp
   11eb4:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (cnt < sizeof(Elf32_Phdr)) {
   11eb7:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11eba:	83 f8 1f             	cmp    $0x1f,%eax
   11ebd:	77 12                	ja     11ed1 <load_elf_file+0x168>
            log_printf("read file failed");
   11ebf:	83 ec 0c             	sub    $0xc,%esp
   11ec2:	68 36 4b 01 00       	push   $0x14b36
   11ec7:	e8 df 28 00 00       	call   147ab <log_printf>
   11ecc:	83 c4 10             	add    $0x10,%esp
            goto load_failed;
   11ecf:	eb 71                	jmp    11f42 <load_elf_file+0x1d9>
        }

        //若程序段不是可加载的或虚拟地址 < 用户程序的起始地址，则不可用
        if (elf_phdr.p_type != 1 || elf_phdr.p_vaddr < MEM_TASK_BASE) {
   11ed1:	8b 45 90             	mov    -0x70(%ebp),%eax
   11ed4:	83 f8 01             	cmp    $0x1,%eax
   11ed7:	75 37                	jne    11f10 <load_elf_file+0x1a7>
   11ed9:	8b 45 98             	mov    -0x68(%ebp),%eax
   11edc:	85 c0                	test   %eax,%eax
   11ede:	79 30                	jns    11f10 <load_elf_file+0x1a7>
            continue;
        }

        //加载该程序段
        int err = load_phdr(file, &elf_phdr, page_dir);
   11ee0:	83 ec 04             	sub    $0x4,%esp
   11ee3:	ff 75 10             	push   0x10(%ebp)
   11ee6:	8d 45 90             	lea    -0x70(%ebp),%eax
   11ee9:	50                   	push   %eax
   11eea:	ff 75 ec             	push   -0x14(%ebp)
   11eed:	e8 63 fd ff ff       	call   11c55 <load_phdr>
   11ef2:	83 c4 10             	add    $0x10,%esp
   11ef5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0) {
   11ef8:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   11efc:	79 13                	jns    11f11 <load_elf_file+0x1a8>
            log_printf("load program failed");
   11efe:	83 ec 0c             	sub    $0xc,%esp
   11f01:	68 c1 4b 01 00       	push   $0x14bc1
   11f06:	e8 a0 28 00 00       	call   147ab <log_printf>
   11f0b:	83 c4 10             	add    $0x10,%esp
            goto load_failed;
   11f0e:	eb 32                	jmp    11f42 <load_elf_file+0x1d9>
            continue;
   11f10:	90                   	nop
    for (int i = 0; i < elf_hdr.e_phnum; ++i, e_phoff += elf_hdr.e_phentsize) {
   11f11:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   11f15:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
   11f19:	0f b7 c0             	movzwl %ax,%eax
   11f1c:	01 45 f4             	add    %eax,-0xc(%ebp)
   11f1f:	0f b7 45 dc          	movzwl -0x24(%ebp),%eax
   11f23:	0f b7 c0             	movzwl %ax,%eax
   11f26:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11f29:	0f 8c 44 ff ff ff    	jl     11e73 <load_elf_file+0x10a>
        }
    }

    //成功解析并加载完整个elf文件后关闭文件，并返回程序入口地址
    sys_close(file);
   11f2f:	83 ec 0c             	sub    $0xc,%esp
   11f32:	ff 75 ec             	push   -0x14(%ebp)
   11f35:	e8 a0 12 00 00       	call   131da <sys_close>
   11f3a:	83 c4 10             	add    $0x10,%esp
    return elf_hdr.e_entry;
   11f3d:	8b 45 c8             	mov    -0x38(%ebp),%eax
   11f40:	eb 19                	jmp    11f5b <load_elf_file+0x1f2>

//错误处理
load_failed:
    if (file >= 0) {    //文件已被打开，则关闭该文件
   11f42:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11f46:	78 0e                	js     11f56 <load_elf_file+0x1ed>
        sys_close(file);
   11f48:	83 ec 0c             	sub    $0xc,%esp
   11f4b:	ff 75 ec             	push   -0x14(%ebp)
   11f4e:	e8 87 12 00 00       	call   131da <sys_close>
   11f53:	83 c4 10             	add    $0x10,%esp
    }
    return 0;
   11f56:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11f5b:	c9                   	leave  
   11f5c:	c3                   	ret    

00011f5d <copy_args>:
 * @param stack_top 新任务的栈顶地址
 * @param argv 参数的字符串数组
 * @param argc 参数的个数
 * @return int 
 */
static int copy_args(uint32_t to_page_dir, char *stack_top, char * const *argv, int argc) {
   11f5d:	55                   	push   %ebp
   11f5e:	89 e5                	mov    %esp,%ebp
   11f60:	83 ec 38             	sub    $0x38,%esp
    task_args_t task_args;
    task_args.argc = argc;
   11f63:	8b 45 14             	mov    0x14(%ebp),%eax
   11f66:	89 45 d8             	mov    %eax,-0x28(%ebp)


    //1.获取char*数组在目标虚拟空间中的的虚拟地址
    //char*数组将被拷贝到task_args的上方,所以直接让argv指向栈顶偏移task_args的大小个字节的空间即可
    //即指向了该字符串数组第一个char*的地址
    task_args.argv = (char **)(stack_top + sizeof(task_args_t));
   11f69:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f6c:	83 c0 0c             	add    $0xc,%eax
   11f6f:	89 45 dc             	mov    %eax,-0x24(%ebp)

    //2.获取char*数组对应的虚拟空间关联的物理地址
    char **to_argv_paddr = (char**)memory_get_paddr(to_page_dir, (uint32_t)task_args.argv);  
   11f72:	8b 45 dc             	mov    -0x24(%ebp),%eax
   11f75:	83 ec 08             	sub    $0x8,%esp
   11f78:	50                   	push   %eax
   11f79:	ff 75 08             	push   0x8(%ebp)
   11f7c:	e8 57 ef ff ff       	call   10ed8 <memory_get_paddr>
   11f81:	83 c4 10             	add    $0x10,%esp
   11f84:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //3.获取参数的存储地址, 偏移量为 task_args 加上 argc个参数的字符串指针的大小，
    char *dest_arg = stack_top + sizeof(task_args_t) + sizeof(char*) * argc;
   11f87:	8b 45 14             	mov    0x14(%ebp),%eax
   11f8a:	83 c0 03             	add    $0x3,%eax
   11f8d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11f94:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f97:	01 d0                	add    %edx,%eax
   11f99:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //3.将参数拷贝到dest_arg处，并将每个参数的地址记录到task.argv指向的char*数组中
    for (int i = 0; i < argc; ++i) {
   11f9c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11fa3:	e9 82 00 00 00       	jmp    1202a <copy_args+0xcd>
        char *from = argv[i];
   11fa8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11fab:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11fb2:	8b 45 10             	mov    0x10(%ebp),%eax
   11fb5:	01 d0                	add    %edx,%eax
   11fb7:	8b 00                	mov    (%eax),%eax
   11fb9:	89 45 e8             	mov    %eax,-0x18(%ebp)
        int len = kernel_strlen(from) + 1;
   11fbc:	83 ec 0c             	sub    $0xc,%esp
   11fbf:	ff 75 e8             	push   -0x18(%ebp)
   11fc2:	e8 20 1f 00 00       	call   13ee7 <kernel_strlen>
   11fc7:	83 c4 10             	add    $0x10,%esp
   11fca:	83 c0 01             	add    $0x1,%eax
   11fcd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        int err = memory_copy_uvm_data((uint32_t)dest_arg, to_page_dir, (uint32_t)from, len);
   11fd0:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
   11fd3:	8b 55 e8             	mov    -0x18(%ebp),%edx
   11fd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11fd9:	51                   	push   %ecx
   11fda:	52                   	push   %edx
   11fdb:	ff 75 08             	push   0x8(%ebp)
   11fde:	50                   	push   %eax
   11fdf:	e8 47 ef ff ff       	call   10f2b <memory_copy_uvm_data>
   11fe4:	83 c4 10             	add    $0x10,%esp
   11fe7:	89 45 e0             	mov    %eax,-0x20(%ebp)
        ASSERT(err >= 0);
   11fea:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   11fee:	79 1c                	jns    1200c <copy_args+0xaf>
   11ff0:	68 d5 4b 01 00       	push   $0x14bd5
   11ff5:	68 9c 4c 01 00       	push   $0x14c9c
   11ffa:	68 47 03 00 00       	push   $0x347
   11fff:	68 b8 4a 01 00       	push   $0x14ab8
   12004:	e8 60 1a 00 00       	call   13a69 <pannic>
   12009:	83 c4 10             	add    $0x10,%esp
        to_argv_paddr[i] = dest_arg;
   1200c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1200f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   12016:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12019:	01 c2                	add    %eax,%edx
   1201b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1201e:	89 02                	mov    %eax,(%edx)
        dest_arg += len;
   12020:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12023:	01 45 f4             	add    %eax,-0xc(%ebp)
    for (int i = 0; i < argc; ++i) {
   12026:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   1202a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1202d:	3b 45 14             	cmp    0x14(%ebp),%eax
   12030:	0f 8c 72 ff ff ff    	jl     11fa8 <copy_args+0x4b>
    }


    //4.将task_args拷贝到用户虚拟空间中,紧邻栈顶上方，作为入口函数的参数
    memory_copy_uvm_data((uint32_t)stack_top, to_page_dir, (uint32_t)&task_args, sizeof(task_args_t)); 
   12036:	8d 55 d4             	lea    -0x2c(%ebp),%edx
   12039:	8b 45 0c             	mov    0xc(%ebp),%eax
   1203c:	6a 0c                	push   $0xc
   1203e:	52                   	push   %edx
   1203f:	ff 75 08             	push   0x8(%ebp)
   12042:	50                   	push   %eax
   12043:	e8 e3 ee ff ff       	call   10f2b <memory_copy_uvm_data>
   12048:	83 c4 10             	add    $0x10,%esp
}
   1204b:	90                   	nop
   1204c:	c9                   	leave  
   1204d:	c3                   	ret    

0001204e <sys_execve>:
 * @param name 程序名
 * @param argv 命令行参数数组
 * @param env 程序继承的环境变量数组
 * @return int 
 */
int sys_execve(char *name, char * const *argv, char * const *env ) {
   1204e:	55                   	push   %ebp
   1204f:	89 e5                	mov    %esp,%ebp
   12051:	83 ec 28             	sub    $0x28,%esp
        //1.获取当前任务进程
        task_t *task = task_current();
   12054:	e8 f4 f6 ff ff       	call   1174d <task_current>
   12059:	89 45 f4             	mov    %eax,-0xc(%ebp)

        //2.获取当前任务的页目录表
        uint32_t old_page_dir = task->tss.cr3;
   1205c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1205f:	8b 40 6c             	mov    0x6c(%eax),%eax
   12062:	89 45 f0             	mov    %eax,-0x10(%ebp)

        //3.创建一个新的页目录表
        uint32_t new_page_dir = memory_creat_uvm();
   12065:	e8 d9 e8 ff ff       	call   10943 <memory_creat_uvm>
   1206a:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (new_page_dir == 0)  //创建失败
   1206d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   12071:	0f 84 4a 01 00 00    	je     121c1 <sys_execve+0x173>
            goto exec_failed;

        //4.加载elf文件，替换当前任务
        uint32_t entry = load_elf_file(task, name, new_page_dir);
   12077:	83 ec 04             	sub    $0x4,%esp
   1207a:	ff 75 ec             	push   -0x14(%ebp)
   1207d:	ff 75 08             	push   0x8(%ebp)
   12080:	ff 75 f4             	push   -0xc(%ebp)
   12083:	e8 e1 fc ff ff       	call   11d69 <load_elf_file>
   12088:	83 c4 10             	add    $0x10,%esp
   1208b:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (entry == 0)
   1208e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   12092:	0f 84 2c 01 00 00    	je     121c4 <sys_execve+0x176>
            goto exec_failed;

        
        //5.为新进程分配用户栈空间
        uint32_t stack_top = MEM_TASK_STACK_TOP - MEM_TASK_ARG_SIZE;
   12098:	c7 45 e4 00 c0 ff df 	movl   $0xdfffc000,-0x1c(%ebp)
        int err = memory_alloc_for_page_dir(new_page_dir, 
   1209f:	6a 07                	push   $0x7
   120a1:	68 00 20 03 00       	push   $0x32000
   120a6:	68 00 e0 fc df       	push   $0xdffce000
   120ab:	ff 75 ec             	push   -0x14(%ebp)
   120ae:	e8 82 ec ff ff       	call   10d35 <memory_alloc_for_page_dir>
   120b3:	83 c4 10             	add    $0x10,%esp
   120b6:	89 45 e0             	mov    %eax,-0x20(%ebp)
            MEM_TASK_STACK_TOP - MEM_TASK_STACK_SIZE, 
            MEM_TASK_STACK_SIZE, 
            PTE_P | PTE_U | PTE_W);

        if (err < 0) 
   120b9:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   120bd:	0f 88 04 01 00 00    	js     121c7 <sys_execve+0x179>
            goto exec_failed;

        //6.将被执行任务的入口参数拷贝到栈上分对应内存空间
        int argc = strings_count(argv);
   120c3:	83 ec 0c             	sub    $0xc,%esp
   120c6:	ff 75 0c             	push   0xc(%ebp)
   120c9:	e8 f9 21 00 00       	call   142c7 <strings_count>
   120ce:	83 c4 10             	add    $0x10,%esp
   120d1:	89 45 dc             	mov    %eax,-0x24(%ebp)
        err = copy_args(new_page_dir, (char *)stack_top, argv, argc);
   120d4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   120d7:	ff 75 dc             	push   -0x24(%ebp)
   120da:	ff 75 0c             	push   0xc(%ebp)
   120dd:	50                   	push   %eax
   120de:	ff 75 ec             	push   -0x14(%ebp)
   120e1:	e8 77 fe ff ff       	call   11f5d <copy_args>
   120e6:	83 c4 10             	add    $0x10,%esp
   120e9:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (err < 0)
   120ec:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   120f0:	0f 88 d4 00 00 00    	js     121ca <sys_execve+0x17c>
            goto exec_failed;

        //7.记录并设置新页目录表，并销毁原页目录表的虚拟映射关系
        task->tss.cr3 = new_page_dir;
   120f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   120f9:	8b 55 ec             	mov    -0x14(%ebp),%edx
   120fc:	89 50 6c             	mov    %edx,0x6c(%eax)
        mmu_set_page_dir(new_page_dir);
   120ff:	83 ec 0c             	sub    $0xc,%esp
   12102:	ff 75 ec             	push   -0x14(%ebp)
   12105:	e8 3e f0 ff ff       	call   11148 <mmu_set_page_dir>
   1210a:	83 c4 10             	add    $0x10,%esp
        memory_destroy_uvm(old_page_dir);
   1210d:	83 ec 0c             	sub    $0xc,%esp
   12110:	ff 75 f0             	push   -0x10(%ebp)
   12113:	e8 3d ea ff ff       	call   10b55 <memory_destroy_uvm>
   12118:	83 c4 10             	add    $0x10,%esp

        //8.获取系统调用的栈帧,因为每次通过调用门进入内核栈中都只会一帧该结构体的数据，
        //所以用最高地址减去大小即可获得该帧的起始地址
        syscall_frame_t *frame = (syscall_frame_t*)(task_current()->tss.esp0 - sizeof(syscall_frame_t));
   1211b:	e8 2d f6 ff ff       	call   1174d <task_current>
   12120:	8b 40 54             	mov    0x54(%eax),%eax
   12123:	83 e8 58             	sub    $0x58,%eax
   12126:	89 45 d8             	mov    %eax,-0x28(%ebp)
        
        //9.更改进程用户栈的位置，并更改调用门返回后执行的指令地址为程序入口地址
        frame->esp = stack_top - 5 * 4;
   12129:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1212c:	8d 50 ec             	lea    -0x14(%eax),%edx
   1212f:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12132:	89 50 50             	mov    %edx,0x50(%eax)
        frame->eip = entry;
   12135:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12138:	8b 55 e8             	mov    -0x18(%ebp),%edx
   1213b:	89 50 34             	mov    %edx,0x34(%eax)

        //10.让进程更清爽的运行，清空通用寄存器的值
        frame->eax = frame->ebx = frame->ecx = frame->edx = 0;
   1213e:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12141:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
   12148:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1214b:	8b 50 28             	mov    0x28(%eax),%edx
   1214e:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12151:	89 50 2c             	mov    %edx,0x2c(%eax)
   12154:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12157:	8b 50 2c             	mov    0x2c(%eax),%edx
   1215a:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1215d:	89 50 24             	mov    %edx,0x24(%eax)
   12160:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12163:	8b 50 24             	mov    0x24(%eax),%edx
   12166:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12169:	89 50 30             	mov    %edx,0x30(%eax)
        frame->esi = frame->edi = frame->ebp = 0;
   1216c:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1216f:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
   12176:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12179:	8b 50 1c             	mov    0x1c(%eax),%edx
   1217c:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1217f:	89 50 14             	mov    %edx,0x14(%eax)
   12182:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12185:	8b 50 14             	mov    0x14(%eax),%edx
   12188:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1218b:	89 50 18             	mov    %edx,0x18(%eax)
        frame->eflags = EFLAGS_IF | EFLAGS_DEFAULT_1;
   1218e:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12191:	c7 00 02 02 00 00    	movl   $0x202,(%eax)

        //11.修改当前任务名为被执行任务名
        kernel_strncpy(task->name, get_file_name(name), TASK_NAME_SIZE);
   12197:	83 ec 0c             	sub    $0xc,%esp
   1219a:	ff 75 08             	push   0x8(%ebp)
   1219d:	e8 52 21 00 00       	call   142f4 <get_file_name>
   121a2:	83 c4 10             	add    $0x10,%esp
   121a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
   121a8:	83 c2 18             	add    $0x18,%edx
   121ab:	83 ec 04             	sub    $0x4,%esp
   121ae:	6a 20                	push   $0x20
   121b0:	50                   	push   %eax
   121b1:	52                   	push   %edx
   121b2:	e8 75 1c 00 00       	call   13e2c <kernel_strncpy>
   121b7:	83 c4 10             	add    $0x10,%esp

    return 0;
   121ba:	b8 00 00 00 00       	mov    $0x0,%eax
   121bf:	eb 3a                	jmp    121fb <sys_execve+0x1ad>
            goto exec_failed;
   121c1:	90                   	nop
   121c2:	eb 07                	jmp    121cb <sys_execve+0x17d>
            goto exec_failed;
   121c4:	90                   	nop
   121c5:	eb 04                	jmp    121cb <sys_execve+0x17d>
            goto exec_failed;
   121c7:	90                   	nop
   121c8:	eb 01                	jmp    121cb <sys_execve+0x17d>
            goto exec_failed;
   121ca:	90                   	nop

exec_failed:
    // 执行失败，释放资源并恢复到原进程状态
    if (new_page_dir) {
   121cb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   121cf:	74 25                	je     121f6 <sys_execve+0x1a8>
        task->tss.cr3 = old_page_dir;
   121d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   121d4:	8b 55 f0             	mov    -0x10(%ebp),%edx
   121d7:	89 50 6c             	mov    %edx,0x6c(%eax)
        mmu_set_page_dir(old_page_dir);
   121da:	83 ec 0c             	sub    $0xc,%esp
   121dd:	ff 75 f0             	push   -0x10(%ebp)
   121e0:	e8 63 ef ff ff       	call   11148 <mmu_set_page_dir>
   121e5:	83 c4 10             	add    $0x10,%esp
        memory_destroy_uvm(new_page_dir);
   121e8:	83 ec 0c             	sub    $0xc,%esp
   121eb:	ff 75 ec             	push   -0x14(%ebp)
   121ee:	e8 62 e9 ff ff       	call   10b55 <memory_destroy_uvm>
   121f3:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   121f6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   121fb:	c9                   	leave  
   121fc:	c3                   	ret    

000121fd <gate_desc_set>:
 * @param selector 门描述符对应的处理程序所在的段的选择子
 * @param offset 门描述符对应的处理程序相对于所在段的偏移量
 * @param attr 门描述符的属性
 */
void gate_desc_set(gate_desc_t *desc, const uint16_t selector, const uint32_t offset,
                          const uint16_t attr) {
   121fd:	55                   	push   %ebp
   121fe:	89 e5                	mov    %esp,%ebp
   12200:	83 ec 08             	sub    $0x8,%esp
   12203:	8b 55 0c             	mov    0xc(%ebp),%edx
   12206:	8b 45 14             	mov    0x14(%ebp),%eax
   12209:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   1220d:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
  // 1.初始化偏移量
  desc->offset15_0 = offset & 0xffff;
   12211:	8b 45 10             	mov    0x10(%ebp),%eax
   12214:	89 c2                	mov    %eax,%edx
   12216:	8b 45 08             	mov    0x8(%ebp),%eax
   12219:	66 89 10             	mov    %dx,(%eax)
  desc->offset31_16 = (offset >> 16) & 0xffff;
   1221c:	8b 45 10             	mov    0x10(%ebp),%eax
   1221f:	c1 e8 10             	shr    $0x10,%eax
   12222:	89 c2                	mov    %eax,%edx
   12224:	8b 45 08             	mov    0x8(%ebp),%eax
   12227:	66 89 50 06          	mov    %dx,0x6(%eax)

  // 2.初始化选择子
  desc->selector = selector;
   1222b:	8b 45 08             	mov    0x8(%ebp),%eax
   1222e:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12232:	66 89 50 02          	mov    %dx,0x2(%eax)

  // 3.初始化属性位
  desc->attr = attr;
   12236:	8b 45 08             	mov    0x8(%ebp),%eax
   12239:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   1223d:	66 89 50 04          	mov    %dx,0x4(%eax)
   12241:	90                   	nop
   12242:	c9                   	leave  
   12243:	c3                   	ret    

00012244 <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   12244:	55                   	push   %ebp
   12245:	89 e5                	mov    %esp,%ebp
   12247:	83 ec 10             	sub    $0x10,%esp
  gdt.start31_16 = (start >> 16) & 0xffff;  // 初始化GDT地址的高16位
   1224a:	8b 45 08             	mov    0x8(%ebp),%eax
   1224d:	c1 e8 10             	shr    $0x10,%eax
   12250:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  gdt.start15_0 = start & 0xffff;           // 初始化GDT地址的低16位
   12254:	8b 45 08             	mov    0x8(%ebp),%eax
   12257:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   1225b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1225e:	83 e8 01             	sub    $0x1,%eax
  gdt.limit =
   12261:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   12265:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   12269:	90                   	nop
   1226a:	c9                   	leave  
   1226b:	c3                   	ret    

0001226c <segment_desc_set>:
 *                 即2的13次方个段，也就是8192
 * @param base 该段在内存中的真实段基址
 * @param limit 该段的段界限，是一个偏移量，表示段中最大的偏移界限
 * @param attr 该段的属性位
 */
void segment_desc_set(uint16_t selector,  uint32_t base, uint32_t limit, uint16_t attr) {
   1226c:	55                   	push   %ebp
   1226d:	89 e5                	mov    %esp,%ebp
   1226f:	83 ec 18             	sub    $0x18,%esp
   12272:	8b 55 08             	mov    0x8(%ebp),%edx
   12275:	8b 45 14             	mov    0x14(%ebp),%eax
   12278:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
   1227c:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    //1. 获取该段描述符在内存中的起始地址，selector >> 3 取出3~15位才是其在全局描述符中的下标
    segment_desc_t *desc = gdt_table + (selector >> 3);
   12280:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   12284:	66 c1 e8 03          	shr    $0x3,%ax
   12288:	0f b7 c0             	movzwl %ax,%eax
   1228b:	c1 e0 03             	shl    $0x3,%eax
   1228e:	05 e0 61 02 00       	add    $0x261e0,%eax
   12293:	89 45 fc             	mov    %eax,-0x4(%ebp)

    //2. 设置段基地址
    desc->base15_0 = (uint16_t)base;
   12296:	8b 45 0c             	mov    0xc(%ebp),%eax
   12299:	89 c2                	mov    %eax,%edx
   1229b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1229e:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (uint8_t)(base >> 16);
   122a2:	8b 45 0c             	mov    0xc(%ebp),%eax
   122a5:	c1 e8 10             	shr    $0x10,%eax
   122a8:	89 c2                	mov    %eax,%edx
   122aa:	8b 45 fc             	mov    -0x4(%ebp),%eax
   122ad:	88 50 04             	mov    %dl,0x4(%eax)
    desc->base31_24 = (uint8_t)(base >> 24);
   122b0:	8b 45 0c             	mov    0xc(%ebp),%eax
   122b3:	c1 e8 18             	shr    $0x18,%eax
   122b6:	89 c2                	mov    %eax,%edx
   122b8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   122bb:	88 50 07             	mov    %dl,0x7(%eax)

    //3. 设置段界限
    if (limit > 0xfffff) { //limit大于了20位能表示的最大值
   122be:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   122c5:	76 1d                	jbe    122e4 <segment_desc_set+0x78>
        //将limit的粒度设置为 4kb，即将属性位G置1
        desc->attr |= 0x8000;
   122c7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   122ca:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   122ce:	66 0d 00 80          	or     $0x8000,%ax
   122d2:	89 c2                	mov    %eax,%edx
   122d4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   122d7:	66 89 50 05          	mov    %dx,0x5(%eax)

        //将limit改成以 4kb 为单位
        limit /= (4 * 1024);
   122db:	8b 45 10             	mov    0x10(%ebp),%eax
   122de:	c1 e8 0c             	shr    $0xc,%eax
   122e1:	89 45 10             	mov    %eax,0x10(%ebp)

    }
    desc->limit15_0 = (uint16_t)limit;
   122e4:	8b 45 10             	mov    0x10(%ebp),%eax
   122e7:	89 c2                	mov    %eax,%edx
   122e9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   122ec:	66 89 10             	mov    %dx,(%eax)
    desc->attr |= ((uint16_t)(limit >> 8) & 0x0f00); //将limit高4位赋值到attr的8~11位(段界限的高4位)
   122ef:	8b 45 fc             	mov    -0x4(%ebp),%eax
   122f2:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   122f6:	89 c2                	mov    %eax,%edx
   122f8:	8b 45 10             	mov    0x10(%ebp),%eax
   122fb:	c1 e8 08             	shr    $0x8,%eax
   122fe:	66 25 00 0f          	and    $0xf00,%ax
   12302:	09 d0                	or     %edx,%eax
   12304:	89 c2                	mov    %eax,%edx
   12306:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12309:	66 89 50 05          	mov    %dx,0x5(%eax)

    //4.设置属性位
    desc->attr |= attr & 0xf0ff;
   1230d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12310:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   12314:	89 c2                	mov    %eax,%edx
   12316:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   1231a:	80 e4 f0             	and    $0xf0,%ah
   1231d:	09 d0                	or     %edx,%eax
   1231f:	89 c2                	mov    %eax,%edx
   12321:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12324:	66 89 50 05          	mov    %dx,0x5(%eax)


}
   12328:	90                   	nop
   12329:	c9                   	leave  
   1232a:	c3                   	ret    

0001232b <gdt_init>:

/**
 * @brief  初始化GDT
 * 
 */
void gdt_init(void) {
   1232b:	55                   	push   %ebp
   1232c:	89 e5                	mov    %esp,%ebp
   1232e:	83 ec 18             	sub    $0x18,%esp
    //TODO:暂时将所有段都初始化为0
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   12331:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12338:	eb 1c                	jmp    12356 <gdt_init+0x2b>
        segment_desc_set(i << 3, 0, 0, 0);
   1233a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1233d:	c1 e0 03             	shl    $0x3,%eax
   12340:	0f b7 c0             	movzwl %ax,%eax
   12343:	6a 00                	push   $0x0
   12345:	6a 00                	push   $0x0
   12347:	6a 00                	push   $0x0
   12349:	50                   	push   %eax
   1234a:	e8 1d ff ff ff       	call   1226c <segment_desc_set>
   1234f:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   12352:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12356:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   1235d:	7e db                	jle    1233a <gdt_init+0xf>
        is_alloc[i] == 0;
    }

    //使用平坦模型，即段基址为0, 段界限直接用最大值，界限粒度为4kb，即段大小为4GB
    //1.设置内核的数据段,并将其标记
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff,
   1235f:	68 92 40 00 00       	push   $0x4092
   12364:	6a ff                	push   $0xffffffff
   12366:	6a 00                	push   $0x0
   12368:	6a 10                	push   $0x10
   1236a:	e8 fd fe ff ff       	call   1226c <segment_desc_set>
   1236f:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL | 
                    SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_DS >> 3] = 1;
   12372:	c6 05 e2 61 03 00 01 	movb   $0x1,0x361e2

    //2.设置内核的代码段，并将其标记
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff,
   12379:	68 9a 40 00 00       	push   $0x409a
   1237e:	6a ff                	push   $0xffffffff
   12380:	6a 00                	push   $0x0
   12382:	6a 08                	push   $0x8
   12384:	e8 e3 fe ff ff       	call   1226c <segment_desc_set>
   12389:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL |
                    SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_CS >> 3] = 1;
   1238c:	c6 05 e1 61 03 00 01 	movb   $0x1,0x361e1

    //3.初始化调用门描述符，调用门的 DPL >= CPL && DPL >= RPL, 若目标代码段的特权级更高则发生特权级转换
    gate_desc_set((gate_desc_t*)(gdt_table + (SYSCALL_SELECTOR >> 3)), 
   12393:	ba ad 02 01 00       	mov    $0x102ad,%edx
   12398:	b8 f8 61 02 00       	mov    $0x261f8,%eax
   1239d:	68 05 ec 00 00       	push   $0xec05
   123a2:	52                   	push   %edx
   123a3:	6a 08                	push   $0x8
   123a5:	50                   	push   %eax
   123a6:	e8 52 fe ff ff       	call   121fd <gate_desc_set>
   123ab:	83 c4 10             	add    $0x10,%esp
        KERNEL_SELECTOR_CS, (uint32_t)exception_handler_syscall, 
        GATE_ATTR_P | GATE_ATTR_DPL_3 | GATE_TYPE_SYSCALL | SYSCALL_PARAM_COUNT);
    
    is_alloc[SYSCALL_SELECTOR >> 3] = 1;
   123ae:	c6 05 e3 61 03 00 01 	movb   $0x1,0x361e3


    //4.加载新的GDT表
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   123b5:	b8 e0 61 02 00       	mov    $0x261e0,%eax
   123ba:	83 ec 08             	sub    $0x8,%esp
   123bd:	68 00 00 01 00       	push   $0x10000
   123c2:	50                   	push   %eax
   123c3:	e8 7c fe ff ff       	call   12244 <lgdt>
   123c8:	83 c4 10             	add    $0x10,%esp

    //4.初始化互斥锁
    mutex_init(&mutex);
   123cb:	83 ec 0c             	sub    $0xc,%esp
   123ce:	68 e0 81 03 00       	push   $0x381e0
   123d3:	e8 7c 0f 00 00       	call   13354 <mutex_init>
   123d8:	83 c4 10             	add    $0x10,%esp
}
   123db:	90                   	nop
   123dc:	c9                   	leave  
   123dd:	c3                   	ret    

000123de <gdt_alloc_desc>:
/**
 * @brief  寻找gdt中未赋值的段描述符空间
 * 
 * @return int 返回的找到的描述符的选择子
 */
int gdt_alloc_desc() {
   123de:	55                   	push   %ebp
   123df:	89 e5                	mov    %esp,%ebp
   123e1:	83 ec 18             	sub    $0x18,%esp

    mutex_lock(&mutex);//TODO:加锁
   123e4:	83 ec 0c             	sub    $0xc,%esp
   123e7:	68 e0 81 03 00       	push   $0x381e0
   123ec:	e8 b0 0f 00 00       	call   133a1 <mutex_lock>
   123f1:	83 c4 10             	add    $0x10,%esp

    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   123f4:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   123fb:	eb 36                	jmp    12433 <gdt_alloc_desc+0x55>
        if (is_alloc[i] == 0)  {
   123fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12400:	05 e0 61 03 00       	add    $0x361e0,%eax
   12405:	0f b6 00             	movzbl (%eax),%eax
   12408:	84 c0                	test   %al,%al
   1240a:	75 23                	jne    1242f <gdt_alloc_desc+0x51>
            is_alloc[i] = 1;
   1240c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1240f:	05 e0 61 03 00       	add    $0x361e0,%eax
   12414:	c6 00 01             	movb   $0x1,(%eax)

            mutex_unlock(&mutex);//TODO:解锁
   12417:	83 ec 0c             	sub    $0xc,%esp
   1241a:	68 e0 81 03 00       	push   $0x381e0
   1241f:	e8 0e 10 00 00       	call   13432 <mutex_unlock>
   12424:	83 c4 10             	add    $0x10,%esp
            return (i << 3);
   12427:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1242a:	c1 e0 03             	shl    $0x3,%eax
   1242d:	eb 22                	jmp    12451 <gdt_alloc_desc+0x73>
    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   1242f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12433:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   1243a:	7e c1                	jle    123fd <gdt_alloc_desc+0x1f>
        }
    }

    mutex_unlock(&mutex);//TODO:解锁
   1243c:	83 ec 0c             	sub    $0xc,%esp
   1243f:	68 e0 81 03 00       	push   $0x381e0
   12444:	e8 e9 0f 00 00       	call   13432 <mutex_unlock>
   12449:	83 c4 10             	add    $0x10,%esp
    return -1;
   1244c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   12451:	c9                   	leave  
   12452:	c3                   	ret    

00012453 <gdt_free>:
/**
 * @brief 释放gdt表项
 * 
 * @param selector 需要释放的表项对应的选择子
 */
void gdt_free(uint16_t selector) {
   12453:	55                   	push   %ebp
   12454:	89 e5                	mov    %esp,%ebp
   12456:	83 ec 14             	sub    $0x14,%esp
   12459:	8b 45 08             	mov    0x8(%ebp),%eax
   1245c:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    uint16_t index = selector >> 3;
   12460:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   12464:	66 c1 e8 03          	shr    $0x3,%ax
   12468:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    is_alloc[index] = 0;
   1246c:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
   12470:	c6 80 e0 61 03 00 00 	movb   $0x0,0x361e0(%eax)
}
   12477:	90                   	nop
   12478:	c9                   	leave  
   12479:	c3                   	ret    

0001247a <cli>:
static inline void cli(void) { __asm__ __volatile__("cli"); }
   1247a:	55                   	push   %ebp
   1247b:	89 e5                	mov    %esp,%ebp
   1247d:	fa                   	cli    
   1247e:	90                   	nop
   1247f:	5d                   	pop    %ebp
   12480:	c3                   	ret    

00012481 <sti>:
static inline void sti(void) { __asm__ __volatile__("sti"); }
   12481:	55                   	push   %ebp
   12482:	89 e5                	mov    %esp,%ebp
   12484:	fb                   	sti    
   12485:	90                   	nop
   12486:	5d                   	pop    %ebp
   12487:	c3                   	ret    

00012488 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   12488:	55                   	push   %ebp
   12489:	89 e5                	mov    %esp,%ebp
   1248b:	f4                   	hlt    
   1248c:	90                   	nop
   1248d:	5d                   	pop    %ebp
   1248e:	c3                   	ret    

0001248f <inb>:
static inline uint8_t inb(uint16_t port) {
   1248f:	55                   	push   %ebp
   12490:	89 e5                	mov    %esp,%ebp
   12492:	83 ec 14             	sub    $0x14,%esp
   12495:	8b 45 08             	mov    0x8(%ebp),%eax
   12498:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   1249c:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   124a0:	89 c2                	mov    %eax,%edx
   124a2:	ec                   	in     (%dx),%al
   124a3:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   124a6:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   124aa:	c9                   	leave  
   124ab:	c3                   	ret    

000124ac <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   124ac:	55                   	push   %ebp
   124ad:	89 e5                	mov    %esp,%ebp
   124af:	83 ec 08             	sub    $0x8,%esp
   124b2:	8b 45 08             	mov    0x8(%ebp),%eax
   124b5:	8b 55 0c             	mov    0xc(%ebp),%edx
   124b8:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   124bc:	89 d0                	mov    %edx,%eax
   124be:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   124c1:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   124c5:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   124c9:	ee                   	out    %al,(%dx)
}
   124ca:	90                   	nop
   124cb:	c9                   	leave  
   124cc:	c3                   	ret    

000124cd <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   124cd:	55                   	push   %ebp
   124ce:	89 e5                	mov    %esp,%ebp
   124d0:	83 ec 10             	sub    $0x10,%esp
  idt.start31_16 = (start >> 16) & 0xffff;  // 初始化IDT地址的高16位
   124d3:	8b 45 08             	mov    0x8(%ebp),%eax
   124d6:	c1 e8 10             	shr    $0x10,%eax
   124d9:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  idt.start15_0 = start & 0xffff;           // 初始化IDT地址的低16位
   124dd:	8b 45 08             	mov    0x8(%ebp),%eax
   124e0:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   124e4:	8b 45 0c             	mov    0xc(%ebp),%eax
   124e7:	83 e8 01             	sub    $0x1,%eax
  idt.limit =
   124ea:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   124ee:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   124f2:	90                   	nop
   124f3:	c9                   	leave  
   124f4:	c3                   	ret    

000124f5 <read_cr2>:
static inline uint32_t read_cr2(void) {
   124f5:	55                   	push   %ebp
   124f6:	89 e5                	mov    %esp,%ebp
   124f8:	83 ec 10             	sub    $0x10,%esp
  __asm__ __volatile__("mov %%cr2, %[v]" : [v] "=r"(cr2));
   124fb:	0f 20 d0             	mov    %cr2,%eax
   124fe:	89 45 fc             	mov    %eax,-0x4(%ebp)
  return cr2;
   12501:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12504:	c9                   	leave  
   12505:	c3                   	ret    

00012506 <read_eflags>:
/**
 * @brief  读取当前cpu的eflags寄存器
 * 
 * @return uint32_t 放回eflags的值
 */
static inline uint32_t read_eflags(void) {
   12506:	55                   	push   %ebp
   12507:	89 e5                	mov    %esp,%ebp
   12509:	83 ec 10             	sub    $0x10,%esp
  uint32_t eflags;
  //pushf 压入eflags的值到栈中
  __asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   1250c:	9c                   	pushf  
   1250d:	58                   	pop    %eax
   1250e:	89 45 fc             	mov    %eax,-0x4(%ebp)
  
  return eflags;
   12511:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12514:	c9                   	leave  
   12515:	c3                   	ret    

00012516 <write_eflags>:
/**
 * @brief  将状态state写入eflags寄存器
 * 
 * @param state 
 */
static inline void write_eflags(uint32_t state) {
   12516:	55                   	push   %ebp
   12517:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("push %%eax\n\tpopf"::"a"(state));
   12519:	8b 45 08             	mov    0x8(%ebp),%eax
   1251c:	50                   	push   %eax
   1251d:	9d                   	popf   
}
   1251e:	90                   	nop
   1251f:	5d                   	pop    %ebp
   12520:	c3                   	ret    

00012521 <print_exception_fram>:
/**
 * @brief  打印异常栈帧信息
 * 
 * @param frame 栈帧
 */
static void print_exception_fram(const exception_frame_t *frame) {
   12521:	55                   	push   %ebp
   12522:	89 e5                	mov    %esp,%ebp
   12524:	57                   	push   %edi
   12525:	56                   	push   %esi
   12526:	53                   	push   %ebx
   12527:	83 ec 2c             	sub    $0x2c,%esp
  uint32_t ss, esp;
  if (frame->cs & 0x3) {  //cpl不为0，因为只设置了两种特权级，所以当前cpl为3，即用户程序异常
   1252a:	8b 45 08             	mov    0x8(%ebp),%eax
   1252d:	8b 40 3c             	mov    0x3c(%eax),%eax
   12530:	83 e0 03             	and    $0x3,%eax
   12533:	85 c0                	test   %eax,%eax
   12535:	74 14                	je     1254b <print_exception_fram+0x2a>
    ss = frame->ss3;
   12537:	8b 45 08             	mov    0x8(%ebp),%eax
   1253a:	8b 40 48             	mov    0x48(%eax),%eax
   1253d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    esp = frame->esp3;
   12540:	8b 45 08             	mov    0x8(%ebp),%eax
   12543:	8b 40 44             	mov    0x44(%eax),%eax
   12546:	89 45 e0             	mov    %eax,-0x20(%ebp)
   12549:	eb 12                	jmp    1255d <print_exception_fram+0x3c>
  } else {  //cpl为0，即内核异常
    ss = frame->ds; //内核ss与ds相同
   1254b:	8b 45 08             	mov    0x8(%ebp),%eax
   1254e:	8b 40 0c             	mov    0xc(%eax),%eax
   12551:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    esp = frame->esp;
   12554:	8b 45 08             	mov    0x8(%ebp),%eax
   12557:	8b 40 1c             	mov    0x1c(%eax),%eax
   1255a:	89 45 e0             	mov    %eax,-0x20(%ebp)
  }

  log_printf("------------------------stack frame info---------------------");
   1255d:	83 ec 0c             	sub    $0xc,%esp
   12560:	68 a8 4c 01 00       	push   $0x14ca8
   12565:	e8 41 22 00 00       	call   147ab <log_printf>
   1256a:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ:\t\t%d\nerror code:\t%d", frame->num, frame->error_code);
   1256d:	8b 45 08             	mov    0x8(%ebp),%eax
   12570:	8b 50 34             	mov    0x34(%eax),%edx
   12573:	8b 45 08             	mov    0x8(%ebp),%eax
   12576:	8b 40 30             	mov    0x30(%eax),%eax
   12579:	83 ec 04             	sub    $0x4,%esp
   1257c:	52                   	push   %edx
   1257d:	50                   	push   %eax
   1257e:	68 e6 4c 01 00       	push   $0x14ce6
   12583:	e8 23 22 00 00       	call   147ab <log_printf>
   12588:	83 c4 10             	add    $0x10,%esp
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
    //TODO:SS暂时没法获取，先用ds替代，之后再进行获取
    frame->cs, frame->ds, ss, frame->es, frame->fs, frame->gs
   1258b:	8b 45 08             	mov    0x8(%ebp),%eax
   1258e:	8b 30                	mov    (%eax),%esi
   12590:	8b 45 08             	mov    0x8(%ebp),%eax
   12593:	8b 58 04             	mov    0x4(%eax),%ebx
   12596:	8b 45 08             	mov    0x8(%ebp),%eax
   12599:	8b 48 08             	mov    0x8(%eax),%ecx
   1259c:	8b 45 08             	mov    0x8(%ebp),%eax
   1259f:	8b 50 0c             	mov    0xc(%eax),%edx
   125a2:	8b 45 08             	mov    0x8(%ebp),%eax
   125a5:	8b 40 3c             	mov    0x3c(%eax),%eax
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
   125a8:	83 ec 04             	sub    $0x4,%esp
   125ab:	56                   	push   %esi
   125ac:	53                   	push   %ebx
   125ad:	51                   	push   %ecx
   125ae:	ff 75 e4             	push   -0x1c(%ebp)
   125b1:	52                   	push   %edx
   125b2:	50                   	push   %eax
   125b3:	68 00 4d 01 00       	push   $0x14d00
   125b8:	e8 ee 21 00 00       	call   147ab <log_printf>
   125bd:	83 c4 20             	add    $0x20,%esp
              "ESI:\t\t0x%x\n"
              "EDI:\t\t0x%x\n"
              "EBP:\t\t0x%x\n"
              "ESP:\t\t0x%x", 
              frame->eax, frame->ebx, frame->ecx, frame->edx,
              frame->esi, frame->edi, frame->ebp, esp 
   125c0:	8b 45 08             	mov    0x8(%ebp),%eax
   125c3:	8b 40 18             	mov    0x18(%eax),%eax
   125c6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   125c9:	8b 45 08             	mov    0x8(%ebp),%eax
   125cc:	8b 78 10             	mov    0x10(%eax),%edi
   125cf:	8b 45 08             	mov    0x8(%ebp),%eax
   125d2:	8b 70 14             	mov    0x14(%eax),%esi
              frame->eax, frame->ebx, frame->ecx, frame->edx,
   125d5:	8b 45 08             	mov    0x8(%ebp),%eax
   125d8:	8b 58 24             	mov    0x24(%eax),%ebx
   125db:	8b 45 08             	mov    0x8(%ebp),%eax
   125de:	8b 48 28             	mov    0x28(%eax),%ecx
   125e1:	8b 45 08             	mov    0x8(%ebp),%eax
   125e4:	8b 50 20             	mov    0x20(%eax),%edx
   125e7:	8b 45 08             	mov    0x8(%ebp),%eax
   125ea:	8b 40 2c             	mov    0x2c(%eax),%eax
  log_printf( 
   125ed:	83 ec 0c             	sub    $0xc,%esp
   125f0:	ff 75 e0             	push   -0x20(%ebp)
   125f3:	ff 75 d4             	push   -0x2c(%ebp)
   125f6:	57                   	push   %edi
   125f7:	56                   	push   %esi
   125f8:	53                   	push   %ebx
   125f9:	51                   	push   %ecx
   125fa:	52                   	push   %edx
   125fb:	50                   	push   %eax
   125fc:	68 30 4d 01 00       	push   $0x14d30
   12601:	e8 a5 21 00 00       	call   147ab <log_printf>
   12606:	83 c4 30             	add    $0x30,%esp
              );

  log_printf("EIP:\t\t0x%x\nEFLAGS:\t\t0x%x", frame->eip, frame->eflags);
   12609:	8b 45 08             	mov    0x8(%ebp),%eax
   1260c:	8b 50 40             	mov    0x40(%eax),%edx
   1260f:	8b 45 08             	mov    0x8(%ebp),%eax
   12612:	8b 40 38             	mov    0x38(%eax),%eax
   12615:	83 ec 04             	sub    $0x4,%esp
   12618:	52                   	push   %edx
   12619:	50                   	push   %eax
   1261a:	68 88 4d 01 00       	push   $0x14d88
   1261f:	e8 87 21 00 00       	call   147ab <log_printf>
   12624:	83 c4 10             	add    $0x10,%esp
}
   12627:	90                   	nop
   12628:	8d 65 f4             	lea    -0xc(%ebp),%esp
   1262b:	5b                   	pop    %ebx
   1262c:	5e                   	pop    %esi
   1262d:	5f                   	pop    %edi
   1262e:	5d                   	pop    %ebp
   1262f:	c3                   	ret    

00012630 <do_default_handler>:
 *
 * @param message 异常信息
 * @param fram  异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
static void do_default_handler(const exception_frame_t *frame,
                               const char *message) {
   12630:	55                   	push   %ebp
   12631:	89 e5                	mov    %esp,%ebp
   12633:	83 ec 08             	sub    $0x8,%esp

  log_printf("---------------------------------------------------");
   12636:	83 ec 0c             	sub    $0xc,%esp
   12639:	68 a4 4d 01 00       	push   $0x14da4
   1263e:	e8 68 21 00 00       	call   147ab <log_printf>
   12643:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ/Exception happend: %s", message);
   12646:	83 ec 08             	sub    $0x8,%esp
   12649:	ff 75 0c             	push   0xc(%ebp)
   1264c:	68 d8 4d 01 00       	push   $0x14dd8
   12651:	e8 55 21 00 00       	call   147ab <log_printf>
   12656:	83 c4 10             	add    $0x10,%esp
  print_exception_fram(frame);
   12659:	83 ec 0c             	sub    $0xc,%esp
   1265c:	ff 75 08             	push   0x8(%ebp)
   1265f:	e8 bd fe ff ff       	call   12521 <print_exception_fram>
   12664:	83 c4 10             	add    $0x10,%esp
                              
  
  for (;;) {
    hlt();
   12667:	e8 1c fe ff ff       	call   12488 <hlt>
   1266c:	eb f9                	jmp    12667 <do_default_handler+0x37>

0001266e <do_handler_unknown>:

/**
 * @brief   对没有针对性处理程序的异常进行处理
 * @param frame 异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
void do_handler_unknown(const exception_frame_t *frame) {
   1266e:	55                   	push   %ebp
   1266f:	89 e5                	mov    %esp,%ebp
   12671:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "unknown exception");
   12674:	83 ec 08             	sub    $0x8,%esp
   12677:	68 f2 4d 01 00       	push   $0x14df2
   1267c:	ff 75 08             	push   0x8(%ebp)
   1267f:	e8 ac ff ff ff       	call   12630 <do_default_handler>
   12684:	83 c4 10             	add    $0x10,%esp
}
   12687:	90                   	nop
   12688:	c9                   	leave  
   12689:	c3                   	ret    

0001268a <do_handler_divider>:
/**
 * @brief  除0异常
 *
 * @param frame 异常栈帧
 */
void do_handler_divider(const exception_frame_t *frame) {
   1268a:	55                   	push   %ebp
   1268b:	89 e5                	mov    %esp,%ebp
   1268d:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "divider exception");
   12690:	83 ec 08             	sub    $0x8,%esp
   12693:	68 04 4e 01 00       	push   $0x14e04
   12698:	ff 75 08             	push   0x8(%ebp)
   1269b:	e8 90 ff ff ff       	call   12630 <do_default_handler>
   126a0:	83 c4 10             	add    $0x10,%esp
}
   126a3:	90                   	nop
   126a4:	c9                   	leave  
   126a5:	c3                   	ret    

000126a6 <do_handler_debug>:

void do_handler_debug(const exception_frame_t *frame) {
   126a6:	55                   	push   %ebp
   126a7:	89 e5                	mov    %esp,%ebp
   126a9:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "debug exception");
   126ac:	83 ec 08             	sub    $0x8,%esp
   126af:	68 16 4e 01 00       	push   $0x14e16
   126b4:	ff 75 08             	push   0x8(%ebp)
   126b7:	e8 74 ff ff ff       	call   12630 <do_default_handler>
   126bc:	83 c4 10             	add    $0x10,%esp
}
   126bf:	90                   	nop
   126c0:	c9                   	leave  
   126c1:	c3                   	ret    

000126c2 <do_handler_nmi>:

void do_handler_nmi(const exception_frame_t *frame) {
   126c2:	55                   	push   %ebp
   126c3:	89 e5                	mov    %esp,%ebp
   126c5:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "nmi exception");
   126c8:	83 ec 08             	sub    $0x8,%esp
   126cb:	68 26 4e 01 00       	push   $0x14e26
   126d0:	ff 75 08             	push   0x8(%ebp)
   126d3:	e8 58 ff ff ff       	call   12630 <do_default_handler>
   126d8:	83 c4 10             	add    $0x10,%esp
}
   126db:	90                   	nop
   126dc:	c9                   	leave  
   126dd:	c3                   	ret    

000126de <do_handler_breakpoint>:
void do_handler_breakpoint(const exception_frame_t *frame) {
   126de:	55                   	push   %ebp
   126df:	89 e5                	mov    %esp,%ebp
   126e1:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "breakpoint exception");
   126e4:	83 ec 08             	sub    $0x8,%esp
   126e7:	68 34 4e 01 00       	push   $0x14e34
   126ec:	ff 75 08             	push   0x8(%ebp)
   126ef:	e8 3c ff ff ff       	call   12630 <do_default_handler>
   126f4:	83 c4 10             	add    $0x10,%esp
}
   126f7:	90                   	nop
   126f8:	c9                   	leave  
   126f9:	c3                   	ret    

000126fa <do_handler_overflow>:
void do_handler_overflow(const exception_frame_t *frame) {
   126fa:	55                   	push   %ebp
   126fb:	89 e5                	mov    %esp,%ebp
   126fd:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "overflow exception");
   12700:	83 ec 08             	sub    $0x8,%esp
   12703:	68 49 4e 01 00       	push   $0x14e49
   12708:	ff 75 08             	push   0x8(%ebp)
   1270b:	e8 20 ff ff ff       	call   12630 <do_default_handler>
   12710:	83 c4 10             	add    $0x10,%esp
}
   12713:	90                   	nop
   12714:	c9                   	leave  
   12715:	c3                   	ret    

00012716 <do_handler_bound_range>:
void do_handler_bound_range(const exception_frame_t *frame) {
   12716:	55                   	push   %ebp
   12717:	89 e5                	mov    %esp,%ebp
   12719:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "bound_range exception");
   1271c:	83 ec 08             	sub    $0x8,%esp
   1271f:	68 5c 4e 01 00       	push   $0x14e5c
   12724:	ff 75 08             	push   0x8(%ebp)
   12727:	e8 04 ff ff ff       	call   12630 <do_default_handler>
   1272c:	83 c4 10             	add    $0x10,%esp
}
   1272f:	90                   	nop
   12730:	c9                   	leave  
   12731:	c3                   	ret    

00012732 <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(const exception_frame_t *frame) {
   12732:	55                   	push   %ebp
   12733:	89 e5                	mov    %esp,%ebp
   12735:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_opcode exception");
   12738:	83 ec 08             	sub    $0x8,%esp
   1273b:	68 72 4e 01 00       	push   $0x14e72
   12740:	ff 75 08             	push   0x8(%ebp)
   12743:	e8 e8 fe ff ff       	call   12630 <do_default_handler>
   12748:	83 c4 10             	add    $0x10,%esp
}
   1274b:	90                   	nop
   1274c:	c9                   	leave  
   1274d:	c3                   	ret    

0001274e <do_handler_device_unavailable>:
void do_handler_device_unavailable(const exception_frame_t *frame) {
   1274e:	55                   	push   %ebp
   1274f:	89 e5                	mov    %esp,%ebp
   12751:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "device_unavailable exception");
   12754:	83 ec 08             	sub    $0x8,%esp
   12757:	68 8b 4e 01 00       	push   $0x14e8b
   1275c:	ff 75 08             	push   0x8(%ebp)
   1275f:	e8 cc fe ff ff       	call   12630 <do_default_handler>
   12764:	83 c4 10             	add    $0x10,%esp
}
   12767:	90                   	nop
   12768:	c9                   	leave  
   12769:	c3                   	ret    

0001276a <do_handler_double_fault>:
void do_handler_double_fault(const exception_frame_t *frame) {
   1276a:	55                   	push   %ebp
   1276b:	89 e5                	mov    %esp,%ebp
   1276d:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "double_fault exception");
   12770:	83 ec 08             	sub    $0x8,%esp
   12773:	68 a8 4e 01 00       	push   $0x14ea8
   12778:	ff 75 08             	push   0x8(%ebp)
   1277b:	e8 b0 fe ff ff       	call   12630 <do_default_handler>
   12780:	83 c4 10             	add    $0x10,%esp
}
   12783:	90                   	nop
   12784:	c9                   	leave  
   12785:	c3                   	ret    

00012786 <do_handler_invalid_tss>:
void do_handler_invalid_tss(const exception_frame_t *frame) {
   12786:	55                   	push   %ebp
   12787:	89 e5                	mov    %esp,%ebp
   12789:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_tss exception");
   1278c:	83 ec 08             	sub    $0x8,%esp
   1278f:	68 bf 4e 01 00       	push   $0x14ebf
   12794:	ff 75 08             	push   0x8(%ebp)
   12797:	e8 94 fe ff ff       	call   12630 <do_default_handler>
   1279c:	83 c4 10             	add    $0x10,%esp
}
   1279f:	90                   	nop
   127a0:	c9                   	leave  
   127a1:	c3                   	ret    

000127a2 <do_handler_segment_not_present>:
void do_handler_segment_not_present(const exception_frame_t *frame) {
   127a2:	55                   	push   %ebp
   127a3:	89 e5                	mov    %esp,%ebp
   127a5:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "segment_not_present exception");
   127a8:	83 ec 08             	sub    $0x8,%esp
   127ab:	68 d5 4e 01 00       	push   $0x14ed5
   127b0:	ff 75 08             	push   0x8(%ebp)
   127b3:	e8 78 fe ff ff       	call   12630 <do_default_handler>
   127b8:	83 c4 10             	add    $0x10,%esp
}
   127bb:	90                   	nop
   127bc:	c9                   	leave  
   127bd:	c3                   	ret    

000127be <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(const exception_frame_t *frame) {
   127be:	55                   	push   %ebp
   127bf:	89 e5                	mov    %esp,%ebp
   127c1:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "stack_segment_fault exception");
   127c4:	83 ec 08             	sub    $0x8,%esp
   127c7:	68 f3 4e 01 00       	push   $0x14ef3
   127cc:	ff 75 08             	push   0x8(%ebp)
   127cf:	e8 5c fe ff ff       	call   12630 <do_default_handler>
   127d4:	83 c4 10             	add    $0x10,%esp
}
   127d7:	90                   	nop
   127d8:	c9                   	leave  
   127d9:	c3                   	ret    

000127da <do_handler_general_protection>:
void do_handler_general_protection(const exception_frame_t *frame) {
   127da:	55                   	push   %ebp
   127db:	89 e5                	mov    %esp,%ebp
   127dd:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   127e0:	83 ec 0c             	sub    $0xc,%esp
   127e3:	68 14 4f 01 00       	push   $0x14f14
   127e8:	e8 be 1f 00 00       	call   147ab <log_printf>
   127ed:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: General Protection.");
   127f0:	83 ec 0c             	sub    $0xc,%esp
   127f3:	68 38 4f 01 00       	push   $0x14f38
   127f8:	e8 ae 1f 00 00       	call   147ab <log_printf>
   127fd:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_EXT) {
   12800:	8b 45 08             	mov    0x8(%ebp),%eax
   12803:	8b 40 34             	mov    0x34(%eax),%eax
   12806:	83 e0 01             	and    $0x1,%eax
   12809:	85 c0                	test   %eax,%eax
   1280b:	74 12                	je     1281f <do_handler_general_protection+0x45>
        log_printf("the exception occurred during delivery of an "
   1280d:	83 ec 0c             	sub    $0xc,%esp
   12810:	68 64 4f 01 00       	push   $0x14f64
   12815:	e8 91 1f 00 00       	call   147ab <log_printf>
   1281a:	83 c4 10             	add    $0x10,%esp
   1281d:	eb 10                	jmp    1282f <do_handler_general_protection+0x55>
                "event external to the program, such as an interrupt"
                "or an earlier exception.");
    } else {
        log_printf("the exception occurred during delivery of a"
   1281f:	83 ec 0c             	sub    $0xc,%esp
   12822:	68 e0 4f 01 00       	push   $0x14fe0
   12827:	e8 7f 1f 00 00       	call   147ab <log_printf>
   1282c:	83 c4 10             	add    $0x10,%esp
                    "software interrupt (INT n, INT3, or INTO).");
    }
    
    if (frame->error_code & ERR_IDT) {
   1282f:	8b 45 08             	mov    0x8(%ebp),%eax
   12832:	8b 40 34             	mov    0x34(%eax),%eax
   12835:	83 e0 02             	and    $0x2,%eax
   12838:	85 c0                	test   %eax,%eax
   1283a:	74 12                	je     1284e <do_handler_general_protection+0x74>
        log_printf("the index portion of the error code refers "
   1283c:	83 ec 0c             	sub    $0xc,%esp
   1283f:	68 38 50 01 00       	push   $0x15038
   12844:	e8 62 1f 00 00       	call   147ab <log_printf>
   12849:	83 c4 10             	add    $0x10,%esp
   1284c:	eb 10                	jmp    1285e <do_handler_general_protection+0x84>
                    "to a gate descriptor in the IDT");
    } else {
        log_printf("the index refers to a descriptor in the GDT");
   1284e:	83 ec 0c             	sub    $0xc,%esp
   12851:	68 84 50 01 00       	push   $0x15084
   12856:	e8 50 1f 00 00       	call   147ab <log_printf>
   1285b:	83 c4 10             	add    $0x10,%esp
    }
    
    log_printf("segment index: %d", frame->error_code & 0xFFF8);
   1285e:	8b 45 08             	mov    0x8(%ebp),%eax
   12861:	8b 40 34             	mov    0x34(%eax),%eax
   12864:	25 f8 ff 00 00       	and    $0xfff8,%eax
   12869:	83 ec 08             	sub    $0x8,%esp
   1286c:	50                   	push   %eax
   1286d:	68 b0 50 01 00       	push   $0x150b0
   12872:	e8 34 1f 00 00       	call   147ab <log_printf>
   12877:	83 c4 10             	add    $0x10,%esp
    print_exception_fram(frame);
   1287a:	83 ec 0c             	sub    $0xc,%esp
   1287d:	ff 75 08             	push   0x8(%ebp)
   12880:	e8 9c fc ff ff       	call   12521 <print_exception_fram>
   12885:	83 c4 10             	add    $0x10,%esp
}
   12888:	90                   	nop
   12889:	c9                   	leave  
   1288a:	c3                   	ret    

0001288b <do_handler_page_fault>:
/**
 * @brief page_fault异常处理函数
 * 
 * @param frame 
 */
void do_handler_page_fault(const exception_frame_t *frame) {
   1288b:	55                   	push   %ebp
   1288c:	89 e5                	mov    %esp,%ebp
   1288e:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   12891:	83 ec 0c             	sub    $0xc,%esp
   12894:	68 14 4f 01 00       	push   $0x14f14
   12899:	e8 0d 1f 00 00       	call   147ab <log_printf>
   1289e:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: Page fault.");
   128a1:	83 ec 0c             	sub    $0xc,%esp
   128a4:	68 c4 50 01 00       	push   $0x150c4
   128a9:	e8 fd 1e 00 00       	call   147ab <log_printf>
   128ae:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_PAGE_P) {
   128b1:	8b 45 08             	mov    0x8(%ebp),%eax
   128b4:	8b 40 34             	mov    0x34(%eax),%eax
   128b7:	83 e0 01             	and    $0x1,%eax
   128ba:	85 c0                	test   %eax,%eax
   128bc:	74 18                	je     128d6 <do_handler_page_fault+0x4b>
        log_printf("page-level protection violation: 0x%x.", read_cr2());
   128be:	e8 32 fc ff ff       	call   124f5 <read_cr2>
   128c3:	83 ec 08             	sub    $0x8,%esp
   128c6:	50                   	push   %eax
   128c7:	68 e8 50 01 00       	push   $0x150e8
   128cc:	e8 da 1e 00 00       	call   147ab <log_printf>
   128d1:	83 c4 10             	add    $0x10,%esp
   128d4:	eb 16                	jmp    128ec <do_handler_page_fault+0x61>
    } else {
        log_printf("Page doesn't present 0x%x", read_cr2());
   128d6:	e8 1a fc ff ff       	call   124f5 <read_cr2>
   128db:	83 ec 08             	sub    $0x8,%esp
   128de:	50                   	push   %eax
   128df:	68 0f 51 01 00       	push   $0x1510f
   128e4:	e8 c2 1e 00 00       	call   147ab <log_printf>
   128e9:	83 c4 10             	add    $0x10,%esp
   }
    
    if (frame->error_code & ERR_PAGE_WR) {
   128ec:	8b 45 08             	mov    0x8(%ebp),%eax
   128ef:	8b 40 34             	mov    0x34(%eax),%eax
   128f2:	83 e0 02             	and    $0x2,%eax
   128f5:	85 c0                	test   %eax,%eax
   128f7:	74 12                	je     1290b <do_handler_page_fault+0x80>
        log_printf("The access causing the fault was a write.");
   128f9:	83 ec 0c             	sub    $0xc,%esp
   128fc:	68 2c 51 01 00       	push   $0x1512c
   12901:	e8 a5 1e 00 00       	call   147ab <log_printf>
   12906:	83 c4 10             	add    $0x10,%esp
   12909:	eb 10                	jmp    1291b <do_handler_page_fault+0x90>
    } else {
        log_printf("The access causing the fault was a read.");
   1290b:	83 ec 0c             	sub    $0xc,%esp
   1290e:	68 58 51 01 00       	push   $0x15158
   12913:	e8 93 1e 00 00       	call   147ab <log_printf>
   12918:	83 c4 10             	add    $0x10,%esp
    }
    
    if (frame->error_code & ERR_PAGE_US) {
   1291b:	8b 45 08             	mov    0x8(%ebp),%eax
   1291e:	8b 40 34             	mov    0x34(%eax),%eax
   12921:	83 e0 04             	and    $0x4,%eax
   12924:	85 c0                	test   %eax,%eax
   12926:	74 12                	je     1293a <do_handler_page_fault+0xaf>
        log_printf("A user-mode access caused the fault.");
   12928:	83 ec 0c             	sub    $0xc,%esp
   1292b:	68 84 51 01 00       	push   $0x15184
   12930:	e8 76 1e 00 00       	call   147ab <log_printf>
   12935:	83 c4 10             	add    $0x10,%esp
   12938:	eb 10                	jmp    1294a <do_handler_page_fault+0xbf>
    } else {
        log_printf("A supervisor-mode access caused the fault.");
   1293a:	83 ec 0c             	sub    $0xc,%esp
   1293d:	68 ac 51 01 00       	push   $0x151ac
   12942:	e8 64 1e 00 00       	call   147ab <log_printf>
   12947:	83 c4 10             	add    $0x10,%esp
    }

   print_exception_fram(frame);
   1294a:	83 ec 0c             	sub    $0xc,%esp
   1294d:	ff 75 08             	push   0x8(%ebp)
   12950:	e8 cc fb ff ff       	call   12521 <print_exception_fram>
   12955:	83 c4 10             	add    $0x10,%esp
}
   12958:	90                   	nop
   12959:	c9                   	leave  
   1295a:	c3                   	ret    

0001295b <do_handler_fpu_error>:

void do_handler_fpu_error(const exception_frame_t *frame) {
   1295b:	55                   	push   %ebp
   1295c:	89 e5                	mov    %esp,%ebp
   1295e:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "fpu_error exception");
   12961:	83 ec 08             	sub    $0x8,%esp
   12964:	68 d7 51 01 00       	push   $0x151d7
   12969:	ff 75 08             	push   0x8(%ebp)
   1296c:	e8 bf fc ff ff       	call   12630 <do_default_handler>
   12971:	83 c4 10             	add    $0x10,%esp
}
   12974:	90                   	nop
   12975:	c9                   	leave  
   12976:	c3                   	ret    

00012977 <do_handler_alignment_check>:
void do_handler_alignment_check(const exception_frame_t *frame) {
   12977:	55                   	push   %ebp
   12978:	89 e5                	mov    %esp,%ebp
   1297a:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "alignment_check exception");
   1297d:	83 ec 08             	sub    $0x8,%esp
   12980:	68 eb 51 01 00       	push   $0x151eb
   12985:	ff 75 08             	push   0x8(%ebp)
   12988:	e8 a3 fc ff ff       	call   12630 <do_default_handler>
   1298d:	83 c4 10             	add    $0x10,%esp
}
   12990:	90                   	nop
   12991:	c9                   	leave  
   12992:	c3                   	ret    

00012993 <do_handler_machine_check>:
void do_handler_machine_check(const exception_frame_t *frame) {
   12993:	55                   	push   %ebp
   12994:	89 e5                	mov    %esp,%ebp
   12996:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "machine_check exception");
   12999:	83 ec 08             	sub    $0x8,%esp
   1299c:	68 05 52 01 00       	push   $0x15205
   129a1:	ff 75 08             	push   0x8(%ebp)
   129a4:	e8 87 fc ff ff       	call   12630 <do_default_handler>
   129a9:	83 c4 10             	add    $0x10,%esp
}
   129ac:	90                   	nop
   129ad:	c9                   	leave  
   129ae:	c3                   	ret    

000129af <do_handler_smd_exception>:
void do_handler_smd_exception(const exception_frame_t *frame) {
   129af:	55                   	push   %ebp
   129b0:	89 e5                	mov    %esp,%ebp
   129b2:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "smd_exception exception");
   129b5:	83 ec 08             	sub    $0x8,%esp
   129b8:	68 1d 52 01 00       	push   $0x1521d
   129bd:	ff 75 08             	push   0x8(%ebp)
   129c0:	e8 6b fc ff ff       	call   12630 <do_default_handler>
   129c5:	83 c4 10             	add    $0x10,%esp
}
   129c8:	90                   	nop
   129c9:	c9                   	leave  
   129ca:	c3                   	ret    

000129cb <do_handler_virtual_exception>:
void do_handler_virtual_exception(const exception_frame_t *frame) {
   129cb:	55                   	push   %ebp
   129cc:	89 e5                	mov    %esp,%ebp
   129ce:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "virtual_exception exception");
   129d1:	83 ec 08             	sub    $0x8,%esp
   129d4:	68 35 52 01 00       	push   $0x15235
   129d9:	ff 75 08             	push   0x8(%ebp)
   129dc:	e8 4f fc ff ff       	call   12630 <do_default_handler>
   129e1:	83 c4 10             	add    $0x10,%esp
}
   129e4:	90                   	nop
   129e5:	c9                   	leave  
   129e6:	c3                   	ret    

000129e7 <do_handler_control_exception>:
void do_handler_control_exception(const exception_frame_t *frame) {
   129e7:	55                   	push   %ebp
   129e8:	89 e5                	mov    %esp,%ebp
   129ea:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "control_exception exception");
   129ed:	83 ec 08             	sub    $0x8,%esp
   129f0:	68 51 52 01 00       	push   $0x15251
   129f5:	ff 75 08             	push   0x8(%ebp)
   129f8:	e8 33 fc ff ff       	call   12630 <do_default_handler>
   129fd:	83 c4 10             	add    $0x10,%esp
}
   12a00:	90                   	nop
   12a01:	c9                   	leave  
   12a02:	c3                   	ret    

00012a03 <idt_install>:
 *
 * @param idt_num 异常的下标
 * @param handler 异常处理程序的偏移地址
 * @return int 成功返回 0 失败放回 -1
 */
int idt_install(const int idt_num, const idt_handler_t handler) {
   12a03:	55                   	push   %ebp
   12a04:	89 e5                	mov    %esp,%ebp
   12a06:	83 ec 08             	sub    $0x8,%esp
  // 1.判断IDT下标是否越界
  if (idt_num >= IDT_TABLE_SIZE || idt_num < 0) return -1;
   12a09:	81 7d 08 ff 00 00 00 	cmpl   $0xff,0x8(%ebp)
   12a10:	7f 06                	jg     12a18 <idt_install+0x15>
   12a12:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12a16:	79 07                	jns    12a1f <idt_install+0x1c>
   12a18:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12a1d:	eb 25                	jmp    12a44 <idt_install+0x41>
  // 2.在IDT表中设置下标为 idt_num 的中断门,中断门描述符的 DPL <= CPL, 
  //因为中断门是cpu自己从中断描述符表中索引，也可以用 int $中断号主动触发，
  //int $ 主动触发需要中断门描述符的DPL >= CPL
  //所以没有请求选择子即RPL用检查因为没有
  //若目标代码段的特权级更高则发生特权级转换
  gate_desc_set(idt_table + idt_num, KERNEL_SELECTOR_CS, (uint32_t)handler,
   12a1f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a22:	8b 55 08             	mov    0x8(%ebp),%edx
   12a25:	c1 e2 03             	shl    $0x3,%edx
   12a28:	81 c2 00 82 03 00    	add    $0x38200,%edx
   12a2e:	68 00 8e 00 00       	push   $0x8e00
   12a33:	50                   	push   %eax
   12a34:	6a 08                	push   $0x8
   12a36:	52                   	push   %edx
   12a37:	e8 c1 f7 ff ff       	call   121fd <gate_desc_set>
   12a3c:	83 c4 10             	add    $0x10,%esp
                GATE_TYPE_INT | GATE_ATTR_P | GATE_ATTR_DPL_0);

  return 0;
   12a3f:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12a44:	c9                   	leave  
   12a45:	c3                   	ret    

00012a46 <init_pic>:

/**
 * @brief  初始化主从8259芯片
 * 
 */
static void init_pic(void) {
   12a46:	55                   	push   %ebp
   12a47:	89 e5                	mov    %esp,%ebp
  //1.对主片(8259A芯片)进行初始化, 写入时必须按照ICW1~4的顺序写入
  outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);  //ICW1:边缘触发，级联模式，需要ICW4
   12a49:	6a 11                	push   $0x11
   12a4b:	6a 20                	push   $0x20
   12a4d:	e8 5a fa ff ff       	call   124ac <outb>
   12a52:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW2, PIC_ICW2_IDT_START);                //ICW2:起始中断向量号为0x20
   12a55:	6a 20                	push   $0x20
   12a57:	6a 21                	push   $0x21
   12a59:	e8 4e fa ff ff       	call   124ac <outb>
   12a5e:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW3, PIC_ICW3_MASTER_CASCADE);           //ICW3:主片用IR2级联从片
   12a61:	6a 04                	push   $0x4
   12a63:	6a 21                	push   $0x21
   12a65:	e8 42 fa ff ff       	call   124ac <outb>
   12a6a:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW4, PIC_ICW4_8086);                     //ICW4:8086模式，正常EOI
   12a6d:	6a 01                	push   $0x1
   12a6f:	6a 21                	push   $0x21
   12a71:	e8 36 fa ff ff       	call   124ac <outb>
   12a76:	83 c4 08             	add    $0x8,%esp

  //2.对从片(8259A芯片)进行初始化
  outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);
   12a79:	6a 11                	push   $0x11
   12a7b:	68 a0 00 00 00       	push   $0xa0
   12a80:	e8 27 fa ff ff       	call   124ac <outb>
   12a85:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW2, PIC_ICW2_IDT_START + 8); //第一块芯片占用了8个中断，所以第二块芯片从第8个中断的下一个开始
   12a88:	6a 28                	push   $0x28
   12a8a:	68 a1 00 00 00       	push   $0xa1
   12a8f:	e8 18 fa ff ff       	call   124ac <outb>
   12a94:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW3, PIC_ICW3_SLAVE_CASCADE);
   12a97:	6a 02                	push   $0x2
   12a99:	68 a1 00 00 00       	push   $0xa1
   12a9e:	e8 09 fa ff ff       	call   124ac <outb>
   12aa3:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW4, PIC_ICW4_8086);
   12aa6:	6a 01                	push   $0x1
   12aa8:	68 a1 00 00 00       	push   $0xa1
   12aad:	e8 fa f9 ff ff       	call   124ac <outb>
   12ab2:	83 c4 08             	add    $0x8,%esp


  //3.初始化完两块8259芯片后，还需要为每一个中断设置处理程序
  //才可以去接收中断，所以现在要屏蔽中断，IMR位置1则屏蔽该中断请求，0则不屏蔽
  outb(PIC0_IMR, 0xfb); //屏蔽主片除 irq2(第3位) 以外的位传来的中断，(1111 1011)
   12ab5:	68 fb 00 00 00       	push   $0xfb
   12aba:	6a 21                	push   $0x21
   12abc:	e8 eb f9 ff ff       	call   124ac <outb>
   12ac1:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_IMR, 0xff); //屏蔽从片的所有中断
   12ac4:	68 ff 00 00 00       	push   $0xff
   12ac9:	68 a1 00 00 00       	push   $0xa1
   12ace:	e8 d9 f9 ff ff       	call   124ac <outb>
   12ad3:	83 c4 08             	add    $0x8,%esp


}
   12ad6:	90                   	nop
   12ad7:	c9                   	leave  
   12ad8:	c3                   	ret    

00012ad9 <idt_init>:

/**
 * @brief  初始化中断向量表
 *
 */
void idt_init(void) {
   12ad9:	55                   	push   %ebp
   12ada:	89 e5                	mov    %esp,%ebp
   12adc:	83 ec 18             	sub    $0x18,%esp
  // 1.初始化IDT中的各个中断门(未知异常类型)
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   12adf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12ae6:	eb 17                	jmp    12aff <idt_init+0x26>
    idt_install(i, (idt_handler_t)exception_handler_unknown);
   12ae8:	83 ec 08             	sub    $0x8,%esp
   12aeb:	68 2a 00 01 00       	push   $0x1002a
   12af0:	ff 75 f4             	push   -0xc(%ebp)
   12af3:	e8 0b ff ff ff       	call   12a03 <idt_install>
   12af8:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   12afb:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12aff:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   12b06:	7e e0                	jle    12ae8 <idt_init+0xf>
  }

  // 2.绑定异常中断向量表中对应下标的中断门的处理函数
  idt_install(IDT0_DE, (idt_handler_t)exception_handler_divider);
   12b08:	83 ec 08             	sub    $0x8,%esp
   12b0b:	68 47 00 01 00       	push   $0x10047
   12b10:	6a 00                	push   $0x0
   12b12:	e8 ec fe ff ff       	call   12a03 <idt_install>
   12b17:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT1_DB, (idt_handler_t)exception_handler_debug);
   12b1a:	83 ec 08             	sub    $0x8,%esp
   12b1d:	68 64 00 01 00       	push   $0x10064
   12b22:	6a 01                	push   $0x1
   12b24:	e8 da fe ff ff       	call   12a03 <idt_install>
   12b29:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT2_NMI, (idt_handler_t)exception_handler_nmi);
   12b2c:	83 ec 08             	sub    $0x8,%esp
   12b2f:	68 81 00 01 00       	push   $0x10081
   12b34:	6a 02                	push   $0x2
   12b36:	e8 c8 fe ff ff       	call   12a03 <idt_install>
   12b3b:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT3_BP, (idt_handler_t)exception_handler_breakpoint);
   12b3e:	83 ec 08             	sub    $0x8,%esp
   12b41:	68 9e 00 01 00       	push   $0x1009e
   12b46:	6a 03                	push   $0x3
   12b48:	e8 b6 fe ff ff       	call   12a03 <idt_install>
   12b4d:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT4_OF, (idt_handler_t)exception_handler_overflow);
   12b50:	83 ec 08             	sub    $0x8,%esp
   12b53:	68 bb 00 01 00       	push   $0x100bb
   12b58:	6a 04                	push   $0x4
   12b5a:	e8 a4 fe ff ff       	call   12a03 <idt_install>
   12b5f:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT5_BR, (idt_handler_t)exception_handler_bound_range);
   12b62:	83 ec 08             	sub    $0x8,%esp
   12b65:	68 d8 00 01 00       	push   $0x100d8
   12b6a:	6a 05                	push   $0x5
   12b6c:	e8 92 fe ff ff       	call   12a03 <idt_install>
   12b71:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT6_UD, (idt_handler_t)exception_handler_invalid_opcode);
   12b74:	83 ec 08             	sub    $0x8,%esp
   12b77:	68 f5 00 01 00       	push   $0x100f5
   12b7c:	6a 06                	push   $0x6
   12b7e:	e8 80 fe ff ff       	call   12a03 <idt_install>
   12b83:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT7_NM, (idt_handler_t)exception_handler_device_unavailable);
   12b86:	83 ec 08             	sub    $0x8,%esp
   12b89:	68 12 01 01 00       	push   $0x10112
   12b8e:	6a 07                	push   $0x7
   12b90:	e8 6e fe ff ff       	call   12a03 <idt_install>
   12b95:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT8_DF, (idt_handler_t)exception_handler_double_fault);
   12b98:	83 ec 08             	sub    $0x8,%esp
   12b9b:	68 2f 01 01 00       	push   $0x1012f
   12ba0:	6a 08                	push   $0x8
   12ba2:	e8 5c fe ff ff       	call   12a03 <idt_install>
   12ba7:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT10_TS, (idt_handler_t)exception_handler_invalid_tss);
   12baa:	83 ec 08             	sub    $0x8,%esp
   12bad:	68 4a 01 01 00       	push   $0x1014a
   12bb2:	6a 0a                	push   $0xa
   12bb4:	e8 4a fe ff ff       	call   12a03 <idt_install>
   12bb9:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT11_NP, (idt_handler_t)exception_handler_segment_not_present);
   12bbc:	83 ec 08             	sub    $0x8,%esp
   12bbf:	68 65 01 01 00       	push   $0x10165
   12bc4:	6a 0b                	push   $0xb
   12bc6:	e8 38 fe ff ff       	call   12a03 <idt_install>
   12bcb:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT12_SS, (idt_handler_t)exception_handler_stack_segment_fault);
   12bce:	83 ec 08             	sub    $0x8,%esp
   12bd1:	68 80 01 01 00       	push   $0x10180
   12bd6:	6a 0c                	push   $0xc
   12bd8:	e8 26 fe ff ff       	call   12a03 <idt_install>
   12bdd:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT13_GP, (idt_handler_t)exception_handler_general_protection);
   12be0:	83 ec 08             	sub    $0x8,%esp
   12be3:	68 9b 01 01 00       	push   $0x1019b
   12be8:	6a 0d                	push   $0xd
   12bea:	e8 14 fe ff ff       	call   12a03 <idt_install>
   12bef:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT14_PF, (idt_handler_t)exception_handler_page_fault);
   12bf2:	83 ec 08             	sub    $0x8,%esp
   12bf5:	68 b6 01 01 00       	push   $0x101b6
   12bfa:	6a 0e                	push   $0xe
   12bfc:	e8 02 fe ff ff       	call   12a03 <idt_install>
   12c01:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT16_MF, (idt_handler_t)exception_handler_fpu_error);
   12c04:	83 ec 08             	sub    $0x8,%esp
   12c07:	68 d1 01 01 00       	push   $0x101d1
   12c0c:	6a 10                	push   $0x10
   12c0e:	e8 f0 fd ff ff       	call   12a03 <idt_install>
   12c13:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT17_AC, (idt_handler_t)exception_handler_alignment_check);
   12c16:	83 ec 08             	sub    $0x8,%esp
   12c19:	68 ee 01 01 00       	push   $0x101ee
   12c1e:	6a 11                	push   $0x11
   12c20:	e8 de fd ff ff       	call   12a03 <idt_install>
   12c25:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT18_MC, (idt_handler_t)exception_handler_machine_check);
   12c28:	83 ec 08             	sub    $0x8,%esp
   12c2b:	68 09 02 01 00       	push   $0x10209
   12c30:	6a 12                	push   $0x12
   12c32:	e8 cc fd ff ff       	call   12a03 <idt_install>
   12c37:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT19_XM, (idt_handler_t)exception_handler_smd_exception);
   12c3a:	83 ec 08             	sub    $0x8,%esp
   12c3d:	68 26 02 01 00       	push   $0x10226
   12c42:	6a 13                	push   $0x13
   12c44:	e8 ba fd ff ff       	call   12a03 <idt_install>
   12c49:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT20_VE, (idt_handler_t)exception_handler_virtual_exception);
   12c4c:	83 ec 08             	sub    $0x8,%esp
   12c4f:	68 43 02 01 00       	push   $0x10243
   12c54:	6a 14                	push   $0x14
   12c56:	e8 a8 fd ff ff       	call   12a03 <idt_install>
   12c5b:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT21_CP, (idt_handler_t)exception_handler_control_exception);
   12c5e:	83 ec 08             	sub    $0x8,%esp
   12c61:	68 60 02 01 00       	push   $0x10260
   12c66:	6a 15                	push   $0x15
   12c68:	e8 96 fd ff ff       	call   12a03 <idt_install>
   12c6d:	83 c4 10             	add    $0x10,%esp

  //3.加载IDT
  lidt((uint32_t)idt_table, sizeof(idt_table));
   12c70:	b8 00 82 03 00       	mov    $0x38200,%eax
   12c75:	83 ec 08             	sub    $0x8,%esp
   12c78:	68 00 08 00 00       	push   $0x800
   12c7d:	50                   	push   %eax
   12c7e:	e8 4a f8 ff ff       	call   124cd <lidt>
   12c83:	83 c4 10             	add    $0x10,%esp

  //4.初始化8259设备中断芯片
  init_pic();
   12c86:	e8 bb fd ff ff       	call   12a46 <init_pic>
}
   12c8b:	90                   	nop
   12c8c:	c9                   	leave  
   12c8d:	c3                   	ret    

00012c8e <idt_enable>:
/**
 * @brief  开启外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号,即IDT中的下标
 */
void idt_enable(uint8_t irq_num) {
   12c8e:	55                   	push   %ebp
   12c8f:	89 e5                	mov    %esp,%ebp
   12c91:	53                   	push   %ebx
   12c92:	83 ec 14             	sub    $0x14,%esp
   12c95:	8b 45 08             	mov    0x8(%ebp),%eax
   12c98:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   12c9b:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   12c9f:	76 7f                	jbe    12d20 <idt_enable+0x92>
   12ca1:	80 7d e8 2e          	cmpb   $0x2e,-0x18(%ebp)
   12ca5:	77 79                	ja     12d20 <idt_enable+0x92>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   12ca7:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置0，即不屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   12cab:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   12caf:	77 33                	ja     12ce4 <idt_enable+0x56>
    uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   12cb1:	6a 21                	push   $0x21
   12cb3:	e8 d7 f7 ff ff       	call   1248f <inb>
   12cb8:	83 c4 04             	add    $0x4,%esp
   12cbb:	89 c3                	mov    %eax,%ebx
   12cbd:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   12cc1:	ba 01 00 00 00       	mov    $0x1,%edx
   12cc6:	89 c1                	mov    %eax,%ecx
   12cc8:	d3 e2                	shl    %cl,%edx
   12cca:	89 d0                	mov    %edx,%eax
   12ccc:	f7 d0                	not    %eax
   12cce:	21 d8                	and    %ebx,%eax
   12cd0:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   12cd3:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   12cd7:	50                   	push   %eax
   12cd8:	6a 21                	push   $0x21
   12cda:	e8 cd f7 ff ff       	call   124ac <outb>
   12cdf:	83 c4 08             	add    $0x8,%esp
   12ce2:	eb 3d                	jmp    12d21 <idt_enable+0x93>
  } else {
    uint8_t mask = inb(PIC1_IMR) & ~(1 << (irq_num - 8));
   12ce4:	68 a1 00 00 00       	push   $0xa1
   12ce9:	e8 a1 f7 ff ff       	call   1248f <inb>
   12cee:	83 c4 04             	add    $0x4,%esp
   12cf1:	89 c3                	mov    %eax,%ebx
   12cf3:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   12cf7:	83 e8 08             	sub    $0x8,%eax
   12cfa:	ba 01 00 00 00       	mov    $0x1,%edx
   12cff:	89 c1                	mov    %eax,%ecx
   12d01:	d3 e2                	shl    %cl,%edx
   12d03:	89 d0                	mov    %edx,%eax
   12d05:	f7 d0                	not    %eax
   12d07:	21 d8                	and    %ebx,%eax
   12d09:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   12d0c:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   12d10:	50                   	push   %eax
   12d11:	68 a1 00 00 00       	push   $0xa1
   12d16:	e8 91 f7 ff ff       	call   124ac <outb>
   12d1b:	83 c4 08             	add    $0x8,%esp
   12d1e:	eb 01                	jmp    12d21 <idt_enable+0x93>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   12d20:	90                   	nop
  }
  
}
   12d21:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   12d24:	c9                   	leave  
   12d25:	c3                   	ret    

00012d26 <idt_disable>:
/**
 * @brief  关闭外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号，即IDT中的下标
 */
void idt_disable(uint8_t irq_num) {
   12d26:	55                   	push   %ebp
   12d27:	89 e5                	mov    %esp,%ebp
   12d29:	53                   	push   %ebx
   12d2a:	83 ec 14             	sub    $0x14,%esp
   12d2d:	8b 45 08             	mov    0x8(%ebp),%eax
   12d30:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   12d33:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   12d37:	76 7b                	jbe    12db4 <idt_disable+0x8e>
   12d39:	80 7d e8 2f          	cmpb   $0x2f,-0x18(%ebp)
   12d3d:	77 75                	ja     12db4 <idt_disable+0x8e>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   12d3f:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置1，即屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   12d43:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   12d47:	77 31                	ja     12d7a <idt_disable+0x54>
    uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   12d49:	6a 21                	push   $0x21
   12d4b:	e8 3f f7 ff ff       	call   1248f <inb>
   12d50:	83 c4 04             	add    $0x4,%esp
   12d53:	89 c3                	mov    %eax,%ebx
   12d55:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   12d59:	ba 01 00 00 00       	mov    $0x1,%edx
   12d5e:	89 c1                	mov    %eax,%ecx
   12d60:	d3 e2                	shl    %cl,%edx
   12d62:	89 d0                	mov    %edx,%eax
   12d64:	09 d8                	or     %ebx,%eax
   12d66:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   12d69:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   12d6d:	50                   	push   %eax
   12d6e:	6a 21                	push   $0x21
   12d70:	e8 37 f7 ff ff       	call   124ac <outb>
   12d75:	83 c4 08             	add    $0x8,%esp
   12d78:	eb 3b                	jmp    12db5 <idt_disable+0x8f>
  } else {
    uint8_t mask = inb(PIC1_IMR) | (1 << (irq_num - 8));
   12d7a:	68 a1 00 00 00       	push   $0xa1
   12d7f:	e8 0b f7 ff ff       	call   1248f <inb>
   12d84:	83 c4 04             	add    $0x4,%esp
   12d87:	89 c3                	mov    %eax,%ebx
   12d89:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   12d8d:	83 e8 08             	sub    $0x8,%eax
   12d90:	ba 01 00 00 00       	mov    $0x1,%edx
   12d95:	89 c1                	mov    %eax,%ecx
   12d97:	d3 e2                	shl    %cl,%edx
   12d99:	89 d0                	mov    %edx,%eax
   12d9b:	09 d8                	or     %ebx,%eax
   12d9d:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   12da0:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   12da4:	50                   	push   %eax
   12da5:	68 a1 00 00 00       	push   $0xa1
   12daa:	e8 fd f6 ff ff       	call   124ac <outb>
   12daf:	83 c4 08             	add    $0x8,%esp
   12db2:	eb 01                	jmp    12db5 <idt_disable+0x8f>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   12db4:	90                   	nop
  }
  
}
   12db5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   12db8:	c9                   	leave  
   12db9:	c3                   	ret    

00012dba <idt_disable_global>:

/**
 * @brief  关闭全局中断
 * 
 */
void idt_disable_global(void) {
   12dba:	55                   	push   %ebp
   12dbb:	89 e5                	mov    %esp,%ebp
  cli();
   12dbd:	e8 b8 f6 ff ff       	call   1247a <cli>
}
   12dc2:	90                   	nop
   12dc3:	5d                   	pop    %ebp
   12dc4:	c3                   	ret    

00012dc5 <idt_enable_global>:

/**
 * @brief  开启全局中断
 * 
 */
void idt_enable_global(void) {
   12dc5:	55                   	push   %ebp
   12dc6:	89 e5                	mov    %esp,%ebp
  sti();
   12dc8:	e8 b4 f6 ff ff       	call   12481 <sti>
}
   12dcd:	90                   	nop
   12dce:	5d                   	pop    %ebp
   12dcf:	c3                   	ret    

00012dd0 <pic_send_eoi>:
 * @brief  将OCW2寄存器的7~5位置为 001，用普通的EOI结束方式
 *         向8259A发送EOI命令，8259A会将ISR中优先级最高的位置0
 *
 * @param irq_num 中断向量号，即IDT下标
 */
void pic_send_eoi(int irq_num) {
   12dd0:	55                   	push   %ebp
   12dd1:	89 e5                	mov    %esp,%ebp
  //1.获取该中断对应的IRQ标号
  irq_num -= PIC_ICW2_IDT_START;
   12dd3:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
  //2.判断标号是否越界,若不越界则交给对应芯片处理
  if (irq_num < 0 || irq_num > 15) return;
   12dd7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12ddb:	78 29                	js     12e06 <pic_send_eoi+0x36>
   12ddd:	83 7d 08 0f          	cmpl   $0xf,0x8(%ebp)
   12de1:	7f 23                	jg     12e06 <pic_send_eoi+0x36>

  //3.若中断来自主片则只需向主片发送EOI
  outb(PIC0_OCW2, PIC_OCW2_EOI);
   12de3:	6a 20                	push   $0x20
   12de5:	6a 20                	push   $0x20
   12de7:	e8 c0 f6 ff ff       	call   124ac <outb>
   12dec:	83 c4 08             	add    $0x8,%esp

  //4.若中断来自从片则还需向从片发送EOI
  if (irq_num >= 8) { 
   12def:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   12df3:	7e 12                	jle    12e07 <pic_send_eoi+0x37>
    outb(PIC1_OCW2, PIC_OCW2_EOI);
   12df5:	6a 20                	push   $0x20
   12df7:	68 a0 00 00 00       	push   $0xa0
   12dfc:	e8 ab f6 ff ff       	call   124ac <outb>
   12e01:	83 c4 08             	add    $0x8,%esp
   12e04:	eb 01                	jmp    12e07 <pic_send_eoi+0x37>
  if (irq_num < 0 || irq_num > 15) return;
   12e06:	90                   	nop
  }

}
   12e07:	c9                   	leave  
   12e08:	c3                   	ret    

00012e09 <idt_enter_protection>:

/**
 * @brief  
 * 
 */
idt_state_t idt_enter_protection(void) {
   12e09:	55                   	push   %ebp
   12e0a:	89 e5                	mov    %esp,%ebp
   12e0c:	83 ec 10             	sub    $0x10,%esp
  idt_state_t state = read_eflags();
   12e0f:	e8 f2 f6 ff ff       	call   12506 <read_eflags>
   12e14:	89 45 fc             	mov    %eax,-0x4(%ebp)
  idt_disable_global();
   12e17:	e8 9e ff ff ff       	call   12dba <idt_disable_global>
  return state;;
   12e1c:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12e1f:	c9                   	leave  
   12e20:	c3                   	ret    

00012e21 <idt_leave_protection>:
/**
 * @brief  
 * 
 * @return idt_state_t 
 */
idt_state_t idt_leave_protection(idt_state_t state){
   12e21:	55                   	push   %ebp
   12e22:	89 e5                	mov    %esp,%ebp
  write_eflags(state);
   12e24:	ff 75 08             	push   0x8(%ebp)
   12e27:	e8 ea f6 ff ff       	call   12516 <write_eflags>
   12e2c:	83 c4 04             	add    $0x4,%esp
}
   12e2f:	90                   	nop
   12e30:	c9                   	leave  
   12e31:	c3                   	ret    

00012e32 <sys_print_msg>:
 * @brief 临时的格式化输出系统调用
 * 
 * @param fmt 
 * @param arg 
 */
void sys_print_msg(const char *fmt, int arg) {
   12e32:	55                   	push   %ebp
   12e33:	89 e5                	mov    %esp,%ebp
   12e35:	83 ec 08             	sub    $0x8,%esp
    log_printf(fmt, arg);
   12e38:	83 ec 08             	sub    $0x8,%esp
   12e3b:	ff 75 0c             	push   0xc(%ebp)
   12e3e:	ff 75 08             	push   0x8(%ebp)
   12e41:	e8 65 19 00 00       	call   147ab <log_printf>
   12e46:	83 c4 10             	add    $0x10,%esp
}
   12e49:	90                   	nop
   12e4a:	c9                   	leave  
   12e4b:	c3                   	ret    

00012e4c <do_handler_syscall>:
/**
 * @brief 门调用处理函数，通过定义的系统调用id，将该调用分发到正确的系统调用上
 * 
 * @param frame 
 */
void do_handler_syscall(syscall_frame_t* frame) {
   12e4c:	55                   	push   %ebp
   12e4d:	89 e5                	mov    %esp,%ebp
   12e4f:	53                   	push   %ebx
   12e50:	83 ec 14             	sub    $0x14,%esp
    if (frame->function_id < sizeof(sys_table) / sizeof(sys_table[0])) {    //当前系统调用存在
   12e53:	8b 45 08             	mov    0x8(%ebp),%eax
   12e56:	8b 40 3c             	mov    0x3c(%eax),%eax
   12e59:	83 f8 0a             	cmp    $0xa,%eax
   12e5c:	77 48                	ja     12ea6 <do_handler_syscall+0x5a>
        sys_handler_t handler = sys_table[frame->function_id];
   12e5e:	8b 45 08             	mov    0x8(%ebp),%eax
   12e61:	8b 40 3c             	mov    0x3c(%eax),%eax
   12e64:	8b 04 85 80 52 01 00 	mov    0x15280(,%eax,4),%eax
   12e6b:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (handler) {
   12e6e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12e72:	74 32                	je     12ea6 <do_handler_syscall+0x5a>
            //直接将4个参数全部传入即可，
            //因为是按从右到左的顺序将参数压栈，所以原始的参数只要是从arg0开始赋值的即可，
            //多余的参数在高地址处，不影响handler对应的真正的系统调用
            int ret = handler(frame->arg0, frame->arg1, frame->arg2, frame->arg3);
   12e74:	8b 45 08             	mov    0x8(%ebp),%eax
   12e77:	8b 58 4c             	mov    0x4c(%eax),%ebx
   12e7a:	8b 45 08             	mov    0x8(%ebp),%eax
   12e7d:	8b 48 48             	mov    0x48(%eax),%ecx
   12e80:	8b 45 08             	mov    0x8(%ebp),%eax
   12e83:	8b 50 44             	mov    0x44(%eax),%edx
   12e86:	8b 45 08             	mov    0x8(%ebp),%eax
   12e89:	8b 40 40             	mov    0x40(%eax),%eax
   12e8c:	53                   	push   %ebx
   12e8d:	51                   	push   %ecx
   12e8e:	52                   	push   %edx
   12e8f:	50                   	push   %eax
   12e90:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12e93:	ff d0                	call   *%eax
   12e95:	83 c4 10             	add    $0x10,%esp
   12e98:	89 45 f0             	mov    %eax,-0x10(%ebp)
            //正常函数返回后会将返回值先存放到eax寄存器中，再eax中的值放入对应接收返回值的内存中
            //此处用eax先接收ret，在调用门返回后再从eax中取处该值
            frame->eax = ret;
   12e9b:	8b 55 f0             	mov    -0x10(%ebp),%edx
   12e9e:	8b 45 08             	mov    0x8(%ebp),%eax
   12ea1:	89 50 30             	mov    %edx,0x30(%eax)
            return;
   12ea4:	eb 30                	jmp    12ed6 <do_handler_syscall+0x8a>
        }
    }
    
    //打印系统调用失败的异常日志
    task_t *task = task_current();
   12ea6:	e8 a2 e8 ff ff       	call   1174d <task_current>
   12eab:	89 45 ec             	mov    %eax,-0x14(%ebp)
    log_printf("task: %s, Unknown syscall_id: %d", task->name, frame->function_id);
   12eae:	8b 45 08             	mov    0x8(%ebp),%eax
   12eb1:	8b 40 3c             	mov    0x3c(%eax),%eax
   12eb4:	8b 55 ec             	mov    -0x14(%ebp),%edx
   12eb7:	83 c2 18             	add    $0x18,%edx
   12eba:	83 ec 04             	sub    $0x4,%esp
   12ebd:	50                   	push   %eax
   12ebe:	52                   	push   %edx
   12ebf:	68 ac 52 01 00       	push   $0x152ac
   12ec4:	e8 e2 18 00 00       	call   147ab <log_printf>
   12ec9:	83 c4 10             	add    $0x10,%esp
    frame->eax = -1;
   12ecc:	8b 45 08             	mov    0x8(%ebp),%eax
   12ecf:	c7 40 30 ff ff ff ff 	movl   $0xffffffff,0x30(%eax)

   12ed6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   12ed9:	c9                   	leave  
   12eda:	c3                   	ret    

00012edb <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   12edb:	55                   	push   %ebp
   12edc:	89 e5                	mov    %esp,%ebp
   12ede:	83 ec 08             	sub    $0x8,%esp
   12ee1:	8b 45 08             	mov    0x8(%ebp),%eax
   12ee4:	8b 55 0c             	mov    0xc(%ebp),%edx
   12ee7:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   12eeb:	89 d0                	mov    %edx,%eax
   12eed:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   12ef0:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12ef4:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   12ef8:	ee                   	out    %al,(%dx)
}
   12ef9:	90                   	nop
   12efa:	c9                   	leave  
   12efb:	c3                   	ret    

00012efc <do_handler_time>:
/**
 * @brief  处理定时器中断的c函数
 * 
 * @param frame 异常栈帧
 */
void do_handler_time(const exception_frame_t *frame) {
   12efc:	55                   	push   %ebp
   12efd:	89 e5                	mov    %esp,%ebp
   12eff:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   12f02:	a1 00 8a 03 00       	mov    0x38a00,%eax
   12f07:	83 c0 01             	add    $0x1,%eax
   12f0a:	a3 00 8a 03 00       	mov    %eax,0x38a00

    //因为ICW4的EOI位为0，所以要手动发送EOI即中断结束信号
    pic_send_eoi(IRQ0_TIMER);
   12f0f:	83 ec 0c             	sub    $0xc,%esp
   12f12:	6a 20                	push   $0x20
   12f14:	e8 b7 fe ff ff       	call   12dd0 <pic_send_eoi>
   12f19:	83 c4 10             	add    $0x10,%esp

    //运行完一个时间片，判断是否需要执行任务切换，若需要则执行
    //必须写在发送eoi之后，防止发生任务切换导致eoi没有发送，从而无法进行下一次中断
    task_slice_end();   
   12f1c:	e8 9e e8 ff ff       	call   117bf <task_slice_end>
}
   12f21:	90                   	nop
   12f22:	c9                   	leave  
   12f23:	c3                   	ret    

00012f24 <init_pit>:

/**
 * @brief  初始化可编程定时器
 * 
 */
static void init_pit(void) {
   12f24:	55                   	push   %ebp
   12f25:	89 e5                	mov    %esp,%ebp
   12f27:	83 ec 18             	sub    $0x18,%esp
    //1.选择定时器的计算器，读取与加载初始值模式，以及工作模式
    outb(PIT_COMMAND_MODE_PORT, PIT_SELECT_COUNTER | PIT_READ_LOAD | PIT_MODE);
   12f2a:	6a 36                	push   $0x36
   12f2c:	6a 43                	push   $0x43
   12f2e:	e8 a8 ff ff ff       	call   12edb <outb>
   12f33:	83 c4 08             	add    $0x8,%esp

    //2.写入16位初始值,即一个中断后期晶体的振荡次数，由确定的加载方式知，先写入低8位，再写入高8位
    uint16_t reload_count = (PIT_OSC_FREQ / 1000) * OS_TICKS_MS;   //确定晶体一个中断周期的震荡次数
   12f36:	66 c7 45 f6 9a 2e    	movw   $0x2e9a,-0xa(%ebp)
    outb(PIT_CHANNEL_DATA_PORT, reload_count & 0xff);
   12f3c:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   12f40:	0f b6 c0             	movzbl %al,%eax
   12f43:	50                   	push   %eax
   12f44:	6a 40                	push   $0x40
   12f46:	e8 90 ff ff ff       	call   12edb <outb>
   12f4b:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL_DATA_PORT, (reload_count >> 8) & 0xff);
   12f4e:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   12f52:	66 c1 e8 08          	shr    $0x8,%ax
   12f56:	0f b6 c0             	movzbl %al,%eax
   12f59:	50                   	push   %eax
   12f5a:	6a 40                	push   $0x40
   12f5c:	e8 7a ff ff ff       	call   12edb <outb>
   12f61:	83 c4 08             	add    $0x8,%esp

    //3.绑定定时器中断的异常处理程序,并开启该中断
    idt_install(IRQ0_TIMER, (idt_handler_t)exception_handler_time);
   12f64:	83 ec 08             	sub    $0x8,%esp
   12f67:	68 7b 02 01 00       	push   $0x1027b
   12f6c:	6a 20                	push   $0x20
   12f6e:	e8 90 fa ff ff       	call   12a03 <idt_install>
   12f73:	83 c4 10             	add    $0x10,%esp
    idt_enable(IRQ0_TIMER);
   12f76:	83 ec 0c             	sub    $0xc,%esp
   12f79:	6a 20                	push   $0x20
   12f7b:	e8 0e fd ff ff       	call   12c8e <idt_enable>
   12f80:	83 c4 10             	add    $0x10,%esp

}
   12f83:	90                   	nop
   12f84:	c9                   	leave  
   12f85:	c3                   	ret    

00012f86 <time_init>:

/**
 * @brief  初始化定时器
 * 
 */
void time_init(void) {
   12f86:	55                   	push   %ebp
   12f87:	89 e5                	mov    %esp,%ebp
   12f89:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   12f8c:	c7 05 00 8a 03 00 00 	movl   $0x0,0x38a00
   12f93:	00 00 00 
    init_pit();
   12f96:	e8 89 ff ff ff       	call   12f24 <init_pit>
   12f9b:	90                   	nop
   12f9c:	c9                   	leave  
   12f9d:	c3                   	ret    

00012f9e <inb>:
static inline uint8_t inb(uint16_t port) {
   12f9e:	55                   	push   %ebp
   12f9f:	89 e5                	mov    %esp,%ebp
   12fa1:	83 ec 14             	sub    $0x14,%esp
   12fa4:	8b 45 08             	mov    0x8(%ebp),%eax
   12fa7:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   12fab:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   12faf:	89 c2                	mov    %eax,%edx
   12fb1:	ec                   	in     (%dx),%al
   12fb2:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   12fb5:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   12fb9:	c9                   	leave  
   12fba:	c3                   	ret    

00012fbb <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   12fbb:	55                   	push   %ebp
   12fbc:	89 e5                	mov    %esp,%ebp
   12fbe:	83 ec 08             	sub    $0x8,%esp
   12fc1:	8b 45 08             	mov    0x8(%ebp),%eax
   12fc4:	8b 55 0c             	mov    0xc(%ebp),%edx
   12fc7:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   12fcb:	89 d0                	mov    %edx,%eax
   12fcd:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   12fd0:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12fd4:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   12fd8:	ee                   	out    %al,(%dx)
}
   12fd9:	90                   	nop
   12fda:	c9                   	leave  
   12fdb:	c3                   	ret    

00012fdc <inw>:
static inline uint16_t inw(uint16_t port) {
   12fdc:	55                   	push   %ebp
   12fdd:	89 e5                	mov    %esp,%ebp
   12fdf:	83 ec 14             	sub    $0x14,%esp
   12fe2:	8b 45 08             	mov    0x8(%ebp),%eax
   12fe5:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__("in %[p], %[v]"  // in默认就是inw, 读取一个字即16位
   12fe9:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   12fed:	89 c2                	mov    %eax,%edx
   12fef:	66 ed                	in     (%dx),%ax
   12ff1:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  return rv;
   12ff5:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
}
   12ff9:	c9                   	leave  
   12ffa:	c3                   	ret    

00012ffb <read_disk>:
 * 
 * @param sector 读取的分区号
 * @param sector_count 读取的分区数量
 * @param buf 缓冲区第一个字节的地址
 */
static void read_disk(uint32_t sector, uint16_t sector_count, uint8_t *buf) {
   12ffb:	55                   	push   %ebp
   12ffc:	89 e5                	mov    %esp,%ebp
   12ffe:	53                   	push   %ebx
   12fff:	83 ec 14             	sub    $0x14,%esp
   13002:	8b 45 0c             	mov    0xc(%ebp),%eax
   13005:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    
    //1.设置以LBA模式进行读取，即将磁盘看作一片连续的扇区
    outb(0x1F6, 0xE0 | (0x0 << 4));              //0xE0 将寄存器第6位置1进入LBA模式，0x0将第4位置0指定驱动器号为主盘
   13009:	68 e0 00 00 00       	push   $0xe0
   1300e:	68 f6 01 00 00       	push   $0x1f6
   13013:	e8 a3 ff ff ff       	call   12fbb <outb>
   13018:	83 c4 08             	add    $0x8,%esp
                                                            //现在一个通道上只有一个盘，默认当作主盘
                    
    //2.初始化各个端口寄存器的高8位
    outb(0x1F2, (uint8_t)(sector_count >> 8));  //读取扇区数的高8位
   1301b:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   1301f:	66 c1 e8 08          	shr    $0x8,%ax
   13023:	0f b6 c0             	movzbl %al,%eax
   13026:	50                   	push   %eax
   13027:	68 f2 01 00 00       	push   $0x1f2
   1302c:	e8 8a ff ff ff       	call   12fbb <outb>
   13031:	83 c4 08             	add    $0x8,%esp
                                                //6字节LBA值，先初始化第456个字节
                                                //我暂时只用到了4个字节的LBA值, 所以第56个字节置0即可
    outb(0x1F3, (uint8_t)(sector >> 24));       //LBA4 
   13034:	8b 45 08             	mov    0x8(%ebp),%eax
   13037:	c1 e8 18             	shr    $0x18,%eax
   1303a:	0f b6 c0             	movzbl %al,%eax
   1303d:	50                   	push   %eax
   1303e:	68 f3 01 00 00       	push   $0x1f3
   13043:	e8 73 ff ff ff       	call   12fbb <outb>
   13048:	83 c4 08             	add    $0x8,%esp
    outb(0x1F4, 0x00);                          //LBA5
   1304b:	6a 00                	push   $0x0
   1304d:	68 f4 01 00 00       	push   $0x1f4
   13052:	e8 64 ff ff ff       	call   12fbb <outb>
   13057:	83 c4 08             	add    $0x8,%esp
    outb(0x1F5, 0x00);                          //LBA6
   1305a:	6a 00                	push   $0x0
   1305c:	68 f5 01 00 00       	push   $0x1f5
   13061:	e8 55 ff ff ff       	call   12fbb <outb>
   13066:	83 c4 08             	add    $0x8,%esp

    //3.初始化各个端口寄存器的低8位
    outb(0x1F2, (uint8_t)sector_count);         //读取扇区数的低8位
   13069:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   1306d:	0f b6 c0             	movzbl %al,%eax
   13070:	50                   	push   %eax
   13071:	68 f2 01 00 00       	push   $0x1f2
   13076:	e8 40 ff ff ff       	call   12fbb <outb>
   1307b:	83 c4 08             	add    $0x8,%esp
    outb(0x1F3, (uint8_t)sector);               //LBA1
   1307e:	8b 45 08             	mov    0x8(%ebp),%eax
   13081:	0f b6 c0             	movzbl %al,%eax
   13084:	50                   	push   %eax
   13085:	68 f3 01 00 00       	push   $0x1f3
   1308a:	e8 2c ff ff ff       	call   12fbb <outb>
   1308f:	83 c4 08             	add    $0x8,%esp
    outb(0x1F4, (uint8_t)(sector >> 8));        //LBA2
   13092:	8b 45 08             	mov    0x8(%ebp),%eax
   13095:	c1 e8 08             	shr    $0x8,%eax
   13098:	0f b6 c0             	movzbl %al,%eax
   1309b:	50                   	push   %eax
   1309c:	68 f4 01 00 00       	push   $0x1f4
   130a1:	e8 15 ff ff ff       	call   12fbb <outb>
   130a6:	83 c4 08             	add    $0x8,%esp
    outb(0x1F5, (uint8_t)(sector >> 16));       //LBA3
   130a9:	8b 45 08             	mov    0x8(%ebp),%eax
   130ac:	c1 e8 10             	shr    $0x10,%eax
   130af:	0f b6 c0             	movzbl %al,%eax
   130b2:	50                   	push   %eax
   130b3:	68 f5 01 00 00       	push   $0x1f5
   130b8:	e8 fe fe ff ff       	call   12fbb <outb>
   130bd:	83 c4 08             	add    $0x8,%esp

    //4.将读取扇区命令 （0x24） 发送到端口 0x1F7
    outb(0x1F7, 0x24);
   130c0:	6a 24                	push   $0x24
   130c2:	68 f7 01 00 00       	push   $0x1f7
   130c7:	e8 ef fe ff ff       	call   12fbb <outb>
   130cc:	83 c4 08             	add    $0x8,%esp

    //5.读取状态端口寄存器，判断是否可读取,若可以则读取，否则阻塞等待
    uint16_t *data_buf = (uint16_t*) buf;       //数据缓冲区，以后每次会读取16位数据
   130cf:	8b 45 10             	mov    0x10(%ebp),%eax
   130d2:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (sector_count--) {
   130d5:	eb 4a                	jmp    13121 <read_disk+0x126>
        while ((inb(0x1F7) & 0x88) != 0x8) {};  //取出状态寄存器3位和7位
   130d7:	90                   	nop
   130d8:	68 f7 01 00 00       	push   $0x1f7
   130dd:	e8 bc fe ff ff       	call   12f9e <inb>
   130e2:	83 c4 04             	add    $0x4,%esp
   130e5:	0f b6 c0             	movzbl %al,%eax
   130e8:	25 88 00 00 00       	and    $0x88,%eax
   130ed:	83 f8 08             	cmp    $0x8,%eax
   130f0:	75 e6                	jne    130d8 <read_disk+0xdd>
                                                //若!=0x8即DRQ位(3位)为0，即非就绪状态
                                                //或者BSY(7位)为1，即忙碌状态，都不可读取

        for (int i = 0; i < SECTOR_SIZE / 2; ++i) {
   130f2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   130f9:	eb 1d                	jmp    13118 <read_disk+0x11d>
            *(data_buf++) = inw(0x1F0);          //从数据端口寄存器中读取16位数据，即2个字节
   130fb:	8b 5d f8             	mov    -0x8(%ebp),%ebx
   130fe:	8d 43 02             	lea    0x2(%ebx),%eax
   13101:	89 45 f8             	mov    %eax,-0x8(%ebp)
   13104:	68 f0 01 00 00       	push   $0x1f0
   13109:	e8 ce fe ff ff       	call   12fdc <inw>
   1310e:	83 c4 04             	add    $0x4,%esp
   13111:	66 89 03             	mov    %ax,(%ebx)
        for (int i = 0; i < SECTOR_SIZE / 2; ++i) {
   13114:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   13118:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   1311f:	7e da                	jle    130fb <read_disk+0x100>
    while (sector_count--) {
   13121:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   13125:	8d 50 ff             	lea    -0x1(%eax),%edx
   13128:	66 89 55 e8          	mov    %dx,-0x18(%ebp)
   1312c:	66 85 c0             	test   %ax,%ax
   1312f:	75 a6                	jne    130d7 <read_disk+0xdc>
        }
        
    }
    
}
   13131:	90                   	nop
   13132:	90                   	nop
   13133:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   13136:	c9                   	leave  
   13137:	c3                   	ret    

00013138 <sys_open>:
 * @param name 文件路径
 * @param flags 打开方式的标志
 * @param ... 
 * @return int 文件描述符 
 */
int sys_open(const char *name, int flags, ...) {
   13138:	55                   	push   %ebp
   13139:	89 e5                	mov    %esp,%ebp
    if (name[0] == '/') {  //打开外部程序
   1313b:	8b 45 08             	mov    0x8(%ebp),%eax
   1313e:	0f b6 00             	movzbl (%eax),%eax
   13141:	3c 2f                	cmp    $0x2f,%al
   13143:	75 25                	jne    1316a <sys_open+0x32>
        read_disk(5000, 80, (uint8_t*)TEMP_ADDR);
   13145:	68 00 00 80 07       	push   $0x7800000
   1314a:	6a 50                	push   $0x50
   1314c:	68 88 13 00 00       	push   $0x1388
   13151:	e8 a5 fe ff ff       	call   12ffb <read_disk>
   13156:	83 c4 0c             	add    $0xc,%esp
        temp_pos = (uint8_t*)TEMP_ADDR;
   13159:	c7 05 04 8a 03 00 00 	movl   $0x7800000,0x38a04
   13160:	00 80 07 
        return TEMP_FILE_ID;
   13163:	b8 64 00 00 00       	mov    $0x64,%eax
   13168:	eb 05                	jmp    1316f <sys_open+0x37>
    }

    return -1;
   1316a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1316f:	c9                   	leave  
   13170:	c3                   	ret    

00013171 <sys_read>:
 * @param file 文件描述符
 * @param ptr 缓冲区地址
 * @param len 读取字节数
 * @return int 成功读取字节数
 */
int sys_read(int file, char *ptr, int len) {
   13171:	55                   	push   %ebp
   13172:	89 e5                	mov    %esp,%ebp
   13174:	83 ec 08             	sub    $0x8,%esp
    if (file == TEMP_FILE_ID) {
   13177:	83 7d 08 64          	cmpl   $0x64,0x8(%ebp)
   1317b:	75 2c                	jne    131a9 <sys_read+0x38>
        kernel_memcpy(ptr, temp_pos, len);
   1317d:	a1 04 8a 03 00       	mov    0x38a04,%eax
   13182:	83 ec 04             	sub    $0x4,%esp
   13185:	ff 75 10             	push   0x10(%ebp)
   13188:	50                   	push   %eax
   13189:	ff 75 0c             	push   0xc(%ebp)
   1318c:	e8 8b 0d 00 00       	call   13f1c <kernel_memcpy>
   13191:	83 c4 10             	add    $0x10,%esp
        temp_pos += len;
   13194:	8b 15 04 8a 03 00    	mov    0x38a04,%edx
   1319a:	8b 45 10             	mov    0x10(%ebp),%eax
   1319d:	01 d0                	add    %edx,%eax
   1319f:	a3 04 8a 03 00       	mov    %eax,0x38a04
        return len;
   131a4:	8b 45 10             	mov    0x10(%ebp),%eax
   131a7:	eb 05                	jmp    131ae <sys_read+0x3d>
    }

    return -1;
   131a9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   131ae:	c9                   	leave  
   131af:	c3                   	ret    

000131b0 <sys_write>:
 * @param file 文件描述符
 * @param ptr 缓冲区地址
 * @param len 写入字节数
 * @return int 成功写入字节数
 */
int sys_write(int file, char *ptr, int len) {
   131b0:	55                   	push   %ebp
   131b1:	89 e5                	mov    %esp,%ebp

}
   131b3:	90                   	nop
   131b4:	5d                   	pop    %ebp
   131b5:	c3                   	ret    

000131b6 <sys_lseek>:
 * @param file 
 * @param offset 
 * @param pos 
 * @return int 
 */
int sys_lseek(int file, int offset, int pos) {
   131b6:	55                   	push   %ebp
   131b7:	89 e5                	mov    %esp,%ebp
    if (file == TEMP_FILE_ID) {
   131b9:	83 7d 08 64          	cmpl   $0x64,0x8(%ebp)
   131bd:	75 14                	jne    131d3 <sys_lseek+0x1d>
        temp_pos = (uint8_t*)(TEMP_ADDR + offset);
   131bf:	8b 45 0c             	mov    0xc(%ebp),%eax
   131c2:	05 00 00 80 07       	add    $0x7800000,%eax
   131c7:	a3 04 8a 03 00       	mov    %eax,0x38a04
        return 0;
   131cc:	b8 00 00 00 00       	mov    $0x0,%eax
   131d1:	eb 05                	jmp    131d8 <sys_lseek+0x22>
    }

    return -1;
   131d3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

}
   131d8:	5d                   	pop    %ebp
   131d9:	c3                   	ret    

000131da <sys_close>:
 * @brief 关闭文件
 * 
 * @param file 
 * @return int 
 */
int sys_close(int file) {
   131da:	55                   	push   %ebp
   131db:	89 e5                	mov    %esp,%ebp
    return 0;
   131dd:	b8 00 00 00 00       	mov    $0x0,%eax
}
   131e2:	5d                   	pop    %ebp
   131e3:	c3                   	ret    

000131e4 <kernel_init>:

/**
 * @brief  对内核进行初始化操作
 * 
 */
void kernel_init(boot_info_t* boot_info) {
   131e4:	55                   	push   %ebp
   131e5:	89 e5                	mov    %esp,%ebp
   131e7:	83 ec 08             	sub    $0x8,%esp
    //1.判断是否检测到可用内存
    ASSERT(boot_info->ram_region_count != 0);
   131ea:	8b 45 08             	mov    0x8(%ebp),%eax
   131ed:	8b 40 50             	mov    0x50(%eax),%eax
   131f0:	85 c0                	test   %eax,%eax
   131f2:	75 19                	jne    1320d <kernel_init+0x29>
   131f4:	68 d0 52 01 00       	push   $0x152d0
   131f9:	68 6c 53 01 00       	push   $0x1536c
   131fe:	6a 22                	push   $0x22
   13200:	68 f4 52 01 00       	push   $0x152f4
   13205:	e8 5f 08 00 00       	call   13a69 <pannic>
   1320a:	83 c4 10             	add    $0x10,%esp
    
    //2.初始化日志程序,便于后期调用
    log_init();
   1320d:	e8 11 15 00 00       	call   14723 <log_init>

    //3.初始化内存管理
    memory_init(boot_info);  
   13212:	83 ec 0c             	sub    $0xc,%esp
   13215:	ff 75 08             	push   0x8(%ebp)
   13218:	e8 1f da ff ff       	call   10c3c <memory_init>
   1321d:	83 c4 10             	add    $0x10,%esp

    //4.初始化并重新加载GDT表
    gdt_init();
   13220:	e8 06 f1 ff ff       	call   1232b <gdt_init>

    //5.初始化并加载中断描述符表IDT
    idt_init();
   13225:	e8 af f8 ff ff       	call   12ad9 <idt_init>

    //6.初始化定时器的中断处理
    time_init();
   1322a:	e8 57 fd ff ff       	call   12f86 <time_init>

    //7.初始化任务管理器
    task_manager_init();
   1322f:	e8 7c e2 ff ff       	call   114b0 <task_manager_init>
    //初始化完成后将在汇编里重新加载内核代码段与数据段的选择子，并为内核程序分配栈空间

}
   13234:	90                   	nop
   13235:	c9                   	leave  
   13236:	c3                   	ret    

00013237 <move_to_first_task>:

/**
 * @brief 跳转到第一个任务进程
 * 
 */
void move_to_first_task(void) {
   13237:	55                   	push   %ebp
   13238:	89 e5                	mov    %esp,%ebp
   1323a:	56                   	push   %esi
   1323b:	53                   	push   %ebx
   1323c:	83 ec 10             	sub    $0x10,%esp
    //1.获取当前任务
    task_t *curr = task_current();
   1323f:	e8 09 e5 ff ff       	call   1174d <task_current>
   13244:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT(curr != 0);
   13247:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1324b:	75 19                	jne    13266 <move_to_first_task+0x2f>
   1324d:	68 29 53 01 00       	push   $0x15329
   13252:	68 78 53 01 00       	push   $0x15378
   13257:	6a 42                	push   $0x42
   13259:	68 f4 52 01 00       	push   $0x152f4
   1325e:	e8 06 08 00 00       	call   13a69 <pannic>
   13263:	83 c4 10             	add    $0x10,%esp

    //2.获取当前任务的tss结构
    tss_t *tss = &(curr->tss);
   13266:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13269:	83 c0 50             	add    $0x50,%eax
   1326c:	89 45 f0             	mov    %eax,-0x10(%ebp)
        "push %[ss]\n\t"
        "push %[esp]\n\t"
        "push %[eflags]\n\t"
        "push %[cs]\n\t"
        "push %[eip]\n\t"
        "iret"::[ss]"r"(tss->ss), [esp]"r"(tss->esp), [eflags]"r"(tss->eflags), [cs]"r"(tss->cs), [eip]"r"(tss->eip)
   1326f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13272:	8b 40 50             	mov    0x50(%eax),%eax
   13275:	8b 55 f0             	mov    -0x10(%ebp),%edx
   13278:	8b 52 38             	mov    0x38(%edx),%edx
   1327b:	8b 4d f0             	mov    -0x10(%ebp),%ecx
   1327e:	8b 49 24             	mov    0x24(%ecx),%ecx
   13281:	8b 5d f0             	mov    -0x10(%ebp),%ebx
   13284:	8b 5b 4c             	mov    0x4c(%ebx),%ebx
   13287:	8b 75 f0             	mov    -0x10(%ebp),%esi
   1328a:	8b 76 20             	mov    0x20(%esi),%esi
     __asm__ __volatile__(
   1328d:	50                   	push   %eax
   1328e:	52                   	push   %edx
   1328f:	51                   	push   %ecx
   13290:	53                   	push   %ebx
   13291:	56                   	push   %esi
   13292:	cf                   	iret   

        
    );
}
   13293:	90                   	nop
   13294:	8d 65 f8             	lea    -0x8(%ebp),%esp
   13297:	5b                   	pop    %ebx
   13298:	5e                   	pop    %esi
   13299:	5d                   	pop    %ebp
   1329a:	c3                   	ret    

0001329b <init_main>:


void init_main(void) {
   1329b:	55                   	push   %ebp
   1329c:	89 e5                	mov    %esp,%ebp
   1329e:	83 ec 08             	sub    $0x8,%esp
    
    log_printf("Kernel is running......");
   132a1:	83 ec 0c             	sub    $0xc,%esp
   132a4:	68 33 53 01 00       	push   $0x15333
   132a9:	e8 fd 14 00 00       	call   147ab <log_printf>
   132ae:	83 c4 10             	add    $0x10,%esp
    log_printf("Name: %s, Version: %s", "KbOS", OS_VERSION);
   132b1:	83 ec 04             	sub    $0x4,%esp
   132b4:	68 4b 53 01 00       	push   $0x1534b
   132b9:	68 51 53 01 00       	push   $0x15351
   132be:	68 56 53 01 00       	push   $0x15356
   132c3:	e8 e3 14 00 00       	call   147ab <log_printf>
   132c8:	83 c4 10             	add    $0x10,%esp


    //当前任务作为任务管理器启用时的第一个任务
    task_first_init();
   132cb:	e8 bd e2 ff ff       	call   1158d <task_first_init>

    //跳转到第一个任务进程去运行
    move_to_first_task();
   132d0:	e8 62 ff ff ff       	call   13237 <move_to_first_task>
   132d5:	90                   	nop
   132d6:	c9                   	leave  
   132d7:	c3                   	ret    

000132d8 <list_init>:
static inline void list_init(list_t *list) {
   132d8:	55                   	push   %ebp
   132d9:	89 e5                	mov    %esp,%ebp
   132db:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   132de:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   132e2:	75 19                	jne    132fd <list_init+0x25>
   132e4:	68 8c 53 01 00       	push   $0x1538c
   132e9:	68 38 54 01 00       	push   $0x15438
   132ee:	6a 31                	push   $0x31
   132f0:	68 a0 53 01 00       	push   $0x153a0
   132f5:	e8 6f 07 00 00       	call   13a69 <pannic>
   132fa:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   132fd:	8b 45 08             	mov    0x8(%ebp),%eax
   13300:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   13307:	8b 45 08             	mov    0x8(%ebp),%eax
   1330a:	8b 50 04             	mov    0x4(%eax),%edx
   1330d:	8b 45 08             	mov    0x8(%ebp),%eax
   13310:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   13312:	8b 45 08             	mov    0x8(%ebp),%eax
   13315:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   1331c:	90                   	nop
   1331d:	c9                   	leave  
   1331e:	c3                   	ret    

0001331f <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   1331f:	55                   	push   %ebp
   13320:	89 e5                	mov    %esp,%ebp
   13322:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   13325:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13329:	75 19                	jne    13344 <list_is_empty+0x25>
   1332b:	68 8c 53 01 00       	push   $0x1538c
   13330:	68 44 54 01 00       	push   $0x15444
   13335:	6a 38                	push   $0x38
   13337:	68 a0 53 01 00       	push   $0x153a0
   1333c:	e8 28 07 00 00       	call   13a69 <pannic>
   13341:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   13344:	8b 45 08             	mov    0x8(%ebp),%eax
   13347:	8b 40 08             	mov    0x8(%eax),%eax
   1334a:	85 c0                	test   %eax,%eax
   1334c:	0f 94 c0             	sete   %al
   1334f:	0f b6 c0             	movzbl %al,%eax
}
   13352:	c9                   	leave  
   13353:	c3                   	ret    

00013354 <mutex_init>:
/**
 * @brief  初始化互斥锁
 *
 * @param mutex
 */
void mutex_init(mutex_t *mutex) {
   13354:	55                   	push   %ebp
   13355:	89 e5                	mov    %esp,%ebp
   13357:	83 ec 08             	sub    $0x8,%esp
  ASSERT(mutex != (mutex_t *)0);
   1335a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1335e:	75 19                	jne    13379 <mutex_init+0x25>
   13360:	68 de 53 01 00       	push   $0x153de
   13365:	68 2c 54 01 00       	push   $0x1542c
   1336a:	6a 15                	push   $0x15
   1336c:	68 f4 53 01 00       	push   $0x153f4
   13371:	e8 f3 06 00 00       	call   13a69 <pannic>
   13376:	83 c4 10             	add    $0x10,%esp

  mutex->locked_count = 0;
   13379:	8b 45 08             	mov    0x8(%ebp),%eax
   1337c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  mutex->owner = (task_t *)0;
   13383:	8b 45 08             	mov    0x8(%ebp),%eax
   13386:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  list_init(&mutex->wait_list);
   1338c:	8b 45 08             	mov    0x8(%ebp),%eax
   1338f:	83 c0 08             	add    $0x8,%eax
   13392:	83 ec 0c             	sub    $0xc,%esp
   13395:	50                   	push   %eax
   13396:	e8 3d ff ff ff       	call   132d8 <list_init>
   1339b:	83 c4 10             	add    $0x10,%esp
}
   1339e:	90                   	nop
   1339f:	c9                   	leave  
   133a0:	c3                   	ret    

000133a1 <mutex_lock>:
/**
 * @brief  加锁
 *
 * @param mutex
 */
void mutex_lock(mutex_t *mutex) {
   133a1:	55                   	push   %ebp
   133a2:	89 e5                	mov    %esp,%ebp
   133a4:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   133a7:	e8 5d fa ff ff       	call   12e09 <idt_enter_protection>
   133ac:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 1. 获取当前任务
  task_t *curr = task_current();
   133af:	e8 99 e3 ff ff       	call   1174d <task_current>
   133b4:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 2.判断该锁是否已被加锁
  if (mutex->locked_count == 0) {  
   133b7:	8b 45 08             	mov    0x8(%ebp),%eax
   133ba:	8b 40 04             	mov    0x4(%eax),%eax
   133bd:	85 c0                	test   %eax,%eax
   133bf:	75 19                	jne    133da <mutex_lock+0x39>
    //3.还未被加锁，则加锁并记录拥有该锁的任务
    mutex->locked_count++;
   133c1:	8b 45 08             	mov    0x8(%ebp),%eax
   133c4:	8b 40 04             	mov    0x4(%eax),%eax
   133c7:	8d 50 01             	lea    0x1(%eax),%edx
   133ca:	8b 45 08             	mov    0x8(%ebp),%eax
   133cd:	89 50 04             	mov    %edx,0x4(%eax)
    mutex->owner = curr;
   133d0:	8b 45 08             	mov    0x8(%ebp),%eax
   133d3:	8b 55 f0             	mov    -0x10(%ebp),%edx
   133d6:	89 10                	mov    %edx,(%eax)
   133d8:	eb 47                	jmp    13421 <mutex_lock+0x80>
  } else if (mutex->owner == curr) {
   133da:	8b 45 08             	mov    0x8(%ebp),%eax
   133dd:	8b 00                	mov    (%eax),%eax
   133df:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   133e2:	75 11                	jne    133f5 <mutex_lock+0x54>
    //4.已被加锁，但当前加锁请求的任务为当前锁的拥有者，直接再加锁即可
    mutex->locked_count++;
   133e4:	8b 45 08             	mov    0x8(%ebp),%eax
   133e7:	8b 40 04             	mov    0x4(%eax),%eax
   133ea:	8d 50 01             	lea    0x1(%eax),%edx
   133ed:	8b 45 08             	mov    0x8(%ebp),%eax
   133f0:	89 50 04             	mov    %edx,0x4(%eax)
   133f3:	eb 2c                	jmp    13421 <mutex_lock+0x80>
  } else {  
    //5.已被加锁，且当前任务不是锁的拥有者，则当前任务进入锁的等待队列，被阻塞住
    task_set_unready(curr);
   133f5:	83 ec 0c             	sub    $0xc,%esp
   133f8:	ff 75 f0             	push   -0x10(%ebp)
   133fb:	e8 d4 e2 ff ff       	call   116d4 <task_set_unready>
   13400:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&mutex->wait_list, &curr->wait_node);
   13403:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13406:	8d 50 48             	lea    0x48(%eax),%edx
   13409:	8b 45 08             	mov    0x8(%ebp),%eax
   1340c:	83 c0 08             	add    $0x8,%eax
   1340f:	83 ec 08             	sub    $0x8,%esp
   13412:	52                   	push   %edx
   13413:	50                   	push   %eax
   13414:	e8 0e 10 00 00       	call   14427 <list_insert_last>
   13419:	83 c4 10             	add    $0x10,%esp
    task_switch();
   1341c:	e8 36 e3 ff ff       	call   11757 <task_switch>
  }

  idt_leave_protection(state);  // TODO:解锁
   13421:	83 ec 0c             	sub    $0xc,%esp
   13424:	ff 75 f4             	push   -0xc(%ebp)
   13427:	e8 f5 f9 ff ff       	call   12e21 <idt_leave_protection>
   1342c:	83 c4 10             	add    $0x10,%esp
}
   1342f:	90                   	nop
   13430:	c9                   	leave  
   13431:	c3                   	ret    

00013432 <mutex_unlock>:
/**
 * @brief  解锁
 *
 * @param mutex
 */
void mutex_unlock(mutex_t *mutex) {
   13432:	55                   	push   %ebp
   13433:	89 e5                	mov    %esp,%ebp
   13435:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   13438:	e8 cc f9 ff ff       	call   12e09 <idt_enter_protection>
   1343d:	89 45 f4             	mov    %eax,-0xc(%ebp)

  task_t *curr = task_current();
   13440:	e8 08 e3 ff ff       	call   1174d <task_current>
   13445:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 1.判断当前任务是否是锁的拥有者
  if (mutex->owner == curr) {
   13448:	8b 45 08             	mov    0x8(%ebp),%eax
   1344b:	8b 00                	mov    (%eax),%eax
   1344d:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   13450:	0f 85 83 00 00 00    	jne    134d9 <mutex_unlock+0xa7>
    //2.当前任务是锁的拥有者,对锁进行一次解锁，并判断是否已完全解锁
    if (--mutex->locked_count == 0) {
   13456:	8b 45 08             	mov    0x8(%ebp),%eax
   13459:	8b 40 04             	mov    0x4(%eax),%eax
   1345c:	8d 50 ff             	lea    -0x1(%eax),%edx
   1345f:	8b 45 08             	mov    0x8(%ebp),%eax
   13462:	89 50 04             	mov    %edx,0x4(%eax)
   13465:	8b 45 08             	mov    0x8(%ebp),%eax
   13468:	8b 40 04             	mov    0x4(%eax),%eax
   1346b:	85 c0                	test   %eax,%eax
   1346d:	75 6a                	jne    134d9 <mutex_unlock+0xa7>
      //3.锁已被完全解锁,将锁的所有者置空
      mutex->owner = (task_t*)0;
   1346f:	8b 45 08             	mov    0x8(%ebp),%eax
   13472:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      //4.判断当前等待队列是否为空
      if (!list_is_empty(&mutex->wait_list)) { 
   13478:	8b 45 08             	mov    0x8(%ebp),%eax
   1347b:	83 c0 08             	add    $0x8,%eax
   1347e:	83 ec 0c             	sub    $0xc,%esp
   13481:	50                   	push   %eax
   13482:	e8 98 fe ff ff       	call   1331f <list_is_empty>
   13487:	83 c4 10             	add    $0x10,%esp
   1348a:	85 c0                	test   %eax,%eax
   1348c:	75 4b                	jne    134d9 <mutex_unlock+0xa7>
        //5.当前等待队列不为空,对锁进行加锁，并交给等待队列的第一个任务
        list_node_t *node = list_remove_first(&mutex->wait_list);
   1348e:	8b 45 08             	mov    0x8(%ebp),%eax
   13491:	83 c0 08             	add    $0x8,%eax
   13494:	83 ec 0c             	sub    $0xc,%esp
   13497:	50                   	push   %eax
   13498:	e8 19 10 00 00       	call   144b6 <list_remove_first>
   1349d:	83 c4 10             	add    $0x10,%esp
   134a0:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t *task_wait = list_node_parent(node, task_t, wait_node);
   134a3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   134a7:	74 08                	je     134b1 <mutex_unlock+0x7f>
   134a9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   134ac:	83 e8 48             	sub    $0x48,%eax
   134af:	eb 05                	jmp    134b6 <mutex_unlock+0x84>
   134b1:	b8 00 00 00 00       	mov    $0x0,%eax
   134b6:	89 45 e8             	mov    %eax,-0x18(%ebp)
        mutex->locked_count = 1;
   134b9:	8b 45 08             	mov    0x8(%ebp),%eax
   134bc:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        mutex->owner = task_wait;
   134c3:	8b 45 08             	mov    0x8(%ebp),%eax
   134c6:	8b 55 e8             	mov    -0x18(%ebp),%edx
   134c9:	89 10                	mov    %edx,(%eax)
        //6.让该任务进入就绪队列
        task_set_ready(task_wait);
   134cb:	83 ec 0c             	sub    $0xc,%esp
   134ce:	ff 75 e8             	push   -0x18(%ebp)
   134d1:	e8 b3 e1 ff ff       	call   11689 <task_set_ready>
   134d6:	83 c4 10             	add    $0x10,%esp
      }
    }
  }

  idt_leave_protection(state);  // TODO:解锁
   134d9:	83 ec 0c             	sub    $0xc,%esp
   134dc:	ff 75 f4             	push   -0xc(%ebp)
   134df:	e8 3d f9 ff ff       	call   12e21 <idt_leave_protection>
   134e4:	83 c4 10             	add    $0x10,%esp
}
   134e7:	90                   	nop
   134e8:	c9                   	leave  
   134e9:	c3                   	ret    

000134ea <list_init>:
static inline void list_init(list_t *list) {
   134ea:	55                   	push   %ebp
   134eb:	89 e5                	mov    %esp,%ebp
   134ed:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   134f0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   134f4:	75 19                	jne    1350f <list_init+0x25>
   134f6:	68 54 54 01 00       	push   $0x15454
   134fb:	68 f8 54 01 00       	push   $0x154f8
   13500:	6a 31                	push   $0x31
   13502:	68 68 54 01 00       	push   $0x15468
   13507:	e8 5d 05 00 00       	call   13a69 <pannic>
   1350c:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   1350f:	8b 45 08             	mov    0x8(%ebp),%eax
   13512:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   13519:	8b 45 08             	mov    0x8(%ebp),%eax
   1351c:	8b 50 04             	mov    0x4(%eax),%edx
   1351f:	8b 45 08             	mov    0x8(%ebp),%eax
   13522:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   13524:	8b 45 08             	mov    0x8(%ebp),%eax
   13527:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   1352e:	90                   	nop
   1352f:	c9                   	leave  
   13530:	c3                   	ret    

00013531 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   13531:	55                   	push   %ebp
   13532:	89 e5                	mov    %esp,%ebp
   13534:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   13537:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1353b:	75 19                	jne    13556 <list_is_empty+0x25>
   1353d:	68 54 54 01 00       	push   $0x15454
   13542:	68 04 55 01 00       	push   $0x15504
   13547:	6a 38                	push   $0x38
   13549:	68 68 54 01 00       	push   $0x15468
   1354e:	e8 16 05 00 00       	call   13a69 <pannic>
   13553:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   13556:	8b 45 08             	mov    0x8(%ebp),%eax
   13559:	8b 40 08             	mov    0x8(%eax),%eax
   1355c:	85 c0                	test   %eax,%eax
   1355e:	0f 94 c0             	sete   %al
   13561:	0f b6 c0             	movzbl %al,%eax
}
   13564:	c9                   	leave  
   13565:	c3                   	ret    

00013566 <sem_init>:
 * @brief  初始化信号量对象
 * 
 * @param sem 信号量对象
 * @param init_count 初始化信号量数量 
 */
void sem_init(sem_t *sem, int init_count) {
   13566:	55                   	push   %ebp
   13567:	89 e5                	mov    %esp,%ebp
   13569:	83 ec 08             	sub    $0x8,%esp
    ASSERT(sem != (sem_t*)0);
   1356c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13570:	75 19                	jne    1358b <sem_init+0x25>
   13572:	68 a6 54 01 00       	push   $0x154a6
   13577:	68 ec 54 01 00       	push   $0x154ec
   1357c:	6a 18                	push   $0x18
   1357e:	68 b8 54 01 00       	push   $0x154b8
   13583:	e8 e1 04 00 00       	call   13a69 <pannic>
   13588:	83 c4 10             	add    $0x10,%esp
    sem->count = 0;
   1358b:	8b 45 08             	mov    0x8(%ebp),%eax
   1358e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list_init(&sem->wait_list);
   13594:	8b 45 08             	mov    0x8(%ebp),%eax
   13597:	83 c0 04             	add    $0x4,%eax
   1359a:	83 ec 0c             	sub    $0xc,%esp
   1359d:	50                   	push   %eax
   1359e:	e8 47 ff ff ff       	call   134ea <list_init>
   135a3:	83 c4 10             	add    $0x10,%esp
}
   135a6:	90                   	nop
   135a7:	c9                   	leave  
   135a8:	c3                   	ret    

000135a9 <sem_wait>:
 *         信号量相当于入场券，获取信号量之后才有资格访问信号量保护的资源
 * 
 * @param sem 
 * @param init_count 
 */
void sem_wait(sem_t *sem) {
   135a9:	55                   	push   %ebp
   135aa:	89 e5                	mov    %esp,%ebp
   135ac:	83 ec 18             	sub    $0x18,%esp
    
    idt_state_t state = idt_enter_protection();//TODO:加锁
   135af:	e8 55 f8 ff ff       	call   12e09 <idt_enter_protection>
   135b4:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //1.判断信号量是否还有剩余
    if(sem->count > 0) {//有剩余，直接使用，任务获取信号量继续执行
   135b7:	8b 45 08             	mov    0x8(%ebp),%eax
   135ba:	8b 00                	mov    (%eax),%eax
   135bc:	85 c0                	test   %eax,%eax
   135be:	7e 0f                	jle    135cf <sem_wait+0x26>
        --sem->count;   
   135c0:	8b 45 08             	mov    0x8(%ebp),%eax
   135c3:	8b 00                	mov    (%eax),%eax
   135c5:	8d 50 ff             	lea    -0x1(%eax),%edx
   135c8:	8b 45 08             	mov    0x8(%ebp),%eax
   135cb:	89 10                	mov    %edx,(%eax)
   135cd:	eb 34                	jmp    13603 <sem_wait+0x5a>
    } else {//没有剩余，任务进入延时队列等待信号量
        task_t *curr = task_current();
   135cf:	e8 79 e1 ff ff       	call   1174d <task_current>
   135d4:	89 45 f0             	mov    %eax,-0x10(%ebp)
        //2.将当前任务从就绪队列中取下
        task_set_unready(curr); 
   135d7:	83 ec 0c             	sub    $0xc,%esp
   135da:	ff 75 f0             	push   -0x10(%ebp)
   135dd:	e8 f2 e0 ff ff       	call   116d4 <task_set_unready>
   135e2:	83 c4 10             	add    $0x10,%esp
        //3.将当前任务加入到信号量等待队列
        list_insert_last(&sem->wait_list, &curr->wait_node); 
   135e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   135e8:	8d 50 48             	lea    0x48(%eax),%edx
   135eb:	8b 45 08             	mov    0x8(%ebp),%eax
   135ee:	83 c0 04             	add    $0x4,%eax
   135f1:	83 ec 08             	sub    $0x8,%esp
   135f4:	52                   	push   %edx
   135f5:	50                   	push   %eax
   135f6:	e8 2c 0e 00 00       	call   14427 <list_insert_last>
   135fb:	83 c4 10             	add    $0x10,%esp
        //4.切换任务
        task_switch();
   135fe:	e8 54 e1 ff ff       	call   11757 <task_switch>
    }

    idt_leave_protection(state);//TODO:解锁
   13603:	83 ec 0c             	sub    $0xc,%esp
   13606:	ff 75 f4             	push   -0xc(%ebp)
   13609:	e8 13 f8 ff ff       	call   12e21 <idt_leave_protection>
   1360e:	83 c4 10             	add    $0x10,%esp
}
   13611:	90                   	nop
   13612:	c9                   	leave  
   13613:	c3                   	ret    

00013614 <sem_notify>:
 *        等待队列中若有任务则直接获取该信号量，继续执行即访问资源
 *         若没有任务，则信号量对象记录的信号量数量加1，预留给下一次获取
 * 
 * @param sem 
 */
void sem_notify(sem_t *sem) {
   13614:	55                   	push   %ebp
   13615:	89 e5                	mov    %esp,%ebp
   13617:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   1361a:	e8 ea f7 ff ff       	call   12e09 <idt_enter_protection>
   1361f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if (!list_is_empty(&sem->wait_list)) {
   13622:	8b 45 08             	mov    0x8(%ebp),%eax
   13625:	83 c0 04             	add    $0x4,%eax
   13628:	83 ec 0c             	sub    $0xc,%esp
   1362b:	50                   	push   %eax
   1362c:	e8 00 ff ff ff       	call   13531 <list_is_empty>
   13631:	83 c4 10             	add    $0x10,%esp
   13634:	85 c0                	test   %eax,%eax
   13636:	75 3b                	jne    13673 <sem_notify+0x5f>
        list_node_t *node = list_remove_first(&sem->wait_list);
   13638:	8b 45 08             	mov    0x8(%ebp),%eax
   1363b:	83 c0 04             	add    $0x4,%eax
   1363e:	83 ec 0c             	sub    $0xc,%esp
   13641:	50                   	push   %eax
   13642:	e8 6f 0e 00 00       	call   144b6 <list_remove_first>
   13647:	83 c4 10             	add    $0x10,%esp
   1364a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t *task = list_node_parent(node, task_t, wait_node);
   1364d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   13651:	74 08                	je     1365b <sem_notify+0x47>
   13653:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13656:	83 e8 48             	sub    $0x48,%eax
   13659:	eb 05                	jmp    13660 <sem_notify+0x4c>
   1365b:	b8 00 00 00 00       	mov    $0x0,%eax
   13660:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   13663:	83 ec 0c             	sub    $0xc,%esp
   13666:	ff 75 ec             	push   -0x14(%ebp)
   13669:	e8 1b e0 ff ff       	call   11689 <task_set_ready>
   1366e:	83 c4 10             	add    $0x10,%esp
   13671:	eb 0d                	jmp    13680 <sem_notify+0x6c>
    } else {
        sem->count++;
   13673:	8b 45 08             	mov    0x8(%ebp),%eax
   13676:	8b 00                	mov    (%eax),%eax
   13678:	8d 50 01             	lea    0x1(%eax),%edx
   1367b:	8b 45 08             	mov    0x8(%ebp),%eax
   1367e:	89 10                	mov    %edx,(%eax)
    }

    idt_leave_protection(state);//TODO:解锁
   13680:	83 ec 0c             	sub    $0xc,%esp
   13683:	ff 75 f4             	push   -0xc(%ebp)
   13686:	e8 96 f7 ff ff       	call   12e21 <idt_leave_protection>
   1368b:	83 c4 10             	add    $0x10,%esp

}
   1368e:	90                   	nop
   1368f:	c9                   	leave  
   13690:	c3                   	ret    

00013691 <sem_count>:

int sem_count(sem_t *sem) {
   13691:	55                   	push   %ebp
   13692:	89 e5                	mov    %esp,%ebp
   13694:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   13697:	e8 6d f7 ff ff       	call   12e09 <idt_enter_protection>
   1369c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   1369f:	8b 45 08             	mov    0x8(%ebp),%eax
   136a2:	8b 00                	mov    (%eax),%eax
   136a4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    idt_leave_protection(state);//TODO:解锁
   136a7:	83 ec 0c             	sub    $0xc,%esp
   136aa:	ff 75 f4             	push   -0xc(%ebp)
   136ad:	e8 6f f7 ff ff       	call   12e21 <idt_leave_protection>
   136b2:	83 c4 10             	add    $0x10,%esp

    return count;
   136b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   136b8:	c9                   	leave  
   136b9:	c3                   	ret    

000136ba <list_init>:
static inline void list_init(list_t *list) {
   136ba:	55                   	push   %ebp
   136bb:	89 e5                	mov    %esp,%ebp
   136bd:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   136c0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   136c4:	75 19                	jne    136df <list_init+0x25>
   136c6:	68 14 55 01 00       	push   $0x15514
   136cb:	68 18 56 01 00       	push   $0x15618
   136d0:	6a 31                	push   $0x31
   136d2:	68 28 55 01 00       	push   $0x15528
   136d7:	e8 8d 03 00 00       	call   13a69 <pannic>
   136dc:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   136df:	8b 45 08             	mov    0x8(%ebp),%eax
   136e2:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   136e9:	8b 45 08             	mov    0x8(%ebp),%eax
   136ec:	8b 50 04             	mov    0x4(%eax),%edx
   136ef:	8b 45 08             	mov    0x8(%ebp),%eax
   136f2:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   136f4:	8b 45 08             	mov    0x8(%ebp),%eax
   136f7:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   136fe:	90                   	nop
   136ff:	c9                   	leave  
   13700:	c3                   	ret    

00013701 <list_get_size>:
static inline int list_get_size(list_t *list) {
   13701:	55                   	push   %ebp
   13702:	89 e5                	mov    %esp,%ebp
   13704:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   13707:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1370b:	75 19                	jne    13726 <list_get_size+0x25>
   1370d:	68 14 55 01 00       	push   $0x15514
   13712:	68 24 56 01 00       	push   $0x15624
   13717:	6a 3e                	push   $0x3e
   13719:	68 28 55 01 00       	push   $0x15528
   1371e:	e8 46 03 00 00       	call   13a69 <pannic>
   13723:	83 c4 10             	add    $0x10,%esp
    return list->size;
   13726:	8b 45 08             	mov    0x8(%ebp),%eax
   13729:	8b 40 08             	mov    0x8(%eax),%eax
}
   1372c:	c9                   	leave  
   1372d:	c3                   	ret    

0001372e <list_get_first>:
static inline list_node_t *list_get_first(list_t *list) {
   1372e:	55                   	push   %ebp
   1372f:	89 e5                	mov    %esp,%ebp
   13731:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   13734:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13738:	75 19                	jne    13753 <list_get_first+0x25>
   1373a:	68 14 55 01 00       	push   $0x15514
   1373f:	68 44 56 01 00       	push   $0x15644
   13744:	6a 44                	push   $0x44
   13746:	68 28 55 01 00       	push   $0x15528
   1374b:	e8 19 03 00 00       	call   13a69 <pannic>
   13750:	83 c4 10             	add    $0x10,%esp
    return list->first;
   13753:	8b 45 08             	mov    0x8(%ebp),%eax
   13756:	8b 00                	mov    (%eax),%eax
}
   13758:	c9                   	leave  
   13759:	c3                   	ret    

0001375a <list_get_last>:

static inline list_node_t *list_get_last(list_t *list) {
   1375a:	55                   	push   %ebp
   1375b:	89 e5                	mov    %esp,%ebp
   1375d:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   13760:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13764:	75 19                	jne    1377f <list_get_last+0x25>
   13766:	68 14 55 01 00       	push   $0x15514
   1376b:	68 34 56 01 00       	push   $0x15634
   13770:	6a 4a                	push   $0x4a
   13772:	68 28 55 01 00       	push   $0x15528
   13777:	e8 ed 02 00 00       	call   13a69 <pannic>
   1377c:	83 c4 10             	add    $0x10,%esp

    return list->last;
   1377f:	8b 45 08             	mov    0x8(%ebp),%eax
   13782:	8b 40 04             	mov    0x4(%eax),%eax
}
   13785:	c9                   	leave  
   13786:	c3                   	ret    

00013787 <list_test>:

#include "tools/list.h"
#include "tools/log.h"
#include "common/types.h"

void list_test(void) {
   13787:	55                   	push   %ebp
   13788:	89 e5                	mov    %esp,%ebp
   1378a:	56                   	push   %esi
   1378b:	53                   	push   %ebx
   1378c:	83 ec 70             	sub    $0x70,%esp
    list_t list;
    list_node_t nodes[5];

    list_init(&list);
   1378f:	83 ec 0c             	sub    $0xc,%esp
   13792:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   13795:	50                   	push   %eax
   13796:	e8 1f ff ff ff       	call   136ba <list_init>
   1379b:	83 c4 10             	add    $0x10,%esp
    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   1379e:	83 ec 0c             	sub    $0xc,%esp
   137a1:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   137a4:	50                   	push   %eax
   137a5:	e8 57 ff ff ff       	call   13701 <list_get_size>
   137aa:	83 c4 10             	add    $0x10,%esp
   137ad:	89 c6                	mov    %eax,%esi
   137af:	83 ec 0c             	sub    $0xc,%esp
   137b2:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   137b5:	50                   	push   %eax
   137b6:	e8 9f ff ff ff       	call   1375a <list_get_last>
   137bb:	83 c4 10             	add    $0x10,%esp
   137be:	89 c3                	mov    %eax,%ebx
   137c0:	83 ec 0c             	sub    $0xc,%esp
   137c3:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   137c6:	50                   	push   %eax
   137c7:	e8 62 ff ff ff       	call   1372e <list_get_first>
   137cc:	83 c4 10             	add    $0x10,%esp
   137cf:	56                   	push   %esi
   137d0:	53                   	push   %ebx
   137d1:	50                   	push   %eax
   137d2:	68 68 55 01 00       	push   $0x15568
   137d7:	e8 cf 0f 00 00       	call   147ab <log_printf>
   137dc:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_insert_first
    for (int i = 0; i < 5; ++i) {
   137df:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   137e6:	eb 3f                	jmp    13827 <list_test+0xa0>
        list_node_t *node = nodes + i;
   137e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   137eb:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   137f2:	8d 45 9c             	lea    -0x64(%ebp),%eax
   137f5:	01 d0                	add    %edx,%eax
   137f7:	89 45 d0             	mov    %eax,-0x30(%ebp)

        log_printf("insert first to list: %d, 0x%x", i, (uint32_t)node);
   137fa:	8b 45 d0             	mov    -0x30(%ebp),%eax
   137fd:	83 ec 04             	sub    $0x4,%esp
   13800:	50                   	push   %eax
   13801:	ff 75 f4             	push   -0xc(%ebp)
   13804:	68 90 55 01 00       	push   $0x15590
   13809:	e8 9d 0f 00 00       	call   147ab <log_printf>
   1380e:	83 c4 10             	add    $0x10,%esp
        list_insert_first(&list, node);
   13811:	83 ec 08             	sub    $0x8,%esp
   13814:	ff 75 d0             	push   -0x30(%ebp)
   13817:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1381a:	50                   	push   %eax
   1381b:	e8 7c 0b 00 00       	call   1439c <list_insert_first>
   13820:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   13823:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   13827:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   1382b:	7e bb                	jle    137e8 <list_test+0x61>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   1382d:	83 ec 0c             	sub    $0xc,%esp
   13830:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   13833:	50                   	push   %eax
   13834:	e8 c8 fe ff ff       	call   13701 <list_get_size>
   13839:	83 c4 10             	add    $0x10,%esp
   1383c:	89 c6                	mov    %eax,%esi
   1383e:	83 ec 0c             	sub    $0xc,%esp
   13841:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   13844:	50                   	push   %eax
   13845:	e8 10 ff ff ff       	call   1375a <list_get_last>
   1384a:	83 c4 10             	add    $0x10,%esp
   1384d:	89 c3                	mov    %eax,%ebx
   1384f:	83 ec 0c             	sub    $0xc,%esp
   13852:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   13855:	50                   	push   %eax
   13856:	e8 d3 fe ff ff       	call   1372e <list_get_first>
   1385b:	83 c4 10             	add    $0x10,%esp
   1385e:	56                   	push   %esi
   1385f:	53                   	push   %ebx
   13860:	50                   	push   %eax
   13861:	68 68 55 01 00       	push   $0x15568
   13866:	e8 40 0f 00 00       	call   147ab <log_printf>
   1386b:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

   
    //测试list_remove_first
    for (int i = 0; i < 5; ++i) {
   1386e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   13875:	eb 2d                	jmp    138a4 <list_test+0x11d>
        list_node_t *node = list_remove_first(&list);
   13877:	83 ec 0c             	sub    $0xc,%esp
   1387a:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1387d:	50                   	push   %eax
   1387e:	e8 33 0c 00 00       	call   144b6 <list_remove_first>
   13883:	83 c4 10             	add    $0x10,%esp
   13886:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        log_printf("remove first: %d, 0x%x", i, (uint32_t)node);
   13889:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   1388c:	83 ec 04             	sub    $0x4,%esp
   1388f:	50                   	push   %eax
   13890:	ff 75 f0             	push   -0x10(%ebp)
   13893:	68 af 55 01 00       	push   $0x155af
   13898:	e8 0e 0f 00 00       	call   147ab <log_printf>
   1389d:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   138a0:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   138a4:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   138a8:	7e cd                	jle    13877 <list_test+0xf0>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   138aa:	83 ec 0c             	sub    $0xc,%esp
   138ad:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   138b0:	50                   	push   %eax
   138b1:	e8 4b fe ff ff       	call   13701 <list_get_size>
   138b6:	83 c4 10             	add    $0x10,%esp
   138b9:	89 c6                	mov    %eax,%esi
   138bb:	83 ec 0c             	sub    $0xc,%esp
   138be:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   138c1:	50                   	push   %eax
   138c2:	e8 93 fe ff ff       	call   1375a <list_get_last>
   138c7:	83 c4 10             	add    $0x10,%esp
   138ca:	89 c3                	mov    %eax,%ebx
   138cc:	83 ec 0c             	sub    $0xc,%esp
   138cf:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   138d2:	50                   	push   %eax
   138d3:	e8 56 fe ff ff       	call   1372e <list_get_first>
   138d8:	83 c4 10             	add    $0x10,%esp
   138db:	56                   	push   %esi
   138dc:	53                   	push   %ebx
   138dd:	50                   	push   %eax
   138de:	68 68 55 01 00       	push   $0x15568
   138e3:	e8 c3 0e 00 00       	call   147ab <log_printf>
   138e8:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    

    //测试list_insert_last
    for (int i = 0; i < 5; ++i) {
   138eb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   138f2:	eb 3f                	jmp    13933 <list_test+0x1ac>
        list_node_t *node = nodes + i;
   138f4:	8b 45 ec             	mov    -0x14(%ebp),%eax
   138f7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   138fe:	8d 45 9c             	lea    -0x64(%ebp),%eax
   13901:	01 d0                	add    %edx,%eax
   13903:	89 45 d8             	mov    %eax,-0x28(%ebp)

        log_printf("insert last to list: %d, 0x%x", i, (uint32_t)node);
   13906:	8b 45 d8             	mov    -0x28(%ebp),%eax
   13909:	83 ec 04             	sub    $0x4,%esp
   1390c:	50                   	push   %eax
   1390d:	ff 75 ec             	push   -0x14(%ebp)
   13910:	68 c6 55 01 00       	push   $0x155c6
   13915:	e8 91 0e 00 00       	call   147ab <log_printf>
   1391a:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&list, node);
   1391d:	83 ec 08             	sub    $0x8,%esp
   13920:	ff 75 d8             	push   -0x28(%ebp)
   13923:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   13926:	50                   	push   %eax
   13927:	e8 fb 0a 00 00       	call   14427 <list_insert_last>
   1392c:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   1392f:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   13933:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   13937:	7e bb                	jle    138f4 <list_test+0x16d>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   13939:	83 ec 0c             	sub    $0xc,%esp
   1393c:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1393f:	50                   	push   %eax
   13940:	e8 bc fd ff ff       	call   13701 <list_get_size>
   13945:	83 c4 10             	add    $0x10,%esp
   13948:	89 c6                	mov    %eax,%esi
   1394a:	83 ec 0c             	sub    $0xc,%esp
   1394d:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   13950:	50                   	push   %eax
   13951:	e8 04 fe ff ff       	call   1375a <list_get_last>
   13956:	83 c4 10             	add    $0x10,%esp
   13959:	89 c3                	mov    %eax,%ebx
   1395b:	83 ec 0c             	sub    $0xc,%esp
   1395e:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   13961:	50                   	push   %eax
   13962:	e8 c7 fd ff ff       	call   1372e <list_get_first>
   13967:	83 c4 10             	add    $0x10,%esp
   1396a:	56                   	push   %esi
   1396b:	53                   	push   %ebx
   1396c:	50                   	push   %eax
   1396d:	68 68 55 01 00       	push   $0x15568
   13972:	e8 34 0e 00 00       	call   147ab <log_printf>
   13977:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_remove_last
    for (int i = 0; i < 5; ++i) {
   1397a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   13981:	eb 2d                	jmp    139b0 <list_test+0x229>
        list_node_t *node = list_remove_last(&list);
   13983:	83 ec 0c             	sub    $0xc,%esp
   13986:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   13989:	50                   	push   %eax
   1398a:	e8 d8 0b 00 00       	call   14567 <list_remove_last>
   1398f:	83 c4 10             	add    $0x10,%esp
   13992:	89 45 dc             	mov    %eax,-0x24(%ebp)
        log_printf("remove last: %d, 0x%x", i, (uint32_t)node);
   13995:	8b 45 dc             	mov    -0x24(%ebp),%eax
   13998:	83 ec 04             	sub    $0x4,%esp
   1399b:	50                   	push   %eax
   1399c:	ff 75 e8             	push   -0x18(%ebp)
   1399f:	68 e4 55 01 00       	push   $0x155e4
   139a4:	e8 02 0e 00 00       	call   147ab <log_printf>
   139a9:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   139ac:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   139b0:	83 7d e8 04          	cmpl   $0x4,-0x18(%ebp)
   139b4:	7e cd                	jle    13983 <list_test+0x1fc>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   139b6:	83 ec 0c             	sub    $0xc,%esp
   139b9:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   139bc:	50                   	push   %eax
   139bd:	e8 3f fd ff ff       	call   13701 <list_get_size>
   139c2:	83 c4 10             	add    $0x10,%esp
   139c5:	89 c6                	mov    %eax,%esi
   139c7:	83 ec 0c             	sub    $0xc,%esp
   139ca:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   139cd:	50                   	push   %eax
   139ce:	e8 87 fd ff ff       	call   1375a <list_get_last>
   139d3:	83 c4 10             	add    $0x10,%esp
   139d6:	89 c3                	mov    %eax,%ebx
   139d8:	83 ec 0c             	sub    $0xc,%esp
   139db:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   139de:	50                   	push   %eax
   139df:	e8 4a fd ff ff       	call   1372e <list_get_first>
   139e4:	83 c4 10             	add    $0x10,%esp
   139e7:	56                   	push   %esi
   139e8:	53                   	push   %ebx
   139e9:	50                   	push   %eax
   139ea:	68 68 55 01 00       	push   $0x15568
   139ef:	e8 b7 0d 00 00       	call   147ab <log_printf>
   139f4:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    
    struct type_t {
        int i;
        list_node_t node;
    }v = {0x123456};
   139f7:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
   139fe:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
   13a05:	c7 45 98 00 00 00 00 	movl   $0x0,-0x68(%ebp)
   13a0c:	c7 45 90 56 34 12 00 	movl   $0x123456,-0x70(%ebp)

    list_node_t *v_node = &v.node;
   13a13:	8d 45 90             	lea    -0x70(%ebp),%eax
   13a16:	83 c0 04             	add    $0x4,%eax
   13a19:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    struct type_t *p = list_node_parent(v_node, struct type_t, node);  
   13a1c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   13a20:	74 08                	je     13a2a <list_test+0x2a3>
   13a22:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   13a25:	83 e8 04             	sub    $0x4,%eax
   13a28:	eb 05                	jmp    13a2f <list_test+0x2a8>
   13a2a:	b8 00 00 00 00       	mov    $0x0,%eax
   13a2f:	89 45 e0             	mov    %eax,-0x20(%ebp)

    log_printf("v addr = 0x%x", (uint32_t)&v);
   13a32:	8d 45 90             	lea    -0x70(%ebp),%eax
   13a35:	83 ec 08             	sub    $0x8,%esp
   13a38:	50                   	push   %eax
   13a39:	68 fa 55 01 00       	push   $0x155fa
   13a3e:	e8 68 0d 00 00       	call   147ab <log_printf>
   13a43:	83 c4 10             	add    $0x10,%esp
    log_printf("p addr = 0x%x", (uint32_t)p);  
   13a46:	8b 45 e0             	mov    -0x20(%ebp),%eax
   13a49:	83 ec 08             	sub    $0x8,%esp
   13a4c:	50                   	push   %eax
   13a4d:	68 08 56 01 00       	push   $0x15608
   13a52:	e8 54 0d 00 00       	call   147ab <log_printf>
   13a57:	83 c4 10             	add    $0x10,%esp

 }
   13a5a:	90                   	nop
   13a5b:	8d 65 f8             	lea    -0x8(%ebp),%esp
   13a5e:	5b                   	pop    %ebx
   13a5f:	5e                   	pop    %esi
   13a60:	5d                   	pop    %ebp
   13a61:	c3                   	ret    

00013a62 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   13a62:	55                   	push   %ebp
   13a63:	89 e5                	mov    %esp,%ebp
   13a65:	f4                   	hlt    
   13a66:	90                   	nop
   13a67:	5d                   	pop    %ebp
   13a68:	c3                   	ret    

00013a69 <pannic>:
 * @param file 异常所在文件绝对路径
 * @param line 异常所在行号
 * @param func 异常所在函数名 
 * @param reason 异常的原因
 */
void pannic(const char *file, int line, const char *func, const char *reason) {
   13a69:	55                   	push   %ebp
   13a6a:	89 e5                	mov    %esp,%ebp
   13a6c:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert faild! %s", reason);
   13a6f:	83 ec 08             	sub    $0x8,%esp
   13a72:	ff 75 14             	push   0x14(%ebp)
   13a75:	68 53 56 01 00       	push   $0x15653
   13a7a:	e8 2c 0d 00 00       	call   147ab <log_printf>
   13a7f:	83 c4 10             	add    $0x10,%esp
    log_printf("file:\t%s\nline:\t%d\nfunc:\t%s", file, line, func);
   13a82:	ff 75 10             	push   0x10(%ebp)
   13a85:	ff 75 0c             	push   0xc(%ebp)
   13a88:	ff 75 08             	push   0x8(%ebp)
   13a8b:	68 64 56 01 00       	push   $0x15664
   13a90:	e8 16 0d 00 00       	call   147ab <log_printf>
   13a95:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   13a98:	e8 c5 ff ff ff       	call   13a62 <hlt>
   13a9d:	eb f9                	jmp    13a98 <pannic+0x2f>

00013a9f <bitmap_byte_count>:
 * @brief  向上取整获取位图数组中有多少字节
 * 
 * @param bit_count  位图数组拥有的bit位数
 * @return int 向上取整得到的字节数
 */
int bitmap_byte_count(int bit_count) {
   13a9f:	55                   	push   %ebp
   13aa0:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8;
   13aa2:	8b 45 08             	mov    0x8(%ebp),%eax
   13aa5:	83 c0 07             	add    $0x7,%eax
   13aa8:	8d 50 07             	lea    0x7(%eax),%edx
   13aab:	85 c0                	test   %eax,%eax
   13aad:	0f 48 c2             	cmovs  %edx,%eax
   13ab0:	c1 f8 03             	sar    $0x3,%eax
}
   13ab3:	5d                   	pop    %ebp
   13ab4:	c3                   	ret    

00013ab5 <bitmap_init>:
 * @param bitmap 需要初始化的位图
 * @param bits 位图所包含的位图数组的起始地址
 * @param count 页的数量
 * @param init_bit 将位图数组的每一位设置为init_bit
 */
void bitmap_init(bitmap_t *bitmap, uint8_t *bits, int count, int init_bit) {
   13ab5:	55                   	push   %ebp
   13ab6:	89 e5                	mov    %esp,%ebp
   13ab8:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   13abb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13abf:	75 19                	jne    13ada <bitmap_init+0x25>
   13ac1:	68 80 56 01 00       	push   $0x15680
   13ac6:	68 14 57 01 00       	push   $0x15714
   13acb:	6a 24                	push   $0x24
   13acd:	68 98 56 01 00       	push   $0x15698
   13ad2:	e8 92 ff ff ff       	call   13a69 <pannic>
   13ad7:	83 c4 10             	add    $0x10,%esp
    ASSERT(bits != (uint8_t*)0);
   13ada:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13ade:	75 19                	jne    13af9 <bitmap_init+0x44>
   13ae0:	68 d0 56 01 00       	push   $0x156d0
   13ae5:	68 14 57 01 00       	push   $0x15714
   13aea:	6a 25                	push   $0x25
   13aec:	68 98 56 01 00       	push   $0x15698
   13af1:	e8 73 ff ff ff       	call   13a69 <pannic>
   13af6:	83 c4 10             	add    $0x10,%esp

    bitmap->bit_count = count;
   13af9:	8b 45 08             	mov    0x8(%ebp),%eax
   13afc:	8b 55 10             	mov    0x10(%ebp),%edx
   13aff:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   13b01:	8b 45 08             	mov    0x8(%ebp),%eax
   13b04:	8b 55 0c             	mov    0xc(%ebp),%edx
   13b07:	89 50 04             	mov    %edx,0x4(%eax)

    //计算该位图需要多少字节
    int bytes = bitmap_byte_count(bitmap->bit_count);
   13b0a:	8b 45 08             	mov    0x8(%ebp),%eax
   13b0d:	8b 00                	mov    (%eax),%eax
   13b0f:	83 ec 0c             	sub    $0xc,%esp
   13b12:	50                   	push   %eax
   13b13:	e8 87 ff ff ff       	call   13a9f <bitmap_byte_count>
   13b18:	83 c4 10             	add    $0x10,%esp
   13b1b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    kernel_memset(bitmap->bits, init_bit ? 0xff : 0, bytes);
   13b1e:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   13b22:	74 07                	je     13b2b <bitmap_init+0x76>
   13b24:	ba ff 00 00 00       	mov    $0xff,%edx
   13b29:	eb 05                	jmp    13b30 <bitmap_init+0x7b>
   13b2b:	ba 00 00 00 00       	mov    $0x0,%edx
   13b30:	8b 45 08             	mov    0x8(%ebp),%eax
   13b33:	8b 40 04             	mov    0x4(%eax),%eax
   13b36:	83 ec 04             	sub    $0x4,%esp
   13b39:	ff 75 f4             	push   -0xc(%ebp)
   13b3c:	52                   	push   %edx
   13b3d:	50                   	push   %eax
   13b3e:	e8 28 04 00 00       	call   13f6b <kernel_memset>
   13b43:	83 c4 10             	add    $0x10,%esp

}
   13b46:	90                   	nop
   13b47:	c9                   	leave  
   13b48:	c3                   	ret    

00013b49 <bitmap_get_bit>:
 * 
 * @param bitmap 
 * @param index 
 * @return uint8_t 
 */
uint8_t bitmap_get_bit(bitmap_t *bitmap, int index) {
   13b49:	55                   	push   %ebp
   13b4a:	89 e5                	mov    %esp,%ebp
   13b4c:	53                   	push   %ebx
   13b4d:	83 ec 04             	sub    $0x4,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   13b50:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13b54:	75 19                	jne    13b6f <bitmap_get_bit+0x26>
   13b56:	68 80 56 01 00       	push   $0x15680
   13b5b:	68 20 57 01 00       	push   $0x15720
   13b60:	6a 39                	push   $0x39
   13b62:	68 98 56 01 00       	push   $0x15698
   13b67:	e8 fd fe ff ff       	call   13a69 <pannic>
   13b6c:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0);
   13b6f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13b73:	79 19                	jns    13b8e <bitmap_get_bit+0x45>
   13b75:	68 e4 56 01 00       	push   $0x156e4
   13b7a:	68 20 57 01 00       	push   $0x15720
   13b7f:	6a 3a                	push   $0x3a
   13b81:	68 98 56 01 00       	push   $0x15698
   13b86:	e8 de fe ff ff       	call   13a69 <pannic>
   13b8b:	83 c4 10             	add    $0x10,%esp

    return (bitmap->bits[index / 8] & (1 << (index % 8)));
   13b8e:	8b 45 08             	mov    0x8(%ebp),%eax
   13b91:	8b 48 04             	mov    0x4(%eax),%ecx
   13b94:	8b 45 0c             	mov    0xc(%ebp),%eax
   13b97:	8d 50 07             	lea    0x7(%eax),%edx
   13b9a:	85 c0                	test   %eax,%eax
   13b9c:	0f 48 c2             	cmovs  %edx,%eax
   13b9f:	c1 f8 03             	sar    $0x3,%eax
   13ba2:	01 c8                	add    %ecx,%eax
   13ba4:	0f b6 00             	movzbl (%eax),%eax
   13ba7:	89 c3                	mov    %eax,%ebx
   13ba9:	8b 45 0c             	mov    0xc(%ebp),%eax
   13bac:	83 e0 07             	and    $0x7,%eax
   13baf:	ba 01 00 00 00       	mov    $0x1,%edx
   13bb4:	89 c1                	mov    %eax,%ecx
   13bb6:	d3 e2                	shl    %cl,%edx
   13bb8:	89 d0                	mov    %edx,%eax
   13bba:	21 d8                	and    %ebx,%eax
}
   13bbc:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   13bbf:	c9                   	leave  
   13bc0:	c3                   	ret    

00013bc1 <bitmap_set_bit>:
 * @param bitmap 
 * @param index 
 * @param count 
 * @param bit 
 */
void bitmap_set_bit(bitmap_t *bitmap, int index, int count, int bit) {
   13bc1:	55                   	push   %ebp
   13bc2:	89 e5                	mov    %esp,%ebp
   13bc4:	56                   	push   %esi
   13bc5:	53                   	push   %ebx
   13bc6:	83 ec 10             	sub    $0x10,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   13bc9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13bcd:	75 19                	jne    13be8 <bitmap_set_bit+0x27>
   13bcf:	68 80 56 01 00       	push   $0x15680
   13bd4:	68 30 57 01 00       	push   $0x15730
   13bd9:	6a 48                	push   $0x48
   13bdb:	68 98 56 01 00       	push   $0x15698
   13be0:	e8 84 fe ff ff       	call   13a69 <pannic>
   13be5:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0 && count >= 0);
   13be8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13bec:	78 06                	js     13bf4 <bitmap_set_bit+0x33>
   13bee:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   13bf2:	79 19                	jns    13c0d <bitmap_set_bit+0x4c>
   13bf4:	68 ef 56 01 00       	push   $0x156ef
   13bf9:	68 30 57 01 00       	push   $0x15730
   13bfe:	6a 49                	push   $0x49
   13c00:	68 98 56 01 00       	push   $0x15698
   13c05:	e8 5f fe ff ff       	call   13a69 <pannic>
   13c0a:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   13c0d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   13c14:	e9 92 00 00 00       	jmp    13cab <bitmap_set_bit+0xea>
        if (bit) {
   13c19:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   13c1d:	74 42                	je     13c61 <bitmap_set_bit+0xa0>
            bitmap->bits[index / 8] |= (1 << (index % 8));
   13c1f:	8b 45 08             	mov    0x8(%ebp),%eax
   13c22:	8b 48 04             	mov    0x4(%eax),%ecx
   13c25:	8b 45 0c             	mov    0xc(%ebp),%eax
   13c28:	8d 50 07             	lea    0x7(%eax),%edx
   13c2b:	85 c0                	test   %eax,%eax
   13c2d:	0f 48 c2             	cmovs  %edx,%eax
   13c30:	c1 f8 03             	sar    $0x3,%eax
   13c33:	89 c2                	mov    %eax,%edx
   13c35:	89 d0                	mov    %edx,%eax
   13c37:	01 c8                	add    %ecx,%eax
   13c39:	0f b6 00             	movzbl (%eax),%eax
   13c3c:	89 c6                	mov    %eax,%esi
   13c3e:	8b 45 0c             	mov    0xc(%ebp),%eax
   13c41:	83 e0 07             	and    $0x7,%eax
   13c44:	bb 01 00 00 00       	mov    $0x1,%ebx
   13c49:	89 c1                	mov    %eax,%ecx
   13c4b:	d3 e3                	shl    %cl,%ebx
   13c4d:	89 d8                	mov    %ebx,%eax
   13c4f:	89 f1                	mov    %esi,%ecx
   13c51:	09 c1                	or     %eax,%ecx
   13c53:	8b 45 08             	mov    0x8(%ebp),%eax
   13c56:	8b 40 04             	mov    0x4(%eax),%eax
   13c59:	01 d0                	add    %edx,%eax
   13c5b:	89 ca                	mov    %ecx,%edx
   13c5d:	88 10                	mov    %dl,(%eax)
   13c5f:	eb 42                	jmp    13ca3 <bitmap_set_bit+0xe2>
        } else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   13c61:	8b 45 08             	mov    0x8(%ebp),%eax
   13c64:	8b 48 04             	mov    0x4(%eax),%ecx
   13c67:	8b 45 0c             	mov    0xc(%ebp),%eax
   13c6a:	8d 50 07             	lea    0x7(%eax),%edx
   13c6d:	85 c0                	test   %eax,%eax
   13c6f:	0f 48 c2             	cmovs  %edx,%eax
   13c72:	c1 f8 03             	sar    $0x3,%eax
   13c75:	89 c2                	mov    %eax,%edx
   13c77:	89 d0                	mov    %edx,%eax
   13c79:	01 c8                	add    %ecx,%eax
   13c7b:	0f b6 00             	movzbl (%eax),%eax
   13c7e:	89 c6                	mov    %eax,%esi
   13c80:	8b 45 0c             	mov    0xc(%ebp),%eax
   13c83:	83 e0 07             	and    $0x7,%eax
   13c86:	bb 01 00 00 00       	mov    $0x1,%ebx
   13c8b:	89 c1                	mov    %eax,%ecx
   13c8d:	d3 e3                	shl    %cl,%ebx
   13c8f:	89 d8                	mov    %ebx,%eax
   13c91:	f7 d0                	not    %eax
   13c93:	89 f1                	mov    %esi,%ecx
   13c95:	21 c1                	and    %eax,%ecx
   13c97:	8b 45 08             	mov    0x8(%ebp),%eax
   13c9a:	8b 40 04             	mov    0x4(%eax),%eax
   13c9d:	01 d0                	add    %edx,%eax
   13c9f:	89 ca                	mov    %ecx,%edx
   13ca1:	88 10                	mov    %dl,(%eax)
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   13ca3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   13ca7:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   13cab:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13cae:	3b 45 10             	cmp    0x10(%ebp),%eax
   13cb1:	7d 0e                	jge    13cc1 <bitmap_set_bit+0x100>
   13cb3:	8b 45 08             	mov    0x8(%ebp),%eax
   13cb6:	8b 00                	mov    (%eax),%eax
   13cb8:	39 45 0c             	cmp    %eax,0xc(%ebp)
   13cbb:	0f 8c 58 ff ff ff    	jl     13c19 <bitmap_set_bit+0x58>
        }
    }
}
   13cc1:	90                   	nop
   13cc2:	8d 65 f8             	lea    -0x8(%ebp),%esp
   13cc5:	5b                   	pop    %ebx
   13cc6:	5e                   	pop    %esi
   13cc7:	5d                   	pop    %ebp
   13cc8:	c3                   	ret    

00013cc9 <bitmap_is_set>:
 * 
 * @param bitmap 
 * @param index 
 * @return int 
 */
int bitmap_is_set(bitmap_t *bitmap, int index) {
   13cc9:	55                   	push   %ebp
   13cca:	89 e5                	mov    %esp,%ebp
   13ccc:	83 ec 08             	sub    $0x8,%esp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   13ccf:	83 ec 08             	sub    $0x8,%esp
   13cd2:	ff 75 0c             	push   0xc(%ebp)
   13cd5:	ff 75 08             	push   0x8(%ebp)
   13cd8:	e8 6c fe ff ff       	call   13b49 <bitmap_get_bit>
   13cdd:	83 c4 10             	add    $0x10,%esp
   13ce0:	84 c0                	test   %al,%al
   13ce2:	0f 95 c0             	setne  %al
   13ce5:	0f b6 c0             	movzbl %al,%eax
}
   13ce8:	c9                   	leave  
   13ce9:	c3                   	ret    

00013cea <bitmap_alloc_nbits>:
 * @param bitmap 
 * @param bit 当某一位的值为bit时表示该位空闲，可供分配
 * @param count 
 * @return int 
 */
int bitmap_alloc_nbits(bitmap_t *bitmap, int bit, int count) {
   13cea:	55                   	push   %ebp
   13ceb:	89 e5                	mov    %esp,%ebp
   13ced:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   13cf0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13cf4:	75 19                	jne    13d0f <bitmap_alloc_nbits+0x25>
   13cf6:	68 80 56 01 00       	push   $0x15680
   13cfb:	68 40 57 01 00       	push   $0x15740
   13d00:	6a 68                	push   $0x68
   13d02:	68 98 56 01 00       	push   $0x15698
   13d07:	e8 5d fd ff ff       	call   13a69 <pannic>
   13d0c:	83 c4 10             	add    $0x10,%esp
    ASSERT(count >= 0);
   13d0f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   13d13:	79 19                	jns    13d2e <bitmap_alloc_nbits+0x44>
   13d15:	68 08 57 01 00       	push   $0x15708
   13d1a:	68 40 57 01 00       	push   $0x15740
   13d1f:	6a 69                	push   $0x69
   13d21:	68 98 56 01 00       	push   $0x15698
   13d26:	e8 3e fd ff ff       	call   13a69 <pannic>
   13d2b:	83 c4 10             	add    $0x10,%esp

    int search_index = 0;
   13d2e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    int ok_index = -1;
   13d35:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
    while (search_index < bitmap->bit_count) {
   13d3c:	e9 8f 00 00 00       	jmp    13dd0 <bitmap_alloc_nbits+0xe6>
        //确定可分配空间的起始索引
        if (bitmap_get_bit(bitmap, search_index) != bit) {
   13d41:	83 ec 08             	sub    $0x8,%esp
   13d44:	ff 75 f4             	push   -0xc(%ebp)
   13d47:	ff 75 08             	push   0x8(%ebp)
   13d4a:	e8 fa fd ff ff       	call   13b49 <bitmap_get_bit>
   13d4f:	83 c4 10             	add    $0x10,%esp
   13d52:	0f b6 c0             	movzbl %al,%eax
   13d55:	39 45 0c             	cmp    %eax,0xc(%ebp)
   13d58:	74 06                	je     13d60 <bitmap_alloc_nbits+0x76>
            search_index++;
   13d5a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
            continue;
   13d5e:	eb 70                	jmp    13dd0 <bitmap_alloc_nbits+0xe6>
        }

        //记录可分配空间的起始索引
        ok_index = search_index;
   13d60:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13d63:	89 45 f0             	mov    %eax,-0x10(%ebp)

        //判断该空间是否大小满足要求
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   13d66:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
   13d6d:	eb 2d                	jmp    13d9c <bitmap_alloc_nbits+0xb2>
            //空间大小不满足要求, 分配失败
            if (bitmap_get_bit(bitmap, search_index++) != bit) {
   13d6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13d72:	8d 50 01             	lea    0x1(%eax),%edx
   13d75:	89 55 f4             	mov    %edx,-0xc(%ebp)
   13d78:	83 ec 08             	sub    $0x8,%esp
   13d7b:	50                   	push   %eax
   13d7c:	ff 75 08             	push   0x8(%ebp)
   13d7f:	e8 c5 fd ff ff       	call   13b49 <bitmap_get_bit>
   13d84:	83 c4 10             	add    $0x10,%esp
   13d87:	0f b6 c0             	movzbl %al,%eax
   13d8a:	39 45 0c             	cmp    %eax,0xc(%ebp)
   13d8d:	74 09                	je     13d98 <bitmap_alloc_nbits+0xae>
                ok_index = -1;
   13d8f:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
                break;
   13d96:	eb 16                	jmp    13dae <bitmap_alloc_nbits+0xc4>
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   13d98:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   13d9c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   13d9f:	3b 45 10             	cmp    0x10(%ebp),%eax
   13da2:	7d 0a                	jge    13dae <bitmap_alloc_nbits+0xc4>
   13da4:	8b 45 08             	mov    0x8(%ebp),%eax
   13da7:	8b 00                	mov    (%eax),%eax
   13da9:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   13dac:	7c c1                	jl     13d6f <bitmap_alloc_nbits+0x85>
            }
        }

        if (ok_index != -1) {//分配成功
   13dae:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
   13db2:	74 1c                	je     13dd0 <bitmap_alloc_nbits+0xe6>
            //将该片空间标记为已分配状态, 并返回起始索引
            bitmap_set_bit(bitmap, ok_index, count, ~bit);
   13db4:	8b 45 0c             	mov    0xc(%ebp),%eax
   13db7:	f7 d0                	not    %eax
   13db9:	50                   	push   %eax
   13dba:	ff 75 10             	push   0x10(%ebp)
   13dbd:	ff 75 f0             	push   -0x10(%ebp)
   13dc0:	ff 75 08             	push   0x8(%ebp)
   13dc3:	e8 f9 fd ff ff       	call   13bc1 <bitmap_set_bit>
   13dc8:	83 c4 10             	add    $0x10,%esp
            return ok_index;
   13dcb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13dce:	eb 13                	jmp    13de3 <bitmap_alloc_nbits+0xf9>
    while (search_index < bitmap->bit_count) {
   13dd0:	8b 45 08             	mov    0x8(%ebp),%eax
   13dd3:	8b 00                	mov    (%eax),%eax
   13dd5:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   13dd8:	0f 8c 63 ff ff ff    	jl     13d41 <bitmap_alloc_nbits+0x57>
        }
    }
    
    //遍历完整个位图也没有满足要求的空间则返回-1
    return -1;
   13dde:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

   13de3:	c9                   	leave  
   13de4:	c3                   	ret    

00013de5 <kernel_strcpy>:
 * @brief  拷贝字符串
 *
 * @param dest 目标字符串
 * @param src  源字符串
 */
void kernel_strcpy(char *dest, const char *src) {
   13de5:	55                   	push   %ebp
   13de6:	89 e5                	mov    %esp,%ebp
  // 1.判断是否为NULL
  if (!dest || !src) return;
   13de8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13dec:	74 3b                	je     13e29 <kernel_strcpy+0x44>
   13dee:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13df2:	74 35                	je     13e29 <kernel_strcpy+0x44>

  // 2.拷贝 src '\0' 以前的部分到 dest中
  // TODO:完成（访问未初始化的内存）的异常中断后就只判断src是否读到'\0'
  while (*dest && *src) {
   13df4:	eb 17                	jmp    13e0d <kernel_strcpy+0x28>
    *(dest++) = *(src++);
   13df6:	8b 55 0c             	mov    0xc(%ebp),%edx
   13df9:	8d 42 01             	lea    0x1(%edx),%eax
   13dfc:	89 45 0c             	mov    %eax,0xc(%ebp)
   13dff:	8b 45 08             	mov    0x8(%ebp),%eax
   13e02:	8d 48 01             	lea    0x1(%eax),%ecx
   13e05:	89 4d 08             	mov    %ecx,0x8(%ebp)
   13e08:	0f b6 12             	movzbl (%edx),%edx
   13e0b:	88 10                	mov    %dl,(%eax)
  while (*dest && *src) {
   13e0d:	8b 45 08             	mov    0x8(%ebp),%eax
   13e10:	0f b6 00             	movzbl (%eax),%eax
   13e13:	84 c0                	test   %al,%al
   13e15:	74 0a                	je     13e21 <kernel_strcpy+0x3c>
   13e17:	8b 45 0c             	mov    0xc(%ebp),%eax
   13e1a:	0f b6 00             	movzbl (%eax),%eax
   13e1d:	84 c0                	test   %al,%al
   13e1f:	75 d5                	jne    13df6 <kernel_strcpy+0x11>
  }

  // 3.添加结束符
  *dest = '\0';
   13e21:	8b 45 08             	mov    0x8(%ebp),%eax
   13e24:	c6 00 00             	movb   $0x0,(%eax)
   13e27:	eb 01                	jmp    13e2a <kernel_strcpy+0x45>
  if (!dest || !src) return;
   13e29:	90                   	nop
}
   13e2a:	5d                   	pop    %ebp
   13e2b:	c3                   	ret    

00013e2c <kernel_strncpy>:
 *
 * @param dest 目的字符串
 * @param src 源字符串
 * @param size 拷贝字符串的长度，包含'\0'
 */
void kernel_strncpy(char *dest, const char *src, int size) {
   13e2c:	55                   	push   %ebp
   13e2d:	89 e5                	mov    %esp,%ebp
  // 1.判断是否需要拷贝
  if (!dest || !src || !size) return;
   13e2f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13e33:	74 45                	je     13e7a <kernel_strncpy+0x4e>
   13e35:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13e39:	74 3f                	je     13e7a <kernel_strncpy+0x4e>
   13e3b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   13e3f:	74 39                	je     13e7a <kernel_strncpy+0x4e>

  // 2.size的大小包含了'\0'，所以要预留一个空间给'\0'，只能拷贝 size - 1个字符
  while ((size-- > 1) && (*src)) {
   13e41:	eb 17                	jmp    13e5a <kernel_strncpy+0x2e>
    *(dest++) = *(src++);
   13e43:	8b 55 0c             	mov    0xc(%ebp),%edx
   13e46:	8d 42 01             	lea    0x1(%edx),%eax
   13e49:	89 45 0c             	mov    %eax,0xc(%ebp)
   13e4c:	8b 45 08             	mov    0x8(%ebp),%eax
   13e4f:	8d 48 01             	lea    0x1(%eax),%ecx
   13e52:	89 4d 08             	mov    %ecx,0x8(%ebp)
   13e55:	0f b6 12             	movzbl (%edx),%edx
   13e58:	88 10                	mov    %dl,(%eax)
  while ((size-- > 1) && (*src)) {
   13e5a:	8b 45 10             	mov    0x10(%ebp),%eax
   13e5d:	8d 50 ff             	lea    -0x1(%eax),%edx
   13e60:	89 55 10             	mov    %edx,0x10(%ebp)
   13e63:	83 f8 01             	cmp    $0x1,%eax
   13e66:	7e 0a                	jle    13e72 <kernel_strncpy+0x46>
   13e68:	8b 45 0c             	mov    0xc(%ebp),%eax
   13e6b:	0f b6 00             	movzbl (%eax),%eax
   13e6e:	84 c0                	test   %al,%al
   13e70:	75 d1                	jne    13e43 <kernel_strncpy+0x17>
  }

  // 3.添加结束符
  *dest = '\0';
   13e72:	8b 45 08             	mov    0x8(%ebp),%eax
   13e75:	c6 00 00             	movb   $0x0,(%eax)
   13e78:	eb 01                	jmp    13e7b <kernel_strncpy+0x4f>
  if (!dest || !src || !size) return;
   13e7a:	90                   	nop
}
   13e7b:	5d                   	pop    %ebp
   13e7c:	c3                   	ret    

00013e7d <kernel_strncmp>:
 * @param s2 字符串2
 * @param size 比较前比较的子串长度，从下标0开始到(size - 1)
 *
 * @return int ==: 0, > : 1, < : -1
 */
int kernel_strncmp(const char *s1, const char *s2, int size) {
   13e7d:	55                   	push   %ebp
   13e7e:	89 e5                	mov    %esp,%ebp
  if (!s1 || !s2) return 0;
   13e80:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13e84:	74 06                	je     13e8c <kernel_strncmp+0xf>
   13e86:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13e8a:	75 0f                	jne    13e9b <kernel_strncmp+0x1e>
   13e8c:	b8 00 00 00 00       	mov    $0x0,%eax
   13e91:	eb 52                	jmp    13ee5 <kernel_strncmp+0x68>

  while (*s1 && *s2 && --size && *s1 == *s2) {
    ++s1;
   13e93:	83 45 08 01          	addl   $0x1,0x8(%ebp)
    ++s2;
   13e97:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
  while (*s1 && *s2 && --size && *s1 == *s2) {
   13e9b:	8b 45 08             	mov    0x8(%ebp),%eax
   13e9e:	0f b6 00             	movzbl (%eax),%eax
   13ea1:	84 c0                	test   %al,%al
   13ea3:	74 24                	je     13ec9 <kernel_strncmp+0x4c>
   13ea5:	8b 45 0c             	mov    0xc(%ebp),%eax
   13ea8:	0f b6 00             	movzbl (%eax),%eax
   13eab:	84 c0                	test   %al,%al
   13ead:	74 1a                	je     13ec9 <kernel_strncmp+0x4c>
   13eaf:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   13eb3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   13eb7:	74 10                	je     13ec9 <kernel_strncmp+0x4c>
   13eb9:	8b 45 08             	mov    0x8(%ebp),%eax
   13ebc:	0f b6 10             	movzbl (%eax),%edx
   13ebf:	8b 45 0c             	mov    0xc(%ebp),%eax
   13ec2:	0f b6 00             	movzbl (%eax),%eax
   13ec5:	38 c2                	cmp    %al,%dl
   13ec7:	74 ca                	je     13e93 <kernel_strncmp+0x16>
  }

  if (*s1 > *s2)
   13ec9:	8b 45 08             	mov    0x8(%ebp),%eax
   13ecc:	0f b6 10             	movzbl (%eax),%edx
   13ecf:	8b 45 0c             	mov    0xc(%ebp),%eax
   13ed2:	0f b6 00             	movzbl (%eax),%eax
   13ed5:	38 c2                	cmp    %al,%dl
   13ed7:	7e 07                	jle    13ee0 <kernel_strncmp+0x63>
    return 1;
   13ed9:	b8 01 00 00 00       	mov    $0x1,%eax
   13ede:	eb 05                	jmp    13ee5 <kernel_strncmp+0x68>
  else if (*s1 < *s1)
    return -1;
  else
    return 0;
   13ee0:	b8 00 00 00 00       	mov    $0x0,%eax
}
   13ee5:	5d                   	pop    %ebp
   13ee6:	c3                   	ret    

00013ee7 <kernel_strlen>:
 * @brief  获取字符串str的长度, 不含'\0'
 *
 * @param str
 * @return int
 */
int kernel_strlen(const char *str) {
   13ee7:	55                   	push   %ebp
   13ee8:	89 e5                	mov    %esp,%ebp
   13eea:	83 ec 10             	sub    $0x10,%esp
  if (!str) return 0;
   13eed:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13ef1:	75 07                	jne    13efa <kernel_strlen+0x13>
   13ef3:	b8 00 00 00 00       	mov    $0x0,%eax
   13ef8:	eb 20                	jmp    13f1a <kernel_strlen+0x33>

  int len = 0;
   13efa:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  while (*(str++)) len++;
   13f01:	eb 04                	jmp    13f07 <kernel_strlen+0x20>
   13f03:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   13f07:	8b 45 08             	mov    0x8(%ebp),%eax
   13f0a:	8d 50 01             	lea    0x1(%eax),%edx
   13f0d:	89 55 08             	mov    %edx,0x8(%ebp)
   13f10:	0f b6 00             	movzbl (%eax),%eax
   13f13:	84 c0                	test   %al,%al
   13f15:	75 ec                	jne    13f03 <kernel_strlen+0x1c>

  return len;
   13f17:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   13f1a:	c9                   	leave  
   13f1b:	c3                   	ret    

00013f1c <kernel_memcpy>:
 *
 * @param dest 目的内存的起始地址
 * @param src 原内存的起始地址
 * @param size 复制的内存字节大小
 */
void kernel_memcpy(void *dest, const void *src, int size) {
   13f1c:	55                   	push   %ebp
   13f1d:	89 e5                	mov    %esp,%ebp
   13f1f:	83 ec 10             	sub    $0x10,%esp
  if (!dest || !src || !size) return;
   13f22:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13f26:	74 40                	je     13f68 <kernel_memcpy+0x4c>
   13f28:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13f2c:	74 3a                	je     13f68 <kernel_memcpy+0x4c>
   13f2e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   13f32:	74 34                	je     13f68 <kernel_memcpy+0x4c>

  uint8_t *d = (uint8_t *)dest;
   13f34:	8b 45 08             	mov    0x8(%ebp),%eax
   13f37:	89 45 fc             	mov    %eax,-0x4(%ebp)
  uint8_t *s = (uint8_t *)src;
   13f3a:	8b 45 0c             	mov    0xc(%ebp),%eax
   13f3d:	89 45 f8             	mov    %eax,-0x8(%ebp)

  while (size--) {
   13f40:	eb 17                	jmp    13f59 <kernel_memcpy+0x3d>
    *(d++) = *(s++);
   13f42:	8b 55 f8             	mov    -0x8(%ebp),%edx
   13f45:	8d 42 01             	lea    0x1(%edx),%eax
   13f48:	89 45 f8             	mov    %eax,-0x8(%ebp)
   13f4b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13f4e:	8d 48 01             	lea    0x1(%eax),%ecx
   13f51:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   13f54:	0f b6 12             	movzbl (%edx),%edx
   13f57:	88 10                	mov    %dl,(%eax)
  while (size--) {
   13f59:	8b 45 10             	mov    0x10(%ebp),%eax
   13f5c:	8d 50 ff             	lea    -0x1(%eax),%edx
   13f5f:	89 55 10             	mov    %edx,0x10(%ebp)
   13f62:	85 c0                	test   %eax,%eax
   13f64:	75 dc                	jne    13f42 <kernel_memcpy+0x26>
   13f66:	eb 01                	jmp    13f69 <kernel_memcpy+0x4d>
  if (!dest || !src || !size) return;
   13f68:	90                   	nop
  }
}
   13f69:	c9                   	leave  
   13f6a:	c3                   	ret    

00013f6b <kernel_memset>:
 *
 * @param dest 区域起始地址
 * @param v 每个字节的值
 * @param size 赋值的内存的大小
 */
void kernel_memset(void *dest, uint8_t v, int size) {
   13f6b:	55                   	push   %ebp
   13f6c:	89 e5                	mov    %esp,%ebp
   13f6e:	83 ec 14             	sub    $0x14,%esp
   13f71:	8b 45 0c             	mov    0xc(%ebp),%eax
   13f74:	88 45 ec             	mov    %al,-0x14(%ebp)
  if (!dest || !size) return;
   13f77:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13f7b:	74 2c                	je     13fa9 <kernel_memset+0x3e>
   13f7d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   13f81:	74 26                	je     13fa9 <kernel_memset+0x3e>

  uint8_t *d = (uint8_t *)dest;
   13f83:	8b 45 08             	mov    0x8(%ebp),%eax
   13f86:	89 45 fc             	mov    %eax,-0x4(%ebp)

  while (size--) {
   13f89:	eb 0f                	jmp    13f9a <kernel_memset+0x2f>
    *(d++) = v;
   13f8b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13f8e:	8d 50 01             	lea    0x1(%eax),%edx
   13f91:	89 55 fc             	mov    %edx,-0x4(%ebp)
   13f94:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   13f98:	88 10                	mov    %dl,(%eax)
  while (size--) {
   13f9a:	8b 45 10             	mov    0x10(%ebp),%eax
   13f9d:	8d 50 ff             	lea    -0x1(%eax),%edx
   13fa0:	89 55 10             	mov    %edx,0x10(%ebp)
   13fa3:	85 c0                	test   %eax,%eax
   13fa5:	75 e4                	jne    13f8b <kernel_memset+0x20>
   13fa7:	eb 01                	jmp    13faa <kernel_memset+0x3f>
  if (!dest || !size) return;
   13fa9:	90                   	nop
  }
}
   13faa:	c9                   	leave  
   13fab:	c3                   	ret    

00013fac <kernel_memcmp>:
 * @param d1 区域1的起始地址
 * @param d2 区域2的起始地址
 * @param size 比较的字节数量
 * @return int ==:0, >:1, <:-1
 */
int kernel_memcmp(const void *dest1, const void *dest2, int size) {
   13fac:	55                   	push   %ebp
   13fad:	89 e5                	mov    %esp,%ebp
   13faf:	83 ec 10             	sub    $0x10,%esp
  if (!dest1 || !dest2 || !size) return 0;
   13fb2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13fb6:	74 0c                	je     13fc4 <kernel_memcmp+0x18>
   13fb8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13fbc:	74 06                	je     13fc4 <kernel_memcmp+0x18>
   13fbe:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   13fc2:	75 07                	jne    13fcb <kernel_memcmp+0x1f>
   13fc4:	b8 00 00 00 00       	mov    $0x0,%eax
   13fc9:	eb 63                	jmp    1402e <kernel_memcmp+0x82>

  uint8_t *d1 = (uint8_t *)dest1;
   13fcb:	8b 45 08             	mov    0x8(%ebp),%eax
   13fce:	89 45 fc             	mov    %eax,-0x4(%ebp)
  uint8_t *d2 = (uint8_t *)dest2;
   13fd1:	8b 45 0c             	mov    0xc(%ebp),%eax
   13fd4:	89 45 f8             	mov    %eax,-0x8(%ebp)

  while (--size && *d1 == *d2) {
   13fd7:	eb 08                	jmp    13fe1 <kernel_memcmp+0x35>
    d1++;
   13fd9:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    d2++;
   13fdd:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  while (--size && *d1 == *d2) {
   13fe1:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   13fe5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   13fe9:	74 10                	je     13ffb <kernel_memcmp+0x4f>
   13feb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13fee:	0f b6 10             	movzbl (%eax),%edx
   13ff1:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13ff4:	0f b6 00             	movzbl (%eax),%eax
   13ff7:	38 c2                	cmp    %al,%dl
   13ff9:	74 de                	je     13fd9 <kernel_memcmp+0x2d>
  }

  if (*d1 > *d2)
   13ffb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13ffe:	0f b6 10             	movzbl (%eax),%edx
   14001:	8b 45 f8             	mov    -0x8(%ebp),%eax
   14004:	0f b6 00             	movzbl (%eax),%eax
   14007:	38 c2                	cmp    %al,%dl
   14009:	76 07                	jbe    14012 <kernel_memcmp+0x66>
    return 1;
   1400b:	b8 01 00 00 00       	mov    $0x1,%eax
   14010:	eb 1c                	jmp    1402e <kernel_memcmp+0x82>
  else if (*d1 < *d2)
   14012:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14015:	0f b6 10             	movzbl (%eax),%edx
   14018:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1401b:	0f b6 00             	movzbl (%eax),%eax
   1401e:	38 c2                	cmp    %al,%dl
   14020:	73 07                	jae    14029 <kernel_memcmp+0x7d>
    return -1;
   14022:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14027:	eb 05                	jmp    1402e <kernel_memcmp+0x82>
  else
    return 0;
   14029:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1402e:	c9                   	leave  
   1402f:	c3                   	ret    

00014030 <kernel_sprintf>:

void kernel_sprintf(char *buf, const char *formate, ...) {
   14030:	55                   	push   %ebp
   14031:	89 e5                	mov    %esp,%ebp
   14033:	83 ec 18             	sub    $0x18,%esp
  // 获取可变参数并将其格式化到缓冲区中
  va_list args;
  va_start(args, formate);
   14036:	8d 45 10             	lea    0x10(%ebp),%eax
   14039:	89 45 f4             	mov    %eax,-0xc(%ebp)
  kernel_vsprintf(buf, formate, args);
   1403c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1403f:	83 ec 04             	sub    $0x4,%esp
   14042:	50                   	push   %eax
   14043:	ff 75 0c             	push   0xc(%ebp)
   14046:	ff 75 08             	push   0x8(%ebp)
   14049:	e8 06 00 00 00       	call   14054 <kernel_vsprintf>
   1404e:	83 c4 10             	add    $0x10,%esp
  va_end(args);
}
   14051:	90                   	nop
   14052:	c9                   	leave  
   14053:	c3                   	ret    

00014054 <kernel_vsprintf>:
 *
 * @param buf
 * @param formate
 * @param args
 */
void kernel_vsprintf(char *buf, const char *formate, va_list args) {
   14054:	55                   	push   %ebp
   14055:	89 e5                	mov    %esp,%ebp
   14057:	83 ec 28             	sub    $0x28,%esp
  // 定义状态机，包含两种状态
  enum { NORMAL, READ_FMT } state = NORMAL;
   1405a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  char *curr = buf;
   14061:	8b 45 08             	mov    0x8(%ebp),%eax
   14064:	89 45 f0             	mov    %eax,-0x10(%ebp)

  char ch;

  while ((ch = *(formate++)) != '\0') {
   14067:	e9 68 01 00 00       	jmp    141d4 <kernel_vsprintf+0x180>
    switch (state) {
   1406c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   14070:	74 0b                	je     1407d <kernel_vsprintf+0x29>
   14072:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   14076:	74 2b                	je     140a3 <kernel_vsprintf+0x4f>
   14078:	e9 56 01 00 00       	jmp    141d3 <kernel_vsprintf+0x17f>
      case NORMAL:
        if (ch == '%')
   1407d:	80 7d e7 25          	cmpb   $0x25,-0x19(%ebp)
   14081:	75 0c                	jne    1408f <kernel_vsprintf+0x3b>
          state = READ_FMT;
   14083:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   1408a:	e9 45 01 00 00       	jmp    141d4 <kernel_vsprintf+0x180>
        else
          *(curr++) = ch;
   1408f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14092:	8d 50 01             	lea    0x1(%eax),%edx
   14095:	89 55 f0             	mov    %edx,-0x10(%ebp)
   14098:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   1409c:	88 10                	mov    %dl,(%eax)
        break;
   1409e:	e9 31 01 00 00       	jmp    141d4 <kernel_vsprintf+0x180>
      case READ_FMT:
        if (ch == 's') {
   140a3:	80 7d e7 73          	cmpb   $0x73,-0x19(%ebp)
   140a7:	75 47                	jne    140f0 <kernel_vsprintf+0x9c>
          const char *str = va_arg(args, char *);
   140a9:	8b 45 10             	mov    0x10(%ebp),%eax
   140ac:	8d 50 04             	lea    0x4(%eax),%edx
   140af:	89 55 10             	mov    %edx,0x10(%ebp)
   140b2:	8b 00                	mov    (%eax),%eax
   140b4:	89 45 ec             	mov    %eax,-0x14(%ebp)
          int len = kernel_strlen(str);
   140b7:	ff 75 ec             	push   -0x14(%ebp)
   140ba:	e8 28 fe ff ff       	call   13ee7 <kernel_strlen>
   140bf:	83 c4 04             	add    $0x4,%esp
   140c2:	89 45 e8             	mov    %eax,-0x18(%ebp)
          while (len--) {
   140c5:	eb 17                	jmp    140de <kernel_vsprintf+0x8a>
            *(curr++) = *(str++);
   140c7:	8b 55 ec             	mov    -0x14(%ebp),%edx
   140ca:	8d 42 01             	lea    0x1(%edx),%eax
   140cd:	89 45 ec             	mov    %eax,-0x14(%ebp)
   140d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   140d3:	8d 48 01             	lea    0x1(%eax),%ecx
   140d6:	89 4d f0             	mov    %ecx,-0x10(%ebp)
   140d9:	0f b6 12             	movzbl (%edx),%edx
   140dc:	88 10                	mov    %dl,(%eax)
          while (len--) {
   140de:	8b 45 e8             	mov    -0x18(%ebp),%eax
   140e1:	8d 50 ff             	lea    -0x1(%eax),%edx
   140e4:	89 55 e8             	mov    %edx,-0x18(%ebp)
   140e7:	85 c0                	test   %eax,%eax
   140e9:	75 dc                	jne    140c7 <kernel_vsprintf+0x73>
   140eb:	e9 da 00 00 00       	jmp    141ca <kernel_vsprintf+0x176>
          }
        } else if (ch == 'd') {
   140f0:	80 7d e7 64          	cmpb   $0x64,-0x19(%ebp)
   140f4:	75 37                	jne    1412d <kernel_vsprintf+0xd9>
          const int num = va_arg(args, int);
   140f6:	8b 45 10             	mov    0x10(%ebp),%eax
   140f9:	8d 50 04             	lea    0x4(%eax),%edx
   140fc:	89 55 10             	mov    %edx,0x10(%ebp)
   140ff:	8b 00                	mov    (%eax),%eax
   14101:	89 45 d8             	mov    %eax,-0x28(%ebp)
          kernel_itoa(curr, num, 10);
   14104:	83 ec 04             	sub    $0x4,%esp
   14107:	6a 0a                	push   $0xa
   14109:	ff 75 d8             	push   -0x28(%ebp)
   1410c:	ff 75 f0             	push   -0x10(%ebp)
   1410f:	e8 dd 00 00 00       	call   141f1 <kernel_itoa>
   14114:	83 c4 10             	add    $0x10,%esp
          curr += kernel_strlen(curr);
   14117:	83 ec 0c             	sub    $0xc,%esp
   1411a:	ff 75 f0             	push   -0x10(%ebp)
   1411d:	e8 c5 fd ff ff       	call   13ee7 <kernel_strlen>
   14122:	83 c4 10             	add    $0x10,%esp
   14125:	01 45 f0             	add    %eax,-0x10(%ebp)
   14128:	e9 9d 00 00 00       	jmp    141ca <kernel_vsprintf+0x176>
        } else if (ch == 'x' || ch == 'X') {
   1412d:	80 7d e7 78          	cmpb   $0x78,-0x19(%ebp)
   14131:	74 06                	je     14139 <kernel_vsprintf+0xe5>
   14133:	80 7d e7 58          	cmpb   $0x58,-0x19(%ebp)
   14137:	75 34                	jne    1416d <kernel_vsprintf+0x119>
          const int num = va_arg(args, int);
   14139:	8b 45 10             	mov    0x10(%ebp),%eax
   1413c:	8d 50 04             	lea    0x4(%eax),%edx
   1413f:	89 55 10             	mov    %edx,0x10(%ebp)
   14142:	8b 00                	mov    (%eax),%eax
   14144:	89 45 dc             	mov    %eax,-0x24(%ebp)
          kernel_itoa(curr, num, 16);
   14147:	83 ec 04             	sub    $0x4,%esp
   1414a:	6a 10                	push   $0x10
   1414c:	ff 75 dc             	push   -0x24(%ebp)
   1414f:	ff 75 f0             	push   -0x10(%ebp)
   14152:	e8 9a 00 00 00       	call   141f1 <kernel_itoa>
   14157:	83 c4 10             	add    $0x10,%esp
          curr += kernel_strlen(curr);
   1415a:	83 ec 0c             	sub    $0xc,%esp
   1415d:	ff 75 f0             	push   -0x10(%ebp)
   14160:	e8 82 fd ff ff       	call   13ee7 <kernel_strlen>
   14165:	83 c4 10             	add    $0x10,%esp
   14168:	01 45 f0             	add    %eax,-0x10(%ebp)
        } else if (ch == 'x' || ch == 'X') {
   1416b:	eb 5d                	jmp    141ca <kernel_vsprintf+0x176>
        } else if (ch == 'b') {
   1416d:	80 7d e7 62          	cmpb   $0x62,-0x19(%ebp)
   14171:	75 34                	jne    141a7 <kernel_vsprintf+0x153>
          const int num = va_arg(args, int);
   14173:	8b 45 10             	mov    0x10(%ebp),%eax
   14176:	8d 50 04             	lea    0x4(%eax),%edx
   14179:	89 55 10             	mov    %edx,0x10(%ebp)
   1417c:	8b 00                	mov    (%eax),%eax
   1417e:	89 45 e0             	mov    %eax,-0x20(%ebp)
          kernel_itoa(curr, num, 2);
   14181:	83 ec 04             	sub    $0x4,%esp
   14184:	6a 02                	push   $0x2
   14186:	ff 75 e0             	push   -0x20(%ebp)
   14189:	ff 75 f0             	push   -0x10(%ebp)
   1418c:	e8 60 00 00 00       	call   141f1 <kernel_itoa>
   14191:	83 c4 10             	add    $0x10,%esp
          curr += kernel_strlen(curr);
   14194:	83 ec 0c             	sub    $0xc,%esp
   14197:	ff 75 f0             	push   -0x10(%ebp)
   1419a:	e8 48 fd ff ff       	call   13ee7 <kernel_strlen>
   1419f:	83 c4 10             	add    $0x10,%esp
   141a2:	01 45 f0             	add    %eax,-0x10(%ebp)
   141a5:	eb 23                	jmp    141ca <kernel_vsprintf+0x176>
        } else if (ch == 'c') {
   141a7:	80 7d e7 63          	cmpb   $0x63,-0x19(%ebp)
   141ab:	75 1d                	jne    141ca <kernel_vsprintf+0x176>
          char c = va_arg(args, int);
   141ad:	8b 45 10             	mov    0x10(%ebp),%eax
   141b0:	8d 50 04             	lea    0x4(%eax),%edx
   141b3:	89 55 10             	mov    %edx,0x10(%ebp)
   141b6:	8b 00                	mov    (%eax),%eax
   141b8:	88 45 e6             	mov    %al,-0x1a(%ebp)
          *(curr++) = c;
   141bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   141be:	8d 50 01             	lea    0x1(%eax),%edx
   141c1:	89 55 f0             	mov    %edx,-0x10(%ebp)
   141c4:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   141c8:	88 10                	mov    %dl,(%eax)
        }
        state = NORMAL;
   141ca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        break;
   141d1:	eb 01                	jmp    141d4 <kernel_vsprintf+0x180>
      default:
        break;
   141d3:	90                   	nop
  while ((ch = *(formate++)) != '\0') {
   141d4:	8b 45 0c             	mov    0xc(%ebp),%eax
   141d7:	8d 50 01             	lea    0x1(%eax),%edx
   141da:	89 55 0c             	mov    %edx,0xc(%ebp)
   141dd:	0f b6 00             	movzbl (%eax),%eax
   141e0:	88 45 e7             	mov    %al,-0x19(%ebp)
   141e3:	80 7d e7 00          	cmpb   $0x0,-0x19(%ebp)
   141e7:	0f 85 7f fe ff ff    	jne    1406c <kernel_vsprintf+0x18>
    }
  }
}
   141ed:	90                   	nop
   141ee:	90                   	nop
   141ef:	c9                   	leave  
   141f0:	c3                   	ret    

000141f1 <kernel_itoa>:
 *
 * @param buf 缓冲区
 * @param num 整数
 * @param base 转换的进制规则
 */
void kernel_itoa(char *buf, int num, int base) {
   141f1:	55                   	push   %ebp
   141f2:	89 e5                	mov    %esp,%ebp
   141f4:	81 ec 90 00 00 00    	sub    $0x90,%esp
  char *p = buf;
   141fa:	8b 45 08             	mov    0x8(%ebp),%eax
   141fd:	89 45 fc             	mov    %eax,-0x4(%ebp)

  if (base != 2 && base != 8 && base != 10 && base != 16) {
   14200:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   14204:	74 1d                	je     14223 <kernel_itoa+0x32>
   14206:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   1420a:	74 17                	je     14223 <kernel_itoa+0x32>
   1420c:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   14210:	74 11                	je     14223 <kernel_itoa+0x32>
   14212:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   14216:	74 0b                	je     14223 <kernel_itoa+0x32>
    *buf = '\0';
   14218:	8b 45 08             	mov    0x8(%ebp),%eax
   1421b:	c6 00 00             	movb   $0x0,(%eax)
    return;
   1421e:	e9 a2 00 00 00       	jmp    142c5 <kernel_itoa+0xd4>
  }

  if (num < 0) {
   14223:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   14227:	79 11                	jns    1423a <kernel_itoa+0x49>
    *(p++) = '-';
   14229:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1422c:	8d 50 01             	lea    0x1(%eax),%edx
   1422f:	89 55 fc             	mov    %edx,-0x4(%ebp)
   14232:	c6 00 2d             	movb   $0x2d,(%eax)
    num = -num;
   14235:	f7 5d 0c             	negl   0xc(%ebp)
   14238:	eb 1a                	jmp    14254 <kernel_itoa+0x63>
  } else if (num == 0) {
   1423a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1423e:	75 14                	jne    14254 <kernel_itoa+0x63>
    *(p++) = '0';
   14240:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14243:	8d 50 01             	lea    0x1(%eax),%edx
   14246:	89 55 fc             	mov    %edx,-0x4(%ebp)
   14249:	c6 00 30             	movb   $0x30,(%eax)
    *p = '\0';
   1424c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1424f:	c6 00 00             	movb   $0x0,(%eax)
    return;
   14252:	eb 71                	jmp    142c5 <kernel_itoa+0xd4>
  }

  static const char *num_to_char = {"0123456789abcdef"};
  char arr[128];
  int len = 0;
   14254:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  while (num > 0) {
   1425b:	eb 2e                	jmp    1428b <kernel_itoa+0x9a>
    arr[len++] = num_to_char[num % base];
   1425d:	8b 0d 40 60 01 00    	mov    0x16040,%ecx
   14263:	8b 45 0c             	mov    0xc(%ebp),%eax
   14266:	99                   	cltd   
   14267:	f7 7d 10             	idivl  0x10(%ebp)
   1426a:	89 d0                	mov    %edx,%eax
   1426c:	01 c1                	add    %eax,%ecx
   1426e:	8b 45 f8             	mov    -0x8(%ebp),%eax
   14271:	8d 50 01             	lea    0x1(%eax),%edx
   14274:	89 55 f8             	mov    %edx,-0x8(%ebp)
   14277:	0f b6 11             	movzbl (%ecx),%edx
   1427a:	88 94 05 74 ff ff ff 	mov    %dl,-0x8c(%ebp,%eax,1)
    num /= base;
   14281:	8b 45 0c             	mov    0xc(%ebp),%eax
   14284:	99                   	cltd   
   14285:	f7 7d 10             	idivl  0x10(%ebp)
   14288:	89 45 0c             	mov    %eax,0xc(%ebp)
  while (num > 0) {
   1428b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1428f:	7f cc                	jg     1425d <kernel_itoa+0x6c>
  }

  for (int i = len - 1; i >= 0; --i) {
   14291:	8b 45 f8             	mov    -0x8(%ebp),%eax
   14294:	83 e8 01             	sub    $0x1,%eax
   14297:	89 45 f4             	mov    %eax,-0xc(%ebp)
   1429a:	eb 1d                	jmp    142b9 <kernel_itoa+0xc8>
    *(p++) = arr[i];
   1429c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1429f:	8d 50 01             	lea    0x1(%eax),%edx
   142a2:	89 55 fc             	mov    %edx,-0x4(%ebp)
   142a5:	8d 8d 74 ff ff ff    	lea    -0x8c(%ebp),%ecx
   142ab:	8b 55 f4             	mov    -0xc(%ebp),%edx
   142ae:	01 ca                	add    %ecx,%edx
   142b0:	0f b6 12             	movzbl (%edx),%edx
   142b3:	88 10                	mov    %dl,(%eax)
  for (int i = len - 1; i >= 0; --i) {
   142b5:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
   142b9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   142bd:	79 dd                	jns    1429c <kernel_itoa+0xab>
  }
  *p = '\0';
   142bf:	8b 45 fc             	mov    -0x4(%ebp),%eax
   142c2:	c6 00 00             	movb   $0x0,(%eax)
}
   142c5:	c9                   	leave  
   142c6:	c3                   	ret    

000142c7 <strings_count>:
 * @brief 计算字符串数组str中字符串的个数
 *
 * @param str
 * @return int
 */
int strings_count(char *const *strs) {
   142c7:	55                   	push   %ebp
   142c8:	89 e5                	mov    %esp,%ebp
   142ca:	83 ec 10             	sub    $0x10,%esp
  int count = 0;
   142cd:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  if (strs) {
   142d4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   142d8:	74 15                	je     142ef <strings_count+0x28>
    while (*strs++) {
   142da:	eb 04                	jmp    142e0 <strings_count+0x19>
      count++;
   142dc:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    while (*strs++) {
   142e0:	8b 45 08             	mov    0x8(%ebp),%eax
   142e3:	8d 50 04             	lea    0x4(%eax),%edx
   142e6:	89 55 08             	mov    %edx,0x8(%ebp)
   142e9:	8b 00                	mov    (%eax),%eax
   142eb:	85 c0                	test   %eax,%eax
   142ed:	75 ed                	jne    142dc <strings_count+0x15>
    }
  }

  return count;
   142ef:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   142f2:	c9                   	leave  
   142f3:	c3                   	ret    

000142f4 <get_file_name>:
 * @brief 根据文件路径获取文件名
 *
 * @param path
 * @return char*
 */
char *get_file_name(const char *path) {
   142f4:	55                   	push   %ebp
   142f5:	89 e5                	mov    %esp,%ebp
   142f7:	83 ec 10             	sub    $0x10,%esp
  char *s = path;
   142fa:	8b 45 08             	mov    0x8(%ebp),%eax
   142fd:	89 45 fc             	mov    %eax,-0x4(%ebp)
  while (*s != '\0') {
   14300:	eb 04                	jmp    14306 <get_file_name+0x12>
    s++;
   14302:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  while (*s != '\0') {
   14306:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14309:	0f b6 00             	movzbl (%eax),%eax
   1430c:	84 c0                	test   %al,%al
   1430e:	75 f2                	jne    14302 <get_file_name+0xe>
  }

  while ((*s != '/') && (*s != '\\') && (s >= path)) {
   14310:	eb 04                	jmp    14316 <get_file_name+0x22>
    s--;
   14312:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
  while ((*s != '/') && (*s != '\\') && (s >= path)) {
   14316:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14319:	0f b6 00             	movzbl (%eax),%eax
   1431c:	3c 2f                	cmp    $0x2f,%al
   1431e:	74 12                	je     14332 <get_file_name+0x3e>
   14320:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14323:	0f b6 00             	movzbl (%eax),%eax
   14326:	3c 5c                	cmp    $0x5c,%al
   14328:	74 08                	je     14332 <get_file_name+0x3e>
   1432a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1432d:	3b 45 08             	cmp    0x8(%ebp),%eax
   14330:	73 e0                	jae    14312 <get_file_name+0x1e>
  }

  return s + 1;  
   14332:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14335:	83 c0 01             	add    $0x1,%eax
   14338:	c9                   	leave  
   14339:	c3                   	ret    

0001433a <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   1433a:	55                   	push   %ebp
   1433b:	89 e5                	mov    %esp,%ebp
   1433d:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   14340:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   14344:	75 19                	jne    1435f <list_is_empty+0x25>
   14346:	68 64 57 01 00       	push   $0x15764
   1434b:	68 48 58 01 00       	push   $0x15848
   14350:	6a 38                	push   $0x38
   14352:	68 78 57 01 00       	push   $0x15778
   14357:	e8 0d f7 ff ff       	call   13a69 <pannic>
   1435c:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   1435f:	8b 45 08             	mov    0x8(%ebp),%eax
   14362:	8b 40 08             	mov    0x8(%eax),%eax
   14365:	85 c0                	test   %eax,%eax
   14367:	0f 94 c0             	sete   %al
   1436a:	0f b6 c0             	movzbl %al,%eax
}
   1436d:	c9                   	leave  
   1436e:	c3                   	ret    

0001436f <list_get_size>:
static inline int list_get_size(list_t *list) {
   1436f:	55                   	push   %ebp
   14370:	89 e5                	mov    %esp,%ebp
   14372:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   14375:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   14379:	75 19                	jne    14394 <list_get_size+0x25>
   1437b:	68 64 57 01 00       	push   $0x15764
   14380:	68 80 58 01 00       	push   $0x15880
   14385:	6a 3e                	push   $0x3e
   14387:	68 78 57 01 00       	push   $0x15778
   1438c:	e8 d8 f6 ff ff       	call   13a69 <pannic>
   14391:	83 c4 10             	add    $0x10,%esp
    return list->size;
   14394:	8b 45 08             	mov    0x8(%ebp),%eax
   14397:	8b 40 08             	mov    0x8(%eax),%eax
}
   1439a:	c9                   	leave  
   1439b:	c3                   	ret    

0001439c <list_insert_first>:
 * 
 */

#include "tools/list.h"

void list_insert_first(list_t *list, list_node_t *node) {
   1439c:	55                   	push   %ebp
   1439d:	89 e5                	mov    %esp,%ebp
   1439f:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   143a2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   143a6:	74 06                	je     143ae <list_insert_first+0x12>
   143a8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   143ac:	75 19                	jne    143c7 <list_insert_first+0x2b>
   143ae:	68 b8 57 01 00       	push   $0x157b8
   143b3:	68 34 58 01 00       	push   $0x15834
   143b8:	6a 0f                	push   $0xf
   143ba:	68 e8 57 01 00       	push   $0x157e8
   143bf:	e8 a5 f6 ff ff       	call   13a69 <pannic>
   143c4:	83 c4 10             	add    $0x10,%esp

    node->next = list->first;
   143c7:	8b 45 08             	mov    0x8(%ebp),%eax
   143ca:	8b 10                	mov    (%eax),%edx
   143cc:	8b 45 0c             	mov    0xc(%ebp),%eax
   143cf:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   143d2:	8b 45 0c             	mov    0xc(%ebp),%eax
   143d5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   143db:	83 ec 0c             	sub    $0xc,%esp
   143de:	ff 75 08             	push   0x8(%ebp)
   143e1:	e8 54 ff ff ff       	call   1433a <list_is_empty>
   143e6:	83 c4 10             	add    $0x10,%esp
   143e9:	85 c0                	test   %eax,%eax
   143eb:	74 16                	je     14403 <list_insert_first+0x67>
        list->first = list->last = node;
   143ed:	8b 45 08             	mov    0x8(%ebp),%eax
   143f0:	8b 55 0c             	mov    0xc(%ebp),%edx
   143f3:	89 50 04             	mov    %edx,0x4(%eax)
   143f6:	8b 45 08             	mov    0x8(%ebp),%eax
   143f9:	8b 50 04             	mov    0x4(%eax),%edx
   143fc:	8b 45 08             	mov    0x8(%ebp),%eax
   143ff:	89 10                	mov    %edx,(%eax)
   14401:	eb 12                	jmp    14415 <list_insert_first+0x79>
    } else {
        list->first->pre = node;
   14403:	8b 45 08             	mov    0x8(%ebp),%eax
   14406:	8b 00                	mov    (%eax),%eax
   14408:	8b 55 0c             	mov    0xc(%ebp),%edx
   1440b:	89 10                	mov    %edx,(%eax)
        list->first = node;
   1440d:	8b 45 08             	mov    0x8(%ebp),%eax
   14410:	8b 55 0c             	mov    0xc(%ebp),%edx
   14413:	89 10                	mov    %edx,(%eax)
    }

    list->size++;
   14415:	8b 45 08             	mov    0x8(%ebp),%eax
   14418:	8b 40 08             	mov    0x8(%eax),%eax
   1441b:	8d 50 01             	lea    0x1(%eax),%edx
   1441e:	8b 45 08             	mov    0x8(%ebp),%eax
   14421:	89 50 08             	mov    %edx,0x8(%eax)
}
   14424:	90                   	nop
   14425:	c9                   	leave  
   14426:	c3                   	ret    

00014427 <list_insert_last>:

void list_insert_last(list_t *list, list_node_t *node) {
   14427:	55                   	push   %ebp
   14428:	89 e5                	mov    %esp,%ebp
   1442a:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   1442d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   14431:	74 06                	je     14439 <list_insert_last+0x12>
   14433:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   14437:	75 19                	jne    14452 <list_insert_last+0x2b>
   14439:	68 b8 57 01 00       	push   $0x157b8
   1443e:	68 58 58 01 00       	push   $0x15858
   14443:	6a 1f                	push   $0x1f
   14445:	68 e8 57 01 00       	push   $0x157e8
   1444a:	e8 1a f6 ff ff       	call   13a69 <pannic>
   1444f:	83 c4 10             	add    $0x10,%esp

    node->pre = list->last;
   14452:	8b 45 08             	mov    0x8(%ebp),%eax
   14455:	8b 50 04             	mov    0x4(%eax),%edx
   14458:	8b 45 0c             	mov    0xc(%ebp),%eax
   1445b:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   1445d:	8b 45 0c             	mov    0xc(%ebp),%eax
   14460:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)


    if (list_is_empty(list)) {
   14467:	83 ec 0c             	sub    $0xc,%esp
   1446a:	ff 75 08             	push   0x8(%ebp)
   1446d:	e8 c8 fe ff ff       	call   1433a <list_is_empty>
   14472:	83 c4 10             	add    $0x10,%esp
   14475:	85 c0                	test   %eax,%eax
   14477:	74 16                	je     1448f <list_insert_last+0x68>
        list->first = list->last = node;
   14479:	8b 45 08             	mov    0x8(%ebp),%eax
   1447c:	8b 55 0c             	mov    0xc(%ebp),%edx
   1447f:	89 50 04             	mov    %edx,0x4(%eax)
   14482:	8b 45 08             	mov    0x8(%ebp),%eax
   14485:	8b 50 04             	mov    0x4(%eax),%edx
   14488:	8b 45 08             	mov    0x8(%ebp),%eax
   1448b:	89 10                	mov    %edx,(%eax)
   1448d:	eb 15                	jmp    144a4 <list_insert_last+0x7d>
    } else {
        list->last->next = node;
   1448f:	8b 45 08             	mov    0x8(%ebp),%eax
   14492:	8b 40 04             	mov    0x4(%eax),%eax
   14495:	8b 55 0c             	mov    0xc(%ebp),%edx
   14498:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   1449b:	8b 45 08             	mov    0x8(%ebp),%eax
   1449e:	8b 55 0c             	mov    0xc(%ebp),%edx
   144a1:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->size++;
   144a4:	8b 45 08             	mov    0x8(%ebp),%eax
   144a7:	8b 40 08             	mov    0x8(%eax),%eax
   144aa:	8d 50 01             	lea    0x1(%eax),%edx
   144ad:	8b 45 08             	mov    0x8(%ebp),%eax
   144b0:	89 50 08             	mov    %edx,0x8(%eax)

}
   144b3:	90                   	nop
   144b4:	c9                   	leave  
   144b5:	c3                   	ret    

000144b6 <list_remove_first>:

list_node_t* list_remove_first(list_t *list){
   144b6:	55                   	push   %ebp
   144b7:	89 e5                	mov    %esp,%ebp
   144b9:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   144bc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   144c0:	75 19                	jne    144db <list_remove_first+0x25>
   144c2:	68 1e 58 01 00       	push   $0x1581e
   144c7:	68 6c 58 01 00       	push   $0x1586c
   144cc:	6a 31                	push   $0x31
   144ce:	68 e8 57 01 00       	push   $0x157e8
   144d3:	e8 91 f5 ff ff       	call   13a69 <pannic>
   144d8:	83 c4 10             	add    $0x10,%esp
    if (list_is_empty(list)) {
   144db:	83 ec 0c             	sub    $0xc,%esp
   144de:	ff 75 08             	push   0x8(%ebp)
   144e1:	e8 54 fe ff ff       	call   1433a <list_is_empty>
   144e6:	83 c4 10             	add    $0x10,%esp
   144e9:	85 c0                	test   %eax,%eax
   144eb:	74 07                	je     144f4 <list_remove_first+0x3e>
        return (list_node_t*)0;
   144ed:	b8 00 00 00 00       	mov    $0x0,%eax
   144f2:	eb 71                	jmp    14565 <list_remove_first+0xaf>
    }

    list_node_t *ret = list->first;
   144f4:	8b 45 08             	mov    0x8(%ebp),%eax
   144f7:	8b 00                	mov    (%eax),%eax
   144f9:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   144fc:	83 ec 0c             	sub    $0xc,%esp
   144ff:	ff 75 08             	push   0x8(%ebp)
   14502:	e8 68 fe ff ff       	call   1436f <list_get_size>
   14507:	83 c4 10             	add    $0x10,%esp
   1450a:	83 f8 01             	cmp    $0x1,%eax
   1450d:	75 17                	jne    14526 <list_remove_first+0x70>
        list->first = list->last = (list_node_t*)0;
   1450f:	8b 45 08             	mov    0x8(%ebp),%eax
   14512:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   14519:	8b 45 08             	mov    0x8(%ebp),%eax
   1451c:	8b 50 04             	mov    0x4(%eax),%edx
   1451f:	8b 45 08             	mov    0x8(%ebp),%eax
   14522:	89 10                	mov    %edx,(%eax)
   14524:	eb 18                	jmp    1453e <list_remove_first+0x88>
    } else {
        list->first = list->first->next;
   14526:	8b 45 08             	mov    0x8(%ebp),%eax
   14529:	8b 00                	mov    (%eax),%eax
   1452b:	8b 50 04             	mov    0x4(%eax),%edx
   1452e:	8b 45 08             	mov    0x8(%ebp),%eax
   14531:	89 10                	mov    %edx,(%eax)
        list->first->pre = (list_node_t*)0;
   14533:	8b 45 08             	mov    0x8(%ebp),%eax
   14536:	8b 00                	mov    (%eax),%eax
   14538:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    list->size--;
   1453e:	8b 45 08             	mov    0x8(%ebp),%eax
   14541:	8b 40 08             	mov    0x8(%eax),%eax
   14544:	8d 50 ff             	lea    -0x1(%eax),%edx
   14547:	8b 45 08             	mov    0x8(%ebp),%eax
   1454a:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   1454d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14550:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   14557:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1455a:	8b 50 04             	mov    0x4(%eax),%edx
   1455d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14560:	89 10                	mov    %edx,(%eax)
    return ret;
   14562:	8b 45 f4             	mov    -0xc(%ebp),%eax
 }
   14565:	c9                   	leave  
   14566:	c3                   	ret    

00014567 <list_remove_last>:

list_node_t* list_remove_last(list_t *list) {
   14567:	55                   	push   %ebp
   14568:	89 e5                	mov    %esp,%ebp
   1456a:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   1456d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   14571:	75 19                	jne    1458c <list_remove_last+0x25>
   14573:	68 1e 58 01 00       	push   $0x1581e
   14578:	68 90 58 01 00       	push   $0x15890
   1457d:	6a 46                	push   $0x46
   1457f:	68 e8 57 01 00       	push   $0x157e8
   14584:	e8 e0 f4 ff ff       	call   13a69 <pannic>
   14589:	83 c4 10             	add    $0x10,%esp
     if (list_is_empty(list)) {
   1458c:	83 ec 0c             	sub    $0xc,%esp
   1458f:	ff 75 08             	push   0x8(%ebp)
   14592:	e8 a3 fd ff ff       	call   1433a <list_is_empty>
   14597:	83 c4 10             	add    $0x10,%esp
   1459a:	85 c0                	test   %eax,%eax
   1459c:	74 07                	je     145a5 <list_remove_last+0x3e>
        return (list_node_t*)0;
   1459e:	b8 00 00 00 00       	mov    $0x0,%eax
   145a3:	eb 75                	jmp    1461a <list_remove_last+0xb3>
    }

    list_node_t *ret = list->last;
   145a5:	8b 45 08             	mov    0x8(%ebp),%eax
   145a8:	8b 40 04             	mov    0x4(%eax),%eax
   145ab:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   145ae:	83 ec 0c             	sub    $0xc,%esp
   145b1:	ff 75 08             	push   0x8(%ebp)
   145b4:	e8 b6 fd ff ff       	call   1436f <list_get_size>
   145b9:	83 c4 10             	add    $0x10,%esp
   145bc:	83 f8 01             	cmp    $0x1,%eax
   145bf:	75 17                	jne    145d8 <list_remove_last+0x71>
        list->first = list->last = (list_node_t*)0;
   145c1:	8b 45 08             	mov    0x8(%ebp),%eax
   145c4:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   145cb:	8b 45 08             	mov    0x8(%ebp),%eax
   145ce:	8b 50 04             	mov    0x4(%eax),%edx
   145d1:	8b 45 08             	mov    0x8(%ebp),%eax
   145d4:	89 10                	mov    %edx,(%eax)
   145d6:	eb 1b                	jmp    145f3 <list_remove_last+0x8c>
    } else {
        list->last = list->last->pre;
   145d8:	8b 45 08             	mov    0x8(%ebp),%eax
   145db:	8b 40 04             	mov    0x4(%eax),%eax
   145de:	8b 10                	mov    (%eax),%edx
   145e0:	8b 45 08             	mov    0x8(%ebp),%eax
   145e3:	89 50 04             	mov    %edx,0x4(%eax)
        list->last->next = (list_node_t*)0;
   145e6:	8b 45 08             	mov    0x8(%ebp),%eax
   145e9:	8b 40 04             	mov    0x4(%eax),%eax
   145ec:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    }

    list->size--;
   145f3:	8b 45 08             	mov    0x8(%ebp),%eax
   145f6:	8b 40 08             	mov    0x8(%eax),%eax
   145f9:	8d 50 ff             	lea    -0x1(%eax),%edx
   145fc:	8b 45 08             	mov    0x8(%ebp),%eax
   145ff:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   14602:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14605:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1460c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1460f:	8b 50 04             	mov    0x4(%eax),%edx
   14612:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14615:	89 10                	mov    %edx,(%eax)
    return ret;
   14617:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   1461a:	c9                   	leave  
   1461b:	c3                   	ret    

0001461c <list_remove>:

list_node_t* list_remove(list_t *list, list_node_t *node) {
   1461c:	55                   	push   %ebp
   1461d:	89 e5                	mov    %esp,%ebp
   1461f:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   14622:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   14626:	74 06                	je     1462e <list_remove+0x12>
   14628:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1462c:	75 19                	jne    14647 <list_remove+0x2b>
   1462e:	68 b8 57 01 00       	push   $0x157b8
   14633:	68 a4 58 01 00       	push   $0x158a4
   14638:	6a 5b                	push   $0x5b
   1463a:	68 e8 57 01 00       	push   $0x157e8
   1463f:	e8 25 f4 ff ff       	call   13a69 <pannic>
   14644:	83 c4 10             	add    $0x10,%esp

    if (list_is_empty(list)) {
   14647:	83 ec 0c             	sub    $0xc,%esp
   1464a:	ff 75 08             	push   0x8(%ebp)
   1464d:	e8 e8 fc ff ff       	call   1433a <list_is_empty>
   14652:	83 c4 10             	add    $0x10,%esp
   14655:	85 c0                	test   %eax,%eax
   14657:	74 0a                	je     14663 <list_remove+0x47>
        return (list_node_t*)0;
   14659:	b8 00 00 00 00       	mov    $0x0,%eax
   1465e:	e9 80 00 00 00       	jmp    146e3 <list_remove+0xc7>
    }

    if (node == list->first) list->first = node->next;
   14663:	8b 45 08             	mov    0x8(%ebp),%eax
   14666:	8b 00                	mov    (%eax),%eax
   14668:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1466b:	75 0b                	jne    14678 <list_remove+0x5c>
   1466d:	8b 45 0c             	mov    0xc(%ebp),%eax
   14670:	8b 50 04             	mov    0x4(%eax),%edx
   14673:	8b 45 08             	mov    0x8(%ebp),%eax
   14676:	89 10                	mov    %edx,(%eax)
    if (node == list->last) list->last = node->pre;
   14678:	8b 45 08             	mov    0x8(%ebp),%eax
   1467b:	8b 40 04             	mov    0x4(%eax),%eax
   1467e:	39 45 0c             	cmp    %eax,0xc(%ebp)
   14681:	75 0b                	jne    1468e <list_remove+0x72>
   14683:	8b 45 0c             	mov    0xc(%ebp),%eax
   14686:	8b 10                	mov    (%eax),%edx
   14688:	8b 45 08             	mov    0x8(%ebp),%eax
   1468b:	89 50 04             	mov    %edx,0x4(%eax)

    if (node->pre) node->pre->next = node->next;
   1468e:	8b 45 0c             	mov    0xc(%ebp),%eax
   14691:	8b 00                	mov    (%eax),%eax
   14693:	85 c0                	test   %eax,%eax
   14695:	74 0e                	je     146a5 <list_remove+0x89>
   14697:	8b 45 0c             	mov    0xc(%ebp),%eax
   1469a:	8b 00                	mov    (%eax),%eax
   1469c:	8b 55 0c             	mov    0xc(%ebp),%edx
   1469f:	8b 52 04             	mov    0x4(%edx),%edx
   146a2:	89 50 04             	mov    %edx,0x4(%eax)
    if (node->next) node->next->pre = node->pre;
   146a5:	8b 45 0c             	mov    0xc(%ebp),%eax
   146a8:	8b 40 04             	mov    0x4(%eax),%eax
   146ab:	85 c0                	test   %eax,%eax
   146ad:	74 0d                	je     146bc <list_remove+0xa0>
   146af:	8b 45 0c             	mov    0xc(%ebp),%eax
   146b2:	8b 40 04             	mov    0x4(%eax),%eax
   146b5:	8b 55 0c             	mov    0xc(%ebp),%edx
   146b8:	8b 12                	mov    (%edx),%edx
   146ba:	89 10                	mov    %edx,(%eax)

    node->pre = node->next = (list_node_t*)0;
   146bc:	8b 45 0c             	mov    0xc(%ebp),%eax
   146bf:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   146c6:	8b 45 0c             	mov    0xc(%ebp),%eax
   146c9:	8b 50 04             	mov    0x4(%eax),%edx
   146cc:	8b 45 0c             	mov    0xc(%ebp),%eax
   146cf:	89 10                	mov    %edx,(%eax)
    list->size--;
   146d1:	8b 45 08             	mov    0x8(%ebp),%eax
   146d4:	8b 40 08             	mov    0x8(%eax),%eax
   146d7:	8d 50 ff             	lea    -0x1(%eax),%edx
   146da:	8b 45 08             	mov    0x8(%ebp),%eax
   146dd:	89 50 08             	mov    %edx,0x8(%eax)

    return node;
   146e0:	8b 45 0c             	mov    0xc(%ebp),%eax
   146e3:	c9                   	leave  
   146e4:	c3                   	ret    

000146e5 <inb>:
static inline uint8_t inb(uint16_t port) {
   146e5:	55                   	push   %ebp
   146e6:	89 e5                	mov    %esp,%ebp
   146e8:	83 ec 14             	sub    $0x14,%esp
   146eb:	8b 45 08             	mov    0x8(%ebp),%eax
   146ee:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   146f2:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   146f6:	89 c2                	mov    %eax,%edx
   146f8:	ec                   	in     (%dx),%al
   146f9:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   146fc:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   14700:	c9                   	leave  
   14701:	c3                   	ret    

00014702 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   14702:	55                   	push   %ebp
   14703:	89 e5                	mov    %esp,%ebp
   14705:	83 ec 08             	sub    $0x8,%esp
   14708:	8b 45 08             	mov    0x8(%ebp),%eax
   1470b:	8b 55 0c             	mov    0xc(%ebp),%edx
   1470e:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   14712:	89 d0                	mov    %edx,%eax
   14714:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   14717:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1471b:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1471f:	ee                   	out    %al,(%dx)
}
   14720:	90                   	nop
   14721:	c9                   	leave  
   14722:	c3                   	ret    

00014723 <log_init>:

/**
 * @brief  初始化串行端口寄存器COM1
 * 
 */
void log_init(void) {
   14723:	55                   	push   %ebp
   14724:	89 e5                	mov    %esp,%ebp
   14726:	83 ec 08             	sub    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   14729:	6a 00                	push   $0x0
   1472b:	68 f9 03 00 00       	push   $0x3f9
   14730:	e8 cd ff ff ff       	call   14702 <outb>
   14735:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   14738:	68 80 00 00 00       	push   $0x80
   1473d:	68 fb 03 00 00       	push   $0x3fb
   14742:	e8 bb ff ff ff       	call   14702 <outb>
   14747:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   1474a:	6a 03                	push   $0x3
   1474c:	68 f8 03 00 00       	push   $0x3f8
   14751:	e8 ac ff ff ff       	call   14702 <outb>
   14756:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   14759:	6a 00                	push   $0x0
   1475b:	68 f9 03 00 00       	push   $0x3f9
   14760:	e8 9d ff ff ff       	call   14702 <outb>
   14765:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   14768:	6a 03                	push   $0x3
   1476a:	68 fb 03 00 00       	push   $0x3fb
   1476f:	e8 8e ff ff ff       	call   14702 <outb>
   14774:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0xc7);
   14777:	68 c7 00 00 00       	push   $0xc7
   1477c:	68 fa 03 00 00       	push   $0x3fa
   14781:	e8 7c ff ff ff       	call   14702 <outb>
   14786:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0f);
   14789:	6a 0f                	push   $0xf
   1478b:	68 fc 03 00 00       	push   $0x3fc
   14790:	e8 6d ff ff ff       	call   14702 <outb>
   14795:	83 c4 08             	add    $0x8,%esp

    //初始化互斥锁
    mutex_init(&mutex);
   14798:	83 ec 0c             	sub    $0xc,%esp
   1479b:	68 08 8a 03 00       	push   $0x38a08
   147a0:	e8 af eb ff ff       	call   13354 <mutex_init>
   147a5:	83 c4 10             	add    $0x10,%esp
}
   147a8:	90                   	nop
   147a9:	c9                   	leave  
   147aa:	c3                   	ret    

000147ab <log_printf>:
 * @brief  格式化输出到串口
 * 
 * @param formate 
 * @param ... 
 */
void log_printf(const char *formate, ...) {
   147ab:	55                   	push   %ebp
   147ac:	89 e5                	mov    %esp,%ebp
   147ae:	81 ec 98 00 00 00    	sub    $0x98,%esp
    //1.设置字符缓冲区
    char str_buf[128];
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   147b4:	83 ec 04             	sub    $0x4,%esp
   147b7:	68 80 00 00 00       	push   $0x80
   147bc:	6a 00                	push   $0x0
   147be:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   147c4:	50                   	push   %eax
   147c5:	e8 a1 f7 ff ff       	call   13f6b <kernel_memset>
   147ca:	83 c4 10             	add    $0x10,%esp
    
    //2.获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   147cd:	8d 45 0c             	lea    0xc(%ebp),%eax
   147d0:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, formate, args);
   147d6:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   147dc:	83 ec 04             	sub    $0x4,%esp
   147df:	50                   	push   %eax
   147e0:	ff 75 08             	push   0x8(%ebp)
   147e3:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   147e9:	50                   	push   %eax
   147ea:	e8 65 f8 ff ff       	call   14054 <kernel_vsprintf>
   147ef:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    const char *p = str_buf;
   147f2:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   147f8:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将以下资源放入临界资源包含区，防止在运行时发生进程切换（cpu关中断）
    mutex_lock(&mutex); //TODO:加锁
   147fb:	83 ec 0c             	sub    $0xc,%esp
   147fe:	68 08 8a 03 00       	push   $0x38a08
   14803:	e8 99 eb ff ff       	call   133a1 <mutex_lock>
   14808:	83 c4 10             	add    $0x10,%esp

    //3.将字符串输出到串口
    while (*p != '\0') {
   1480b:	eb 57                	jmp    14864 <log_printf+0xb9>
        //4.判断串口是否正在忙碌，是则阻塞等待
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0);
   1480d:	90                   	nop
   1480e:	83 ec 0c             	sub    $0xc,%esp
   14811:	68 fd 03 00 00       	push   $0x3fd
   14816:	e8 ca fe ff ff       	call   146e5 <inb>
   1481b:	83 c4 10             	add    $0x10,%esp
   1481e:	0f b6 c0             	movzbl %al,%eax
   14821:	83 e0 40             	and    $0x40,%eax
   14824:	85 c0                	test   %eax,%eax
   14826:	74 e6                	je     1480e <log_printf+0x63>

        if (*p == '\n') outb(COM1_PORT, '\r');
   14828:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1482b:	0f b6 00             	movzbl (%eax),%eax
   1482e:	3c 0a                	cmp    $0xa,%al
   14830:	75 12                	jne    14844 <log_printf+0x99>
   14832:	83 ec 08             	sub    $0x8,%esp
   14835:	6a 0d                	push   $0xd
   14837:	68 f8 03 00 00       	push   $0x3f8
   1483c:	e8 c1 fe ff ff       	call   14702 <outb>
   14841:	83 c4 10             	add    $0x10,%esp
        
        outb(COM1_PORT, *(p++));
   14844:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14847:	8d 50 01             	lea    0x1(%eax),%edx
   1484a:	89 55 f4             	mov    %edx,-0xc(%ebp)
   1484d:	0f b6 00             	movzbl (%eax),%eax
   14850:	0f b6 c0             	movzbl %al,%eax
   14853:	83 ec 08             	sub    $0x8,%esp
   14856:	50                   	push   %eax
   14857:	68 f8 03 00 00       	push   $0x3f8
   1485c:	e8 a1 fe ff ff       	call   14702 <outb>
   14861:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0') {
   14864:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14867:	0f b6 00             	movzbl (%eax),%eax
   1486a:	84 c0                	test   %al,%al
   1486c:	75 9f                	jne    1480d <log_printf+0x62>
    }
    
    //5.换行
    outb(COM1_PORT, '\r');
   1486e:	83 ec 08             	sub    $0x8,%esp
   14871:	6a 0d                	push   $0xd
   14873:	68 f8 03 00 00       	push   $0x3f8
   14878:	e8 85 fe ff ff       	call   14702 <outb>
   1487d:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   14880:	83 ec 08             	sub    $0x8,%esp
   14883:	6a 0a                	push   $0xa
   14885:	68 f8 03 00 00       	push   $0x3f8
   1488a:	e8 73 fe ff ff       	call   14702 <outb>
   1488f:	83 c4 10             	add    $0x10,%esp

    //执行完毕，将资源离开临界资源保护区，(cpu开中断)
    mutex_unlock(&mutex); //TODO:解锁
   14892:	83 ec 0c             	sub    $0xc,%esp
   14895:	68 08 8a 03 00       	push   $0x38a08
   1489a:	e8 93 eb ff ff       	call   13432 <mutex_unlock>
   1489f:	83 c4 10             	add    $0x10,%esp
   148a2:	90                   	nop
   148a3:	c9                   	leave  
   148a4:	c3                   	ret    

Disassembly of section .first_task:

80000000 <first_task_entry>:
//第一个任务进程入口函数
first_task_entry:
    //iret指令返回后，将之前压入的 ss,esp,eflags,cs,eip 寄存器值返回给对应寄存器，
	//由于cpu从0特权级切换到了3特权级，而之前其余的段寄存器都是0特权级，不能供3特权级使用，
	//所以cpu将其余寄存器置零，这里直接用ss寄存器再初始化其余段寄存器即可
	mov %ss, %ax
80000000:	66 8c d0             	mov    %ss,%ax
	mov %ax, %ds
80000003:	8e d8                	mov    %eax,%ds
	mov %ax, %es
80000005:	8e c0                	mov    %eax,%es
	mov %ax, %fs
80000007:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
80000009:	8e e8                	mov    %eax,%gs

    //因为cs寄存器已由操作系统分配，所以直接跳转即可
8000000b:	e9 d7 00 00 00       	jmp    800000e7 <first_main>

80000010 <sys_call>:
}syscall_args_t;




static inline int sys_call(syscall_args_t *args) {
80000010:	55                   	push   %ebp
80000011:	89 e5                	mov    %esp,%ebp
80000013:	57                   	push   %edi
80000014:	56                   	push   %esi
80000015:	53                   	push   %ebx
80000016:	83 ec 10             	sub    $0x10,%esp
    // 传入远跳转需要的参数, 即cs = selector, eip = offset 
    //为调用门选择子赋予0特权级,调用门的 cpl 和 RPL <= 系统调用段描述符的DPL
    //门描述符中目标选择子的 CPL <= 门描述符的 DPL
    uint32_t addr[] = {0, SYSCALL_SELECTOR | 0};  
80000019:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
80000020:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%ebp)
        "push %[arg1]\n\t"
        "push %[arg0]\n\t"
        "push %[id]\n\t"
        "lcalll *(%[addr])\n\t"
        :"=a"(ret)
        :[arg3]"r"(args->arg3), 
80000027:	8b 45 08             	mov    0x8(%ebp),%eax
8000002a:	8b 40 10             	mov    0x10(%eax),%eax
         [arg2]"r"(args->arg2), 
8000002d:	8b 55 08             	mov    0x8(%ebp),%edx
80000030:	8b 52 0c             	mov    0xc(%edx),%edx
         [arg1]"r"(args->arg1),
80000033:	8b 4d 08             	mov    0x8(%ebp),%ecx
80000036:	8b 49 08             	mov    0x8(%ecx),%ecx
         [arg0]"r"(args->arg0), 
80000039:	8b 5d 08             	mov    0x8(%ebp),%ebx
8000003c:	8b 5b 04             	mov    0x4(%ebx),%ebx
         [id]"r"(args->id), 
8000003f:	8b 75 08             	mov    0x8(%ebp),%esi
80000042:	8b 36                	mov    (%esi),%esi
     __asm__ __volatile__(
80000044:	8d 7d e8             	lea    -0x18(%ebp),%edi
80000047:	50                   	push   %eax
80000048:	52                   	push   %edx
80000049:	51                   	push   %ecx
8000004a:	53                   	push   %ebx
8000004b:	56                   	push   %esi
8000004c:	ff 1f                	lcall  *(%edi)
8000004e:	89 45 f0             	mov    %eax,-0x10(%ebp)
         [addr]"r"(addr)
    );

    return ret;
80000051:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
80000054:	83 c4 10             	add    $0x10,%esp
80000057:	5b                   	pop    %ebx
80000058:	5e                   	pop    %esi
80000059:	5f                   	pop    %edi
8000005a:	5d                   	pop    %ebp
8000005b:	c3                   	ret    

8000005c <getpid>:
/**
 * @brief 获取用户进程id
 * 
 * @return int 
 */
static inline int getpid(void) {
8000005c:	55                   	push   %ebp
8000005d:	89 e5                	mov    %esp,%ebp
8000005f:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_getpid;
80000062:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)

    return sys_call(&args);
80000069:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000006c:	50                   	push   %eax
8000006d:	e8 9e ff ff ff       	call   80000010 <sys_call>
80000072:	83 c4 04             	add    $0x4,%esp
}
80000075:	c9                   	leave  
80000076:	c3                   	ret    

80000077 <print_msg>:

static inline void print_msg(const char *fmt, int arg) {
80000077:	55                   	push   %ebp
80000078:	89 e5                	mov    %esp,%ebp
8000007a:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_printmsg;
8000007d:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
    args.arg0 = (int)fmt;
80000084:	8b 45 08             	mov    0x8(%ebp),%eax
80000087:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = arg;
8000008a:	8b 45 0c             	mov    0xc(%ebp),%eax
8000008d:	89 45 f4             	mov    %eax,-0xc(%ebp)

    sys_call(&args);
80000090:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000093:	50                   	push   %eax
80000094:	e8 77 ff ff ff       	call   80000010 <sys_call>
80000099:	83 c4 04             	add    $0x4,%esp
}
8000009c:	90                   	nop
8000009d:	c9                   	leave  
8000009e:	c3                   	ret    

8000009f <fork>:

static inline int fork (void) {
8000009f:	55                   	push   %ebp
800000a0:	89 e5                	mov    %esp,%ebp
800000a2:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fork;
800000a5:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)

    return sys_call(&args);
800000ac:	8d 45 ec             	lea    -0x14(%ebp),%eax
800000af:	50                   	push   %eax
800000b0:	e8 5b ff ff ff       	call   80000010 <sys_call>
800000b5:	83 c4 04             	add    $0x4,%esp
}
800000b8:	c9                   	leave  
800000b9:	c3                   	ret    

800000ba <execve>:
 * @param name 外部程序名
 * @param argv 外部程序的参数，字符串常量指针，即字符串数组，数组中的char*值为常量
 * @param env  所加载程序的环境变量
 * @return int 
 */
static inline int execve(const char *name, char * const * argv, char * const * env) {
800000ba:	55                   	push   %ebp
800000bb:	89 e5                	mov    %esp,%ebp
800000bd:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_execve;
800000c0:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
    args.arg0 = (int)name;
800000c7:	8b 45 08             	mov    0x8(%ebp),%eax
800000ca:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)argv;
800000cd:	8b 45 0c             	mov    0xc(%ebp),%eax
800000d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = (int)env;
800000d3:	8b 45 10             	mov    0x10(%ebp),%eax
800000d6:	89 45 f8             	mov    %eax,-0x8(%ebp)


    return sys_call(&args);
800000d9:	8d 45 ec             	lea    -0x14(%ebp),%eax
800000dc:	50                   	push   %eax
800000dd:	e8 2e ff ff ff       	call   80000010 <sys_call>
800000e2:	83 c4 04             	add    $0x4,%esp
}
800000e5:	c9                   	leave  
800000e6:	c3                   	ret    

800000e7 <first_main>:

#include "tools/log.h"
#include "core/task.h"
#include  "applib/lib_syscall.h"

int first_main(void) {
800000e7:	55                   	push   %ebp
800000e8:	89 e5                	mov    %esp,%ebp
800000ea:	83 ec 20             	sub    $0x20,%esp
    //     //msleep(100);
    // }
    
    int pid;
    int i;
    for (i = 0; i < 1; ++i) {
800000ed:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
800000f4:	eb 12                	jmp    80000108 <first_main+0x21>
        pid = fork();
800000f6:	e8 a4 ff ff ff       	call   8000009f <fork>
800000fb:	89 45 f8             	mov    %eax,-0x8(%ebp)
        if (pid == 0)
800000fe:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
80000102:	74 0c                	je     80000110 <first_main+0x29>
    for (i = 0; i < 1; ++i) {
80000104:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
80000108:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
8000010c:	7e e8                	jle    800000f6 <first_main+0xf>
8000010e:	eb 01                	jmp    80000111 <first_main+0x2a>
            break;
80000110:	90                   	nop
    }
    char const *argv[] = {"arg0", "arg1", "arg2", "arg3"};
80000111:	c7 45 e8 65 01 00 80 	movl   $0x80000165,-0x18(%ebp)
80000118:	c7 45 ec 6a 01 00 80 	movl   $0x8000016a,-0x14(%ebp)
8000011f:	c7 45 f0 6f 01 00 80 	movl   $0x8000016f,-0x10(%ebp)
80000126:	c7 45 f4 74 01 00 80 	movl   $0x80000174,-0xc(%ebp)
    print_msg("i = %d", i);
8000012d:	ff 75 fc             	push   -0x4(%ebp)
80000130:	68 79 01 00 80       	push   $0x80000179
80000135:	e8 3d ff ff ff       	call   80000077 <print_msg>
8000013a:	83 c4 08             	add    $0x8,%esp
    print_msg("fist task pid = %d", getpid());
8000013d:	e8 1a ff ff ff       	call   8000005c <getpid>
80000142:	50                   	push   %eax
80000143:	68 80 01 00 80       	push   $0x80000180
80000148:	e8 2a ff ff ff       	call   80000077 <print_msg>
8000014d:	83 c4 08             	add    $0x8,%esp
    execve("/shell.elf", argv, 0);
80000150:	6a 00                	push   $0x0
80000152:	8d 45 e8             	lea    -0x18(%ebp),%eax
80000155:	50                   	push   %eax
80000156:	68 93 01 00 80       	push   $0x80000193
8000015b:	e8 5a ff ff ff       	call   800000ba <execve>
80000160:	83 c4 0c             	add    $0xc,%esp
    

    for (;;)
80000163:	eb fe                	jmp    80000163 <first_main+0x7c>
80000165:	61                   	popa   
80000166:	72 67                	jb     800001cf <first_main+0xe8>
80000168:	30 00                	xor    %al,(%eax)
8000016a:	61                   	popa   
8000016b:	72 67                	jb     800001d4 <first_main+0xed>
8000016d:	31 00                	xor    %eax,(%eax)
8000016f:	61                   	popa   
80000170:	72 67                	jb     800001d9 <first_main+0xf2>
80000172:	32 00                	xor    (%eax),%al
80000174:	61                   	popa   
80000175:	72 67                	jb     800001de <first_main+0xf7>
80000177:	33 00                	xor    (%eax),%eax
80000179:	69 20 3d 20 25 64    	imul   $0x6425203d,(%eax),%esp
8000017f:	00 66 69             	add    %ah,0x69(%esi)
80000182:	73 74                	jae    800001f8 <first_main+0x111>
80000184:	20 74 61 73          	and    %dh,0x73(%ecx,%eiz,2)
80000188:	6b 20 70             	imul   $0x70,(%eax),%esp
8000018b:	69 64 20 3d 20 25 64 	imul   $0x642520,0x3d(%eax,%eiz,1),%esp
80000192:	00 
80000193:	2f                   	das    
80000194:	73 68                	jae    800001fe <first_main+0x117>
80000196:	65 6c                	gs insb (%dx),%es:(%edi)
80000198:	6c                   	insb   (%dx),%es:(%edi)
80000199:	2e 65 6c             	cs gs insb (%dx),%es:(%edi)
8000019c:	66                   	data16
	...
