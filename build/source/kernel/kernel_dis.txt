
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf:     file format elf32-i386
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00002fc0 memsz 0x00017d10 flags rwx
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000026b3  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000908  000126b4  000126b4  000036b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000004  00012fbc  00012fbc  00003fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00014d50  00012fc0  00012fc0  00003fc0  2**5
                  ALLOC
  4 .debug_line   0000146e  00000000  00000000  00003fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_line_str 00000592  00000000  00000000  0000542e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   0000328d  00000000  00000000  000059c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 0000114d  00000000  00000000  00008c4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_aranges 00000180  00000000  00000000  00009da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    00000d9d  00000000  00000000  00009f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .comment      0000002b  00000000  00000000  0000acbd  2**0
                  CONTENTS, READONLY
 11 .debug_frame  00000f48  00000000  00000000  0000ace8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010012 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 task.c
000102ad l     F .text	0000003d list_node_init
00012788 l     O .rodata	0000000f __func__.9
000102ea l     F .text	0000002d list_node_next
000127e8 l     O .rodata	0000000f __func__.3
00010317 l     F .text	00000047 list_init
00012798 l     O .rodata	0000000a __func__.8
0001035e l     F .text	00000035 list_is_empty
000127f8 l     O .rodata	0000000e __func__.2
00010393 l     F .text	0000002d list_get_size
000127d8 l     O .rodata	0000000e __func__.4
000103c0 l     F .text	0000002c list_get_first
000127c8 l     O .rodata	0000000f __func__.5
000103ec l     F .text	00000007 hlt
000103f3 l     F .text	0000001a far_jump
0001040d l     F .text	00000017 write_tr
00012fc0 l     O .bss	00000190 task_manager
00010424 l     F .text	0000001f switch_to_tss
0001045e l     F .text	000000fb tss_init
0001277c l     O .rodata	0000000a __func__.10
00013160 l     O .bss	00000200 empty_task_stack
0001063d l     F .text	0000000a empty_task
000127a4 l     O .rodata	0000000f __func__.7
000127b4 l     O .rodata	00000011 __func__.6
00012808 l     O .rodata	0000000f __func__.1
00012818 l     O .rodata	00000010 __func__.0
00000000 l    df *ABS*	00000000 gdt.c
00010abd l     F .text	00000028 lgdt
00013360 l     O .bss	00010000 gdt_table
00000000 l    df *ABS*	00000000 idt.c
00010c58 l     F .text	00000007 cli
00010c5f l     F .text	00000007 sti
00010c66 l     F .text	00000007 hlt
00010c6d l     F .text	0000001d inb
00010c8a l     F .text	00000021 outb
00010cab l     F .text	00000028 lidt
00010cd3 l     F .text	00000010 read_eflags
00010ce3 l     F .text	0000000b write_eflags
00023360 l     O .bss	00000800 idt_table
00010cee l     F .text	000000e9 print_exception_fram
00010dd7 l     F .text	0000003e do_default_handler
00011061 l     F .text	00000047 gate_desc_set
000110e8 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 time.c
00011492 l     F .text	00000021 outb
00023b60 l     O .bss	00000004 sys_tick
000114db l     F .text	00000062 init_pit
00000000 l    df *ABS*	00000000 init.c
00011555 l     F .text	00000007 sti
00012c28 l     O .rodata	0000000c __func__.0
00023b80 l     O .bss	000000b4 task_test_task_1
00023c40 l     O .bss	000000b4 task_test_task_2
00023d00 l     O .bss	00001000 test_task_1_stack
00024d00 l     O .bss	00001000 test_task_2_stack
00025d00 l     O .bss	00000010 sem
00000000 l    df *ABS*	00000000 sem.c
000116ce l     F .text	00000047 list_init
00012cd8 l     O .rodata	0000000a __func__.1
00011715 l     F .text	00000035 list_is_empty
00012ce4 l     O .rodata	0000000e __func__.0
00012ccc l     O .rodata	00000009 __func__.2
00000000 l    df *ABS*	00000000 test.c
0001189e l     F .text	00000047 list_init
00012df8 l     O .rodata	0000000a __func__.3
000118e5 l     F .text	0000002d list_get_size
00012e04 l     O .rodata	0000000e __func__.2
00011912 l     F .text	0000002c list_get_first
00012e24 l     O .rodata	0000000f __func__.0
0001193e l     F .text	0000002d list_get_last
00012e14 l     O .rodata	0000000e __func__.1
00000000 l    df *ABS*	00000000 assert.c
00011c46 l     F .text	00000007 hlt
00000000 l    df *ABS*	00000000 klib.c
00012fbc l     O .data	00000004 num_to_char.0
00000000 l    df *ABS*	00000000 list.c
00012165 l     F .text	00000035 list_is_empty
00012f54 l     O .rodata	0000000e __func__.5
0001219a l     F .text	0000002d list_get_size
00012f8c l     O .rodata	0000000e __func__.2
00012f40 l     O .rodata	00000012 __func__.6
00012f64 l     O .rodata	00000011 __func__.4
00012f78 l     O .rodata	00000012 __func__.3
00012f9c l     O .rodata	00000011 __func__.1
00012fb0 l     O .rodata	0000000c __func__.0
00000000 l    df *ABS*	00000000 log.c
00012510 l     F .text	0000001d inb
0001252d l     F .text	00000021 outb
00011dba g     F .text	0000004f kernel_memcpy
000112ee g     F .text	00000098 idt_enable
000107d8 g     F .text	0000000a task_current
00012252 g     F .text	0000008f list_insert_last
0001084a g     F .text	00000061 sys_yield
00010f49 g     F .text	0000001c do_handler_segment_not_present
00010714 g     F .text	0000004b task_set_ready
00011425 g     F .text	0000000b idt_enable_global
00011e09 g     F .text	00000041 kernel_memset
00010081 g       .text	00000000 exception_handler_nmi
00010243 g       .text	00000000 exception_handler_virtual_exception
0001254e g     F .text	00000075 log_init
00011613 g     F .text	000000bb init_main
000101ee g       .text	00000000 exception_handler_alignment_check
00011c83 g     F .text	00000047 kernel_strcpy
0001141a g     F .text	0000000b idt_disable_global
000110a8 g     F .text	00000040 idt_install
0001002a g       .text	00000000 exception_handler_unknown
0001009e g       .text	00000000 exception_handler_breakpoint
00010ea1 g     F .text	0000001c do_handler_overflow
00010fd5 g     F .text	0000001c do_handler_alignment_check
0001019b g       .text	00000000 exception_handler_general_protection
00010f81 g     F .text	0000001c do_handler_general_protection
00011045 g     F .text	0000001c do_handler_control_exception
00011875 g     F .text	00000029 sem_count
00010e31 g     F .text	0000001c do_handler_divider
00010f11 g     F .text	0000001c do_handler_double_fault
00010f9d g     F .text	0000001c do_handler_page_fault
0001012f g       .text	00000000 exception_handler_double_fault
00011430 g     F .text	00000039 pic_send_eoi
00012392 g     F .text	000000b5 list_remove_last
0001070a g     F .text	0000000a task_first_task
0001178d g     F .text	0000006b sem_wait
00010180 g       .text	00000000 exception_handler_stack_segment_fault
00010ba4 g     F .text	00000070 gdt_init
00011029 g     F .text	0000001c do_handler_virtual_exception
000100bb g       .text	00000000 exception_handler_overflow
00010298 g       .text	00000000 simple_switch
0001027b g       .text	00000000 exception_handler_time
00010e4d g     F .text	0000001c do_handler_debug
00025d10 g     O .bss	00002000 stack
00010a5d g     F .text	00000060 sys_sleep
000115da g     F .text	00000039 test_task_2
0001196b g     F .text	000002db list_test
00010260 g       .text	00000000 exception_handler_control_exception
000100d8 g       .text	00000000 exception_handler_bound_range
0001117b g     F .text	00000173 idt_init
000117f8 g     F .text	0000007d sem_notify
00010ed9 g     F .text	0000001c do_handler_invalid_opcode
0001014a g       .text	00000000 exception_handler_invalid_tss
00010fb9 g     F .text	0000001c do_handler_fpu_error
000106c2 g     F .text	00000048 task_first_init
00010ff1 g     F .text	0000001c do_handler_machine_check
000121c7 g     F .text	0000008b list_insert_first
00010a12 g     F .text	0000004b task_set_wakeup
000107aa g     F .text	0000002e task_ready_first
00010047 g       .text	00000000 exception_handler_divider
00011cca g     F .text	00000051 kernel_strncpy
0001155c g     F .text	00000045 kernel_init
0001174a g     F .text	00000043 sem_init
00010000 g       .text	00000000 _start
00011ef2 g     F .text	0000019d kernel_vsprintf
00010112 g       .text	00000000 exception_handler_device_unavailable
000100f5 g       .text	00000000 exception_handler_invalid_opcode
00010209 g       .text	00000000 exception_handler_machine_check
00010f2d g     F .text	0000001c do_handler_invalid_tss
00011386 g     F .text	00000094 idt_disable
000109b6 g     F .text	0000005c task_set_sleep
00010e69 g     F .text	0000001c do_handler_nmi
000115a1 g     F .text	00000039 test_task_1
00010226 g       .text	00000000 exception_handler_smd_exception
00010ef5 g     F .text	0000001c do_handler_device_unavailable
00011469 g     F .text	00000018 idt_enter_protection
000108ab g     F .text	0000010b task_slice_end
00011e4a g     F .text	00000084 kernel_memcmp
0001100d g     F .text	0000001c do_handler_smd_exception
000101b6 g       .text	00000000 exception_handler_page_fault
00010e15 g     F .text	0000001c do_handler_unknown
000101d1 g       .text	00000000 exception_handler_fpu_error
00010443 g     F .text	0000001b task_switch_from_to
000107e2 g     F .text	00000068 task_switch
00011d85 g     F .text	00000035 kernel_strlen
0001075f g     F .text	0000004b task_set_unready
00010064 g       .text	00000000 exception_handler_debug
00010ae5 g     F .text	000000bf segment_desc_set
00010ebd g     F .text	0000001c do_handler_bound_range
000122e1 g     F .text	000000b1 list_remove_first
00011d1b g     F .text	0000006a kernel_strncmp
00010165 g       .text	00000000 exception_handler_segment_not_present
00010647 g     F .text	0000007b task_manager_init
00011c4d g     F .text	00000036 pannic
00010f65 g     F .text	0000001c do_handler_stack_segment_fault
00010e85 g     F .text	0000001c do_handler_breakpoint
000125c3 g     F .text	000000f0 log_printf
00010559 g     F .text	000000e4 task_init
00011ece g     F .text	00000024 kernel_sprintf
00010c14 g     F .text	00000044 gdt_alloc_desc
0001208f g     F .text	000000d6 kernel_itoa
00012447 g     F .text	000000c9 list_remove
00011481 g     F .text	00000011 idt_leave_protection
000114b3 g     F .text	00000028 do_handler_time
0001153d g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
*            [&boot_info]
*    esp ->  [返回地址]
*   所以要想访问到&boot_info，则只需从当前esp的位置偏移+4字节即可
*/
_start:
    mov %esp, %ebp      //栈空间最好只用ebp来进行偏移访问
   10000:	89 e5                	mov    %esp,%ebp
    mov 0x4(%ebp), %eax //将&boot_info的值存入eax中
   10002:	8b 45 04             	mov    0x4(%ebp),%eax

    push %eax           //外部函数将参数压入栈中，再进行函数调用
   10005:	50                   	push   %eax
    call kernel_init    //调用内核初始化函数
   10006:	e8 51 15 00 00       	call   1155c <kernel_init>

    //完成内核初始化后，进行直接跳转，以替换cs寄存器中临时的内核代码段的选择子为此时内存中真正的内核代码段选择子
    //cs:KERNEL_SELECTOR_CS, ip:gdt_reload
    jmp $KERNEL_SELECTOR_CS, $gdt_reload    
   1000b:	ea 12 00 01 00 08 00 	ljmp   $0x8,$0x10012

00010012 <gdt_reload>:

gdt_reload:
    //替换其他段寄存器中临时的内核数据段的选择子为此时内存中真正的内核数据段的选择子
    mov $KERNEL_SELECTOR_DS, %ax
   10012:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10016:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10018:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001a:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001c:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001e:	8e e8                	mov    %eax,%gs

    //重新指定栈空间位置，不再使用0~0x7c00这部分空间
    //stack段已在下面预留了KERNEL_STACK_SIZE的空间大小，直接将最高地址赋值给esp，esp便可使用这片空间
    mov $(stack + KERNEL_STACK_SIZE), %esp
   10020:	bc 10 7d 02 00       	mov    $0x27d10,%esp

    //继续初始化内核
    //TODO:后序再来说明该函数的作用
    jmp init_main 
   10025:	e9 e9 15 00 00       	jmp    11613 <init_main>

0001002a <exception_handler_unknown>:
//宏结束标志
.endm

//使用定义的异常宏 
//                |异常类型|       |IDT索引| |错误码|
exception_handler unknown,              -1, 0    //未知异常
   1002a:	6a 00                	push   $0x0
   1002c:	6a ff                	push   $0xffffffff
   1002e:	60                   	pusha  
   1002f:	1e                   	push   %ds
   10030:	06                   	push   %es
   10031:	0f a0                	push   %fs
   10033:	0f a8                	push   %gs
   10035:	54                   	push   %esp
   10036:	e8 da 0d 00 00       	call   10e15 <do_handler_unknown>
   1003b:	5c                   	pop    %esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider,              0,  0    //除0异常
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 d9 0d 00 00       	call   10e31 <do_handler_divider>
   10058:	5c                   	pop    %esp
   10059:	0f a9                	pop    %gs
   1005b:	0f a1                	pop    %fs
   1005d:	07                   	pop    %es
   1005e:	1f                   	pop    %ds
   1005f:	61                   	popa   
   10060:	83 c4 08             	add    $0x8,%esp
   10063:	cf                   	iret   

00010064 <exception_handler_debug>:
exception_handler debug,                1,  0    //debug异常
   10064:	6a 00                	push   $0x0
   10066:	6a 01                	push   $0x1
   10068:	60                   	pusha  
   10069:	1e                   	push   %ds
   1006a:	06                   	push   %es
   1006b:	0f a0                	push   %fs
   1006d:	0f a8                	push   %gs
   1006f:	54                   	push   %esp
   10070:	e8 d8 0d 00 00       	call   10e4d <do_handler_debug>
   10075:	5c                   	pop    %esp
   10076:	0f a9                	pop    %gs
   10078:	0f a1                	pop    %fs
   1007a:	07                   	pop    %es
   1007b:	1f                   	pop    %ds
   1007c:	61                   	popa   
   1007d:	83 c4 08             	add    $0x8,%esp
   10080:	cf                   	iret   

00010081 <exception_handler_nmi>:
exception_handler nmi,                  2,  0
   10081:	6a 00                	push   $0x0
   10083:	6a 02                	push   $0x2
   10085:	60                   	pusha  
   10086:	1e                   	push   %ds
   10087:	06                   	push   %es
   10088:	0f a0                	push   %fs
   1008a:	0f a8                	push   %gs
   1008c:	54                   	push   %esp
   1008d:	e8 d7 0d 00 00       	call   10e69 <do_handler_nmi>
   10092:	5c                   	pop    %esp
   10093:	0f a9                	pop    %gs
   10095:	0f a1                	pop    %fs
   10097:	07                   	pop    %es
   10098:	1f                   	pop    %ds
   10099:	61                   	popa   
   1009a:	83 c4 08             	add    $0x8,%esp
   1009d:	cf                   	iret   

0001009e <exception_handler_breakpoint>:
exception_handler breakpoint,           3,  0
   1009e:	6a 00                	push   $0x0
   100a0:	6a 03                	push   $0x3
   100a2:	60                   	pusha  
   100a3:	1e                   	push   %ds
   100a4:	06                   	push   %es
   100a5:	0f a0                	push   %fs
   100a7:	0f a8                	push   %gs
   100a9:	54                   	push   %esp
   100aa:	e8 d6 0d 00 00       	call   10e85 <do_handler_breakpoint>
   100af:	5c                   	pop    %esp
   100b0:	0f a9                	pop    %gs
   100b2:	0f a1                	pop    %fs
   100b4:	07                   	pop    %es
   100b5:	1f                   	pop    %ds
   100b6:	61                   	popa   
   100b7:	83 c4 08             	add    $0x8,%esp
   100ba:	cf                   	iret   

000100bb <exception_handler_overflow>:
exception_handler overflow,             4,  0
   100bb:	6a 00                	push   $0x0
   100bd:	6a 04                	push   $0x4
   100bf:	60                   	pusha  
   100c0:	1e                   	push   %ds
   100c1:	06                   	push   %es
   100c2:	0f a0                	push   %fs
   100c4:	0f a8                	push   %gs
   100c6:	54                   	push   %esp
   100c7:	e8 d5 0d 00 00       	call   10ea1 <do_handler_overflow>
   100cc:	5c                   	pop    %esp
   100cd:	0f a9                	pop    %gs
   100cf:	0f a1                	pop    %fs
   100d1:	07                   	pop    %es
   100d2:	1f                   	pop    %ds
   100d3:	61                   	popa   
   100d4:	83 c4 08             	add    $0x8,%esp
   100d7:	cf                   	iret   

000100d8 <exception_handler_bound_range>:
exception_handler bound_range,          5,  0
   100d8:	6a 00                	push   $0x0
   100da:	6a 05                	push   $0x5
   100dc:	60                   	pusha  
   100dd:	1e                   	push   %ds
   100de:	06                   	push   %es
   100df:	0f a0                	push   %fs
   100e1:	0f a8                	push   %gs
   100e3:	54                   	push   %esp
   100e4:	e8 d4 0d 00 00       	call   10ebd <do_handler_bound_range>
   100e9:	5c                   	pop    %esp
   100ea:	0f a9                	pop    %gs
   100ec:	0f a1                	pop    %fs
   100ee:	07                   	pop    %es
   100ef:	1f                   	pop    %ds
   100f0:	61                   	popa   
   100f1:	83 c4 08             	add    $0x8,%esp
   100f4:	cf                   	iret   

000100f5 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode,       6,  0
   100f5:	6a 00                	push   $0x0
   100f7:	6a 06                	push   $0x6
   100f9:	60                   	pusha  
   100fa:	1e                   	push   %ds
   100fb:	06                   	push   %es
   100fc:	0f a0                	push   %fs
   100fe:	0f a8                	push   %gs
   10100:	54                   	push   %esp
   10101:	e8 d3 0d 00 00       	call   10ed9 <do_handler_invalid_opcode>
   10106:	5c                   	pop    %esp
   10107:	0f a9                	pop    %gs
   10109:	0f a1                	pop    %fs
   1010b:	07                   	pop    %es
   1010c:	1f                   	pop    %ds
   1010d:	61                   	popa   
   1010e:	83 c4 08             	add    $0x8,%esp
   10111:	cf                   	iret   

00010112 <exception_handler_device_unavailable>:
exception_handler device_unavailable,   7,  0
   10112:	6a 00                	push   $0x0
   10114:	6a 07                	push   $0x7
   10116:	60                   	pusha  
   10117:	1e                   	push   %ds
   10118:	06                   	push   %es
   10119:	0f a0                	push   %fs
   1011b:	0f a8                	push   %gs
   1011d:	54                   	push   %esp
   1011e:	e8 d2 0d 00 00       	call   10ef5 <do_handler_device_unavailable>
   10123:	5c                   	pop    %esp
   10124:	0f a9                	pop    %gs
   10126:	0f a1                	pop    %fs
   10128:	07                   	pop    %es
   10129:	1f                   	pop    %ds
   1012a:	61                   	popa   
   1012b:	83 c4 08             	add    $0x8,%esp
   1012e:	cf                   	iret   

0001012f <exception_handler_double_fault>:
exception_handler double_fault,         8,  1
   1012f:	6a 08                	push   $0x8
   10131:	60                   	pusha  
   10132:	1e                   	push   %ds
   10133:	06                   	push   %es
   10134:	0f a0                	push   %fs
   10136:	0f a8                	push   %gs
   10138:	54                   	push   %esp
   10139:	e8 d3 0d 00 00       	call   10f11 <do_handler_double_fault>
   1013e:	5c                   	pop    %esp
   1013f:	0f a9                	pop    %gs
   10141:	0f a1                	pop    %fs
   10143:	07                   	pop    %es
   10144:	1f                   	pop    %ds
   10145:	61                   	popa   
   10146:	83 c4 08             	add    $0x8,%esp
   10149:	cf                   	iret   

0001014a <exception_handler_invalid_tss>:
exception_handler invalid_tss,          10, 1
   1014a:	6a 0a                	push   $0xa
   1014c:	60                   	pusha  
   1014d:	1e                   	push   %ds
   1014e:	06                   	push   %es
   1014f:	0f a0                	push   %fs
   10151:	0f a8                	push   %gs
   10153:	54                   	push   %esp
   10154:	e8 d4 0d 00 00       	call   10f2d <do_handler_invalid_tss>
   10159:	5c                   	pop    %esp
   1015a:	0f a9                	pop    %gs
   1015c:	0f a1                	pop    %fs
   1015e:	07                   	pop    %es
   1015f:	1f                   	pop    %ds
   10160:	61                   	popa   
   10161:	83 c4 08             	add    $0x8,%esp
   10164:	cf                   	iret   

00010165 <exception_handler_segment_not_present>:
exception_handler segment_not_present,  11, 1
   10165:	6a 0b                	push   $0xb
   10167:	60                   	pusha  
   10168:	1e                   	push   %ds
   10169:	06                   	push   %es
   1016a:	0f a0                	push   %fs
   1016c:	0f a8                	push   %gs
   1016e:	54                   	push   %esp
   1016f:	e8 d5 0d 00 00       	call   10f49 <do_handler_segment_not_present>
   10174:	5c                   	pop    %esp
   10175:	0f a9                	pop    %gs
   10177:	0f a1                	pop    %fs
   10179:	07                   	pop    %es
   1017a:	1f                   	pop    %ds
   1017b:	61                   	popa   
   1017c:	83 c4 08             	add    $0x8,%esp
   1017f:	cf                   	iret   

00010180 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,  12, 1
   10180:	6a 0c                	push   $0xc
   10182:	60                   	pusha  
   10183:	1e                   	push   %ds
   10184:	06                   	push   %es
   10185:	0f a0                	push   %fs
   10187:	0f a8                	push   %gs
   10189:	54                   	push   %esp
   1018a:	e8 d6 0d 00 00       	call   10f65 <do_handler_stack_segment_fault>
   1018f:	5c                   	pop    %esp
   10190:	0f a9                	pop    %gs
   10192:	0f a1                	pop    %fs
   10194:	07                   	pop    %es
   10195:	1f                   	pop    %ds
   10196:	61                   	popa   
   10197:	83 c4 08             	add    $0x8,%esp
   1019a:	cf                   	iret   

0001019b <exception_handler_general_protection>:
exception_handler general_protection,   13, 1
   1019b:	6a 0d                	push   $0xd
   1019d:	60                   	pusha  
   1019e:	1e                   	push   %ds
   1019f:	06                   	push   %es
   101a0:	0f a0                	push   %fs
   101a2:	0f a8                	push   %gs
   101a4:	54                   	push   %esp
   101a5:	e8 d7 0d 00 00       	call   10f81 <do_handler_general_protection>
   101aa:	5c                   	pop    %esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa   
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret   

000101b6 <exception_handler_page_fault>:
exception_handler page_fault,           14, 1
   101b6:	6a 0e                	push   $0xe
   101b8:	60                   	pusha  
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 d8 0d 00 00       	call   10f9d <do_handler_page_fault>
   101c5:	5c                   	pop    %esp
   101c6:	0f a9                	pop    %gs
   101c8:	0f a1                	pop    %fs
   101ca:	07                   	pop    %es
   101cb:	1f                   	pop    %ds
   101cc:	61                   	popa   
   101cd:	83 c4 08             	add    $0x8,%esp
   101d0:	cf                   	iret   

000101d1 <exception_handler_fpu_error>:
exception_handler fpu_error,            16, 0
   101d1:	6a 00                	push   $0x0
   101d3:	6a 10                	push   $0x10
   101d5:	60                   	pusha  
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 d7 0d 00 00       	call   10fb9 <do_handler_fpu_error>
   101e2:	5c                   	pop    %esp
   101e3:	0f a9                	pop    %gs
   101e5:	0f a1                	pop    %fs
   101e7:	07                   	pop    %es
   101e8:	1f                   	pop    %ds
   101e9:	61                   	popa   
   101ea:	83 c4 08             	add    $0x8,%esp
   101ed:	cf                   	iret   

000101ee <exception_handler_alignment_check>:
exception_handler alignment_check,      17, 1
   101ee:	6a 11                	push   $0x11
   101f0:	60                   	pusha  
   101f1:	1e                   	push   %ds
   101f2:	06                   	push   %es
   101f3:	0f a0                	push   %fs
   101f5:	0f a8                	push   %gs
   101f7:	54                   	push   %esp
   101f8:	e8 d8 0d 00 00       	call   10fd5 <do_handler_alignment_check>
   101fd:	5c                   	pop    %esp
   101fe:	0f a9                	pop    %gs
   10200:	0f a1                	pop    %fs
   10202:	07                   	pop    %es
   10203:	1f                   	pop    %ds
   10204:	61                   	popa   
   10205:	83 c4 08             	add    $0x8,%esp
   10208:	cf                   	iret   

00010209 <exception_handler_machine_check>:
exception_handler machine_check,        18, 0
   10209:	6a 00                	push   $0x0
   1020b:	6a 12                	push   $0x12
   1020d:	60                   	pusha  
   1020e:	1e                   	push   %ds
   1020f:	06                   	push   %es
   10210:	0f a0                	push   %fs
   10212:	0f a8                	push   %gs
   10214:	54                   	push   %esp
   10215:	e8 d7 0d 00 00       	call   10ff1 <do_handler_machine_check>
   1021a:	5c                   	pop    %esp
   1021b:	0f a9                	pop    %gs
   1021d:	0f a1                	pop    %fs
   1021f:	07                   	pop    %es
   10220:	1f                   	pop    %ds
   10221:	61                   	popa   
   10222:	83 c4 08             	add    $0x8,%esp
   10225:	cf                   	iret   

00010226 <exception_handler_smd_exception>:
exception_handler smd_exception,        19, 0
   10226:	6a 00                	push   $0x0
   10228:	6a 13                	push   $0x13
   1022a:	60                   	pusha  
   1022b:	1e                   	push   %ds
   1022c:	06                   	push   %es
   1022d:	0f a0                	push   %fs
   1022f:	0f a8                	push   %gs
   10231:	54                   	push   %esp
   10232:	e8 d6 0d 00 00       	call   1100d <do_handler_smd_exception>
   10237:	5c                   	pop    %esp
   10238:	0f a9                	pop    %gs
   1023a:	0f a1                	pop    %fs
   1023c:	07                   	pop    %es
   1023d:	1f                   	pop    %ds
   1023e:	61                   	popa   
   1023f:	83 c4 08             	add    $0x8,%esp
   10242:	cf                   	iret   

00010243 <exception_handler_virtual_exception>:
exception_handler virtual_exception,    20, 0
   10243:	6a 00                	push   $0x0
   10245:	6a 14                	push   $0x14
   10247:	60                   	pusha  
   10248:	1e                   	push   %ds
   10249:	06                   	push   %es
   1024a:	0f a0                	push   %fs
   1024c:	0f a8                	push   %gs
   1024e:	54                   	push   %esp
   1024f:	e8 d5 0d 00 00       	call   11029 <do_handler_virtual_exception>
   10254:	5c                   	pop    %esp
   10255:	0f a9                	pop    %gs
   10257:	0f a1                	pop    %fs
   10259:	07                   	pop    %es
   1025a:	1f                   	pop    %ds
   1025b:	61                   	popa   
   1025c:	83 c4 08             	add    $0x8,%esp
   1025f:	cf                   	iret   

00010260 <exception_handler_control_exception>:
exception_handler control_exception,    21, 1
   10260:	6a 15                	push   $0x15
   10262:	60                   	pusha  
   10263:	1e                   	push   %ds
   10264:	06                   	push   %es
   10265:	0f a0                	push   %fs
   10267:	0f a8                	push   %gs
   10269:	54                   	push   %esp
   1026a:	e8 d6 0d 00 00       	call   11045 <do_handler_control_exception>
   1026f:	5c                   	pop    %esp
   10270:	0f a9                	pop    %gs
   10272:	0f a1                	pop    %fs
   10274:	07                   	pop    %es
   10275:	1f                   	pop    %ds
   10276:	61                   	popa   
   10277:	83 c4 08             	add    $0x8,%esp
   1027a:	cf                   	iret   

0001027b <exception_handler_time>:

//定时器的中断处理函数
exception_handler time,                 0x20, 0 
   1027b:	6a 00                	push   $0x0
   1027d:	6a 20                	push   $0x20
   1027f:	60                   	pusha  
   10280:	1e                   	push   %ds
   10281:	06                   	push   %es
   10282:	0f a0                	push   %fs
   10284:	0f a8                	push   %gs
   10286:	54                   	push   %esp
   10287:	e8 27 12 00 00       	call   114b3 <do_handler_time>
   1028c:	5c                   	pop    %esp
   1028d:	0f a9                	pop    %gs
   1028f:	0f a1                	pop    %fs
   10291:	07                   	pop    %es
   10292:	1f                   	pop    %ds
   10293:	61                   	popa   
   10294:	83 c4 08             	add    $0x8,%esp
   10297:	cf                   	iret   

00010298 <simple_switch>:

    .text
    .global simple_switch
simple_switch:  //simple_switch(from, to)
    //1.获取参数
    mov 8(%esp), %edx   //获取 to, 地址(指针) --> 目标任务的栈空间对应的 esp 的值
   10298:	8b 54 24 08          	mov    0x8(%esp),%edx
    mov 4(%esp), %eax   //获取 from, 地址(指针) --> 当前任务的栈空间对应的 esp 的值
   1029c:	8b 44 24 04          	mov    0x4(%esp),%eax


    //2.被调用者保存当前任务的 ebp, ebx, esi, edi 到当前任务的栈中
    //eax, ecx, edx, eip, eflags 已由调用者压入当前任务的栈中
    push %ebp
   102a0:	55                   	push   %ebp
    push %ebx
   102a1:	53                   	push   %ebx
    push %esi
   102a2:	56                   	push   %esi
    push %edi
   102a3:	57                   	push   %edi

    //3.更新当前任务栈空间的 esp
    mov %esp, (%eax)
   102a4:	89 20                	mov    %esp,(%eax)

    //3.进行栈任务栈的切换
    mov (%edx), %esp
   102a6:	8b 22                	mov    (%edx),%esp


    //4.恢复切换后的任务状态，ebp, ebx, esi, edi 手动恢复
    //eax, ecx, edx, eip, eflags, 是在当前任务(c函数)调用simple_switch时已压入当前任务栈中，
    //调用 ret 后会自行弹出并恢复
    pop %edi
   102a8:	5f                   	pop    %edi
    pop %esi
   102a9:	5e                   	pop    %esi
    pop %ebx
   102aa:	5b                   	pop    %ebx
    pop %ebp
   102ab:	5d                   	pop    %ebp

    //5.恢复切换后的任务执行流，相当于此时 esp ->[eip]， 即 pop %eip
   102ac:	c3                   	ret    

000102ad <list_node_init>:
    list_node_t * first;
    list_node_t * last;
    int size;
}list_t;

static inline void list_node_init(list_node_t *node) {
   102ad:	55                   	push   %ebp
   102ae:	89 e5                	mov    %esp,%ebp
   102b0:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   102b3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   102b7:	75 19                	jne    102d2 <list_node_init+0x25>
   102b9:	68 b4 26 01 00       	push   $0x126b4
   102be:	68 88 27 01 00       	push   $0x12788
   102c3:	6a 20                	push   $0x20
   102c5:	68 cc 26 01 00       	push   $0x126cc
   102ca:	e8 7e 19 00 00       	call   11c4d <pannic>
   102cf:	83 c4 10             	add    $0x10,%esp
    node->pre = node->next = (list_node_t*)0;
   102d2:	8b 45 08             	mov    0x8(%ebp),%eax
   102d5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   102dc:	8b 45 08             	mov    0x8(%ebp),%eax
   102df:	8b 50 04             	mov    0x4(%eax),%edx
   102e2:	8b 45 08             	mov    0x8(%ebp),%eax
   102e5:	89 10                	mov    %edx,(%eax)
}
   102e7:	90                   	nop
   102e8:	c9                   	leave  
   102e9:	c3                   	ret    

000102ea <list_node_next>:
    ASSERT(node != (list_node_t*)0);

    return node->pre;
}

static inline list_node_t *list_node_next(list_node_t *node) {
   102ea:	55                   	push   %ebp
   102eb:	89 e5                	mov    %esp,%ebp
   102ed:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   102f0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   102f4:	75 19                	jne    1030f <list_node_next+0x25>
   102f6:	68 b4 26 01 00       	push   $0x126b4
   102fb:	68 e8 27 01 00       	push   $0x127e8
   10300:	6a 2b                	push   $0x2b
   10302:	68 cc 26 01 00       	push   $0x126cc
   10307:	e8 41 19 00 00       	call   11c4d <pannic>
   1030c:	83 c4 10             	add    $0x10,%esp

    return node->next;
   1030f:	8b 45 08             	mov    0x8(%ebp),%eax
   10312:	8b 40 04             	mov    0x4(%eax),%eax
}
   10315:	c9                   	leave  
   10316:	c3                   	ret    

00010317 <list_init>:

static inline void list_init(list_t *list) {
   10317:	55                   	push   %ebp
   10318:	89 e5                	mov    %esp,%ebp
   1031a:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1031d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10321:	75 19                	jne    1033c <list_init+0x25>
   10323:	68 0a 27 01 00       	push   $0x1270a
   10328:	68 98 27 01 00       	push   $0x12798
   1032d:	6a 31                	push   $0x31
   1032f:	68 cc 26 01 00       	push   $0x126cc
   10334:	e8 14 19 00 00       	call   11c4d <pannic>
   10339:	83 c4 10             	add    $0x10,%esp

    list->first = list->last = (list_node_t*)0;
   1033c:	8b 45 08             	mov    0x8(%ebp),%eax
   1033f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   10346:	8b 45 08             	mov    0x8(%ebp),%eax
   10349:	8b 50 04             	mov    0x4(%eax),%edx
   1034c:	8b 45 08             	mov    0x8(%ebp),%eax
   1034f:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   10351:	8b 45 08             	mov    0x8(%ebp),%eax
   10354:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   1035b:	90                   	nop
   1035c:	c9                   	leave  
   1035d:	c3                   	ret    

0001035e <list_is_empty>:

static inline int list_is_empty(list_t *list) {
   1035e:	55                   	push   %ebp
   1035f:	89 e5                	mov    %esp,%ebp
   10361:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10364:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10368:	75 19                	jne    10383 <list_is_empty+0x25>
   1036a:	68 0a 27 01 00       	push   $0x1270a
   1036f:	68 f8 27 01 00       	push   $0x127f8
   10374:	6a 38                	push   $0x38
   10376:	68 cc 26 01 00       	push   $0x126cc
   1037b:	e8 cd 18 00 00       	call   11c4d <pannic>
   10380:	83 c4 10             	add    $0x10,%esp

    return list->size == 0;
   10383:	8b 45 08             	mov    0x8(%ebp),%eax
   10386:	8b 40 08             	mov    0x8(%eax),%eax
   10389:	85 c0                	test   %eax,%eax
   1038b:	0f 94 c0             	sete   %al
   1038e:	0f b6 c0             	movzbl %al,%eax
}
   10391:	c9                   	leave  
   10392:	c3                   	ret    

00010393 <list_get_size>:

static inline int list_get_size(list_t *list) {
   10393:	55                   	push   %ebp
   10394:	89 e5                	mov    %esp,%ebp
   10396:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10399:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1039d:	75 19                	jne    103b8 <list_get_size+0x25>
   1039f:	68 0a 27 01 00       	push   $0x1270a
   103a4:	68 d8 27 01 00       	push   $0x127d8
   103a9:	6a 3e                	push   $0x3e
   103ab:	68 cc 26 01 00       	push   $0x126cc
   103b0:	e8 98 18 00 00       	call   11c4d <pannic>
   103b5:	83 c4 10             	add    $0x10,%esp

    return list->size;
   103b8:	8b 45 08             	mov    0x8(%ebp),%eax
   103bb:	8b 40 08             	mov    0x8(%eax),%eax
}
   103be:	c9                   	leave  
   103bf:	c3                   	ret    

000103c0 <list_get_first>:

static inline list_node_t *list_get_first(list_t *list) {
   103c0:	55                   	push   %ebp
   103c1:	89 e5                	mov    %esp,%ebp
   103c3:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   103c6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   103ca:	75 19                	jne    103e5 <list_get_first+0x25>
   103cc:	68 0a 27 01 00       	push   $0x1270a
   103d1:	68 c8 27 01 00       	push   $0x127c8
   103d6:	6a 44                	push   $0x44
   103d8:	68 cc 26 01 00       	push   $0x126cc
   103dd:	e8 6b 18 00 00       	call   11c4d <pannic>
   103e2:	83 c4 10             	add    $0x10,%esp

    return list->first;
   103e5:	8b 45 08             	mov    0x8(%ebp),%eax
   103e8:	8b 00                	mov    (%eax),%eax
}
   103ea:	c9                   	leave  
   103eb:	c3                   	ret    

000103ec <hlt>:
/**
 * @brief  暂停cpu的运行,ip寄存器指向下一条指令
 *         此时cpu可以接收中断
 *
 */
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   103ec:	55                   	push   %ebp
   103ed:	89 e5                	mov    %esp,%ebp
   103ef:	f4                   	hlt    
   103f0:	90                   	nop
   103f1:	5d                   	pop    %ebp
   103f2:	c3                   	ret    

000103f3 <far_jump>:
 * @brief  远跳转，当跳转发生在TSS段之间时，cpu将会保存状态到当前TR寄存器指向的TSS段
 *
 * @param selector 选择子
 * @param offset 跳转的偏移量
 */
static inline void far_jump(uint32_t selector, uint32_t offset) {
   103f3:	55                   	push   %ebp
   103f4:	89 e5                	mov    %esp,%ebp
   103f6:	83 ec 10             	sub    $0x10,%esp
  // 传入远跳转需要的参数, 即cs = selector, eip = offset 
  uint32_t addr[] = {offset, selector};  
   103f9:	8b 45 0c             	mov    0xc(%ebp),%eax
   103fc:	89 45 f8             	mov    %eax,-0x8(%ebp)
   103ff:	8b 45 08             	mov    0x8(%ebp),%eax
   10402:	89 45 fc             	mov    %eax,-0x4(%ebp)

  __asm__ __volatile__("ljmpl *(%[a])" : : [a] "r"(addr));
   10405:	8d 45 f8             	lea    -0x8(%ebp),%eax
   10408:	ff 28                	ljmp   *(%eax)
}
   1040a:	90                   	nop
   1040b:	c9                   	leave  
   1040c:	c3                   	ret    

0001040d <write_tr>:
 * @brief   写入当前任务的TSS段描述符的选择子到TR寄存器中，告诉cpu当前段的TSS位置
 *          以便在进行任务切换时，将状态保存到该TSS段中
 * 
 * @param tss_selector 准备运行的任务的TSS段的选择子
 */
static inline void write_tr(uint16_t tss_selector) {
   1040d:	55                   	push   %ebp
   1040e:	89 e5                	mov    %esp,%ebp
   10410:	83 ec 04             	sub    $0x4,%esp
   10413:	8b 45 08             	mov    0x8(%ebp),%eax
   10416:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  __asm__ __volatile__("ltr %[v]" : : [v]"r"(tss_selector));
   1041a:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   1041e:	0f 00 d8             	ltr    %ax
}
   10421:	90                   	nop
   10422:	c9                   	leave  
   10423:	c3                   	ret    

00010424 <switch_to_tss>:

//定义全局唯一的任务管理器对象
static task_manager_t task_manager;


static void switch_to_tss(uint16_t tss_selector) {
   10424:	55                   	push   %ebp
   10425:	89 e5                	mov    %esp,%ebp
   10427:	83 ec 04             	sub    $0x4,%esp
   1042a:	8b 45 08             	mov    0x8(%ebp),%eax
   1042d:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    //进行远跳转，让cpu访问该tss段的描述符，cpu将重启到之前运行该tss对应的任务的状态继续运行该任务
    far_jump(tss_selector, 0);
   10431:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   10435:	6a 00                	push   $0x0
   10437:	50                   	push   %eax
   10438:	e8 b6 ff ff ff       	call   103f3 <far_jump>
   1043d:	83 c4 08             	add    $0x8,%esp
}
   10440:	90                   	nop
   10441:	c9                   	leave  
   10442:	c3                   	ret    

00010443 <task_switch_from_to>:
 * @brief  将任务从from切换到to
 * 
 * @param from 切换前的任务
 * @param to 切换后的任务
 */
void task_switch_from_to(task_t *from, task_t *to) {
   10443:	55                   	push   %ebp
   10444:	89 e5                	mov    %esp,%ebp
    //跳转到对应的tss段读取并恢复cpu任务状态
    switch_to_tss(to->tss_selector);
   10446:	8b 45 0c             	mov    0xc(%ebp),%eax
   10449:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
   1044f:	0f b7 c0             	movzwl %ax,%eax
   10452:	50                   	push   %eax
   10453:	e8 cc ff ff ff       	call   10424 <switch_to_tss>
   10458:	83 c4 04             	add    $0x4,%esp
}
   1045b:	90                   	nop
   1045c:	c9                   	leave  
   1045d:	c3                   	ret    

0001045e <tss_init>:
 * 
 * @param task 需要初始化的任务对象
 * @param entry 任务入口地址
 * @param esp 任务所用的栈顶指针
 */
static void tss_init(task_t *task, uint32_t entry, uint32_t esp) {
   1045e:	55                   	push   %ebp
   1045f:	89 e5                	mov    %esp,%ebp
   10461:	83 ec 18             	sub    $0x18,%esp

    //1.将tss段的值置空
    kernel_memset(&task->tss, 0, sizeof(task->tss));
   10464:	8b 45 08             	mov    0x8(%ebp),%eax
   10467:	83 c0 48             	add    $0x48,%eax
   1046a:	83 ec 04             	sub    $0x4,%esp
   1046d:	6a 68                	push   $0x68
   1046f:	6a 00                	push   $0x0
   10471:	50                   	push   %eax
   10472:	e8 92 19 00 00       	call   11e09 <kernel_memset>
   10477:	83 c4 10             	add    $0x10,%esp

    //2.设置eip，即任务的起始地址
    task->tss.eip = entry;
   1047a:	8b 45 08             	mov    0x8(%ebp),%eax
   1047d:	8b 55 0c             	mov    0xc(%ebp),%edx
   10480:	89 50 68             	mov    %edx,0x68(%eax)

    //3.根据任务的特权级设置任务所使用的栈空间
    task->tss.esp = task->tss.esp0 = esp;
   10483:	8b 45 08             	mov    0x8(%ebp),%eax
   10486:	8b 55 10             	mov    0x10(%ebp),%edx
   10489:	89 50 4c             	mov    %edx,0x4c(%eax)
   1048c:	8b 45 08             	mov    0x8(%ebp),%eax
   1048f:	8b 50 4c             	mov    0x4c(%eax),%edx
   10492:	8b 45 08             	mov    0x8(%ebp),%eax
   10495:	89 90 80 00 00 00    	mov    %edx,0x80(%eax)

    //4.平坦模型，初始化栈空间段寄存器
    task->tss.ss = task->tss.ss0 = KERNEL_SELECTOR_DS;
   1049b:	8b 45 08             	mov    0x8(%ebp),%eax
   1049e:	c7 40 50 10 00 00 00 	movl   $0x10,0x50(%eax)
   104a5:	8b 45 08             	mov    0x8(%ebp),%eax
   104a8:	8b 50 50             	mov    0x50(%eax),%edx
   104ab:	8b 45 08             	mov    0x8(%ebp),%eax
   104ae:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)

    //5. 平坦模型，初始其余化段寄存器
    task->tss.es = task->tss.fs = task->tss.gs = task->tss.ds = KERNEL_SELECTOR_DS;
   104b4:	8b 45 08             	mov    0x8(%ebp),%eax
   104b7:	c7 80 9c 00 00 00 10 	movl   $0x10,0x9c(%eax)
   104be:	00 00 00 
   104c1:	8b 45 08             	mov    0x8(%ebp),%eax
   104c4:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
   104ca:	8b 45 08             	mov    0x8(%ebp),%eax
   104cd:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
   104d3:	8b 45 08             	mov    0x8(%ebp),%eax
   104d6:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
   104dc:	8b 45 08             	mov    0x8(%ebp),%eax
   104df:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
   104e5:	8b 45 08             	mov    0x8(%ebp),%eax
   104e8:	8b 90 a0 00 00 00    	mov    0xa0(%eax),%edx
   104ee:	8b 45 08             	mov    0x8(%ebp),%eax
   104f1:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)

    //6.平坦模型，初始化代码段寄存器
    task->tss.cs = KERNEL_SELECTOR_CS;
   104f7:	8b 45 08             	mov    0x8(%ebp),%eax
   104fa:	c7 80 94 00 00 00 08 	movl   $0x8,0x94(%eax)
   10501:	00 00 00 

    //7.初始化eflags寄存器，使cpu中断保持开启
    task->tss.eflags = EFLAGS_DEFAULT_1 | EFLAGS_IF;
   10504:	8b 45 08             	mov    0x8(%ebp),%eax
   10507:	c7 40 6c 02 02 00 00 	movl   $0x202,0x6c(%eax)

    
    idt_state_t state = idt_enter_protection();//TODO:加锁
   1050e:	e8 56 0f 00 00       	call   11469 <idt_enter_protection>
   10513:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //8.将该TSS段绑定到GDT中的某个段描述符
    uint32_t tss_selector = gdt_alloc_desc();
   10516:	e8 f9 06 00 00       	call   10c14 <gdt_alloc_desc>
   1051b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (tss_selector < 0) {
        log_printf("alloc tss failed!");
        return;
    }

    segment_desc_set(tss_selector, (uint32_t)&task->tss, sizeof(task->tss), 
   1051e:	8b 45 08             	mov    0x8(%ebp),%eax
   10521:	83 c0 48             	add    $0x48,%eax
   10524:	89 c2                	mov    %eax,%edx
   10526:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10529:	0f b7 c0             	movzwl %ax,%eax
   1052c:	68 89 00 00 00       	push   $0x89
   10531:	6a 68                	push   $0x68
   10533:	52                   	push   %edx
   10534:	50                   	push   %eax
   10535:	e8 ab 05 00 00       	call   10ae5 <segment_desc_set>
   1053a:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_TYPE_TSS);


    idt_leave_protection(state);//TODO:解锁 
   1053d:	83 ec 0c             	sub    $0xc,%esp
   10540:	ff 75 f4             	push   -0xc(%ebp)
   10543:	e8 39 0f 00 00       	call   11481 <idt_leave_protection>
   10548:	83 c4 10             	add    $0x10,%esp

    //9.记录tss绑定到的描述符的选择子
    task->tss_selector = tss_selector;
   1054b:	8b 45 08             	mov    0x8(%ebp),%eax
   1054e:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10551:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
}
   10557:	c9                   	leave  
   10558:	c3                   	ret    

00010559 <task_init>:
 * @param task 任务对象
 * @param entry 任务的入口地址
 * @param esp 任务指行时所用的栈顶指针
 * @return int 
 */
void task_init(task_t *task, const char* name, uint32_t entry, uint32_t esp) {
   10559:	55                   	push   %ebp
   1055a:	89 e5                	mov    %esp,%ebp
   1055c:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t*)0);
   1055f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10563:	75 19                	jne    1057e <task_init+0x25>
   10565:	68 1d 27 01 00       	push   $0x1271d
   1056a:	68 7c 27 01 00       	push   $0x1277c
   1056f:	6a 65                	push   $0x65
   10571:	68 30 27 01 00       	push   $0x12730
   10576:	e8 d2 16 00 00       	call   11c4d <pannic>
   1057b:	83 c4 10             	add    $0x10,%esp
    //1.初始化任务TSS段
    tss_init(task, entry, esp);
   1057e:	83 ec 04             	sub    $0x4,%esp
   10581:	ff 75 14             	push   0x14(%ebp)
   10584:	ff 75 10             	push   0x10(%ebp)
   10587:	ff 75 08             	push   0x8(%ebp)
   1058a:	e8 cf fe ff ff       	call   1045e <tss_init>
   1058f:	83 c4 10             	add    $0x10,%esp

    //2.初始化任务名称
    kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   10592:	8b 45 08             	mov    0x8(%ebp),%eax
   10595:	83 c0 10             	add    $0x10,%eax
   10598:	83 ec 04             	sub    $0x4,%esp
   1059b:	6a 20                	push   $0x20
   1059d:	ff 75 0c             	push   0xc(%ebp)
   105a0:	50                   	push   %eax
   105a1:	e8 24 17 00 00       	call   11cca <kernel_strncpy>
   105a6:	83 c4 10             	add    $0x10,%esp

    //3.初始化任务队列节点及就绪队列节点
    list_node_init(&task->ready_node);
   105a9:	8b 45 08             	mov    0x8(%ebp),%eax
   105ac:	83 c0 30             	add    $0x30,%eax
   105af:	83 ec 0c             	sub    $0xc,%esp
   105b2:	50                   	push   %eax
   105b3:	e8 f5 fc ff ff       	call   102ad <list_node_init>
   105b8:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->task_node);
   105bb:	8b 45 08             	mov    0x8(%ebp),%eax
   105be:	83 c0 38             	add    $0x38,%eax
   105c1:	83 ec 0c             	sub    $0xc,%esp
   105c4:	50                   	push   %eax
   105c5:	e8 e3 fc ff ff       	call   102ad <list_node_init>
   105ca:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   105cd:	8b 45 08             	mov    0x8(%ebp),%eax
   105d0:	83 c0 40             	add    $0x40,%eax
   105d3:	83 ec 0c             	sub    $0xc,%esp
   105d6:	50                   	push   %eax
   105d7:	e8 d1 fc ff ff       	call   102ad <list_node_init>
   105dc:	83 c4 10             	add    $0x10,%esp

    //4.初始化最大时间片数与当前拥有时间片数,以及延时时间片数
    task->slice_max = task->slice_curr = TASK_TIME_SLICE_DEFAULT;
   105df:	8b 45 08             	mov    0x8(%ebp),%eax
   105e2:	c7 40 08 0a 00 00 00 	movl   $0xa,0x8(%eax)
   105e9:	8b 45 08             	mov    0x8(%ebp),%eax
   105ec:	8b 50 08             	mov    0x8(%eax),%edx
   105ef:	8b 45 08             	mov    0x8(%ebp),%eax
   105f2:	89 50 04             	mov    %edx,0x4(%eax)
    task->sleep = 0;
   105f5:	8b 45 08             	mov    0x8(%ebp),%eax
   105f8:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)

    
    idt_state_t state = idt_enter_protection();//TODO:加锁
   105ff:	e8 65 0e 00 00       	call   11469 <idt_enter_protection>
   10604:	89 45 f4             	mov    %eax,-0xc(%ebp)
   
    //5.将任务加入任务队列
    list_insert_last(&task_manager.task_list, &task->task_node);
   10607:	8b 45 08             	mov    0x8(%ebp),%eax
   1060a:	83 c0 38             	add    $0x38,%eax
   1060d:	83 ec 08             	sub    $0x8,%esp
   10610:	50                   	push   %eax
   10611:	68 d0 2f 01 00       	push   $0x12fd0
   10616:	e8 37 1c 00 00       	call   12252 <list_insert_last>
   1061b:	83 c4 10             	add    $0x10,%esp

    //6.将任务设置为就绪态
    task_set_ready(task);
   1061e:	83 ec 0c             	sub    $0xc,%esp
   10621:	ff 75 08             	push   0x8(%ebp)
   10624:	e8 eb 00 00 00       	call   10714 <task_set_ready>
   10629:	83 c4 10             	add    $0x10,%esp

    
    idt_leave_protection(state);//TODO:解锁
   1062c:	83 ec 0c             	sub    $0xc,%esp
   1062f:	ff 75 f4             	push   -0xc(%ebp)
   10632:	e8 4a 0e 00 00       	call   11481 <idt_leave_protection>
   10637:	83 c4 10             	add    $0x10,%esp
}
   1063a:	90                   	nop
   1063b:	c9                   	leave  
   1063c:	c3                   	ret    

0001063d <empty_task>:
static uint32_t empty_task_stack[EMPTY_TASK_STACK_SIZE];
/**
 * @brief  空闲进程，当所有进程都延时运行时，让cpu运行空闲进程
 * 
 */
static void empty_task(void) {
   1063d:	55                   	push   %ebp
   1063e:	89 e5                	mov    %esp,%ebp
    while(1) {
        //停止cpu运行，让cpu等待时间中断
        hlt();
   10640:	e8 a7 fd ff ff       	call   103ec <hlt>
   10645:	eb f9                	jmp    10640 <empty_task+0x3>

00010647 <task_manager_init>:

/**
 * @brief  初始化任务管理器
 * 
 */
void task_manager_init(void) {
   10647:	55                   	push   %ebp
   10648:	89 e5                	mov    %esp,%ebp
   1064a:	83 ec 08             	sub    $0x8,%esp
    //1.初始化所有任务队列
    list_init(&task_manager.ready_list);
   1064d:	83 ec 0c             	sub    $0xc,%esp
   10650:	68 c4 2f 01 00       	push   $0x12fc4
   10655:	e8 bd fc ff ff       	call   10317 <list_init>
   1065a:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   1065d:	83 ec 0c             	sub    $0xc,%esp
   10660:	68 d0 2f 01 00       	push   $0x12fd0
   10665:	e8 ad fc ff ff       	call   10317 <list_init>
   1066a:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   1066d:	83 ec 0c             	sub    $0xc,%esp
   10670:	68 dc 2f 01 00       	push   $0x12fdc
   10675:	e8 9d fc ff ff       	call   10317 <list_init>
   1067a:	83 c4 10             	add    $0x10,%esp

    //2.将当前任务置零
    task_manager.curr_task = (task_t*)0;
   1067d:	c7 05 c0 2f 01 00 00 	movl   $0x0,0x12fc0
   10684:	00 00 00 

    //3.初始化空闲进程
    //TODO:有问题，进程切换混乱
    task_init(  &task_manager.empty_task,
   10687:	ba 60 33 01 00       	mov    $0x13360,%edx
   1068c:	b8 3d 06 01 00       	mov    $0x1063d,%eax
   10691:	52                   	push   %edx
   10692:	50                   	push   %eax
   10693:	68 65 27 01 00       	push   $0x12765
   10698:	68 9c 30 01 00       	push   $0x1309c
   1069d:	e8 b7 fe ff ff       	call   10559 <task_init>
   106a2:	83 c4 10             	add    $0x10,%esp
                 (uint32_t)empty_task,
                 (uint32_t)&empty_task_stack[EMPTY_TASK_STACK_SIZE]);
                 

    //4.将空闲进程从就绪队列中取出
    task_set_unready(&task_manager.empty_task);
   106a5:	83 ec 0c             	sub    $0xc,%esp
   106a8:	68 9c 30 01 00       	push   $0x1309c
   106ad:	e8 ad 00 00 00       	call   1075f <task_set_unready>
   106b2:	83 c4 10             	add    $0x10,%esp
    task_manager.empty_task.state = TASK_CREATED;
   106b5:	c7 05 9c 30 01 00 00 	movl   $0x0,0x1309c
   106bc:	00 00 00 
}
   106bf:	90                   	nop
   106c0:	c9                   	leave  
   106c1:	c3                   	ret    

000106c2 <task_first_init>:

/**
 * @brief  初始化第一个任务
 * 
 */
void task_first_init(void) {
   106c2:	55                   	push   %ebp
   106c3:	89 e5                	mov    %esp,%ebp
   106c5:	83 ec 08             	sub    $0x8,%esp
      //1.初始化任务，当前任务是在任务管理器启用前就执行的，
      //拥有自己的栈空间，所以入口地址直接和栈空间都置0即可
      //这一步只是为当前任务绑定一个TSS段并将其绑定到一个task对象
      task_init(&task_manager.first_task, "first task", 0, 0);
   106c8:	6a 00                	push   $0x0
   106ca:	6a 00                	push   $0x0
   106cc:	68 70 27 01 00       	push   $0x12770
   106d1:	68 e8 2f 01 00       	push   $0x12fe8
   106d6:	e8 7e fe ff ff       	call   10559 <task_init>
   106db:	83 c4 10             	add    $0x10,%esp
      
      //2.将当前任务的TSS选择子告诉cpu，用来切换任务时保存状态
      write_tr(task_manager.first_task.tss_selector);
   106de:	a1 98 30 01 00       	mov    0x13098,%eax
   106e3:	0f b7 c0             	movzwl %ax,%eax
   106e6:	83 ec 0c             	sub    $0xc,%esp
   106e9:	50                   	push   %eax
   106ea:	e8 1e fd ff ff       	call   1040d <write_tr>
   106ef:	83 c4 10             	add    $0x10,%esp

      //3.将当前任务执行第一个任务
      task_manager.curr_task = &task_manager.first_task;
   106f2:	c7 05 c0 2f 01 00 e8 	movl   $0x12fe8,0x12fc0
   106f9:	2f 01 00 

      //4.将当前任务状态设置为运行态
      task_manager.curr_task->state = TASK_RUNNING;
   106fc:	a1 c0 2f 01 00       	mov    0x12fc0,%eax
   10701:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
}
   10707:	90                   	nop
   10708:	c9                   	leave  
   10709:	c3                   	ret    

0001070a <task_first_task>:
/**
 * @brief  获取当前任务管理器的第一个任务
 * 
 * @return task_t* 
 */
task_t *task_first_task(void) {
   1070a:	55                   	push   %ebp
   1070b:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   1070d:	b8 e8 2f 01 00       	mov    $0x12fe8,%eax
}
   10712:	5d                   	pop    %ebp
   10713:	c3                   	ret    

00010714 <task_set_ready>:
/**
 * @brief  将任务task加入就绪队列
 * 
 * @param task 需要加入就绪队列的任务
 */
void task_set_ready(task_t *task) {
   10714:	55                   	push   %ebp
   10715:	89 e5                	mov    %esp,%ebp
   10717:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   1071a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1071e:	75 1c                	jne    1073c <task_set_ready+0x28>
   10720:	68 1d 27 01 00       	push   $0x1271d
   10725:	68 a4 27 01 00       	push   $0x127a4
   1072a:	68 cf 00 00 00       	push   $0xcf
   1072f:	68 30 27 01 00       	push   $0x12730
   10734:	e8 14 15 00 00       	call   11c4d <pannic>
   10739:	83 c4 10             	add    $0x10,%esp
    //1.将任务插入到就绪队列的尾部
    list_insert_last(&task_manager.ready_list, &task->ready_node);
   1073c:	8b 45 08             	mov    0x8(%ebp),%eax
   1073f:	83 c0 30             	add    $0x30,%eax
   10742:	83 ec 08             	sub    $0x8,%esp
   10745:	50                   	push   %eax
   10746:	68 c4 2f 01 00       	push   $0x12fc4
   1074b:	e8 02 1b 00 00       	call   12252 <list_insert_last>
   10750:	83 c4 10             	add    $0x10,%esp

    //2.将任务状态设置为就绪态
    task->state = TASK_READY;
   10753:	8b 45 08             	mov    0x8(%ebp),%eax
   10756:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
}
   1075c:	90                   	nop
   1075d:	c9                   	leave  
   1075e:	c3                   	ret    

0001075f <task_set_unready>:
/**
 * @brief  将任务task从就绪队列中取下
 * 
 * @param task 
 */
void task_set_unready(task_t *task) {
   1075f:	55                   	push   %ebp
   10760:	89 e5                	mov    %esp,%ebp
   10762:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   10765:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10769:	75 1c                	jne    10787 <task_set_unready+0x28>
   1076b:	68 1d 27 01 00       	push   $0x1271d
   10770:	68 b4 27 01 00       	push   $0x127b4
   10775:	68 de 00 00 00       	push   $0xde
   1077a:	68 30 27 01 00       	push   $0x12730
   1077f:	e8 c9 14 00 00       	call   11c4d <pannic>
   10784:	83 c4 10             	add    $0x10,%esp
    list_remove(&task_manager.ready_list, &task->ready_node);
   10787:	8b 45 08             	mov    0x8(%ebp),%eax
   1078a:	83 c0 30             	add    $0x30,%eax
   1078d:	83 ec 08             	sub    $0x8,%esp
   10790:	50                   	push   %eax
   10791:	68 c4 2f 01 00       	push   $0x12fc4
   10796:	e8 ac 1c 00 00       	call   12447 <list_remove>
   1079b:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   1079e:	8b 45 08             	mov    0x8(%ebp),%eax
   107a1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   107a7:	90                   	nop
   107a8:	c9                   	leave  
   107a9:	c3                   	ret    

000107aa <task_ready_first>:

/**
 * @brief  获取就绪队列中的第一个任务
 * 
 */
task_t* task_ready_first(void) {
   107aa:	55                   	push   %ebp
   107ab:	89 e5                	mov    %esp,%ebp
   107ad:	83 ec 18             	sub    $0x18,%esp
    list_node_t *ready_node = list_get_first(&task_manager.ready_list);
   107b0:	83 ec 0c             	sub    $0xc,%esp
   107b3:	68 c4 2f 01 00       	push   $0x12fc4
   107b8:	e8 03 fc ff ff       	call   103c0 <list_get_first>
   107bd:	83 c4 10             	add    $0x10,%esp
   107c0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return list_node_parent(ready_node, task_t, ready_node);
   107c3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   107c7:	74 08                	je     107d1 <task_ready_first+0x27>
   107c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107cc:	83 e8 30             	sub    $0x30,%eax
   107cf:	eb 05                	jmp    107d6 <task_ready_first+0x2c>
   107d1:	b8 00 00 00 00       	mov    $0x0,%eax
}
   107d6:	c9                   	leave  
   107d7:	c3                   	ret    

000107d8 <task_current>:
/**
 * @brief  获取当前正在运行的任务
 * 
 * @return task_t* 
 */
task_t *task_current(void) {
   107d8:	55                   	push   %ebp
   107d9:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   107db:	a1 c0 2f 01 00       	mov    0x12fc0,%eax
}
   107e0:	5d                   	pop    %ebp
   107e1:	c3                   	ret    

000107e2 <task_switch>:

/**
 * @brief  任务管理器进行任务切换
 * 
 */
void task_switch(void) {
   107e2:	55                   	push   %ebp
   107e3:	89 e5                	mov    %esp,%ebp
   107e5:	83 ec 18             	sub    $0x18,%esp

    idt_state_t state = idt_enter_protection();//TODO:加锁
   107e8:	e8 7c 0c 00 00       	call   11469 <idt_enter_protection>
   107ed:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //1.获取就绪队列中的第一个任务
    task_t *to = task_ready_first();
   107f0:	e8 b5 ff ff ff       	call   107aa <task_ready_first>
   107f5:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.若获取到的任务不是当前任务就进行切换
    if (to != task_manager.curr_task) {
   107f8:	a1 c0 2f 01 00       	mov    0x12fc0,%eax
   107fd:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   10800:	74 37                	je     10839 <task_switch+0x57>
        //3.获取当前任务
        task_t *from = task_manager.curr_task;
   10802:	a1 c0 2f 01 00       	mov    0x12fc0,%eax
   10807:	89 45 ec             	mov    %eax,-0x14(%ebp)

        //4.目标任务若为空，则所有任务都在延时，让cpu运行空闲任务
        if (to == (task_t*)0) { 
   1080a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1080e:	75 07                	jne    10817 <task_switch+0x35>
            to = &task_manager.empty_task;
   10810:	c7 45 f4 9c 30 01 00 	movl   $0x1309c,-0xc(%ebp)
        }
        //5.切换当前任务, 并将当前任务置为运行态
        to->state = TASK_RUNNING;
   10817:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1081a:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        task_manager.curr_task = to;
   10820:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10823:	a3 c0 2f 01 00       	mov    %eax,0x12fc0
        

        //6.进行任务切换
        task_switch_from_to(from, to);
   10828:	83 ec 08             	sub    $0x8,%esp
   1082b:	ff 75 f4             	push   -0xc(%ebp)
   1082e:	ff 75 ec             	push   -0x14(%ebp)
   10831:	e8 0d fc ff ff       	call   10443 <task_switch_from_to>
   10836:	83 c4 10             	add    $0x10,%esp
    } 

    idt_leave_protection(state);//TODO:解锁
   10839:	83 ec 0c             	sub    $0xc,%esp
   1083c:	ff 75 f0             	push   -0x10(%ebp)
   1083f:	e8 3d 0c 00 00       	call   11481 <idt_leave_protection>
   10844:	83 c4 10             	add    $0x10,%esp
}
   10847:	90                   	nop
   10848:	c9                   	leave  
   10849:	c3                   	ret    

0001084a <sys_yield>:
/**
 * @brief  使当前正在运行的任务主动让出cpu
 * 
 * @return int 
 */
int sys_yield(void) {
   1084a:	55                   	push   %ebp
   1084b:	89 e5                	mov    %esp,%ebp
   1084d:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   10850:	e8 14 0c 00 00       	call   11469 <idt_enter_protection>
   10855:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    //1.判断当前就绪队列中是否有多个任务
    if (list_get_size(&task_manager.ready_list) > 1) {
   10858:	83 ec 0c             	sub    $0xc,%esp
   1085b:	68 c4 2f 01 00       	push   $0x12fc4
   10860:	e8 2e fb ff ff       	call   10393 <list_get_size>
   10865:	83 c4 10             	add    $0x10,%esp
   10868:	83 f8 01             	cmp    $0x1,%eax
   1086b:	7e 29                	jle    10896 <sys_yield+0x4c>
        //2.获取当前任务  
        task_t *curr_task = task_current();
   1086d:	e8 66 ff ff ff       	call   107d8 <task_current>
   10872:	89 45 f0             	mov    %eax,-0x10(%ebp)
        
        //3.将当前任务从就绪队列中取下
        task_set_unready(curr_task);
   10875:	83 ec 0c             	sub    $0xc,%esp
   10878:	ff 75 f0             	push   -0x10(%ebp)
   1087b:	e8 df fe ff ff       	call   1075f <task_set_unready>
   10880:	83 c4 10             	add    $0x10,%esp

        //4.将当前任务重新加入到就绪队列的队尾
        task_set_ready(curr_task);
   10883:	83 ec 0c             	sub    $0xc,%esp
   10886:	ff 75 f0             	push   -0x10(%ebp)
   10889:	e8 86 fe ff ff       	call   10714 <task_set_ready>
   1088e:	83 c4 10             	add    $0x10,%esp

        //5.任务管理器运行下一个任务，从而释放cpu使用权
        task_switch();
   10891:	e8 4c ff ff ff       	call   107e2 <task_switch>
    }
    
    idt_leave_protection(state);//TODO:解锁
   10896:	83 ec 0c             	sub    $0xc,%esp
   10899:	ff 75 f4             	push   -0xc(%ebp)
   1089c:	e8 e0 0b 00 00       	call   11481 <idt_leave_protection>
   108a1:	83 c4 10             	add    $0x10,%esp
    return 0;
   108a4:	b8 00 00 00 00       	mov    $0x0,%eax
}
   108a9:	c9                   	leave  
   108aa:	c3                   	ret    

000108ab <task_slice_end>:
/**
 * @brief  提供给时钟中断使用，每中断一次，当前任务的时间片使用完一次
 *         减少当前任务的时间片数，并判断是否还有剩余时间片，若没有就进行任务切换
 * 
 */
void task_slice_end(void) {
   108ab:	55                   	push   %ebp
   108ac:	89 e5                	mov    %esp,%ebp
   108ae:	83 ec 18             	sub    $0x18,%esp

    //1.遍历当前延时队列，判断是否有可唤醒的任务
    list_node_t *curr_sleep_node = list_get_first(&task_manager.sleep_list);
   108b1:	83 ec 0c             	sub    $0xc,%esp
   108b4:	68 dc 2f 01 00       	push   $0x12fdc
   108b9:	e8 02 fb ff ff       	call   103c0 <list_get_first>
   108be:	83 c4 10             	add    $0x10,%esp
   108c1:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.遍历并判断每一个任务执行完当前时间片是否可被唤醒，若可以则唤醒
    while (curr_sleep_node) {
   108c4:	eb 62                	jmp    10928 <task_slice_end+0x7d>
        
        list_node_t *next_sleep_node = list_node_next(curr_sleep_node);
   108c6:	83 ec 0c             	sub    $0xc,%esp
   108c9:	ff 75 f4             	push   -0xc(%ebp)
   108cc:	e8 19 fa ff ff       	call   102ea <list_node_next>
   108d1:	83 c4 10             	add    $0x10,%esp
   108d4:	89 45 ec             	mov    %eax,-0x14(%ebp)
        
        task_t *curr_sleep_task = list_node_parent(curr_sleep_node, task_t, ready_node);
   108d7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   108db:	74 08                	je     108e5 <task_slice_end+0x3a>
   108dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   108e0:	83 e8 30             	sub    $0x30,%eax
   108e3:	eb 05                	jmp    108ea <task_slice_end+0x3f>
   108e5:	b8 00 00 00 00       	mov    $0x0,%eax
   108ea:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (--curr_sleep_task->sleep == 0) {
   108ed:	8b 45 e8             	mov    -0x18(%ebp),%eax
   108f0:	8b 40 0c             	mov    0xc(%eax),%eax
   108f3:	8d 50 ff             	lea    -0x1(%eax),%edx
   108f6:	8b 45 e8             	mov    -0x18(%ebp),%eax
   108f9:	89 50 0c             	mov    %edx,0xc(%eax)
   108fc:	8b 45 e8             	mov    -0x18(%ebp),%eax
   108ff:	8b 40 0c             	mov    0xc(%eax),%eax
   10902:	85 c0                	test   %eax,%eax
   10904:	75 1c                	jne    10922 <task_slice_end+0x77>
            task_set_wakeup(curr_sleep_task);   //从延时队列中取下
   10906:	83 ec 0c             	sub    $0xc,%esp
   10909:	ff 75 e8             	push   -0x18(%ebp)
   1090c:	e8 01 01 00 00       	call   10a12 <task_set_wakeup>
   10911:	83 c4 10             	add    $0x10,%esp
            task_set_ready(curr_sleep_task);    //加入就绪队列
   10914:	83 ec 0c             	sub    $0xc,%esp
   10917:	ff 75 e8             	push   -0x18(%ebp)
   1091a:	e8 f5 fd ff ff       	call   10714 <task_set_ready>
   1091f:	83 c4 10             	add    $0x10,%esp
        }

        curr_sleep_node = next_sleep_node;
   10922:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10925:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr_sleep_node) {
   10928:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1092c:	75 98                	jne    108c6 <task_slice_end+0x1b>
    }

    // task_switch(); 没有必要立马进行任务切换，当前任务时间片用完后会自动切换
    //3.获取当前任务
    task_t *curr_task = task_current();
   1092e:	e8 a5 fe ff ff       	call   107d8 <task_current>
   10933:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //4.若当前任务为空闲任务，则判断就绪队列是否为空
    if (curr_task == &task_manager.empty_task) {
   10936:	81 7d f0 9c 30 01 00 	cmpl   $0x1309c,-0x10(%ebp)
   1093d:	75 23                	jne    10962 <task_slice_end+0xb7>
        
        if (list_is_empty(&task_manager.ready_list)) return;
   1093f:	83 ec 0c             	sub    $0xc,%esp
   10942:	68 c4 2f 01 00       	push   $0x12fc4
   10947:	e8 12 fa ff ff       	call   1035e <list_is_empty>
   1094c:	83 c4 10             	add    $0x10,%esp
   1094f:	85 c0                	test   %eax,%eax
   10951:	75 60                	jne    109b3 <task_slice_end+0x108>
        
        task_manager.empty_task.state = TASK_CREATED;
   10953:	c7 05 9c 30 01 00 00 	movl   $0x0,0x1309c
   1095a:	00 00 00 
        
        task_switch();//就绪队列有任务，则直接切换任务
   1095d:	e8 80 fe ff ff       	call   107e2 <task_switch>
    }

    //5.若当前任务为普通任务则，减小当前时间片数
    if (curr_task != &task_manager.empty_task && --curr_task->slice_curr == 0) {
   10962:	81 7d f0 9c 30 01 00 	cmpl   $0x1309c,-0x10(%ebp)
   10969:	74 49                	je     109b4 <task_slice_end+0x109>
   1096b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1096e:	8b 40 08             	mov    0x8(%eax),%eax
   10971:	8d 50 ff             	lea    -0x1(%eax),%edx
   10974:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10977:	89 50 08             	mov    %edx,0x8(%eax)
   1097a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1097d:	8b 40 08             	mov    0x8(%eax),%eax
   10980:	85 c0                	test   %eax,%eax
   10982:	75 30                	jne    109b4 <task_slice_end+0x109>
        //6.时间片数用完了，重置时间片并进行任务切换
        curr_task->slice_curr = curr_task->slice_max;
   10984:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10987:	8b 50 04             	mov    0x4(%eax),%edx
   1098a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1098d:	89 50 08             	mov    %edx,0x8(%eax)
        task_set_unready(curr_task);
   10990:	83 ec 0c             	sub    $0xc,%esp
   10993:	ff 75 f0             	push   -0x10(%ebp)
   10996:	e8 c4 fd ff ff       	call   1075f <task_set_unready>
   1099b:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   1099e:	83 ec 0c             	sub    $0xc,%esp
   109a1:	ff 75 f0             	push   -0x10(%ebp)
   109a4:	e8 6b fd ff ff       	call   10714 <task_set_ready>
   109a9:	83 c4 10             	add    $0x10,%esp
        task_switch();
   109ac:	e8 31 fe ff ff       	call   107e2 <task_switch>
   109b1:	eb 01                	jmp    109b4 <task_slice_end+0x109>
        if (list_is_empty(&task_manager.ready_list)) return;
   109b3:	90                   	nop
    }
}
   109b4:	c9                   	leave  
   109b5:	c3                   	ret    

000109b6 <task_set_sleep>:
 * @brief  设置进程延时的时间片数
 * 
 * @param task 需要延时的进程
 * @param slice 延时的时间片数
 */
void task_set_sleep(task_t *task, uint32_t slice) {
   109b6:	55                   	push   %ebp
   109b7:	89 e5                	mov    %esp,%ebp
   109b9:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   109bc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   109c0:	75 1c                	jne    109de <task_set_sleep+0x28>
   109c2:	68 1d 27 01 00       	push   $0x1271d
   109c7:	68 08 28 01 00       	push   $0x12808
   109cc:	68 6b 01 00 00       	push   $0x16b
   109d1:	68 30 27 01 00       	push   $0x12730
   109d6:	e8 72 12 00 00       	call   11c4d <pannic>
   109db:	83 c4 10             	add    $0x10,%esp
    if (slice == 0) return;
   109de:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   109e2:	74 2b                	je     10a0f <task_set_sleep+0x59>

    task->sleep = slice;
   109e4:	8b 55 0c             	mov    0xc(%ebp),%edx
   109e7:	8b 45 08             	mov    0x8(%ebp),%eax
   109ea:	89 50 0c             	mov    %edx,0xc(%eax)
    task->state = TASK_SLEEP;
   109ed:	8b 45 08             	mov    0x8(%ebp),%eax
   109f0:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    list_insert_last(&task_manager.sleep_list, &task->ready_node);
   109f6:	8b 45 08             	mov    0x8(%ebp),%eax
   109f9:	83 c0 30             	add    $0x30,%eax
   109fc:	83 ec 08             	sub    $0x8,%esp
   109ff:	50                   	push   %eax
   10a00:	68 dc 2f 01 00       	push   $0x12fdc
   10a05:	e8 48 18 00 00       	call   12252 <list_insert_last>
   10a0a:	83 c4 10             	add    $0x10,%esp
   10a0d:	eb 01                	jmp    10a10 <task_set_sleep+0x5a>
    if (slice == 0) return;
   10a0f:	90                   	nop
}
   10a10:	c9                   	leave  
   10a11:	c3                   	ret    

00010a12 <task_set_wakeup>:
/**
 * @brief  唤醒正在延时的进程
 * 
 * @param task 
 */
void task_set_wakeup(task_t *task) {
   10a12:	55                   	push   %ebp
   10a13:	89 e5                	mov    %esp,%ebp
   10a15:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   10a18:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10a1c:	75 1c                	jne    10a3a <task_set_wakeup+0x28>
   10a1e:	68 1d 27 01 00       	push   $0x1271d
   10a23:	68 18 28 01 00       	push   $0x12818
   10a28:	68 79 01 00 00       	push   $0x179
   10a2d:	68 30 27 01 00       	push   $0x12730
   10a32:	e8 16 12 00 00       	call   11c4d <pannic>
   10a37:	83 c4 10             	add    $0x10,%esp
    list_remove(&task_manager.sleep_list, &task->ready_node);
   10a3a:	8b 45 08             	mov    0x8(%ebp),%eax
   10a3d:	83 c0 30             	add    $0x30,%eax
   10a40:	83 ec 08             	sub    $0x8,%esp
   10a43:	50                   	push   %eax
   10a44:	68 dc 2f 01 00       	push   $0x12fdc
   10a49:	e8 f9 19 00 00       	call   12447 <list_remove>
   10a4e:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   10a51:	8b 45 08             	mov    0x8(%ebp),%eax
   10a54:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   10a5a:	90                   	nop
   10a5b:	c9                   	leave  
   10a5c:	c3                   	ret    

00010a5d <sys_sleep>:
/**
 * @brief  使进程进入延时状态
 * 
 * @param ms 延时的时间，以ms为单位
 */
void sys_sleep(uint32_t ms) {
   10a5d:	55                   	push   %ebp
   10a5e:	89 e5                	mov    %esp,%ebp
   10a60:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection(); //TODO:加锁
   10a63:	e8 01 0a 00 00       	call   11469 <idt_enter_protection>
   10a68:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //1.获取当前任务  
    task_t *curr_task = task_current();
   10a6b:	e8 68 fd ff ff       	call   107d8 <task_current>
   10a70:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    //2.将当前任务离开就绪队列
    task_set_unready(curr_task);
   10a73:	83 ec 0c             	sub    $0xc,%esp
   10a76:	ff 75 f0             	push   -0x10(%ebp)
   10a79:	e8 e1 fc ff ff       	call   1075f <task_set_unready>
   10a7e:	83 c4 10             	add    $0x10,%esp

    //3.计算出需要延时的时间片数，对时间片数向上取整，保证进程至少能延时指定时间
    uint32_t slice = (ms + (OS_TICKS_MS - 1)) / OS_TICKS_MS;
   10a81:	8b 45 08             	mov    0x8(%ebp),%eax
   10a84:	83 c0 09             	add    $0x9,%eax
   10a87:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   10a8c:	f7 e2                	mul    %edx
   10a8e:	89 d0                	mov    %edx,%eax
   10a90:	c1 e8 03             	shr    $0x3,%eax
   10a93:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //4.将当前任务放入延时队列，并设置延时时间片数
    task_set_sleep(curr_task, slice);
   10a96:	83 ec 08             	sub    $0x8,%esp
   10a99:	ff 75 ec             	push   -0x14(%ebp)
   10a9c:	ff 75 f0             	push   -0x10(%ebp)
   10a9f:	e8 12 ff ff ff       	call   109b6 <task_set_sleep>
   10aa4:	83 c4 10             	add    $0x10,%esp

    //5.切换任务
    task_switch();
   10aa7:	e8 36 fd ff ff       	call   107e2 <task_switch>

    idt_leave_protection(state); //TODO:解锁
   10aac:	83 ec 0c             	sub    $0xc,%esp
   10aaf:	ff 75 f4             	push   -0xc(%ebp)
   10ab2:	e8 ca 09 00 00       	call   11481 <idt_leave_protection>
   10ab7:	83 c4 10             	add    $0x10,%esp
   10aba:	90                   	nop
   10abb:	c9                   	leave  
   10abc:	c3                   	ret    

00010abd <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   10abd:	55                   	push   %ebp
   10abe:	89 e5                	mov    %esp,%ebp
   10ac0:	83 ec 10             	sub    $0x10,%esp
  gdt.start31_16 = (start >> 16) & 0xffff;  // 初始化GDT地址的高16位
   10ac3:	8b 45 08             	mov    0x8(%ebp),%eax
   10ac6:	c1 e8 10             	shr    $0x10,%eax
   10ac9:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  gdt.start15_0 = start & 0xffff;           // 初始化GDT地址的低16位
   10acd:	8b 45 08             	mov    0x8(%ebp),%eax
   10ad0:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   10ad4:	8b 45 0c             	mov    0xc(%ebp),%eax
   10ad7:	83 e8 01             	sub    $0x1,%eax
  gdt.limit =
   10ada:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   10ade:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   10ae2:	90                   	nop
   10ae3:	c9                   	leave  
   10ae4:	c3                   	ret    

00010ae5 <segment_desc_set>:
 *                 即2的13次方个段，也就是8192
 * @param base 该段在内存中的真实段基址
 * @param limit 该段的段界限，是一个偏移量，表示段中最大的偏移界限
 * @param attr 该段的属性位
 */
void segment_desc_set(uint16_t selector,  uint32_t base, uint32_t limit, uint16_t attr) {
   10ae5:	55                   	push   %ebp
   10ae6:	89 e5                	mov    %esp,%ebp
   10ae8:	83 ec 18             	sub    $0x18,%esp
   10aeb:	8b 55 08             	mov    0x8(%ebp),%edx
   10aee:	8b 45 14             	mov    0x14(%ebp),%eax
   10af1:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
   10af5:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    //1. 获取该段描述符在内存中的起始地址，selector >> 3 取出3~15位才是其在全局描述符中的下标
    segment_desc_t *desc = gdt_table + (selector >> 3);
   10af9:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   10afd:	66 c1 e8 03          	shr    $0x3,%ax
   10b01:	0f b7 c0             	movzwl %ax,%eax
   10b04:	c1 e0 03             	shl    $0x3,%eax
   10b07:	05 60 33 01 00       	add    $0x13360,%eax
   10b0c:	89 45 fc             	mov    %eax,-0x4(%ebp)

    //2. 设置段基地址
    desc->base15_0 = (uint16_t)base;
   10b0f:	8b 45 0c             	mov    0xc(%ebp),%eax
   10b12:	89 c2                	mov    %eax,%edx
   10b14:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10b17:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (uint8_t)(base >> 16);
   10b1b:	8b 45 0c             	mov    0xc(%ebp),%eax
   10b1e:	c1 e8 10             	shr    $0x10,%eax
   10b21:	89 c2                	mov    %eax,%edx
   10b23:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10b26:	88 50 04             	mov    %dl,0x4(%eax)
    desc->base31_24 = (uint8_t)(base >> 24);
   10b29:	8b 45 0c             	mov    0xc(%ebp),%eax
   10b2c:	c1 e8 18             	shr    $0x18,%eax
   10b2f:	89 c2                	mov    %eax,%edx
   10b31:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10b34:	88 50 07             	mov    %dl,0x7(%eax)

    //3. 设置段界限
    if (limit > 0xfffff) { //limit大于了20位能表示的最大值
   10b37:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   10b3e:	76 1d                	jbe    10b5d <segment_desc_set+0x78>
        //将limit的粒度设置为 4kb，即将属性位G置1
        desc->attr |= 0x8000;
   10b40:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10b43:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10b47:	66 0d 00 80          	or     $0x8000,%ax
   10b4b:	89 c2                	mov    %eax,%edx
   10b4d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10b50:	66 89 50 05          	mov    %dx,0x5(%eax)

        //将limit改成以 4kb 为单位
        limit /= (4 * 1024);
   10b54:	8b 45 10             	mov    0x10(%ebp),%eax
   10b57:	c1 e8 0c             	shr    $0xc,%eax
   10b5a:	89 45 10             	mov    %eax,0x10(%ebp)

    }
    desc->limit15_0 = (uint16_t)limit;
   10b5d:	8b 45 10             	mov    0x10(%ebp),%eax
   10b60:	89 c2                	mov    %eax,%edx
   10b62:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10b65:	66 89 10             	mov    %dx,(%eax)
    desc->attr |= ((uint16_t)(limit >> 8) & 0x0f00); //将limit高4位赋值到attr的8~11位(段界限的高4位)
   10b68:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10b6b:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10b6f:	89 c2                	mov    %eax,%edx
   10b71:	8b 45 10             	mov    0x10(%ebp),%eax
   10b74:	c1 e8 08             	shr    $0x8,%eax
   10b77:	66 25 00 0f          	and    $0xf00,%ax
   10b7b:	09 d0                	or     %edx,%eax
   10b7d:	89 c2                	mov    %eax,%edx
   10b7f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10b82:	66 89 50 05          	mov    %dx,0x5(%eax)

    //4.设置属性位
    desc->attr |= attr & 0xf0ff;
   10b86:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10b89:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10b8d:	89 c2                	mov    %eax,%edx
   10b8f:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   10b93:	80 e4 f0             	and    $0xf0,%ah
   10b96:	09 d0                	or     %edx,%eax
   10b98:	89 c2                	mov    %eax,%edx
   10b9a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10b9d:	66 89 50 05          	mov    %dx,0x5(%eax)


}
   10ba1:	90                   	nop
   10ba2:	c9                   	leave  
   10ba3:	c3                   	ret    

00010ba4 <gdt_init>:

/**
 * @brief  初始化GDT
 * 
 */
void gdt_init(void) {
   10ba4:	55                   	push   %ebp
   10ba5:	89 e5                	mov    %esp,%ebp
   10ba7:	83 ec 10             	sub    $0x10,%esp
    //TODO:暂时将所有段都初始化为0
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   10baa:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10bb1:	eb 1c                	jmp    10bcf <gdt_init+0x2b>
        segment_desc_set(i << 3, 0, 0, 0);
   10bb3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10bb6:	c1 e0 03             	shl    $0x3,%eax
   10bb9:	0f b7 c0             	movzwl %ax,%eax
   10bbc:	6a 00                	push   $0x0
   10bbe:	6a 00                	push   $0x0
   10bc0:	6a 00                	push   $0x0
   10bc2:	50                   	push   %eax
   10bc3:	e8 1d ff ff ff       	call   10ae5 <segment_desc_set>
   10bc8:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   10bcb:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10bcf:	81 7d fc ff 1f 00 00 	cmpl   $0x1fff,-0x4(%ebp)
   10bd6:	7e db                	jle    10bb3 <gdt_init+0xf>
    }

    //使用平坦模型，即段基址为0, 段界限直接用最大值，界限粒度为4kb，即段大小为4GB
    //1.设置内核的数据段
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff,
   10bd8:	68 92 40 00 00       	push   $0x4092
   10bdd:	6a ff                	push   $0xffffffff
   10bdf:	6a 00                	push   $0x0
   10be1:	6a 10                	push   $0x10
   10be3:	e8 fd fe ff ff       	call   10ae5 <segment_desc_set>
   10be8:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL | 
                    SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    //2.设置内核的代码段
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff,
   10beb:	68 9a 40 00 00       	push   $0x409a
   10bf0:	6a ff                	push   $0xffffffff
   10bf2:	6a 00                	push   $0x0
   10bf4:	6a 08                	push   $0x8
   10bf6:	e8 ea fe ff ff       	call   10ae5 <segment_desc_set>
   10bfb:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL |
                    SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    //3.加载新的GDT表
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   10bfe:	b8 60 33 01 00       	mov    $0x13360,%eax
   10c03:	68 00 00 01 00       	push   $0x10000
   10c08:	50                   	push   %eax
   10c09:	e8 af fe ff ff       	call   10abd <lgdt>
   10c0e:	83 c4 08             	add    $0x8,%esp
}
   10c11:	90                   	nop
   10c12:	c9                   	leave  
   10c13:	c3                   	ret    

00010c14 <gdt_alloc_desc>:
/**
 * @brief  寻找gdt中未赋值的段描述符空间
 * 
 * @return int 返回的找到的描述符的选择子
 */
int gdt_alloc_desc() {
   10c14:	55                   	push   %ebp
   10c15:	89 e5                	mov    %esp,%ebp
   10c17:	83 ec 10             	sub    $0x10,%esp
    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   10c1a:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   10c21:	eb 25                	jmp    10c48 <gdt_alloc_desc+0x34>
        segment_desc_t *desc = gdt_table + i;
   10c23:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10c26:	c1 e0 03             	shl    $0x3,%eax
   10c29:	05 60 33 01 00       	add    $0x13360,%eax
   10c2e:	89 45 f8             	mov    %eax,-0x8(%ebp)
        if (desc->limit15_0 == 0) {
   10c31:	8b 45 f8             	mov    -0x8(%ebp),%eax
   10c34:	0f b7 00             	movzwl (%eax),%eax
   10c37:	66 85 c0             	test   %ax,%ax
   10c3a:	75 08                	jne    10c44 <gdt_alloc_desc+0x30>
            return i << 3;
   10c3c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10c3f:	c1 e0 03             	shl    $0x3,%eax
   10c42:	eb 12                	jmp    10c56 <gdt_alloc_desc+0x42>
    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   10c44:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10c48:	81 7d fc ff 1f 00 00 	cmpl   $0x1fff,-0x4(%ebp)
   10c4f:	7e d2                	jle    10c23 <gdt_alloc_desc+0xf>
        }
    }

    return -1;
   10c51:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10c56:	c9                   	leave  
   10c57:	c3                   	ret    

00010c58 <cli>:
static inline void cli(void) { __asm__ __volatile__("cli"); }
   10c58:	55                   	push   %ebp
   10c59:	89 e5                	mov    %esp,%ebp
   10c5b:	fa                   	cli    
   10c5c:	90                   	nop
   10c5d:	5d                   	pop    %ebp
   10c5e:	c3                   	ret    

00010c5f <sti>:
static inline void sti(void) { __asm__ __volatile__("sti"); }
   10c5f:	55                   	push   %ebp
   10c60:	89 e5                	mov    %esp,%ebp
   10c62:	fb                   	sti    
   10c63:	90                   	nop
   10c64:	5d                   	pop    %ebp
   10c65:	c3                   	ret    

00010c66 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   10c66:	55                   	push   %ebp
   10c67:	89 e5                	mov    %esp,%ebp
   10c69:	f4                   	hlt    
   10c6a:	90                   	nop
   10c6b:	5d                   	pop    %ebp
   10c6c:	c3                   	ret    

00010c6d <inb>:
static inline uint8_t inb(uint16_t port) {
   10c6d:	55                   	push   %ebp
   10c6e:	89 e5                	mov    %esp,%ebp
   10c70:	83 ec 14             	sub    $0x14,%esp
   10c73:	8b 45 08             	mov    0x8(%ebp),%eax
   10c76:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   10c7a:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   10c7e:	89 c2                	mov    %eax,%edx
   10c80:	ec                   	in     (%dx),%al
   10c81:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   10c84:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   10c88:	c9                   	leave  
   10c89:	c3                   	ret    

00010c8a <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   10c8a:	55                   	push   %ebp
   10c8b:	89 e5                	mov    %esp,%ebp
   10c8d:	83 ec 08             	sub    $0x8,%esp
   10c90:	8b 45 08             	mov    0x8(%ebp),%eax
   10c93:	8b 55 0c             	mov    0xc(%ebp),%edx
   10c96:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   10c9a:	89 d0                	mov    %edx,%eax
   10c9c:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   10c9f:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10ca3:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10ca7:	ee                   	out    %al,(%dx)
}
   10ca8:	90                   	nop
   10ca9:	c9                   	leave  
   10caa:	c3                   	ret    

00010cab <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   10cab:	55                   	push   %ebp
   10cac:	89 e5                	mov    %esp,%ebp
   10cae:	83 ec 10             	sub    $0x10,%esp
  idt.start31_16 = (start >> 16) & 0xffff;  // 初始化IDT地址的高16位
   10cb1:	8b 45 08             	mov    0x8(%ebp),%eax
   10cb4:	c1 e8 10             	shr    $0x10,%eax
   10cb7:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  idt.start15_0 = start & 0xffff;           // 初始化IDT地址的低16位
   10cbb:	8b 45 08             	mov    0x8(%ebp),%eax
   10cbe:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   10cc2:	8b 45 0c             	mov    0xc(%ebp),%eax
   10cc5:	83 e8 01             	sub    $0x1,%eax
  idt.limit =
   10cc8:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   10ccc:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   10cd0:	90                   	nop
   10cd1:	c9                   	leave  
   10cd2:	c3                   	ret    

00010cd3 <read_eflags>:
/**
 * @brief  读取当前cpu的eflags寄存器
 * 
 * @return uint32_t 放回eflags的值
 */
static inline uint32_t read_eflags(void) {
   10cd3:	55                   	push   %ebp
   10cd4:	89 e5                	mov    %esp,%ebp
   10cd6:	83 ec 10             	sub    $0x10,%esp
  uint32_t eflags;
  //pushf 压入eflags的值到栈中
  __asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   10cd9:	9c                   	pushf  
   10cda:	58                   	pop    %eax
   10cdb:	89 45 fc             	mov    %eax,-0x4(%ebp)
  
  return eflags;
   10cde:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10ce1:	c9                   	leave  
   10ce2:	c3                   	ret    

00010ce3 <write_eflags>:
/**
 * @brief  将状态state写入eflags寄存器
 * 
 * @param state 
 */
static inline void write_eflags(uint32_t state) {
   10ce3:	55                   	push   %ebp
   10ce4:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("push %%eax\n\tpopf"::"a"(state));
   10ce6:	8b 45 08             	mov    0x8(%ebp),%eax
   10ce9:	50                   	push   %eax
   10cea:	9d                   	popf   
}
   10ceb:	90                   	nop
   10cec:	5d                   	pop    %ebp
   10ced:	c3                   	ret    

00010cee <print_exception_fram>:
/**
 * @brief  打印异常栈帧信息
 * 
 * @param frame 栈帧
 */
static void print_exception_fram(const exception_frame_t *frame) {
   10cee:	55                   	push   %ebp
   10cef:	89 e5                	mov    %esp,%ebp
   10cf1:	57                   	push   %edi
   10cf2:	56                   	push   %esi
   10cf3:	53                   	push   %ebx
   10cf4:	83 ec 1c             	sub    $0x1c,%esp

  log_printf("------------------------stack frame info---------------------");
   10cf7:	83 ec 0c             	sub    $0xc,%esp
   10cfa:	68 28 28 01 00       	push   $0x12828
   10cff:	e8 bf 18 00 00       	call   125c3 <log_printf>
   10d04:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ:\t\t%d\nerror code:\t%d", frame->num, frame->error_code);
   10d07:	8b 45 08             	mov    0x8(%ebp),%eax
   10d0a:	8b 50 34             	mov    0x34(%eax),%edx
   10d0d:	8b 45 08             	mov    0x8(%ebp),%eax
   10d10:	8b 40 30             	mov    0x30(%eax),%eax
   10d13:	83 ec 04             	sub    $0x4,%esp
   10d16:	52                   	push   %edx
   10d17:	50                   	push   %eax
   10d18:	68 66 28 01 00       	push   $0x12866
   10d1d:	e8 a1 18 00 00       	call   125c3 <log_printf>
   10d22:	83 c4 10             	add    $0x10,%esp
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
    //TODO:SS暂时没法获取，先用ds替代，之后再进行获取
    frame->cs, frame->ds, frame->ds, frame->es, frame->fs, frame->gs
   10d25:	8b 45 08             	mov    0x8(%ebp),%eax
   10d28:	8b 38                	mov    (%eax),%edi
   10d2a:	8b 45 08             	mov    0x8(%ebp),%eax
   10d2d:	8b 70 04             	mov    0x4(%eax),%esi
   10d30:	8b 45 08             	mov    0x8(%ebp),%eax
   10d33:	8b 58 08             	mov    0x8(%eax),%ebx
   10d36:	8b 45 08             	mov    0x8(%ebp),%eax
   10d39:	8b 48 0c             	mov    0xc(%eax),%ecx
   10d3c:	8b 45 08             	mov    0x8(%ebp),%eax
   10d3f:	8b 50 0c             	mov    0xc(%eax),%edx
   10d42:	8b 45 08             	mov    0x8(%ebp),%eax
   10d45:	8b 40 3c             	mov    0x3c(%eax),%eax
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
   10d48:	83 ec 04             	sub    $0x4,%esp
   10d4b:	57                   	push   %edi
   10d4c:	56                   	push   %esi
   10d4d:	53                   	push   %ebx
   10d4e:	51                   	push   %ecx
   10d4f:	52                   	push   %edx
   10d50:	50                   	push   %eax
   10d51:	68 80 28 01 00       	push   $0x12880
   10d56:	e8 68 18 00 00       	call   125c3 <log_printf>
   10d5b:	83 c4 20             	add    $0x20,%esp
              "ESI:\t\t0x%x\n"
              "EDI:\t\t0x%x\n"
              "EBP:\t\t0x%x\n"
              "ESP:\t\t0x%x", 
              frame->eax, frame->ebx, frame->ecx, frame->edx,
              frame->esi, frame->edi, frame->ebp, frame->esp 
   10d5e:	8b 45 08             	mov    0x8(%ebp),%eax
   10d61:	8b 48 1c             	mov    0x1c(%eax),%ecx
   10d64:	8b 45 08             	mov    0x8(%ebp),%eax
   10d67:	8b 40 18             	mov    0x18(%eax),%eax
   10d6a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   10d6d:	8b 45 08             	mov    0x8(%ebp),%eax
   10d70:	8b 58 10             	mov    0x10(%eax),%ebx
   10d73:	89 5d e0             	mov    %ebx,-0x20(%ebp)
   10d76:	8b 45 08             	mov    0x8(%ebp),%eax
   10d79:	8b 78 14             	mov    0x14(%eax),%edi
              frame->eax, frame->ebx, frame->ecx, frame->edx,
   10d7c:	8b 45 08             	mov    0x8(%ebp),%eax
   10d7f:	8b 70 24             	mov    0x24(%eax),%esi
   10d82:	8b 45 08             	mov    0x8(%ebp),%eax
   10d85:	8b 58 28             	mov    0x28(%eax),%ebx
   10d88:	8b 45 08             	mov    0x8(%ebp),%eax
   10d8b:	8b 50 20             	mov    0x20(%eax),%edx
   10d8e:	8b 45 08             	mov    0x8(%ebp),%eax
   10d91:	8b 40 2c             	mov    0x2c(%eax),%eax
  log_printf( 
   10d94:	83 ec 0c             	sub    $0xc,%esp
   10d97:	51                   	push   %ecx
   10d98:	ff 75 e4             	push   -0x1c(%ebp)
   10d9b:	ff 75 e0             	push   -0x20(%ebp)
   10d9e:	57                   	push   %edi
   10d9f:	56                   	push   %esi
   10da0:	53                   	push   %ebx
   10da1:	52                   	push   %edx
   10da2:	50                   	push   %eax
   10da3:	68 b0 28 01 00       	push   $0x128b0
   10da8:	e8 16 18 00 00       	call   125c3 <log_printf>
   10dad:	83 c4 30             	add    $0x30,%esp
              );

  log_printf("EIP:\t\t0x%x\nEFLAGS:\t\t0x%x", frame->eip, frame->eflags);
   10db0:	8b 45 08             	mov    0x8(%ebp),%eax
   10db3:	8b 50 40             	mov    0x40(%eax),%edx
   10db6:	8b 45 08             	mov    0x8(%ebp),%eax
   10db9:	8b 40 38             	mov    0x38(%eax),%eax
   10dbc:	83 ec 04             	sub    $0x4,%esp
   10dbf:	52                   	push   %edx
   10dc0:	50                   	push   %eax
   10dc1:	68 08 29 01 00       	push   $0x12908
   10dc6:	e8 f8 17 00 00       	call   125c3 <log_printf>
   10dcb:	83 c4 10             	add    $0x10,%esp
}
   10dce:	90                   	nop
   10dcf:	8d 65 f4             	lea    -0xc(%ebp),%esp
   10dd2:	5b                   	pop    %ebx
   10dd3:	5e                   	pop    %esi
   10dd4:	5f                   	pop    %edi
   10dd5:	5d                   	pop    %ebp
   10dd6:	c3                   	ret    

00010dd7 <do_default_handler>:
 *
 * @param message 异常信息
 * @param fram  异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
static void do_default_handler(const exception_frame_t *frame,
                               const char *message) {
   10dd7:	55                   	push   %ebp
   10dd8:	89 e5                	mov    %esp,%ebp
   10dda:	83 ec 08             	sub    $0x8,%esp

  log_printf("---------------------------------------------------");
   10ddd:	83 ec 0c             	sub    $0xc,%esp
   10de0:	68 24 29 01 00       	push   $0x12924
   10de5:	e8 d9 17 00 00       	call   125c3 <log_printf>
   10dea:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ/Exception happend: %s", message);
   10ded:	83 ec 08             	sub    $0x8,%esp
   10df0:	ff 75 0c             	push   0xc(%ebp)
   10df3:	68 58 29 01 00       	push   $0x12958
   10df8:	e8 c6 17 00 00       	call   125c3 <log_printf>
   10dfd:	83 c4 10             	add    $0x10,%esp
  print_exception_fram(frame);
   10e00:	83 ec 0c             	sub    $0xc,%esp
   10e03:	ff 75 08             	push   0x8(%ebp)
   10e06:	e8 e3 fe ff ff       	call   10cee <print_exception_fram>
   10e0b:	83 c4 10             	add    $0x10,%esp
                              
  
  for (;;) {
    hlt();
   10e0e:	e8 53 fe ff ff       	call   10c66 <hlt>
   10e13:	eb f9                	jmp    10e0e <do_default_handler+0x37>

00010e15 <do_handler_unknown>:

/**
 * @brief   对没有针对性处理程序的异常进行处理
 * @param frame 异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
void do_handler_unknown(const exception_frame_t *frame) {
   10e15:	55                   	push   %ebp
   10e16:	89 e5                	mov    %esp,%ebp
   10e18:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "unknown exception");
   10e1b:	83 ec 08             	sub    $0x8,%esp
   10e1e:	68 72 29 01 00       	push   $0x12972
   10e23:	ff 75 08             	push   0x8(%ebp)
   10e26:	e8 ac ff ff ff       	call   10dd7 <do_default_handler>
   10e2b:	83 c4 10             	add    $0x10,%esp
}
   10e2e:	90                   	nop
   10e2f:	c9                   	leave  
   10e30:	c3                   	ret    

00010e31 <do_handler_divider>:
/**
 * @brief  除0异常
 *
 * @param frame 异常栈帧
 */
void do_handler_divider(const exception_frame_t *frame) {
   10e31:	55                   	push   %ebp
   10e32:	89 e5                	mov    %esp,%ebp
   10e34:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "divider exception");
   10e37:	83 ec 08             	sub    $0x8,%esp
   10e3a:	68 84 29 01 00       	push   $0x12984
   10e3f:	ff 75 08             	push   0x8(%ebp)
   10e42:	e8 90 ff ff ff       	call   10dd7 <do_default_handler>
   10e47:	83 c4 10             	add    $0x10,%esp
}
   10e4a:	90                   	nop
   10e4b:	c9                   	leave  
   10e4c:	c3                   	ret    

00010e4d <do_handler_debug>:

void do_handler_debug(const exception_frame_t *frame) {
   10e4d:	55                   	push   %ebp
   10e4e:	89 e5                	mov    %esp,%ebp
   10e50:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "debug exception");
   10e53:	83 ec 08             	sub    $0x8,%esp
   10e56:	68 96 29 01 00       	push   $0x12996
   10e5b:	ff 75 08             	push   0x8(%ebp)
   10e5e:	e8 74 ff ff ff       	call   10dd7 <do_default_handler>
   10e63:	83 c4 10             	add    $0x10,%esp
}
   10e66:	90                   	nop
   10e67:	c9                   	leave  
   10e68:	c3                   	ret    

00010e69 <do_handler_nmi>:

void do_handler_nmi(const exception_frame_t *frame) {
   10e69:	55                   	push   %ebp
   10e6a:	89 e5                	mov    %esp,%ebp
   10e6c:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "nmi exception");
   10e6f:	83 ec 08             	sub    $0x8,%esp
   10e72:	68 a6 29 01 00       	push   $0x129a6
   10e77:	ff 75 08             	push   0x8(%ebp)
   10e7a:	e8 58 ff ff ff       	call   10dd7 <do_default_handler>
   10e7f:	83 c4 10             	add    $0x10,%esp
}
   10e82:	90                   	nop
   10e83:	c9                   	leave  
   10e84:	c3                   	ret    

00010e85 <do_handler_breakpoint>:
void do_handler_breakpoint(const exception_frame_t *frame) {
   10e85:	55                   	push   %ebp
   10e86:	89 e5                	mov    %esp,%ebp
   10e88:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "breakpoint exception");
   10e8b:	83 ec 08             	sub    $0x8,%esp
   10e8e:	68 b4 29 01 00       	push   $0x129b4
   10e93:	ff 75 08             	push   0x8(%ebp)
   10e96:	e8 3c ff ff ff       	call   10dd7 <do_default_handler>
   10e9b:	83 c4 10             	add    $0x10,%esp
}
   10e9e:	90                   	nop
   10e9f:	c9                   	leave  
   10ea0:	c3                   	ret    

00010ea1 <do_handler_overflow>:
void do_handler_overflow(const exception_frame_t *frame) {
   10ea1:	55                   	push   %ebp
   10ea2:	89 e5                	mov    %esp,%ebp
   10ea4:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "overflow exception");
   10ea7:	83 ec 08             	sub    $0x8,%esp
   10eaa:	68 c9 29 01 00       	push   $0x129c9
   10eaf:	ff 75 08             	push   0x8(%ebp)
   10eb2:	e8 20 ff ff ff       	call   10dd7 <do_default_handler>
   10eb7:	83 c4 10             	add    $0x10,%esp
}
   10eba:	90                   	nop
   10ebb:	c9                   	leave  
   10ebc:	c3                   	ret    

00010ebd <do_handler_bound_range>:
void do_handler_bound_range(const exception_frame_t *frame) {
   10ebd:	55                   	push   %ebp
   10ebe:	89 e5                	mov    %esp,%ebp
   10ec0:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "bound_range exception");
   10ec3:	83 ec 08             	sub    $0x8,%esp
   10ec6:	68 dc 29 01 00       	push   $0x129dc
   10ecb:	ff 75 08             	push   0x8(%ebp)
   10ece:	e8 04 ff ff ff       	call   10dd7 <do_default_handler>
   10ed3:	83 c4 10             	add    $0x10,%esp
}
   10ed6:	90                   	nop
   10ed7:	c9                   	leave  
   10ed8:	c3                   	ret    

00010ed9 <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(const exception_frame_t *frame) {
   10ed9:	55                   	push   %ebp
   10eda:	89 e5                	mov    %esp,%ebp
   10edc:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_opcode exception");
   10edf:	83 ec 08             	sub    $0x8,%esp
   10ee2:	68 f2 29 01 00       	push   $0x129f2
   10ee7:	ff 75 08             	push   0x8(%ebp)
   10eea:	e8 e8 fe ff ff       	call   10dd7 <do_default_handler>
   10eef:	83 c4 10             	add    $0x10,%esp
}
   10ef2:	90                   	nop
   10ef3:	c9                   	leave  
   10ef4:	c3                   	ret    

00010ef5 <do_handler_device_unavailable>:
void do_handler_device_unavailable(const exception_frame_t *frame) {
   10ef5:	55                   	push   %ebp
   10ef6:	89 e5                	mov    %esp,%ebp
   10ef8:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "device_unavailable exception");
   10efb:	83 ec 08             	sub    $0x8,%esp
   10efe:	68 0b 2a 01 00       	push   $0x12a0b
   10f03:	ff 75 08             	push   0x8(%ebp)
   10f06:	e8 cc fe ff ff       	call   10dd7 <do_default_handler>
   10f0b:	83 c4 10             	add    $0x10,%esp
}
   10f0e:	90                   	nop
   10f0f:	c9                   	leave  
   10f10:	c3                   	ret    

00010f11 <do_handler_double_fault>:
void do_handler_double_fault(const exception_frame_t *frame) {
   10f11:	55                   	push   %ebp
   10f12:	89 e5                	mov    %esp,%ebp
   10f14:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "double_fault exception");
   10f17:	83 ec 08             	sub    $0x8,%esp
   10f1a:	68 28 2a 01 00       	push   $0x12a28
   10f1f:	ff 75 08             	push   0x8(%ebp)
   10f22:	e8 b0 fe ff ff       	call   10dd7 <do_default_handler>
   10f27:	83 c4 10             	add    $0x10,%esp
}
   10f2a:	90                   	nop
   10f2b:	c9                   	leave  
   10f2c:	c3                   	ret    

00010f2d <do_handler_invalid_tss>:
void do_handler_invalid_tss(const exception_frame_t *frame) {
   10f2d:	55                   	push   %ebp
   10f2e:	89 e5                	mov    %esp,%ebp
   10f30:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_tss exception");
   10f33:	83 ec 08             	sub    $0x8,%esp
   10f36:	68 3f 2a 01 00       	push   $0x12a3f
   10f3b:	ff 75 08             	push   0x8(%ebp)
   10f3e:	e8 94 fe ff ff       	call   10dd7 <do_default_handler>
   10f43:	83 c4 10             	add    $0x10,%esp
}
   10f46:	90                   	nop
   10f47:	c9                   	leave  
   10f48:	c3                   	ret    

00010f49 <do_handler_segment_not_present>:
void do_handler_segment_not_present(const exception_frame_t *frame) {
   10f49:	55                   	push   %ebp
   10f4a:	89 e5                	mov    %esp,%ebp
   10f4c:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "segment_not_present exception");
   10f4f:	83 ec 08             	sub    $0x8,%esp
   10f52:	68 55 2a 01 00       	push   $0x12a55
   10f57:	ff 75 08             	push   0x8(%ebp)
   10f5a:	e8 78 fe ff ff       	call   10dd7 <do_default_handler>
   10f5f:	83 c4 10             	add    $0x10,%esp
}
   10f62:	90                   	nop
   10f63:	c9                   	leave  
   10f64:	c3                   	ret    

00010f65 <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(const exception_frame_t *frame) {
   10f65:	55                   	push   %ebp
   10f66:	89 e5                	mov    %esp,%ebp
   10f68:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "stack_segment_fault exception");
   10f6b:	83 ec 08             	sub    $0x8,%esp
   10f6e:	68 73 2a 01 00       	push   $0x12a73
   10f73:	ff 75 08             	push   0x8(%ebp)
   10f76:	e8 5c fe ff ff       	call   10dd7 <do_default_handler>
   10f7b:	83 c4 10             	add    $0x10,%esp
}
   10f7e:	90                   	nop
   10f7f:	c9                   	leave  
   10f80:	c3                   	ret    

00010f81 <do_handler_general_protection>:
void do_handler_general_protection(const exception_frame_t *frame) {
   10f81:	55                   	push   %ebp
   10f82:	89 e5                	mov    %esp,%ebp
   10f84:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "general_protection exception");
   10f87:	83 ec 08             	sub    $0x8,%esp
   10f8a:	68 91 2a 01 00       	push   $0x12a91
   10f8f:	ff 75 08             	push   0x8(%ebp)
   10f92:	e8 40 fe ff ff       	call   10dd7 <do_default_handler>
   10f97:	83 c4 10             	add    $0x10,%esp
}
   10f9a:	90                   	nop
   10f9b:	c9                   	leave  
   10f9c:	c3                   	ret    

00010f9d <do_handler_page_fault>:
void do_handler_page_fault(const exception_frame_t *frame) {
   10f9d:	55                   	push   %ebp
   10f9e:	89 e5                	mov    %esp,%ebp
   10fa0:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "page_fault exception");
   10fa3:	83 ec 08             	sub    $0x8,%esp
   10fa6:	68 ae 2a 01 00       	push   $0x12aae
   10fab:	ff 75 08             	push   0x8(%ebp)
   10fae:	e8 24 fe ff ff       	call   10dd7 <do_default_handler>
   10fb3:	83 c4 10             	add    $0x10,%esp
}
   10fb6:	90                   	nop
   10fb7:	c9                   	leave  
   10fb8:	c3                   	ret    

00010fb9 <do_handler_fpu_error>:
void do_handler_fpu_error(const exception_frame_t *frame) {
   10fb9:	55                   	push   %ebp
   10fba:	89 e5                	mov    %esp,%ebp
   10fbc:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "fpu_error exception");
   10fbf:	83 ec 08             	sub    $0x8,%esp
   10fc2:	68 c3 2a 01 00       	push   $0x12ac3
   10fc7:	ff 75 08             	push   0x8(%ebp)
   10fca:	e8 08 fe ff ff       	call   10dd7 <do_default_handler>
   10fcf:	83 c4 10             	add    $0x10,%esp
}
   10fd2:	90                   	nop
   10fd3:	c9                   	leave  
   10fd4:	c3                   	ret    

00010fd5 <do_handler_alignment_check>:
void do_handler_alignment_check(const exception_frame_t *frame) {
   10fd5:	55                   	push   %ebp
   10fd6:	89 e5                	mov    %esp,%ebp
   10fd8:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "alignment_check exception");
   10fdb:	83 ec 08             	sub    $0x8,%esp
   10fde:	68 d7 2a 01 00       	push   $0x12ad7
   10fe3:	ff 75 08             	push   0x8(%ebp)
   10fe6:	e8 ec fd ff ff       	call   10dd7 <do_default_handler>
   10feb:	83 c4 10             	add    $0x10,%esp
}
   10fee:	90                   	nop
   10fef:	c9                   	leave  
   10ff0:	c3                   	ret    

00010ff1 <do_handler_machine_check>:
void do_handler_machine_check(const exception_frame_t *frame) {
   10ff1:	55                   	push   %ebp
   10ff2:	89 e5                	mov    %esp,%ebp
   10ff4:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "machine_check exception");
   10ff7:	83 ec 08             	sub    $0x8,%esp
   10ffa:	68 f1 2a 01 00       	push   $0x12af1
   10fff:	ff 75 08             	push   0x8(%ebp)
   11002:	e8 d0 fd ff ff       	call   10dd7 <do_default_handler>
   11007:	83 c4 10             	add    $0x10,%esp
}
   1100a:	90                   	nop
   1100b:	c9                   	leave  
   1100c:	c3                   	ret    

0001100d <do_handler_smd_exception>:
void do_handler_smd_exception(const exception_frame_t *frame) {
   1100d:	55                   	push   %ebp
   1100e:	89 e5                	mov    %esp,%ebp
   11010:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "smd_exception exception");
   11013:	83 ec 08             	sub    $0x8,%esp
   11016:	68 09 2b 01 00       	push   $0x12b09
   1101b:	ff 75 08             	push   0x8(%ebp)
   1101e:	e8 b4 fd ff ff       	call   10dd7 <do_default_handler>
   11023:	83 c4 10             	add    $0x10,%esp
}
   11026:	90                   	nop
   11027:	c9                   	leave  
   11028:	c3                   	ret    

00011029 <do_handler_virtual_exception>:
void do_handler_virtual_exception(const exception_frame_t *frame) {
   11029:	55                   	push   %ebp
   1102a:	89 e5                	mov    %esp,%ebp
   1102c:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "virtual_exception exception");
   1102f:	83 ec 08             	sub    $0x8,%esp
   11032:	68 21 2b 01 00       	push   $0x12b21
   11037:	ff 75 08             	push   0x8(%ebp)
   1103a:	e8 98 fd ff ff       	call   10dd7 <do_default_handler>
   1103f:	83 c4 10             	add    $0x10,%esp
}
   11042:	90                   	nop
   11043:	c9                   	leave  
   11044:	c3                   	ret    

00011045 <do_handler_control_exception>:
void do_handler_control_exception(const exception_frame_t *frame) {
   11045:	55                   	push   %ebp
   11046:	89 e5                	mov    %esp,%ebp
   11048:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "control_exception exception");
   1104b:	83 ec 08             	sub    $0x8,%esp
   1104e:	68 3d 2b 01 00       	push   $0x12b3d
   11053:	ff 75 08             	push   0x8(%ebp)
   11056:	e8 7c fd ff ff       	call   10dd7 <do_default_handler>
   1105b:	83 c4 10             	add    $0x10,%esp
}
   1105e:	90                   	nop
   1105f:	c9                   	leave  
   11060:	c3                   	ret    

00011061 <gate_desc_set>:
 * @param selector 中断门对应的处理程序所在的段的选择子
 * @param offset 中段门对应的处理程序相对于所在段的偏移量
 * @param attr 中段门的属性
 */
static void gate_desc_set(gate_desc_t *desc, const uint16_t selector, const uint32_t offset,
                          const uint16_t attr) {
   11061:	55                   	push   %ebp
   11062:	89 e5                	mov    %esp,%ebp
   11064:	83 ec 08             	sub    $0x8,%esp
   11067:	8b 55 0c             	mov    0xc(%ebp),%edx
   1106a:	8b 45 14             	mov    0x14(%ebp),%eax
   1106d:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11071:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
  // 1.初始化偏移量
  desc->offset15_0 = offset & 0xffff;
   11075:	8b 45 10             	mov    0x10(%ebp),%eax
   11078:	89 c2                	mov    %eax,%edx
   1107a:	8b 45 08             	mov    0x8(%ebp),%eax
   1107d:	66 89 10             	mov    %dx,(%eax)
  desc->offset31_16 = (offset >> 16) & 0xffff;
   11080:	8b 45 10             	mov    0x10(%ebp),%eax
   11083:	c1 e8 10             	shr    $0x10,%eax
   11086:	89 c2                	mov    %eax,%edx
   11088:	8b 45 08             	mov    0x8(%ebp),%eax
   1108b:	66 89 50 06          	mov    %dx,0x6(%eax)

  // 2.初始化选择子
  desc->selector = selector;
   1108f:	8b 45 08             	mov    0x8(%ebp),%eax
   11092:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11096:	66 89 50 02          	mov    %dx,0x2(%eax)

  // 3.初始化属性位
  desc->attr = attr;
   1109a:	8b 45 08             	mov    0x8(%ebp),%eax
   1109d:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   110a1:	66 89 50 04          	mov    %dx,0x4(%eax)
}
   110a5:	90                   	nop
   110a6:	c9                   	leave  
   110a7:	c3                   	ret    

000110a8 <idt_install>:
 *
 * @param idt_num 异常的下标
 * @param handler 异常处理程序的偏移地址
 * @return int 成功返回 0 失败放回 -1
 */
int idt_install(const int idt_num, const idt_handler_t handler) {
   110a8:	55                   	push   %ebp
   110a9:	89 e5                	mov    %esp,%ebp
  // 1.判断IDT下标是否越界
  if (idt_num >= IDT_TABLE_SIZE || idt_num < 0) return -1;
   110ab:	81 7d 08 ff 00 00 00 	cmpl   $0xff,0x8(%ebp)
   110b2:	7f 06                	jg     110ba <idt_install+0x12>
   110b4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   110b8:	79 07                	jns    110c1 <idt_install+0x19>
   110ba:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   110bf:	eb 25                	jmp    110e6 <idt_install+0x3e>

  // 2.在IDT表中设置下标为 idt_num 的中断门
  gate_desc_set(idt_table + idt_num, KERNEL_SELECTOR_CS, (uint32_t)handler,
   110c1:	8b 45 0c             	mov    0xc(%ebp),%eax
   110c4:	8b 55 08             	mov    0x8(%ebp),%edx
   110c7:	c1 e2 03             	shl    $0x3,%edx
   110ca:	81 c2 60 33 02 00    	add    $0x23360,%edx
   110d0:	68 00 8e 00 00       	push   $0x8e00
   110d5:	50                   	push   %eax
   110d6:	6a 08                	push   $0x8
   110d8:	52                   	push   %edx
   110d9:	e8 83 ff ff ff       	call   11061 <gate_desc_set>
   110de:	83 c4 10             	add    $0x10,%esp
                GATE_TYPE_INT | GATE_ATTR_P | GATE_ATTR_DPL_0);

  return 0;
   110e1:	b8 00 00 00 00       	mov    $0x0,%eax
}
   110e6:	c9                   	leave  
   110e7:	c3                   	ret    

000110e8 <init_pic>:

/**
 * @brief  初始化主从8259芯片
 * 
 */
static void init_pic(void) {
   110e8:	55                   	push   %ebp
   110e9:	89 e5                	mov    %esp,%ebp
  //1.对主片(8259A芯片)进行初始化, 写入时必须按照ICW1~4的顺序写入
  outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);  //ICW1:边缘触发，级联模式，需要ICW4
   110eb:	6a 11                	push   $0x11
   110ed:	6a 20                	push   $0x20
   110ef:	e8 96 fb ff ff       	call   10c8a <outb>
   110f4:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW2, PIC_ICW2_IDT_START);                //ICW2:起始中断向量号为0x20
   110f7:	6a 20                	push   $0x20
   110f9:	6a 21                	push   $0x21
   110fb:	e8 8a fb ff ff       	call   10c8a <outb>
   11100:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW3, PIC_ICW3_MASTER_CASCADE);           //ICW3:主片用IR2级联从片
   11103:	6a 04                	push   $0x4
   11105:	6a 21                	push   $0x21
   11107:	e8 7e fb ff ff       	call   10c8a <outb>
   1110c:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW4, PIC_ICW4_8086);                     //ICW4:8086模式，正常EOI
   1110f:	6a 01                	push   $0x1
   11111:	6a 21                	push   $0x21
   11113:	e8 72 fb ff ff       	call   10c8a <outb>
   11118:	83 c4 08             	add    $0x8,%esp

  //2.对从片(8259A芯片)进行初始化
  outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);
   1111b:	6a 11                	push   $0x11
   1111d:	68 a0 00 00 00       	push   $0xa0
   11122:	e8 63 fb ff ff       	call   10c8a <outb>
   11127:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW2, PIC_ICW2_IDT_START + 8); //第一块芯片占用了8个中断，所以第二块芯片从第8个中断的下一个开始
   1112a:	6a 28                	push   $0x28
   1112c:	68 a1 00 00 00       	push   $0xa1
   11131:	e8 54 fb ff ff       	call   10c8a <outb>
   11136:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW3, PIC_ICW3_SLAVE_CASCADE);
   11139:	6a 02                	push   $0x2
   1113b:	68 a1 00 00 00       	push   $0xa1
   11140:	e8 45 fb ff ff       	call   10c8a <outb>
   11145:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW4, PIC_ICW4_8086);
   11148:	6a 01                	push   $0x1
   1114a:	68 a1 00 00 00       	push   $0xa1
   1114f:	e8 36 fb ff ff       	call   10c8a <outb>
   11154:	83 c4 08             	add    $0x8,%esp


  //3.初始化完两块8259芯片后，还需要为每一个中断设置处理程序
  //才可以去接收中断，所以现在要屏蔽中断，IMR位置1则屏蔽该中断请求，0则不屏蔽
  outb(PIC0_IMR, 0xfb); //屏蔽主片除 irq2(第3位) 以外的位传来的中断，(1111 1011)
   11157:	68 fb 00 00 00       	push   $0xfb
   1115c:	6a 21                	push   $0x21
   1115e:	e8 27 fb ff ff       	call   10c8a <outb>
   11163:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_IMR, 0xff); //屏蔽从片的所有中断
   11166:	68 ff 00 00 00       	push   $0xff
   1116b:	68 a1 00 00 00       	push   $0xa1
   11170:	e8 15 fb ff ff       	call   10c8a <outb>
   11175:	83 c4 08             	add    $0x8,%esp


}
   11178:	90                   	nop
   11179:	c9                   	leave  
   1117a:	c3                   	ret    

0001117b <idt_init>:

/**
 * @brief  初始化中断向量表
 *
 */
void idt_init(void) {
   1117b:	55                   	push   %ebp
   1117c:	89 e5                	mov    %esp,%ebp
   1117e:	83 ec 10             	sub    $0x10,%esp
  // 1.初始化IDT中的各个中断门(未知异常类型)
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   11181:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   11188:	eb 14                	jmp    1119e <idt_init+0x23>
    idt_install(i, (idt_handler_t)exception_handler_unknown);
   1118a:	68 2a 00 01 00       	push   $0x1002a
   1118f:	ff 75 fc             	push   -0x4(%ebp)
   11192:	e8 11 ff ff ff       	call   110a8 <idt_install>
   11197:	83 c4 08             	add    $0x8,%esp
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   1119a:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   1119e:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   111a5:	7e e3                	jle    1118a <idt_init+0xf>
  }

  // 2.绑定异常中断向量表中对应下标的中断门的处理函数
  idt_install(IDT0_DE, (idt_handler_t)exception_handler_divider);
   111a7:	68 47 00 01 00       	push   $0x10047
   111ac:	6a 00                	push   $0x0
   111ae:	e8 f5 fe ff ff       	call   110a8 <idt_install>
   111b3:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT1_DB, (idt_handler_t)exception_handler_debug);
   111b6:	68 64 00 01 00       	push   $0x10064
   111bb:	6a 01                	push   $0x1
   111bd:	e8 e6 fe ff ff       	call   110a8 <idt_install>
   111c2:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT2_NMI, (idt_handler_t)exception_handler_nmi);
   111c5:	68 81 00 01 00       	push   $0x10081
   111ca:	6a 02                	push   $0x2
   111cc:	e8 d7 fe ff ff       	call   110a8 <idt_install>
   111d1:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT3_BP, (idt_handler_t)exception_handler_breakpoint);
   111d4:	68 9e 00 01 00       	push   $0x1009e
   111d9:	6a 03                	push   $0x3
   111db:	e8 c8 fe ff ff       	call   110a8 <idt_install>
   111e0:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT4_OF, (idt_handler_t)exception_handler_overflow);
   111e3:	68 bb 00 01 00       	push   $0x100bb
   111e8:	6a 04                	push   $0x4
   111ea:	e8 b9 fe ff ff       	call   110a8 <idt_install>
   111ef:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT5_BR, (idt_handler_t)exception_handler_bound_range);
   111f2:	68 d8 00 01 00       	push   $0x100d8
   111f7:	6a 05                	push   $0x5
   111f9:	e8 aa fe ff ff       	call   110a8 <idt_install>
   111fe:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT6_UD, (idt_handler_t)exception_handler_invalid_opcode);
   11201:	68 f5 00 01 00       	push   $0x100f5
   11206:	6a 06                	push   $0x6
   11208:	e8 9b fe ff ff       	call   110a8 <idt_install>
   1120d:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT7_NM, (idt_handler_t)exception_handler_device_unavailable);
   11210:	68 12 01 01 00       	push   $0x10112
   11215:	6a 07                	push   $0x7
   11217:	e8 8c fe ff ff       	call   110a8 <idt_install>
   1121c:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT8_DF, (idt_handler_t)exception_handler_double_fault);
   1121f:	68 2f 01 01 00       	push   $0x1012f
   11224:	6a 08                	push   $0x8
   11226:	e8 7d fe ff ff       	call   110a8 <idt_install>
   1122b:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT10_TS, (idt_handler_t)exception_handler_invalid_tss);
   1122e:	68 4a 01 01 00       	push   $0x1014a
   11233:	6a 0a                	push   $0xa
   11235:	e8 6e fe ff ff       	call   110a8 <idt_install>
   1123a:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT11_NP, (idt_handler_t)exception_handler_segment_not_present);
   1123d:	68 65 01 01 00       	push   $0x10165
   11242:	6a 0b                	push   $0xb
   11244:	e8 5f fe ff ff       	call   110a8 <idt_install>
   11249:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT12_SS, (idt_handler_t)exception_handler_stack_segment_fault);
   1124c:	68 80 01 01 00       	push   $0x10180
   11251:	6a 0c                	push   $0xc
   11253:	e8 50 fe ff ff       	call   110a8 <idt_install>
   11258:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT13_GP, (idt_handler_t)exception_handler_general_protection);
   1125b:	68 9b 01 01 00       	push   $0x1019b
   11260:	6a 0d                	push   $0xd
   11262:	e8 41 fe ff ff       	call   110a8 <idt_install>
   11267:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT14_PF, (idt_handler_t)exception_handler_page_fault);
   1126a:	68 b6 01 01 00       	push   $0x101b6
   1126f:	6a 0e                	push   $0xe
   11271:	e8 32 fe ff ff       	call   110a8 <idt_install>
   11276:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT16_MF, (idt_handler_t)exception_handler_fpu_error);
   11279:	68 d1 01 01 00       	push   $0x101d1
   1127e:	6a 10                	push   $0x10
   11280:	e8 23 fe ff ff       	call   110a8 <idt_install>
   11285:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT17_AC, (idt_handler_t)exception_handler_alignment_check);
   11288:	68 ee 01 01 00       	push   $0x101ee
   1128d:	6a 11                	push   $0x11
   1128f:	e8 14 fe ff ff       	call   110a8 <idt_install>
   11294:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT18_MC, (idt_handler_t)exception_handler_machine_check);
   11297:	68 09 02 01 00       	push   $0x10209
   1129c:	6a 12                	push   $0x12
   1129e:	e8 05 fe ff ff       	call   110a8 <idt_install>
   112a3:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT19_XM, (idt_handler_t)exception_handler_smd_exception);
   112a6:	68 26 02 01 00       	push   $0x10226
   112ab:	6a 13                	push   $0x13
   112ad:	e8 f6 fd ff ff       	call   110a8 <idt_install>
   112b2:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT20_VE, (idt_handler_t)exception_handler_virtual_exception);
   112b5:	68 43 02 01 00       	push   $0x10243
   112ba:	6a 14                	push   $0x14
   112bc:	e8 e7 fd ff ff       	call   110a8 <idt_install>
   112c1:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT21_CP, (idt_handler_t)exception_handler_control_exception);
   112c4:	68 60 02 01 00       	push   $0x10260
   112c9:	6a 15                	push   $0x15
   112cb:	e8 d8 fd ff ff       	call   110a8 <idt_install>
   112d0:	83 c4 08             	add    $0x8,%esp

  //3.加载IDT
  lidt((uint32_t)idt_table, sizeof(idt_table));
   112d3:	b8 60 33 02 00       	mov    $0x23360,%eax
   112d8:	68 00 08 00 00       	push   $0x800
   112dd:	50                   	push   %eax
   112de:	e8 c8 f9 ff ff       	call   10cab <lidt>
   112e3:	83 c4 08             	add    $0x8,%esp

  //4.初始化8259设备中断芯片
  init_pic();
   112e6:	e8 fd fd ff ff       	call   110e8 <init_pic>
}
   112eb:	90                   	nop
   112ec:	c9                   	leave  
   112ed:	c3                   	ret    

000112ee <idt_enable>:
/**
 * @brief  开启外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号,即IDT中的下标
 */
void idt_enable(uint8_t irq_num) {
   112ee:	55                   	push   %ebp
   112ef:	89 e5                	mov    %esp,%ebp
   112f1:	53                   	push   %ebx
   112f2:	83 ec 14             	sub    $0x14,%esp
   112f5:	8b 45 08             	mov    0x8(%ebp),%eax
   112f8:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   112fb:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   112ff:	76 7f                	jbe    11380 <idt_enable+0x92>
   11301:	80 7d e8 2e          	cmpb   $0x2e,-0x18(%ebp)
   11305:	77 79                	ja     11380 <idt_enable+0x92>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   11307:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置0，即不屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   1130b:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   1130f:	77 33                	ja     11344 <idt_enable+0x56>
    uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   11311:	6a 21                	push   $0x21
   11313:	e8 55 f9 ff ff       	call   10c6d <inb>
   11318:	83 c4 04             	add    $0x4,%esp
   1131b:	89 c3                	mov    %eax,%ebx
   1131d:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   11321:	ba 01 00 00 00       	mov    $0x1,%edx
   11326:	89 c1                	mov    %eax,%ecx
   11328:	d3 e2                	shl    %cl,%edx
   1132a:	89 d0                	mov    %edx,%eax
   1132c:	f7 d0                	not    %eax
   1132e:	21 d8                	and    %ebx,%eax
   11330:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   11333:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11337:	50                   	push   %eax
   11338:	6a 21                	push   $0x21
   1133a:	e8 4b f9 ff ff       	call   10c8a <outb>
   1133f:	83 c4 08             	add    $0x8,%esp
   11342:	eb 3d                	jmp    11381 <idt_enable+0x93>
  } else {
    uint8_t mask = inb(PIC1_IMR) & ~(1 << (irq_num - 8));
   11344:	68 a1 00 00 00       	push   $0xa1
   11349:	e8 1f f9 ff ff       	call   10c6d <inb>
   1134e:	83 c4 04             	add    $0x4,%esp
   11351:	89 c3                	mov    %eax,%ebx
   11353:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   11357:	83 e8 08             	sub    $0x8,%eax
   1135a:	ba 01 00 00 00       	mov    $0x1,%edx
   1135f:	89 c1                	mov    %eax,%ecx
   11361:	d3 e2                	shl    %cl,%edx
   11363:	89 d0                	mov    %edx,%eax
   11365:	f7 d0                	not    %eax
   11367:	21 d8                	and    %ebx,%eax
   11369:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   1136c:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11370:	50                   	push   %eax
   11371:	68 a1 00 00 00       	push   $0xa1
   11376:	e8 0f f9 ff ff       	call   10c8a <outb>
   1137b:	83 c4 08             	add    $0x8,%esp
   1137e:	eb 01                	jmp    11381 <idt_enable+0x93>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   11380:	90                   	nop
  }
  
}
   11381:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11384:	c9                   	leave  
   11385:	c3                   	ret    

00011386 <idt_disable>:
/**
 * @brief  关闭外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号，即IDT中的下标
 */
void idt_disable(uint8_t irq_num) {
   11386:	55                   	push   %ebp
   11387:	89 e5                	mov    %esp,%ebp
   11389:	53                   	push   %ebx
   1138a:	83 ec 14             	sub    $0x14,%esp
   1138d:	8b 45 08             	mov    0x8(%ebp),%eax
   11390:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   11393:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   11397:	76 7b                	jbe    11414 <idt_disable+0x8e>
   11399:	80 7d e8 2f          	cmpb   $0x2f,-0x18(%ebp)
   1139d:	77 75                	ja     11414 <idt_disable+0x8e>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   1139f:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置1，即屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   113a3:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   113a7:	77 31                	ja     113da <idt_disable+0x54>
    uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   113a9:	6a 21                	push   $0x21
   113ab:	e8 bd f8 ff ff       	call   10c6d <inb>
   113b0:	83 c4 04             	add    $0x4,%esp
   113b3:	89 c3                	mov    %eax,%ebx
   113b5:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   113b9:	ba 01 00 00 00       	mov    $0x1,%edx
   113be:	89 c1                	mov    %eax,%ecx
   113c0:	d3 e2                	shl    %cl,%edx
   113c2:	89 d0                	mov    %edx,%eax
   113c4:	09 d8                	or     %ebx,%eax
   113c6:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   113c9:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   113cd:	50                   	push   %eax
   113ce:	6a 21                	push   $0x21
   113d0:	e8 b5 f8 ff ff       	call   10c8a <outb>
   113d5:	83 c4 08             	add    $0x8,%esp
   113d8:	eb 3b                	jmp    11415 <idt_disable+0x8f>
  } else {
    uint8_t mask = inb(PIC1_IMR) | (1 << (irq_num - 8));
   113da:	68 a1 00 00 00       	push   $0xa1
   113df:	e8 89 f8 ff ff       	call   10c6d <inb>
   113e4:	83 c4 04             	add    $0x4,%esp
   113e7:	89 c3                	mov    %eax,%ebx
   113e9:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   113ed:	83 e8 08             	sub    $0x8,%eax
   113f0:	ba 01 00 00 00       	mov    $0x1,%edx
   113f5:	89 c1                	mov    %eax,%ecx
   113f7:	d3 e2                	shl    %cl,%edx
   113f9:	89 d0                	mov    %edx,%eax
   113fb:	09 d8                	or     %ebx,%eax
   113fd:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   11400:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11404:	50                   	push   %eax
   11405:	68 a1 00 00 00       	push   $0xa1
   1140a:	e8 7b f8 ff ff       	call   10c8a <outb>
   1140f:	83 c4 08             	add    $0x8,%esp
   11412:	eb 01                	jmp    11415 <idt_disable+0x8f>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   11414:	90                   	nop
  }
  
}
   11415:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11418:	c9                   	leave  
   11419:	c3                   	ret    

0001141a <idt_disable_global>:

/**
 * @brief  关闭全局中断
 * 
 */
void idt_disable_global(void) {
   1141a:	55                   	push   %ebp
   1141b:	89 e5                	mov    %esp,%ebp
  cli();
   1141d:	e8 36 f8 ff ff       	call   10c58 <cli>
}
   11422:	90                   	nop
   11423:	5d                   	pop    %ebp
   11424:	c3                   	ret    

00011425 <idt_enable_global>:

/**
 * @brief  开启全局中断
 * 
 */
void idt_enable_global(void) {
   11425:	55                   	push   %ebp
   11426:	89 e5                	mov    %esp,%ebp
  sti();
   11428:	e8 32 f8 ff ff       	call   10c5f <sti>
}
   1142d:	90                   	nop
   1142e:	5d                   	pop    %ebp
   1142f:	c3                   	ret    

00011430 <pic_send_eoi>:
 * @brief  将OCW2寄存器的7~5位置为 001，用普通的EOI结束方式
 *         向8259A发送EOI命令，8259A会将ISR中优先级最高的位置0
 *
 * @param irq_num 中断向量号，即IDT下标
 */
void pic_send_eoi(int irq_num) {
   11430:	55                   	push   %ebp
   11431:	89 e5                	mov    %esp,%ebp
  //1.获取该中断对应的IRQ标号
  irq_num -= PIC_ICW2_IDT_START;
   11433:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
  //2.判断标号是否越界,若不越界则交给对应芯片处理
  if (irq_num < 0 || irq_num > 15) return;
   11437:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1143b:	78 29                	js     11466 <pic_send_eoi+0x36>
   1143d:	83 7d 08 0f          	cmpl   $0xf,0x8(%ebp)
   11441:	7f 23                	jg     11466 <pic_send_eoi+0x36>

  //3.若中断来自主片则只需向主片发送EOI
  outb(PIC0_OCW2, PIC_OCW2_EOI);
   11443:	6a 20                	push   $0x20
   11445:	6a 20                	push   $0x20
   11447:	e8 3e f8 ff ff       	call   10c8a <outb>
   1144c:	83 c4 08             	add    $0x8,%esp

  //4.若中断来自从片则还需向从片发送EOI
  if (irq_num >= 8) { 
   1144f:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11453:	7e 12                	jle    11467 <pic_send_eoi+0x37>
    outb(PIC1_OCW2, PIC_OCW2_EOI);
   11455:	6a 20                	push   $0x20
   11457:	68 a0 00 00 00       	push   $0xa0
   1145c:	e8 29 f8 ff ff       	call   10c8a <outb>
   11461:	83 c4 08             	add    $0x8,%esp
   11464:	eb 01                	jmp    11467 <pic_send_eoi+0x37>
  if (irq_num < 0 || irq_num > 15) return;
   11466:	90                   	nop
  }

}
   11467:	c9                   	leave  
   11468:	c3                   	ret    

00011469 <idt_enter_protection>:

/**
 * @brief  
 * 
 */
idt_state_t idt_enter_protection(void) {
   11469:	55                   	push   %ebp
   1146a:	89 e5                	mov    %esp,%ebp
   1146c:	83 ec 10             	sub    $0x10,%esp
  idt_state_t state = read_eflags();
   1146f:	e8 5f f8 ff ff       	call   10cd3 <read_eflags>
   11474:	89 45 fc             	mov    %eax,-0x4(%ebp)
  idt_disable_global();
   11477:	e8 9e ff ff ff       	call   1141a <idt_disable_global>
  return state;;
   1147c:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1147f:	c9                   	leave  
   11480:	c3                   	ret    

00011481 <idt_leave_protection>:
/**
 * @brief  
 * 
 * @return idt_state_t 
 */
idt_state_t idt_leave_protection(idt_state_t state){
   11481:	55                   	push   %ebp
   11482:	89 e5                	mov    %esp,%ebp
  write_eflags(state);
   11484:	ff 75 08             	push   0x8(%ebp)
   11487:	e8 57 f8 ff ff       	call   10ce3 <write_eflags>
   1148c:	83 c4 04             	add    $0x4,%esp
}
   1148f:	90                   	nop
   11490:	c9                   	leave  
   11491:	c3                   	ret    

00011492 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   11492:	55                   	push   %ebp
   11493:	89 e5                	mov    %esp,%ebp
   11495:	83 ec 08             	sub    $0x8,%esp
   11498:	8b 45 08             	mov    0x8(%ebp),%eax
   1149b:	8b 55 0c             	mov    0xc(%ebp),%edx
   1149e:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   114a2:	89 d0                	mov    %edx,%eax
   114a4:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   114a7:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   114ab:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   114af:	ee                   	out    %al,(%dx)
}
   114b0:	90                   	nop
   114b1:	c9                   	leave  
   114b2:	c3                   	ret    

000114b3 <do_handler_time>:
/**
 * @brief  处理定时器中断的c函数
 * 
 * @param frame 异常栈帧
 */
void do_handler_time(const exception_frame_t *frame) {
   114b3:	55                   	push   %ebp
   114b4:	89 e5                	mov    %esp,%ebp
   114b6:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   114b9:	a1 60 3b 02 00       	mov    0x23b60,%eax
   114be:	83 c0 01             	add    $0x1,%eax
   114c1:	a3 60 3b 02 00       	mov    %eax,0x23b60

    //因为ICW4的EOI位为0，所以要手动发送EOI即中断结束信号
    pic_send_eoi(IRQ0_TIMER);
   114c6:	83 ec 0c             	sub    $0xc,%esp
   114c9:	6a 20                	push   $0x20
   114cb:	e8 60 ff ff ff       	call   11430 <pic_send_eoi>
   114d0:	83 c4 10             	add    $0x10,%esp

    //运行完一个时间片，判断是否需要执行任务切换，若需要则执行
    //必须写在发送eoi之后，防止发生任务切换导致eoi没有发送，从而无法进行下一次中断
    task_slice_end();   
   114d3:	e8 d3 f3 ff ff       	call   108ab <task_slice_end>
}
   114d8:	90                   	nop
   114d9:	c9                   	leave  
   114da:	c3                   	ret    

000114db <init_pit>:

/**
 * @brief  初始化可编程定时器
 * 
 */
static void init_pit(void) {
   114db:	55                   	push   %ebp
   114dc:	89 e5                	mov    %esp,%ebp
   114de:	83 ec 18             	sub    $0x18,%esp
    //1.选择定时器的计算器，读取与加载初始值模式，以及工作模式
    outb(PIT_COMMAND_MODE_PORT, PIT_SELECT_COUNTER | PIT_READ_LOAD | PIT_MODE);
   114e1:	6a 36                	push   $0x36
   114e3:	6a 43                	push   $0x43
   114e5:	e8 a8 ff ff ff       	call   11492 <outb>
   114ea:	83 c4 08             	add    $0x8,%esp

    //2.写入16位初始值,即一个中断后期晶体的振荡次数，由确定的加载方式知，先写入低8位，再写入高8位
    uint16_t reload_count = (PIT_OSC_FREQ / 1000) * OS_TICKS_MS;   //确定晶体一个中断周期的震荡次数
   114ed:	66 c7 45 f6 9a 2e    	movw   $0x2e9a,-0xa(%ebp)
    outb(PIT_CHANNEL_DATA_PORT, reload_count & 0xff);
   114f3:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   114f7:	0f b6 c0             	movzbl %al,%eax
   114fa:	50                   	push   %eax
   114fb:	6a 40                	push   $0x40
   114fd:	e8 90 ff ff ff       	call   11492 <outb>
   11502:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL_DATA_PORT, (reload_count >> 8) & 0xff);
   11505:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   11509:	66 c1 e8 08          	shr    $0x8,%ax
   1150d:	0f b6 c0             	movzbl %al,%eax
   11510:	50                   	push   %eax
   11511:	6a 40                	push   $0x40
   11513:	e8 7a ff ff ff       	call   11492 <outb>
   11518:	83 c4 08             	add    $0x8,%esp

    //3.绑定定时器中断的异常处理程序,并开启该中断
    idt_install(IRQ0_TIMER, (idt_handler_t)exception_handler_time);
   1151b:	83 ec 08             	sub    $0x8,%esp
   1151e:	68 7b 02 01 00       	push   $0x1027b
   11523:	6a 20                	push   $0x20
   11525:	e8 7e fb ff ff       	call   110a8 <idt_install>
   1152a:	83 c4 10             	add    $0x10,%esp
    idt_enable(IRQ0_TIMER);
   1152d:	83 ec 0c             	sub    $0xc,%esp
   11530:	6a 20                	push   $0x20
   11532:	e8 b7 fd ff ff       	call   112ee <idt_enable>
   11537:	83 c4 10             	add    $0x10,%esp

}
   1153a:	90                   	nop
   1153b:	c9                   	leave  
   1153c:	c3                   	ret    

0001153d <time_init>:

/**
 * @brief  初始化定时器
 * 
 */
void time_init(void) {
   1153d:	55                   	push   %ebp
   1153e:	89 e5                	mov    %esp,%ebp
   11540:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   11543:	c7 05 60 3b 02 00 00 	movl   $0x0,0x23b60
   1154a:	00 00 00 
    init_pit();
   1154d:	e8 89 ff ff ff       	call   114db <init_pit>
   11552:	90                   	nop
   11553:	c9                   	leave  
   11554:	c3                   	ret    

00011555 <sti>:
static inline void sti(void) { __asm__ __volatile__("sti"); }
   11555:	55                   	push   %ebp
   11556:	89 e5                	mov    %esp,%ebp
   11558:	fb                   	sti    
   11559:	90                   	nop
   1155a:	5d                   	pop    %ebp
   1155b:	c3                   	ret    

0001155c <kernel_init>:

/**
 * @brief  对内核进行初始化操作
 * 
 */
void kernel_init(boot_info_t* boot_info) {
   1155c:	55                   	push   %ebp
   1155d:	89 e5                	mov    %esp,%ebp
   1155f:	83 ec 08             	sub    $0x8,%esp
    //1.判断是否检测到可用内存
    ASSERT(boot_info->ram_region_count != 0);
   11562:	8b 45 08             	mov    0x8(%ebp),%eax
   11565:	8b 40 50             	mov    0x50(%eax),%eax
   11568:	85 c0                	test   %eax,%eax
   1156a:	75 19                	jne    11585 <kernel_init+0x29>
   1156c:	68 5c 2b 01 00       	push   $0x12b5c
   11571:	68 28 2c 01 00       	push   $0x12c28
   11576:	6a 21                	push   $0x21
   11578:	68 80 2b 01 00       	push   $0x12b80
   1157d:	e8 cb 06 00 00       	call   11c4d <pannic>
   11582:	83 c4 10             	add    $0x10,%esp

    //2.初始化日志程序,便于后期调用
    log_init();
   11585:	e8 c4 0f 00 00       	call   1254e <log_init>

    //3.初始化并重新加载GDT表
    gdt_init();
   1158a:	e8 15 f6 ff ff       	call   10ba4 <gdt_init>

    //4.初始化并加载中断描述符表IDT
    idt_init();
   1158f:	e8 e7 fb ff ff       	call   1117b <idt_init>

    //5.初始化定时器的中断处理
    time_init();
   11594:	e8 a4 ff ff ff       	call   1153d <time_init>

    //6.初始化任务管理器
    task_manager_init();
   11599:	e8 a9 f0 ff ff       	call   10647 <task_manager_init>
    //初始化完成后将在汇编里重新加载内核代码段与数据段的选择子，并为内核程序分配栈空间

}
   1159e:	90                   	nop
   1159f:	c9                   	leave  
   115a0:	c3                   	ret    

000115a1 <test_task_1>:
static uint32_t test_task_1_stack[1024]; 
static uint32_t test_task_2_stack[1024]; 
static sem_t sem;


void test_task_1(void) {
   115a1:	55                   	push   %ebp
   115a2:	89 e5                	mov    %esp,%ebp
   115a4:	83 ec 18             	sub    $0x18,%esp

    int count = 0;
   115a7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;) {
        // sem_wait(&sem);
        log_printf("task_1: %d", count++);
   115ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
   115b1:	8d 50 01             	lea    0x1(%eax),%edx
   115b4:	89 55 f4             	mov    %edx,-0xc(%ebp)
   115b7:	83 ec 08             	sub    $0x8,%esp
   115ba:	50                   	push   %eax
   115bb:	68 b5 2b 01 00       	push   $0x12bb5
   115c0:	e8 fe 0f 00 00       	call   125c3 <log_printf>
   115c5:	83 c4 10             	add    $0x10,%esp
        // sem_notify(&sem);
        sys_sleep(1000);
   115c8:	83 ec 0c             	sub    $0xc,%esp
   115cb:	68 e8 03 00 00       	push   $0x3e8
   115d0:	e8 88 f4 ff ff       	call   10a5d <sys_sleep>
   115d5:	83 c4 10             	add    $0x10,%esp
        log_printf("task_1: %d", count++);
   115d8:	eb d4                	jmp    115ae <test_task_1+0xd>

000115da <test_task_2>:
     }
}

void test_task_2(void) {
   115da:	55                   	push   %ebp
   115db:	89 e5                	mov    %esp,%ebp
   115dd:	83 ec 18             	sub    $0x18,%esp

    int count = 0;
   115e0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;) {
        // sem_wait(&sem);
        log_printf("task_2: %d", count++);
   115e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   115ea:	8d 50 01             	lea    0x1(%eax),%edx
   115ed:	89 55 f4             	mov    %edx,-0xc(%ebp)
   115f0:	83 ec 08             	sub    $0x8,%esp
   115f3:	50                   	push   %eax
   115f4:	68 c0 2b 01 00       	push   $0x12bc0
   115f9:	e8 c5 0f 00 00       	call   125c3 <log_printf>
   115fe:	83 c4 10             	add    $0x10,%esp
        // sem_notify(&sem);
        sys_sleep(1000);
   11601:	83 ec 0c             	sub    $0xc,%esp
   11604:	68 e8 03 00 00       	push   $0x3e8
   11609:	e8 4f f4 ff ff       	call   10a5d <sys_sleep>
   1160e:	83 c4 10             	add    $0x10,%esp
        log_printf("task_2: %d", count++);
   11611:	eb d4                	jmp    115e7 <test_task_2+0xd>

00011613 <init_main>:
     }
}



void init_main(void) {
   11613:	55                   	push   %ebp
   11614:	89 e5                	mov    %esp,%ebp
   11616:	83 ec 18             	sub    $0x18,%esp


    
    log_printf("Kernel is running......");
   11619:	83 ec 0c             	sub    $0xc,%esp
   1161c:	68 cb 2b 01 00       	push   $0x12bcb
   11621:	e8 9d 0f 00 00       	call   125c3 <log_printf>
   11626:	83 c4 10             	add    $0x10,%esp
    log_printf("Name: %s, Version: %s", "KbOS", OS_VERSION);
   11629:	83 ec 04             	sub    $0x4,%esp
   1162c:	68 e3 2b 01 00       	push   $0x12be3
   11631:	68 e9 2b 01 00       	push   $0x12be9
   11636:	68 ee 2b 01 00       	push   $0x12bee
   1163b:	e8 83 0f 00 00       	call   125c3 <log_printf>
   11640:	83 c4 10             	add    $0x10,%esp

    //当前任务作为任务管理器启用时的第一个任务
    task_first_init();
   11643:	e8 7a f0 ff ff       	call   106c2 <task_first_init>
    task_init(&task_test_task_1, "test_task_1", (uint32_t)test_task_1, (uint32_t)&test_task_1_stack[1024]);
   11648:	ba 00 4d 02 00       	mov    $0x24d00,%edx
   1164d:	b8 a1 15 01 00       	mov    $0x115a1,%eax
   11652:	52                   	push   %edx
   11653:	50                   	push   %eax
   11654:	68 04 2c 01 00       	push   $0x12c04
   11659:	68 80 3b 02 00       	push   $0x23b80
   1165e:	e8 f6 ee ff ff       	call   10559 <task_init>
   11663:	83 c4 10             	add    $0x10,%esp
    task_init(&task_test_task_2, "test_task_2", (uint32_t)test_task_2, (uint32_t)&test_task_2_stack[1024]);
   11666:	ba 00 5d 02 00       	mov    $0x25d00,%edx
   1166b:	b8 da 15 01 00       	mov    $0x115da,%eax
   11670:	52                   	push   %edx
   11671:	50                   	push   %eax
   11672:	68 10 2c 01 00       	push   $0x12c10
   11677:	68 40 3c 02 00       	push   $0x23c40
   1167c:	e8 d8 ee ff ff       	call   10559 <task_init>
   11681:	83 c4 10             	add    $0x10,%esp


    sem_init(&sem, 0);
   11684:	83 ec 08             	sub    $0x8,%esp
   11687:	6a 00                	push   $0x0
   11689:	68 00 5d 02 00       	push   $0x25d00
   1168e:	e8 b7 00 00 00       	call   1174a <sem_init>
   11693:	83 c4 10             	add    $0x10,%esp
    sti();
   11696:	e8 ba fe ff ff       	call   11555 <sti>

    int count = 0;
   1169b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;) {
        log_printf("first: %d", count++);
   116a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   116a5:	8d 50 01             	lea    0x1(%eax),%edx
   116a8:	89 55 f4             	mov    %edx,-0xc(%ebp)
   116ab:	83 ec 08             	sub    $0x8,%esp
   116ae:	50                   	push   %eax
   116af:	68 1c 2c 01 00       	push   $0x12c1c
   116b4:	e8 0a 0f 00 00       	call   125c3 <log_printf>
   116b9:	83 c4 10             	add    $0x10,%esp
        // sem_notify(&sem);
        sys_sleep(1000);
   116bc:	83 ec 0c             	sub    $0xc,%esp
   116bf:	68 e8 03 00 00       	push   $0x3e8
   116c4:	e8 94 f3 ff ff       	call   10a5d <sys_sleep>
   116c9:	83 c4 10             	add    $0x10,%esp
        log_printf("first: %d", count++);
   116cc:	eb d4                	jmp    116a2 <init_main+0x8f>

000116ce <list_init>:
static inline void list_init(list_t *list) {
   116ce:	55                   	push   %ebp
   116cf:	89 e5                	mov    %esp,%ebp
   116d1:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   116d4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   116d8:	75 19                	jne    116f3 <list_init+0x25>
   116da:	68 34 2c 01 00       	push   $0x12c34
   116df:	68 d8 2c 01 00       	push   $0x12cd8
   116e4:	6a 31                	push   $0x31
   116e6:	68 48 2c 01 00       	push   $0x12c48
   116eb:	e8 5d 05 00 00       	call   11c4d <pannic>
   116f0:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   116f3:	8b 45 08             	mov    0x8(%ebp),%eax
   116f6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   116fd:	8b 45 08             	mov    0x8(%ebp),%eax
   11700:	8b 50 04             	mov    0x4(%eax),%edx
   11703:	8b 45 08             	mov    0x8(%ebp),%eax
   11706:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   11708:	8b 45 08             	mov    0x8(%ebp),%eax
   1170b:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   11712:	90                   	nop
   11713:	c9                   	leave  
   11714:	c3                   	ret    

00011715 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   11715:	55                   	push   %ebp
   11716:	89 e5                	mov    %esp,%ebp
   11718:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1171b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1171f:	75 19                	jne    1173a <list_is_empty+0x25>
   11721:	68 34 2c 01 00       	push   $0x12c34
   11726:	68 e4 2c 01 00       	push   $0x12ce4
   1172b:	6a 38                	push   $0x38
   1172d:	68 48 2c 01 00       	push   $0x12c48
   11732:	e8 16 05 00 00       	call   11c4d <pannic>
   11737:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   1173a:	8b 45 08             	mov    0x8(%ebp),%eax
   1173d:	8b 40 08             	mov    0x8(%eax),%eax
   11740:	85 c0                	test   %eax,%eax
   11742:	0f 94 c0             	sete   %al
   11745:	0f b6 c0             	movzbl %al,%eax
}
   11748:	c9                   	leave  
   11749:	c3                   	ret    

0001174a <sem_init>:
 * @brief  初始化信号量对象
 * 
 * @param sem 信号量对象
 * @param init_count 初始化信号量数量 
 */
void sem_init(sem_t *sem, int init_count) {
   1174a:	55                   	push   %ebp
   1174b:	89 e5                	mov    %esp,%ebp
   1174d:	83 ec 08             	sub    $0x8,%esp
    ASSERT(sem != (sem_t*)0);
   11750:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11754:	75 19                	jne    1176f <sem_init+0x25>
   11756:	68 86 2c 01 00       	push   $0x12c86
   1175b:	68 cc 2c 01 00       	push   $0x12ccc
   11760:	6a 18                	push   $0x18
   11762:	68 98 2c 01 00       	push   $0x12c98
   11767:	e8 e1 04 00 00       	call   11c4d <pannic>
   1176c:	83 c4 10             	add    $0x10,%esp
    sem->count = 0;
   1176f:	8b 45 08             	mov    0x8(%ebp),%eax
   11772:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list_init(&sem->wait_list);
   11778:	8b 45 08             	mov    0x8(%ebp),%eax
   1177b:	83 c0 04             	add    $0x4,%eax
   1177e:	83 ec 0c             	sub    $0xc,%esp
   11781:	50                   	push   %eax
   11782:	e8 47 ff ff ff       	call   116ce <list_init>
   11787:	83 c4 10             	add    $0x10,%esp
}
   1178a:	90                   	nop
   1178b:	c9                   	leave  
   1178c:	c3                   	ret    

0001178d <sem_wait>:
 *         信号量相当于入场券，获取信号量之后才有资格访问信号量保护的资源
 * 
 * @param sem 
 * @param init_count 
 */
void sem_wait(sem_t *sem) {
   1178d:	55                   	push   %ebp
   1178e:	89 e5                	mov    %esp,%ebp
   11790:	83 ec 18             	sub    $0x18,%esp
    
    idt_state_t state = idt_enter_protection();//TODO:加锁
   11793:	e8 d1 fc ff ff       	call   11469 <idt_enter_protection>
   11798:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //1.判断信号量是否还有剩余
    if(sem->count > 0) {//有剩余，直接使用，任务获取信号量继续执行
   1179b:	8b 45 08             	mov    0x8(%ebp),%eax
   1179e:	8b 00                	mov    (%eax),%eax
   117a0:	85 c0                	test   %eax,%eax
   117a2:	7e 0f                	jle    117b3 <sem_wait+0x26>
        --sem->count;   
   117a4:	8b 45 08             	mov    0x8(%ebp),%eax
   117a7:	8b 00                	mov    (%eax),%eax
   117a9:	8d 50 ff             	lea    -0x1(%eax),%edx
   117ac:	8b 45 08             	mov    0x8(%ebp),%eax
   117af:	89 10                	mov    %edx,(%eax)
   117b1:	eb 34                	jmp    117e7 <sem_wait+0x5a>
    } else {//没有剩余，任务进入延时队列等待信号量
        task_t *curr = task_current();
   117b3:	e8 20 f0 ff ff       	call   107d8 <task_current>
   117b8:	89 45 f0             	mov    %eax,-0x10(%ebp)
        //2.将当前任务从就绪队列中取下
        task_set_unready(curr); 
   117bb:	83 ec 0c             	sub    $0xc,%esp
   117be:	ff 75 f0             	push   -0x10(%ebp)
   117c1:	e8 99 ef ff ff       	call   1075f <task_set_unready>
   117c6:	83 c4 10             	add    $0x10,%esp
        //3.将当前任务加入到信号量等待队列
        list_insert_last(&sem->wait_list, &curr->wait_node); 
   117c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   117cc:	8d 50 40             	lea    0x40(%eax),%edx
   117cf:	8b 45 08             	mov    0x8(%ebp),%eax
   117d2:	83 c0 04             	add    $0x4,%eax
   117d5:	83 ec 08             	sub    $0x8,%esp
   117d8:	52                   	push   %edx
   117d9:	50                   	push   %eax
   117da:	e8 73 0a 00 00       	call   12252 <list_insert_last>
   117df:	83 c4 10             	add    $0x10,%esp
        //4.切换任务
        task_switch();
   117e2:	e8 fb ef ff ff       	call   107e2 <task_switch>
    }

    idt_leave_protection(state);//TODO:解锁
   117e7:	83 ec 0c             	sub    $0xc,%esp
   117ea:	ff 75 f4             	push   -0xc(%ebp)
   117ed:	e8 8f fc ff ff       	call   11481 <idt_leave_protection>
   117f2:	83 c4 10             	add    $0x10,%esp
}
   117f5:	90                   	nop
   117f6:	c9                   	leave  
   117f7:	c3                   	ret    

000117f8 <sem_notify>:
 *        等待队列中若有任务则直接获取该信号量，继续执行即访问资源
 *         若没有任务，则信号量对象记录的信号量数量加1，预留给下一次获取
 * 
 * @param sem 
 */
void sem_notify(sem_t *sem) {
   117f8:	55                   	push   %ebp
   117f9:	89 e5                	mov    %esp,%ebp
   117fb:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   117fe:	e8 66 fc ff ff       	call   11469 <idt_enter_protection>
   11803:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if (!list_is_empty(&sem->wait_list)) {
   11806:	8b 45 08             	mov    0x8(%ebp),%eax
   11809:	83 c0 04             	add    $0x4,%eax
   1180c:	83 ec 0c             	sub    $0xc,%esp
   1180f:	50                   	push   %eax
   11810:	e8 00 ff ff ff       	call   11715 <list_is_empty>
   11815:	83 c4 10             	add    $0x10,%esp
   11818:	85 c0                	test   %eax,%eax
   1181a:	75 3b                	jne    11857 <sem_notify+0x5f>
        list_node_t *node = list_remove_first(&sem->wait_list);
   1181c:	8b 45 08             	mov    0x8(%ebp),%eax
   1181f:	83 c0 04             	add    $0x4,%eax
   11822:	83 ec 0c             	sub    $0xc,%esp
   11825:	50                   	push   %eax
   11826:	e8 b6 0a 00 00       	call   122e1 <list_remove_first>
   1182b:	83 c4 10             	add    $0x10,%esp
   1182e:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t *task = list_node_parent(node, task_t, wait_node);
   11831:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11835:	74 08                	je     1183f <sem_notify+0x47>
   11837:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1183a:	83 e8 40             	sub    $0x40,%eax
   1183d:	eb 05                	jmp    11844 <sem_notify+0x4c>
   1183f:	b8 00 00 00 00       	mov    $0x0,%eax
   11844:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   11847:	83 ec 0c             	sub    $0xc,%esp
   1184a:	ff 75 ec             	push   -0x14(%ebp)
   1184d:	e8 c2 ee ff ff       	call   10714 <task_set_ready>
   11852:	83 c4 10             	add    $0x10,%esp
   11855:	eb 0d                	jmp    11864 <sem_notify+0x6c>
    } else {
        sem->count++;
   11857:	8b 45 08             	mov    0x8(%ebp),%eax
   1185a:	8b 00                	mov    (%eax),%eax
   1185c:	8d 50 01             	lea    0x1(%eax),%edx
   1185f:	8b 45 08             	mov    0x8(%ebp),%eax
   11862:	89 10                	mov    %edx,(%eax)
    }

    idt_leave_protection(state);//TODO:解锁
   11864:	83 ec 0c             	sub    $0xc,%esp
   11867:	ff 75 f4             	push   -0xc(%ebp)
   1186a:	e8 12 fc ff ff       	call   11481 <idt_leave_protection>
   1186f:	83 c4 10             	add    $0x10,%esp

}
   11872:	90                   	nop
   11873:	c9                   	leave  
   11874:	c3                   	ret    

00011875 <sem_count>:

int sem_count(sem_t *sem) {
   11875:	55                   	push   %ebp
   11876:	89 e5                	mov    %esp,%ebp
   11878:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   1187b:	e8 e9 fb ff ff       	call   11469 <idt_enter_protection>
   11880:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   11883:	8b 45 08             	mov    0x8(%ebp),%eax
   11886:	8b 00                	mov    (%eax),%eax
   11888:	89 45 f0             	mov    %eax,-0x10(%ebp)
    idt_leave_protection(state);//TODO:解锁
   1188b:	83 ec 0c             	sub    $0xc,%esp
   1188e:	ff 75 f4             	push   -0xc(%ebp)
   11891:	e8 eb fb ff ff       	call   11481 <idt_leave_protection>
   11896:	83 c4 10             	add    $0x10,%esp

    return count;
   11899:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1189c:	c9                   	leave  
   1189d:	c3                   	ret    

0001189e <list_init>:
static inline void list_init(list_t *list) {
   1189e:	55                   	push   %ebp
   1189f:	89 e5                	mov    %esp,%ebp
   118a1:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   118a4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   118a8:	75 19                	jne    118c3 <list_init+0x25>
   118aa:	68 f4 2c 01 00       	push   $0x12cf4
   118af:	68 f8 2d 01 00       	push   $0x12df8
   118b4:	6a 31                	push   $0x31
   118b6:	68 08 2d 01 00       	push   $0x12d08
   118bb:	e8 8d 03 00 00       	call   11c4d <pannic>
   118c0:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   118c3:	8b 45 08             	mov    0x8(%ebp),%eax
   118c6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   118cd:	8b 45 08             	mov    0x8(%ebp),%eax
   118d0:	8b 50 04             	mov    0x4(%eax),%edx
   118d3:	8b 45 08             	mov    0x8(%ebp),%eax
   118d6:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   118d8:	8b 45 08             	mov    0x8(%ebp),%eax
   118db:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   118e2:	90                   	nop
   118e3:	c9                   	leave  
   118e4:	c3                   	ret    

000118e5 <list_get_size>:
static inline int list_get_size(list_t *list) {
   118e5:	55                   	push   %ebp
   118e6:	89 e5                	mov    %esp,%ebp
   118e8:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   118eb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   118ef:	75 19                	jne    1190a <list_get_size+0x25>
   118f1:	68 f4 2c 01 00       	push   $0x12cf4
   118f6:	68 04 2e 01 00       	push   $0x12e04
   118fb:	6a 3e                	push   $0x3e
   118fd:	68 08 2d 01 00       	push   $0x12d08
   11902:	e8 46 03 00 00       	call   11c4d <pannic>
   11907:	83 c4 10             	add    $0x10,%esp
    return list->size;
   1190a:	8b 45 08             	mov    0x8(%ebp),%eax
   1190d:	8b 40 08             	mov    0x8(%eax),%eax
}
   11910:	c9                   	leave  
   11911:	c3                   	ret    

00011912 <list_get_first>:
static inline list_node_t *list_get_first(list_t *list) {
   11912:	55                   	push   %ebp
   11913:	89 e5                	mov    %esp,%ebp
   11915:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11918:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1191c:	75 19                	jne    11937 <list_get_first+0x25>
   1191e:	68 f4 2c 01 00       	push   $0x12cf4
   11923:	68 24 2e 01 00       	push   $0x12e24
   11928:	6a 44                	push   $0x44
   1192a:	68 08 2d 01 00       	push   $0x12d08
   1192f:	e8 19 03 00 00       	call   11c4d <pannic>
   11934:	83 c4 10             	add    $0x10,%esp
    return list->first;
   11937:	8b 45 08             	mov    0x8(%ebp),%eax
   1193a:	8b 00                	mov    (%eax),%eax
}
   1193c:	c9                   	leave  
   1193d:	c3                   	ret    

0001193e <list_get_last>:

static inline list_node_t *list_get_last(list_t *list) {
   1193e:	55                   	push   %ebp
   1193f:	89 e5                	mov    %esp,%ebp
   11941:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11944:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11948:	75 19                	jne    11963 <list_get_last+0x25>
   1194a:	68 f4 2c 01 00       	push   $0x12cf4
   1194f:	68 14 2e 01 00       	push   $0x12e14
   11954:	6a 4a                	push   $0x4a
   11956:	68 08 2d 01 00       	push   $0x12d08
   1195b:	e8 ed 02 00 00       	call   11c4d <pannic>
   11960:	83 c4 10             	add    $0x10,%esp

    return list->last;
   11963:	8b 45 08             	mov    0x8(%ebp),%eax
   11966:	8b 40 04             	mov    0x4(%eax),%eax
}
   11969:	c9                   	leave  
   1196a:	c3                   	ret    

0001196b <list_test>:

#include "tools/list.h"
#include "tools/log.h"
#include "common/types.h"

void list_test(void) {
   1196b:	55                   	push   %ebp
   1196c:	89 e5                	mov    %esp,%ebp
   1196e:	56                   	push   %esi
   1196f:	53                   	push   %ebx
   11970:	83 ec 70             	sub    $0x70,%esp
    list_t list;
    list_node_t nodes[5];

    list_init(&list);
   11973:	83 ec 0c             	sub    $0xc,%esp
   11976:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11979:	50                   	push   %eax
   1197a:	e8 1f ff ff ff       	call   1189e <list_init>
   1197f:	83 c4 10             	add    $0x10,%esp
    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   11982:	83 ec 0c             	sub    $0xc,%esp
   11985:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11988:	50                   	push   %eax
   11989:	e8 57 ff ff ff       	call   118e5 <list_get_size>
   1198e:	83 c4 10             	add    $0x10,%esp
   11991:	89 c6                	mov    %eax,%esi
   11993:	83 ec 0c             	sub    $0xc,%esp
   11996:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11999:	50                   	push   %eax
   1199a:	e8 9f ff ff ff       	call   1193e <list_get_last>
   1199f:	83 c4 10             	add    $0x10,%esp
   119a2:	89 c3                	mov    %eax,%ebx
   119a4:	83 ec 0c             	sub    $0xc,%esp
   119a7:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   119aa:	50                   	push   %eax
   119ab:	e8 62 ff ff ff       	call   11912 <list_get_first>
   119b0:	83 c4 10             	add    $0x10,%esp
   119b3:	56                   	push   %esi
   119b4:	53                   	push   %ebx
   119b5:	50                   	push   %eax
   119b6:	68 48 2d 01 00       	push   $0x12d48
   119bb:	e8 03 0c 00 00       	call   125c3 <log_printf>
   119c0:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_insert_first
    for (int i = 0; i < 5; ++i) {
   119c3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   119ca:	eb 3f                	jmp    11a0b <list_test+0xa0>
        list_node_t *node = nodes + i;
   119cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   119cf:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   119d6:	8d 45 9c             	lea    -0x64(%ebp),%eax
   119d9:	01 d0                	add    %edx,%eax
   119db:	89 45 d0             	mov    %eax,-0x30(%ebp)

        log_printf("insert first to list: %d, 0x%x", i, (uint32_t)node);
   119de:	8b 45 d0             	mov    -0x30(%ebp),%eax
   119e1:	83 ec 04             	sub    $0x4,%esp
   119e4:	50                   	push   %eax
   119e5:	ff 75 f4             	push   -0xc(%ebp)
   119e8:	68 70 2d 01 00       	push   $0x12d70
   119ed:	e8 d1 0b 00 00       	call   125c3 <log_printf>
   119f2:	83 c4 10             	add    $0x10,%esp
        list_insert_first(&list, node);
   119f5:	83 ec 08             	sub    $0x8,%esp
   119f8:	ff 75 d0             	push   -0x30(%ebp)
   119fb:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   119fe:	50                   	push   %eax
   119ff:	e8 c3 07 00 00       	call   121c7 <list_insert_first>
   11a04:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   11a07:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11a0b:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   11a0f:	7e bb                	jle    119cc <list_test+0x61>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   11a11:	83 ec 0c             	sub    $0xc,%esp
   11a14:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11a17:	50                   	push   %eax
   11a18:	e8 c8 fe ff ff       	call   118e5 <list_get_size>
   11a1d:	83 c4 10             	add    $0x10,%esp
   11a20:	89 c6                	mov    %eax,%esi
   11a22:	83 ec 0c             	sub    $0xc,%esp
   11a25:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11a28:	50                   	push   %eax
   11a29:	e8 10 ff ff ff       	call   1193e <list_get_last>
   11a2e:	83 c4 10             	add    $0x10,%esp
   11a31:	89 c3                	mov    %eax,%ebx
   11a33:	83 ec 0c             	sub    $0xc,%esp
   11a36:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11a39:	50                   	push   %eax
   11a3a:	e8 d3 fe ff ff       	call   11912 <list_get_first>
   11a3f:	83 c4 10             	add    $0x10,%esp
   11a42:	56                   	push   %esi
   11a43:	53                   	push   %ebx
   11a44:	50                   	push   %eax
   11a45:	68 48 2d 01 00       	push   $0x12d48
   11a4a:	e8 74 0b 00 00       	call   125c3 <log_printf>
   11a4f:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

   
    //测试list_remove_first
    for (int i = 0; i < 5; ++i) {
   11a52:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11a59:	eb 2d                	jmp    11a88 <list_test+0x11d>
        list_node_t *node = list_remove_first(&list);
   11a5b:	83 ec 0c             	sub    $0xc,%esp
   11a5e:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11a61:	50                   	push   %eax
   11a62:	e8 7a 08 00 00       	call   122e1 <list_remove_first>
   11a67:	83 c4 10             	add    $0x10,%esp
   11a6a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        log_printf("remove first: %d, 0x%x", i, (uint32_t)node);
   11a6d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   11a70:	83 ec 04             	sub    $0x4,%esp
   11a73:	50                   	push   %eax
   11a74:	ff 75 f0             	push   -0x10(%ebp)
   11a77:	68 8f 2d 01 00       	push   $0x12d8f
   11a7c:	e8 42 0b 00 00       	call   125c3 <log_printf>
   11a81:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   11a84:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   11a88:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   11a8c:	7e cd                	jle    11a5b <list_test+0xf0>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   11a8e:	83 ec 0c             	sub    $0xc,%esp
   11a91:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11a94:	50                   	push   %eax
   11a95:	e8 4b fe ff ff       	call   118e5 <list_get_size>
   11a9a:	83 c4 10             	add    $0x10,%esp
   11a9d:	89 c6                	mov    %eax,%esi
   11a9f:	83 ec 0c             	sub    $0xc,%esp
   11aa2:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11aa5:	50                   	push   %eax
   11aa6:	e8 93 fe ff ff       	call   1193e <list_get_last>
   11aab:	83 c4 10             	add    $0x10,%esp
   11aae:	89 c3                	mov    %eax,%ebx
   11ab0:	83 ec 0c             	sub    $0xc,%esp
   11ab3:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11ab6:	50                   	push   %eax
   11ab7:	e8 56 fe ff ff       	call   11912 <list_get_first>
   11abc:	83 c4 10             	add    $0x10,%esp
   11abf:	56                   	push   %esi
   11ac0:	53                   	push   %ebx
   11ac1:	50                   	push   %eax
   11ac2:	68 48 2d 01 00       	push   $0x12d48
   11ac7:	e8 f7 0a 00 00       	call   125c3 <log_printf>
   11acc:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    

    //测试list_insert_last
    for (int i = 0; i < 5; ++i) {
   11acf:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   11ad6:	eb 3f                	jmp    11b17 <list_test+0x1ac>
        list_node_t *node = nodes + i;
   11ad8:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11adb:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   11ae2:	8d 45 9c             	lea    -0x64(%ebp),%eax
   11ae5:	01 d0                	add    %edx,%eax
   11ae7:	89 45 d8             	mov    %eax,-0x28(%ebp)

        log_printf("insert last to list: %d, 0x%x", i, (uint32_t)node);
   11aea:	8b 45 d8             	mov    -0x28(%ebp),%eax
   11aed:	83 ec 04             	sub    $0x4,%esp
   11af0:	50                   	push   %eax
   11af1:	ff 75 ec             	push   -0x14(%ebp)
   11af4:	68 a6 2d 01 00       	push   $0x12da6
   11af9:	e8 c5 0a 00 00       	call   125c3 <log_printf>
   11afe:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&list, node);
   11b01:	83 ec 08             	sub    $0x8,%esp
   11b04:	ff 75 d8             	push   -0x28(%ebp)
   11b07:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11b0a:	50                   	push   %eax
   11b0b:	e8 42 07 00 00       	call   12252 <list_insert_last>
   11b10:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   11b13:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   11b17:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   11b1b:	7e bb                	jle    11ad8 <list_test+0x16d>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   11b1d:	83 ec 0c             	sub    $0xc,%esp
   11b20:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11b23:	50                   	push   %eax
   11b24:	e8 bc fd ff ff       	call   118e5 <list_get_size>
   11b29:	83 c4 10             	add    $0x10,%esp
   11b2c:	89 c6                	mov    %eax,%esi
   11b2e:	83 ec 0c             	sub    $0xc,%esp
   11b31:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11b34:	50                   	push   %eax
   11b35:	e8 04 fe ff ff       	call   1193e <list_get_last>
   11b3a:	83 c4 10             	add    $0x10,%esp
   11b3d:	89 c3                	mov    %eax,%ebx
   11b3f:	83 ec 0c             	sub    $0xc,%esp
   11b42:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11b45:	50                   	push   %eax
   11b46:	e8 c7 fd ff ff       	call   11912 <list_get_first>
   11b4b:	83 c4 10             	add    $0x10,%esp
   11b4e:	56                   	push   %esi
   11b4f:	53                   	push   %ebx
   11b50:	50                   	push   %eax
   11b51:	68 48 2d 01 00       	push   $0x12d48
   11b56:	e8 68 0a 00 00       	call   125c3 <log_printf>
   11b5b:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_remove_last
    for (int i = 0; i < 5; ++i) {
   11b5e:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   11b65:	eb 2d                	jmp    11b94 <list_test+0x229>
        list_node_t *node = list_remove_last(&list);
   11b67:	83 ec 0c             	sub    $0xc,%esp
   11b6a:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11b6d:	50                   	push   %eax
   11b6e:	e8 1f 08 00 00       	call   12392 <list_remove_last>
   11b73:	83 c4 10             	add    $0x10,%esp
   11b76:	89 45 dc             	mov    %eax,-0x24(%ebp)
        log_printf("remove last: %d, 0x%x", i, (uint32_t)node);
   11b79:	8b 45 dc             	mov    -0x24(%ebp),%eax
   11b7c:	83 ec 04             	sub    $0x4,%esp
   11b7f:	50                   	push   %eax
   11b80:	ff 75 e8             	push   -0x18(%ebp)
   11b83:	68 c4 2d 01 00       	push   $0x12dc4
   11b88:	e8 36 0a 00 00       	call   125c3 <log_printf>
   11b8d:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   11b90:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   11b94:	83 7d e8 04          	cmpl   $0x4,-0x18(%ebp)
   11b98:	7e cd                	jle    11b67 <list_test+0x1fc>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   11b9a:	83 ec 0c             	sub    $0xc,%esp
   11b9d:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11ba0:	50                   	push   %eax
   11ba1:	e8 3f fd ff ff       	call   118e5 <list_get_size>
   11ba6:	83 c4 10             	add    $0x10,%esp
   11ba9:	89 c6                	mov    %eax,%esi
   11bab:	83 ec 0c             	sub    $0xc,%esp
   11bae:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11bb1:	50                   	push   %eax
   11bb2:	e8 87 fd ff ff       	call   1193e <list_get_last>
   11bb7:	83 c4 10             	add    $0x10,%esp
   11bba:	89 c3                	mov    %eax,%ebx
   11bbc:	83 ec 0c             	sub    $0xc,%esp
   11bbf:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11bc2:	50                   	push   %eax
   11bc3:	e8 4a fd ff ff       	call   11912 <list_get_first>
   11bc8:	83 c4 10             	add    $0x10,%esp
   11bcb:	56                   	push   %esi
   11bcc:	53                   	push   %ebx
   11bcd:	50                   	push   %eax
   11bce:	68 48 2d 01 00       	push   $0x12d48
   11bd3:	e8 eb 09 00 00       	call   125c3 <log_printf>
   11bd8:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    
    struct type_t {
        int i;
        list_node_t node;
    }v = {0x123456};
   11bdb:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
   11be2:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
   11be9:	c7 45 98 00 00 00 00 	movl   $0x0,-0x68(%ebp)
   11bf0:	c7 45 90 56 34 12 00 	movl   $0x123456,-0x70(%ebp)

    list_node_t *v_node = &v.node;
   11bf7:	8d 45 90             	lea    -0x70(%ebp),%eax
   11bfa:	83 c0 04             	add    $0x4,%eax
   11bfd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    struct type_t *p = list_node_parent(v_node, struct type_t, node);  
   11c00:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   11c04:	74 08                	je     11c0e <list_test+0x2a3>
   11c06:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11c09:	83 e8 04             	sub    $0x4,%eax
   11c0c:	eb 05                	jmp    11c13 <list_test+0x2a8>
   11c0e:	b8 00 00 00 00       	mov    $0x0,%eax
   11c13:	89 45 e0             	mov    %eax,-0x20(%ebp)

    log_printf("v addr = 0x%x", (uint32_t)&v);
   11c16:	8d 45 90             	lea    -0x70(%ebp),%eax
   11c19:	83 ec 08             	sub    $0x8,%esp
   11c1c:	50                   	push   %eax
   11c1d:	68 da 2d 01 00       	push   $0x12dda
   11c22:	e8 9c 09 00 00       	call   125c3 <log_printf>
   11c27:	83 c4 10             	add    $0x10,%esp
    log_printf("p addr = 0x%x", (uint32_t)p);  
   11c2a:	8b 45 e0             	mov    -0x20(%ebp),%eax
   11c2d:	83 ec 08             	sub    $0x8,%esp
   11c30:	50                   	push   %eax
   11c31:	68 e8 2d 01 00       	push   $0x12de8
   11c36:	e8 88 09 00 00       	call   125c3 <log_printf>
   11c3b:	83 c4 10             	add    $0x10,%esp

 }
   11c3e:	90                   	nop
   11c3f:	8d 65 f8             	lea    -0x8(%ebp),%esp
   11c42:	5b                   	pop    %ebx
   11c43:	5e                   	pop    %esi
   11c44:	5d                   	pop    %ebp
   11c45:	c3                   	ret    

00011c46 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   11c46:	55                   	push   %ebp
   11c47:	89 e5                	mov    %esp,%ebp
   11c49:	f4                   	hlt    
   11c4a:	90                   	nop
   11c4b:	5d                   	pop    %ebp
   11c4c:	c3                   	ret    

00011c4d <pannic>:
 * @param file 异常所在文件绝对路径
 * @param line 异常所在行号
 * @param func 异常所在函数名 
 * @param reason 异常的原因
 */
void pannic(const char *file, int line, const char *func, const char *reason) {
   11c4d:	55                   	push   %ebp
   11c4e:	89 e5                	mov    %esp,%ebp
   11c50:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert faild! %s", reason);
   11c53:	83 ec 08             	sub    $0x8,%esp
   11c56:	ff 75 14             	push   0x14(%ebp)
   11c59:	68 33 2e 01 00       	push   $0x12e33
   11c5e:	e8 60 09 00 00       	call   125c3 <log_printf>
   11c63:	83 c4 10             	add    $0x10,%esp
    log_printf("file:\t%s\nline:\t%d\nfunc:\t%s", file, line, func);
   11c66:	ff 75 10             	push   0x10(%ebp)
   11c69:	ff 75 0c             	push   0xc(%ebp)
   11c6c:	ff 75 08             	push   0x8(%ebp)
   11c6f:	68 44 2e 01 00       	push   $0x12e44
   11c74:	e8 4a 09 00 00       	call   125c3 <log_printf>
   11c79:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   11c7c:	e8 c5 ff ff ff       	call   11c46 <hlt>
   11c81:	eb f9                	jmp    11c7c <pannic+0x2f>

00011c83 <kernel_strcpy>:
 * @brief  拷贝字符串
 * 
 * @param dest 目标字符串
 * @param src  源字符串
 */
void kernel_strcpy(char *dest, const char *src) {
   11c83:	55                   	push   %ebp
   11c84:	89 e5                	mov    %esp,%ebp
    //1.判断是否为NULL
    if (!dest || !src) return;
   11c86:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11c8a:	74 3b                	je     11cc7 <kernel_strcpy+0x44>
   11c8c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11c90:	74 35                	je     11cc7 <kernel_strcpy+0x44>

    //2.拷贝 src '\0' 以前的部分到 dest中
    //TODO:完成（访问未初始化的内存）的异常中断后就只判断src是否读到'\0'
    while (*dest && *src) {
   11c92:	eb 17                	jmp    11cab <kernel_strcpy+0x28>
        *(dest++) = *(src++);
   11c94:	8b 55 0c             	mov    0xc(%ebp),%edx
   11c97:	8d 42 01             	lea    0x1(%edx),%eax
   11c9a:	89 45 0c             	mov    %eax,0xc(%ebp)
   11c9d:	8b 45 08             	mov    0x8(%ebp),%eax
   11ca0:	8d 48 01             	lea    0x1(%eax),%ecx
   11ca3:	89 4d 08             	mov    %ecx,0x8(%ebp)
   11ca6:	0f b6 12             	movzbl (%edx),%edx
   11ca9:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   11cab:	8b 45 08             	mov    0x8(%ebp),%eax
   11cae:	0f b6 00             	movzbl (%eax),%eax
   11cb1:	84 c0                	test   %al,%al
   11cb3:	74 0a                	je     11cbf <kernel_strcpy+0x3c>
   11cb5:	8b 45 0c             	mov    0xc(%ebp),%eax
   11cb8:	0f b6 00             	movzbl (%eax),%eax
   11cbb:	84 c0                	test   %al,%al
   11cbd:	75 d5                	jne    11c94 <kernel_strcpy+0x11>
    }

    //3.添加结束符
    *dest = '\0';
   11cbf:	8b 45 08             	mov    0x8(%ebp),%eax
   11cc2:	c6 00 00             	movb   $0x0,(%eax)
   11cc5:	eb 01                	jmp    11cc8 <kernel_strcpy+0x45>
    if (!dest || !src) return;
   11cc7:	90                   	nop
    
}
   11cc8:	5d                   	pop    %ebp
   11cc9:	c3                   	ret    

00011cca <kernel_strncpy>:
 * 
 * @param dest 目的字符串
 * @param src 源字符串
 * @param size 拷贝字符串的长度，包含'\0'
 */
void kernel_strncpy(char* dest, const char *src, int size) {
   11cca:	55                   	push   %ebp
   11ccb:	89 e5                	mov    %esp,%ebp
    //1.判断是否需要拷贝
    if (!dest || !src || !size) return;
   11ccd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11cd1:	74 45                	je     11d18 <kernel_strncpy+0x4e>
   11cd3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11cd7:	74 3f                	je     11d18 <kernel_strncpy+0x4e>
   11cd9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11cdd:	74 39                	je     11d18 <kernel_strncpy+0x4e>

    //2.size的大小包含了'\0'，所以要预留一个空间给'\0'，只能拷贝 size - 1个字符
    while ((size-- > 1) && (*src)) {
   11cdf:	eb 17                	jmp    11cf8 <kernel_strncpy+0x2e>
        *(dest++) = *(src++);
   11ce1:	8b 55 0c             	mov    0xc(%ebp),%edx
   11ce4:	8d 42 01             	lea    0x1(%edx),%eax
   11ce7:	89 45 0c             	mov    %eax,0xc(%ebp)
   11cea:	8b 45 08             	mov    0x8(%ebp),%eax
   11ced:	8d 48 01             	lea    0x1(%eax),%ecx
   11cf0:	89 4d 08             	mov    %ecx,0x8(%ebp)
   11cf3:	0f b6 12             	movzbl (%edx),%edx
   11cf6:	88 10                	mov    %dl,(%eax)
    while ((size-- > 1) && (*src)) {
   11cf8:	8b 45 10             	mov    0x10(%ebp),%eax
   11cfb:	8d 50 ff             	lea    -0x1(%eax),%edx
   11cfe:	89 55 10             	mov    %edx,0x10(%ebp)
   11d01:	83 f8 01             	cmp    $0x1,%eax
   11d04:	7e 0a                	jle    11d10 <kernel_strncpy+0x46>
   11d06:	8b 45 0c             	mov    0xc(%ebp),%eax
   11d09:	0f b6 00             	movzbl (%eax),%eax
   11d0c:	84 c0                	test   %al,%al
   11d0e:	75 d1                	jne    11ce1 <kernel_strncpy+0x17>
    }

    //3.添加结束符
    *dest = '\0';
   11d10:	8b 45 08             	mov    0x8(%ebp),%eax
   11d13:	c6 00 00             	movb   $0x0,(%eax)
   11d16:	eb 01                	jmp    11d19 <kernel_strncpy+0x4f>
    if (!dest || !src || !size) return;
   11d18:	90                   	nop
}
   11d19:	5d                   	pop    %ebp
   11d1a:	c3                   	ret    

00011d1b <kernel_strncmp>:
 * @param s2 字符串2
 * @param size 比较前比较的子串长度，从下标0开始到(size - 1)
 * 
 * @return int ==: 0, > : 1, < : -1
 */
int kernel_strncmp(const char *s1, const char *s2, int size) {
   11d1b:	55                   	push   %ebp
   11d1c:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) return 0;
   11d1e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11d22:	74 06                	je     11d2a <kernel_strncmp+0xf>
   11d24:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11d28:	75 0f                	jne    11d39 <kernel_strncmp+0x1e>
   11d2a:	b8 00 00 00 00       	mov    $0x0,%eax
   11d2f:	eb 52                	jmp    11d83 <kernel_strncmp+0x68>

    while (*s1 && *s2 && --size && *s1 == *s2 ) {
        ++s1;
   11d31:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        ++s2;        
   11d35:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && --size && *s1 == *s2 ) {
   11d39:	8b 45 08             	mov    0x8(%ebp),%eax
   11d3c:	0f b6 00             	movzbl (%eax),%eax
   11d3f:	84 c0                	test   %al,%al
   11d41:	74 24                	je     11d67 <kernel_strncmp+0x4c>
   11d43:	8b 45 0c             	mov    0xc(%ebp),%eax
   11d46:	0f b6 00             	movzbl (%eax),%eax
   11d49:	84 c0                	test   %al,%al
   11d4b:	74 1a                	je     11d67 <kernel_strncmp+0x4c>
   11d4d:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   11d51:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11d55:	74 10                	je     11d67 <kernel_strncmp+0x4c>
   11d57:	8b 45 08             	mov    0x8(%ebp),%eax
   11d5a:	0f b6 10             	movzbl (%eax),%edx
   11d5d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11d60:	0f b6 00             	movzbl (%eax),%eax
   11d63:	38 c2                	cmp    %al,%dl
   11d65:	74 ca                	je     11d31 <kernel_strncmp+0x16>
    }

    if (*s1 > *s2) return 1;
   11d67:	8b 45 08             	mov    0x8(%ebp),%eax
   11d6a:	0f b6 10             	movzbl (%eax),%edx
   11d6d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11d70:	0f b6 00             	movzbl (%eax),%eax
   11d73:	38 c2                	cmp    %al,%dl
   11d75:	7e 07                	jle    11d7e <kernel_strncmp+0x63>
   11d77:	b8 01 00 00 00       	mov    $0x1,%eax
   11d7c:	eb 05                	jmp    11d83 <kernel_strncmp+0x68>
    else if (*s1 < *s1) return -1;
    else return 0;
   11d7e:	b8 00 00 00 00       	mov    $0x0,%eax
    
}
   11d83:	5d                   	pop    %ebp
   11d84:	c3                   	ret    

00011d85 <kernel_strlen>:
 * @brief  获取字符串str的长度
 * 
 * @param str 
 * @return int 
 */
int kernel_strlen(const char *str) {
   11d85:	55                   	push   %ebp
   11d86:	89 e5                	mov    %esp,%ebp
   11d88:	83 ec 10             	sub    $0x10,%esp
    if (!str) return 0;
   11d8b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11d8f:	75 07                	jne    11d98 <kernel_strlen+0x13>
   11d91:	b8 00 00 00 00       	mov    $0x0,%eax
   11d96:	eb 20                	jmp    11db8 <kernel_strlen+0x33>

    int len = 0;
   11d98:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*(str++)) len++;
   11d9f:	eb 04                	jmp    11da5 <kernel_strlen+0x20>
   11da1:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   11da5:	8b 45 08             	mov    0x8(%ebp),%eax
   11da8:	8d 50 01             	lea    0x1(%eax),%edx
   11dab:	89 55 08             	mov    %edx,0x8(%ebp)
   11dae:	0f b6 00             	movzbl (%eax),%eax
   11db1:	84 c0                	test   %al,%al
   11db3:	75 ec                	jne    11da1 <kernel_strlen+0x1c>

    return len;
   11db5:	8b 45 fc             	mov    -0x4(%ebp),%eax
    
}
   11db8:	c9                   	leave  
   11db9:	c3                   	ret    

00011dba <kernel_memcpy>:
 * 
 * @param dest 目的内存的起始地址
 * @param src 原内存的起始地址
 * @param size 复制的内存字节大小
 */
void kernel_memcpy(void *dest, const void *src, int size) {
   11dba:	55                   	push   %ebp
   11dbb:	89 e5                	mov    %esp,%ebp
   11dbd:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) return;
   11dc0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11dc4:	74 40                	je     11e06 <kernel_memcpy+0x4c>
   11dc6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11dca:	74 3a                	je     11e06 <kernel_memcpy+0x4c>
   11dcc:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11dd0:	74 34                	je     11e06 <kernel_memcpy+0x4c>

    uint8_t *d = (uint8_t*)dest;
   11dd2:	8b 45 08             	mov    0x8(%ebp),%eax
   11dd5:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *s = (uint8_t*)src;
   11dd8:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ddb:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (size--) {
   11dde:	eb 17                	jmp    11df7 <kernel_memcpy+0x3d>
        *(d++) = *(s++);
   11de0:	8b 55 f8             	mov    -0x8(%ebp),%edx
   11de3:	8d 42 01             	lea    0x1(%edx),%eax
   11de6:	89 45 f8             	mov    %eax,-0x8(%ebp)
   11de9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11dec:	8d 48 01             	lea    0x1(%eax),%ecx
   11def:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   11df2:	0f b6 12             	movzbl (%edx),%edx
   11df5:	88 10                	mov    %dl,(%eax)
    while (size--) {
   11df7:	8b 45 10             	mov    0x10(%ebp),%eax
   11dfa:	8d 50 ff             	lea    -0x1(%eax),%edx
   11dfd:	89 55 10             	mov    %edx,0x10(%ebp)
   11e00:	85 c0                	test   %eax,%eax
   11e02:	75 dc                	jne    11de0 <kernel_memcpy+0x26>
   11e04:	eb 01                	jmp    11e07 <kernel_memcpy+0x4d>
    if (!dest || !src || !size) return;
   11e06:	90                   	nop
    }
    
}
   11e07:	c9                   	leave  
   11e08:	c3                   	ret    

00011e09 <kernel_memset>:
 * 
 * @param dest 区域起始地址
 * @param v 每个字节的值
 * @param size 赋值的内存的大小
 */
void kernel_memset(void *dest, uint8_t v, int size) {
   11e09:	55                   	push   %ebp
   11e0a:	89 e5                	mov    %esp,%ebp
   11e0c:	83 ec 14             	sub    $0x14,%esp
   11e0f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11e12:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size) return;
   11e15:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11e19:	74 2c                	je     11e47 <kernel_memset+0x3e>
   11e1b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11e1f:	74 26                	je     11e47 <kernel_memset+0x3e>

    uint8_t *d = (uint8_t*)dest;
   11e21:	8b 45 08             	mov    0x8(%ebp),%eax
   11e24:	89 45 fc             	mov    %eax,-0x4(%ebp)
    
    while (size--) {
   11e27:	eb 0f                	jmp    11e38 <kernel_memset+0x2f>
        *(d++) = v;
   11e29:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11e2c:	8d 50 01             	lea    0x1(%eax),%edx
   11e2f:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11e32:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   11e36:	88 10                	mov    %dl,(%eax)
    while (size--) {
   11e38:	8b 45 10             	mov    0x10(%ebp),%eax
   11e3b:	8d 50 ff             	lea    -0x1(%eax),%edx
   11e3e:	89 55 10             	mov    %edx,0x10(%ebp)
   11e41:	85 c0                	test   %eax,%eax
   11e43:	75 e4                	jne    11e29 <kernel_memset+0x20>
   11e45:	eb 01                	jmp    11e48 <kernel_memset+0x3f>
    if (!dest || !size) return;
   11e47:	90                   	nop
    }
    
}
   11e48:	c9                   	leave  
   11e49:	c3                   	ret    

00011e4a <kernel_memcmp>:
 * @param d1 区域1的起始地址
 * @param d2 区域2的起始地址
 * @param size 比较的字节数量
 * @return int ==:0, >:1, <:-1
 */
int kernel_memcmp(const void *dest1, const void *dest2, int size) {
   11e4a:	55                   	push   %ebp
   11e4b:	89 e5                	mov    %esp,%ebp
   11e4d:	83 ec 10             	sub    $0x10,%esp
    if (!dest1 || !dest2 || !size) return 0;
   11e50:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11e54:	74 0c                	je     11e62 <kernel_memcmp+0x18>
   11e56:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11e5a:	74 06                	je     11e62 <kernel_memcmp+0x18>
   11e5c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11e60:	75 07                	jne    11e69 <kernel_memcmp+0x1f>
   11e62:	b8 00 00 00 00       	mov    $0x0,%eax
   11e67:	eb 63                	jmp    11ecc <kernel_memcmp+0x82>

    uint8_t *d1 = (uint8_t*)dest1;
   11e69:	8b 45 08             	mov    0x8(%ebp),%eax
   11e6c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d2 = (uint8_t*)dest2;
   11e6f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11e72:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (--size && *d1 == *d2) {
   11e75:	eb 08                	jmp    11e7f <kernel_memcmp+0x35>
        d1++;
   11e77:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
        d2++;
   11e7b:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (--size && *d1 == *d2) {
   11e7f:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   11e83:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11e87:	74 10                	je     11e99 <kernel_memcmp+0x4f>
   11e89:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11e8c:	0f b6 10             	movzbl (%eax),%edx
   11e8f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11e92:	0f b6 00             	movzbl (%eax),%eax
   11e95:	38 c2                	cmp    %al,%dl
   11e97:	74 de                	je     11e77 <kernel_memcmp+0x2d>
    }

    if (*d1 > *d2) return 1;
   11e99:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11e9c:	0f b6 10             	movzbl (%eax),%edx
   11e9f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11ea2:	0f b6 00             	movzbl (%eax),%eax
   11ea5:	38 c2                	cmp    %al,%dl
   11ea7:	76 07                	jbe    11eb0 <kernel_memcmp+0x66>
   11ea9:	b8 01 00 00 00       	mov    $0x1,%eax
   11eae:	eb 1c                	jmp    11ecc <kernel_memcmp+0x82>
    else if (*d1 < *d2) return -1;
   11eb0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11eb3:	0f b6 10             	movzbl (%eax),%edx
   11eb6:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11eb9:	0f b6 00             	movzbl (%eax),%eax
   11ebc:	38 c2                	cmp    %al,%dl
   11ebe:	73 07                	jae    11ec7 <kernel_memcmp+0x7d>
   11ec0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11ec5:	eb 05                	jmp    11ecc <kernel_memcmp+0x82>
    else return 0;
   11ec7:	b8 00 00 00 00       	mov    $0x0,%eax

}
   11ecc:	c9                   	leave  
   11ecd:	c3                   	ret    

00011ece <kernel_sprintf>:



void kernel_sprintf(char *buf, const char *formate, ...) {
   11ece:	55                   	push   %ebp
   11ecf:	89 e5                	mov    %esp,%ebp
   11ed1:	83 ec 18             	sub    $0x18,%esp
    //获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   11ed4:	8d 45 10             	lea    0x10(%ebp),%eax
   11ed7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_vsprintf(buf, formate, args);
   11eda:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11edd:	83 ec 04             	sub    $0x4,%esp
   11ee0:	50                   	push   %eax
   11ee1:	ff 75 0c             	push   0xc(%ebp)
   11ee4:	ff 75 08             	push   0x8(%ebp)
   11ee7:	e8 06 00 00 00       	call   11ef2 <kernel_vsprintf>
   11eec:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   11eef:	90                   	nop
   11ef0:	c9                   	leave  
   11ef1:	c3                   	ret    

00011ef2 <kernel_vsprintf>:
 * 
 * @param buf 
 * @param formate 
 * @param args 
 */
void kernel_vsprintf(char *buf, const char *formate, va_list args) {
   11ef2:	55                   	push   %ebp
   11ef3:	89 e5                	mov    %esp,%ebp
   11ef5:	83 ec 28             	sub    $0x28,%esp
    //定义状态机，包含两种状态
    enum {NORMAL, READ_FMT} state = NORMAL;
   11ef8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    
    char *curr = buf;
   11eff:	8b 45 08             	mov    0x8(%ebp),%eax
   11f02:	89 45 f0             	mov    %eax,-0x10(%ebp)

    char ch;

    while ((ch = *(formate++)) != '\0') {
   11f05:	e9 68 01 00 00       	jmp    12072 <kernel_vsprintf+0x180>
        switch (state) {
   11f0a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11f0e:	74 0b                	je     11f1b <kernel_vsprintf+0x29>
   11f10:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   11f14:	74 2b                	je     11f41 <kernel_vsprintf+0x4f>
   11f16:	e9 56 01 00 00       	jmp    12071 <kernel_vsprintf+0x17f>
        case NORMAL: 
            if (ch == '%') state = READ_FMT;
   11f1b:	80 7d e7 25          	cmpb   $0x25,-0x19(%ebp)
   11f1f:	75 0c                	jne    11f2d <kernel_vsprintf+0x3b>
   11f21:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   11f28:	e9 45 01 00 00       	jmp    12072 <kernel_vsprintf+0x180>
            else *(curr++) = ch;
   11f2d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11f30:	8d 50 01             	lea    0x1(%eax),%edx
   11f33:	89 55 f0             	mov    %edx,-0x10(%ebp)
   11f36:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   11f3a:	88 10                	mov    %dl,(%eax)
            break;
   11f3c:	e9 31 01 00 00       	jmp    12072 <kernel_vsprintf+0x180>
        case READ_FMT:
            if (ch == 's') {
   11f41:	80 7d e7 73          	cmpb   $0x73,-0x19(%ebp)
   11f45:	75 47                	jne    11f8e <kernel_vsprintf+0x9c>
                const char * str = va_arg(args, char *);
   11f47:	8b 45 10             	mov    0x10(%ebp),%eax
   11f4a:	8d 50 04             	lea    0x4(%eax),%edx
   11f4d:	89 55 10             	mov    %edx,0x10(%ebp)
   11f50:	8b 00                	mov    (%eax),%eax
   11f52:	89 45 ec             	mov    %eax,-0x14(%ebp)
                int len = kernel_strlen(str);
   11f55:	ff 75 ec             	push   -0x14(%ebp)
   11f58:	e8 28 fe ff ff       	call   11d85 <kernel_strlen>
   11f5d:	83 c4 04             	add    $0x4,%esp
   11f60:	89 45 e8             	mov    %eax,-0x18(%ebp)
                while (len--) {
   11f63:	eb 17                	jmp    11f7c <kernel_vsprintf+0x8a>
                    *(curr++) = *(str++);
   11f65:	8b 55 ec             	mov    -0x14(%ebp),%edx
   11f68:	8d 42 01             	lea    0x1(%edx),%eax
   11f6b:	89 45 ec             	mov    %eax,-0x14(%ebp)
   11f6e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11f71:	8d 48 01             	lea    0x1(%eax),%ecx
   11f74:	89 4d f0             	mov    %ecx,-0x10(%ebp)
   11f77:	0f b6 12             	movzbl (%edx),%edx
   11f7a:	88 10                	mov    %dl,(%eax)
                while (len--) {
   11f7c:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11f7f:	8d 50 ff             	lea    -0x1(%eax),%edx
   11f82:	89 55 e8             	mov    %edx,-0x18(%ebp)
   11f85:	85 c0                	test   %eax,%eax
   11f87:	75 dc                	jne    11f65 <kernel_vsprintf+0x73>
   11f89:	e9 da 00 00 00       	jmp    12068 <kernel_vsprintf+0x176>
                }
            } else if (ch == 'd') {
   11f8e:	80 7d e7 64          	cmpb   $0x64,-0x19(%ebp)
   11f92:	75 37                	jne    11fcb <kernel_vsprintf+0xd9>
                const int num = va_arg(args, int);
   11f94:	8b 45 10             	mov    0x10(%ebp),%eax
   11f97:	8d 50 04             	lea    0x4(%eax),%edx
   11f9a:	89 55 10             	mov    %edx,0x10(%ebp)
   11f9d:	8b 00                	mov    (%eax),%eax
   11f9f:	89 45 d8             	mov    %eax,-0x28(%ebp)
                kernel_itoa(curr, num, 10);
   11fa2:	83 ec 04             	sub    $0x4,%esp
   11fa5:	6a 0a                	push   $0xa
   11fa7:	ff 75 d8             	push   -0x28(%ebp)
   11faa:	ff 75 f0             	push   -0x10(%ebp)
   11fad:	e8 dd 00 00 00       	call   1208f <kernel_itoa>
   11fb2:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr);   
   11fb5:	83 ec 0c             	sub    $0xc,%esp
   11fb8:	ff 75 f0             	push   -0x10(%ebp)
   11fbb:	e8 c5 fd ff ff       	call   11d85 <kernel_strlen>
   11fc0:	83 c4 10             	add    $0x10,%esp
   11fc3:	01 45 f0             	add    %eax,-0x10(%ebp)
   11fc6:	e9 9d 00 00 00       	jmp    12068 <kernel_vsprintf+0x176>
            } else if (ch == 'x' || ch == 'X') {
   11fcb:	80 7d e7 78          	cmpb   $0x78,-0x19(%ebp)
   11fcf:	74 06                	je     11fd7 <kernel_vsprintf+0xe5>
   11fd1:	80 7d e7 58          	cmpb   $0x58,-0x19(%ebp)
   11fd5:	75 34                	jne    1200b <kernel_vsprintf+0x119>
                const int num = va_arg(args, int);
   11fd7:	8b 45 10             	mov    0x10(%ebp),%eax
   11fda:	8d 50 04             	lea    0x4(%eax),%edx
   11fdd:	89 55 10             	mov    %edx,0x10(%ebp)
   11fe0:	8b 00                	mov    (%eax),%eax
   11fe2:	89 45 dc             	mov    %eax,-0x24(%ebp)
                kernel_itoa(curr, num, 16);
   11fe5:	83 ec 04             	sub    $0x4,%esp
   11fe8:	6a 10                	push   $0x10
   11fea:	ff 75 dc             	push   -0x24(%ebp)
   11fed:	ff 75 f0             	push   -0x10(%ebp)
   11ff0:	e8 9a 00 00 00       	call   1208f <kernel_itoa>
   11ff5:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr); 
   11ff8:	83 ec 0c             	sub    $0xc,%esp
   11ffb:	ff 75 f0             	push   -0x10(%ebp)
   11ffe:	e8 82 fd ff ff       	call   11d85 <kernel_strlen>
   12003:	83 c4 10             	add    $0x10,%esp
   12006:	01 45 f0             	add    %eax,-0x10(%ebp)
            } else if (ch == 'x' || ch == 'X') {
   12009:	eb 5d                	jmp    12068 <kernel_vsprintf+0x176>
            } else if (ch == 'b') {
   1200b:	80 7d e7 62          	cmpb   $0x62,-0x19(%ebp)
   1200f:	75 34                	jne    12045 <kernel_vsprintf+0x153>
                 const int num = va_arg(args, int);
   12011:	8b 45 10             	mov    0x10(%ebp),%eax
   12014:	8d 50 04             	lea    0x4(%eax),%edx
   12017:	89 55 10             	mov    %edx,0x10(%ebp)
   1201a:	8b 00                	mov    (%eax),%eax
   1201c:	89 45 e0             	mov    %eax,-0x20(%ebp)
                kernel_itoa(curr, num, 2);
   1201f:	83 ec 04             	sub    $0x4,%esp
   12022:	6a 02                	push   $0x2
   12024:	ff 75 e0             	push   -0x20(%ebp)
   12027:	ff 75 f0             	push   -0x10(%ebp)
   1202a:	e8 60 00 00 00       	call   1208f <kernel_itoa>
   1202f:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr); 
   12032:	83 ec 0c             	sub    $0xc,%esp
   12035:	ff 75 f0             	push   -0x10(%ebp)
   12038:	e8 48 fd ff ff       	call   11d85 <kernel_strlen>
   1203d:	83 c4 10             	add    $0x10,%esp
   12040:	01 45 f0             	add    %eax,-0x10(%ebp)
   12043:	eb 23                	jmp    12068 <kernel_vsprintf+0x176>
            } else if (ch == 'c') {
   12045:	80 7d e7 63          	cmpb   $0x63,-0x19(%ebp)
   12049:	75 1d                	jne    12068 <kernel_vsprintf+0x176>
                char c = va_arg(args, int);
   1204b:	8b 45 10             	mov    0x10(%ebp),%eax
   1204e:	8d 50 04             	lea    0x4(%eax),%edx
   12051:	89 55 10             	mov    %edx,0x10(%ebp)
   12054:	8b 00                	mov    (%eax),%eax
   12056:	88 45 e6             	mov    %al,-0x1a(%ebp)
                *(curr++) = c;
   12059:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1205c:	8d 50 01             	lea    0x1(%eax),%edx
   1205f:	89 55 f0             	mov    %edx,-0x10(%ebp)
   12062:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   12066:	88 10                	mov    %dl,(%eax)
            }
            state = NORMAL;
   12068:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            break;
   1206f:	eb 01                	jmp    12072 <kernel_vsprintf+0x180>
        default:
            break;
   12071:	90                   	nop
    while ((ch = *(formate++)) != '\0') {
   12072:	8b 45 0c             	mov    0xc(%ebp),%eax
   12075:	8d 50 01             	lea    0x1(%eax),%edx
   12078:	89 55 0c             	mov    %edx,0xc(%ebp)
   1207b:	0f b6 00             	movzbl (%eax),%eax
   1207e:	88 45 e7             	mov    %al,-0x19(%ebp)
   12081:	80 7d e7 00          	cmpb   $0x0,-0x19(%ebp)
   12085:	0f 85 7f fe ff ff    	jne    11f0a <kernel_vsprintf+0x18>
        }
    }
    

}
   1208b:	90                   	nop
   1208c:	90                   	nop
   1208d:	c9                   	leave  
   1208e:	c3                   	ret    

0001208f <kernel_itoa>:
 * 
 * @param buf 缓冲区
 * @param num 整数
 * @param base 转换的进制规则
 */
void kernel_itoa(char *buf, int num, int base) {
   1208f:	55                   	push   %ebp
   12090:	89 e5                	mov    %esp,%ebp
   12092:	81 ec 90 00 00 00    	sub    $0x90,%esp
    char * p = buf;
   12098:	8b 45 08             	mov    0x8(%ebp),%eax
   1209b:	89 45 fc             	mov    %eax,-0x4(%ebp)

    if (base != 2 && base != 8 && base != 10 && base != 16) {
   1209e:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   120a2:	74 1d                	je     120c1 <kernel_itoa+0x32>
   120a4:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   120a8:	74 17                	je     120c1 <kernel_itoa+0x32>
   120aa:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   120ae:	74 11                	je     120c1 <kernel_itoa+0x32>
   120b0:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   120b4:	74 0b                	je     120c1 <kernel_itoa+0x32>
        *buf = '\0';
   120b6:	8b 45 08             	mov    0x8(%ebp),%eax
   120b9:	c6 00 00             	movb   $0x0,(%eax)
        return;
   120bc:	e9 a2 00 00 00       	jmp    12163 <kernel_itoa+0xd4>
    }

    if(num < 0)  {
   120c1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   120c5:	79 11                	jns    120d8 <kernel_itoa+0x49>
        *(p++) = '-';
   120c7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   120ca:	8d 50 01             	lea    0x1(%eax),%edx
   120cd:	89 55 fc             	mov    %edx,-0x4(%ebp)
   120d0:	c6 00 2d             	movb   $0x2d,(%eax)
        num = -num;
   120d3:	f7 5d 0c             	negl   0xc(%ebp)
   120d6:	eb 1a                	jmp    120f2 <kernel_itoa+0x63>
    } else if (num == 0) {
   120d8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   120dc:	75 14                	jne    120f2 <kernel_itoa+0x63>
        *(p++) = '0';
   120de:	8b 45 fc             	mov    -0x4(%ebp),%eax
   120e1:	8d 50 01             	lea    0x1(%eax),%edx
   120e4:	89 55 fc             	mov    %edx,-0x4(%ebp)
   120e7:	c6 00 30             	movb   $0x30,(%eax)
        *p = '\0';
   120ea:	8b 45 fc             	mov    -0x4(%ebp),%eax
   120ed:	c6 00 00             	movb   $0x0,(%eax)
        return;
   120f0:	eb 71                	jmp    12163 <kernel_itoa+0xd4>
    }
    

    static const char *num_to_char = {"0123456789abcdef"};
    char arr[128];
    int len = 0;
   120f2:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (num > 0) {
   120f9:	eb 2e                	jmp    12129 <kernel_itoa+0x9a>
        arr[len++] = num_to_char[num % base];
   120fb:	8b 0d bc 2f 01 00    	mov    0x12fbc,%ecx
   12101:	8b 45 0c             	mov    0xc(%ebp),%eax
   12104:	99                   	cltd   
   12105:	f7 7d 10             	idivl  0x10(%ebp)
   12108:	89 d0                	mov    %edx,%eax
   1210a:	01 c1                	add    %eax,%ecx
   1210c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1210f:	8d 50 01             	lea    0x1(%eax),%edx
   12112:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12115:	0f b6 11             	movzbl (%ecx),%edx
   12118:	88 94 05 74 ff ff ff 	mov    %dl,-0x8c(%ebp,%eax,1)
        num /= base;
   1211f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12122:	99                   	cltd   
   12123:	f7 7d 10             	idivl  0x10(%ebp)
   12126:	89 45 0c             	mov    %eax,0xc(%ebp)
    while (num > 0) {
   12129:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1212d:	7f cc                	jg     120fb <kernel_itoa+0x6c>
    }

    for (int i = len - 1; i >= 0; --i) {
   1212f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12132:	83 e8 01             	sub    $0x1,%eax
   12135:	89 45 f4             	mov    %eax,-0xc(%ebp)
   12138:	eb 1d                	jmp    12157 <kernel_itoa+0xc8>
            *(p++) = arr[i];
   1213a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1213d:	8d 50 01             	lea    0x1(%eax),%edx
   12140:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12143:	8d 8d 74 ff ff ff    	lea    -0x8c(%ebp),%ecx
   12149:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1214c:	01 ca                	add    %ecx,%edx
   1214e:	0f b6 12             	movzbl (%edx),%edx
   12151:	88 10                	mov    %dl,(%eax)
    for (int i = len - 1; i >= 0; --i) {
   12153:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
   12157:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1215b:	79 dd                	jns    1213a <kernel_itoa+0xab>
    }
    *p = '\0';
   1215d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12160:	c6 00 00             	movb   $0x0,(%eax)
   12163:	c9                   	leave  
   12164:	c3                   	ret    

00012165 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   12165:	55                   	push   %ebp
   12166:	89 e5                	mov    %esp,%ebp
   12168:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1216b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1216f:	75 19                	jne    1218a <list_is_empty+0x25>
   12171:	68 70 2e 01 00       	push   $0x12e70
   12176:	68 54 2f 01 00       	push   $0x12f54
   1217b:	6a 38                	push   $0x38
   1217d:	68 84 2e 01 00       	push   $0x12e84
   12182:	e8 c6 fa ff ff       	call   11c4d <pannic>
   12187:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   1218a:	8b 45 08             	mov    0x8(%ebp),%eax
   1218d:	8b 40 08             	mov    0x8(%eax),%eax
   12190:	85 c0                	test   %eax,%eax
   12192:	0f 94 c0             	sete   %al
   12195:	0f b6 c0             	movzbl %al,%eax
}
   12198:	c9                   	leave  
   12199:	c3                   	ret    

0001219a <list_get_size>:
static inline int list_get_size(list_t *list) {
   1219a:	55                   	push   %ebp
   1219b:	89 e5                	mov    %esp,%ebp
   1219d:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   121a0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   121a4:	75 19                	jne    121bf <list_get_size+0x25>
   121a6:	68 70 2e 01 00       	push   $0x12e70
   121ab:	68 8c 2f 01 00       	push   $0x12f8c
   121b0:	6a 3e                	push   $0x3e
   121b2:	68 84 2e 01 00       	push   $0x12e84
   121b7:	e8 91 fa ff ff       	call   11c4d <pannic>
   121bc:	83 c4 10             	add    $0x10,%esp
    return list->size;
   121bf:	8b 45 08             	mov    0x8(%ebp),%eax
   121c2:	8b 40 08             	mov    0x8(%eax),%eax
}
   121c5:	c9                   	leave  
   121c6:	c3                   	ret    

000121c7 <list_insert_first>:
 * 
 */

#include "tools/list.h"

void list_insert_first(list_t *list, list_node_t *node) {
   121c7:	55                   	push   %ebp
   121c8:	89 e5                	mov    %esp,%ebp
   121ca:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   121cd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   121d1:	74 06                	je     121d9 <list_insert_first+0x12>
   121d3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   121d7:	75 19                	jne    121f2 <list_insert_first+0x2b>
   121d9:	68 c4 2e 01 00       	push   $0x12ec4
   121de:	68 40 2f 01 00       	push   $0x12f40
   121e3:	6a 0f                	push   $0xf
   121e5:	68 f4 2e 01 00       	push   $0x12ef4
   121ea:	e8 5e fa ff ff       	call   11c4d <pannic>
   121ef:	83 c4 10             	add    $0x10,%esp

    node->next = list->first;
   121f2:	8b 45 08             	mov    0x8(%ebp),%eax
   121f5:	8b 10                	mov    (%eax),%edx
   121f7:	8b 45 0c             	mov    0xc(%ebp),%eax
   121fa:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   121fd:	8b 45 0c             	mov    0xc(%ebp),%eax
   12200:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   12206:	83 ec 0c             	sub    $0xc,%esp
   12209:	ff 75 08             	push   0x8(%ebp)
   1220c:	e8 54 ff ff ff       	call   12165 <list_is_empty>
   12211:	83 c4 10             	add    $0x10,%esp
   12214:	85 c0                	test   %eax,%eax
   12216:	74 16                	je     1222e <list_insert_first+0x67>
        list->first = list->last = node;
   12218:	8b 45 08             	mov    0x8(%ebp),%eax
   1221b:	8b 55 0c             	mov    0xc(%ebp),%edx
   1221e:	89 50 04             	mov    %edx,0x4(%eax)
   12221:	8b 45 08             	mov    0x8(%ebp),%eax
   12224:	8b 50 04             	mov    0x4(%eax),%edx
   12227:	8b 45 08             	mov    0x8(%ebp),%eax
   1222a:	89 10                	mov    %edx,(%eax)
   1222c:	eb 12                	jmp    12240 <list_insert_first+0x79>
    } else {
        list->first->pre = node;
   1222e:	8b 45 08             	mov    0x8(%ebp),%eax
   12231:	8b 00                	mov    (%eax),%eax
   12233:	8b 55 0c             	mov    0xc(%ebp),%edx
   12236:	89 10                	mov    %edx,(%eax)
        list->first = node;
   12238:	8b 45 08             	mov    0x8(%ebp),%eax
   1223b:	8b 55 0c             	mov    0xc(%ebp),%edx
   1223e:	89 10                	mov    %edx,(%eax)
    }

    list->size++;
   12240:	8b 45 08             	mov    0x8(%ebp),%eax
   12243:	8b 40 08             	mov    0x8(%eax),%eax
   12246:	8d 50 01             	lea    0x1(%eax),%edx
   12249:	8b 45 08             	mov    0x8(%ebp),%eax
   1224c:	89 50 08             	mov    %edx,0x8(%eax)
}
   1224f:	90                   	nop
   12250:	c9                   	leave  
   12251:	c3                   	ret    

00012252 <list_insert_last>:

void list_insert_last(list_t *list, list_node_t *node) {
   12252:	55                   	push   %ebp
   12253:	89 e5                	mov    %esp,%ebp
   12255:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   12258:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1225c:	74 06                	je     12264 <list_insert_last+0x12>
   1225e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12262:	75 19                	jne    1227d <list_insert_last+0x2b>
   12264:	68 c4 2e 01 00       	push   $0x12ec4
   12269:	68 64 2f 01 00       	push   $0x12f64
   1226e:	6a 1f                	push   $0x1f
   12270:	68 f4 2e 01 00       	push   $0x12ef4
   12275:	e8 d3 f9 ff ff       	call   11c4d <pannic>
   1227a:	83 c4 10             	add    $0x10,%esp

    node->pre = list->last;
   1227d:	8b 45 08             	mov    0x8(%ebp),%eax
   12280:	8b 50 04             	mov    0x4(%eax),%edx
   12283:	8b 45 0c             	mov    0xc(%ebp),%eax
   12286:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   12288:	8b 45 0c             	mov    0xc(%ebp),%eax
   1228b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)


    if (list_is_empty(list)) {
   12292:	83 ec 0c             	sub    $0xc,%esp
   12295:	ff 75 08             	push   0x8(%ebp)
   12298:	e8 c8 fe ff ff       	call   12165 <list_is_empty>
   1229d:	83 c4 10             	add    $0x10,%esp
   122a0:	85 c0                	test   %eax,%eax
   122a2:	74 16                	je     122ba <list_insert_last+0x68>
        list->first = list->last = node;
   122a4:	8b 45 08             	mov    0x8(%ebp),%eax
   122a7:	8b 55 0c             	mov    0xc(%ebp),%edx
   122aa:	89 50 04             	mov    %edx,0x4(%eax)
   122ad:	8b 45 08             	mov    0x8(%ebp),%eax
   122b0:	8b 50 04             	mov    0x4(%eax),%edx
   122b3:	8b 45 08             	mov    0x8(%ebp),%eax
   122b6:	89 10                	mov    %edx,(%eax)
   122b8:	eb 15                	jmp    122cf <list_insert_last+0x7d>
    } else {
        list->last->next = node;
   122ba:	8b 45 08             	mov    0x8(%ebp),%eax
   122bd:	8b 40 04             	mov    0x4(%eax),%eax
   122c0:	8b 55 0c             	mov    0xc(%ebp),%edx
   122c3:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   122c6:	8b 45 08             	mov    0x8(%ebp),%eax
   122c9:	8b 55 0c             	mov    0xc(%ebp),%edx
   122cc:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->size++;
   122cf:	8b 45 08             	mov    0x8(%ebp),%eax
   122d2:	8b 40 08             	mov    0x8(%eax),%eax
   122d5:	8d 50 01             	lea    0x1(%eax),%edx
   122d8:	8b 45 08             	mov    0x8(%ebp),%eax
   122db:	89 50 08             	mov    %edx,0x8(%eax)

}
   122de:	90                   	nop
   122df:	c9                   	leave  
   122e0:	c3                   	ret    

000122e1 <list_remove_first>:

list_node_t* list_remove_first(list_t *list){
   122e1:	55                   	push   %ebp
   122e2:	89 e5                	mov    %esp,%ebp
   122e4:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   122e7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   122eb:	75 19                	jne    12306 <list_remove_first+0x25>
   122ed:	68 2a 2f 01 00       	push   $0x12f2a
   122f2:	68 78 2f 01 00       	push   $0x12f78
   122f7:	6a 31                	push   $0x31
   122f9:	68 f4 2e 01 00       	push   $0x12ef4
   122fe:	e8 4a f9 ff ff       	call   11c4d <pannic>
   12303:	83 c4 10             	add    $0x10,%esp
    if (list_is_empty(list)) {
   12306:	83 ec 0c             	sub    $0xc,%esp
   12309:	ff 75 08             	push   0x8(%ebp)
   1230c:	e8 54 fe ff ff       	call   12165 <list_is_empty>
   12311:	83 c4 10             	add    $0x10,%esp
   12314:	85 c0                	test   %eax,%eax
   12316:	74 07                	je     1231f <list_remove_first+0x3e>
        return (list_node_t*)0;
   12318:	b8 00 00 00 00       	mov    $0x0,%eax
   1231d:	eb 71                	jmp    12390 <list_remove_first+0xaf>
    }

    list_node_t *ret = list->first;
   1231f:	8b 45 08             	mov    0x8(%ebp),%eax
   12322:	8b 00                	mov    (%eax),%eax
   12324:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   12327:	83 ec 0c             	sub    $0xc,%esp
   1232a:	ff 75 08             	push   0x8(%ebp)
   1232d:	e8 68 fe ff ff       	call   1219a <list_get_size>
   12332:	83 c4 10             	add    $0x10,%esp
   12335:	83 f8 01             	cmp    $0x1,%eax
   12338:	75 17                	jne    12351 <list_remove_first+0x70>
        list->first = list->last = (list_node_t*)0;
   1233a:	8b 45 08             	mov    0x8(%ebp),%eax
   1233d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12344:	8b 45 08             	mov    0x8(%ebp),%eax
   12347:	8b 50 04             	mov    0x4(%eax),%edx
   1234a:	8b 45 08             	mov    0x8(%ebp),%eax
   1234d:	89 10                	mov    %edx,(%eax)
   1234f:	eb 18                	jmp    12369 <list_remove_first+0x88>
    } else {
        list->first = list->first->next;
   12351:	8b 45 08             	mov    0x8(%ebp),%eax
   12354:	8b 00                	mov    (%eax),%eax
   12356:	8b 50 04             	mov    0x4(%eax),%edx
   12359:	8b 45 08             	mov    0x8(%ebp),%eax
   1235c:	89 10                	mov    %edx,(%eax)
        list->first->pre = (list_node_t*)0;
   1235e:	8b 45 08             	mov    0x8(%ebp),%eax
   12361:	8b 00                	mov    (%eax),%eax
   12363:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    list->size--;
   12369:	8b 45 08             	mov    0x8(%ebp),%eax
   1236c:	8b 40 08             	mov    0x8(%eax),%eax
   1236f:	8d 50 ff             	lea    -0x1(%eax),%edx
   12372:	8b 45 08             	mov    0x8(%ebp),%eax
   12375:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   12378:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1237b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12382:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12385:	8b 50 04             	mov    0x4(%eax),%edx
   12388:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1238b:	89 10                	mov    %edx,(%eax)
    return ret;
   1238d:	8b 45 f4             	mov    -0xc(%ebp),%eax
 }
   12390:	c9                   	leave  
   12391:	c3                   	ret    

00012392 <list_remove_last>:

list_node_t* list_remove_last(list_t *list) {
   12392:	55                   	push   %ebp
   12393:	89 e5                	mov    %esp,%ebp
   12395:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   12398:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1239c:	75 19                	jne    123b7 <list_remove_last+0x25>
   1239e:	68 2a 2f 01 00       	push   $0x12f2a
   123a3:	68 9c 2f 01 00       	push   $0x12f9c
   123a8:	6a 46                	push   $0x46
   123aa:	68 f4 2e 01 00       	push   $0x12ef4
   123af:	e8 99 f8 ff ff       	call   11c4d <pannic>
   123b4:	83 c4 10             	add    $0x10,%esp
     if (list_is_empty(list)) {
   123b7:	83 ec 0c             	sub    $0xc,%esp
   123ba:	ff 75 08             	push   0x8(%ebp)
   123bd:	e8 a3 fd ff ff       	call   12165 <list_is_empty>
   123c2:	83 c4 10             	add    $0x10,%esp
   123c5:	85 c0                	test   %eax,%eax
   123c7:	74 07                	je     123d0 <list_remove_last+0x3e>
        return (list_node_t*)0;
   123c9:	b8 00 00 00 00       	mov    $0x0,%eax
   123ce:	eb 75                	jmp    12445 <list_remove_last+0xb3>
    }

    list_node_t *ret = list->last;
   123d0:	8b 45 08             	mov    0x8(%ebp),%eax
   123d3:	8b 40 04             	mov    0x4(%eax),%eax
   123d6:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   123d9:	83 ec 0c             	sub    $0xc,%esp
   123dc:	ff 75 08             	push   0x8(%ebp)
   123df:	e8 b6 fd ff ff       	call   1219a <list_get_size>
   123e4:	83 c4 10             	add    $0x10,%esp
   123e7:	83 f8 01             	cmp    $0x1,%eax
   123ea:	75 17                	jne    12403 <list_remove_last+0x71>
        list->first = list->last = (list_node_t*)0;
   123ec:	8b 45 08             	mov    0x8(%ebp),%eax
   123ef:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   123f6:	8b 45 08             	mov    0x8(%ebp),%eax
   123f9:	8b 50 04             	mov    0x4(%eax),%edx
   123fc:	8b 45 08             	mov    0x8(%ebp),%eax
   123ff:	89 10                	mov    %edx,(%eax)
   12401:	eb 1b                	jmp    1241e <list_remove_last+0x8c>
    } else {
        list->last = list->last->pre;
   12403:	8b 45 08             	mov    0x8(%ebp),%eax
   12406:	8b 40 04             	mov    0x4(%eax),%eax
   12409:	8b 10                	mov    (%eax),%edx
   1240b:	8b 45 08             	mov    0x8(%ebp),%eax
   1240e:	89 50 04             	mov    %edx,0x4(%eax)
        list->last->next = (list_node_t*)0;
   12411:	8b 45 08             	mov    0x8(%ebp),%eax
   12414:	8b 40 04             	mov    0x4(%eax),%eax
   12417:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    }

    list->size--;
   1241e:	8b 45 08             	mov    0x8(%ebp),%eax
   12421:	8b 40 08             	mov    0x8(%eax),%eax
   12424:	8d 50 ff             	lea    -0x1(%eax),%edx
   12427:	8b 45 08             	mov    0x8(%ebp),%eax
   1242a:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   1242d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12430:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12437:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1243a:	8b 50 04             	mov    0x4(%eax),%edx
   1243d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12440:	89 10                	mov    %edx,(%eax)
    return ret;
   12442:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   12445:	c9                   	leave  
   12446:	c3                   	ret    

00012447 <list_remove>:

list_node_t* list_remove(list_t *list, list_node_t *node) {
   12447:	55                   	push   %ebp
   12448:	89 e5                	mov    %esp,%ebp
   1244a:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   1244d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12451:	74 06                	je     12459 <list_remove+0x12>
   12453:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12457:	75 19                	jne    12472 <list_remove+0x2b>
   12459:	68 c4 2e 01 00       	push   $0x12ec4
   1245e:	68 b0 2f 01 00       	push   $0x12fb0
   12463:	6a 5b                	push   $0x5b
   12465:	68 f4 2e 01 00       	push   $0x12ef4
   1246a:	e8 de f7 ff ff       	call   11c4d <pannic>
   1246f:	83 c4 10             	add    $0x10,%esp

    if (list_is_empty(list)) {
   12472:	83 ec 0c             	sub    $0xc,%esp
   12475:	ff 75 08             	push   0x8(%ebp)
   12478:	e8 e8 fc ff ff       	call   12165 <list_is_empty>
   1247d:	83 c4 10             	add    $0x10,%esp
   12480:	85 c0                	test   %eax,%eax
   12482:	74 0a                	je     1248e <list_remove+0x47>
        return (list_node_t*)0;
   12484:	b8 00 00 00 00       	mov    $0x0,%eax
   12489:	e9 80 00 00 00       	jmp    1250e <list_remove+0xc7>
    }

    if (node == list->first) list->first = node->next;
   1248e:	8b 45 08             	mov    0x8(%ebp),%eax
   12491:	8b 00                	mov    (%eax),%eax
   12493:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12496:	75 0b                	jne    124a3 <list_remove+0x5c>
   12498:	8b 45 0c             	mov    0xc(%ebp),%eax
   1249b:	8b 50 04             	mov    0x4(%eax),%edx
   1249e:	8b 45 08             	mov    0x8(%ebp),%eax
   124a1:	89 10                	mov    %edx,(%eax)
    if (node == list->last) list->last = node->pre;
   124a3:	8b 45 08             	mov    0x8(%ebp),%eax
   124a6:	8b 40 04             	mov    0x4(%eax),%eax
   124a9:	39 45 0c             	cmp    %eax,0xc(%ebp)
   124ac:	75 0b                	jne    124b9 <list_remove+0x72>
   124ae:	8b 45 0c             	mov    0xc(%ebp),%eax
   124b1:	8b 10                	mov    (%eax),%edx
   124b3:	8b 45 08             	mov    0x8(%ebp),%eax
   124b6:	89 50 04             	mov    %edx,0x4(%eax)

    if (node->pre) node->pre->next = node->next;
   124b9:	8b 45 0c             	mov    0xc(%ebp),%eax
   124bc:	8b 00                	mov    (%eax),%eax
   124be:	85 c0                	test   %eax,%eax
   124c0:	74 0e                	je     124d0 <list_remove+0x89>
   124c2:	8b 45 0c             	mov    0xc(%ebp),%eax
   124c5:	8b 00                	mov    (%eax),%eax
   124c7:	8b 55 0c             	mov    0xc(%ebp),%edx
   124ca:	8b 52 04             	mov    0x4(%edx),%edx
   124cd:	89 50 04             	mov    %edx,0x4(%eax)
    if (node->next) node->next->pre = node->pre;
   124d0:	8b 45 0c             	mov    0xc(%ebp),%eax
   124d3:	8b 40 04             	mov    0x4(%eax),%eax
   124d6:	85 c0                	test   %eax,%eax
   124d8:	74 0d                	je     124e7 <list_remove+0xa0>
   124da:	8b 45 0c             	mov    0xc(%ebp),%eax
   124dd:	8b 40 04             	mov    0x4(%eax),%eax
   124e0:	8b 55 0c             	mov    0xc(%ebp),%edx
   124e3:	8b 12                	mov    (%edx),%edx
   124e5:	89 10                	mov    %edx,(%eax)

    node->pre = node->next = (list_node_t*)0;
   124e7:	8b 45 0c             	mov    0xc(%ebp),%eax
   124ea:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   124f1:	8b 45 0c             	mov    0xc(%ebp),%eax
   124f4:	8b 50 04             	mov    0x4(%eax),%edx
   124f7:	8b 45 0c             	mov    0xc(%ebp),%eax
   124fa:	89 10                	mov    %edx,(%eax)
    list->size--;
   124fc:	8b 45 08             	mov    0x8(%ebp),%eax
   124ff:	8b 40 08             	mov    0x8(%eax),%eax
   12502:	8d 50 ff             	lea    -0x1(%eax),%edx
   12505:	8b 45 08             	mov    0x8(%ebp),%eax
   12508:	89 50 08             	mov    %edx,0x8(%eax)

    return node;
   1250b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1250e:	c9                   	leave  
   1250f:	c3                   	ret    

00012510 <inb>:
static inline uint8_t inb(uint16_t port) {
   12510:	55                   	push   %ebp
   12511:	89 e5                	mov    %esp,%ebp
   12513:	83 ec 14             	sub    $0x14,%esp
   12516:	8b 45 08             	mov    0x8(%ebp),%eax
   12519:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   1251d:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   12521:	89 c2                	mov    %eax,%edx
   12523:	ec                   	in     (%dx),%al
   12524:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   12527:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   1252b:	c9                   	leave  
   1252c:	c3                   	ret    

0001252d <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   1252d:	55                   	push   %ebp
   1252e:	89 e5                	mov    %esp,%ebp
   12530:	83 ec 08             	sub    $0x8,%esp
   12533:	8b 45 08             	mov    0x8(%ebp),%eax
   12536:	8b 55 0c             	mov    0xc(%ebp),%edx
   12539:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   1253d:	89 d0                	mov    %edx,%eax
   1253f:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   12542:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12546:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1254a:	ee                   	out    %al,(%dx)
}
   1254b:	90                   	nop
   1254c:	c9                   	leave  
   1254d:	c3                   	ret    

0001254e <log_init>:
#include "cpu/idt.h"
/**
 * @brief  初始化串行端口寄存器COM1
 * 
 */
void log_init(void) {
   1254e:	55                   	push   %ebp
   1254f:	89 e5                	mov    %esp,%ebp
    outb(COM1_PORT + 1, 0x00);
   12551:	6a 00                	push   $0x0
   12553:	68 f9 03 00 00       	push   $0x3f9
   12558:	e8 d0 ff ff ff       	call   1252d <outb>
   1255d:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   12560:	68 80 00 00 00       	push   $0x80
   12565:	68 fb 03 00 00       	push   $0x3fb
   1256a:	e8 be ff ff ff       	call   1252d <outb>
   1256f:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   12572:	6a 03                	push   $0x3
   12574:	68 f8 03 00 00       	push   $0x3f8
   12579:	e8 af ff ff ff       	call   1252d <outb>
   1257e:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   12581:	6a 00                	push   $0x0
   12583:	68 f9 03 00 00       	push   $0x3f9
   12588:	e8 a0 ff ff ff       	call   1252d <outb>
   1258d:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   12590:	6a 03                	push   $0x3
   12592:	68 fb 03 00 00       	push   $0x3fb
   12597:	e8 91 ff ff ff       	call   1252d <outb>
   1259c:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0xc7);
   1259f:	68 c7 00 00 00       	push   $0xc7
   125a4:	68 fa 03 00 00       	push   $0x3fa
   125a9:	e8 7f ff ff ff       	call   1252d <outb>
   125ae:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0f);
   125b1:	6a 0f                	push   $0xf
   125b3:	68 fc 03 00 00       	push   $0x3fc
   125b8:	e8 70 ff ff ff       	call   1252d <outb>
   125bd:	83 c4 08             	add    $0x8,%esp
}
   125c0:	90                   	nop
   125c1:	c9                   	leave  
   125c2:	c3                   	ret    

000125c3 <log_printf>:
 * @brief  格式化输出到串口
 * 
 * @param formate 
 * @param ... 
 */
void log_printf(const char *formate, ...) {
   125c3:	55                   	push   %ebp
   125c4:	89 e5                	mov    %esp,%ebp
   125c6:	81 ec 98 00 00 00    	sub    $0x98,%esp
    //1.设置字符缓冲区
    char str_buf[128];
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   125cc:	83 ec 04             	sub    $0x4,%esp
   125cf:	68 80 00 00 00       	push   $0x80
   125d4:	6a 00                	push   $0x0
   125d6:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
   125dc:	50                   	push   %eax
   125dd:	e8 27 f8 ff ff       	call   11e09 <kernel_memset>
   125e2:	83 c4 10             	add    $0x10,%esp
    
    //2.获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   125e5:	8d 45 0c             	lea    0xc(%ebp),%eax
   125e8:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
    kernel_vsprintf(str_buf, formate, args);
   125ee:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
   125f4:	83 ec 04             	sub    $0x4,%esp
   125f7:	50                   	push   %eax
   125f8:	ff 75 08             	push   0x8(%ebp)
   125fb:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
   12601:	50                   	push   %eax
   12602:	e8 eb f8 ff ff       	call   11ef2 <kernel_vsprintf>
   12607:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    const char *p = str_buf;
   1260a:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
   12610:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将以下资源放入临界资源包含区，防止在运行时发生进程切换（cpu关中断）
    idt_state_t state = idt_enter_protection(); //TODO:加锁
   12613:	e8 51 ee ff ff       	call   11469 <idt_enter_protection>
   12618:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //3.将字符串输出到串口
    while (*p != '\0') {
   1261b:	eb 57                	jmp    12674 <log_printf+0xb1>
        //4.判断串口是否正在忙碌，是则阻塞等待
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0);
   1261d:	90                   	nop
   1261e:	83 ec 0c             	sub    $0xc,%esp
   12621:	68 fd 03 00 00       	push   $0x3fd
   12626:	e8 e5 fe ff ff       	call   12510 <inb>
   1262b:	83 c4 10             	add    $0x10,%esp
   1262e:	0f b6 c0             	movzbl %al,%eax
   12631:	83 e0 40             	and    $0x40,%eax
   12634:	85 c0                	test   %eax,%eax
   12636:	74 e6                	je     1261e <log_printf+0x5b>

        if (*p == '\n') outb(COM1_PORT, '\r');
   12638:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1263b:	0f b6 00             	movzbl (%eax),%eax
   1263e:	3c 0a                	cmp    $0xa,%al
   12640:	75 12                	jne    12654 <log_printf+0x91>
   12642:	83 ec 08             	sub    $0x8,%esp
   12645:	6a 0d                	push   $0xd
   12647:	68 f8 03 00 00       	push   $0x3f8
   1264c:	e8 dc fe ff ff       	call   1252d <outb>
   12651:	83 c4 10             	add    $0x10,%esp
        
        outb(COM1_PORT, *(p++));
   12654:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12657:	8d 50 01             	lea    0x1(%eax),%edx
   1265a:	89 55 f4             	mov    %edx,-0xc(%ebp)
   1265d:	0f b6 00             	movzbl (%eax),%eax
   12660:	0f b6 c0             	movzbl %al,%eax
   12663:	83 ec 08             	sub    $0x8,%esp
   12666:	50                   	push   %eax
   12667:	68 f8 03 00 00       	push   $0x3f8
   1266c:	e8 bc fe ff ff       	call   1252d <outb>
   12671:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0') {
   12674:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12677:	0f b6 00             	movzbl (%eax),%eax
   1267a:	84 c0                	test   %al,%al
   1267c:	75 9f                	jne    1261d <log_printf+0x5a>
    }
    
    //5.换行
    outb(COM1_PORT, '\r');
   1267e:	83 ec 08             	sub    $0x8,%esp
   12681:	6a 0d                	push   $0xd
   12683:	68 f8 03 00 00       	push   $0x3f8
   12688:	e8 a0 fe ff ff       	call   1252d <outb>
   1268d:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   12690:	83 ec 08             	sub    $0x8,%esp
   12693:	6a 0a                	push   $0xa
   12695:	68 f8 03 00 00       	push   $0x3f8
   1269a:	e8 8e fe ff ff       	call   1252d <outb>
   1269f:	83 c4 10             	add    $0x10,%esp

    //执行完毕，将资源离开临界资源保护区，(cpu开中断)
    idt_leave_protection(state);    //TODO:解锁
   126a2:	83 ec 0c             	sub    $0xc,%esp
   126a5:	ff 75 f0             	push   -0x10(%ebp)
   126a8:	e8 d4 ed ff ff       	call   11481 <idt_leave_protection>
   126ad:	83 c4 10             	add    $0x10,%esp
   126b0:	90                   	nop
   126b1:	c9                   	leave  
   126b2:	c3                   	ret    
