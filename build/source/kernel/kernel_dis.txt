
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf:     file format elf32-i386
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00003df4 memsz 0x00003df4 flags rwx
    LOAD off    0x00000000 vaddr 0x00014000 paddr 0x00014000 align 2**12
         filesz 0x00000000 memsz 0x0001ed90 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000031bb  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000be8  000131bc  000131bc  000041bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000034  00013dc0  00013dc0  00004dc0  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0001ed90  00014000  00014000  00005000  2**12
                  ALLOC
  4 .debug_line   00001b10  00000000  00000000  00004df4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_line_str 00000689  00000000  00000000  00006904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   00004e2f  00000000  00000000  00006f8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00001780  00000000  00000000  0000bdbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_aranges 000001e0  00000000  00000000  0000d540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    0000109d  00000000  00000000  0000d720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .comment      0000002b  00000000  00000000  0000e7bd  2**0
                  CONTENTS, READONLY
 11 .debug_frame  000012f8  00000000  00000000  0000e7e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010012 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
000102ad l     F .text	0000000d down2
000102ba l     F .text	00000017 up2
000102d1 l     F .text	0000000c write_cr3
000102dd l     F .text	0000000b pde_index
000102e8 l     F .text	00000010 pte_index
000102f8 l     F .text	00000010 pde_to_pt_addr
00010308 l     F .text	00000011 mmu_set_page_dir
00014000 l     O .bss	00000028 paddr_alloc
00015000 l     O .bss	00001000 kernel_page_dir
00010319 l     F .text	0000005d addr_alloc_init
00010376 l     F .text	00000067 addr_alloc_page
000103dd l     F .text	00000061 addr_free_page
0001043e l     F .text	00000066 show_mem_info
000104a4 l     F .text	00000037 total_mem_size
000132e0 l     O .rodata	00000011 __func__.2
00013dc0 l     O .data	00000030 kernal_map.1
000132f4 l     O .rodata	0000000c __func__.0
00000000 l    df *ABS*	00000000 task.c
00010833 l     F .text	0000003d list_node_init
000133d4 l     O .rodata	0000000f __func__.9
00010870 l     F .text	0000002d list_node_next
00013434 l     O .rodata	0000000f __func__.3
0001089d l     F .text	00000047 list_init
000133e4 l     O .rodata	0000000a __func__.8
000108e4 l     F .text	00000035 list_is_empty
00013444 l     O .rodata	0000000e __func__.2
00010919 l     F .text	0000002d list_get_size
00013424 l     O .rodata	0000000e __func__.4
00010946 l     F .text	0000002c list_get_first
00013414 l     O .rodata	0000000f __func__.5
00010972 l     F .text	00000007 hlt
00010979 l     F .text	0000001a far_jump
00010993 l     F .text	00000017 write_tr
00016000 l     O .bss	00000190 task_manager
000109aa l     F .text	0000001f switch_to_tss
000109e4 l     F .text	000000e5 tss_init
000133c8 l     O .rodata	0000000a __func__.10
000161a0 l     O .bss	00000200 empty_task_stack
00010bad l     F .text	0000000a empty_task
000133f0 l     O .rodata	0000000f __func__.7
00013400 l     O .rodata	00000011 __func__.6
00013454 l     O .rodata	0000000f __func__.1
00013464 l     O .rodata	00000010 __func__.0
00000000 l    df *ABS*	00000000 gdt.c
0001102d l     F .text	00000028 lgdt
000163a0 l     O .bss	00010000 gdt_table
000263a0 l     O .bss	00008000 is_alloc
0002e3a0 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 idt.c
0001121f l     F .text	00000007 cli
00011226 l     F .text	00000007 sti
0001122d l     F .text	00000007 hlt
00011234 l     F .text	0000001d inb
00011251 l     F .text	00000021 outb
00011272 l     F .text	00000028 lidt
0001129a l     F .text	00000010 read_eflags
000112aa l     F .text	0000000b write_eflags
0002e3c0 l     O .bss	00000800 idt_table
000112b5 l     F .text	000000e9 print_exception_fram
0001139e l     F .text	0000003e do_default_handler
00011628 l     F .text	00000047 gate_desc_set
000116af l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 mmu.c
00000000 l    df *ABS*	00000000 time.c
00011a59 l     F .text	00000021 outb
0002ebc0 l     O .bss	00000004 sys_tick
00011aa2 l     F .text	00000062 init_pit
00000000 l    df *ABS*	00000000 init.c
00011b1c l     F .text	00000007 sti
00013874 l     O .rodata	0000000c __func__.0
0002ebe0 l     O .bss	000000b4 task_test_task_1
0002eca0 l     O .bss	000000b4 task_test_task_2
0002ed60 l     O .bss	00001000 test_task_1_stack
0002fd60 l     O .bss	00001000 test_task_2_stack
00030d60 l     O .bss	00000010 sem
00000000 l    df *ABS*	00000000 mutex.c
00011c61 l     F .text	00000047 list_init
0001392c l     O .rodata	0000000a __func__.1
00011ca8 l     F .text	00000035 list_is_empty
00013938 l     O .rodata	0000000e __func__.0
00013920 l     O .rodata	0000000b __func__.2
00000000 l    df *ABS*	00000000 sem.c
00011e73 l     F .text	00000047 list_init
000139ec l     O .rodata	0000000a __func__.1
00011eba l     F .text	00000035 list_is_empty
000139f8 l     O .rodata	0000000e __func__.0
000139e0 l     O .rodata	00000009 __func__.2
00000000 l    df *ABS*	00000000 test.c
00012043 l     F .text	00000047 list_init
00013b0c l     O .rodata	0000000a __func__.3
0001208a l     F .text	0000002d list_get_size
00013b18 l     O .rodata	0000000e __func__.2
000120b7 l     F .text	0000002c list_get_first
00013b38 l     O .rodata	0000000f __func__.0
000120e3 l     F .text	0000002d list_get_last
00013b28 l     O .rodata	0000000e __func__.1
00000000 l    df *ABS*	00000000 assert.c
000123eb l     F .text	00000007 hlt
00000000 l    df *ABS*	00000000 bitmap.c
00013c08 l     O .rodata	0000000c __func__.3
00013c14 l     O .rodata	0000000f __func__.2
00013c24 l     O .rodata	0000000f __func__.1
00013c34 l     O .rodata	00000013 __func__.0
00000000 l    df *ABS*	00000000 klib.c
00013df0 l     O .data	00000004 num_to_char.0
00000000 l    df *ABS*	00000000 list.c
00012c50 l     F .text	00000035 list_is_empty
00013d3c l     O .rodata	0000000e __func__.5
00012c85 l     F .text	0000002d list_get_size
00013d74 l     O .rodata	0000000e __func__.2
00013d28 l     O .rodata	00000012 __func__.6
00013d4c l     O .rodata	00000011 __func__.4
00013d60 l     O .rodata	00000012 __func__.3
00013d84 l     O .rodata	00000011 __func__.1
00013d98 l     O .rodata	0000000c __func__.0
00000000 l    df *ABS*	00000000 log.c
00012ffb l     F .text	0000001d inb
00013018 l     F .text	00000021 outb
00030d70 l     O .bss	00000014 mutex
000124d2 g     F .text	00000078 bitmap_get_bit
000128a5 g     F .text	0000004f kernel_memcpy
000118b5 g     F .text	00000098 idt_enable
00010d48 g     F .text	0000000a task_current
00012d3d g     F .text	0000008f list_insert_last
00010dba g     F .text	00000061 sys_yield
00011510 g     F .text	0000001c do_handler_segment_not_present
00010c84 g     F .text	0000004b task_set_ready
00012652 g     F .text	00000021 bitmap_is_set
000119ec g     F .text	0000000b idt_enable_global
000128f4 g     F .text	00000041 kernel_memset
00010081 g       .text	00000000 exception_handler_nmi
00010243 g       .text	00000000 exception_handler_virtual_exception
00013039 g     F .text	00000088 log_init
00011bc8 g     F .text	00000099 init_main
000101ee g       .text	00000000 exception_handler_alignment_check
0001276e g     F .text	00000047 kernel_strcpy
000119e1 g     F .text	0000000b idt_disable_global
00013da4 g       .rodata	00000000 s_data
0001166f g     F .text	00000040 idt_install
0001002a g       .text	00000000 exception_handler_unknown
0001009e g       .text	00000000 exception_handler_breakpoint
00011468 g     F .text	0000001c do_handler_overflow
0001159c g     F .text	0000001c do_handler_alignment_check
0001019b g       .text	00000000 exception_handler_general_protection
00011548 g     F .text	0000001c do_handler_general_protection
0001160c g     F .text	0000001c do_handler_control_exception
0001201a g     F .text	00000029 sem_count
000113f8 g     F .text	0000001c do_handler_divider
0001254a g     F .text	00000108 bitmap_set_bit
000114d8 g     F .text	0000001c do_handler_double_fault
00011564 g     F .text	0000001c do_handler_page_fault
0001012f g       .text	00000000 exception_handler_double_fault
000119f7 g     F .text	00000039 pic_send_eoi
00012e7d g     F .text	000000b5 list_remove_last
00010c7a g     F .text	0000000a task_first_task
00010000 g       .text	00000000 s_text
00011f32 g     F .text	0000006b sem_wait
00010180 g       .text	00000000 exception_handler_stack_segment_fault
00011114 g     F .text	00000094 gdt_init
000115f0 g     F .text	0000001c do_handler_virtual_exception
000100bb g       .text	00000000 exception_handler_overflow
00010298 g       .text	00000000 simple_switch
0001027b g       .text	00000000 exception_handler_time
00011414 g     F .text	0000001c do_handler_debug
00030d90 g     O .bss	00002000 stack
00010fcd g     F .text	00000060 sys_sleep
00011b9f g     F .text	00000029 test_task_2
00012110 g     F .text	000002db list_test
00010260 g       .text	00000000 exception_handler_control_exception
000100d8 g       .text	00000000 exception_handler_bound_range
00011742 g     F .text	00000173 idt_init
00011f9d g     F .text	0000007d sem_notify
000114a0 g     F .text	0000001c do_handler_invalid_opcode
0001014a g       .text	00000000 exception_handler_invalid_tss
00011580 g     F .text	0000001c do_handler_fpu_error
00010c32 g     F .text	00000048 task_first_init
000115b8 g     F .text	0000001c do_handler_machine_check
00012cb2 g     F .text	0000008b list_insert_first
00010f82 g     F .text	0000004b task_set_wakeup
00010d1a g     F .text	0000002e task_ready_first
00010047 g       .text	00000000 exception_handler_divider
000127b5 g     F .text	00000051 kernel_strncpy
00032d90 g       .bss	00000000 mem_free_start
00011b23 g     F .text	00000053 kernel_init
00011eef g     F .text	00000043 sem_init
00010000 g       .text	00000000 _start
000129dd g     F .text	0000019d kernel_vsprintf
00010112 g       .text	00000000 exception_handler_device_unavailable
000100f5 g       .text	00000000 exception_handler_invalid_opcode
00011d2a g     F .text	00000091 mutex_lock
00010209 g       .text	00000000 exception_handler_machine_check
000114f4 g     F .text	0000001c do_handler_invalid_tss
0001194d g     F .text	00000094 idt_disable
00010f26 g     F .text	0000005c task_set_sleep
000105e8 g     F .text	000000c8 memory_creat_map
00011430 g     F .text	0000001c do_handler_nmi
00011cdd g     F .text	0000004d mutex_init
00011b76 g     F .text	00000029 test_task_1
00010226 g       .text	00000000 exception_handler_smd_exception
00012428 g     F .text	00000016 bitmap_byte_count
000114bc g     F .text	0000001c do_handler_device_unavailable
00011a30 g     F .text	00000018 idt_enter_protection
000106b0 g     F .text	0000008a create_kernal_table
00010e1b g     F .text	0000010b task_slice_end
00012935 g     F .text	00000084 kernel_memcmp
000115d4 g     F .text	0000001c do_handler_smd_exception
000101b6 g       .text	00000000 exception_handler_page_fault
000113dc g     F .text	0000001c do_handler_unknown
000101d1 g       .text	00000000 exception_handler_fpu_error
000109c9 g     F .text	0000001b task_switch_from_to
00011dbb g     F .text	000000b8 mutex_unlock
00010d52 g     F .text	00000068 task_switch
00012870 g     F .text	00000035 kernel_strlen
00010ccf g     F .text	0000004b task_set_unready
00010064 g       .text	00000000 exception_handler_debug
00011055 g     F .text	000000bf segment_desc_set
00011484 g     F .text	0000001c do_handler_bound_range
00012dcc g     F .text	000000b1 list_remove_first
00013da4 g       .rodata	00000000 e_text
00012806 g     F .text	0000006a kernel_strncmp
0001243e g     F .text	00000094 bitmap_init
00010165 g       .text	00000000 exception_handler_segment_not_present
00012673 g     F .text	000000fb bitmap_alloc_nbits
00010bb7 g     F .text	0000007b task_manager_init
0001073a g     F .text	000000f9 memory_init
000123f2 g     F .text	00000036 pannic
0001152c g     F .text	0000001c do_handler_stack_segment_fault
0001144c g     F .text	0000001c do_handler_breakpoint
000130c1 g     F .text	000000fa log_printf
00010ac9 g     F .text	000000e4 task_init
000129b9 g     F .text	00000024 kernel_sprintf
000111a8 g     F .text	00000077 gdt_alloc_desc
00012b7a g     F .text	000000d6 kernel_itoa
00012f32 g     F .text	000000c9 list_remove
00011a48 g     F .text	00000011 idt_leave_protection
000104db g     F .text	0000010d find_pte
00011a7a g     F .text	00000028 do_handler_time
00011b04 g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
*            [&boot_info]
*    esp ->  [返回地址]
*   所以要想访问到&boot_info，则只需从当前esp的位置偏移+4字节即可
*/
_start:
    mov %esp, %ebp      //栈空间最好只用ebp来进行偏移访问
   10000:	89 e5                	mov    %esp,%ebp
    mov 0x4(%ebp), %eax //将&boot_info的值存入eax中
   10002:	8b 45 04             	mov    0x4(%ebp),%eax

    push %eax           //外部函数将参数压入栈中，再进行函数调用
   10005:	50                   	push   %eax
    call kernel_init    //调用内核初始化函数
   10006:	e8 18 1b 00 00       	call   11b23 <kernel_init>

    //完成内核初始化后，进行直接跳转，以替换cs寄存器中临时的内核代码段的选择子为此时内存中真正的内核代码段选择子
    //cs:KERNEL_SELECTOR_CS, ip:gdt_reload
    jmp $KERNEL_SELECTOR_CS, $gdt_reload    
   1000b:	ea 12 00 01 00 08 00 	ljmp   $0x8,$0x10012

00010012 <gdt_reload>:

gdt_reload:
    //替换其他段寄存器中临时的内核数据段的选择子为此时内存中真正的内核数据段的选择子
    mov $KERNEL_SELECTOR_DS, %ax
   10012:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10016:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10018:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001a:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001c:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001e:	8e e8                	mov    %eax,%gs

    //重新指定栈空间位置，不再使用0~0x7c00这部分空间
    //stack段已在下面预留了KERNEL_STACK_SIZE的空间大小，直接将最高地址赋值给esp，esp便可使用这片空间
    mov $(stack + KERNEL_STACK_SIZE), %esp
   10020:	bc 90 2d 03 00       	mov    $0x32d90,%esp

    //继续初始化内核
    //TODO:后序再来说明该函数的作用
    jmp init_main 
   10025:	e9 9e 1b 00 00       	jmp    11bc8 <init_main>

0001002a <exception_handler_unknown>:
//宏结束标志
.endm

//使用定义的异常宏 
//                |异常类型|       |IDT索引| |错误码|
exception_handler unknown,              -1, 0    //未知异常
   1002a:	6a 00                	push   $0x0
   1002c:	6a ff                	push   $0xffffffff
   1002e:	60                   	pusha  
   1002f:	1e                   	push   %ds
   10030:	06                   	push   %es
   10031:	0f a0                	push   %fs
   10033:	0f a8                	push   %gs
   10035:	54                   	push   %esp
   10036:	e8 a1 13 00 00       	call   113dc <do_handler_unknown>
   1003b:	5c                   	pop    %esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider,              0,  0    //除0异常
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 a0 13 00 00       	call   113f8 <do_handler_divider>
   10058:	5c                   	pop    %esp
   10059:	0f a9                	pop    %gs
   1005b:	0f a1                	pop    %fs
   1005d:	07                   	pop    %es
   1005e:	1f                   	pop    %ds
   1005f:	61                   	popa   
   10060:	83 c4 08             	add    $0x8,%esp
   10063:	cf                   	iret   

00010064 <exception_handler_debug>:
exception_handler debug,                1,  0    //debug异常
   10064:	6a 00                	push   $0x0
   10066:	6a 01                	push   $0x1
   10068:	60                   	pusha  
   10069:	1e                   	push   %ds
   1006a:	06                   	push   %es
   1006b:	0f a0                	push   %fs
   1006d:	0f a8                	push   %gs
   1006f:	54                   	push   %esp
   10070:	e8 9f 13 00 00       	call   11414 <do_handler_debug>
   10075:	5c                   	pop    %esp
   10076:	0f a9                	pop    %gs
   10078:	0f a1                	pop    %fs
   1007a:	07                   	pop    %es
   1007b:	1f                   	pop    %ds
   1007c:	61                   	popa   
   1007d:	83 c4 08             	add    $0x8,%esp
   10080:	cf                   	iret   

00010081 <exception_handler_nmi>:
exception_handler nmi,                  2,  0
   10081:	6a 00                	push   $0x0
   10083:	6a 02                	push   $0x2
   10085:	60                   	pusha  
   10086:	1e                   	push   %ds
   10087:	06                   	push   %es
   10088:	0f a0                	push   %fs
   1008a:	0f a8                	push   %gs
   1008c:	54                   	push   %esp
   1008d:	e8 9e 13 00 00       	call   11430 <do_handler_nmi>
   10092:	5c                   	pop    %esp
   10093:	0f a9                	pop    %gs
   10095:	0f a1                	pop    %fs
   10097:	07                   	pop    %es
   10098:	1f                   	pop    %ds
   10099:	61                   	popa   
   1009a:	83 c4 08             	add    $0x8,%esp
   1009d:	cf                   	iret   

0001009e <exception_handler_breakpoint>:
exception_handler breakpoint,           3,  0
   1009e:	6a 00                	push   $0x0
   100a0:	6a 03                	push   $0x3
   100a2:	60                   	pusha  
   100a3:	1e                   	push   %ds
   100a4:	06                   	push   %es
   100a5:	0f a0                	push   %fs
   100a7:	0f a8                	push   %gs
   100a9:	54                   	push   %esp
   100aa:	e8 9d 13 00 00       	call   1144c <do_handler_breakpoint>
   100af:	5c                   	pop    %esp
   100b0:	0f a9                	pop    %gs
   100b2:	0f a1                	pop    %fs
   100b4:	07                   	pop    %es
   100b5:	1f                   	pop    %ds
   100b6:	61                   	popa   
   100b7:	83 c4 08             	add    $0x8,%esp
   100ba:	cf                   	iret   

000100bb <exception_handler_overflow>:
exception_handler overflow,             4,  0
   100bb:	6a 00                	push   $0x0
   100bd:	6a 04                	push   $0x4
   100bf:	60                   	pusha  
   100c0:	1e                   	push   %ds
   100c1:	06                   	push   %es
   100c2:	0f a0                	push   %fs
   100c4:	0f a8                	push   %gs
   100c6:	54                   	push   %esp
   100c7:	e8 9c 13 00 00       	call   11468 <do_handler_overflow>
   100cc:	5c                   	pop    %esp
   100cd:	0f a9                	pop    %gs
   100cf:	0f a1                	pop    %fs
   100d1:	07                   	pop    %es
   100d2:	1f                   	pop    %ds
   100d3:	61                   	popa   
   100d4:	83 c4 08             	add    $0x8,%esp
   100d7:	cf                   	iret   

000100d8 <exception_handler_bound_range>:
exception_handler bound_range,          5,  0
   100d8:	6a 00                	push   $0x0
   100da:	6a 05                	push   $0x5
   100dc:	60                   	pusha  
   100dd:	1e                   	push   %ds
   100de:	06                   	push   %es
   100df:	0f a0                	push   %fs
   100e1:	0f a8                	push   %gs
   100e3:	54                   	push   %esp
   100e4:	e8 9b 13 00 00       	call   11484 <do_handler_bound_range>
   100e9:	5c                   	pop    %esp
   100ea:	0f a9                	pop    %gs
   100ec:	0f a1                	pop    %fs
   100ee:	07                   	pop    %es
   100ef:	1f                   	pop    %ds
   100f0:	61                   	popa   
   100f1:	83 c4 08             	add    $0x8,%esp
   100f4:	cf                   	iret   

000100f5 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode,       6,  0
   100f5:	6a 00                	push   $0x0
   100f7:	6a 06                	push   $0x6
   100f9:	60                   	pusha  
   100fa:	1e                   	push   %ds
   100fb:	06                   	push   %es
   100fc:	0f a0                	push   %fs
   100fe:	0f a8                	push   %gs
   10100:	54                   	push   %esp
   10101:	e8 9a 13 00 00       	call   114a0 <do_handler_invalid_opcode>
   10106:	5c                   	pop    %esp
   10107:	0f a9                	pop    %gs
   10109:	0f a1                	pop    %fs
   1010b:	07                   	pop    %es
   1010c:	1f                   	pop    %ds
   1010d:	61                   	popa   
   1010e:	83 c4 08             	add    $0x8,%esp
   10111:	cf                   	iret   

00010112 <exception_handler_device_unavailable>:
exception_handler device_unavailable,   7,  0
   10112:	6a 00                	push   $0x0
   10114:	6a 07                	push   $0x7
   10116:	60                   	pusha  
   10117:	1e                   	push   %ds
   10118:	06                   	push   %es
   10119:	0f a0                	push   %fs
   1011b:	0f a8                	push   %gs
   1011d:	54                   	push   %esp
   1011e:	e8 99 13 00 00       	call   114bc <do_handler_device_unavailable>
   10123:	5c                   	pop    %esp
   10124:	0f a9                	pop    %gs
   10126:	0f a1                	pop    %fs
   10128:	07                   	pop    %es
   10129:	1f                   	pop    %ds
   1012a:	61                   	popa   
   1012b:	83 c4 08             	add    $0x8,%esp
   1012e:	cf                   	iret   

0001012f <exception_handler_double_fault>:
exception_handler double_fault,         8,  1
   1012f:	6a 08                	push   $0x8
   10131:	60                   	pusha  
   10132:	1e                   	push   %ds
   10133:	06                   	push   %es
   10134:	0f a0                	push   %fs
   10136:	0f a8                	push   %gs
   10138:	54                   	push   %esp
   10139:	e8 9a 13 00 00       	call   114d8 <do_handler_double_fault>
   1013e:	5c                   	pop    %esp
   1013f:	0f a9                	pop    %gs
   10141:	0f a1                	pop    %fs
   10143:	07                   	pop    %es
   10144:	1f                   	pop    %ds
   10145:	61                   	popa   
   10146:	83 c4 08             	add    $0x8,%esp
   10149:	cf                   	iret   

0001014a <exception_handler_invalid_tss>:
exception_handler invalid_tss,          10, 1
   1014a:	6a 0a                	push   $0xa
   1014c:	60                   	pusha  
   1014d:	1e                   	push   %ds
   1014e:	06                   	push   %es
   1014f:	0f a0                	push   %fs
   10151:	0f a8                	push   %gs
   10153:	54                   	push   %esp
   10154:	e8 9b 13 00 00       	call   114f4 <do_handler_invalid_tss>
   10159:	5c                   	pop    %esp
   1015a:	0f a9                	pop    %gs
   1015c:	0f a1                	pop    %fs
   1015e:	07                   	pop    %es
   1015f:	1f                   	pop    %ds
   10160:	61                   	popa   
   10161:	83 c4 08             	add    $0x8,%esp
   10164:	cf                   	iret   

00010165 <exception_handler_segment_not_present>:
exception_handler segment_not_present,  11, 1
   10165:	6a 0b                	push   $0xb
   10167:	60                   	pusha  
   10168:	1e                   	push   %ds
   10169:	06                   	push   %es
   1016a:	0f a0                	push   %fs
   1016c:	0f a8                	push   %gs
   1016e:	54                   	push   %esp
   1016f:	e8 9c 13 00 00       	call   11510 <do_handler_segment_not_present>
   10174:	5c                   	pop    %esp
   10175:	0f a9                	pop    %gs
   10177:	0f a1                	pop    %fs
   10179:	07                   	pop    %es
   1017a:	1f                   	pop    %ds
   1017b:	61                   	popa   
   1017c:	83 c4 08             	add    $0x8,%esp
   1017f:	cf                   	iret   

00010180 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,  12, 1
   10180:	6a 0c                	push   $0xc
   10182:	60                   	pusha  
   10183:	1e                   	push   %ds
   10184:	06                   	push   %es
   10185:	0f a0                	push   %fs
   10187:	0f a8                	push   %gs
   10189:	54                   	push   %esp
   1018a:	e8 9d 13 00 00       	call   1152c <do_handler_stack_segment_fault>
   1018f:	5c                   	pop    %esp
   10190:	0f a9                	pop    %gs
   10192:	0f a1                	pop    %fs
   10194:	07                   	pop    %es
   10195:	1f                   	pop    %ds
   10196:	61                   	popa   
   10197:	83 c4 08             	add    $0x8,%esp
   1019a:	cf                   	iret   

0001019b <exception_handler_general_protection>:
exception_handler general_protection,   13, 1
   1019b:	6a 0d                	push   $0xd
   1019d:	60                   	pusha  
   1019e:	1e                   	push   %ds
   1019f:	06                   	push   %es
   101a0:	0f a0                	push   %fs
   101a2:	0f a8                	push   %gs
   101a4:	54                   	push   %esp
   101a5:	e8 9e 13 00 00       	call   11548 <do_handler_general_protection>
   101aa:	5c                   	pop    %esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa   
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret   

000101b6 <exception_handler_page_fault>:
exception_handler page_fault,           14, 1
   101b6:	6a 0e                	push   $0xe
   101b8:	60                   	pusha  
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 9f 13 00 00       	call   11564 <do_handler_page_fault>
   101c5:	5c                   	pop    %esp
   101c6:	0f a9                	pop    %gs
   101c8:	0f a1                	pop    %fs
   101ca:	07                   	pop    %es
   101cb:	1f                   	pop    %ds
   101cc:	61                   	popa   
   101cd:	83 c4 08             	add    $0x8,%esp
   101d0:	cf                   	iret   

000101d1 <exception_handler_fpu_error>:
exception_handler fpu_error,            16, 0
   101d1:	6a 00                	push   $0x0
   101d3:	6a 10                	push   $0x10
   101d5:	60                   	pusha  
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 9e 13 00 00       	call   11580 <do_handler_fpu_error>
   101e2:	5c                   	pop    %esp
   101e3:	0f a9                	pop    %gs
   101e5:	0f a1                	pop    %fs
   101e7:	07                   	pop    %es
   101e8:	1f                   	pop    %ds
   101e9:	61                   	popa   
   101ea:	83 c4 08             	add    $0x8,%esp
   101ed:	cf                   	iret   

000101ee <exception_handler_alignment_check>:
exception_handler alignment_check,      17, 1
   101ee:	6a 11                	push   $0x11
   101f0:	60                   	pusha  
   101f1:	1e                   	push   %ds
   101f2:	06                   	push   %es
   101f3:	0f a0                	push   %fs
   101f5:	0f a8                	push   %gs
   101f7:	54                   	push   %esp
   101f8:	e8 9f 13 00 00       	call   1159c <do_handler_alignment_check>
   101fd:	5c                   	pop    %esp
   101fe:	0f a9                	pop    %gs
   10200:	0f a1                	pop    %fs
   10202:	07                   	pop    %es
   10203:	1f                   	pop    %ds
   10204:	61                   	popa   
   10205:	83 c4 08             	add    $0x8,%esp
   10208:	cf                   	iret   

00010209 <exception_handler_machine_check>:
exception_handler machine_check,        18, 0
   10209:	6a 00                	push   $0x0
   1020b:	6a 12                	push   $0x12
   1020d:	60                   	pusha  
   1020e:	1e                   	push   %ds
   1020f:	06                   	push   %es
   10210:	0f a0                	push   %fs
   10212:	0f a8                	push   %gs
   10214:	54                   	push   %esp
   10215:	e8 9e 13 00 00       	call   115b8 <do_handler_machine_check>
   1021a:	5c                   	pop    %esp
   1021b:	0f a9                	pop    %gs
   1021d:	0f a1                	pop    %fs
   1021f:	07                   	pop    %es
   10220:	1f                   	pop    %ds
   10221:	61                   	popa   
   10222:	83 c4 08             	add    $0x8,%esp
   10225:	cf                   	iret   

00010226 <exception_handler_smd_exception>:
exception_handler smd_exception,        19, 0
   10226:	6a 00                	push   $0x0
   10228:	6a 13                	push   $0x13
   1022a:	60                   	pusha  
   1022b:	1e                   	push   %ds
   1022c:	06                   	push   %es
   1022d:	0f a0                	push   %fs
   1022f:	0f a8                	push   %gs
   10231:	54                   	push   %esp
   10232:	e8 9d 13 00 00       	call   115d4 <do_handler_smd_exception>
   10237:	5c                   	pop    %esp
   10238:	0f a9                	pop    %gs
   1023a:	0f a1                	pop    %fs
   1023c:	07                   	pop    %es
   1023d:	1f                   	pop    %ds
   1023e:	61                   	popa   
   1023f:	83 c4 08             	add    $0x8,%esp
   10242:	cf                   	iret   

00010243 <exception_handler_virtual_exception>:
exception_handler virtual_exception,    20, 0
   10243:	6a 00                	push   $0x0
   10245:	6a 14                	push   $0x14
   10247:	60                   	pusha  
   10248:	1e                   	push   %ds
   10249:	06                   	push   %es
   1024a:	0f a0                	push   %fs
   1024c:	0f a8                	push   %gs
   1024e:	54                   	push   %esp
   1024f:	e8 9c 13 00 00       	call   115f0 <do_handler_virtual_exception>
   10254:	5c                   	pop    %esp
   10255:	0f a9                	pop    %gs
   10257:	0f a1                	pop    %fs
   10259:	07                   	pop    %es
   1025a:	1f                   	pop    %ds
   1025b:	61                   	popa   
   1025c:	83 c4 08             	add    $0x8,%esp
   1025f:	cf                   	iret   

00010260 <exception_handler_control_exception>:
exception_handler control_exception,    21, 1
   10260:	6a 15                	push   $0x15
   10262:	60                   	pusha  
   10263:	1e                   	push   %ds
   10264:	06                   	push   %es
   10265:	0f a0                	push   %fs
   10267:	0f a8                	push   %gs
   10269:	54                   	push   %esp
   1026a:	e8 9d 13 00 00       	call   1160c <do_handler_control_exception>
   1026f:	5c                   	pop    %esp
   10270:	0f a9                	pop    %gs
   10272:	0f a1                	pop    %fs
   10274:	07                   	pop    %es
   10275:	1f                   	pop    %ds
   10276:	61                   	popa   
   10277:	83 c4 08             	add    $0x8,%esp
   1027a:	cf                   	iret   

0001027b <exception_handler_time>:

//定时器的中断处理函数
exception_handler time,                 0x20, 0 
   1027b:	6a 00                	push   $0x0
   1027d:	6a 20                	push   $0x20
   1027f:	60                   	pusha  
   10280:	1e                   	push   %ds
   10281:	06                   	push   %es
   10282:	0f a0                	push   %fs
   10284:	0f a8                	push   %gs
   10286:	54                   	push   %esp
   10287:	e8 ee 17 00 00       	call   11a7a <do_handler_time>
   1028c:	5c                   	pop    %esp
   1028d:	0f a9                	pop    %gs
   1028f:	0f a1                	pop    %fs
   10291:	07                   	pop    %es
   10292:	1f                   	pop    %ds
   10293:	61                   	popa   
   10294:	83 c4 08             	add    $0x8,%esp
   10297:	cf                   	iret   

00010298 <simple_switch>:
//TODO:该部分为另一种任务切换时cpu上下文环境的保存方法，并未被调用
    .text
    .global simple_switch
simple_switch:  //simple_switch(from, to)
    //1.获取参数
    mov 8(%esp), %edx   //获取 to, 地址(指针) --> 目标任务的栈空间对应的 esp 的值
   10298:	8b 54 24 08          	mov    0x8(%esp),%edx
    mov 4(%esp), %eax   //获取 from, 地址(指针) --> 当前任务的栈空间对应的 esp 的值
   1029c:	8b 44 24 04          	mov    0x4(%esp),%eax


    //2.被调用者保存当前任务的 ebp, ebx, esi, edi 到当前任务的栈中
    //eax, ecx, edx, eip, eflags 已由调用者压入当前任务的栈中
    push %ebp
   102a0:	55                   	push   %ebp
    push %ebx
   102a1:	53                   	push   %ebx
    push %esi
   102a2:	56                   	push   %esi
    push %edi
   102a3:	57                   	push   %edi

    //3.更新当前任务栈空间的 esp
    mov %esp, (%eax)
   102a4:	89 20                	mov    %esp,(%eax)

    //3.进行栈任务栈的切换
    mov (%edx), %esp
   102a6:	8b 22                	mov    (%edx),%esp


    //4.恢复切换后的任务状态，ebp, ebx, esi, edi 手动恢复
    //eax, ecx, edx, eip, eflags, 是在当前任务(c函数)调用simple_switch时已压入当前任务栈中，
    //调用 ret 后会自行弹出并恢复
    pop %edi
   102a8:	5f                   	pop    %edi
    pop %esi
   102a9:	5e                   	pop    %esi
    pop %ebx
   102aa:	5b                   	pop    %ebx
    pop %ebp
   102ab:	5d                   	pop    %ebp

    //5.恢复切换后的任务执行流，相当于此时 esp ->[eip]， 即 pop %eip
   102ac:	c3                   	ret    

000102ad <down2>:
 * 
 * @param size 
 * @param bound 一般取2的n次方
 * @return uint32_t 
 */
static inline uint32_t down2(uint32_t size, uint32_t bound) {
   102ad:	55                   	push   %ebp
   102ae:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);  
   102b0:	8b 45 0c             	mov    0xc(%ebp),%eax
   102b3:	f7 d8                	neg    %eax
   102b5:	23 45 08             	and    0x8(%ebp),%eax
}
   102b8:	5d                   	pop    %ebp
   102b9:	c3                   	ret    

000102ba <up2>:
 * 
 * @param size 
 * @param bound 一般取2的n次方
 * @return uint32_t 
 */
static inline uint32_t up2(uint32_t size, uint32_t bound) {
   102ba:	55                   	push   %ebp
   102bb:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   102bd:	8b 55 08             	mov    0x8(%ebp),%edx
   102c0:	8b 45 0c             	mov    0xc(%ebp),%eax
   102c3:	01 d0                	add    %edx,%eax
   102c5:	8d 50 ff             	lea    -0x1(%eax),%edx
   102c8:	8b 45 0c             	mov    0xc(%ebp),%eax
   102cb:	f7 d8                	neg    %eax
   102cd:	21 d0                	and    %edx,%eax
}
   102cf:	5d                   	pop    %ebp
   102d0:	c3                   	ret    

000102d1 <write_cr3>:
/**
 * @brief  向cr3寄存器写入数据
 *
 * @param data
 */
static inline void write_cr3(uint32_t data) {
   102d1:	55                   	push   %ebp
   102d2:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("mov %[v], %%cr3" : : [v] "r"(data));
   102d4:	8b 45 08             	mov    0x8(%ebp),%eax
   102d7:	0f 22 d8             	mov    %eax,%cr3
}
   102da:	90                   	nop
   102db:	5d                   	pop    %ebp
   102dc:	c3                   	ret    

000102dd <pde_index>:
 * @brief 获取虚拟地址的高10位，及对应的页目录项在页目录表中的索引
 * 
 * @param vstart 
 * @return uint32_t 
 */
static inline uint32_t pde_index(uint32_t vstart) {
   102dd:	55                   	push   %ebp
   102de:	89 e5                	mov    %esp,%ebp
    return (vstart >> 22);
   102e0:	8b 45 08             	mov    0x8(%ebp),%eax
   102e3:	c1 e8 16             	shr    $0x16,%eax
}
   102e6:	5d                   	pop    %ebp
   102e7:	c3                   	ret    

000102e8 <pte_index>:
 * @brief 获取虚拟地址的次10位，及对应的页表项在页表中的索引
 * 
 * @param vstart 
 * @return uint32_t 
 */
static inline uint32_t pte_index(uint32_t vstart) {
   102e8:	55                   	push   %ebp
   102e9:	89 e5                	mov    %esp,%ebp
    return (vstart >> 12) & 0x3ff;
   102eb:	8b 45 08             	mov    0x8(%ebp),%eax
   102ee:	c1 e8 0c             	shr    $0xc,%eax
   102f1:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   102f6:	5d                   	pop    %ebp
   102f7:	c3                   	ret    

000102f8 <pde_to_pt_addr>:
 * @brief 获取页目录项中对应的页表的起始地址，及该页表第一个页表项的地址
 * 
 * @param pde 页目录项
 * @return uint32_t 返回的页表的地址
 */
static inline uint32_t pde_to_pt_addr(pde_t *pde) {
   102f8:	55                   	push   %ebp
   102f9:	89 e5                	mov    %esp,%ebp
    //高20位为页表的物理地址的有效位，将其左移12位，及按4kb对齐后才是该页的物理地址
    return pde->phy_pt_addr << 12;
   102fb:	8b 45 08             	mov    0x8(%ebp),%eax
   102fe:	8b 00                	mov    (%eax),%eax
   10300:	c1 e8 0c             	shr    $0xc,%eax
   10303:	c1 e0 0c             	shl    $0xc,%eax
}
   10306:	5d                   	pop    %ebp
   10307:	c3                   	ret    

00010308 <mmu_set_page_dir>:
/**
 * @brief 设置页目录表的起始地址，将起始地址写入CR3寄存器
 * 
 * @param paddr 页目录表的物理起始地址
 */
static inline void mmu_set_page_dir(uint32_t paddr) {
   10308:	55                   	push   %ebp
   10309:	89 e5                	mov    %esp,%ebp

    //设置cr3寄存器的高20位为页目录表的地址，因为按4kb对齐，所以
    //页目录表的起始地址page_dir的高20位才为有效位，低12位为0，将cr3的低12位就设置为0
    write_cr3(paddr);
   1030b:	ff 75 08             	push   0x8(%ebp)
   1030e:	e8 be ff ff ff       	call   102d1 <write_cr3>
   10313:	83 c4 04             	add    $0x4,%esp
}
   10316:	90                   	nop
   10317:	c9                   	leave  
   10318:	c3                   	ret    

00010319 <addr_alloc_init>:
 * @param start 管理内存的起始地址
 * @param size 管理内存的大小
 * @param page_size 管理的内存页的大小
 */
static void addr_alloc_init(addr_alloc_t *alloc, uint8_t *bits, uint32_t start,
                            uint32_t size, uint32_t page_size) {
   10319:	55                   	push   %ebp
   1031a:	89 e5                	mov    %esp,%ebp
   1031c:	83 ec 08             	sub    $0x8,%esp
  mutex_init(&alloc->mutex);
   1031f:	8b 45 08             	mov    0x8(%ebp),%eax
   10322:	83 ec 0c             	sub    $0xc,%esp
   10325:	50                   	push   %eax
   10326:	e8 b2 19 00 00       	call   11cdd <mutex_init>
   1032b:	83 c4 10             	add    $0x10,%esp
  alloc->start = start;
   1032e:	8b 45 08             	mov    0x8(%ebp),%eax
   10331:	8b 55 10             	mov    0x10(%ebp),%edx
   10334:	89 50 1c             	mov    %edx,0x1c(%eax)
  alloc->size = size;
   10337:	8b 45 08             	mov    0x8(%ebp),%eax
   1033a:	8b 55 14             	mov    0x14(%ebp),%edx
   1033d:	89 50 20             	mov    %edx,0x20(%eax)
  alloc->page_size = page_size;
   10340:	8b 45 08             	mov    0x8(%ebp),%eax
   10343:	8b 55 18             	mov    0x18(%ebp),%edx
   10346:	89 50 24             	mov    %edx,0x24(%eax)
  bitmap_init(&alloc->bitmap, bits, alloc->size / alloc->page_size, 0);
   10349:	8b 45 08             	mov    0x8(%ebp),%eax
   1034c:	8b 40 20             	mov    0x20(%eax),%eax
   1034f:	8b 55 08             	mov    0x8(%ebp),%edx
   10352:	8b 4a 24             	mov    0x24(%edx),%ecx
   10355:	ba 00 00 00 00       	mov    $0x0,%edx
   1035a:	f7 f1                	div    %ecx
   1035c:	89 c2                	mov    %eax,%edx
   1035e:	8b 45 08             	mov    0x8(%ebp),%eax
   10361:	83 c0 14             	add    $0x14,%eax
   10364:	6a 00                	push   $0x0
   10366:	52                   	push   %edx
   10367:	ff 75 0c             	push   0xc(%ebp)
   1036a:	50                   	push   %eax
   1036b:	e8 ce 20 00 00       	call   1243e <bitmap_init>
   10370:	83 c4 10             	add    $0x10,%esp
}
   10373:	90                   	nop
   10374:	c9                   	leave  
   10375:	c3                   	ret    

00010376 <addr_alloc_page>:
 *
 * @param alloc
 * @param page_count 申请页的数量
 * @return uint32_t 申请的第一个页的起始地址
 */
static uint32_t addr_alloc_page(addr_alloc_t *alloc, int page_count) {
   10376:	55                   	push   %ebp
   10377:	89 e5                	mov    %esp,%ebp
   10379:	83 ec 18             	sub    $0x18,%esp
  uint32_t addr = 0;  // 记录分配的页的起始地址
   1037c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  mutex_lock(&alloc->mutex);
   10383:	8b 45 08             	mov    0x8(%ebp),%eax
   10386:	83 ec 0c             	sub    $0xc,%esp
   10389:	50                   	push   %eax
   1038a:	e8 9b 19 00 00       	call   11d2a <mutex_lock>
   1038f:	83 c4 10             	add    $0x10,%esp

  // 在位图中取连续的page_count个页进行分配
  int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   10392:	8b 45 08             	mov    0x8(%ebp),%eax
   10395:	83 c0 14             	add    $0x14,%eax
   10398:	83 ec 04             	sub    $0x4,%esp
   1039b:	ff 75 0c             	push   0xc(%ebp)
   1039e:	6a 00                	push   $0x0
   103a0:	50                   	push   %eax
   103a1:	e8 cd 22 00 00       	call   12673 <bitmap_alloc_nbits>
   103a6:	83 c4 10             	add    $0x10,%esp
   103a9:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (page_count >= 0) {
   103ac:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   103b0:	78 17                	js     103c9 <addr_alloc_page+0x53>
    // 计算出申请到的第一个页的起始地址
    addr = alloc->start + page_index * alloc->page_size;
   103b2:	8b 45 08             	mov    0x8(%ebp),%eax
   103b5:	8b 48 1c             	mov    0x1c(%eax),%ecx
   103b8:	8b 45 08             	mov    0x8(%ebp),%eax
   103bb:	8b 50 24             	mov    0x24(%eax),%edx
   103be:	8b 45 f0             	mov    -0x10(%ebp),%eax
   103c1:	0f af c2             	imul   %edx,%eax
   103c4:	01 c8                	add    %ecx,%eax
   103c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
  }

  mutex_unlock(&alloc->mutex);
   103c9:	8b 45 08             	mov    0x8(%ebp),%eax
   103cc:	83 ec 0c             	sub    $0xc,%esp
   103cf:	50                   	push   %eax
   103d0:	e8 e6 19 00 00       	call   11dbb <mutex_unlock>
   103d5:	83 c4 10             	add    $0x10,%esp

  return addr;
   103d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   103db:	c9                   	leave  
   103dc:	c3                   	ret    

000103dd <addr_free_page>:
 *
 * @param alloc
 * @param addr 第一个内存页的起始地址
 * @param page_count 内存页的数量
 */
static void addr_free_page(addr_alloc_t *alloc, uint32_t addr, int page_count) {
   103dd:	55                   	push   %ebp
   103de:	89 e5                	mov    %esp,%ebp
   103e0:	53                   	push   %ebx
   103e1:	83 ec 14             	sub    $0x14,%esp
  mutex_lock(&alloc->mutex);
   103e4:	8b 45 08             	mov    0x8(%ebp),%eax
   103e7:	83 ec 0c             	sub    $0xc,%esp
   103ea:	50                   	push   %eax
   103eb:	e8 3a 19 00 00       	call   11d2a <mutex_lock>
   103f0:	83 c4 10             	add    $0x10,%esp

  // 计算出第一个页在位图中的索引
  int page_index = (addr - alloc->start) / alloc->page_size;
   103f3:	8b 45 08             	mov    0x8(%ebp),%eax
   103f6:	8b 50 1c             	mov    0x1c(%eax),%edx
   103f9:	8b 45 0c             	mov    0xc(%ebp),%eax
   103fc:	29 d0                	sub    %edx,%eax
   103fe:	89 c1                	mov    %eax,%ecx
   10400:	8b 45 08             	mov    0x8(%ebp),%eax
   10403:	8b 58 24             	mov    0x24(%eax),%ebx
   10406:	89 c8                	mov    %ecx,%eax
   10408:	ba 00 00 00 00       	mov    $0x0,%edx
   1040d:	f7 f3                	div    %ebx
   1040f:	89 45 f4             	mov    %eax,-0xc(%ebp)

  bitmap_set_bit(&alloc->bitmap, page_index, page_count, 0);
   10412:	8b 45 08             	mov    0x8(%ebp),%eax
   10415:	83 c0 14             	add    $0x14,%eax
   10418:	6a 00                	push   $0x0
   1041a:	ff 75 10             	push   0x10(%ebp)
   1041d:	ff 75 f4             	push   -0xc(%ebp)
   10420:	50                   	push   %eax
   10421:	e8 24 21 00 00       	call   1254a <bitmap_set_bit>
   10426:	83 c4 10             	add    $0x10,%esp

  mutex_unlock(&alloc->mutex);
   10429:	8b 45 08             	mov    0x8(%ebp),%eax
   1042c:	83 ec 0c             	sub    $0xc,%esp
   1042f:	50                   	push   %eax
   10430:	e8 86 19 00 00       	call   11dbb <mutex_unlock>
   10435:	83 c4 10             	add    $0x10,%esp
}
   10438:	90                   	nop
   10439:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1043c:	c9                   	leave  
   1043d:	c3                   	ret    

0001043e <show_mem_info>:
/**
 * @brief  打印1m以内内存的可用空间
 * 
 * @param boot_info 
 */
static void show_mem_info(boot_info_t *boot_info) {
   1043e:	55                   	push   %ebp
   1043f:	89 e5                	mov    %esp,%ebp
   10441:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:");
   10444:	83 ec 0c             	sub    $0xc,%esp
   10447:	68 bc 31 01 00       	push   $0x131bc
   1044c:	e8 70 2c 00 00       	call   130c1 <log_printf>
   10451:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   10454:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1045b:	eb 29                	jmp    10486 <show_mem_info+0x48>
        log_printf("[%d]: 0x%x - 0x%x", i, boot_info->ram_region_cfg[i].start, boot_info->ram_region_cfg[i].size);
   1045d:	8b 45 08             	mov    0x8(%ebp),%eax
   10460:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10463:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   10467:	8b 45 08             	mov    0x8(%ebp),%eax
   1046a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   1046d:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   10470:	52                   	push   %edx
   10471:	50                   	push   %eax
   10472:	ff 75 f4             	push   -0xc(%ebp)
   10475:	68 c8 31 01 00       	push   $0x131c8
   1047a:	e8 42 2c 00 00       	call   130c1 <log_printf>
   1047f:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   10482:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10486:	8b 45 08             	mov    0x8(%ebp),%eax
   10489:	8b 40 50             	mov    0x50(%eax),%eax
   1048c:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   1048f:	7c cc                	jl     1045d <show_mem_info+0x1f>
    }

    log_printf("");
   10491:	83 ec 0c             	sub    $0xc,%esp
   10494:	68 da 31 01 00       	push   $0x131da
   10499:	e8 23 2c 00 00       	call   130c1 <log_printf>
   1049e:	83 c4 10             	add    $0x10,%esp
}
   104a1:	90                   	nop
   104a2:	c9                   	leave  
   104a3:	c3                   	ret    

000104a4 <total_mem_size>:
 * @brief  计算总的可用内存空间大小
 * 
 * @param boot_info 
 * @return uint32_t 
 */
static uint32_t total_mem_size(boot_info_t *boot_info) {
   104a4:	55                   	push   %ebp
   104a5:	89 e5                	mov    %esp,%ebp
   104a7:	83 ec 10             	sub    $0x10,%esp
    uint32_t mem_size = 0;
   104aa:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   104b1:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   104b8:	eb 11                	jmp    104cb <total_mem_size+0x27>
        mem_size += boot_info->ram_region_cfg[i].size;
   104ba:	8b 45 08             	mov    0x8(%ebp),%eax
   104bd:	8b 55 f8             	mov    -0x8(%ebp),%edx
   104c0:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
   104c4:	01 45 fc             	add    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   104c7:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   104cb:	8b 45 08             	mov    0x8(%ebp),%eax
   104ce:	8b 40 50             	mov    0x50(%eax),%eax
   104d1:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   104d4:	7c e4                	jl     104ba <total_mem_size+0x16>
    }

    return mem_size;
   104d6:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   104d9:	c9                   	leave  
   104da:	c3                   	ret    

000104db <find_pte>:
 *                 1：表示创建一个新页目录项，并为其分配一个新页作为页表
 *                 0: 返回0
 *                
 * @return pte_t* 索引到的页表项
 */
pte_t* find_pte(pde_t* page_dir, uint32_t vstart, int is_alloc) {
   104db:	55                   	push   %ebp
   104dc:	89 e5                	mov    %esp,%ebp
   104de:	53                   	push   %ebx
   104df:	83 ec 14             	sub    $0x14,%esp
  pte_t* page_table; //记录被索引的页表
  //1.通过虚拟地址高10位索引到对应的页目录项
  pde_t* pde = page_dir + pde_index(vstart);
   104e2:	ff 75 0c             	push   0xc(%ebp)
   104e5:	e8 f3 fd ff ff       	call   102dd <pde_index>
   104ea:	83 c4 04             	add    $0x4,%esp
   104ed:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   104f4:	8b 45 08             	mov    0x8(%ebp),%eax
   104f7:	01 d0                	add    %edx,%eax
   104f9:	89 45 f0             	mov    %eax,-0x10(%ebp)

  //2.判断该页目录项是否已存在，及该页目录项是否已指向一个被分配的页表
  if (pde->present) { //该页目录项存在，及存在对应的页表，可以索引到对应的页表
   104fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   104ff:	0f b6 00             	movzbl (%eax),%eax
   10502:	83 e0 01             	and    $0x1,%eax
   10505:	84 c0                	test   %al,%al
   10507:	74 13                	je     1051c <find_pte+0x41>
    page_table = (pte_t*)pde_to_pt_addr(pde);
   10509:	ff 75 f0             	push   -0x10(%ebp)
   1050c:	e8 e7 fd ff ff       	call   102f8 <pde_to_pt_addr>
   10511:	83 c4 04             	add    $0x4,%esp
   10514:	89 45 f4             	mov    %eax,-0xc(%ebp)
   10517:	e9 ad 00 00 00       	jmp    105c9 <find_pte+0xee>
  } else {//该目录项不存在内存中，及对应的页表不存在
    if (is_alloc == 0) {  //不为该目录项创建对应的页表
   1051c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10520:	75 0a                	jne    1052c <find_pte+0x51>
      return (pte_t*)0;
   10522:	b8 00 00 00 00       	mov    $0x0,%eax
   10527:	e9 b7 00 00 00       	jmp    105e3 <find_pte+0x108>
    }

    //为该目录项分配一页作为页表
    uint32_t pg_addr = addr_alloc_page(&paddr_alloc, 1);
   1052c:	83 ec 08             	sub    $0x8,%esp
   1052f:	6a 01                	push   $0x1
   10531:	68 00 40 01 00       	push   $0x14000
   10536:	e8 3b fe ff ff       	call   10376 <addr_alloc_page>
   1053b:	83 c4 10             	add    $0x10,%esp
   1053e:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pg_addr == 0) { //分配失败
   10541:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   10545:	75 0a                	jne    10551 <find_pte+0x76>
      return (pte_t*)0;
   10547:	b8 00 00 00 00       	mov    $0x0,%eax
   1054c:	e9 92 00 00 00       	jmp    105e3 <find_pte+0x108>
    }

    //分配成功, 索引对应的页表
    page_table = (pte_t*)pg_addr;
   10551:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10554:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_memset(page_table, 0, MEM_PAGE_SIZE);
   10557:	83 ec 04             	sub    $0x4,%esp
   1055a:	68 00 10 00 00       	push   $0x1000
   1055f:	6a 00                	push   $0x0
   10561:	ff 75 f4             	push   -0xc(%ebp)
   10564:	e8 8b 23 00 00       	call   128f4 <kernel_memset>
   10569:	83 c4 10             	add    $0x10,%esp

    //将该页表的起始地址放入对应的页目录项中并放入页目录表中，方便后续索引到该页表
    page_dir[pde_index(vstart)].phy_pt_addr = (uint32_t)page_table >> 12;
   1056c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1056f:	c1 e8 0c             	shr    $0xc,%eax
   10572:	89 c3                	mov    %eax,%ebx
   10574:	83 ec 0c             	sub    $0xc,%esp
   10577:	ff 75 0c             	push   0xc(%ebp)
   1057a:	e8 5e fd ff ff       	call   102dd <pde_index>
   1057f:	83 c4 10             	add    $0x10,%esp
   10582:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10589:	8b 45 08             	mov    0x8(%ebp),%eax
   1058c:	01 d0                	add    %edx,%eax
   1058e:	81 e3 ff ff 0f 00    	and    $0xfffff,%ebx
   10594:	89 da                	mov    %ebx,%edx
   10596:	89 d1                	mov    %edx,%ecx
   10598:	c1 e1 0c             	shl    $0xc,%ecx
   1059b:	8b 10                	mov    (%eax),%edx
   1059d:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
   105a3:	09 ca                	or     %ecx,%edx
   105a5:	89 10                	mov    %edx,(%eax)
    page_dir[pde_index(vstart)].present = 1;
   105a7:	83 ec 0c             	sub    $0xc,%esp
   105aa:	ff 75 0c             	push   0xc(%ebp)
   105ad:	e8 2b fd ff ff       	call   102dd <pde_index>
   105b2:	83 c4 10             	add    $0x10,%esp
   105b5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   105bc:	8b 45 08             	mov    0x8(%ebp),%eax
   105bf:	01 d0                	add    %edx,%eax
   105c1:	0f b6 10             	movzbl (%eax),%edx
   105c4:	83 ca 01             	or     $0x1,%edx
   105c7:	88 10                	mov    %dl,(%eax)

  }

  //3.返回在该页表中索引到的页表项
  return page_table + pte_index(vstart);
   105c9:	83 ec 0c             	sub    $0xc,%esp
   105cc:	ff 75 0c             	push   0xc(%ebp)
   105cf:	e8 14 fd ff ff       	call   102e8 <pte_index>
   105d4:	83 c4 10             	add    $0x10,%esp
   105d7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   105de:	8b 45 f4             	mov    -0xc(%ebp),%eax
   105e1:	01 d0                	add    %edx,%eax

}
   105e3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   105e6:	c9                   	leave  
   105e7:	c3                   	ret    

000105e8 <memory_creat_map>:
 * @param pstart 物理地址的起始地址
 * @param page_count 分页数量
 * @param privilege 该段虚拟地址的特权级
 * @return int 
 */
int  memory_creat_map(pde_t *page_dir, uint32_t vstart, uint32_t pstart, int page_count, uint32_t privilege) {
   105e8:	55                   	push   %ebp
   105e9:	89 e5                	mov    %esp,%ebp
   105eb:	83 ec 18             	sub    $0x18,%esp
  //1.为每一页创建对应的页表项
  for (int i = 0; i < page_count; ++i) {
   105ee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   105f5:	e9 a8 00 00 00       	jmp    106a2 <memory_creat_map+0xba>

    //打印调试信息
    log_printf("creat map: v-0x%x, p-0x%x, privilege:0x%x", vstart, pstart, privilege);
   105fa:	ff 75 18             	push   0x18(%ebp)
   105fd:	ff 75 10             	push   0x10(%ebp)
   10600:	ff 75 0c             	push   0xc(%ebp)
   10603:	68 dc 31 01 00       	push   $0x131dc
   10608:	e8 b4 2a 00 00       	call   130c1 <log_printf>
   1060d:	83 c4 10             	add    $0x10,%esp

    //2.通过虚拟地址在页目录表中获取对应的页目录项指向的页表,
    //且当没有该页目录项时，为其分配一个页作为页表并让一个目录项指向该页表
    pte_t *pte = find_pte(page_dir, vstart, 1);
   10610:	83 ec 04             	sub    $0x4,%esp
   10613:	6a 01                	push   $0x1
   10615:	ff 75 0c             	push   0xc(%ebp)
   10618:	ff 75 08             	push   0x8(%ebp)
   1061b:	e8 bb fe ff ff       	call   104db <find_pte>
   10620:	83 c4 10             	add    $0x10,%esp
   10623:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pte == (pte_t*)0) {//没有找到可用的页表项
   10626:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1062a:	75 17                	jne    10643 <memory_creat_map+0x5b>
    log_printf("creat pte failed pte == 0");
   1062c:	83 ec 0c             	sub    $0xc,%esp
   1062f:	68 06 32 01 00       	push   $0x13206
   10634:	e8 88 2a 00 00       	call   130c1 <log_printf>
   10639:	83 c4 10             	add    $0x10,%esp
      return -1;
   1063c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10641:	eb 6b                	jmp    106ae <memory_creat_map+0xc6>
    }

    log_printf("pte addr : 0x%x", (uint32_t)pte);
   10643:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10646:	83 ec 08             	sub    $0x8,%esp
   10649:	50                   	push   %eax
   1064a:	68 20 32 01 00       	push   $0x13220
   1064f:	e8 6d 2a 00 00       	call   130c1 <log_printf>
   10654:	83 c4 10             	add    $0x10,%esp
    //3.确保该页并未已存在内存中
    ASSERT(pte->present == 0);
   10657:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1065a:	0f b6 00             	movzbl (%eax),%eax
   1065d:	83 e0 01             	and    $0x1,%eax
   10660:	84 c0                	test   %al,%al
   10662:	74 1c                	je     10680 <memory_creat_map+0x98>
   10664:	68 30 32 01 00       	push   $0x13230
   10669:	68 e0 32 01 00       	push   $0x132e0
   1066e:	68 bf 00 00 00       	push   $0xbf
   10673:	68 44 32 01 00       	push   $0x13244
   10678:	e8 75 1d 00 00       	call   123f2 <pannic>
   1067d:	83 c4 10             	add    $0x10,%esp

    //4.在页表项中创建对应的映射关系
    pte->v = pstart | privilege | PTE_P;
   10680:	8b 45 10             	mov    0x10(%ebp),%eax
   10683:	0b 45 18             	or     0x18(%ebp),%eax
   10686:	83 c8 01             	or     $0x1,%eax
   10689:	89 c2                	mov    %eax,%edx
   1068b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1068e:	89 10                	mov    %edx,(%eax)

    //5.切换为下一页
    vstart += MEM_PAGE_SIZE;
   10690:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    pstart += MEM_PAGE_SIZE;
   10697:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
  for (int i = 0; i < page_count; ++i) {
   1069e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   106a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   106a5:	3b 45 14             	cmp    0x14(%ebp),%eax
   106a8:	0f 8c 4c ff ff ff    	jl     105fa <memory_creat_map+0x12>

  }
 }
   106ae:	c9                   	leave  
   106af:	c3                   	ret    

000106b0 <create_kernal_table>:

//TODO:编写函数注释
void create_kernal_table(void) {
   106b0:	55                   	push   %ebp
   106b1:	89 e5                	mov    %esp,%ebp
   106b3:	83 ec 28             	sub    $0x28,%esp
    {&s_text, &e_text, &s_text, 0},                 //只读段的映射关系(内核.text和.rodata段)
    {&s_data, (void*)MEM_EBDA_START, &s_data, 0}    //可读写段的映射关系，一直到bios的拓展数据区(内核.data与.bss段再加上剩余的可用数据区域)

  };

  for (int i = 0; i < sizeof(kernal_map) / sizeof(kernal_map[0]); ++i) {
   106b6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   106bd:	eb 6f                	jmp    1072e <create_kernal_table+0x7e>
    memory_map_t *map = kernal_map + i;
   106bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
   106c2:	c1 e0 04             	shl    $0x4,%eax
   106c5:	05 c0 3d 01 00       	add    $0x13dc0,%eax
   106ca:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //将虚拟地址的起始地址按页大小4kb对齐，为了不丢失原有的虚拟地址空间，所以向下对齐vstart
    uint32_t vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   106cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106d0:	8b 00                	mov    (%eax),%eax
   106d2:	68 00 10 00 00       	push   $0x1000
   106d7:	50                   	push   %eax
   106d8:	e8 d0 fb ff ff       	call   102ad <down2>
   106dd:	83 c4 08             	add    $0x8,%esp
   106e0:	89 45 ec             	mov    %eax,-0x14(%ebp)
    //将虚拟地址的结束地址按页大小4kb对齐, 为了不丢失原有的虚拟地址空间，所以向上对齐vend
    uint32_t vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   106e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106e6:	8b 40 04             	mov    0x4(%eax),%eax
   106e9:	68 00 10 00 00       	push   $0x1000
   106ee:	50                   	push   %eax
   106ef:	e8 c6 fb ff ff       	call   102ba <up2>
   106f4:	83 c4 08             	add    $0x8,%esp
   106f7:	89 45 e8             	mov    %eax,-0x18(%ebp)
    //计算该虚拟空间需要的页数
    int page_count = (vend - vstart) / MEM_PAGE_SIZE;
   106fa:	8b 45 e8             	mov    -0x18(%ebp),%eax
   106fd:	2b 45 ec             	sub    -0x14(%ebp),%eax
   10700:	c1 e8 0c             	shr    $0xc,%eax
   10703:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    //创建内存映射关系
    memory_creat_map(kernel_page_dir, vstart, (uint32_t)map->pstart, page_count, map->privilege);
   10706:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10709:	8b 40 0c             	mov    0xc(%eax),%eax
   1070c:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1070f:	8b 52 08             	mov    0x8(%edx),%edx
   10712:	83 ec 0c             	sub    $0xc,%esp
   10715:	50                   	push   %eax
   10716:	ff 75 e4             	push   -0x1c(%ebp)
   10719:	52                   	push   %edx
   1071a:	ff 75 ec             	push   -0x14(%ebp)
   1071d:	68 00 50 01 00       	push   $0x15000
   10722:	e8 c1 fe ff ff       	call   105e8 <memory_creat_map>
   10727:	83 c4 20             	add    $0x20,%esp
  for (int i = 0; i < sizeof(kernal_map) / sizeof(kernal_map[0]); ++i) {
   1072a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1072e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10731:	83 f8 02             	cmp    $0x2,%eax
   10734:	76 89                	jbe    106bf <create_kernal_table+0xf>


  }
}
   10736:	90                   	nop
   10737:	90                   	nop
   10738:	c9                   	leave  
   10739:	c3                   	ret    

0001073a <memory_init>:
/**
 * @brief  初始化化内存
 *
 * @param boot_info cpu在实模式下检测到的可用内存对象
 */
void memory_init(boot_info_t *boot_info) {
   1073a:	55                   	push   %ebp
   1073b:	89 e5                	mov    %esp,%ebp
   1073d:	83 ec 18             	sub    $0x18,%esp

  
    //声明紧邻在内核bss段后面的空间地址，用于存储位图，该变量定义在kernel.lds中
    extern char mem_free_start;

    log_printf("memory init");
   10740:	83 ec 0c             	sub    $0xc,%esp
   10743:	68 7b 32 01 00       	push   $0x1327b
   10748:	e8 74 29 00 00       	call   130c1 <log_printf>
   1074d:	83 c4 10             	add    $0x10,%esp

    log_printf("mem_free_start: 0x%x", &mem_free_start);
   10750:	83 ec 08             	sub    $0x8,%esp
   10753:	68 90 2d 03 00       	push   $0x32d90
   10758:	68 87 32 01 00       	push   $0x13287
   1075d:	e8 5f 29 00 00       	call   130c1 <log_printf>
   10762:	83 c4 10             	add    $0x10,%esp

    show_mem_info(boot_info);
   10765:	83 ec 0c             	sub    $0xc,%esp
   10768:	ff 75 08             	push   0x8(%ebp)
   1076b:	e8 ce fc ff ff       	call   1043e <show_mem_info>
   10770:	83 c4 10             	add    $0x10,%esp
    
    //去除保护模式下1mb大小后可用的内存空间大小
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   10773:	83 ec 0c             	sub    $0xc,%esp
   10776:	ff 75 08             	push   0x8(%ebp)
   10779:	e8 26 fd ff ff       	call   104a4 <total_mem_size>
   1077e:	83 c4 10             	add    $0x10,%esp
   10781:	2d 00 00 10 00       	sub    $0x100000,%eax
   10786:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将可用空间大小下调到页大小的整数倍
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);
   10789:	83 ec 08             	sub    $0x8,%esp
   1078c:	68 00 10 00 00       	push   $0x1000
   10791:	ff 75 f4             	push   -0xc(%ebp)
   10794:	e8 14 fb ff ff       	call   102ad <down2>
   10799:	83 c4 10             	add    $0x10,%esp
   1079c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    log_printf("free memory: 0x%x, size: 0x%x", MEM_EXT_START, mem_up1MB_free);
   1079f:	83 ec 04             	sub    $0x4,%esp
   107a2:	ff 75 f4             	push   -0xc(%ebp)
   107a5:	68 00 00 10 00       	push   $0x100000
   107aa:	68 9c 32 01 00       	push   $0x1329c
   107af:	e8 0d 29 00 00       	call   130c1 <log_printf>
   107b4:	83 c4 10             	add    $0x10,%esp

    //mem_free_start被分配的地址在链接文件中定义，紧邻着内核的.bss段
    uint8_t *mem_free = (uint8_t*)&mem_free_start;
   107b7:	c7 45 f0 90 2d 03 00 	movl   $0x32d90,-0x10(%ebp)

    //用paddr_alloc，内存页分配对象管理1mb以上的所有空闲空间，页大小为MEM_PAGE_SIZE=4kb
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   107be:	83 ec 0c             	sub    $0xc,%esp
   107c1:	68 00 10 00 00       	push   $0x1000
   107c6:	ff 75 f4             	push   -0xc(%ebp)
   107c9:	68 00 00 10 00       	push   $0x100000
   107ce:	ff 75 f0             	push   -0x10(%ebp)
   107d1:	68 00 40 01 00       	push   $0x14000
   107d6:	e8 3e fb ff ff       	call   10319 <addr_alloc_init>
   107db:	83 c4 20             	add    $0x20,%esp

    //跳过存储位图的内存区域, 位图的每一位表示一个页，计算位图所站的字节数即可跳过该区域
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);  
   107de:	a1 20 40 01 00       	mov    0x14020,%eax
   107e3:	c1 e8 0c             	shr    $0xc,%eax
   107e6:	83 ec 0c             	sub    $0xc,%esp
   107e9:	50                   	push   %eax
   107ea:	e8 39 1c 00 00       	call   12428 <bitmap_byte_count>
   107ef:	83 c4 10             	add    $0x10,%esp
   107f2:	01 45 f0             	add    %eax,-0x10(%ebp)

    //判断mem_free是否已越过可用数据区
    ASSERT(mem_free < (uint8_t*)MEM_EBDA_START);
   107f5:	81 7d f0 ff fb 09 00 	cmpl   $0x9fbff,-0x10(%ebp)
   107fc:	76 1c                	jbe    1081a <memory_init+0xe0>
   107fe:	68 bc 32 01 00       	push   $0x132bc
   10803:	68 f4 32 01 00       	push   $0x132f4
   10808:	68 0d 01 00 00       	push   $0x10d
   1080d:	68 44 32 01 00       	push   $0x13244
   10812:	e8 db 1b 00 00       	call   123f2 <pannic>
   10817:	83 c4 10             	add    $0x10,%esp
    
    //创建内核的页表映射
    create_kernal_table();
   1081a:	e8 91 fe ff ff       	call   106b0 <create_kernal_table>

    //设置内核的页目录表到CR3寄存器，并开启分页机制
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   1081f:	b8 00 50 01 00       	mov    $0x15000,%eax
   10824:	83 ec 0c             	sub    $0xc,%esp
   10827:	50                   	push   %eax
   10828:	e8 db fa ff ff       	call   10308 <mmu_set_page_dir>
   1082d:	83 c4 10             	add    $0x10,%esp
   10830:	90                   	nop
   10831:	c9                   	leave  
   10832:	c3                   	ret    

00010833 <list_node_init>:
    list_node_t * first;
    list_node_t * last;
    int size;
}list_t;

static inline void list_node_init(list_node_t *node) {
   10833:	55                   	push   %ebp
   10834:	89 e5                	mov    %esp,%ebp
   10836:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   10839:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1083d:	75 19                	jne    10858 <list_node_init+0x25>
   1083f:	68 00 33 01 00       	push   $0x13300
   10844:	68 d4 33 01 00       	push   $0x133d4
   10849:	6a 20                	push   $0x20
   1084b:	68 18 33 01 00       	push   $0x13318
   10850:	e8 9d 1b 00 00       	call   123f2 <pannic>
   10855:	83 c4 10             	add    $0x10,%esp
    node->pre = node->next = (list_node_t*)0;
   10858:	8b 45 08             	mov    0x8(%ebp),%eax
   1085b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   10862:	8b 45 08             	mov    0x8(%ebp),%eax
   10865:	8b 50 04             	mov    0x4(%eax),%edx
   10868:	8b 45 08             	mov    0x8(%ebp),%eax
   1086b:	89 10                	mov    %edx,(%eax)
}
   1086d:	90                   	nop
   1086e:	c9                   	leave  
   1086f:	c3                   	ret    

00010870 <list_node_next>:
    ASSERT(node != (list_node_t*)0);

    return node->pre;
}

static inline list_node_t *list_node_next(list_node_t *node) {
   10870:	55                   	push   %ebp
   10871:	89 e5                	mov    %esp,%ebp
   10873:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   10876:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1087a:	75 19                	jne    10895 <list_node_next+0x25>
   1087c:	68 00 33 01 00       	push   $0x13300
   10881:	68 34 34 01 00       	push   $0x13434
   10886:	6a 2b                	push   $0x2b
   10888:	68 18 33 01 00       	push   $0x13318
   1088d:	e8 60 1b 00 00       	call   123f2 <pannic>
   10892:	83 c4 10             	add    $0x10,%esp

    return node->next;
   10895:	8b 45 08             	mov    0x8(%ebp),%eax
   10898:	8b 40 04             	mov    0x4(%eax),%eax
}
   1089b:	c9                   	leave  
   1089c:	c3                   	ret    

0001089d <list_init>:

static inline void list_init(list_t *list) {
   1089d:	55                   	push   %ebp
   1089e:	89 e5                	mov    %esp,%ebp
   108a0:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   108a3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   108a7:	75 19                	jne    108c2 <list_init+0x25>
   108a9:	68 56 33 01 00       	push   $0x13356
   108ae:	68 e4 33 01 00       	push   $0x133e4
   108b3:	6a 31                	push   $0x31
   108b5:	68 18 33 01 00       	push   $0x13318
   108ba:	e8 33 1b 00 00       	call   123f2 <pannic>
   108bf:	83 c4 10             	add    $0x10,%esp

    list->first = list->last = (list_node_t*)0;
   108c2:	8b 45 08             	mov    0x8(%ebp),%eax
   108c5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   108cc:	8b 45 08             	mov    0x8(%ebp),%eax
   108cf:	8b 50 04             	mov    0x4(%eax),%edx
   108d2:	8b 45 08             	mov    0x8(%ebp),%eax
   108d5:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   108d7:	8b 45 08             	mov    0x8(%ebp),%eax
   108da:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   108e1:	90                   	nop
   108e2:	c9                   	leave  
   108e3:	c3                   	ret    

000108e4 <list_is_empty>:

static inline int list_is_empty(list_t *list) {
   108e4:	55                   	push   %ebp
   108e5:	89 e5                	mov    %esp,%ebp
   108e7:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   108ea:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   108ee:	75 19                	jne    10909 <list_is_empty+0x25>
   108f0:	68 56 33 01 00       	push   $0x13356
   108f5:	68 44 34 01 00       	push   $0x13444
   108fa:	6a 38                	push   $0x38
   108fc:	68 18 33 01 00       	push   $0x13318
   10901:	e8 ec 1a 00 00       	call   123f2 <pannic>
   10906:	83 c4 10             	add    $0x10,%esp

    return list->size == 0;
   10909:	8b 45 08             	mov    0x8(%ebp),%eax
   1090c:	8b 40 08             	mov    0x8(%eax),%eax
   1090f:	85 c0                	test   %eax,%eax
   10911:	0f 94 c0             	sete   %al
   10914:	0f b6 c0             	movzbl %al,%eax
}
   10917:	c9                   	leave  
   10918:	c3                   	ret    

00010919 <list_get_size>:

static inline int list_get_size(list_t *list) {
   10919:	55                   	push   %ebp
   1091a:	89 e5                	mov    %esp,%ebp
   1091c:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1091f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10923:	75 19                	jne    1093e <list_get_size+0x25>
   10925:	68 56 33 01 00       	push   $0x13356
   1092a:	68 24 34 01 00       	push   $0x13424
   1092f:	6a 3e                	push   $0x3e
   10931:	68 18 33 01 00       	push   $0x13318
   10936:	e8 b7 1a 00 00       	call   123f2 <pannic>
   1093b:	83 c4 10             	add    $0x10,%esp

    return list->size;
   1093e:	8b 45 08             	mov    0x8(%ebp),%eax
   10941:	8b 40 08             	mov    0x8(%eax),%eax
}
   10944:	c9                   	leave  
   10945:	c3                   	ret    

00010946 <list_get_first>:

static inline list_node_t *list_get_first(list_t *list) {
   10946:	55                   	push   %ebp
   10947:	89 e5                	mov    %esp,%ebp
   10949:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1094c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10950:	75 19                	jne    1096b <list_get_first+0x25>
   10952:	68 56 33 01 00       	push   $0x13356
   10957:	68 14 34 01 00       	push   $0x13414
   1095c:	6a 44                	push   $0x44
   1095e:	68 18 33 01 00       	push   $0x13318
   10963:	e8 8a 1a 00 00       	call   123f2 <pannic>
   10968:	83 c4 10             	add    $0x10,%esp

    return list->first;
   1096b:	8b 45 08             	mov    0x8(%ebp),%eax
   1096e:	8b 00                	mov    (%eax),%eax
}
   10970:	c9                   	leave  
   10971:	c3                   	ret    

00010972 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   10972:	55                   	push   %ebp
   10973:	89 e5                	mov    %esp,%ebp
   10975:	f4                   	hlt    
   10976:	90                   	nop
   10977:	5d                   	pop    %ebp
   10978:	c3                   	ret    

00010979 <far_jump>:
 * @brief  远跳转，当跳转发生在TSS段之间时，cpu将会保存状态到当前TR寄存器指向的TSS段
 *
 * @param selector 选择子
 * @param offset 跳转的偏移量
 */
static inline void far_jump(uint32_t selector, uint32_t offset) {
   10979:	55                   	push   %ebp
   1097a:	89 e5                	mov    %esp,%ebp
   1097c:	83 ec 10             	sub    $0x10,%esp
  // 传入远跳转需要的参数, 即cs = selector, eip = offset 
  uint32_t addr[] = {offset, selector};  
   1097f:	8b 45 0c             	mov    0xc(%ebp),%eax
   10982:	89 45 f8             	mov    %eax,-0x8(%ebp)
   10985:	8b 45 08             	mov    0x8(%ebp),%eax
   10988:	89 45 fc             	mov    %eax,-0x4(%ebp)

  __asm__ __volatile__("ljmpl *(%[a])" : : [a] "r"(addr));
   1098b:	8d 45 f8             	lea    -0x8(%ebp),%eax
   1098e:	ff 28                	ljmp   *(%eax)
}
   10990:	90                   	nop
   10991:	c9                   	leave  
   10992:	c3                   	ret    

00010993 <write_tr>:
 * @brief   写入当前任务的TSS段描述符的选择子到TR寄存器中，告诉cpu当前段的TSS位置
 *          以便在进行任务切换时，将状态保存到该TSS段中
 * 
 * @param tss_selector 准备运行的任务的TSS段的选择子
 */
static inline void write_tr(uint16_t tss_selector) {
   10993:	55                   	push   %ebp
   10994:	89 e5                	mov    %esp,%ebp
   10996:	83 ec 04             	sub    $0x4,%esp
   10999:	8b 45 08             	mov    0x8(%ebp),%eax
   1099c:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  __asm__ __volatile__("ltr %[v]" : : [v]"r"(tss_selector));
   109a0:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   109a4:	0f 00 d8             	ltr    %ax
}
   109a7:	90                   	nop
   109a8:	c9                   	leave  
   109a9:	c3                   	ret    

000109aa <switch_to_tss>:

//定义全局唯一的任务管理器对象
static task_manager_t task_manager;


static void switch_to_tss(uint16_t tss_selector) {
   109aa:	55                   	push   %ebp
   109ab:	89 e5                	mov    %esp,%ebp
   109ad:	83 ec 04             	sub    $0x4,%esp
   109b0:	8b 45 08             	mov    0x8(%ebp),%eax
   109b3:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    //进行远跳转，让cpu访问该tss段的描述符，cpu将重启到之前运行该tss对应的任务的状态继续运行该任务
    far_jump(tss_selector, 0);
   109b7:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   109bb:	6a 00                	push   $0x0
   109bd:	50                   	push   %eax
   109be:	e8 b6 ff ff ff       	call   10979 <far_jump>
   109c3:	83 c4 08             	add    $0x8,%esp
}
   109c6:	90                   	nop
   109c7:	c9                   	leave  
   109c8:	c3                   	ret    

000109c9 <task_switch_from_to>:
 * @brief  将任务从from切换到to
 * 
 * @param from 切换前的任务
 * @param to 切换后的任务
 */
void task_switch_from_to(task_t *from, task_t *to) {
   109c9:	55                   	push   %ebp
   109ca:	89 e5                	mov    %esp,%ebp
    //跳转到对应的tss段读取并恢复cpu任务状态
    switch_to_tss(to->tss_selector);
   109cc:	8b 45 0c             	mov    0xc(%ebp),%eax
   109cf:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
   109d5:	0f b7 c0             	movzwl %ax,%eax
   109d8:	50                   	push   %eax
   109d9:	e8 cc ff ff ff       	call   109aa <switch_to_tss>
   109de:	83 c4 04             	add    $0x4,%esp
}
   109e1:	90                   	nop
   109e2:	c9                   	leave  
   109e3:	c3                   	ret    

000109e4 <tss_init>:
 * 
 * @param task 需要初始化的任务对象
 * @param entry 任务入口地址
 * @param esp 任务所用的栈顶指针
 */
static void tss_init(task_t *task, uint32_t entry, uint32_t esp) {
   109e4:	55                   	push   %ebp
   109e5:	89 e5                	mov    %esp,%ebp
   109e7:	83 ec 18             	sub    $0x18,%esp

    //1.将tss段的值置空
    kernel_memset(&task->tss, 0, sizeof(task->tss));
   109ea:	8b 45 08             	mov    0x8(%ebp),%eax
   109ed:	83 c0 48             	add    $0x48,%eax
   109f0:	83 ec 04             	sub    $0x4,%esp
   109f3:	6a 68                	push   $0x68
   109f5:	6a 00                	push   $0x0
   109f7:	50                   	push   %eax
   109f8:	e8 f7 1e 00 00       	call   128f4 <kernel_memset>
   109fd:	83 c4 10             	add    $0x10,%esp

    //2.设置eip，即任务的起始地址
    task->tss.eip = entry;
   10a00:	8b 45 08             	mov    0x8(%ebp),%eax
   10a03:	8b 55 0c             	mov    0xc(%ebp),%edx
   10a06:	89 50 68             	mov    %edx,0x68(%eax)

    //3.根据任务的特权级设置任务所使用的栈空间
    task->tss.esp = task->tss.esp0 = esp;
   10a09:	8b 45 08             	mov    0x8(%ebp),%eax
   10a0c:	8b 55 10             	mov    0x10(%ebp),%edx
   10a0f:	89 50 4c             	mov    %edx,0x4c(%eax)
   10a12:	8b 45 08             	mov    0x8(%ebp),%eax
   10a15:	8b 50 4c             	mov    0x4c(%eax),%edx
   10a18:	8b 45 08             	mov    0x8(%ebp),%eax
   10a1b:	89 90 80 00 00 00    	mov    %edx,0x80(%eax)

    //4.平坦模型，初始化栈空间段寄存器
    task->tss.ss = task->tss.ss0 = KERNEL_SELECTOR_DS;
   10a21:	8b 45 08             	mov    0x8(%ebp),%eax
   10a24:	c7 40 50 10 00 00 00 	movl   $0x10,0x50(%eax)
   10a2b:	8b 45 08             	mov    0x8(%ebp),%eax
   10a2e:	8b 50 50             	mov    0x50(%eax),%edx
   10a31:	8b 45 08             	mov    0x8(%ebp),%eax
   10a34:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)

    //5. 平坦模型，初始其余化段寄存器
    task->tss.es = task->tss.fs = task->tss.gs = task->tss.ds = KERNEL_SELECTOR_DS;
   10a3a:	8b 45 08             	mov    0x8(%ebp),%eax
   10a3d:	c7 80 9c 00 00 00 10 	movl   $0x10,0x9c(%eax)
   10a44:	00 00 00 
   10a47:	8b 45 08             	mov    0x8(%ebp),%eax
   10a4a:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
   10a50:	8b 45 08             	mov    0x8(%ebp),%eax
   10a53:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
   10a59:	8b 45 08             	mov    0x8(%ebp),%eax
   10a5c:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
   10a62:	8b 45 08             	mov    0x8(%ebp),%eax
   10a65:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
   10a6b:	8b 45 08             	mov    0x8(%ebp),%eax
   10a6e:	8b 90 a0 00 00 00    	mov    0xa0(%eax),%edx
   10a74:	8b 45 08             	mov    0x8(%ebp),%eax
   10a77:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)

    //6.平坦模型，初始化代码段寄存器
    task->tss.cs = KERNEL_SELECTOR_CS;
   10a7d:	8b 45 08             	mov    0x8(%ebp),%eax
   10a80:	c7 80 94 00 00 00 08 	movl   $0x8,0x94(%eax)
   10a87:	00 00 00 

    //7.初始化eflags寄存器，使cpu中断保持开启
    task->tss.eflags = EFLAGS_DEFAULT_1 | EFLAGS_IF;
   10a8a:	8b 45 08             	mov    0x8(%ebp),%eax
   10a8d:	c7 40 6c 02 02 00 00 	movl   $0x202,0x6c(%eax)

    //8.将该TSS段绑定到GDT中的某个段描述符
    uint32_t tss_selector = gdt_alloc_desc();
   10a94:	e8 0f 07 00 00       	call   111a8 <gdt_alloc_desc>
   10a99:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (tss_selector < 0) {
        log_printf("alloc tss failed!");
        return;
    }

    segment_desc_set(tss_selector, (uint32_t)&task->tss, sizeof(task->tss), 
   10a9c:	8b 45 08             	mov    0x8(%ebp),%eax
   10a9f:	83 c0 48             	add    $0x48,%eax
   10aa2:	89 c2                	mov    %eax,%edx
   10aa4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10aa7:	0f b7 c0             	movzwl %ax,%eax
   10aaa:	68 89 00 00 00       	push   $0x89
   10aaf:	6a 68                	push   $0x68
   10ab1:	52                   	push   %edx
   10ab2:	50                   	push   %eax
   10ab3:	e8 9d 05 00 00       	call   11055 <segment_desc_set>
   10ab8:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_TYPE_TSS);


    //9.记录tss绑定到的描述符的选择子
    task->tss_selector = tss_selector;
   10abb:	8b 45 08             	mov    0x8(%ebp),%eax
   10abe:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10ac1:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
}
   10ac7:	c9                   	leave  
   10ac8:	c3                   	ret    

00010ac9 <task_init>:
 * @param task 任务对象
 * @param entry 任务的入口地址
 * @param esp 任务指行时所用的栈顶指针
 * @return int 
 */
void task_init(task_t *task, const char* name, uint32_t entry, uint32_t esp) {
   10ac9:	55                   	push   %ebp
   10aca:	89 e5                	mov    %esp,%ebp
   10acc:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t*)0);
   10acf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10ad3:	75 19                	jne    10aee <task_init+0x25>
   10ad5:	68 69 33 01 00       	push   $0x13369
   10ada:	68 c8 33 01 00       	push   $0x133c8
   10adf:	6a 60                	push   $0x60
   10ae1:	68 7c 33 01 00       	push   $0x1337c
   10ae6:	e8 07 19 00 00       	call   123f2 <pannic>
   10aeb:	83 c4 10             	add    $0x10,%esp
    //1.初始化任务TSS段
    tss_init(task, entry, esp);
   10aee:	83 ec 04             	sub    $0x4,%esp
   10af1:	ff 75 14             	push   0x14(%ebp)
   10af4:	ff 75 10             	push   0x10(%ebp)
   10af7:	ff 75 08             	push   0x8(%ebp)
   10afa:	e8 e5 fe ff ff       	call   109e4 <tss_init>
   10aff:	83 c4 10             	add    $0x10,%esp

    //2.初始化任务名称
    kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   10b02:	8b 45 08             	mov    0x8(%ebp),%eax
   10b05:	83 c0 10             	add    $0x10,%eax
   10b08:	83 ec 04             	sub    $0x4,%esp
   10b0b:	6a 20                	push   $0x20
   10b0d:	ff 75 0c             	push   0xc(%ebp)
   10b10:	50                   	push   %eax
   10b11:	e8 9f 1c 00 00       	call   127b5 <kernel_strncpy>
   10b16:	83 c4 10             	add    $0x10,%esp

    //3.初始化任务队列节点及就绪队列节点
    list_node_init(&task->ready_node);
   10b19:	8b 45 08             	mov    0x8(%ebp),%eax
   10b1c:	83 c0 30             	add    $0x30,%eax
   10b1f:	83 ec 0c             	sub    $0xc,%esp
   10b22:	50                   	push   %eax
   10b23:	e8 0b fd ff ff       	call   10833 <list_node_init>
   10b28:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->task_node);
   10b2b:	8b 45 08             	mov    0x8(%ebp),%eax
   10b2e:	83 c0 38             	add    $0x38,%eax
   10b31:	83 ec 0c             	sub    $0xc,%esp
   10b34:	50                   	push   %eax
   10b35:	e8 f9 fc ff ff       	call   10833 <list_node_init>
   10b3a:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   10b3d:	8b 45 08             	mov    0x8(%ebp),%eax
   10b40:	83 c0 40             	add    $0x40,%eax
   10b43:	83 ec 0c             	sub    $0xc,%esp
   10b46:	50                   	push   %eax
   10b47:	e8 e7 fc ff ff       	call   10833 <list_node_init>
   10b4c:	83 c4 10             	add    $0x10,%esp

    //4.初始化最大时间片数与当前拥有时间片数,以及延时时间片数
    task->slice_max = task->slice_curr = TASK_TIME_SLICE_DEFAULT;
   10b4f:	8b 45 08             	mov    0x8(%ebp),%eax
   10b52:	c7 40 08 0a 00 00 00 	movl   $0xa,0x8(%eax)
   10b59:	8b 45 08             	mov    0x8(%ebp),%eax
   10b5c:	8b 50 08             	mov    0x8(%eax),%edx
   10b5f:	8b 45 08             	mov    0x8(%ebp),%eax
   10b62:	89 50 04             	mov    %edx,0x4(%eax)
    task->sleep = 0;
   10b65:	8b 45 08             	mov    0x8(%ebp),%eax
   10b68:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)

    
    idt_state_t state = idt_enter_protection();//TODO:加锁
   10b6f:	e8 bc 0e 00 00       	call   11a30 <idt_enter_protection>
   10b74:	89 45 f4             	mov    %eax,-0xc(%ebp)
   
    //5.将任务加入任务队列
    list_insert_last(&task_manager.task_list, &task->task_node);
   10b77:	8b 45 08             	mov    0x8(%ebp),%eax
   10b7a:	83 c0 38             	add    $0x38,%eax
   10b7d:	83 ec 08             	sub    $0x8,%esp
   10b80:	50                   	push   %eax
   10b81:	68 10 60 01 00       	push   $0x16010
   10b86:	e8 b2 21 00 00       	call   12d3d <list_insert_last>
   10b8b:	83 c4 10             	add    $0x10,%esp

    //6.将任务设置为就绪态
    task_set_ready(task);
   10b8e:	83 ec 0c             	sub    $0xc,%esp
   10b91:	ff 75 08             	push   0x8(%ebp)
   10b94:	e8 eb 00 00 00       	call   10c84 <task_set_ready>
   10b99:	83 c4 10             	add    $0x10,%esp

    
    idt_leave_protection(state);//TODO:解锁
   10b9c:	83 ec 0c             	sub    $0xc,%esp
   10b9f:	ff 75 f4             	push   -0xc(%ebp)
   10ba2:	e8 a1 0e 00 00       	call   11a48 <idt_leave_protection>
   10ba7:	83 c4 10             	add    $0x10,%esp
}
   10baa:	90                   	nop
   10bab:	c9                   	leave  
   10bac:	c3                   	ret    

00010bad <empty_task>:
static uint32_t empty_task_stack[EMPTY_TASK_STACK_SIZE];
/**
 * @brief  空闲进程，当所有进程都延时运行时，让cpu运行空闲进程
 * 
 */
static void empty_task(void) {
   10bad:	55                   	push   %ebp
   10bae:	89 e5                	mov    %esp,%ebp
    while(1) {
        //停止cpu运行，让cpu等待时间中断
        hlt();
   10bb0:	e8 bd fd ff ff       	call   10972 <hlt>
   10bb5:	eb f9                	jmp    10bb0 <empty_task+0x3>

00010bb7 <task_manager_init>:

/**
 * @brief  初始化任务管理器
 * 
 */
void task_manager_init(void) {
   10bb7:	55                   	push   %ebp
   10bb8:	89 e5                	mov    %esp,%ebp
   10bba:	83 ec 08             	sub    $0x8,%esp
    //1.初始化所有任务队列
    list_init(&task_manager.ready_list);
   10bbd:	83 ec 0c             	sub    $0xc,%esp
   10bc0:	68 04 60 01 00       	push   $0x16004
   10bc5:	e8 d3 fc ff ff       	call   1089d <list_init>
   10bca:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   10bcd:	83 ec 0c             	sub    $0xc,%esp
   10bd0:	68 10 60 01 00       	push   $0x16010
   10bd5:	e8 c3 fc ff ff       	call   1089d <list_init>
   10bda:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   10bdd:	83 ec 0c             	sub    $0xc,%esp
   10be0:	68 1c 60 01 00       	push   $0x1601c
   10be5:	e8 b3 fc ff ff       	call   1089d <list_init>
   10bea:	83 c4 10             	add    $0x10,%esp

    //2.将当前任务置零
    task_manager.curr_task = (task_t*)0;
   10bed:	c7 05 00 60 01 00 00 	movl   $0x0,0x16000
   10bf4:	00 00 00 

    //3.初始化空闲进程
    task_init(  &task_manager.empty_task,
   10bf7:	ba a0 63 01 00       	mov    $0x163a0,%edx
   10bfc:	b8 ad 0b 01 00       	mov    $0x10bad,%eax
   10c01:	52                   	push   %edx
   10c02:	50                   	push   %eax
   10c03:	68 b1 33 01 00       	push   $0x133b1
   10c08:	68 dc 60 01 00       	push   $0x160dc
   10c0d:	e8 b7 fe ff ff       	call   10ac9 <task_init>
   10c12:	83 c4 10             	add    $0x10,%esp
                 (uint32_t)empty_task,
                 (uint32_t)&empty_task_stack[EMPTY_TASK_STACK_SIZE]);
                 

    //4.将空闲进程从就绪队列中取出
    task_set_unready(&task_manager.empty_task);
   10c15:	83 ec 0c             	sub    $0xc,%esp
   10c18:	68 dc 60 01 00       	push   $0x160dc
   10c1d:	e8 ad 00 00 00       	call   10ccf <task_set_unready>
   10c22:	83 c4 10             	add    $0x10,%esp
    task_manager.empty_task.state = TASK_CREATED;
   10c25:	c7 05 dc 60 01 00 00 	movl   $0x0,0x160dc
   10c2c:	00 00 00 
}
   10c2f:	90                   	nop
   10c30:	c9                   	leave  
   10c31:	c3                   	ret    

00010c32 <task_first_init>:

/**
 * @brief  初始化第一个任务
 * 
 */
void task_first_init(void) {
   10c32:	55                   	push   %ebp
   10c33:	89 e5                	mov    %esp,%ebp
   10c35:	83 ec 08             	sub    $0x8,%esp
      //1.初始化任务，当前任务是在任务管理器启用前就执行的，
      //拥有自己的栈空间，所以入口地址直接和栈空间都置0即可
      //这一步只是为当前任务绑定一个TSS段并将其绑定到一个task对象
      task_init(&task_manager.first_task, "first task", 0, 0);
   10c38:	6a 00                	push   $0x0
   10c3a:	6a 00                	push   $0x0
   10c3c:	68 bc 33 01 00       	push   $0x133bc
   10c41:	68 28 60 01 00       	push   $0x16028
   10c46:	e8 7e fe ff ff       	call   10ac9 <task_init>
   10c4b:	83 c4 10             	add    $0x10,%esp
      
      //2.将当前任务的TSS选择子告诉cpu，用来切换任务时保存状态
      write_tr(task_manager.first_task.tss_selector);
   10c4e:	a1 d8 60 01 00       	mov    0x160d8,%eax
   10c53:	0f b7 c0             	movzwl %ax,%eax
   10c56:	83 ec 0c             	sub    $0xc,%esp
   10c59:	50                   	push   %eax
   10c5a:	e8 34 fd ff ff       	call   10993 <write_tr>
   10c5f:	83 c4 10             	add    $0x10,%esp

      //3.将当前任务执行第一个任务
      task_manager.curr_task = &task_manager.first_task;
   10c62:	c7 05 00 60 01 00 28 	movl   $0x16028,0x16000
   10c69:	60 01 00 

      //4.将当前任务状态设置为运行态
      task_manager.curr_task->state = TASK_RUNNING;
   10c6c:	a1 00 60 01 00       	mov    0x16000,%eax
   10c71:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
}
   10c77:	90                   	nop
   10c78:	c9                   	leave  
   10c79:	c3                   	ret    

00010c7a <task_first_task>:
/**
 * @brief  获取当前任务管理器的第一个任务
 * 
 * @return task_t* 
 */
task_t *task_first_task(void) {
   10c7a:	55                   	push   %ebp
   10c7b:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   10c7d:	b8 28 60 01 00       	mov    $0x16028,%eax
}
   10c82:	5d                   	pop    %ebp
   10c83:	c3                   	ret    

00010c84 <task_set_ready>:
/**
 * @brief  将任务task加入就绪队列
 * 
 * @param task 需要加入就绪队列的任务
 */
void task_set_ready(task_t *task) {
   10c84:	55                   	push   %ebp
   10c85:	89 e5                	mov    %esp,%ebp
   10c87:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   10c8a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10c8e:	75 1c                	jne    10cac <task_set_ready+0x28>
   10c90:	68 69 33 01 00       	push   $0x13369
   10c95:	68 f0 33 01 00       	push   $0x133f0
   10c9a:	68 c9 00 00 00       	push   $0xc9
   10c9f:	68 7c 33 01 00       	push   $0x1337c
   10ca4:	e8 49 17 00 00       	call   123f2 <pannic>
   10ca9:	83 c4 10             	add    $0x10,%esp
    //1.将任务插入到就绪队列的尾部
    list_insert_last(&task_manager.ready_list, &task->ready_node);
   10cac:	8b 45 08             	mov    0x8(%ebp),%eax
   10caf:	83 c0 30             	add    $0x30,%eax
   10cb2:	83 ec 08             	sub    $0x8,%esp
   10cb5:	50                   	push   %eax
   10cb6:	68 04 60 01 00       	push   $0x16004
   10cbb:	e8 7d 20 00 00       	call   12d3d <list_insert_last>
   10cc0:	83 c4 10             	add    $0x10,%esp

    //2.将任务状态设置为就绪态
    task->state = TASK_READY;
   10cc3:	8b 45 08             	mov    0x8(%ebp),%eax
   10cc6:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
}
   10ccc:	90                   	nop
   10ccd:	c9                   	leave  
   10cce:	c3                   	ret    

00010ccf <task_set_unready>:
/**
 * @brief  将任务task从就绪队列中取下
 * 
 * @param task 
 */
void task_set_unready(task_t *task) {
   10ccf:	55                   	push   %ebp
   10cd0:	89 e5                	mov    %esp,%ebp
   10cd2:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   10cd5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10cd9:	75 1c                	jne    10cf7 <task_set_unready+0x28>
   10cdb:	68 69 33 01 00       	push   $0x13369
   10ce0:	68 00 34 01 00       	push   $0x13400
   10ce5:	68 d8 00 00 00       	push   $0xd8
   10cea:	68 7c 33 01 00       	push   $0x1337c
   10cef:	e8 fe 16 00 00       	call   123f2 <pannic>
   10cf4:	83 c4 10             	add    $0x10,%esp
    list_remove(&task_manager.ready_list, &task->ready_node);
   10cf7:	8b 45 08             	mov    0x8(%ebp),%eax
   10cfa:	83 c0 30             	add    $0x30,%eax
   10cfd:	83 ec 08             	sub    $0x8,%esp
   10d00:	50                   	push   %eax
   10d01:	68 04 60 01 00       	push   $0x16004
   10d06:	e8 27 22 00 00       	call   12f32 <list_remove>
   10d0b:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   10d0e:	8b 45 08             	mov    0x8(%ebp),%eax
   10d11:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   10d17:	90                   	nop
   10d18:	c9                   	leave  
   10d19:	c3                   	ret    

00010d1a <task_ready_first>:

/**
 * @brief  获取就绪队列中的第一个任务
 * 
 */
task_t* task_ready_first(void) {
   10d1a:	55                   	push   %ebp
   10d1b:	89 e5                	mov    %esp,%ebp
   10d1d:	83 ec 18             	sub    $0x18,%esp
    list_node_t *ready_node = list_get_first(&task_manager.ready_list);
   10d20:	83 ec 0c             	sub    $0xc,%esp
   10d23:	68 04 60 01 00       	push   $0x16004
   10d28:	e8 19 fc ff ff       	call   10946 <list_get_first>
   10d2d:	83 c4 10             	add    $0x10,%esp
   10d30:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    return list_node_parent(ready_node, task_t, ready_node);
   10d33:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10d37:	74 08                	je     10d41 <task_ready_first+0x27>
   10d39:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10d3c:	83 e8 30             	sub    $0x30,%eax
   10d3f:	eb 05                	jmp    10d46 <task_ready_first+0x2c>
   10d41:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10d46:	c9                   	leave  
   10d47:	c3                   	ret    

00010d48 <task_current>:
/**
 * @brief  获取当前正在运行的任务
 * 
 * @return task_t* 
 */
task_t *task_current(void) {
   10d48:	55                   	push   %ebp
   10d49:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   10d4b:	a1 00 60 01 00       	mov    0x16000,%eax
}
   10d50:	5d                   	pop    %ebp
   10d51:	c3                   	ret    

00010d52 <task_switch>:

/**
 * @brief  任务管理器进行任务切换
 * 
 */
void task_switch(void) {
   10d52:	55                   	push   %ebp
   10d53:	89 e5                	mov    %esp,%ebp
   10d55:	83 ec 18             	sub    $0x18,%esp

    idt_state_t state = idt_enter_protection();//TODO:加锁
   10d58:	e8 d3 0c 00 00       	call   11a30 <idt_enter_protection>
   10d5d:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //1.获取就绪队列中的第一个任务
    task_t *to = task_ready_first();
   10d60:	e8 b5 ff ff ff       	call   10d1a <task_ready_first>
   10d65:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.若获取到的任务不是当前任务就进行切换
    if (to != task_manager.curr_task) {
   10d68:	a1 00 60 01 00       	mov    0x16000,%eax
   10d6d:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   10d70:	74 37                	je     10da9 <task_switch+0x57>
        //3.获取当前任务
        task_t *from = task_manager.curr_task;
   10d72:	a1 00 60 01 00       	mov    0x16000,%eax
   10d77:	89 45 ec             	mov    %eax,-0x14(%ebp)

        //4.目标任务若为空，则所有任务都在延时，让cpu运行空闲任务
        if (to == (task_t*)0) { 
   10d7a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10d7e:	75 07                	jne    10d87 <task_switch+0x35>
            to = &task_manager.empty_task;
   10d80:	c7 45 f4 dc 60 01 00 	movl   $0x160dc,-0xc(%ebp)
        }
        //5.切换当前任务, 并将当前任务置为运行态
        to->state = TASK_RUNNING;
   10d87:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10d8a:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        task_manager.curr_task = to;
   10d90:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10d93:	a3 00 60 01 00       	mov    %eax,0x16000
        

        //6.进行任务切换
        task_switch_from_to(from, to);
   10d98:	83 ec 08             	sub    $0x8,%esp
   10d9b:	ff 75 f4             	push   -0xc(%ebp)
   10d9e:	ff 75 ec             	push   -0x14(%ebp)
   10da1:	e8 23 fc ff ff       	call   109c9 <task_switch_from_to>
   10da6:	83 c4 10             	add    $0x10,%esp
    } 

    idt_leave_protection(state);//TODO:解锁
   10da9:	83 ec 0c             	sub    $0xc,%esp
   10dac:	ff 75 f0             	push   -0x10(%ebp)
   10daf:	e8 94 0c 00 00       	call   11a48 <idt_leave_protection>
   10db4:	83 c4 10             	add    $0x10,%esp
}
   10db7:	90                   	nop
   10db8:	c9                   	leave  
   10db9:	c3                   	ret    

00010dba <sys_yield>:
/**
 * @brief  使当前正在运行的任务主动让出cpu
 * 
 * @return int 
 */
int sys_yield(void) {
   10dba:	55                   	push   %ebp
   10dbb:	89 e5                	mov    %esp,%ebp
   10dbd:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   10dc0:	e8 6b 0c 00 00       	call   11a30 <idt_enter_protection>
   10dc5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    //1.判断当前就绪队列中是否有多个任务
    if (list_get_size(&task_manager.ready_list) > 1) {
   10dc8:	83 ec 0c             	sub    $0xc,%esp
   10dcb:	68 04 60 01 00       	push   $0x16004
   10dd0:	e8 44 fb ff ff       	call   10919 <list_get_size>
   10dd5:	83 c4 10             	add    $0x10,%esp
   10dd8:	83 f8 01             	cmp    $0x1,%eax
   10ddb:	7e 29                	jle    10e06 <sys_yield+0x4c>
        //2.获取当前任务  
        task_t *curr_task = task_current();
   10ddd:	e8 66 ff ff ff       	call   10d48 <task_current>
   10de2:	89 45 f0             	mov    %eax,-0x10(%ebp)
        
        //3.将当前任务从就绪队列中取下
        task_set_unready(curr_task);
   10de5:	83 ec 0c             	sub    $0xc,%esp
   10de8:	ff 75 f0             	push   -0x10(%ebp)
   10deb:	e8 df fe ff ff       	call   10ccf <task_set_unready>
   10df0:	83 c4 10             	add    $0x10,%esp

        //4.将当前任务重新加入到就绪队列的队尾
        task_set_ready(curr_task);
   10df3:	83 ec 0c             	sub    $0xc,%esp
   10df6:	ff 75 f0             	push   -0x10(%ebp)
   10df9:	e8 86 fe ff ff       	call   10c84 <task_set_ready>
   10dfe:	83 c4 10             	add    $0x10,%esp

        //5.任务管理器运行下一个任务，从而释放cpu使用权
        task_switch();
   10e01:	e8 4c ff ff ff       	call   10d52 <task_switch>
    }
    
    idt_leave_protection(state);//TODO:解锁
   10e06:	83 ec 0c             	sub    $0xc,%esp
   10e09:	ff 75 f4             	push   -0xc(%ebp)
   10e0c:	e8 37 0c 00 00       	call   11a48 <idt_leave_protection>
   10e11:	83 c4 10             	add    $0x10,%esp
    return 0;
   10e14:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10e19:	c9                   	leave  
   10e1a:	c3                   	ret    

00010e1b <task_slice_end>:
/**
 * @brief  提供给时钟中断使用，每中断一次，当前任务的时间片使用完一次
 *         减少当前任务的时间片数，并判断是否还有剩余时间片，若没有就进行任务切换
 * 
 */
void task_slice_end(void) {
   10e1b:	55                   	push   %ebp
   10e1c:	89 e5                	mov    %esp,%ebp
   10e1e:	83 ec 18             	sub    $0x18,%esp

    //1.遍历当前延时队列，判断是否有可唤醒的任务
    list_node_t *curr_sleep_node = list_get_first(&task_manager.sleep_list);
   10e21:	83 ec 0c             	sub    $0xc,%esp
   10e24:	68 1c 60 01 00       	push   $0x1601c
   10e29:	e8 18 fb ff ff       	call   10946 <list_get_first>
   10e2e:	83 c4 10             	add    $0x10,%esp
   10e31:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.遍历并判断每一个任务执行完当前时间片是否可被唤醒，若可以则唤醒
    while (curr_sleep_node) {
   10e34:	eb 62                	jmp    10e98 <task_slice_end+0x7d>
        
        list_node_t *next_sleep_node = list_node_next(curr_sleep_node);
   10e36:	83 ec 0c             	sub    $0xc,%esp
   10e39:	ff 75 f4             	push   -0xc(%ebp)
   10e3c:	e8 2f fa ff ff       	call   10870 <list_node_next>
   10e41:	83 c4 10             	add    $0x10,%esp
   10e44:	89 45 ec             	mov    %eax,-0x14(%ebp)
        
        task_t *curr_sleep_task = list_node_parent(curr_sleep_node, task_t, ready_node);
   10e47:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10e4b:	74 08                	je     10e55 <task_slice_end+0x3a>
   10e4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e50:	83 e8 30             	sub    $0x30,%eax
   10e53:	eb 05                	jmp    10e5a <task_slice_end+0x3f>
   10e55:	b8 00 00 00 00       	mov    $0x0,%eax
   10e5a:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (--curr_sleep_task->sleep == 0) {
   10e5d:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10e60:	8b 40 0c             	mov    0xc(%eax),%eax
   10e63:	8d 50 ff             	lea    -0x1(%eax),%edx
   10e66:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10e69:	89 50 0c             	mov    %edx,0xc(%eax)
   10e6c:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10e6f:	8b 40 0c             	mov    0xc(%eax),%eax
   10e72:	85 c0                	test   %eax,%eax
   10e74:	75 1c                	jne    10e92 <task_slice_end+0x77>
            task_set_wakeup(curr_sleep_task);   //从延时队列中取下
   10e76:	83 ec 0c             	sub    $0xc,%esp
   10e79:	ff 75 e8             	push   -0x18(%ebp)
   10e7c:	e8 01 01 00 00       	call   10f82 <task_set_wakeup>
   10e81:	83 c4 10             	add    $0x10,%esp
            task_set_ready(curr_sleep_task);    //加入就绪队列
   10e84:	83 ec 0c             	sub    $0xc,%esp
   10e87:	ff 75 e8             	push   -0x18(%ebp)
   10e8a:	e8 f5 fd ff ff       	call   10c84 <task_set_ready>
   10e8f:	83 c4 10             	add    $0x10,%esp
        }

        curr_sleep_node = next_sleep_node;
   10e92:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10e95:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr_sleep_node) {
   10e98:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10e9c:	75 98                	jne    10e36 <task_slice_end+0x1b>
    }

    // task_switch(); 没有必要立马进行任务切换，当前任务时间片用完后会自动切换
    //3.获取当前任务
    task_t *curr_task = task_current();
   10e9e:	e8 a5 fe ff ff       	call   10d48 <task_current>
   10ea3:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //4.若当前任务为空闲任务，则判断就绪队列是否为空
    if (curr_task == &task_manager.empty_task) {
   10ea6:	81 7d f0 dc 60 01 00 	cmpl   $0x160dc,-0x10(%ebp)
   10ead:	75 23                	jne    10ed2 <task_slice_end+0xb7>
        
        if (list_is_empty(&task_manager.ready_list)) return;
   10eaf:	83 ec 0c             	sub    $0xc,%esp
   10eb2:	68 04 60 01 00       	push   $0x16004
   10eb7:	e8 28 fa ff ff       	call   108e4 <list_is_empty>
   10ebc:	83 c4 10             	add    $0x10,%esp
   10ebf:	85 c0                	test   %eax,%eax
   10ec1:	75 60                	jne    10f23 <task_slice_end+0x108>
        
        task_manager.empty_task.state = TASK_CREATED;
   10ec3:	c7 05 dc 60 01 00 00 	movl   $0x0,0x160dc
   10eca:	00 00 00 
        
        task_switch();//就绪队列有任务，则直接切换任务
   10ecd:	e8 80 fe ff ff       	call   10d52 <task_switch>
    }

    //5.若当前任务为普通任务则，减小当前时间片数
    if (curr_task != &task_manager.empty_task && --curr_task->slice_curr == 0) {
   10ed2:	81 7d f0 dc 60 01 00 	cmpl   $0x160dc,-0x10(%ebp)
   10ed9:	74 49                	je     10f24 <task_slice_end+0x109>
   10edb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10ede:	8b 40 08             	mov    0x8(%eax),%eax
   10ee1:	8d 50 ff             	lea    -0x1(%eax),%edx
   10ee4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10ee7:	89 50 08             	mov    %edx,0x8(%eax)
   10eea:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10eed:	8b 40 08             	mov    0x8(%eax),%eax
   10ef0:	85 c0                	test   %eax,%eax
   10ef2:	75 30                	jne    10f24 <task_slice_end+0x109>
        //6.时间片数用完了，重置时间片并进行任务切换
        curr_task->slice_curr = curr_task->slice_max;
   10ef4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10ef7:	8b 50 04             	mov    0x4(%eax),%edx
   10efa:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10efd:	89 50 08             	mov    %edx,0x8(%eax)
        task_set_unready(curr_task);
   10f00:	83 ec 0c             	sub    $0xc,%esp
   10f03:	ff 75 f0             	push   -0x10(%ebp)
   10f06:	e8 c4 fd ff ff       	call   10ccf <task_set_unready>
   10f0b:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   10f0e:	83 ec 0c             	sub    $0xc,%esp
   10f11:	ff 75 f0             	push   -0x10(%ebp)
   10f14:	e8 6b fd ff ff       	call   10c84 <task_set_ready>
   10f19:	83 c4 10             	add    $0x10,%esp
        task_switch();
   10f1c:	e8 31 fe ff ff       	call   10d52 <task_switch>
   10f21:	eb 01                	jmp    10f24 <task_slice_end+0x109>
        if (list_is_empty(&task_manager.ready_list)) return;
   10f23:	90                   	nop
    }
}
   10f24:	c9                   	leave  
   10f25:	c3                   	ret    

00010f26 <task_set_sleep>:
 * @brief  设置进程延时的时间片数
 * 
 * @param task 需要延时的进程
 * @param slice 延时的时间片数
 */
void task_set_sleep(task_t *task, uint32_t slice) {
   10f26:	55                   	push   %ebp
   10f27:	89 e5                	mov    %esp,%ebp
   10f29:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   10f2c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10f30:	75 1c                	jne    10f4e <task_set_sleep+0x28>
   10f32:	68 69 33 01 00       	push   $0x13369
   10f37:	68 54 34 01 00       	push   $0x13454
   10f3c:	68 66 01 00 00       	push   $0x166
   10f41:	68 7c 33 01 00       	push   $0x1337c
   10f46:	e8 a7 14 00 00       	call   123f2 <pannic>
   10f4b:	83 c4 10             	add    $0x10,%esp
    if (slice == 0) return;
   10f4e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10f52:	74 2b                	je     10f7f <task_set_sleep+0x59>

    task->sleep = slice;
   10f54:	8b 55 0c             	mov    0xc(%ebp),%edx
   10f57:	8b 45 08             	mov    0x8(%ebp),%eax
   10f5a:	89 50 0c             	mov    %edx,0xc(%eax)
    task->state = TASK_SLEEP;
   10f5d:	8b 45 08             	mov    0x8(%ebp),%eax
   10f60:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    list_insert_last(&task_manager.sleep_list, &task->ready_node);
   10f66:	8b 45 08             	mov    0x8(%ebp),%eax
   10f69:	83 c0 30             	add    $0x30,%eax
   10f6c:	83 ec 08             	sub    $0x8,%esp
   10f6f:	50                   	push   %eax
   10f70:	68 1c 60 01 00       	push   $0x1601c
   10f75:	e8 c3 1d 00 00       	call   12d3d <list_insert_last>
   10f7a:	83 c4 10             	add    $0x10,%esp
   10f7d:	eb 01                	jmp    10f80 <task_set_sleep+0x5a>
    if (slice == 0) return;
   10f7f:	90                   	nop
}
   10f80:	c9                   	leave  
   10f81:	c3                   	ret    

00010f82 <task_set_wakeup>:
/**
 * @brief  唤醒正在延时的进程
 * 
 * @param task 
 */
void task_set_wakeup(task_t *task) {
   10f82:	55                   	push   %ebp
   10f83:	89 e5                	mov    %esp,%ebp
   10f85:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   10f88:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10f8c:	75 1c                	jne    10faa <task_set_wakeup+0x28>
   10f8e:	68 69 33 01 00       	push   $0x13369
   10f93:	68 64 34 01 00       	push   $0x13464
   10f98:	68 74 01 00 00       	push   $0x174
   10f9d:	68 7c 33 01 00       	push   $0x1337c
   10fa2:	e8 4b 14 00 00       	call   123f2 <pannic>
   10fa7:	83 c4 10             	add    $0x10,%esp
    list_remove(&task_manager.sleep_list, &task->ready_node);
   10faa:	8b 45 08             	mov    0x8(%ebp),%eax
   10fad:	83 c0 30             	add    $0x30,%eax
   10fb0:	83 ec 08             	sub    $0x8,%esp
   10fb3:	50                   	push   %eax
   10fb4:	68 1c 60 01 00       	push   $0x1601c
   10fb9:	e8 74 1f 00 00       	call   12f32 <list_remove>
   10fbe:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   10fc1:	8b 45 08             	mov    0x8(%ebp),%eax
   10fc4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   10fca:	90                   	nop
   10fcb:	c9                   	leave  
   10fcc:	c3                   	ret    

00010fcd <sys_sleep>:
/**
 * @brief  使进程进入延时状态
 * 
 * @param ms 延时的时间，以ms为单位
 */
void sys_sleep(uint32_t ms) {
   10fcd:	55                   	push   %ebp
   10fce:	89 e5                	mov    %esp,%ebp
   10fd0:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection(); //TODO:加锁
   10fd3:	e8 58 0a 00 00       	call   11a30 <idt_enter_protection>
   10fd8:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //1.获取当前任务  
    task_t *curr_task = task_current();
   10fdb:	e8 68 fd ff ff       	call   10d48 <task_current>
   10fe0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    //2.将当前任务离开就绪队列
    task_set_unready(curr_task);
   10fe3:	83 ec 0c             	sub    $0xc,%esp
   10fe6:	ff 75 f0             	push   -0x10(%ebp)
   10fe9:	e8 e1 fc ff ff       	call   10ccf <task_set_unready>
   10fee:	83 c4 10             	add    $0x10,%esp

    //3.计算出需要延时的时间片数，对时间片数向上取整，保证进程至少能延时指定时间
    uint32_t slice = (ms + (OS_TICKS_MS - 1)) / OS_TICKS_MS;
   10ff1:	8b 45 08             	mov    0x8(%ebp),%eax
   10ff4:	83 c0 09             	add    $0x9,%eax
   10ff7:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   10ffc:	f7 e2                	mul    %edx
   10ffe:	89 d0                	mov    %edx,%eax
   11000:	c1 e8 03             	shr    $0x3,%eax
   11003:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //4.将当前任务放入延时队列，并设置延时时间片数
    task_set_sleep(curr_task, slice);
   11006:	83 ec 08             	sub    $0x8,%esp
   11009:	ff 75 ec             	push   -0x14(%ebp)
   1100c:	ff 75 f0             	push   -0x10(%ebp)
   1100f:	e8 12 ff ff ff       	call   10f26 <task_set_sleep>
   11014:	83 c4 10             	add    $0x10,%esp

    //5.切换任务
    task_switch();
   11017:	e8 36 fd ff ff       	call   10d52 <task_switch>

    idt_leave_protection(state); //TODO:解锁
   1101c:	83 ec 0c             	sub    $0xc,%esp
   1101f:	ff 75 f4             	push   -0xc(%ebp)
   11022:	e8 21 0a 00 00       	call   11a48 <idt_leave_protection>
   11027:	83 c4 10             	add    $0x10,%esp
   1102a:	90                   	nop
   1102b:	c9                   	leave  
   1102c:	c3                   	ret    

0001102d <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   1102d:	55                   	push   %ebp
   1102e:	89 e5                	mov    %esp,%ebp
   11030:	83 ec 10             	sub    $0x10,%esp
  gdt.start31_16 = (start >> 16) & 0xffff;  // 初始化GDT地址的高16位
   11033:	8b 45 08             	mov    0x8(%ebp),%eax
   11036:	c1 e8 10             	shr    $0x10,%eax
   11039:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  gdt.start15_0 = start & 0xffff;           // 初始化GDT地址的低16位
   1103d:	8b 45 08             	mov    0x8(%ebp),%eax
   11040:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   11044:	8b 45 0c             	mov    0xc(%ebp),%eax
   11047:	83 e8 01             	sub    $0x1,%eax
  gdt.limit =
   1104a:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   1104e:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   11052:	90                   	nop
   11053:	c9                   	leave  
   11054:	c3                   	ret    

00011055 <segment_desc_set>:
 *                 即2的13次方个段，也就是8192
 * @param base 该段在内存中的真实段基址
 * @param limit 该段的段界限，是一个偏移量，表示段中最大的偏移界限
 * @param attr 该段的属性位
 */
void segment_desc_set(uint16_t selector,  uint32_t base, uint32_t limit, uint16_t attr) {
   11055:	55                   	push   %ebp
   11056:	89 e5                	mov    %esp,%ebp
   11058:	83 ec 18             	sub    $0x18,%esp
   1105b:	8b 55 08             	mov    0x8(%ebp),%edx
   1105e:	8b 45 14             	mov    0x14(%ebp),%eax
   11061:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
   11065:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    //1. 获取该段描述符在内存中的起始地址，selector >> 3 取出3~15位才是其在全局描述符中的下标
    segment_desc_t *desc = gdt_table + (selector >> 3);
   11069:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1106d:	66 c1 e8 03          	shr    $0x3,%ax
   11071:	0f b7 c0             	movzwl %ax,%eax
   11074:	c1 e0 03             	shl    $0x3,%eax
   11077:	05 a0 63 01 00       	add    $0x163a0,%eax
   1107c:	89 45 fc             	mov    %eax,-0x4(%ebp)

    //2. 设置段基地址
    desc->base15_0 = (uint16_t)base;
   1107f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11082:	89 c2                	mov    %eax,%edx
   11084:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11087:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (uint8_t)(base >> 16);
   1108b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1108e:	c1 e8 10             	shr    $0x10,%eax
   11091:	89 c2                	mov    %eax,%edx
   11093:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11096:	88 50 04             	mov    %dl,0x4(%eax)
    desc->base31_24 = (uint8_t)(base >> 24);
   11099:	8b 45 0c             	mov    0xc(%ebp),%eax
   1109c:	c1 e8 18             	shr    $0x18,%eax
   1109f:	89 c2                	mov    %eax,%edx
   110a1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   110a4:	88 50 07             	mov    %dl,0x7(%eax)

    //3. 设置段界限
    if (limit > 0xfffff) { //limit大于了20位能表示的最大值
   110a7:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   110ae:	76 1d                	jbe    110cd <segment_desc_set+0x78>
        //将limit的粒度设置为 4kb，即将属性位G置1
        desc->attr |= 0x8000;
   110b0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   110b3:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   110b7:	66 0d 00 80          	or     $0x8000,%ax
   110bb:	89 c2                	mov    %eax,%edx
   110bd:	8b 45 fc             	mov    -0x4(%ebp),%eax
   110c0:	66 89 50 05          	mov    %dx,0x5(%eax)

        //将limit改成以 4kb 为单位
        limit /= (4 * 1024);
   110c4:	8b 45 10             	mov    0x10(%ebp),%eax
   110c7:	c1 e8 0c             	shr    $0xc,%eax
   110ca:	89 45 10             	mov    %eax,0x10(%ebp)

    }
    desc->limit15_0 = (uint16_t)limit;
   110cd:	8b 45 10             	mov    0x10(%ebp),%eax
   110d0:	89 c2                	mov    %eax,%edx
   110d2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   110d5:	66 89 10             	mov    %dx,(%eax)
    desc->attr |= ((uint16_t)(limit >> 8) & 0x0f00); //将limit高4位赋值到attr的8~11位(段界限的高4位)
   110d8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   110db:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   110df:	89 c2                	mov    %eax,%edx
   110e1:	8b 45 10             	mov    0x10(%ebp),%eax
   110e4:	c1 e8 08             	shr    $0x8,%eax
   110e7:	66 25 00 0f          	and    $0xf00,%ax
   110eb:	09 d0                	or     %edx,%eax
   110ed:	89 c2                	mov    %eax,%edx
   110ef:	8b 45 fc             	mov    -0x4(%ebp),%eax
   110f2:	66 89 50 05          	mov    %dx,0x5(%eax)

    //4.设置属性位
    desc->attr |= attr & 0xf0ff;
   110f6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   110f9:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   110fd:	89 c2                	mov    %eax,%edx
   110ff:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   11103:	80 e4 f0             	and    $0xf0,%ah
   11106:	09 d0                	or     %edx,%eax
   11108:	89 c2                	mov    %eax,%edx
   1110a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1110d:	66 89 50 05          	mov    %dx,0x5(%eax)


}
   11111:	90                   	nop
   11112:	c9                   	leave  
   11113:	c3                   	ret    

00011114 <gdt_init>:

/**
 * @brief  初始化GDT
 * 
 */
void gdt_init(void) {
   11114:	55                   	push   %ebp
   11115:	89 e5                	mov    %esp,%ebp
   11117:	83 ec 18             	sub    $0x18,%esp
    //TODO:暂时将所有段都初始化为0
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   1111a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11121:	eb 1c                	jmp    1113f <gdt_init+0x2b>
        segment_desc_set(i << 3, 0, 0, 0);
   11123:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11126:	c1 e0 03             	shl    $0x3,%eax
   11129:	0f b7 c0             	movzwl %ax,%eax
   1112c:	6a 00                	push   $0x0
   1112e:	6a 00                	push   $0x0
   11130:	6a 00                	push   $0x0
   11132:	50                   	push   %eax
   11133:	e8 1d ff ff ff       	call   11055 <segment_desc_set>
   11138:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   1113b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1113f:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   11146:	7e db                	jle    11123 <gdt_init+0xf>
        is_alloc[i] == 0;
    }

    //使用平坦模型，即段基址为0, 段界限直接用最大值，界限粒度为4kb，即段大小为4GB
    //1.设置内核的数据段,并将其标记
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff,
   11148:	68 92 40 00 00       	push   $0x4092
   1114d:	6a ff                	push   $0xffffffff
   1114f:	6a 00                	push   $0x0
   11151:	6a 10                	push   $0x10
   11153:	e8 fd fe ff ff       	call   11055 <segment_desc_set>
   11158:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL | 
                    SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_DS >> 3] = 1;
   1115b:	c7 05 a8 63 02 00 01 	movl   $0x1,0x263a8
   11162:	00 00 00 

    //2.设置内核的代码段，并将其标记
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff,
   11165:	68 9a 40 00 00       	push   $0x409a
   1116a:	6a ff                	push   $0xffffffff
   1116c:	6a 00                	push   $0x0
   1116e:	6a 08                	push   $0x8
   11170:	e8 e0 fe ff ff       	call   11055 <segment_desc_set>
   11175:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL |
                    SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_CS >> 3] = 1;
   11178:	c7 05 a4 63 02 00 01 	movl   $0x1,0x263a4
   1117f:	00 00 00 
    //3.加载新的GDT表
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   11182:	b8 a0 63 01 00       	mov    $0x163a0,%eax
   11187:	68 00 00 01 00       	push   $0x10000
   1118c:	50                   	push   %eax
   1118d:	e8 9b fe ff ff       	call   1102d <lgdt>
   11192:	83 c4 08             	add    $0x8,%esp

    //4.初始化互斥锁
    mutex_init(&mutex);
   11195:	83 ec 0c             	sub    $0xc,%esp
   11198:	68 a0 e3 02 00       	push   $0x2e3a0
   1119d:	e8 3b 0b 00 00       	call   11cdd <mutex_init>
   111a2:	83 c4 10             	add    $0x10,%esp
}
   111a5:	90                   	nop
   111a6:	c9                   	leave  
   111a7:	c3                   	ret    

000111a8 <gdt_alloc_desc>:
/**
 * @brief  寻找gdt中未赋值的段描述符空间
 * 
 * @return int 返回的找到的描述符的选择子
 */
int gdt_alloc_desc() {
   111a8:	55                   	push   %ebp
   111a9:	89 e5                	mov    %esp,%ebp
   111ab:	83 ec 18             	sub    $0x18,%esp

    mutex_lock(&mutex);//TODO:加锁
   111ae:	83 ec 0c             	sub    $0xc,%esp
   111b1:	68 a0 e3 02 00       	push   $0x2e3a0
   111b6:	e8 6f 0b 00 00       	call   11d2a <mutex_lock>
   111bb:	83 c4 10             	add    $0x10,%esp

    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   111be:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   111c5:	eb 38                	jmp    111ff <gdt_alloc_desc+0x57>
        if (is_alloc[i] == 0)  {
   111c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   111ca:	8b 04 85 a0 63 02 00 	mov    0x263a0(,%eax,4),%eax
   111d1:	85 c0                	test   %eax,%eax
   111d3:	75 26                	jne    111fb <gdt_alloc_desc+0x53>
            is_alloc[i] = 1;
   111d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   111d8:	c7 04 85 a0 63 02 00 	movl   $0x1,0x263a0(,%eax,4)
   111df:	01 00 00 00 

            mutex_unlock(&mutex);//TODO:解锁
   111e3:	83 ec 0c             	sub    $0xc,%esp
   111e6:	68 a0 e3 02 00       	push   $0x2e3a0
   111eb:	e8 cb 0b 00 00       	call   11dbb <mutex_unlock>
   111f0:	83 c4 10             	add    $0x10,%esp
            return (i << 3);
   111f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   111f6:	c1 e0 03             	shl    $0x3,%eax
   111f9:	eb 22                	jmp    1121d <gdt_alloc_desc+0x75>
    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   111fb:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   111ff:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   11206:	7e bf                	jle    111c7 <gdt_alloc_desc+0x1f>
        }
    }

    mutex_unlock(&mutex);//TODO:解锁
   11208:	83 ec 0c             	sub    $0xc,%esp
   1120b:	68 a0 e3 02 00       	push   $0x2e3a0
   11210:	e8 a6 0b 00 00       	call   11dbb <mutex_unlock>
   11215:	83 c4 10             	add    $0x10,%esp
    return -1;
   11218:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1121d:	c9                   	leave  
   1121e:	c3                   	ret    

0001121f <cli>:
static inline void cli(void) { __asm__ __volatile__("cli"); }
   1121f:	55                   	push   %ebp
   11220:	89 e5                	mov    %esp,%ebp
   11222:	fa                   	cli    
   11223:	90                   	nop
   11224:	5d                   	pop    %ebp
   11225:	c3                   	ret    

00011226 <sti>:
static inline void sti(void) { __asm__ __volatile__("sti"); }
   11226:	55                   	push   %ebp
   11227:	89 e5                	mov    %esp,%ebp
   11229:	fb                   	sti    
   1122a:	90                   	nop
   1122b:	5d                   	pop    %ebp
   1122c:	c3                   	ret    

0001122d <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   1122d:	55                   	push   %ebp
   1122e:	89 e5                	mov    %esp,%ebp
   11230:	f4                   	hlt    
   11231:	90                   	nop
   11232:	5d                   	pop    %ebp
   11233:	c3                   	ret    

00011234 <inb>:
static inline uint8_t inb(uint16_t port) {
   11234:	55                   	push   %ebp
   11235:	89 e5                	mov    %esp,%ebp
   11237:	83 ec 14             	sub    $0x14,%esp
   1123a:	8b 45 08             	mov    0x8(%ebp),%eax
   1123d:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   11241:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   11245:	89 c2                	mov    %eax,%edx
   11247:	ec                   	in     (%dx),%al
   11248:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   1124b:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   1124f:	c9                   	leave  
   11250:	c3                   	ret    

00011251 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   11251:	55                   	push   %ebp
   11252:	89 e5                	mov    %esp,%ebp
   11254:	83 ec 08             	sub    $0x8,%esp
   11257:	8b 45 08             	mov    0x8(%ebp),%eax
   1125a:	8b 55 0c             	mov    0xc(%ebp),%edx
   1125d:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   11261:	89 d0                	mov    %edx,%eax
   11263:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   11266:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1126a:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1126e:	ee                   	out    %al,(%dx)
}
   1126f:	90                   	nop
   11270:	c9                   	leave  
   11271:	c3                   	ret    

00011272 <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   11272:	55                   	push   %ebp
   11273:	89 e5                	mov    %esp,%ebp
   11275:	83 ec 10             	sub    $0x10,%esp
  idt.start31_16 = (start >> 16) & 0xffff;  // 初始化IDT地址的高16位
   11278:	8b 45 08             	mov    0x8(%ebp),%eax
   1127b:	c1 e8 10             	shr    $0x10,%eax
   1127e:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  idt.start15_0 = start & 0xffff;           // 初始化IDT地址的低16位
   11282:	8b 45 08             	mov    0x8(%ebp),%eax
   11285:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   11289:	8b 45 0c             	mov    0xc(%ebp),%eax
   1128c:	83 e8 01             	sub    $0x1,%eax
  idt.limit =
   1128f:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   11293:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   11297:	90                   	nop
   11298:	c9                   	leave  
   11299:	c3                   	ret    

0001129a <read_eflags>:
/**
 * @brief  读取当前cpu的eflags寄存器
 * 
 * @return uint32_t 放回eflags的值
 */
static inline uint32_t read_eflags(void) {
   1129a:	55                   	push   %ebp
   1129b:	89 e5                	mov    %esp,%ebp
   1129d:	83 ec 10             	sub    $0x10,%esp
  uint32_t eflags;
  //pushf 压入eflags的值到栈中
  __asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   112a0:	9c                   	pushf  
   112a1:	58                   	pop    %eax
   112a2:	89 45 fc             	mov    %eax,-0x4(%ebp)
  
  return eflags;
   112a5:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   112a8:	c9                   	leave  
   112a9:	c3                   	ret    

000112aa <write_eflags>:
/**
 * @brief  将状态state写入eflags寄存器
 * 
 * @param state 
 */
static inline void write_eflags(uint32_t state) {
   112aa:	55                   	push   %ebp
   112ab:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("push %%eax\n\tpopf"::"a"(state));
   112ad:	8b 45 08             	mov    0x8(%ebp),%eax
   112b0:	50                   	push   %eax
   112b1:	9d                   	popf   
}
   112b2:	90                   	nop
   112b3:	5d                   	pop    %ebp
   112b4:	c3                   	ret    

000112b5 <print_exception_fram>:
/**
 * @brief  打印异常栈帧信息
 * 
 * @param frame 栈帧
 */
static void print_exception_fram(const exception_frame_t *frame) {
   112b5:	55                   	push   %ebp
   112b6:	89 e5                	mov    %esp,%ebp
   112b8:	57                   	push   %edi
   112b9:	56                   	push   %esi
   112ba:	53                   	push   %ebx
   112bb:	83 ec 1c             	sub    $0x1c,%esp

  log_printf("------------------------stack frame info---------------------");
   112be:	83 ec 0c             	sub    $0xc,%esp
   112c1:	68 74 34 01 00       	push   $0x13474
   112c6:	e8 f6 1d 00 00       	call   130c1 <log_printf>
   112cb:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ:\t\t%d\nerror code:\t%d", frame->num, frame->error_code);
   112ce:	8b 45 08             	mov    0x8(%ebp),%eax
   112d1:	8b 50 34             	mov    0x34(%eax),%edx
   112d4:	8b 45 08             	mov    0x8(%ebp),%eax
   112d7:	8b 40 30             	mov    0x30(%eax),%eax
   112da:	83 ec 04             	sub    $0x4,%esp
   112dd:	52                   	push   %edx
   112de:	50                   	push   %eax
   112df:	68 b2 34 01 00       	push   $0x134b2
   112e4:	e8 d8 1d 00 00       	call   130c1 <log_printf>
   112e9:	83 c4 10             	add    $0x10,%esp
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
    //TODO:SS暂时没法获取，先用ds替代，之后再进行获取
    frame->cs, frame->ds, frame->ds, frame->es, frame->fs, frame->gs
   112ec:	8b 45 08             	mov    0x8(%ebp),%eax
   112ef:	8b 38                	mov    (%eax),%edi
   112f1:	8b 45 08             	mov    0x8(%ebp),%eax
   112f4:	8b 70 04             	mov    0x4(%eax),%esi
   112f7:	8b 45 08             	mov    0x8(%ebp),%eax
   112fa:	8b 58 08             	mov    0x8(%eax),%ebx
   112fd:	8b 45 08             	mov    0x8(%ebp),%eax
   11300:	8b 48 0c             	mov    0xc(%eax),%ecx
   11303:	8b 45 08             	mov    0x8(%ebp),%eax
   11306:	8b 50 0c             	mov    0xc(%eax),%edx
   11309:	8b 45 08             	mov    0x8(%ebp),%eax
   1130c:	8b 40 3c             	mov    0x3c(%eax),%eax
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
   1130f:	83 ec 04             	sub    $0x4,%esp
   11312:	57                   	push   %edi
   11313:	56                   	push   %esi
   11314:	53                   	push   %ebx
   11315:	51                   	push   %ecx
   11316:	52                   	push   %edx
   11317:	50                   	push   %eax
   11318:	68 cc 34 01 00       	push   $0x134cc
   1131d:	e8 9f 1d 00 00       	call   130c1 <log_printf>
   11322:	83 c4 20             	add    $0x20,%esp
              "ESI:\t\t0x%x\n"
              "EDI:\t\t0x%x\n"
              "EBP:\t\t0x%x\n"
              "ESP:\t\t0x%x", 
              frame->eax, frame->ebx, frame->ecx, frame->edx,
              frame->esi, frame->edi, frame->ebp, frame->esp 
   11325:	8b 45 08             	mov    0x8(%ebp),%eax
   11328:	8b 48 1c             	mov    0x1c(%eax),%ecx
   1132b:	8b 45 08             	mov    0x8(%ebp),%eax
   1132e:	8b 40 18             	mov    0x18(%eax),%eax
   11331:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   11334:	8b 45 08             	mov    0x8(%ebp),%eax
   11337:	8b 58 10             	mov    0x10(%eax),%ebx
   1133a:	89 5d e0             	mov    %ebx,-0x20(%ebp)
   1133d:	8b 45 08             	mov    0x8(%ebp),%eax
   11340:	8b 78 14             	mov    0x14(%eax),%edi
              frame->eax, frame->ebx, frame->ecx, frame->edx,
   11343:	8b 45 08             	mov    0x8(%ebp),%eax
   11346:	8b 70 24             	mov    0x24(%eax),%esi
   11349:	8b 45 08             	mov    0x8(%ebp),%eax
   1134c:	8b 58 28             	mov    0x28(%eax),%ebx
   1134f:	8b 45 08             	mov    0x8(%ebp),%eax
   11352:	8b 50 20             	mov    0x20(%eax),%edx
   11355:	8b 45 08             	mov    0x8(%ebp),%eax
   11358:	8b 40 2c             	mov    0x2c(%eax),%eax
  log_printf( 
   1135b:	83 ec 0c             	sub    $0xc,%esp
   1135e:	51                   	push   %ecx
   1135f:	ff 75 e4             	push   -0x1c(%ebp)
   11362:	ff 75 e0             	push   -0x20(%ebp)
   11365:	57                   	push   %edi
   11366:	56                   	push   %esi
   11367:	53                   	push   %ebx
   11368:	52                   	push   %edx
   11369:	50                   	push   %eax
   1136a:	68 fc 34 01 00       	push   $0x134fc
   1136f:	e8 4d 1d 00 00       	call   130c1 <log_printf>
   11374:	83 c4 30             	add    $0x30,%esp
              );

  log_printf("EIP:\t\t0x%x\nEFLAGS:\t\t0x%x", frame->eip, frame->eflags);
   11377:	8b 45 08             	mov    0x8(%ebp),%eax
   1137a:	8b 50 40             	mov    0x40(%eax),%edx
   1137d:	8b 45 08             	mov    0x8(%ebp),%eax
   11380:	8b 40 38             	mov    0x38(%eax),%eax
   11383:	83 ec 04             	sub    $0x4,%esp
   11386:	52                   	push   %edx
   11387:	50                   	push   %eax
   11388:	68 54 35 01 00       	push   $0x13554
   1138d:	e8 2f 1d 00 00       	call   130c1 <log_printf>
   11392:	83 c4 10             	add    $0x10,%esp
}
   11395:	90                   	nop
   11396:	8d 65 f4             	lea    -0xc(%ebp),%esp
   11399:	5b                   	pop    %ebx
   1139a:	5e                   	pop    %esi
   1139b:	5f                   	pop    %edi
   1139c:	5d                   	pop    %ebp
   1139d:	c3                   	ret    

0001139e <do_default_handler>:
 *
 * @param message 异常信息
 * @param fram  异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
static void do_default_handler(const exception_frame_t *frame,
                               const char *message) {
   1139e:	55                   	push   %ebp
   1139f:	89 e5                	mov    %esp,%ebp
   113a1:	83 ec 08             	sub    $0x8,%esp

  log_printf("---------------------------------------------------");
   113a4:	83 ec 0c             	sub    $0xc,%esp
   113a7:	68 70 35 01 00       	push   $0x13570
   113ac:	e8 10 1d 00 00       	call   130c1 <log_printf>
   113b1:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ/Exception happend: %s", message);
   113b4:	83 ec 08             	sub    $0x8,%esp
   113b7:	ff 75 0c             	push   0xc(%ebp)
   113ba:	68 a4 35 01 00       	push   $0x135a4
   113bf:	e8 fd 1c 00 00       	call   130c1 <log_printf>
   113c4:	83 c4 10             	add    $0x10,%esp
  print_exception_fram(frame);
   113c7:	83 ec 0c             	sub    $0xc,%esp
   113ca:	ff 75 08             	push   0x8(%ebp)
   113cd:	e8 e3 fe ff ff       	call   112b5 <print_exception_fram>
   113d2:	83 c4 10             	add    $0x10,%esp
                              
  
  for (;;) {
    hlt();
   113d5:	e8 53 fe ff ff       	call   1122d <hlt>
   113da:	eb f9                	jmp    113d5 <do_default_handler+0x37>

000113dc <do_handler_unknown>:

/**
 * @brief   对没有针对性处理程序的异常进行处理
 * @param frame 异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
void do_handler_unknown(const exception_frame_t *frame) {
   113dc:	55                   	push   %ebp
   113dd:	89 e5                	mov    %esp,%ebp
   113df:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "unknown exception");
   113e2:	83 ec 08             	sub    $0x8,%esp
   113e5:	68 be 35 01 00       	push   $0x135be
   113ea:	ff 75 08             	push   0x8(%ebp)
   113ed:	e8 ac ff ff ff       	call   1139e <do_default_handler>
   113f2:	83 c4 10             	add    $0x10,%esp
}
   113f5:	90                   	nop
   113f6:	c9                   	leave  
   113f7:	c3                   	ret    

000113f8 <do_handler_divider>:
/**
 * @brief  除0异常
 *
 * @param frame 异常栈帧
 */
void do_handler_divider(const exception_frame_t *frame) {
   113f8:	55                   	push   %ebp
   113f9:	89 e5                	mov    %esp,%ebp
   113fb:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "divider exception");
   113fe:	83 ec 08             	sub    $0x8,%esp
   11401:	68 d0 35 01 00       	push   $0x135d0
   11406:	ff 75 08             	push   0x8(%ebp)
   11409:	e8 90 ff ff ff       	call   1139e <do_default_handler>
   1140e:	83 c4 10             	add    $0x10,%esp
}
   11411:	90                   	nop
   11412:	c9                   	leave  
   11413:	c3                   	ret    

00011414 <do_handler_debug>:

void do_handler_debug(const exception_frame_t *frame) {
   11414:	55                   	push   %ebp
   11415:	89 e5                	mov    %esp,%ebp
   11417:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "debug exception");
   1141a:	83 ec 08             	sub    $0x8,%esp
   1141d:	68 e2 35 01 00       	push   $0x135e2
   11422:	ff 75 08             	push   0x8(%ebp)
   11425:	e8 74 ff ff ff       	call   1139e <do_default_handler>
   1142a:	83 c4 10             	add    $0x10,%esp
}
   1142d:	90                   	nop
   1142e:	c9                   	leave  
   1142f:	c3                   	ret    

00011430 <do_handler_nmi>:

void do_handler_nmi(const exception_frame_t *frame) {
   11430:	55                   	push   %ebp
   11431:	89 e5                	mov    %esp,%ebp
   11433:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "nmi exception");
   11436:	83 ec 08             	sub    $0x8,%esp
   11439:	68 f2 35 01 00       	push   $0x135f2
   1143e:	ff 75 08             	push   0x8(%ebp)
   11441:	e8 58 ff ff ff       	call   1139e <do_default_handler>
   11446:	83 c4 10             	add    $0x10,%esp
}
   11449:	90                   	nop
   1144a:	c9                   	leave  
   1144b:	c3                   	ret    

0001144c <do_handler_breakpoint>:
void do_handler_breakpoint(const exception_frame_t *frame) {
   1144c:	55                   	push   %ebp
   1144d:	89 e5                	mov    %esp,%ebp
   1144f:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "breakpoint exception");
   11452:	83 ec 08             	sub    $0x8,%esp
   11455:	68 00 36 01 00       	push   $0x13600
   1145a:	ff 75 08             	push   0x8(%ebp)
   1145d:	e8 3c ff ff ff       	call   1139e <do_default_handler>
   11462:	83 c4 10             	add    $0x10,%esp
}
   11465:	90                   	nop
   11466:	c9                   	leave  
   11467:	c3                   	ret    

00011468 <do_handler_overflow>:
void do_handler_overflow(const exception_frame_t *frame) {
   11468:	55                   	push   %ebp
   11469:	89 e5                	mov    %esp,%ebp
   1146b:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "overflow exception");
   1146e:	83 ec 08             	sub    $0x8,%esp
   11471:	68 15 36 01 00       	push   $0x13615
   11476:	ff 75 08             	push   0x8(%ebp)
   11479:	e8 20 ff ff ff       	call   1139e <do_default_handler>
   1147e:	83 c4 10             	add    $0x10,%esp
}
   11481:	90                   	nop
   11482:	c9                   	leave  
   11483:	c3                   	ret    

00011484 <do_handler_bound_range>:
void do_handler_bound_range(const exception_frame_t *frame) {
   11484:	55                   	push   %ebp
   11485:	89 e5                	mov    %esp,%ebp
   11487:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "bound_range exception");
   1148a:	83 ec 08             	sub    $0x8,%esp
   1148d:	68 28 36 01 00       	push   $0x13628
   11492:	ff 75 08             	push   0x8(%ebp)
   11495:	e8 04 ff ff ff       	call   1139e <do_default_handler>
   1149a:	83 c4 10             	add    $0x10,%esp
}
   1149d:	90                   	nop
   1149e:	c9                   	leave  
   1149f:	c3                   	ret    

000114a0 <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(const exception_frame_t *frame) {
   114a0:	55                   	push   %ebp
   114a1:	89 e5                	mov    %esp,%ebp
   114a3:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_opcode exception");
   114a6:	83 ec 08             	sub    $0x8,%esp
   114a9:	68 3e 36 01 00       	push   $0x1363e
   114ae:	ff 75 08             	push   0x8(%ebp)
   114b1:	e8 e8 fe ff ff       	call   1139e <do_default_handler>
   114b6:	83 c4 10             	add    $0x10,%esp
}
   114b9:	90                   	nop
   114ba:	c9                   	leave  
   114bb:	c3                   	ret    

000114bc <do_handler_device_unavailable>:
void do_handler_device_unavailable(const exception_frame_t *frame) {
   114bc:	55                   	push   %ebp
   114bd:	89 e5                	mov    %esp,%ebp
   114bf:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "device_unavailable exception");
   114c2:	83 ec 08             	sub    $0x8,%esp
   114c5:	68 57 36 01 00       	push   $0x13657
   114ca:	ff 75 08             	push   0x8(%ebp)
   114cd:	e8 cc fe ff ff       	call   1139e <do_default_handler>
   114d2:	83 c4 10             	add    $0x10,%esp
}
   114d5:	90                   	nop
   114d6:	c9                   	leave  
   114d7:	c3                   	ret    

000114d8 <do_handler_double_fault>:
void do_handler_double_fault(const exception_frame_t *frame) {
   114d8:	55                   	push   %ebp
   114d9:	89 e5                	mov    %esp,%ebp
   114db:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "double_fault exception");
   114de:	83 ec 08             	sub    $0x8,%esp
   114e1:	68 74 36 01 00       	push   $0x13674
   114e6:	ff 75 08             	push   0x8(%ebp)
   114e9:	e8 b0 fe ff ff       	call   1139e <do_default_handler>
   114ee:	83 c4 10             	add    $0x10,%esp
}
   114f1:	90                   	nop
   114f2:	c9                   	leave  
   114f3:	c3                   	ret    

000114f4 <do_handler_invalid_tss>:
void do_handler_invalid_tss(const exception_frame_t *frame) {
   114f4:	55                   	push   %ebp
   114f5:	89 e5                	mov    %esp,%ebp
   114f7:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_tss exception");
   114fa:	83 ec 08             	sub    $0x8,%esp
   114fd:	68 8b 36 01 00       	push   $0x1368b
   11502:	ff 75 08             	push   0x8(%ebp)
   11505:	e8 94 fe ff ff       	call   1139e <do_default_handler>
   1150a:	83 c4 10             	add    $0x10,%esp
}
   1150d:	90                   	nop
   1150e:	c9                   	leave  
   1150f:	c3                   	ret    

00011510 <do_handler_segment_not_present>:
void do_handler_segment_not_present(const exception_frame_t *frame) {
   11510:	55                   	push   %ebp
   11511:	89 e5                	mov    %esp,%ebp
   11513:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "segment_not_present exception");
   11516:	83 ec 08             	sub    $0x8,%esp
   11519:	68 a1 36 01 00       	push   $0x136a1
   1151e:	ff 75 08             	push   0x8(%ebp)
   11521:	e8 78 fe ff ff       	call   1139e <do_default_handler>
   11526:	83 c4 10             	add    $0x10,%esp
}
   11529:	90                   	nop
   1152a:	c9                   	leave  
   1152b:	c3                   	ret    

0001152c <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(const exception_frame_t *frame) {
   1152c:	55                   	push   %ebp
   1152d:	89 e5                	mov    %esp,%ebp
   1152f:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "stack_segment_fault exception");
   11532:	83 ec 08             	sub    $0x8,%esp
   11535:	68 bf 36 01 00       	push   $0x136bf
   1153a:	ff 75 08             	push   0x8(%ebp)
   1153d:	e8 5c fe ff ff       	call   1139e <do_default_handler>
   11542:	83 c4 10             	add    $0x10,%esp
}
   11545:	90                   	nop
   11546:	c9                   	leave  
   11547:	c3                   	ret    

00011548 <do_handler_general_protection>:
void do_handler_general_protection(const exception_frame_t *frame) {
   11548:	55                   	push   %ebp
   11549:	89 e5                	mov    %esp,%ebp
   1154b:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "general_protection exception");
   1154e:	83 ec 08             	sub    $0x8,%esp
   11551:	68 dd 36 01 00       	push   $0x136dd
   11556:	ff 75 08             	push   0x8(%ebp)
   11559:	e8 40 fe ff ff       	call   1139e <do_default_handler>
   1155e:	83 c4 10             	add    $0x10,%esp
}
   11561:	90                   	nop
   11562:	c9                   	leave  
   11563:	c3                   	ret    

00011564 <do_handler_page_fault>:
void do_handler_page_fault(const exception_frame_t *frame) {
   11564:	55                   	push   %ebp
   11565:	89 e5                	mov    %esp,%ebp
   11567:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "page_fault exception");
   1156a:	83 ec 08             	sub    $0x8,%esp
   1156d:	68 fa 36 01 00       	push   $0x136fa
   11572:	ff 75 08             	push   0x8(%ebp)
   11575:	e8 24 fe ff ff       	call   1139e <do_default_handler>
   1157a:	83 c4 10             	add    $0x10,%esp
}
   1157d:	90                   	nop
   1157e:	c9                   	leave  
   1157f:	c3                   	ret    

00011580 <do_handler_fpu_error>:
void do_handler_fpu_error(const exception_frame_t *frame) {
   11580:	55                   	push   %ebp
   11581:	89 e5                	mov    %esp,%ebp
   11583:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "fpu_error exception");
   11586:	83 ec 08             	sub    $0x8,%esp
   11589:	68 0f 37 01 00       	push   $0x1370f
   1158e:	ff 75 08             	push   0x8(%ebp)
   11591:	e8 08 fe ff ff       	call   1139e <do_default_handler>
   11596:	83 c4 10             	add    $0x10,%esp
}
   11599:	90                   	nop
   1159a:	c9                   	leave  
   1159b:	c3                   	ret    

0001159c <do_handler_alignment_check>:
void do_handler_alignment_check(const exception_frame_t *frame) {
   1159c:	55                   	push   %ebp
   1159d:	89 e5                	mov    %esp,%ebp
   1159f:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "alignment_check exception");
   115a2:	83 ec 08             	sub    $0x8,%esp
   115a5:	68 23 37 01 00       	push   $0x13723
   115aa:	ff 75 08             	push   0x8(%ebp)
   115ad:	e8 ec fd ff ff       	call   1139e <do_default_handler>
   115b2:	83 c4 10             	add    $0x10,%esp
}
   115b5:	90                   	nop
   115b6:	c9                   	leave  
   115b7:	c3                   	ret    

000115b8 <do_handler_machine_check>:
void do_handler_machine_check(const exception_frame_t *frame) {
   115b8:	55                   	push   %ebp
   115b9:	89 e5                	mov    %esp,%ebp
   115bb:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "machine_check exception");
   115be:	83 ec 08             	sub    $0x8,%esp
   115c1:	68 3d 37 01 00       	push   $0x1373d
   115c6:	ff 75 08             	push   0x8(%ebp)
   115c9:	e8 d0 fd ff ff       	call   1139e <do_default_handler>
   115ce:	83 c4 10             	add    $0x10,%esp
}
   115d1:	90                   	nop
   115d2:	c9                   	leave  
   115d3:	c3                   	ret    

000115d4 <do_handler_smd_exception>:
void do_handler_smd_exception(const exception_frame_t *frame) {
   115d4:	55                   	push   %ebp
   115d5:	89 e5                	mov    %esp,%ebp
   115d7:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "smd_exception exception");
   115da:	83 ec 08             	sub    $0x8,%esp
   115dd:	68 55 37 01 00       	push   $0x13755
   115e2:	ff 75 08             	push   0x8(%ebp)
   115e5:	e8 b4 fd ff ff       	call   1139e <do_default_handler>
   115ea:	83 c4 10             	add    $0x10,%esp
}
   115ed:	90                   	nop
   115ee:	c9                   	leave  
   115ef:	c3                   	ret    

000115f0 <do_handler_virtual_exception>:
void do_handler_virtual_exception(const exception_frame_t *frame) {
   115f0:	55                   	push   %ebp
   115f1:	89 e5                	mov    %esp,%ebp
   115f3:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "virtual_exception exception");
   115f6:	83 ec 08             	sub    $0x8,%esp
   115f9:	68 6d 37 01 00       	push   $0x1376d
   115fe:	ff 75 08             	push   0x8(%ebp)
   11601:	e8 98 fd ff ff       	call   1139e <do_default_handler>
   11606:	83 c4 10             	add    $0x10,%esp
}
   11609:	90                   	nop
   1160a:	c9                   	leave  
   1160b:	c3                   	ret    

0001160c <do_handler_control_exception>:
void do_handler_control_exception(const exception_frame_t *frame) {
   1160c:	55                   	push   %ebp
   1160d:	89 e5                	mov    %esp,%ebp
   1160f:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "control_exception exception");
   11612:	83 ec 08             	sub    $0x8,%esp
   11615:	68 89 37 01 00       	push   $0x13789
   1161a:	ff 75 08             	push   0x8(%ebp)
   1161d:	e8 7c fd ff ff       	call   1139e <do_default_handler>
   11622:	83 c4 10             	add    $0x10,%esp
}
   11625:	90                   	nop
   11626:	c9                   	leave  
   11627:	c3                   	ret    

00011628 <gate_desc_set>:
 * @param selector 中断门对应的处理程序所在的段的选择子
 * @param offset 中段门对应的处理程序相对于所在段的偏移量
 * @param attr 中段门的属性
 */
static void gate_desc_set(gate_desc_t *desc, const uint16_t selector, const uint32_t offset,
                          const uint16_t attr) {
   11628:	55                   	push   %ebp
   11629:	89 e5                	mov    %esp,%ebp
   1162b:	83 ec 08             	sub    $0x8,%esp
   1162e:	8b 55 0c             	mov    0xc(%ebp),%edx
   11631:	8b 45 14             	mov    0x14(%ebp),%eax
   11634:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11638:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
  // 1.初始化偏移量
  desc->offset15_0 = offset & 0xffff;
   1163c:	8b 45 10             	mov    0x10(%ebp),%eax
   1163f:	89 c2                	mov    %eax,%edx
   11641:	8b 45 08             	mov    0x8(%ebp),%eax
   11644:	66 89 10             	mov    %dx,(%eax)
  desc->offset31_16 = (offset >> 16) & 0xffff;
   11647:	8b 45 10             	mov    0x10(%ebp),%eax
   1164a:	c1 e8 10             	shr    $0x10,%eax
   1164d:	89 c2                	mov    %eax,%edx
   1164f:	8b 45 08             	mov    0x8(%ebp),%eax
   11652:	66 89 50 06          	mov    %dx,0x6(%eax)

  // 2.初始化选择子
  desc->selector = selector;
   11656:	8b 45 08             	mov    0x8(%ebp),%eax
   11659:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1165d:	66 89 50 02          	mov    %dx,0x2(%eax)

  // 3.初始化属性位
  desc->attr = attr;
   11661:	8b 45 08             	mov    0x8(%ebp),%eax
   11664:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   11668:	66 89 50 04          	mov    %dx,0x4(%eax)
}
   1166c:	90                   	nop
   1166d:	c9                   	leave  
   1166e:	c3                   	ret    

0001166f <idt_install>:
 *
 * @param idt_num 异常的下标
 * @param handler 异常处理程序的偏移地址
 * @return int 成功返回 0 失败放回 -1
 */
int idt_install(const int idt_num, const idt_handler_t handler) {
   1166f:	55                   	push   %ebp
   11670:	89 e5                	mov    %esp,%ebp
  // 1.判断IDT下标是否越界
  if (idt_num >= IDT_TABLE_SIZE || idt_num < 0) return -1;
   11672:	81 7d 08 ff 00 00 00 	cmpl   $0xff,0x8(%ebp)
   11679:	7f 06                	jg     11681 <idt_install+0x12>
   1167b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1167f:	79 07                	jns    11688 <idt_install+0x19>
   11681:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11686:	eb 25                	jmp    116ad <idt_install+0x3e>

  // 2.在IDT表中设置下标为 idt_num 的中断门
  gate_desc_set(idt_table + idt_num, KERNEL_SELECTOR_CS, (uint32_t)handler,
   11688:	8b 45 0c             	mov    0xc(%ebp),%eax
   1168b:	8b 55 08             	mov    0x8(%ebp),%edx
   1168e:	c1 e2 03             	shl    $0x3,%edx
   11691:	81 c2 c0 e3 02 00    	add    $0x2e3c0,%edx
   11697:	68 00 8e 00 00       	push   $0x8e00
   1169c:	50                   	push   %eax
   1169d:	6a 08                	push   $0x8
   1169f:	52                   	push   %edx
   116a0:	e8 83 ff ff ff       	call   11628 <gate_desc_set>
   116a5:	83 c4 10             	add    $0x10,%esp
                GATE_TYPE_INT | GATE_ATTR_P | GATE_ATTR_DPL_0);

  return 0;
   116a8:	b8 00 00 00 00       	mov    $0x0,%eax
}
   116ad:	c9                   	leave  
   116ae:	c3                   	ret    

000116af <init_pic>:

/**
 * @brief  初始化主从8259芯片
 * 
 */
static void init_pic(void) {
   116af:	55                   	push   %ebp
   116b0:	89 e5                	mov    %esp,%ebp
  //1.对主片(8259A芯片)进行初始化, 写入时必须按照ICW1~4的顺序写入
  outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);  //ICW1:边缘触发，级联模式，需要ICW4
   116b2:	6a 11                	push   $0x11
   116b4:	6a 20                	push   $0x20
   116b6:	e8 96 fb ff ff       	call   11251 <outb>
   116bb:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW2, PIC_ICW2_IDT_START);                //ICW2:起始中断向量号为0x20
   116be:	6a 20                	push   $0x20
   116c0:	6a 21                	push   $0x21
   116c2:	e8 8a fb ff ff       	call   11251 <outb>
   116c7:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW3, PIC_ICW3_MASTER_CASCADE);           //ICW3:主片用IR2级联从片
   116ca:	6a 04                	push   $0x4
   116cc:	6a 21                	push   $0x21
   116ce:	e8 7e fb ff ff       	call   11251 <outb>
   116d3:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW4, PIC_ICW4_8086);                     //ICW4:8086模式，正常EOI
   116d6:	6a 01                	push   $0x1
   116d8:	6a 21                	push   $0x21
   116da:	e8 72 fb ff ff       	call   11251 <outb>
   116df:	83 c4 08             	add    $0x8,%esp

  //2.对从片(8259A芯片)进行初始化
  outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);
   116e2:	6a 11                	push   $0x11
   116e4:	68 a0 00 00 00       	push   $0xa0
   116e9:	e8 63 fb ff ff       	call   11251 <outb>
   116ee:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW2, PIC_ICW2_IDT_START + 8); //第一块芯片占用了8个中断，所以第二块芯片从第8个中断的下一个开始
   116f1:	6a 28                	push   $0x28
   116f3:	68 a1 00 00 00       	push   $0xa1
   116f8:	e8 54 fb ff ff       	call   11251 <outb>
   116fd:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW3, PIC_ICW3_SLAVE_CASCADE);
   11700:	6a 02                	push   $0x2
   11702:	68 a1 00 00 00       	push   $0xa1
   11707:	e8 45 fb ff ff       	call   11251 <outb>
   1170c:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW4, PIC_ICW4_8086);
   1170f:	6a 01                	push   $0x1
   11711:	68 a1 00 00 00       	push   $0xa1
   11716:	e8 36 fb ff ff       	call   11251 <outb>
   1171b:	83 c4 08             	add    $0x8,%esp


  //3.初始化完两块8259芯片后，还需要为每一个中断设置处理程序
  //才可以去接收中断，所以现在要屏蔽中断，IMR位置1则屏蔽该中断请求，0则不屏蔽
  outb(PIC0_IMR, 0xfb); //屏蔽主片除 irq2(第3位) 以外的位传来的中断，(1111 1011)
   1171e:	68 fb 00 00 00       	push   $0xfb
   11723:	6a 21                	push   $0x21
   11725:	e8 27 fb ff ff       	call   11251 <outb>
   1172a:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_IMR, 0xff); //屏蔽从片的所有中断
   1172d:	68 ff 00 00 00       	push   $0xff
   11732:	68 a1 00 00 00       	push   $0xa1
   11737:	e8 15 fb ff ff       	call   11251 <outb>
   1173c:	83 c4 08             	add    $0x8,%esp


}
   1173f:	90                   	nop
   11740:	c9                   	leave  
   11741:	c3                   	ret    

00011742 <idt_init>:

/**
 * @brief  初始化中断向量表
 *
 */
void idt_init(void) {
   11742:	55                   	push   %ebp
   11743:	89 e5                	mov    %esp,%ebp
   11745:	83 ec 10             	sub    $0x10,%esp
  // 1.初始化IDT中的各个中断门(未知异常类型)
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   11748:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   1174f:	eb 14                	jmp    11765 <idt_init+0x23>
    idt_install(i, (idt_handler_t)exception_handler_unknown);
   11751:	68 2a 00 01 00       	push   $0x1002a
   11756:	ff 75 fc             	push   -0x4(%ebp)
   11759:	e8 11 ff ff ff       	call   1166f <idt_install>
   1175e:	83 c4 08             	add    $0x8,%esp
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   11761:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   11765:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   1176c:	7e e3                	jle    11751 <idt_init+0xf>
  }

  // 2.绑定异常中断向量表中对应下标的中断门的处理函数
  idt_install(IDT0_DE, (idt_handler_t)exception_handler_divider);
   1176e:	68 47 00 01 00       	push   $0x10047
   11773:	6a 00                	push   $0x0
   11775:	e8 f5 fe ff ff       	call   1166f <idt_install>
   1177a:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT1_DB, (idt_handler_t)exception_handler_debug);
   1177d:	68 64 00 01 00       	push   $0x10064
   11782:	6a 01                	push   $0x1
   11784:	e8 e6 fe ff ff       	call   1166f <idt_install>
   11789:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT2_NMI, (idt_handler_t)exception_handler_nmi);
   1178c:	68 81 00 01 00       	push   $0x10081
   11791:	6a 02                	push   $0x2
   11793:	e8 d7 fe ff ff       	call   1166f <idt_install>
   11798:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT3_BP, (idt_handler_t)exception_handler_breakpoint);
   1179b:	68 9e 00 01 00       	push   $0x1009e
   117a0:	6a 03                	push   $0x3
   117a2:	e8 c8 fe ff ff       	call   1166f <idt_install>
   117a7:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT4_OF, (idt_handler_t)exception_handler_overflow);
   117aa:	68 bb 00 01 00       	push   $0x100bb
   117af:	6a 04                	push   $0x4
   117b1:	e8 b9 fe ff ff       	call   1166f <idt_install>
   117b6:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT5_BR, (idt_handler_t)exception_handler_bound_range);
   117b9:	68 d8 00 01 00       	push   $0x100d8
   117be:	6a 05                	push   $0x5
   117c0:	e8 aa fe ff ff       	call   1166f <idt_install>
   117c5:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT6_UD, (idt_handler_t)exception_handler_invalid_opcode);
   117c8:	68 f5 00 01 00       	push   $0x100f5
   117cd:	6a 06                	push   $0x6
   117cf:	e8 9b fe ff ff       	call   1166f <idt_install>
   117d4:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT7_NM, (idt_handler_t)exception_handler_device_unavailable);
   117d7:	68 12 01 01 00       	push   $0x10112
   117dc:	6a 07                	push   $0x7
   117de:	e8 8c fe ff ff       	call   1166f <idt_install>
   117e3:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT8_DF, (idt_handler_t)exception_handler_double_fault);
   117e6:	68 2f 01 01 00       	push   $0x1012f
   117eb:	6a 08                	push   $0x8
   117ed:	e8 7d fe ff ff       	call   1166f <idt_install>
   117f2:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT10_TS, (idt_handler_t)exception_handler_invalid_tss);
   117f5:	68 4a 01 01 00       	push   $0x1014a
   117fa:	6a 0a                	push   $0xa
   117fc:	e8 6e fe ff ff       	call   1166f <idt_install>
   11801:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT11_NP, (idt_handler_t)exception_handler_segment_not_present);
   11804:	68 65 01 01 00       	push   $0x10165
   11809:	6a 0b                	push   $0xb
   1180b:	e8 5f fe ff ff       	call   1166f <idt_install>
   11810:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT12_SS, (idt_handler_t)exception_handler_stack_segment_fault);
   11813:	68 80 01 01 00       	push   $0x10180
   11818:	6a 0c                	push   $0xc
   1181a:	e8 50 fe ff ff       	call   1166f <idt_install>
   1181f:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT13_GP, (idt_handler_t)exception_handler_general_protection);
   11822:	68 9b 01 01 00       	push   $0x1019b
   11827:	6a 0d                	push   $0xd
   11829:	e8 41 fe ff ff       	call   1166f <idt_install>
   1182e:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT14_PF, (idt_handler_t)exception_handler_page_fault);
   11831:	68 b6 01 01 00       	push   $0x101b6
   11836:	6a 0e                	push   $0xe
   11838:	e8 32 fe ff ff       	call   1166f <idt_install>
   1183d:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT16_MF, (idt_handler_t)exception_handler_fpu_error);
   11840:	68 d1 01 01 00       	push   $0x101d1
   11845:	6a 10                	push   $0x10
   11847:	e8 23 fe ff ff       	call   1166f <idt_install>
   1184c:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT17_AC, (idt_handler_t)exception_handler_alignment_check);
   1184f:	68 ee 01 01 00       	push   $0x101ee
   11854:	6a 11                	push   $0x11
   11856:	e8 14 fe ff ff       	call   1166f <idt_install>
   1185b:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT18_MC, (idt_handler_t)exception_handler_machine_check);
   1185e:	68 09 02 01 00       	push   $0x10209
   11863:	6a 12                	push   $0x12
   11865:	e8 05 fe ff ff       	call   1166f <idt_install>
   1186a:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT19_XM, (idt_handler_t)exception_handler_smd_exception);
   1186d:	68 26 02 01 00       	push   $0x10226
   11872:	6a 13                	push   $0x13
   11874:	e8 f6 fd ff ff       	call   1166f <idt_install>
   11879:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT20_VE, (idt_handler_t)exception_handler_virtual_exception);
   1187c:	68 43 02 01 00       	push   $0x10243
   11881:	6a 14                	push   $0x14
   11883:	e8 e7 fd ff ff       	call   1166f <idt_install>
   11888:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT21_CP, (idt_handler_t)exception_handler_control_exception);
   1188b:	68 60 02 01 00       	push   $0x10260
   11890:	6a 15                	push   $0x15
   11892:	e8 d8 fd ff ff       	call   1166f <idt_install>
   11897:	83 c4 08             	add    $0x8,%esp

  //3.加载IDT
  lidt((uint32_t)idt_table, sizeof(idt_table));
   1189a:	b8 c0 e3 02 00       	mov    $0x2e3c0,%eax
   1189f:	68 00 08 00 00       	push   $0x800
   118a4:	50                   	push   %eax
   118a5:	e8 c8 f9 ff ff       	call   11272 <lidt>
   118aa:	83 c4 08             	add    $0x8,%esp

  //4.初始化8259设备中断芯片
  init_pic();
   118ad:	e8 fd fd ff ff       	call   116af <init_pic>
}
   118b2:	90                   	nop
   118b3:	c9                   	leave  
   118b4:	c3                   	ret    

000118b5 <idt_enable>:
/**
 * @brief  开启外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号,即IDT中的下标
 */
void idt_enable(uint8_t irq_num) {
   118b5:	55                   	push   %ebp
   118b6:	89 e5                	mov    %esp,%ebp
   118b8:	53                   	push   %ebx
   118b9:	83 ec 14             	sub    $0x14,%esp
   118bc:	8b 45 08             	mov    0x8(%ebp),%eax
   118bf:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   118c2:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   118c6:	76 7f                	jbe    11947 <idt_enable+0x92>
   118c8:	80 7d e8 2e          	cmpb   $0x2e,-0x18(%ebp)
   118cc:	77 79                	ja     11947 <idt_enable+0x92>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   118ce:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置0，即不屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   118d2:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   118d6:	77 33                	ja     1190b <idt_enable+0x56>
    uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   118d8:	6a 21                	push   $0x21
   118da:	e8 55 f9 ff ff       	call   11234 <inb>
   118df:	83 c4 04             	add    $0x4,%esp
   118e2:	89 c3                	mov    %eax,%ebx
   118e4:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   118e8:	ba 01 00 00 00       	mov    $0x1,%edx
   118ed:	89 c1                	mov    %eax,%ecx
   118ef:	d3 e2                	shl    %cl,%edx
   118f1:	89 d0                	mov    %edx,%eax
   118f3:	f7 d0                	not    %eax
   118f5:	21 d8                	and    %ebx,%eax
   118f7:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   118fa:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   118fe:	50                   	push   %eax
   118ff:	6a 21                	push   $0x21
   11901:	e8 4b f9 ff ff       	call   11251 <outb>
   11906:	83 c4 08             	add    $0x8,%esp
   11909:	eb 3d                	jmp    11948 <idt_enable+0x93>
  } else {
    uint8_t mask = inb(PIC1_IMR) & ~(1 << (irq_num - 8));
   1190b:	68 a1 00 00 00       	push   $0xa1
   11910:	e8 1f f9 ff ff       	call   11234 <inb>
   11915:	83 c4 04             	add    $0x4,%esp
   11918:	89 c3                	mov    %eax,%ebx
   1191a:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   1191e:	83 e8 08             	sub    $0x8,%eax
   11921:	ba 01 00 00 00       	mov    $0x1,%edx
   11926:	89 c1                	mov    %eax,%ecx
   11928:	d3 e2                	shl    %cl,%edx
   1192a:	89 d0                	mov    %edx,%eax
   1192c:	f7 d0                	not    %eax
   1192e:	21 d8                	and    %ebx,%eax
   11930:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   11933:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11937:	50                   	push   %eax
   11938:	68 a1 00 00 00       	push   $0xa1
   1193d:	e8 0f f9 ff ff       	call   11251 <outb>
   11942:	83 c4 08             	add    $0x8,%esp
   11945:	eb 01                	jmp    11948 <idt_enable+0x93>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   11947:	90                   	nop
  }
  
}
   11948:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1194b:	c9                   	leave  
   1194c:	c3                   	ret    

0001194d <idt_disable>:
/**
 * @brief  关闭外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号，即IDT中的下标
 */
void idt_disable(uint8_t irq_num) {
   1194d:	55                   	push   %ebp
   1194e:	89 e5                	mov    %esp,%ebp
   11950:	53                   	push   %ebx
   11951:	83 ec 14             	sub    $0x14,%esp
   11954:	8b 45 08             	mov    0x8(%ebp),%eax
   11957:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   1195a:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   1195e:	76 7b                	jbe    119db <idt_disable+0x8e>
   11960:	80 7d e8 2f          	cmpb   $0x2f,-0x18(%ebp)
   11964:	77 75                	ja     119db <idt_disable+0x8e>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   11966:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置1，即屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   1196a:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   1196e:	77 31                	ja     119a1 <idt_disable+0x54>
    uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   11970:	6a 21                	push   $0x21
   11972:	e8 bd f8 ff ff       	call   11234 <inb>
   11977:	83 c4 04             	add    $0x4,%esp
   1197a:	89 c3                	mov    %eax,%ebx
   1197c:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   11980:	ba 01 00 00 00       	mov    $0x1,%edx
   11985:	89 c1                	mov    %eax,%ecx
   11987:	d3 e2                	shl    %cl,%edx
   11989:	89 d0                	mov    %edx,%eax
   1198b:	09 d8                	or     %ebx,%eax
   1198d:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   11990:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11994:	50                   	push   %eax
   11995:	6a 21                	push   $0x21
   11997:	e8 b5 f8 ff ff       	call   11251 <outb>
   1199c:	83 c4 08             	add    $0x8,%esp
   1199f:	eb 3b                	jmp    119dc <idt_disable+0x8f>
  } else {
    uint8_t mask = inb(PIC1_IMR) | (1 << (irq_num - 8));
   119a1:	68 a1 00 00 00       	push   $0xa1
   119a6:	e8 89 f8 ff ff       	call   11234 <inb>
   119ab:	83 c4 04             	add    $0x4,%esp
   119ae:	89 c3                	mov    %eax,%ebx
   119b0:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   119b4:	83 e8 08             	sub    $0x8,%eax
   119b7:	ba 01 00 00 00       	mov    $0x1,%edx
   119bc:	89 c1                	mov    %eax,%ecx
   119be:	d3 e2                	shl    %cl,%edx
   119c0:	89 d0                	mov    %edx,%eax
   119c2:	09 d8                	or     %ebx,%eax
   119c4:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   119c7:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   119cb:	50                   	push   %eax
   119cc:	68 a1 00 00 00       	push   $0xa1
   119d1:	e8 7b f8 ff ff       	call   11251 <outb>
   119d6:	83 c4 08             	add    $0x8,%esp
   119d9:	eb 01                	jmp    119dc <idt_disable+0x8f>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   119db:	90                   	nop
  }
  
}
   119dc:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   119df:	c9                   	leave  
   119e0:	c3                   	ret    

000119e1 <idt_disable_global>:

/**
 * @brief  关闭全局中断
 * 
 */
void idt_disable_global(void) {
   119e1:	55                   	push   %ebp
   119e2:	89 e5                	mov    %esp,%ebp
  cli();
   119e4:	e8 36 f8 ff ff       	call   1121f <cli>
}
   119e9:	90                   	nop
   119ea:	5d                   	pop    %ebp
   119eb:	c3                   	ret    

000119ec <idt_enable_global>:

/**
 * @brief  开启全局中断
 * 
 */
void idt_enable_global(void) {
   119ec:	55                   	push   %ebp
   119ed:	89 e5                	mov    %esp,%ebp
  sti();
   119ef:	e8 32 f8 ff ff       	call   11226 <sti>
}
   119f4:	90                   	nop
   119f5:	5d                   	pop    %ebp
   119f6:	c3                   	ret    

000119f7 <pic_send_eoi>:
 * @brief  将OCW2寄存器的7~5位置为 001，用普通的EOI结束方式
 *         向8259A发送EOI命令，8259A会将ISR中优先级最高的位置0
 *
 * @param irq_num 中断向量号，即IDT下标
 */
void pic_send_eoi(int irq_num) {
   119f7:	55                   	push   %ebp
   119f8:	89 e5                	mov    %esp,%ebp
  //1.获取该中断对应的IRQ标号
  irq_num -= PIC_ICW2_IDT_START;
   119fa:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
  //2.判断标号是否越界,若不越界则交给对应芯片处理
  if (irq_num < 0 || irq_num > 15) return;
   119fe:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11a02:	78 29                	js     11a2d <pic_send_eoi+0x36>
   11a04:	83 7d 08 0f          	cmpl   $0xf,0x8(%ebp)
   11a08:	7f 23                	jg     11a2d <pic_send_eoi+0x36>

  //3.若中断来自主片则只需向主片发送EOI
  outb(PIC0_OCW2, PIC_OCW2_EOI);
   11a0a:	6a 20                	push   $0x20
   11a0c:	6a 20                	push   $0x20
   11a0e:	e8 3e f8 ff ff       	call   11251 <outb>
   11a13:	83 c4 08             	add    $0x8,%esp

  //4.若中断来自从片则还需向从片发送EOI
  if (irq_num >= 8) { 
   11a16:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11a1a:	7e 12                	jle    11a2e <pic_send_eoi+0x37>
    outb(PIC1_OCW2, PIC_OCW2_EOI);
   11a1c:	6a 20                	push   $0x20
   11a1e:	68 a0 00 00 00       	push   $0xa0
   11a23:	e8 29 f8 ff ff       	call   11251 <outb>
   11a28:	83 c4 08             	add    $0x8,%esp
   11a2b:	eb 01                	jmp    11a2e <pic_send_eoi+0x37>
  if (irq_num < 0 || irq_num > 15) return;
   11a2d:	90                   	nop
  }

}
   11a2e:	c9                   	leave  
   11a2f:	c3                   	ret    

00011a30 <idt_enter_protection>:

/**
 * @brief  
 * 
 */
idt_state_t idt_enter_protection(void) {
   11a30:	55                   	push   %ebp
   11a31:	89 e5                	mov    %esp,%ebp
   11a33:	83 ec 10             	sub    $0x10,%esp
  idt_state_t state = read_eflags();
   11a36:	e8 5f f8 ff ff       	call   1129a <read_eflags>
   11a3b:	89 45 fc             	mov    %eax,-0x4(%ebp)
  idt_disable_global();
   11a3e:	e8 9e ff ff ff       	call   119e1 <idt_disable_global>
  return state;;
   11a43:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11a46:	c9                   	leave  
   11a47:	c3                   	ret    

00011a48 <idt_leave_protection>:
/**
 * @brief  
 * 
 * @return idt_state_t 
 */
idt_state_t idt_leave_protection(idt_state_t state){
   11a48:	55                   	push   %ebp
   11a49:	89 e5                	mov    %esp,%ebp
  write_eflags(state);
   11a4b:	ff 75 08             	push   0x8(%ebp)
   11a4e:	e8 57 f8 ff ff       	call   112aa <write_eflags>
   11a53:	83 c4 04             	add    $0x4,%esp
}
   11a56:	90                   	nop
   11a57:	c9                   	leave  
   11a58:	c3                   	ret    

00011a59 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   11a59:	55                   	push   %ebp
   11a5a:	89 e5                	mov    %esp,%ebp
   11a5c:	83 ec 08             	sub    $0x8,%esp
   11a5f:	8b 45 08             	mov    0x8(%ebp),%eax
   11a62:	8b 55 0c             	mov    0xc(%ebp),%edx
   11a65:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   11a69:	89 d0                	mov    %edx,%eax
   11a6b:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   11a6e:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11a72:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11a76:	ee                   	out    %al,(%dx)
}
   11a77:	90                   	nop
   11a78:	c9                   	leave  
   11a79:	c3                   	ret    

00011a7a <do_handler_time>:
/**
 * @brief  处理定时器中断的c函数
 * 
 * @param frame 异常栈帧
 */
void do_handler_time(const exception_frame_t *frame) {
   11a7a:	55                   	push   %ebp
   11a7b:	89 e5                	mov    %esp,%ebp
   11a7d:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   11a80:	a1 c0 eb 02 00       	mov    0x2ebc0,%eax
   11a85:	83 c0 01             	add    $0x1,%eax
   11a88:	a3 c0 eb 02 00       	mov    %eax,0x2ebc0

    //因为ICW4的EOI位为0，所以要手动发送EOI即中断结束信号
    pic_send_eoi(IRQ0_TIMER);
   11a8d:	83 ec 0c             	sub    $0xc,%esp
   11a90:	6a 20                	push   $0x20
   11a92:	e8 60 ff ff ff       	call   119f7 <pic_send_eoi>
   11a97:	83 c4 10             	add    $0x10,%esp

    //运行完一个时间片，判断是否需要执行任务切换，若需要则执行
    //必须写在发送eoi之后，防止发生任务切换导致eoi没有发送，从而无法进行下一次中断
    task_slice_end();   
   11a9a:	e8 7c f3 ff ff       	call   10e1b <task_slice_end>
}
   11a9f:	90                   	nop
   11aa0:	c9                   	leave  
   11aa1:	c3                   	ret    

00011aa2 <init_pit>:

/**
 * @brief  初始化可编程定时器
 * 
 */
static void init_pit(void) {
   11aa2:	55                   	push   %ebp
   11aa3:	89 e5                	mov    %esp,%ebp
   11aa5:	83 ec 18             	sub    $0x18,%esp
    //1.选择定时器的计算器，读取与加载初始值模式，以及工作模式
    outb(PIT_COMMAND_MODE_PORT, PIT_SELECT_COUNTER | PIT_READ_LOAD | PIT_MODE);
   11aa8:	6a 36                	push   $0x36
   11aaa:	6a 43                	push   $0x43
   11aac:	e8 a8 ff ff ff       	call   11a59 <outb>
   11ab1:	83 c4 08             	add    $0x8,%esp

    //2.写入16位初始值,即一个中断后期晶体的振荡次数，由确定的加载方式知，先写入低8位，再写入高8位
    uint16_t reload_count = (PIT_OSC_FREQ / 1000) * OS_TICKS_MS;   //确定晶体一个中断周期的震荡次数
   11ab4:	66 c7 45 f6 9a 2e    	movw   $0x2e9a,-0xa(%ebp)
    outb(PIT_CHANNEL_DATA_PORT, reload_count & 0xff);
   11aba:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   11abe:	0f b6 c0             	movzbl %al,%eax
   11ac1:	50                   	push   %eax
   11ac2:	6a 40                	push   $0x40
   11ac4:	e8 90 ff ff ff       	call   11a59 <outb>
   11ac9:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL_DATA_PORT, (reload_count >> 8) & 0xff);
   11acc:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   11ad0:	66 c1 e8 08          	shr    $0x8,%ax
   11ad4:	0f b6 c0             	movzbl %al,%eax
   11ad7:	50                   	push   %eax
   11ad8:	6a 40                	push   $0x40
   11ada:	e8 7a ff ff ff       	call   11a59 <outb>
   11adf:	83 c4 08             	add    $0x8,%esp

    //3.绑定定时器中断的异常处理程序,并开启该中断
    idt_install(IRQ0_TIMER, (idt_handler_t)exception_handler_time);
   11ae2:	83 ec 08             	sub    $0x8,%esp
   11ae5:	68 7b 02 01 00       	push   $0x1027b
   11aea:	6a 20                	push   $0x20
   11aec:	e8 7e fb ff ff       	call   1166f <idt_install>
   11af1:	83 c4 10             	add    $0x10,%esp
    idt_enable(IRQ0_TIMER);
   11af4:	83 ec 0c             	sub    $0xc,%esp
   11af7:	6a 20                	push   $0x20
   11af9:	e8 b7 fd ff ff       	call   118b5 <idt_enable>
   11afe:	83 c4 10             	add    $0x10,%esp

}
   11b01:	90                   	nop
   11b02:	c9                   	leave  
   11b03:	c3                   	ret    

00011b04 <time_init>:

/**
 * @brief  初始化定时器
 * 
 */
void time_init(void) {
   11b04:	55                   	push   %ebp
   11b05:	89 e5                	mov    %esp,%ebp
   11b07:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   11b0a:	c7 05 c0 eb 02 00 00 	movl   $0x0,0x2ebc0
   11b11:	00 00 00 
    init_pit();
   11b14:	e8 89 ff ff ff       	call   11aa2 <init_pit>
   11b19:	90                   	nop
   11b1a:	c9                   	leave  
   11b1b:	c3                   	ret    

00011b1c <sti>:
static inline void sti(void) { __asm__ __volatile__("sti"); }
   11b1c:	55                   	push   %ebp
   11b1d:	89 e5                	mov    %esp,%ebp
   11b1f:	fb                   	sti    
   11b20:	90                   	nop
   11b21:	5d                   	pop    %ebp
   11b22:	c3                   	ret    

00011b23 <kernel_init>:

/**
 * @brief  对内核进行初始化操作
 * 
 */
void kernel_init(boot_info_t* boot_info) {
   11b23:	55                   	push   %ebp
   11b24:	89 e5                	mov    %esp,%ebp
   11b26:	83 ec 08             	sub    $0x8,%esp
    //1.判断是否检测到可用内存
    ASSERT(boot_info->ram_region_count != 0);
   11b29:	8b 45 08             	mov    0x8(%ebp),%eax
   11b2c:	8b 40 50             	mov    0x50(%eax),%eax
   11b2f:	85 c0                	test   %eax,%eax
   11b31:	75 19                	jne    11b4c <kernel_init+0x29>
   11b33:	68 a8 37 01 00       	push   $0x137a8
   11b38:	68 74 38 01 00       	push   $0x13874
   11b3d:	6a 22                	push   $0x22
   11b3f:	68 cc 37 01 00       	push   $0x137cc
   11b44:	e8 a9 08 00 00       	call   123f2 <pannic>
   11b49:	83 c4 10             	add    $0x10,%esp
    
    //2.初始化日志程序,便于后期调用
    log_init();
   11b4c:	e8 e8 14 00 00       	call   13039 <log_init>

    //3.初始化内存管理
    memory_init(boot_info);  
   11b51:	83 ec 0c             	sub    $0xc,%esp
   11b54:	ff 75 08             	push   0x8(%ebp)
   11b57:	e8 de eb ff ff       	call   1073a <memory_init>
   11b5c:	83 c4 10             	add    $0x10,%esp

    //4.初始化并重新加载GDT表
    gdt_init();
   11b5f:	e8 b0 f5 ff ff       	call   11114 <gdt_init>

    //5.初始化并加载中断描述符表IDT
    idt_init();
   11b64:	e8 d9 fb ff ff       	call   11742 <idt_init>

    //6.初始化定时器的中断处理
    time_init();
   11b69:	e8 96 ff ff ff       	call   11b04 <time_init>

    //7.初始化任务管理器
    task_manager_init();
   11b6e:	e8 44 f0 ff ff       	call   10bb7 <task_manager_init>
    //初始化完成后将在汇编里重新加载内核代码段与数据段的选择子，并为内核程序分配栈空间

}
   11b73:	90                   	nop
   11b74:	c9                   	leave  
   11b75:	c3                   	ret    

00011b76 <test_task_1>:
static uint32_t test_task_1_stack[1024]; 
static uint32_t test_task_2_stack[1024]; 
static sem_t sem;


void test_task_1(void) {
   11b76:	55                   	push   %ebp
   11b77:	89 e5                	mov    %esp,%ebp
   11b79:	83 ec 18             	sub    $0x18,%esp

    int count = 0;
   11b7c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;) {
        // sem_wait(&sem);
        log_printf("task_1: %d", count++);
   11b83:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11b86:	8d 50 01             	lea    0x1(%eax),%edx
   11b89:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11b8c:	83 ec 08             	sub    $0x8,%esp
   11b8f:	50                   	push   %eax
   11b90:	68 01 38 01 00       	push   $0x13801
   11b95:	e8 27 15 00 00       	call   130c1 <log_printf>
   11b9a:	83 c4 10             	add    $0x10,%esp
   11b9d:	eb e4                	jmp    11b83 <test_task_1+0xd>

00011b9f <test_task_2>:
        // sem_notify(&sem);
        // sys_sleep(1000);
     }
}

void test_task_2(void) {
   11b9f:	55                   	push   %ebp
   11ba0:	89 e5                	mov    %esp,%ebp
   11ba2:	83 ec 18             	sub    $0x18,%esp

    int count = 0;
   11ba5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;) {
        // sem_wait(&sem);
        log_printf("task_2: %d", count++);
   11bac:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11baf:	8d 50 01             	lea    0x1(%eax),%edx
   11bb2:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11bb5:	83 ec 08             	sub    $0x8,%esp
   11bb8:	50                   	push   %eax
   11bb9:	68 0c 38 01 00       	push   $0x1380c
   11bbe:	e8 fe 14 00 00       	call   130c1 <log_printf>
   11bc3:	83 c4 10             	add    $0x10,%esp
   11bc6:	eb e4                	jmp    11bac <test_task_2+0xd>

00011bc8 <init_main>:
     }
}



void init_main(void) {
   11bc8:	55                   	push   %ebp
   11bc9:	89 e5                	mov    %esp,%ebp
   11bcb:	83 ec 18             	sub    $0x18,%esp


    
    log_printf("Kernel is running......");
   11bce:	83 ec 0c             	sub    $0xc,%esp
   11bd1:	68 17 38 01 00       	push   $0x13817
   11bd6:	e8 e6 14 00 00       	call   130c1 <log_printf>
   11bdb:	83 c4 10             	add    $0x10,%esp
    log_printf("Name: %s, Version: %s", "KbOS", OS_VERSION);
   11bde:	83 ec 04             	sub    $0x4,%esp
   11be1:	68 2f 38 01 00       	push   $0x1382f
   11be6:	68 35 38 01 00       	push   $0x13835
   11beb:	68 3a 38 01 00       	push   $0x1383a
   11bf0:	e8 cc 14 00 00       	call   130c1 <log_printf>
   11bf5:	83 c4 10             	add    $0x10,%esp

    //当前任务作为任务管理器启用时的第一个任务
    task_first_init();
   11bf8:	e8 35 f0 ff ff       	call   10c32 <task_first_init>
    task_init(&task_test_task_1, "test_task_1", (uint32_t)test_task_1, (uint32_t)&test_task_1_stack[1024]);
   11bfd:	ba 60 fd 02 00       	mov    $0x2fd60,%edx
   11c02:	b8 76 1b 01 00       	mov    $0x11b76,%eax
   11c07:	52                   	push   %edx
   11c08:	50                   	push   %eax
   11c09:	68 50 38 01 00       	push   $0x13850
   11c0e:	68 e0 eb 02 00       	push   $0x2ebe0
   11c13:	e8 b1 ee ff ff       	call   10ac9 <task_init>
   11c18:	83 c4 10             	add    $0x10,%esp
    task_init(&task_test_task_2, "test_task_2", (uint32_t)test_task_2, (uint32_t)&test_task_2_stack[1024]);
   11c1b:	ba 60 0d 03 00       	mov    $0x30d60,%edx
   11c20:	b8 9f 1b 01 00       	mov    $0x11b9f,%eax
   11c25:	52                   	push   %edx
   11c26:	50                   	push   %eax
   11c27:	68 5c 38 01 00       	push   $0x1385c
   11c2c:	68 a0 ec 02 00       	push   $0x2eca0
   11c31:	e8 93 ee ff ff       	call   10ac9 <task_init>
   11c36:	83 c4 10             	add    $0x10,%esp


    // sem_init(&sem, 0);
    sti();
   11c39:	e8 de fe ff ff       	call   11b1c <sti>

    int count = 0;
   11c3e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;) {
        log_printf("first: %d", count++);
   11c45:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11c48:	8d 50 01             	lea    0x1(%eax),%edx
   11c4b:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11c4e:	83 ec 08             	sub    $0x8,%esp
   11c51:	50                   	push   %eax
   11c52:	68 68 38 01 00       	push   $0x13868
   11c57:	e8 65 14 00 00       	call   130c1 <log_printf>
   11c5c:	83 c4 10             	add    $0x10,%esp
   11c5f:	eb e4                	jmp    11c45 <init_main+0x7d>

00011c61 <list_init>:
static inline void list_init(list_t *list) {
   11c61:	55                   	push   %ebp
   11c62:	89 e5                	mov    %esp,%ebp
   11c64:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11c67:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11c6b:	75 19                	jne    11c86 <list_init+0x25>
   11c6d:	68 80 38 01 00       	push   $0x13880
   11c72:	68 2c 39 01 00       	push   $0x1392c
   11c77:	6a 31                	push   $0x31
   11c79:	68 94 38 01 00       	push   $0x13894
   11c7e:	e8 6f 07 00 00       	call   123f2 <pannic>
   11c83:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   11c86:	8b 45 08             	mov    0x8(%ebp),%eax
   11c89:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11c90:	8b 45 08             	mov    0x8(%ebp),%eax
   11c93:	8b 50 04             	mov    0x4(%eax),%edx
   11c96:	8b 45 08             	mov    0x8(%ebp),%eax
   11c99:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   11c9b:	8b 45 08             	mov    0x8(%ebp),%eax
   11c9e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   11ca5:	90                   	nop
   11ca6:	c9                   	leave  
   11ca7:	c3                   	ret    

00011ca8 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   11ca8:	55                   	push   %ebp
   11ca9:	89 e5                	mov    %esp,%ebp
   11cab:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11cae:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11cb2:	75 19                	jne    11ccd <list_is_empty+0x25>
   11cb4:	68 80 38 01 00       	push   $0x13880
   11cb9:	68 38 39 01 00       	push   $0x13938
   11cbe:	6a 38                	push   $0x38
   11cc0:	68 94 38 01 00       	push   $0x13894
   11cc5:	e8 28 07 00 00       	call   123f2 <pannic>
   11cca:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   11ccd:	8b 45 08             	mov    0x8(%ebp),%eax
   11cd0:	8b 40 08             	mov    0x8(%eax),%eax
   11cd3:	85 c0                	test   %eax,%eax
   11cd5:	0f 94 c0             	sete   %al
   11cd8:	0f b6 c0             	movzbl %al,%eax
}
   11cdb:	c9                   	leave  
   11cdc:	c3                   	ret    

00011cdd <mutex_init>:
/**
 * @brief  初始化互斥锁
 *
 * @param mutex
 */
void mutex_init(mutex_t *mutex) {
   11cdd:	55                   	push   %ebp
   11cde:	89 e5                	mov    %esp,%ebp
   11ce0:	83 ec 08             	sub    $0x8,%esp
  ASSERT(mutex != (mutex_t *)0);
   11ce3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11ce7:	75 19                	jne    11d02 <mutex_init+0x25>
   11ce9:	68 d2 38 01 00       	push   $0x138d2
   11cee:	68 20 39 01 00       	push   $0x13920
   11cf3:	6a 15                	push   $0x15
   11cf5:	68 e8 38 01 00       	push   $0x138e8
   11cfa:	e8 f3 06 00 00       	call   123f2 <pannic>
   11cff:	83 c4 10             	add    $0x10,%esp

  mutex->locked_count = 0;
   11d02:	8b 45 08             	mov    0x8(%ebp),%eax
   11d05:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  mutex->owner = (task_t *)0;
   11d0c:	8b 45 08             	mov    0x8(%ebp),%eax
   11d0f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  list_init(&mutex->wait_list);
   11d15:	8b 45 08             	mov    0x8(%ebp),%eax
   11d18:	83 c0 08             	add    $0x8,%eax
   11d1b:	83 ec 0c             	sub    $0xc,%esp
   11d1e:	50                   	push   %eax
   11d1f:	e8 3d ff ff ff       	call   11c61 <list_init>
   11d24:	83 c4 10             	add    $0x10,%esp
}
   11d27:	90                   	nop
   11d28:	c9                   	leave  
   11d29:	c3                   	ret    

00011d2a <mutex_lock>:
/**
 * @brief  加锁
 *
 * @param mutex
 */
void mutex_lock(mutex_t *mutex) {
   11d2a:	55                   	push   %ebp
   11d2b:	89 e5                	mov    %esp,%ebp
   11d2d:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   11d30:	e8 fb fc ff ff       	call   11a30 <idt_enter_protection>
   11d35:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 1. 获取当前任务
  task_t *curr = task_current();
   11d38:	e8 0b f0 ff ff       	call   10d48 <task_current>
   11d3d:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 2.判断该锁是否已被加锁
  if (mutex->locked_count == 0) {  
   11d40:	8b 45 08             	mov    0x8(%ebp),%eax
   11d43:	8b 40 04             	mov    0x4(%eax),%eax
   11d46:	85 c0                	test   %eax,%eax
   11d48:	75 19                	jne    11d63 <mutex_lock+0x39>
    //3.还未被加锁，则加锁并记录拥有该锁的任务
    mutex->locked_count++;
   11d4a:	8b 45 08             	mov    0x8(%ebp),%eax
   11d4d:	8b 40 04             	mov    0x4(%eax),%eax
   11d50:	8d 50 01             	lea    0x1(%eax),%edx
   11d53:	8b 45 08             	mov    0x8(%ebp),%eax
   11d56:	89 50 04             	mov    %edx,0x4(%eax)
    mutex->owner = curr;
   11d59:	8b 45 08             	mov    0x8(%ebp),%eax
   11d5c:	8b 55 f0             	mov    -0x10(%ebp),%edx
   11d5f:	89 10                	mov    %edx,(%eax)
   11d61:	eb 47                	jmp    11daa <mutex_lock+0x80>
  } else if (mutex->owner == curr) {
   11d63:	8b 45 08             	mov    0x8(%ebp),%eax
   11d66:	8b 00                	mov    (%eax),%eax
   11d68:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11d6b:	75 11                	jne    11d7e <mutex_lock+0x54>
    //4.已被加锁，但当前加锁请求的任务为当前锁的拥有者，直接再加锁即可
    mutex->locked_count++;
   11d6d:	8b 45 08             	mov    0x8(%ebp),%eax
   11d70:	8b 40 04             	mov    0x4(%eax),%eax
   11d73:	8d 50 01             	lea    0x1(%eax),%edx
   11d76:	8b 45 08             	mov    0x8(%ebp),%eax
   11d79:	89 50 04             	mov    %edx,0x4(%eax)
   11d7c:	eb 2c                	jmp    11daa <mutex_lock+0x80>
  } else {  
    //5.已被加锁，且当前任务不是锁的拥有者，则当前任务进入锁的等待队列，被阻塞住
    task_set_unready(curr);
   11d7e:	83 ec 0c             	sub    $0xc,%esp
   11d81:	ff 75 f0             	push   -0x10(%ebp)
   11d84:	e8 46 ef ff ff       	call   10ccf <task_set_unready>
   11d89:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&mutex->wait_list, &curr->wait_node);
   11d8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11d8f:	8d 50 40             	lea    0x40(%eax),%edx
   11d92:	8b 45 08             	mov    0x8(%ebp),%eax
   11d95:	83 c0 08             	add    $0x8,%eax
   11d98:	83 ec 08             	sub    $0x8,%esp
   11d9b:	52                   	push   %edx
   11d9c:	50                   	push   %eax
   11d9d:	e8 9b 0f 00 00       	call   12d3d <list_insert_last>
   11da2:	83 c4 10             	add    $0x10,%esp
    task_switch();
   11da5:	e8 a8 ef ff ff       	call   10d52 <task_switch>
  }

  idt_leave_protection(state);  // TODO:解锁
   11daa:	83 ec 0c             	sub    $0xc,%esp
   11dad:	ff 75 f4             	push   -0xc(%ebp)
   11db0:	e8 93 fc ff ff       	call   11a48 <idt_leave_protection>
   11db5:	83 c4 10             	add    $0x10,%esp
}
   11db8:	90                   	nop
   11db9:	c9                   	leave  
   11dba:	c3                   	ret    

00011dbb <mutex_unlock>:
/**
 * @brief  解锁
 *
 * @param mutex
 */
void mutex_unlock(mutex_t *mutex) {
   11dbb:	55                   	push   %ebp
   11dbc:	89 e5                	mov    %esp,%ebp
   11dbe:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   11dc1:	e8 6a fc ff ff       	call   11a30 <idt_enter_protection>
   11dc6:	89 45 f4             	mov    %eax,-0xc(%ebp)

  task_t *curr = task_current();
   11dc9:	e8 7a ef ff ff       	call   10d48 <task_current>
   11dce:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 1.判断当前任务是否是锁的拥有者
  if (mutex->owner == curr) {
   11dd1:	8b 45 08             	mov    0x8(%ebp),%eax
   11dd4:	8b 00                	mov    (%eax),%eax
   11dd6:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11dd9:	0f 85 83 00 00 00    	jne    11e62 <mutex_unlock+0xa7>
    //2.当前任务是锁的拥有者,对锁进行一次解锁，并判断是否已完全解锁
    if (--mutex->locked_count == 0) {
   11ddf:	8b 45 08             	mov    0x8(%ebp),%eax
   11de2:	8b 40 04             	mov    0x4(%eax),%eax
   11de5:	8d 50 ff             	lea    -0x1(%eax),%edx
   11de8:	8b 45 08             	mov    0x8(%ebp),%eax
   11deb:	89 50 04             	mov    %edx,0x4(%eax)
   11dee:	8b 45 08             	mov    0x8(%ebp),%eax
   11df1:	8b 40 04             	mov    0x4(%eax),%eax
   11df4:	85 c0                	test   %eax,%eax
   11df6:	75 6a                	jne    11e62 <mutex_unlock+0xa7>
      //3.锁已被完全解锁,将锁的所有者置空
      mutex->owner = (task_t*)0;
   11df8:	8b 45 08             	mov    0x8(%ebp),%eax
   11dfb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      //4.判断当前等待队列是否为空
      if (!list_is_empty(&mutex->wait_list)) { 
   11e01:	8b 45 08             	mov    0x8(%ebp),%eax
   11e04:	83 c0 08             	add    $0x8,%eax
   11e07:	83 ec 0c             	sub    $0xc,%esp
   11e0a:	50                   	push   %eax
   11e0b:	e8 98 fe ff ff       	call   11ca8 <list_is_empty>
   11e10:	83 c4 10             	add    $0x10,%esp
   11e13:	85 c0                	test   %eax,%eax
   11e15:	75 4b                	jne    11e62 <mutex_unlock+0xa7>
        //5.当前等待队列不为空,对锁进行加锁，并交给等待队列的第一个任务
        list_node_t *node = list_remove_first(&mutex->wait_list);
   11e17:	8b 45 08             	mov    0x8(%ebp),%eax
   11e1a:	83 c0 08             	add    $0x8,%eax
   11e1d:	83 ec 0c             	sub    $0xc,%esp
   11e20:	50                   	push   %eax
   11e21:	e8 a6 0f 00 00       	call   12dcc <list_remove_first>
   11e26:	83 c4 10             	add    $0x10,%esp
   11e29:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t *task_wait = list_node_parent(node, task_t, wait_node);
   11e2c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11e30:	74 08                	je     11e3a <mutex_unlock+0x7f>
   11e32:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11e35:	83 e8 40             	sub    $0x40,%eax
   11e38:	eb 05                	jmp    11e3f <mutex_unlock+0x84>
   11e3a:	b8 00 00 00 00       	mov    $0x0,%eax
   11e3f:	89 45 e8             	mov    %eax,-0x18(%ebp)
        mutex->locked_count = 1;
   11e42:	8b 45 08             	mov    0x8(%ebp),%eax
   11e45:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        mutex->owner = task_wait;
   11e4c:	8b 45 08             	mov    0x8(%ebp),%eax
   11e4f:	8b 55 e8             	mov    -0x18(%ebp),%edx
   11e52:	89 10                	mov    %edx,(%eax)
        //6.让该任务进入就绪队列
        task_set_ready(task_wait);
   11e54:	83 ec 0c             	sub    $0xc,%esp
   11e57:	ff 75 e8             	push   -0x18(%ebp)
   11e5a:	e8 25 ee ff ff       	call   10c84 <task_set_ready>
   11e5f:	83 c4 10             	add    $0x10,%esp
      }
    }
  }

  idt_leave_protection(state);  // TODO:解锁
   11e62:	83 ec 0c             	sub    $0xc,%esp
   11e65:	ff 75 f4             	push   -0xc(%ebp)
   11e68:	e8 db fb ff ff       	call   11a48 <idt_leave_protection>
   11e6d:	83 c4 10             	add    $0x10,%esp
}
   11e70:	90                   	nop
   11e71:	c9                   	leave  
   11e72:	c3                   	ret    

00011e73 <list_init>:
static inline void list_init(list_t *list) {
   11e73:	55                   	push   %ebp
   11e74:	89 e5                	mov    %esp,%ebp
   11e76:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11e79:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11e7d:	75 19                	jne    11e98 <list_init+0x25>
   11e7f:	68 48 39 01 00       	push   $0x13948
   11e84:	68 ec 39 01 00       	push   $0x139ec
   11e89:	6a 31                	push   $0x31
   11e8b:	68 5c 39 01 00       	push   $0x1395c
   11e90:	e8 5d 05 00 00       	call   123f2 <pannic>
   11e95:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   11e98:	8b 45 08             	mov    0x8(%ebp),%eax
   11e9b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11ea2:	8b 45 08             	mov    0x8(%ebp),%eax
   11ea5:	8b 50 04             	mov    0x4(%eax),%edx
   11ea8:	8b 45 08             	mov    0x8(%ebp),%eax
   11eab:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   11ead:	8b 45 08             	mov    0x8(%ebp),%eax
   11eb0:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   11eb7:	90                   	nop
   11eb8:	c9                   	leave  
   11eb9:	c3                   	ret    

00011eba <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   11eba:	55                   	push   %ebp
   11ebb:	89 e5                	mov    %esp,%ebp
   11ebd:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11ec0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11ec4:	75 19                	jne    11edf <list_is_empty+0x25>
   11ec6:	68 48 39 01 00       	push   $0x13948
   11ecb:	68 f8 39 01 00       	push   $0x139f8
   11ed0:	6a 38                	push   $0x38
   11ed2:	68 5c 39 01 00       	push   $0x1395c
   11ed7:	e8 16 05 00 00       	call   123f2 <pannic>
   11edc:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   11edf:	8b 45 08             	mov    0x8(%ebp),%eax
   11ee2:	8b 40 08             	mov    0x8(%eax),%eax
   11ee5:	85 c0                	test   %eax,%eax
   11ee7:	0f 94 c0             	sete   %al
   11eea:	0f b6 c0             	movzbl %al,%eax
}
   11eed:	c9                   	leave  
   11eee:	c3                   	ret    

00011eef <sem_init>:
 * @brief  初始化信号量对象
 * 
 * @param sem 信号量对象
 * @param init_count 初始化信号量数量 
 */
void sem_init(sem_t *sem, int init_count) {
   11eef:	55                   	push   %ebp
   11ef0:	89 e5                	mov    %esp,%ebp
   11ef2:	83 ec 08             	sub    $0x8,%esp
    ASSERT(sem != (sem_t*)0);
   11ef5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11ef9:	75 19                	jne    11f14 <sem_init+0x25>
   11efb:	68 9a 39 01 00       	push   $0x1399a
   11f00:	68 e0 39 01 00       	push   $0x139e0
   11f05:	6a 18                	push   $0x18
   11f07:	68 ac 39 01 00       	push   $0x139ac
   11f0c:	e8 e1 04 00 00       	call   123f2 <pannic>
   11f11:	83 c4 10             	add    $0x10,%esp
    sem->count = 0;
   11f14:	8b 45 08             	mov    0x8(%ebp),%eax
   11f17:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list_init(&sem->wait_list);
   11f1d:	8b 45 08             	mov    0x8(%ebp),%eax
   11f20:	83 c0 04             	add    $0x4,%eax
   11f23:	83 ec 0c             	sub    $0xc,%esp
   11f26:	50                   	push   %eax
   11f27:	e8 47 ff ff ff       	call   11e73 <list_init>
   11f2c:	83 c4 10             	add    $0x10,%esp
}
   11f2f:	90                   	nop
   11f30:	c9                   	leave  
   11f31:	c3                   	ret    

00011f32 <sem_wait>:
 *         信号量相当于入场券，获取信号量之后才有资格访问信号量保护的资源
 * 
 * @param sem 
 * @param init_count 
 */
void sem_wait(sem_t *sem) {
   11f32:	55                   	push   %ebp
   11f33:	89 e5                	mov    %esp,%ebp
   11f35:	83 ec 18             	sub    $0x18,%esp
    
    idt_state_t state = idt_enter_protection();//TODO:加锁
   11f38:	e8 f3 fa ff ff       	call   11a30 <idt_enter_protection>
   11f3d:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //1.判断信号量是否还有剩余
    if(sem->count > 0) {//有剩余，直接使用，任务获取信号量继续执行
   11f40:	8b 45 08             	mov    0x8(%ebp),%eax
   11f43:	8b 00                	mov    (%eax),%eax
   11f45:	85 c0                	test   %eax,%eax
   11f47:	7e 0f                	jle    11f58 <sem_wait+0x26>
        --sem->count;   
   11f49:	8b 45 08             	mov    0x8(%ebp),%eax
   11f4c:	8b 00                	mov    (%eax),%eax
   11f4e:	8d 50 ff             	lea    -0x1(%eax),%edx
   11f51:	8b 45 08             	mov    0x8(%ebp),%eax
   11f54:	89 10                	mov    %edx,(%eax)
   11f56:	eb 34                	jmp    11f8c <sem_wait+0x5a>
    } else {//没有剩余，任务进入延时队列等待信号量
        task_t *curr = task_current();
   11f58:	e8 eb ed ff ff       	call   10d48 <task_current>
   11f5d:	89 45 f0             	mov    %eax,-0x10(%ebp)
        //2.将当前任务从就绪队列中取下
        task_set_unready(curr); 
   11f60:	83 ec 0c             	sub    $0xc,%esp
   11f63:	ff 75 f0             	push   -0x10(%ebp)
   11f66:	e8 64 ed ff ff       	call   10ccf <task_set_unready>
   11f6b:	83 c4 10             	add    $0x10,%esp
        //3.将当前任务加入到信号量等待队列
        list_insert_last(&sem->wait_list, &curr->wait_node); 
   11f6e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11f71:	8d 50 40             	lea    0x40(%eax),%edx
   11f74:	8b 45 08             	mov    0x8(%ebp),%eax
   11f77:	83 c0 04             	add    $0x4,%eax
   11f7a:	83 ec 08             	sub    $0x8,%esp
   11f7d:	52                   	push   %edx
   11f7e:	50                   	push   %eax
   11f7f:	e8 b9 0d 00 00       	call   12d3d <list_insert_last>
   11f84:	83 c4 10             	add    $0x10,%esp
        //4.切换任务
        task_switch();
   11f87:	e8 c6 ed ff ff       	call   10d52 <task_switch>
    }

    idt_leave_protection(state);//TODO:解锁
   11f8c:	83 ec 0c             	sub    $0xc,%esp
   11f8f:	ff 75 f4             	push   -0xc(%ebp)
   11f92:	e8 b1 fa ff ff       	call   11a48 <idt_leave_protection>
   11f97:	83 c4 10             	add    $0x10,%esp
}
   11f9a:	90                   	nop
   11f9b:	c9                   	leave  
   11f9c:	c3                   	ret    

00011f9d <sem_notify>:
 *        等待队列中若有任务则直接获取该信号量，继续执行即访问资源
 *         若没有任务，则信号量对象记录的信号量数量加1，预留给下一次获取
 * 
 * @param sem 
 */
void sem_notify(sem_t *sem) {
   11f9d:	55                   	push   %ebp
   11f9e:	89 e5                	mov    %esp,%ebp
   11fa0:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   11fa3:	e8 88 fa ff ff       	call   11a30 <idt_enter_protection>
   11fa8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if (!list_is_empty(&sem->wait_list)) {
   11fab:	8b 45 08             	mov    0x8(%ebp),%eax
   11fae:	83 c0 04             	add    $0x4,%eax
   11fb1:	83 ec 0c             	sub    $0xc,%esp
   11fb4:	50                   	push   %eax
   11fb5:	e8 00 ff ff ff       	call   11eba <list_is_empty>
   11fba:	83 c4 10             	add    $0x10,%esp
   11fbd:	85 c0                	test   %eax,%eax
   11fbf:	75 3b                	jne    11ffc <sem_notify+0x5f>
        list_node_t *node = list_remove_first(&sem->wait_list);
   11fc1:	8b 45 08             	mov    0x8(%ebp),%eax
   11fc4:	83 c0 04             	add    $0x4,%eax
   11fc7:	83 ec 0c             	sub    $0xc,%esp
   11fca:	50                   	push   %eax
   11fcb:	e8 fc 0d 00 00       	call   12dcc <list_remove_first>
   11fd0:	83 c4 10             	add    $0x10,%esp
   11fd3:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t *task = list_node_parent(node, task_t, wait_node);
   11fd6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11fda:	74 08                	je     11fe4 <sem_notify+0x47>
   11fdc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11fdf:	83 e8 40             	sub    $0x40,%eax
   11fe2:	eb 05                	jmp    11fe9 <sem_notify+0x4c>
   11fe4:	b8 00 00 00 00       	mov    $0x0,%eax
   11fe9:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   11fec:	83 ec 0c             	sub    $0xc,%esp
   11fef:	ff 75 ec             	push   -0x14(%ebp)
   11ff2:	e8 8d ec ff ff       	call   10c84 <task_set_ready>
   11ff7:	83 c4 10             	add    $0x10,%esp
   11ffa:	eb 0d                	jmp    12009 <sem_notify+0x6c>
    } else {
        sem->count++;
   11ffc:	8b 45 08             	mov    0x8(%ebp),%eax
   11fff:	8b 00                	mov    (%eax),%eax
   12001:	8d 50 01             	lea    0x1(%eax),%edx
   12004:	8b 45 08             	mov    0x8(%ebp),%eax
   12007:	89 10                	mov    %edx,(%eax)
    }

    idt_leave_protection(state);//TODO:解锁
   12009:	83 ec 0c             	sub    $0xc,%esp
   1200c:	ff 75 f4             	push   -0xc(%ebp)
   1200f:	e8 34 fa ff ff       	call   11a48 <idt_leave_protection>
   12014:	83 c4 10             	add    $0x10,%esp

}
   12017:	90                   	nop
   12018:	c9                   	leave  
   12019:	c3                   	ret    

0001201a <sem_count>:

int sem_count(sem_t *sem) {
   1201a:	55                   	push   %ebp
   1201b:	89 e5                	mov    %esp,%ebp
   1201d:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   12020:	e8 0b fa ff ff       	call   11a30 <idt_enter_protection>
   12025:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   12028:	8b 45 08             	mov    0x8(%ebp),%eax
   1202b:	8b 00                	mov    (%eax),%eax
   1202d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    idt_leave_protection(state);//TODO:解锁
   12030:	83 ec 0c             	sub    $0xc,%esp
   12033:	ff 75 f4             	push   -0xc(%ebp)
   12036:	e8 0d fa ff ff       	call   11a48 <idt_leave_protection>
   1203b:	83 c4 10             	add    $0x10,%esp

    return count;
   1203e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12041:	c9                   	leave  
   12042:	c3                   	ret    

00012043 <list_init>:
static inline void list_init(list_t *list) {
   12043:	55                   	push   %ebp
   12044:	89 e5                	mov    %esp,%ebp
   12046:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   12049:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1204d:	75 19                	jne    12068 <list_init+0x25>
   1204f:	68 08 3a 01 00       	push   $0x13a08
   12054:	68 0c 3b 01 00       	push   $0x13b0c
   12059:	6a 31                	push   $0x31
   1205b:	68 1c 3a 01 00       	push   $0x13a1c
   12060:	e8 8d 03 00 00       	call   123f2 <pannic>
   12065:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   12068:	8b 45 08             	mov    0x8(%ebp),%eax
   1206b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12072:	8b 45 08             	mov    0x8(%ebp),%eax
   12075:	8b 50 04             	mov    0x4(%eax),%edx
   12078:	8b 45 08             	mov    0x8(%ebp),%eax
   1207b:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   1207d:	8b 45 08             	mov    0x8(%ebp),%eax
   12080:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   12087:	90                   	nop
   12088:	c9                   	leave  
   12089:	c3                   	ret    

0001208a <list_get_size>:
static inline int list_get_size(list_t *list) {
   1208a:	55                   	push   %ebp
   1208b:	89 e5                	mov    %esp,%ebp
   1208d:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   12090:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12094:	75 19                	jne    120af <list_get_size+0x25>
   12096:	68 08 3a 01 00       	push   $0x13a08
   1209b:	68 18 3b 01 00       	push   $0x13b18
   120a0:	6a 3e                	push   $0x3e
   120a2:	68 1c 3a 01 00       	push   $0x13a1c
   120a7:	e8 46 03 00 00       	call   123f2 <pannic>
   120ac:	83 c4 10             	add    $0x10,%esp
    return list->size;
   120af:	8b 45 08             	mov    0x8(%ebp),%eax
   120b2:	8b 40 08             	mov    0x8(%eax),%eax
}
   120b5:	c9                   	leave  
   120b6:	c3                   	ret    

000120b7 <list_get_first>:
static inline list_node_t *list_get_first(list_t *list) {
   120b7:	55                   	push   %ebp
   120b8:	89 e5                	mov    %esp,%ebp
   120ba:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   120bd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   120c1:	75 19                	jne    120dc <list_get_first+0x25>
   120c3:	68 08 3a 01 00       	push   $0x13a08
   120c8:	68 38 3b 01 00       	push   $0x13b38
   120cd:	6a 44                	push   $0x44
   120cf:	68 1c 3a 01 00       	push   $0x13a1c
   120d4:	e8 19 03 00 00       	call   123f2 <pannic>
   120d9:	83 c4 10             	add    $0x10,%esp
    return list->first;
   120dc:	8b 45 08             	mov    0x8(%ebp),%eax
   120df:	8b 00                	mov    (%eax),%eax
}
   120e1:	c9                   	leave  
   120e2:	c3                   	ret    

000120e3 <list_get_last>:

static inline list_node_t *list_get_last(list_t *list) {
   120e3:	55                   	push   %ebp
   120e4:	89 e5                	mov    %esp,%ebp
   120e6:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   120e9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   120ed:	75 19                	jne    12108 <list_get_last+0x25>
   120ef:	68 08 3a 01 00       	push   $0x13a08
   120f4:	68 28 3b 01 00       	push   $0x13b28
   120f9:	6a 4a                	push   $0x4a
   120fb:	68 1c 3a 01 00       	push   $0x13a1c
   12100:	e8 ed 02 00 00       	call   123f2 <pannic>
   12105:	83 c4 10             	add    $0x10,%esp

    return list->last;
   12108:	8b 45 08             	mov    0x8(%ebp),%eax
   1210b:	8b 40 04             	mov    0x4(%eax),%eax
}
   1210e:	c9                   	leave  
   1210f:	c3                   	ret    

00012110 <list_test>:

#include "tools/list.h"
#include "tools/log.h"
#include "common/types.h"

void list_test(void) {
   12110:	55                   	push   %ebp
   12111:	89 e5                	mov    %esp,%ebp
   12113:	56                   	push   %esi
   12114:	53                   	push   %ebx
   12115:	83 ec 70             	sub    $0x70,%esp
    list_t list;
    list_node_t nodes[5];

    list_init(&list);
   12118:	83 ec 0c             	sub    $0xc,%esp
   1211b:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1211e:	50                   	push   %eax
   1211f:	e8 1f ff ff ff       	call   12043 <list_init>
   12124:	83 c4 10             	add    $0x10,%esp
    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   12127:	83 ec 0c             	sub    $0xc,%esp
   1212a:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1212d:	50                   	push   %eax
   1212e:	e8 57 ff ff ff       	call   1208a <list_get_size>
   12133:	83 c4 10             	add    $0x10,%esp
   12136:	89 c6                	mov    %eax,%esi
   12138:	83 ec 0c             	sub    $0xc,%esp
   1213b:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1213e:	50                   	push   %eax
   1213f:	e8 9f ff ff ff       	call   120e3 <list_get_last>
   12144:	83 c4 10             	add    $0x10,%esp
   12147:	89 c3                	mov    %eax,%ebx
   12149:	83 ec 0c             	sub    $0xc,%esp
   1214c:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1214f:	50                   	push   %eax
   12150:	e8 62 ff ff ff       	call   120b7 <list_get_first>
   12155:	83 c4 10             	add    $0x10,%esp
   12158:	56                   	push   %esi
   12159:	53                   	push   %ebx
   1215a:	50                   	push   %eax
   1215b:	68 5c 3a 01 00       	push   $0x13a5c
   12160:	e8 5c 0f 00 00       	call   130c1 <log_printf>
   12165:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_insert_first
    for (int i = 0; i < 5; ++i) {
   12168:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1216f:	eb 3f                	jmp    121b0 <list_test+0xa0>
        list_node_t *node = nodes + i;
   12171:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12174:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   1217b:	8d 45 9c             	lea    -0x64(%ebp),%eax
   1217e:	01 d0                	add    %edx,%eax
   12180:	89 45 d0             	mov    %eax,-0x30(%ebp)

        log_printf("insert first to list: %d, 0x%x", i, (uint32_t)node);
   12183:	8b 45 d0             	mov    -0x30(%ebp),%eax
   12186:	83 ec 04             	sub    $0x4,%esp
   12189:	50                   	push   %eax
   1218a:	ff 75 f4             	push   -0xc(%ebp)
   1218d:	68 84 3a 01 00       	push   $0x13a84
   12192:	e8 2a 0f 00 00       	call   130c1 <log_printf>
   12197:	83 c4 10             	add    $0x10,%esp
        list_insert_first(&list, node);
   1219a:	83 ec 08             	sub    $0x8,%esp
   1219d:	ff 75 d0             	push   -0x30(%ebp)
   121a0:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   121a3:	50                   	push   %eax
   121a4:	e8 09 0b 00 00       	call   12cb2 <list_insert_first>
   121a9:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   121ac:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   121b0:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   121b4:	7e bb                	jle    12171 <list_test+0x61>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   121b6:	83 ec 0c             	sub    $0xc,%esp
   121b9:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   121bc:	50                   	push   %eax
   121bd:	e8 c8 fe ff ff       	call   1208a <list_get_size>
   121c2:	83 c4 10             	add    $0x10,%esp
   121c5:	89 c6                	mov    %eax,%esi
   121c7:	83 ec 0c             	sub    $0xc,%esp
   121ca:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   121cd:	50                   	push   %eax
   121ce:	e8 10 ff ff ff       	call   120e3 <list_get_last>
   121d3:	83 c4 10             	add    $0x10,%esp
   121d6:	89 c3                	mov    %eax,%ebx
   121d8:	83 ec 0c             	sub    $0xc,%esp
   121db:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   121de:	50                   	push   %eax
   121df:	e8 d3 fe ff ff       	call   120b7 <list_get_first>
   121e4:	83 c4 10             	add    $0x10,%esp
   121e7:	56                   	push   %esi
   121e8:	53                   	push   %ebx
   121e9:	50                   	push   %eax
   121ea:	68 5c 3a 01 00       	push   $0x13a5c
   121ef:	e8 cd 0e 00 00       	call   130c1 <log_printf>
   121f4:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

   
    //测试list_remove_first
    for (int i = 0; i < 5; ++i) {
   121f7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   121fe:	eb 2d                	jmp    1222d <list_test+0x11d>
        list_node_t *node = list_remove_first(&list);
   12200:	83 ec 0c             	sub    $0xc,%esp
   12203:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12206:	50                   	push   %eax
   12207:	e8 c0 0b 00 00       	call   12dcc <list_remove_first>
   1220c:	83 c4 10             	add    $0x10,%esp
   1220f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        log_printf("remove first: %d, 0x%x", i, (uint32_t)node);
   12212:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   12215:	83 ec 04             	sub    $0x4,%esp
   12218:	50                   	push   %eax
   12219:	ff 75 f0             	push   -0x10(%ebp)
   1221c:	68 a3 3a 01 00       	push   $0x13aa3
   12221:	e8 9b 0e 00 00       	call   130c1 <log_printf>
   12226:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   12229:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   1222d:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   12231:	7e cd                	jle    12200 <list_test+0xf0>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   12233:	83 ec 0c             	sub    $0xc,%esp
   12236:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12239:	50                   	push   %eax
   1223a:	e8 4b fe ff ff       	call   1208a <list_get_size>
   1223f:	83 c4 10             	add    $0x10,%esp
   12242:	89 c6                	mov    %eax,%esi
   12244:	83 ec 0c             	sub    $0xc,%esp
   12247:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1224a:	50                   	push   %eax
   1224b:	e8 93 fe ff ff       	call   120e3 <list_get_last>
   12250:	83 c4 10             	add    $0x10,%esp
   12253:	89 c3                	mov    %eax,%ebx
   12255:	83 ec 0c             	sub    $0xc,%esp
   12258:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1225b:	50                   	push   %eax
   1225c:	e8 56 fe ff ff       	call   120b7 <list_get_first>
   12261:	83 c4 10             	add    $0x10,%esp
   12264:	56                   	push   %esi
   12265:	53                   	push   %ebx
   12266:	50                   	push   %eax
   12267:	68 5c 3a 01 00       	push   $0x13a5c
   1226c:	e8 50 0e 00 00       	call   130c1 <log_printf>
   12271:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    

    //测试list_insert_last
    for (int i = 0; i < 5; ++i) {
   12274:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   1227b:	eb 3f                	jmp    122bc <list_test+0x1ac>
        list_node_t *node = nodes + i;
   1227d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12280:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   12287:	8d 45 9c             	lea    -0x64(%ebp),%eax
   1228a:	01 d0                	add    %edx,%eax
   1228c:	89 45 d8             	mov    %eax,-0x28(%ebp)

        log_printf("insert last to list: %d, 0x%x", i, (uint32_t)node);
   1228f:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12292:	83 ec 04             	sub    $0x4,%esp
   12295:	50                   	push   %eax
   12296:	ff 75 ec             	push   -0x14(%ebp)
   12299:	68 ba 3a 01 00       	push   $0x13aba
   1229e:	e8 1e 0e 00 00       	call   130c1 <log_printf>
   122a3:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&list, node);
   122a6:	83 ec 08             	sub    $0x8,%esp
   122a9:	ff 75 d8             	push   -0x28(%ebp)
   122ac:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   122af:	50                   	push   %eax
   122b0:	e8 88 0a 00 00       	call   12d3d <list_insert_last>
   122b5:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   122b8:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   122bc:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   122c0:	7e bb                	jle    1227d <list_test+0x16d>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   122c2:	83 ec 0c             	sub    $0xc,%esp
   122c5:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   122c8:	50                   	push   %eax
   122c9:	e8 bc fd ff ff       	call   1208a <list_get_size>
   122ce:	83 c4 10             	add    $0x10,%esp
   122d1:	89 c6                	mov    %eax,%esi
   122d3:	83 ec 0c             	sub    $0xc,%esp
   122d6:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   122d9:	50                   	push   %eax
   122da:	e8 04 fe ff ff       	call   120e3 <list_get_last>
   122df:	83 c4 10             	add    $0x10,%esp
   122e2:	89 c3                	mov    %eax,%ebx
   122e4:	83 ec 0c             	sub    $0xc,%esp
   122e7:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   122ea:	50                   	push   %eax
   122eb:	e8 c7 fd ff ff       	call   120b7 <list_get_first>
   122f0:	83 c4 10             	add    $0x10,%esp
   122f3:	56                   	push   %esi
   122f4:	53                   	push   %ebx
   122f5:	50                   	push   %eax
   122f6:	68 5c 3a 01 00       	push   $0x13a5c
   122fb:	e8 c1 0d 00 00       	call   130c1 <log_printf>
   12300:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_remove_last
    for (int i = 0; i < 5; ++i) {
   12303:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   1230a:	eb 2d                	jmp    12339 <list_test+0x229>
        list_node_t *node = list_remove_last(&list);
   1230c:	83 ec 0c             	sub    $0xc,%esp
   1230f:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12312:	50                   	push   %eax
   12313:	e8 65 0b 00 00       	call   12e7d <list_remove_last>
   12318:	83 c4 10             	add    $0x10,%esp
   1231b:	89 45 dc             	mov    %eax,-0x24(%ebp)
        log_printf("remove last: %d, 0x%x", i, (uint32_t)node);
   1231e:	8b 45 dc             	mov    -0x24(%ebp),%eax
   12321:	83 ec 04             	sub    $0x4,%esp
   12324:	50                   	push   %eax
   12325:	ff 75 e8             	push   -0x18(%ebp)
   12328:	68 d8 3a 01 00       	push   $0x13ad8
   1232d:	e8 8f 0d 00 00       	call   130c1 <log_printf>
   12332:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   12335:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   12339:	83 7d e8 04          	cmpl   $0x4,-0x18(%ebp)
   1233d:	7e cd                	jle    1230c <list_test+0x1fc>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   1233f:	83 ec 0c             	sub    $0xc,%esp
   12342:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12345:	50                   	push   %eax
   12346:	e8 3f fd ff ff       	call   1208a <list_get_size>
   1234b:	83 c4 10             	add    $0x10,%esp
   1234e:	89 c6                	mov    %eax,%esi
   12350:	83 ec 0c             	sub    $0xc,%esp
   12353:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12356:	50                   	push   %eax
   12357:	e8 87 fd ff ff       	call   120e3 <list_get_last>
   1235c:	83 c4 10             	add    $0x10,%esp
   1235f:	89 c3                	mov    %eax,%ebx
   12361:	83 ec 0c             	sub    $0xc,%esp
   12364:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12367:	50                   	push   %eax
   12368:	e8 4a fd ff ff       	call   120b7 <list_get_first>
   1236d:	83 c4 10             	add    $0x10,%esp
   12370:	56                   	push   %esi
   12371:	53                   	push   %ebx
   12372:	50                   	push   %eax
   12373:	68 5c 3a 01 00       	push   $0x13a5c
   12378:	e8 44 0d 00 00       	call   130c1 <log_printf>
   1237d:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    
    struct type_t {
        int i;
        list_node_t node;
    }v = {0x123456};
   12380:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
   12387:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
   1238e:	c7 45 98 00 00 00 00 	movl   $0x0,-0x68(%ebp)
   12395:	c7 45 90 56 34 12 00 	movl   $0x123456,-0x70(%ebp)

    list_node_t *v_node = &v.node;
   1239c:	8d 45 90             	lea    -0x70(%ebp),%eax
   1239f:	83 c0 04             	add    $0x4,%eax
   123a2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    struct type_t *p = list_node_parent(v_node, struct type_t, node);  
   123a5:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   123a9:	74 08                	je     123b3 <list_test+0x2a3>
   123ab:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   123ae:	83 e8 04             	sub    $0x4,%eax
   123b1:	eb 05                	jmp    123b8 <list_test+0x2a8>
   123b3:	b8 00 00 00 00       	mov    $0x0,%eax
   123b8:	89 45 e0             	mov    %eax,-0x20(%ebp)

    log_printf("v addr = 0x%x", (uint32_t)&v);
   123bb:	8d 45 90             	lea    -0x70(%ebp),%eax
   123be:	83 ec 08             	sub    $0x8,%esp
   123c1:	50                   	push   %eax
   123c2:	68 ee 3a 01 00       	push   $0x13aee
   123c7:	e8 f5 0c 00 00       	call   130c1 <log_printf>
   123cc:	83 c4 10             	add    $0x10,%esp
    log_printf("p addr = 0x%x", (uint32_t)p);  
   123cf:	8b 45 e0             	mov    -0x20(%ebp),%eax
   123d2:	83 ec 08             	sub    $0x8,%esp
   123d5:	50                   	push   %eax
   123d6:	68 fc 3a 01 00       	push   $0x13afc
   123db:	e8 e1 0c 00 00       	call   130c1 <log_printf>
   123e0:	83 c4 10             	add    $0x10,%esp

 }
   123e3:	90                   	nop
   123e4:	8d 65 f8             	lea    -0x8(%ebp),%esp
   123e7:	5b                   	pop    %ebx
   123e8:	5e                   	pop    %esi
   123e9:	5d                   	pop    %ebp
   123ea:	c3                   	ret    

000123eb <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   123eb:	55                   	push   %ebp
   123ec:	89 e5                	mov    %esp,%ebp
   123ee:	f4                   	hlt    
   123ef:	90                   	nop
   123f0:	5d                   	pop    %ebp
   123f1:	c3                   	ret    

000123f2 <pannic>:
 * @param file 异常所在文件绝对路径
 * @param line 异常所在行号
 * @param func 异常所在函数名 
 * @param reason 异常的原因
 */
void pannic(const char *file, int line, const char *func, const char *reason) {
   123f2:	55                   	push   %ebp
   123f3:	89 e5                	mov    %esp,%ebp
   123f5:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert faild! %s", reason);
   123f8:	83 ec 08             	sub    $0x8,%esp
   123fb:	ff 75 14             	push   0x14(%ebp)
   123fe:	68 47 3b 01 00       	push   $0x13b47
   12403:	e8 b9 0c 00 00       	call   130c1 <log_printf>
   12408:	83 c4 10             	add    $0x10,%esp
    log_printf("file:\t%s\nline:\t%d\nfunc:\t%s", file, line, func);
   1240b:	ff 75 10             	push   0x10(%ebp)
   1240e:	ff 75 0c             	push   0xc(%ebp)
   12411:	ff 75 08             	push   0x8(%ebp)
   12414:	68 58 3b 01 00       	push   $0x13b58
   12419:	e8 a3 0c 00 00       	call   130c1 <log_printf>
   1241e:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   12421:	e8 c5 ff ff ff       	call   123eb <hlt>
   12426:	eb f9                	jmp    12421 <pannic+0x2f>

00012428 <bitmap_byte_count>:
 * @brief  向上取整获取位图数组中有多少字节
 * 
 * @param bit_count  位图数组拥有的bit位数
 * @return int 向上取整得到的字节数
 */
int bitmap_byte_count(int bit_count) {
   12428:	55                   	push   %ebp
   12429:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8;
   1242b:	8b 45 08             	mov    0x8(%ebp),%eax
   1242e:	83 c0 07             	add    $0x7,%eax
   12431:	8d 50 07             	lea    0x7(%eax),%edx
   12434:	85 c0                	test   %eax,%eax
   12436:	0f 48 c2             	cmovs  %edx,%eax
   12439:	c1 f8 03             	sar    $0x3,%eax
}
   1243c:	5d                   	pop    %ebp
   1243d:	c3                   	ret    

0001243e <bitmap_init>:
 * @param bitmap 需要初始化的位图
 * @param bits 位图所包含的位图数组的起始地址
 * @param count 页的数量
 * @param init_bit 将位图数组的每一位设置为init_bit
 */
void bitmap_init(bitmap_t *bitmap, uint8_t *bits, int count, int init_bit) {
   1243e:	55                   	push   %ebp
   1243f:	89 e5                	mov    %esp,%ebp
   12441:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   12444:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12448:	75 19                	jne    12463 <bitmap_init+0x25>
   1244a:	68 74 3b 01 00       	push   $0x13b74
   1244f:	68 08 3c 01 00       	push   $0x13c08
   12454:	6a 24                	push   $0x24
   12456:	68 8c 3b 01 00       	push   $0x13b8c
   1245b:	e8 92 ff ff ff       	call   123f2 <pannic>
   12460:	83 c4 10             	add    $0x10,%esp
    ASSERT(bits != (uint8_t*)0);
   12463:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12467:	75 19                	jne    12482 <bitmap_init+0x44>
   12469:	68 c4 3b 01 00       	push   $0x13bc4
   1246e:	68 08 3c 01 00       	push   $0x13c08
   12473:	6a 25                	push   $0x25
   12475:	68 8c 3b 01 00       	push   $0x13b8c
   1247a:	e8 73 ff ff ff       	call   123f2 <pannic>
   1247f:	83 c4 10             	add    $0x10,%esp

    bitmap->bit_count = count;
   12482:	8b 45 08             	mov    0x8(%ebp),%eax
   12485:	8b 55 10             	mov    0x10(%ebp),%edx
   12488:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   1248a:	8b 45 08             	mov    0x8(%ebp),%eax
   1248d:	8b 55 0c             	mov    0xc(%ebp),%edx
   12490:	89 50 04             	mov    %edx,0x4(%eax)

    //计算该位图需要多少字节
    int bytes = bitmap_byte_count(bitmap->bit_count);
   12493:	8b 45 08             	mov    0x8(%ebp),%eax
   12496:	8b 00                	mov    (%eax),%eax
   12498:	83 ec 0c             	sub    $0xc,%esp
   1249b:	50                   	push   %eax
   1249c:	e8 87 ff ff ff       	call   12428 <bitmap_byte_count>
   124a1:	83 c4 10             	add    $0x10,%esp
   124a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    kernel_memset(bitmap->bits, init_bit ? 0xff : 0, bytes);
   124a7:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   124ab:	74 07                	je     124b4 <bitmap_init+0x76>
   124ad:	ba ff 00 00 00       	mov    $0xff,%edx
   124b2:	eb 05                	jmp    124b9 <bitmap_init+0x7b>
   124b4:	ba 00 00 00 00       	mov    $0x0,%edx
   124b9:	8b 45 08             	mov    0x8(%ebp),%eax
   124bc:	8b 40 04             	mov    0x4(%eax),%eax
   124bf:	83 ec 04             	sub    $0x4,%esp
   124c2:	ff 75 f4             	push   -0xc(%ebp)
   124c5:	52                   	push   %edx
   124c6:	50                   	push   %eax
   124c7:	e8 28 04 00 00       	call   128f4 <kernel_memset>
   124cc:	83 c4 10             	add    $0x10,%esp

}
   124cf:	90                   	nop
   124d0:	c9                   	leave  
   124d1:	c3                   	ret    

000124d2 <bitmap_get_bit>:
 * 
 * @param bitmap 
 * @param index 
 * @return uint8_t 
 */
uint8_t bitmap_get_bit(bitmap_t *bitmap, int index) {
   124d2:	55                   	push   %ebp
   124d3:	89 e5                	mov    %esp,%ebp
   124d5:	53                   	push   %ebx
   124d6:	83 ec 04             	sub    $0x4,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   124d9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   124dd:	75 19                	jne    124f8 <bitmap_get_bit+0x26>
   124df:	68 74 3b 01 00       	push   $0x13b74
   124e4:	68 14 3c 01 00       	push   $0x13c14
   124e9:	6a 39                	push   $0x39
   124eb:	68 8c 3b 01 00       	push   $0x13b8c
   124f0:	e8 fd fe ff ff       	call   123f2 <pannic>
   124f5:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0);
   124f8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   124fc:	79 19                	jns    12517 <bitmap_get_bit+0x45>
   124fe:	68 d8 3b 01 00       	push   $0x13bd8
   12503:	68 14 3c 01 00       	push   $0x13c14
   12508:	6a 3a                	push   $0x3a
   1250a:	68 8c 3b 01 00       	push   $0x13b8c
   1250f:	e8 de fe ff ff       	call   123f2 <pannic>
   12514:	83 c4 10             	add    $0x10,%esp

    return (bitmap->bits[index / 8] & (1 << (index % 8)));
   12517:	8b 45 08             	mov    0x8(%ebp),%eax
   1251a:	8b 48 04             	mov    0x4(%eax),%ecx
   1251d:	8b 45 0c             	mov    0xc(%ebp),%eax
   12520:	8d 50 07             	lea    0x7(%eax),%edx
   12523:	85 c0                	test   %eax,%eax
   12525:	0f 48 c2             	cmovs  %edx,%eax
   12528:	c1 f8 03             	sar    $0x3,%eax
   1252b:	01 c8                	add    %ecx,%eax
   1252d:	0f b6 00             	movzbl (%eax),%eax
   12530:	89 c3                	mov    %eax,%ebx
   12532:	8b 45 0c             	mov    0xc(%ebp),%eax
   12535:	83 e0 07             	and    $0x7,%eax
   12538:	ba 01 00 00 00       	mov    $0x1,%edx
   1253d:	89 c1                	mov    %eax,%ecx
   1253f:	d3 e2                	shl    %cl,%edx
   12541:	89 d0                	mov    %edx,%eax
   12543:	21 d8                	and    %ebx,%eax
}
   12545:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   12548:	c9                   	leave  
   12549:	c3                   	ret    

0001254a <bitmap_set_bit>:
 * @param bitmap 
 * @param index 
 * @param count 
 * @param bit 
 */
void bitmap_set_bit(bitmap_t *bitmap, int index, int count, int bit) {
   1254a:	55                   	push   %ebp
   1254b:	89 e5                	mov    %esp,%ebp
   1254d:	56                   	push   %esi
   1254e:	53                   	push   %ebx
   1254f:	83 ec 10             	sub    $0x10,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   12552:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12556:	75 19                	jne    12571 <bitmap_set_bit+0x27>
   12558:	68 74 3b 01 00       	push   $0x13b74
   1255d:	68 24 3c 01 00       	push   $0x13c24
   12562:	6a 48                	push   $0x48
   12564:	68 8c 3b 01 00       	push   $0x13b8c
   12569:	e8 84 fe ff ff       	call   123f2 <pannic>
   1256e:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0 && count >= 0);
   12571:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12575:	78 06                	js     1257d <bitmap_set_bit+0x33>
   12577:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1257b:	79 19                	jns    12596 <bitmap_set_bit+0x4c>
   1257d:	68 e3 3b 01 00       	push   $0x13be3
   12582:	68 24 3c 01 00       	push   $0x13c24
   12587:	6a 49                	push   $0x49
   12589:	68 8c 3b 01 00       	push   $0x13b8c
   1258e:	e8 5f fe ff ff       	call   123f2 <pannic>
   12593:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   12596:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1259d:	e9 92 00 00 00       	jmp    12634 <bitmap_set_bit+0xea>
        if (bit) {
   125a2:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   125a6:	74 42                	je     125ea <bitmap_set_bit+0xa0>
            bitmap->bits[index / 8] |= (1 << (index % 8));
   125a8:	8b 45 08             	mov    0x8(%ebp),%eax
   125ab:	8b 48 04             	mov    0x4(%eax),%ecx
   125ae:	8b 45 0c             	mov    0xc(%ebp),%eax
   125b1:	8d 50 07             	lea    0x7(%eax),%edx
   125b4:	85 c0                	test   %eax,%eax
   125b6:	0f 48 c2             	cmovs  %edx,%eax
   125b9:	c1 f8 03             	sar    $0x3,%eax
   125bc:	89 c2                	mov    %eax,%edx
   125be:	89 d0                	mov    %edx,%eax
   125c0:	01 c8                	add    %ecx,%eax
   125c2:	0f b6 00             	movzbl (%eax),%eax
   125c5:	89 c6                	mov    %eax,%esi
   125c7:	8b 45 0c             	mov    0xc(%ebp),%eax
   125ca:	83 e0 07             	and    $0x7,%eax
   125cd:	bb 01 00 00 00       	mov    $0x1,%ebx
   125d2:	89 c1                	mov    %eax,%ecx
   125d4:	d3 e3                	shl    %cl,%ebx
   125d6:	89 d8                	mov    %ebx,%eax
   125d8:	89 f1                	mov    %esi,%ecx
   125da:	09 c1                	or     %eax,%ecx
   125dc:	8b 45 08             	mov    0x8(%ebp),%eax
   125df:	8b 40 04             	mov    0x4(%eax),%eax
   125e2:	01 d0                	add    %edx,%eax
   125e4:	89 ca                	mov    %ecx,%edx
   125e6:	88 10                	mov    %dl,(%eax)
   125e8:	eb 42                	jmp    1262c <bitmap_set_bit+0xe2>
        } else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   125ea:	8b 45 08             	mov    0x8(%ebp),%eax
   125ed:	8b 48 04             	mov    0x4(%eax),%ecx
   125f0:	8b 45 0c             	mov    0xc(%ebp),%eax
   125f3:	8d 50 07             	lea    0x7(%eax),%edx
   125f6:	85 c0                	test   %eax,%eax
   125f8:	0f 48 c2             	cmovs  %edx,%eax
   125fb:	c1 f8 03             	sar    $0x3,%eax
   125fe:	89 c2                	mov    %eax,%edx
   12600:	89 d0                	mov    %edx,%eax
   12602:	01 c8                	add    %ecx,%eax
   12604:	0f b6 00             	movzbl (%eax),%eax
   12607:	89 c6                	mov    %eax,%esi
   12609:	8b 45 0c             	mov    0xc(%ebp),%eax
   1260c:	83 e0 07             	and    $0x7,%eax
   1260f:	bb 01 00 00 00       	mov    $0x1,%ebx
   12614:	89 c1                	mov    %eax,%ecx
   12616:	d3 e3                	shl    %cl,%ebx
   12618:	89 d8                	mov    %ebx,%eax
   1261a:	f7 d0                	not    %eax
   1261c:	89 f1                	mov    %esi,%ecx
   1261e:	21 c1                	and    %eax,%ecx
   12620:	8b 45 08             	mov    0x8(%ebp),%eax
   12623:	8b 40 04             	mov    0x4(%eax),%eax
   12626:	01 d0                	add    %edx,%eax
   12628:	89 ca                	mov    %ecx,%edx
   1262a:	88 10                	mov    %dl,(%eax)
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   1262c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12630:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   12634:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12637:	3b 45 10             	cmp    0x10(%ebp),%eax
   1263a:	7d 0e                	jge    1264a <bitmap_set_bit+0x100>
   1263c:	8b 45 08             	mov    0x8(%ebp),%eax
   1263f:	8b 00                	mov    (%eax),%eax
   12641:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12644:	0f 8c 58 ff ff ff    	jl     125a2 <bitmap_set_bit+0x58>
        }
    }
}
   1264a:	90                   	nop
   1264b:	8d 65 f8             	lea    -0x8(%ebp),%esp
   1264e:	5b                   	pop    %ebx
   1264f:	5e                   	pop    %esi
   12650:	5d                   	pop    %ebp
   12651:	c3                   	ret    

00012652 <bitmap_is_set>:
 * 
 * @param bitmap 
 * @param index 
 * @return int 
 */
int bitmap_is_set(bitmap_t *bitmap, int index) {
   12652:	55                   	push   %ebp
   12653:	89 e5                	mov    %esp,%ebp
   12655:	83 ec 08             	sub    $0x8,%esp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   12658:	83 ec 08             	sub    $0x8,%esp
   1265b:	ff 75 0c             	push   0xc(%ebp)
   1265e:	ff 75 08             	push   0x8(%ebp)
   12661:	e8 6c fe ff ff       	call   124d2 <bitmap_get_bit>
   12666:	83 c4 10             	add    $0x10,%esp
   12669:	84 c0                	test   %al,%al
   1266b:	0f 95 c0             	setne  %al
   1266e:	0f b6 c0             	movzbl %al,%eax
}
   12671:	c9                   	leave  
   12672:	c3                   	ret    

00012673 <bitmap_alloc_nbits>:
 * @param bitmap 
 * @param bit 当某一位的值为bit时表示该位空闲，可供分配
 * @param count 
 * @return int 
 */
int bitmap_alloc_nbits(bitmap_t *bitmap, int bit, int count) {
   12673:	55                   	push   %ebp
   12674:	89 e5                	mov    %esp,%ebp
   12676:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   12679:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1267d:	75 19                	jne    12698 <bitmap_alloc_nbits+0x25>
   1267f:	68 74 3b 01 00       	push   $0x13b74
   12684:	68 34 3c 01 00       	push   $0x13c34
   12689:	6a 68                	push   $0x68
   1268b:	68 8c 3b 01 00       	push   $0x13b8c
   12690:	e8 5d fd ff ff       	call   123f2 <pannic>
   12695:	83 c4 10             	add    $0x10,%esp
    ASSERT(count >= 0);
   12698:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1269c:	79 19                	jns    126b7 <bitmap_alloc_nbits+0x44>
   1269e:	68 fc 3b 01 00       	push   $0x13bfc
   126a3:	68 34 3c 01 00       	push   $0x13c34
   126a8:	6a 69                	push   $0x69
   126aa:	68 8c 3b 01 00       	push   $0x13b8c
   126af:	e8 3e fd ff ff       	call   123f2 <pannic>
   126b4:	83 c4 10             	add    $0x10,%esp

    int search_index = 0;
   126b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    int ok_index = -1;
   126be:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
    while (search_index < bitmap->bit_count) {
   126c5:	e9 8f 00 00 00       	jmp    12759 <bitmap_alloc_nbits+0xe6>
        //确定可分配空间的起始索引
        if (bitmap_get_bit(bitmap, search_index) != bit) {
   126ca:	83 ec 08             	sub    $0x8,%esp
   126cd:	ff 75 f4             	push   -0xc(%ebp)
   126d0:	ff 75 08             	push   0x8(%ebp)
   126d3:	e8 fa fd ff ff       	call   124d2 <bitmap_get_bit>
   126d8:	83 c4 10             	add    $0x10,%esp
   126db:	0f b6 c0             	movzbl %al,%eax
   126de:	39 45 0c             	cmp    %eax,0xc(%ebp)
   126e1:	74 06                	je     126e9 <bitmap_alloc_nbits+0x76>
            search_index++;
   126e3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
            continue;
   126e7:	eb 70                	jmp    12759 <bitmap_alloc_nbits+0xe6>
        }

        //记录可分配空间的起始索引
        ok_index = search_index;
   126e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   126ec:	89 45 f0             	mov    %eax,-0x10(%ebp)

        //判断该空间是否大小满足要求
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   126ef:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
   126f6:	eb 2d                	jmp    12725 <bitmap_alloc_nbits+0xb2>
            //空间大小不满足要求, 分配失败
            if (bitmap_get_bit(bitmap, search_index++) != bit) {
   126f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   126fb:	8d 50 01             	lea    0x1(%eax),%edx
   126fe:	89 55 f4             	mov    %edx,-0xc(%ebp)
   12701:	83 ec 08             	sub    $0x8,%esp
   12704:	50                   	push   %eax
   12705:	ff 75 08             	push   0x8(%ebp)
   12708:	e8 c5 fd ff ff       	call   124d2 <bitmap_get_bit>
   1270d:	83 c4 10             	add    $0x10,%esp
   12710:	0f b6 c0             	movzbl %al,%eax
   12713:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12716:	74 09                	je     12721 <bitmap_alloc_nbits+0xae>
                ok_index = -1;
   12718:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
                break;
   1271f:	eb 16                	jmp    12737 <bitmap_alloc_nbits+0xc4>
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   12721:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   12725:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12728:	3b 45 10             	cmp    0x10(%ebp),%eax
   1272b:	7d 0a                	jge    12737 <bitmap_alloc_nbits+0xc4>
   1272d:	8b 45 08             	mov    0x8(%ebp),%eax
   12730:	8b 00                	mov    (%eax),%eax
   12732:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   12735:	7c c1                	jl     126f8 <bitmap_alloc_nbits+0x85>
            }
        }

        if (ok_index != -1) {//分配成功
   12737:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
   1273b:	74 1c                	je     12759 <bitmap_alloc_nbits+0xe6>
            //将该片空间标记为已分配状态, 并返回起始索引
            bitmap_set_bit(bitmap, ok_index, count, ~bit);
   1273d:	8b 45 0c             	mov    0xc(%ebp),%eax
   12740:	f7 d0                	not    %eax
   12742:	50                   	push   %eax
   12743:	ff 75 10             	push   0x10(%ebp)
   12746:	ff 75 f0             	push   -0x10(%ebp)
   12749:	ff 75 08             	push   0x8(%ebp)
   1274c:	e8 f9 fd ff ff       	call   1254a <bitmap_set_bit>
   12751:	83 c4 10             	add    $0x10,%esp
            return ok_index;
   12754:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12757:	eb 13                	jmp    1276c <bitmap_alloc_nbits+0xf9>
    while (search_index < bitmap->bit_count) {
   12759:	8b 45 08             	mov    0x8(%ebp),%eax
   1275c:	8b 00                	mov    (%eax),%eax
   1275e:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   12761:	0f 8c 63 ff ff ff    	jl     126ca <bitmap_alloc_nbits+0x57>
        }
    }
    
    //遍历完整个位图也没有满足要求的空间则返回-1
    return -1;
   12767:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

   1276c:	c9                   	leave  
   1276d:	c3                   	ret    

0001276e <kernel_strcpy>:
 * @brief  拷贝字符串
 * 
 * @param dest 目标字符串
 * @param src  源字符串
 */
void kernel_strcpy(char *dest, const char *src) {
   1276e:	55                   	push   %ebp
   1276f:	89 e5                	mov    %esp,%ebp
    //1.判断是否为NULL
    if (!dest || !src) return;
   12771:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12775:	74 3b                	je     127b2 <kernel_strcpy+0x44>
   12777:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1277b:	74 35                	je     127b2 <kernel_strcpy+0x44>

    //2.拷贝 src '\0' 以前的部分到 dest中
    //TODO:完成（访问未初始化的内存）的异常中断后就只判断src是否读到'\0'
    while (*dest && *src) {
   1277d:	eb 17                	jmp    12796 <kernel_strcpy+0x28>
        *(dest++) = *(src++);
   1277f:	8b 55 0c             	mov    0xc(%ebp),%edx
   12782:	8d 42 01             	lea    0x1(%edx),%eax
   12785:	89 45 0c             	mov    %eax,0xc(%ebp)
   12788:	8b 45 08             	mov    0x8(%ebp),%eax
   1278b:	8d 48 01             	lea    0x1(%eax),%ecx
   1278e:	89 4d 08             	mov    %ecx,0x8(%ebp)
   12791:	0f b6 12             	movzbl (%edx),%edx
   12794:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   12796:	8b 45 08             	mov    0x8(%ebp),%eax
   12799:	0f b6 00             	movzbl (%eax),%eax
   1279c:	84 c0                	test   %al,%al
   1279e:	74 0a                	je     127aa <kernel_strcpy+0x3c>
   127a0:	8b 45 0c             	mov    0xc(%ebp),%eax
   127a3:	0f b6 00             	movzbl (%eax),%eax
   127a6:	84 c0                	test   %al,%al
   127a8:	75 d5                	jne    1277f <kernel_strcpy+0x11>
    }

    //3.添加结束符
    *dest = '\0';
   127aa:	8b 45 08             	mov    0x8(%ebp),%eax
   127ad:	c6 00 00             	movb   $0x0,(%eax)
   127b0:	eb 01                	jmp    127b3 <kernel_strcpy+0x45>
    if (!dest || !src) return;
   127b2:	90                   	nop
    
}
   127b3:	5d                   	pop    %ebp
   127b4:	c3                   	ret    

000127b5 <kernel_strncpy>:
 * 
 * @param dest 目的字符串
 * @param src 源字符串
 * @param size 拷贝字符串的长度，包含'\0'
 */
void kernel_strncpy(char* dest, const char *src, int size) {
   127b5:	55                   	push   %ebp
   127b6:	89 e5                	mov    %esp,%ebp
    //1.判断是否需要拷贝
    if (!dest || !src || !size) return;
   127b8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   127bc:	74 45                	je     12803 <kernel_strncpy+0x4e>
   127be:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   127c2:	74 3f                	je     12803 <kernel_strncpy+0x4e>
   127c4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   127c8:	74 39                	je     12803 <kernel_strncpy+0x4e>

    //2.size的大小包含了'\0'，所以要预留一个空间给'\0'，只能拷贝 size - 1个字符
    while ((size-- > 1) && (*src)) {
   127ca:	eb 17                	jmp    127e3 <kernel_strncpy+0x2e>
        *(dest++) = *(src++);
   127cc:	8b 55 0c             	mov    0xc(%ebp),%edx
   127cf:	8d 42 01             	lea    0x1(%edx),%eax
   127d2:	89 45 0c             	mov    %eax,0xc(%ebp)
   127d5:	8b 45 08             	mov    0x8(%ebp),%eax
   127d8:	8d 48 01             	lea    0x1(%eax),%ecx
   127db:	89 4d 08             	mov    %ecx,0x8(%ebp)
   127de:	0f b6 12             	movzbl (%edx),%edx
   127e1:	88 10                	mov    %dl,(%eax)
    while ((size-- > 1) && (*src)) {
   127e3:	8b 45 10             	mov    0x10(%ebp),%eax
   127e6:	8d 50 ff             	lea    -0x1(%eax),%edx
   127e9:	89 55 10             	mov    %edx,0x10(%ebp)
   127ec:	83 f8 01             	cmp    $0x1,%eax
   127ef:	7e 0a                	jle    127fb <kernel_strncpy+0x46>
   127f1:	8b 45 0c             	mov    0xc(%ebp),%eax
   127f4:	0f b6 00             	movzbl (%eax),%eax
   127f7:	84 c0                	test   %al,%al
   127f9:	75 d1                	jne    127cc <kernel_strncpy+0x17>
    }

    //3.添加结束符
    *dest = '\0';
   127fb:	8b 45 08             	mov    0x8(%ebp),%eax
   127fe:	c6 00 00             	movb   $0x0,(%eax)
   12801:	eb 01                	jmp    12804 <kernel_strncpy+0x4f>
    if (!dest || !src || !size) return;
   12803:	90                   	nop
}
   12804:	5d                   	pop    %ebp
   12805:	c3                   	ret    

00012806 <kernel_strncmp>:
 * @param s2 字符串2
 * @param size 比较前比较的子串长度，从下标0开始到(size - 1)
 * 
 * @return int ==: 0, > : 1, < : -1
 */
int kernel_strncmp(const char *s1, const char *s2, int size) {
   12806:	55                   	push   %ebp
   12807:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) return 0;
   12809:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1280d:	74 06                	je     12815 <kernel_strncmp+0xf>
   1280f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12813:	75 0f                	jne    12824 <kernel_strncmp+0x1e>
   12815:	b8 00 00 00 00       	mov    $0x0,%eax
   1281a:	eb 52                	jmp    1286e <kernel_strncmp+0x68>

    while (*s1 && *s2 && --size && *s1 == *s2 ) {
        ++s1;
   1281c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        ++s2;        
   12820:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && --size && *s1 == *s2 ) {
   12824:	8b 45 08             	mov    0x8(%ebp),%eax
   12827:	0f b6 00             	movzbl (%eax),%eax
   1282a:	84 c0                	test   %al,%al
   1282c:	74 24                	je     12852 <kernel_strncmp+0x4c>
   1282e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12831:	0f b6 00             	movzbl (%eax),%eax
   12834:	84 c0                	test   %al,%al
   12836:	74 1a                	je     12852 <kernel_strncmp+0x4c>
   12838:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   1283c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12840:	74 10                	je     12852 <kernel_strncmp+0x4c>
   12842:	8b 45 08             	mov    0x8(%ebp),%eax
   12845:	0f b6 10             	movzbl (%eax),%edx
   12848:	8b 45 0c             	mov    0xc(%ebp),%eax
   1284b:	0f b6 00             	movzbl (%eax),%eax
   1284e:	38 c2                	cmp    %al,%dl
   12850:	74 ca                	je     1281c <kernel_strncmp+0x16>
    }

    if (*s1 > *s2) return 1;
   12852:	8b 45 08             	mov    0x8(%ebp),%eax
   12855:	0f b6 10             	movzbl (%eax),%edx
   12858:	8b 45 0c             	mov    0xc(%ebp),%eax
   1285b:	0f b6 00             	movzbl (%eax),%eax
   1285e:	38 c2                	cmp    %al,%dl
   12860:	7e 07                	jle    12869 <kernel_strncmp+0x63>
   12862:	b8 01 00 00 00       	mov    $0x1,%eax
   12867:	eb 05                	jmp    1286e <kernel_strncmp+0x68>
    else if (*s1 < *s1) return -1;
    else return 0;
   12869:	b8 00 00 00 00       	mov    $0x0,%eax
    
}
   1286e:	5d                   	pop    %ebp
   1286f:	c3                   	ret    

00012870 <kernel_strlen>:
 * @brief  获取字符串str的长度
 * 
 * @param str 
 * @return int 
 */
int kernel_strlen(const char *str) {
   12870:	55                   	push   %ebp
   12871:	89 e5                	mov    %esp,%ebp
   12873:	83 ec 10             	sub    $0x10,%esp
    if (!str) return 0;
   12876:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1287a:	75 07                	jne    12883 <kernel_strlen+0x13>
   1287c:	b8 00 00 00 00       	mov    $0x0,%eax
   12881:	eb 20                	jmp    128a3 <kernel_strlen+0x33>

    int len = 0;
   12883:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*(str++)) len++;
   1288a:	eb 04                	jmp    12890 <kernel_strlen+0x20>
   1288c:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   12890:	8b 45 08             	mov    0x8(%ebp),%eax
   12893:	8d 50 01             	lea    0x1(%eax),%edx
   12896:	89 55 08             	mov    %edx,0x8(%ebp)
   12899:	0f b6 00             	movzbl (%eax),%eax
   1289c:	84 c0                	test   %al,%al
   1289e:	75 ec                	jne    1288c <kernel_strlen+0x1c>

    return len;
   128a0:	8b 45 fc             	mov    -0x4(%ebp),%eax
    
}
   128a3:	c9                   	leave  
   128a4:	c3                   	ret    

000128a5 <kernel_memcpy>:
 * 
 * @param dest 目的内存的起始地址
 * @param src 原内存的起始地址
 * @param size 复制的内存字节大小
 */
void kernel_memcpy(void *dest, const void *src, int size) {
   128a5:	55                   	push   %ebp
   128a6:	89 e5                	mov    %esp,%ebp
   128a8:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) return;
   128ab:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   128af:	74 40                	je     128f1 <kernel_memcpy+0x4c>
   128b1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   128b5:	74 3a                	je     128f1 <kernel_memcpy+0x4c>
   128b7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   128bb:	74 34                	je     128f1 <kernel_memcpy+0x4c>

    uint8_t *d = (uint8_t*)dest;
   128bd:	8b 45 08             	mov    0x8(%ebp),%eax
   128c0:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *s = (uint8_t*)src;
   128c3:	8b 45 0c             	mov    0xc(%ebp),%eax
   128c6:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (size--) {
   128c9:	eb 17                	jmp    128e2 <kernel_memcpy+0x3d>
        *(d++) = *(s++);
   128cb:	8b 55 f8             	mov    -0x8(%ebp),%edx
   128ce:	8d 42 01             	lea    0x1(%edx),%eax
   128d1:	89 45 f8             	mov    %eax,-0x8(%ebp)
   128d4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   128d7:	8d 48 01             	lea    0x1(%eax),%ecx
   128da:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   128dd:	0f b6 12             	movzbl (%edx),%edx
   128e0:	88 10                	mov    %dl,(%eax)
    while (size--) {
   128e2:	8b 45 10             	mov    0x10(%ebp),%eax
   128e5:	8d 50 ff             	lea    -0x1(%eax),%edx
   128e8:	89 55 10             	mov    %edx,0x10(%ebp)
   128eb:	85 c0                	test   %eax,%eax
   128ed:	75 dc                	jne    128cb <kernel_memcpy+0x26>
   128ef:	eb 01                	jmp    128f2 <kernel_memcpy+0x4d>
    if (!dest || !src || !size) return;
   128f1:	90                   	nop
    }
    
}
   128f2:	c9                   	leave  
   128f3:	c3                   	ret    

000128f4 <kernel_memset>:
 * 
 * @param dest 区域起始地址
 * @param v 每个字节的值
 * @param size 赋值的内存的大小
 */
void kernel_memset(void *dest, uint8_t v, int size) {
   128f4:	55                   	push   %ebp
   128f5:	89 e5                	mov    %esp,%ebp
   128f7:	83 ec 14             	sub    $0x14,%esp
   128fa:	8b 45 0c             	mov    0xc(%ebp),%eax
   128fd:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size) return;
   12900:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12904:	74 2c                	je     12932 <kernel_memset+0x3e>
   12906:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1290a:	74 26                	je     12932 <kernel_memset+0x3e>

    uint8_t *d = (uint8_t*)dest;
   1290c:	8b 45 08             	mov    0x8(%ebp),%eax
   1290f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    
    while (size--) {
   12912:	eb 0f                	jmp    12923 <kernel_memset+0x2f>
        *(d++) = v;
   12914:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12917:	8d 50 01             	lea    0x1(%eax),%edx
   1291a:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1291d:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   12921:	88 10                	mov    %dl,(%eax)
    while (size--) {
   12923:	8b 45 10             	mov    0x10(%ebp),%eax
   12926:	8d 50 ff             	lea    -0x1(%eax),%edx
   12929:	89 55 10             	mov    %edx,0x10(%ebp)
   1292c:	85 c0                	test   %eax,%eax
   1292e:	75 e4                	jne    12914 <kernel_memset+0x20>
   12930:	eb 01                	jmp    12933 <kernel_memset+0x3f>
    if (!dest || !size) return;
   12932:	90                   	nop
    }
    
}
   12933:	c9                   	leave  
   12934:	c3                   	ret    

00012935 <kernel_memcmp>:
 * @param d1 区域1的起始地址
 * @param d2 区域2的起始地址
 * @param size 比较的字节数量
 * @return int ==:0, >:1, <:-1
 */
int kernel_memcmp(const void *dest1, const void *dest2, int size) {
   12935:	55                   	push   %ebp
   12936:	89 e5                	mov    %esp,%ebp
   12938:	83 ec 10             	sub    $0x10,%esp
    if (!dest1 || !dest2 || !size) return 0;
   1293b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1293f:	74 0c                	je     1294d <kernel_memcmp+0x18>
   12941:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12945:	74 06                	je     1294d <kernel_memcmp+0x18>
   12947:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1294b:	75 07                	jne    12954 <kernel_memcmp+0x1f>
   1294d:	b8 00 00 00 00       	mov    $0x0,%eax
   12952:	eb 63                	jmp    129b7 <kernel_memcmp+0x82>

    uint8_t *d1 = (uint8_t*)dest1;
   12954:	8b 45 08             	mov    0x8(%ebp),%eax
   12957:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d2 = (uint8_t*)dest2;
   1295a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1295d:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (--size && *d1 == *d2) {
   12960:	eb 08                	jmp    1296a <kernel_memcmp+0x35>
        d1++;
   12962:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
        d2++;
   12966:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (--size && *d1 == *d2) {
   1296a:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   1296e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12972:	74 10                	je     12984 <kernel_memcmp+0x4f>
   12974:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12977:	0f b6 10             	movzbl (%eax),%edx
   1297a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1297d:	0f b6 00             	movzbl (%eax),%eax
   12980:	38 c2                	cmp    %al,%dl
   12982:	74 de                	je     12962 <kernel_memcmp+0x2d>
    }

    if (*d1 > *d2) return 1;
   12984:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12987:	0f b6 10             	movzbl (%eax),%edx
   1298a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1298d:	0f b6 00             	movzbl (%eax),%eax
   12990:	38 c2                	cmp    %al,%dl
   12992:	76 07                	jbe    1299b <kernel_memcmp+0x66>
   12994:	b8 01 00 00 00       	mov    $0x1,%eax
   12999:	eb 1c                	jmp    129b7 <kernel_memcmp+0x82>
    else if (*d1 < *d2) return -1;
   1299b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1299e:	0f b6 10             	movzbl (%eax),%edx
   129a1:	8b 45 f8             	mov    -0x8(%ebp),%eax
   129a4:	0f b6 00             	movzbl (%eax),%eax
   129a7:	38 c2                	cmp    %al,%dl
   129a9:	73 07                	jae    129b2 <kernel_memcmp+0x7d>
   129ab:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   129b0:	eb 05                	jmp    129b7 <kernel_memcmp+0x82>
    else return 0;
   129b2:	b8 00 00 00 00       	mov    $0x0,%eax

}
   129b7:	c9                   	leave  
   129b8:	c3                   	ret    

000129b9 <kernel_sprintf>:



void kernel_sprintf(char *buf, const char *formate, ...) {
   129b9:	55                   	push   %ebp
   129ba:	89 e5                	mov    %esp,%ebp
   129bc:	83 ec 18             	sub    $0x18,%esp
    //获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   129bf:	8d 45 10             	lea    0x10(%ebp),%eax
   129c2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_vsprintf(buf, formate, args);
   129c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   129c8:	83 ec 04             	sub    $0x4,%esp
   129cb:	50                   	push   %eax
   129cc:	ff 75 0c             	push   0xc(%ebp)
   129cf:	ff 75 08             	push   0x8(%ebp)
   129d2:	e8 06 00 00 00       	call   129dd <kernel_vsprintf>
   129d7:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   129da:	90                   	nop
   129db:	c9                   	leave  
   129dc:	c3                   	ret    

000129dd <kernel_vsprintf>:
 * 
 * @param buf 
 * @param formate 
 * @param args 
 */
void kernel_vsprintf(char *buf, const char *formate, va_list args) {
   129dd:	55                   	push   %ebp
   129de:	89 e5                	mov    %esp,%ebp
   129e0:	83 ec 28             	sub    $0x28,%esp
    //定义状态机，包含两种状态
    enum {NORMAL, READ_FMT} state = NORMAL;
   129e3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    
    char *curr = buf;
   129ea:	8b 45 08             	mov    0x8(%ebp),%eax
   129ed:	89 45 f0             	mov    %eax,-0x10(%ebp)

    char ch;

    while ((ch = *(formate++)) != '\0') {
   129f0:	e9 68 01 00 00       	jmp    12b5d <kernel_vsprintf+0x180>
        switch (state) {
   129f5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   129f9:	74 0b                	je     12a06 <kernel_vsprintf+0x29>
   129fb:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   129ff:	74 2b                	je     12a2c <kernel_vsprintf+0x4f>
   12a01:	e9 56 01 00 00       	jmp    12b5c <kernel_vsprintf+0x17f>
        case NORMAL: 
            if (ch == '%') state = READ_FMT;
   12a06:	80 7d e7 25          	cmpb   $0x25,-0x19(%ebp)
   12a0a:	75 0c                	jne    12a18 <kernel_vsprintf+0x3b>
   12a0c:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   12a13:	e9 45 01 00 00       	jmp    12b5d <kernel_vsprintf+0x180>
            else *(curr++) = ch;
   12a18:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12a1b:	8d 50 01             	lea    0x1(%eax),%edx
   12a1e:	89 55 f0             	mov    %edx,-0x10(%ebp)
   12a21:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   12a25:	88 10                	mov    %dl,(%eax)
            break;
   12a27:	e9 31 01 00 00       	jmp    12b5d <kernel_vsprintf+0x180>
        case READ_FMT:
            if (ch == 's') {
   12a2c:	80 7d e7 73          	cmpb   $0x73,-0x19(%ebp)
   12a30:	75 47                	jne    12a79 <kernel_vsprintf+0x9c>
                const char * str = va_arg(args, char *);
   12a32:	8b 45 10             	mov    0x10(%ebp),%eax
   12a35:	8d 50 04             	lea    0x4(%eax),%edx
   12a38:	89 55 10             	mov    %edx,0x10(%ebp)
   12a3b:	8b 00                	mov    (%eax),%eax
   12a3d:	89 45 ec             	mov    %eax,-0x14(%ebp)
                int len = kernel_strlen(str);
   12a40:	ff 75 ec             	push   -0x14(%ebp)
   12a43:	e8 28 fe ff ff       	call   12870 <kernel_strlen>
   12a48:	83 c4 04             	add    $0x4,%esp
   12a4b:	89 45 e8             	mov    %eax,-0x18(%ebp)
                while (len--) {
   12a4e:	eb 17                	jmp    12a67 <kernel_vsprintf+0x8a>
                    *(curr++) = *(str++);
   12a50:	8b 55 ec             	mov    -0x14(%ebp),%edx
   12a53:	8d 42 01             	lea    0x1(%edx),%eax
   12a56:	89 45 ec             	mov    %eax,-0x14(%ebp)
   12a59:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12a5c:	8d 48 01             	lea    0x1(%eax),%ecx
   12a5f:	89 4d f0             	mov    %ecx,-0x10(%ebp)
   12a62:	0f b6 12             	movzbl (%edx),%edx
   12a65:	88 10                	mov    %dl,(%eax)
                while (len--) {
   12a67:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12a6a:	8d 50 ff             	lea    -0x1(%eax),%edx
   12a6d:	89 55 e8             	mov    %edx,-0x18(%ebp)
   12a70:	85 c0                	test   %eax,%eax
   12a72:	75 dc                	jne    12a50 <kernel_vsprintf+0x73>
   12a74:	e9 da 00 00 00       	jmp    12b53 <kernel_vsprintf+0x176>
                }
            } else if (ch == 'd') {
   12a79:	80 7d e7 64          	cmpb   $0x64,-0x19(%ebp)
   12a7d:	75 37                	jne    12ab6 <kernel_vsprintf+0xd9>
                const int num = va_arg(args, int);
   12a7f:	8b 45 10             	mov    0x10(%ebp),%eax
   12a82:	8d 50 04             	lea    0x4(%eax),%edx
   12a85:	89 55 10             	mov    %edx,0x10(%ebp)
   12a88:	8b 00                	mov    (%eax),%eax
   12a8a:	89 45 d8             	mov    %eax,-0x28(%ebp)
                kernel_itoa(curr, num, 10);
   12a8d:	83 ec 04             	sub    $0x4,%esp
   12a90:	6a 0a                	push   $0xa
   12a92:	ff 75 d8             	push   -0x28(%ebp)
   12a95:	ff 75 f0             	push   -0x10(%ebp)
   12a98:	e8 dd 00 00 00       	call   12b7a <kernel_itoa>
   12a9d:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr);   
   12aa0:	83 ec 0c             	sub    $0xc,%esp
   12aa3:	ff 75 f0             	push   -0x10(%ebp)
   12aa6:	e8 c5 fd ff ff       	call   12870 <kernel_strlen>
   12aab:	83 c4 10             	add    $0x10,%esp
   12aae:	01 45 f0             	add    %eax,-0x10(%ebp)
   12ab1:	e9 9d 00 00 00       	jmp    12b53 <kernel_vsprintf+0x176>
            } else if (ch == 'x' || ch == 'X') {
   12ab6:	80 7d e7 78          	cmpb   $0x78,-0x19(%ebp)
   12aba:	74 06                	je     12ac2 <kernel_vsprintf+0xe5>
   12abc:	80 7d e7 58          	cmpb   $0x58,-0x19(%ebp)
   12ac0:	75 34                	jne    12af6 <kernel_vsprintf+0x119>
                const int num = va_arg(args, int);
   12ac2:	8b 45 10             	mov    0x10(%ebp),%eax
   12ac5:	8d 50 04             	lea    0x4(%eax),%edx
   12ac8:	89 55 10             	mov    %edx,0x10(%ebp)
   12acb:	8b 00                	mov    (%eax),%eax
   12acd:	89 45 dc             	mov    %eax,-0x24(%ebp)
                kernel_itoa(curr, num, 16);
   12ad0:	83 ec 04             	sub    $0x4,%esp
   12ad3:	6a 10                	push   $0x10
   12ad5:	ff 75 dc             	push   -0x24(%ebp)
   12ad8:	ff 75 f0             	push   -0x10(%ebp)
   12adb:	e8 9a 00 00 00       	call   12b7a <kernel_itoa>
   12ae0:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr); 
   12ae3:	83 ec 0c             	sub    $0xc,%esp
   12ae6:	ff 75 f0             	push   -0x10(%ebp)
   12ae9:	e8 82 fd ff ff       	call   12870 <kernel_strlen>
   12aee:	83 c4 10             	add    $0x10,%esp
   12af1:	01 45 f0             	add    %eax,-0x10(%ebp)
            } else if (ch == 'x' || ch == 'X') {
   12af4:	eb 5d                	jmp    12b53 <kernel_vsprintf+0x176>
            } else if (ch == 'b') {
   12af6:	80 7d e7 62          	cmpb   $0x62,-0x19(%ebp)
   12afa:	75 34                	jne    12b30 <kernel_vsprintf+0x153>
                 const int num = va_arg(args, int);
   12afc:	8b 45 10             	mov    0x10(%ebp),%eax
   12aff:	8d 50 04             	lea    0x4(%eax),%edx
   12b02:	89 55 10             	mov    %edx,0x10(%ebp)
   12b05:	8b 00                	mov    (%eax),%eax
   12b07:	89 45 e0             	mov    %eax,-0x20(%ebp)
                kernel_itoa(curr, num, 2);
   12b0a:	83 ec 04             	sub    $0x4,%esp
   12b0d:	6a 02                	push   $0x2
   12b0f:	ff 75 e0             	push   -0x20(%ebp)
   12b12:	ff 75 f0             	push   -0x10(%ebp)
   12b15:	e8 60 00 00 00       	call   12b7a <kernel_itoa>
   12b1a:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr); 
   12b1d:	83 ec 0c             	sub    $0xc,%esp
   12b20:	ff 75 f0             	push   -0x10(%ebp)
   12b23:	e8 48 fd ff ff       	call   12870 <kernel_strlen>
   12b28:	83 c4 10             	add    $0x10,%esp
   12b2b:	01 45 f0             	add    %eax,-0x10(%ebp)
   12b2e:	eb 23                	jmp    12b53 <kernel_vsprintf+0x176>
            } else if (ch == 'c') {
   12b30:	80 7d e7 63          	cmpb   $0x63,-0x19(%ebp)
   12b34:	75 1d                	jne    12b53 <kernel_vsprintf+0x176>
                char c = va_arg(args, int);
   12b36:	8b 45 10             	mov    0x10(%ebp),%eax
   12b39:	8d 50 04             	lea    0x4(%eax),%edx
   12b3c:	89 55 10             	mov    %edx,0x10(%ebp)
   12b3f:	8b 00                	mov    (%eax),%eax
   12b41:	88 45 e6             	mov    %al,-0x1a(%ebp)
                *(curr++) = c;
   12b44:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12b47:	8d 50 01             	lea    0x1(%eax),%edx
   12b4a:	89 55 f0             	mov    %edx,-0x10(%ebp)
   12b4d:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   12b51:	88 10                	mov    %dl,(%eax)
            }
            state = NORMAL;
   12b53:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            break;
   12b5a:	eb 01                	jmp    12b5d <kernel_vsprintf+0x180>
        default:
            break;
   12b5c:	90                   	nop
    while ((ch = *(formate++)) != '\0') {
   12b5d:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b60:	8d 50 01             	lea    0x1(%eax),%edx
   12b63:	89 55 0c             	mov    %edx,0xc(%ebp)
   12b66:	0f b6 00             	movzbl (%eax),%eax
   12b69:	88 45 e7             	mov    %al,-0x19(%ebp)
   12b6c:	80 7d e7 00          	cmpb   $0x0,-0x19(%ebp)
   12b70:	0f 85 7f fe ff ff    	jne    129f5 <kernel_vsprintf+0x18>
        }
    }
    

}
   12b76:	90                   	nop
   12b77:	90                   	nop
   12b78:	c9                   	leave  
   12b79:	c3                   	ret    

00012b7a <kernel_itoa>:
 * 
 * @param buf 缓冲区
 * @param num 整数
 * @param base 转换的进制规则
 */
void kernel_itoa(char *buf, int num, int base) {
   12b7a:	55                   	push   %ebp
   12b7b:	89 e5                	mov    %esp,%ebp
   12b7d:	81 ec 90 00 00 00    	sub    $0x90,%esp
    char * p = buf;
   12b83:	8b 45 08             	mov    0x8(%ebp),%eax
   12b86:	89 45 fc             	mov    %eax,-0x4(%ebp)

    if (base != 2 && base != 8 && base != 10 && base != 16) {
   12b89:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   12b8d:	74 1d                	je     12bac <kernel_itoa+0x32>
   12b8f:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   12b93:	74 17                	je     12bac <kernel_itoa+0x32>
   12b95:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   12b99:	74 11                	je     12bac <kernel_itoa+0x32>
   12b9b:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   12b9f:	74 0b                	je     12bac <kernel_itoa+0x32>
        *buf = '\0';
   12ba1:	8b 45 08             	mov    0x8(%ebp),%eax
   12ba4:	c6 00 00             	movb   $0x0,(%eax)
        return;
   12ba7:	e9 a2 00 00 00       	jmp    12c4e <kernel_itoa+0xd4>
    }

    if(num < 0)  {
   12bac:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12bb0:	79 11                	jns    12bc3 <kernel_itoa+0x49>
        *(p++) = '-';
   12bb2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12bb5:	8d 50 01             	lea    0x1(%eax),%edx
   12bb8:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12bbb:	c6 00 2d             	movb   $0x2d,(%eax)
        num = -num;
   12bbe:	f7 5d 0c             	negl   0xc(%ebp)
   12bc1:	eb 1a                	jmp    12bdd <kernel_itoa+0x63>
    } else if (num == 0) {
   12bc3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12bc7:	75 14                	jne    12bdd <kernel_itoa+0x63>
        *(p++) = '0';
   12bc9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12bcc:	8d 50 01             	lea    0x1(%eax),%edx
   12bcf:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12bd2:	c6 00 30             	movb   $0x30,(%eax)
        *p = '\0';
   12bd5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12bd8:	c6 00 00             	movb   $0x0,(%eax)
        return;
   12bdb:	eb 71                	jmp    12c4e <kernel_itoa+0xd4>
    }
    

    static const char *num_to_char = {"0123456789abcdef"};
    char arr[128];
    int len = 0;
   12bdd:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (num > 0) {
   12be4:	eb 2e                	jmp    12c14 <kernel_itoa+0x9a>
        arr[len++] = num_to_char[num % base];
   12be6:	8b 0d f0 3d 01 00    	mov    0x13df0,%ecx
   12bec:	8b 45 0c             	mov    0xc(%ebp),%eax
   12bef:	99                   	cltd   
   12bf0:	f7 7d 10             	idivl  0x10(%ebp)
   12bf3:	89 d0                	mov    %edx,%eax
   12bf5:	01 c1                	add    %eax,%ecx
   12bf7:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12bfa:	8d 50 01             	lea    0x1(%eax),%edx
   12bfd:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12c00:	0f b6 11             	movzbl (%ecx),%edx
   12c03:	88 94 05 74 ff ff ff 	mov    %dl,-0x8c(%ebp,%eax,1)
        num /= base;
   12c0a:	8b 45 0c             	mov    0xc(%ebp),%eax
   12c0d:	99                   	cltd   
   12c0e:	f7 7d 10             	idivl  0x10(%ebp)
   12c11:	89 45 0c             	mov    %eax,0xc(%ebp)
    while (num > 0) {
   12c14:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12c18:	7f cc                	jg     12be6 <kernel_itoa+0x6c>
    }

    for (int i = len - 1; i >= 0; --i) {
   12c1a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12c1d:	83 e8 01             	sub    $0x1,%eax
   12c20:	89 45 f4             	mov    %eax,-0xc(%ebp)
   12c23:	eb 1d                	jmp    12c42 <kernel_itoa+0xc8>
            *(p++) = arr[i];
   12c25:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12c28:	8d 50 01             	lea    0x1(%eax),%edx
   12c2b:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12c2e:	8d 8d 74 ff ff ff    	lea    -0x8c(%ebp),%ecx
   12c34:	8b 55 f4             	mov    -0xc(%ebp),%edx
   12c37:	01 ca                	add    %ecx,%edx
   12c39:	0f b6 12             	movzbl (%edx),%edx
   12c3c:	88 10                	mov    %dl,(%eax)
    for (int i = len - 1; i >= 0; --i) {
   12c3e:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
   12c42:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12c46:	79 dd                	jns    12c25 <kernel_itoa+0xab>
    }
    *p = '\0';
   12c48:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12c4b:	c6 00 00             	movb   $0x0,(%eax)
   12c4e:	c9                   	leave  
   12c4f:	c3                   	ret    

00012c50 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   12c50:	55                   	push   %ebp
   12c51:	89 e5                	mov    %esp,%ebp
   12c53:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   12c56:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12c5a:	75 19                	jne    12c75 <list_is_empty+0x25>
   12c5c:	68 58 3c 01 00       	push   $0x13c58
   12c61:	68 3c 3d 01 00       	push   $0x13d3c
   12c66:	6a 38                	push   $0x38
   12c68:	68 6c 3c 01 00       	push   $0x13c6c
   12c6d:	e8 80 f7 ff ff       	call   123f2 <pannic>
   12c72:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   12c75:	8b 45 08             	mov    0x8(%ebp),%eax
   12c78:	8b 40 08             	mov    0x8(%eax),%eax
   12c7b:	85 c0                	test   %eax,%eax
   12c7d:	0f 94 c0             	sete   %al
   12c80:	0f b6 c0             	movzbl %al,%eax
}
   12c83:	c9                   	leave  
   12c84:	c3                   	ret    

00012c85 <list_get_size>:
static inline int list_get_size(list_t *list) {
   12c85:	55                   	push   %ebp
   12c86:	89 e5                	mov    %esp,%ebp
   12c88:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   12c8b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12c8f:	75 19                	jne    12caa <list_get_size+0x25>
   12c91:	68 58 3c 01 00       	push   $0x13c58
   12c96:	68 74 3d 01 00       	push   $0x13d74
   12c9b:	6a 3e                	push   $0x3e
   12c9d:	68 6c 3c 01 00       	push   $0x13c6c
   12ca2:	e8 4b f7 ff ff       	call   123f2 <pannic>
   12ca7:	83 c4 10             	add    $0x10,%esp
    return list->size;
   12caa:	8b 45 08             	mov    0x8(%ebp),%eax
   12cad:	8b 40 08             	mov    0x8(%eax),%eax
}
   12cb0:	c9                   	leave  
   12cb1:	c3                   	ret    

00012cb2 <list_insert_first>:
 * 
 */

#include "tools/list.h"

void list_insert_first(list_t *list, list_node_t *node) {
   12cb2:	55                   	push   %ebp
   12cb3:	89 e5                	mov    %esp,%ebp
   12cb5:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   12cb8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12cbc:	74 06                	je     12cc4 <list_insert_first+0x12>
   12cbe:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12cc2:	75 19                	jne    12cdd <list_insert_first+0x2b>
   12cc4:	68 ac 3c 01 00       	push   $0x13cac
   12cc9:	68 28 3d 01 00       	push   $0x13d28
   12cce:	6a 0f                	push   $0xf
   12cd0:	68 dc 3c 01 00       	push   $0x13cdc
   12cd5:	e8 18 f7 ff ff       	call   123f2 <pannic>
   12cda:	83 c4 10             	add    $0x10,%esp

    node->next = list->first;
   12cdd:	8b 45 08             	mov    0x8(%ebp),%eax
   12ce0:	8b 10                	mov    (%eax),%edx
   12ce2:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ce5:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   12ce8:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ceb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   12cf1:	83 ec 0c             	sub    $0xc,%esp
   12cf4:	ff 75 08             	push   0x8(%ebp)
   12cf7:	e8 54 ff ff ff       	call   12c50 <list_is_empty>
   12cfc:	83 c4 10             	add    $0x10,%esp
   12cff:	85 c0                	test   %eax,%eax
   12d01:	74 16                	je     12d19 <list_insert_first+0x67>
        list->first = list->last = node;
   12d03:	8b 45 08             	mov    0x8(%ebp),%eax
   12d06:	8b 55 0c             	mov    0xc(%ebp),%edx
   12d09:	89 50 04             	mov    %edx,0x4(%eax)
   12d0c:	8b 45 08             	mov    0x8(%ebp),%eax
   12d0f:	8b 50 04             	mov    0x4(%eax),%edx
   12d12:	8b 45 08             	mov    0x8(%ebp),%eax
   12d15:	89 10                	mov    %edx,(%eax)
   12d17:	eb 12                	jmp    12d2b <list_insert_first+0x79>
    } else {
        list->first->pre = node;
   12d19:	8b 45 08             	mov    0x8(%ebp),%eax
   12d1c:	8b 00                	mov    (%eax),%eax
   12d1e:	8b 55 0c             	mov    0xc(%ebp),%edx
   12d21:	89 10                	mov    %edx,(%eax)
        list->first = node;
   12d23:	8b 45 08             	mov    0x8(%ebp),%eax
   12d26:	8b 55 0c             	mov    0xc(%ebp),%edx
   12d29:	89 10                	mov    %edx,(%eax)
    }

    list->size++;
   12d2b:	8b 45 08             	mov    0x8(%ebp),%eax
   12d2e:	8b 40 08             	mov    0x8(%eax),%eax
   12d31:	8d 50 01             	lea    0x1(%eax),%edx
   12d34:	8b 45 08             	mov    0x8(%ebp),%eax
   12d37:	89 50 08             	mov    %edx,0x8(%eax)
}
   12d3a:	90                   	nop
   12d3b:	c9                   	leave  
   12d3c:	c3                   	ret    

00012d3d <list_insert_last>:

void list_insert_last(list_t *list, list_node_t *node) {
   12d3d:	55                   	push   %ebp
   12d3e:	89 e5                	mov    %esp,%ebp
   12d40:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   12d43:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12d47:	74 06                	je     12d4f <list_insert_last+0x12>
   12d49:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12d4d:	75 19                	jne    12d68 <list_insert_last+0x2b>
   12d4f:	68 ac 3c 01 00       	push   $0x13cac
   12d54:	68 4c 3d 01 00       	push   $0x13d4c
   12d59:	6a 1f                	push   $0x1f
   12d5b:	68 dc 3c 01 00       	push   $0x13cdc
   12d60:	e8 8d f6 ff ff       	call   123f2 <pannic>
   12d65:	83 c4 10             	add    $0x10,%esp

    node->pre = list->last;
   12d68:	8b 45 08             	mov    0x8(%ebp),%eax
   12d6b:	8b 50 04             	mov    0x4(%eax),%edx
   12d6e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d71:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   12d73:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d76:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)


    if (list_is_empty(list)) {
   12d7d:	83 ec 0c             	sub    $0xc,%esp
   12d80:	ff 75 08             	push   0x8(%ebp)
   12d83:	e8 c8 fe ff ff       	call   12c50 <list_is_empty>
   12d88:	83 c4 10             	add    $0x10,%esp
   12d8b:	85 c0                	test   %eax,%eax
   12d8d:	74 16                	je     12da5 <list_insert_last+0x68>
        list->first = list->last = node;
   12d8f:	8b 45 08             	mov    0x8(%ebp),%eax
   12d92:	8b 55 0c             	mov    0xc(%ebp),%edx
   12d95:	89 50 04             	mov    %edx,0x4(%eax)
   12d98:	8b 45 08             	mov    0x8(%ebp),%eax
   12d9b:	8b 50 04             	mov    0x4(%eax),%edx
   12d9e:	8b 45 08             	mov    0x8(%ebp),%eax
   12da1:	89 10                	mov    %edx,(%eax)
   12da3:	eb 15                	jmp    12dba <list_insert_last+0x7d>
    } else {
        list->last->next = node;
   12da5:	8b 45 08             	mov    0x8(%ebp),%eax
   12da8:	8b 40 04             	mov    0x4(%eax),%eax
   12dab:	8b 55 0c             	mov    0xc(%ebp),%edx
   12dae:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   12db1:	8b 45 08             	mov    0x8(%ebp),%eax
   12db4:	8b 55 0c             	mov    0xc(%ebp),%edx
   12db7:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->size++;
   12dba:	8b 45 08             	mov    0x8(%ebp),%eax
   12dbd:	8b 40 08             	mov    0x8(%eax),%eax
   12dc0:	8d 50 01             	lea    0x1(%eax),%edx
   12dc3:	8b 45 08             	mov    0x8(%ebp),%eax
   12dc6:	89 50 08             	mov    %edx,0x8(%eax)

}
   12dc9:	90                   	nop
   12dca:	c9                   	leave  
   12dcb:	c3                   	ret    

00012dcc <list_remove_first>:

list_node_t* list_remove_first(list_t *list){
   12dcc:	55                   	push   %ebp
   12dcd:	89 e5                	mov    %esp,%ebp
   12dcf:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   12dd2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12dd6:	75 19                	jne    12df1 <list_remove_first+0x25>
   12dd8:	68 12 3d 01 00       	push   $0x13d12
   12ddd:	68 60 3d 01 00       	push   $0x13d60
   12de2:	6a 31                	push   $0x31
   12de4:	68 dc 3c 01 00       	push   $0x13cdc
   12de9:	e8 04 f6 ff ff       	call   123f2 <pannic>
   12dee:	83 c4 10             	add    $0x10,%esp
    if (list_is_empty(list)) {
   12df1:	83 ec 0c             	sub    $0xc,%esp
   12df4:	ff 75 08             	push   0x8(%ebp)
   12df7:	e8 54 fe ff ff       	call   12c50 <list_is_empty>
   12dfc:	83 c4 10             	add    $0x10,%esp
   12dff:	85 c0                	test   %eax,%eax
   12e01:	74 07                	je     12e0a <list_remove_first+0x3e>
        return (list_node_t*)0;
   12e03:	b8 00 00 00 00       	mov    $0x0,%eax
   12e08:	eb 71                	jmp    12e7b <list_remove_first+0xaf>
    }

    list_node_t *ret = list->first;
   12e0a:	8b 45 08             	mov    0x8(%ebp),%eax
   12e0d:	8b 00                	mov    (%eax),%eax
   12e0f:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   12e12:	83 ec 0c             	sub    $0xc,%esp
   12e15:	ff 75 08             	push   0x8(%ebp)
   12e18:	e8 68 fe ff ff       	call   12c85 <list_get_size>
   12e1d:	83 c4 10             	add    $0x10,%esp
   12e20:	83 f8 01             	cmp    $0x1,%eax
   12e23:	75 17                	jne    12e3c <list_remove_first+0x70>
        list->first = list->last = (list_node_t*)0;
   12e25:	8b 45 08             	mov    0x8(%ebp),%eax
   12e28:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12e2f:	8b 45 08             	mov    0x8(%ebp),%eax
   12e32:	8b 50 04             	mov    0x4(%eax),%edx
   12e35:	8b 45 08             	mov    0x8(%ebp),%eax
   12e38:	89 10                	mov    %edx,(%eax)
   12e3a:	eb 18                	jmp    12e54 <list_remove_first+0x88>
    } else {
        list->first = list->first->next;
   12e3c:	8b 45 08             	mov    0x8(%ebp),%eax
   12e3f:	8b 00                	mov    (%eax),%eax
   12e41:	8b 50 04             	mov    0x4(%eax),%edx
   12e44:	8b 45 08             	mov    0x8(%ebp),%eax
   12e47:	89 10                	mov    %edx,(%eax)
        list->first->pre = (list_node_t*)0;
   12e49:	8b 45 08             	mov    0x8(%ebp),%eax
   12e4c:	8b 00                	mov    (%eax),%eax
   12e4e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    list->size--;
   12e54:	8b 45 08             	mov    0x8(%ebp),%eax
   12e57:	8b 40 08             	mov    0x8(%eax),%eax
   12e5a:	8d 50 ff             	lea    -0x1(%eax),%edx
   12e5d:	8b 45 08             	mov    0x8(%ebp),%eax
   12e60:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   12e63:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12e66:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12e6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12e70:	8b 50 04             	mov    0x4(%eax),%edx
   12e73:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12e76:	89 10                	mov    %edx,(%eax)
    return ret;
   12e78:	8b 45 f4             	mov    -0xc(%ebp),%eax
 }
   12e7b:	c9                   	leave  
   12e7c:	c3                   	ret    

00012e7d <list_remove_last>:

list_node_t* list_remove_last(list_t *list) {
   12e7d:	55                   	push   %ebp
   12e7e:	89 e5                	mov    %esp,%ebp
   12e80:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   12e83:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12e87:	75 19                	jne    12ea2 <list_remove_last+0x25>
   12e89:	68 12 3d 01 00       	push   $0x13d12
   12e8e:	68 84 3d 01 00       	push   $0x13d84
   12e93:	6a 46                	push   $0x46
   12e95:	68 dc 3c 01 00       	push   $0x13cdc
   12e9a:	e8 53 f5 ff ff       	call   123f2 <pannic>
   12e9f:	83 c4 10             	add    $0x10,%esp
     if (list_is_empty(list)) {
   12ea2:	83 ec 0c             	sub    $0xc,%esp
   12ea5:	ff 75 08             	push   0x8(%ebp)
   12ea8:	e8 a3 fd ff ff       	call   12c50 <list_is_empty>
   12ead:	83 c4 10             	add    $0x10,%esp
   12eb0:	85 c0                	test   %eax,%eax
   12eb2:	74 07                	je     12ebb <list_remove_last+0x3e>
        return (list_node_t*)0;
   12eb4:	b8 00 00 00 00       	mov    $0x0,%eax
   12eb9:	eb 75                	jmp    12f30 <list_remove_last+0xb3>
    }

    list_node_t *ret = list->last;
   12ebb:	8b 45 08             	mov    0x8(%ebp),%eax
   12ebe:	8b 40 04             	mov    0x4(%eax),%eax
   12ec1:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   12ec4:	83 ec 0c             	sub    $0xc,%esp
   12ec7:	ff 75 08             	push   0x8(%ebp)
   12eca:	e8 b6 fd ff ff       	call   12c85 <list_get_size>
   12ecf:	83 c4 10             	add    $0x10,%esp
   12ed2:	83 f8 01             	cmp    $0x1,%eax
   12ed5:	75 17                	jne    12eee <list_remove_last+0x71>
        list->first = list->last = (list_node_t*)0;
   12ed7:	8b 45 08             	mov    0x8(%ebp),%eax
   12eda:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12ee1:	8b 45 08             	mov    0x8(%ebp),%eax
   12ee4:	8b 50 04             	mov    0x4(%eax),%edx
   12ee7:	8b 45 08             	mov    0x8(%ebp),%eax
   12eea:	89 10                	mov    %edx,(%eax)
   12eec:	eb 1b                	jmp    12f09 <list_remove_last+0x8c>
    } else {
        list->last = list->last->pre;
   12eee:	8b 45 08             	mov    0x8(%ebp),%eax
   12ef1:	8b 40 04             	mov    0x4(%eax),%eax
   12ef4:	8b 10                	mov    (%eax),%edx
   12ef6:	8b 45 08             	mov    0x8(%ebp),%eax
   12ef9:	89 50 04             	mov    %edx,0x4(%eax)
        list->last->next = (list_node_t*)0;
   12efc:	8b 45 08             	mov    0x8(%ebp),%eax
   12eff:	8b 40 04             	mov    0x4(%eax),%eax
   12f02:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    }

    list->size--;
   12f09:	8b 45 08             	mov    0x8(%ebp),%eax
   12f0c:	8b 40 08             	mov    0x8(%eax),%eax
   12f0f:	8d 50 ff             	lea    -0x1(%eax),%edx
   12f12:	8b 45 08             	mov    0x8(%ebp),%eax
   12f15:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   12f18:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12f1b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12f22:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12f25:	8b 50 04             	mov    0x4(%eax),%edx
   12f28:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12f2b:	89 10                	mov    %edx,(%eax)
    return ret;
   12f2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   12f30:	c9                   	leave  
   12f31:	c3                   	ret    

00012f32 <list_remove>:

list_node_t* list_remove(list_t *list, list_node_t *node) {
   12f32:	55                   	push   %ebp
   12f33:	89 e5                	mov    %esp,%ebp
   12f35:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   12f38:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12f3c:	74 06                	je     12f44 <list_remove+0x12>
   12f3e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12f42:	75 19                	jne    12f5d <list_remove+0x2b>
   12f44:	68 ac 3c 01 00       	push   $0x13cac
   12f49:	68 98 3d 01 00       	push   $0x13d98
   12f4e:	6a 5b                	push   $0x5b
   12f50:	68 dc 3c 01 00       	push   $0x13cdc
   12f55:	e8 98 f4 ff ff       	call   123f2 <pannic>
   12f5a:	83 c4 10             	add    $0x10,%esp

    if (list_is_empty(list)) {
   12f5d:	83 ec 0c             	sub    $0xc,%esp
   12f60:	ff 75 08             	push   0x8(%ebp)
   12f63:	e8 e8 fc ff ff       	call   12c50 <list_is_empty>
   12f68:	83 c4 10             	add    $0x10,%esp
   12f6b:	85 c0                	test   %eax,%eax
   12f6d:	74 0a                	je     12f79 <list_remove+0x47>
        return (list_node_t*)0;
   12f6f:	b8 00 00 00 00       	mov    $0x0,%eax
   12f74:	e9 80 00 00 00       	jmp    12ff9 <list_remove+0xc7>
    }

    if (node == list->first) list->first = node->next;
   12f79:	8b 45 08             	mov    0x8(%ebp),%eax
   12f7c:	8b 00                	mov    (%eax),%eax
   12f7e:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12f81:	75 0b                	jne    12f8e <list_remove+0x5c>
   12f83:	8b 45 0c             	mov    0xc(%ebp),%eax
   12f86:	8b 50 04             	mov    0x4(%eax),%edx
   12f89:	8b 45 08             	mov    0x8(%ebp),%eax
   12f8c:	89 10                	mov    %edx,(%eax)
    if (node == list->last) list->last = node->pre;
   12f8e:	8b 45 08             	mov    0x8(%ebp),%eax
   12f91:	8b 40 04             	mov    0x4(%eax),%eax
   12f94:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12f97:	75 0b                	jne    12fa4 <list_remove+0x72>
   12f99:	8b 45 0c             	mov    0xc(%ebp),%eax
   12f9c:	8b 10                	mov    (%eax),%edx
   12f9e:	8b 45 08             	mov    0x8(%ebp),%eax
   12fa1:	89 50 04             	mov    %edx,0x4(%eax)

    if (node->pre) node->pre->next = node->next;
   12fa4:	8b 45 0c             	mov    0xc(%ebp),%eax
   12fa7:	8b 00                	mov    (%eax),%eax
   12fa9:	85 c0                	test   %eax,%eax
   12fab:	74 0e                	je     12fbb <list_remove+0x89>
   12fad:	8b 45 0c             	mov    0xc(%ebp),%eax
   12fb0:	8b 00                	mov    (%eax),%eax
   12fb2:	8b 55 0c             	mov    0xc(%ebp),%edx
   12fb5:	8b 52 04             	mov    0x4(%edx),%edx
   12fb8:	89 50 04             	mov    %edx,0x4(%eax)
    if (node->next) node->next->pre = node->pre;
   12fbb:	8b 45 0c             	mov    0xc(%ebp),%eax
   12fbe:	8b 40 04             	mov    0x4(%eax),%eax
   12fc1:	85 c0                	test   %eax,%eax
   12fc3:	74 0d                	je     12fd2 <list_remove+0xa0>
   12fc5:	8b 45 0c             	mov    0xc(%ebp),%eax
   12fc8:	8b 40 04             	mov    0x4(%eax),%eax
   12fcb:	8b 55 0c             	mov    0xc(%ebp),%edx
   12fce:	8b 12                	mov    (%edx),%edx
   12fd0:	89 10                	mov    %edx,(%eax)

    node->pre = node->next = (list_node_t*)0;
   12fd2:	8b 45 0c             	mov    0xc(%ebp),%eax
   12fd5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12fdc:	8b 45 0c             	mov    0xc(%ebp),%eax
   12fdf:	8b 50 04             	mov    0x4(%eax),%edx
   12fe2:	8b 45 0c             	mov    0xc(%ebp),%eax
   12fe5:	89 10                	mov    %edx,(%eax)
    list->size--;
   12fe7:	8b 45 08             	mov    0x8(%ebp),%eax
   12fea:	8b 40 08             	mov    0x8(%eax),%eax
   12fed:	8d 50 ff             	lea    -0x1(%eax),%edx
   12ff0:	8b 45 08             	mov    0x8(%ebp),%eax
   12ff3:	89 50 08             	mov    %edx,0x8(%eax)

    return node;
   12ff6:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ff9:	c9                   	leave  
   12ffa:	c3                   	ret    

00012ffb <inb>:
static inline uint8_t inb(uint16_t port) {
   12ffb:	55                   	push   %ebp
   12ffc:	89 e5                	mov    %esp,%ebp
   12ffe:	83 ec 14             	sub    $0x14,%esp
   13001:	8b 45 08             	mov    0x8(%ebp),%eax
   13004:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   13008:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1300c:	89 c2                	mov    %eax,%edx
   1300e:	ec                   	in     (%dx),%al
   1300f:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   13012:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   13016:	c9                   	leave  
   13017:	c3                   	ret    

00013018 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   13018:	55                   	push   %ebp
   13019:	89 e5                	mov    %esp,%ebp
   1301b:	83 ec 08             	sub    $0x8,%esp
   1301e:	8b 45 08             	mov    0x8(%ebp),%eax
   13021:	8b 55 0c             	mov    0xc(%ebp),%edx
   13024:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   13028:	89 d0                	mov    %edx,%eax
   1302a:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   1302d:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   13031:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   13035:	ee                   	out    %al,(%dx)
}
   13036:	90                   	nop
   13037:	c9                   	leave  
   13038:	c3                   	ret    

00013039 <log_init>:

/**
 * @brief  初始化串行端口寄存器COM1
 * 
 */
void log_init(void) {
   13039:	55                   	push   %ebp
   1303a:	89 e5                	mov    %esp,%ebp
   1303c:	83 ec 08             	sub    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   1303f:	6a 00                	push   $0x0
   13041:	68 f9 03 00 00       	push   $0x3f9
   13046:	e8 cd ff ff ff       	call   13018 <outb>
   1304b:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   1304e:	68 80 00 00 00       	push   $0x80
   13053:	68 fb 03 00 00       	push   $0x3fb
   13058:	e8 bb ff ff ff       	call   13018 <outb>
   1305d:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   13060:	6a 03                	push   $0x3
   13062:	68 f8 03 00 00       	push   $0x3f8
   13067:	e8 ac ff ff ff       	call   13018 <outb>
   1306c:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   1306f:	6a 00                	push   $0x0
   13071:	68 f9 03 00 00       	push   $0x3f9
   13076:	e8 9d ff ff ff       	call   13018 <outb>
   1307b:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   1307e:	6a 03                	push   $0x3
   13080:	68 fb 03 00 00       	push   $0x3fb
   13085:	e8 8e ff ff ff       	call   13018 <outb>
   1308a:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0xc7);
   1308d:	68 c7 00 00 00       	push   $0xc7
   13092:	68 fa 03 00 00       	push   $0x3fa
   13097:	e8 7c ff ff ff       	call   13018 <outb>
   1309c:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0f);
   1309f:	6a 0f                	push   $0xf
   130a1:	68 fc 03 00 00       	push   $0x3fc
   130a6:	e8 6d ff ff ff       	call   13018 <outb>
   130ab:	83 c4 08             	add    $0x8,%esp

    //初始化互斥锁
    mutex_init(&mutex);
   130ae:	83 ec 0c             	sub    $0xc,%esp
   130b1:	68 70 0d 03 00       	push   $0x30d70
   130b6:	e8 22 ec ff ff       	call   11cdd <mutex_init>
   130bb:	83 c4 10             	add    $0x10,%esp
}
   130be:	90                   	nop
   130bf:	c9                   	leave  
   130c0:	c3                   	ret    

000130c1 <log_printf>:
 * @brief  格式化输出到串口
 * 
 * @param formate 
 * @param ... 
 */
void log_printf(const char *formate, ...) {
   130c1:	55                   	push   %ebp
   130c2:	89 e5                	mov    %esp,%ebp
   130c4:	81 ec 98 00 00 00    	sub    $0x98,%esp
    //1.设置字符缓冲区
    char str_buf[128];
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   130ca:	83 ec 04             	sub    $0x4,%esp
   130cd:	68 80 00 00 00       	push   $0x80
   130d2:	6a 00                	push   $0x0
   130d4:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   130da:	50                   	push   %eax
   130db:	e8 14 f8 ff ff       	call   128f4 <kernel_memset>
   130e0:	83 c4 10             	add    $0x10,%esp
    
    //2.获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   130e3:	8d 45 0c             	lea    0xc(%ebp),%eax
   130e6:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, formate, args);
   130ec:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   130f2:	83 ec 04             	sub    $0x4,%esp
   130f5:	50                   	push   %eax
   130f6:	ff 75 08             	push   0x8(%ebp)
   130f9:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   130ff:	50                   	push   %eax
   13100:	e8 d8 f8 ff ff       	call   129dd <kernel_vsprintf>
   13105:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    const char *p = str_buf;
   13108:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   1310e:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将以下资源放入临界资源包含区，防止在运行时发生进程切换（cpu关中断）
    mutex_lock(&mutex); //TODO:加锁
   13111:	83 ec 0c             	sub    $0xc,%esp
   13114:	68 70 0d 03 00       	push   $0x30d70
   13119:	e8 0c ec ff ff       	call   11d2a <mutex_lock>
   1311e:	83 c4 10             	add    $0x10,%esp

    //3.将字符串输出到串口
    while (*p != '\0') {
   13121:	eb 57                	jmp    1317a <log_printf+0xb9>
        //4.判断串口是否正在忙碌，是则阻塞等待
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0);
   13123:	90                   	nop
   13124:	83 ec 0c             	sub    $0xc,%esp
   13127:	68 fd 03 00 00       	push   $0x3fd
   1312c:	e8 ca fe ff ff       	call   12ffb <inb>
   13131:	83 c4 10             	add    $0x10,%esp
   13134:	0f b6 c0             	movzbl %al,%eax
   13137:	83 e0 40             	and    $0x40,%eax
   1313a:	85 c0                	test   %eax,%eax
   1313c:	74 e6                	je     13124 <log_printf+0x63>

        if (*p == '\n') outb(COM1_PORT, '\r');
   1313e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13141:	0f b6 00             	movzbl (%eax),%eax
   13144:	3c 0a                	cmp    $0xa,%al
   13146:	75 12                	jne    1315a <log_printf+0x99>
   13148:	83 ec 08             	sub    $0x8,%esp
   1314b:	6a 0d                	push   $0xd
   1314d:	68 f8 03 00 00       	push   $0x3f8
   13152:	e8 c1 fe ff ff       	call   13018 <outb>
   13157:	83 c4 10             	add    $0x10,%esp
        
        outb(COM1_PORT, *(p++));
   1315a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1315d:	8d 50 01             	lea    0x1(%eax),%edx
   13160:	89 55 f4             	mov    %edx,-0xc(%ebp)
   13163:	0f b6 00             	movzbl (%eax),%eax
   13166:	0f b6 c0             	movzbl %al,%eax
   13169:	83 ec 08             	sub    $0x8,%esp
   1316c:	50                   	push   %eax
   1316d:	68 f8 03 00 00       	push   $0x3f8
   13172:	e8 a1 fe ff ff       	call   13018 <outb>
   13177:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0') {
   1317a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1317d:	0f b6 00             	movzbl (%eax),%eax
   13180:	84 c0                	test   %al,%al
   13182:	75 9f                	jne    13123 <log_printf+0x62>
    }
    
    //5.换行
    outb(COM1_PORT, '\r');
   13184:	83 ec 08             	sub    $0x8,%esp
   13187:	6a 0d                	push   $0xd
   13189:	68 f8 03 00 00       	push   $0x3f8
   1318e:	e8 85 fe ff ff       	call   13018 <outb>
   13193:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   13196:	83 ec 08             	sub    $0x8,%esp
   13199:	6a 0a                	push   $0xa
   1319b:	68 f8 03 00 00       	push   $0x3f8
   131a0:	e8 73 fe ff ff       	call   13018 <outb>
   131a5:	83 c4 10             	add    $0x10,%esp

    //执行完毕，将资源离开临界资源保护区，(cpu开中断)
    mutex_unlock(&mutex); //TODO:解锁
   131a8:	83 ec 0c             	sub    $0xc,%esp
   131ab:	68 70 0d 03 00       	push   $0x30d70
   131b0:	e8 06 ec ff ff       	call   11dbb <mutex_unlock>
   131b5:	83 c4 10             	add    $0x10,%esp
   131b8:	90                   	nop
   131b9:	c9                   	leave  
   131ba:	c3                   	ret    
