
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf:     file format elf32-i386
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00003f88 memsz 0x00003f88 flags r-x
    LOAD off    0x00005000 vaddr 0x00014000 paddr 0x00014000 align 2**12
         filesz 0x00000044 memsz 0x0001dbe0 flags rw-
    LOAD off    0x00006000 vaddr 0x80000000 paddr 0x00032000 align 2**12
         filesz 0x00000054 memsz 0x00000054 flags rwx
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003394  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000bf4  00013394  00013394  00004394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000044  00014000  00014000  00005000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0001cbe0  00015000  00015000  00005044  2**12
                  ALLOC
  4 .first_task   00000054  80000000  00032000  00006000  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  5 .debug_line   00001ce0  00000000  00000000  00006054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_line_str 000006d7  00000000  00000000  00007d34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   00005104  00000000  00000000  0000840b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00001907  00000000  00000000  0000d50f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_aranges 00000220  00000000  00000000  0000ee18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    0000116c  00000000  00000000  0000f038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .comment      0000002b  00000000  00000000  000101a4  2**0
                  CONTENTS, READONLY
 12 .debug_frame  000013b8  00000000  00000000  000101d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010012 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
000102ad l     F .text	0000000d down2
000102ba l     F .text	00000017 up2
000102d1 l     F .text	0000000c write_cr3
000102dd l     F .text	0000000b pde_index
000102e8 l     F .text	00000010 pte_index
000102f8 l     F .text	00000027 pde_to_pt_addr
0001031f l     F .text	00000011 mmu_set_page_dir
00015000 l     O .bss	00000028 paddr_alloc
00016000 l     O .bss	00001000 kernel_page_dir
00010330 l     F .text	0000005d addr_alloc_init
0001038d l     F .text	00000067 addr_alloc_page
000103f4 l     F .text	00000061 addr_free_page
00010455 l     F .text	00000066 show_mem_info
000104bb l     F .text	00000037 total_mem_size
000134b8 l     O .rodata	00000011 __func__.2
00014000 l     O .data	00000040 kernal_map.1
000134cc l     O .rodata	0000000c __func__.0
00000000 l    df *ABS*	00000000 task.c
00010939 l     F .text	0000003d list_node_init
000135c4 l     O .rodata	0000000f __func__.10
00010976 l     F .text	0000002d list_node_next
00013634 l     O .rodata	0000000f __func__.3
000109a3 l     F .text	00000047 list_init
000135d4 l     O .rodata	0000000a __func__.9
000109ea l     F .text	00000035 list_is_empty
00013644 l     O .rodata	0000000e __func__.2
00010a1f l     F .text	0000002d list_get_size
00013624 l     O .rodata	0000000e __func__.4
00010a4c l     F .text	0000002c list_get_first
00013614 l     O .rodata	0000000f __func__.5
00010a78 l     F .text	00000017 up2
00010a8f l     F .text	00000007 hlt
00010a96 l     F .text	0000000c write_cr3
00010aa2 l     F .text	0000001a far_jump
00010abc l     F .text	00000017 write_tr
00010ad3 l     F .text	00000011 mmu_set_page_dir
00017000 l     O .bss	00000198 task_manager
00010ae4 l     F .text	0000001f switch_to_tss
00010b1e l     F .text	0000011b tss_init
000135b8 l     O .rodata	0000000a __func__.11
000171a0 l     O .bss	00000200 empty_task_stack
00010d1d l     F .text	0000000a empty_task
000135e0 l     O .rodata	00000010 __func__.8
000135f0 l     O .rodata	0000000f __func__.7
00013600 l     O .rodata	00000011 __func__.6
00013654 l     O .rodata	0000000f __func__.1
00013664 l     O .rodata	00000010 __func__.0
00000000 l    df *ABS*	00000000 gdt.c
00011275 l     F .text	00000028 lgdt
000173a0 l     O .bss	00010000 gdt_table
000273a0 l     O .bss	00008000 is_alloc
0002f3a0 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 idt.c
00011467 l     F .text	00000007 cli
0001146e l     F .text	00000007 sti
00011475 l     F .text	00000007 hlt
0001147c l     F .text	0000001d inb
00011499 l     F .text	00000021 outb
000114ba l     F .text	00000028 lidt
000114e2 l     F .text	00000010 read_eflags
000114f2 l     F .text	0000000b write_eflags
0002f3c0 l     O .bss	00000800 idt_table
000114fd l     F .text	000000e9 print_exception_fram
000115e6 l     F .text	0000003e do_default_handler
00011870 l     F .text	00000047 gate_desc_set
000118f7 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 mmu.c
00000000 l    df *ABS*	00000000 time.c
00011ca1 l     F .text	00000021 outb
0002fbc0 l     O .bss	00000004 sys_tick
00011cea l     F .text	00000062 init_pit
00000000 l    df *ABS*	00000000 init.c
00013a44 l     O .rodata	0000000c __func__.1
00013a50 l     O .rodata	00000013 __func__.0
00000000 l    df *ABS*	00000000 mutex.c
00011e3a l     F .text	00000047 list_init
00013b10 l     O .rodata	0000000a __func__.1
00011e81 l     F .text	00000035 list_is_empty
00013b1c l     O .rodata	0000000e __func__.0
00013b04 l     O .rodata	0000000b __func__.2
00000000 l    df *ABS*	00000000 sem.c
0001204c l     F .text	00000047 list_init
00013bd0 l     O .rodata	0000000a __func__.1
00012093 l     F .text	00000035 list_is_empty
00013bdc l     O .rodata	0000000e __func__.0
00013bc4 l     O .rodata	00000009 __func__.2
00000000 l    df *ABS*	00000000 test.c
0001221c l     F .text	00000047 list_init
00013cf0 l     O .rodata	0000000a __func__.3
00012263 l     F .text	0000002d list_get_size
00013cfc l     O .rodata	0000000e __func__.2
00012290 l     F .text	0000002c list_get_first
00013d1c l     O .rodata	0000000f __func__.0
000122bc l     F .text	0000002d list_get_last
00013d0c l     O .rodata	0000000e __func__.1
00000000 l    df *ABS*	00000000 assert.c
000125c4 l     F .text	00000007 hlt
00000000 l    df *ABS*	00000000 bitmap.c
00013dec l     O .rodata	0000000c __func__.3
00013df8 l     O .rodata	0000000f __func__.2
00013e08 l     O .rodata	0000000f __func__.1
00013e18 l     O .rodata	00000013 __func__.0
00000000 l    df *ABS*	00000000 klib.c
00014040 l     O .data	00000004 num_to_char.0
00000000 l    df *ABS*	00000000 list.c
00012e29 l     F .text	00000035 list_is_empty
00013f20 l     O .rodata	0000000e __func__.5
00012e5e l     F .text	0000002d list_get_size
00013f58 l     O .rodata	0000000e __func__.2
00013f0c l     O .rodata	00000012 __func__.6
00013f30 l     O .rodata	00000011 __func__.4
00013f44 l     O .rodata	00000012 __func__.3
00013f68 l     O .rodata	00000011 __func__.1
00013f7c l     O .rodata	0000000c __func__.0
00000000 l    df *ABS*	00000000 log.c
000131d4 l     F .text	0000001d inb
000131f1 l     F .text	00000021 outb
0002fbc4 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 first_task.c
000126ab g     F .text	00000078 bitmap_get_bit
00012a7e g     F .text	0000004f kernel_memcpy
00011afd g     F .text	00000098 idt_enable
00010f90 g     F .text	0000000a task_current
00012f16 g     F .text	0000008f list_insert_last
00011002 g     F .text	00000061 sys_yield
00011758 g     F .text	0000001c do_handler_segment_not_present
00010ecc g     F .text	0000004b task_set_ready
0001282b g     F .text	00000021 bitmap_is_set
00011c34 g     F .text	0000000b idt_enable_global
00012acd g     F .text	00000041 kernel_memset
00010081 g       .text	00000000 exception_handler_nmi
00010243 g       .text	00000000 exception_handler_virtual_exception
00013212 g     F .text	00000088 log_init
00011df8 g     F .text	00000042 init_main
000101ee g       .text	00000000 exception_handler_alignment_check
00012947 g     F .text	00000047 kernel_strcpy
00011c29 g     F .text	0000000b idt_disable_global
00014000 g       .data	00000000 s_data
80000010 g     F .first_task	00000038 first_main
000118b7 g     F .text	00000040 idt_install
0001002a g       .text	00000000 exception_handler_unknown
0001009e g       .text	00000000 exception_handler_breakpoint
000116b0 g     F .text	0000001c do_handler_overflow
000117e4 g     F .text	0000001c do_handler_alignment_check
0001019b g       .text	00000000 exception_handler_general_protection
00011790 g     F .text	0000001c do_handler_general_protection
00011854 g     F .text	0000001c do_handler_control_exception
000121f3 g     F .text	00000029 sem_count
00011640 g     F .text	0000001c do_handler_divider
00012723 g     F .text	00000108 bitmap_set_bit
00011720 g     F .text	0000001c do_handler_double_fault
000117ac g     F .text	0000001c do_handler_page_fault
0001012f g       .text	00000000 exception_handler_double_fault
00011c3f g     F .text	00000039 pic_send_eoi
00013056 g     F .text	000000b5 list_remove_last
00010ec2 g     F .text	0000000a task_first_task
00010000 g       .text	00000000 s_text
0001210b g     F .text	0000006b sem_wait
00010917 g     F .text	00000022 memory_alloc_page_for
00010180 g       .text	00000000 exception_handler_stack_segment_fault
80000000 g       .first_task	00000000 first_task_entry
0001135c g     F .text	00000094 gdt_init
00011838 g     F .text	0000001c do_handler_virtual_exception
000100bb g       .text	00000000 exception_handler_overflow
00010298 g       .text	00000000 simple_switch
0001027b g       .text	00000000 exception_handler_time
0001165c g     F .text	0000001c do_handler_debug
0002fbe0 g     O .bss	00002000 stack
00011215 g     F .text	00000060 sys_sleep
000122e9 g     F .text	000002db list_test
00010260 g       .text	00000000 exception_handler_control_exception
00032000 g       *ABS*	00000000 s_first_task
0001085f g     F .text	000000b8 memory_alloc_for_page_dir
000100d8 g       .text	00000000 exception_handler_bound_range
0001198a g     F .text	00000173 idt_init
00012176 g     F .text	0000007d sem_notify
000116e8 g     F .text	0000001c do_handler_invalid_opcode
0001014a g       .text	00000000 exception_handler_invalid_tss
000117c8 g     F .text	0000001c do_handler_fpu_error
00010df2 g     F .text	000000d0 task_first_init
00011800 g     F .text	0000001c do_handler_machine_check
00012e8b g     F .text	0000008b list_insert_first
000111ca g     F .text	0000004b task_set_wakeup
00010f62 g     F .text	0000002e task_ready_first
00010047 g       .text	00000000 exception_handler_divider
000106e1 g     F .text	00000085 memory_creat_uvm
0001298e g     F .text	00000051 kernel_strncpy
00032054 g       *ABS*	00000000 mem_free_start
00011d64 g     F .text	00000053 kernel_init
000120c8 g     F .text	00000043 sem_init
00010000 g       .text	00000000 _start
00012bb6 g     F .text	0000019d kernel_vsprintf
00010112 g       .text	00000000 exception_handler_device_unavailable
000100f5 g       .text	00000000 exception_handler_invalid_opcode
00032000 g       .first_task	00000000 e_data
00011f03 g     F .text	00000091 mutex_lock
00010209 g       .text	00000000 exception_handler_machine_check
0001173c g     F .text	0000001c do_handler_invalid_tss
00011b95 g     F .text	00000094 idt_disable
00032054 g       *ABS*	00000000 e_first_task
0001116e g     F .text	0000005c task_set_sleep
000105a2 g     F .text	0000009b memory_creat_map
00011678 g     F .text	0000001c do_handler_nmi
00011eb6 g     F .text	0000004d mutex_init
00010226 g       .text	00000000 exception_handler_smd_exception
00012601 g     F .text	00000016 bitmap_byte_count
00011704 g     F .text	0000001c do_handler_device_unavailable
00011c78 g     F .text	00000018 idt_enter_protection
0001063d g     F .text	000000a4 create_kernal_table
00011063 g     F .text	0000010b task_slice_end
00011db7 g     F .text	00000041 move_to_first_task
00012b0e g     F .text	00000084 kernel_memcmp
0001181c g     F .text	0000001c do_handler_smd_exception
000101b6 g       .text	00000000 exception_handler_page_fault
00011624 g     F .text	0000001c do_handler_unknown
000101d1 g       .text	00000000 exception_handler_fpu_error
00010b03 g     F .text	0000001b task_switch_from_to
00011f94 g     F .text	000000b8 mutex_unlock
00010f9a g     F .text	00000068 task_switch
00012a49 g     F .text	00000035 kernel_strlen
00010f17 g     F .text	0000004b task_set_unready
00010064 g       .text	00000000 exception_handler_debug
0001129d g     F .text	000000bf segment_desc_set
000116cc g     F .text	0000001c do_handler_bound_range
00012fa5 g     F .text	000000b1 list_remove_first
00013f88 g       .rodata	00000000 e_text
000129df g     F .text	0000006a kernel_strncmp
00012617 g     F .text	00000094 bitmap_init
00010165 g       .text	00000000 exception_handler_segment_not_present
0001284c g     F .text	000000fb bitmap_alloc_nbits
00010d27 g     F .text	000000cb task_manager_init
00010766 g     F .text	000000f9 memory_init
000125cb g     F .text	00000036 pannic
00011774 g     F .text	0000001c do_handler_stack_segment_fault
00011694 g     F .text	0000001c do_handler_breakpoint
0001329a g     F .text	000000fa log_printf
00010c39 g     F .text	000000e4 task_init
00012b92 g     F .text	00000024 kernel_sprintf
000113f0 g     F .text	00000077 gdt_alloc_desc
00012d53 g     F .text	000000d6 kernel_itoa
0001310b g     F .text	000000c9 list_remove
00011c90 g     F .text	00000011 idt_leave_protection
000104f2 g     F .text	000000b0 find_pte
00011cc2 g     F .text	00000028 do_handler_time
00011d4c g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
*            [&boot_info]
*    esp ->  [返回地址]
*   所以要想访问到&boot_info，则只需从当前esp的位置偏移+4字节即可
*/
_start:
    mov %esp, %ebp      //栈空间最好只用ebp来进行偏移访问
   10000:	89 e5                	mov    %esp,%ebp
    mov 0x4(%ebp), %eax //将&boot_info的值存入eax中
   10002:	8b 45 04             	mov    0x4(%ebp),%eax

    push %eax           //外部函数将参数压入栈中，再进行函数调用
   10005:	50                   	push   %eax
    call kernel_init    //调用内核初始化函数
   10006:	e8 59 1d 00 00       	call   11d64 <kernel_init>

    //完成内核初始化后，进行直接跳转，以替换cs寄存器中临时的内核代码段的选择子为此时内存中真正的内核代码段选择子
    //cs:KERNEL_SELECTOR_CS, ip:gdt_reload
    jmp $KERNEL_SELECTOR_CS, $gdt_reload    
   1000b:	ea 12 00 01 00 08 00 	ljmp   $0x8,$0x10012

00010012 <gdt_reload>:

gdt_reload:
    //替换其他段寄存器中临时的内核数据段的选择子为此时内存中真正的内核数据段的选择子
    mov $KERNEL_SELECTOR_DS, %ax
   10012:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10016:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10018:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001a:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001c:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001e:	8e e8                	mov    %eax,%gs

    //重新指定栈空间位置，不再使用0~0x7c00这部分空间
    //stack段已在下面预留了KERNEL_STACK_SIZE的空间大小，直接将最高地址赋值给esp，esp便可使用这片空间
    mov $(stack + KERNEL_STACK_SIZE), %esp
   10020:	bc e0 1b 03 00       	mov    $0x31be0,%esp

    //继续初始化内核
    //TODO:后序再来说明该函数的作用
    jmp init_main 
   10025:	e9 ce 1d 00 00       	jmp    11df8 <init_main>

0001002a <exception_handler_unknown>:
//宏结束标志
.endm

//使用定义的异常宏 
//                |异常类型|       |IDT索引| |错误码|
exception_handler unknown,              -1, 0    //未知异常
   1002a:	6a 00                	push   $0x0
   1002c:	6a ff                	push   $0xffffffff
   1002e:	60                   	pusha  
   1002f:	1e                   	push   %ds
   10030:	06                   	push   %es
   10031:	0f a0                	push   %fs
   10033:	0f a8                	push   %gs
   10035:	54                   	push   %esp
   10036:	e8 e9 15 00 00       	call   11624 <do_handler_unknown>
   1003b:	5c                   	pop    %esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider,              0,  0    //除0异常
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 e8 15 00 00       	call   11640 <do_handler_divider>
   10058:	5c                   	pop    %esp
   10059:	0f a9                	pop    %gs
   1005b:	0f a1                	pop    %fs
   1005d:	07                   	pop    %es
   1005e:	1f                   	pop    %ds
   1005f:	61                   	popa   
   10060:	83 c4 08             	add    $0x8,%esp
   10063:	cf                   	iret   

00010064 <exception_handler_debug>:
exception_handler debug,                1,  0    //debug异常
   10064:	6a 00                	push   $0x0
   10066:	6a 01                	push   $0x1
   10068:	60                   	pusha  
   10069:	1e                   	push   %ds
   1006a:	06                   	push   %es
   1006b:	0f a0                	push   %fs
   1006d:	0f a8                	push   %gs
   1006f:	54                   	push   %esp
   10070:	e8 e7 15 00 00       	call   1165c <do_handler_debug>
   10075:	5c                   	pop    %esp
   10076:	0f a9                	pop    %gs
   10078:	0f a1                	pop    %fs
   1007a:	07                   	pop    %es
   1007b:	1f                   	pop    %ds
   1007c:	61                   	popa   
   1007d:	83 c4 08             	add    $0x8,%esp
   10080:	cf                   	iret   

00010081 <exception_handler_nmi>:
exception_handler nmi,                  2,  0
   10081:	6a 00                	push   $0x0
   10083:	6a 02                	push   $0x2
   10085:	60                   	pusha  
   10086:	1e                   	push   %ds
   10087:	06                   	push   %es
   10088:	0f a0                	push   %fs
   1008a:	0f a8                	push   %gs
   1008c:	54                   	push   %esp
   1008d:	e8 e6 15 00 00       	call   11678 <do_handler_nmi>
   10092:	5c                   	pop    %esp
   10093:	0f a9                	pop    %gs
   10095:	0f a1                	pop    %fs
   10097:	07                   	pop    %es
   10098:	1f                   	pop    %ds
   10099:	61                   	popa   
   1009a:	83 c4 08             	add    $0x8,%esp
   1009d:	cf                   	iret   

0001009e <exception_handler_breakpoint>:
exception_handler breakpoint,           3,  0
   1009e:	6a 00                	push   $0x0
   100a0:	6a 03                	push   $0x3
   100a2:	60                   	pusha  
   100a3:	1e                   	push   %ds
   100a4:	06                   	push   %es
   100a5:	0f a0                	push   %fs
   100a7:	0f a8                	push   %gs
   100a9:	54                   	push   %esp
   100aa:	e8 e5 15 00 00       	call   11694 <do_handler_breakpoint>
   100af:	5c                   	pop    %esp
   100b0:	0f a9                	pop    %gs
   100b2:	0f a1                	pop    %fs
   100b4:	07                   	pop    %es
   100b5:	1f                   	pop    %ds
   100b6:	61                   	popa   
   100b7:	83 c4 08             	add    $0x8,%esp
   100ba:	cf                   	iret   

000100bb <exception_handler_overflow>:
exception_handler overflow,             4,  0
   100bb:	6a 00                	push   $0x0
   100bd:	6a 04                	push   $0x4
   100bf:	60                   	pusha  
   100c0:	1e                   	push   %ds
   100c1:	06                   	push   %es
   100c2:	0f a0                	push   %fs
   100c4:	0f a8                	push   %gs
   100c6:	54                   	push   %esp
   100c7:	e8 e4 15 00 00       	call   116b0 <do_handler_overflow>
   100cc:	5c                   	pop    %esp
   100cd:	0f a9                	pop    %gs
   100cf:	0f a1                	pop    %fs
   100d1:	07                   	pop    %es
   100d2:	1f                   	pop    %ds
   100d3:	61                   	popa   
   100d4:	83 c4 08             	add    $0x8,%esp
   100d7:	cf                   	iret   

000100d8 <exception_handler_bound_range>:
exception_handler bound_range,          5,  0
   100d8:	6a 00                	push   $0x0
   100da:	6a 05                	push   $0x5
   100dc:	60                   	pusha  
   100dd:	1e                   	push   %ds
   100de:	06                   	push   %es
   100df:	0f a0                	push   %fs
   100e1:	0f a8                	push   %gs
   100e3:	54                   	push   %esp
   100e4:	e8 e3 15 00 00       	call   116cc <do_handler_bound_range>
   100e9:	5c                   	pop    %esp
   100ea:	0f a9                	pop    %gs
   100ec:	0f a1                	pop    %fs
   100ee:	07                   	pop    %es
   100ef:	1f                   	pop    %ds
   100f0:	61                   	popa   
   100f1:	83 c4 08             	add    $0x8,%esp
   100f4:	cf                   	iret   

000100f5 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode,       6,  0
   100f5:	6a 00                	push   $0x0
   100f7:	6a 06                	push   $0x6
   100f9:	60                   	pusha  
   100fa:	1e                   	push   %ds
   100fb:	06                   	push   %es
   100fc:	0f a0                	push   %fs
   100fe:	0f a8                	push   %gs
   10100:	54                   	push   %esp
   10101:	e8 e2 15 00 00       	call   116e8 <do_handler_invalid_opcode>
   10106:	5c                   	pop    %esp
   10107:	0f a9                	pop    %gs
   10109:	0f a1                	pop    %fs
   1010b:	07                   	pop    %es
   1010c:	1f                   	pop    %ds
   1010d:	61                   	popa   
   1010e:	83 c4 08             	add    $0x8,%esp
   10111:	cf                   	iret   

00010112 <exception_handler_device_unavailable>:
exception_handler device_unavailable,   7,  0
   10112:	6a 00                	push   $0x0
   10114:	6a 07                	push   $0x7
   10116:	60                   	pusha  
   10117:	1e                   	push   %ds
   10118:	06                   	push   %es
   10119:	0f a0                	push   %fs
   1011b:	0f a8                	push   %gs
   1011d:	54                   	push   %esp
   1011e:	e8 e1 15 00 00       	call   11704 <do_handler_device_unavailable>
   10123:	5c                   	pop    %esp
   10124:	0f a9                	pop    %gs
   10126:	0f a1                	pop    %fs
   10128:	07                   	pop    %es
   10129:	1f                   	pop    %ds
   1012a:	61                   	popa   
   1012b:	83 c4 08             	add    $0x8,%esp
   1012e:	cf                   	iret   

0001012f <exception_handler_double_fault>:
exception_handler double_fault,         8,  1
   1012f:	6a 08                	push   $0x8
   10131:	60                   	pusha  
   10132:	1e                   	push   %ds
   10133:	06                   	push   %es
   10134:	0f a0                	push   %fs
   10136:	0f a8                	push   %gs
   10138:	54                   	push   %esp
   10139:	e8 e2 15 00 00       	call   11720 <do_handler_double_fault>
   1013e:	5c                   	pop    %esp
   1013f:	0f a9                	pop    %gs
   10141:	0f a1                	pop    %fs
   10143:	07                   	pop    %es
   10144:	1f                   	pop    %ds
   10145:	61                   	popa   
   10146:	83 c4 08             	add    $0x8,%esp
   10149:	cf                   	iret   

0001014a <exception_handler_invalid_tss>:
exception_handler invalid_tss,          10, 1
   1014a:	6a 0a                	push   $0xa
   1014c:	60                   	pusha  
   1014d:	1e                   	push   %ds
   1014e:	06                   	push   %es
   1014f:	0f a0                	push   %fs
   10151:	0f a8                	push   %gs
   10153:	54                   	push   %esp
   10154:	e8 e3 15 00 00       	call   1173c <do_handler_invalid_tss>
   10159:	5c                   	pop    %esp
   1015a:	0f a9                	pop    %gs
   1015c:	0f a1                	pop    %fs
   1015e:	07                   	pop    %es
   1015f:	1f                   	pop    %ds
   10160:	61                   	popa   
   10161:	83 c4 08             	add    $0x8,%esp
   10164:	cf                   	iret   

00010165 <exception_handler_segment_not_present>:
exception_handler segment_not_present,  11, 1
   10165:	6a 0b                	push   $0xb
   10167:	60                   	pusha  
   10168:	1e                   	push   %ds
   10169:	06                   	push   %es
   1016a:	0f a0                	push   %fs
   1016c:	0f a8                	push   %gs
   1016e:	54                   	push   %esp
   1016f:	e8 e4 15 00 00       	call   11758 <do_handler_segment_not_present>
   10174:	5c                   	pop    %esp
   10175:	0f a9                	pop    %gs
   10177:	0f a1                	pop    %fs
   10179:	07                   	pop    %es
   1017a:	1f                   	pop    %ds
   1017b:	61                   	popa   
   1017c:	83 c4 08             	add    $0x8,%esp
   1017f:	cf                   	iret   

00010180 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,  12, 1
   10180:	6a 0c                	push   $0xc
   10182:	60                   	pusha  
   10183:	1e                   	push   %ds
   10184:	06                   	push   %es
   10185:	0f a0                	push   %fs
   10187:	0f a8                	push   %gs
   10189:	54                   	push   %esp
   1018a:	e8 e5 15 00 00       	call   11774 <do_handler_stack_segment_fault>
   1018f:	5c                   	pop    %esp
   10190:	0f a9                	pop    %gs
   10192:	0f a1                	pop    %fs
   10194:	07                   	pop    %es
   10195:	1f                   	pop    %ds
   10196:	61                   	popa   
   10197:	83 c4 08             	add    $0x8,%esp
   1019a:	cf                   	iret   

0001019b <exception_handler_general_protection>:
exception_handler general_protection,   13, 1
   1019b:	6a 0d                	push   $0xd
   1019d:	60                   	pusha  
   1019e:	1e                   	push   %ds
   1019f:	06                   	push   %es
   101a0:	0f a0                	push   %fs
   101a2:	0f a8                	push   %gs
   101a4:	54                   	push   %esp
   101a5:	e8 e6 15 00 00       	call   11790 <do_handler_general_protection>
   101aa:	5c                   	pop    %esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa   
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret   

000101b6 <exception_handler_page_fault>:
exception_handler page_fault,           14, 1
   101b6:	6a 0e                	push   $0xe
   101b8:	60                   	pusha  
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 e7 15 00 00       	call   117ac <do_handler_page_fault>
   101c5:	5c                   	pop    %esp
   101c6:	0f a9                	pop    %gs
   101c8:	0f a1                	pop    %fs
   101ca:	07                   	pop    %es
   101cb:	1f                   	pop    %ds
   101cc:	61                   	popa   
   101cd:	83 c4 08             	add    $0x8,%esp
   101d0:	cf                   	iret   

000101d1 <exception_handler_fpu_error>:
exception_handler fpu_error,            16, 0
   101d1:	6a 00                	push   $0x0
   101d3:	6a 10                	push   $0x10
   101d5:	60                   	pusha  
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 e6 15 00 00       	call   117c8 <do_handler_fpu_error>
   101e2:	5c                   	pop    %esp
   101e3:	0f a9                	pop    %gs
   101e5:	0f a1                	pop    %fs
   101e7:	07                   	pop    %es
   101e8:	1f                   	pop    %ds
   101e9:	61                   	popa   
   101ea:	83 c4 08             	add    $0x8,%esp
   101ed:	cf                   	iret   

000101ee <exception_handler_alignment_check>:
exception_handler alignment_check,      17, 1
   101ee:	6a 11                	push   $0x11
   101f0:	60                   	pusha  
   101f1:	1e                   	push   %ds
   101f2:	06                   	push   %es
   101f3:	0f a0                	push   %fs
   101f5:	0f a8                	push   %gs
   101f7:	54                   	push   %esp
   101f8:	e8 e7 15 00 00       	call   117e4 <do_handler_alignment_check>
   101fd:	5c                   	pop    %esp
   101fe:	0f a9                	pop    %gs
   10200:	0f a1                	pop    %fs
   10202:	07                   	pop    %es
   10203:	1f                   	pop    %ds
   10204:	61                   	popa   
   10205:	83 c4 08             	add    $0x8,%esp
   10208:	cf                   	iret   

00010209 <exception_handler_machine_check>:
exception_handler machine_check,        18, 0
   10209:	6a 00                	push   $0x0
   1020b:	6a 12                	push   $0x12
   1020d:	60                   	pusha  
   1020e:	1e                   	push   %ds
   1020f:	06                   	push   %es
   10210:	0f a0                	push   %fs
   10212:	0f a8                	push   %gs
   10214:	54                   	push   %esp
   10215:	e8 e6 15 00 00       	call   11800 <do_handler_machine_check>
   1021a:	5c                   	pop    %esp
   1021b:	0f a9                	pop    %gs
   1021d:	0f a1                	pop    %fs
   1021f:	07                   	pop    %es
   10220:	1f                   	pop    %ds
   10221:	61                   	popa   
   10222:	83 c4 08             	add    $0x8,%esp
   10225:	cf                   	iret   

00010226 <exception_handler_smd_exception>:
exception_handler smd_exception,        19, 0
   10226:	6a 00                	push   $0x0
   10228:	6a 13                	push   $0x13
   1022a:	60                   	pusha  
   1022b:	1e                   	push   %ds
   1022c:	06                   	push   %es
   1022d:	0f a0                	push   %fs
   1022f:	0f a8                	push   %gs
   10231:	54                   	push   %esp
   10232:	e8 e5 15 00 00       	call   1181c <do_handler_smd_exception>
   10237:	5c                   	pop    %esp
   10238:	0f a9                	pop    %gs
   1023a:	0f a1                	pop    %fs
   1023c:	07                   	pop    %es
   1023d:	1f                   	pop    %ds
   1023e:	61                   	popa   
   1023f:	83 c4 08             	add    $0x8,%esp
   10242:	cf                   	iret   

00010243 <exception_handler_virtual_exception>:
exception_handler virtual_exception,    20, 0
   10243:	6a 00                	push   $0x0
   10245:	6a 14                	push   $0x14
   10247:	60                   	pusha  
   10248:	1e                   	push   %ds
   10249:	06                   	push   %es
   1024a:	0f a0                	push   %fs
   1024c:	0f a8                	push   %gs
   1024e:	54                   	push   %esp
   1024f:	e8 e4 15 00 00       	call   11838 <do_handler_virtual_exception>
   10254:	5c                   	pop    %esp
   10255:	0f a9                	pop    %gs
   10257:	0f a1                	pop    %fs
   10259:	07                   	pop    %es
   1025a:	1f                   	pop    %ds
   1025b:	61                   	popa   
   1025c:	83 c4 08             	add    $0x8,%esp
   1025f:	cf                   	iret   

00010260 <exception_handler_control_exception>:
exception_handler control_exception,    21, 1
   10260:	6a 15                	push   $0x15
   10262:	60                   	pusha  
   10263:	1e                   	push   %ds
   10264:	06                   	push   %es
   10265:	0f a0                	push   %fs
   10267:	0f a8                	push   %gs
   10269:	54                   	push   %esp
   1026a:	e8 e5 15 00 00       	call   11854 <do_handler_control_exception>
   1026f:	5c                   	pop    %esp
   10270:	0f a9                	pop    %gs
   10272:	0f a1                	pop    %fs
   10274:	07                   	pop    %es
   10275:	1f                   	pop    %ds
   10276:	61                   	popa   
   10277:	83 c4 08             	add    $0x8,%esp
   1027a:	cf                   	iret   

0001027b <exception_handler_time>:

//定时器的中断处理函数
exception_handler time,                 0x20, 0 
   1027b:	6a 00                	push   $0x0
   1027d:	6a 20                	push   $0x20
   1027f:	60                   	pusha  
   10280:	1e                   	push   %ds
   10281:	06                   	push   %es
   10282:	0f a0                	push   %fs
   10284:	0f a8                	push   %gs
   10286:	54                   	push   %esp
   10287:	e8 36 1a 00 00       	call   11cc2 <do_handler_time>
   1028c:	5c                   	pop    %esp
   1028d:	0f a9                	pop    %gs
   1028f:	0f a1                	pop    %fs
   10291:	07                   	pop    %es
   10292:	1f                   	pop    %ds
   10293:	61                   	popa   
   10294:	83 c4 08             	add    $0x8,%esp
   10297:	cf                   	iret   

00010298 <simple_switch>:
//TODO:该部分为另一种任务切换时cpu上下文环境的保存方法，并未被调用
    .text
    .global simple_switch
simple_switch:  //simple_switch(from, to)
    //1.获取参数
    mov 8(%esp), %edx   //获取 to, 地址(指针) --> 目标任务的栈空间对应的 esp 的值
   10298:	8b 54 24 08          	mov    0x8(%esp),%edx
    mov 4(%esp), %eax   //获取 from, 地址(指针) --> 当前任务的栈空间对应的 esp 的值
   1029c:	8b 44 24 04          	mov    0x4(%esp),%eax


    //2.被调用者保存当前任务的 ebp, ebx, esi, edi 到当前任务的栈中
    //eax, ecx, edx, eip, eflags 已由调用者压入当前任务的栈中
    push %ebp
   102a0:	55                   	push   %ebp
    push %ebx
   102a1:	53                   	push   %ebx
    push %esi
   102a2:	56                   	push   %esi
    push %edi
   102a3:	57                   	push   %edi

    //3.更新当前任务栈空间的 esp
    mov %esp, (%eax)
   102a4:	89 20                	mov    %esp,(%eax)

    //3.进行栈任务栈的切换
    mov (%edx), %esp
   102a6:	8b 22                	mov    (%edx),%esp


    //4.恢复切换后的任务状态，ebp, ebx, esi, edi 手动恢复
    //eax, ecx, edx, eip, eflags, 是在当前任务(c函数)调用simple_switch时已压入当前任务栈中，
    //调用 ret 后会自行弹出并恢复
    pop %edi
   102a8:	5f                   	pop    %edi
    pop %esi
   102a9:	5e                   	pop    %esi
    pop %ebx
   102aa:	5b                   	pop    %ebx
    pop %ebp
   102ab:	5d                   	pop    %ebp

    //5.恢复切换后的任务执行流，相当于此时 esp ->[eip]， 即 pop %eip
   102ac:	c3                   	ret    

000102ad <down2>:
 * 
 * @param size 
 * @param bound 一般取2的n次方
 * @return uint32_t 
 */
static inline uint32_t down2(uint32_t size, uint32_t bound) {
   102ad:	55                   	push   %ebp
   102ae:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);  
   102b0:	8b 45 0c             	mov    0xc(%ebp),%eax
   102b3:	f7 d8                	neg    %eax
   102b5:	23 45 08             	and    0x8(%ebp),%eax
}
   102b8:	5d                   	pop    %ebp
   102b9:	c3                   	ret    

000102ba <up2>:
 * 
 * @param size 
 * @param bound 一般取2的n次方
 * @return uint32_t 
 */
static inline uint32_t up2(uint32_t size, uint32_t bound) {
   102ba:	55                   	push   %ebp
   102bb:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   102bd:	8b 55 08             	mov    0x8(%ebp),%edx
   102c0:	8b 45 0c             	mov    0xc(%ebp),%eax
   102c3:	01 d0                	add    %edx,%eax
   102c5:	8d 50 ff             	lea    -0x1(%eax),%edx
   102c8:	8b 45 0c             	mov    0xc(%ebp),%eax
   102cb:	f7 d8                	neg    %eax
   102cd:	21 d0                	and    %edx,%eax
}
   102cf:	5d                   	pop    %ebp
   102d0:	c3                   	ret    

000102d1 <write_cr3>:
/**
 * @brief  向cr3寄存器写入数据
 *
 * @param data
 */
static inline void write_cr3(uint32_t data) {
   102d1:	55                   	push   %ebp
   102d2:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("mov %[v], %%cr3" : : [v] "r"(data));
   102d4:	8b 45 08             	mov    0x8(%ebp),%eax
   102d7:	0f 22 d8             	mov    %eax,%cr3
}
   102da:	90                   	nop
   102db:	5d                   	pop    %ebp
   102dc:	c3                   	ret    

000102dd <pde_index>:
 * @brief 获取虚拟地址的高10位，及对应的页目录项在页目录表中的索引
 * 
 * @param vstart 
 * @return uint32_t 
 */
static inline uint32_t pde_index(uint32_t vstart) {
   102dd:	55                   	push   %ebp
   102de:	89 e5                	mov    %esp,%ebp
    return (vstart >> 22);
   102e0:	8b 45 08             	mov    0x8(%ebp),%eax
   102e3:	c1 e8 16             	shr    $0x16,%eax
}
   102e6:	5d                   	pop    %ebp
   102e7:	c3                   	ret    

000102e8 <pte_index>:
 * @brief 获取虚拟地址的次10位，及对应的页表项在页表中的索引
 * 
 * @param vstart 
 * @return uint32_t 
 */
static inline uint32_t pte_index(uint32_t vstart) {
   102e8:	55                   	push   %ebp
   102e9:	89 e5                	mov    %esp,%ebp
    return (vstart >> 12) & 0x3ff;
   102eb:	8b 45 08             	mov    0x8(%ebp),%eax
   102ee:	c1 e8 0c             	shr    $0xc,%eax
   102f1:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   102f6:	5d                   	pop    %ebp
   102f7:	c3                   	ret    

000102f8 <pde_to_pt_addr>:
 * @brief 获取页目录项中对应的页表的起始地址，及该页表第一个页表项的地址
 * 
 * @param pde 页目录项
 * @return uint32_t 返回的页表的地址
 */
static inline uint32_t pde_to_pt_addr(pde_t *pde) {
   102f8:	55                   	push   %ebp
   102f9:	89 e5                	mov    %esp,%ebp
    //高20位为页表的物理地址的有效位，将其左移12位，及按4kb对齐后才是该页的物理地址
    return pde->phy_pt_addr << 12;
   102fb:	8b 45 08             	mov    0x8(%ebp),%eax
   102fe:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   10302:	c0 ea 04             	shr    $0x4,%dl
   10305:	0f b6 ca             	movzbl %dl,%ecx
   10308:	0f b6 50 02          	movzbl 0x2(%eax),%edx
   1030c:	c1 e2 04             	shl    $0x4,%edx
   1030f:	09 ca                	or     %ecx,%edx
   10311:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   10315:	c1 e0 0c             	shl    $0xc,%eax
   10318:	09 d0                	or     %edx,%eax
   1031a:	c1 e0 0c             	shl    $0xc,%eax
}
   1031d:	5d                   	pop    %ebp
   1031e:	c3                   	ret    

0001031f <mmu_set_page_dir>:
/**
 * @brief 设置页目录表的起始地址，将起始地址写入CR3寄存器
 * 
 * @param paddr 页目录表的物理起始地址
 */
static inline void mmu_set_page_dir(uint32_t paddr) {
   1031f:	55                   	push   %ebp
   10320:	89 e5                	mov    %esp,%ebp

    //设置cr3寄存器的高20位为页目录表的地址，因为按4kb对齐，所以
    //页目录表的起始地址page_dir的高20位才为有效位，低12位为0，将cr3的低12位就设置为0
    write_cr3(paddr);
   10322:	ff 75 08             	push   0x8(%ebp)
   10325:	e8 a7 ff ff ff       	call   102d1 <write_cr3>
   1032a:	83 c4 04             	add    $0x4,%esp
}
   1032d:	90                   	nop
   1032e:	c9                   	leave  
   1032f:	c3                   	ret    

00010330 <addr_alloc_init>:
 * @param start 管理内存的起始地址
 * @param size 管理内存的大小
 * @param page_size 管理的内存页的大小
 */
static void addr_alloc_init(addr_alloc_t *alloc, uint8_t *bits, uint32_t start,
                            uint32_t size, uint32_t page_size) {
   10330:	55                   	push   %ebp
   10331:	89 e5                	mov    %esp,%ebp
   10333:	83 ec 08             	sub    $0x8,%esp
  mutex_init(&alloc->mutex);
   10336:	8b 45 08             	mov    0x8(%ebp),%eax
   10339:	83 ec 0c             	sub    $0xc,%esp
   1033c:	50                   	push   %eax
   1033d:	e8 74 1b 00 00       	call   11eb6 <mutex_init>
   10342:	83 c4 10             	add    $0x10,%esp
  alloc->start = start;
   10345:	8b 45 08             	mov    0x8(%ebp),%eax
   10348:	8b 55 10             	mov    0x10(%ebp),%edx
   1034b:	89 50 1c             	mov    %edx,0x1c(%eax)
  alloc->size = size;
   1034e:	8b 45 08             	mov    0x8(%ebp),%eax
   10351:	8b 55 14             	mov    0x14(%ebp),%edx
   10354:	89 50 20             	mov    %edx,0x20(%eax)
  alloc->page_size = page_size;
   10357:	8b 45 08             	mov    0x8(%ebp),%eax
   1035a:	8b 55 18             	mov    0x18(%ebp),%edx
   1035d:	89 50 24             	mov    %edx,0x24(%eax)
  bitmap_init(&alloc->bitmap, bits, alloc->size / alloc->page_size, 0);
   10360:	8b 45 08             	mov    0x8(%ebp),%eax
   10363:	8b 40 20             	mov    0x20(%eax),%eax
   10366:	8b 55 08             	mov    0x8(%ebp),%edx
   10369:	8b 4a 24             	mov    0x24(%edx),%ecx
   1036c:	ba 00 00 00 00       	mov    $0x0,%edx
   10371:	f7 f1                	div    %ecx
   10373:	89 c2                	mov    %eax,%edx
   10375:	8b 45 08             	mov    0x8(%ebp),%eax
   10378:	83 c0 14             	add    $0x14,%eax
   1037b:	6a 00                	push   $0x0
   1037d:	52                   	push   %edx
   1037e:	ff 75 0c             	push   0xc(%ebp)
   10381:	50                   	push   %eax
   10382:	e8 90 22 00 00       	call   12617 <bitmap_init>
   10387:	83 c4 10             	add    $0x10,%esp
}
   1038a:	90                   	nop
   1038b:	c9                   	leave  
   1038c:	c3                   	ret    

0001038d <addr_alloc_page>:
 *
 * @param alloc
 * @param page_count 申请页的数量
 * @return uint32_t 申请的第一个页的起始地址， 0：分配失败
 */
static uint32_t addr_alloc_page(addr_alloc_t *alloc, int page_count) {
   1038d:	55                   	push   %ebp
   1038e:	89 e5                	mov    %esp,%ebp
   10390:	83 ec 18             	sub    $0x18,%esp
  uint32_t addr = 0;  // 记录分配的页的起始地址
   10393:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  mutex_lock(&alloc->mutex);
   1039a:	8b 45 08             	mov    0x8(%ebp),%eax
   1039d:	83 ec 0c             	sub    $0xc,%esp
   103a0:	50                   	push   %eax
   103a1:	e8 5d 1b 00 00       	call   11f03 <mutex_lock>
   103a6:	83 c4 10             	add    $0x10,%esp

  // 在位图中取连续的page_count个页进行分配
  int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   103a9:	8b 45 08             	mov    0x8(%ebp),%eax
   103ac:	83 c0 14             	add    $0x14,%eax
   103af:	83 ec 04             	sub    $0x4,%esp
   103b2:	ff 75 0c             	push   0xc(%ebp)
   103b5:	6a 00                	push   $0x0
   103b7:	50                   	push   %eax
   103b8:	e8 8f 24 00 00       	call   1284c <bitmap_alloc_nbits>
   103bd:	83 c4 10             	add    $0x10,%esp
   103c0:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (page_count >= 0) {
   103c3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   103c7:	78 17                	js     103e0 <addr_alloc_page+0x53>
    // 计算出申请到的第一个页的起始地址
    addr = alloc->start + page_index * alloc->page_size;
   103c9:	8b 45 08             	mov    0x8(%ebp),%eax
   103cc:	8b 48 1c             	mov    0x1c(%eax),%ecx
   103cf:	8b 45 08             	mov    0x8(%ebp),%eax
   103d2:	8b 50 24             	mov    0x24(%eax),%edx
   103d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   103d8:	0f af c2             	imul   %edx,%eax
   103db:	01 c8                	add    %ecx,%eax
   103dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
  }

  mutex_unlock(&alloc->mutex);
   103e0:	8b 45 08             	mov    0x8(%ebp),%eax
   103e3:	83 ec 0c             	sub    $0xc,%esp
   103e6:	50                   	push   %eax
   103e7:	e8 a8 1b 00 00       	call   11f94 <mutex_unlock>
   103ec:	83 c4 10             	add    $0x10,%esp

  return addr;
   103ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   103f2:	c9                   	leave  
   103f3:	c3                   	ret    

000103f4 <addr_free_page>:
 *
 * @param alloc
 * @param addr 第一个内存页的起始地址
 * @param page_count 内存页的数量
 */
static void addr_free_page(addr_alloc_t *alloc, uint32_t addr, int page_count) {
   103f4:	55                   	push   %ebp
   103f5:	89 e5                	mov    %esp,%ebp
   103f7:	53                   	push   %ebx
   103f8:	83 ec 14             	sub    $0x14,%esp
  mutex_lock(&alloc->mutex);
   103fb:	8b 45 08             	mov    0x8(%ebp),%eax
   103fe:	83 ec 0c             	sub    $0xc,%esp
   10401:	50                   	push   %eax
   10402:	e8 fc 1a 00 00       	call   11f03 <mutex_lock>
   10407:	83 c4 10             	add    $0x10,%esp

  // 计算出第一个页在位图中的索引
  int page_index = (addr - alloc->start) / alloc->page_size;
   1040a:	8b 45 08             	mov    0x8(%ebp),%eax
   1040d:	8b 50 1c             	mov    0x1c(%eax),%edx
   10410:	8b 45 0c             	mov    0xc(%ebp),%eax
   10413:	29 d0                	sub    %edx,%eax
   10415:	89 c1                	mov    %eax,%ecx
   10417:	8b 45 08             	mov    0x8(%ebp),%eax
   1041a:	8b 58 24             	mov    0x24(%eax),%ebx
   1041d:	89 c8                	mov    %ecx,%eax
   1041f:	ba 00 00 00 00       	mov    $0x0,%edx
   10424:	f7 f3                	div    %ebx
   10426:	89 45 f4             	mov    %eax,-0xc(%ebp)

  bitmap_set_bit(&alloc->bitmap, page_index, page_count, 0);
   10429:	8b 45 08             	mov    0x8(%ebp),%eax
   1042c:	83 c0 14             	add    $0x14,%eax
   1042f:	6a 00                	push   $0x0
   10431:	ff 75 10             	push   0x10(%ebp)
   10434:	ff 75 f4             	push   -0xc(%ebp)
   10437:	50                   	push   %eax
   10438:	e8 e6 22 00 00       	call   12723 <bitmap_set_bit>
   1043d:	83 c4 10             	add    $0x10,%esp

  mutex_unlock(&alloc->mutex);
   10440:	8b 45 08             	mov    0x8(%ebp),%eax
   10443:	83 ec 0c             	sub    $0xc,%esp
   10446:	50                   	push   %eax
   10447:	e8 48 1b 00 00       	call   11f94 <mutex_unlock>
   1044c:	83 c4 10             	add    $0x10,%esp
}
   1044f:	90                   	nop
   10450:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10453:	c9                   	leave  
   10454:	c3                   	ret    

00010455 <show_mem_info>:
/**
 * @brief  打印1m以内内存的可用空间
 * 
 * @param boot_info 
 */
static void show_mem_info(boot_info_t *boot_info) {
   10455:	55                   	push   %ebp
   10456:	89 e5                	mov    %esp,%ebp
   10458:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:");
   1045b:	83 ec 0c             	sub    $0xc,%esp
   1045e:	68 94 33 01 00       	push   $0x13394
   10463:	e8 32 2e 00 00       	call   1329a <log_printf>
   10468:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   1046b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10472:	eb 29                	jmp    1049d <show_mem_info+0x48>
        log_printf("[%d]: 0x%x - 0x%x", i, boot_info->ram_region_cfg[i].start, boot_info->ram_region_cfg[i].size);
   10474:	8b 45 08             	mov    0x8(%ebp),%eax
   10477:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1047a:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   1047e:	8b 45 08             	mov    0x8(%ebp),%eax
   10481:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   10484:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   10487:	52                   	push   %edx
   10488:	50                   	push   %eax
   10489:	ff 75 f4             	push   -0xc(%ebp)
   1048c:	68 a0 33 01 00       	push   $0x133a0
   10491:	e8 04 2e 00 00       	call   1329a <log_printf>
   10496:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   10499:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1049d:	8b 45 08             	mov    0x8(%ebp),%eax
   104a0:	8b 40 50             	mov    0x50(%eax),%eax
   104a3:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   104a6:	7c cc                	jl     10474 <show_mem_info+0x1f>
    }

    log_printf("");
   104a8:	83 ec 0c             	sub    $0xc,%esp
   104ab:	68 b2 33 01 00       	push   $0x133b2
   104b0:	e8 e5 2d 00 00       	call   1329a <log_printf>
   104b5:	83 c4 10             	add    $0x10,%esp
}
   104b8:	90                   	nop
   104b9:	c9                   	leave  
   104ba:	c3                   	ret    

000104bb <total_mem_size>:
 * @brief  计算总的可用内存空间大小
 * 
 * @param boot_info 
 * @return uint32_t 
 */
static uint32_t total_mem_size(boot_info_t *boot_info) {
   104bb:	55                   	push   %ebp
   104bc:	89 e5                	mov    %esp,%ebp
   104be:	83 ec 10             	sub    $0x10,%esp
    uint32_t mem_size = 0;
   104c1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   104c8:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   104cf:	eb 11                	jmp    104e2 <total_mem_size+0x27>
        mem_size += boot_info->ram_region_cfg[i].size;
   104d1:	8b 45 08             	mov    0x8(%ebp),%eax
   104d4:	8b 55 f8             	mov    -0x8(%ebp),%edx
   104d7:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
   104db:	01 45 fc             	add    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   104de:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   104e2:	8b 45 08             	mov    0x8(%ebp),%eax
   104e5:	8b 40 50             	mov    0x50(%eax),%eax
   104e8:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   104eb:	7c e4                	jl     104d1 <total_mem_size+0x16>
    }

    return mem_size;
   104ed:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   104f0:	c9                   	leave  
   104f1:	c3                   	ret    

000104f2 <find_pte>:
 *                 1：表示创建一个新页目录项，并为其分配一个新页作为页表
 *                 0: 返回0
 *                
 * @return pte_t* 索引到的页表项
 */
pte_t* find_pte(pde_t* page_dir, uint32_t vstart, int is_alloc) {
   104f2:	55                   	push   %ebp
   104f3:	89 e5                	mov    %esp,%ebp
   104f5:	83 ec 18             	sub    $0x18,%esp
  pte_t* page_table; //记录被索引的页表
  //1.通过虚拟地址高10位索引到对应的页目录项
  pde_t* pde = page_dir + pde_index(vstart);
   104f8:	ff 75 0c             	push   0xc(%ebp)
   104fb:	e8 dd fd ff ff       	call   102dd <pde_index>
   10500:	83 c4 04             	add    $0x4,%esp
   10503:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1050a:	8b 45 08             	mov    0x8(%ebp),%eax
   1050d:	01 d0                	add    %edx,%eax
   1050f:	89 45 f0             	mov    %eax,-0x10(%ebp)

  //2.判断该页目录项是否已存在，及该页目录项是否已指向一个被分配的页表
  if (pde->present) { //该页目录项存在，及存在对应的页表，可以索引到对应的页表
   10512:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10515:	0f b6 00             	movzbl (%eax),%eax
   10518:	83 e0 01             	and    $0x1,%eax
   1051b:	84 c0                	test   %al,%al
   1051d:	74 10                	je     1052f <find_pte+0x3d>
    page_table = (pte_t*)pde_to_pt_addr(pde);
   1051f:	ff 75 f0             	push   -0x10(%ebp)
   10522:	e8 d1 fd ff ff       	call   102f8 <pde_to_pt_addr>
   10527:	83 c4 04             	add    $0x4,%esp
   1052a:	89 45 f4             	mov    %eax,-0xc(%ebp)
   1052d:	eb 57                	jmp    10586 <find_pte+0x94>
  } else {//该目录项不存在内存中，及对应的页表不存在
    if (is_alloc == 0) {  //不为该目录项创建对应的页表
   1052f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10533:	75 07                	jne    1053c <find_pte+0x4a>
      return (pte_t*)0;
   10535:	b8 00 00 00 00       	mov    $0x0,%eax
   1053a:	eb 64                	jmp    105a0 <find_pte+0xae>
    }

    //为该目录项分配一页作为页表
    uint32_t pg_addr = addr_alloc_page(&paddr_alloc, 1);
   1053c:	83 ec 08             	sub    $0x8,%esp
   1053f:	6a 01                	push   $0x1
   10541:	68 00 50 01 00       	push   $0x15000
   10546:	e8 42 fe ff ff       	call   1038d <addr_alloc_page>
   1054b:	83 c4 10             	add    $0x10,%esp
   1054e:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pg_addr == 0) { //分配失败
   10551:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   10555:	75 07                	jne    1055e <find_pte+0x6c>
      return (pte_t*)0;
   10557:	b8 00 00 00 00       	mov    $0x0,%eax
   1055c:	eb 42                	jmp    105a0 <find_pte+0xae>
    }

    //分配成功, 索引对应的页表
    page_table = (pte_t*)pg_addr;
   1055e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10561:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_memset(page_table, 0, MEM_PAGE_SIZE);
   10564:	83 ec 04             	sub    $0x4,%esp
   10567:	68 00 10 00 00       	push   $0x1000
   1056c:	6a 00                	push   $0x0
   1056e:	ff 75 f4             	push   -0xc(%ebp)
   10571:	e8 57 25 00 00       	call   12acd <kernel_memset>
   10576:	83 c4 10             	add    $0x10,%esp

    //将该页表的起始地址放入对应的页目录项中并放入页目录表中，方便后续索引到该页表
    pde->v = pg_addr | PDE_U | PDE_W | PDE_P;
   10579:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1057c:	83 c8 07             	or     $0x7,%eax
   1057f:	89 c2                	mov    %eax,%edx
   10581:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10584:	89 10                	mov    %edx,(%eax)

  // log_printf("sizeof(pte_t) = %d", sizeof(pte_t));


  //3.返回在该页表中索引到的页表项
  return page_table + pte_index(vstart);
   10586:	83 ec 0c             	sub    $0xc,%esp
   10589:	ff 75 0c             	push   0xc(%ebp)
   1058c:	e8 57 fd ff ff       	call   102e8 <pte_index>
   10591:	83 c4 10             	add    $0x10,%esp
   10594:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1059b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1059e:	01 d0                	add    %edx,%eax

}
   105a0:	c9                   	leave  
   105a1:	c3                   	ret    

000105a2 <memory_creat_map>:
 * @param pstart 物理地址的起始地址
 * @param page_count 分页数量
 * @param privilege 该段虚拟地址的特权级
 * @return int -1:分配失败
 */
int  memory_creat_map(pde_t *page_dir, uint32_t vstart, uint32_t pstart, int page_count, uint32_t privilege) {
   105a2:	55                   	push   %ebp
   105a3:	89 e5                	mov    %esp,%ebp
   105a5:	83 ec 18             	sub    $0x18,%esp
  //1.为每一页创建对应的页表项
  for (int i = 0; i < page_count; ++i) {
   105a8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   105af:	eb 7e                	jmp    1062f <memory_creat_map+0x8d>
    // //打印调试信息
    // log_printf("creat map: v-0x%x, p-0x%x, privilege:0x%x", vstart, pstart, privilege);

    //2.通过虚拟地址在页目录表中获取对应的页目录项指向的页表,
    //且当没有该页目录项时，为其分配一个页作为页表并让一个目录项指向该页表
    pte_t *pte = find_pte(page_dir, vstart, 1);
   105b1:	83 ec 04             	sub    $0x4,%esp
   105b4:	6a 01                	push   $0x1
   105b6:	ff 75 0c             	push   0xc(%ebp)
   105b9:	ff 75 08             	push   0x8(%ebp)
   105bc:	e8 31 ff ff ff       	call   104f2 <find_pte>
   105c1:	83 c4 10             	add    $0x10,%esp
   105c4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pte == (pte_t*)0) {//没有找到可用的页表项
   105c7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   105cb:	75 17                	jne    105e4 <memory_creat_map+0x42>
    log_printf("creat pte failed pte == 0");
   105cd:	83 ec 0c             	sub    $0xc,%esp
   105d0:	68 b3 33 01 00       	push   $0x133b3
   105d5:	e8 c0 2c 00 00       	call   1329a <log_printf>
   105da:	83 c4 10             	add    $0x10,%esp
      return -1;
   105dd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   105e2:	eb 57                	jmp    1063b <memory_creat_map+0x99>
    }

    // log_printf("pte addr : 0x%x", (uint32_t)pte);
    //3.确保该页并未已存在内存中
    ASSERT(pte->present == 0);
   105e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   105e7:	0f b6 00             	movzbl (%eax),%eax
   105ea:	83 e0 01             	and    $0x1,%eax
   105ed:	84 c0                	test   %al,%al
   105ef:	74 1c                	je     1060d <memory_creat_map+0x6b>
   105f1:	68 cd 33 01 00       	push   $0x133cd
   105f6:	68 b8 34 01 00       	push   $0x134b8
   105fb:	68 c0 00 00 00       	push   $0xc0
   10600:	68 e0 33 01 00       	push   $0x133e0
   10605:	e8 c1 1f 00 00       	call   125cb <pannic>
   1060a:	83 c4 10             	add    $0x10,%esp

    //4.在页表项中创建对应的映射关系
    pte->v = pstart | privilege | PTE_P;
   1060d:	8b 45 10             	mov    0x10(%ebp),%eax
   10610:	0b 45 18             	or     0x18(%ebp),%eax
   10613:	83 c8 01             	or     $0x1,%eax
   10616:	89 c2                	mov    %eax,%edx
   10618:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1061b:	89 10                	mov    %edx,(%eax)

    //5.切换为下一页
    vstart += MEM_PAGE_SIZE;
   1061d:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    pstart += MEM_PAGE_SIZE;
   10624:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
  for (int i = 0; i < page_count; ++i) {
   1062b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1062f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10632:	3b 45 14             	cmp    0x14(%ebp),%eax
   10635:	0f 8c 76 ff ff ff    	jl     105b1 <memory_creat_map+0xf>

  }
 }
   1063b:	c9                   	leave  
   1063c:	c3                   	ret    

0001063d <create_kernal_table>:

//TODO:编写函数注释
void create_kernal_table(void) {
   1063d:	55                   	push   %ebp
   1063e:	89 e5                	mov    %esp,%ebp
   10640:	83 ec 28             	sub    $0x28,%esp
    {&s_data, (void*)MEM_EBDA_START, &s_data, PTE_W},    //可读写段的映射关系，一直到bios的拓展数据区(内核.data与.bss段再加上剩余的可用数据区域)
    {(void*)MEM_EXT_START, (void*)MEM_EXT_END, (void*)MEM_EXT_START, PTE_W}, //将1mb到127mb都映射给操作系统使用

  };

  for (int i = 0; i < sizeof(kernal_map) / sizeof(kernal_map[0]); ++i) {
   10643:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1064a:	e9 82 00 00 00       	jmp    106d1 <create_kernal_table+0x94>
    memory_map_t *map = kernal_map + i;
   1064f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10652:	c1 e0 04             	shl    $0x4,%eax
   10655:	05 00 40 01 00       	add    $0x14000,%eax
   1065a:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //将虚拟地址的起始地址按页大小4kb对齐，为了不丢失原有的虚拟地址空间，所以向下对齐vstart
    uint32_t vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   1065d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10660:	8b 00                	mov    (%eax),%eax
   10662:	68 00 10 00 00       	push   $0x1000
   10667:	50                   	push   %eax
   10668:	e8 40 fc ff ff       	call   102ad <down2>
   1066d:	83 c4 08             	add    $0x8,%esp
   10670:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32_t pstart = down2((uint32_t)map->pstart, MEM_PAGE_SIZE);
   10673:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10676:	8b 40 08             	mov    0x8(%eax),%eax
   10679:	68 00 10 00 00       	push   $0x1000
   1067e:	50                   	push   %eax
   1067f:	e8 29 fc ff ff       	call   102ad <down2>
   10684:	83 c4 08             	add    $0x8,%esp
   10687:	89 45 e8             	mov    %eax,-0x18(%ebp)
    //将虚拟地址的结束地址按页大小4kb对齐, 为了不丢失原有的虚拟地址空间，所以向上对齐vend
    uint32_t vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   1068a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1068d:	8b 40 04             	mov    0x4(%eax),%eax
   10690:	68 00 10 00 00       	push   $0x1000
   10695:	50                   	push   %eax
   10696:	e8 1f fc ff ff       	call   102ba <up2>
   1069b:	83 c4 08             	add    $0x8,%esp
   1069e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    //计算该虚拟空间需要的页数
    int page_count = (vend - vstart) / MEM_PAGE_SIZE;
   106a1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   106a4:	2b 45 ec             	sub    -0x14(%ebp),%eax
   106a7:	c1 e8 0c             	shr    $0xc,%eax
   106aa:	89 45 e0             	mov    %eax,-0x20(%ebp)

    //创建内存映射关系
    memory_creat_map(kernel_page_dir, vstart, pstart, page_count, map->privilege);
   106ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106b0:	8b 40 0c             	mov    0xc(%eax),%eax
   106b3:	83 ec 0c             	sub    $0xc,%esp
   106b6:	50                   	push   %eax
   106b7:	ff 75 e0             	push   -0x20(%ebp)
   106ba:	ff 75 e8             	push   -0x18(%ebp)
   106bd:	ff 75 ec             	push   -0x14(%ebp)
   106c0:	68 00 60 01 00       	push   $0x16000
   106c5:	e8 d8 fe ff ff       	call   105a2 <memory_creat_map>
   106ca:	83 c4 20             	add    $0x20,%esp
  for (int i = 0; i < sizeof(kernal_map) / sizeof(kernal_map[0]); ++i) {
   106cd:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   106d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   106d4:	83 f8 03             	cmp    $0x3,%eax
   106d7:	0f 86 72 ff ff ff    	jbe    1064f <create_kernal_table+0x12>

  }
}
   106dd:	90                   	nop
   106de:	90                   	nop
   106df:	c9                   	leave  
   106e0:	c3                   	ret    

000106e1 <memory_creat_uvm>:
/**
 * @brief 创建用户进程的虚拟内存空间，即页目录表
 * 
 * @return uint32_t 
 */
uint32_t memory_creat_uvm() {
   106e1:	55                   	push   %ebp
   106e2:	89 e5                	mov    %esp,%ebp
   106e4:	83 ec 18             	sub    $0x18,%esp
  //1.分配一页作为页目录表
  pde_t *page_dir = (pde_t *)addr_alloc_page(&paddr_alloc, 1);
   106e7:	83 ec 08             	sub    $0x8,%esp
   106ea:	6a 01                	push   $0x1
   106ec:	68 00 50 01 00       	push   $0x15000
   106f1:	e8 97 fc ff ff       	call   1038d <addr_alloc_page>
   106f6:	83 c4 10             	add    $0x10,%esp
   106f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (page_dir == 0) return 0;
   106fc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10700:	75 07                	jne    10709 <memory_creat_uvm+0x28>
   10702:	b8 00 00 00 00       	mov    $0x0,%eax
   10707:	eb 5b                	jmp    10764 <memory_creat_uvm+0x83>
  //TODO:新分配的页并未做虚拟内存映射，会触发缺页异常，需要处理,这里先将1mb以上的所有空间都映射给内核进程

  //2.将该页的内容清空
  kernel_memset((void*)page_dir, 0, MEM_PAGE_SIZE);
   10709:	83 ec 04             	sub    $0x4,%esp
   1070c:	68 00 10 00 00       	push   $0x1000
   10711:	6a 00                	push   $0x0
   10713:	ff 75 f0             	push   -0x10(%ebp)
   10716:	e8 b2 23 00 00       	call   12acd <kernel_memset>
   1071b:	83 c4 10             	add    $0x10,%esp

  //3.获取用户进程空间的第一个页目录项索引, 用户进程空间的起始地址MEM_TASK_BASE = 0x800 00000
  uint32_t user_pde_start = pde_index(MEM_TASK_BASE);
   1071e:	83 ec 0c             	sub    $0xc,%esp
   10721:	68 00 00 00 80       	push   $0x80000000
   10726:	e8 b2 fb ff ff       	call   102dd <pde_index>
   1072b:	83 c4 10             	add    $0x10,%esp
   1072e:	89 45 ec             	mov    %eax,-0x14(%ebp)

  //4.将用户进程空间以下的空间映射给操作系统使用，即将0~user_pde_start的pde提供给操作系统作为页目录项
  for (int i = 0; i < user_pde_start; ++i) {
   10731:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10738:	eb 1f                	jmp    10759 <memory_creat_uvm+0x78>
      page_dir[i].v = kernel_page_dir[i].v; //所有进程都共享操作系统的页表
   1073a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1073d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10744:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10747:	01 c2                	add    %eax,%edx
   10749:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1074c:	8b 04 85 00 60 01 00 	mov    0x16000(,%eax,4),%eax
   10753:	89 02                	mov    %eax,(%edx)
  for (int i = 0; i < user_pde_start; ++i) {
   10755:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10759:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1075c:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   1075f:	77 d9                	ja     1073a <memory_creat_uvm+0x59>
  }


  return (uint32_t)page_dir;
   10761:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   10764:	c9                   	leave  
   10765:	c3                   	ret    

00010766 <memory_init>:
/**
 * @brief  初始化化内存
 *
 * @param boot_info cpu在实模式下检测到的可用内存对象
 */
void memory_init(boot_info_t *boot_info) {
   10766:	55                   	push   %ebp
   10767:	89 e5                	mov    %esp,%ebp
   10769:	83 ec 18             	sub    $0x18,%esp

  
    //声明紧邻在内核bss段后面的空间地址，用于存储位图，该变量定义在kernel.lds中
    extern char mem_free_start;

    log_printf("memory init");
   1076c:	83 ec 0c             	sub    $0xc,%esp
   1076f:	68 17 34 01 00       	push   $0x13417
   10774:	e8 21 2b 00 00       	call   1329a <log_printf>
   10779:	83 c4 10             	add    $0x10,%esp

    log_printf("mem_free_start: 0x%x", &mem_free_start);
   1077c:	83 ec 08             	sub    $0x8,%esp
   1077f:	68 54 20 03 00       	push   $0x32054
   10784:	68 23 34 01 00       	push   $0x13423
   10789:	e8 0c 2b 00 00       	call   1329a <log_printf>
   1078e:	83 c4 10             	add    $0x10,%esp

    show_mem_info(boot_info);
   10791:	83 ec 0c             	sub    $0xc,%esp
   10794:	ff 75 08             	push   0x8(%ebp)
   10797:	e8 b9 fc ff ff       	call   10455 <show_mem_info>
   1079c:	83 c4 10             	add    $0x10,%esp
    
    //去除保护模式下1mb大小后可用的内存空间大小
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   1079f:	83 ec 0c             	sub    $0xc,%esp
   107a2:	ff 75 08             	push   0x8(%ebp)
   107a5:	e8 11 fd ff ff       	call   104bb <total_mem_size>
   107aa:	83 c4 10             	add    $0x10,%esp
   107ad:	2d 00 00 10 00       	sub    $0x100000,%eax
   107b2:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将可用空间大小下调到页大小的整数倍
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);
   107b5:	83 ec 08             	sub    $0x8,%esp
   107b8:	68 00 10 00 00       	push   $0x1000
   107bd:	ff 75 f4             	push   -0xc(%ebp)
   107c0:	e8 e8 fa ff ff       	call   102ad <down2>
   107c5:	83 c4 10             	add    $0x10,%esp
   107c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    log_printf("free memory: 0x%x, size: 0x%x", MEM_EXT_START, mem_up1MB_free);
   107cb:	83 ec 04             	sub    $0x4,%esp
   107ce:	ff 75 f4             	push   -0xc(%ebp)
   107d1:	68 00 00 10 00       	push   $0x100000
   107d6:	68 38 34 01 00       	push   $0x13438
   107db:	e8 ba 2a 00 00       	call   1329a <log_printf>
   107e0:	83 c4 10             	add    $0x10,%esp

    //mem_free_start被分配的地址在链接文件中定义，紧邻着内核的.bss段
    uint8_t *mem_free = (uint8_t*)&mem_free_start;
   107e3:	c7 45 f0 54 20 03 00 	movl   $0x32054,-0x10(%ebp)

    //用paddr_alloc，内存页分配对象管理1mb以上的所有空闲空间，页大小为MEM_PAGE_SIZE=4kb
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   107ea:	83 ec 0c             	sub    $0xc,%esp
   107ed:	68 00 10 00 00       	push   $0x1000
   107f2:	ff 75 f4             	push   -0xc(%ebp)
   107f5:	68 00 00 10 00       	push   $0x100000
   107fa:	ff 75 f0             	push   -0x10(%ebp)
   107fd:	68 00 50 01 00       	push   $0x15000
   10802:	e8 29 fb ff ff       	call   10330 <addr_alloc_init>
   10807:	83 c4 20             	add    $0x20,%esp

    //跳过存储位图的内存区域, 位图的每一位表示一个页，计算位图所站的字节数即可跳过该区域
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);  
   1080a:	a1 20 50 01 00       	mov    0x15020,%eax
   1080f:	c1 e8 0c             	shr    $0xc,%eax
   10812:	83 ec 0c             	sub    $0xc,%esp
   10815:	50                   	push   %eax
   10816:	e8 e6 1d 00 00       	call   12601 <bitmap_byte_count>
   1081b:	83 c4 10             	add    $0x10,%esp
   1081e:	01 45 f0             	add    %eax,-0x10(%ebp)

    //判断mem_free是否已越过可用数据区
    ASSERT(mem_free < (uint8_t*)MEM_EBDA_START);
   10821:	81 7d f0 ff fb 09 00 	cmpl   $0x9fbff,-0x10(%ebp)
   10828:	76 1c                	jbe    10846 <memory_init+0xe0>
   1082a:	68 58 34 01 00       	push   $0x13458
   1082f:	68 cc 34 01 00       	push   $0x134cc
   10834:	68 2a 01 00 00       	push   $0x12a
   10839:	68 e0 33 01 00       	push   $0x133e0
   1083e:	e8 88 1d 00 00       	call   125cb <pannic>
   10843:	83 c4 10             	add    $0x10,%esp
    
    //创建内核的页表映射
    create_kernal_table();
   10846:	e8 f2 fd ff ff       	call   1063d <create_kernal_table>

    //设置内核的页目录表到CR3寄存器，并开启分页机制
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   1084b:	b8 00 60 01 00       	mov    $0x16000,%eax
   10850:	83 ec 0c             	sub    $0xc,%esp
   10853:	50                   	push   %eax
   10854:	e8 c6 fa ff ff       	call   1031f <mmu_set_page_dir>
   10859:	83 c4 10             	add    $0x10,%esp
}
   1085c:	90                   	nop
   1085d:	c9                   	leave  
   1085e:	c3                   	ret    

0001085f <memory_alloc_for_page_dir>:
 * @param vaddr 进程各个代码段的起始虚拟地址
 * @param alloc_size 为进程分配的页空间大小
 * @param priority 进程页空间的权限
 * @return int 
 */
int memory_alloc_for_page_dir(uint32_t page_dir, uint32_t vaddr, uint32_t alloc_size, uint32_t privilege) {
   1085f:	55                   	push   %ebp
   10860:	89 e5                	mov    %esp,%ebp
   10862:	83 ec 28             	sub    $0x28,%esp
  //1.记录当前分配的虚拟页的起始地址
  uint32_t curr_vaddr = vaddr;
   10865:	8b 45 0c             	mov    0xc(%ebp),%eax
   10868:	89 45 f4             	mov    %eax,-0xc(%ebp)
  //2.计算需要分配多少页
  int page_count = up2(alloc_size, MEM_PAGE_SIZE) / MEM_PAGE_SIZE;
   1086b:	68 00 10 00 00       	push   $0x1000
   10870:	ff 75 10             	push   0x10(%ebp)
   10873:	e8 42 fa ff ff       	call   102ba <up2>
   10878:	83 c4 08             	add    $0x8,%esp
   1087b:	c1 e8 0c             	shr    $0xc,%eax
   1087e:	89 45 ec             	mov    %eax,-0x14(%ebp)

  //3.逐页进行映射
  for (int i = 0; i < page_count; ++i) {
   10881:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   10888:	eb 7a                	jmp    10904 <memory_alloc_for_page_dir+0xa5>
    uint32_t paddr = addr_alloc_page(&paddr_alloc, 1);
   1088a:	83 ec 08             	sub    $0x8,%esp
   1088d:	6a 01                	push   $0x1
   1088f:	68 00 50 01 00       	push   $0x15000
   10894:	e8 f4 fa ff ff       	call   1038d <addr_alloc_page>
   10899:	83 c4 10             	add    $0x10,%esp
   1089c:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (paddr == 0) {//分配失败
   1089f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   108a3:	75 17                	jne    108bc <memory_alloc_for_page_dir+0x5d>
      log_printf("mem alloc failed. no memory");
   108a5:	83 ec 0c             	sub    $0xc,%esp
   108a8:	68 7c 34 01 00       	push   $0x1347c
   108ad:	e8 e8 29 00 00       	call   1329a <log_printf>
   108b2:	83 c4 10             	add    $0x10,%esp
      //TODO:当分配失败时应该将之前分配的页全部归还，且将映射关系也全部解除
      return 0;
   108b5:	b8 00 00 00 00       	mov    $0x0,%eax
   108ba:	eb 59                	jmp    10915 <memory_alloc_for_page_dir+0xb6>
    }

    int err = memory_creat_map((pde_t*)page_dir, curr_vaddr, paddr, 1, privilege);
   108bc:	8b 45 08             	mov    0x8(%ebp),%eax
   108bf:	83 ec 0c             	sub    $0xc,%esp
   108c2:	ff 75 14             	push   0x14(%ebp)
   108c5:	6a 01                	push   $0x1
   108c7:	ff 75 e8             	push   -0x18(%ebp)
   108ca:	ff 75 f4             	push   -0xc(%ebp)
   108cd:	50                   	push   %eax
   108ce:	e8 cf fc ff ff       	call   105a2 <memory_creat_map>
   108d3:	83 c4 20             	add    $0x20,%esp
   108d6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (err < 0) {//分配失败
   108d9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   108dd:	79 1a                	jns    108f9 <memory_alloc_for_page_dir+0x9a>
      log_printf("create memory failed. err = %d", err);
   108df:	83 ec 08             	sub    $0x8,%esp
   108e2:	ff 75 e4             	push   -0x1c(%ebp)
   108e5:	68 98 34 01 00       	push   $0x13498
   108ea:	e8 ab 29 00 00       	call   1329a <log_printf>
   108ef:	83 c4 10             	add    $0x10,%esp
      //TODO:当分配失败时应该将之前分配的页全部归还，且将映射关系也全部解除
      return 0;
   108f2:	b8 00 00 00 00       	mov    $0x0,%eax
   108f7:	eb 1c                	jmp    10915 <memory_alloc_for_page_dir+0xb6>
    }

    curr_vaddr += MEM_PAGE_SIZE;
   108f9:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
  for (int i = 0; i < page_count; ++i) {
   10900:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10904:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10907:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   1090a:	0f 8c 7a ff ff ff    	jl     1088a <memory_alloc_for_page_dir+0x2b>
  }

  return 0;
   10910:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10915:	c9                   	leave  
   10916:	c3                   	ret    

00010917 <memory_alloc_page_for>:
 * @param vaddr 待分配空间的起始地址
 * @param alloc_size 为其分配的空间大小
 * @param privilege 对应页空间的权限
 * @return int 错误码
 */
int memory_alloc_page_for(uint32_t vaddr, uint32_t alloc_size, uint32_t privilege) {
   10917:	55                   	push   %ebp
   10918:	89 e5                	mov    %esp,%ebp
   1091a:	83 ec 08             	sub    $0x8,%esp
  return memory_alloc_for_page_dir(task_current()->tss.cr3, vaddr, alloc_size, privilege);
   1091d:	e8 6e 06 00 00       	call   10f90 <task_current>
   10922:	8b 40 64             	mov    0x64(%eax),%eax
   10925:	ff 75 10             	push   0x10(%ebp)
   10928:	ff 75 0c             	push   0xc(%ebp)
   1092b:	ff 75 08             	push   0x8(%ebp)
   1092e:	50                   	push   %eax
   1092f:	e8 2b ff ff ff       	call   1085f <memory_alloc_for_page_dir>
   10934:	83 c4 10             	add    $0x10,%esp
   10937:	c9                   	leave  
   10938:	c3                   	ret    

00010939 <list_node_init>:
    list_node_t * first;
    list_node_t * last;
    int size;
}list_t;

static inline void list_node_init(list_node_t *node) {
   10939:	55                   	push   %ebp
   1093a:	89 e5                	mov    %esp,%ebp
   1093c:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   1093f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10943:	75 19                	jne    1095e <list_node_init+0x25>
   10945:	68 d8 34 01 00       	push   $0x134d8
   1094a:	68 c4 35 01 00       	push   $0x135c4
   1094f:	6a 20                	push   $0x20
   10951:	68 f0 34 01 00       	push   $0x134f0
   10956:	e8 70 1c 00 00       	call   125cb <pannic>
   1095b:	83 c4 10             	add    $0x10,%esp
    node->pre = node->next = (list_node_t*)0;
   1095e:	8b 45 08             	mov    0x8(%ebp),%eax
   10961:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   10968:	8b 45 08             	mov    0x8(%ebp),%eax
   1096b:	8b 50 04             	mov    0x4(%eax),%edx
   1096e:	8b 45 08             	mov    0x8(%ebp),%eax
   10971:	89 10                	mov    %edx,(%eax)
}
   10973:	90                   	nop
   10974:	c9                   	leave  
   10975:	c3                   	ret    

00010976 <list_node_next>:
    ASSERT(node != (list_node_t*)0);

    return node->pre;
}

static inline list_node_t *list_node_next(list_node_t *node) {
   10976:	55                   	push   %ebp
   10977:	89 e5                	mov    %esp,%ebp
   10979:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   1097c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10980:	75 19                	jne    1099b <list_node_next+0x25>
   10982:	68 d8 34 01 00       	push   $0x134d8
   10987:	68 34 36 01 00       	push   $0x13634
   1098c:	6a 2b                	push   $0x2b
   1098e:	68 f0 34 01 00       	push   $0x134f0
   10993:	e8 33 1c 00 00       	call   125cb <pannic>
   10998:	83 c4 10             	add    $0x10,%esp

    return node->next;
   1099b:	8b 45 08             	mov    0x8(%ebp),%eax
   1099e:	8b 40 04             	mov    0x4(%eax),%eax
}
   109a1:	c9                   	leave  
   109a2:	c3                   	ret    

000109a3 <list_init>:

static inline void list_init(list_t *list) {
   109a3:	55                   	push   %ebp
   109a4:	89 e5                	mov    %esp,%ebp
   109a6:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   109a9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   109ad:	75 19                	jne    109c8 <list_init+0x25>
   109af:	68 2e 35 01 00       	push   $0x1352e
   109b4:	68 d4 35 01 00       	push   $0x135d4
   109b9:	6a 31                	push   $0x31
   109bb:	68 f0 34 01 00       	push   $0x134f0
   109c0:	e8 06 1c 00 00       	call   125cb <pannic>
   109c5:	83 c4 10             	add    $0x10,%esp

    list->first = list->last = (list_node_t*)0;
   109c8:	8b 45 08             	mov    0x8(%ebp),%eax
   109cb:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   109d2:	8b 45 08             	mov    0x8(%ebp),%eax
   109d5:	8b 50 04             	mov    0x4(%eax),%edx
   109d8:	8b 45 08             	mov    0x8(%ebp),%eax
   109db:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   109dd:	8b 45 08             	mov    0x8(%ebp),%eax
   109e0:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   109e7:	90                   	nop
   109e8:	c9                   	leave  
   109e9:	c3                   	ret    

000109ea <list_is_empty>:

static inline int list_is_empty(list_t *list) {
   109ea:	55                   	push   %ebp
   109eb:	89 e5                	mov    %esp,%ebp
   109ed:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   109f0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   109f4:	75 19                	jne    10a0f <list_is_empty+0x25>
   109f6:	68 2e 35 01 00       	push   $0x1352e
   109fb:	68 44 36 01 00       	push   $0x13644
   10a00:	6a 38                	push   $0x38
   10a02:	68 f0 34 01 00       	push   $0x134f0
   10a07:	e8 bf 1b 00 00       	call   125cb <pannic>
   10a0c:	83 c4 10             	add    $0x10,%esp

    return list->size == 0;
   10a0f:	8b 45 08             	mov    0x8(%ebp),%eax
   10a12:	8b 40 08             	mov    0x8(%eax),%eax
   10a15:	85 c0                	test   %eax,%eax
   10a17:	0f 94 c0             	sete   %al
   10a1a:	0f b6 c0             	movzbl %al,%eax
}
   10a1d:	c9                   	leave  
   10a1e:	c3                   	ret    

00010a1f <list_get_size>:

static inline int list_get_size(list_t *list) {
   10a1f:	55                   	push   %ebp
   10a20:	89 e5                	mov    %esp,%ebp
   10a22:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10a25:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10a29:	75 19                	jne    10a44 <list_get_size+0x25>
   10a2b:	68 2e 35 01 00       	push   $0x1352e
   10a30:	68 24 36 01 00       	push   $0x13624
   10a35:	6a 3e                	push   $0x3e
   10a37:	68 f0 34 01 00       	push   $0x134f0
   10a3c:	e8 8a 1b 00 00       	call   125cb <pannic>
   10a41:	83 c4 10             	add    $0x10,%esp

    return list->size;
   10a44:	8b 45 08             	mov    0x8(%ebp),%eax
   10a47:	8b 40 08             	mov    0x8(%eax),%eax
}
   10a4a:	c9                   	leave  
   10a4b:	c3                   	ret    

00010a4c <list_get_first>:

static inline list_node_t *list_get_first(list_t *list) {
   10a4c:	55                   	push   %ebp
   10a4d:	89 e5                	mov    %esp,%ebp
   10a4f:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10a52:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10a56:	75 19                	jne    10a71 <list_get_first+0x25>
   10a58:	68 2e 35 01 00       	push   $0x1352e
   10a5d:	68 14 36 01 00       	push   $0x13614
   10a62:	6a 44                	push   $0x44
   10a64:	68 f0 34 01 00       	push   $0x134f0
   10a69:	e8 5d 1b 00 00       	call   125cb <pannic>
   10a6e:	83 c4 10             	add    $0x10,%esp

    return list->first;
   10a71:	8b 45 08             	mov    0x8(%ebp),%eax
   10a74:	8b 00                	mov    (%eax),%eax
}
   10a76:	c9                   	leave  
   10a77:	c3                   	ret    

00010a78 <up2>:
static inline uint32_t up2(uint32_t size, uint32_t bound) {
   10a78:	55                   	push   %ebp
   10a79:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   10a7b:	8b 55 08             	mov    0x8(%ebp),%edx
   10a7e:	8b 45 0c             	mov    0xc(%ebp),%eax
   10a81:	01 d0                	add    %edx,%eax
   10a83:	8d 50 ff             	lea    -0x1(%eax),%edx
   10a86:	8b 45 0c             	mov    0xc(%ebp),%eax
   10a89:	f7 d8                	neg    %eax
   10a8b:	21 d0                	and    %edx,%eax
}
   10a8d:	5d                   	pop    %ebp
   10a8e:	c3                   	ret    

00010a8f <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   10a8f:	55                   	push   %ebp
   10a90:	89 e5                	mov    %esp,%ebp
   10a92:	f4                   	hlt    
   10a93:	90                   	nop
   10a94:	5d                   	pop    %ebp
   10a95:	c3                   	ret    

00010a96 <write_cr3>:
static inline void write_cr3(uint32_t data) {
   10a96:	55                   	push   %ebp
   10a97:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("mov %[v], %%cr3" : : [v] "r"(data));
   10a99:	8b 45 08             	mov    0x8(%ebp),%eax
   10a9c:	0f 22 d8             	mov    %eax,%cr3
}
   10a9f:	90                   	nop
   10aa0:	5d                   	pop    %ebp
   10aa1:	c3                   	ret    

00010aa2 <far_jump>:
 * @brief  远跳转，当跳转发生在TSS段之间时，cpu将会保存状态到当前TR寄存器指向的TSS段
 *
 * @param selector 选择子
 * @param offset 跳转的偏移量
 */
static inline void far_jump(uint32_t selector, uint32_t offset) {
   10aa2:	55                   	push   %ebp
   10aa3:	89 e5                	mov    %esp,%ebp
   10aa5:	83 ec 10             	sub    $0x10,%esp
  // 传入远跳转需要的参数, 即cs = selector, eip = offset 
  uint32_t addr[] = {offset, selector};  
   10aa8:	8b 45 0c             	mov    0xc(%ebp),%eax
   10aab:	89 45 f8             	mov    %eax,-0x8(%ebp)
   10aae:	8b 45 08             	mov    0x8(%ebp),%eax
   10ab1:	89 45 fc             	mov    %eax,-0x4(%ebp)

  __asm__ __volatile__("ljmpl *(%[a])" : : [a] "r"(addr));
   10ab4:	8d 45 f8             	lea    -0x8(%ebp),%eax
   10ab7:	ff 28                	ljmp   *(%eax)
}
   10ab9:	90                   	nop
   10aba:	c9                   	leave  
   10abb:	c3                   	ret    

00010abc <write_tr>:
 * @brief   写入当前任务的TSS段描述符的选择子到TR寄存器中，告诉cpu当前段的TSS位置
 *          以便在进行任务切换时，将状态保存到该TSS段中
 * 
 * @param tss_selector 准备运行的任务的TSS段的选择子
 */
static inline void write_tr(uint16_t tss_selector) {
   10abc:	55                   	push   %ebp
   10abd:	89 e5                	mov    %esp,%ebp
   10abf:	83 ec 04             	sub    $0x4,%esp
   10ac2:	8b 45 08             	mov    0x8(%ebp),%eax
   10ac5:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  __asm__ __volatile__("ltr %[v]" : : [v]"r"(tss_selector));
   10ac9:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   10acd:	0f 00 d8             	ltr    %ax
}
   10ad0:	90                   	nop
   10ad1:	c9                   	leave  
   10ad2:	c3                   	ret    

00010ad3 <mmu_set_page_dir>:
static inline void mmu_set_page_dir(uint32_t paddr) {
   10ad3:	55                   	push   %ebp
   10ad4:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   10ad6:	ff 75 08             	push   0x8(%ebp)
   10ad9:	e8 b8 ff ff ff       	call   10a96 <write_cr3>
   10ade:	83 c4 04             	add    $0x4,%esp
}
   10ae1:	90                   	nop
   10ae2:	c9                   	leave  
   10ae3:	c3                   	ret    

00010ae4 <switch_to_tss>:

//定义全局唯一的任务管理器对象
static task_manager_t task_manager;


static void switch_to_tss(uint16_t tss_selector) {
   10ae4:	55                   	push   %ebp
   10ae5:	89 e5                	mov    %esp,%ebp
   10ae7:	83 ec 04             	sub    $0x4,%esp
   10aea:	8b 45 08             	mov    0x8(%ebp),%eax
   10aed:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    //进行远跳转，让cpu访问该tss段的描述符，cpu将重启到之前运行该tss对应的任务的状态继续运行该任务
    far_jump(tss_selector, 0);
   10af1:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   10af5:	6a 00                	push   $0x0
   10af7:	50                   	push   %eax
   10af8:	e8 a5 ff ff ff       	call   10aa2 <far_jump>
   10afd:	83 c4 08             	add    $0x8,%esp
}
   10b00:	90                   	nop
   10b01:	c9                   	leave  
   10b02:	c3                   	ret    

00010b03 <task_switch_from_to>:
 * @brief  将任务从from切换到to
 * 
 * @param from 切换前的任务
 * @param to 切换后的任务
 */
void task_switch_from_to(task_t *from, task_t *to) {
   10b03:	55                   	push   %ebp
   10b04:	89 e5                	mov    %esp,%ebp
    //跳转到对应的tss段读取并恢复cpu任务状态
    switch_to_tss(to->tss_selector);
   10b06:	8b 45 0c             	mov    0xc(%ebp),%eax
   10b09:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
   10b0f:	0f b7 c0             	movzwl %ax,%eax
   10b12:	50                   	push   %eax
   10b13:	e8 cc ff ff ff       	call   10ae4 <switch_to_tss>
   10b18:	83 c4 04             	add    $0x4,%esp
}
   10b1b:	90                   	nop
   10b1c:	c9                   	leave  
   10b1d:	c3                   	ret    

00010b1e <tss_init>:
 * 
 * @param task 需要初始化的任务对象
 * @param entry 任务入口地址
 * @param esp 任务所用的栈顶指针
 */
static int tss_init(task_t *task, uint32_t entry, uint32_t esp) {
   10b1e:	55                   	push   %ebp
   10b1f:	89 e5                	mov    %esp,%ebp
   10b21:	83 ec 18             	sub    $0x18,%esp
    //获取任务的代码段选择子和数据段选择子，并初始化其CPL,因为是平台模型，所以基本不涉及到跨段访问，所以不需要RPL
    uint32_t code_selector = task_manager.app_code_selector | SEG_CPL3;
   10b24:	a1 90 71 01 00       	mov    0x17190,%eax
   10b29:	83 c8 03             	or     $0x3,%eax
   10b2c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t data_selector = task_manager.app_data_selector | SEG_CPL3;
   10b2f:	a1 94 71 01 00       	mov    0x17194,%eax
   10b34:	83 c8 03             	or     $0x3,%eax
   10b37:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //1.将tss段的值置空
    kernel_memset(&task->tss, 0, sizeof(task->tss));
   10b3a:	8b 45 08             	mov    0x8(%ebp),%eax
   10b3d:	83 c0 48             	add    $0x48,%eax
   10b40:	83 ec 04             	sub    $0x4,%esp
   10b43:	6a 68                	push   $0x68
   10b45:	6a 00                	push   $0x0
   10b47:	50                   	push   %eax
   10b48:	e8 80 1f 00 00       	call   12acd <kernel_memset>
   10b4d:	83 c4 10             	add    $0x10,%esp

    //2.设置eip，即任务的起始地址
    task->tss.eip = entry;
   10b50:	8b 45 08             	mov    0x8(%ebp),%eax
   10b53:	8b 55 0c             	mov    0xc(%ebp),%edx
   10b56:	89 50 68             	mov    %edx,0x68(%eax)

    //3.根据任务的特权级设置任务所使用的栈空间
    task->tss.esp = task->tss.esp0 = esp;
   10b59:	8b 45 08             	mov    0x8(%ebp),%eax
   10b5c:	8b 55 10             	mov    0x10(%ebp),%edx
   10b5f:	89 50 4c             	mov    %edx,0x4c(%eax)
   10b62:	8b 45 08             	mov    0x8(%ebp),%eax
   10b65:	8b 50 4c             	mov    0x4c(%eax),%edx
   10b68:	8b 45 08             	mov    0x8(%ebp),%eax
   10b6b:	89 90 80 00 00 00    	mov    %edx,0x80(%eax)

    //4.平坦模型，初始化栈空间段寄存器
    task->tss.ss = task->tss.ss0 = data_selector;
   10b71:	8b 45 08             	mov    0x8(%ebp),%eax
   10b74:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10b77:	89 50 50             	mov    %edx,0x50(%eax)
   10b7a:	8b 45 08             	mov    0x8(%ebp),%eax
   10b7d:	8b 50 50             	mov    0x50(%eax),%edx
   10b80:	8b 45 08             	mov    0x8(%ebp),%eax
   10b83:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)

    //5. 平坦模型，初始其余化段寄存器
    task->tss.es = task->tss.fs = task->tss.gs = task->tss.ds = data_selector;
   10b89:	8b 45 08             	mov    0x8(%ebp),%eax
   10b8c:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10b8f:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
   10b95:	8b 45 08             	mov    0x8(%ebp),%eax
   10b98:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
   10b9e:	8b 45 08             	mov    0x8(%ebp),%eax
   10ba1:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
   10ba7:	8b 45 08             	mov    0x8(%ebp),%eax
   10baa:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
   10bb0:	8b 45 08             	mov    0x8(%ebp),%eax
   10bb3:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
   10bb9:	8b 45 08             	mov    0x8(%ebp),%eax
   10bbc:	8b 90 a0 00 00 00    	mov    0xa0(%eax),%edx
   10bc2:	8b 45 08             	mov    0x8(%ebp),%eax
   10bc5:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)

    //6.平坦模型，初始化代码段寄存器
    task->tss.cs = code_selector;
   10bcb:	8b 45 08             	mov    0x8(%ebp),%eax
   10bce:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10bd1:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)

    //7.初始化eflags寄存器，使cpu中断保持开启
    task->tss.eflags = EFLAGS_DEFAULT_1 | EFLAGS_IF;
   10bd7:	8b 45 08             	mov    0x8(%ebp),%eax
   10bda:	c7 40 6c 02 02 00 00 	movl   $0x202,0x6c(%eax)

    //8.创建当前进程的虚拟页目录表，并设置cr3寄存器
    uint32_t page_dir = memory_creat_uvm();
   10be1:	e8 fb fa ff ff       	call   106e1 <memory_creat_uvm>
   10be6:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (page_dir == 0) return -1;
   10be9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   10bed:	75 07                	jne    10bf6 <tss_init+0xd8>
   10bef:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10bf4:	eb 41                	jmp    10c37 <tss_init+0x119>
    task->tss.cr3 = page_dir;
   10bf6:	8b 45 08             	mov    0x8(%ebp),%eax
   10bf9:	8b 55 ec             	mov    -0x14(%ebp),%edx
   10bfc:	89 50 64             	mov    %edx,0x64(%eax)
    


    //9.将该TSS段绑定到GDT中的某个段描述符
    uint32_t tss_selector = gdt_alloc_desc();
   10bff:	e8 ec 07 00 00       	call   113f0 <gdt_alloc_desc>
   10c04:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (tss_selector < 0) {
        log_printf("alloc tss failed!");
        return -1;
    }
    segment_desc_set(tss_selector, (uint32_t)&task->tss, sizeof(task->tss), 
   10c07:	8b 45 08             	mov    0x8(%ebp),%eax
   10c0a:	83 c0 48             	add    $0x48,%eax
   10c0d:	89 c2                	mov    %eax,%edx
   10c0f:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10c12:	0f b7 c0             	movzwl %ax,%eax
   10c15:	68 89 00 00 00       	push   $0x89
   10c1a:	6a 68                	push   $0x68
   10c1c:	52                   	push   %edx
   10c1d:	50                   	push   %eax
   10c1e:	e8 7a 06 00 00       	call   1129d <segment_desc_set>
   10c23:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_TYPE_TSS);


    //10.记录tss绑定到的描述符的选择子
    task->tss_selector = tss_selector;
   10c26:	8b 45 08             	mov    0x8(%ebp),%eax
   10c29:	8b 55 e8             	mov    -0x18(%ebp),%edx
   10c2c:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)

    return 0;
   10c32:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10c37:	c9                   	leave  
   10c38:	c3                   	ret    

00010c39 <task_init>:
 * @param task 任务对象
 * @param entry 任务的入口地址
 * @param esp 任务指行时所用的栈顶指针
 * @return int 
 */
void task_init(task_t *task, const char* name, uint32_t entry, uint32_t esp) {
   10c39:	55                   	push   %ebp
   10c3a:	89 e5                	mov    %esp,%ebp
   10c3c:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t*)0);
   10c3f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10c43:	75 19                	jne    10c5e <task_init+0x25>
   10c45:	68 41 35 01 00       	push   $0x13541
   10c4a:	68 b8 35 01 00       	push   $0x135b8
   10c4f:	6a 6d                	push   $0x6d
   10c51:	68 54 35 01 00       	push   $0x13554
   10c56:	e8 70 19 00 00       	call   125cb <pannic>
   10c5b:	83 c4 10             	add    $0x10,%esp
    //1.初始化任务TSS段
    tss_init(task, entry, esp);
   10c5e:	83 ec 04             	sub    $0x4,%esp
   10c61:	ff 75 14             	push   0x14(%ebp)
   10c64:	ff 75 10             	push   0x10(%ebp)
   10c67:	ff 75 08             	push   0x8(%ebp)
   10c6a:	e8 af fe ff ff       	call   10b1e <tss_init>
   10c6f:	83 c4 10             	add    $0x10,%esp

    //2.初始化任务名称
    kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   10c72:	8b 45 08             	mov    0x8(%ebp),%eax
   10c75:	83 c0 10             	add    $0x10,%eax
   10c78:	83 ec 04             	sub    $0x4,%esp
   10c7b:	6a 20                	push   $0x20
   10c7d:	ff 75 0c             	push   0xc(%ebp)
   10c80:	50                   	push   %eax
   10c81:	e8 08 1d 00 00       	call   1298e <kernel_strncpy>
   10c86:	83 c4 10             	add    $0x10,%esp

    //3.初始化任务队列节点及就绪队列节点
    list_node_init(&task->ready_node);
   10c89:	8b 45 08             	mov    0x8(%ebp),%eax
   10c8c:	83 c0 30             	add    $0x30,%eax
   10c8f:	83 ec 0c             	sub    $0xc,%esp
   10c92:	50                   	push   %eax
   10c93:	e8 a1 fc ff ff       	call   10939 <list_node_init>
   10c98:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->task_node);
   10c9b:	8b 45 08             	mov    0x8(%ebp),%eax
   10c9e:	83 c0 38             	add    $0x38,%eax
   10ca1:	83 ec 0c             	sub    $0xc,%esp
   10ca4:	50                   	push   %eax
   10ca5:	e8 8f fc ff ff       	call   10939 <list_node_init>
   10caa:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   10cad:	8b 45 08             	mov    0x8(%ebp),%eax
   10cb0:	83 c0 40             	add    $0x40,%eax
   10cb3:	83 ec 0c             	sub    $0xc,%esp
   10cb6:	50                   	push   %eax
   10cb7:	e8 7d fc ff ff       	call   10939 <list_node_init>
   10cbc:	83 c4 10             	add    $0x10,%esp

    //4.初始化最大时间片数与当前拥有时间片数,以及延时时间片数
    task->slice_max = task->slice_curr = TASK_TIME_SLICE_DEFAULT;
   10cbf:	8b 45 08             	mov    0x8(%ebp),%eax
   10cc2:	c7 40 08 0a 00 00 00 	movl   $0xa,0x8(%eax)
   10cc9:	8b 45 08             	mov    0x8(%ebp),%eax
   10ccc:	8b 50 08             	mov    0x8(%eax),%edx
   10ccf:	8b 45 08             	mov    0x8(%ebp),%eax
   10cd2:	89 50 04             	mov    %edx,0x4(%eax)
    task->sleep = 0;
   10cd5:	8b 45 08             	mov    0x8(%ebp),%eax
   10cd8:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)

    
    idt_state_t state = idt_enter_protection();//TODO:加锁
   10cdf:	e8 94 0f 00 00       	call   11c78 <idt_enter_protection>
   10ce4:	89 45 f4             	mov    %eax,-0xc(%ebp)
   
    //5.将任务加入任务队列
    list_insert_last(&task_manager.task_list, &task->task_node);
   10ce7:	8b 45 08             	mov    0x8(%ebp),%eax
   10cea:	83 c0 38             	add    $0x38,%eax
   10ced:	83 ec 08             	sub    $0x8,%esp
   10cf0:	50                   	push   %eax
   10cf1:	68 10 70 01 00       	push   $0x17010
   10cf6:	e8 1b 22 00 00       	call   12f16 <list_insert_last>
   10cfb:	83 c4 10             	add    $0x10,%esp

    //6.将任务设置为就绪态
    task_set_ready(task);
   10cfe:	83 ec 0c             	sub    $0xc,%esp
   10d01:	ff 75 08             	push   0x8(%ebp)
   10d04:	e8 c3 01 00 00       	call   10ecc <task_set_ready>
   10d09:	83 c4 10             	add    $0x10,%esp

    
    idt_leave_protection(state);//TODO:解锁
   10d0c:	83 ec 0c             	sub    $0xc,%esp
   10d0f:	ff 75 f4             	push   -0xc(%ebp)
   10d12:	e8 79 0f 00 00       	call   11c90 <idt_leave_protection>
   10d17:	83 c4 10             	add    $0x10,%esp
}
   10d1a:	90                   	nop
   10d1b:	c9                   	leave  
   10d1c:	c3                   	ret    

00010d1d <empty_task>:
static uint32_t empty_task_stack[EMPTY_TASK_STACK_SIZE];
/**
 * @brief  空闲进程，当所有进程都延时运行时，让cpu运行空闲进程
 * 
 */
static void empty_task(void) {
   10d1d:	55                   	push   %ebp
   10d1e:	89 e5                	mov    %esp,%ebp
    while(1) {
        //停止cpu运行，让cpu等待时间中断
        hlt();
   10d20:	e8 6a fd ff ff       	call   10a8f <hlt>
   10d25:	eb f9                	jmp    10d20 <empty_task+0x3>

00010d27 <task_manager_init>:

/**
 * @brief  初始化任务管理器
 * 
 */
void task_manager_init(void) {
   10d27:	55                   	push   %ebp
   10d28:	89 e5                	mov    %esp,%ebp
   10d2a:	83 ec 18             	sub    $0x18,%esp
    //1.初始化应用程序及所有任务的代码段选择子和数据段选择子，以区分和内核选择子的特权级
    //应用程序运行在 DPL_3 下， 内核运行在DPL_0下，配合分页机制中的us位，0为内核特权级，1为用户特权级
    //就可做到特权级保护
    uint32_t data_selector = gdt_alloc_desc();
   10d2d:	e8 be 06 00 00       	call   113f0 <gdt_alloc_desc>
   10d32:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t code_selector = gdt_alloc_desc();
   10d35:	e8 b6 06 00 00       	call   113f0 <gdt_alloc_desc>
   10d3a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    segment_desc_set(data_selector, 0, 0xffffffff, SEG_ATTR_P | SEG_ATTR_DPL_3 | SEG_ATTR_S_NORMAL | SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);
   10d3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10d40:	0f b7 c0             	movzwl %ax,%eax
   10d43:	68 f2 40 00 00       	push   $0x40f2
   10d48:	6a ff                	push   $0xffffffff
   10d4a:	6a 00                	push   $0x0
   10d4c:	50                   	push   %eax
   10d4d:	e8 4b 05 00 00       	call   1129d <segment_desc_set>
   10d52:	83 c4 10             	add    $0x10,%esp
    segment_desc_set(code_selector, 0, 0xffffffff, SEG_ATTR_P | SEG_ATTR_DPL_3 | SEG_ATTR_S_NORMAL | SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);
   10d55:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10d58:	0f b7 c0             	movzwl %ax,%eax
   10d5b:	68 fa 40 00 00       	push   $0x40fa
   10d60:	6a ff                	push   $0xffffffff
   10d62:	6a 00                	push   $0x0
   10d64:	50                   	push   %eax
   10d65:	e8 33 05 00 00       	call   1129d <segment_desc_set>
   10d6a:	83 c4 10             	add    $0x10,%esp
    task_manager.app_code_selector = code_selector;
   10d6d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10d70:	a3 90 71 01 00       	mov    %eax,0x17190
    task_manager.app_data_selector = data_selector;
   10d75:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10d78:	a3 94 71 01 00       	mov    %eax,0x17194
    
    //2.初始化所有任务队列
    list_init(&task_manager.ready_list);
   10d7d:	83 ec 0c             	sub    $0xc,%esp
   10d80:	68 04 70 01 00       	push   $0x17004
   10d85:	e8 19 fc ff ff       	call   109a3 <list_init>
   10d8a:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   10d8d:	83 ec 0c             	sub    $0xc,%esp
   10d90:	68 10 70 01 00       	push   $0x17010
   10d95:	e8 09 fc ff ff       	call   109a3 <list_init>
   10d9a:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   10d9d:	83 ec 0c             	sub    $0xc,%esp
   10da0:	68 1c 70 01 00       	push   $0x1701c
   10da5:	e8 f9 fb ff ff       	call   109a3 <list_init>
   10daa:	83 c4 10             	add    $0x10,%esp

    //3.将当前任务置零
    task_manager.curr_task = (task_t*)0;
   10dad:	c7 05 00 70 01 00 00 	movl   $0x0,0x17000
   10db4:	00 00 00 

    //4.初始化空闲进程
    task_init(  &task_manager.empty_task,
   10db7:	ba a0 73 01 00       	mov    $0x173a0,%edx
   10dbc:	b8 1d 0d 01 00       	mov    $0x10d1d,%eax
   10dc1:	52                   	push   %edx
   10dc2:	50                   	push   %eax
   10dc3:	68 89 35 01 00       	push   $0x13589
   10dc8:	68 dc 70 01 00       	push   $0x170dc
   10dcd:	e8 67 fe ff ff       	call   10c39 <task_init>
   10dd2:	83 c4 10             	add    $0x10,%esp
                 (uint32_t)empty_task,
                 (uint32_t)&empty_task_stack[EMPTY_TASK_STACK_SIZE]);
                 

    //5.将空闲进程从就绪队列中取出
    task_set_unready(&task_manager.empty_task);
   10dd5:	83 ec 0c             	sub    $0xc,%esp
   10dd8:	68 dc 70 01 00       	push   $0x170dc
   10ddd:	e8 35 01 00 00       	call   10f17 <task_set_unready>
   10de2:	83 c4 10             	add    $0x10,%esp
    task_manager.empty_task.state = TASK_CREATED;
   10de5:	c7 05 dc 70 01 00 00 	movl   $0x0,0x170dc
   10dec:	00 00 00 

  
}
   10def:	90                   	nop
   10df0:	c9                   	leave  
   10df1:	c3                   	ret    

00010df2 <task_first_init>:

//       //4.将当前任务状态设置为运行态
//       task_manager.curr_task->state = TASK_RUNNING;
// }

void task_first_init(void) {
   10df2:	55                   	push   %ebp
   10df3:	89 e5                	mov    %esp,%ebp
   10df5:	83 ec 18             	sub    $0x18,%esp
    //1.声明第一个任务的符号
    void first_task_entry(void);

    //2.确定第一个任务进程需要的空间大小
    extern char s_first_task, e_first_task;
    uint32_t copy_size = (uint32_t)(&e_first_task - &s_first_task);   //进程所需空间大小
   10df8:	b8 54 20 03 00       	mov    $0x32054,%eax
   10dfd:	2d 00 20 03 00       	sub    $0x32000,%eax
   10e02:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t alloc_size = up2(copy_size, MEM_PAGE_SIZE);   //需要为进程分配的内存大小，按4kb对齐
   10e05:	68 00 10 00 00       	push   $0x1000
   10e0a:	ff 75 f4             	push   -0xc(%ebp)
   10e0d:	e8 66 fc ff ff       	call   10a78 <up2>
   10e12:	83 c4 08             	add    $0x8,%esp
   10e15:	89 45 f0             	mov    %eax,-0x10(%ebp)
    ASSERT(copy_size < alloc_size);
   10e18:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e1b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
   10e1e:	72 1c                	jb     10e3c <task_first_init+0x4a>
   10e20:	68 94 35 01 00       	push   $0x13594
   10e25:	68 e0 35 01 00       	push   $0x135e0
   10e2a:	68 dc 00 00 00       	push   $0xdc
   10e2f:	68 54 35 01 00       	push   $0x13554
   10e34:	e8 92 17 00 00       	call   125cb <pannic>
   10e39:	83 c4 10             	add    $0x10,%esp


    //3.初始化第一个任务,因为当前为操作系统进程，esp初始值随意赋值都可，
    // 因为当前进程已开启，cpu会在切换的时候保留真实的状态，即真实的esp值
    task_init(&task_manager.first_task, "first task", (uint32_t)first_task_entry, 0);
   10e3c:	b8 00 00 00 80       	mov    $0x80000000,%eax
   10e41:	6a 00                	push   $0x0
   10e43:	50                   	push   %eax
   10e44:	68 ab 35 01 00       	push   $0x135ab
   10e49:	68 28 70 01 00       	push   $0x17028
   10e4e:	e8 e6 fd ff ff       	call   10c39 <task_init>
   10e53:	83 c4 10             	add    $0x10,%esp
      
    //4.将当前任务的TSS选择子告诉cpu，用来切换任务时保存状态
    write_tr(task_manager.first_task.tss_selector);
   10e56:	a1 d8 70 01 00       	mov    0x170d8,%eax
   10e5b:	0f b7 c0             	movzwl %ax,%eax
   10e5e:	83 ec 0c             	sub    $0xc,%esp
   10e61:	50                   	push   %eax
   10e62:	e8 55 fc ff ff       	call   10abc <write_tr>
   10e67:	83 c4 10             	add    $0x10,%esp

    //5.将当前任务执行第一个任务
    task_manager.curr_task = &task_manager.first_task;
   10e6a:	c7 05 00 70 01 00 28 	movl   $0x17028,0x17000
   10e71:	70 01 00 

    //6.将当前页表设置为第一个任务的页表
    mmu_set_page_dir(task_manager.first_task.tss.cr3);
   10e74:	a1 8c 70 01 00       	mov    0x1708c,%eax
   10e79:	83 ec 0c             	sub    $0xc,%esp
   10e7c:	50                   	push   %eax
   10e7d:	e8 51 fc ff ff       	call   10ad3 <mmu_set_page_dir>
   10e82:	83 c4 10             	add    $0x10,%esp

    //7.将当前任务状态设置为运行态
    task_manager.curr_task->state = TASK_RUNNING;
   10e85:	a1 00 70 01 00       	mov    0x17000,%eax
   10e8a:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

    //8.进程的各个段还只是在虚拟地址中，所以要为各个段分配物理地址页空间，并进行映射
    memory_alloc_page_for((uint32_t)first_task_entry, alloc_size, PTE_P | PTE_W);
   10e90:	b8 00 00 00 80       	mov    $0x80000000,%eax
   10e95:	83 ec 04             	sub    $0x4,%esp
   10e98:	6a 03                	push   $0x3
   10e9a:	ff 75 f0             	push   -0x10(%ebp)
   10e9d:	50                   	push   %eax
   10e9e:	e8 74 fa ff ff       	call   10917 <memory_alloc_page_for>
   10ea3:	83 c4 10             	add    $0x10,%esp

    //9.将任务进程各个段从内核四个段之后的紧邻位置，拷贝到已分配好的且与虚拟地址对应的物理地址空间，实现代码隔离
    kernel_memcpy(first_task_entry, &s_first_task, alloc_size);
   10ea6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10ea9:	83 ec 04             	sub    $0x4,%esp
   10eac:	50                   	push   %eax
   10ead:	68 00 20 03 00       	push   $0x32000
   10eb2:	68 00 00 00 80       	push   $0x80000000
   10eb7:	e8 c2 1b 00 00       	call   12a7e <kernel_memcpy>
   10ebc:	83 c4 10             	add    $0x10,%esp
}
   10ebf:	90                   	nop
   10ec0:	c9                   	leave  
   10ec1:	c3                   	ret    

00010ec2 <task_first_task>:
/**
 * @brief  获取当前任务管理器的第一个任务
 * 
 * @return task_t* 
 */
task_t *task_first_task(void) {
   10ec2:	55                   	push   %ebp
   10ec3:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   10ec5:	b8 28 70 01 00       	mov    $0x17028,%eax
}
   10eca:	5d                   	pop    %ebp
   10ecb:	c3                   	ret    

00010ecc <task_set_ready>:
/**
 * @brief  将任务task加入就绪队列
 * 
 * @param task 需要加入就绪队列的任务
 */
void task_set_ready(task_t *task) {
   10ecc:	55                   	push   %ebp
   10ecd:	89 e5                	mov    %esp,%ebp
   10ecf:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   10ed2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10ed6:	75 1c                	jne    10ef4 <task_set_ready+0x28>
   10ed8:	68 41 35 01 00       	push   $0x13541
   10edd:	68 f0 35 01 00       	push   $0x135f0
   10ee2:	68 05 01 00 00       	push   $0x105
   10ee7:	68 54 35 01 00       	push   $0x13554
   10eec:	e8 da 16 00 00       	call   125cb <pannic>
   10ef1:	83 c4 10             	add    $0x10,%esp
    //1.将任务插入到就绪队列的尾部
    list_insert_last(&task_manager.ready_list, &task->ready_node);
   10ef4:	8b 45 08             	mov    0x8(%ebp),%eax
   10ef7:	83 c0 30             	add    $0x30,%eax
   10efa:	83 ec 08             	sub    $0x8,%esp
   10efd:	50                   	push   %eax
   10efe:	68 04 70 01 00       	push   $0x17004
   10f03:	e8 0e 20 00 00       	call   12f16 <list_insert_last>
   10f08:	83 c4 10             	add    $0x10,%esp

    //2.将任务状态设置为就绪态
    task->state = TASK_READY;
   10f0b:	8b 45 08             	mov    0x8(%ebp),%eax
   10f0e:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
}
   10f14:	90                   	nop
   10f15:	c9                   	leave  
   10f16:	c3                   	ret    

00010f17 <task_set_unready>:
/**
 * @brief  将任务task从就绪队列中取下
 * 
 * @param task 
 */
void task_set_unready(task_t *task) {
   10f17:	55                   	push   %ebp
   10f18:	89 e5                	mov    %esp,%ebp
   10f1a:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   10f1d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10f21:	75 1c                	jne    10f3f <task_set_unready+0x28>
   10f23:	68 41 35 01 00       	push   $0x13541
   10f28:	68 00 36 01 00       	push   $0x13600
   10f2d:	68 14 01 00 00       	push   $0x114
   10f32:	68 54 35 01 00       	push   $0x13554
   10f37:	e8 8f 16 00 00       	call   125cb <pannic>
   10f3c:	83 c4 10             	add    $0x10,%esp
    list_remove(&task_manager.ready_list, &task->ready_node);
   10f3f:	8b 45 08             	mov    0x8(%ebp),%eax
   10f42:	83 c0 30             	add    $0x30,%eax
   10f45:	83 ec 08             	sub    $0x8,%esp
   10f48:	50                   	push   %eax
   10f49:	68 04 70 01 00       	push   $0x17004
   10f4e:	e8 b8 21 00 00       	call   1310b <list_remove>
   10f53:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   10f56:	8b 45 08             	mov    0x8(%ebp),%eax
   10f59:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   10f5f:	90                   	nop
   10f60:	c9                   	leave  
   10f61:	c3                   	ret    

00010f62 <task_ready_first>:

/**
 * @brief  获取就绪队列中的第一个任务
 * 
 */
task_t* task_ready_first(void) {
   10f62:	55                   	push   %ebp
   10f63:	89 e5                	mov    %esp,%ebp
   10f65:	83 ec 18             	sub    $0x18,%esp
    list_node_t *ready_node = list_get_first(&task_manager.ready_list);
   10f68:	83 ec 0c             	sub    $0xc,%esp
   10f6b:	68 04 70 01 00       	push   $0x17004
   10f70:	e8 d7 fa ff ff       	call   10a4c <list_get_first>
   10f75:	83 c4 10             	add    $0x10,%esp
   10f78:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    return list_node_parent(ready_node, task_t, ready_node);
   10f7b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10f7f:	74 08                	je     10f89 <task_ready_first+0x27>
   10f81:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f84:	83 e8 30             	sub    $0x30,%eax
   10f87:	eb 05                	jmp    10f8e <task_ready_first+0x2c>
   10f89:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10f8e:	c9                   	leave  
   10f8f:	c3                   	ret    

00010f90 <task_current>:
/**
 * @brief  获取当前正在运行的任务
 * 
 * @return task_t* 
 */
task_t *task_current(void) {
   10f90:	55                   	push   %ebp
   10f91:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   10f93:	a1 00 70 01 00       	mov    0x17000,%eax
}
   10f98:	5d                   	pop    %ebp
   10f99:	c3                   	ret    

00010f9a <task_switch>:

/**
 * @brief  任务管理器进行任务切换
 * 
 */
void task_switch(void) {
   10f9a:	55                   	push   %ebp
   10f9b:	89 e5                	mov    %esp,%ebp
   10f9d:	83 ec 18             	sub    $0x18,%esp

    idt_state_t state = idt_enter_protection();//TODO:加锁
   10fa0:	e8 d3 0c 00 00       	call   11c78 <idt_enter_protection>
   10fa5:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //1.获取就绪队列中的第一个任务
    task_t *to = task_ready_first();
   10fa8:	e8 b5 ff ff ff       	call   10f62 <task_ready_first>
   10fad:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.若获取到的任务不是当前任务就进行切换
    if (to != task_manager.curr_task) {
   10fb0:	a1 00 70 01 00       	mov    0x17000,%eax
   10fb5:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   10fb8:	74 37                	je     10ff1 <task_switch+0x57>
        //3.获取当前任务
        task_t *from = task_manager.curr_task;
   10fba:	a1 00 70 01 00       	mov    0x17000,%eax
   10fbf:	89 45 ec             	mov    %eax,-0x14(%ebp)

        //4.目标任务若为空，则所有任务都在延时，让cpu运行空闲任务
        if (to == (task_t*)0) { 
   10fc2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10fc6:	75 07                	jne    10fcf <task_switch+0x35>
            to = &task_manager.empty_task;
   10fc8:	c7 45 f4 dc 70 01 00 	movl   $0x170dc,-0xc(%ebp)
        }
        //5.切换当前任务, 并将当前任务置为运行态
        to->state = TASK_RUNNING;
   10fcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10fd2:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        task_manager.curr_task = to;
   10fd8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10fdb:	a3 00 70 01 00       	mov    %eax,0x17000
        

        //6.进行任务切换
        task_switch_from_to(from, to);
   10fe0:	83 ec 08             	sub    $0x8,%esp
   10fe3:	ff 75 f4             	push   -0xc(%ebp)
   10fe6:	ff 75 ec             	push   -0x14(%ebp)
   10fe9:	e8 15 fb ff ff       	call   10b03 <task_switch_from_to>
   10fee:	83 c4 10             	add    $0x10,%esp
    } 

    idt_leave_protection(state);//TODO:解锁
   10ff1:	83 ec 0c             	sub    $0xc,%esp
   10ff4:	ff 75 f0             	push   -0x10(%ebp)
   10ff7:	e8 94 0c 00 00       	call   11c90 <idt_leave_protection>
   10ffc:	83 c4 10             	add    $0x10,%esp
}
   10fff:	90                   	nop
   11000:	c9                   	leave  
   11001:	c3                   	ret    

00011002 <sys_yield>:
/**
 * @brief  使当前正在运行的任务主动让出cpu
 * 
 * @return int 
 */
int sys_yield(void) {
   11002:	55                   	push   %ebp
   11003:	89 e5                	mov    %esp,%ebp
   11005:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   11008:	e8 6b 0c 00 00       	call   11c78 <idt_enter_protection>
   1100d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    //1.判断当前就绪队列中是否有多个任务
    if (list_get_size(&task_manager.ready_list) > 1) {
   11010:	83 ec 0c             	sub    $0xc,%esp
   11013:	68 04 70 01 00       	push   $0x17004
   11018:	e8 02 fa ff ff       	call   10a1f <list_get_size>
   1101d:	83 c4 10             	add    $0x10,%esp
   11020:	83 f8 01             	cmp    $0x1,%eax
   11023:	7e 29                	jle    1104e <sys_yield+0x4c>
        //2.获取当前任务  
        task_t *curr_task = task_current();
   11025:	e8 66 ff ff ff       	call   10f90 <task_current>
   1102a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        
        //3.将当前任务从就绪队列中取下
        task_set_unready(curr_task);
   1102d:	83 ec 0c             	sub    $0xc,%esp
   11030:	ff 75 f0             	push   -0x10(%ebp)
   11033:	e8 df fe ff ff       	call   10f17 <task_set_unready>
   11038:	83 c4 10             	add    $0x10,%esp

        //4.将当前任务重新加入到就绪队列的队尾
        task_set_ready(curr_task);
   1103b:	83 ec 0c             	sub    $0xc,%esp
   1103e:	ff 75 f0             	push   -0x10(%ebp)
   11041:	e8 86 fe ff ff       	call   10ecc <task_set_ready>
   11046:	83 c4 10             	add    $0x10,%esp

        //5.任务管理器运行下一个任务，从而释放cpu使用权
        task_switch();
   11049:	e8 4c ff ff ff       	call   10f9a <task_switch>
    }
    
    idt_leave_protection(state);//TODO:解锁
   1104e:	83 ec 0c             	sub    $0xc,%esp
   11051:	ff 75 f4             	push   -0xc(%ebp)
   11054:	e8 37 0c 00 00       	call   11c90 <idt_leave_protection>
   11059:	83 c4 10             	add    $0x10,%esp
    return 0;
   1105c:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11061:	c9                   	leave  
   11062:	c3                   	ret    

00011063 <task_slice_end>:
/**
 * @brief  提供给时钟中断使用，每中断一次，当前任务的时间片使用完一次
 *         减少当前任务的时间片数，并判断是否还有剩余时间片，若没有就进行任务切换
 * 
 */
void task_slice_end(void) {
   11063:	55                   	push   %ebp
   11064:	89 e5                	mov    %esp,%ebp
   11066:	83 ec 18             	sub    $0x18,%esp

    //1.遍历当前延时队列，判断是否有可唤醒的任务
    list_node_t *curr_sleep_node = list_get_first(&task_manager.sleep_list);
   11069:	83 ec 0c             	sub    $0xc,%esp
   1106c:	68 1c 70 01 00       	push   $0x1701c
   11071:	e8 d6 f9 ff ff       	call   10a4c <list_get_first>
   11076:	83 c4 10             	add    $0x10,%esp
   11079:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.遍历并判断每一个任务执行完当前时间片是否可被唤醒，若可以则唤醒
    while (curr_sleep_node) {
   1107c:	eb 62                	jmp    110e0 <task_slice_end+0x7d>
        
        list_node_t *next_sleep_node = list_node_next(curr_sleep_node);
   1107e:	83 ec 0c             	sub    $0xc,%esp
   11081:	ff 75 f4             	push   -0xc(%ebp)
   11084:	e8 ed f8 ff ff       	call   10976 <list_node_next>
   11089:	83 c4 10             	add    $0x10,%esp
   1108c:	89 45 ec             	mov    %eax,-0x14(%ebp)
        
        task_t *curr_sleep_task = list_node_parent(curr_sleep_node, task_t, ready_node);
   1108f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11093:	74 08                	je     1109d <task_slice_end+0x3a>
   11095:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11098:	83 e8 30             	sub    $0x30,%eax
   1109b:	eb 05                	jmp    110a2 <task_slice_end+0x3f>
   1109d:	b8 00 00 00 00       	mov    $0x0,%eax
   110a2:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (--curr_sleep_task->sleep == 0) {
   110a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
   110a8:	8b 40 0c             	mov    0xc(%eax),%eax
   110ab:	8d 50 ff             	lea    -0x1(%eax),%edx
   110ae:	8b 45 e8             	mov    -0x18(%ebp),%eax
   110b1:	89 50 0c             	mov    %edx,0xc(%eax)
   110b4:	8b 45 e8             	mov    -0x18(%ebp),%eax
   110b7:	8b 40 0c             	mov    0xc(%eax),%eax
   110ba:	85 c0                	test   %eax,%eax
   110bc:	75 1c                	jne    110da <task_slice_end+0x77>
            task_set_wakeup(curr_sleep_task);   //从延时队列中取下
   110be:	83 ec 0c             	sub    $0xc,%esp
   110c1:	ff 75 e8             	push   -0x18(%ebp)
   110c4:	e8 01 01 00 00       	call   111ca <task_set_wakeup>
   110c9:	83 c4 10             	add    $0x10,%esp
            task_set_ready(curr_sleep_task);    //加入就绪队列
   110cc:	83 ec 0c             	sub    $0xc,%esp
   110cf:	ff 75 e8             	push   -0x18(%ebp)
   110d2:	e8 f5 fd ff ff       	call   10ecc <task_set_ready>
   110d7:	83 c4 10             	add    $0x10,%esp
        }

        curr_sleep_node = next_sleep_node;
   110da:	8b 45 ec             	mov    -0x14(%ebp),%eax
   110dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr_sleep_node) {
   110e0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   110e4:	75 98                	jne    1107e <task_slice_end+0x1b>
    }

    // task_switch(); 没有必要立马进行任务切换，当前任务时间片用完后会自动切换
    //3.获取当前任务
    task_t *curr_task = task_current();
   110e6:	e8 a5 fe ff ff       	call   10f90 <task_current>
   110eb:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //4.若当前任务为空闲任务，则判断就绪队列是否为空
    if (curr_task == &task_manager.empty_task) {
   110ee:	81 7d f0 dc 70 01 00 	cmpl   $0x170dc,-0x10(%ebp)
   110f5:	75 23                	jne    1111a <task_slice_end+0xb7>
        
        if (list_is_empty(&task_manager.ready_list)) return;
   110f7:	83 ec 0c             	sub    $0xc,%esp
   110fa:	68 04 70 01 00       	push   $0x17004
   110ff:	e8 e6 f8 ff ff       	call   109ea <list_is_empty>
   11104:	83 c4 10             	add    $0x10,%esp
   11107:	85 c0                	test   %eax,%eax
   11109:	75 60                	jne    1116b <task_slice_end+0x108>
        
        task_manager.empty_task.state = TASK_CREATED;
   1110b:	c7 05 dc 70 01 00 00 	movl   $0x0,0x170dc
   11112:	00 00 00 
        
        task_switch();//就绪队列有任务，则直接切换任务
   11115:	e8 80 fe ff ff       	call   10f9a <task_switch>
    }

    //5.若当前任务为普通任务则，减小当前时间片数
    if (curr_task != &task_manager.empty_task && --curr_task->slice_curr == 0) {
   1111a:	81 7d f0 dc 70 01 00 	cmpl   $0x170dc,-0x10(%ebp)
   11121:	74 49                	je     1116c <task_slice_end+0x109>
   11123:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11126:	8b 40 08             	mov    0x8(%eax),%eax
   11129:	8d 50 ff             	lea    -0x1(%eax),%edx
   1112c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1112f:	89 50 08             	mov    %edx,0x8(%eax)
   11132:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11135:	8b 40 08             	mov    0x8(%eax),%eax
   11138:	85 c0                	test   %eax,%eax
   1113a:	75 30                	jne    1116c <task_slice_end+0x109>
        //6.时间片数用完了，重置时间片并进行任务切换
        curr_task->slice_curr = curr_task->slice_max;
   1113c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1113f:	8b 50 04             	mov    0x4(%eax),%edx
   11142:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11145:	89 50 08             	mov    %edx,0x8(%eax)
        task_set_unready(curr_task);
   11148:	83 ec 0c             	sub    $0xc,%esp
   1114b:	ff 75 f0             	push   -0x10(%ebp)
   1114e:	e8 c4 fd ff ff       	call   10f17 <task_set_unready>
   11153:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   11156:	83 ec 0c             	sub    $0xc,%esp
   11159:	ff 75 f0             	push   -0x10(%ebp)
   1115c:	e8 6b fd ff ff       	call   10ecc <task_set_ready>
   11161:	83 c4 10             	add    $0x10,%esp
        task_switch();
   11164:	e8 31 fe ff ff       	call   10f9a <task_switch>
   11169:	eb 01                	jmp    1116c <task_slice_end+0x109>
        if (list_is_empty(&task_manager.ready_list)) return;
   1116b:	90                   	nop
    }
}
   1116c:	c9                   	leave  
   1116d:	c3                   	ret    

0001116e <task_set_sleep>:
 * @brief  设置进程延时的时间片数
 * 
 * @param task 需要延时的进程
 * @param slice 延时的时间片数
 */
void task_set_sleep(task_t *task, uint32_t slice) {
   1116e:	55                   	push   %ebp
   1116f:	89 e5                	mov    %esp,%ebp
   11171:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   11174:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11178:	75 1c                	jne    11196 <task_set_sleep+0x28>
   1117a:	68 41 35 01 00       	push   $0x13541
   1117f:	68 54 36 01 00       	push   $0x13654
   11184:	68 a2 01 00 00       	push   $0x1a2
   11189:	68 54 35 01 00       	push   $0x13554
   1118e:	e8 38 14 00 00       	call   125cb <pannic>
   11193:	83 c4 10             	add    $0x10,%esp
    if (slice == 0) return;
   11196:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1119a:	74 2b                	je     111c7 <task_set_sleep+0x59>

    task->sleep = slice;
   1119c:	8b 55 0c             	mov    0xc(%ebp),%edx
   1119f:	8b 45 08             	mov    0x8(%ebp),%eax
   111a2:	89 50 0c             	mov    %edx,0xc(%eax)
    task->state = TASK_SLEEP;
   111a5:	8b 45 08             	mov    0x8(%ebp),%eax
   111a8:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    list_insert_last(&task_manager.sleep_list, &task->ready_node);
   111ae:	8b 45 08             	mov    0x8(%ebp),%eax
   111b1:	83 c0 30             	add    $0x30,%eax
   111b4:	83 ec 08             	sub    $0x8,%esp
   111b7:	50                   	push   %eax
   111b8:	68 1c 70 01 00       	push   $0x1701c
   111bd:	e8 54 1d 00 00       	call   12f16 <list_insert_last>
   111c2:	83 c4 10             	add    $0x10,%esp
   111c5:	eb 01                	jmp    111c8 <task_set_sleep+0x5a>
    if (slice == 0) return;
   111c7:	90                   	nop
}
   111c8:	c9                   	leave  
   111c9:	c3                   	ret    

000111ca <task_set_wakeup>:
/**
 * @brief  唤醒正在延时的进程
 * 
 * @param task 
 */
void task_set_wakeup(task_t *task) {
   111ca:	55                   	push   %ebp
   111cb:	89 e5                	mov    %esp,%ebp
   111cd:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   111d0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   111d4:	75 1c                	jne    111f2 <task_set_wakeup+0x28>
   111d6:	68 41 35 01 00       	push   $0x13541
   111db:	68 64 36 01 00       	push   $0x13664
   111e0:	68 b0 01 00 00       	push   $0x1b0
   111e5:	68 54 35 01 00       	push   $0x13554
   111ea:	e8 dc 13 00 00       	call   125cb <pannic>
   111ef:	83 c4 10             	add    $0x10,%esp
    list_remove(&task_manager.sleep_list, &task->ready_node);
   111f2:	8b 45 08             	mov    0x8(%ebp),%eax
   111f5:	83 c0 30             	add    $0x30,%eax
   111f8:	83 ec 08             	sub    $0x8,%esp
   111fb:	50                   	push   %eax
   111fc:	68 1c 70 01 00       	push   $0x1701c
   11201:	e8 05 1f 00 00       	call   1310b <list_remove>
   11206:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   11209:	8b 45 08             	mov    0x8(%ebp),%eax
   1120c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   11212:	90                   	nop
   11213:	c9                   	leave  
   11214:	c3                   	ret    

00011215 <sys_sleep>:
/**
 * @brief  使进程进入延时状态
 * 
 * @param ms 延时的时间，以ms为单位
 */
void sys_sleep(uint32_t ms) {
   11215:	55                   	push   %ebp
   11216:	89 e5                	mov    %esp,%ebp
   11218:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection(); //TODO:加锁
   1121b:	e8 58 0a 00 00       	call   11c78 <idt_enter_protection>
   11220:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //1.获取当前任务  
    task_t *curr_task = task_current();
   11223:	e8 68 fd ff ff       	call   10f90 <task_current>
   11228:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    //2.将当前任务离开就绪队列
    task_set_unready(curr_task);
   1122b:	83 ec 0c             	sub    $0xc,%esp
   1122e:	ff 75 f0             	push   -0x10(%ebp)
   11231:	e8 e1 fc ff ff       	call   10f17 <task_set_unready>
   11236:	83 c4 10             	add    $0x10,%esp

    //3.计算出需要延时的时间片数，对时间片数向上取整，保证进程至少能延时指定时间
    uint32_t slice = (ms + (OS_TICKS_MS - 1)) / OS_TICKS_MS;
   11239:	8b 45 08             	mov    0x8(%ebp),%eax
   1123c:	83 c0 09             	add    $0x9,%eax
   1123f:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   11244:	f7 e2                	mul    %edx
   11246:	89 d0                	mov    %edx,%eax
   11248:	c1 e8 03             	shr    $0x3,%eax
   1124b:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //4.将当前任务放入延时队列，并设置延时时间片数
    task_set_sleep(curr_task, slice);
   1124e:	83 ec 08             	sub    $0x8,%esp
   11251:	ff 75 ec             	push   -0x14(%ebp)
   11254:	ff 75 f0             	push   -0x10(%ebp)
   11257:	e8 12 ff ff ff       	call   1116e <task_set_sleep>
   1125c:	83 c4 10             	add    $0x10,%esp

    //5.切换任务
    task_switch();
   1125f:	e8 36 fd ff ff       	call   10f9a <task_switch>

    idt_leave_protection(state); //TODO:解锁
   11264:	83 ec 0c             	sub    $0xc,%esp
   11267:	ff 75 f4             	push   -0xc(%ebp)
   1126a:	e8 21 0a 00 00       	call   11c90 <idt_leave_protection>
   1126f:	83 c4 10             	add    $0x10,%esp
   11272:	90                   	nop
   11273:	c9                   	leave  
   11274:	c3                   	ret    

00011275 <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   11275:	55                   	push   %ebp
   11276:	89 e5                	mov    %esp,%ebp
   11278:	83 ec 10             	sub    $0x10,%esp
  gdt.start31_16 = (start >> 16) & 0xffff;  // 初始化GDT地址的高16位
   1127b:	8b 45 08             	mov    0x8(%ebp),%eax
   1127e:	c1 e8 10             	shr    $0x10,%eax
   11281:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  gdt.start15_0 = start & 0xffff;           // 初始化GDT地址的低16位
   11285:	8b 45 08             	mov    0x8(%ebp),%eax
   11288:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   1128c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1128f:	83 e8 01             	sub    $0x1,%eax
  gdt.limit =
   11292:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   11296:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   1129a:	90                   	nop
   1129b:	c9                   	leave  
   1129c:	c3                   	ret    

0001129d <segment_desc_set>:
 *                 即2的13次方个段，也就是8192
 * @param base 该段在内存中的真实段基址
 * @param limit 该段的段界限，是一个偏移量，表示段中最大的偏移界限
 * @param attr 该段的属性位
 */
void segment_desc_set(uint16_t selector,  uint32_t base, uint32_t limit, uint16_t attr) {
   1129d:	55                   	push   %ebp
   1129e:	89 e5                	mov    %esp,%ebp
   112a0:	83 ec 18             	sub    $0x18,%esp
   112a3:	8b 55 08             	mov    0x8(%ebp),%edx
   112a6:	8b 45 14             	mov    0x14(%ebp),%eax
   112a9:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
   112ad:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    //1. 获取该段描述符在内存中的起始地址，selector >> 3 取出3~15位才是其在全局描述符中的下标
    segment_desc_t *desc = gdt_table + (selector >> 3);
   112b1:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   112b5:	66 c1 e8 03          	shr    $0x3,%ax
   112b9:	0f b7 c0             	movzwl %ax,%eax
   112bc:	c1 e0 03             	shl    $0x3,%eax
   112bf:	05 a0 73 01 00       	add    $0x173a0,%eax
   112c4:	89 45 fc             	mov    %eax,-0x4(%ebp)

    //2. 设置段基地址
    desc->base15_0 = (uint16_t)base;
   112c7:	8b 45 0c             	mov    0xc(%ebp),%eax
   112ca:	89 c2                	mov    %eax,%edx
   112cc:	8b 45 fc             	mov    -0x4(%ebp),%eax
   112cf:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (uint8_t)(base >> 16);
   112d3:	8b 45 0c             	mov    0xc(%ebp),%eax
   112d6:	c1 e8 10             	shr    $0x10,%eax
   112d9:	89 c2                	mov    %eax,%edx
   112db:	8b 45 fc             	mov    -0x4(%ebp),%eax
   112de:	88 50 04             	mov    %dl,0x4(%eax)
    desc->base31_24 = (uint8_t)(base >> 24);
   112e1:	8b 45 0c             	mov    0xc(%ebp),%eax
   112e4:	c1 e8 18             	shr    $0x18,%eax
   112e7:	89 c2                	mov    %eax,%edx
   112e9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   112ec:	88 50 07             	mov    %dl,0x7(%eax)

    //3. 设置段界限
    if (limit > 0xfffff) { //limit大于了20位能表示的最大值
   112ef:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   112f6:	76 1d                	jbe    11315 <segment_desc_set+0x78>
        //将limit的粒度设置为 4kb，即将属性位G置1
        desc->attr |= 0x8000;
   112f8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   112fb:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   112ff:	66 0d 00 80          	or     $0x8000,%ax
   11303:	89 c2                	mov    %eax,%edx
   11305:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11308:	66 89 50 05          	mov    %dx,0x5(%eax)

        //将limit改成以 4kb 为单位
        limit /= (4 * 1024);
   1130c:	8b 45 10             	mov    0x10(%ebp),%eax
   1130f:	c1 e8 0c             	shr    $0xc,%eax
   11312:	89 45 10             	mov    %eax,0x10(%ebp)

    }
    desc->limit15_0 = (uint16_t)limit;
   11315:	8b 45 10             	mov    0x10(%ebp),%eax
   11318:	89 c2                	mov    %eax,%edx
   1131a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1131d:	66 89 10             	mov    %dx,(%eax)
    desc->attr |= ((uint16_t)(limit >> 8) & 0x0f00); //将limit高4位赋值到attr的8~11位(段界限的高4位)
   11320:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11323:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   11327:	89 c2                	mov    %eax,%edx
   11329:	8b 45 10             	mov    0x10(%ebp),%eax
   1132c:	c1 e8 08             	shr    $0x8,%eax
   1132f:	66 25 00 0f          	and    $0xf00,%ax
   11333:	09 d0                	or     %edx,%eax
   11335:	89 c2                	mov    %eax,%edx
   11337:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1133a:	66 89 50 05          	mov    %dx,0x5(%eax)

    //4.设置属性位
    desc->attr |= attr & 0xf0ff;
   1133e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11341:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   11345:	89 c2                	mov    %eax,%edx
   11347:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   1134b:	80 e4 f0             	and    $0xf0,%ah
   1134e:	09 d0                	or     %edx,%eax
   11350:	89 c2                	mov    %eax,%edx
   11352:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11355:	66 89 50 05          	mov    %dx,0x5(%eax)


}
   11359:	90                   	nop
   1135a:	c9                   	leave  
   1135b:	c3                   	ret    

0001135c <gdt_init>:

/**
 * @brief  初始化GDT
 * 
 */
void gdt_init(void) {
   1135c:	55                   	push   %ebp
   1135d:	89 e5                	mov    %esp,%ebp
   1135f:	83 ec 18             	sub    $0x18,%esp
    //TODO:暂时将所有段都初始化为0
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   11362:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11369:	eb 1c                	jmp    11387 <gdt_init+0x2b>
        segment_desc_set(i << 3, 0, 0, 0);
   1136b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1136e:	c1 e0 03             	shl    $0x3,%eax
   11371:	0f b7 c0             	movzwl %ax,%eax
   11374:	6a 00                	push   $0x0
   11376:	6a 00                	push   $0x0
   11378:	6a 00                	push   $0x0
   1137a:	50                   	push   %eax
   1137b:	e8 1d ff ff ff       	call   1129d <segment_desc_set>
   11380:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   11383:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11387:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   1138e:	7e db                	jle    1136b <gdt_init+0xf>
        is_alloc[i] == 0;
    }

    //使用平坦模型，即段基址为0, 段界限直接用最大值，界限粒度为4kb，即段大小为4GB
    //1.设置内核的数据段,并将其标记
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff,
   11390:	68 92 40 00 00       	push   $0x4092
   11395:	6a ff                	push   $0xffffffff
   11397:	6a 00                	push   $0x0
   11399:	6a 10                	push   $0x10
   1139b:	e8 fd fe ff ff       	call   1129d <segment_desc_set>
   113a0:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL | 
                    SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_DS >> 3] = 1;
   113a3:	c7 05 a8 73 02 00 01 	movl   $0x1,0x273a8
   113aa:	00 00 00 

    //2.设置内核的代码段，并将其标记
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff,
   113ad:	68 9a 40 00 00       	push   $0x409a
   113b2:	6a ff                	push   $0xffffffff
   113b4:	6a 00                	push   $0x0
   113b6:	6a 08                	push   $0x8
   113b8:	e8 e0 fe ff ff       	call   1129d <segment_desc_set>
   113bd:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL |
                    SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_CS >> 3] = 1;
   113c0:	c7 05 a4 73 02 00 01 	movl   $0x1,0x273a4
   113c7:	00 00 00 
    //3.加载新的GDT表
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   113ca:	b8 a0 73 01 00       	mov    $0x173a0,%eax
   113cf:	68 00 00 01 00       	push   $0x10000
   113d4:	50                   	push   %eax
   113d5:	e8 9b fe ff ff       	call   11275 <lgdt>
   113da:	83 c4 08             	add    $0x8,%esp

    //4.初始化互斥锁
    mutex_init(&mutex);
   113dd:	83 ec 0c             	sub    $0xc,%esp
   113e0:	68 a0 f3 02 00       	push   $0x2f3a0
   113e5:	e8 cc 0a 00 00       	call   11eb6 <mutex_init>
   113ea:	83 c4 10             	add    $0x10,%esp
}
   113ed:	90                   	nop
   113ee:	c9                   	leave  
   113ef:	c3                   	ret    

000113f0 <gdt_alloc_desc>:
/**
 * @brief  寻找gdt中未赋值的段描述符空间
 * 
 * @return int 返回的找到的描述符的选择子
 */
int gdt_alloc_desc() {
   113f0:	55                   	push   %ebp
   113f1:	89 e5                	mov    %esp,%ebp
   113f3:	83 ec 18             	sub    $0x18,%esp

    mutex_lock(&mutex);//TODO:加锁
   113f6:	83 ec 0c             	sub    $0xc,%esp
   113f9:	68 a0 f3 02 00       	push   $0x2f3a0
   113fe:	e8 00 0b 00 00       	call   11f03 <mutex_lock>
   11403:	83 c4 10             	add    $0x10,%esp

    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   11406:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   1140d:	eb 38                	jmp    11447 <gdt_alloc_desc+0x57>
        if (is_alloc[i] == 0)  {
   1140f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11412:	8b 04 85 a0 73 02 00 	mov    0x273a0(,%eax,4),%eax
   11419:	85 c0                	test   %eax,%eax
   1141b:	75 26                	jne    11443 <gdt_alloc_desc+0x53>
            is_alloc[i] = 1;
   1141d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11420:	c7 04 85 a0 73 02 00 	movl   $0x1,0x273a0(,%eax,4)
   11427:	01 00 00 00 

            mutex_unlock(&mutex);//TODO:解锁
   1142b:	83 ec 0c             	sub    $0xc,%esp
   1142e:	68 a0 f3 02 00       	push   $0x2f3a0
   11433:	e8 5c 0b 00 00       	call   11f94 <mutex_unlock>
   11438:	83 c4 10             	add    $0x10,%esp
            return (i << 3);
   1143b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1143e:	c1 e0 03             	shl    $0x3,%eax
   11441:	eb 22                	jmp    11465 <gdt_alloc_desc+0x75>
    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   11443:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11447:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   1144e:	7e bf                	jle    1140f <gdt_alloc_desc+0x1f>
        }
    }

    mutex_unlock(&mutex);//TODO:解锁
   11450:	83 ec 0c             	sub    $0xc,%esp
   11453:	68 a0 f3 02 00       	push   $0x2f3a0
   11458:	e8 37 0b 00 00       	call   11f94 <mutex_unlock>
   1145d:	83 c4 10             	add    $0x10,%esp
    return -1;
   11460:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11465:	c9                   	leave  
   11466:	c3                   	ret    

00011467 <cli>:
static inline void cli(void) { __asm__ __volatile__("cli"); }
   11467:	55                   	push   %ebp
   11468:	89 e5                	mov    %esp,%ebp
   1146a:	fa                   	cli    
   1146b:	90                   	nop
   1146c:	5d                   	pop    %ebp
   1146d:	c3                   	ret    

0001146e <sti>:
static inline void sti(void) { __asm__ __volatile__("sti"); }
   1146e:	55                   	push   %ebp
   1146f:	89 e5                	mov    %esp,%ebp
   11471:	fb                   	sti    
   11472:	90                   	nop
   11473:	5d                   	pop    %ebp
   11474:	c3                   	ret    

00011475 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   11475:	55                   	push   %ebp
   11476:	89 e5                	mov    %esp,%ebp
   11478:	f4                   	hlt    
   11479:	90                   	nop
   1147a:	5d                   	pop    %ebp
   1147b:	c3                   	ret    

0001147c <inb>:
static inline uint8_t inb(uint16_t port) {
   1147c:	55                   	push   %ebp
   1147d:	89 e5                	mov    %esp,%ebp
   1147f:	83 ec 14             	sub    $0x14,%esp
   11482:	8b 45 08             	mov    0x8(%ebp),%eax
   11485:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   11489:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1148d:	89 c2                	mov    %eax,%edx
   1148f:	ec                   	in     (%dx),%al
   11490:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   11493:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   11497:	c9                   	leave  
   11498:	c3                   	ret    

00011499 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   11499:	55                   	push   %ebp
   1149a:	89 e5                	mov    %esp,%ebp
   1149c:	83 ec 08             	sub    $0x8,%esp
   1149f:	8b 45 08             	mov    0x8(%ebp),%eax
   114a2:	8b 55 0c             	mov    0xc(%ebp),%edx
   114a5:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   114a9:	89 d0                	mov    %edx,%eax
   114ab:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   114ae:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   114b2:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   114b6:	ee                   	out    %al,(%dx)
}
   114b7:	90                   	nop
   114b8:	c9                   	leave  
   114b9:	c3                   	ret    

000114ba <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   114ba:	55                   	push   %ebp
   114bb:	89 e5                	mov    %esp,%ebp
   114bd:	83 ec 10             	sub    $0x10,%esp
  idt.start31_16 = (start >> 16) & 0xffff;  // 初始化IDT地址的高16位
   114c0:	8b 45 08             	mov    0x8(%ebp),%eax
   114c3:	c1 e8 10             	shr    $0x10,%eax
   114c6:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  idt.start15_0 = start & 0xffff;           // 初始化IDT地址的低16位
   114ca:	8b 45 08             	mov    0x8(%ebp),%eax
   114cd:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   114d1:	8b 45 0c             	mov    0xc(%ebp),%eax
   114d4:	83 e8 01             	sub    $0x1,%eax
  idt.limit =
   114d7:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   114db:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   114df:	90                   	nop
   114e0:	c9                   	leave  
   114e1:	c3                   	ret    

000114e2 <read_eflags>:
/**
 * @brief  读取当前cpu的eflags寄存器
 * 
 * @return uint32_t 放回eflags的值
 */
static inline uint32_t read_eflags(void) {
   114e2:	55                   	push   %ebp
   114e3:	89 e5                	mov    %esp,%ebp
   114e5:	83 ec 10             	sub    $0x10,%esp
  uint32_t eflags;
  //pushf 压入eflags的值到栈中
  __asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   114e8:	9c                   	pushf  
   114e9:	58                   	pop    %eax
   114ea:	89 45 fc             	mov    %eax,-0x4(%ebp)
  
  return eflags;
   114ed:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   114f0:	c9                   	leave  
   114f1:	c3                   	ret    

000114f2 <write_eflags>:
/**
 * @brief  将状态state写入eflags寄存器
 * 
 * @param state 
 */
static inline void write_eflags(uint32_t state) {
   114f2:	55                   	push   %ebp
   114f3:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("push %%eax\n\tpopf"::"a"(state));
   114f5:	8b 45 08             	mov    0x8(%ebp),%eax
   114f8:	50                   	push   %eax
   114f9:	9d                   	popf   
}
   114fa:	90                   	nop
   114fb:	5d                   	pop    %ebp
   114fc:	c3                   	ret    

000114fd <print_exception_fram>:
/**
 * @brief  打印异常栈帧信息
 * 
 * @param frame 栈帧
 */
static void print_exception_fram(const exception_frame_t *frame) {
   114fd:	55                   	push   %ebp
   114fe:	89 e5                	mov    %esp,%ebp
   11500:	57                   	push   %edi
   11501:	56                   	push   %esi
   11502:	53                   	push   %ebx
   11503:	83 ec 1c             	sub    $0x1c,%esp

  log_printf("------------------------stack frame info---------------------");
   11506:	83 ec 0c             	sub    $0xc,%esp
   11509:	68 74 36 01 00       	push   $0x13674
   1150e:	e8 87 1d 00 00       	call   1329a <log_printf>
   11513:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ:\t\t%d\nerror code:\t%d", frame->num, frame->error_code);
   11516:	8b 45 08             	mov    0x8(%ebp),%eax
   11519:	8b 50 34             	mov    0x34(%eax),%edx
   1151c:	8b 45 08             	mov    0x8(%ebp),%eax
   1151f:	8b 40 30             	mov    0x30(%eax),%eax
   11522:	83 ec 04             	sub    $0x4,%esp
   11525:	52                   	push   %edx
   11526:	50                   	push   %eax
   11527:	68 b2 36 01 00       	push   $0x136b2
   1152c:	e8 69 1d 00 00       	call   1329a <log_printf>
   11531:	83 c4 10             	add    $0x10,%esp
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
    //TODO:SS暂时没法获取，先用ds替代，之后再进行获取
    frame->cs, frame->ds, frame->ds, frame->es, frame->fs, frame->gs
   11534:	8b 45 08             	mov    0x8(%ebp),%eax
   11537:	8b 38                	mov    (%eax),%edi
   11539:	8b 45 08             	mov    0x8(%ebp),%eax
   1153c:	8b 70 04             	mov    0x4(%eax),%esi
   1153f:	8b 45 08             	mov    0x8(%ebp),%eax
   11542:	8b 58 08             	mov    0x8(%eax),%ebx
   11545:	8b 45 08             	mov    0x8(%ebp),%eax
   11548:	8b 48 0c             	mov    0xc(%eax),%ecx
   1154b:	8b 45 08             	mov    0x8(%ebp),%eax
   1154e:	8b 50 0c             	mov    0xc(%eax),%edx
   11551:	8b 45 08             	mov    0x8(%ebp),%eax
   11554:	8b 40 3c             	mov    0x3c(%eax),%eax
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
   11557:	83 ec 04             	sub    $0x4,%esp
   1155a:	57                   	push   %edi
   1155b:	56                   	push   %esi
   1155c:	53                   	push   %ebx
   1155d:	51                   	push   %ecx
   1155e:	52                   	push   %edx
   1155f:	50                   	push   %eax
   11560:	68 cc 36 01 00       	push   $0x136cc
   11565:	e8 30 1d 00 00       	call   1329a <log_printf>
   1156a:	83 c4 20             	add    $0x20,%esp
              "ESI:\t\t0x%x\n"
              "EDI:\t\t0x%x\n"
              "EBP:\t\t0x%x\n"
              "ESP:\t\t0x%x", 
              frame->eax, frame->ebx, frame->ecx, frame->edx,
              frame->esi, frame->edi, frame->ebp, frame->esp 
   1156d:	8b 45 08             	mov    0x8(%ebp),%eax
   11570:	8b 48 1c             	mov    0x1c(%eax),%ecx
   11573:	8b 45 08             	mov    0x8(%ebp),%eax
   11576:	8b 40 18             	mov    0x18(%eax),%eax
   11579:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   1157c:	8b 45 08             	mov    0x8(%ebp),%eax
   1157f:	8b 58 10             	mov    0x10(%eax),%ebx
   11582:	89 5d e0             	mov    %ebx,-0x20(%ebp)
   11585:	8b 45 08             	mov    0x8(%ebp),%eax
   11588:	8b 78 14             	mov    0x14(%eax),%edi
              frame->eax, frame->ebx, frame->ecx, frame->edx,
   1158b:	8b 45 08             	mov    0x8(%ebp),%eax
   1158e:	8b 70 24             	mov    0x24(%eax),%esi
   11591:	8b 45 08             	mov    0x8(%ebp),%eax
   11594:	8b 58 28             	mov    0x28(%eax),%ebx
   11597:	8b 45 08             	mov    0x8(%ebp),%eax
   1159a:	8b 50 20             	mov    0x20(%eax),%edx
   1159d:	8b 45 08             	mov    0x8(%ebp),%eax
   115a0:	8b 40 2c             	mov    0x2c(%eax),%eax
  log_printf( 
   115a3:	83 ec 0c             	sub    $0xc,%esp
   115a6:	51                   	push   %ecx
   115a7:	ff 75 e4             	push   -0x1c(%ebp)
   115aa:	ff 75 e0             	push   -0x20(%ebp)
   115ad:	57                   	push   %edi
   115ae:	56                   	push   %esi
   115af:	53                   	push   %ebx
   115b0:	52                   	push   %edx
   115b1:	50                   	push   %eax
   115b2:	68 fc 36 01 00       	push   $0x136fc
   115b7:	e8 de 1c 00 00       	call   1329a <log_printf>
   115bc:	83 c4 30             	add    $0x30,%esp
              );

  log_printf("EIP:\t\t0x%x\nEFLAGS:\t\t0x%x", frame->eip, frame->eflags);
   115bf:	8b 45 08             	mov    0x8(%ebp),%eax
   115c2:	8b 50 40             	mov    0x40(%eax),%edx
   115c5:	8b 45 08             	mov    0x8(%ebp),%eax
   115c8:	8b 40 38             	mov    0x38(%eax),%eax
   115cb:	83 ec 04             	sub    $0x4,%esp
   115ce:	52                   	push   %edx
   115cf:	50                   	push   %eax
   115d0:	68 54 37 01 00       	push   $0x13754
   115d5:	e8 c0 1c 00 00       	call   1329a <log_printf>
   115da:	83 c4 10             	add    $0x10,%esp
}
   115dd:	90                   	nop
   115de:	8d 65 f4             	lea    -0xc(%ebp),%esp
   115e1:	5b                   	pop    %ebx
   115e2:	5e                   	pop    %esi
   115e3:	5f                   	pop    %edi
   115e4:	5d                   	pop    %ebp
   115e5:	c3                   	ret    

000115e6 <do_default_handler>:
 *
 * @param message 异常信息
 * @param fram  异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
static void do_default_handler(const exception_frame_t *frame,
                               const char *message) {
   115e6:	55                   	push   %ebp
   115e7:	89 e5                	mov    %esp,%ebp
   115e9:	83 ec 08             	sub    $0x8,%esp

  log_printf("---------------------------------------------------");
   115ec:	83 ec 0c             	sub    $0xc,%esp
   115ef:	68 70 37 01 00       	push   $0x13770
   115f4:	e8 a1 1c 00 00       	call   1329a <log_printf>
   115f9:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ/Exception happend: %s", message);
   115fc:	83 ec 08             	sub    $0x8,%esp
   115ff:	ff 75 0c             	push   0xc(%ebp)
   11602:	68 a4 37 01 00       	push   $0x137a4
   11607:	e8 8e 1c 00 00       	call   1329a <log_printf>
   1160c:	83 c4 10             	add    $0x10,%esp
  print_exception_fram(frame);
   1160f:	83 ec 0c             	sub    $0xc,%esp
   11612:	ff 75 08             	push   0x8(%ebp)
   11615:	e8 e3 fe ff ff       	call   114fd <print_exception_fram>
   1161a:	83 c4 10             	add    $0x10,%esp
                              
  
  for (;;) {
    hlt();
   1161d:	e8 53 fe ff ff       	call   11475 <hlt>
   11622:	eb f9                	jmp    1161d <do_default_handler+0x37>

00011624 <do_handler_unknown>:

/**
 * @brief   对没有针对性处理程序的异常进行处理
 * @param frame 异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
void do_handler_unknown(const exception_frame_t *frame) {
   11624:	55                   	push   %ebp
   11625:	89 e5                	mov    %esp,%ebp
   11627:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "unknown exception");
   1162a:	83 ec 08             	sub    $0x8,%esp
   1162d:	68 be 37 01 00       	push   $0x137be
   11632:	ff 75 08             	push   0x8(%ebp)
   11635:	e8 ac ff ff ff       	call   115e6 <do_default_handler>
   1163a:	83 c4 10             	add    $0x10,%esp
}
   1163d:	90                   	nop
   1163e:	c9                   	leave  
   1163f:	c3                   	ret    

00011640 <do_handler_divider>:
/**
 * @brief  除0异常
 *
 * @param frame 异常栈帧
 */
void do_handler_divider(const exception_frame_t *frame) {
   11640:	55                   	push   %ebp
   11641:	89 e5                	mov    %esp,%ebp
   11643:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "divider exception");
   11646:	83 ec 08             	sub    $0x8,%esp
   11649:	68 d0 37 01 00       	push   $0x137d0
   1164e:	ff 75 08             	push   0x8(%ebp)
   11651:	e8 90 ff ff ff       	call   115e6 <do_default_handler>
   11656:	83 c4 10             	add    $0x10,%esp
}
   11659:	90                   	nop
   1165a:	c9                   	leave  
   1165b:	c3                   	ret    

0001165c <do_handler_debug>:

void do_handler_debug(const exception_frame_t *frame) {
   1165c:	55                   	push   %ebp
   1165d:	89 e5                	mov    %esp,%ebp
   1165f:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "debug exception");
   11662:	83 ec 08             	sub    $0x8,%esp
   11665:	68 e2 37 01 00       	push   $0x137e2
   1166a:	ff 75 08             	push   0x8(%ebp)
   1166d:	e8 74 ff ff ff       	call   115e6 <do_default_handler>
   11672:	83 c4 10             	add    $0x10,%esp
}
   11675:	90                   	nop
   11676:	c9                   	leave  
   11677:	c3                   	ret    

00011678 <do_handler_nmi>:

void do_handler_nmi(const exception_frame_t *frame) {
   11678:	55                   	push   %ebp
   11679:	89 e5                	mov    %esp,%ebp
   1167b:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "nmi exception");
   1167e:	83 ec 08             	sub    $0x8,%esp
   11681:	68 f2 37 01 00       	push   $0x137f2
   11686:	ff 75 08             	push   0x8(%ebp)
   11689:	e8 58 ff ff ff       	call   115e6 <do_default_handler>
   1168e:	83 c4 10             	add    $0x10,%esp
}
   11691:	90                   	nop
   11692:	c9                   	leave  
   11693:	c3                   	ret    

00011694 <do_handler_breakpoint>:
void do_handler_breakpoint(const exception_frame_t *frame) {
   11694:	55                   	push   %ebp
   11695:	89 e5                	mov    %esp,%ebp
   11697:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "breakpoint exception");
   1169a:	83 ec 08             	sub    $0x8,%esp
   1169d:	68 00 38 01 00       	push   $0x13800
   116a2:	ff 75 08             	push   0x8(%ebp)
   116a5:	e8 3c ff ff ff       	call   115e6 <do_default_handler>
   116aa:	83 c4 10             	add    $0x10,%esp
}
   116ad:	90                   	nop
   116ae:	c9                   	leave  
   116af:	c3                   	ret    

000116b0 <do_handler_overflow>:
void do_handler_overflow(const exception_frame_t *frame) {
   116b0:	55                   	push   %ebp
   116b1:	89 e5                	mov    %esp,%ebp
   116b3:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "overflow exception");
   116b6:	83 ec 08             	sub    $0x8,%esp
   116b9:	68 15 38 01 00       	push   $0x13815
   116be:	ff 75 08             	push   0x8(%ebp)
   116c1:	e8 20 ff ff ff       	call   115e6 <do_default_handler>
   116c6:	83 c4 10             	add    $0x10,%esp
}
   116c9:	90                   	nop
   116ca:	c9                   	leave  
   116cb:	c3                   	ret    

000116cc <do_handler_bound_range>:
void do_handler_bound_range(const exception_frame_t *frame) {
   116cc:	55                   	push   %ebp
   116cd:	89 e5                	mov    %esp,%ebp
   116cf:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "bound_range exception");
   116d2:	83 ec 08             	sub    $0x8,%esp
   116d5:	68 28 38 01 00       	push   $0x13828
   116da:	ff 75 08             	push   0x8(%ebp)
   116dd:	e8 04 ff ff ff       	call   115e6 <do_default_handler>
   116e2:	83 c4 10             	add    $0x10,%esp
}
   116e5:	90                   	nop
   116e6:	c9                   	leave  
   116e7:	c3                   	ret    

000116e8 <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(const exception_frame_t *frame) {
   116e8:	55                   	push   %ebp
   116e9:	89 e5                	mov    %esp,%ebp
   116eb:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_opcode exception");
   116ee:	83 ec 08             	sub    $0x8,%esp
   116f1:	68 3e 38 01 00       	push   $0x1383e
   116f6:	ff 75 08             	push   0x8(%ebp)
   116f9:	e8 e8 fe ff ff       	call   115e6 <do_default_handler>
   116fe:	83 c4 10             	add    $0x10,%esp
}
   11701:	90                   	nop
   11702:	c9                   	leave  
   11703:	c3                   	ret    

00011704 <do_handler_device_unavailable>:
void do_handler_device_unavailable(const exception_frame_t *frame) {
   11704:	55                   	push   %ebp
   11705:	89 e5                	mov    %esp,%ebp
   11707:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "device_unavailable exception");
   1170a:	83 ec 08             	sub    $0x8,%esp
   1170d:	68 57 38 01 00       	push   $0x13857
   11712:	ff 75 08             	push   0x8(%ebp)
   11715:	e8 cc fe ff ff       	call   115e6 <do_default_handler>
   1171a:	83 c4 10             	add    $0x10,%esp
}
   1171d:	90                   	nop
   1171e:	c9                   	leave  
   1171f:	c3                   	ret    

00011720 <do_handler_double_fault>:
void do_handler_double_fault(const exception_frame_t *frame) {
   11720:	55                   	push   %ebp
   11721:	89 e5                	mov    %esp,%ebp
   11723:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "double_fault exception");
   11726:	83 ec 08             	sub    $0x8,%esp
   11729:	68 74 38 01 00       	push   $0x13874
   1172e:	ff 75 08             	push   0x8(%ebp)
   11731:	e8 b0 fe ff ff       	call   115e6 <do_default_handler>
   11736:	83 c4 10             	add    $0x10,%esp
}
   11739:	90                   	nop
   1173a:	c9                   	leave  
   1173b:	c3                   	ret    

0001173c <do_handler_invalid_tss>:
void do_handler_invalid_tss(const exception_frame_t *frame) {
   1173c:	55                   	push   %ebp
   1173d:	89 e5                	mov    %esp,%ebp
   1173f:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_tss exception");
   11742:	83 ec 08             	sub    $0x8,%esp
   11745:	68 8b 38 01 00       	push   $0x1388b
   1174a:	ff 75 08             	push   0x8(%ebp)
   1174d:	e8 94 fe ff ff       	call   115e6 <do_default_handler>
   11752:	83 c4 10             	add    $0x10,%esp
}
   11755:	90                   	nop
   11756:	c9                   	leave  
   11757:	c3                   	ret    

00011758 <do_handler_segment_not_present>:
void do_handler_segment_not_present(const exception_frame_t *frame) {
   11758:	55                   	push   %ebp
   11759:	89 e5                	mov    %esp,%ebp
   1175b:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "segment_not_present exception");
   1175e:	83 ec 08             	sub    $0x8,%esp
   11761:	68 a1 38 01 00       	push   $0x138a1
   11766:	ff 75 08             	push   0x8(%ebp)
   11769:	e8 78 fe ff ff       	call   115e6 <do_default_handler>
   1176e:	83 c4 10             	add    $0x10,%esp
}
   11771:	90                   	nop
   11772:	c9                   	leave  
   11773:	c3                   	ret    

00011774 <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(const exception_frame_t *frame) {
   11774:	55                   	push   %ebp
   11775:	89 e5                	mov    %esp,%ebp
   11777:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "stack_segment_fault exception");
   1177a:	83 ec 08             	sub    $0x8,%esp
   1177d:	68 bf 38 01 00       	push   $0x138bf
   11782:	ff 75 08             	push   0x8(%ebp)
   11785:	e8 5c fe ff ff       	call   115e6 <do_default_handler>
   1178a:	83 c4 10             	add    $0x10,%esp
}
   1178d:	90                   	nop
   1178e:	c9                   	leave  
   1178f:	c3                   	ret    

00011790 <do_handler_general_protection>:
void do_handler_general_protection(const exception_frame_t *frame) {
   11790:	55                   	push   %ebp
   11791:	89 e5                	mov    %esp,%ebp
   11793:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "general_protection exception");
   11796:	83 ec 08             	sub    $0x8,%esp
   11799:	68 dd 38 01 00       	push   $0x138dd
   1179e:	ff 75 08             	push   0x8(%ebp)
   117a1:	e8 40 fe ff ff       	call   115e6 <do_default_handler>
   117a6:	83 c4 10             	add    $0x10,%esp
}
   117a9:	90                   	nop
   117aa:	c9                   	leave  
   117ab:	c3                   	ret    

000117ac <do_handler_page_fault>:
void do_handler_page_fault(const exception_frame_t *frame) {
   117ac:	55                   	push   %ebp
   117ad:	89 e5                	mov    %esp,%ebp
   117af:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "page_fault exception");
   117b2:	83 ec 08             	sub    $0x8,%esp
   117b5:	68 fa 38 01 00       	push   $0x138fa
   117ba:	ff 75 08             	push   0x8(%ebp)
   117bd:	e8 24 fe ff ff       	call   115e6 <do_default_handler>
   117c2:	83 c4 10             	add    $0x10,%esp
}
   117c5:	90                   	nop
   117c6:	c9                   	leave  
   117c7:	c3                   	ret    

000117c8 <do_handler_fpu_error>:
void do_handler_fpu_error(const exception_frame_t *frame) {
   117c8:	55                   	push   %ebp
   117c9:	89 e5                	mov    %esp,%ebp
   117cb:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "fpu_error exception");
   117ce:	83 ec 08             	sub    $0x8,%esp
   117d1:	68 0f 39 01 00       	push   $0x1390f
   117d6:	ff 75 08             	push   0x8(%ebp)
   117d9:	e8 08 fe ff ff       	call   115e6 <do_default_handler>
   117de:	83 c4 10             	add    $0x10,%esp
}
   117e1:	90                   	nop
   117e2:	c9                   	leave  
   117e3:	c3                   	ret    

000117e4 <do_handler_alignment_check>:
void do_handler_alignment_check(const exception_frame_t *frame) {
   117e4:	55                   	push   %ebp
   117e5:	89 e5                	mov    %esp,%ebp
   117e7:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "alignment_check exception");
   117ea:	83 ec 08             	sub    $0x8,%esp
   117ed:	68 23 39 01 00       	push   $0x13923
   117f2:	ff 75 08             	push   0x8(%ebp)
   117f5:	e8 ec fd ff ff       	call   115e6 <do_default_handler>
   117fa:	83 c4 10             	add    $0x10,%esp
}
   117fd:	90                   	nop
   117fe:	c9                   	leave  
   117ff:	c3                   	ret    

00011800 <do_handler_machine_check>:
void do_handler_machine_check(const exception_frame_t *frame) {
   11800:	55                   	push   %ebp
   11801:	89 e5                	mov    %esp,%ebp
   11803:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "machine_check exception");
   11806:	83 ec 08             	sub    $0x8,%esp
   11809:	68 3d 39 01 00       	push   $0x1393d
   1180e:	ff 75 08             	push   0x8(%ebp)
   11811:	e8 d0 fd ff ff       	call   115e6 <do_default_handler>
   11816:	83 c4 10             	add    $0x10,%esp
}
   11819:	90                   	nop
   1181a:	c9                   	leave  
   1181b:	c3                   	ret    

0001181c <do_handler_smd_exception>:
void do_handler_smd_exception(const exception_frame_t *frame) {
   1181c:	55                   	push   %ebp
   1181d:	89 e5                	mov    %esp,%ebp
   1181f:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "smd_exception exception");
   11822:	83 ec 08             	sub    $0x8,%esp
   11825:	68 55 39 01 00       	push   $0x13955
   1182a:	ff 75 08             	push   0x8(%ebp)
   1182d:	e8 b4 fd ff ff       	call   115e6 <do_default_handler>
   11832:	83 c4 10             	add    $0x10,%esp
}
   11835:	90                   	nop
   11836:	c9                   	leave  
   11837:	c3                   	ret    

00011838 <do_handler_virtual_exception>:
void do_handler_virtual_exception(const exception_frame_t *frame) {
   11838:	55                   	push   %ebp
   11839:	89 e5                	mov    %esp,%ebp
   1183b:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "virtual_exception exception");
   1183e:	83 ec 08             	sub    $0x8,%esp
   11841:	68 6d 39 01 00       	push   $0x1396d
   11846:	ff 75 08             	push   0x8(%ebp)
   11849:	e8 98 fd ff ff       	call   115e6 <do_default_handler>
   1184e:	83 c4 10             	add    $0x10,%esp
}
   11851:	90                   	nop
   11852:	c9                   	leave  
   11853:	c3                   	ret    

00011854 <do_handler_control_exception>:
void do_handler_control_exception(const exception_frame_t *frame) {
   11854:	55                   	push   %ebp
   11855:	89 e5                	mov    %esp,%ebp
   11857:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "control_exception exception");
   1185a:	83 ec 08             	sub    $0x8,%esp
   1185d:	68 89 39 01 00       	push   $0x13989
   11862:	ff 75 08             	push   0x8(%ebp)
   11865:	e8 7c fd ff ff       	call   115e6 <do_default_handler>
   1186a:	83 c4 10             	add    $0x10,%esp
}
   1186d:	90                   	nop
   1186e:	c9                   	leave  
   1186f:	c3                   	ret    

00011870 <gate_desc_set>:
 * @param selector 中断门对应的处理程序所在的段的选择子
 * @param offset 中段门对应的处理程序相对于所在段的偏移量
 * @param attr 中段门的属性
 */
static void gate_desc_set(gate_desc_t *desc, const uint16_t selector, const uint32_t offset,
                          const uint16_t attr) {
   11870:	55                   	push   %ebp
   11871:	89 e5                	mov    %esp,%ebp
   11873:	83 ec 08             	sub    $0x8,%esp
   11876:	8b 55 0c             	mov    0xc(%ebp),%edx
   11879:	8b 45 14             	mov    0x14(%ebp),%eax
   1187c:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11880:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
  // 1.初始化偏移量
  desc->offset15_0 = offset & 0xffff;
   11884:	8b 45 10             	mov    0x10(%ebp),%eax
   11887:	89 c2                	mov    %eax,%edx
   11889:	8b 45 08             	mov    0x8(%ebp),%eax
   1188c:	66 89 10             	mov    %dx,(%eax)
  desc->offset31_16 = (offset >> 16) & 0xffff;
   1188f:	8b 45 10             	mov    0x10(%ebp),%eax
   11892:	c1 e8 10             	shr    $0x10,%eax
   11895:	89 c2                	mov    %eax,%edx
   11897:	8b 45 08             	mov    0x8(%ebp),%eax
   1189a:	66 89 50 06          	mov    %dx,0x6(%eax)

  // 2.初始化选择子
  desc->selector = selector;
   1189e:	8b 45 08             	mov    0x8(%ebp),%eax
   118a1:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   118a5:	66 89 50 02          	mov    %dx,0x2(%eax)

  // 3.初始化属性位
  desc->attr = attr;
   118a9:	8b 45 08             	mov    0x8(%ebp),%eax
   118ac:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   118b0:	66 89 50 04          	mov    %dx,0x4(%eax)
}
   118b4:	90                   	nop
   118b5:	c9                   	leave  
   118b6:	c3                   	ret    

000118b7 <idt_install>:
 *
 * @param idt_num 异常的下标
 * @param handler 异常处理程序的偏移地址
 * @return int 成功返回 0 失败放回 -1
 */
int idt_install(const int idt_num, const idt_handler_t handler) {
   118b7:	55                   	push   %ebp
   118b8:	89 e5                	mov    %esp,%ebp
  // 1.判断IDT下标是否越界
  if (idt_num >= IDT_TABLE_SIZE || idt_num < 0) return -1;
   118ba:	81 7d 08 ff 00 00 00 	cmpl   $0xff,0x8(%ebp)
   118c1:	7f 06                	jg     118c9 <idt_install+0x12>
   118c3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   118c7:	79 07                	jns    118d0 <idt_install+0x19>
   118c9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   118ce:	eb 25                	jmp    118f5 <idt_install+0x3e>

  // 2.在IDT表中设置下标为 idt_num 的中断门
  gate_desc_set(idt_table + idt_num, KERNEL_SELECTOR_CS, (uint32_t)handler,
   118d0:	8b 45 0c             	mov    0xc(%ebp),%eax
   118d3:	8b 55 08             	mov    0x8(%ebp),%edx
   118d6:	c1 e2 03             	shl    $0x3,%edx
   118d9:	81 c2 c0 f3 02 00    	add    $0x2f3c0,%edx
   118df:	68 00 8e 00 00       	push   $0x8e00
   118e4:	50                   	push   %eax
   118e5:	6a 08                	push   $0x8
   118e7:	52                   	push   %edx
   118e8:	e8 83 ff ff ff       	call   11870 <gate_desc_set>
   118ed:	83 c4 10             	add    $0x10,%esp
                GATE_TYPE_INT | GATE_ATTR_P | GATE_ATTR_DPL_0);

  return 0;
   118f0:	b8 00 00 00 00       	mov    $0x0,%eax
}
   118f5:	c9                   	leave  
   118f6:	c3                   	ret    

000118f7 <init_pic>:

/**
 * @brief  初始化主从8259芯片
 * 
 */
static void init_pic(void) {
   118f7:	55                   	push   %ebp
   118f8:	89 e5                	mov    %esp,%ebp
  //1.对主片(8259A芯片)进行初始化, 写入时必须按照ICW1~4的顺序写入
  outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);  //ICW1:边缘触发，级联模式，需要ICW4
   118fa:	6a 11                	push   $0x11
   118fc:	6a 20                	push   $0x20
   118fe:	e8 96 fb ff ff       	call   11499 <outb>
   11903:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW2, PIC_ICW2_IDT_START);                //ICW2:起始中断向量号为0x20
   11906:	6a 20                	push   $0x20
   11908:	6a 21                	push   $0x21
   1190a:	e8 8a fb ff ff       	call   11499 <outb>
   1190f:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW3, PIC_ICW3_MASTER_CASCADE);           //ICW3:主片用IR2级联从片
   11912:	6a 04                	push   $0x4
   11914:	6a 21                	push   $0x21
   11916:	e8 7e fb ff ff       	call   11499 <outb>
   1191b:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW4, PIC_ICW4_8086);                     //ICW4:8086模式，正常EOI
   1191e:	6a 01                	push   $0x1
   11920:	6a 21                	push   $0x21
   11922:	e8 72 fb ff ff       	call   11499 <outb>
   11927:	83 c4 08             	add    $0x8,%esp

  //2.对从片(8259A芯片)进行初始化
  outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);
   1192a:	6a 11                	push   $0x11
   1192c:	68 a0 00 00 00       	push   $0xa0
   11931:	e8 63 fb ff ff       	call   11499 <outb>
   11936:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW2, PIC_ICW2_IDT_START + 8); //第一块芯片占用了8个中断，所以第二块芯片从第8个中断的下一个开始
   11939:	6a 28                	push   $0x28
   1193b:	68 a1 00 00 00       	push   $0xa1
   11940:	e8 54 fb ff ff       	call   11499 <outb>
   11945:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW3, PIC_ICW3_SLAVE_CASCADE);
   11948:	6a 02                	push   $0x2
   1194a:	68 a1 00 00 00       	push   $0xa1
   1194f:	e8 45 fb ff ff       	call   11499 <outb>
   11954:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW4, PIC_ICW4_8086);
   11957:	6a 01                	push   $0x1
   11959:	68 a1 00 00 00       	push   $0xa1
   1195e:	e8 36 fb ff ff       	call   11499 <outb>
   11963:	83 c4 08             	add    $0x8,%esp


  //3.初始化完两块8259芯片后，还需要为每一个中断设置处理程序
  //才可以去接收中断，所以现在要屏蔽中断，IMR位置1则屏蔽该中断请求，0则不屏蔽
  outb(PIC0_IMR, 0xfb); //屏蔽主片除 irq2(第3位) 以外的位传来的中断，(1111 1011)
   11966:	68 fb 00 00 00       	push   $0xfb
   1196b:	6a 21                	push   $0x21
   1196d:	e8 27 fb ff ff       	call   11499 <outb>
   11972:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_IMR, 0xff); //屏蔽从片的所有中断
   11975:	68 ff 00 00 00       	push   $0xff
   1197a:	68 a1 00 00 00       	push   $0xa1
   1197f:	e8 15 fb ff ff       	call   11499 <outb>
   11984:	83 c4 08             	add    $0x8,%esp


}
   11987:	90                   	nop
   11988:	c9                   	leave  
   11989:	c3                   	ret    

0001198a <idt_init>:

/**
 * @brief  初始化中断向量表
 *
 */
void idt_init(void) {
   1198a:	55                   	push   %ebp
   1198b:	89 e5                	mov    %esp,%ebp
   1198d:	83 ec 10             	sub    $0x10,%esp
  // 1.初始化IDT中的各个中断门(未知异常类型)
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   11990:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   11997:	eb 14                	jmp    119ad <idt_init+0x23>
    idt_install(i, (idt_handler_t)exception_handler_unknown);
   11999:	68 2a 00 01 00       	push   $0x1002a
   1199e:	ff 75 fc             	push   -0x4(%ebp)
   119a1:	e8 11 ff ff ff       	call   118b7 <idt_install>
   119a6:	83 c4 08             	add    $0x8,%esp
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   119a9:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   119ad:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   119b4:	7e e3                	jle    11999 <idt_init+0xf>
  }

  // 2.绑定异常中断向量表中对应下标的中断门的处理函数
  idt_install(IDT0_DE, (idt_handler_t)exception_handler_divider);
   119b6:	68 47 00 01 00       	push   $0x10047
   119bb:	6a 00                	push   $0x0
   119bd:	e8 f5 fe ff ff       	call   118b7 <idt_install>
   119c2:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT1_DB, (idt_handler_t)exception_handler_debug);
   119c5:	68 64 00 01 00       	push   $0x10064
   119ca:	6a 01                	push   $0x1
   119cc:	e8 e6 fe ff ff       	call   118b7 <idt_install>
   119d1:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT2_NMI, (idt_handler_t)exception_handler_nmi);
   119d4:	68 81 00 01 00       	push   $0x10081
   119d9:	6a 02                	push   $0x2
   119db:	e8 d7 fe ff ff       	call   118b7 <idt_install>
   119e0:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT3_BP, (idt_handler_t)exception_handler_breakpoint);
   119e3:	68 9e 00 01 00       	push   $0x1009e
   119e8:	6a 03                	push   $0x3
   119ea:	e8 c8 fe ff ff       	call   118b7 <idt_install>
   119ef:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT4_OF, (idt_handler_t)exception_handler_overflow);
   119f2:	68 bb 00 01 00       	push   $0x100bb
   119f7:	6a 04                	push   $0x4
   119f9:	e8 b9 fe ff ff       	call   118b7 <idt_install>
   119fe:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT5_BR, (idt_handler_t)exception_handler_bound_range);
   11a01:	68 d8 00 01 00       	push   $0x100d8
   11a06:	6a 05                	push   $0x5
   11a08:	e8 aa fe ff ff       	call   118b7 <idt_install>
   11a0d:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT6_UD, (idt_handler_t)exception_handler_invalid_opcode);
   11a10:	68 f5 00 01 00       	push   $0x100f5
   11a15:	6a 06                	push   $0x6
   11a17:	e8 9b fe ff ff       	call   118b7 <idt_install>
   11a1c:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT7_NM, (idt_handler_t)exception_handler_device_unavailable);
   11a1f:	68 12 01 01 00       	push   $0x10112
   11a24:	6a 07                	push   $0x7
   11a26:	e8 8c fe ff ff       	call   118b7 <idt_install>
   11a2b:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT8_DF, (idt_handler_t)exception_handler_double_fault);
   11a2e:	68 2f 01 01 00       	push   $0x1012f
   11a33:	6a 08                	push   $0x8
   11a35:	e8 7d fe ff ff       	call   118b7 <idt_install>
   11a3a:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT10_TS, (idt_handler_t)exception_handler_invalid_tss);
   11a3d:	68 4a 01 01 00       	push   $0x1014a
   11a42:	6a 0a                	push   $0xa
   11a44:	e8 6e fe ff ff       	call   118b7 <idt_install>
   11a49:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT11_NP, (idt_handler_t)exception_handler_segment_not_present);
   11a4c:	68 65 01 01 00       	push   $0x10165
   11a51:	6a 0b                	push   $0xb
   11a53:	e8 5f fe ff ff       	call   118b7 <idt_install>
   11a58:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT12_SS, (idt_handler_t)exception_handler_stack_segment_fault);
   11a5b:	68 80 01 01 00       	push   $0x10180
   11a60:	6a 0c                	push   $0xc
   11a62:	e8 50 fe ff ff       	call   118b7 <idt_install>
   11a67:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT13_GP, (idt_handler_t)exception_handler_general_protection);
   11a6a:	68 9b 01 01 00       	push   $0x1019b
   11a6f:	6a 0d                	push   $0xd
   11a71:	e8 41 fe ff ff       	call   118b7 <idt_install>
   11a76:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT14_PF, (idt_handler_t)exception_handler_page_fault);
   11a79:	68 b6 01 01 00       	push   $0x101b6
   11a7e:	6a 0e                	push   $0xe
   11a80:	e8 32 fe ff ff       	call   118b7 <idt_install>
   11a85:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT16_MF, (idt_handler_t)exception_handler_fpu_error);
   11a88:	68 d1 01 01 00       	push   $0x101d1
   11a8d:	6a 10                	push   $0x10
   11a8f:	e8 23 fe ff ff       	call   118b7 <idt_install>
   11a94:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT17_AC, (idt_handler_t)exception_handler_alignment_check);
   11a97:	68 ee 01 01 00       	push   $0x101ee
   11a9c:	6a 11                	push   $0x11
   11a9e:	e8 14 fe ff ff       	call   118b7 <idt_install>
   11aa3:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT18_MC, (idt_handler_t)exception_handler_machine_check);
   11aa6:	68 09 02 01 00       	push   $0x10209
   11aab:	6a 12                	push   $0x12
   11aad:	e8 05 fe ff ff       	call   118b7 <idt_install>
   11ab2:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT19_XM, (idt_handler_t)exception_handler_smd_exception);
   11ab5:	68 26 02 01 00       	push   $0x10226
   11aba:	6a 13                	push   $0x13
   11abc:	e8 f6 fd ff ff       	call   118b7 <idt_install>
   11ac1:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT20_VE, (idt_handler_t)exception_handler_virtual_exception);
   11ac4:	68 43 02 01 00       	push   $0x10243
   11ac9:	6a 14                	push   $0x14
   11acb:	e8 e7 fd ff ff       	call   118b7 <idt_install>
   11ad0:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT21_CP, (idt_handler_t)exception_handler_control_exception);
   11ad3:	68 60 02 01 00       	push   $0x10260
   11ad8:	6a 15                	push   $0x15
   11ada:	e8 d8 fd ff ff       	call   118b7 <idt_install>
   11adf:	83 c4 08             	add    $0x8,%esp

  //3.加载IDT
  lidt((uint32_t)idt_table, sizeof(idt_table));
   11ae2:	b8 c0 f3 02 00       	mov    $0x2f3c0,%eax
   11ae7:	68 00 08 00 00       	push   $0x800
   11aec:	50                   	push   %eax
   11aed:	e8 c8 f9 ff ff       	call   114ba <lidt>
   11af2:	83 c4 08             	add    $0x8,%esp

  //4.初始化8259设备中断芯片
  init_pic();
   11af5:	e8 fd fd ff ff       	call   118f7 <init_pic>
}
   11afa:	90                   	nop
   11afb:	c9                   	leave  
   11afc:	c3                   	ret    

00011afd <idt_enable>:
/**
 * @brief  开启外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号,即IDT中的下标
 */
void idt_enable(uint8_t irq_num) {
   11afd:	55                   	push   %ebp
   11afe:	89 e5                	mov    %esp,%ebp
   11b00:	53                   	push   %ebx
   11b01:	83 ec 14             	sub    $0x14,%esp
   11b04:	8b 45 08             	mov    0x8(%ebp),%eax
   11b07:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   11b0a:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   11b0e:	76 7f                	jbe    11b8f <idt_enable+0x92>
   11b10:	80 7d e8 2e          	cmpb   $0x2e,-0x18(%ebp)
   11b14:	77 79                	ja     11b8f <idt_enable+0x92>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   11b16:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置0，即不屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   11b1a:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   11b1e:	77 33                	ja     11b53 <idt_enable+0x56>
    uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   11b20:	6a 21                	push   $0x21
   11b22:	e8 55 f9 ff ff       	call   1147c <inb>
   11b27:	83 c4 04             	add    $0x4,%esp
   11b2a:	89 c3                	mov    %eax,%ebx
   11b2c:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   11b30:	ba 01 00 00 00       	mov    $0x1,%edx
   11b35:	89 c1                	mov    %eax,%ecx
   11b37:	d3 e2                	shl    %cl,%edx
   11b39:	89 d0                	mov    %edx,%eax
   11b3b:	f7 d0                	not    %eax
   11b3d:	21 d8                	and    %ebx,%eax
   11b3f:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   11b42:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11b46:	50                   	push   %eax
   11b47:	6a 21                	push   $0x21
   11b49:	e8 4b f9 ff ff       	call   11499 <outb>
   11b4e:	83 c4 08             	add    $0x8,%esp
   11b51:	eb 3d                	jmp    11b90 <idt_enable+0x93>
  } else {
    uint8_t mask = inb(PIC1_IMR) & ~(1 << (irq_num - 8));
   11b53:	68 a1 00 00 00       	push   $0xa1
   11b58:	e8 1f f9 ff ff       	call   1147c <inb>
   11b5d:	83 c4 04             	add    $0x4,%esp
   11b60:	89 c3                	mov    %eax,%ebx
   11b62:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   11b66:	83 e8 08             	sub    $0x8,%eax
   11b69:	ba 01 00 00 00       	mov    $0x1,%edx
   11b6e:	89 c1                	mov    %eax,%ecx
   11b70:	d3 e2                	shl    %cl,%edx
   11b72:	89 d0                	mov    %edx,%eax
   11b74:	f7 d0                	not    %eax
   11b76:	21 d8                	and    %ebx,%eax
   11b78:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   11b7b:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11b7f:	50                   	push   %eax
   11b80:	68 a1 00 00 00       	push   $0xa1
   11b85:	e8 0f f9 ff ff       	call   11499 <outb>
   11b8a:	83 c4 08             	add    $0x8,%esp
   11b8d:	eb 01                	jmp    11b90 <idt_enable+0x93>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   11b8f:	90                   	nop
  }
  
}
   11b90:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11b93:	c9                   	leave  
   11b94:	c3                   	ret    

00011b95 <idt_disable>:
/**
 * @brief  关闭外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号，即IDT中的下标
 */
void idt_disable(uint8_t irq_num) {
   11b95:	55                   	push   %ebp
   11b96:	89 e5                	mov    %esp,%ebp
   11b98:	53                   	push   %ebx
   11b99:	83 ec 14             	sub    $0x14,%esp
   11b9c:	8b 45 08             	mov    0x8(%ebp),%eax
   11b9f:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   11ba2:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   11ba6:	76 7b                	jbe    11c23 <idt_disable+0x8e>
   11ba8:	80 7d e8 2f          	cmpb   $0x2f,-0x18(%ebp)
   11bac:	77 75                	ja     11c23 <idt_disable+0x8e>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   11bae:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置1，即屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   11bb2:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   11bb6:	77 31                	ja     11be9 <idt_disable+0x54>
    uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   11bb8:	6a 21                	push   $0x21
   11bba:	e8 bd f8 ff ff       	call   1147c <inb>
   11bbf:	83 c4 04             	add    $0x4,%esp
   11bc2:	89 c3                	mov    %eax,%ebx
   11bc4:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   11bc8:	ba 01 00 00 00       	mov    $0x1,%edx
   11bcd:	89 c1                	mov    %eax,%ecx
   11bcf:	d3 e2                	shl    %cl,%edx
   11bd1:	89 d0                	mov    %edx,%eax
   11bd3:	09 d8                	or     %ebx,%eax
   11bd5:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   11bd8:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11bdc:	50                   	push   %eax
   11bdd:	6a 21                	push   $0x21
   11bdf:	e8 b5 f8 ff ff       	call   11499 <outb>
   11be4:	83 c4 08             	add    $0x8,%esp
   11be7:	eb 3b                	jmp    11c24 <idt_disable+0x8f>
  } else {
    uint8_t mask = inb(PIC1_IMR) | (1 << (irq_num - 8));
   11be9:	68 a1 00 00 00       	push   $0xa1
   11bee:	e8 89 f8 ff ff       	call   1147c <inb>
   11bf3:	83 c4 04             	add    $0x4,%esp
   11bf6:	89 c3                	mov    %eax,%ebx
   11bf8:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   11bfc:	83 e8 08             	sub    $0x8,%eax
   11bff:	ba 01 00 00 00       	mov    $0x1,%edx
   11c04:	89 c1                	mov    %eax,%ecx
   11c06:	d3 e2                	shl    %cl,%edx
   11c08:	89 d0                	mov    %edx,%eax
   11c0a:	09 d8                	or     %ebx,%eax
   11c0c:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   11c0f:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11c13:	50                   	push   %eax
   11c14:	68 a1 00 00 00       	push   $0xa1
   11c19:	e8 7b f8 ff ff       	call   11499 <outb>
   11c1e:	83 c4 08             	add    $0x8,%esp
   11c21:	eb 01                	jmp    11c24 <idt_disable+0x8f>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   11c23:	90                   	nop
  }
  
}
   11c24:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11c27:	c9                   	leave  
   11c28:	c3                   	ret    

00011c29 <idt_disable_global>:

/**
 * @brief  关闭全局中断
 * 
 */
void idt_disable_global(void) {
   11c29:	55                   	push   %ebp
   11c2a:	89 e5                	mov    %esp,%ebp
  cli();
   11c2c:	e8 36 f8 ff ff       	call   11467 <cli>
}
   11c31:	90                   	nop
   11c32:	5d                   	pop    %ebp
   11c33:	c3                   	ret    

00011c34 <idt_enable_global>:

/**
 * @brief  开启全局中断
 * 
 */
void idt_enable_global(void) {
   11c34:	55                   	push   %ebp
   11c35:	89 e5                	mov    %esp,%ebp
  sti();
   11c37:	e8 32 f8 ff ff       	call   1146e <sti>
}
   11c3c:	90                   	nop
   11c3d:	5d                   	pop    %ebp
   11c3e:	c3                   	ret    

00011c3f <pic_send_eoi>:
 * @brief  将OCW2寄存器的7~5位置为 001，用普通的EOI结束方式
 *         向8259A发送EOI命令，8259A会将ISR中优先级最高的位置0
 *
 * @param irq_num 中断向量号，即IDT下标
 */
void pic_send_eoi(int irq_num) {
   11c3f:	55                   	push   %ebp
   11c40:	89 e5                	mov    %esp,%ebp
  //1.获取该中断对应的IRQ标号
  irq_num -= PIC_ICW2_IDT_START;
   11c42:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
  //2.判断标号是否越界,若不越界则交给对应芯片处理
  if (irq_num < 0 || irq_num > 15) return;
   11c46:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11c4a:	78 29                	js     11c75 <pic_send_eoi+0x36>
   11c4c:	83 7d 08 0f          	cmpl   $0xf,0x8(%ebp)
   11c50:	7f 23                	jg     11c75 <pic_send_eoi+0x36>

  //3.若中断来自主片则只需向主片发送EOI
  outb(PIC0_OCW2, PIC_OCW2_EOI);
   11c52:	6a 20                	push   $0x20
   11c54:	6a 20                	push   $0x20
   11c56:	e8 3e f8 ff ff       	call   11499 <outb>
   11c5b:	83 c4 08             	add    $0x8,%esp

  //4.若中断来自从片则还需向从片发送EOI
  if (irq_num >= 8) { 
   11c5e:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11c62:	7e 12                	jle    11c76 <pic_send_eoi+0x37>
    outb(PIC1_OCW2, PIC_OCW2_EOI);
   11c64:	6a 20                	push   $0x20
   11c66:	68 a0 00 00 00       	push   $0xa0
   11c6b:	e8 29 f8 ff ff       	call   11499 <outb>
   11c70:	83 c4 08             	add    $0x8,%esp
   11c73:	eb 01                	jmp    11c76 <pic_send_eoi+0x37>
  if (irq_num < 0 || irq_num > 15) return;
   11c75:	90                   	nop
  }

}
   11c76:	c9                   	leave  
   11c77:	c3                   	ret    

00011c78 <idt_enter_protection>:

/**
 * @brief  
 * 
 */
idt_state_t idt_enter_protection(void) {
   11c78:	55                   	push   %ebp
   11c79:	89 e5                	mov    %esp,%ebp
   11c7b:	83 ec 10             	sub    $0x10,%esp
  idt_state_t state = read_eflags();
   11c7e:	e8 5f f8 ff ff       	call   114e2 <read_eflags>
   11c83:	89 45 fc             	mov    %eax,-0x4(%ebp)
  idt_disable_global();
   11c86:	e8 9e ff ff ff       	call   11c29 <idt_disable_global>
  return state;;
   11c8b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11c8e:	c9                   	leave  
   11c8f:	c3                   	ret    

00011c90 <idt_leave_protection>:
/**
 * @brief  
 * 
 * @return idt_state_t 
 */
idt_state_t idt_leave_protection(idt_state_t state){
   11c90:	55                   	push   %ebp
   11c91:	89 e5                	mov    %esp,%ebp
  write_eflags(state);
   11c93:	ff 75 08             	push   0x8(%ebp)
   11c96:	e8 57 f8 ff ff       	call   114f2 <write_eflags>
   11c9b:	83 c4 04             	add    $0x4,%esp
}
   11c9e:	90                   	nop
   11c9f:	c9                   	leave  
   11ca0:	c3                   	ret    

00011ca1 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   11ca1:	55                   	push   %ebp
   11ca2:	89 e5                	mov    %esp,%ebp
   11ca4:	83 ec 08             	sub    $0x8,%esp
   11ca7:	8b 45 08             	mov    0x8(%ebp),%eax
   11caa:	8b 55 0c             	mov    0xc(%ebp),%edx
   11cad:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   11cb1:	89 d0                	mov    %edx,%eax
   11cb3:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   11cb6:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11cba:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11cbe:	ee                   	out    %al,(%dx)
}
   11cbf:	90                   	nop
   11cc0:	c9                   	leave  
   11cc1:	c3                   	ret    

00011cc2 <do_handler_time>:
/**
 * @brief  处理定时器中断的c函数
 * 
 * @param frame 异常栈帧
 */
void do_handler_time(const exception_frame_t *frame) {
   11cc2:	55                   	push   %ebp
   11cc3:	89 e5                	mov    %esp,%ebp
   11cc5:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   11cc8:	a1 c0 fb 02 00       	mov    0x2fbc0,%eax
   11ccd:	83 c0 01             	add    $0x1,%eax
   11cd0:	a3 c0 fb 02 00       	mov    %eax,0x2fbc0

    //因为ICW4的EOI位为0，所以要手动发送EOI即中断结束信号
    pic_send_eoi(IRQ0_TIMER);
   11cd5:	83 ec 0c             	sub    $0xc,%esp
   11cd8:	6a 20                	push   $0x20
   11cda:	e8 60 ff ff ff       	call   11c3f <pic_send_eoi>
   11cdf:	83 c4 10             	add    $0x10,%esp

    //运行完一个时间片，判断是否需要执行任务切换，若需要则执行
    //必须写在发送eoi之后，防止发生任务切换导致eoi没有发送，从而无法进行下一次中断
    task_slice_end();   
   11ce2:	e8 7c f3 ff ff       	call   11063 <task_slice_end>
}
   11ce7:	90                   	nop
   11ce8:	c9                   	leave  
   11ce9:	c3                   	ret    

00011cea <init_pit>:

/**
 * @brief  初始化可编程定时器
 * 
 */
static void init_pit(void) {
   11cea:	55                   	push   %ebp
   11ceb:	89 e5                	mov    %esp,%ebp
   11ced:	83 ec 18             	sub    $0x18,%esp
    //1.选择定时器的计算器，读取与加载初始值模式，以及工作模式
    outb(PIT_COMMAND_MODE_PORT, PIT_SELECT_COUNTER | PIT_READ_LOAD | PIT_MODE);
   11cf0:	6a 36                	push   $0x36
   11cf2:	6a 43                	push   $0x43
   11cf4:	e8 a8 ff ff ff       	call   11ca1 <outb>
   11cf9:	83 c4 08             	add    $0x8,%esp

    //2.写入16位初始值,即一个中断后期晶体的振荡次数，由确定的加载方式知，先写入低8位，再写入高8位
    uint16_t reload_count = (PIT_OSC_FREQ / 1000) * OS_TICKS_MS;   //确定晶体一个中断周期的震荡次数
   11cfc:	66 c7 45 f6 9a 2e    	movw   $0x2e9a,-0xa(%ebp)
    outb(PIT_CHANNEL_DATA_PORT, reload_count & 0xff);
   11d02:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   11d06:	0f b6 c0             	movzbl %al,%eax
   11d09:	50                   	push   %eax
   11d0a:	6a 40                	push   $0x40
   11d0c:	e8 90 ff ff ff       	call   11ca1 <outb>
   11d11:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL_DATA_PORT, (reload_count >> 8) & 0xff);
   11d14:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   11d18:	66 c1 e8 08          	shr    $0x8,%ax
   11d1c:	0f b6 c0             	movzbl %al,%eax
   11d1f:	50                   	push   %eax
   11d20:	6a 40                	push   $0x40
   11d22:	e8 7a ff ff ff       	call   11ca1 <outb>
   11d27:	83 c4 08             	add    $0x8,%esp

    //3.绑定定时器中断的异常处理程序,并开启该中断
    idt_install(IRQ0_TIMER, (idt_handler_t)exception_handler_time);
   11d2a:	83 ec 08             	sub    $0x8,%esp
   11d2d:	68 7b 02 01 00       	push   $0x1027b
   11d32:	6a 20                	push   $0x20
   11d34:	e8 7e fb ff ff       	call   118b7 <idt_install>
   11d39:	83 c4 10             	add    $0x10,%esp
    idt_enable(IRQ0_TIMER);
   11d3c:	83 ec 0c             	sub    $0xc,%esp
   11d3f:	6a 20                	push   $0x20
   11d41:	e8 b7 fd ff ff       	call   11afd <idt_enable>
   11d46:	83 c4 10             	add    $0x10,%esp

}
   11d49:	90                   	nop
   11d4a:	c9                   	leave  
   11d4b:	c3                   	ret    

00011d4c <time_init>:

/**
 * @brief  初始化定时器
 * 
 */
void time_init(void) {
   11d4c:	55                   	push   %ebp
   11d4d:	89 e5                	mov    %esp,%ebp
   11d4f:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   11d52:	c7 05 c0 fb 02 00 00 	movl   $0x0,0x2fbc0
   11d59:	00 00 00 
    init_pit();
   11d5c:	e8 89 ff ff ff       	call   11cea <init_pit>
   11d61:	90                   	nop
   11d62:	c9                   	leave  
   11d63:	c3                   	ret    

00011d64 <kernel_init>:

/**
 * @brief  对内核进行初始化操作
 * 
 */
void kernel_init(boot_info_t* boot_info) {
   11d64:	55                   	push   %ebp
   11d65:	89 e5                	mov    %esp,%ebp
   11d67:	83 ec 08             	sub    $0x8,%esp
    //1.判断是否检测到可用内存
    ASSERT(boot_info->ram_region_count != 0);
   11d6a:	8b 45 08             	mov    0x8(%ebp),%eax
   11d6d:	8b 40 50             	mov    0x50(%eax),%eax
   11d70:	85 c0                	test   %eax,%eax
   11d72:	75 19                	jne    11d8d <kernel_init+0x29>
   11d74:	68 a8 39 01 00       	push   $0x139a8
   11d79:	68 44 3a 01 00       	push   $0x13a44
   11d7e:	6a 22                	push   $0x22
   11d80:	68 cc 39 01 00       	push   $0x139cc
   11d85:	e8 41 08 00 00       	call   125cb <pannic>
   11d8a:	83 c4 10             	add    $0x10,%esp
    
    //2.初始化日志程序,便于后期调用
    log_init();
   11d8d:	e8 80 14 00 00       	call   13212 <log_init>

    //3.初始化内存管理
    memory_init(boot_info);  
   11d92:	83 ec 0c             	sub    $0xc,%esp
   11d95:	ff 75 08             	push   0x8(%ebp)
   11d98:	e8 c9 e9 ff ff       	call   10766 <memory_init>
   11d9d:	83 c4 10             	add    $0x10,%esp

    //4.初始化并重新加载GDT表
    gdt_init();
   11da0:	e8 b7 f5 ff ff       	call   1135c <gdt_init>

    //5.初始化并加载中断描述符表IDT
    idt_init();
   11da5:	e8 e0 fb ff ff       	call   1198a <idt_init>

    //6.初始化定时器的中断处理
    time_init();
   11daa:	e8 9d ff ff ff       	call   11d4c <time_init>

    //7.初始化任务管理器
    task_manager_init();
   11daf:	e8 73 ef ff ff       	call   10d27 <task_manager_init>
    //初始化完成后将在汇编里重新加载内核代码段与数据段的选择子，并为内核程序分配栈空间

}
   11db4:	90                   	nop
   11db5:	c9                   	leave  
   11db6:	c3                   	ret    

00011db7 <move_to_first_task>:

/**
 * @brief 跳转到第一个任务进程
 * 
 */
void move_to_first_task(void) {
   11db7:	55                   	push   %ebp
   11db8:	89 e5                	mov    %esp,%ebp
   11dba:	83 ec 18             	sub    $0x18,%esp
    //1.获取当前任务
    task_t *curr = task_current();
   11dbd:	e8 ce f1 ff ff       	call   10f90 <task_current>
   11dc2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT(curr != 0);
   11dc5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11dc9:	75 19                	jne    11de4 <move_to_first_task+0x2d>
   11dcb:	68 01 3a 01 00       	push   $0x13a01
   11dd0:	68 50 3a 01 00       	push   $0x13a50
   11dd5:	6a 42                	push   $0x42
   11dd7:	68 cc 39 01 00       	push   $0x139cc
   11ddc:	e8 ea 07 00 00       	call   125cb <pannic>
   11de1:	83 c4 10             	add    $0x10,%esp

    //2.获取当前任务的tss结构
    tss_t *tss = &(curr->tss);
   11de4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11de7:	83 c0 48             	add    $0x48,%eax
   11dea:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //3.用内联汇编进行间接跳转,需要 jmp * %寄存器 (从寄存器中给出地址为间接跳转,直接从值跳转为直接跳转)
    __asm__ __volatile__(
        "jmp * %[ip]"::[ip]"r"(tss->eip)
   11ded:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11df0:	8b 40 20             	mov    0x20(%eax),%eax
    __asm__ __volatile__(
   11df3:	ff e0                	jmp    *%eax
    );
}
   11df5:	90                   	nop
   11df6:	c9                   	leave  
   11df7:	c3                   	ret    

00011df8 <init_main>:


void init_main(void) {
   11df8:	55                   	push   %ebp
   11df9:	89 e5                	mov    %esp,%ebp
   11dfb:	83 ec 08             	sub    $0x8,%esp
    
    log_printf("Kernel is running......");
   11dfe:	83 ec 0c             	sub    $0xc,%esp
   11e01:	68 0b 3a 01 00       	push   $0x13a0b
   11e06:	e8 8f 14 00 00       	call   1329a <log_printf>
   11e0b:	83 c4 10             	add    $0x10,%esp
    log_printf("Name: %s, Version: %s", "KbOS", OS_VERSION);
   11e0e:	83 ec 04             	sub    $0x4,%esp
   11e11:	68 23 3a 01 00       	push   $0x13a23
   11e16:	68 29 3a 01 00       	push   $0x13a29
   11e1b:	68 2e 3a 01 00       	push   $0x13a2e
   11e20:	e8 75 14 00 00       	call   1329a <log_printf>
   11e25:	83 c4 10             	add    $0x10,%esp

   // idt_enable_global();
   idt_disable_global();
   11e28:	e8 fc fd ff ff       	call   11c29 <idt_disable_global>

    //当前任务作为任务管理器启用时的第一个任务
    task_first_init();
   11e2d:	e8 c0 ef ff ff       	call   10df2 <task_first_init>

    //跳转到第一个任务进程去运行
    move_to_first_task();
   11e32:	e8 80 ff ff ff       	call   11db7 <move_to_first_task>
   11e37:	90                   	nop
   11e38:	c9                   	leave  
   11e39:	c3                   	ret    

00011e3a <list_init>:
static inline void list_init(list_t *list) {
   11e3a:	55                   	push   %ebp
   11e3b:	89 e5                	mov    %esp,%ebp
   11e3d:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11e40:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11e44:	75 19                	jne    11e5f <list_init+0x25>
   11e46:	68 64 3a 01 00       	push   $0x13a64
   11e4b:	68 10 3b 01 00       	push   $0x13b10
   11e50:	6a 31                	push   $0x31
   11e52:	68 78 3a 01 00       	push   $0x13a78
   11e57:	e8 6f 07 00 00       	call   125cb <pannic>
   11e5c:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   11e5f:	8b 45 08             	mov    0x8(%ebp),%eax
   11e62:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11e69:	8b 45 08             	mov    0x8(%ebp),%eax
   11e6c:	8b 50 04             	mov    0x4(%eax),%edx
   11e6f:	8b 45 08             	mov    0x8(%ebp),%eax
   11e72:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   11e74:	8b 45 08             	mov    0x8(%ebp),%eax
   11e77:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   11e7e:	90                   	nop
   11e7f:	c9                   	leave  
   11e80:	c3                   	ret    

00011e81 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   11e81:	55                   	push   %ebp
   11e82:	89 e5                	mov    %esp,%ebp
   11e84:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11e87:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11e8b:	75 19                	jne    11ea6 <list_is_empty+0x25>
   11e8d:	68 64 3a 01 00       	push   $0x13a64
   11e92:	68 1c 3b 01 00       	push   $0x13b1c
   11e97:	6a 38                	push   $0x38
   11e99:	68 78 3a 01 00       	push   $0x13a78
   11e9e:	e8 28 07 00 00       	call   125cb <pannic>
   11ea3:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   11ea6:	8b 45 08             	mov    0x8(%ebp),%eax
   11ea9:	8b 40 08             	mov    0x8(%eax),%eax
   11eac:	85 c0                	test   %eax,%eax
   11eae:	0f 94 c0             	sete   %al
   11eb1:	0f b6 c0             	movzbl %al,%eax
}
   11eb4:	c9                   	leave  
   11eb5:	c3                   	ret    

00011eb6 <mutex_init>:
/**
 * @brief  初始化互斥锁
 *
 * @param mutex
 */
void mutex_init(mutex_t *mutex) {
   11eb6:	55                   	push   %ebp
   11eb7:	89 e5                	mov    %esp,%ebp
   11eb9:	83 ec 08             	sub    $0x8,%esp
  ASSERT(mutex != (mutex_t *)0);
   11ebc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11ec0:	75 19                	jne    11edb <mutex_init+0x25>
   11ec2:	68 b6 3a 01 00       	push   $0x13ab6
   11ec7:	68 04 3b 01 00       	push   $0x13b04
   11ecc:	6a 15                	push   $0x15
   11ece:	68 cc 3a 01 00       	push   $0x13acc
   11ed3:	e8 f3 06 00 00       	call   125cb <pannic>
   11ed8:	83 c4 10             	add    $0x10,%esp

  mutex->locked_count = 0;
   11edb:	8b 45 08             	mov    0x8(%ebp),%eax
   11ede:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  mutex->owner = (task_t *)0;
   11ee5:	8b 45 08             	mov    0x8(%ebp),%eax
   11ee8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  list_init(&mutex->wait_list);
   11eee:	8b 45 08             	mov    0x8(%ebp),%eax
   11ef1:	83 c0 08             	add    $0x8,%eax
   11ef4:	83 ec 0c             	sub    $0xc,%esp
   11ef7:	50                   	push   %eax
   11ef8:	e8 3d ff ff ff       	call   11e3a <list_init>
   11efd:	83 c4 10             	add    $0x10,%esp
}
   11f00:	90                   	nop
   11f01:	c9                   	leave  
   11f02:	c3                   	ret    

00011f03 <mutex_lock>:
/**
 * @brief  加锁
 *
 * @param mutex
 */
void mutex_lock(mutex_t *mutex) {
   11f03:	55                   	push   %ebp
   11f04:	89 e5                	mov    %esp,%ebp
   11f06:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   11f09:	e8 6a fd ff ff       	call   11c78 <idt_enter_protection>
   11f0e:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 1. 获取当前任务
  task_t *curr = task_current();
   11f11:	e8 7a f0 ff ff       	call   10f90 <task_current>
   11f16:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 2.判断该锁是否已被加锁
  if (mutex->locked_count == 0) {  
   11f19:	8b 45 08             	mov    0x8(%ebp),%eax
   11f1c:	8b 40 04             	mov    0x4(%eax),%eax
   11f1f:	85 c0                	test   %eax,%eax
   11f21:	75 19                	jne    11f3c <mutex_lock+0x39>
    //3.还未被加锁，则加锁并记录拥有该锁的任务
    mutex->locked_count++;
   11f23:	8b 45 08             	mov    0x8(%ebp),%eax
   11f26:	8b 40 04             	mov    0x4(%eax),%eax
   11f29:	8d 50 01             	lea    0x1(%eax),%edx
   11f2c:	8b 45 08             	mov    0x8(%ebp),%eax
   11f2f:	89 50 04             	mov    %edx,0x4(%eax)
    mutex->owner = curr;
   11f32:	8b 45 08             	mov    0x8(%ebp),%eax
   11f35:	8b 55 f0             	mov    -0x10(%ebp),%edx
   11f38:	89 10                	mov    %edx,(%eax)
   11f3a:	eb 47                	jmp    11f83 <mutex_lock+0x80>
  } else if (mutex->owner == curr) {
   11f3c:	8b 45 08             	mov    0x8(%ebp),%eax
   11f3f:	8b 00                	mov    (%eax),%eax
   11f41:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11f44:	75 11                	jne    11f57 <mutex_lock+0x54>
    //4.已被加锁，但当前加锁请求的任务为当前锁的拥有者，直接再加锁即可
    mutex->locked_count++;
   11f46:	8b 45 08             	mov    0x8(%ebp),%eax
   11f49:	8b 40 04             	mov    0x4(%eax),%eax
   11f4c:	8d 50 01             	lea    0x1(%eax),%edx
   11f4f:	8b 45 08             	mov    0x8(%ebp),%eax
   11f52:	89 50 04             	mov    %edx,0x4(%eax)
   11f55:	eb 2c                	jmp    11f83 <mutex_lock+0x80>
  } else {  
    //5.已被加锁，且当前任务不是锁的拥有者，则当前任务进入锁的等待队列，被阻塞住
    task_set_unready(curr);
   11f57:	83 ec 0c             	sub    $0xc,%esp
   11f5a:	ff 75 f0             	push   -0x10(%ebp)
   11f5d:	e8 b5 ef ff ff       	call   10f17 <task_set_unready>
   11f62:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&mutex->wait_list, &curr->wait_node);
   11f65:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11f68:	8d 50 40             	lea    0x40(%eax),%edx
   11f6b:	8b 45 08             	mov    0x8(%ebp),%eax
   11f6e:	83 c0 08             	add    $0x8,%eax
   11f71:	83 ec 08             	sub    $0x8,%esp
   11f74:	52                   	push   %edx
   11f75:	50                   	push   %eax
   11f76:	e8 9b 0f 00 00       	call   12f16 <list_insert_last>
   11f7b:	83 c4 10             	add    $0x10,%esp
    task_switch();
   11f7e:	e8 17 f0 ff ff       	call   10f9a <task_switch>
  }

  idt_leave_protection(state);  // TODO:解锁
   11f83:	83 ec 0c             	sub    $0xc,%esp
   11f86:	ff 75 f4             	push   -0xc(%ebp)
   11f89:	e8 02 fd ff ff       	call   11c90 <idt_leave_protection>
   11f8e:	83 c4 10             	add    $0x10,%esp
}
   11f91:	90                   	nop
   11f92:	c9                   	leave  
   11f93:	c3                   	ret    

00011f94 <mutex_unlock>:
/**
 * @brief  解锁
 *
 * @param mutex
 */
void mutex_unlock(mutex_t *mutex) {
   11f94:	55                   	push   %ebp
   11f95:	89 e5                	mov    %esp,%ebp
   11f97:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   11f9a:	e8 d9 fc ff ff       	call   11c78 <idt_enter_protection>
   11f9f:	89 45 f4             	mov    %eax,-0xc(%ebp)

  task_t *curr = task_current();
   11fa2:	e8 e9 ef ff ff       	call   10f90 <task_current>
   11fa7:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 1.判断当前任务是否是锁的拥有者
  if (mutex->owner == curr) {
   11faa:	8b 45 08             	mov    0x8(%ebp),%eax
   11fad:	8b 00                	mov    (%eax),%eax
   11faf:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11fb2:	0f 85 83 00 00 00    	jne    1203b <mutex_unlock+0xa7>
    //2.当前任务是锁的拥有者,对锁进行一次解锁，并判断是否已完全解锁
    if (--mutex->locked_count == 0) {
   11fb8:	8b 45 08             	mov    0x8(%ebp),%eax
   11fbb:	8b 40 04             	mov    0x4(%eax),%eax
   11fbe:	8d 50 ff             	lea    -0x1(%eax),%edx
   11fc1:	8b 45 08             	mov    0x8(%ebp),%eax
   11fc4:	89 50 04             	mov    %edx,0x4(%eax)
   11fc7:	8b 45 08             	mov    0x8(%ebp),%eax
   11fca:	8b 40 04             	mov    0x4(%eax),%eax
   11fcd:	85 c0                	test   %eax,%eax
   11fcf:	75 6a                	jne    1203b <mutex_unlock+0xa7>
      //3.锁已被完全解锁,将锁的所有者置空
      mutex->owner = (task_t*)0;
   11fd1:	8b 45 08             	mov    0x8(%ebp),%eax
   11fd4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      //4.判断当前等待队列是否为空
      if (!list_is_empty(&mutex->wait_list)) { 
   11fda:	8b 45 08             	mov    0x8(%ebp),%eax
   11fdd:	83 c0 08             	add    $0x8,%eax
   11fe0:	83 ec 0c             	sub    $0xc,%esp
   11fe3:	50                   	push   %eax
   11fe4:	e8 98 fe ff ff       	call   11e81 <list_is_empty>
   11fe9:	83 c4 10             	add    $0x10,%esp
   11fec:	85 c0                	test   %eax,%eax
   11fee:	75 4b                	jne    1203b <mutex_unlock+0xa7>
        //5.当前等待队列不为空,对锁进行加锁，并交给等待队列的第一个任务
        list_node_t *node = list_remove_first(&mutex->wait_list);
   11ff0:	8b 45 08             	mov    0x8(%ebp),%eax
   11ff3:	83 c0 08             	add    $0x8,%eax
   11ff6:	83 ec 0c             	sub    $0xc,%esp
   11ff9:	50                   	push   %eax
   11ffa:	e8 a6 0f 00 00       	call   12fa5 <list_remove_first>
   11fff:	83 c4 10             	add    $0x10,%esp
   12002:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t *task_wait = list_node_parent(node, task_t, wait_node);
   12005:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   12009:	74 08                	je     12013 <mutex_unlock+0x7f>
   1200b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1200e:	83 e8 40             	sub    $0x40,%eax
   12011:	eb 05                	jmp    12018 <mutex_unlock+0x84>
   12013:	b8 00 00 00 00       	mov    $0x0,%eax
   12018:	89 45 e8             	mov    %eax,-0x18(%ebp)
        mutex->locked_count = 1;
   1201b:	8b 45 08             	mov    0x8(%ebp),%eax
   1201e:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        mutex->owner = task_wait;
   12025:	8b 45 08             	mov    0x8(%ebp),%eax
   12028:	8b 55 e8             	mov    -0x18(%ebp),%edx
   1202b:	89 10                	mov    %edx,(%eax)
        //6.让该任务进入就绪队列
        task_set_ready(task_wait);
   1202d:	83 ec 0c             	sub    $0xc,%esp
   12030:	ff 75 e8             	push   -0x18(%ebp)
   12033:	e8 94 ee ff ff       	call   10ecc <task_set_ready>
   12038:	83 c4 10             	add    $0x10,%esp
      }
    }
  }

  idt_leave_protection(state);  // TODO:解锁
   1203b:	83 ec 0c             	sub    $0xc,%esp
   1203e:	ff 75 f4             	push   -0xc(%ebp)
   12041:	e8 4a fc ff ff       	call   11c90 <idt_leave_protection>
   12046:	83 c4 10             	add    $0x10,%esp
}
   12049:	90                   	nop
   1204a:	c9                   	leave  
   1204b:	c3                   	ret    

0001204c <list_init>:
static inline void list_init(list_t *list) {
   1204c:	55                   	push   %ebp
   1204d:	89 e5                	mov    %esp,%ebp
   1204f:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   12052:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12056:	75 19                	jne    12071 <list_init+0x25>
   12058:	68 2c 3b 01 00       	push   $0x13b2c
   1205d:	68 d0 3b 01 00       	push   $0x13bd0
   12062:	6a 31                	push   $0x31
   12064:	68 40 3b 01 00       	push   $0x13b40
   12069:	e8 5d 05 00 00       	call   125cb <pannic>
   1206e:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   12071:	8b 45 08             	mov    0x8(%ebp),%eax
   12074:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1207b:	8b 45 08             	mov    0x8(%ebp),%eax
   1207e:	8b 50 04             	mov    0x4(%eax),%edx
   12081:	8b 45 08             	mov    0x8(%ebp),%eax
   12084:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   12086:	8b 45 08             	mov    0x8(%ebp),%eax
   12089:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   12090:	90                   	nop
   12091:	c9                   	leave  
   12092:	c3                   	ret    

00012093 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   12093:	55                   	push   %ebp
   12094:	89 e5                	mov    %esp,%ebp
   12096:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   12099:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1209d:	75 19                	jne    120b8 <list_is_empty+0x25>
   1209f:	68 2c 3b 01 00       	push   $0x13b2c
   120a4:	68 dc 3b 01 00       	push   $0x13bdc
   120a9:	6a 38                	push   $0x38
   120ab:	68 40 3b 01 00       	push   $0x13b40
   120b0:	e8 16 05 00 00       	call   125cb <pannic>
   120b5:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   120b8:	8b 45 08             	mov    0x8(%ebp),%eax
   120bb:	8b 40 08             	mov    0x8(%eax),%eax
   120be:	85 c0                	test   %eax,%eax
   120c0:	0f 94 c0             	sete   %al
   120c3:	0f b6 c0             	movzbl %al,%eax
}
   120c6:	c9                   	leave  
   120c7:	c3                   	ret    

000120c8 <sem_init>:
 * @brief  初始化信号量对象
 * 
 * @param sem 信号量对象
 * @param init_count 初始化信号量数量 
 */
void sem_init(sem_t *sem, int init_count) {
   120c8:	55                   	push   %ebp
   120c9:	89 e5                	mov    %esp,%ebp
   120cb:	83 ec 08             	sub    $0x8,%esp
    ASSERT(sem != (sem_t*)0);
   120ce:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   120d2:	75 19                	jne    120ed <sem_init+0x25>
   120d4:	68 7e 3b 01 00       	push   $0x13b7e
   120d9:	68 c4 3b 01 00       	push   $0x13bc4
   120de:	6a 18                	push   $0x18
   120e0:	68 90 3b 01 00       	push   $0x13b90
   120e5:	e8 e1 04 00 00       	call   125cb <pannic>
   120ea:	83 c4 10             	add    $0x10,%esp
    sem->count = 0;
   120ed:	8b 45 08             	mov    0x8(%ebp),%eax
   120f0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list_init(&sem->wait_list);
   120f6:	8b 45 08             	mov    0x8(%ebp),%eax
   120f9:	83 c0 04             	add    $0x4,%eax
   120fc:	83 ec 0c             	sub    $0xc,%esp
   120ff:	50                   	push   %eax
   12100:	e8 47 ff ff ff       	call   1204c <list_init>
   12105:	83 c4 10             	add    $0x10,%esp
}
   12108:	90                   	nop
   12109:	c9                   	leave  
   1210a:	c3                   	ret    

0001210b <sem_wait>:
 *         信号量相当于入场券，获取信号量之后才有资格访问信号量保护的资源
 * 
 * @param sem 
 * @param init_count 
 */
void sem_wait(sem_t *sem) {
   1210b:	55                   	push   %ebp
   1210c:	89 e5                	mov    %esp,%ebp
   1210e:	83 ec 18             	sub    $0x18,%esp
    
    idt_state_t state = idt_enter_protection();//TODO:加锁
   12111:	e8 62 fb ff ff       	call   11c78 <idt_enter_protection>
   12116:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //1.判断信号量是否还有剩余
    if(sem->count > 0) {//有剩余，直接使用，任务获取信号量继续执行
   12119:	8b 45 08             	mov    0x8(%ebp),%eax
   1211c:	8b 00                	mov    (%eax),%eax
   1211e:	85 c0                	test   %eax,%eax
   12120:	7e 0f                	jle    12131 <sem_wait+0x26>
        --sem->count;   
   12122:	8b 45 08             	mov    0x8(%ebp),%eax
   12125:	8b 00                	mov    (%eax),%eax
   12127:	8d 50 ff             	lea    -0x1(%eax),%edx
   1212a:	8b 45 08             	mov    0x8(%ebp),%eax
   1212d:	89 10                	mov    %edx,(%eax)
   1212f:	eb 34                	jmp    12165 <sem_wait+0x5a>
    } else {//没有剩余，任务进入延时队列等待信号量
        task_t *curr = task_current();
   12131:	e8 5a ee ff ff       	call   10f90 <task_current>
   12136:	89 45 f0             	mov    %eax,-0x10(%ebp)
        //2.将当前任务从就绪队列中取下
        task_set_unready(curr); 
   12139:	83 ec 0c             	sub    $0xc,%esp
   1213c:	ff 75 f0             	push   -0x10(%ebp)
   1213f:	e8 d3 ed ff ff       	call   10f17 <task_set_unready>
   12144:	83 c4 10             	add    $0x10,%esp
        //3.将当前任务加入到信号量等待队列
        list_insert_last(&sem->wait_list, &curr->wait_node); 
   12147:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1214a:	8d 50 40             	lea    0x40(%eax),%edx
   1214d:	8b 45 08             	mov    0x8(%ebp),%eax
   12150:	83 c0 04             	add    $0x4,%eax
   12153:	83 ec 08             	sub    $0x8,%esp
   12156:	52                   	push   %edx
   12157:	50                   	push   %eax
   12158:	e8 b9 0d 00 00       	call   12f16 <list_insert_last>
   1215d:	83 c4 10             	add    $0x10,%esp
        //4.切换任务
        task_switch();
   12160:	e8 35 ee ff ff       	call   10f9a <task_switch>
    }

    idt_leave_protection(state);//TODO:解锁
   12165:	83 ec 0c             	sub    $0xc,%esp
   12168:	ff 75 f4             	push   -0xc(%ebp)
   1216b:	e8 20 fb ff ff       	call   11c90 <idt_leave_protection>
   12170:	83 c4 10             	add    $0x10,%esp
}
   12173:	90                   	nop
   12174:	c9                   	leave  
   12175:	c3                   	ret    

00012176 <sem_notify>:
 *        等待队列中若有任务则直接获取该信号量，继续执行即访问资源
 *         若没有任务，则信号量对象记录的信号量数量加1，预留给下一次获取
 * 
 * @param sem 
 */
void sem_notify(sem_t *sem) {
   12176:	55                   	push   %ebp
   12177:	89 e5                	mov    %esp,%ebp
   12179:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   1217c:	e8 f7 fa ff ff       	call   11c78 <idt_enter_protection>
   12181:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if (!list_is_empty(&sem->wait_list)) {
   12184:	8b 45 08             	mov    0x8(%ebp),%eax
   12187:	83 c0 04             	add    $0x4,%eax
   1218a:	83 ec 0c             	sub    $0xc,%esp
   1218d:	50                   	push   %eax
   1218e:	e8 00 ff ff ff       	call   12093 <list_is_empty>
   12193:	83 c4 10             	add    $0x10,%esp
   12196:	85 c0                	test   %eax,%eax
   12198:	75 3b                	jne    121d5 <sem_notify+0x5f>
        list_node_t *node = list_remove_first(&sem->wait_list);
   1219a:	8b 45 08             	mov    0x8(%ebp),%eax
   1219d:	83 c0 04             	add    $0x4,%eax
   121a0:	83 ec 0c             	sub    $0xc,%esp
   121a3:	50                   	push   %eax
   121a4:	e8 fc 0d 00 00       	call   12fa5 <list_remove_first>
   121a9:	83 c4 10             	add    $0x10,%esp
   121ac:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t *task = list_node_parent(node, task_t, wait_node);
   121af:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   121b3:	74 08                	je     121bd <sem_notify+0x47>
   121b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   121b8:	83 e8 40             	sub    $0x40,%eax
   121bb:	eb 05                	jmp    121c2 <sem_notify+0x4c>
   121bd:	b8 00 00 00 00       	mov    $0x0,%eax
   121c2:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   121c5:	83 ec 0c             	sub    $0xc,%esp
   121c8:	ff 75 ec             	push   -0x14(%ebp)
   121cb:	e8 fc ec ff ff       	call   10ecc <task_set_ready>
   121d0:	83 c4 10             	add    $0x10,%esp
   121d3:	eb 0d                	jmp    121e2 <sem_notify+0x6c>
    } else {
        sem->count++;
   121d5:	8b 45 08             	mov    0x8(%ebp),%eax
   121d8:	8b 00                	mov    (%eax),%eax
   121da:	8d 50 01             	lea    0x1(%eax),%edx
   121dd:	8b 45 08             	mov    0x8(%ebp),%eax
   121e0:	89 10                	mov    %edx,(%eax)
    }

    idt_leave_protection(state);//TODO:解锁
   121e2:	83 ec 0c             	sub    $0xc,%esp
   121e5:	ff 75 f4             	push   -0xc(%ebp)
   121e8:	e8 a3 fa ff ff       	call   11c90 <idt_leave_protection>
   121ed:	83 c4 10             	add    $0x10,%esp

}
   121f0:	90                   	nop
   121f1:	c9                   	leave  
   121f2:	c3                   	ret    

000121f3 <sem_count>:

int sem_count(sem_t *sem) {
   121f3:	55                   	push   %ebp
   121f4:	89 e5                	mov    %esp,%ebp
   121f6:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   121f9:	e8 7a fa ff ff       	call   11c78 <idt_enter_protection>
   121fe:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   12201:	8b 45 08             	mov    0x8(%ebp),%eax
   12204:	8b 00                	mov    (%eax),%eax
   12206:	89 45 f0             	mov    %eax,-0x10(%ebp)
    idt_leave_protection(state);//TODO:解锁
   12209:	83 ec 0c             	sub    $0xc,%esp
   1220c:	ff 75 f4             	push   -0xc(%ebp)
   1220f:	e8 7c fa ff ff       	call   11c90 <idt_leave_protection>
   12214:	83 c4 10             	add    $0x10,%esp

    return count;
   12217:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1221a:	c9                   	leave  
   1221b:	c3                   	ret    

0001221c <list_init>:
static inline void list_init(list_t *list) {
   1221c:	55                   	push   %ebp
   1221d:	89 e5                	mov    %esp,%ebp
   1221f:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   12222:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12226:	75 19                	jne    12241 <list_init+0x25>
   12228:	68 ec 3b 01 00       	push   $0x13bec
   1222d:	68 f0 3c 01 00       	push   $0x13cf0
   12232:	6a 31                	push   $0x31
   12234:	68 00 3c 01 00       	push   $0x13c00
   12239:	e8 8d 03 00 00       	call   125cb <pannic>
   1223e:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   12241:	8b 45 08             	mov    0x8(%ebp),%eax
   12244:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1224b:	8b 45 08             	mov    0x8(%ebp),%eax
   1224e:	8b 50 04             	mov    0x4(%eax),%edx
   12251:	8b 45 08             	mov    0x8(%ebp),%eax
   12254:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   12256:	8b 45 08             	mov    0x8(%ebp),%eax
   12259:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   12260:	90                   	nop
   12261:	c9                   	leave  
   12262:	c3                   	ret    

00012263 <list_get_size>:
static inline int list_get_size(list_t *list) {
   12263:	55                   	push   %ebp
   12264:	89 e5                	mov    %esp,%ebp
   12266:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   12269:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1226d:	75 19                	jne    12288 <list_get_size+0x25>
   1226f:	68 ec 3b 01 00       	push   $0x13bec
   12274:	68 fc 3c 01 00       	push   $0x13cfc
   12279:	6a 3e                	push   $0x3e
   1227b:	68 00 3c 01 00       	push   $0x13c00
   12280:	e8 46 03 00 00       	call   125cb <pannic>
   12285:	83 c4 10             	add    $0x10,%esp
    return list->size;
   12288:	8b 45 08             	mov    0x8(%ebp),%eax
   1228b:	8b 40 08             	mov    0x8(%eax),%eax
}
   1228e:	c9                   	leave  
   1228f:	c3                   	ret    

00012290 <list_get_first>:
static inline list_node_t *list_get_first(list_t *list) {
   12290:	55                   	push   %ebp
   12291:	89 e5                	mov    %esp,%ebp
   12293:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   12296:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1229a:	75 19                	jne    122b5 <list_get_first+0x25>
   1229c:	68 ec 3b 01 00       	push   $0x13bec
   122a1:	68 1c 3d 01 00       	push   $0x13d1c
   122a6:	6a 44                	push   $0x44
   122a8:	68 00 3c 01 00       	push   $0x13c00
   122ad:	e8 19 03 00 00       	call   125cb <pannic>
   122b2:	83 c4 10             	add    $0x10,%esp
    return list->first;
   122b5:	8b 45 08             	mov    0x8(%ebp),%eax
   122b8:	8b 00                	mov    (%eax),%eax
}
   122ba:	c9                   	leave  
   122bb:	c3                   	ret    

000122bc <list_get_last>:

static inline list_node_t *list_get_last(list_t *list) {
   122bc:	55                   	push   %ebp
   122bd:	89 e5                	mov    %esp,%ebp
   122bf:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   122c2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   122c6:	75 19                	jne    122e1 <list_get_last+0x25>
   122c8:	68 ec 3b 01 00       	push   $0x13bec
   122cd:	68 0c 3d 01 00       	push   $0x13d0c
   122d2:	6a 4a                	push   $0x4a
   122d4:	68 00 3c 01 00       	push   $0x13c00
   122d9:	e8 ed 02 00 00       	call   125cb <pannic>
   122de:	83 c4 10             	add    $0x10,%esp

    return list->last;
   122e1:	8b 45 08             	mov    0x8(%ebp),%eax
   122e4:	8b 40 04             	mov    0x4(%eax),%eax
}
   122e7:	c9                   	leave  
   122e8:	c3                   	ret    

000122e9 <list_test>:

#include "tools/list.h"
#include "tools/log.h"
#include "common/types.h"

void list_test(void) {
   122e9:	55                   	push   %ebp
   122ea:	89 e5                	mov    %esp,%ebp
   122ec:	56                   	push   %esi
   122ed:	53                   	push   %ebx
   122ee:	83 ec 70             	sub    $0x70,%esp
    list_t list;
    list_node_t nodes[5];

    list_init(&list);
   122f1:	83 ec 0c             	sub    $0xc,%esp
   122f4:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   122f7:	50                   	push   %eax
   122f8:	e8 1f ff ff ff       	call   1221c <list_init>
   122fd:	83 c4 10             	add    $0x10,%esp
    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   12300:	83 ec 0c             	sub    $0xc,%esp
   12303:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12306:	50                   	push   %eax
   12307:	e8 57 ff ff ff       	call   12263 <list_get_size>
   1230c:	83 c4 10             	add    $0x10,%esp
   1230f:	89 c6                	mov    %eax,%esi
   12311:	83 ec 0c             	sub    $0xc,%esp
   12314:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12317:	50                   	push   %eax
   12318:	e8 9f ff ff ff       	call   122bc <list_get_last>
   1231d:	83 c4 10             	add    $0x10,%esp
   12320:	89 c3                	mov    %eax,%ebx
   12322:	83 ec 0c             	sub    $0xc,%esp
   12325:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12328:	50                   	push   %eax
   12329:	e8 62 ff ff ff       	call   12290 <list_get_first>
   1232e:	83 c4 10             	add    $0x10,%esp
   12331:	56                   	push   %esi
   12332:	53                   	push   %ebx
   12333:	50                   	push   %eax
   12334:	68 40 3c 01 00       	push   $0x13c40
   12339:	e8 5c 0f 00 00       	call   1329a <log_printf>
   1233e:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_insert_first
    for (int i = 0; i < 5; ++i) {
   12341:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12348:	eb 3f                	jmp    12389 <list_test+0xa0>
        list_node_t *node = nodes + i;
   1234a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1234d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   12354:	8d 45 9c             	lea    -0x64(%ebp),%eax
   12357:	01 d0                	add    %edx,%eax
   12359:	89 45 d0             	mov    %eax,-0x30(%ebp)

        log_printf("insert first to list: %d, 0x%x", i, (uint32_t)node);
   1235c:	8b 45 d0             	mov    -0x30(%ebp),%eax
   1235f:	83 ec 04             	sub    $0x4,%esp
   12362:	50                   	push   %eax
   12363:	ff 75 f4             	push   -0xc(%ebp)
   12366:	68 68 3c 01 00       	push   $0x13c68
   1236b:	e8 2a 0f 00 00       	call   1329a <log_printf>
   12370:	83 c4 10             	add    $0x10,%esp
        list_insert_first(&list, node);
   12373:	83 ec 08             	sub    $0x8,%esp
   12376:	ff 75 d0             	push   -0x30(%ebp)
   12379:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1237c:	50                   	push   %eax
   1237d:	e8 09 0b 00 00       	call   12e8b <list_insert_first>
   12382:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   12385:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12389:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   1238d:	7e bb                	jle    1234a <list_test+0x61>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   1238f:	83 ec 0c             	sub    $0xc,%esp
   12392:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12395:	50                   	push   %eax
   12396:	e8 c8 fe ff ff       	call   12263 <list_get_size>
   1239b:	83 c4 10             	add    $0x10,%esp
   1239e:	89 c6                	mov    %eax,%esi
   123a0:	83 ec 0c             	sub    $0xc,%esp
   123a3:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   123a6:	50                   	push   %eax
   123a7:	e8 10 ff ff ff       	call   122bc <list_get_last>
   123ac:	83 c4 10             	add    $0x10,%esp
   123af:	89 c3                	mov    %eax,%ebx
   123b1:	83 ec 0c             	sub    $0xc,%esp
   123b4:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   123b7:	50                   	push   %eax
   123b8:	e8 d3 fe ff ff       	call   12290 <list_get_first>
   123bd:	83 c4 10             	add    $0x10,%esp
   123c0:	56                   	push   %esi
   123c1:	53                   	push   %ebx
   123c2:	50                   	push   %eax
   123c3:	68 40 3c 01 00       	push   $0x13c40
   123c8:	e8 cd 0e 00 00       	call   1329a <log_printf>
   123cd:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

   
    //测试list_remove_first
    for (int i = 0; i < 5; ++i) {
   123d0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   123d7:	eb 2d                	jmp    12406 <list_test+0x11d>
        list_node_t *node = list_remove_first(&list);
   123d9:	83 ec 0c             	sub    $0xc,%esp
   123dc:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   123df:	50                   	push   %eax
   123e0:	e8 c0 0b 00 00       	call   12fa5 <list_remove_first>
   123e5:	83 c4 10             	add    $0x10,%esp
   123e8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        log_printf("remove first: %d, 0x%x", i, (uint32_t)node);
   123eb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   123ee:	83 ec 04             	sub    $0x4,%esp
   123f1:	50                   	push   %eax
   123f2:	ff 75 f0             	push   -0x10(%ebp)
   123f5:	68 87 3c 01 00       	push   $0x13c87
   123fa:	e8 9b 0e 00 00       	call   1329a <log_printf>
   123ff:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   12402:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   12406:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   1240a:	7e cd                	jle    123d9 <list_test+0xf0>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   1240c:	83 ec 0c             	sub    $0xc,%esp
   1240f:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12412:	50                   	push   %eax
   12413:	e8 4b fe ff ff       	call   12263 <list_get_size>
   12418:	83 c4 10             	add    $0x10,%esp
   1241b:	89 c6                	mov    %eax,%esi
   1241d:	83 ec 0c             	sub    $0xc,%esp
   12420:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12423:	50                   	push   %eax
   12424:	e8 93 fe ff ff       	call   122bc <list_get_last>
   12429:	83 c4 10             	add    $0x10,%esp
   1242c:	89 c3                	mov    %eax,%ebx
   1242e:	83 ec 0c             	sub    $0xc,%esp
   12431:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12434:	50                   	push   %eax
   12435:	e8 56 fe ff ff       	call   12290 <list_get_first>
   1243a:	83 c4 10             	add    $0x10,%esp
   1243d:	56                   	push   %esi
   1243e:	53                   	push   %ebx
   1243f:	50                   	push   %eax
   12440:	68 40 3c 01 00       	push   $0x13c40
   12445:	e8 50 0e 00 00       	call   1329a <log_printf>
   1244a:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    

    //测试list_insert_last
    for (int i = 0; i < 5; ++i) {
   1244d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   12454:	eb 3f                	jmp    12495 <list_test+0x1ac>
        list_node_t *node = nodes + i;
   12456:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12459:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   12460:	8d 45 9c             	lea    -0x64(%ebp),%eax
   12463:	01 d0                	add    %edx,%eax
   12465:	89 45 d8             	mov    %eax,-0x28(%ebp)

        log_printf("insert last to list: %d, 0x%x", i, (uint32_t)node);
   12468:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1246b:	83 ec 04             	sub    $0x4,%esp
   1246e:	50                   	push   %eax
   1246f:	ff 75 ec             	push   -0x14(%ebp)
   12472:	68 9e 3c 01 00       	push   $0x13c9e
   12477:	e8 1e 0e 00 00       	call   1329a <log_printf>
   1247c:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&list, node);
   1247f:	83 ec 08             	sub    $0x8,%esp
   12482:	ff 75 d8             	push   -0x28(%ebp)
   12485:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12488:	50                   	push   %eax
   12489:	e8 88 0a 00 00       	call   12f16 <list_insert_last>
   1248e:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   12491:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   12495:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   12499:	7e bb                	jle    12456 <list_test+0x16d>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   1249b:	83 ec 0c             	sub    $0xc,%esp
   1249e:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   124a1:	50                   	push   %eax
   124a2:	e8 bc fd ff ff       	call   12263 <list_get_size>
   124a7:	83 c4 10             	add    $0x10,%esp
   124aa:	89 c6                	mov    %eax,%esi
   124ac:	83 ec 0c             	sub    $0xc,%esp
   124af:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   124b2:	50                   	push   %eax
   124b3:	e8 04 fe ff ff       	call   122bc <list_get_last>
   124b8:	83 c4 10             	add    $0x10,%esp
   124bb:	89 c3                	mov    %eax,%ebx
   124bd:	83 ec 0c             	sub    $0xc,%esp
   124c0:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   124c3:	50                   	push   %eax
   124c4:	e8 c7 fd ff ff       	call   12290 <list_get_first>
   124c9:	83 c4 10             	add    $0x10,%esp
   124cc:	56                   	push   %esi
   124cd:	53                   	push   %ebx
   124ce:	50                   	push   %eax
   124cf:	68 40 3c 01 00       	push   $0x13c40
   124d4:	e8 c1 0d 00 00       	call   1329a <log_printf>
   124d9:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_remove_last
    for (int i = 0; i < 5; ++i) {
   124dc:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   124e3:	eb 2d                	jmp    12512 <list_test+0x229>
        list_node_t *node = list_remove_last(&list);
   124e5:	83 ec 0c             	sub    $0xc,%esp
   124e8:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   124eb:	50                   	push   %eax
   124ec:	e8 65 0b 00 00       	call   13056 <list_remove_last>
   124f1:	83 c4 10             	add    $0x10,%esp
   124f4:	89 45 dc             	mov    %eax,-0x24(%ebp)
        log_printf("remove last: %d, 0x%x", i, (uint32_t)node);
   124f7:	8b 45 dc             	mov    -0x24(%ebp),%eax
   124fa:	83 ec 04             	sub    $0x4,%esp
   124fd:	50                   	push   %eax
   124fe:	ff 75 e8             	push   -0x18(%ebp)
   12501:	68 bc 3c 01 00       	push   $0x13cbc
   12506:	e8 8f 0d 00 00       	call   1329a <log_printf>
   1250b:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   1250e:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   12512:	83 7d e8 04          	cmpl   $0x4,-0x18(%ebp)
   12516:	7e cd                	jle    124e5 <list_test+0x1fc>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   12518:	83 ec 0c             	sub    $0xc,%esp
   1251b:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1251e:	50                   	push   %eax
   1251f:	e8 3f fd ff ff       	call   12263 <list_get_size>
   12524:	83 c4 10             	add    $0x10,%esp
   12527:	89 c6                	mov    %eax,%esi
   12529:	83 ec 0c             	sub    $0xc,%esp
   1252c:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1252f:	50                   	push   %eax
   12530:	e8 87 fd ff ff       	call   122bc <list_get_last>
   12535:	83 c4 10             	add    $0x10,%esp
   12538:	89 c3                	mov    %eax,%ebx
   1253a:	83 ec 0c             	sub    $0xc,%esp
   1253d:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12540:	50                   	push   %eax
   12541:	e8 4a fd ff ff       	call   12290 <list_get_first>
   12546:	83 c4 10             	add    $0x10,%esp
   12549:	56                   	push   %esi
   1254a:	53                   	push   %ebx
   1254b:	50                   	push   %eax
   1254c:	68 40 3c 01 00       	push   $0x13c40
   12551:	e8 44 0d 00 00       	call   1329a <log_printf>
   12556:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    
    struct type_t {
        int i;
        list_node_t node;
    }v = {0x123456};
   12559:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
   12560:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
   12567:	c7 45 98 00 00 00 00 	movl   $0x0,-0x68(%ebp)
   1256e:	c7 45 90 56 34 12 00 	movl   $0x123456,-0x70(%ebp)

    list_node_t *v_node = &v.node;
   12575:	8d 45 90             	lea    -0x70(%ebp),%eax
   12578:	83 c0 04             	add    $0x4,%eax
   1257b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    struct type_t *p = list_node_parent(v_node, struct type_t, node);  
   1257e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   12582:	74 08                	je     1258c <list_test+0x2a3>
   12584:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12587:	83 e8 04             	sub    $0x4,%eax
   1258a:	eb 05                	jmp    12591 <list_test+0x2a8>
   1258c:	b8 00 00 00 00       	mov    $0x0,%eax
   12591:	89 45 e0             	mov    %eax,-0x20(%ebp)

    log_printf("v addr = 0x%x", (uint32_t)&v);
   12594:	8d 45 90             	lea    -0x70(%ebp),%eax
   12597:	83 ec 08             	sub    $0x8,%esp
   1259a:	50                   	push   %eax
   1259b:	68 d2 3c 01 00       	push   $0x13cd2
   125a0:	e8 f5 0c 00 00       	call   1329a <log_printf>
   125a5:	83 c4 10             	add    $0x10,%esp
    log_printf("p addr = 0x%x", (uint32_t)p);  
   125a8:	8b 45 e0             	mov    -0x20(%ebp),%eax
   125ab:	83 ec 08             	sub    $0x8,%esp
   125ae:	50                   	push   %eax
   125af:	68 e0 3c 01 00       	push   $0x13ce0
   125b4:	e8 e1 0c 00 00       	call   1329a <log_printf>
   125b9:	83 c4 10             	add    $0x10,%esp

 }
   125bc:	90                   	nop
   125bd:	8d 65 f8             	lea    -0x8(%ebp),%esp
   125c0:	5b                   	pop    %ebx
   125c1:	5e                   	pop    %esi
   125c2:	5d                   	pop    %ebp
   125c3:	c3                   	ret    

000125c4 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   125c4:	55                   	push   %ebp
   125c5:	89 e5                	mov    %esp,%ebp
   125c7:	f4                   	hlt    
   125c8:	90                   	nop
   125c9:	5d                   	pop    %ebp
   125ca:	c3                   	ret    

000125cb <pannic>:
 * @param file 异常所在文件绝对路径
 * @param line 异常所在行号
 * @param func 异常所在函数名 
 * @param reason 异常的原因
 */
void pannic(const char *file, int line, const char *func, const char *reason) {
   125cb:	55                   	push   %ebp
   125cc:	89 e5                	mov    %esp,%ebp
   125ce:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert faild! %s", reason);
   125d1:	83 ec 08             	sub    $0x8,%esp
   125d4:	ff 75 14             	push   0x14(%ebp)
   125d7:	68 2b 3d 01 00       	push   $0x13d2b
   125dc:	e8 b9 0c 00 00       	call   1329a <log_printf>
   125e1:	83 c4 10             	add    $0x10,%esp
    log_printf("file:\t%s\nline:\t%d\nfunc:\t%s", file, line, func);
   125e4:	ff 75 10             	push   0x10(%ebp)
   125e7:	ff 75 0c             	push   0xc(%ebp)
   125ea:	ff 75 08             	push   0x8(%ebp)
   125ed:	68 3c 3d 01 00       	push   $0x13d3c
   125f2:	e8 a3 0c 00 00       	call   1329a <log_printf>
   125f7:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   125fa:	e8 c5 ff ff ff       	call   125c4 <hlt>
   125ff:	eb f9                	jmp    125fa <pannic+0x2f>

00012601 <bitmap_byte_count>:
 * @brief  向上取整获取位图数组中有多少字节
 * 
 * @param bit_count  位图数组拥有的bit位数
 * @return int 向上取整得到的字节数
 */
int bitmap_byte_count(int bit_count) {
   12601:	55                   	push   %ebp
   12602:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8;
   12604:	8b 45 08             	mov    0x8(%ebp),%eax
   12607:	83 c0 07             	add    $0x7,%eax
   1260a:	8d 50 07             	lea    0x7(%eax),%edx
   1260d:	85 c0                	test   %eax,%eax
   1260f:	0f 48 c2             	cmovs  %edx,%eax
   12612:	c1 f8 03             	sar    $0x3,%eax
}
   12615:	5d                   	pop    %ebp
   12616:	c3                   	ret    

00012617 <bitmap_init>:
 * @param bitmap 需要初始化的位图
 * @param bits 位图所包含的位图数组的起始地址
 * @param count 页的数量
 * @param init_bit 将位图数组的每一位设置为init_bit
 */
void bitmap_init(bitmap_t *bitmap, uint8_t *bits, int count, int init_bit) {
   12617:	55                   	push   %ebp
   12618:	89 e5                	mov    %esp,%ebp
   1261a:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   1261d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12621:	75 19                	jne    1263c <bitmap_init+0x25>
   12623:	68 58 3d 01 00       	push   $0x13d58
   12628:	68 ec 3d 01 00       	push   $0x13dec
   1262d:	6a 24                	push   $0x24
   1262f:	68 70 3d 01 00       	push   $0x13d70
   12634:	e8 92 ff ff ff       	call   125cb <pannic>
   12639:	83 c4 10             	add    $0x10,%esp
    ASSERT(bits != (uint8_t*)0);
   1263c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12640:	75 19                	jne    1265b <bitmap_init+0x44>
   12642:	68 a8 3d 01 00       	push   $0x13da8
   12647:	68 ec 3d 01 00       	push   $0x13dec
   1264c:	6a 25                	push   $0x25
   1264e:	68 70 3d 01 00       	push   $0x13d70
   12653:	e8 73 ff ff ff       	call   125cb <pannic>
   12658:	83 c4 10             	add    $0x10,%esp

    bitmap->bit_count = count;
   1265b:	8b 45 08             	mov    0x8(%ebp),%eax
   1265e:	8b 55 10             	mov    0x10(%ebp),%edx
   12661:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   12663:	8b 45 08             	mov    0x8(%ebp),%eax
   12666:	8b 55 0c             	mov    0xc(%ebp),%edx
   12669:	89 50 04             	mov    %edx,0x4(%eax)

    //计算该位图需要多少字节
    int bytes = bitmap_byte_count(bitmap->bit_count);
   1266c:	8b 45 08             	mov    0x8(%ebp),%eax
   1266f:	8b 00                	mov    (%eax),%eax
   12671:	83 ec 0c             	sub    $0xc,%esp
   12674:	50                   	push   %eax
   12675:	e8 87 ff ff ff       	call   12601 <bitmap_byte_count>
   1267a:	83 c4 10             	add    $0x10,%esp
   1267d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    kernel_memset(bitmap->bits, init_bit ? 0xff : 0, bytes);
   12680:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   12684:	74 07                	je     1268d <bitmap_init+0x76>
   12686:	ba ff 00 00 00       	mov    $0xff,%edx
   1268b:	eb 05                	jmp    12692 <bitmap_init+0x7b>
   1268d:	ba 00 00 00 00       	mov    $0x0,%edx
   12692:	8b 45 08             	mov    0x8(%ebp),%eax
   12695:	8b 40 04             	mov    0x4(%eax),%eax
   12698:	83 ec 04             	sub    $0x4,%esp
   1269b:	ff 75 f4             	push   -0xc(%ebp)
   1269e:	52                   	push   %edx
   1269f:	50                   	push   %eax
   126a0:	e8 28 04 00 00       	call   12acd <kernel_memset>
   126a5:	83 c4 10             	add    $0x10,%esp

}
   126a8:	90                   	nop
   126a9:	c9                   	leave  
   126aa:	c3                   	ret    

000126ab <bitmap_get_bit>:
 * 
 * @param bitmap 
 * @param index 
 * @return uint8_t 
 */
uint8_t bitmap_get_bit(bitmap_t *bitmap, int index) {
   126ab:	55                   	push   %ebp
   126ac:	89 e5                	mov    %esp,%ebp
   126ae:	53                   	push   %ebx
   126af:	83 ec 04             	sub    $0x4,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   126b2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   126b6:	75 19                	jne    126d1 <bitmap_get_bit+0x26>
   126b8:	68 58 3d 01 00       	push   $0x13d58
   126bd:	68 f8 3d 01 00       	push   $0x13df8
   126c2:	6a 39                	push   $0x39
   126c4:	68 70 3d 01 00       	push   $0x13d70
   126c9:	e8 fd fe ff ff       	call   125cb <pannic>
   126ce:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0);
   126d1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   126d5:	79 19                	jns    126f0 <bitmap_get_bit+0x45>
   126d7:	68 bc 3d 01 00       	push   $0x13dbc
   126dc:	68 f8 3d 01 00       	push   $0x13df8
   126e1:	6a 3a                	push   $0x3a
   126e3:	68 70 3d 01 00       	push   $0x13d70
   126e8:	e8 de fe ff ff       	call   125cb <pannic>
   126ed:	83 c4 10             	add    $0x10,%esp

    return (bitmap->bits[index / 8] & (1 << (index % 8)));
   126f0:	8b 45 08             	mov    0x8(%ebp),%eax
   126f3:	8b 48 04             	mov    0x4(%eax),%ecx
   126f6:	8b 45 0c             	mov    0xc(%ebp),%eax
   126f9:	8d 50 07             	lea    0x7(%eax),%edx
   126fc:	85 c0                	test   %eax,%eax
   126fe:	0f 48 c2             	cmovs  %edx,%eax
   12701:	c1 f8 03             	sar    $0x3,%eax
   12704:	01 c8                	add    %ecx,%eax
   12706:	0f b6 00             	movzbl (%eax),%eax
   12709:	89 c3                	mov    %eax,%ebx
   1270b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1270e:	83 e0 07             	and    $0x7,%eax
   12711:	ba 01 00 00 00       	mov    $0x1,%edx
   12716:	89 c1                	mov    %eax,%ecx
   12718:	d3 e2                	shl    %cl,%edx
   1271a:	89 d0                	mov    %edx,%eax
   1271c:	21 d8                	and    %ebx,%eax
}
   1271e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   12721:	c9                   	leave  
   12722:	c3                   	ret    

00012723 <bitmap_set_bit>:
 * @param bitmap 
 * @param index 
 * @param count 
 * @param bit 
 */
void bitmap_set_bit(bitmap_t *bitmap, int index, int count, int bit) {
   12723:	55                   	push   %ebp
   12724:	89 e5                	mov    %esp,%ebp
   12726:	56                   	push   %esi
   12727:	53                   	push   %ebx
   12728:	83 ec 10             	sub    $0x10,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   1272b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1272f:	75 19                	jne    1274a <bitmap_set_bit+0x27>
   12731:	68 58 3d 01 00       	push   $0x13d58
   12736:	68 08 3e 01 00       	push   $0x13e08
   1273b:	6a 48                	push   $0x48
   1273d:	68 70 3d 01 00       	push   $0x13d70
   12742:	e8 84 fe ff ff       	call   125cb <pannic>
   12747:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0 && count >= 0);
   1274a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1274e:	78 06                	js     12756 <bitmap_set_bit+0x33>
   12750:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12754:	79 19                	jns    1276f <bitmap_set_bit+0x4c>
   12756:	68 c7 3d 01 00       	push   $0x13dc7
   1275b:	68 08 3e 01 00       	push   $0x13e08
   12760:	6a 49                	push   $0x49
   12762:	68 70 3d 01 00       	push   $0x13d70
   12767:	e8 5f fe ff ff       	call   125cb <pannic>
   1276c:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   1276f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12776:	e9 92 00 00 00       	jmp    1280d <bitmap_set_bit+0xea>
        if (bit) {
   1277b:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   1277f:	74 42                	je     127c3 <bitmap_set_bit+0xa0>
            bitmap->bits[index / 8] |= (1 << (index % 8));
   12781:	8b 45 08             	mov    0x8(%ebp),%eax
   12784:	8b 48 04             	mov    0x4(%eax),%ecx
   12787:	8b 45 0c             	mov    0xc(%ebp),%eax
   1278a:	8d 50 07             	lea    0x7(%eax),%edx
   1278d:	85 c0                	test   %eax,%eax
   1278f:	0f 48 c2             	cmovs  %edx,%eax
   12792:	c1 f8 03             	sar    $0x3,%eax
   12795:	89 c2                	mov    %eax,%edx
   12797:	89 d0                	mov    %edx,%eax
   12799:	01 c8                	add    %ecx,%eax
   1279b:	0f b6 00             	movzbl (%eax),%eax
   1279e:	89 c6                	mov    %eax,%esi
   127a0:	8b 45 0c             	mov    0xc(%ebp),%eax
   127a3:	83 e0 07             	and    $0x7,%eax
   127a6:	bb 01 00 00 00       	mov    $0x1,%ebx
   127ab:	89 c1                	mov    %eax,%ecx
   127ad:	d3 e3                	shl    %cl,%ebx
   127af:	89 d8                	mov    %ebx,%eax
   127b1:	89 f1                	mov    %esi,%ecx
   127b3:	09 c1                	or     %eax,%ecx
   127b5:	8b 45 08             	mov    0x8(%ebp),%eax
   127b8:	8b 40 04             	mov    0x4(%eax),%eax
   127bb:	01 d0                	add    %edx,%eax
   127bd:	89 ca                	mov    %ecx,%edx
   127bf:	88 10                	mov    %dl,(%eax)
   127c1:	eb 42                	jmp    12805 <bitmap_set_bit+0xe2>
        } else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   127c3:	8b 45 08             	mov    0x8(%ebp),%eax
   127c6:	8b 48 04             	mov    0x4(%eax),%ecx
   127c9:	8b 45 0c             	mov    0xc(%ebp),%eax
   127cc:	8d 50 07             	lea    0x7(%eax),%edx
   127cf:	85 c0                	test   %eax,%eax
   127d1:	0f 48 c2             	cmovs  %edx,%eax
   127d4:	c1 f8 03             	sar    $0x3,%eax
   127d7:	89 c2                	mov    %eax,%edx
   127d9:	89 d0                	mov    %edx,%eax
   127db:	01 c8                	add    %ecx,%eax
   127dd:	0f b6 00             	movzbl (%eax),%eax
   127e0:	89 c6                	mov    %eax,%esi
   127e2:	8b 45 0c             	mov    0xc(%ebp),%eax
   127e5:	83 e0 07             	and    $0x7,%eax
   127e8:	bb 01 00 00 00       	mov    $0x1,%ebx
   127ed:	89 c1                	mov    %eax,%ecx
   127ef:	d3 e3                	shl    %cl,%ebx
   127f1:	89 d8                	mov    %ebx,%eax
   127f3:	f7 d0                	not    %eax
   127f5:	89 f1                	mov    %esi,%ecx
   127f7:	21 c1                	and    %eax,%ecx
   127f9:	8b 45 08             	mov    0x8(%ebp),%eax
   127fc:	8b 40 04             	mov    0x4(%eax),%eax
   127ff:	01 d0                	add    %edx,%eax
   12801:	89 ca                	mov    %ecx,%edx
   12803:	88 10                	mov    %dl,(%eax)
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   12805:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12809:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   1280d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12810:	3b 45 10             	cmp    0x10(%ebp),%eax
   12813:	7d 0e                	jge    12823 <bitmap_set_bit+0x100>
   12815:	8b 45 08             	mov    0x8(%ebp),%eax
   12818:	8b 00                	mov    (%eax),%eax
   1281a:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1281d:	0f 8c 58 ff ff ff    	jl     1277b <bitmap_set_bit+0x58>
        }
    }
}
   12823:	90                   	nop
   12824:	8d 65 f8             	lea    -0x8(%ebp),%esp
   12827:	5b                   	pop    %ebx
   12828:	5e                   	pop    %esi
   12829:	5d                   	pop    %ebp
   1282a:	c3                   	ret    

0001282b <bitmap_is_set>:
 * 
 * @param bitmap 
 * @param index 
 * @return int 
 */
int bitmap_is_set(bitmap_t *bitmap, int index) {
   1282b:	55                   	push   %ebp
   1282c:	89 e5                	mov    %esp,%ebp
   1282e:	83 ec 08             	sub    $0x8,%esp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   12831:	83 ec 08             	sub    $0x8,%esp
   12834:	ff 75 0c             	push   0xc(%ebp)
   12837:	ff 75 08             	push   0x8(%ebp)
   1283a:	e8 6c fe ff ff       	call   126ab <bitmap_get_bit>
   1283f:	83 c4 10             	add    $0x10,%esp
   12842:	84 c0                	test   %al,%al
   12844:	0f 95 c0             	setne  %al
   12847:	0f b6 c0             	movzbl %al,%eax
}
   1284a:	c9                   	leave  
   1284b:	c3                   	ret    

0001284c <bitmap_alloc_nbits>:
 * @param bitmap 
 * @param bit 当某一位的值为bit时表示该位空闲，可供分配
 * @param count 
 * @return int 
 */
int bitmap_alloc_nbits(bitmap_t *bitmap, int bit, int count) {
   1284c:	55                   	push   %ebp
   1284d:	89 e5                	mov    %esp,%ebp
   1284f:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   12852:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12856:	75 19                	jne    12871 <bitmap_alloc_nbits+0x25>
   12858:	68 58 3d 01 00       	push   $0x13d58
   1285d:	68 18 3e 01 00       	push   $0x13e18
   12862:	6a 68                	push   $0x68
   12864:	68 70 3d 01 00       	push   $0x13d70
   12869:	e8 5d fd ff ff       	call   125cb <pannic>
   1286e:	83 c4 10             	add    $0x10,%esp
    ASSERT(count >= 0);
   12871:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12875:	79 19                	jns    12890 <bitmap_alloc_nbits+0x44>
   12877:	68 e0 3d 01 00       	push   $0x13de0
   1287c:	68 18 3e 01 00       	push   $0x13e18
   12881:	6a 69                	push   $0x69
   12883:	68 70 3d 01 00       	push   $0x13d70
   12888:	e8 3e fd ff ff       	call   125cb <pannic>
   1288d:	83 c4 10             	add    $0x10,%esp

    int search_index = 0;
   12890:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    int ok_index = -1;
   12897:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
    while (search_index < bitmap->bit_count) {
   1289e:	e9 8f 00 00 00       	jmp    12932 <bitmap_alloc_nbits+0xe6>
        //确定可分配空间的起始索引
        if (bitmap_get_bit(bitmap, search_index) != bit) {
   128a3:	83 ec 08             	sub    $0x8,%esp
   128a6:	ff 75 f4             	push   -0xc(%ebp)
   128a9:	ff 75 08             	push   0x8(%ebp)
   128ac:	e8 fa fd ff ff       	call   126ab <bitmap_get_bit>
   128b1:	83 c4 10             	add    $0x10,%esp
   128b4:	0f b6 c0             	movzbl %al,%eax
   128b7:	39 45 0c             	cmp    %eax,0xc(%ebp)
   128ba:	74 06                	je     128c2 <bitmap_alloc_nbits+0x76>
            search_index++;
   128bc:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
            continue;
   128c0:	eb 70                	jmp    12932 <bitmap_alloc_nbits+0xe6>
        }

        //记录可分配空间的起始索引
        ok_index = search_index;
   128c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   128c5:	89 45 f0             	mov    %eax,-0x10(%ebp)

        //判断该空间是否大小满足要求
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   128c8:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
   128cf:	eb 2d                	jmp    128fe <bitmap_alloc_nbits+0xb2>
            //空间大小不满足要求, 分配失败
            if (bitmap_get_bit(bitmap, search_index++) != bit) {
   128d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   128d4:	8d 50 01             	lea    0x1(%eax),%edx
   128d7:	89 55 f4             	mov    %edx,-0xc(%ebp)
   128da:	83 ec 08             	sub    $0x8,%esp
   128dd:	50                   	push   %eax
   128de:	ff 75 08             	push   0x8(%ebp)
   128e1:	e8 c5 fd ff ff       	call   126ab <bitmap_get_bit>
   128e6:	83 c4 10             	add    $0x10,%esp
   128e9:	0f b6 c0             	movzbl %al,%eax
   128ec:	39 45 0c             	cmp    %eax,0xc(%ebp)
   128ef:	74 09                	je     128fa <bitmap_alloc_nbits+0xae>
                ok_index = -1;
   128f1:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
                break;
   128f8:	eb 16                	jmp    12910 <bitmap_alloc_nbits+0xc4>
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   128fa:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   128fe:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12901:	3b 45 10             	cmp    0x10(%ebp),%eax
   12904:	7d 0a                	jge    12910 <bitmap_alloc_nbits+0xc4>
   12906:	8b 45 08             	mov    0x8(%ebp),%eax
   12909:	8b 00                	mov    (%eax),%eax
   1290b:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   1290e:	7c c1                	jl     128d1 <bitmap_alloc_nbits+0x85>
            }
        }

        if (ok_index != -1) {//分配成功
   12910:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
   12914:	74 1c                	je     12932 <bitmap_alloc_nbits+0xe6>
            //将该片空间标记为已分配状态, 并返回起始索引
            bitmap_set_bit(bitmap, ok_index, count, ~bit);
   12916:	8b 45 0c             	mov    0xc(%ebp),%eax
   12919:	f7 d0                	not    %eax
   1291b:	50                   	push   %eax
   1291c:	ff 75 10             	push   0x10(%ebp)
   1291f:	ff 75 f0             	push   -0x10(%ebp)
   12922:	ff 75 08             	push   0x8(%ebp)
   12925:	e8 f9 fd ff ff       	call   12723 <bitmap_set_bit>
   1292a:	83 c4 10             	add    $0x10,%esp
            return ok_index;
   1292d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12930:	eb 13                	jmp    12945 <bitmap_alloc_nbits+0xf9>
    while (search_index < bitmap->bit_count) {
   12932:	8b 45 08             	mov    0x8(%ebp),%eax
   12935:	8b 00                	mov    (%eax),%eax
   12937:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   1293a:	0f 8c 63 ff ff ff    	jl     128a3 <bitmap_alloc_nbits+0x57>
        }
    }
    
    //遍历完整个位图也没有满足要求的空间则返回-1
    return -1;
   12940:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

   12945:	c9                   	leave  
   12946:	c3                   	ret    

00012947 <kernel_strcpy>:
 * @brief  拷贝字符串
 * 
 * @param dest 目标字符串
 * @param src  源字符串
 */
void kernel_strcpy(char *dest, const char *src) {
   12947:	55                   	push   %ebp
   12948:	89 e5                	mov    %esp,%ebp
    //1.判断是否为NULL
    if (!dest || !src) return;
   1294a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1294e:	74 3b                	je     1298b <kernel_strcpy+0x44>
   12950:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12954:	74 35                	je     1298b <kernel_strcpy+0x44>

    //2.拷贝 src '\0' 以前的部分到 dest中
    //TODO:完成（访问未初始化的内存）的异常中断后就只判断src是否读到'\0'
    while (*dest && *src) {
   12956:	eb 17                	jmp    1296f <kernel_strcpy+0x28>
        *(dest++) = *(src++);
   12958:	8b 55 0c             	mov    0xc(%ebp),%edx
   1295b:	8d 42 01             	lea    0x1(%edx),%eax
   1295e:	89 45 0c             	mov    %eax,0xc(%ebp)
   12961:	8b 45 08             	mov    0x8(%ebp),%eax
   12964:	8d 48 01             	lea    0x1(%eax),%ecx
   12967:	89 4d 08             	mov    %ecx,0x8(%ebp)
   1296a:	0f b6 12             	movzbl (%edx),%edx
   1296d:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   1296f:	8b 45 08             	mov    0x8(%ebp),%eax
   12972:	0f b6 00             	movzbl (%eax),%eax
   12975:	84 c0                	test   %al,%al
   12977:	74 0a                	je     12983 <kernel_strcpy+0x3c>
   12979:	8b 45 0c             	mov    0xc(%ebp),%eax
   1297c:	0f b6 00             	movzbl (%eax),%eax
   1297f:	84 c0                	test   %al,%al
   12981:	75 d5                	jne    12958 <kernel_strcpy+0x11>
    }

    //3.添加结束符
    *dest = '\0';
   12983:	8b 45 08             	mov    0x8(%ebp),%eax
   12986:	c6 00 00             	movb   $0x0,(%eax)
   12989:	eb 01                	jmp    1298c <kernel_strcpy+0x45>
    if (!dest || !src) return;
   1298b:	90                   	nop
    
}
   1298c:	5d                   	pop    %ebp
   1298d:	c3                   	ret    

0001298e <kernel_strncpy>:
 * 
 * @param dest 目的字符串
 * @param src 源字符串
 * @param size 拷贝字符串的长度，包含'\0'
 */
void kernel_strncpy(char* dest, const char *src, int size) {
   1298e:	55                   	push   %ebp
   1298f:	89 e5                	mov    %esp,%ebp
    //1.判断是否需要拷贝
    if (!dest || !src || !size) return;
   12991:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12995:	74 45                	je     129dc <kernel_strncpy+0x4e>
   12997:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1299b:	74 3f                	je     129dc <kernel_strncpy+0x4e>
   1299d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   129a1:	74 39                	je     129dc <kernel_strncpy+0x4e>

    //2.size的大小包含了'\0'，所以要预留一个空间给'\0'，只能拷贝 size - 1个字符
    while ((size-- > 1) && (*src)) {
   129a3:	eb 17                	jmp    129bc <kernel_strncpy+0x2e>
        *(dest++) = *(src++);
   129a5:	8b 55 0c             	mov    0xc(%ebp),%edx
   129a8:	8d 42 01             	lea    0x1(%edx),%eax
   129ab:	89 45 0c             	mov    %eax,0xc(%ebp)
   129ae:	8b 45 08             	mov    0x8(%ebp),%eax
   129b1:	8d 48 01             	lea    0x1(%eax),%ecx
   129b4:	89 4d 08             	mov    %ecx,0x8(%ebp)
   129b7:	0f b6 12             	movzbl (%edx),%edx
   129ba:	88 10                	mov    %dl,(%eax)
    while ((size-- > 1) && (*src)) {
   129bc:	8b 45 10             	mov    0x10(%ebp),%eax
   129bf:	8d 50 ff             	lea    -0x1(%eax),%edx
   129c2:	89 55 10             	mov    %edx,0x10(%ebp)
   129c5:	83 f8 01             	cmp    $0x1,%eax
   129c8:	7e 0a                	jle    129d4 <kernel_strncpy+0x46>
   129ca:	8b 45 0c             	mov    0xc(%ebp),%eax
   129cd:	0f b6 00             	movzbl (%eax),%eax
   129d0:	84 c0                	test   %al,%al
   129d2:	75 d1                	jne    129a5 <kernel_strncpy+0x17>
    }

    //3.添加结束符
    *dest = '\0';
   129d4:	8b 45 08             	mov    0x8(%ebp),%eax
   129d7:	c6 00 00             	movb   $0x0,(%eax)
   129da:	eb 01                	jmp    129dd <kernel_strncpy+0x4f>
    if (!dest || !src || !size) return;
   129dc:	90                   	nop
}
   129dd:	5d                   	pop    %ebp
   129de:	c3                   	ret    

000129df <kernel_strncmp>:
 * @param s2 字符串2
 * @param size 比较前比较的子串长度，从下标0开始到(size - 1)
 * 
 * @return int ==: 0, > : 1, < : -1
 */
int kernel_strncmp(const char *s1, const char *s2, int size) {
   129df:	55                   	push   %ebp
   129e0:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) return 0;
   129e2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   129e6:	74 06                	je     129ee <kernel_strncmp+0xf>
   129e8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   129ec:	75 0f                	jne    129fd <kernel_strncmp+0x1e>
   129ee:	b8 00 00 00 00       	mov    $0x0,%eax
   129f3:	eb 52                	jmp    12a47 <kernel_strncmp+0x68>

    while (*s1 && *s2 && --size && *s1 == *s2 ) {
        ++s1;
   129f5:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        ++s2;        
   129f9:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && --size && *s1 == *s2 ) {
   129fd:	8b 45 08             	mov    0x8(%ebp),%eax
   12a00:	0f b6 00             	movzbl (%eax),%eax
   12a03:	84 c0                	test   %al,%al
   12a05:	74 24                	je     12a2b <kernel_strncmp+0x4c>
   12a07:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a0a:	0f b6 00             	movzbl (%eax),%eax
   12a0d:	84 c0                	test   %al,%al
   12a0f:	74 1a                	je     12a2b <kernel_strncmp+0x4c>
   12a11:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   12a15:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12a19:	74 10                	je     12a2b <kernel_strncmp+0x4c>
   12a1b:	8b 45 08             	mov    0x8(%ebp),%eax
   12a1e:	0f b6 10             	movzbl (%eax),%edx
   12a21:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a24:	0f b6 00             	movzbl (%eax),%eax
   12a27:	38 c2                	cmp    %al,%dl
   12a29:	74 ca                	je     129f5 <kernel_strncmp+0x16>
    }

    if (*s1 > *s2) return 1;
   12a2b:	8b 45 08             	mov    0x8(%ebp),%eax
   12a2e:	0f b6 10             	movzbl (%eax),%edx
   12a31:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a34:	0f b6 00             	movzbl (%eax),%eax
   12a37:	38 c2                	cmp    %al,%dl
   12a39:	7e 07                	jle    12a42 <kernel_strncmp+0x63>
   12a3b:	b8 01 00 00 00       	mov    $0x1,%eax
   12a40:	eb 05                	jmp    12a47 <kernel_strncmp+0x68>
    else if (*s1 < *s1) return -1;
    else return 0;
   12a42:	b8 00 00 00 00       	mov    $0x0,%eax
    
}
   12a47:	5d                   	pop    %ebp
   12a48:	c3                   	ret    

00012a49 <kernel_strlen>:
 * @brief  获取字符串str的长度
 * 
 * @param str 
 * @return int 
 */
int kernel_strlen(const char *str) {
   12a49:	55                   	push   %ebp
   12a4a:	89 e5                	mov    %esp,%ebp
   12a4c:	83 ec 10             	sub    $0x10,%esp
    if (!str) return 0;
   12a4f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12a53:	75 07                	jne    12a5c <kernel_strlen+0x13>
   12a55:	b8 00 00 00 00       	mov    $0x0,%eax
   12a5a:	eb 20                	jmp    12a7c <kernel_strlen+0x33>

    int len = 0;
   12a5c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*(str++)) len++;
   12a63:	eb 04                	jmp    12a69 <kernel_strlen+0x20>
   12a65:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   12a69:	8b 45 08             	mov    0x8(%ebp),%eax
   12a6c:	8d 50 01             	lea    0x1(%eax),%edx
   12a6f:	89 55 08             	mov    %edx,0x8(%ebp)
   12a72:	0f b6 00             	movzbl (%eax),%eax
   12a75:	84 c0                	test   %al,%al
   12a77:	75 ec                	jne    12a65 <kernel_strlen+0x1c>

    return len;
   12a79:	8b 45 fc             	mov    -0x4(%ebp),%eax
    
}
   12a7c:	c9                   	leave  
   12a7d:	c3                   	ret    

00012a7e <kernel_memcpy>:
 * 
 * @param dest 目的内存的起始地址
 * @param src 原内存的起始地址
 * @param size 复制的内存字节大小
 */
void kernel_memcpy(void *dest, const void *src, int size) {
   12a7e:	55                   	push   %ebp
   12a7f:	89 e5                	mov    %esp,%ebp
   12a81:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) return;
   12a84:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12a88:	74 40                	je     12aca <kernel_memcpy+0x4c>
   12a8a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12a8e:	74 3a                	je     12aca <kernel_memcpy+0x4c>
   12a90:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12a94:	74 34                	je     12aca <kernel_memcpy+0x4c>

    uint8_t *d = (uint8_t*)dest;
   12a96:	8b 45 08             	mov    0x8(%ebp),%eax
   12a99:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *s = (uint8_t*)src;
   12a9c:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a9f:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (size--) {
   12aa2:	eb 17                	jmp    12abb <kernel_memcpy+0x3d>
        *(d++) = *(s++);
   12aa4:	8b 55 f8             	mov    -0x8(%ebp),%edx
   12aa7:	8d 42 01             	lea    0x1(%edx),%eax
   12aaa:	89 45 f8             	mov    %eax,-0x8(%ebp)
   12aad:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12ab0:	8d 48 01             	lea    0x1(%eax),%ecx
   12ab3:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   12ab6:	0f b6 12             	movzbl (%edx),%edx
   12ab9:	88 10                	mov    %dl,(%eax)
    while (size--) {
   12abb:	8b 45 10             	mov    0x10(%ebp),%eax
   12abe:	8d 50 ff             	lea    -0x1(%eax),%edx
   12ac1:	89 55 10             	mov    %edx,0x10(%ebp)
   12ac4:	85 c0                	test   %eax,%eax
   12ac6:	75 dc                	jne    12aa4 <kernel_memcpy+0x26>
   12ac8:	eb 01                	jmp    12acb <kernel_memcpy+0x4d>
    if (!dest || !src || !size) return;
   12aca:	90                   	nop
    }
    
}
   12acb:	c9                   	leave  
   12acc:	c3                   	ret    

00012acd <kernel_memset>:
 * 
 * @param dest 区域起始地址
 * @param v 每个字节的值
 * @param size 赋值的内存的大小
 */
void kernel_memset(void *dest, uint8_t v, int size) {
   12acd:	55                   	push   %ebp
   12ace:	89 e5                	mov    %esp,%ebp
   12ad0:	83 ec 14             	sub    $0x14,%esp
   12ad3:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ad6:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size) return;
   12ad9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12add:	74 2c                	je     12b0b <kernel_memset+0x3e>
   12adf:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12ae3:	74 26                	je     12b0b <kernel_memset+0x3e>

    uint8_t *d = (uint8_t*)dest;
   12ae5:	8b 45 08             	mov    0x8(%ebp),%eax
   12ae8:	89 45 fc             	mov    %eax,-0x4(%ebp)
    
    while (size--) {
   12aeb:	eb 0f                	jmp    12afc <kernel_memset+0x2f>
        *(d++) = v;
   12aed:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12af0:	8d 50 01             	lea    0x1(%eax),%edx
   12af3:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12af6:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   12afa:	88 10                	mov    %dl,(%eax)
    while (size--) {
   12afc:	8b 45 10             	mov    0x10(%ebp),%eax
   12aff:	8d 50 ff             	lea    -0x1(%eax),%edx
   12b02:	89 55 10             	mov    %edx,0x10(%ebp)
   12b05:	85 c0                	test   %eax,%eax
   12b07:	75 e4                	jne    12aed <kernel_memset+0x20>
   12b09:	eb 01                	jmp    12b0c <kernel_memset+0x3f>
    if (!dest || !size) return;
   12b0b:	90                   	nop
    }
    
}
   12b0c:	c9                   	leave  
   12b0d:	c3                   	ret    

00012b0e <kernel_memcmp>:
 * @param d1 区域1的起始地址
 * @param d2 区域2的起始地址
 * @param size 比较的字节数量
 * @return int ==:0, >:1, <:-1
 */
int kernel_memcmp(const void *dest1, const void *dest2, int size) {
   12b0e:	55                   	push   %ebp
   12b0f:	89 e5                	mov    %esp,%ebp
   12b11:	83 ec 10             	sub    $0x10,%esp
    if (!dest1 || !dest2 || !size) return 0;
   12b14:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12b18:	74 0c                	je     12b26 <kernel_memcmp+0x18>
   12b1a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12b1e:	74 06                	je     12b26 <kernel_memcmp+0x18>
   12b20:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12b24:	75 07                	jne    12b2d <kernel_memcmp+0x1f>
   12b26:	b8 00 00 00 00       	mov    $0x0,%eax
   12b2b:	eb 63                	jmp    12b90 <kernel_memcmp+0x82>

    uint8_t *d1 = (uint8_t*)dest1;
   12b2d:	8b 45 08             	mov    0x8(%ebp),%eax
   12b30:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d2 = (uint8_t*)dest2;
   12b33:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b36:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (--size && *d1 == *d2) {
   12b39:	eb 08                	jmp    12b43 <kernel_memcmp+0x35>
        d1++;
   12b3b:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
        d2++;
   12b3f:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (--size && *d1 == *d2) {
   12b43:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   12b47:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12b4b:	74 10                	je     12b5d <kernel_memcmp+0x4f>
   12b4d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12b50:	0f b6 10             	movzbl (%eax),%edx
   12b53:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12b56:	0f b6 00             	movzbl (%eax),%eax
   12b59:	38 c2                	cmp    %al,%dl
   12b5b:	74 de                	je     12b3b <kernel_memcmp+0x2d>
    }

    if (*d1 > *d2) return 1;
   12b5d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12b60:	0f b6 10             	movzbl (%eax),%edx
   12b63:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12b66:	0f b6 00             	movzbl (%eax),%eax
   12b69:	38 c2                	cmp    %al,%dl
   12b6b:	76 07                	jbe    12b74 <kernel_memcmp+0x66>
   12b6d:	b8 01 00 00 00       	mov    $0x1,%eax
   12b72:	eb 1c                	jmp    12b90 <kernel_memcmp+0x82>
    else if (*d1 < *d2) return -1;
   12b74:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12b77:	0f b6 10             	movzbl (%eax),%edx
   12b7a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12b7d:	0f b6 00             	movzbl (%eax),%eax
   12b80:	38 c2                	cmp    %al,%dl
   12b82:	73 07                	jae    12b8b <kernel_memcmp+0x7d>
   12b84:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12b89:	eb 05                	jmp    12b90 <kernel_memcmp+0x82>
    else return 0;
   12b8b:	b8 00 00 00 00       	mov    $0x0,%eax

}
   12b90:	c9                   	leave  
   12b91:	c3                   	ret    

00012b92 <kernel_sprintf>:



void kernel_sprintf(char *buf, const char *formate, ...) {
   12b92:	55                   	push   %ebp
   12b93:	89 e5                	mov    %esp,%ebp
   12b95:	83 ec 18             	sub    $0x18,%esp
    //获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   12b98:	8d 45 10             	lea    0x10(%ebp),%eax
   12b9b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_vsprintf(buf, formate, args);
   12b9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12ba1:	83 ec 04             	sub    $0x4,%esp
   12ba4:	50                   	push   %eax
   12ba5:	ff 75 0c             	push   0xc(%ebp)
   12ba8:	ff 75 08             	push   0x8(%ebp)
   12bab:	e8 06 00 00 00       	call   12bb6 <kernel_vsprintf>
   12bb0:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   12bb3:	90                   	nop
   12bb4:	c9                   	leave  
   12bb5:	c3                   	ret    

00012bb6 <kernel_vsprintf>:
 * 
 * @param buf 
 * @param formate 
 * @param args 
 */
void kernel_vsprintf(char *buf, const char *formate, va_list args) {
   12bb6:	55                   	push   %ebp
   12bb7:	89 e5                	mov    %esp,%ebp
   12bb9:	83 ec 28             	sub    $0x28,%esp
    //定义状态机，包含两种状态
    enum {NORMAL, READ_FMT} state = NORMAL;
   12bbc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    
    char *curr = buf;
   12bc3:	8b 45 08             	mov    0x8(%ebp),%eax
   12bc6:	89 45 f0             	mov    %eax,-0x10(%ebp)

    char ch;

    while ((ch = *(formate++)) != '\0') {
   12bc9:	e9 68 01 00 00       	jmp    12d36 <kernel_vsprintf+0x180>
        switch (state) {
   12bce:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12bd2:	74 0b                	je     12bdf <kernel_vsprintf+0x29>
   12bd4:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   12bd8:	74 2b                	je     12c05 <kernel_vsprintf+0x4f>
   12bda:	e9 56 01 00 00       	jmp    12d35 <kernel_vsprintf+0x17f>
        case NORMAL: 
            if (ch == '%') state = READ_FMT;
   12bdf:	80 7d e7 25          	cmpb   $0x25,-0x19(%ebp)
   12be3:	75 0c                	jne    12bf1 <kernel_vsprintf+0x3b>
   12be5:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   12bec:	e9 45 01 00 00       	jmp    12d36 <kernel_vsprintf+0x180>
            else *(curr++) = ch;
   12bf1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12bf4:	8d 50 01             	lea    0x1(%eax),%edx
   12bf7:	89 55 f0             	mov    %edx,-0x10(%ebp)
   12bfa:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   12bfe:	88 10                	mov    %dl,(%eax)
            break;
   12c00:	e9 31 01 00 00       	jmp    12d36 <kernel_vsprintf+0x180>
        case READ_FMT:
            if (ch == 's') {
   12c05:	80 7d e7 73          	cmpb   $0x73,-0x19(%ebp)
   12c09:	75 47                	jne    12c52 <kernel_vsprintf+0x9c>
                const char * str = va_arg(args, char *);
   12c0b:	8b 45 10             	mov    0x10(%ebp),%eax
   12c0e:	8d 50 04             	lea    0x4(%eax),%edx
   12c11:	89 55 10             	mov    %edx,0x10(%ebp)
   12c14:	8b 00                	mov    (%eax),%eax
   12c16:	89 45 ec             	mov    %eax,-0x14(%ebp)
                int len = kernel_strlen(str);
   12c19:	ff 75 ec             	push   -0x14(%ebp)
   12c1c:	e8 28 fe ff ff       	call   12a49 <kernel_strlen>
   12c21:	83 c4 04             	add    $0x4,%esp
   12c24:	89 45 e8             	mov    %eax,-0x18(%ebp)
                while (len--) {
   12c27:	eb 17                	jmp    12c40 <kernel_vsprintf+0x8a>
                    *(curr++) = *(str++);
   12c29:	8b 55 ec             	mov    -0x14(%ebp),%edx
   12c2c:	8d 42 01             	lea    0x1(%edx),%eax
   12c2f:	89 45 ec             	mov    %eax,-0x14(%ebp)
   12c32:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12c35:	8d 48 01             	lea    0x1(%eax),%ecx
   12c38:	89 4d f0             	mov    %ecx,-0x10(%ebp)
   12c3b:	0f b6 12             	movzbl (%edx),%edx
   12c3e:	88 10                	mov    %dl,(%eax)
                while (len--) {
   12c40:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12c43:	8d 50 ff             	lea    -0x1(%eax),%edx
   12c46:	89 55 e8             	mov    %edx,-0x18(%ebp)
   12c49:	85 c0                	test   %eax,%eax
   12c4b:	75 dc                	jne    12c29 <kernel_vsprintf+0x73>
   12c4d:	e9 da 00 00 00       	jmp    12d2c <kernel_vsprintf+0x176>
                }
            } else if (ch == 'd') {
   12c52:	80 7d e7 64          	cmpb   $0x64,-0x19(%ebp)
   12c56:	75 37                	jne    12c8f <kernel_vsprintf+0xd9>
                const int num = va_arg(args, int);
   12c58:	8b 45 10             	mov    0x10(%ebp),%eax
   12c5b:	8d 50 04             	lea    0x4(%eax),%edx
   12c5e:	89 55 10             	mov    %edx,0x10(%ebp)
   12c61:	8b 00                	mov    (%eax),%eax
   12c63:	89 45 d8             	mov    %eax,-0x28(%ebp)
                kernel_itoa(curr, num, 10);
   12c66:	83 ec 04             	sub    $0x4,%esp
   12c69:	6a 0a                	push   $0xa
   12c6b:	ff 75 d8             	push   -0x28(%ebp)
   12c6e:	ff 75 f0             	push   -0x10(%ebp)
   12c71:	e8 dd 00 00 00       	call   12d53 <kernel_itoa>
   12c76:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr);   
   12c79:	83 ec 0c             	sub    $0xc,%esp
   12c7c:	ff 75 f0             	push   -0x10(%ebp)
   12c7f:	e8 c5 fd ff ff       	call   12a49 <kernel_strlen>
   12c84:	83 c4 10             	add    $0x10,%esp
   12c87:	01 45 f0             	add    %eax,-0x10(%ebp)
   12c8a:	e9 9d 00 00 00       	jmp    12d2c <kernel_vsprintf+0x176>
            } else if (ch == 'x' || ch == 'X') {
   12c8f:	80 7d e7 78          	cmpb   $0x78,-0x19(%ebp)
   12c93:	74 06                	je     12c9b <kernel_vsprintf+0xe5>
   12c95:	80 7d e7 58          	cmpb   $0x58,-0x19(%ebp)
   12c99:	75 34                	jne    12ccf <kernel_vsprintf+0x119>
                const int num = va_arg(args, int);
   12c9b:	8b 45 10             	mov    0x10(%ebp),%eax
   12c9e:	8d 50 04             	lea    0x4(%eax),%edx
   12ca1:	89 55 10             	mov    %edx,0x10(%ebp)
   12ca4:	8b 00                	mov    (%eax),%eax
   12ca6:	89 45 dc             	mov    %eax,-0x24(%ebp)
                kernel_itoa(curr, num, 16);
   12ca9:	83 ec 04             	sub    $0x4,%esp
   12cac:	6a 10                	push   $0x10
   12cae:	ff 75 dc             	push   -0x24(%ebp)
   12cb1:	ff 75 f0             	push   -0x10(%ebp)
   12cb4:	e8 9a 00 00 00       	call   12d53 <kernel_itoa>
   12cb9:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr); 
   12cbc:	83 ec 0c             	sub    $0xc,%esp
   12cbf:	ff 75 f0             	push   -0x10(%ebp)
   12cc2:	e8 82 fd ff ff       	call   12a49 <kernel_strlen>
   12cc7:	83 c4 10             	add    $0x10,%esp
   12cca:	01 45 f0             	add    %eax,-0x10(%ebp)
            } else if (ch == 'x' || ch == 'X') {
   12ccd:	eb 5d                	jmp    12d2c <kernel_vsprintf+0x176>
            } else if (ch == 'b') {
   12ccf:	80 7d e7 62          	cmpb   $0x62,-0x19(%ebp)
   12cd3:	75 34                	jne    12d09 <kernel_vsprintf+0x153>
                 const int num = va_arg(args, int);
   12cd5:	8b 45 10             	mov    0x10(%ebp),%eax
   12cd8:	8d 50 04             	lea    0x4(%eax),%edx
   12cdb:	89 55 10             	mov    %edx,0x10(%ebp)
   12cde:	8b 00                	mov    (%eax),%eax
   12ce0:	89 45 e0             	mov    %eax,-0x20(%ebp)
                kernel_itoa(curr, num, 2);
   12ce3:	83 ec 04             	sub    $0x4,%esp
   12ce6:	6a 02                	push   $0x2
   12ce8:	ff 75 e0             	push   -0x20(%ebp)
   12ceb:	ff 75 f0             	push   -0x10(%ebp)
   12cee:	e8 60 00 00 00       	call   12d53 <kernel_itoa>
   12cf3:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr); 
   12cf6:	83 ec 0c             	sub    $0xc,%esp
   12cf9:	ff 75 f0             	push   -0x10(%ebp)
   12cfc:	e8 48 fd ff ff       	call   12a49 <kernel_strlen>
   12d01:	83 c4 10             	add    $0x10,%esp
   12d04:	01 45 f0             	add    %eax,-0x10(%ebp)
   12d07:	eb 23                	jmp    12d2c <kernel_vsprintf+0x176>
            } else if (ch == 'c') {
   12d09:	80 7d e7 63          	cmpb   $0x63,-0x19(%ebp)
   12d0d:	75 1d                	jne    12d2c <kernel_vsprintf+0x176>
                char c = va_arg(args, int);
   12d0f:	8b 45 10             	mov    0x10(%ebp),%eax
   12d12:	8d 50 04             	lea    0x4(%eax),%edx
   12d15:	89 55 10             	mov    %edx,0x10(%ebp)
   12d18:	8b 00                	mov    (%eax),%eax
   12d1a:	88 45 e6             	mov    %al,-0x1a(%ebp)
                *(curr++) = c;
   12d1d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12d20:	8d 50 01             	lea    0x1(%eax),%edx
   12d23:	89 55 f0             	mov    %edx,-0x10(%ebp)
   12d26:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   12d2a:	88 10                	mov    %dl,(%eax)
            }
            state = NORMAL;
   12d2c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            break;
   12d33:	eb 01                	jmp    12d36 <kernel_vsprintf+0x180>
        default:
            break;
   12d35:	90                   	nop
    while ((ch = *(formate++)) != '\0') {
   12d36:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d39:	8d 50 01             	lea    0x1(%eax),%edx
   12d3c:	89 55 0c             	mov    %edx,0xc(%ebp)
   12d3f:	0f b6 00             	movzbl (%eax),%eax
   12d42:	88 45 e7             	mov    %al,-0x19(%ebp)
   12d45:	80 7d e7 00          	cmpb   $0x0,-0x19(%ebp)
   12d49:	0f 85 7f fe ff ff    	jne    12bce <kernel_vsprintf+0x18>
        }
    }
    

}
   12d4f:	90                   	nop
   12d50:	90                   	nop
   12d51:	c9                   	leave  
   12d52:	c3                   	ret    

00012d53 <kernel_itoa>:
 * 
 * @param buf 缓冲区
 * @param num 整数
 * @param base 转换的进制规则
 */
void kernel_itoa(char *buf, int num, int base) {
   12d53:	55                   	push   %ebp
   12d54:	89 e5                	mov    %esp,%ebp
   12d56:	81 ec 90 00 00 00    	sub    $0x90,%esp
    char * p = buf;
   12d5c:	8b 45 08             	mov    0x8(%ebp),%eax
   12d5f:	89 45 fc             	mov    %eax,-0x4(%ebp)

    if (base != 2 && base != 8 && base != 10 && base != 16) {
   12d62:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   12d66:	74 1d                	je     12d85 <kernel_itoa+0x32>
   12d68:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   12d6c:	74 17                	je     12d85 <kernel_itoa+0x32>
   12d6e:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   12d72:	74 11                	je     12d85 <kernel_itoa+0x32>
   12d74:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   12d78:	74 0b                	je     12d85 <kernel_itoa+0x32>
        *buf = '\0';
   12d7a:	8b 45 08             	mov    0x8(%ebp),%eax
   12d7d:	c6 00 00             	movb   $0x0,(%eax)
        return;
   12d80:	e9 a2 00 00 00       	jmp    12e27 <kernel_itoa+0xd4>
    }

    if(num < 0)  {
   12d85:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12d89:	79 11                	jns    12d9c <kernel_itoa+0x49>
        *(p++) = '-';
   12d8b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12d8e:	8d 50 01             	lea    0x1(%eax),%edx
   12d91:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12d94:	c6 00 2d             	movb   $0x2d,(%eax)
        num = -num;
   12d97:	f7 5d 0c             	negl   0xc(%ebp)
   12d9a:	eb 1a                	jmp    12db6 <kernel_itoa+0x63>
    } else if (num == 0) {
   12d9c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12da0:	75 14                	jne    12db6 <kernel_itoa+0x63>
        *(p++) = '0';
   12da2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12da5:	8d 50 01             	lea    0x1(%eax),%edx
   12da8:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12dab:	c6 00 30             	movb   $0x30,(%eax)
        *p = '\0';
   12dae:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12db1:	c6 00 00             	movb   $0x0,(%eax)
        return;
   12db4:	eb 71                	jmp    12e27 <kernel_itoa+0xd4>
    }
    

    static const char *num_to_char = {"0123456789abcdef"};
    char arr[128];
    int len = 0;
   12db6:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (num > 0) {
   12dbd:	eb 2e                	jmp    12ded <kernel_itoa+0x9a>
        arr[len++] = num_to_char[num % base];
   12dbf:	8b 0d 40 40 01 00    	mov    0x14040,%ecx
   12dc5:	8b 45 0c             	mov    0xc(%ebp),%eax
   12dc8:	99                   	cltd   
   12dc9:	f7 7d 10             	idivl  0x10(%ebp)
   12dcc:	89 d0                	mov    %edx,%eax
   12dce:	01 c1                	add    %eax,%ecx
   12dd0:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12dd3:	8d 50 01             	lea    0x1(%eax),%edx
   12dd6:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12dd9:	0f b6 11             	movzbl (%ecx),%edx
   12ddc:	88 94 05 74 ff ff ff 	mov    %dl,-0x8c(%ebp,%eax,1)
        num /= base;
   12de3:	8b 45 0c             	mov    0xc(%ebp),%eax
   12de6:	99                   	cltd   
   12de7:	f7 7d 10             	idivl  0x10(%ebp)
   12dea:	89 45 0c             	mov    %eax,0xc(%ebp)
    while (num > 0) {
   12ded:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12df1:	7f cc                	jg     12dbf <kernel_itoa+0x6c>
    }

    for (int i = len - 1; i >= 0; --i) {
   12df3:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12df6:	83 e8 01             	sub    $0x1,%eax
   12df9:	89 45 f4             	mov    %eax,-0xc(%ebp)
   12dfc:	eb 1d                	jmp    12e1b <kernel_itoa+0xc8>
            *(p++) = arr[i];
   12dfe:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12e01:	8d 50 01             	lea    0x1(%eax),%edx
   12e04:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12e07:	8d 8d 74 ff ff ff    	lea    -0x8c(%ebp),%ecx
   12e0d:	8b 55 f4             	mov    -0xc(%ebp),%edx
   12e10:	01 ca                	add    %ecx,%edx
   12e12:	0f b6 12             	movzbl (%edx),%edx
   12e15:	88 10                	mov    %dl,(%eax)
    for (int i = len - 1; i >= 0; --i) {
   12e17:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
   12e1b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12e1f:	79 dd                	jns    12dfe <kernel_itoa+0xab>
    }
    *p = '\0';
   12e21:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12e24:	c6 00 00             	movb   $0x0,(%eax)
   12e27:	c9                   	leave  
   12e28:	c3                   	ret    

00012e29 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   12e29:	55                   	push   %ebp
   12e2a:	89 e5                	mov    %esp,%ebp
   12e2c:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   12e2f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12e33:	75 19                	jne    12e4e <list_is_empty+0x25>
   12e35:	68 3c 3e 01 00       	push   $0x13e3c
   12e3a:	68 20 3f 01 00       	push   $0x13f20
   12e3f:	6a 38                	push   $0x38
   12e41:	68 50 3e 01 00       	push   $0x13e50
   12e46:	e8 80 f7 ff ff       	call   125cb <pannic>
   12e4b:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   12e4e:	8b 45 08             	mov    0x8(%ebp),%eax
   12e51:	8b 40 08             	mov    0x8(%eax),%eax
   12e54:	85 c0                	test   %eax,%eax
   12e56:	0f 94 c0             	sete   %al
   12e59:	0f b6 c0             	movzbl %al,%eax
}
   12e5c:	c9                   	leave  
   12e5d:	c3                   	ret    

00012e5e <list_get_size>:
static inline int list_get_size(list_t *list) {
   12e5e:	55                   	push   %ebp
   12e5f:	89 e5                	mov    %esp,%ebp
   12e61:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   12e64:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12e68:	75 19                	jne    12e83 <list_get_size+0x25>
   12e6a:	68 3c 3e 01 00       	push   $0x13e3c
   12e6f:	68 58 3f 01 00       	push   $0x13f58
   12e74:	6a 3e                	push   $0x3e
   12e76:	68 50 3e 01 00       	push   $0x13e50
   12e7b:	e8 4b f7 ff ff       	call   125cb <pannic>
   12e80:	83 c4 10             	add    $0x10,%esp
    return list->size;
   12e83:	8b 45 08             	mov    0x8(%ebp),%eax
   12e86:	8b 40 08             	mov    0x8(%eax),%eax
}
   12e89:	c9                   	leave  
   12e8a:	c3                   	ret    

00012e8b <list_insert_first>:
 * 
 */

#include "tools/list.h"

void list_insert_first(list_t *list, list_node_t *node) {
   12e8b:	55                   	push   %ebp
   12e8c:	89 e5                	mov    %esp,%ebp
   12e8e:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   12e91:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12e95:	74 06                	je     12e9d <list_insert_first+0x12>
   12e97:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12e9b:	75 19                	jne    12eb6 <list_insert_first+0x2b>
   12e9d:	68 90 3e 01 00       	push   $0x13e90
   12ea2:	68 0c 3f 01 00       	push   $0x13f0c
   12ea7:	6a 0f                	push   $0xf
   12ea9:	68 c0 3e 01 00       	push   $0x13ec0
   12eae:	e8 18 f7 ff ff       	call   125cb <pannic>
   12eb3:	83 c4 10             	add    $0x10,%esp

    node->next = list->first;
   12eb6:	8b 45 08             	mov    0x8(%ebp),%eax
   12eb9:	8b 10                	mov    (%eax),%edx
   12ebb:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ebe:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   12ec1:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ec4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   12eca:	83 ec 0c             	sub    $0xc,%esp
   12ecd:	ff 75 08             	push   0x8(%ebp)
   12ed0:	e8 54 ff ff ff       	call   12e29 <list_is_empty>
   12ed5:	83 c4 10             	add    $0x10,%esp
   12ed8:	85 c0                	test   %eax,%eax
   12eda:	74 16                	je     12ef2 <list_insert_first+0x67>
        list->first = list->last = node;
   12edc:	8b 45 08             	mov    0x8(%ebp),%eax
   12edf:	8b 55 0c             	mov    0xc(%ebp),%edx
   12ee2:	89 50 04             	mov    %edx,0x4(%eax)
   12ee5:	8b 45 08             	mov    0x8(%ebp),%eax
   12ee8:	8b 50 04             	mov    0x4(%eax),%edx
   12eeb:	8b 45 08             	mov    0x8(%ebp),%eax
   12eee:	89 10                	mov    %edx,(%eax)
   12ef0:	eb 12                	jmp    12f04 <list_insert_first+0x79>
    } else {
        list->first->pre = node;
   12ef2:	8b 45 08             	mov    0x8(%ebp),%eax
   12ef5:	8b 00                	mov    (%eax),%eax
   12ef7:	8b 55 0c             	mov    0xc(%ebp),%edx
   12efa:	89 10                	mov    %edx,(%eax)
        list->first = node;
   12efc:	8b 45 08             	mov    0x8(%ebp),%eax
   12eff:	8b 55 0c             	mov    0xc(%ebp),%edx
   12f02:	89 10                	mov    %edx,(%eax)
    }

    list->size++;
   12f04:	8b 45 08             	mov    0x8(%ebp),%eax
   12f07:	8b 40 08             	mov    0x8(%eax),%eax
   12f0a:	8d 50 01             	lea    0x1(%eax),%edx
   12f0d:	8b 45 08             	mov    0x8(%ebp),%eax
   12f10:	89 50 08             	mov    %edx,0x8(%eax)
}
   12f13:	90                   	nop
   12f14:	c9                   	leave  
   12f15:	c3                   	ret    

00012f16 <list_insert_last>:

void list_insert_last(list_t *list, list_node_t *node) {
   12f16:	55                   	push   %ebp
   12f17:	89 e5                	mov    %esp,%ebp
   12f19:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   12f1c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12f20:	74 06                	je     12f28 <list_insert_last+0x12>
   12f22:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12f26:	75 19                	jne    12f41 <list_insert_last+0x2b>
   12f28:	68 90 3e 01 00       	push   $0x13e90
   12f2d:	68 30 3f 01 00       	push   $0x13f30
   12f32:	6a 1f                	push   $0x1f
   12f34:	68 c0 3e 01 00       	push   $0x13ec0
   12f39:	e8 8d f6 ff ff       	call   125cb <pannic>
   12f3e:	83 c4 10             	add    $0x10,%esp

    node->pre = list->last;
   12f41:	8b 45 08             	mov    0x8(%ebp),%eax
   12f44:	8b 50 04             	mov    0x4(%eax),%edx
   12f47:	8b 45 0c             	mov    0xc(%ebp),%eax
   12f4a:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   12f4c:	8b 45 0c             	mov    0xc(%ebp),%eax
   12f4f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)


    if (list_is_empty(list)) {
   12f56:	83 ec 0c             	sub    $0xc,%esp
   12f59:	ff 75 08             	push   0x8(%ebp)
   12f5c:	e8 c8 fe ff ff       	call   12e29 <list_is_empty>
   12f61:	83 c4 10             	add    $0x10,%esp
   12f64:	85 c0                	test   %eax,%eax
   12f66:	74 16                	je     12f7e <list_insert_last+0x68>
        list->first = list->last = node;
   12f68:	8b 45 08             	mov    0x8(%ebp),%eax
   12f6b:	8b 55 0c             	mov    0xc(%ebp),%edx
   12f6e:	89 50 04             	mov    %edx,0x4(%eax)
   12f71:	8b 45 08             	mov    0x8(%ebp),%eax
   12f74:	8b 50 04             	mov    0x4(%eax),%edx
   12f77:	8b 45 08             	mov    0x8(%ebp),%eax
   12f7a:	89 10                	mov    %edx,(%eax)
   12f7c:	eb 15                	jmp    12f93 <list_insert_last+0x7d>
    } else {
        list->last->next = node;
   12f7e:	8b 45 08             	mov    0x8(%ebp),%eax
   12f81:	8b 40 04             	mov    0x4(%eax),%eax
   12f84:	8b 55 0c             	mov    0xc(%ebp),%edx
   12f87:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   12f8a:	8b 45 08             	mov    0x8(%ebp),%eax
   12f8d:	8b 55 0c             	mov    0xc(%ebp),%edx
   12f90:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->size++;
   12f93:	8b 45 08             	mov    0x8(%ebp),%eax
   12f96:	8b 40 08             	mov    0x8(%eax),%eax
   12f99:	8d 50 01             	lea    0x1(%eax),%edx
   12f9c:	8b 45 08             	mov    0x8(%ebp),%eax
   12f9f:	89 50 08             	mov    %edx,0x8(%eax)

}
   12fa2:	90                   	nop
   12fa3:	c9                   	leave  
   12fa4:	c3                   	ret    

00012fa5 <list_remove_first>:

list_node_t* list_remove_first(list_t *list){
   12fa5:	55                   	push   %ebp
   12fa6:	89 e5                	mov    %esp,%ebp
   12fa8:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   12fab:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12faf:	75 19                	jne    12fca <list_remove_first+0x25>
   12fb1:	68 f6 3e 01 00       	push   $0x13ef6
   12fb6:	68 44 3f 01 00       	push   $0x13f44
   12fbb:	6a 31                	push   $0x31
   12fbd:	68 c0 3e 01 00       	push   $0x13ec0
   12fc2:	e8 04 f6 ff ff       	call   125cb <pannic>
   12fc7:	83 c4 10             	add    $0x10,%esp
    if (list_is_empty(list)) {
   12fca:	83 ec 0c             	sub    $0xc,%esp
   12fcd:	ff 75 08             	push   0x8(%ebp)
   12fd0:	e8 54 fe ff ff       	call   12e29 <list_is_empty>
   12fd5:	83 c4 10             	add    $0x10,%esp
   12fd8:	85 c0                	test   %eax,%eax
   12fda:	74 07                	je     12fe3 <list_remove_first+0x3e>
        return (list_node_t*)0;
   12fdc:	b8 00 00 00 00       	mov    $0x0,%eax
   12fe1:	eb 71                	jmp    13054 <list_remove_first+0xaf>
    }

    list_node_t *ret = list->first;
   12fe3:	8b 45 08             	mov    0x8(%ebp),%eax
   12fe6:	8b 00                	mov    (%eax),%eax
   12fe8:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   12feb:	83 ec 0c             	sub    $0xc,%esp
   12fee:	ff 75 08             	push   0x8(%ebp)
   12ff1:	e8 68 fe ff ff       	call   12e5e <list_get_size>
   12ff6:	83 c4 10             	add    $0x10,%esp
   12ff9:	83 f8 01             	cmp    $0x1,%eax
   12ffc:	75 17                	jne    13015 <list_remove_first+0x70>
        list->first = list->last = (list_node_t*)0;
   12ffe:	8b 45 08             	mov    0x8(%ebp),%eax
   13001:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   13008:	8b 45 08             	mov    0x8(%ebp),%eax
   1300b:	8b 50 04             	mov    0x4(%eax),%edx
   1300e:	8b 45 08             	mov    0x8(%ebp),%eax
   13011:	89 10                	mov    %edx,(%eax)
   13013:	eb 18                	jmp    1302d <list_remove_first+0x88>
    } else {
        list->first = list->first->next;
   13015:	8b 45 08             	mov    0x8(%ebp),%eax
   13018:	8b 00                	mov    (%eax),%eax
   1301a:	8b 50 04             	mov    0x4(%eax),%edx
   1301d:	8b 45 08             	mov    0x8(%ebp),%eax
   13020:	89 10                	mov    %edx,(%eax)
        list->first->pre = (list_node_t*)0;
   13022:	8b 45 08             	mov    0x8(%ebp),%eax
   13025:	8b 00                	mov    (%eax),%eax
   13027:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    list->size--;
   1302d:	8b 45 08             	mov    0x8(%ebp),%eax
   13030:	8b 40 08             	mov    0x8(%eax),%eax
   13033:	8d 50 ff             	lea    -0x1(%eax),%edx
   13036:	8b 45 08             	mov    0x8(%ebp),%eax
   13039:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   1303c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1303f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   13046:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13049:	8b 50 04             	mov    0x4(%eax),%edx
   1304c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1304f:	89 10                	mov    %edx,(%eax)
    return ret;
   13051:	8b 45 f4             	mov    -0xc(%ebp),%eax
 }
   13054:	c9                   	leave  
   13055:	c3                   	ret    

00013056 <list_remove_last>:

list_node_t* list_remove_last(list_t *list) {
   13056:	55                   	push   %ebp
   13057:	89 e5                	mov    %esp,%ebp
   13059:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   1305c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13060:	75 19                	jne    1307b <list_remove_last+0x25>
   13062:	68 f6 3e 01 00       	push   $0x13ef6
   13067:	68 68 3f 01 00       	push   $0x13f68
   1306c:	6a 46                	push   $0x46
   1306e:	68 c0 3e 01 00       	push   $0x13ec0
   13073:	e8 53 f5 ff ff       	call   125cb <pannic>
   13078:	83 c4 10             	add    $0x10,%esp
     if (list_is_empty(list)) {
   1307b:	83 ec 0c             	sub    $0xc,%esp
   1307e:	ff 75 08             	push   0x8(%ebp)
   13081:	e8 a3 fd ff ff       	call   12e29 <list_is_empty>
   13086:	83 c4 10             	add    $0x10,%esp
   13089:	85 c0                	test   %eax,%eax
   1308b:	74 07                	je     13094 <list_remove_last+0x3e>
        return (list_node_t*)0;
   1308d:	b8 00 00 00 00       	mov    $0x0,%eax
   13092:	eb 75                	jmp    13109 <list_remove_last+0xb3>
    }

    list_node_t *ret = list->last;
   13094:	8b 45 08             	mov    0x8(%ebp),%eax
   13097:	8b 40 04             	mov    0x4(%eax),%eax
   1309a:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   1309d:	83 ec 0c             	sub    $0xc,%esp
   130a0:	ff 75 08             	push   0x8(%ebp)
   130a3:	e8 b6 fd ff ff       	call   12e5e <list_get_size>
   130a8:	83 c4 10             	add    $0x10,%esp
   130ab:	83 f8 01             	cmp    $0x1,%eax
   130ae:	75 17                	jne    130c7 <list_remove_last+0x71>
        list->first = list->last = (list_node_t*)0;
   130b0:	8b 45 08             	mov    0x8(%ebp),%eax
   130b3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   130ba:	8b 45 08             	mov    0x8(%ebp),%eax
   130bd:	8b 50 04             	mov    0x4(%eax),%edx
   130c0:	8b 45 08             	mov    0x8(%ebp),%eax
   130c3:	89 10                	mov    %edx,(%eax)
   130c5:	eb 1b                	jmp    130e2 <list_remove_last+0x8c>
    } else {
        list->last = list->last->pre;
   130c7:	8b 45 08             	mov    0x8(%ebp),%eax
   130ca:	8b 40 04             	mov    0x4(%eax),%eax
   130cd:	8b 10                	mov    (%eax),%edx
   130cf:	8b 45 08             	mov    0x8(%ebp),%eax
   130d2:	89 50 04             	mov    %edx,0x4(%eax)
        list->last->next = (list_node_t*)0;
   130d5:	8b 45 08             	mov    0x8(%ebp),%eax
   130d8:	8b 40 04             	mov    0x4(%eax),%eax
   130db:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    }

    list->size--;
   130e2:	8b 45 08             	mov    0x8(%ebp),%eax
   130e5:	8b 40 08             	mov    0x8(%eax),%eax
   130e8:	8d 50 ff             	lea    -0x1(%eax),%edx
   130eb:	8b 45 08             	mov    0x8(%ebp),%eax
   130ee:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   130f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   130f4:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   130fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   130fe:	8b 50 04             	mov    0x4(%eax),%edx
   13101:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13104:	89 10                	mov    %edx,(%eax)
    return ret;
   13106:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   13109:	c9                   	leave  
   1310a:	c3                   	ret    

0001310b <list_remove>:

list_node_t* list_remove(list_t *list, list_node_t *node) {
   1310b:	55                   	push   %ebp
   1310c:	89 e5                	mov    %esp,%ebp
   1310e:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   13111:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13115:	74 06                	je     1311d <list_remove+0x12>
   13117:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1311b:	75 19                	jne    13136 <list_remove+0x2b>
   1311d:	68 90 3e 01 00       	push   $0x13e90
   13122:	68 7c 3f 01 00       	push   $0x13f7c
   13127:	6a 5b                	push   $0x5b
   13129:	68 c0 3e 01 00       	push   $0x13ec0
   1312e:	e8 98 f4 ff ff       	call   125cb <pannic>
   13133:	83 c4 10             	add    $0x10,%esp

    if (list_is_empty(list)) {
   13136:	83 ec 0c             	sub    $0xc,%esp
   13139:	ff 75 08             	push   0x8(%ebp)
   1313c:	e8 e8 fc ff ff       	call   12e29 <list_is_empty>
   13141:	83 c4 10             	add    $0x10,%esp
   13144:	85 c0                	test   %eax,%eax
   13146:	74 0a                	je     13152 <list_remove+0x47>
        return (list_node_t*)0;
   13148:	b8 00 00 00 00       	mov    $0x0,%eax
   1314d:	e9 80 00 00 00       	jmp    131d2 <list_remove+0xc7>
    }

    if (node == list->first) list->first = node->next;
   13152:	8b 45 08             	mov    0x8(%ebp),%eax
   13155:	8b 00                	mov    (%eax),%eax
   13157:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1315a:	75 0b                	jne    13167 <list_remove+0x5c>
   1315c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1315f:	8b 50 04             	mov    0x4(%eax),%edx
   13162:	8b 45 08             	mov    0x8(%ebp),%eax
   13165:	89 10                	mov    %edx,(%eax)
    if (node == list->last) list->last = node->pre;
   13167:	8b 45 08             	mov    0x8(%ebp),%eax
   1316a:	8b 40 04             	mov    0x4(%eax),%eax
   1316d:	39 45 0c             	cmp    %eax,0xc(%ebp)
   13170:	75 0b                	jne    1317d <list_remove+0x72>
   13172:	8b 45 0c             	mov    0xc(%ebp),%eax
   13175:	8b 10                	mov    (%eax),%edx
   13177:	8b 45 08             	mov    0x8(%ebp),%eax
   1317a:	89 50 04             	mov    %edx,0x4(%eax)

    if (node->pre) node->pre->next = node->next;
   1317d:	8b 45 0c             	mov    0xc(%ebp),%eax
   13180:	8b 00                	mov    (%eax),%eax
   13182:	85 c0                	test   %eax,%eax
   13184:	74 0e                	je     13194 <list_remove+0x89>
   13186:	8b 45 0c             	mov    0xc(%ebp),%eax
   13189:	8b 00                	mov    (%eax),%eax
   1318b:	8b 55 0c             	mov    0xc(%ebp),%edx
   1318e:	8b 52 04             	mov    0x4(%edx),%edx
   13191:	89 50 04             	mov    %edx,0x4(%eax)
    if (node->next) node->next->pre = node->pre;
   13194:	8b 45 0c             	mov    0xc(%ebp),%eax
   13197:	8b 40 04             	mov    0x4(%eax),%eax
   1319a:	85 c0                	test   %eax,%eax
   1319c:	74 0d                	je     131ab <list_remove+0xa0>
   1319e:	8b 45 0c             	mov    0xc(%ebp),%eax
   131a1:	8b 40 04             	mov    0x4(%eax),%eax
   131a4:	8b 55 0c             	mov    0xc(%ebp),%edx
   131a7:	8b 12                	mov    (%edx),%edx
   131a9:	89 10                	mov    %edx,(%eax)

    node->pre = node->next = (list_node_t*)0;
   131ab:	8b 45 0c             	mov    0xc(%ebp),%eax
   131ae:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   131b5:	8b 45 0c             	mov    0xc(%ebp),%eax
   131b8:	8b 50 04             	mov    0x4(%eax),%edx
   131bb:	8b 45 0c             	mov    0xc(%ebp),%eax
   131be:	89 10                	mov    %edx,(%eax)
    list->size--;
   131c0:	8b 45 08             	mov    0x8(%ebp),%eax
   131c3:	8b 40 08             	mov    0x8(%eax),%eax
   131c6:	8d 50 ff             	lea    -0x1(%eax),%edx
   131c9:	8b 45 08             	mov    0x8(%ebp),%eax
   131cc:	89 50 08             	mov    %edx,0x8(%eax)

    return node;
   131cf:	8b 45 0c             	mov    0xc(%ebp),%eax
   131d2:	c9                   	leave  
   131d3:	c3                   	ret    

000131d4 <inb>:
static inline uint8_t inb(uint16_t port) {
   131d4:	55                   	push   %ebp
   131d5:	89 e5                	mov    %esp,%ebp
   131d7:	83 ec 14             	sub    $0x14,%esp
   131da:	8b 45 08             	mov    0x8(%ebp),%eax
   131dd:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   131e1:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   131e5:	89 c2                	mov    %eax,%edx
   131e7:	ec                   	in     (%dx),%al
   131e8:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   131eb:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   131ef:	c9                   	leave  
   131f0:	c3                   	ret    

000131f1 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   131f1:	55                   	push   %ebp
   131f2:	89 e5                	mov    %esp,%ebp
   131f4:	83 ec 08             	sub    $0x8,%esp
   131f7:	8b 45 08             	mov    0x8(%ebp),%eax
   131fa:	8b 55 0c             	mov    0xc(%ebp),%edx
   131fd:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   13201:	89 d0                	mov    %edx,%eax
   13203:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   13206:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1320a:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1320e:	ee                   	out    %al,(%dx)
}
   1320f:	90                   	nop
   13210:	c9                   	leave  
   13211:	c3                   	ret    

00013212 <log_init>:

/**
 * @brief  初始化串行端口寄存器COM1
 * 
 */
void log_init(void) {
   13212:	55                   	push   %ebp
   13213:	89 e5                	mov    %esp,%ebp
   13215:	83 ec 08             	sub    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   13218:	6a 00                	push   $0x0
   1321a:	68 f9 03 00 00       	push   $0x3f9
   1321f:	e8 cd ff ff ff       	call   131f1 <outb>
   13224:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   13227:	68 80 00 00 00       	push   $0x80
   1322c:	68 fb 03 00 00       	push   $0x3fb
   13231:	e8 bb ff ff ff       	call   131f1 <outb>
   13236:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   13239:	6a 03                	push   $0x3
   1323b:	68 f8 03 00 00       	push   $0x3f8
   13240:	e8 ac ff ff ff       	call   131f1 <outb>
   13245:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   13248:	6a 00                	push   $0x0
   1324a:	68 f9 03 00 00       	push   $0x3f9
   1324f:	e8 9d ff ff ff       	call   131f1 <outb>
   13254:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   13257:	6a 03                	push   $0x3
   13259:	68 fb 03 00 00       	push   $0x3fb
   1325e:	e8 8e ff ff ff       	call   131f1 <outb>
   13263:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0xc7);
   13266:	68 c7 00 00 00       	push   $0xc7
   1326b:	68 fa 03 00 00       	push   $0x3fa
   13270:	e8 7c ff ff ff       	call   131f1 <outb>
   13275:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0f);
   13278:	6a 0f                	push   $0xf
   1327a:	68 fc 03 00 00       	push   $0x3fc
   1327f:	e8 6d ff ff ff       	call   131f1 <outb>
   13284:	83 c4 08             	add    $0x8,%esp

    //初始化互斥锁
    mutex_init(&mutex);
   13287:	83 ec 0c             	sub    $0xc,%esp
   1328a:	68 c4 fb 02 00       	push   $0x2fbc4
   1328f:	e8 22 ec ff ff       	call   11eb6 <mutex_init>
   13294:	83 c4 10             	add    $0x10,%esp
}
   13297:	90                   	nop
   13298:	c9                   	leave  
   13299:	c3                   	ret    

0001329a <log_printf>:
 * @brief  格式化输出到串口
 * 
 * @param formate 
 * @param ... 
 */
void log_printf(const char *formate, ...) {
   1329a:	55                   	push   %ebp
   1329b:	89 e5                	mov    %esp,%ebp
   1329d:	81 ec 98 00 00 00    	sub    $0x98,%esp
    //1.设置字符缓冲区
    char str_buf[128];
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   132a3:	83 ec 04             	sub    $0x4,%esp
   132a6:	68 80 00 00 00       	push   $0x80
   132ab:	6a 00                	push   $0x0
   132ad:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   132b3:	50                   	push   %eax
   132b4:	e8 14 f8 ff ff       	call   12acd <kernel_memset>
   132b9:	83 c4 10             	add    $0x10,%esp
    
    //2.获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   132bc:	8d 45 0c             	lea    0xc(%ebp),%eax
   132bf:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, formate, args);
   132c5:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   132cb:	83 ec 04             	sub    $0x4,%esp
   132ce:	50                   	push   %eax
   132cf:	ff 75 08             	push   0x8(%ebp)
   132d2:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   132d8:	50                   	push   %eax
   132d9:	e8 d8 f8 ff ff       	call   12bb6 <kernel_vsprintf>
   132de:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    const char *p = str_buf;
   132e1:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   132e7:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将以下资源放入临界资源包含区，防止在运行时发生进程切换（cpu关中断）
    mutex_lock(&mutex); //TODO:加锁
   132ea:	83 ec 0c             	sub    $0xc,%esp
   132ed:	68 c4 fb 02 00       	push   $0x2fbc4
   132f2:	e8 0c ec ff ff       	call   11f03 <mutex_lock>
   132f7:	83 c4 10             	add    $0x10,%esp

    //3.将字符串输出到串口
    while (*p != '\0') {
   132fa:	eb 57                	jmp    13353 <log_printf+0xb9>
        //4.判断串口是否正在忙碌，是则阻塞等待
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0);
   132fc:	90                   	nop
   132fd:	83 ec 0c             	sub    $0xc,%esp
   13300:	68 fd 03 00 00       	push   $0x3fd
   13305:	e8 ca fe ff ff       	call   131d4 <inb>
   1330a:	83 c4 10             	add    $0x10,%esp
   1330d:	0f b6 c0             	movzbl %al,%eax
   13310:	83 e0 40             	and    $0x40,%eax
   13313:	85 c0                	test   %eax,%eax
   13315:	74 e6                	je     132fd <log_printf+0x63>

        if (*p == '\n') outb(COM1_PORT, '\r');
   13317:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1331a:	0f b6 00             	movzbl (%eax),%eax
   1331d:	3c 0a                	cmp    $0xa,%al
   1331f:	75 12                	jne    13333 <log_printf+0x99>
   13321:	83 ec 08             	sub    $0x8,%esp
   13324:	6a 0d                	push   $0xd
   13326:	68 f8 03 00 00       	push   $0x3f8
   1332b:	e8 c1 fe ff ff       	call   131f1 <outb>
   13330:	83 c4 10             	add    $0x10,%esp
        
        outb(COM1_PORT, *(p++));
   13333:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13336:	8d 50 01             	lea    0x1(%eax),%edx
   13339:	89 55 f4             	mov    %edx,-0xc(%ebp)
   1333c:	0f b6 00             	movzbl (%eax),%eax
   1333f:	0f b6 c0             	movzbl %al,%eax
   13342:	83 ec 08             	sub    $0x8,%esp
   13345:	50                   	push   %eax
   13346:	68 f8 03 00 00       	push   $0x3f8
   1334b:	e8 a1 fe ff ff       	call   131f1 <outb>
   13350:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0') {
   13353:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13356:	0f b6 00             	movzbl (%eax),%eax
   13359:	84 c0                	test   %al,%al
   1335b:	75 9f                	jne    132fc <log_printf+0x62>
    }
    
    //5.换行
    outb(COM1_PORT, '\r');
   1335d:	83 ec 08             	sub    $0x8,%esp
   13360:	6a 0d                	push   $0xd
   13362:	68 f8 03 00 00       	push   $0x3f8
   13367:	e8 85 fe ff ff       	call   131f1 <outb>
   1336c:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   1336f:	83 ec 08             	sub    $0x8,%esp
   13372:	6a 0a                	push   $0xa
   13374:	68 f8 03 00 00       	push   $0x3f8
   13379:	e8 73 fe ff ff       	call   131f1 <outb>
   1337e:	83 c4 10             	add    $0x10,%esp

    //执行完毕，将资源离开临界资源保护区，(cpu开中断)
    mutex_unlock(&mutex); //TODO:解锁
   13381:	83 ec 0c             	sub    $0xc,%esp
   13384:	68 c4 fb 02 00       	push   $0x2fbc4
   13389:	e8 06 ec ff ff       	call   11f94 <mutex_unlock>
   1338e:	83 c4 10             	add    $0x10,%esp
   13391:	90                   	nop
   13392:	c9                   	leave  
   13393:	c3                   	ret    

Disassembly of section .first_task:

80000000 <first_task_entry>:
    .extern first_main

//第一个任务进程入口函数
first_task_entry:
    //操作系统将为该进程分配栈空间和代码段，即ss和cs寄存器，这里直接用ss寄存器初始化其余段寄存器即可
	mov %ss, %ax
80000000:	66 8c d0             	mov    %ss,%ax
	mov %ax, %ds
80000003:	8e d8                	mov    %eax,%ds
	mov %ax, %es
80000005:	8e c0                	mov    %eax,%es
	mov %ax, %fs
80000007:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
80000009:	8e e8                	mov    %eax,%gs

    //因为cs寄存器已由操作系统分配，所以直接跳转即可
8000000b:	e9 00 00 00 00       	jmp    80000010 <first_main>

80000010 <first_main>:
 */

#include "tools/log.h"
#include "core/task.h"

int first_main(void) {
80000010:	55                   	push   %ebp
80000011:	89 e5                	mov    %esp,%ebp
80000013:	83 ec 18             	sub    $0x18,%esp
    for (;;) {
        int a = 10 / 0;
80000016:	b8 0a 00 00 00       	mov    $0xa,%eax
8000001b:	b9 00 00 00 00       	mov    $0x0,%ecx
80000020:	99                   	cltd   
80000021:	f7 f9                	idiv   %ecx
80000023:	89 45 f4             	mov    %eax,-0xc(%ebp)
        log_printf("first task.");
80000026:	83 ec 0c             	sub    $0xc,%esp
80000029:	68 48 00 00 80       	push   $0x80000048
8000002e:	e8 67 32 01 80       	call   1329a <log_printf>
80000033:	83 c4 10             	add    $0x10,%esp
        sys_sleep(1000);
80000036:	83 ec 0c             	sub    $0xc,%esp
80000039:	68 e8 03 00 00       	push   $0x3e8
8000003e:	e8 d2 11 01 80       	call   11215 <sys_sleep>
80000043:	83 c4 10             	add    $0x10,%esp
    for (;;) {
80000046:	eb ce                	jmp    80000016 <first_main+0x6>
80000048:	66 69 72 73 74 20    	imul   $0x2074,0x73(%edx),%si
8000004e:	74 61                	je     800000b1 <first_main+0xa1>
80000050:	73 6b                	jae    800000bd <first_main+0xad>
80000052:	2e                   	cs
	...
