
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf:     file format elf32-i386
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00003d9c memsz 0x00003d9c flags r-x
    LOAD off    0x00005000 vaddr 0x00014000 paddr 0x00014000 align 2**12
         filesz 0x00000044 memsz 0x0001dbe0 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003200  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000b9c  00013200  00013200  00004200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000044  00014000  00014000  00005000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0001cbe0  00015000  00015000  00005044  2**12
                  ALLOC
  4 .debug_line   00001c23  00000000  00000000  00005044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_line_str 000006d7  00000000  00000000  00006c67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   00004ec8  00000000  00000000  0000733e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00001879  00000000  00000000  0000c206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_aranges 00000220  00000000  00000000  0000da80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    000010de  00000000  00000000  0000dca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .comment      0000002b  00000000  00000000  0000ed7e  2**0
                  CONTENTS, READONLY
 11 .debug_frame  00001358  00000000  00000000  0000edac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010012 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
000102ad l     F .text	0000000d down2
000102ba l     F .text	00000017 up2
000102d1 l     F .text	0000000c write_cr3
000102dd l     F .text	0000000b pde_index
000102e8 l     F .text	00000010 pte_index
000102f8 l     F .text	00000027 pde_to_pt_addr
0001031f l     F .text	00000011 mmu_set_page_dir
00015000 l     O .bss	00000028 paddr_alloc
00016000 l     O .bss	00001000 kernel_page_dir
00010330 l     F .text	0000005d addr_alloc_init
0001038d l     F .text	00000067 addr_alloc_page
000103f4 l     F .text	00000061 addr_free_page
00010455 l     F .text	00000066 show_mem_info
000104bb l     F .text	00000037 total_mem_size
000132e8 l     O .rodata	00000011 __func__.2
00014000 l     O .data	00000040 kernal_map.1
000132fc l     O .rodata	0000000c __func__.0
00000000 l    df *ABS*	00000000 task.c
0001085f l     F .text	0000003d list_node_init
000133dc l     O .rodata	0000000f __func__.9
0001089c l     F .text	0000002d list_node_next
0001343c l     O .rodata	0000000f __func__.3
000108c9 l     F .text	00000047 list_init
000133ec l     O .rodata	0000000a __func__.8
00010910 l     F .text	00000035 list_is_empty
0001344c l     O .rodata	0000000e __func__.2
00010945 l     F .text	0000002d list_get_size
0001342c l     O .rodata	0000000e __func__.4
00010972 l     F .text	0000002c list_get_first
0001341c l     O .rodata	0000000f __func__.5
0001099e l     F .text	00000007 hlt
000109a5 l     F .text	0000000c write_cr3
000109b1 l     F .text	0000001a far_jump
000109cb l     F .text	00000017 write_tr
000109e2 l     F .text	00000011 mmu_set_page_dir
00017000 l     O .bss	00000190 task_manager
000109f3 l     F .text	0000001f switch_to_tss
00010a2d l     F .text	00000108 tss_init
000133d0 l     O .rodata	0000000a __func__.10
000171a0 l     O .bss	00000200 empty_task_stack
00010c19 l     F .text	0000000a empty_task
000133f8 l     O .rodata	0000000f __func__.7
00013408 l     O .rodata	00000011 __func__.6
0001345c l     O .rodata	0000000f __func__.1
0001346c l     O .rodata	00000010 __func__.0
00000000 l    df *ABS*	00000000 gdt.c
000110ae l     F .text	00000028 lgdt
000173a0 l     O .bss	00010000 gdt_table
000273a0 l     O .bss	00008000 is_alloc
0002f3a0 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 idt.c
000112a0 l     F .text	00000007 cli
000112a7 l     F .text	00000007 sti
000112ae l     F .text	00000007 hlt
000112b5 l     F .text	0000001d inb
000112d2 l     F .text	00000021 outb
000112f3 l     F .text	00000028 lidt
0001131b l     F .text	00000010 read_eflags
0001132b l     F .text	0000000b write_eflags
0002f3c0 l     O .bss	00000800 idt_table
00011336 l     F .text	000000e9 print_exception_fram
0001141f l     F .text	0000003e do_default_handler
000116a9 l     F .text	00000047 gate_desc_set
00011730 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 mmu.c
00000000 l    df *ABS*	00000000 time.c
00011ada l     F .text	00000021 outb
0002fbc0 l     O .bss	00000004 sys_tick
00011b23 l     F .text	00000062 init_pit
00000000 l    df *ABS*	00000000 first_task.c
00000000 l    df *ABS*	00000000 init.c
00013858 l     O .rodata	0000000c __func__.1
00013864 l     O .rodata	00000013 __func__.0
00000000 l    df *ABS*	00000000 mutex.c
00011ca6 l     F .text	00000047 list_init
00013924 l     O .rodata	0000000a __func__.1
00011ced l     F .text	00000035 list_is_empty
00013930 l     O .rodata	0000000e __func__.0
00013918 l     O .rodata	0000000b __func__.2
00000000 l    df *ABS*	00000000 sem.c
00011eb8 l     F .text	00000047 list_init
000139e4 l     O .rodata	0000000a __func__.1
00011eff l     F .text	00000035 list_is_empty
000139f0 l     O .rodata	0000000e __func__.0
000139d8 l     O .rodata	00000009 __func__.2
00000000 l    df *ABS*	00000000 test.c
00012088 l     F .text	00000047 list_init
00013b04 l     O .rodata	0000000a __func__.3
000120cf l     F .text	0000002d list_get_size
00013b10 l     O .rodata	0000000e __func__.2
000120fc l     F .text	0000002c list_get_first
00013b30 l     O .rodata	0000000f __func__.0
00012128 l     F .text	0000002d list_get_last
00013b20 l     O .rodata	0000000e __func__.1
00000000 l    df *ABS*	00000000 assert.c
00012430 l     F .text	00000007 hlt
00000000 l    df *ABS*	00000000 bitmap.c
00013c00 l     O .rodata	0000000c __func__.3
00013c0c l     O .rodata	0000000f __func__.2
00013c1c l     O .rodata	0000000f __func__.1
00013c2c l     O .rodata	00000013 __func__.0
00000000 l    df *ABS*	00000000 klib.c
00014040 l     O .data	00000004 num_to_char.0
00000000 l    df *ABS*	00000000 list.c
00012c95 l     F .text	00000035 list_is_empty
00013d34 l     O .rodata	0000000e __func__.5
00012cca l     F .text	0000002d list_get_size
00013d6c l     O .rodata	0000000e __func__.2
00013d20 l     O .rodata	00000012 __func__.6
00013d44 l     O .rodata	00000011 __func__.4
00013d58 l     O .rodata	00000012 __func__.3
00013d7c l     O .rodata	00000011 __func__.1
00013d90 l     O .rodata	0000000c __func__.0
00000000 l    df *ABS*	00000000 log.c
00013040 l     F .text	0000001d inb
0001305d l     F .text	00000021 outb
0002fbc4 l     O .bss	00000014 mutex
00012517 g     F .text	00000078 bitmap_get_bit
000128ea g     F .text	0000004f kernel_memcpy
00011936 g     F .text	00000098 idt_enable
00010dc9 g     F .text	0000000a task_current
00012d82 g     F .text	0000008f list_insert_last
00010e3b g     F .text	00000061 sys_yield
00011591 g     F .text	0000001c do_handler_segment_not_present
00010d05 g     F .text	0000004b task_set_ready
00012697 g     F .text	00000021 bitmap_is_set
00011a6d g     F .text	0000000b idt_enable_global
00012939 g     F .text	00000041 kernel_memset
00010081 g       .text	00000000 exception_handler_nmi
00010243 g       .text	00000000 exception_handler_virtual_exception
0001307e g     F .text	00000088 log_init
00011c69 g     F .text	0000003d init_main
000101ee g       .text	00000000 exception_handler_alignment_check
000127b3 g     F .text	00000047 kernel_strcpy
00011a62 g     F .text	0000000b idt_disable_global
00014000 g       .data	00000000 s_data
00011b9d g     F .text	00000028 first_main
000116f0 g     F .text	00000040 idt_install
0001002a g       .text	00000000 exception_handler_unknown
0001009e g       .text	00000000 exception_handler_breakpoint
000114e9 g     F .text	0000001c do_handler_overflow
0001161d g     F .text	0000001c do_handler_alignment_check
0001019b g       .text	00000000 exception_handler_general_protection
000115c9 g     F .text	0000001c do_handler_general_protection
0001168d g     F .text	0000001c do_handler_control_exception
0001205f g     F .text	00000029 sem_count
00011479 g     F .text	0000001c do_handler_divider
0001258f g     F .text	00000108 bitmap_set_bit
00011559 g     F .text	0000001c do_handler_double_fault
000115e5 g     F .text	0000001c do_handler_page_fault
0001012f g       .text	00000000 exception_handler_double_fault
00011a78 g     F .text	00000039 pic_send_eoi
00012ec2 g     F .text	000000b5 list_remove_last
00010cfb g     F .text	0000000a task_first_task
00010000 g       .text	00000000 s_text
00011f77 g     F .text	0000006b sem_wait
00010180 g       .text	00000000 exception_handler_stack_segment_fault
00011bc5 g       .text	00000000 first_task_entry
00011195 g     F .text	00000094 gdt_init
00011671 g     F .text	0000001c do_handler_virtual_exception
000100bb g       .text	00000000 exception_handler_overflow
00010298 g       .text	00000000 simple_switch
0001027b g       .text	00000000 exception_handler_time
00011495 g     F .text	0000001c do_handler_debug
0002fbe0 g     O .bss	00002000 stack
0001104e g     F .text	00000060 sys_sleep
00012155 g     F .text	000002db list_test
00010260 g       .text	00000000 exception_handler_control_exception
000100d8 g       .text	00000000 exception_handler_bound_range
000117c3 g     F .text	00000173 idt_init
00011fe2 g     F .text	0000007d sem_notify
00011521 g     F .text	0000001c do_handler_invalid_opcode
0001014a g       .text	00000000 exception_handler_invalid_tss
00011601 g     F .text	0000001c do_handler_fpu_error
00010c9e g     F .text	0000005d task_first_init
00011639 g     F .text	0000001c do_handler_machine_check
00012cf7 g     F .text	0000008b list_insert_first
00011003 g     F .text	0000004b task_set_wakeup
00010d9b g     F .text	0000002e task_ready_first
00010047 g       .text	00000000 exception_handler_divider
000106e1 g     F .text	00000085 memory_creat_uvm
000127fa g     F .text	00000051 kernel_strncpy
00031be0 g       .bss	00000000 mem_free_start
00011bd5 g     F .text	00000053 kernel_init
00011f34 g     F .text	00000043 sem_init
00010000 g       .text	00000000 _start
00012a22 g     F .text	0000019d kernel_vsprintf
00010112 g       .text	00000000 exception_handler_device_unavailable
000100f5 g       .text	00000000 exception_handler_invalid_opcode
00011d6f g     F .text	00000091 mutex_lock
00010209 g       .text	00000000 exception_handler_machine_check
00011575 g     F .text	0000001c do_handler_invalid_tss
000119ce g     F .text	00000094 idt_disable
00010fa7 g     F .text	0000005c task_set_sleep
000105a2 g     F .text	0000009b memory_creat_map
000114b1 g     F .text	0000001c do_handler_nmi
00011d22 g     F .text	0000004d mutex_init
00010226 g       .text	00000000 exception_handler_smd_exception
0001246d g     F .text	00000016 bitmap_byte_count
0001153d g     F .text	0000001c do_handler_device_unavailable
00011ab1 g     F .text	00000018 idt_enter_protection
0001063d g     F .text	000000a4 create_kernal_table
00010e9c g     F .text	0000010b task_slice_end
00011c28 g     F .text	00000041 move_to_first_task
0001297a g     F .text	00000084 kernel_memcmp
00011655 g     F .text	0000001c do_handler_smd_exception
000101b6 g       .text	00000000 exception_handler_page_fault
0001145d g     F .text	0000001c do_handler_unknown
000101d1 g       .text	00000000 exception_handler_fpu_error
00010a12 g     F .text	0000001b task_switch_from_to
00011e00 g     F .text	000000b8 mutex_unlock
00010dd3 g     F .text	00000068 task_switch
000128b5 g     F .text	00000035 kernel_strlen
00010d50 g     F .text	0000004b task_set_unready
00010064 g       .text	00000000 exception_handler_debug
000110d6 g     F .text	000000bf segment_desc_set
00011505 g     F .text	0000001c do_handler_bound_range
00012e11 g     F .text	000000b1 list_remove_first
00013d9c g       .rodata	00000000 e_text
0001284b g     F .text	0000006a kernel_strncmp
00012483 g     F .text	00000094 bitmap_init
00010165 g       .text	00000000 exception_handler_segment_not_present
000126b8 g     F .text	000000fb bitmap_alloc_nbits
00010c23 g     F .text	0000007b task_manager_init
00010766 g     F .text	000000f9 memory_init
00012437 g     F .text	00000036 pannic
000115ad g     F .text	0000001c do_handler_stack_segment_fault
000114cd g     F .text	0000001c do_handler_breakpoint
00013106 g     F .text	000000fa log_printf
00010b35 g     F .text	000000e4 task_init
000129fe g     F .text	00000024 kernel_sprintf
00011229 g     F .text	00000077 gdt_alloc_desc
00012bbf g     F .text	000000d6 kernel_itoa
00012f77 g     F .text	000000c9 list_remove
00011ac9 g     F .text	00000011 idt_leave_protection
000104f2 g     F .text	000000b0 find_pte
00011afb g     F .text	00000028 do_handler_time
00011b85 g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
*            [&boot_info]
*    esp ->  [返回地址]
*   所以要想访问到&boot_info，则只需从当前esp的位置偏移+4字节即可
*/
_start:
    mov %esp, %ebp      //栈空间最好只用ebp来进行偏移访问
   10000:	89 e5                	mov    %esp,%ebp
    mov 0x4(%ebp), %eax //将&boot_info的值存入eax中
   10002:	8b 45 04             	mov    0x4(%ebp),%eax

    push %eax           //外部函数将参数压入栈中，再进行函数调用
   10005:	50                   	push   %eax
    call kernel_init    //调用内核初始化函数
   10006:	e8 ca 1b 00 00       	call   11bd5 <kernel_init>

    //完成内核初始化后，进行直接跳转，以替换cs寄存器中临时的内核代码段的选择子为此时内存中真正的内核代码段选择子
    //cs:KERNEL_SELECTOR_CS, ip:gdt_reload
    jmp $KERNEL_SELECTOR_CS, $gdt_reload    
   1000b:	ea 12 00 01 00 08 00 	ljmp   $0x8,$0x10012

00010012 <gdt_reload>:

gdt_reload:
    //替换其他段寄存器中临时的内核数据段的选择子为此时内存中真正的内核数据段的选择子
    mov $KERNEL_SELECTOR_DS, %ax
   10012:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10016:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10018:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001a:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001c:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001e:	8e e8                	mov    %eax,%gs

    //重新指定栈空间位置，不再使用0~0x7c00这部分空间
    //stack段已在下面预留了KERNEL_STACK_SIZE的空间大小，直接将最高地址赋值给esp，esp便可使用这片空间
    mov $(stack + KERNEL_STACK_SIZE), %esp
   10020:	bc e0 1b 03 00       	mov    $0x31be0,%esp

    //继续初始化内核
    //TODO:后序再来说明该函数的作用
    jmp init_main 
   10025:	e9 3f 1c 00 00       	jmp    11c69 <init_main>

0001002a <exception_handler_unknown>:
//宏结束标志
.endm

//使用定义的异常宏 
//                |异常类型|       |IDT索引| |错误码|
exception_handler unknown,              -1, 0    //未知异常
   1002a:	6a 00                	push   $0x0
   1002c:	6a ff                	push   $0xffffffff
   1002e:	60                   	pusha  
   1002f:	1e                   	push   %ds
   10030:	06                   	push   %es
   10031:	0f a0                	push   %fs
   10033:	0f a8                	push   %gs
   10035:	54                   	push   %esp
   10036:	e8 22 14 00 00       	call   1145d <do_handler_unknown>
   1003b:	5c                   	pop    %esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider,              0,  0    //除0异常
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 21 14 00 00       	call   11479 <do_handler_divider>
   10058:	5c                   	pop    %esp
   10059:	0f a9                	pop    %gs
   1005b:	0f a1                	pop    %fs
   1005d:	07                   	pop    %es
   1005e:	1f                   	pop    %ds
   1005f:	61                   	popa   
   10060:	83 c4 08             	add    $0x8,%esp
   10063:	cf                   	iret   

00010064 <exception_handler_debug>:
exception_handler debug,                1,  0    //debug异常
   10064:	6a 00                	push   $0x0
   10066:	6a 01                	push   $0x1
   10068:	60                   	pusha  
   10069:	1e                   	push   %ds
   1006a:	06                   	push   %es
   1006b:	0f a0                	push   %fs
   1006d:	0f a8                	push   %gs
   1006f:	54                   	push   %esp
   10070:	e8 20 14 00 00       	call   11495 <do_handler_debug>
   10075:	5c                   	pop    %esp
   10076:	0f a9                	pop    %gs
   10078:	0f a1                	pop    %fs
   1007a:	07                   	pop    %es
   1007b:	1f                   	pop    %ds
   1007c:	61                   	popa   
   1007d:	83 c4 08             	add    $0x8,%esp
   10080:	cf                   	iret   

00010081 <exception_handler_nmi>:
exception_handler nmi,                  2,  0
   10081:	6a 00                	push   $0x0
   10083:	6a 02                	push   $0x2
   10085:	60                   	pusha  
   10086:	1e                   	push   %ds
   10087:	06                   	push   %es
   10088:	0f a0                	push   %fs
   1008a:	0f a8                	push   %gs
   1008c:	54                   	push   %esp
   1008d:	e8 1f 14 00 00       	call   114b1 <do_handler_nmi>
   10092:	5c                   	pop    %esp
   10093:	0f a9                	pop    %gs
   10095:	0f a1                	pop    %fs
   10097:	07                   	pop    %es
   10098:	1f                   	pop    %ds
   10099:	61                   	popa   
   1009a:	83 c4 08             	add    $0x8,%esp
   1009d:	cf                   	iret   

0001009e <exception_handler_breakpoint>:
exception_handler breakpoint,           3,  0
   1009e:	6a 00                	push   $0x0
   100a0:	6a 03                	push   $0x3
   100a2:	60                   	pusha  
   100a3:	1e                   	push   %ds
   100a4:	06                   	push   %es
   100a5:	0f a0                	push   %fs
   100a7:	0f a8                	push   %gs
   100a9:	54                   	push   %esp
   100aa:	e8 1e 14 00 00       	call   114cd <do_handler_breakpoint>
   100af:	5c                   	pop    %esp
   100b0:	0f a9                	pop    %gs
   100b2:	0f a1                	pop    %fs
   100b4:	07                   	pop    %es
   100b5:	1f                   	pop    %ds
   100b6:	61                   	popa   
   100b7:	83 c4 08             	add    $0x8,%esp
   100ba:	cf                   	iret   

000100bb <exception_handler_overflow>:
exception_handler overflow,             4,  0
   100bb:	6a 00                	push   $0x0
   100bd:	6a 04                	push   $0x4
   100bf:	60                   	pusha  
   100c0:	1e                   	push   %ds
   100c1:	06                   	push   %es
   100c2:	0f a0                	push   %fs
   100c4:	0f a8                	push   %gs
   100c6:	54                   	push   %esp
   100c7:	e8 1d 14 00 00       	call   114e9 <do_handler_overflow>
   100cc:	5c                   	pop    %esp
   100cd:	0f a9                	pop    %gs
   100cf:	0f a1                	pop    %fs
   100d1:	07                   	pop    %es
   100d2:	1f                   	pop    %ds
   100d3:	61                   	popa   
   100d4:	83 c4 08             	add    $0x8,%esp
   100d7:	cf                   	iret   

000100d8 <exception_handler_bound_range>:
exception_handler bound_range,          5,  0
   100d8:	6a 00                	push   $0x0
   100da:	6a 05                	push   $0x5
   100dc:	60                   	pusha  
   100dd:	1e                   	push   %ds
   100de:	06                   	push   %es
   100df:	0f a0                	push   %fs
   100e1:	0f a8                	push   %gs
   100e3:	54                   	push   %esp
   100e4:	e8 1c 14 00 00       	call   11505 <do_handler_bound_range>
   100e9:	5c                   	pop    %esp
   100ea:	0f a9                	pop    %gs
   100ec:	0f a1                	pop    %fs
   100ee:	07                   	pop    %es
   100ef:	1f                   	pop    %ds
   100f0:	61                   	popa   
   100f1:	83 c4 08             	add    $0x8,%esp
   100f4:	cf                   	iret   

000100f5 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode,       6,  0
   100f5:	6a 00                	push   $0x0
   100f7:	6a 06                	push   $0x6
   100f9:	60                   	pusha  
   100fa:	1e                   	push   %ds
   100fb:	06                   	push   %es
   100fc:	0f a0                	push   %fs
   100fe:	0f a8                	push   %gs
   10100:	54                   	push   %esp
   10101:	e8 1b 14 00 00       	call   11521 <do_handler_invalid_opcode>
   10106:	5c                   	pop    %esp
   10107:	0f a9                	pop    %gs
   10109:	0f a1                	pop    %fs
   1010b:	07                   	pop    %es
   1010c:	1f                   	pop    %ds
   1010d:	61                   	popa   
   1010e:	83 c4 08             	add    $0x8,%esp
   10111:	cf                   	iret   

00010112 <exception_handler_device_unavailable>:
exception_handler device_unavailable,   7,  0
   10112:	6a 00                	push   $0x0
   10114:	6a 07                	push   $0x7
   10116:	60                   	pusha  
   10117:	1e                   	push   %ds
   10118:	06                   	push   %es
   10119:	0f a0                	push   %fs
   1011b:	0f a8                	push   %gs
   1011d:	54                   	push   %esp
   1011e:	e8 1a 14 00 00       	call   1153d <do_handler_device_unavailable>
   10123:	5c                   	pop    %esp
   10124:	0f a9                	pop    %gs
   10126:	0f a1                	pop    %fs
   10128:	07                   	pop    %es
   10129:	1f                   	pop    %ds
   1012a:	61                   	popa   
   1012b:	83 c4 08             	add    $0x8,%esp
   1012e:	cf                   	iret   

0001012f <exception_handler_double_fault>:
exception_handler double_fault,         8,  1
   1012f:	6a 08                	push   $0x8
   10131:	60                   	pusha  
   10132:	1e                   	push   %ds
   10133:	06                   	push   %es
   10134:	0f a0                	push   %fs
   10136:	0f a8                	push   %gs
   10138:	54                   	push   %esp
   10139:	e8 1b 14 00 00       	call   11559 <do_handler_double_fault>
   1013e:	5c                   	pop    %esp
   1013f:	0f a9                	pop    %gs
   10141:	0f a1                	pop    %fs
   10143:	07                   	pop    %es
   10144:	1f                   	pop    %ds
   10145:	61                   	popa   
   10146:	83 c4 08             	add    $0x8,%esp
   10149:	cf                   	iret   

0001014a <exception_handler_invalid_tss>:
exception_handler invalid_tss,          10, 1
   1014a:	6a 0a                	push   $0xa
   1014c:	60                   	pusha  
   1014d:	1e                   	push   %ds
   1014e:	06                   	push   %es
   1014f:	0f a0                	push   %fs
   10151:	0f a8                	push   %gs
   10153:	54                   	push   %esp
   10154:	e8 1c 14 00 00       	call   11575 <do_handler_invalid_tss>
   10159:	5c                   	pop    %esp
   1015a:	0f a9                	pop    %gs
   1015c:	0f a1                	pop    %fs
   1015e:	07                   	pop    %es
   1015f:	1f                   	pop    %ds
   10160:	61                   	popa   
   10161:	83 c4 08             	add    $0x8,%esp
   10164:	cf                   	iret   

00010165 <exception_handler_segment_not_present>:
exception_handler segment_not_present,  11, 1
   10165:	6a 0b                	push   $0xb
   10167:	60                   	pusha  
   10168:	1e                   	push   %ds
   10169:	06                   	push   %es
   1016a:	0f a0                	push   %fs
   1016c:	0f a8                	push   %gs
   1016e:	54                   	push   %esp
   1016f:	e8 1d 14 00 00       	call   11591 <do_handler_segment_not_present>
   10174:	5c                   	pop    %esp
   10175:	0f a9                	pop    %gs
   10177:	0f a1                	pop    %fs
   10179:	07                   	pop    %es
   1017a:	1f                   	pop    %ds
   1017b:	61                   	popa   
   1017c:	83 c4 08             	add    $0x8,%esp
   1017f:	cf                   	iret   

00010180 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,  12, 1
   10180:	6a 0c                	push   $0xc
   10182:	60                   	pusha  
   10183:	1e                   	push   %ds
   10184:	06                   	push   %es
   10185:	0f a0                	push   %fs
   10187:	0f a8                	push   %gs
   10189:	54                   	push   %esp
   1018a:	e8 1e 14 00 00       	call   115ad <do_handler_stack_segment_fault>
   1018f:	5c                   	pop    %esp
   10190:	0f a9                	pop    %gs
   10192:	0f a1                	pop    %fs
   10194:	07                   	pop    %es
   10195:	1f                   	pop    %ds
   10196:	61                   	popa   
   10197:	83 c4 08             	add    $0x8,%esp
   1019a:	cf                   	iret   

0001019b <exception_handler_general_protection>:
exception_handler general_protection,   13, 1
   1019b:	6a 0d                	push   $0xd
   1019d:	60                   	pusha  
   1019e:	1e                   	push   %ds
   1019f:	06                   	push   %es
   101a0:	0f a0                	push   %fs
   101a2:	0f a8                	push   %gs
   101a4:	54                   	push   %esp
   101a5:	e8 1f 14 00 00       	call   115c9 <do_handler_general_protection>
   101aa:	5c                   	pop    %esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa   
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret   

000101b6 <exception_handler_page_fault>:
exception_handler page_fault,           14, 1
   101b6:	6a 0e                	push   $0xe
   101b8:	60                   	pusha  
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 20 14 00 00       	call   115e5 <do_handler_page_fault>
   101c5:	5c                   	pop    %esp
   101c6:	0f a9                	pop    %gs
   101c8:	0f a1                	pop    %fs
   101ca:	07                   	pop    %es
   101cb:	1f                   	pop    %ds
   101cc:	61                   	popa   
   101cd:	83 c4 08             	add    $0x8,%esp
   101d0:	cf                   	iret   

000101d1 <exception_handler_fpu_error>:
exception_handler fpu_error,            16, 0
   101d1:	6a 00                	push   $0x0
   101d3:	6a 10                	push   $0x10
   101d5:	60                   	pusha  
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 1f 14 00 00       	call   11601 <do_handler_fpu_error>
   101e2:	5c                   	pop    %esp
   101e3:	0f a9                	pop    %gs
   101e5:	0f a1                	pop    %fs
   101e7:	07                   	pop    %es
   101e8:	1f                   	pop    %ds
   101e9:	61                   	popa   
   101ea:	83 c4 08             	add    $0x8,%esp
   101ed:	cf                   	iret   

000101ee <exception_handler_alignment_check>:
exception_handler alignment_check,      17, 1
   101ee:	6a 11                	push   $0x11
   101f0:	60                   	pusha  
   101f1:	1e                   	push   %ds
   101f2:	06                   	push   %es
   101f3:	0f a0                	push   %fs
   101f5:	0f a8                	push   %gs
   101f7:	54                   	push   %esp
   101f8:	e8 20 14 00 00       	call   1161d <do_handler_alignment_check>
   101fd:	5c                   	pop    %esp
   101fe:	0f a9                	pop    %gs
   10200:	0f a1                	pop    %fs
   10202:	07                   	pop    %es
   10203:	1f                   	pop    %ds
   10204:	61                   	popa   
   10205:	83 c4 08             	add    $0x8,%esp
   10208:	cf                   	iret   

00010209 <exception_handler_machine_check>:
exception_handler machine_check,        18, 0
   10209:	6a 00                	push   $0x0
   1020b:	6a 12                	push   $0x12
   1020d:	60                   	pusha  
   1020e:	1e                   	push   %ds
   1020f:	06                   	push   %es
   10210:	0f a0                	push   %fs
   10212:	0f a8                	push   %gs
   10214:	54                   	push   %esp
   10215:	e8 1f 14 00 00       	call   11639 <do_handler_machine_check>
   1021a:	5c                   	pop    %esp
   1021b:	0f a9                	pop    %gs
   1021d:	0f a1                	pop    %fs
   1021f:	07                   	pop    %es
   10220:	1f                   	pop    %ds
   10221:	61                   	popa   
   10222:	83 c4 08             	add    $0x8,%esp
   10225:	cf                   	iret   

00010226 <exception_handler_smd_exception>:
exception_handler smd_exception,        19, 0
   10226:	6a 00                	push   $0x0
   10228:	6a 13                	push   $0x13
   1022a:	60                   	pusha  
   1022b:	1e                   	push   %ds
   1022c:	06                   	push   %es
   1022d:	0f a0                	push   %fs
   1022f:	0f a8                	push   %gs
   10231:	54                   	push   %esp
   10232:	e8 1e 14 00 00       	call   11655 <do_handler_smd_exception>
   10237:	5c                   	pop    %esp
   10238:	0f a9                	pop    %gs
   1023a:	0f a1                	pop    %fs
   1023c:	07                   	pop    %es
   1023d:	1f                   	pop    %ds
   1023e:	61                   	popa   
   1023f:	83 c4 08             	add    $0x8,%esp
   10242:	cf                   	iret   

00010243 <exception_handler_virtual_exception>:
exception_handler virtual_exception,    20, 0
   10243:	6a 00                	push   $0x0
   10245:	6a 14                	push   $0x14
   10247:	60                   	pusha  
   10248:	1e                   	push   %ds
   10249:	06                   	push   %es
   1024a:	0f a0                	push   %fs
   1024c:	0f a8                	push   %gs
   1024e:	54                   	push   %esp
   1024f:	e8 1d 14 00 00       	call   11671 <do_handler_virtual_exception>
   10254:	5c                   	pop    %esp
   10255:	0f a9                	pop    %gs
   10257:	0f a1                	pop    %fs
   10259:	07                   	pop    %es
   1025a:	1f                   	pop    %ds
   1025b:	61                   	popa   
   1025c:	83 c4 08             	add    $0x8,%esp
   1025f:	cf                   	iret   

00010260 <exception_handler_control_exception>:
exception_handler control_exception,    21, 1
   10260:	6a 15                	push   $0x15
   10262:	60                   	pusha  
   10263:	1e                   	push   %ds
   10264:	06                   	push   %es
   10265:	0f a0                	push   %fs
   10267:	0f a8                	push   %gs
   10269:	54                   	push   %esp
   1026a:	e8 1e 14 00 00       	call   1168d <do_handler_control_exception>
   1026f:	5c                   	pop    %esp
   10270:	0f a9                	pop    %gs
   10272:	0f a1                	pop    %fs
   10274:	07                   	pop    %es
   10275:	1f                   	pop    %ds
   10276:	61                   	popa   
   10277:	83 c4 08             	add    $0x8,%esp
   1027a:	cf                   	iret   

0001027b <exception_handler_time>:

//定时器的中断处理函数
exception_handler time,                 0x20, 0 
   1027b:	6a 00                	push   $0x0
   1027d:	6a 20                	push   $0x20
   1027f:	60                   	pusha  
   10280:	1e                   	push   %ds
   10281:	06                   	push   %es
   10282:	0f a0                	push   %fs
   10284:	0f a8                	push   %gs
   10286:	54                   	push   %esp
   10287:	e8 6f 18 00 00       	call   11afb <do_handler_time>
   1028c:	5c                   	pop    %esp
   1028d:	0f a9                	pop    %gs
   1028f:	0f a1                	pop    %fs
   10291:	07                   	pop    %es
   10292:	1f                   	pop    %ds
   10293:	61                   	popa   
   10294:	83 c4 08             	add    $0x8,%esp
   10297:	cf                   	iret   

00010298 <simple_switch>:
//TODO:该部分为另一种任务切换时cpu上下文环境的保存方法，并未被调用
    .text
    .global simple_switch
simple_switch:  //simple_switch(from, to)
    //1.获取参数
    mov 8(%esp), %edx   //获取 to, 地址(指针) --> 目标任务的栈空间对应的 esp 的值
   10298:	8b 54 24 08          	mov    0x8(%esp),%edx
    mov 4(%esp), %eax   //获取 from, 地址(指针) --> 当前任务的栈空间对应的 esp 的值
   1029c:	8b 44 24 04          	mov    0x4(%esp),%eax


    //2.被调用者保存当前任务的 ebp, ebx, esi, edi 到当前任务的栈中
    //eax, ecx, edx, eip, eflags 已由调用者压入当前任务的栈中
    push %ebp
   102a0:	55                   	push   %ebp
    push %ebx
   102a1:	53                   	push   %ebx
    push %esi
   102a2:	56                   	push   %esi
    push %edi
   102a3:	57                   	push   %edi

    //3.更新当前任务栈空间的 esp
    mov %esp, (%eax)
   102a4:	89 20                	mov    %esp,(%eax)

    //3.进行栈任务栈的切换
    mov (%edx), %esp
   102a6:	8b 22                	mov    (%edx),%esp


    //4.恢复切换后的任务状态，ebp, ebx, esi, edi 手动恢复
    //eax, ecx, edx, eip, eflags, 是在当前任务(c函数)调用simple_switch时已压入当前任务栈中，
    //调用 ret 后会自行弹出并恢复
    pop %edi
   102a8:	5f                   	pop    %edi
    pop %esi
   102a9:	5e                   	pop    %esi
    pop %ebx
   102aa:	5b                   	pop    %ebx
    pop %ebp
   102ab:	5d                   	pop    %ebp

    //5.恢复切换后的任务执行流，相当于此时 esp ->[eip]， 即 pop %eip
   102ac:	c3                   	ret    

000102ad <down2>:
 * 
 * @param size 
 * @param bound 一般取2的n次方
 * @return uint32_t 
 */
static inline uint32_t down2(uint32_t size, uint32_t bound) {
   102ad:	55                   	push   %ebp
   102ae:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);  
   102b0:	8b 45 0c             	mov    0xc(%ebp),%eax
   102b3:	f7 d8                	neg    %eax
   102b5:	23 45 08             	and    0x8(%ebp),%eax
}
   102b8:	5d                   	pop    %ebp
   102b9:	c3                   	ret    

000102ba <up2>:
 * 
 * @param size 
 * @param bound 一般取2的n次方
 * @return uint32_t 
 */
static inline uint32_t up2(uint32_t size, uint32_t bound) {
   102ba:	55                   	push   %ebp
   102bb:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   102bd:	8b 55 08             	mov    0x8(%ebp),%edx
   102c0:	8b 45 0c             	mov    0xc(%ebp),%eax
   102c3:	01 d0                	add    %edx,%eax
   102c5:	8d 50 ff             	lea    -0x1(%eax),%edx
   102c8:	8b 45 0c             	mov    0xc(%ebp),%eax
   102cb:	f7 d8                	neg    %eax
   102cd:	21 d0                	and    %edx,%eax
}
   102cf:	5d                   	pop    %ebp
   102d0:	c3                   	ret    

000102d1 <write_cr3>:
/**
 * @brief  向cr3寄存器写入数据
 *
 * @param data
 */
static inline void write_cr3(uint32_t data) {
   102d1:	55                   	push   %ebp
   102d2:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("mov %[v], %%cr3" : : [v] "r"(data));
   102d4:	8b 45 08             	mov    0x8(%ebp),%eax
   102d7:	0f 22 d8             	mov    %eax,%cr3
}
   102da:	90                   	nop
   102db:	5d                   	pop    %ebp
   102dc:	c3                   	ret    

000102dd <pde_index>:
 * @brief 获取虚拟地址的高10位，及对应的页目录项在页目录表中的索引
 * 
 * @param vstart 
 * @return uint32_t 
 */
static inline uint32_t pde_index(uint32_t vstart) {
   102dd:	55                   	push   %ebp
   102de:	89 e5                	mov    %esp,%ebp
    return (vstart >> 22);
   102e0:	8b 45 08             	mov    0x8(%ebp),%eax
   102e3:	c1 e8 16             	shr    $0x16,%eax
}
   102e6:	5d                   	pop    %ebp
   102e7:	c3                   	ret    

000102e8 <pte_index>:
 * @brief 获取虚拟地址的次10位，及对应的页表项在页表中的索引
 * 
 * @param vstart 
 * @return uint32_t 
 */
static inline uint32_t pte_index(uint32_t vstart) {
   102e8:	55                   	push   %ebp
   102e9:	89 e5                	mov    %esp,%ebp
    return (vstart >> 12) & 0x3ff;
   102eb:	8b 45 08             	mov    0x8(%ebp),%eax
   102ee:	c1 e8 0c             	shr    $0xc,%eax
   102f1:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   102f6:	5d                   	pop    %ebp
   102f7:	c3                   	ret    

000102f8 <pde_to_pt_addr>:
 * @brief 获取页目录项中对应的页表的起始地址，及该页表第一个页表项的地址
 * 
 * @param pde 页目录项
 * @return uint32_t 返回的页表的地址
 */
static inline uint32_t pde_to_pt_addr(pde_t *pde) {
   102f8:	55                   	push   %ebp
   102f9:	89 e5                	mov    %esp,%ebp
    //高20位为页表的物理地址的有效位，将其左移12位，及按4kb对齐后才是该页的物理地址
    return pde->phy_pt_addr << 12;
   102fb:	8b 45 08             	mov    0x8(%ebp),%eax
   102fe:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   10302:	c0 ea 04             	shr    $0x4,%dl
   10305:	0f b6 ca             	movzbl %dl,%ecx
   10308:	0f b6 50 02          	movzbl 0x2(%eax),%edx
   1030c:	c1 e2 04             	shl    $0x4,%edx
   1030f:	09 ca                	or     %ecx,%edx
   10311:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   10315:	c1 e0 0c             	shl    $0xc,%eax
   10318:	09 d0                	or     %edx,%eax
   1031a:	c1 e0 0c             	shl    $0xc,%eax
}
   1031d:	5d                   	pop    %ebp
   1031e:	c3                   	ret    

0001031f <mmu_set_page_dir>:
/**
 * @brief 设置页目录表的起始地址，将起始地址写入CR3寄存器
 * 
 * @param paddr 页目录表的物理起始地址
 */
static inline void mmu_set_page_dir(uint32_t paddr) {
   1031f:	55                   	push   %ebp
   10320:	89 e5                	mov    %esp,%ebp

    //设置cr3寄存器的高20位为页目录表的地址，因为按4kb对齐，所以
    //页目录表的起始地址page_dir的高20位才为有效位，低12位为0，将cr3的低12位就设置为0
    write_cr3(paddr);
   10322:	ff 75 08             	push   0x8(%ebp)
   10325:	e8 a7 ff ff ff       	call   102d1 <write_cr3>
   1032a:	83 c4 04             	add    $0x4,%esp
}
   1032d:	90                   	nop
   1032e:	c9                   	leave  
   1032f:	c3                   	ret    

00010330 <addr_alloc_init>:
 * @param start 管理内存的起始地址
 * @param size 管理内存的大小
 * @param page_size 管理的内存页的大小
 */
static void addr_alloc_init(addr_alloc_t *alloc, uint8_t *bits, uint32_t start,
                            uint32_t size, uint32_t page_size) {
   10330:	55                   	push   %ebp
   10331:	89 e5                	mov    %esp,%ebp
   10333:	83 ec 08             	sub    $0x8,%esp
  mutex_init(&alloc->mutex);
   10336:	8b 45 08             	mov    0x8(%ebp),%eax
   10339:	83 ec 0c             	sub    $0xc,%esp
   1033c:	50                   	push   %eax
   1033d:	e8 e0 19 00 00       	call   11d22 <mutex_init>
   10342:	83 c4 10             	add    $0x10,%esp
  alloc->start = start;
   10345:	8b 45 08             	mov    0x8(%ebp),%eax
   10348:	8b 55 10             	mov    0x10(%ebp),%edx
   1034b:	89 50 1c             	mov    %edx,0x1c(%eax)
  alloc->size = size;
   1034e:	8b 45 08             	mov    0x8(%ebp),%eax
   10351:	8b 55 14             	mov    0x14(%ebp),%edx
   10354:	89 50 20             	mov    %edx,0x20(%eax)
  alloc->page_size = page_size;
   10357:	8b 45 08             	mov    0x8(%ebp),%eax
   1035a:	8b 55 18             	mov    0x18(%ebp),%edx
   1035d:	89 50 24             	mov    %edx,0x24(%eax)
  bitmap_init(&alloc->bitmap, bits, alloc->size / alloc->page_size, 0);
   10360:	8b 45 08             	mov    0x8(%ebp),%eax
   10363:	8b 40 20             	mov    0x20(%eax),%eax
   10366:	8b 55 08             	mov    0x8(%ebp),%edx
   10369:	8b 4a 24             	mov    0x24(%edx),%ecx
   1036c:	ba 00 00 00 00       	mov    $0x0,%edx
   10371:	f7 f1                	div    %ecx
   10373:	89 c2                	mov    %eax,%edx
   10375:	8b 45 08             	mov    0x8(%ebp),%eax
   10378:	83 c0 14             	add    $0x14,%eax
   1037b:	6a 00                	push   $0x0
   1037d:	52                   	push   %edx
   1037e:	ff 75 0c             	push   0xc(%ebp)
   10381:	50                   	push   %eax
   10382:	e8 fc 20 00 00       	call   12483 <bitmap_init>
   10387:	83 c4 10             	add    $0x10,%esp
}
   1038a:	90                   	nop
   1038b:	c9                   	leave  
   1038c:	c3                   	ret    

0001038d <addr_alloc_page>:
 *
 * @param alloc
 * @param page_count 申请页的数量
 * @return uint32_t 申请的第一个页的起始地址
 */
static uint32_t addr_alloc_page(addr_alloc_t *alloc, int page_count) {
   1038d:	55                   	push   %ebp
   1038e:	89 e5                	mov    %esp,%ebp
   10390:	83 ec 18             	sub    $0x18,%esp
  uint32_t addr = 0;  // 记录分配的页的起始地址
   10393:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  mutex_lock(&alloc->mutex);
   1039a:	8b 45 08             	mov    0x8(%ebp),%eax
   1039d:	83 ec 0c             	sub    $0xc,%esp
   103a0:	50                   	push   %eax
   103a1:	e8 c9 19 00 00       	call   11d6f <mutex_lock>
   103a6:	83 c4 10             	add    $0x10,%esp

  // 在位图中取连续的page_count个页进行分配
  int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   103a9:	8b 45 08             	mov    0x8(%ebp),%eax
   103ac:	83 c0 14             	add    $0x14,%eax
   103af:	83 ec 04             	sub    $0x4,%esp
   103b2:	ff 75 0c             	push   0xc(%ebp)
   103b5:	6a 00                	push   $0x0
   103b7:	50                   	push   %eax
   103b8:	e8 fb 22 00 00       	call   126b8 <bitmap_alloc_nbits>
   103bd:	83 c4 10             	add    $0x10,%esp
   103c0:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (page_count >= 0) {
   103c3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   103c7:	78 17                	js     103e0 <addr_alloc_page+0x53>
    // 计算出申请到的第一个页的起始地址
    addr = alloc->start + page_index * alloc->page_size;
   103c9:	8b 45 08             	mov    0x8(%ebp),%eax
   103cc:	8b 48 1c             	mov    0x1c(%eax),%ecx
   103cf:	8b 45 08             	mov    0x8(%ebp),%eax
   103d2:	8b 50 24             	mov    0x24(%eax),%edx
   103d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   103d8:	0f af c2             	imul   %edx,%eax
   103db:	01 c8                	add    %ecx,%eax
   103dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
  }

  mutex_unlock(&alloc->mutex);
   103e0:	8b 45 08             	mov    0x8(%ebp),%eax
   103e3:	83 ec 0c             	sub    $0xc,%esp
   103e6:	50                   	push   %eax
   103e7:	e8 14 1a 00 00       	call   11e00 <mutex_unlock>
   103ec:	83 c4 10             	add    $0x10,%esp

  return addr;
   103ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   103f2:	c9                   	leave  
   103f3:	c3                   	ret    

000103f4 <addr_free_page>:
 *
 * @param alloc
 * @param addr 第一个内存页的起始地址
 * @param page_count 内存页的数量
 */
static void addr_free_page(addr_alloc_t *alloc, uint32_t addr, int page_count) {
   103f4:	55                   	push   %ebp
   103f5:	89 e5                	mov    %esp,%ebp
   103f7:	53                   	push   %ebx
   103f8:	83 ec 14             	sub    $0x14,%esp
  mutex_lock(&alloc->mutex);
   103fb:	8b 45 08             	mov    0x8(%ebp),%eax
   103fe:	83 ec 0c             	sub    $0xc,%esp
   10401:	50                   	push   %eax
   10402:	e8 68 19 00 00       	call   11d6f <mutex_lock>
   10407:	83 c4 10             	add    $0x10,%esp

  // 计算出第一个页在位图中的索引
  int page_index = (addr - alloc->start) / alloc->page_size;
   1040a:	8b 45 08             	mov    0x8(%ebp),%eax
   1040d:	8b 50 1c             	mov    0x1c(%eax),%edx
   10410:	8b 45 0c             	mov    0xc(%ebp),%eax
   10413:	29 d0                	sub    %edx,%eax
   10415:	89 c1                	mov    %eax,%ecx
   10417:	8b 45 08             	mov    0x8(%ebp),%eax
   1041a:	8b 58 24             	mov    0x24(%eax),%ebx
   1041d:	89 c8                	mov    %ecx,%eax
   1041f:	ba 00 00 00 00       	mov    $0x0,%edx
   10424:	f7 f3                	div    %ebx
   10426:	89 45 f4             	mov    %eax,-0xc(%ebp)

  bitmap_set_bit(&alloc->bitmap, page_index, page_count, 0);
   10429:	8b 45 08             	mov    0x8(%ebp),%eax
   1042c:	83 c0 14             	add    $0x14,%eax
   1042f:	6a 00                	push   $0x0
   10431:	ff 75 10             	push   0x10(%ebp)
   10434:	ff 75 f4             	push   -0xc(%ebp)
   10437:	50                   	push   %eax
   10438:	e8 52 21 00 00       	call   1258f <bitmap_set_bit>
   1043d:	83 c4 10             	add    $0x10,%esp

  mutex_unlock(&alloc->mutex);
   10440:	8b 45 08             	mov    0x8(%ebp),%eax
   10443:	83 ec 0c             	sub    $0xc,%esp
   10446:	50                   	push   %eax
   10447:	e8 b4 19 00 00       	call   11e00 <mutex_unlock>
   1044c:	83 c4 10             	add    $0x10,%esp
}
   1044f:	90                   	nop
   10450:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10453:	c9                   	leave  
   10454:	c3                   	ret    

00010455 <show_mem_info>:
/**
 * @brief  打印1m以内内存的可用空间
 * 
 * @param boot_info 
 */
static void show_mem_info(boot_info_t *boot_info) {
   10455:	55                   	push   %ebp
   10456:	89 e5                	mov    %esp,%ebp
   10458:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:");
   1045b:	83 ec 0c             	sub    $0xc,%esp
   1045e:	68 00 32 01 00       	push   $0x13200
   10463:	e8 9e 2c 00 00       	call   13106 <log_printf>
   10468:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   1046b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10472:	eb 29                	jmp    1049d <show_mem_info+0x48>
        log_printf("[%d]: 0x%x - 0x%x", i, boot_info->ram_region_cfg[i].start, boot_info->ram_region_cfg[i].size);
   10474:	8b 45 08             	mov    0x8(%ebp),%eax
   10477:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1047a:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   1047e:	8b 45 08             	mov    0x8(%ebp),%eax
   10481:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   10484:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   10487:	52                   	push   %edx
   10488:	50                   	push   %eax
   10489:	ff 75 f4             	push   -0xc(%ebp)
   1048c:	68 0c 32 01 00       	push   $0x1320c
   10491:	e8 70 2c 00 00       	call   13106 <log_printf>
   10496:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   10499:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1049d:	8b 45 08             	mov    0x8(%ebp),%eax
   104a0:	8b 40 50             	mov    0x50(%eax),%eax
   104a3:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   104a6:	7c cc                	jl     10474 <show_mem_info+0x1f>
    }

    log_printf("");
   104a8:	83 ec 0c             	sub    $0xc,%esp
   104ab:	68 1e 32 01 00       	push   $0x1321e
   104b0:	e8 51 2c 00 00       	call   13106 <log_printf>
   104b5:	83 c4 10             	add    $0x10,%esp
}
   104b8:	90                   	nop
   104b9:	c9                   	leave  
   104ba:	c3                   	ret    

000104bb <total_mem_size>:
 * @brief  计算总的可用内存空间大小
 * 
 * @param boot_info 
 * @return uint32_t 
 */
static uint32_t total_mem_size(boot_info_t *boot_info) {
   104bb:	55                   	push   %ebp
   104bc:	89 e5                	mov    %esp,%ebp
   104be:	83 ec 10             	sub    $0x10,%esp
    uint32_t mem_size = 0;
   104c1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   104c8:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   104cf:	eb 11                	jmp    104e2 <total_mem_size+0x27>
        mem_size += boot_info->ram_region_cfg[i].size;
   104d1:	8b 45 08             	mov    0x8(%ebp),%eax
   104d4:	8b 55 f8             	mov    -0x8(%ebp),%edx
   104d7:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
   104db:	01 45 fc             	add    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   104de:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   104e2:	8b 45 08             	mov    0x8(%ebp),%eax
   104e5:	8b 40 50             	mov    0x50(%eax),%eax
   104e8:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   104eb:	7c e4                	jl     104d1 <total_mem_size+0x16>
    }

    return mem_size;
   104ed:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   104f0:	c9                   	leave  
   104f1:	c3                   	ret    

000104f2 <find_pte>:
 *                 1：表示创建一个新页目录项，并为其分配一个新页作为页表
 *                 0: 返回0
 *                
 * @return pte_t* 索引到的页表项
 */
pte_t* find_pte(pde_t* page_dir, uint32_t vstart, int is_alloc) {
   104f2:	55                   	push   %ebp
   104f3:	89 e5                	mov    %esp,%ebp
   104f5:	83 ec 18             	sub    $0x18,%esp
  pte_t* page_table; //记录被索引的页表
  //1.通过虚拟地址高10位索引到对应的页目录项
  pde_t* pde = page_dir + pde_index(vstart);
   104f8:	ff 75 0c             	push   0xc(%ebp)
   104fb:	e8 dd fd ff ff       	call   102dd <pde_index>
   10500:	83 c4 04             	add    $0x4,%esp
   10503:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1050a:	8b 45 08             	mov    0x8(%ebp),%eax
   1050d:	01 d0                	add    %edx,%eax
   1050f:	89 45 f0             	mov    %eax,-0x10(%ebp)

  //2.判断该页目录项是否已存在，及该页目录项是否已指向一个被分配的页表
  if (pde->present) { //该页目录项存在，及存在对应的页表，可以索引到对应的页表
   10512:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10515:	0f b6 00             	movzbl (%eax),%eax
   10518:	83 e0 01             	and    $0x1,%eax
   1051b:	84 c0                	test   %al,%al
   1051d:	74 10                	je     1052f <find_pte+0x3d>
    page_table = (pte_t*)pde_to_pt_addr(pde);
   1051f:	ff 75 f0             	push   -0x10(%ebp)
   10522:	e8 d1 fd ff ff       	call   102f8 <pde_to_pt_addr>
   10527:	83 c4 04             	add    $0x4,%esp
   1052a:	89 45 f4             	mov    %eax,-0xc(%ebp)
   1052d:	eb 57                	jmp    10586 <find_pte+0x94>
  } else {//该目录项不存在内存中，及对应的页表不存在
    if (is_alloc == 0) {  //不为该目录项创建对应的页表
   1052f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10533:	75 07                	jne    1053c <find_pte+0x4a>
      return (pte_t*)0;
   10535:	b8 00 00 00 00       	mov    $0x0,%eax
   1053a:	eb 64                	jmp    105a0 <find_pte+0xae>
    }

    //为该目录项分配一页作为页表
    uint32_t pg_addr = addr_alloc_page(&paddr_alloc, 1);
   1053c:	83 ec 08             	sub    $0x8,%esp
   1053f:	6a 01                	push   $0x1
   10541:	68 00 50 01 00       	push   $0x15000
   10546:	e8 42 fe ff ff       	call   1038d <addr_alloc_page>
   1054b:	83 c4 10             	add    $0x10,%esp
   1054e:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pg_addr == 0) { //分配失败
   10551:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   10555:	75 07                	jne    1055e <find_pte+0x6c>
      return (pte_t*)0;
   10557:	b8 00 00 00 00       	mov    $0x0,%eax
   1055c:	eb 42                	jmp    105a0 <find_pte+0xae>
    }

    //分配成功, 索引对应的页表
    page_table = (pte_t*)pg_addr;
   1055e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10561:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_memset(page_table, 0, MEM_PAGE_SIZE);
   10564:	83 ec 04             	sub    $0x4,%esp
   10567:	68 00 10 00 00       	push   $0x1000
   1056c:	6a 00                	push   $0x0
   1056e:	ff 75 f4             	push   -0xc(%ebp)
   10571:	e8 c3 23 00 00       	call   12939 <kernel_memset>
   10576:	83 c4 10             	add    $0x10,%esp

    //将该页表的起始地址放入对应的页目录项中并放入页目录表中，方便后续索引到该页表
    pde->v = pg_addr | PDE_U | PDE_W | PDE_P;
   10579:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1057c:	83 c8 07             	or     $0x7,%eax
   1057f:	89 c2                	mov    %eax,%edx
   10581:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10584:	89 10                	mov    %edx,(%eax)

  // log_printf("sizeof(pte_t) = %d", sizeof(pte_t));


  //3.返回在该页表中索引到的页表项
  return page_table + pte_index(vstart);
   10586:	83 ec 0c             	sub    $0xc,%esp
   10589:	ff 75 0c             	push   0xc(%ebp)
   1058c:	e8 57 fd ff ff       	call   102e8 <pte_index>
   10591:	83 c4 10             	add    $0x10,%esp
   10594:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1059b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1059e:	01 d0                	add    %edx,%eax

}
   105a0:	c9                   	leave  
   105a1:	c3                   	ret    

000105a2 <memory_creat_map>:
 * @param pstart 物理地址的起始地址
 * @param page_count 分页数量
 * @param privilege 该段虚拟地址的特权级
 * @return int 
 */
int  memory_creat_map(pde_t *page_dir, uint32_t vstart, uint32_t pstart, int page_count, uint32_t privilege) {
   105a2:	55                   	push   %ebp
   105a3:	89 e5                	mov    %esp,%ebp
   105a5:	83 ec 18             	sub    $0x18,%esp
  //1.为每一页创建对应的页表项
  for (int i = 0; i < page_count; ++i) {
   105a8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   105af:	eb 7e                	jmp    1062f <memory_creat_map+0x8d>
    // //打印调试信息
    // log_printf("creat map: v-0x%x, p-0x%x, privilege:0x%x", vstart, pstart, privilege);

    //2.通过虚拟地址在页目录表中获取对应的页目录项指向的页表,
    //且当没有该页目录项时，为其分配一个页作为页表并让一个目录项指向该页表
    pte_t *pte = find_pte(page_dir, vstart, 1);
   105b1:	83 ec 04             	sub    $0x4,%esp
   105b4:	6a 01                	push   $0x1
   105b6:	ff 75 0c             	push   0xc(%ebp)
   105b9:	ff 75 08             	push   0x8(%ebp)
   105bc:	e8 31 ff ff ff       	call   104f2 <find_pte>
   105c1:	83 c4 10             	add    $0x10,%esp
   105c4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pte == (pte_t*)0) {//没有找到可用的页表项
   105c7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   105cb:	75 17                	jne    105e4 <memory_creat_map+0x42>
    log_printf("creat pte failed pte == 0");
   105cd:	83 ec 0c             	sub    $0xc,%esp
   105d0:	68 1f 32 01 00       	push   $0x1321f
   105d5:	e8 2c 2b 00 00       	call   13106 <log_printf>
   105da:	83 c4 10             	add    $0x10,%esp
      return -1;
   105dd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   105e2:	eb 57                	jmp    1063b <memory_creat_map+0x99>
    }

    // log_printf("pte addr : 0x%x", (uint32_t)pte);
    //3.确保该页并未已存在内存中
    ASSERT(pte->present == 0);
   105e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   105e7:	0f b6 00             	movzbl (%eax),%eax
   105ea:	83 e0 01             	and    $0x1,%eax
   105ed:	84 c0                	test   %al,%al
   105ef:	74 1c                	je     1060d <memory_creat_map+0x6b>
   105f1:	68 39 32 01 00       	push   $0x13239
   105f6:	68 e8 32 01 00       	push   $0x132e8
   105fb:	68 c0 00 00 00       	push   $0xc0
   10600:	68 4c 32 01 00       	push   $0x1324c
   10605:	e8 2d 1e 00 00       	call   12437 <pannic>
   1060a:	83 c4 10             	add    $0x10,%esp

    //4.在页表项中创建对应的映射关系
    pte->v = pstart | privilege | PTE_P;
   1060d:	8b 45 10             	mov    0x10(%ebp),%eax
   10610:	0b 45 18             	or     0x18(%ebp),%eax
   10613:	83 c8 01             	or     $0x1,%eax
   10616:	89 c2                	mov    %eax,%edx
   10618:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1061b:	89 10                	mov    %edx,(%eax)

    //5.切换为下一页
    vstart += MEM_PAGE_SIZE;
   1061d:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    pstart += MEM_PAGE_SIZE;
   10624:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
  for (int i = 0; i < page_count; ++i) {
   1062b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1062f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10632:	3b 45 14             	cmp    0x14(%ebp),%eax
   10635:	0f 8c 76 ff ff ff    	jl     105b1 <memory_creat_map+0xf>

  }
 }
   1063b:	c9                   	leave  
   1063c:	c3                   	ret    

0001063d <create_kernal_table>:

//TODO:编写函数注释
void create_kernal_table(void) {
   1063d:	55                   	push   %ebp
   1063e:	89 e5                	mov    %esp,%ebp
   10640:	83 ec 28             	sub    $0x28,%esp
    {&s_data, (void*)MEM_EBDA_START, &s_data, PTE_W},    //可读写段的映射关系，一直到bios的拓展数据区(内核.data与.bss段再加上剩余的可用数据区域)
    {(void*)MEM_EXT_START, (void*)MEM_EXT_END, (void*)MEM_EXT_START, PTE_W} //将1mb到127mb都映射给操作系统使用

  };

  for (int i = 0; i < sizeof(kernal_map) / sizeof(kernal_map[0]); ++i) {
   10643:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1064a:	e9 82 00 00 00       	jmp    106d1 <create_kernal_table+0x94>
    memory_map_t *map = kernal_map + i;
   1064f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10652:	c1 e0 04             	shl    $0x4,%eax
   10655:	05 00 40 01 00       	add    $0x14000,%eax
   1065a:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //将虚拟地址的起始地址按页大小4kb对齐，为了不丢失原有的虚拟地址空间，所以向下对齐vstart
    uint32_t vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   1065d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10660:	8b 00                	mov    (%eax),%eax
   10662:	68 00 10 00 00       	push   $0x1000
   10667:	50                   	push   %eax
   10668:	e8 40 fc ff ff       	call   102ad <down2>
   1066d:	83 c4 08             	add    $0x8,%esp
   10670:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32_t pstart = down2((uint32_t)map->pstart, MEM_PAGE_SIZE);
   10673:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10676:	8b 40 08             	mov    0x8(%eax),%eax
   10679:	68 00 10 00 00       	push   $0x1000
   1067e:	50                   	push   %eax
   1067f:	e8 29 fc ff ff       	call   102ad <down2>
   10684:	83 c4 08             	add    $0x8,%esp
   10687:	89 45 e8             	mov    %eax,-0x18(%ebp)
    //将虚拟地址的结束地址按页大小4kb对齐, 为了不丢失原有的虚拟地址空间，所以向上对齐vend
    uint32_t vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   1068a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1068d:	8b 40 04             	mov    0x4(%eax),%eax
   10690:	68 00 10 00 00       	push   $0x1000
   10695:	50                   	push   %eax
   10696:	e8 1f fc ff ff       	call   102ba <up2>
   1069b:	83 c4 08             	add    $0x8,%esp
   1069e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    //计算该虚拟空间需要的页数
    int page_count = (vend - vstart) / MEM_PAGE_SIZE;
   106a1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   106a4:	2b 45 ec             	sub    -0x14(%ebp),%eax
   106a7:	c1 e8 0c             	shr    $0xc,%eax
   106aa:	89 45 e0             	mov    %eax,-0x20(%ebp)

    //创建内存映射关系
    memory_creat_map(kernel_page_dir, vstart, pstart, page_count, map->privilege);
   106ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106b0:	8b 40 0c             	mov    0xc(%eax),%eax
   106b3:	83 ec 0c             	sub    $0xc,%esp
   106b6:	50                   	push   %eax
   106b7:	ff 75 e0             	push   -0x20(%ebp)
   106ba:	ff 75 e8             	push   -0x18(%ebp)
   106bd:	ff 75 ec             	push   -0x14(%ebp)
   106c0:	68 00 60 01 00       	push   $0x16000
   106c5:	e8 d8 fe ff ff       	call   105a2 <memory_creat_map>
   106ca:	83 c4 20             	add    $0x20,%esp
  for (int i = 0; i < sizeof(kernal_map) / sizeof(kernal_map[0]); ++i) {
   106cd:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   106d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   106d4:	83 f8 03             	cmp    $0x3,%eax
   106d7:	0f 86 72 ff ff ff    	jbe    1064f <create_kernal_table+0x12>

  }
}
   106dd:	90                   	nop
   106de:	90                   	nop
   106df:	c9                   	leave  
   106e0:	c3                   	ret    

000106e1 <memory_creat_uvm>:
/**
 * @brief 创建用户进程的虚拟内存空间，即页目录表
 * 
 * @return uint32_t 
 */
uint32_t memory_creat_uvm() {
   106e1:	55                   	push   %ebp
   106e2:	89 e5                	mov    %esp,%ebp
   106e4:	83 ec 18             	sub    $0x18,%esp
  //1.分配一页作为页目录表
  pde_t *page_dir = (pde_t *)addr_alloc_page(&paddr_alloc, 1);
   106e7:	83 ec 08             	sub    $0x8,%esp
   106ea:	6a 01                	push   $0x1
   106ec:	68 00 50 01 00       	push   $0x15000
   106f1:	e8 97 fc ff ff       	call   1038d <addr_alloc_page>
   106f6:	83 c4 10             	add    $0x10,%esp
   106f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (page_dir == 0) return 0;
   106fc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10700:	75 07                	jne    10709 <memory_creat_uvm+0x28>
   10702:	b8 00 00 00 00       	mov    $0x0,%eax
   10707:	eb 5b                	jmp    10764 <memory_creat_uvm+0x83>
  //TODO:新分配的页并未做虚拟内存映射，会触发缺页异常，需要处理

  //2.将该页的内容清空
  kernel_memset((void*)page_dir, 0, MEM_PAGE_SIZE);
   10709:	83 ec 04             	sub    $0x4,%esp
   1070c:	68 00 10 00 00       	push   $0x1000
   10711:	6a 00                	push   $0x0
   10713:	ff 75 f0             	push   -0x10(%ebp)
   10716:	e8 1e 22 00 00       	call   12939 <kernel_memset>
   1071b:	83 c4 10             	add    $0x10,%esp

  //3.获取用户进程空间的第一个页目录项索引, 用户进程空间的起始地址MEM_TASK_BASE = 0x800 00000
  uint32_t user_pde_start = pde_index(MEM_TASK_BASE);
   1071e:	83 ec 0c             	sub    $0xc,%esp
   10721:	68 00 00 00 80       	push   $0x80000000
   10726:	e8 b2 fb ff ff       	call   102dd <pde_index>
   1072b:	83 c4 10             	add    $0x10,%esp
   1072e:	89 45 ec             	mov    %eax,-0x14(%ebp)

  //4.将用户进程空间以下的空间映射给操作系统使用，即将0~user_pde_start的pde提供给操作系统作为页目录项
  for (int i = 0; i < user_pde_start; ++i) {
   10731:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10738:	eb 1f                	jmp    10759 <memory_creat_uvm+0x78>
      page_dir[i].v = kernel_page_dir[i].v; //所有进程都共享操作系统的页表
   1073a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1073d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10744:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10747:	01 c2                	add    %eax,%edx
   10749:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1074c:	8b 04 85 00 60 01 00 	mov    0x16000(,%eax,4),%eax
   10753:	89 02                	mov    %eax,(%edx)
  for (int i = 0; i < user_pde_start; ++i) {
   10755:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10759:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1075c:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   1075f:	77 d9                	ja     1073a <memory_creat_uvm+0x59>
  }


  return (uint32_t)page_dir;
   10761:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   10764:	c9                   	leave  
   10765:	c3                   	ret    

00010766 <memory_init>:
/**
 * @brief  初始化化内存
 *
 * @param boot_info cpu在实模式下检测到的可用内存对象
 */
void memory_init(boot_info_t *boot_info) {
   10766:	55                   	push   %ebp
   10767:	89 e5                	mov    %esp,%ebp
   10769:	83 ec 18             	sub    $0x18,%esp

  
    //声明紧邻在内核bss段后面的空间地址，用于存储位图，该变量定义在kernel.lds中
    extern char mem_free_start;

    log_printf("memory init");
   1076c:	83 ec 0c             	sub    $0xc,%esp
   1076f:	68 83 32 01 00       	push   $0x13283
   10774:	e8 8d 29 00 00       	call   13106 <log_printf>
   10779:	83 c4 10             	add    $0x10,%esp

    log_printf("mem_free_start: 0x%x", &mem_free_start);
   1077c:	83 ec 08             	sub    $0x8,%esp
   1077f:	68 e0 1b 03 00       	push   $0x31be0
   10784:	68 8f 32 01 00       	push   $0x1328f
   10789:	e8 78 29 00 00       	call   13106 <log_printf>
   1078e:	83 c4 10             	add    $0x10,%esp

    show_mem_info(boot_info);
   10791:	83 ec 0c             	sub    $0xc,%esp
   10794:	ff 75 08             	push   0x8(%ebp)
   10797:	e8 b9 fc ff ff       	call   10455 <show_mem_info>
   1079c:	83 c4 10             	add    $0x10,%esp
    
    //去除保护模式下1mb大小后可用的内存空间大小
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   1079f:	83 ec 0c             	sub    $0xc,%esp
   107a2:	ff 75 08             	push   0x8(%ebp)
   107a5:	e8 11 fd ff ff       	call   104bb <total_mem_size>
   107aa:	83 c4 10             	add    $0x10,%esp
   107ad:	2d 00 00 10 00       	sub    $0x100000,%eax
   107b2:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将可用空间大小下调到页大小的整数倍
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);
   107b5:	83 ec 08             	sub    $0x8,%esp
   107b8:	68 00 10 00 00       	push   $0x1000
   107bd:	ff 75 f4             	push   -0xc(%ebp)
   107c0:	e8 e8 fa ff ff       	call   102ad <down2>
   107c5:	83 c4 10             	add    $0x10,%esp
   107c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    log_printf("free memory: 0x%x, size: 0x%x", MEM_EXT_START, mem_up1MB_free);
   107cb:	83 ec 04             	sub    $0x4,%esp
   107ce:	ff 75 f4             	push   -0xc(%ebp)
   107d1:	68 00 00 10 00       	push   $0x100000
   107d6:	68 a4 32 01 00       	push   $0x132a4
   107db:	e8 26 29 00 00       	call   13106 <log_printf>
   107e0:	83 c4 10             	add    $0x10,%esp

    //mem_free_start被分配的地址在链接文件中定义，紧邻着内核的.bss段
    uint8_t *mem_free = (uint8_t*)&mem_free_start;
   107e3:	c7 45 f0 e0 1b 03 00 	movl   $0x31be0,-0x10(%ebp)

    //用paddr_alloc，内存页分配对象管理1mb以上的所有空闲空间，页大小为MEM_PAGE_SIZE=4kb
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   107ea:	83 ec 0c             	sub    $0xc,%esp
   107ed:	68 00 10 00 00       	push   $0x1000
   107f2:	ff 75 f4             	push   -0xc(%ebp)
   107f5:	68 00 00 10 00       	push   $0x100000
   107fa:	ff 75 f0             	push   -0x10(%ebp)
   107fd:	68 00 50 01 00       	push   $0x15000
   10802:	e8 29 fb ff ff       	call   10330 <addr_alloc_init>
   10807:	83 c4 20             	add    $0x20,%esp

    //跳过存储位图的内存区域, 位图的每一位表示一个页，计算位图所站的字节数即可跳过该区域
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);  
   1080a:	a1 20 50 01 00       	mov    0x15020,%eax
   1080f:	c1 e8 0c             	shr    $0xc,%eax
   10812:	83 ec 0c             	sub    $0xc,%esp
   10815:	50                   	push   %eax
   10816:	e8 52 1c 00 00       	call   1246d <bitmap_byte_count>
   1081b:	83 c4 10             	add    $0x10,%esp
   1081e:	01 45 f0             	add    %eax,-0x10(%ebp)

    //判断mem_free是否已越过可用数据区
    ASSERT(mem_free < (uint8_t*)MEM_EBDA_START);
   10821:	81 7d f0 ff fb 09 00 	cmpl   $0x9fbff,-0x10(%ebp)
   10828:	76 1c                	jbe    10846 <memory_init+0xe0>
   1082a:	68 c4 32 01 00       	push   $0x132c4
   1082f:	68 fc 32 01 00       	push   $0x132fc
   10834:	68 2a 01 00 00       	push   $0x12a
   10839:	68 4c 32 01 00       	push   $0x1324c
   1083e:	e8 f4 1b 00 00       	call   12437 <pannic>
   10843:	83 c4 10             	add    $0x10,%esp
    
    //创建内核的页表映射
    create_kernal_table();
   10846:	e8 f2 fd ff ff       	call   1063d <create_kernal_table>

    //设置内核的页目录表到CR3寄存器，并开启分页机制
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   1084b:	b8 00 60 01 00       	mov    $0x16000,%eax
   10850:	83 ec 0c             	sub    $0xc,%esp
   10853:	50                   	push   %eax
   10854:	e8 c6 fa ff ff       	call   1031f <mmu_set_page_dir>
   10859:	83 c4 10             	add    $0x10,%esp
   1085c:	90                   	nop
   1085d:	c9                   	leave  
   1085e:	c3                   	ret    

0001085f <list_node_init>:
    list_node_t * first;
    list_node_t * last;
    int size;
}list_t;

static inline void list_node_init(list_node_t *node) {
   1085f:	55                   	push   %ebp
   10860:	89 e5                	mov    %esp,%ebp
   10862:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   10865:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10869:	75 19                	jne    10884 <list_node_init+0x25>
   1086b:	68 08 33 01 00       	push   $0x13308
   10870:	68 dc 33 01 00       	push   $0x133dc
   10875:	6a 20                	push   $0x20
   10877:	68 20 33 01 00       	push   $0x13320
   1087c:	e8 b6 1b 00 00       	call   12437 <pannic>
   10881:	83 c4 10             	add    $0x10,%esp
    node->pre = node->next = (list_node_t*)0;
   10884:	8b 45 08             	mov    0x8(%ebp),%eax
   10887:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1088e:	8b 45 08             	mov    0x8(%ebp),%eax
   10891:	8b 50 04             	mov    0x4(%eax),%edx
   10894:	8b 45 08             	mov    0x8(%ebp),%eax
   10897:	89 10                	mov    %edx,(%eax)
}
   10899:	90                   	nop
   1089a:	c9                   	leave  
   1089b:	c3                   	ret    

0001089c <list_node_next>:
    ASSERT(node != (list_node_t*)0);

    return node->pre;
}

static inline list_node_t *list_node_next(list_node_t *node) {
   1089c:	55                   	push   %ebp
   1089d:	89 e5                	mov    %esp,%ebp
   1089f:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   108a2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   108a6:	75 19                	jne    108c1 <list_node_next+0x25>
   108a8:	68 08 33 01 00       	push   $0x13308
   108ad:	68 3c 34 01 00       	push   $0x1343c
   108b2:	6a 2b                	push   $0x2b
   108b4:	68 20 33 01 00       	push   $0x13320
   108b9:	e8 79 1b 00 00       	call   12437 <pannic>
   108be:	83 c4 10             	add    $0x10,%esp

    return node->next;
   108c1:	8b 45 08             	mov    0x8(%ebp),%eax
   108c4:	8b 40 04             	mov    0x4(%eax),%eax
}
   108c7:	c9                   	leave  
   108c8:	c3                   	ret    

000108c9 <list_init>:

static inline void list_init(list_t *list) {
   108c9:	55                   	push   %ebp
   108ca:	89 e5                	mov    %esp,%ebp
   108cc:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   108cf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   108d3:	75 19                	jne    108ee <list_init+0x25>
   108d5:	68 5e 33 01 00       	push   $0x1335e
   108da:	68 ec 33 01 00       	push   $0x133ec
   108df:	6a 31                	push   $0x31
   108e1:	68 20 33 01 00       	push   $0x13320
   108e6:	e8 4c 1b 00 00       	call   12437 <pannic>
   108eb:	83 c4 10             	add    $0x10,%esp

    list->first = list->last = (list_node_t*)0;
   108ee:	8b 45 08             	mov    0x8(%ebp),%eax
   108f1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   108f8:	8b 45 08             	mov    0x8(%ebp),%eax
   108fb:	8b 50 04             	mov    0x4(%eax),%edx
   108fe:	8b 45 08             	mov    0x8(%ebp),%eax
   10901:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   10903:	8b 45 08             	mov    0x8(%ebp),%eax
   10906:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   1090d:	90                   	nop
   1090e:	c9                   	leave  
   1090f:	c3                   	ret    

00010910 <list_is_empty>:

static inline int list_is_empty(list_t *list) {
   10910:	55                   	push   %ebp
   10911:	89 e5                	mov    %esp,%ebp
   10913:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10916:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1091a:	75 19                	jne    10935 <list_is_empty+0x25>
   1091c:	68 5e 33 01 00       	push   $0x1335e
   10921:	68 4c 34 01 00       	push   $0x1344c
   10926:	6a 38                	push   $0x38
   10928:	68 20 33 01 00       	push   $0x13320
   1092d:	e8 05 1b 00 00       	call   12437 <pannic>
   10932:	83 c4 10             	add    $0x10,%esp

    return list->size == 0;
   10935:	8b 45 08             	mov    0x8(%ebp),%eax
   10938:	8b 40 08             	mov    0x8(%eax),%eax
   1093b:	85 c0                	test   %eax,%eax
   1093d:	0f 94 c0             	sete   %al
   10940:	0f b6 c0             	movzbl %al,%eax
}
   10943:	c9                   	leave  
   10944:	c3                   	ret    

00010945 <list_get_size>:

static inline int list_get_size(list_t *list) {
   10945:	55                   	push   %ebp
   10946:	89 e5                	mov    %esp,%ebp
   10948:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1094b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1094f:	75 19                	jne    1096a <list_get_size+0x25>
   10951:	68 5e 33 01 00       	push   $0x1335e
   10956:	68 2c 34 01 00       	push   $0x1342c
   1095b:	6a 3e                	push   $0x3e
   1095d:	68 20 33 01 00       	push   $0x13320
   10962:	e8 d0 1a 00 00       	call   12437 <pannic>
   10967:	83 c4 10             	add    $0x10,%esp

    return list->size;
   1096a:	8b 45 08             	mov    0x8(%ebp),%eax
   1096d:	8b 40 08             	mov    0x8(%eax),%eax
}
   10970:	c9                   	leave  
   10971:	c3                   	ret    

00010972 <list_get_first>:

static inline list_node_t *list_get_first(list_t *list) {
   10972:	55                   	push   %ebp
   10973:	89 e5                	mov    %esp,%ebp
   10975:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10978:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1097c:	75 19                	jne    10997 <list_get_first+0x25>
   1097e:	68 5e 33 01 00       	push   $0x1335e
   10983:	68 1c 34 01 00       	push   $0x1341c
   10988:	6a 44                	push   $0x44
   1098a:	68 20 33 01 00       	push   $0x13320
   1098f:	e8 a3 1a 00 00       	call   12437 <pannic>
   10994:	83 c4 10             	add    $0x10,%esp

    return list->first;
   10997:	8b 45 08             	mov    0x8(%ebp),%eax
   1099a:	8b 00                	mov    (%eax),%eax
}
   1099c:	c9                   	leave  
   1099d:	c3                   	ret    

0001099e <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   1099e:	55                   	push   %ebp
   1099f:	89 e5                	mov    %esp,%ebp
   109a1:	f4                   	hlt    
   109a2:	90                   	nop
   109a3:	5d                   	pop    %ebp
   109a4:	c3                   	ret    

000109a5 <write_cr3>:
static inline void write_cr3(uint32_t data) {
   109a5:	55                   	push   %ebp
   109a6:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("mov %[v], %%cr3" : : [v] "r"(data));
   109a8:	8b 45 08             	mov    0x8(%ebp),%eax
   109ab:	0f 22 d8             	mov    %eax,%cr3
}
   109ae:	90                   	nop
   109af:	5d                   	pop    %ebp
   109b0:	c3                   	ret    

000109b1 <far_jump>:
 * @brief  远跳转，当跳转发生在TSS段之间时，cpu将会保存状态到当前TR寄存器指向的TSS段
 *
 * @param selector 选择子
 * @param offset 跳转的偏移量
 */
static inline void far_jump(uint32_t selector, uint32_t offset) {
   109b1:	55                   	push   %ebp
   109b2:	89 e5                	mov    %esp,%ebp
   109b4:	83 ec 10             	sub    $0x10,%esp
  // 传入远跳转需要的参数, 即cs = selector, eip = offset 
  uint32_t addr[] = {offset, selector};  
   109b7:	8b 45 0c             	mov    0xc(%ebp),%eax
   109ba:	89 45 f8             	mov    %eax,-0x8(%ebp)
   109bd:	8b 45 08             	mov    0x8(%ebp),%eax
   109c0:	89 45 fc             	mov    %eax,-0x4(%ebp)

  __asm__ __volatile__("ljmpl *(%[a])" : : [a] "r"(addr));
   109c3:	8d 45 f8             	lea    -0x8(%ebp),%eax
   109c6:	ff 28                	ljmp   *(%eax)
}
   109c8:	90                   	nop
   109c9:	c9                   	leave  
   109ca:	c3                   	ret    

000109cb <write_tr>:
 * @brief   写入当前任务的TSS段描述符的选择子到TR寄存器中，告诉cpu当前段的TSS位置
 *          以便在进行任务切换时，将状态保存到该TSS段中
 * 
 * @param tss_selector 准备运行的任务的TSS段的选择子
 */
static inline void write_tr(uint16_t tss_selector) {
   109cb:	55                   	push   %ebp
   109cc:	89 e5                	mov    %esp,%ebp
   109ce:	83 ec 04             	sub    $0x4,%esp
   109d1:	8b 45 08             	mov    0x8(%ebp),%eax
   109d4:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  __asm__ __volatile__("ltr %[v]" : : [v]"r"(tss_selector));
   109d8:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   109dc:	0f 00 d8             	ltr    %ax
}
   109df:	90                   	nop
   109e0:	c9                   	leave  
   109e1:	c3                   	ret    

000109e2 <mmu_set_page_dir>:
static inline void mmu_set_page_dir(uint32_t paddr) {
   109e2:	55                   	push   %ebp
   109e3:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   109e5:	ff 75 08             	push   0x8(%ebp)
   109e8:	e8 b8 ff ff ff       	call   109a5 <write_cr3>
   109ed:	83 c4 04             	add    $0x4,%esp
}
   109f0:	90                   	nop
   109f1:	c9                   	leave  
   109f2:	c3                   	ret    

000109f3 <switch_to_tss>:

//定义全局唯一的任务管理器对象
static task_manager_t task_manager;


static void switch_to_tss(uint16_t tss_selector) {
   109f3:	55                   	push   %ebp
   109f4:	89 e5                	mov    %esp,%ebp
   109f6:	83 ec 04             	sub    $0x4,%esp
   109f9:	8b 45 08             	mov    0x8(%ebp),%eax
   109fc:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    //进行远跳转，让cpu访问该tss段的描述符，cpu将重启到之前运行该tss对应的任务的状态继续运行该任务
    far_jump(tss_selector, 0);
   10a00:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   10a04:	6a 00                	push   $0x0
   10a06:	50                   	push   %eax
   10a07:	e8 a5 ff ff ff       	call   109b1 <far_jump>
   10a0c:	83 c4 08             	add    $0x8,%esp
}
   10a0f:	90                   	nop
   10a10:	c9                   	leave  
   10a11:	c3                   	ret    

00010a12 <task_switch_from_to>:
 * @brief  将任务从from切换到to
 * 
 * @param from 切换前的任务
 * @param to 切换后的任务
 */
void task_switch_from_to(task_t *from, task_t *to) {
   10a12:	55                   	push   %ebp
   10a13:	89 e5                	mov    %esp,%ebp
    //跳转到对应的tss段读取并恢复cpu任务状态
    switch_to_tss(to->tss_selector);
   10a15:	8b 45 0c             	mov    0xc(%ebp),%eax
   10a18:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
   10a1e:	0f b7 c0             	movzwl %ax,%eax
   10a21:	50                   	push   %eax
   10a22:	e8 cc ff ff ff       	call   109f3 <switch_to_tss>
   10a27:	83 c4 04             	add    $0x4,%esp
}
   10a2a:	90                   	nop
   10a2b:	c9                   	leave  
   10a2c:	c3                   	ret    

00010a2d <tss_init>:
 * 
 * @param task 需要初始化的任务对象
 * @param entry 任务入口地址
 * @param esp 任务所用的栈顶指针
 */
static int tss_init(task_t *task, uint32_t entry, uint32_t esp) {
   10a2d:	55                   	push   %ebp
   10a2e:	89 e5                	mov    %esp,%ebp
   10a30:	83 ec 18             	sub    $0x18,%esp

    //1.将tss段的值置空
    kernel_memset(&task->tss, 0, sizeof(task->tss));
   10a33:	8b 45 08             	mov    0x8(%ebp),%eax
   10a36:	83 c0 48             	add    $0x48,%eax
   10a39:	83 ec 04             	sub    $0x4,%esp
   10a3c:	6a 68                	push   $0x68
   10a3e:	6a 00                	push   $0x0
   10a40:	50                   	push   %eax
   10a41:	e8 f3 1e 00 00       	call   12939 <kernel_memset>
   10a46:	83 c4 10             	add    $0x10,%esp

    //2.设置eip，即任务的起始地址
    task->tss.eip = entry;
   10a49:	8b 45 08             	mov    0x8(%ebp),%eax
   10a4c:	8b 55 0c             	mov    0xc(%ebp),%edx
   10a4f:	89 50 68             	mov    %edx,0x68(%eax)

    //3.根据任务的特权级设置任务所使用的栈空间
    task->tss.esp = task->tss.esp0 = esp;
   10a52:	8b 45 08             	mov    0x8(%ebp),%eax
   10a55:	8b 55 10             	mov    0x10(%ebp),%edx
   10a58:	89 50 4c             	mov    %edx,0x4c(%eax)
   10a5b:	8b 45 08             	mov    0x8(%ebp),%eax
   10a5e:	8b 50 4c             	mov    0x4c(%eax),%edx
   10a61:	8b 45 08             	mov    0x8(%ebp),%eax
   10a64:	89 90 80 00 00 00    	mov    %edx,0x80(%eax)

    //4.平坦模型，初始化栈空间段寄存器
    task->tss.ss = task->tss.ss0 = KERNEL_SELECTOR_DS;
   10a6a:	8b 45 08             	mov    0x8(%ebp),%eax
   10a6d:	c7 40 50 10 00 00 00 	movl   $0x10,0x50(%eax)
   10a74:	8b 45 08             	mov    0x8(%ebp),%eax
   10a77:	8b 50 50             	mov    0x50(%eax),%edx
   10a7a:	8b 45 08             	mov    0x8(%ebp),%eax
   10a7d:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)

    //5. 平坦模型，初始其余化段寄存器
    task->tss.es = task->tss.fs = task->tss.gs = task->tss.ds = KERNEL_SELECTOR_DS;
   10a83:	8b 45 08             	mov    0x8(%ebp),%eax
   10a86:	c7 80 9c 00 00 00 10 	movl   $0x10,0x9c(%eax)
   10a8d:	00 00 00 
   10a90:	8b 45 08             	mov    0x8(%ebp),%eax
   10a93:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
   10a99:	8b 45 08             	mov    0x8(%ebp),%eax
   10a9c:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
   10aa2:	8b 45 08             	mov    0x8(%ebp),%eax
   10aa5:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
   10aab:	8b 45 08             	mov    0x8(%ebp),%eax
   10aae:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
   10ab4:	8b 45 08             	mov    0x8(%ebp),%eax
   10ab7:	8b 90 a0 00 00 00    	mov    0xa0(%eax),%edx
   10abd:	8b 45 08             	mov    0x8(%ebp),%eax
   10ac0:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)

    //6.平坦模型，初始化代码段寄存器
    task->tss.cs = KERNEL_SELECTOR_CS;
   10ac6:	8b 45 08             	mov    0x8(%ebp),%eax
   10ac9:	c7 80 94 00 00 00 08 	movl   $0x8,0x94(%eax)
   10ad0:	00 00 00 

    //7.初始化eflags寄存器，使cpu中断保持开启
    task->tss.eflags = EFLAGS_DEFAULT_1 | EFLAGS_IF;
   10ad3:	8b 45 08             	mov    0x8(%ebp),%eax
   10ad6:	c7 40 6c 02 02 00 00 	movl   $0x202,0x6c(%eax)

    //8.创建当前进程的虚拟页目录表，并设置cr3寄存器
    uint32_t page_dir = memory_creat_uvm();
   10add:	e8 ff fb ff ff       	call   106e1 <memory_creat_uvm>
   10ae2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page_dir == 0) return -1;
   10ae5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10ae9:	75 07                	jne    10af2 <tss_init+0xc5>
   10aeb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10af0:	eb 41                	jmp    10b33 <tss_init+0x106>
    task->tss.cr3 = page_dir;
   10af2:	8b 45 08             	mov    0x8(%ebp),%eax
   10af5:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10af8:	89 50 64             	mov    %edx,0x64(%eax)
    


    //9.将该TSS段绑定到GDT中的某个段描述符
    uint32_t tss_selector = gdt_alloc_desc();
   10afb:	e8 29 07 00 00       	call   11229 <gdt_alloc_desc>
   10b00:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (tss_selector < 0) {
        log_printf("alloc tss failed!");
        return -1;
    }
    segment_desc_set(tss_selector, (uint32_t)&task->tss, sizeof(task->tss), 
   10b03:	8b 45 08             	mov    0x8(%ebp),%eax
   10b06:	83 c0 48             	add    $0x48,%eax
   10b09:	89 c2                	mov    %eax,%edx
   10b0b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10b0e:	0f b7 c0             	movzwl %ax,%eax
   10b11:	68 89 00 00 00       	push   $0x89
   10b16:	6a 68                	push   $0x68
   10b18:	52                   	push   %edx
   10b19:	50                   	push   %eax
   10b1a:	e8 b7 05 00 00       	call   110d6 <segment_desc_set>
   10b1f:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_TYPE_TSS);


    //10.记录tss绑定到的描述符的选择子
    task->tss_selector = tss_selector;
   10b22:	8b 45 08             	mov    0x8(%ebp),%eax
   10b25:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10b28:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)

    return 0;
   10b2e:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10b33:	c9                   	leave  
   10b34:	c3                   	ret    

00010b35 <task_init>:
 * @param task 任务对象
 * @param entry 任务的入口地址
 * @param esp 任务指行时所用的栈顶指针
 * @return int 
 */
void task_init(task_t *task, const char* name, uint32_t entry, uint32_t esp) {
   10b35:	55                   	push   %ebp
   10b36:	89 e5                	mov    %esp,%ebp
   10b38:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t*)0);
   10b3b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10b3f:	75 19                	jne    10b5a <task_init+0x25>
   10b41:	68 71 33 01 00       	push   $0x13371
   10b46:	68 d0 33 01 00       	push   $0x133d0
   10b4b:	6a 6a                	push   $0x6a
   10b4d:	68 84 33 01 00       	push   $0x13384
   10b52:	e8 e0 18 00 00       	call   12437 <pannic>
   10b57:	83 c4 10             	add    $0x10,%esp
    //1.初始化任务TSS段
    tss_init(task, entry, esp);
   10b5a:	83 ec 04             	sub    $0x4,%esp
   10b5d:	ff 75 14             	push   0x14(%ebp)
   10b60:	ff 75 10             	push   0x10(%ebp)
   10b63:	ff 75 08             	push   0x8(%ebp)
   10b66:	e8 c2 fe ff ff       	call   10a2d <tss_init>
   10b6b:	83 c4 10             	add    $0x10,%esp

    //2.初始化任务名称
    kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   10b6e:	8b 45 08             	mov    0x8(%ebp),%eax
   10b71:	83 c0 10             	add    $0x10,%eax
   10b74:	83 ec 04             	sub    $0x4,%esp
   10b77:	6a 20                	push   $0x20
   10b79:	ff 75 0c             	push   0xc(%ebp)
   10b7c:	50                   	push   %eax
   10b7d:	e8 78 1c 00 00       	call   127fa <kernel_strncpy>
   10b82:	83 c4 10             	add    $0x10,%esp

    //3.初始化任务队列节点及就绪队列节点
    list_node_init(&task->ready_node);
   10b85:	8b 45 08             	mov    0x8(%ebp),%eax
   10b88:	83 c0 30             	add    $0x30,%eax
   10b8b:	83 ec 0c             	sub    $0xc,%esp
   10b8e:	50                   	push   %eax
   10b8f:	e8 cb fc ff ff       	call   1085f <list_node_init>
   10b94:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->task_node);
   10b97:	8b 45 08             	mov    0x8(%ebp),%eax
   10b9a:	83 c0 38             	add    $0x38,%eax
   10b9d:	83 ec 0c             	sub    $0xc,%esp
   10ba0:	50                   	push   %eax
   10ba1:	e8 b9 fc ff ff       	call   1085f <list_node_init>
   10ba6:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   10ba9:	8b 45 08             	mov    0x8(%ebp),%eax
   10bac:	83 c0 40             	add    $0x40,%eax
   10baf:	83 ec 0c             	sub    $0xc,%esp
   10bb2:	50                   	push   %eax
   10bb3:	e8 a7 fc ff ff       	call   1085f <list_node_init>
   10bb8:	83 c4 10             	add    $0x10,%esp

    //4.初始化最大时间片数与当前拥有时间片数,以及延时时间片数
    task->slice_max = task->slice_curr = TASK_TIME_SLICE_DEFAULT;
   10bbb:	8b 45 08             	mov    0x8(%ebp),%eax
   10bbe:	c7 40 08 0a 00 00 00 	movl   $0xa,0x8(%eax)
   10bc5:	8b 45 08             	mov    0x8(%ebp),%eax
   10bc8:	8b 50 08             	mov    0x8(%eax),%edx
   10bcb:	8b 45 08             	mov    0x8(%ebp),%eax
   10bce:	89 50 04             	mov    %edx,0x4(%eax)
    task->sleep = 0;
   10bd1:	8b 45 08             	mov    0x8(%ebp),%eax
   10bd4:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)

    
    idt_state_t state = idt_enter_protection();//TODO:加锁
   10bdb:	e8 d1 0e 00 00       	call   11ab1 <idt_enter_protection>
   10be0:	89 45 f4             	mov    %eax,-0xc(%ebp)
   
    //5.将任务加入任务队列
    list_insert_last(&task_manager.task_list, &task->task_node);
   10be3:	8b 45 08             	mov    0x8(%ebp),%eax
   10be6:	83 c0 38             	add    $0x38,%eax
   10be9:	83 ec 08             	sub    $0x8,%esp
   10bec:	50                   	push   %eax
   10bed:	68 10 70 01 00       	push   $0x17010
   10bf2:	e8 8b 21 00 00       	call   12d82 <list_insert_last>
   10bf7:	83 c4 10             	add    $0x10,%esp

    //6.将任务设置为就绪态
    task_set_ready(task);
   10bfa:	83 ec 0c             	sub    $0xc,%esp
   10bfd:	ff 75 08             	push   0x8(%ebp)
   10c00:	e8 00 01 00 00       	call   10d05 <task_set_ready>
   10c05:	83 c4 10             	add    $0x10,%esp

    
    idt_leave_protection(state);//TODO:解锁
   10c08:	83 ec 0c             	sub    $0xc,%esp
   10c0b:	ff 75 f4             	push   -0xc(%ebp)
   10c0e:	e8 b6 0e 00 00       	call   11ac9 <idt_leave_protection>
   10c13:	83 c4 10             	add    $0x10,%esp
}
   10c16:	90                   	nop
   10c17:	c9                   	leave  
   10c18:	c3                   	ret    

00010c19 <empty_task>:
static uint32_t empty_task_stack[EMPTY_TASK_STACK_SIZE];
/**
 * @brief  空闲进程，当所有进程都延时运行时，让cpu运行空闲进程
 * 
 */
static void empty_task(void) {
   10c19:	55                   	push   %ebp
   10c1a:	89 e5                	mov    %esp,%ebp
    while(1) {
        //停止cpu运行，让cpu等待时间中断
        hlt();
   10c1c:	e8 7d fd ff ff       	call   1099e <hlt>
   10c21:	eb f9                	jmp    10c1c <empty_task+0x3>

00010c23 <task_manager_init>:

/**
 * @brief  初始化任务管理器
 * 
 */
void task_manager_init(void) {
   10c23:	55                   	push   %ebp
   10c24:	89 e5                	mov    %esp,%ebp
   10c26:	83 ec 08             	sub    $0x8,%esp
    //1.初始化所有任务队列
    list_init(&task_manager.ready_list);
   10c29:	83 ec 0c             	sub    $0xc,%esp
   10c2c:	68 04 70 01 00       	push   $0x17004
   10c31:	e8 93 fc ff ff       	call   108c9 <list_init>
   10c36:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   10c39:	83 ec 0c             	sub    $0xc,%esp
   10c3c:	68 10 70 01 00       	push   $0x17010
   10c41:	e8 83 fc ff ff       	call   108c9 <list_init>
   10c46:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   10c49:	83 ec 0c             	sub    $0xc,%esp
   10c4c:	68 1c 70 01 00       	push   $0x1701c
   10c51:	e8 73 fc ff ff       	call   108c9 <list_init>
   10c56:	83 c4 10             	add    $0x10,%esp

    //2.将当前任务置零
    task_manager.curr_task = (task_t*)0;
   10c59:	c7 05 00 70 01 00 00 	movl   $0x0,0x17000
   10c60:	00 00 00 

    //3.初始化空闲进程
    task_init(  &task_manager.empty_task,
   10c63:	ba a0 73 01 00       	mov    $0x173a0,%edx
   10c68:	b8 19 0c 01 00       	mov    $0x10c19,%eax
   10c6d:	52                   	push   %edx
   10c6e:	50                   	push   %eax
   10c6f:	68 b9 33 01 00       	push   $0x133b9
   10c74:	68 dc 70 01 00       	push   $0x170dc
   10c79:	e8 b7 fe ff ff       	call   10b35 <task_init>
   10c7e:	83 c4 10             	add    $0x10,%esp
                 (uint32_t)empty_task,
                 (uint32_t)&empty_task_stack[EMPTY_TASK_STACK_SIZE]);
                 

    //4.将空闲进程从就绪队列中取出
    task_set_unready(&task_manager.empty_task);
   10c81:	83 ec 0c             	sub    $0xc,%esp
   10c84:	68 dc 70 01 00       	push   $0x170dc
   10c89:	e8 c2 00 00 00       	call   10d50 <task_set_unready>
   10c8e:	83 c4 10             	add    $0x10,%esp
    task_manager.empty_task.state = TASK_CREATED;
   10c91:	c7 05 dc 70 01 00 00 	movl   $0x0,0x170dc
   10c98:	00 00 00 
}
   10c9b:	90                   	nop
   10c9c:	c9                   	leave  
   10c9d:	c3                   	ret    

00010c9e <task_first_init>:

//       //4.将当前任务状态设置为运行态
//       task_manager.curr_task->state = TASK_RUNNING;
// }

void task_first_init(void) {
   10c9e:	55                   	push   %ebp
   10c9f:	89 e5                	mov    %esp,%ebp
   10ca1:	83 ec 08             	sub    $0x8,%esp

    //1.声明第一个任务的符号
    void first_task_entry(void);

    //2.初始化第一个任务
    task_init(&task_manager.first_task, "first task", (uint32_t)first_task_entry, 0);
   10ca4:	b8 c5 1b 01 00       	mov    $0x11bc5,%eax
   10ca9:	6a 00                	push   $0x0
   10cab:	50                   	push   %eax
   10cac:	68 c4 33 01 00       	push   $0x133c4
   10cb1:	68 28 70 01 00       	push   $0x17028
   10cb6:	e8 7a fe ff ff       	call   10b35 <task_init>
   10cbb:	83 c4 10             	add    $0x10,%esp
      
    //3.将当前任务的TSS选择子告诉cpu，用来切换任务时保存状态
    write_tr(task_manager.first_task.tss_selector);
   10cbe:	a1 d8 70 01 00       	mov    0x170d8,%eax
   10cc3:	0f b7 c0             	movzwl %ax,%eax
   10cc6:	83 ec 0c             	sub    $0xc,%esp
   10cc9:	50                   	push   %eax
   10cca:	e8 fc fc ff ff       	call   109cb <write_tr>
   10ccf:	83 c4 10             	add    $0x10,%esp

    //4.将当前任务执行第一个任务
    task_manager.curr_task = &task_manager.first_task;
   10cd2:	c7 05 00 70 01 00 28 	movl   $0x17028,0x17000
   10cd9:	70 01 00 

    //5.设置第一个任务的页表
    mmu_set_page_dir(task_manager.first_task.tss.cr3);
   10cdc:	a1 8c 70 01 00       	mov    0x1708c,%eax
   10ce1:	83 ec 0c             	sub    $0xc,%esp
   10ce4:	50                   	push   %eax
   10ce5:	e8 f8 fc ff ff       	call   109e2 <mmu_set_page_dir>
   10cea:	83 c4 10             	add    $0x10,%esp

    //5.将当前任务状态设置为运行态
    task_manager.curr_task->state = TASK_RUNNING;
   10ced:	a1 00 70 01 00       	mov    0x17000,%eax
   10cf2:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
}
   10cf8:	90                   	nop
   10cf9:	c9                   	leave  
   10cfa:	c3                   	ret    

00010cfb <task_first_task>:
/**
 * @brief  获取当前任务管理器的第一个任务
 * 
 * @return task_t* 
 */
task_t *task_first_task(void) {
   10cfb:	55                   	push   %ebp
   10cfc:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   10cfe:	b8 28 70 01 00       	mov    $0x17028,%eax
}
   10d03:	5d                   	pop    %ebp
   10d04:	c3                   	ret    

00010d05 <task_set_ready>:
/**
 * @brief  将任务task加入就绪队列
 * 
 * @param task 需要加入就绪队列的任务
 */
void task_set_ready(task_t *task) {
   10d05:	55                   	push   %ebp
   10d06:	89 e5                	mov    %esp,%ebp
   10d08:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   10d0b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10d0f:	75 1c                	jne    10d2d <task_set_ready+0x28>
   10d11:	68 71 33 01 00       	push   $0x13371
   10d16:	68 f8 33 01 00       	push   $0x133f8
   10d1b:	68 e8 00 00 00       	push   $0xe8
   10d20:	68 84 33 01 00       	push   $0x13384
   10d25:	e8 0d 17 00 00       	call   12437 <pannic>
   10d2a:	83 c4 10             	add    $0x10,%esp
    //1.将任务插入到就绪队列的尾部
    list_insert_last(&task_manager.ready_list, &task->ready_node);
   10d2d:	8b 45 08             	mov    0x8(%ebp),%eax
   10d30:	83 c0 30             	add    $0x30,%eax
   10d33:	83 ec 08             	sub    $0x8,%esp
   10d36:	50                   	push   %eax
   10d37:	68 04 70 01 00       	push   $0x17004
   10d3c:	e8 41 20 00 00       	call   12d82 <list_insert_last>
   10d41:	83 c4 10             	add    $0x10,%esp

    //2.将任务状态设置为就绪态
    task->state = TASK_READY;
   10d44:	8b 45 08             	mov    0x8(%ebp),%eax
   10d47:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
}
   10d4d:	90                   	nop
   10d4e:	c9                   	leave  
   10d4f:	c3                   	ret    

00010d50 <task_set_unready>:
/**
 * @brief  将任务task从就绪队列中取下
 * 
 * @param task 
 */
void task_set_unready(task_t *task) {
   10d50:	55                   	push   %ebp
   10d51:	89 e5                	mov    %esp,%ebp
   10d53:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   10d56:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10d5a:	75 1c                	jne    10d78 <task_set_unready+0x28>
   10d5c:	68 71 33 01 00       	push   $0x13371
   10d61:	68 08 34 01 00       	push   $0x13408
   10d66:	68 f7 00 00 00       	push   $0xf7
   10d6b:	68 84 33 01 00       	push   $0x13384
   10d70:	e8 c2 16 00 00       	call   12437 <pannic>
   10d75:	83 c4 10             	add    $0x10,%esp
    list_remove(&task_manager.ready_list, &task->ready_node);
   10d78:	8b 45 08             	mov    0x8(%ebp),%eax
   10d7b:	83 c0 30             	add    $0x30,%eax
   10d7e:	83 ec 08             	sub    $0x8,%esp
   10d81:	50                   	push   %eax
   10d82:	68 04 70 01 00       	push   $0x17004
   10d87:	e8 eb 21 00 00       	call   12f77 <list_remove>
   10d8c:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   10d8f:	8b 45 08             	mov    0x8(%ebp),%eax
   10d92:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   10d98:	90                   	nop
   10d99:	c9                   	leave  
   10d9a:	c3                   	ret    

00010d9b <task_ready_first>:

/**
 * @brief  获取就绪队列中的第一个任务
 * 
 */
task_t* task_ready_first(void) {
   10d9b:	55                   	push   %ebp
   10d9c:	89 e5                	mov    %esp,%ebp
   10d9e:	83 ec 18             	sub    $0x18,%esp
    list_node_t *ready_node = list_get_first(&task_manager.ready_list);
   10da1:	83 ec 0c             	sub    $0xc,%esp
   10da4:	68 04 70 01 00       	push   $0x17004
   10da9:	e8 c4 fb ff ff       	call   10972 <list_get_first>
   10dae:	83 c4 10             	add    $0x10,%esp
   10db1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    return list_node_parent(ready_node, task_t, ready_node);
   10db4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10db8:	74 08                	je     10dc2 <task_ready_first+0x27>
   10dba:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10dbd:	83 e8 30             	sub    $0x30,%eax
   10dc0:	eb 05                	jmp    10dc7 <task_ready_first+0x2c>
   10dc2:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10dc7:	c9                   	leave  
   10dc8:	c3                   	ret    

00010dc9 <task_current>:
/**
 * @brief  获取当前正在运行的任务
 * 
 * @return task_t* 
 */
task_t *task_current(void) {
   10dc9:	55                   	push   %ebp
   10dca:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   10dcc:	a1 00 70 01 00       	mov    0x17000,%eax
}
   10dd1:	5d                   	pop    %ebp
   10dd2:	c3                   	ret    

00010dd3 <task_switch>:

/**
 * @brief  任务管理器进行任务切换
 * 
 */
void task_switch(void) {
   10dd3:	55                   	push   %ebp
   10dd4:	89 e5                	mov    %esp,%ebp
   10dd6:	83 ec 18             	sub    $0x18,%esp

    idt_state_t state = idt_enter_protection();//TODO:加锁
   10dd9:	e8 d3 0c 00 00       	call   11ab1 <idt_enter_protection>
   10dde:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //1.获取就绪队列中的第一个任务
    task_t *to = task_ready_first();
   10de1:	e8 b5 ff ff ff       	call   10d9b <task_ready_first>
   10de6:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.若获取到的任务不是当前任务就进行切换
    if (to != task_manager.curr_task) {
   10de9:	a1 00 70 01 00       	mov    0x17000,%eax
   10dee:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   10df1:	74 37                	je     10e2a <task_switch+0x57>
        //3.获取当前任务
        task_t *from = task_manager.curr_task;
   10df3:	a1 00 70 01 00       	mov    0x17000,%eax
   10df8:	89 45 ec             	mov    %eax,-0x14(%ebp)

        //4.目标任务若为空，则所有任务都在延时，让cpu运行空闲任务
        if (to == (task_t*)0) { 
   10dfb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10dff:	75 07                	jne    10e08 <task_switch+0x35>
            to = &task_manager.empty_task;
   10e01:	c7 45 f4 dc 70 01 00 	movl   $0x170dc,-0xc(%ebp)
        }
        //5.切换当前任务, 并将当前任务置为运行态
        to->state = TASK_RUNNING;
   10e08:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e0b:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        task_manager.curr_task = to;
   10e11:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e14:	a3 00 70 01 00       	mov    %eax,0x17000
        

        //6.进行任务切换
        task_switch_from_to(from, to);
   10e19:	83 ec 08             	sub    $0x8,%esp
   10e1c:	ff 75 f4             	push   -0xc(%ebp)
   10e1f:	ff 75 ec             	push   -0x14(%ebp)
   10e22:	e8 eb fb ff ff       	call   10a12 <task_switch_from_to>
   10e27:	83 c4 10             	add    $0x10,%esp
    } 

    idt_leave_protection(state);//TODO:解锁
   10e2a:	83 ec 0c             	sub    $0xc,%esp
   10e2d:	ff 75 f0             	push   -0x10(%ebp)
   10e30:	e8 94 0c 00 00       	call   11ac9 <idt_leave_protection>
   10e35:	83 c4 10             	add    $0x10,%esp
}
   10e38:	90                   	nop
   10e39:	c9                   	leave  
   10e3a:	c3                   	ret    

00010e3b <sys_yield>:
/**
 * @brief  使当前正在运行的任务主动让出cpu
 * 
 * @return int 
 */
int sys_yield(void) {
   10e3b:	55                   	push   %ebp
   10e3c:	89 e5                	mov    %esp,%ebp
   10e3e:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   10e41:	e8 6b 0c 00 00       	call   11ab1 <idt_enter_protection>
   10e46:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    //1.判断当前就绪队列中是否有多个任务
    if (list_get_size(&task_manager.ready_list) > 1) {
   10e49:	83 ec 0c             	sub    $0xc,%esp
   10e4c:	68 04 70 01 00       	push   $0x17004
   10e51:	e8 ef fa ff ff       	call   10945 <list_get_size>
   10e56:	83 c4 10             	add    $0x10,%esp
   10e59:	83 f8 01             	cmp    $0x1,%eax
   10e5c:	7e 29                	jle    10e87 <sys_yield+0x4c>
        //2.获取当前任务  
        task_t *curr_task = task_current();
   10e5e:	e8 66 ff ff ff       	call   10dc9 <task_current>
   10e63:	89 45 f0             	mov    %eax,-0x10(%ebp)
        
        //3.将当前任务从就绪队列中取下
        task_set_unready(curr_task);
   10e66:	83 ec 0c             	sub    $0xc,%esp
   10e69:	ff 75 f0             	push   -0x10(%ebp)
   10e6c:	e8 df fe ff ff       	call   10d50 <task_set_unready>
   10e71:	83 c4 10             	add    $0x10,%esp

        //4.将当前任务重新加入到就绪队列的队尾
        task_set_ready(curr_task);
   10e74:	83 ec 0c             	sub    $0xc,%esp
   10e77:	ff 75 f0             	push   -0x10(%ebp)
   10e7a:	e8 86 fe ff ff       	call   10d05 <task_set_ready>
   10e7f:	83 c4 10             	add    $0x10,%esp

        //5.任务管理器运行下一个任务，从而释放cpu使用权
        task_switch();
   10e82:	e8 4c ff ff ff       	call   10dd3 <task_switch>
    }
    
    idt_leave_protection(state);//TODO:解锁
   10e87:	83 ec 0c             	sub    $0xc,%esp
   10e8a:	ff 75 f4             	push   -0xc(%ebp)
   10e8d:	e8 37 0c 00 00       	call   11ac9 <idt_leave_protection>
   10e92:	83 c4 10             	add    $0x10,%esp
    return 0;
   10e95:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10e9a:	c9                   	leave  
   10e9b:	c3                   	ret    

00010e9c <task_slice_end>:
/**
 * @brief  提供给时钟中断使用，每中断一次，当前任务的时间片使用完一次
 *         减少当前任务的时间片数，并判断是否还有剩余时间片，若没有就进行任务切换
 * 
 */
void task_slice_end(void) {
   10e9c:	55                   	push   %ebp
   10e9d:	89 e5                	mov    %esp,%ebp
   10e9f:	83 ec 18             	sub    $0x18,%esp

    //1.遍历当前延时队列，判断是否有可唤醒的任务
    list_node_t *curr_sleep_node = list_get_first(&task_manager.sleep_list);
   10ea2:	83 ec 0c             	sub    $0xc,%esp
   10ea5:	68 1c 70 01 00       	push   $0x1701c
   10eaa:	e8 c3 fa ff ff       	call   10972 <list_get_first>
   10eaf:	83 c4 10             	add    $0x10,%esp
   10eb2:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.遍历并判断每一个任务执行完当前时间片是否可被唤醒，若可以则唤醒
    while (curr_sleep_node) {
   10eb5:	eb 62                	jmp    10f19 <task_slice_end+0x7d>
        
        list_node_t *next_sleep_node = list_node_next(curr_sleep_node);
   10eb7:	83 ec 0c             	sub    $0xc,%esp
   10eba:	ff 75 f4             	push   -0xc(%ebp)
   10ebd:	e8 da f9 ff ff       	call   1089c <list_node_next>
   10ec2:	83 c4 10             	add    $0x10,%esp
   10ec5:	89 45 ec             	mov    %eax,-0x14(%ebp)
        
        task_t *curr_sleep_task = list_node_parent(curr_sleep_node, task_t, ready_node);
   10ec8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10ecc:	74 08                	je     10ed6 <task_slice_end+0x3a>
   10ece:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10ed1:	83 e8 30             	sub    $0x30,%eax
   10ed4:	eb 05                	jmp    10edb <task_slice_end+0x3f>
   10ed6:	b8 00 00 00 00       	mov    $0x0,%eax
   10edb:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (--curr_sleep_task->sleep == 0) {
   10ede:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10ee1:	8b 40 0c             	mov    0xc(%eax),%eax
   10ee4:	8d 50 ff             	lea    -0x1(%eax),%edx
   10ee7:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10eea:	89 50 0c             	mov    %edx,0xc(%eax)
   10eed:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10ef0:	8b 40 0c             	mov    0xc(%eax),%eax
   10ef3:	85 c0                	test   %eax,%eax
   10ef5:	75 1c                	jne    10f13 <task_slice_end+0x77>
            task_set_wakeup(curr_sleep_task);   //从延时队列中取下
   10ef7:	83 ec 0c             	sub    $0xc,%esp
   10efa:	ff 75 e8             	push   -0x18(%ebp)
   10efd:	e8 01 01 00 00       	call   11003 <task_set_wakeup>
   10f02:	83 c4 10             	add    $0x10,%esp
            task_set_ready(curr_sleep_task);    //加入就绪队列
   10f05:	83 ec 0c             	sub    $0xc,%esp
   10f08:	ff 75 e8             	push   -0x18(%ebp)
   10f0b:	e8 f5 fd ff ff       	call   10d05 <task_set_ready>
   10f10:	83 c4 10             	add    $0x10,%esp
        }

        curr_sleep_node = next_sleep_node;
   10f13:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10f16:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr_sleep_node) {
   10f19:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10f1d:	75 98                	jne    10eb7 <task_slice_end+0x1b>
    }

    // task_switch(); 没有必要立马进行任务切换，当前任务时间片用完后会自动切换
    //3.获取当前任务
    task_t *curr_task = task_current();
   10f1f:	e8 a5 fe ff ff       	call   10dc9 <task_current>
   10f24:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //4.若当前任务为空闲任务，则判断就绪队列是否为空
    if (curr_task == &task_manager.empty_task) {
   10f27:	81 7d f0 dc 70 01 00 	cmpl   $0x170dc,-0x10(%ebp)
   10f2e:	75 23                	jne    10f53 <task_slice_end+0xb7>
        
        if (list_is_empty(&task_manager.ready_list)) return;
   10f30:	83 ec 0c             	sub    $0xc,%esp
   10f33:	68 04 70 01 00       	push   $0x17004
   10f38:	e8 d3 f9 ff ff       	call   10910 <list_is_empty>
   10f3d:	83 c4 10             	add    $0x10,%esp
   10f40:	85 c0                	test   %eax,%eax
   10f42:	75 60                	jne    10fa4 <task_slice_end+0x108>
        
        task_manager.empty_task.state = TASK_CREATED;
   10f44:	c7 05 dc 70 01 00 00 	movl   $0x0,0x170dc
   10f4b:	00 00 00 
        
        task_switch();//就绪队列有任务，则直接切换任务
   10f4e:	e8 80 fe ff ff       	call   10dd3 <task_switch>
    }

    //5.若当前任务为普通任务则，减小当前时间片数
    if (curr_task != &task_manager.empty_task && --curr_task->slice_curr == 0) {
   10f53:	81 7d f0 dc 70 01 00 	cmpl   $0x170dc,-0x10(%ebp)
   10f5a:	74 49                	je     10fa5 <task_slice_end+0x109>
   10f5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10f5f:	8b 40 08             	mov    0x8(%eax),%eax
   10f62:	8d 50 ff             	lea    -0x1(%eax),%edx
   10f65:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10f68:	89 50 08             	mov    %edx,0x8(%eax)
   10f6b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10f6e:	8b 40 08             	mov    0x8(%eax),%eax
   10f71:	85 c0                	test   %eax,%eax
   10f73:	75 30                	jne    10fa5 <task_slice_end+0x109>
        //6.时间片数用完了，重置时间片并进行任务切换
        curr_task->slice_curr = curr_task->slice_max;
   10f75:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10f78:	8b 50 04             	mov    0x4(%eax),%edx
   10f7b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10f7e:	89 50 08             	mov    %edx,0x8(%eax)
        task_set_unready(curr_task);
   10f81:	83 ec 0c             	sub    $0xc,%esp
   10f84:	ff 75 f0             	push   -0x10(%ebp)
   10f87:	e8 c4 fd ff ff       	call   10d50 <task_set_unready>
   10f8c:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   10f8f:	83 ec 0c             	sub    $0xc,%esp
   10f92:	ff 75 f0             	push   -0x10(%ebp)
   10f95:	e8 6b fd ff ff       	call   10d05 <task_set_ready>
   10f9a:	83 c4 10             	add    $0x10,%esp
        task_switch();
   10f9d:	e8 31 fe ff ff       	call   10dd3 <task_switch>
   10fa2:	eb 01                	jmp    10fa5 <task_slice_end+0x109>
        if (list_is_empty(&task_manager.ready_list)) return;
   10fa4:	90                   	nop
    }
}
   10fa5:	c9                   	leave  
   10fa6:	c3                   	ret    

00010fa7 <task_set_sleep>:
 * @brief  设置进程延时的时间片数
 * 
 * @param task 需要延时的进程
 * @param slice 延时的时间片数
 */
void task_set_sleep(task_t *task, uint32_t slice) {
   10fa7:	55                   	push   %ebp
   10fa8:	89 e5                	mov    %esp,%ebp
   10faa:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   10fad:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10fb1:	75 1c                	jne    10fcf <task_set_sleep+0x28>
   10fb3:	68 71 33 01 00       	push   $0x13371
   10fb8:	68 5c 34 01 00       	push   $0x1345c
   10fbd:	68 85 01 00 00       	push   $0x185
   10fc2:	68 84 33 01 00       	push   $0x13384
   10fc7:	e8 6b 14 00 00       	call   12437 <pannic>
   10fcc:	83 c4 10             	add    $0x10,%esp
    if (slice == 0) return;
   10fcf:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10fd3:	74 2b                	je     11000 <task_set_sleep+0x59>

    task->sleep = slice;
   10fd5:	8b 55 0c             	mov    0xc(%ebp),%edx
   10fd8:	8b 45 08             	mov    0x8(%ebp),%eax
   10fdb:	89 50 0c             	mov    %edx,0xc(%eax)
    task->state = TASK_SLEEP;
   10fde:	8b 45 08             	mov    0x8(%ebp),%eax
   10fe1:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    list_insert_last(&task_manager.sleep_list, &task->ready_node);
   10fe7:	8b 45 08             	mov    0x8(%ebp),%eax
   10fea:	83 c0 30             	add    $0x30,%eax
   10fed:	83 ec 08             	sub    $0x8,%esp
   10ff0:	50                   	push   %eax
   10ff1:	68 1c 70 01 00       	push   $0x1701c
   10ff6:	e8 87 1d 00 00       	call   12d82 <list_insert_last>
   10ffb:	83 c4 10             	add    $0x10,%esp
   10ffe:	eb 01                	jmp    11001 <task_set_sleep+0x5a>
    if (slice == 0) return;
   11000:	90                   	nop
}
   11001:	c9                   	leave  
   11002:	c3                   	ret    

00011003 <task_set_wakeup>:
/**
 * @brief  唤醒正在延时的进程
 * 
 * @param task 
 */
void task_set_wakeup(task_t *task) {
   11003:	55                   	push   %ebp
   11004:	89 e5                	mov    %esp,%ebp
   11006:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   11009:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1100d:	75 1c                	jne    1102b <task_set_wakeup+0x28>
   1100f:	68 71 33 01 00       	push   $0x13371
   11014:	68 6c 34 01 00       	push   $0x1346c
   11019:	68 93 01 00 00       	push   $0x193
   1101e:	68 84 33 01 00       	push   $0x13384
   11023:	e8 0f 14 00 00       	call   12437 <pannic>
   11028:	83 c4 10             	add    $0x10,%esp
    list_remove(&task_manager.sleep_list, &task->ready_node);
   1102b:	8b 45 08             	mov    0x8(%ebp),%eax
   1102e:	83 c0 30             	add    $0x30,%eax
   11031:	83 ec 08             	sub    $0x8,%esp
   11034:	50                   	push   %eax
   11035:	68 1c 70 01 00       	push   $0x1701c
   1103a:	e8 38 1f 00 00       	call   12f77 <list_remove>
   1103f:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   11042:	8b 45 08             	mov    0x8(%ebp),%eax
   11045:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   1104b:	90                   	nop
   1104c:	c9                   	leave  
   1104d:	c3                   	ret    

0001104e <sys_sleep>:
/**
 * @brief  使进程进入延时状态
 * 
 * @param ms 延时的时间，以ms为单位
 */
void sys_sleep(uint32_t ms) {
   1104e:	55                   	push   %ebp
   1104f:	89 e5                	mov    %esp,%ebp
   11051:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection(); //TODO:加锁
   11054:	e8 58 0a 00 00       	call   11ab1 <idt_enter_protection>
   11059:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //1.获取当前任务  
    task_t *curr_task = task_current();
   1105c:	e8 68 fd ff ff       	call   10dc9 <task_current>
   11061:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    //2.将当前任务离开就绪队列
    task_set_unready(curr_task);
   11064:	83 ec 0c             	sub    $0xc,%esp
   11067:	ff 75 f0             	push   -0x10(%ebp)
   1106a:	e8 e1 fc ff ff       	call   10d50 <task_set_unready>
   1106f:	83 c4 10             	add    $0x10,%esp

    //3.计算出需要延时的时间片数，对时间片数向上取整，保证进程至少能延时指定时间
    uint32_t slice = (ms + (OS_TICKS_MS - 1)) / OS_TICKS_MS;
   11072:	8b 45 08             	mov    0x8(%ebp),%eax
   11075:	83 c0 09             	add    $0x9,%eax
   11078:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   1107d:	f7 e2                	mul    %edx
   1107f:	89 d0                	mov    %edx,%eax
   11081:	c1 e8 03             	shr    $0x3,%eax
   11084:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //4.将当前任务放入延时队列，并设置延时时间片数
    task_set_sleep(curr_task, slice);
   11087:	83 ec 08             	sub    $0x8,%esp
   1108a:	ff 75 ec             	push   -0x14(%ebp)
   1108d:	ff 75 f0             	push   -0x10(%ebp)
   11090:	e8 12 ff ff ff       	call   10fa7 <task_set_sleep>
   11095:	83 c4 10             	add    $0x10,%esp

    //5.切换任务
    task_switch();
   11098:	e8 36 fd ff ff       	call   10dd3 <task_switch>

    idt_leave_protection(state); //TODO:解锁
   1109d:	83 ec 0c             	sub    $0xc,%esp
   110a0:	ff 75 f4             	push   -0xc(%ebp)
   110a3:	e8 21 0a 00 00       	call   11ac9 <idt_leave_protection>
   110a8:	83 c4 10             	add    $0x10,%esp
   110ab:	90                   	nop
   110ac:	c9                   	leave  
   110ad:	c3                   	ret    

000110ae <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   110ae:	55                   	push   %ebp
   110af:	89 e5                	mov    %esp,%ebp
   110b1:	83 ec 10             	sub    $0x10,%esp
  gdt.start31_16 = (start >> 16) & 0xffff;  // 初始化GDT地址的高16位
   110b4:	8b 45 08             	mov    0x8(%ebp),%eax
   110b7:	c1 e8 10             	shr    $0x10,%eax
   110ba:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  gdt.start15_0 = start & 0xffff;           // 初始化GDT地址的低16位
   110be:	8b 45 08             	mov    0x8(%ebp),%eax
   110c1:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   110c5:	8b 45 0c             	mov    0xc(%ebp),%eax
   110c8:	83 e8 01             	sub    $0x1,%eax
  gdt.limit =
   110cb:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   110cf:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   110d3:	90                   	nop
   110d4:	c9                   	leave  
   110d5:	c3                   	ret    

000110d6 <segment_desc_set>:
 *                 即2的13次方个段，也就是8192
 * @param base 该段在内存中的真实段基址
 * @param limit 该段的段界限，是一个偏移量，表示段中最大的偏移界限
 * @param attr 该段的属性位
 */
void segment_desc_set(uint16_t selector,  uint32_t base, uint32_t limit, uint16_t attr) {
   110d6:	55                   	push   %ebp
   110d7:	89 e5                	mov    %esp,%ebp
   110d9:	83 ec 18             	sub    $0x18,%esp
   110dc:	8b 55 08             	mov    0x8(%ebp),%edx
   110df:	8b 45 14             	mov    0x14(%ebp),%eax
   110e2:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
   110e6:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    //1. 获取该段描述符在内存中的起始地址，selector >> 3 取出3~15位才是其在全局描述符中的下标
    segment_desc_t *desc = gdt_table + (selector >> 3);
   110ea:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   110ee:	66 c1 e8 03          	shr    $0x3,%ax
   110f2:	0f b7 c0             	movzwl %ax,%eax
   110f5:	c1 e0 03             	shl    $0x3,%eax
   110f8:	05 a0 73 01 00       	add    $0x173a0,%eax
   110fd:	89 45 fc             	mov    %eax,-0x4(%ebp)

    //2. 设置段基地址
    desc->base15_0 = (uint16_t)base;
   11100:	8b 45 0c             	mov    0xc(%ebp),%eax
   11103:	89 c2                	mov    %eax,%edx
   11105:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11108:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (uint8_t)(base >> 16);
   1110c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1110f:	c1 e8 10             	shr    $0x10,%eax
   11112:	89 c2                	mov    %eax,%edx
   11114:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11117:	88 50 04             	mov    %dl,0x4(%eax)
    desc->base31_24 = (uint8_t)(base >> 24);
   1111a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1111d:	c1 e8 18             	shr    $0x18,%eax
   11120:	89 c2                	mov    %eax,%edx
   11122:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11125:	88 50 07             	mov    %dl,0x7(%eax)

    //3. 设置段界限
    if (limit > 0xfffff) { //limit大于了20位能表示的最大值
   11128:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   1112f:	76 1d                	jbe    1114e <segment_desc_set+0x78>
        //将limit的粒度设置为 4kb，即将属性位G置1
        desc->attr |= 0x8000;
   11131:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11134:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   11138:	66 0d 00 80          	or     $0x8000,%ax
   1113c:	89 c2                	mov    %eax,%edx
   1113e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11141:	66 89 50 05          	mov    %dx,0x5(%eax)

        //将limit改成以 4kb 为单位
        limit /= (4 * 1024);
   11145:	8b 45 10             	mov    0x10(%ebp),%eax
   11148:	c1 e8 0c             	shr    $0xc,%eax
   1114b:	89 45 10             	mov    %eax,0x10(%ebp)

    }
    desc->limit15_0 = (uint16_t)limit;
   1114e:	8b 45 10             	mov    0x10(%ebp),%eax
   11151:	89 c2                	mov    %eax,%edx
   11153:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11156:	66 89 10             	mov    %dx,(%eax)
    desc->attr |= ((uint16_t)(limit >> 8) & 0x0f00); //将limit高4位赋值到attr的8~11位(段界限的高4位)
   11159:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1115c:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   11160:	89 c2                	mov    %eax,%edx
   11162:	8b 45 10             	mov    0x10(%ebp),%eax
   11165:	c1 e8 08             	shr    $0x8,%eax
   11168:	66 25 00 0f          	and    $0xf00,%ax
   1116c:	09 d0                	or     %edx,%eax
   1116e:	89 c2                	mov    %eax,%edx
   11170:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11173:	66 89 50 05          	mov    %dx,0x5(%eax)

    //4.设置属性位
    desc->attr |= attr & 0xf0ff;
   11177:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1117a:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   1117e:	89 c2                	mov    %eax,%edx
   11180:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   11184:	80 e4 f0             	and    $0xf0,%ah
   11187:	09 d0                	or     %edx,%eax
   11189:	89 c2                	mov    %eax,%edx
   1118b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1118e:	66 89 50 05          	mov    %dx,0x5(%eax)


}
   11192:	90                   	nop
   11193:	c9                   	leave  
   11194:	c3                   	ret    

00011195 <gdt_init>:

/**
 * @brief  初始化GDT
 * 
 */
void gdt_init(void) {
   11195:	55                   	push   %ebp
   11196:	89 e5                	mov    %esp,%ebp
   11198:	83 ec 18             	sub    $0x18,%esp
    //TODO:暂时将所有段都初始化为0
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   1119b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   111a2:	eb 1c                	jmp    111c0 <gdt_init+0x2b>
        segment_desc_set(i << 3, 0, 0, 0);
   111a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   111a7:	c1 e0 03             	shl    $0x3,%eax
   111aa:	0f b7 c0             	movzwl %ax,%eax
   111ad:	6a 00                	push   $0x0
   111af:	6a 00                	push   $0x0
   111b1:	6a 00                	push   $0x0
   111b3:	50                   	push   %eax
   111b4:	e8 1d ff ff ff       	call   110d6 <segment_desc_set>
   111b9:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   111bc:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   111c0:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   111c7:	7e db                	jle    111a4 <gdt_init+0xf>
        is_alloc[i] == 0;
    }

    //使用平坦模型，即段基址为0, 段界限直接用最大值，界限粒度为4kb，即段大小为4GB
    //1.设置内核的数据段,并将其标记
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff,
   111c9:	68 92 40 00 00       	push   $0x4092
   111ce:	6a ff                	push   $0xffffffff
   111d0:	6a 00                	push   $0x0
   111d2:	6a 10                	push   $0x10
   111d4:	e8 fd fe ff ff       	call   110d6 <segment_desc_set>
   111d9:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL | 
                    SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_DS >> 3] = 1;
   111dc:	c7 05 a8 73 02 00 01 	movl   $0x1,0x273a8
   111e3:	00 00 00 

    //2.设置内核的代码段，并将其标记
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff,
   111e6:	68 9a 40 00 00       	push   $0x409a
   111eb:	6a ff                	push   $0xffffffff
   111ed:	6a 00                	push   $0x0
   111ef:	6a 08                	push   $0x8
   111f1:	e8 e0 fe ff ff       	call   110d6 <segment_desc_set>
   111f6:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL |
                    SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_CS >> 3] = 1;
   111f9:	c7 05 a4 73 02 00 01 	movl   $0x1,0x273a4
   11200:	00 00 00 
    //3.加载新的GDT表
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   11203:	b8 a0 73 01 00       	mov    $0x173a0,%eax
   11208:	68 00 00 01 00       	push   $0x10000
   1120d:	50                   	push   %eax
   1120e:	e8 9b fe ff ff       	call   110ae <lgdt>
   11213:	83 c4 08             	add    $0x8,%esp

    //4.初始化互斥锁
    mutex_init(&mutex);
   11216:	83 ec 0c             	sub    $0xc,%esp
   11219:	68 a0 f3 02 00       	push   $0x2f3a0
   1121e:	e8 ff 0a 00 00       	call   11d22 <mutex_init>
   11223:	83 c4 10             	add    $0x10,%esp
}
   11226:	90                   	nop
   11227:	c9                   	leave  
   11228:	c3                   	ret    

00011229 <gdt_alloc_desc>:
/**
 * @brief  寻找gdt中未赋值的段描述符空间
 * 
 * @return int 返回的找到的描述符的选择子
 */
int gdt_alloc_desc() {
   11229:	55                   	push   %ebp
   1122a:	89 e5                	mov    %esp,%ebp
   1122c:	83 ec 18             	sub    $0x18,%esp

    mutex_lock(&mutex);//TODO:加锁
   1122f:	83 ec 0c             	sub    $0xc,%esp
   11232:	68 a0 f3 02 00       	push   $0x2f3a0
   11237:	e8 33 0b 00 00       	call   11d6f <mutex_lock>
   1123c:	83 c4 10             	add    $0x10,%esp

    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   1123f:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   11246:	eb 38                	jmp    11280 <gdt_alloc_desc+0x57>
        if (is_alloc[i] == 0)  {
   11248:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1124b:	8b 04 85 a0 73 02 00 	mov    0x273a0(,%eax,4),%eax
   11252:	85 c0                	test   %eax,%eax
   11254:	75 26                	jne    1127c <gdt_alloc_desc+0x53>
            is_alloc[i] = 1;
   11256:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11259:	c7 04 85 a0 73 02 00 	movl   $0x1,0x273a0(,%eax,4)
   11260:	01 00 00 00 

            mutex_unlock(&mutex);//TODO:解锁
   11264:	83 ec 0c             	sub    $0xc,%esp
   11267:	68 a0 f3 02 00       	push   $0x2f3a0
   1126c:	e8 8f 0b 00 00       	call   11e00 <mutex_unlock>
   11271:	83 c4 10             	add    $0x10,%esp
            return (i << 3);
   11274:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11277:	c1 e0 03             	shl    $0x3,%eax
   1127a:	eb 22                	jmp    1129e <gdt_alloc_desc+0x75>
    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   1127c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11280:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   11287:	7e bf                	jle    11248 <gdt_alloc_desc+0x1f>
        }
    }

    mutex_unlock(&mutex);//TODO:解锁
   11289:	83 ec 0c             	sub    $0xc,%esp
   1128c:	68 a0 f3 02 00       	push   $0x2f3a0
   11291:	e8 6a 0b 00 00       	call   11e00 <mutex_unlock>
   11296:	83 c4 10             	add    $0x10,%esp
    return -1;
   11299:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1129e:	c9                   	leave  
   1129f:	c3                   	ret    

000112a0 <cli>:
static inline void cli(void) { __asm__ __volatile__("cli"); }
   112a0:	55                   	push   %ebp
   112a1:	89 e5                	mov    %esp,%ebp
   112a3:	fa                   	cli    
   112a4:	90                   	nop
   112a5:	5d                   	pop    %ebp
   112a6:	c3                   	ret    

000112a7 <sti>:
static inline void sti(void) { __asm__ __volatile__("sti"); }
   112a7:	55                   	push   %ebp
   112a8:	89 e5                	mov    %esp,%ebp
   112aa:	fb                   	sti    
   112ab:	90                   	nop
   112ac:	5d                   	pop    %ebp
   112ad:	c3                   	ret    

000112ae <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   112ae:	55                   	push   %ebp
   112af:	89 e5                	mov    %esp,%ebp
   112b1:	f4                   	hlt    
   112b2:	90                   	nop
   112b3:	5d                   	pop    %ebp
   112b4:	c3                   	ret    

000112b5 <inb>:
static inline uint8_t inb(uint16_t port) {
   112b5:	55                   	push   %ebp
   112b6:	89 e5                	mov    %esp,%ebp
   112b8:	83 ec 14             	sub    $0x14,%esp
   112bb:	8b 45 08             	mov    0x8(%ebp),%eax
   112be:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   112c2:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   112c6:	89 c2                	mov    %eax,%edx
   112c8:	ec                   	in     (%dx),%al
   112c9:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   112cc:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   112d0:	c9                   	leave  
   112d1:	c3                   	ret    

000112d2 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   112d2:	55                   	push   %ebp
   112d3:	89 e5                	mov    %esp,%ebp
   112d5:	83 ec 08             	sub    $0x8,%esp
   112d8:	8b 45 08             	mov    0x8(%ebp),%eax
   112db:	8b 55 0c             	mov    0xc(%ebp),%edx
   112de:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   112e2:	89 d0                	mov    %edx,%eax
   112e4:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   112e7:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   112eb:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   112ef:	ee                   	out    %al,(%dx)
}
   112f0:	90                   	nop
   112f1:	c9                   	leave  
   112f2:	c3                   	ret    

000112f3 <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   112f3:	55                   	push   %ebp
   112f4:	89 e5                	mov    %esp,%ebp
   112f6:	83 ec 10             	sub    $0x10,%esp
  idt.start31_16 = (start >> 16) & 0xffff;  // 初始化IDT地址的高16位
   112f9:	8b 45 08             	mov    0x8(%ebp),%eax
   112fc:	c1 e8 10             	shr    $0x10,%eax
   112ff:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  idt.start15_0 = start & 0xffff;           // 初始化IDT地址的低16位
   11303:	8b 45 08             	mov    0x8(%ebp),%eax
   11306:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   1130a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1130d:	83 e8 01             	sub    $0x1,%eax
  idt.limit =
   11310:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   11314:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   11318:	90                   	nop
   11319:	c9                   	leave  
   1131a:	c3                   	ret    

0001131b <read_eflags>:
/**
 * @brief  读取当前cpu的eflags寄存器
 * 
 * @return uint32_t 放回eflags的值
 */
static inline uint32_t read_eflags(void) {
   1131b:	55                   	push   %ebp
   1131c:	89 e5                	mov    %esp,%ebp
   1131e:	83 ec 10             	sub    $0x10,%esp
  uint32_t eflags;
  //pushf 压入eflags的值到栈中
  __asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   11321:	9c                   	pushf  
   11322:	58                   	pop    %eax
   11323:	89 45 fc             	mov    %eax,-0x4(%ebp)
  
  return eflags;
   11326:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11329:	c9                   	leave  
   1132a:	c3                   	ret    

0001132b <write_eflags>:
/**
 * @brief  将状态state写入eflags寄存器
 * 
 * @param state 
 */
static inline void write_eflags(uint32_t state) {
   1132b:	55                   	push   %ebp
   1132c:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("push %%eax\n\tpopf"::"a"(state));
   1132e:	8b 45 08             	mov    0x8(%ebp),%eax
   11331:	50                   	push   %eax
   11332:	9d                   	popf   
}
   11333:	90                   	nop
   11334:	5d                   	pop    %ebp
   11335:	c3                   	ret    

00011336 <print_exception_fram>:
/**
 * @brief  打印异常栈帧信息
 * 
 * @param frame 栈帧
 */
static void print_exception_fram(const exception_frame_t *frame) {
   11336:	55                   	push   %ebp
   11337:	89 e5                	mov    %esp,%ebp
   11339:	57                   	push   %edi
   1133a:	56                   	push   %esi
   1133b:	53                   	push   %ebx
   1133c:	83 ec 1c             	sub    $0x1c,%esp

  log_printf("------------------------stack frame info---------------------");
   1133f:	83 ec 0c             	sub    $0xc,%esp
   11342:	68 7c 34 01 00       	push   $0x1347c
   11347:	e8 ba 1d 00 00       	call   13106 <log_printf>
   1134c:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ:\t\t%d\nerror code:\t%d", frame->num, frame->error_code);
   1134f:	8b 45 08             	mov    0x8(%ebp),%eax
   11352:	8b 50 34             	mov    0x34(%eax),%edx
   11355:	8b 45 08             	mov    0x8(%ebp),%eax
   11358:	8b 40 30             	mov    0x30(%eax),%eax
   1135b:	83 ec 04             	sub    $0x4,%esp
   1135e:	52                   	push   %edx
   1135f:	50                   	push   %eax
   11360:	68 ba 34 01 00       	push   $0x134ba
   11365:	e8 9c 1d 00 00       	call   13106 <log_printf>
   1136a:	83 c4 10             	add    $0x10,%esp
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
    //TODO:SS暂时没法获取，先用ds替代，之后再进行获取
    frame->cs, frame->ds, frame->ds, frame->es, frame->fs, frame->gs
   1136d:	8b 45 08             	mov    0x8(%ebp),%eax
   11370:	8b 38                	mov    (%eax),%edi
   11372:	8b 45 08             	mov    0x8(%ebp),%eax
   11375:	8b 70 04             	mov    0x4(%eax),%esi
   11378:	8b 45 08             	mov    0x8(%ebp),%eax
   1137b:	8b 58 08             	mov    0x8(%eax),%ebx
   1137e:	8b 45 08             	mov    0x8(%ebp),%eax
   11381:	8b 48 0c             	mov    0xc(%eax),%ecx
   11384:	8b 45 08             	mov    0x8(%ebp),%eax
   11387:	8b 50 0c             	mov    0xc(%eax),%edx
   1138a:	8b 45 08             	mov    0x8(%ebp),%eax
   1138d:	8b 40 3c             	mov    0x3c(%eax),%eax
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
   11390:	83 ec 04             	sub    $0x4,%esp
   11393:	57                   	push   %edi
   11394:	56                   	push   %esi
   11395:	53                   	push   %ebx
   11396:	51                   	push   %ecx
   11397:	52                   	push   %edx
   11398:	50                   	push   %eax
   11399:	68 d4 34 01 00       	push   $0x134d4
   1139e:	e8 63 1d 00 00       	call   13106 <log_printf>
   113a3:	83 c4 20             	add    $0x20,%esp
              "ESI:\t\t0x%x\n"
              "EDI:\t\t0x%x\n"
              "EBP:\t\t0x%x\n"
              "ESP:\t\t0x%x", 
              frame->eax, frame->ebx, frame->ecx, frame->edx,
              frame->esi, frame->edi, frame->ebp, frame->esp 
   113a6:	8b 45 08             	mov    0x8(%ebp),%eax
   113a9:	8b 48 1c             	mov    0x1c(%eax),%ecx
   113ac:	8b 45 08             	mov    0x8(%ebp),%eax
   113af:	8b 40 18             	mov    0x18(%eax),%eax
   113b2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   113b5:	8b 45 08             	mov    0x8(%ebp),%eax
   113b8:	8b 58 10             	mov    0x10(%eax),%ebx
   113bb:	89 5d e0             	mov    %ebx,-0x20(%ebp)
   113be:	8b 45 08             	mov    0x8(%ebp),%eax
   113c1:	8b 78 14             	mov    0x14(%eax),%edi
              frame->eax, frame->ebx, frame->ecx, frame->edx,
   113c4:	8b 45 08             	mov    0x8(%ebp),%eax
   113c7:	8b 70 24             	mov    0x24(%eax),%esi
   113ca:	8b 45 08             	mov    0x8(%ebp),%eax
   113cd:	8b 58 28             	mov    0x28(%eax),%ebx
   113d0:	8b 45 08             	mov    0x8(%ebp),%eax
   113d3:	8b 50 20             	mov    0x20(%eax),%edx
   113d6:	8b 45 08             	mov    0x8(%ebp),%eax
   113d9:	8b 40 2c             	mov    0x2c(%eax),%eax
  log_printf( 
   113dc:	83 ec 0c             	sub    $0xc,%esp
   113df:	51                   	push   %ecx
   113e0:	ff 75 e4             	push   -0x1c(%ebp)
   113e3:	ff 75 e0             	push   -0x20(%ebp)
   113e6:	57                   	push   %edi
   113e7:	56                   	push   %esi
   113e8:	53                   	push   %ebx
   113e9:	52                   	push   %edx
   113ea:	50                   	push   %eax
   113eb:	68 04 35 01 00       	push   $0x13504
   113f0:	e8 11 1d 00 00       	call   13106 <log_printf>
   113f5:	83 c4 30             	add    $0x30,%esp
              );

  log_printf("EIP:\t\t0x%x\nEFLAGS:\t\t0x%x", frame->eip, frame->eflags);
   113f8:	8b 45 08             	mov    0x8(%ebp),%eax
   113fb:	8b 50 40             	mov    0x40(%eax),%edx
   113fe:	8b 45 08             	mov    0x8(%ebp),%eax
   11401:	8b 40 38             	mov    0x38(%eax),%eax
   11404:	83 ec 04             	sub    $0x4,%esp
   11407:	52                   	push   %edx
   11408:	50                   	push   %eax
   11409:	68 5c 35 01 00       	push   $0x1355c
   1140e:	e8 f3 1c 00 00       	call   13106 <log_printf>
   11413:	83 c4 10             	add    $0x10,%esp
}
   11416:	90                   	nop
   11417:	8d 65 f4             	lea    -0xc(%ebp),%esp
   1141a:	5b                   	pop    %ebx
   1141b:	5e                   	pop    %esi
   1141c:	5f                   	pop    %edi
   1141d:	5d                   	pop    %ebp
   1141e:	c3                   	ret    

0001141f <do_default_handler>:
 *
 * @param message 异常信息
 * @param fram  异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
static void do_default_handler(const exception_frame_t *frame,
                               const char *message) {
   1141f:	55                   	push   %ebp
   11420:	89 e5                	mov    %esp,%ebp
   11422:	83 ec 08             	sub    $0x8,%esp

  log_printf("---------------------------------------------------");
   11425:	83 ec 0c             	sub    $0xc,%esp
   11428:	68 78 35 01 00       	push   $0x13578
   1142d:	e8 d4 1c 00 00       	call   13106 <log_printf>
   11432:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ/Exception happend: %s", message);
   11435:	83 ec 08             	sub    $0x8,%esp
   11438:	ff 75 0c             	push   0xc(%ebp)
   1143b:	68 ac 35 01 00       	push   $0x135ac
   11440:	e8 c1 1c 00 00       	call   13106 <log_printf>
   11445:	83 c4 10             	add    $0x10,%esp
  print_exception_fram(frame);
   11448:	83 ec 0c             	sub    $0xc,%esp
   1144b:	ff 75 08             	push   0x8(%ebp)
   1144e:	e8 e3 fe ff ff       	call   11336 <print_exception_fram>
   11453:	83 c4 10             	add    $0x10,%esp
                              
  
  for (;;) {
    hlt();
   11456:	e8 53 fe ff ff       	call   112ae <hlt>
   1145b:	eb f9                	jmp    11456 <do_default_handler+0x37>

0001145d <do_handler_unknown>:

/**
 * @brief   对没有针对性处理程序的异常进行处理
 * @param frame 异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
void do_handler_unknown(const exception_frame_t *frame) {
   1145d:	55                   	push   %ebp
   1145e:	89 e5                	mov    %esp,%ebp
   11460:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "unknown exception");
   11463:	83 ec 08             	sub    $0x8,%esp
   11466:	68 c6 35 01 00       	push   $0x135c6
   1146b:	ff 75 08             	push   0x8(%ebp)
   1146e:	e8 ac ff ff ff       	call   1141f <do_default_handler>
   11473:	83 c4 10             	add    $0x10,%esp
}
   11476:	90                   	nop
   11477:	c9                   	leave  
   11478:	c3                   	ret    

00011479 <do_handler_divider>:
/**
 * @brief  除0异常
 *
 * @param frame 异常栈帧
 */
void do_handler_divider(const exception_frame_t *frame) {
   11479:	55                   	push   %ebp
   1147a:	89 e5                	mov    %esp,%ebp
   1147c:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "divider exception");
   1147f:	83 ec 08             	sub    $0x8,%esp
   11482:	68 d8 35 01 00       	push   $0x135d8
   11487:	ff 75 08             	push   0x8(%ebp)
   1148a:	e8 90 ff ff ff       	call   1141f <do_default_handler>
   1148f:	83 c4 10             	add    $0x10,%esp
}
   11492:	90                   	nop
   11493:	c9                   	leave  
   11494:	c3                   	ret    

00011495 <do_handler_debug>:

void do_handler_debug(const exception_frame_t *frame) {
   11495:	55                   	push   %ebp
   11496:	89 e5                	mov    %esp,%ebp
   11498:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "debug exception");
   1149b:	83 ec 08             	sub    $0x8,%esp
   1149e:	68 ea 35 01 00       	push   $0x135ea
   114a3:	ff 75 08             	push   0x8(%ebp)
   114a6:	e8 74 ff ff ff       	call   1141f <do_default_handler>
   114ab:	83 c4 10             	add    $0x10,%esp
}
   114ae:	90                   	nop
   114af:	c9                   	leave  
   114b0:	c3                   	ret    

000114b1 <do_handler_nmi>:

void do_handler_nmi(const exception_frame_t *frame) {
   114b1:	55                   	push   %ebp
   114b2:	89 e5                	mov    %esp,%ebp
   114b4:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "nmi exception");
   114b7:	83 ec 08             	sub    $0x8,%esp
   114ba:	68 fa 35 01 00       	push   $0x135fa
   114bf:	ff 75 08             	push   0x8(%ebp)
   114c2:	e8 58 ff ff ff       	call   1141f <do_default_handler>
   114c7:	83 c4 10             	add    $0x10,%esp
}
   114ca:	90                   	nop
   114cb:	c9                   	leave  
   114cc:	c3                   	ret    

000114cd <do_handler_breakpoint>:
void do_handler_breakpoint(const exception_frame_t *frame) {
   114cd:	55                   	push   %ebp
   114ce:	89 e5                	mov    %esp,%ebp
   114d0:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "breakpoint exception");
   114d3:	83 ec 08             	sub    $0x8,%esp
   114d6:	68 08 36 01 00       	push   $0x13608
   114db:	ff 75 08             	push   0x8(%ebp)
   114de:	e8 3c ff ff ff       	call   1141f <do_default_handler>
   114e3:	83 c4 10             	add    $0x10,%esp
}
   114e6:	90                   	nop
   114e7:	c9                   	leave  
   114e8:	c3                   	ret    

000114e9 <do_handler_overflow>:
void do_handler_overflow(const exception_frame_t *frame) {
   114e9:	55                   	push   %ebp
   114ea:	89 e5                	mov    %esp,%ebp
   114ec:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "overflow exception");
   114ef:	83 ec 08             	sub    $0x8,%esp
   114f2:	68 1d 36 01 00       	push   $0x1361d
   114f7:	ff 75 08             	push   0x8(%ebp)
   114fa:	e8 20 ff ff ff       	call   1141f <do_default_handler>
   114ff:	83 c4 10             	add    $0x10,%esp
}
   11502:	90                   	nop
   11503:	c9                   	leave  
   11504:	c3                   	ret    

00011505 <do_handler_bound_range>:
void do_handler_bound_range(const exception_frame_t *frame) {
   11505:	55                   	push   %ebp
   11506:	89 e5                	mov    %esp,%ebp
   11508:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "bound_range exception");
   1150b:	83 ec 08             	sub    $0x8,%esp
   1150e:	68 30 36 01 00       	push   $0x13630
   11513:	ff 75 08             	push   0x8(%ebp)
   11516:	e8 04 ff ff ff       	call   1141f <do_default_handler>
   1151b:	83 c4 10             	add    $0x10,%esp
}
   1151e:	90                   	nop
   1151f:	c9                   	leave  
   11520:	c3                   	ret    

00011521 <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(const exception_frame_t *frame) {
   11521:	55                   	push   %ebp
   11522:	89 e5                	mov    %esp,%ebp
   11524:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_opcode exception");
   11527:	83 ec 08             	sub    $0x8,%esp
   1152a:	68 46 36 01 00       	push   $0x13646
   1152f:	ff 75 08             	push   0x8(%ebp)
   11532:	e8 e8 fe ff ff       	call   1141f <do_default_handler>
   11537:	83 c4 10             	add    $0x10,%esp
}
   1153a:	90                   	nop
   1153b:	c9                   	leave  
   1153c:	c3                   	ret    

0001153d <do_handler_device_unavailable>:
void do_handler_device_unavailable(const exception_frame_t *frame) {
   1153d:	55                   	push   %ebp
   1153e:	89 e5                	mov    %esp,%ebp
   11540:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "device_unavailable exception");
   11543:	83 ec 08             	sub    $0x8,%esp
   11546:	68 5f 36 01 00       	push   $0x1365f
   1154b:	ff 75 08             	push   0x8(%ebp)
   1154e:	e8 cc fe ff ff       	call   1141f <do_default_handler>
   11553:	83 c4 10             	add    $0x10,%esp
}
   11556:	90                   	nop
   11557:	c9                   	leave  
   11558:	c3                   	ret    

00011559 <do_handler_double_fault>:
void do_handler_double_fault(const exception_frame_t *frame) {
   11559:	55                   	push   %ebp
   1155a:	89 e5                	mov    %esp,%ebp
   1155c:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "double_fault exception");
   1155f:	83 ec 08             	sub    $0x8,%esp
   11562:	68 7c 36 01 00       	push   $0x1367c
   11567:	ff 75 08             	push   0x8(%ebp)
   1156a:	e8 b0 fe ff ff       	call   1141f <do_default_handler>
   1156f:	83 c4 10             	add    $0x10,%esp
}
   11572:	90                   	nop
   11573:	c9                   	leave  
   11574:	c3                   	ret    

00011575 <do_handler_invalid_tss>:
void do_handler_invalid_tss(const exception_frame_t *frame) {
   11575:	55                   	push   %ebp
   11576:	89 e5                	mov    %esp,%ebp
   11578:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_tss exception");
   1157b:	83 ec 08             	sub    $0x8,%esp
   1157e:	68 93 36 01 00       	push   $0x13693
   11583:	ff 75 08             	push   0x8(%ebp)
   11586:	e8 94 fe ff ff       	call   1141f <do_default_handler>
   1158b:	83 c4 10             	add    $0x10,%esp
}
   1158e:	90                   	nop
   1158f:	c9                   	leave  
   11590:	c3                   	ret    

00011591 <do_handler_segment_not_present>:
void do_handler_segment_not_present(const exception_frame_t *frame) {
   11591:	55                   	push   %ebp
   11592:	89 e5                	mov    %esp,%ebp
   11594:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "segment_not_present exception");
   11597:	83 ec 08             	sub    $0x8,%esp
   1159a:	68 a9 36 01 00       	push   $0x136a9
   1159f:	ff 75 08             	push   0x8(%ebp)
   115a2:	e8 78 fe ff ff       	call   1141f <do_default_handler>
   115a7:	83 c4 10             	add    $0x10,%esp
}
   115aa:	90                   	nop
   115ab:	c9                   	leave  
   115ac:	c3                   	ret    

000115ad <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(const exception_frame_t *frame) {
   115ad:	55                   	push   %ebp
   115ae:	89 e5                	mov    %esp,%ebp
   115b0:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "stack_segment_fault exception");
   115b3:	83 ec 08             	sub    $0x8,%esp
   115b6:	68 c7 36 01 00       	push   $0x136c7
   115bb:	ff 75 08             	push   0x8(%ebp)
   115be:	e8 5c fe ff ff       	call   1141f <do_default_handler>
   115c3:	83 c4 10             	add    $0x10,%esp
}
   115c6:	90                   	nop
   115c7:	c9                   	leave  
   115c8:	c3                   	ret    

000115c9 <do_handler_general_protection>:
void do_handler_general_protection(const exception_frame_t *frame) {
   115c9:	55                   	push   %ebp
   115ca:	89 e5                	mov    %esp,%ebp
   115cc:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "general_protection exception");
   115cf:	83 ec 08             	sub    $0x8,%esp
   115d2:	68 e5 36 01 00       	push   $0x136e5
   115d7:	ff 75 08             	push   0x8(%ebp)
   115da:	e8 40 fe ff ff       	call   1141f <do_default_handler>
   115df:	83 c4 10             	add    $0x10,%esp
}
   115e2:	90                   	nop
   115e3:	c9                   	leave  
   115e4:	c3                   	ret    

000115e5 <do_handler_page_fault>:
void do_handler_page_fault(const exception_frame_t *frame) {
   115e5:	55                   	push   %ebp
   115e6:	89 e5                	mov    %esp,%ebp
   115e8:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "page_fault exception");
   115eb:	83 ec 08             	sub    $0x8,%esp
   115ee:	68 02 37 01 00       	push   $0x13702
   115f3:	ff 75 08             	push   0x8(%ebp)
   115f6:	e8 24 fe ff ff       	call   1141f <do_default_handler>
   115fb:	83 c4 10             	add    $0x10,%esp
}
   115fe:	90                   	nop
   115ff:	c9                   	leave  
   11600:	c3                   	ret    

00011601 <do_handler_fpu_error>:
void do_handler_fpu_error(const exception_frame_t *frame) {
   11601:	55                   	push   %ebp
   11602:	89 e5                	mov    %esp,%ebp
   11604:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "fpu_error exception");
   11607:	83 ec 08             	sub    $0x8,%esp
   1160a:	68 17 37 01 00       	push   $0x13717
   1160f:	ff 75 08             	push   0x8(%ebp)
   11612:	e8 08 fe ff ff       	call   1141f <do_default_handler>
   11617:	83 c4 10             	add    $0x10,%esp
}
   1161a:	90                   	nop
   1161b:	c9                   	leave  
   1161c:	c3                   	ret    

0001161d <do_handler_alignment_check>:
void do_handler_alignment_check(const exception_frame_t *frame) {
   1161d:	55                   	push   %ebp
   1161e:	89 e5                	mov    %esp,%ebp
   11620:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "alignment_check exception");
   11623:	83 ec 08             	sub    $0x8,%esp
   11626:	68 2b 37 01 00       	push   $0x1372b
   1162b:	ff 75 08             	push   0x8(%ebp)
   1162e:	e8 ec fd ff ff       	call   1141f <do_default_handler>
   11633:	83 c4 10             	add    $0x10,%esp
}
   11636:	90                   	nop
   11637:	c9                   	leave  
   11638:	c3                   	ret    

00011639 <do_handler_machine_check>:
void do_handler_machine_check(const exception_frame_t *frame) {
   11639:	55                   	push   %ebp
   1163a:	89 e5                	mov    %esp,%ebp
   1163c:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "machine_check exception");
   1163f:	83 ec 08             	sub    $0x8,%esp
   11642:	68 45 37 01 00       	push   $0x13745
   11647:	ff 75 08             	push   0x8(%ebp)
   1164a:	e8 d0 fd ff ff       	call   1141f <do_default_handler>
   1164f:	83 c4 10             	add    $0x10,%esp
}
   11652:	90                   	nop
   11653:	c9                   	leave  
   11654:	c3                   	ret    

00011655 <do_handler_smd_exception>:
void do_handler_smd_exception(const exception_frame_t *frame) {
   11655:	55                   	push   %ebp
   11656:	89 e5                	mov    %esp,%ebp
   11658:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "smd_exception exception");
   1165b:	83 ec 08             	sub    $0x8,%esp
   1165e:	68 5d 37 01 00       	push   $0x1375d
   11663:	ff 75 08             	push   0x8(%ebp)
   11666:	e8 b4 fd ff ff       	call   1141f <do_default_handler>
   1166b:	83 c4 10             	add    $0x10,%esp
}
   1166e:	90                   	nop
   1166f:	c9                   	leave  
   11670:	c3                   	ret    

00011671 <do_handler_virtual_exception>:
void do_handler_virtual_exception(const exception_frame_t *frame) {
   11671:	55                   	push   %ebp
   11672:	89 e5                	mov    %esp,%ebp
   11674:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "virtual_exception exception");
   11677:	83 ec 08             	sub    $0x8,%esp
   1167a:	68 75 37 01 00       	push   $0x13775
   1167f:	ff 75 08             	push   0x8(%ebp)
   11682:	e8 98 fd ff ff       	call   1141f <do_default_handler>
   11687:	83 c4 10             	add    $0x10,%esp
}
   1168a:	90                   	nop
   1168b:	c9                   	leave  
   1168c:	c3                   	ret    

0001168d <do_handler_control_exception>:
void do_handler_control_exception(const exception_frame_t *frame) {
   1168d:	55                   	push   %ebp
   1168e:	89 e5                	mov    %esp,%ebp
   11690:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "control_exception exception");
   11693:	83 ec 08             	sub    $0x8,%esp
   11696:	68 91 37 01 00       	push   $0x13791
   1169b:	ff 75 08             	push   0x8(%ebp)
   1169e:	e8 7c fd ff ff       	call   1141f <do_default_handler>
   116a3:	83 c4 10             	add    $0x10,%esp
}
   116a6:	90                   	nop
   116a7:	c9                   	leave  
   116a8:	c3                   	ret    

000116a9 <gate_desc_set>:
 * @param selector 中断门对应的处理程序所在的段的选择子
 * @param offset 中段门对应的处理程序相对于所在段的偏移量
 * @param attr 中段门的属性
 */
static void gate_desc_set(gate_desc_t *desc, const uint16_t selector, const uint32_t offset,
                          const uint16_t attr) {
   116a9:	55                   	push   %ebp
   116aa:	89 e5                	mov    %esp,%ebp
   116ac:	83 ec 08             	sub    $0x8,%esp
   116af:	8b 55 0c             	mov    0xc(%ebp),%edx
   116b2:	8b 45 14             	mov    0x14(%ebp),%eax
   116b5:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   116b9:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
  // 1.初始化偏移量
  desc->offset15_0 = offset & 0xffff;
   116bd:	8b 45 10             	mov    0x10(%ebp),%eax
   116c0:	89 c2                	mov    %eax,%edx
   116c2:	8b 45 08             	mov    0x8(%ebp),%eax
   116c5:	66 89 10             	mov    %dx,(%eax)
  desc->offset31_16 = (offset >> 16) & 0xffff;
   116c8:	8b 45 10             	mov    0x10(%ebp),%eax
   116cb:	c1 e8 10             	shr    $0x10,%eax
   116ce:	89 c2                	mov    %eax,%edx
   116d0:	8b 45 08             	mov    0x8(%ebp),%eax
   116d3:	66 89 50 06          	mov    %dx,0x6(%eax)

  // 2.初始化选择子
  desc->selector = selector;
   116d7:	8b 45 08             	mov    0x8(%ebp),%eax
   116da:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   116de:	66 89 50 02          	mov    %dx,0x2(%eax)

  // 3.初始化属性位
  desc->attr = attr;
   116e2:	8b 45 08             	mov    0x8(%ebp),%eax
   116e5:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   116e9:	66 89 50 04          	mov    %dx,0x4(%eax)
}
   116ed:	90                   	nop
   116ee:	c9                   	leave  
   116ef:	c3                   	ret    

000116f0 <idt_install>:
 *
 * @param idt_num 异常的下标
 * @param handler 异常处理程序的偏移地址
 * @return int 成功返回 0 失败放回 -1
 */
int idt_install(const int idt_num, const idt_handler_t handler) {
   116f0:	55                   	push   %ebp
   116f1:	89 e5                	mov    %esp,%ebp
  // 1.判断IDT下标是否越界
  if (idt_num >= IDT_TABLE_SIZE || idt_num < 0) return -1;
   116f3:	81 7d 08 ff 00 00 00 	cmpl   $0xff,0x8(%ebp)
   116fa:	7f 06                	jg     11702 <idt_install+0x12>
   116fc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11700:	79 07                	jns    11709 <idt_install+0x19>
   11702:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11707:	eb 25                	jmp    1172e <idt_install+0x3e>

  // 2.在IDT表中设置下标为 idt_num 的中断门
  gate_desc_set(idt_table + idt_num, KERNEL_SELECTOR_CS, (uint32_t)handler,
   11709:	8b 45 0c             	mov    0xc(%ebp),%eax
   1170c:	8b 55 08             	mov    0x8(%ebp),%edx
   1170f:	c1 e2 03             	shl    $0x3,%edx
   11712:	81 c2 c0 f3 02 00    	add    $0x2f3c0,%edx
   11718:	68 00 8e 00 00       	push   $0x8e00
   1171d:	50                   	push   %eax
   1171e:	6a 08                	push   $0x8
   11720:	52                   	push   %edx
   11721:	e8 83 ff ff ff       	call   116a9 <gate_desc_set>
   11726:	83 c4 10             	add    $0x10,%esp
                GATE_TYPE_INT | GATE_ATTR_P | GATE_ATTR_DPL_0);

  return 0;
   11729:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1172e:	c9                   	leave  
   1172f:	c3                   	ret    

00011730 <init_pic>:

/**
 * @brief  初始化主从8259芯片
 * 
 */
static void init_pic(void) {
   11730:	55                   	push   %ebp
   11731:	89 e5                	mov    %esp,%ebp
  //1.对主片(8259A芯片)进行初始化, 写入时必须按照ICW1~4的顺序写入
  outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);  //ICW1:边缘触发，级联模式，需要ICW4
   11733:	6a 11                	push   $0x11
   11735:	6a 20                	push   $0x20
   11737:	e8 96 fb ff ff       	call   112d2 <outb>
   1173c:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW2, PIC_ICW2_IDT_START);                //ICW2:起始中断向量号为0x20
   1173f:	6a 20                	push   $0x20
   11741:	6a 21                	push   $0x21
   11743:	e8 8a fb ff ff       	call   112d2 <outb>
   11748:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW3, PIC_ICW3_MASTER_CASCADE);           //ICW3:主片用IR2级联从片
   1174b:	6a 04                	push   $0x4
   1174d:	6a 21                	push   $0x21
   1174f:	e8 7e fb ff ff       	call   112d2 <outb>
   11754:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW4, PIC_ICW4_8086);                     //ICW4:8086模式，正常EOI
   11757:	6a 01                	push   $0x1
   11759:	6a 21                	push   $0x21
   1175b:	e8 72 fb ff ff       	call   112d2 <outb>
   11760:	83 c4 08             	add    $0x8,%esp

  //2.对从片(8259A芯片)进行初始化
  outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);
   11763:	6a 11                	push   $0x11
   11765:	68 a0 00 00 00       	push   $0xa0
   1176a:	e8 63 fb ff ff       	call   112d2 <outb>
   1176f:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW2, PIC_ICW2_IDT_START + 8); //第一块芯片占用了8个中断，所以第二块芯片从第8个中断的下一个开始
   11772:	6a 28                	push   $0x28
   11774:	68 a1 00 00 00       	push   $0xa1
   11779:	e8 54 fb ff ff       	call   112d2 <outb>
   1177e:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW3, PIC_ICW3_SLAVE_CASCADE);
   11781:	6a 02                	push   $0x2
   11783:	68 a1 00 00 00       	push   $0xa1
   11788:	e8 45 fb ff ff       	call   112d2 <outb>
   1178d:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW4, PIC_ICW4_8086);
   11790:	6a 01                	push   $0x1
   11792:	68 a1 00 00 00       	push   $0xa1
   11797:	e8 36 fb ff ff       	call   112d2 <outb>
   1179c:	83 c4 08             	add    $0x8,%esp


  //3.初始化完两块8259芯片后，还需要为每一个中断设置处理程序
  //才可以去接收中断，所以现在要屏蔽中断，IMR位置1则屏蔽该中断请求，0则不屏蔽
  outb(PIC0_IMR, 0xfb); //屏蔽主片除 irq2(第3位) 以外的位传来的中断，(1111 1011)
   1179f:	68 fb 00 00 00       	push   $0xfb
   117a4:	6a 21                	push   $0x21
   117a6:	e8 27 fb ff ff       	call   112d2 <outb>
   117ab:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_IMR, 0xff); //屏蔽从片的所有中断
   117ae:	68 ff 00 00 00       	push   $0xff
   117b3:	68 a1 00 00 00       	push   $0xa1
   117b8:	e8 15 fb ff ff       	call   112d2 <outb>
   117bd:	83 c4 08             	add    $0x8,%esp


}
   117c0:	90                   	nop
   117c1:	c9                   	leave  
   117c2:	c3                   	ret    

000117c3 <idt_init>:

/**
 * @brief  初始化中断向量表
 *
 */
void idt_init(void) {
   117c3:	55                   	push   %ebp
   117c4:	89 e5                	mov    %esp,%ebp
   117c6:	83 ec 10             	sub    $0x10,%esp
  // 1.初始化IDT中的各个中断门(未知异常类型)
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   117c9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   117d0:	eb 14                	jmp    117e6 <idt_init+0x23>
    idt_install(i, (idt_handler_t)exception_handler_unknown);
   117d2:	68 2a 00 01 00       	push   $0x1002a
   117d7:	ff 75 fc             	push   -0x4(%ebp)
   117da:	e8 11 ff ff ff       	call   116f0 <idt_install>
   117df:	83 c4 08             	add    $0x8,%esp
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   117e2:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   117e6:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   117ed:	7e e3                	jle    117d2 <idt_init+0xf>
  }

  // 2.绑定异常中断向量表中对应下标的中断门的处理函数
  idt_install(IDT0_DE, (idt_handler_t)exception_handler_divider);
   117ef:	68 47 00 01 00       	push   $0x10047
   117f4:	6a 00                	push   $0x0
   117f6:	e8 f5 fe ff ff       	call   116f0 <idt_install>
   117fb:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT1_DB, (idt_handler_t)exception_handler_debug);
   117fe:	68 64 00 01 00       	push   $0x10064
   11803:	6a 01                	push   $0x1
   11805:	e8 e6 fe ff ff       	call   116f0 <idt_install>
   1180a:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT2_NMI, (idt_handler_t)exception_handler_nmi);
   1180d:	68 81 00 01 00       	push   $0x10081
   11812:	6a 02                	push   $0x2
   11814:	e8 d7 fe ff ff       	call   116f0 <idt_install>
   11819:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT3_BP, (idt_handler_t)exception_handler_breakpoint);
   1181c:	68 9e 00 01 00       	push   $0x1009e
   11821:	6a 03                	push   $0x3
   11823:	e8 c8 fe ff ff       	call   116f0 <idt_install>
   11828:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT4_OF, (idt_handler_t)exception_handler_overflow);
   1182b:	68 bb 00 01 00       	push   $0x100bb
   11830:	6a 04                	push   $0x4
   11832:	e8 b9 fe ff ff       	call   116f0 <idt_install>
   11837:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT5_BR, (idt_handler_t)exception_handler_bound_range);
   1183a:	68 d8 00 01 00       	push   $0x100d8
   1183f:	6a 05                	push   $0x5
   11841:	e8 aa fe ff ff       	call   116f0 <idt_install>
   11846:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT6_UD, (idt_handler_t)exception_handler_invalid_opcode);
   11849:	68 f5 00 01 00       	push   $0x100f5
   1184e:	6a 06                	push   $0x6
   11850:	e8 9b fe ff ff       	call   116f0 <idt_install>
   11855:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT7_NM, (idt_handler_t)exception_handler_device_unavailable);
   11858:	68 12 01 01 00       	push   $0x10112
   1185d:	6a 07                	push   $0x7
   1185f:	e8 8c fe ff ff       	call   116f0 <idt_install>
   11864:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT8_DF, (idt_handler_t)exception_handler_double_fault);
   11867:	68 2f 01 01 00       	push   $0x1012f
   1186c:	6a 08                	push   $0x8
   1186e:	e8 7d fe ff ff       	call   116f0 <idt_install>
   11873:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT10_TS, (idt_handler_t)exception_handler_invalid_tss);
   11876:	68 4a 01 01 00       	push   $0x1014a
   1187b:	6a 0a                	push   $0xa
   1187d:	e8 6e fe ff ff       	call   116f0 <idt_install>
   11882:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT11_NP, (idt_handler_t)exception_handler_segment_not_present);
   11885:	68 65 01 01 00       	push   $0x10165
   1188a:	6a 0b                	push   $0xb
   1188c:	e8 5f fe ff ff       	call   116f0 <idt_install>
   11891:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT12_SS, (idt_handler_t)exception_handler_stack_segment_fault);
   11894:	68 80 01 01 00       	push   $0x10180
   11899:	6a 0c                	push   $0xc
   1189b:	e8 50 fe ff ff       	call   116f0 <idt_install>
   118a0:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT13_GP, (idt_handler_t)exception_handler_general_protection);
   118a3:	68 9b 01 01 00       	push   $0x1019b
   118a8:	6a 0d                	push   $0xd
   118aa:	e8 41 fe ff ff       	call   116f0 <idt_install>
   118af:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT14_PF, (idt_handler_t)exception_handler_page_fault);
   118b2:	68 b6 01 01 00       	push   $0x101b6
   118b7:	6a 0e                	push   $0xe
   118b9:	e8 32 fe ff ff       	call   116f0 <idt_install>
   118be:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT16_MF, (idt_handler_t)exception_handler_fpu_error);
   118c1:	68 d1 01 01 00       	push   $0x101d1
   118c6:	6a 10                	push   $0x10
   118c8:	e8 23 fe ff ff       	call   116f0 <idt_install>
   118cd:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT17_AC, (idt_handler_t)exception_handler_alignment_check);
   118d0:	68 ee 01 01 00       	push   $0x101ee
   118d5:	6a 11                	push   $0x11
   118d7:	e8 14 fe ff ff       	call   116f0 <idt_install>
   118dc:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT18_MC, (idt_handler_t)exception_handler_machine_check);
   118df:	68 09 02 01 00       	push   $0x10209
   118e4:	6a 12                	push   $0x12
   118e6:	e8 05 fe ff ff       	call   116f0 <idt_install>
   118eb:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT19_XM, (idt_handler_t)exception_handler_smd_exception);
   118ee:	68 26 02 01 00       	push   $0x10226
   118f3:	6a 13                	push   $0x13
   118f5:	e8 f6 fd ff ff       	call   116f0 <idt_install>
   118fa:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT20_VE, (idt_handler_t)exception_handler_virtual_exception);
   118fd:	68 43 02 01 00       	push   $0x10243
   11902:	6a 14                	push   $0x14
   11904:	e8 e7 fd ff ff       	call   116f0 <idt_install>
   11909:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT21_CP, (idt_handler_t)exception_handler_control_exception);
   1190c:	68 60 02 01 00       	push   $0x10260
   11911:	6a 15                	push   $0x15
   11913:	e8 d8 fd ff ff       	call   116f0 <idt_install>
   11918:	83 c4 08             	add    $0x8,%esp

  //3.加载IDT
  lidt((uint32_t)idt_table, sizeof(idt_table));
   1191b:	b8 c0 f3 02 00       	mov    $0x2f3c0,%eax
   11920:	68 00 08 00 00       	push   $0x800
   11925:	50                   	push   %eax
   11926:	e8 c8 f9 ff ff       	call   112f3 <lidt>
   1192b:	83 c4 08             	add    $0x8,%esp

  //4.初始化8259设备中断芯片
  init_pic();
   1192e:	e8 fd fd ff ff       	call   11730 <init_pic>
}
   11933:	90                   	nop
   11934:	c9                   	leave  
   11935:	c3                   	ret    

00011936 <idt_enable>:
/**
 * @brief  开启外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号,即IDT中的下标
 */
void idt_enable(uint8_t irq_num) {
   11936:	55                   	push   %ebp
   11937:	89 e5                	mov    %esp,%ebp
   11939:	53                   	push   %ebx
   1193a:	83 ec 14             	sub    $0x14,%esp
   1193d:	8b 45 08             	mov    0x8(%ebp),%eax
   11940:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   11943:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   11947:	76 7f                	jbe    119c8 <idt_enable+0x92>
   11949:	80 7d e8 2e          	cmpb   $0x2e,-0x18(%ebp)
   1194d:	77 79                	ja     119c8 <idt_enable+0x92>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   1194f:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置0，即不屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   11953:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   11957:	77 33                	ja     1198c <idt_enable+0x56>
    uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   11959:	6a 21                	push   $0x21
   1195b:	e8 55 f9 ff ff       	call   112b5 <inb>
   11960:	83 c4 04             	add    $0x4,%esp
   11963:	89 c3                	mov    %eax,%ebx
   11965:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   11969:	ba 01 00 00 00       	mov    $0x1,%edx
   1196e:	89 c1                	mov    %eax,%ecx
   11970:	d3 e2                	shl    %cl,%edx
   11972:	89 d0                	mov    %edx,%eax
   11974:	f7 d0                	not    %eax
   11976:	21 d8                	and    %ebx,%eax
   11978:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   1197b:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   1197f:	50                   	push   %eax
   11980:	6a 21                	push   $0x21
   11982:	e8 4b f9 ff ff       	call   112d2 <outb>
   11987:	83 c4 08             	add    $0x8,%esp
   1198a:	eb 3d                	jmp    119c9 <idt_enable+0x93>
  } else {
    uint8_t mask = inb(PIC1_IMR) & ~(1 << (irq_num - 8));
   1198c:	68 a1 00 00 00       	push   $0xa1
   11991:	e8 1f f9 ff ff       	call   112b5 <inb>
   11996:	83 c4 04             	add    $0x4,%esp
   11999:	89 c3                	mov    %eax,%ebx
   1199b:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   1199f:	83 e8 08             	sub    $0x8,%eax
   119a2:	ba 01 00 00 00       	mov    $0x1,%edx
   119a7:	89 c1                	mov    %eax,%ecx
   119a9:	d3 e2                	shl    %cl,%edx
   119ab:	89 d0                	mov    %edx,%eax
   119ad:	f7 d0                	not    %eax
   119af:	21 d8                	and    %ebx,%eax
   119b1:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   119b4:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   119b8:	50                   	push   %eax
   119b9:	68 a1 00 00 00       	push   $0xa1
   119be:	e8 0f f9 ff ff       	call   112d2 <outb>
   119c3:	83 c4 08             	add    $0x8,%esp
   119c6:	eb 01                	jmp    119c9 <idt_enable+0x93>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   119c8:	90                   	nop
  }
  
}
   119c9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   119cc:	c9                   	leave  
   119cd:	c3                   	ret    

000119ce <idt_disable>:
/**
 * @brief  关闭外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号，即IDT中的下标
 */
void idt_disable(uint8_t irq_num) {
   119ce:	55                   	push   %ebp
   119cf:	89 e5                	mov    %esp,%ebp
   119d1:	53                   	push   %ebx
   119d2:	83 ec 14             	sub    $0x14,%esp
   119d5:	8b 45 08             	mov    0x8(%ebp),%eax
   119d8:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   119db:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   119df:	76 7b                	jbe    11a5c <idt_disable+0x8e>
   119e1:	80 7d e8 2f          	cmpb   $0x2f,-0x18(%ebp)
   119e5:	77 75                	ja     11a5c <idt_disable+0x8e>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   119e7:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置1，即屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   119eb:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   119ef:	77 31                	ja     11a22 <idt_disable+0x54>
    uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   119f1:	6a 21                	push   $0x21
   119f3:	e8 bd f8 ff ff       	call   112b5 <inb>
   119f8:	83 c4 04             	add    $0x4,%esp
   119fb:	89 c3                	mov    %eax,%ebx
   119fd:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   11a01:	ba 01 00 00 00       	mov    $0x1,%edx
   11a06:	89 c1                	mov    %eax,%ecx
   11a08:	d3 e2                	shl    %cl,%edx
   11a0a:	89 d0                	mov    %edx,%eax
   11a0c:	09 d8                	or     %ebx,%eax
   11a0e:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   11a11:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11a15:	50                   	push   %eax
   11a16:	6a 21                	push   $0x21
   11a18:	e8 b5 f8 ff ff       	call   112d2 <outb>
   11a1d:	83 c4 08             	add    $0x8,%esp
   11a20:	eb 3b                	jmp    11a5d <idt_disable+0x8f>
  } else {
    uint8_t mask = inb(PIC1_IMR) | (1 << (irq_num - 8));
   11a22:	68 a1 00 00 00       	push   $0xa1
   11a27:	e8 89 f8 ff ff       	call   112b5 <inb>
   11a2c:	83 c4 04             	add    $0x4,%esp
   11a2f:	89 c3                	mov    %eax,%ebx
   11a31:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   11a35:	83 e8 08             	sub    $0x8,%eax
   11a38:	ba 01 00 00 00       	mov    $0x1,%edx
   11a3d:	89 c1                	mov    %eax,%ecx
   11a3f:	d3 e2                	shl    %cl,%edx
   11a41:	89 d0                	mov    %edx,%eax
   11a43:	09 d8                	or     %ebx,%eax
   11a45:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   11a48:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11a4c:	50                   	push   %eax
   11a4d:	68 a1 00 00 00       	push   $0xa1
   11a52:	e8 7b f8 ff ff       	call   112d2 <outb>
   11a57:	83 c4 08             	add    $0x8,%esp
   11a5a:	eb 01                	jmp    11a5d <idt_disable+0x8f>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   11a5c:	90                   	nop
  }
  
}
   11a5d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11a60:	c9                   	leave  
   11a61:	c3                   	ret    

00011a62 <idt_disable_global>:

/**
 * @brief  关闭全局中断
 * 
 */
void idt_disable_global(void) {
   11a62:	55                   	push   %ebp
   11a63:	89 e5                	mov    %esp,%ebp
  cli();
   11a65:	e8 36 f8 ff ff       	call   112a0 <cli>
}
   11a6a:	90                   	nop
   11a6b:	5d                   	pop    %ebp
   11a6c:	c3                   	ret    

00011a6d <idt_enable_global>:

/**
 * @brief  开启全局中断
 * 
 */
void idt_enable_global(void) {
   11a6d:	55                   	push   %ebp
   11a6e:	89 e5                	mov    %esp,%ebp
  sti();
   11a70:	e8 32 f8 ff ff       	call   112a7 <sti>
}
   11a75:	90                   	nop
   11a76:	5d                   	pop    %ebp
   11a77:	c3                   	ret    

00011a78 <pic_send_eoi>:
 * @brief  将OCW2寄存器的7~5位置为 001，用普通的EOI结束方式
 *         向8259A发送EOI命令，8259A会将ISR中优先级最高的位置0
 *
 * @param irq_num 中断向量号，即IDT下标
 */
void pic_send_eoi(int irq_num) {
   11a78:	55                   	push   %ebp
   11a79:	89 e5                	mov    %esp,%ebp
  //1.获取该中断对应的IRQ标号
  irq_num -= PIC_ICW2_IDT_START;
   11a7b:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
  //2.判断标号是否越界,若不越界则交给对应芯片处理
  if (irq_num < 0 || irq_num > 15) return;
   11a7f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11a83:	78 29                	js     11aae <pic_send_eoi+0x36>
   11a85:	83 7d 08 0f          	cmpl   $0xf,0x8(%ebp)
   11a89:	7f 23                	jg     11aae <pic_send_eoi+0x36>

  //3.若中断来自主片则只需向主片发送EOI
  outb(PIC0_OCW2, PIC_OCW2_EOI);
   11a8b:	6a 20                	push   $0x20
   11a8d:	6a 20                	push   $0x20
   11a8f:	e8 3e f8 ff ff       	call   112d2 <outb>
   11a94:	83 c4 08             	add    $0x8,%esp

  //4.若中断来自从片则还需向从片发送EOI
  if (irq_num >= 8) { 
   11a97:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11a9b:	7e 12                	jle    11aaf <pic_send_eoi+0x37>
    outb(PIC1_OCW2, PIC_OCW2_EOI);
   11a9d:	6a 20                	push   $0x20
   11a9f:	68 a0 00 00 00       	push   $0xa0
   11aa4:	e8 29 f8 ff ff       	call   112d2 <outb>
   11aa9:	83 c4 08             	add    $0x8,%esp
   11aac:	eb 01                	jmp    11aaf <pic_send_eoi+0x37>
  if (irq_num < 0 || irq_num > 15) return;
   11aae:	90                   	nop
  }

}
   11aaf:	c9                   	leave  
   11ab0:	c3                   	ret    

00011ab1 <idt_enter_protection>:

/**
 * @brief  
 * 
 */
idt_state_t idt_enter_protection(void) {
   11ab1:	55                   	push   %ebp
   11ab2:	89 e5                	mov    %esp,%ebp
   11ab4:	83 ec 10             	sub    $0x10,%esp
  idt_state_t state = read_eflags();
   11ab7:	e8 5f f8 ff ff       	call   1131b <read_eflags>
   11abc:	89 45 fc             	mov    %eax,-0x4(%ebp)
  idt_disable_global();
   11abf:	e8 9e ff ff ff       	call   11a62 <idt_disable_global>
  return state;;
   11ac4:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11ac7:	c9                   	leave  
   11ac8:	c3                   	ret    

00011ac9 <idt_leave_protection>:
/**
 * @brief  
 * 
 * @return idt_state_t 
 */
idt_state_t idt_leave_protection(idt_state_t state){
   11ac9:	55                   	push   %ebp
   11aca:	89 e5                	mov    %esp,%ebp
  write_eflags(state);
   11acc:	ff 75 08             	push   0x8(%ebp)
   11acf:	e8 57 f8 ff ff       	call   1132b <write_eflags>
   11ad4:	83 c4 04             	add    $0x4,%esp
}
   11ad7:	90                   	nop
   11ad8:	c9                   	leave  
   11ad9:	c3                   	ret    

00011ada <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   11ada:	55                   	push   %ebp
   11adb:	89 e5                	mov    %esp,%ebp
   11add:	83 ec 08             	sub    $0x8,%esp
   11ae0:	8b 45 08             	mov    0x8(%ebp),%eax
   11ae3:	8b 55 0c             	mov    0xc(%ebp),%edx
   11ae6:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   11aea:	89 d0                	mov    %edx,%eax
   11aec:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   11aef:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11af3:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11af7:	ee                   	out    %al,(%dx)
}
   11af8:	90                   	nop
   11af9:	c9                   	leave  
   11afa:	c3                   	ret    

00011afb <do_handler_time>:
/**
 * @brief  处理定时器中断的c函数
 * 
 * @param frame 异常栈帧
 */
void do_handler_time(const exception_frame_t *frame) {
   11afb:	55                   	push   %ebp
   11afc:	89 e5                	mov    %esp,%ebp
   11afe:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   11b01:	a1 c0 fb 02 00       	mov    0x2fbc0,%eax
   11b06:	83 c0 01             	add    $0x1,%eax
   11b09:	a3 c0 fb 02 00       	mov    %eax,0x2fbc0

    //因为ICW4的EOI位为0，所以要手动发送EOI即中断结束信号
    pic_send_eoi(IRQ0_TIMER);
   11b0e:	83 ec 0c             	sub    $0xc,%esp
   11b11:	6a 20                	push   $0x20
   11b13:	e8 60 ff ff ff       	call   11a78 <pic_send_eoi>
   11b18:	83 c4 10             	add    $0x10,%esp

    //运行完一个时间片，判断是否需要执行任务切换，若需要则执行
    //必须写在发送eoi之后，防止发生任务切换导致eoi没有发送，从而无法进行下一次中断
    task_slice_end();   
   11b1b:	e8 7c f3 ff ff       	call   10e9c <task_slice_end>
}
   11b20:	90                   	nop
   11b21:	c9                   	leave  
   11b22:	c3                   	ret    

00011b23 <init_pit>:

/**
 * @brief  初始化可编程定时器
 * 
 */
static void init_pit(void) {
   11b23:	55                   	push   %ebp
   11b24:	89 e5                	mov    %esp,%ebp
   11b26:	83 ec 18             	sub    $0x18,%esp
    //1.选择定时器的计算器，读取与加载初始值模式，以及工作模式
    outb(PIT_COMMAND_MODE_PORT, PIT_SELECT_COUNTER | PIT_READ_LOAD | PIT_MODE);
   11b29:	6a 36                	push   $0x36
   11b2b:	6a 43                	push   $0x43
   11b2d:	e8 a8 ff ff ff       	call   11ada <outb>
   11b32:	83 c4 08             	add    $0x8,%esp

    //2.写入16位初始值,即一个中断后期晶体的振荡次数，由确定的加载方式知，先写入低8位，再写入高8位
    uint16_t reload_count = (PIT_OSC_FREQ / 1000) * OS_TICKS_MS;   //确定晶体一个中断周期的震荡次数
   11b35:	66 c7 45 f6 9a 2e    	movw   $0x2e9a,-0xa(%ebp)
    outb(PIT_CHANNEL_DATA_PORT, reload_count & 0xff);
   11b3b:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   11b3f:	0f b6 c0             	movzbl %al,%eax
   11b42:	50                   	push   %eax
   11b43:	6a 40                	push   $0x40
   11b45:	e8 90 ff ff ff       	call   11ada <outb>
   11b4a:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL_DATA_PORT, (reload_count >> 8) & 0xff);
   11b4d:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   11b51:	66 c1 e8 08          	shr    $0x8,%ax
   11b55:	0f b6 c0             	movzbl %al,%eax
   11b58:	50                   	push   %eax
   11b59:	6a 40                	push   $0x40
   11b5b:	e8 7a ff ff ff       	call   11ada <outb>
   11b60:	83 c4 08             	add    $0x8,%esp

    //3.绑定定时器中断的异常处理程序,并开启该中断
    idt_install(IRQ0_TIMER, (idt_handler_t)exception_handler_time);
   11b63:	83 ec 08             	sub    $0x8,%esp
   11b66:	68 7b 02 01 00       	push   $0x1027b
   11b6b:	6a 20                	push   $0x20
   11b6d:	e8 7e fb ff ff       	call   116f0 <idt_install>
   11b72:	83 c4 10             	add    $0x10,%esp
    idt_enable(IRQ0_TIMER);
   11b75:	83 ec 0c             	sub    $0xc,%esp
   11b78:	6a 20                	push   $0x20
   11b7a:	e8 b7 fd ff ff       	call   11936 <idt_enable>
   11b7f:	83 c4 10             	add    $0x10,%esp

}
   11b82:	90                   	nop
   11b83:	c9                   	leave  
   11b84:	c3                   	ret    

00011b85 <time_init>:

/**
 * @brief  初始化定时器
 * 
 */
void time_init(void) {
   11b85:	55                   	push   %ebp
   11b86:	89 e5                	mov    %esp,%ebp
   11b88:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   11b8b:	c7 05 c0 fb 02 00 00 	movl   $0x0,0x2fbc0
   11b92:	00 00 00 
    init_pit();
   11b95:	e8 89 ff ff ff       	call   11b23 <init_pit>
   11b9a:	90                   	nop
   11b9b:	c9                   	leave  
   11b9c:	c3                   	ret    

00011b9d <first_main>:
 */

#include "tools/log.h"
#include "core/task.h"

int first_main(void) {
   11b9d:	55                   	push   %ebp
   11b9e:	89 e5                	mov    %esp,%ebp
   11ba0:	83 ec 08             	sub    $0x8,%esp
    for (;;) {
        log_printf("first task.");
   11ba3:	83 ec 0c             	sub    $0xc,%esp
   11ba6:	68 ad 37 01 00       	push   $0x137ad
   11bab:	e8 56 15 00 00       	call   13106 <log_printf>
   11bb0:	83 c4 10             	add    $0x10,%esp
        sys_sleep(1000);
   11bb3:	83 ec 0c             	sub    $0xc,%esp
   11bb6:	68 e8 03 00 00       	push   $0x3e8
   11bbb:	e8 8e f4 ff ff       	call   1104e <sys_sleep>
   11bc0:	83 c4 10             	add    $0x10,%esp
        log_printf("first task.");
   11bc3:	eb de                	jmp    11ba3 <first_main+0x6>

00011bc5 <first_task_entry>:
    .extern first_main

//第一个任务进程入口函数
first_task_entry:
    //操作系统将为该进程分配栈空间和代码段，即ss和cs寄存器，这里直接用ss寄存器初始化其余段寄存器即可
	mov %ss, %ax
   11bc5:	66 8c d0             	mov    %ss,%ax
	mov %ax, %ds
   11bc8:	8e d8                	mov    %eax,%ds
	mov %ax, %es
   11bca:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   11bcc:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   11bce:	8e e8                	mov    %eax,%gs

    //因为cs寄存器已由操作系统分配，所以直接跳转即可
   11bd0:	e9 c8 ff ff ff       	jmp    11b9d <first_main>

00011bd5 <kernel_init>:

/**
 * @brief  对内核进行初始化操作
 * 
 */
void kernel_init(boot_info_t* boot_info) {
   11bd5:	55                   	push   %ebp
   11bd6:	89 e5                	mov    %esp,%ebp
   11bd8:	83 ec 08             	sub    $0x8,%esp
    //1.判断是否检测到可用内存
    ASSERT(boot_info->ram_region_count != 0);
   11bdb:	8b 45 08             	mov    0x8(%ebp),%eax
   11bde:	8b 40 50             	mov    0x50(%eax),%eax
   11be1:	85 c0                	test   %eax,%eax
   11be3:	75 19                	jne    11bfe <kernel_init+0x29>
   11be5:	68 bc 37 01 00       	push   $0x137bc
   11bea:	68 58 38 01 00       	push   $0x13858
   11bef:	6a 22                	push   $0x22
   11bf1:	68 e0 37 01 00       	push   $0x137e0
   11bf6:	e8 3c 08 00 00       	call   12437 <pannic>
   11bfb:	83 c4 10             	add    $0x10,%esp
    
    //2.初始化日志程序,便于后期调用
    log_init();
   11bfe:	e8 7b 14 00 00       	call   1307e <log_init>

    //3.初始化内存管理
    memory_init(boot_info);  
   11c03:	83 ec 0c             	sub    $0xc,%esp
   11c06:	ff 75 08             	push   0x8(%ebp)
   11c09:	e8 58 eb ff ff       	call   10766 <memory_init>
   11c0e:	83 c4 10             	add    $0x10,%esp

    //4.初始化并重新加载GDT表
    gdt_init();
   11c11:	e8 7f f5 ff ff       	call   11195 <gdt_init>

    //5.初始化并加载中断描述符表IDT
    idt_init();
   11c16:	e8 a8 fb ff ff       	call   117c3 <idt_init>

    //6.初始化定时器的中断处理
    time_init();
   11c1b:	e8 65 ff ff ff       	call   11b85 <time_init>

    //7.初始化任务管理器
    task_manager_init();
   11c20:	e8 fe ef ff ff       	call   10c23 <task_manager_init>
    //初始化完成后将在汇编里重新加载内核代码段与数据段的选择子，并为内核程序分配栈空间

}
   11c25:	90                   	nop
   11c26:	c9                   	leave  
   11c27:	c3                   	ret    

00011c28 <move_to_first_task>:

/**
 * @brief 跳转到第一个任务进程
 * 
 */
void move_to_first_task(void) {
   11c28:	55                   	push   %ebp
   11c29:	89 e5                	mov    %esp,%ebp
   11c2b:	83 ec 18             	sub    $0x18,%esp
    //1.获取当前任务
    task_t *curr = task_current();
   11c2e:	e8 96 f1 ff ff       	call   10dc9 <task_current>
   11c33:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT(curr != 0);
   11c36:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11c3a:	75 19                	jne    11c55 <move_to_first_task+0x2d>
   11c3c:	68 15 38 01 00       	push   $0x13815
   11c41:	68 64 38 01 00       	push   $0x13864
   11c46:	6a 42                	push   $0x42
   11c48:	68 e0 37 01 00       	push   $0x137e0
   11c4d:	e8 e5 07 00 00       	call   12437 <pannic>
   11c52:	83 c4 10             	add    $0x10,%esp

    //2.获取当前任务的tss结构
    tss_t *tss = &(curr->tss);
   11c55:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11c58:	83 c0 48             	add    $0x48,%eax
   11c5b:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //3.用内联汇编进行间接跳转,需要 jmp * %寄存器 (从寄存器中给出地址为间接跳转,直接从值跳转为直接跳转)
    __asm__ __volatile__(
        "jmp * %[ip]"::[ip]"r"(tss->eip)
   11c5e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11c61:	8b 40 20             	mov    0x20(%eax),%eax
    __asm__ __volatile__(
   11c64:	ff e0                	jmp    *%eax
    );
}
   11c66:	90                   	nop
   11c67:	c9                   	leave  
   11c68:	c3                   	ret    

00011c69 <init_main>:


void init_main(void) {
   11c69:	55                   	push   %ebp
   11c6a:	89 e5                	mov    %esp,%ebp
   11c6c:	83 ec 08             	sub    $0x8,%esp


    
    log_printf("Kernel is running......");
   11c6f:	83 ec 0c             	sub    $0xc,%esp
   11c72:	68 1f 38 01 00       	push   $0x1381f
   11c77:	e8 8a 14 00 00       	call   13106 <log_printf>
   11c7c:	83 c4 10             	add    $0x10,%esp
    log_printf("Name: %s, Version: %s", "KbOS", OS_VERSION);
   11c7f:	83 ec 04             	sub    $0x4,%esp
   11c82:	68 37 38 01 00       	push   $0x13837
   11c87:	68 3d 38 01 00       	push   $0x1383d
   11c8c:	68 42 38 01 00       	push   $0x13842
   11c91:	e8 70 14 00 00       	call   13106 <log_printf>
   11c96:	83 c4 10             	add    $0x10,%esp

    //当前任务作为任务管理器启用时的第一个任务
    task_first_init();
   11c99:	e8 00 f0 ff ff       	call   10c9e <task_first_init>

    //跳转到第一个任务进程去运行
    move_to_first_task();
   11c9e:	e8 85 ff ff ff       	call   11c28 <move_to_first_task>
   11ca3:	90                   	nop
   11ca4:	c9                   	leave  
   11ca5:	c3                   	ret    

00011ca6 <list_init>:
static inline void list_init(list_t *list) {
   11ca6:	55                   	push   %ebp
   11ca7:	89 e5                	mov    %esp,%ebp
   11ca9:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11cac:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11cb0:	75 19                	jne    11ccb <list_init+0x25>
   11cb2:	68 78 38 01 00       	push   $0x13878
   11cb7:	68 24 39 01 00       	push   $0x13924
   11cbc:	6a 31                	push   $0x31
   11cbe:	68 8c 38 01 00       	push   $0x1388c
   11cc3:	e8 6f 07 00 00       	call   12437 <pannic>
   11cc8:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   11ccb:	8b 45 08             	mov    0x8(%ebp),%eax
   11cce:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11cd5:	8b 45 08             	mov    0x8(%ebp),%eax
   11cd8:	8b 50 04             	mov    0x4(%eax),%edx
   11cdb:	8b 45 08             	mov    0x8(%ebp),%eax
   11cde:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   11ce0:	8b 45 08             	mov    0x8(%ebp),%eax
   11ce3:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   11cea:	90                   	nop
   11ceb:	c9                   	leave  
   11cec:	c3                   	ret    

00011ced <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   11ced:	55                   	push   %ebp
   11cee:	89 e5                	mov    %esp,%ebp
   11cf0:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11cf3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11cf7:	75 19                	jne    11d12 <list_is_empty+0x25>
   11cf9:	68 78 38 01 00       	push   $0x13878
   11cfe:	68 30 39 01 00       	push   $0x13930
   11d03:	6a 38                	push   $0x38
   11d05:	68 8c 38 01 00       	push   $0x1388c
   11d0a:	e8 28 07 00 00       	call   12437 <pannic>
   11d0f:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   11d12:	8b 45 08             	mov    0x8(%ebp),%eax
   11d15:	8b 40 08             	mov    0x8(%eax),%eax
   11d18:	85 c0                	test   %eax,%eax
   11d1a:	0f 94 c0             	sete   %al
   11d1d:	0f b6 c0             	movzbl %al,%eax
}
   11d20:	c9                   	leave  
   11d21:	c3                   	ret    

00011d22 <mutex_init>:
/**
 * @brief  初始化互斥锁
 *
 * @param mutex
 */
void mutex_init(mutex_t *mutex) {
   11d22:	55                   	push   %ebp
   11d23:	89 e5                	mov    %esp,%ebp
   11d25:	83 ec 08             	sub    $0x8,%esp
  ASSERT(mutex != (mutex_t *)0);
   11d28:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11d2c:	75 19                	jne    11d47 <mutex_init+0x25>
   11d2e:	68 ca 38 01 00       	push   $0x138ca
   11d33:	68 18 39 01 00       	push   $0x13918
   11d38:	6a 15                	push   $0x15
   11d3a:	68 e0 38 01 00       	push   $0x138e0
   11d3f:	e8 f3 06 00 00       	call   12437 <pannic>
   11d44:	83 c4 10             	add    $0x10,%esp

  mutex->locked_count = 0;
   11d47:	8b 45 08             	mov    0x8(%ebp),%eax
   11d4a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  mutex->owner = (task_t *)0;
   11d51:	8b 45 08             	mov    0x8(%ebp),%eax
   11d54:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  list_init(&mutex->wait_list);
   11d5a:	8b 45 08             	mov    0x8(%ebp),%eax
   11d5d:	83 c0 08             	add    $0x8,%eax
   11d60:	83 ec 0c             	sub    $0xc,%esp
   11d63:	50                   	push   %eax
   11d64:	e8 3d ff ff ff       	call   11ca6 <list_init>
   11d69:	83 c4 10             	add    $0x10,%esp
}
   11d6c:	90                   	nop
   11d6d:	c9                   	leave  
   11d6e:	c3                   	ret    

00011d6f <mutex_lock>:
/**
 * @brief  加锁
 *
 * @param mutex
 */
void mutex_lock(mutex_t *mutex) {
   11d6f:	55                   	push   %ebp
   11d70:	89 e5                	mov    %esp,%ebp
   11d72:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   11d75:	e8 37 fd ff ff       	call   11ab1 <idt_enter_protection>
   11d7a:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 1. 获取当前任务
  task_t *curr = task_current();
   11d7d:	e8 47 f0 ff ff       	call   10dc9 <task_current>
   11d82:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 2.判断该锁是否已被加锁
  if (mutex->locked_count == 0) {  
   11d85:	8b 45 08             	mov    0x8(%ebp),%eax
   11d88:	8b 40 04             	mov    0x4(%eax),%eax
   11d8b:	85 c0                	test   %eax,%eax
   11d8d:	75 19                	jne    11da8 <mutex_lock+0x39>
    //3.还未被加锁，则加锁并记录拥有该锁的任务
    mutex->locked_count++;
   11d8f:	8b 45 08             	mov    0x8(%ebp),%eax
   11d92:	8b 40 04             	mov    0x4(%eax),%eax
   11d95:	8d 50 01             	lea    0x1(%eax),%edx
   11d98:	8b 45 08             	mov    0x8(%ebp),%eax
   11d9b:	89 50 04             	mov    %edx,0x4(%eax)
    mutex->owner = curr;
   11d9e:	8b 45 08             	mov    0x8(%ebp),%eax
   11da1:	8b 55 f0             	mov    -0x10(%ebp),%edx
   11da4:	89 10                	mov    %edx,(%eax)
   11da6:	eb 47                	jmp    11def <mutex_lock+0x80>
  } else if (mutex->owner == curr) {
   11da8:	8b 45 08             	mov    0x8(%ebp),%eax
   11dab:	8b 00                	mov    (%eax),%eax
   11dad:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11db0:	75 11                	jne    11dc3 <mutex_lock+0x54>
    //4.已被加锁，但当前加锁请求的任务为当前锁的拥有者，直接再加锁即可
    mutex->locked_count++;
   11db2:	8b 45 08             	mov    0x8(%ebp),%eax
   11db5:	8b 40 04             	mov    0x4(%eax),%eax
   11db8:	8d 50 01             	lea    0x1(%eax),%edx
   11dbb:	8b 45 08             	mov    0x8(%ebp),%eax
   11dbe:	89 50 04             	mov    %edx,0x4(%eax)
   11dc1:	eb 2c                	jmp    11def <mutex_lock+0x80>
  } else {  
    //5.已被加锁，且当前任务不是锁的拥有者，则当前任务进入锁的等待队列，被阻塞住
    task_set_unready(curr);
   11dc3:	83 ec 0c             	sub    $0xc,%esp
   11dc6:	ff 75 f0             	push   -0x10(%ebp)
   11dc9:	e8 82 ef ff ff       	call   10d50 <task_set_unready>
   11dce:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&mutex->wait_list, &curr->wait_node);
   11dd1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11dd4:	8d 50 40             	lea    0x40(%eax),%edx
   11dd7:	8b 45 08             	mov    0x8(%ebp),%eax
   11dda:	83 c0 08             	add    $0x8,%eax
   11ddd:	83 ec 08             	sub    $0x8,%esp
   11de0:	52                   	push   %edx
   11de1:	50                   	push   %eax
   11de2:	e8 9b 0f 00 00       	call   12d82 <list_insert_last>
   11de7:	83 c4 10             	add    $0x10,%esp
    task_switch();
   11dea:	e8 e4 ef ff ff       	call   10dd3 <task_switch>
  }

  idt_leave_protection(state);  // TODO:解锁
   11def:	83 ec 0c             	sub    $0xc,%esp
   11df2:	ff 75 f4             	push   -0xc(%ebp)
   11df5:	e8 cf fc ff ff       	call   11ac9 <idt_leave_protection>
   11dfa:	83 c4 10             	add    $0x10,%esp
}
   11dfd:	90                   	nop
   11dfe:	c9                   	leave  
   11dff:	c3                   	ret    

00011e00 <mutex_unlock>:
/**
 * @brief  解锁
 *
 * @param mutex
 */
void mutex_unlock(mutex_t *mutex) {
   11e00:	55                   	push   %ebp
   11e01:	89 e5                	mov    %esp,%ebp
   11e03:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   11e06:	e8 a6 fc ff ff       	call   11ab1 <idt_enter_protection>
   11e0b:	89 45 f4             	mov    %eax,-0xc(%ebp)

  task_t *curr = task_current();
   11e0e:	e8 b6 ef ff ff       	call   10dc9 <task_current>
   11e13:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 1.判断当前任务是否是锁的拥有者
  if (mutex->owner == curr) {
   11e16:	8b 45 08             	mov    0x8(%ebp),%eax
   11e19:	8b 00                	mov    (%eax),%eax
   11e1b:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11e1e:	0f 85 83 00 00 00    	jne    11ea7 <mutex_unlock+0xa7>
    //2.当前任务是锁的拥有者,对锁进行一次解锁，并判断是否已完全解锁
    if (--mutex->locked_count == 0) {
   11e24:	8b 45 08             	mov    0x8(%ebp),%eax
   11e27:	8b 40 04             	mov    0x4(%eax),%eax
   11e2a:	8d 50 ff             	lea    -0x1(%eax),%edx
   11e2d:	8b 45 08             	mov    0x8(%ebp),%eax
   11e30:	89 50 04             	mov    %edx,0x4(%eax)
   11e33:	8b 45 08             	mov    0x8(%ebp),%eax
   11e36:	8b 40 04             	mov    0x4(%eax),%eax
   11e39:	85 c0                	test   %eax,%eax
   11e3b:	75 6a                	jne    11ea7 <mutex_unlock+0xa7>
      //3.锁已被完全解锁,将锁的所有者置空
      mutex->owner = (task_t*)0;
   11e3d:	8b 45 08             	mov    0x8(%ebp),%eax
   11e40:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      //4.判断当前等待队列是否为空
      if (!list_is_empty(&mutex->wait_list)) { 
   11e46:	8b 45 08             	mov    0x8(%ebp),%eax
   11e49:	83 c0 08             	add    $0x8,%eax
   11e4c:	83 ec 0c             	sub    $0xc,%esp
   11e4f:	50                   	push   %eax
   11e50:	e8 98 fe ff ff       	call   11ced <list_is_empty>
   11e55:	83 c4 10             	add    $0x10,%esp
   11e58:	85 c0                	test   %eax,%eax
   11e5a:	75 4b                	jne    11ea7 <mutex_unlock+0xa7>
        //5.当前等待队列不为空,对锁进行加锁，并交给等待队列的第一个任务
        list_node_t *node = list_remove_first(&mutex->wait_list);
   11e5c:	8b 45 08             	mov    0x8(%ebp),%eax
   11e5f:	83 c0 08             	add    $0x8,%eax
   11e62:	83 ec 0c             	sub    $0xc,%esp
   11e65:	50                   	push   %eax
   11e66:	e8 a6 0f 00 00       	call   12e11 <list_remove_first>
   11e6b:	83 c4 10             	add    $0x10,%esp
   11e6e:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t *task_wait = list_node_parent(node, task_t, wait_node);
   11e71:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11e75:	74 08                	je     11e7f <mutex_unlock+0x7f>
   11e77:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11e7a:	83 e8 40             	sub    $0x40,%eax
   11e7d:	eb 05                	jmp    11e84 <mutex_unlock+0x84>
   11e7f:	b8 00 00 00 00       	mov    $0x0,%eax
   11e84:	89 45 e8             	mov    %eax,-0x18(%ebp)
        mutex->locked_count = 1;
   11e87:	8b 45 08             	mov    0x8(%ebp),%eax
   11e8a:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        mutex->owner = task_wait;
   11e91:	8b 45 08             	mov    0x8(%ebp),%eax
   11e94:	8b 55 e8             	mov    -0x18(%ebp),%edx
   11e97:	89 10                	mov    %edx,(%eax)
        //6.让该任务进入就绪队列
        task_set_ready(task_wait);
   11e99:	83 ec 0c             	sub    $0xc,%esp
   11e9c:	ff 75 e8             	push   -0x18(%ebp)
   11e9f:	e8 61 ee ff ff       	call   10d05 <task_set_ready>
   11ea4:	83 c4 10             	add    $0x10,%esp
      }
    }
  }

  idt_leave_protection(state);  // TODO:解锁
   11ea7:	83 ec 0c             	sub    $0xc,%esp
   11eaa:	ff 75 f4             	push   -0xc(%ebp)
   11ead:	e8 17 fc ff ff       	call   11ac9 <idt_leave_protection>
   11eb2:	83 c4 10             	add    $0x10,%esp
}
   11eb5:	90                   	nop
   11eb6:	c9                   	leave  
   11eb7:	c3                   	ret    

00011eb8 <list_init>:
static inline void list_init(list_t *list) {
   11eb8:	55                   	push   %ebp
   11eb9:	89 e5                	mov    %esp,%ebp
   11ebb:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11ebe:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11ec2:	75 19                	jne    11edd <list_init+0x25>
   11ec4:	68 40 39 01 00       	push   $0x13940
   11ec9:	68 e4 39 01 00       	push   $0x139e4
   11ece:	6a 31                	push   $0x31
   11ed0:	68 54 39 01 00       	push   $0x13954
   11ed5:	e8 5d 05 00 00       	call   12437 <pannic>
   11eda:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   11edd:	8b 45 08             	mov    0x8(%ebp),%eax
   11ee0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11ee7:	8b 45 08             	mov    0x8(%ebp),%eax
   11eea:	8b 50 04             	mov    0x4(%eax),%edx
   11eed:	8b 45 08             	mov    0x8(%ebp),%eax
   11ef0:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   11ef2:	8b 45 08             	mov    0x8(%ebp),%eax
   11ef5:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   11efc:	90                   	nop
   11efd:	c9                   	leave  
   11efe:	c3                   	ret    

00011eff <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   11eff:	55                   	push   %ebp
   11f00:	89 e5                	mov    %esp,%ebp
   11f02:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11f05:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11f09:	75 19                	jne    11f24 <list_is_empty+0x25>
   11f0b:	68 40 39 01 00       	push   $0x13940
   11f10:	68 f0 39 01 00       	push   $0x139f0
   11f15:	6a 38                	push   $0x38
   11f17:	68 54 39 01 00       	push   $0x13954
   11f1c:	e8 16 05 00 00       	call   12437 <pannic>
   11f21:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   11f24:	8b 45 08             	mov    0x8(%ebp),%eax
   11f27:	8b 40 08             	mov    0x8(%eax),%eax
   11f2a:	85 c0                	test   %eax,%eax
   11f2c:	0f 94 c0             	sete   %al
   11f2f:	0f b6 c0             	movzbl %al,%eax
}
   11f32:	c9                   	leave  
   11f33:	c3                   	ret    

00011f34 <sem_init>:
 * @brief  初始化信号量对象
 * 
 * @param sem 信号量对象
 * @param init_count 初始化信号量数量 
 */
void sem_init(sem_t *sem, int init_count) {
   11f34:	55                   	push   %ebp
   11f35:	89 e5                	mov    %esp,%ebp
   11f37:	83 ec 08             	sub    $0x8,%esp
    ASSERT(sem != (sem_t*)0);
   11f3a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11f3e:	75 19                	jne    11f59 <sem_init+0x25>
   11f40:	68 92 39 01 00       	push   $0x13992
   11f45:	68 d8 39 01 00       	push   $0x139d8
   11f4a:	6a 18                	push   $0x18
   11f4c:	68 a4 39 01 00       	push   $0x139a4
   11f51:	e8 e1 04 00 00       	call   12437 <pannic>
   11f56:	83 c4 10             	add    $0x10,%esp
    sem->count = 0;
   11f59:	8b 45 08             	mov    0x8(%ebp),%eax
   11f5c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list_init(&sem->wait_list);
   11f62:	8b 45 08             	mov    0x8(%ebp),%eax
   11f65:	83 c0 04             	add    $0x4,%eax
   11f68:	83 ec 0c             	sub    $0xc,%esp
   11f6b:	50                   	push   %eax
   11f6c:	e8 47 ff ff ff       	call   11eb8 <list_init>
   11f71:	83 c4 10             	add    $0x10,%esp
}
   11f74:	90                   	nop
   11f75:	c9                   	leave  
   11f76:	c3                   	ret    

00011f77 <sem_wait>:
 *         信号量相当于入场券，获取信号量之后才有资格访问信号量保护的资源
 * 
 * @param sem 
 * @param init_count 
 */
void sem_wait(sem_t *sem) {
   11f77:	55                   	push   %ebp
   11f78:	89 e5                	mov    %esp,%ebp
   11f7a:	83 ec 18             	sub    $0x18,%esp
    
    idt_state_t state = idt_enter_protection();//TODO:加锁
   11f7d:	e8 2f fb ff ff       	call   11ab1 <idt_enter_protection>
   11f82:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //1.判断信号量是否还有剩余
    if(sem->count > 0) {//有剩余，直接使用，任务获取信号量继续执行
   11f85:	8b 45 08             	mov    0x8(%ebp),%eax
   11f88:	8b 00                	mov    (%eax),%eax
   11f8a:	85 c0                	test   %eax,%eax
   11f8c:	7e 0f                	jle    11f9d <sem_wait+0x26>
        --sem->count;   
   11f8e:	8b 45 08             	mov    0x8(%ebp),%eax
   11f91:	8b 00                	mov    (%eax),%eax
   11f93:	8d 50 ff             	lea    -0x1(%eax),%edx
   11f96:	8b 45 08             	mov    0x8(%ebp),%eax
   11f99:	89 10                	mov    %edx,(%eax)
   11f9b:	eb 34                	jmp    11fd1 <sem_wait+0x5a>
    } else {//没有剩余，任务进入延时队列等待信号量
        task_t *curr = task_current();
   11f9d:	e8 27 ee ff ff       	call   10dc9 <task_current>
   11fa2:	89 45 f0             	mov    %eax,-0x10(%ebp)
        //2.将当前任务从就绪队列中取下
        task_set_unready(curr); 
   11fa5:	83 ec 0c             	sub    $0xc,%esp
   11fa8:	ff 75 f0             	push   -0x10(%ebp)
   11fab:	e8 a0 ed ff ff       	call   10d50 <task_set_unready>
   11fb0:	83 c4 10             	add    $0x10,%esp
        //3.将当前任务加入到信号量等待队列
        list_insert_last(&sem->wait_list, &curr->wait_node); 
   11fb3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11fb6:	8d 50 40             	lea    0x40(%eax),%edx
   11fb9:	8b 45 08             	mov    0x8(%ebp),%eax
   11fbc:	83 c0 04             	add    $0x4,%eax
   11fbf:	83 ec 08             	sub    $0x8,%esp
   11fc2:	52                   	push   %edx
   11fc3:	50                   	push   %eax
   11fc4:	e8 b9 0d 00 00       	call   12d82 <list_insert_last>
   11fc9:	83 c4 10             	add    $0x10,%esp
        //4.切换任务
        task_switch();
   11fcc:	e8 02 ee ff ff       	call   10dd3 <task_switch>
    }

    idt_leave_protection(state);//TODO:解锁
   11fd1:	83 ec 0c             	sub    $0xc,%esp
   11fd4:	ff 75 f4             	push   -0xc(%ebp)
   11fd7:	e8 ed fa ff ff       	call   11ac9 <idt_leave_protection>
   11fdc:	83 c4 10             	add    $0x10,%esp
}
   11fdf:	90                   	nop
   11fe0:	c9                   	leave  
   11fe1:	c3                   	ret    

00011fe2 <sem_notify>:
 *        等待队列中若有任务则直接获取该信号量，继续执行即访问资源
 *         若没有任务，则信号量对象记录的信号量数量加1，预留给下一次获取
 * 
 * @param sem 
 */
void sem_notify(sem_t *sem) {
   11fe2:	55                   	push   %ebp
   11fe3:	89 e5                	mov    %esp,%ebp
   11fe5:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   11fe8:	e8 c4 fa ff ff       	call   11ab1 <idt_enter_protection>
   11fed:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if (!list_is_empty(&sem->wait_list)) {
   11ff0:	8b 45 08             	mov    0x8(%ebp),%eax
   11ff3:	83 c0 04             	add    $0x4,%eax
   11ff6:	83 ec 0c             	sub    $0xc,%esp
   11ff9:	50                   	push   %eax
   11ffa:	e8 00 ff ff ff       	call   11eff <list_is_empty>
   11fff:	83 c4 10             	add    $0x10,%esp
   12002:	85 c0                	test   %eax,%eax
   12004:	75 3b                	jne    12041 <sem_notify+0x5f>
        list_node_t *node = list_remove_first(&sem->wait_list);
   12006:	8b 45 08             	mov    0x8(%ebp),%eax
   12009:	83 c0 04             	add    $0x4,%eax
   1200c:	83 ec 0c             	sub    $0xc,%esp
   1200f:	50                   	push   %eax
   12010:	e8 fc 0d 00 00       	call   12e11 <list_remove_first>
   12015:	83 c4 10             	add    $0x10,%esp
   12018:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t *task = list_node_parent(node, task_t, wait_node);
   1201b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1201f:	74 08                	je     12029 <sem_notify+0x47>
   12021:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12024:	83 e8 40             	sub    $0x40,%eax
   12027:	eb 05                	jmp    1202e <sem_notify+0x4c>
   12029:	b8 00 00 00 00       	mov    $0x0,%eax
   1202e:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   12031:	83 ec 0c             	sub    $0xc,%esp
   12034:	ff 75 ec             	push   -0x14(%ebp)
   12037:	e8 c9 ec ff ff       	call   10d05 <task_set_ready>
   1203c:	83 c4 10             	add    $0x10,%esp
   1203f:	eb 0d                	jmp    1204e <sem_notify+0x6c>
    } else {
        sem->count++;
   12041:	8b 45 08             	mov    0x8(%ebp),%eax
   12044:	8b 00                	mov    (%eax),%eax
   12046:	8d 50 01             	lea    0x1(%eax),%edx
   12049:	8b 45 08             	mov    0x8(%ebp),%eax
   1204c:	89 10                	mov    %edx,(%eax)
    }

    idt_leave_protection(state);//TODO:解锁
   1204e:	83 ec 0c             	sub    $0xc,%esp
   12051:	ff 75 f4             	push   -0xc(%ebp)
   12054:	e8 70 fa ff ff       	call   11ac9 <idt_leave_protection>
   12059:	83 c4 10             	add    $0x10,%esp

}
   1205c:	90                   	nop
   1205d:	c9                   	leave  
   1205e:	c3                   	ret    

0001205f <sem_count>:

int sem_count(sem_t *sem) {
   1205f:	55                   	push   %ebp
   12060:	89 e5                	mov    %esp,%ebp
   12062:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   12065:	e8 47 fa ff ff       	call   11ab1 <idt_enter_protection>
   1206a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   1206d:	8b 45 08             	mov    0x8(%ebp),%eax
   12070:	8b 00                	mov    (%eax),%eax
   12072:	89 45 f0             	mov    %eax,-0x10(%ebp)
    idt_leave_protection(state);//TODO:解锁
   12075:	83 ec 0c             	sub    $0xc,%esp
   12078:	ff 75 f4             	push   -0xc(%ebp)
   1207b:	e8 49 fa ff ff       	call   11ac9 <idt_leave_protection>
   12080:	83 c4 10             	add    $0x10,%esp

    return count;
   12083:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12086:	c9                   	leave  
   12087:	c3                   	ret    

00012088 <list_init>:
static inline void list_init(list_t *list) {
   12088:	55                   	push   %ebp
   12089:	89 e5                	mov    %esp,%ebp
   1208b:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1208e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12092:	75 19                	jne    120ad <list_init+0x25>
   12094:	68 00 3a 01 00       	push   $0x13a00
   12099:	68 04 3b 01 00       	push   $0x13b04
   1209e:	6a 31                	push   $0x31
   120a0:	68 14 3a 01 00       	push   $0x13a14
   120a5:	e8 8d 03 00 00       	call   12437 <pannic>
   120aa:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   120ad:	8b 45 08             	mov    0x8(%ebp),%eax
   120b0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   120b7:	8b 45 08             	mov    0x8(%ebp),%eax
   120ba:	8b 50 04             	mov    0x4(%eax),%edx
   120bd:	8b 45 08             	mov    0x8(%ebp),%eax
   120c0:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   120c2:	8b 45 08             	mov    0x8(%ebp),%eax
   120c5:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   120cc:	90                   	nop
   120cd:	c9                   	leave  
   120ce:	c3                   	ret    

000120cf <list_get_size>:
static inline int list_get_size(list_t *list) {
   120cf:	55                   	push   %ebp
   120d0:	89 e5                	mov    %esp,%ebp
   120d2:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   120d5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   120d9:	75 19                	jne    120f4 <list_get_size+0x25>
   120db:	68 00 3a 01 00       	push   $0x13a00
   120e0:	68 10 3b 01 00       	push   $0x13b10
   120e5:	6a 3e                	push   $0x3e
   120e7:	68 14 3a 01 00       	push   $0x13a14
   120ec:	e8 46 03 00 00       	call   12437 <pannic>
   120f1:	83 c4 10             	add    $0x10,%esp
    return list->size;
   120f4:	8b 45 08             	mov    0x8(%ebp),%eax
   120f7:	8b 40 08             	mov    0x8(%eax),%eax
}
   120fa:	c9                   	leave  
   120fb:	c3                   	ret    

000120fc <list_get_first>:
static inline list_node_t *list_get_first(list_t *list) {
   120fc:	55                   	push   %ebp
   120fd:	89 e5                	mov    %esp,%ebp
   120ff:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   12102:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12106:	75 19                	jne    12121 <list_get_first+0x25>
   12108:	68 00 3a 01 00       	push   $0x13a00
   1210d:	68 30 3b 01 00       	push   $0x13b30
   12112:	6a 44                	push   $0x44
   12114:	68 14 3a 01 00       	push   $0x13a14
   12119:	e8 19 03 00 00       	call   12437 <pannic>
   1211e:	83 c4 10             	add    $0x10,%esp
    return list->first;
   12121:	8b 45 08             	mov    0x8(%ebp),%eax
   12124:	8b 00                	mov    (%eax),%eax
}
   12126:	c9                   	leave  
   12127:	c3                   	ret    

00012128 <list_get_last>:

static inline list_node_t *list_get_last(list_t *list) {
   12128:	55                   	push   %ebp
   12129:	89 e5                	mov    %esp,%ebp
   1212b:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1212e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12132:	75 19                	jne    1214d <list_get_last+0x25>
   12134:	68 00 3a 01 00       	push   $0x13a00
   12139:	68 20 3b 01 00       	push   $0x13b20
   1213e:	6a 4a                	push   $0x4a
   12140:	68 14 3a 01 00       	push   $0x13a14
   12145:	e8 ed 02 00 00       	call   12437 <pannic>
   1214a:	83 c4 10             	add    $0x10,%esp

    return list->last;
   1214d:	8b 45 08             	mov    0x8(%ebp),%eax
   12150:	8b 40 04             	mov    0x4(%eax),%eax
}
   12153:	c9                   	leave  
   12154:	c3                   	ret    

00012155 <list_test>:

#include "tools/list.h"
#include "tools/log.h"
#include "common/types.h"

void list_test(void) {
   12155:	55                   	push   %ebp
   12156:	89 e5                	mov    %esp,%ebp
   12158:	56                   	push   %esi
   12159:	53                   	push   %ebx
   1215a:	83 ec 70             	sub    $0x70,%esp
    list_t list;
    list_node_t nodes[5];

    list_init(&list);
   1215d:	83 ec 0c             	sub    $0xc,%esp
   12160:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12163:	50                   	push   %eax
   12164:	e8 1f ff ff ff       	call   12088 <list_init>
   12169:	83 c4 10             	add    $0x10,%esp
    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   1216c:	83 ec 0c             	sub    $0xc,%esp
   1216f:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12172:	50                   	push   %eax
   12173:	e8 57 ff ff ff       	call   120cf <list_get_size>
   12178:	83 c4 10             	add    $0x10,%esp
   1217b:	89 c6                	mov    %eax,%esi
   1217d:	83 ec 0c             	sub    $0xc,%esp
   12180:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12183:	50                   	push   %eax
   12184:	e8 9f ff ff ff       	call   12128 <list_get_last>
   12189:	83 c4 10             	add    $0x10,%esp
   1218c:	89 c3                	mov    %eax,%ebx
   1218e:	83 ec 0c             	sub    $0xc,%esp
   12191:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12194:	50                   	push   %eax
   12195:	e8 62 ff ff ff       	call   120fc <list_get_first>
   1219a:	83 c4 10             	add    $0x10,%esp
   1219d:	56                   	push   %esi
   1219e:	53                   	push   %ebx
   1219f:	50                   	push   %eax
   121a0:	68 54 3a 01 00       	push   $0x13a54
   121a5:	e8 5c 0f 00 00       	call   13106 <log_printf>
   121aa:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_insert_first
    for (int i = 0; i < 5; ++i) {
   121ad:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   121b4:	eb 3f                	jmp    121f5 <list_test+0xa0>
        list_node_t *node = nodes + i;
   121b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   121b9:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   121c0:	8d 45 9c             	lea    -0x64(%ebp),%eax
   121c3:	01 d0                	add    %edx,%eax
   121c5:	89 45 d0             	mov    %eax,-0x30(%ebp)

        log_printf("insert first to list: %d, 0x%x", i, (uint32_t)node);
   121c8:	8b 45 d0             	mov    -0x30(%ebp),%eax
   121cb:	83 ec 04             	sub    $0x4,%esp
   121ce:	50                   	push   %eax
   121cf:	ff 75 f4             	push   -0xc(%ebp)
   121d2:	68 7c 3a 01 00       	push   $0x13a7c
   121d7:	e8 2a 0f 00 00       	call   13106 <log_printf>
   121dc:	83 c4 10             	add    $0x10,%esp
        list_insert_first(&list, node);
   121df:	83 ec 08             	sub    $0x8,%esp
   121e2:	ff 75 d0             	push   -0x30(%ebp)
   121e5:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   121e8:	50                   	push   %eax
   121e9:	e8 09 0b 00 00       	call   12cf7 <list_insert_first>
   121ee:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   121f1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   121f5:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   121f9:	7e bb                	jle    121b6 <list_test+0x61>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   121fb:	83 ec 0c             	sub    $0xc,%esp
   121fe:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12201:	50                   	push   %eax
   12202:	e8 c8 fe ff ff       	call   120cf <list_get_size>
   12207:	83 c4 10             	add    $0x10,%esp
   1220a:	89 c6                	mov    %eax,%esi
   1220c:	83 ec 0c             	sub    $0xc,%esp
   1220f:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12212:	50                   	push   %eax
   12213:	e8 10 ff ff ff       	call   12128 <list_get_last>
   12218:	83 c4 10             	add    $0x10,%esp
   1221b:	89 c3                	mov    %eax,%ebx
   1221d:	83 ec 0c             	sub    $0xc,%esp
   12220:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12223:	50                   	push   %eax
   12224:	e8 d3 fe ff ff       	call   120fc <list_get_first>
   12229:	83 c4 10             	add    $0x10,%esp
   1222c:	56                   	push   %esi
   1222d:	53                   	push   %ebx
   1222e:	50                   	push   %eax
   1222f:	68 54 3a 01 00       	push   $0x13a54
   12234:	e8 cd 0e 00 00       	call   13106 <log_printf>
   12239:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

   
    //测试list_remove_first
    for (int i = 0; i < 5; ++i) {
   1223c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   12243:	eb 2d                	jmp    12272 <list_test+0x11d>
        list_node_t *node = list_remove_first(&list);
   12245:	83 ec 0c             	sub    $0xc,%esp
   12248:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1224b:	50                   	push   %eax
   1224c:	e8 c0 0b 00 00       	call   12e11 <list_remove_first>
   12251:	83 c4 10             	add    $0x10,%esp
   12254:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        log_printf("remove first: %d, 0x%x", i, (uint32_t)node);
   12257:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   1225a:	83 ec 04             	sub    $0x4,%esp
   1225d:	50                   	push   %eax
   1225e:	ff 75 f0             	push   -0x10(%ebp)
   12261:	68 9b 3a 01 00       	push   $0x13a9b
   12266:	e8 9b 0e 00 00       	call   13106 <log_printf>
   1226b:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   1226e:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   12272:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   12276:	7e cd                	jle    12245 <list_test+0xf0>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   12278:	83 ec 0c             	sub    $0xc,%esp
   1227b:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1227e:	50                   	push   %eax
   1227f:	e8 4b fe ff ff       	call   120cf <list_get_size>
   12284:	83 c4 10             	add    $0x10,%esp
   12287:	89 c6                	mov    %eax,%esi
   12289:	83 ec 0c             	sub    $0xc,%esp
   1228c:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1228f:	50                   	push   %eax
   12290:	e8 93 fe ff ff       	call   12128 <list_get_last>
   12295:	83 c4 10             	add    $0x10,%esp
   12298:	89 c3                	mov    %eax,%ebx
   1229a:	83 ec 0c             	sub    $0xc,%esp
   1229d:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   122a0:	50                   	push   %eax
   122a1:	e8 56 fe ff ff       	call   120fc <list_get_first>
   122a6:	83 c4 10             	add    $0x10,%esp
   122a9:	56                   	push   %esi
   122aa:	53                   	push   %ebx
   122ab:	50                   	push   %eax
   122ac:	68 54 3a 01 00       	push   $0x13a54
   122b1:	e8 50 0e 00 00       	call   13106 <log_printf>
   122b6:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    

    //测试list_insert_last
    for (int i = 0; i < 5; ++i) {
   122b9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   122c0:	eb 3f                	jmp    12301 <list_test+0x1ac>
        list_node_t *node = nodes + i;
   122c2:	8b 45 ec             	mov    -0x14(%ebp),%eax
   122c5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   122cc:	8d 45 9c             	lea    -0x64(%ebp),%eax
   122cf:	01 d0                	add    %edx,%eax
   122d1:	89 45 d8             	mov    %eax,-0x28(%ebp)

        log_printf("insert last to list: %d, 0x%x", i, (uint32_t)node);
   122d4:	8b 45 d8             	mov    -0x28(%ebp),%eax
   122d7:	83 ec 04             	sub    $0x4,%esp
   122da:	50                   	push   %eax
   122db:	ff 75 ec             	push   -0x14(%ebp)
   122de:	68 b2 3a 01 00       	push   $0x13ab2
   122e3:	e8 1e 0e 00 00       	call   13106 <log_printf>
   122e8:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&list, node);
   122eb:	83 ec 08             	sub    $0x8,%esp
   122ee:	ff 75 d8             	push   -0x28(%ebp)
   122f1:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   122f4:	50                   	push   %eax
   122f5:	e8 88 0a 00 00       	call   12d82 <list_insert_last>
   122fa:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   122fd:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   12301:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   12305:	7e bb                	jle    122c2 <list_test+0x16d>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   12307:	83 ec 0c             	sub    $0xc,%esp
   1230a:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1230d:	50                   	push   %eax
   1230e:	e8 bc fd ff ff       	call   120cf <list_get_size>
   12313:	83 c4 10             	add    $0x10,%esp
   12316:	89 c6                	mov    %eax,%esi
   12318:	83 ec 0c             	sub    $0xc,%esp
   1231b:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1231e:	50                   	push   %eax
   1231f:	e8 04 fe ff ff       	call   12128 <list_get_last>
   12324:	83 c4 10             	add    $0x10,%esp
   12327:	89 c3                	mov    %eax,%ebx
   12329:	83 ec 0c             	sub    $0xc,%esp
   1232c:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1232f:	50                   	push   %eax
   12330:	e8 c7 fd ff ff       	call   120fc <list_get_first>
   12335:	83 c4 10             	add    $0x10,%esp
   12338:	56                   	push   %esi
   12339:	53                   	push   %ebx
   1233a:	50                   	push   %eax
   1233b:	68 54 3a 01 00       	push   $0x13a54
   12340:	e8 c1 0d 00 00       	call   13106 <log_printf>
   12345:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_remove_last
    for (int i = 0; i < 5; ++i) {
   12348:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   1234f:	eb 2d                	jmp    1237e <list_test+0x229>
        list_node_t *node = list_remove_last(&list);
   12351:	83 ec 0c             	sub    $0xc,%esp
   12354:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12357:	50                   	push   %eax
   12358:	e8 65 0b 00 00       	call   12ec2 <list_remove_last>
   1235d:	83 c4 10             	add    $0x10,%esp
   12360:	89 45 dc             	mov    %eax,-0x24(%ebp)
        log_printf("remove last: %d, 0x%x", i, (uint32_t)node);
   12363:	8b 45 dc             	mov    -0x24(%ebp),%eax
   12366:	83 ec 04             	sub    $0x4,%esp
   12369:	50                   	push   %eax
   1236a:	ff 75 e8             	push   -0x18(%ebp)
   1236d:	68 d0 3a 01 00       	push   $0x13ad0
   12372:	e8 8f 0d 00 00       	call   13106 <log_printf>
   12377:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   1237a:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   1237e:	83 7d e8 04          	cmpl   $0x4,-0x18(%ebp)
   12382:	7e cd                	jle    12351 <list_test+0x1fc>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   12384:	83 ec 0c             	sub    $0xc,%esp
   12387:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1238a:	50                   	push   %eax
   1238b:	e8 3f fd ff ff       	call   120cf <list_get_size>
   12390:	83 c4 10             	add    $0x10,%esp
   12393:	89 c6                	mov    %eax,%esi
   12395:	83 ec 0c             	sub    $0xc,%esp
   12398:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1239b:	50                   	push   %eax
   1239c:	e8 87 fd ff ff       	call   12128 <list_get_last>
   123a1:	83 c4 10             	add    $0x10,%esp
   123a4:	89 c3                	mov    %eax,%ebx
   123a6:	83 ec 0c             	sub    $0xc,%esp
   123a9:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   123ac:	50                   	push   %eax
   123ad:	e8 4a fd ff ff       	call   120fc <list_get_first>
   123b2:	83 c4 10             	add    $0x10,%esp
   123b5:	56                   	push   %esi
   123b6:	53                   	push   %ebx
   123b7:	50                   	push   %eax
   123b8:	68 54 3a 01 00       	push   $0x13a54
   123bd:	e8 44 0d 00 00       	call   13106 <log_printf>
   123c2:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    
    struct type_t {
        int i;
        list_node_t node;
    }v = {0x123456};
   123c5:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
   123cc:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
   123d3:	c7 45 98 00 00 00 00 	movl   $0x0,-0x68(%ebp)
   123da:	c7 45 90 56 34 12 00 	movl   $0x123456,-0x70(%ebp)

    list_node_t *v_node = &v.node;
   123e1:	8d 45 90             	lea    -0x70(%ebp),%eax
   123e4:	83 c0 04             	add    $0x4,%eax
   123e7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    struct type_t *p = list_node_parent(v_node, struct type_t, node);  
   123ea:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   123ee:	74 08                	je     123f8 <list_test+0x2a3>
   123f0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   123f3:	83 e8 04             	sub    $0x4,%eax
   123f6:	eb 05                	jmp    123fd <list_test+0x2a8>
   123f8:	b8 00 00 00 00       	mov    $0x0,%eax
   123fd:	89 45 e0             	mov    %eax,-0x20(%ebp)

    log_printf("v addr = 0x%x", (uint32_t)&v);
   12400:	8d 45 90             	lea    -0x70(%ebp),%eax
   12403:	83 ec 08             	sub    $0x8,%esp
   12406:	50                   	push   %eax
   12407:	68 e6 3a 01 00       	push   $0x13ae6
   1240c:	e8 f5 0c 00 00       	call   13106 <log_printf>
   12411:	83 c4 10             	add    $0x10,%esp
    log_printf("p addr = 0x%x", (uint32_t)p);  
   12414:	8b 45 e0             	mov    -0x20(%ebp),%eax
   12417:	83 ec 08             	sub    $0x8,%esp
   1241a:	50                   	push   %eax
   1241b:	68 f4 3a 01 00       	push   $0x13af4
   12420:	e8 e1 0c 00 00       	call   13106 <log_printf>
   12425:	83 c4 10             	add    $0x10,%esp

 }
   12428:	90                   	nop
   12429:	8d 65 f8             	lea    -0x8(%ebp),%esp
   1242c:	5b                   	pop    %ebx
   1242d:	5e                   	pop    %esi
   1242e:	5d                   	pop    %ebp
   1242f:	c3                   	ret    

00012430 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   12430:	55                   	push   %ebp
   12431:	89 e5                	mov    %esp,%ebp
   12433:	f4                   	hlt    
   12434:	90                   	nop
   12435:	5d                   	pop    %ebp
   12436:	c3                   	ret    

00012437 <pannic>:
 * @param file 异常所在文件绝对路径
 * @param line 异常所在行号
 * @param func 异常所在函数名 
 * @param reason 异常的原因
 */
void pannic(const char *file, int line, const char *func, const char *reason) {
   12437:	55                   	push   %ebp
   12438:	89 e5                	mov    %esp,%ebp
   1243a:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert faild! %s", reason);
   1243d:	83 ec 08             	sub    $0x8,%esp
   12440:	ff 75 14             	push   0x14(%ebp)
   12443:	68 3f 3b 01 00       	push   $0x13b3f
   12448:	e8 b9 0c 00 00       	call   13106 <log_printf>
   1244d:	83 c4 10             	add    $0x10,%esp
    log_printf("file:\t%s\nline:\t%d\nfunc:\t%s", file, line, func);
   12450:	ff 75 10             	push   0x10(%ebp)
   12453:	ff 75 0c             	push   0xc(%ebp)
   12456:	ff 75 08             	push   0x8(%ebp)
   12459:	68 50 3b 01 00       	push   $0x13b50
   1245e:	e8 a3 0c 00 00       	call   13106 <log_printf>
   12463:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   12466:	e8 c5 ff ff ff       	call   12430 <hlt>
   1246b:	eb f9                	jmp    12466 <pannic+0x2f>

0001246d <bitmap_byte_count>:
 * @brief  向上取整获取位图数组中有多少字节
 * 
 * @param bit_count  位图数组拥有的bit位数
 * @return int 向上取整得到的字节数
 */
int bitmap_byte_count(int bit_count) {
   1246d:	55                   	push   %ebp
   1246e:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8;
   12470:	8b 45 08             	mov    0x8(%ebp),%eax
   12473:	83 c0 07             	add    $0x7,%eax
   12476:	8d 50 07             	lea    0x7(%eax),%edx
   12479:	85 c0                	test   %eax,%eax
   1247b:	0f 48 c2             	cmovs  %edx,%eax
   1247e:	c1 f8 03             	sar    $0x3,%eax
}
   12481:	5d                   	pop    %ebp
   12482:	c3                   	ret    

00012483 <bitmap_init>:
 * @param bitmap 需要初始化的位图
 * @param bits 位图所包含的位图数组的起始地址
 * @param count 页的数量
 * @param init_bit 将位图数组的每一位设置为init_bit
 */
void bitmap_init(bitmap_t *bitmap, uint8_t *bits, int count, int init_bit) {
   12483:	55                   	push   %ebp
   12484:	89 e5                	mov    %esp,%ebp
   12486:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   12489:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1248d:	75 19                	jne    124a8 <bitmap_init+0x25>
   1248f:	68 6c 3b 01 00       	push   $0x13b6c
   12494:	68 00 3c 01 00       	push   $0x13c00
   12499:	6a 24                	push   $0x24
   1249b:	68 84 3b 01 00       	push   $0x13b84
   124a0:	e8 92 ff ff ff       	call   12437 <pannic>
   124a5:	83 c4 10             	add    $0x10,%esp
    ASSERT(bits != (uint8_t*)0);
   124a8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   124ac:	75 19                	jne    124c7 <bitmap_init+0x44>
   124ae:	68 bc 3b 01 00       	push   $0x13bbc
   124b3:	68 00 3c 01 00       	push   $0x13c00
   124b8:	6a 25                	push   $0x25
   124ba:	68 84 3b 01 00       	push   $0x13b84
   124bf:	e8 73 ff ff ff       	call   12437 <pannic>
   124c4:	83 c4 10             	add    $0x10,%esp

    bitmap->bit_count = count;
   124c7:	8b 45 08             	mov    0x8(%ebp),%eax
   124ca:	8b 55 10             	mov    0x10(%ebp),%edx
   124cd:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   124cf:	8b 45 08             	mov    0x8(%ebp),%eax
   124d2:	8b 55 0c             	mov    0xc(%ebp),%edx
   124d5:	89 50 04             	mov    %edx,0x4(%eax)

    //计算该位图需要多少字节
    int bytes = bitmap_byte_count(bitmap->bit_count);
   124d8:	8b 45 08             	mov    0x8(%ebp),%eax
   124db:	8b 00                	mov    (%eax),%eax
   124dd:	83 ec 0c             	sub    $0xc,%esp
   124e0:	50                   	push   %eax
   124e1:	e8 87 ff ff ff       	call   1246d <bitmap_byte_count>
   124e6:	83 c4 10             	add    $0x10,%esp
   124e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    kernel_memset(bitmap->bits, init_bit ? 0xff : 0, bytes);
   124ec:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   124f0:	74 07                	je     124f9 <bitmap_init+0x76>
   124f2:	ba ff 00 00 00       	mov    $0xff,%edx
   124f7:	eb 05                	jmp    124fe <bitmap_init+0x7b>
   124f9:	ba 00 00 00 00       	mov    $0x0,%edx
   124fe:	8b 45 08             	mov    0x8(%ebp),%eax
   12501:	8b 40 04             	mov    0x4(%eax),%eax
   12504:	83 ec 04             	sub    $0x4,%esp
   12507:	ff 75 f4             	push   -0xc(%ebp)
   1250a:	52                   	push   %edx
   1250b:	50                   	push   %eax
   1250c:	e8 28 04 00 00       	call   12939 <kernel_memset>
   12511:	83 c4 10             	add    $0x10,%esp

}
   12514:	90                   	nop
   12515:	c9                   	leave  
   12516:	c3                   	ret    

00012517 <bitmap_get_bit>:
 * 
 * @param bitmap 
 * @param index 
 * @return uint8_t 
 */
uint8_t bitmap_get_bit(bitmap_t *bitmap, int index) {
   12517:	55                   	push   %ebp
   12518:	89 e5                	mov    %esp,%ebp
   1251a:	53                   	push   %ebx
   1251b:	83 ec 04             	sub    $0x4,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   1251e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12522:	75 19                	jne    1253d <bitmap_get_bit+0x26>
   12524:	68 6c 3b 01 00       	push   $0x13b6c
   12529:	68 0c 3c 01 00       	push   $0x13c0c
   1252e:	6a 39                	push   $0x39
   12530:	68 84 3b 01 00       	push   $0x13b84
   12535:	e8 fd fe ff ff       	call   12437 <pannic>
   1253a:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0);
   1253d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12541:	79 19                	jns    1255c <bitmap_get_bit+0x45>
   12543:	68 d0 3b 01 00       	push   $0x13bd0
   12548:	68 0c 3c 01 00       	push   $0x13c0c
   1254d:	6a 3a                	push   $0x3a
   1254f:	68 84 3b 01 00       	push   $0x13b84
   12554:	e8 de fe ff ff       	call   12437 <pannic>
   12559:	83 c4 10             	add    $0x10,%esp

    return (bitmap->bits[index / 8] & (1 << (index % 8)));
   1255c:	8b 45 08             	mov    0x8(%ebp),%eax
   1255f:	8b 48 04             	mov    0x4(%eax),%ecx
   12562:	8b 45 0c             	mov    0xc(%ebp),%eax
   12565:	8d 50 07             	lea    0x7(%eax),%edx
   12568:	85 c0                	test   %eax,%eax
   1256a:	0f 48 c2             	cmovs  %edx,%eax
   1256d:	c1 f8 03             	sar    $0x3,%eax
   12570:	01 c8                	add    %ecx,%eax
   12572:	0f b6 00             	movzbl (%eax),%eax
   12575:	89 c3                	mov    %eax,%ebx
   12577:	8b 45 0c             	mov    0xc(%ebp),%eax
   1257a:	83 e0 07             	and    $0x7,%eax
   1257d:	ba 01 00 00 00       	mov    $0x1,%edx
   12582:	89 c1                	mov    %eax,%ecx
   12584:	d3 e2                	shl    %cl,%edx
   12586:	89 d0                	mov    %edx,%eax
   12588:	21 d8                	and    %ebx,%eax
}
   1258a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1258d:	c9                   	leave  
   1258e:	c3                   	ret    

0001258f <bitmap_set_bit>:
 * @param bitmap 
 * @param index 
 * @param count 
 * @param bit 
 */
void bitmap_set_bit(bitmap_t *bitmap, int index, int count, int bit) {
   1258f:	55                   	push   %ebp
   12590:	89 e5                	mov    %esp,%ebp
   12592:	56                   	push   %esi
   12593:	53                   	push   %ebx
   12594:	83 ec 10             	sub    $0x10,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   12597:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1259b:	75 19                	jne    125b6 <bitmap_set_bit+0x27>
   1259d:	68 6c 3b 01 00       	push   $0x13b6c
   125a2:	68 1c 3c 01 00       	push   $0x13c1c
   125a7:	6a 48                	push   $0x48
   125a9:	68 84 3b 01 00       	push   $0x13b84
   125ae:	e8 84 fe ff ff       	call   12437 <pannic>
   125b3:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0 && count >= 0);
   125b6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   125ba:	78 06                	js     125c2 <bitmap_set_bit+0x33>
   125bc:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   125c0:	79 19                	jns    125db <bitmap_set_bit+0x4c>
   125c2:	68 db 3b 01 00       	push   $0x13bdb
   125c7:	68 1c 3c 01 00       	push   $0x13c1c
   125cc:	6a 49                	push   $0x49
   125ce:	68 84 3b 01 00       	push   $0x13b84
   125d3:	e8 5f fe ff ff       	call   12437 <pannic>
   125d8:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   125db:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   125e2:	e9 92 00 00 00       	jmp    12679 <bitmap_set_bit+0xea>
        if (bit) {
   125e7:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   125eb:	74 42                	je     1262f <bitmap_set_bit+0xa0>
            bitmap->bits[index / 8] |= (1 << (index % 8));
   125ed:	8b 45 08             	mov    0x8(%ebp),%eax
   125f0:	8b 48 04             	mov    0x4(%eax),%ecx
   125f3:	8b 45 0c             	mov    0xc(%ebp),%eax
   125f6:	8d 50 07             	lea    0x7(%eax),%edx
   125f9:	85 c0                	test   %eax,%eax
   125fb:	0f 48 c2             	cmovs  %edx,%eax
   125fe:	c1 f8 03             	sar    $0x3,%eax
   12601:	89 c2                	mov    %eax,%edx
   12603:	89 d0                	mov    %edx,%eax
   12605:	01 c8                	add    %ecx,%eax
   12607:	0f b6 00             	movzbl (%eax),%eax
   1260a:	89 c6                	mov    %eax,%esi
   1260c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1260f:	83 e0 07             	and    $0x7,%eax
   12612:	bb 01 00 00 00       	mov    $0x1,%ebx
   12617:	89 c1                	mov    %eax,%ecx
   12619:	d3 e3                	shl    %cl,%ebx
   1261b:	89 d8                	mov    %ebx,%eax
   1261d:	89 f1                	mov    %esi,%ecx
   1261f:	09 c1                	or     %eax,%ecx
   12621:	8b 45 08             	mov    0x8(%ebp),%eax
   12624:	8b 40 04             	mov    0x4(%eax),%eax
   12627:	01 d0                	add    %edx,%eax
   12629:	89 ca                	mov    %ecx,%edx
   1262b:	88 10                	mov    %dl,(%eax)
   1262d:	eb 42                	jmp    12671 <bitmap_set_bit+0xe2>
        } else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   1262f:	8b 45 08             	mov    0x8(%ebp),%eax
   12632:	8b 48 04             	mov    0x4(%eax),%ecx
   12635:	8b 45 0c             	mov    0xc(%ebp),%eax
   12638:	8d 50 07             	lea    0x7(%eax),%edx
   1263b:	85 c0                	test   %eax,%eax
   1263d:	0f 48 c2             	cmovs  %edx,%eax
   12640:	c1 f8 03             	sar    $0x3,%eax
   12643:	89 c2                	mov    %eax,%edx
   12645:	89 d0                	mov    %edx,%eax
   12647:	01 c8                	add    %ecx,%eax
   12649:	0f b6 00             	movzbl (%eax),%eax
   1264c:	89 c6                	mov    %eax,%esi
   1264e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12651:	83 e0 07             	and    $0x7,%eax
   12654:	bb 01 00 00 00       	mov    $0x1,%ebx
   12659:	89 c1                	mov    %eax,%ecx
   1265b:	d3 e3                	shl    %cl,%ebx
   1265d:	89 d8                	mov    %ebx,%eax
   1265f:	f7 d0                	not    %eax
   12661:	89 f1                	mov    %esi,%ecx
   12663:	21 c1                	and    %eax,%ecx
   12665:	8b 45 08             	mov    0x8(%ebp),%eax
   12668:	8b 40 04             	mov    0x4(%eax),%eax
   1266b:	01 d0                	add    %edx,%eax
   1266d:	89 ca                	mov    %ecx,%edx
   1266f:	88 10                	mov    %dl,(%eax)
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   12671:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12675:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   12679:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1267c:	3b 45 10             	cmp    0x10(%ebp),%eax
   1267f:	7d 0e                	jge    1268f <bitmap_set_bit+0x100>
   12681:	8b 45 08             	mov    0x8(%ebp),%eax
   12684:	8b 00                	mov    (%eax),%eax
   12686:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12689:	0f 8c 58 ff ff ff    	jl     125e7 <bitmap_set_bit+0x58>
        }
    }
}
   1268f:	90                   	nop
   12690:	8d 65 f8             	lea    -0x8(%ebp),%esp
   12693:	5b                   	pop    %ebx
   12694:	5e                   	pop    %esi
   12695:	5d                   	pop    %ebp
   12696:	c3                   	ret    

00012697 <bitmap_is_set>:
 * 
 * @param bitmap 
 * @param index 
 * @return int 
 */
int bitmap_is_set(bitmap_t *bitmap, int index) {
   12697:	55                   	push   %ebp
   12698:	89 e5                	mov    %esp,%ebp
   1269a:	83 ec 08             	sub    $0x8,%esp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   1269d:	83 ec 08             	sub    $0x8,%esp
   126a0:	ff 75 0c             	push   0xc(%ebp)
   126a3:	ff 75 08             	push   0x8(%ebp)
   126a6:	e8 6c fe ff ff       	call   12517 <bitmap_get_bit>
   126ab:	83 c4 10             	add    $0x10,%esp
   126ae:	84 c0                	test   %al,%al
   126b0:	0f 95 c0             	setne  %al
   126b3:	0f b6 c0             	movzbl %al,%eax
}
   126b6:	c9                   	leave  
   126b7:	c3                   	ret    

000126b8 <bitmap_alloc_nbits>:
 * @param bitmap 
 * @param bit 当某一位的值为bit时表示该位空闲，可供分配
 * @param count 
 * @return int 
 */
int bitmap_alloc_nbits(bitmap_t *bitmap, int bit, int count) {
   126b8:	55                   	push   %ebp
   126b9:	89 e5                	mov    %esp,%ebp
   126bb:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   126be:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   126c2:	75 19                	jne    126dd <bitmap_alloc_nbits+0x25>
   126c4:	68 6c 3b 01 00       	push   $0x13b6c
   126c9:	68 2c 3c 01 00       	push   $0x13c2c
   126ce:	6a 68                	push   $0x68
   126d0:	68 84 3b 01 00       	push   $0x13b84
   126d5:	e8 5d fd ff ff       	call   12437 <pannic>
   126da:	83 c4 10             	add    $0x10,%esp
    ASSERT(count >= 0);
   126dd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   126e1:	79 19                	jns    126fc <bitmap_alloc_nbits+0x44>
   126e3:	68 f4 3b 01 00       	push   $0x13bf4
   126e8:	68 2c 3c 01 00       	push   $0x13c2c
   126ed:	6a 69                	push   $0x69
   126ef:	68 84 3b 01 00       	push   $0x13b84
   126f4:	e8 3e fd ff ff       	call   12437 <pannic>
   126f9:	83 c4 10             	add    $0x10,%esp

    int search_index = 0;
   126fc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    int ok_index = -1;
   12703:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
    while (search_index < bitmap->bit_count) {
   1270a:	e9 8f 00 00 00       	jmp    1279e <bitmap_alloc_nbits+0xe6>
        //确定可分配空间的起始索引
        if (bitmap_get_bit(bitmap, search_index) != bit) {
   1270f:	83 ec 08             	sub    $0x8,%esp
   12712:	ff 75 f4             	push   -0xc(%ebp)
   12715:	ff 75 08             	push   0x8(%ebp)
   12718:	e8 fa fd ff ff       	call   12517 <bitmap_get_bit>
   1271d:	83 c4 10             	add    $0x10,%esp
   12720:	0f b6 c0             	movzbl %al,%eax
   12723:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12726:	74 06                	je     1272e <bitmap_alloc_nbits+0x76>
            search_index++;
   12728:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
            continue;
   1272c:	eb 70                	jmp    1279e <bitmap_alloc_nbits+0xe6>
        }

        //记录可分配空间的起始索引
        ok_index = search_index;
   1272e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12731:	89 45 f0             	mov    %eax,-0x10(%ebp)

        //判断该空间是否大小满足要求
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   12734:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
   1273b:	eb 2d                	jmp    1276a <bitmap_alloc_nbits+0xb2>
            //空间大小不满足要求, 分配失败
            if (bitmap_get_bit(bitmap, search_index++) != bit) {
   1273d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12740:	8d 50 01             	lea    0x1(%eax),%edx
   12743:	89 55 f4             	mov    %edx,-0xc(%ebp)
   12746:	83 ec 08             	sub    $0x8,%esp
   12749:	50                   	push   %eax
   1274a:	ff 75 08             	push   0x8(%ebp)
   1274d:	e8 c5 fd ff ff       	call   12517 <bitmap_get_bit>
   12752:	83 c4 10             	add    $0x10,%esp
   12755:	0f b6 c0             	movzbl %al,%eax
   12758:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1275b:	74 09                	je     12766 <bitmap_alloc_nbits+0xae>
                ok_index = -1;
   1275d:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
                break;
   12764:	eb 16                	jmp    1277c <bitmap_alloc_nbits+0xc4>
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   12766:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   1276a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1276d:	3b 45 10             	cmp    0x10(%ebp),%eax
   12770:	7d 0a                	jge    1277c <bitmap_alloc_nbits+0xc4>
   12772:	8b 45 08             	mov    0x8(%ebp),%eax
   12775:	8b 00                	mov    (%eax),%eax
   12777:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   1277a:	7c c1                	jl     1273d <bitmap_alloc_nbits+0x85>
            }
        }

        if (ok_index != -1) {//分配成功
   1277c:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
   12780:	74 1c                	je     1279e <bitmap_alloc_nbits+0xe6>
            //将该片空间标记为已分配状态, 并返回起始索引
            bitmap_set_bit(bitmap, ok_index, count, ~bit);
   12782:	8b 45 0c             	mov    0xc(%ebp),%eax
   12785:	f7 d0                	not    %eax
   12787:	50                   	push   %eax
   12788:	ff 75 10             	push   0x10(%ebp)
   1278b:	ff 75 f0             	push   -0x10(%ebp)
   1278e:	ff 75 08             	push   0x8(%ebp)
   12791:	e8 f9 fd ff ff       	call   1258f <bitmap_set_bit>
   12796:	83 c4 10             	add    $0x10,%esp
            return ok_index;
   12799:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1279c:	eb 13                	jmp    127b1 <bitmap_alloc_nbits+0xf9>
    while (search_index < bitmap->bit_count) {
   1279e:	8b 45 08             	mov    0x8(%ebp),%eax
   127a1:	8b 00                	mov    (%eax),%eax
   127a3:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   127a6:	0f 8c 63 ff ff ff    	jl     1270f <bitmap_alloc_nbits+0x57>
        }
    }
    
    //遍历完整个位图也没有满足要求的空间则返回-1
    return -1;
   127ac:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

   127b1:	c9                   	leave  
   127b2:	c3                   	ret    

000127b3 <kernel_strcpy>:
 * @brief  拷贝字符串
 * 
 * @param dest 目标字符串
 * @param src  源字符串
 */
void kernel_strcpy(char *dest, const char *src) {
   127b3:	55                   	push   %ebp
   127b4:	89 e5                	mov    %esp,%ebp
    //1.判断是否为NULL
    if (!dest || !src) return;
   127b6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   127ba:	74 3b                	je     127f7 <kernel_strcpy+0x44>
   127bc:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   127c0:	74 35                	je     127f7 <kernel_strcpy+0x44>

    //2.拷贝 src '\0' 以前的部分到 dest中
    //TODO:完成（访问未初始化的内存）的异常中断后就只判断src是否读到'\0'
    while (*dest && *src) {
   127c2:	eb 17                	jmp    127db <kernel_strcpy+0x28>
        *(dest++) = *(src++);
   127c4:	8b 55 0c             	mov    0xc(%ebp),%edx
   127c7:	8d 42 01             	lea    0x1(%edx),%eax
   127ca:	89 45 0c             	mov    %eax,0xc(%ebp)
   127cd:	8b 45 08             	mov    0x8(%ebp),%eax
   127d0:	8d 48 01             	lea    0x1(%eax),%ecx
   127d3:	89 4d 08             	mov    %ecx,0x8(%ebp)
   127d6:	0f b6 12             	movzbl (%edx),%edx
   127d9:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   127db:	8b 45 08             	mov    0x8(%ebp),%eax
   127de:	0f b6 00             	movzbl (%eax),%eax
   127e1:	84 c0                	test   %al,%al
   127e3:	74 0a                	je     127ef <kernel_strcpy+0x3c>
   127e5:	8b 45 0c             	mov    0xc(%ebp),%eax
   127e8:	0f b6 00             	movzbl (%eax),%eax
   127eb:	84 c0                	test   %al,%al
   127ed:	75 d5                	jne    127c4 <kernel_strcpy+0x11>
    }

    //3.添加结束符
    *dest = '\0';
   127ef:	8b 45 08             	mov    0x8(%ebp),%eax
   127f2:	c6 00 00             	movb   $0x0,(%eax)
   127f5:	eb 01                	jmp    127f8 <kernel_strcpy+0x45>
    if (!dest || !src) return;
   127f7:	90                   	nop
    
}
   127f8:	5d                   	pop    %ebp
   127f9:	c3                   	ret    

000127fa <kernel_strncpy>:
 * 
 * @param dest 目的字符串
 * @param src 源字符串
 * @param size 拷贝字符串的长度，包含'\0'
 */
void kernel_strncpy(char* dest, const char *src, int size) {
   127fa:	55                   	push   %ebp
   127fb:	89 e5                	mov    %esp,%ebp
    //1.判断是否需要拷贝
    if (!dest || !src || !size) return;
   127fd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12801:	74 45                	je     12848 <kernel_strncpy+0x4e>
   12803:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12807:	74 3f                	je     12848 <kernel_strncpy+0x4e>
   12809:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1280d:	74 39                	je     12848 <kernel_strncpy+0x4e>

    //2.size的大小包含了'\0'，所以要预留一个空间给'\0'，只能拷贝 size - 1个字符
    while ((size-- > 1) && (*src)) {
   1280f:	eb 17                	jmp    12828 <kernel_strncpy+0x2e>
        *(dest++) = *(src++);
   12811:	8b 55 0c             	mov    0xc(%ebp),%edx
   12814:	8d 42 01             	lea    0x1(%edx),%eax
   12817:	89 45 0c             	mov    %eax,0xc(%ebp)
   1281a:	8b 45 08             	mov    0x8(%ebp),%eax
   1281d:	8d 48 01             	lea    0x1(%eax),%ecx
   12820:	89 4d 08             	mov    %ecx,0x8(%ebp)
   12823:	0f b6 12             	movzbl (%edx),%edx
   12826:	88 10                	mov    %dl,(%eax)
    while ((size-- > 1) && (*src)) {
   12828:	8b 45 10             	mov    0x10(%ebp),%eax
   1282b:	8d 50 ff             	lea    -0x1(%eax),%edx
   1282e:	89 55 10             	mov    %edx,0x10(%ebp)
   12831:	83 f8 01             	cmp    $0x1,%eax
   12834:	7e 0a                	jle    12840 <kernel_strncpy+0x46>
   12836:	8b 45 0c             	mov    0xc(%ebp),%eax
   12839:	0f b6 00             	movzbl (%eax),%eax
   1283c:	84 c0                	test   %al,%al
   1283e:	75 d1                	jne    12811 <kernel_strncpy+0x17>
    }

    //3.添加结束符
    *dest = '\0';
   12840:	8b 45 08             	mov    0x8(%ebp),%eax
   12843:	c6 00 00             	movb   $0x0,(%eax)
   12846:	eb 01                	jmp    12849 <kernel_strncpy+0x4f>
    if (!dest || !src || !size) return;
   12848:	90                   	nop
}
   12849:	5d                   	pop    %ebp
   1284a:	c3                   	ret    

0001284b <kernel_strncmp>:
 * @param s2 字符串2
 * @param size 比较前比较的子串长度，从下标0开始到(size - 1)
 * 
 * @return int ==: 0, > : 1, < : -1
 */
int kernel_strncmp(const char *s1, const char *s2, int size) {
   1284b:	55                   	push   %ebp
   1284c:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) return 0;
   1284e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12852:	74 06                	je     1285a <kernel_strncmp+0xf>
   12854:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12858:	75 0f                	jne    12869 <kernel_strncmp+0x1e>
   1285a:	b8 00 00 00 00       	mov    $0x0,%eax
   1285f:	eb 52                	jmp    128b3 <kernel_strncmp+0x68>

    while (*s1 && *s2 && --size && *s1 == *s2 ) {
        ++s1;
   12861:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        ++s2;        
   12865:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && --size && *s1 == *s2 ) {
   12869:	8b 45 08             	mov    0x8(%ebp),%eax
   1286c:	0f b6 00             	movzbl (%eax),%eax
   1286f:	84 c0                	test   %al,%al
   12871:	74 24                	je     12897 <kernel_strncmp+0x4c>
   12873:	8b 45 0c             	mov    0xc(%ebp),%eax
   12876:	0f b6 00             	movzbl (%eax),%eax
   12879:	84 c0                	test   %al,%al
   1287b:	74 1a                	je     12897 <kernel_strncmp+0x4c>
   1287d:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   12881:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12885:	74 10                	je     12897 <kernel_strncmp+0x4c>
   12887:	8b 45 08             	mov    0x8(%ebp),%eax
   1288a:	0f b6 10             	movzbl (%eax),%edx
   1288d:	8b 45 0c             	mov    0xc(%ebp),%eax
   12890:	0f b6 00             	movzbl (%eax),%eax
   12893:	38 c2                	cmp    %al,%dl
   12895:	74 ca                	je     12861 <kernel_strncmp+0x16>
    }

    if (*s1 > *s2) return 1;
   12897:	8b 45 08             	mov    0x8(%ebp),%eax
   1289a:	0f b6 10             	movzbl (%eax),%edx
   1289d:	8b 45 0c             	mov    0xc(%ebp),%eax
   128a0:	0f b6 00             	movzbl (%eax),%eax
   128a3:	38 c2                	cmp    %al,%dl
   128a5:	7e 07                	jle    128ae <kernel_strncmp+0x63>
   128a7:	b8 01 00 00 00       	mov    $0x1,%eax
   128ac:	eb 05                	jmp    128b3 <kernel_strncmp+0x68>
    else if (*s1 < *s1) return -1;
    else return 0;
   128ae:	b8 00 00 00 00       	mov    $0x0,%eax
    
}
   128b3:	5d                   	pop    %ebp
   128b4:	c3                   	ret    

000128b5 <kernel_strlen>:
 * @brief  获取字符串str的长度
 * 
 * @param str 
 * @return int 
 */
int kernel_strlen(const char *str) {
   128b5:	55                   	push   %ebp
   128b6:	89 e5                	mov    %esp,%ebp
   128b8:	83 ec 10             	sub    $0x10,%esp
    if (!str) return 0;
   128bb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   128bf:	75 07                	jne    128c8 <kernel_strlen+0x13>
   128c1:	b8 00 00 00 00       	mov    $0x0,%eax
   128c6:	eb 20                	jmp    128e8 <kernel_strlen+0x33>

    int len = 0;
   128c8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*(str++)) len++;
   128cf:	eb 04                	jmp    128d5 <kernel_strlen+0x20>
   128d1:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   128d5:	8b 45 08             	mov    0x8(%ebp),%eax
   128d8:	8d 50 01             	lea    0x1(%eax),%edx
   128db:	89 55 08             	mov    %edx,0x8(%ebp)
   128de:	0f b6 00             	movzbl (%eax),%eax
   128e1:	84 c0                	test   %al,%al
   128e3:	75 ec                	jne    128d1 <kernel_strlen+0x1c>

    return len;
   128e5:	8b 45 fc             	mov    -0x4(%ebp),%eax
    
}
   128e8:	c9                   	leave  
   128e9:	c3                   	ret    

000128ea <kernel_memcpy>:
 * 
 * @param dest 目的内存的起始地址
 * @param src 原内存的起始地址
 * @param size 复制的内存字节大小
 */
void kernel_memcpy(void *dest, const void *src, int size) {
   128ea:	55                   	push   %ebp
   128eb:	89 e5                	mov    %esp,%ebp
   128ed:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) return;
   128f0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   128f4:	74 40                	je     12936 <kernel_memcpy+0x4c>
   128f6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   128fa:	74 3a                	je     12936 <kernel_memcpy+0x4c>
   128fc:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12900:	74 34                	je     12936 <kernel_memcpy+0x4c>

    uint8_t *d = (uint8_t*)dest;
   12902:	8b 45 08             	mov    0x8(%ebp),%eax
   12905:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *s = (uint8_t*)src;
   12908:	8b 45 0c             	mov    0xc(%ebp),%eax
   1290b:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (size--) {
   1290e:	eb 17                	jmp    12927 <kernel_memcpy+0x3d>
        *(d++) = *(s++);
   12910:	8b 55 f8             	mov    -0x8(%ebp),%edx
   12913:	8d 42 01             	lea    0x1(%edx),%eax
   12916:	89 45 f8             	mov    %eax,-0x8(%ebp)
   12919:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1291c:	8d 48 01             	lea    0x1(%eax),%ecx
   1291f:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   12922:	0f b6 12             	movzbl (%edx),%edx
   12925:	88 10                	mov    %dl,(%eax)
    while (size--) {
   12927:	8b 45 10             	mov    0x10(%ebp),%eax
   1292a:	8d 50 ff             	lea    -0x1(%eax),%edx
   1292d:	89 55 10             	mov    %edx,0x10(%ebp)
   12930:	85 c0                	test   %eax,%eax
   12932:	75 dc                	jne    12910 <kernel_memcpy+0x26>
   12934:	eb 01                	jmp    12937 <kernel_memcpy+0x4d>
    if (!dest || !src || !size) return;
   12936:	90                   	nop
    }
    
}
   12937:	c9                   	leave  
   12938:	c3                   	ret    

00012939 <kernel_memset>:
 * 
 * @param dest 区域起始地址
 * @param v 每个字节的值
 * @param size 赋值的内存的大小
 */
void kernel_memset(void *dest, uint8_t v, int size) {
   12939:	55                   	push   %ebp
   1293a:	89 e5                	mov    %esp,%ebp
   1293c:	83 ec 14             	sub    $0x14,%esp
   1293f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12942:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size) return;
   12945:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12949:	74 2c                	je     12977 <kernel_memset+0x3e>
   1294b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1294f:	74 26                	je     12977 <kernel_memset+0x3e>

    uint8_t *d = (uint8_t*)dest;
   12951:	8b 45 08             	mov    0x8(%ebp),%eax
   12954:	89 45 fc             	mov    %eax,-0x4(%ebp)
    
    while (size--) {
   12957:	eb 0f                	jmp    12968 <kernel_memset+0x2f>
        *(d++) = v;
   12959:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1295c:	8d 50 01             	lea    0x1(%eax),%edx
   1295f:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12962:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   12966:	88 10                	mov    %dl,(%eax)
    while (size--) {
   12968:	8b 45 10             	mov    0x10(%ebp),%eax
   1296b:	8d 50 ff             	lea    -0x1(%eax),%edx
   1296e:	89 55 10             	mov    %edx,0x10(%ebp)
   12971:	85 c0                	test   %eax,%eax
   12973:	75 e4                	jne    12959 <kernel_memset+0x20>
   12975:	eb 01                	jmp    12978 <kernel_memset+0x3f>
    if (!dest || !size) return;
   12977:	90                   	nop
    }
    
}
   12978:	c9                   	leave  
   12979:	c3                   	ret    

0001297a <kernel_memcmp>:
 * @param d1 区域1的起始地址
 * @param d2 区域2的起始地址
 * @param size 比较的字节数量
 * @return int ==:0, >:1, <:-1
 */
int kernel_memcmp(const void *dest1, const void *dest2, int size) {
   1297a:	55                   	push   %ebp
   1297b:	89 e5                	mov    %esp,%ebp
   1297d:	83 ec 10             	sub    $0x10,%esp
    if (!dest1 || !dest2 || !size) return 0;
   12980:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12984:	74 0c                	je     12992 <kernel_memcmp+0x18>
   12986:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1298a:	74 06                	je     12992 <kernel_memcmp+0x18>
   1298c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12990:	75 07                	jne    12999 <kernel_memcmp+0x1f>
   12992:	b8 00 00 00 00       	mov    $0x0,%eax
   12997:	eb 63                	jmp    129fc <kernel_memcmp+0x82>

    uint8_t *d1 = (uint8_t*)dest1;
   12999:	8b 45 08             	mov    0x8(%ebp),%eax
   1299c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d2 = (uint8_t*)dest2;
   1299f:	8b 45 0c             	mov    0xc(%ebp),%eax
   129a2:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (--size && *d1 == *d2) {
   129a5:	eb 08                	jmp    129af <kernel_memcmp+0x35>
        d1++;
   129a7:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
        d2++;
   129ab:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (--size && *d1 == *d2) {
   129af:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   129b3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   129b7:	74 10                	je     129c9 <kernel_memcmp+0x4f>
   129b9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   129bc:	0f b6 10             	movzbl (%eax),%edx
   129bf:	8b 45 f8             	mov    -0x8(%ebp),%eax
   129c2:	0f b6 00             	movzbl (%eax),%eax
   129c5:	38 c2                	cmp    %al,%dl
   129c7:	74 de                	je     129a7 <kernel_memcmp+0x2d>
    }

    if (*d1 > *d2) return 1;
   129c9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   129cc:	0f b6 10             	movzbl (%eax),%edx
   129cf:	8b 45 f8             	mov    -0x8(%ebp),%eax
   129d2:	0f b6 00             	movzbl (%eax),%eax
   129d5:	38 c2                	cmp    %al,%dl
   129d7:	76 07                	jbe    129e0 <kernel_memcmp+0x66>
   129d9:	b8 01 00 00 00       	mov    $0x1,%eax
   129de:	eb 1c                	jmp    129fc <kernel_memcmp+0x82>
    else if (*d1 < *d2) return -1;
   129e0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   129e3:	0f b6 10             	movzbl (%eax),%edx
   129e6:	8b 45 f8             	mov    -0x8(%ebp),%eax
   129e9:	0f b6 00             	movzbl (%eax),%eax
   129ec:	38 c2                	cmp    %al,%dl
   129ee:	73 07                	jae    129f7 <kernel_memcmp+0x7d>
   129f0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   129f5:	eb 05                	jmp    129fc <kernel_memcmp+0x82>
    else return 0;
   129f7:	b8 00 00 00 00       	mov    $0x0,%eax

}
   129fc:	c9                   	leave  
   129fd:	c3                   	ret    

000129fe <kernel_sprintf>:



void kernel_sprintf(char *buf, const char *formate, ...) {
   129fe:	55                   	push   %ebp
   129ff:	89 e5                	mov    %esp,%ebp
   12a01:	83 ec 18             	sub    $0x18,%esp
    //获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   12a04:	8d 45 10             	lea    0x10(%ebp),%eax
   12a07:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_vsprintf(buf, formate, args);
   12a0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12a0d:	83 ec 04             	sub    $0x4,%esp
   12a10:	50                   	push   %eax
   12a11:	ff 75 0c             	push   0xc(%ebp)
   12a14:	ff 75 08             	push   0x8(%ebp)
   12a17:	e8 06 00 00 00       	call   12a22 <kernel_vsprintf>
   12a1c:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   12a1f:	90                   	nop
   12a20:	c9                   	leave  
   12a21:	c3                   	ret    

00012a22 <kernel_vsprintf>:
 * 
 * @param buf 
 * @param formate 
 * @param args 
 */
void kernel_vsprintf(char *buf, const char *formate, va_list args) {
   12a22:	55                   	push   %ebp
   12a23:	89 e5                	mov    %esp,%ebp
   12a25:	83 ec 28             	sub    $0x28,%esp
    //定义状态机，包含两种状态
    enum {NORMAL, READ_FMT} state = NORMAL;
   12a28:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    
    char *curr = buf;
   12a2f:	8b 45 08             	mov    0x8(%ebp),%eax
   12a32:	89 45 f0             	mov    %eax,-0x10(%ebp)

    char ch;

    while ((ch = *(formate++)) != '\0') {
   12a35:	e9 68 01 00 00       	jmp    12ba2 <kernel_vsprintf+0x180>
        switch (state) {
   12a3a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12a3e:	74 0b                	je     12a4b <kernel_vsprintf+0x29>
   12a40:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   12a44:	74 2b                	je     12a71 <kernel_vsprintf+0x4f>
   12a46:	e9 56 01 00 00       	jmp    12ba1 <kernel_vsprintf+0x17f>
        case NORMAL: 
            if (ch == '%') state = READ_FMT;
   12a4b:	80 7d e7 25          	cmpb   $0x25,-0x19(%ebp)
   12a4f:	75 0c                	jne    12a5d <kernel_vsprintf+0x3b>
   12a51:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   12a58:	e9 45 01 00 00       	jmp    12ba2 <kernel_vsprintf+0x180>
            else *(curr++) = ch;
   12a5d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12a60:	8d 50 01             	lea    0x1(%eax),%edx
   12a63:	89 55 f0             	mov    %edx,-0x10(%ebp)
   12a66:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   12a6a:	88 10                	mov    %dl,(%eax)
            break;
   12a6c:	e9 31 01 00 00       	jmp    12ba2 <kernel_vsprintf+0x180>
        case READ_FMT:
            if (ch == 's') {
   12a71:	80 7d e7 73          	cmpb   $0x73,-0x19(%ebp)
   12a75:	75 47                	jne    12abe <kernel_vsprintf+0x9c>
                const char * str = va_arg(args, char *);
   12a77:	8b 45 10             	mov    0x10(%ebp),%eax
   12a7a:	8d 50 04             	lea    0x4(%eax),%edx
   12a7d:	89 55 10             	mov    %edx,0x10(%ebp)
   12a80:	8b 00                	mov    (%eax),%eax
   12a82:	89 45 ec             	mov    %eax,-0x14(%ebp)
                int len = kernel_strlen(str);
   12a85:	ff 75 ec             	push   -0x14(%ebp)
   12a88:	e8 28 fe ff ff       	call   128b5 <kernel_strlen>
   12a8d:	83 c4 04             	add    $0x4,%esp
   12a90:	89 45 e8             	mov    %eax,-0x18(%ebp)
                while (len--) {
   12a93:	eb 17                	jmp    12aac <kernel_vsprintf+0x8a>
                    *(curr++) = *(str++);
   12a95:	8b 55 ec             	mov    -0x14(%ebp),%edx
   12a98:	8d 42 01             	lea    0x1(%edx),%eax
   12a9b:	89 45 ec             	mov    %eax,-0x14(%ebp)
   12a9e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12aa1:	8d 48 01             	lea    0x1(%eax),%ecx
   12aa4:	89 4d f0             	mov    %ecx,-0x10(%ebp)
   12aa7:	0f b6 12             	movzbl (%edx),%edx
   12aaa:	88 10                	mov    %dl,(%eax)
                while (len--) {
   12aac:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12aaf:	8d 50 ff             	lea    -0x1(%eax),%edx
   12ab2:	89 55 e8             	mov    %edx,-0x18(%ebp)
   12ab5:	85 c0                	test   %eax,%eax
   12ab7:	75 dc                	jne    12a95 <kernel_vsprintf+0x73>
   12ab9:	e9 da 00 00 00       	jmp    12b98 <kernel_vsprintf+0x176>
                }
            } else if (ch == 'd') {
   12abe:	80 7d e7 64          	cmpb   $0x64,-0x19(%ebp)
   12ac2:	75 37                	jne    12afb <kernel_vsprintf+0xd9>
                const int num = va_arg(args, int);
   12ac4:	8b 45 10             	mov    0x10(%ebp),%eax
   12ac7:	8d 50 04             	lea    0x4(%eax),%edx
   12aca:	89 55 10             	mov    %edx,0x10(%ebp)
   12acd:	8b 00                	mov    (%eax),%eax
   12acf:	89 45 d8             	mov    %eax,-0x28(%ebp)
                kernel_itoa(curr, num, 10);
   12ad2:	83 ec 04             	sub    $0x4,%esp
   12ad5:	6a 0a                	push   $0xa
   12ad7:	ff 75 d8             	push   -0x28(%ebp)
   12ada:	ff 75 f0             	push   -0x10(%ebp)
   12add:	e8 dd 00 00 00       	call   12bbf <kernel_itoa>
   12ae2:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr);   
   12ae5:	83 ec 0c             	sub    $0xc,%esp
   12ae8:	ff 75 f0             	push   -0x10(%ebp)
   12aeb:	e8 c5 fd ff ff       	call   128b5 <kernel_strlen>
   12af0:	83 c4 10             	add    $0x10,%esp
   12af3:	01 45 f0             	add    %eax,-0x10(%ebp)
   12af6:	e9 9d 00 00 00       	jmp    12b98 <kernel_vsprintf+0x176>
            } else if (ch == 'x' || ch == 'X') {
   12afb:	80 7d e7 78          	cmpb   $0x78,-0x19(%ebp)
   12aff:	74 06                	je     12b07 <kernel_vsprintf+0xe5>
   12b01:	80 7d e7 58          	cmpb   $0x58,-0x19(%ebp)
   12b05:	75 34                	jne    12b3b <kernel_vsprintf+0x119>
                const int num = va_arg(args, int);
   12b07:	8b 45 10             	mov    0x10(%ebp),%eax
   12b0a:	8d 50 04             	lea    0x4(%eax),%edx
   12b0d:	89 55 10             	mov    %edx,0x10(%ebp)
   12b10:	8b 00                	mov    (%eax),%eax
   12b12:	89 45 dc             	mov    %eax,-0x24(%ebp)
                kernel_itoa(curr, num, 16);
   12b15:	83 ec 04             	sub    $0x4,%esp
   12b18:	6a 10                	push   $0x10
   12b1a:	ff 75 dc             	push   -0x24(%ebp)
   12b1d:	ff 75 f0             	push   -0x10(%ebp)
   12b20:	e8 9a 00 00 00       	call   12bbf <kernel_itoa>
   12b25:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr); 
   12b28:	83 ec 0c             	sub    $0xc,%esp
   12b2b:	ff 75 f0             	push   -0x10(%ebp)
   12b2e:	e8 82 fd ff ff       	call   128b5 <kernel_strlen>
   12b33:	83 c4 10             	add    $0x10,%esp
   12b36:	01 45 f0             	add    %eax,-0x10(%ebp)
            } else if (ch == 'x' || ch == 'X') {
   12b39:	eb 5d                	jmp    12b98 <kernel_vsprintf+0x176>
            } else if (ch == 'b') {
   12b3b:	80 7d e7 62          	cmpb   $0x62,-0x19(%ebp)
   12b3f:	75 34                	jne    12b75 <kernel_vsprintf+0x153>
                 const int num = va_arg(args, int);
   12b41:	8b 45 10             	mov    0x10(%ebp),%eax
   12b44:	8d 50 04             	lea    0x4(%eax),%edx
   12b47:	89 55 10             	mov    %edx,0x10(%ebp)
   12b4a:	8b 00                	mov    (%eax),%eax
   12b4c:	89 45 e0             	mov    %eax,-0x20(%ebp)
                kernel_itoa(curr, num, 2);
   12b4f:	83 ec 04             	sub    $0x4,%esp
   12b52:	6a 02                	push   $0x2
   12b54:	ff 75 e0             	push   -0x20(%ebp)
   12b57:	ff 75 f0             	push   -0x10(%ebp)
   12b5a:	e8 60 00 00 00       	call   12bbf <kernel_itoa>
   12b5f:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr); 
   12b62:	83 ec 0c             	sub    $0xc,%esp
   12b65:	ff 75 f0             	push   -0x10(%ebp)
   12b68:	e8 48 fd ff ff       	call   128b5 <kernel_strlen>
   12b6d:	83 c4 10             	add    $0x10,%esp
   12b70:	01 45 f0             	add    %eax,-0x10(%ebp)
   12b73:	eb 23                	jmp    12b98 <kernel_vsprintf+0x176>
            } else if (ch == 'c') {
   12b75:	80 7d e7 63          	cmpb   $0x63,-0x19(%ebp)
   12b79:	75 1d                	jne    12b98 <kernel_vsprintf+0x176>
                char c = va_arg(args, int);
   12b7b:	8b 45 10             	mov    0x10(%ebp),%eax
   12b7e:	8d 50 04             	lea    0x4(%eax),%edx
   12b81:	89 55 10             	mov    %edx,0x10(%ebp)
   12b84:	8b 00                	mov    (%eax),%eax
   12b86:	88 45 e6             	mov    %al,-0x1a(%ebp)
                *(curr++) = c;
   12b89:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12b8c:	8d 50 01             	lea    0x1(%eax),%edx
   12b8f:	89 55 f0             	mov    %edx,-0x10(%ebp)
   12b92:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   12b96:	88 10                	mov    %dl,(%eax)
            }
            state = NORMAL;
   12b98:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            break;
   12b9f:	eb 01                	jmp    12ba2 <kernel_vsprintf+0x180>
        default:
            break;
   12ba1:	90                   	nop
    while ((ch = *(formate++)) != '\0') {
   12ba2:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ba5:	8d 50 01             	lea    0x1(%eax),%edx
   12ba8:	89 55 0c             	mov    %edx,0xc(%ebp)
   12bab:	0f b6 00             	movzbl (%eax),%eax
   12bae:	88 45 e7             	mov    %al,-0x19(%ebp)
   12bb1:	80 7d e7 00          	cmpb   $0x0,-0x19(%ebp)
   12bb5:	0f 85 7f fe ff ff    	jne    12a3a <kernel_vsprintf+0x18>
        }
    }
    

}
   12bbb:	90                   	nop
   12bbc:	90                   	nop
   12bbd:	c9                   	leave  
   12bbe:	c3                   	ret    

00012bbf <kernel_itoa>:
 * 
 * @param buf 缓冲区
 * @param num 整数
 * @param base 转换的进制规则
 */
void kernel_itoa(char *buf, int num, int base) {
   12bbf:	55                   	push   %ebp
   12bc0:	89 e5                	mov    %esp,%ebp
   12bc2:	81 ec 90 00 00 00    	sub    $0x90,%esp
    char * p = buf;
   12bc8:	8b 45 08             	mov    0x8(%ebp),%eax
   12bcb:	89 45 fc             	mov    %eax,-0x4(%ebp)

    if (base != 2 && base != 8 && base != 10 && base != 16) {
   12bce:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   12bd2:	74 1d                	je     12bf1 <kernel_itoa+0x32>
   12bd4:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   12bd8:	74 17                	je     12bf1 <kernel_itoa+0x32>
   12bda:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   12bde:	74 11                	je     12bf1 <kernel_itoa+0x32>
   12be0:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   12be4:	74 0b                	je     12bf1 <kernel_itoa+0x32>
        *buf = '\0';
   12be6:	8b 45 08             	mov    0x8(%ebp),%eax
   12be9:	c6 00 00             	movb   $0x0,(%eax)
        return;
   12bec:	e9 a2 00 00 00       	jmp    12c93 <kernel_itoa+0xd4>
    }

    if(num < 0)  {
   12bf1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12bf5:	79 11                	jns    12c08 <kernel_itoa+0x49>
        *(p++) = '-';
   12bf7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12bfa:	8d 50 01             	lea    0x1(%eax),%edx
   12bfd:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12c00:	c6 00 2d             	movb   $0x2d,(%eax)
        num = -num;
   12c03:	f7 5d 0c             	negl   0xc(%ebp)
   12c06:	eb 1a                	jmp    12c22 <kernel_itoa+0x63>
    } else if (num == 0) {
   12c08:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12c0c:	75 14                	jne    12c22 <kernel_itoa+0x63>
        *(p++) = '0';
   12c0e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12c11:	8d 50 01             	lea    0x1(%eax),%edx
   12c14:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12c17:	c6 00 30             	movb   $0x30,(%eax)
        *p = '\0';
   12c1a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12c1d:	c6 00 00             	movb   $0x0,(%eax)
        return;
   12c20:	eb 71                	jmp    12c93 <kernel_itoa+0xd4>
    }
    

    static const char *num_to_char = {"0123456789abcdef"};
    char arr[128];
    int len = 0;
   12c22:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (num > 0) {
   12c29:	eb 2e                	jmp    12c59 <kernel_itoa+0x9a>
        arr[len++] = num_to_char[num % base];
   12c2b:	8b 0d 40 40 01 00    	mov    0x14040,%ecx
   12c31:	8b 45 0c             	mov    0xc(%ebp),%eax
   12c34:	99                   	cltd   
   12c35:	f7 7d 10             	idivl  0x10(%ebp)
   12c38:	89 d0                	mov    %edx,%eax
   12c3a:	01 c1                	add    %eax,%ecx
   12c3c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12c3f:	8d 50 01             	lea    0x1(%eax),%edx
   12c42:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12c45:	0f b6 11             	movzbl (%ecx),%edx
   12c48:	88 94 05 74 ff ff ff 	mov    %dl,-0x8c(%ebp,%eax,1)
        num /= base;
   12c4f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12c52:	99                   	cltd   
   12c53:	f7 7d 10             	idivl  0x10(%ebp)
   12c56:	89 45 0c             	mov    %eax,0xc(%ebp)
    while (num > 0) {
   12c59:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12c5d:	7f cc                	jg     12c2b <kernel_itoa+0x6c>
    }

    for (int i = len - 1; i >= 0; --i) {
   12c5f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12c62:	83 e8 01             	sub    $0x1,%eax
   12c65:	89 45 f4             	mov    %eax,-0xc(%ebp)
   12c68:	eb 1d                	jmp    12c87 <kernel_itoa+0xc8>
            *(p++) = arr[i];
   12c6a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12c6d:	8d 50 01             	lea    0x1(%eax),%edx
   12c70:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12c73:	8d 8d 74 ff ff ff    	lea    -0x8c(%ebp),%ecx
   12c79:	8b 55 f4             	mov    -0xc(%ebp),%edx
   12c7c:	01 ca                	add    %ecx,%edx
   12c7e:	0f b6 12             	movzbl (%edx),%edx
   12c81:	88 10                	mov    %dl,(%eax)
    for (int i = len - 1; i >= 0; --i) {
   12c83:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
   12c87:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12c8b:	79 dd                	jns    12c6a <kernel_itoa+0xab>
    }
    *p = '\0';
   12c8d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12c90:	c6 00 00             	movb   $0x0,(%eax)
   12c93:	c9                   	leave  
   12c94:	c3                   	ret    

00012c95 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   12c95:	55                   	push   %ebp
   12c96:	89 e5                	mov    %esp,%ebp
   12c98:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   12c9b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12c9f:	75 19                	jne    12cba <list_is_empty+0x25>
   12ca1:	68 50 3c 01 00       	push   $0x13c50
   12ca6:	68 34 3d 01 00       	push   $0x13d34
   12cab:	6a 38                	push   $0x38
   12cad:	68 64 3c 01 00       	push   $0x13c64
   12cb2:	e8 80 f7 ff ff       	call   12437 <pannic>
   12cb7:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   12cba:	8b 45 08             	mov    0x8(%ebp),%eax
   12cbd:	8b 40 08             	mov    0x8(%eax),%eax
   12cc0:	85 c0                	test   %eax,%eax
   12cc2:	0f 94 c0             	sete   %al
   12cc5:	0f b6 c0             	movzbl %al,%eax
}
   12cc8:	c9                   	leave  
   12cc9:	c3                   	ret    

00012cca <list_get_size>:
static inline int list_get_size(list_t *list) {
   12cca:	55                   	push   %ebp
   12ccb:	89 e5                	mov    %esp,%ebp
   12ccd:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   12cd0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12cd4:	75 19                	jne    12cef <list_get_size+0x25>
   12cd6:	68 50 3c 01 00       	push   $0x13c50
   12cdb:	68 6c 3d 01 00       	push   $0x13d6c
   12ce0:	6a 3e                	push   $0x3e
   12ce2:	68 64 3c 01 00       	push   $0x13c64
   12ce7:	e8 4b f7 ff ff       	call   12437 <pannic>
   12cec:	83 c4 10             	add    $0x10,%esp
    return list->size;
   12cef:	8b 45 08             	mov    0x8(%ebp),%eax
   12cf2:	8b 40 08             	mov    0x8(%eax),%eax
}
   12cf5:	c9                   	leave  
   12cf6:	c3                   	ret    

00012cf7 <list_insert_first>:
 * 
 */

#include "tools/list.h"

void list_insert_first(list_t *list, list_node_t *node) {
   12cf7:	55                   	push   %ebp
   12cf8:	89 e5                	mov    %esp,%ebp
   12cfa:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   12cfd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12d01:	74 06                	je     12d09 <list_insert_first+0x12>
   12d03:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12d07:	75 19                	jne    12d22 <list_insert_first+0x2b>
   12d09:	68 a4 3c 01 00       	push   $0x13ca4
   12d0e:	68 20 3d 01 00       	push   $0x13d20
   12d13:	6a 0f                	push   $0xf
   12d15:	68 d4 3c 01 00       	push   $0x13cd4
   12d1a:	e8 18 f7 ff ff       	call   12437 <pannic>
   12d1f:	83 c4 10             	add    $0x10,%esp

    node->next = list->first;
   12d22:	8b 45 08             	mov    0x8(%ebp),%eax
   12d25:	8b 10                	mov    (%eax),%edx
   12d27:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d2a:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   12d2d:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d30:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   12d36:	83 ec 0c             	sub    $0xc,%esp
   12d39:	ff 75 08             	push   0x8(%ebp)
   12d3c:	e8 54 ff ff ff       	call   12c95 <list_is_empty>
   12d41:	83 c4 10             	add    $0x10,%esp
   12d44:	85 c0                	test   %eax,%eax
   12d46:	74 16                	je     12d5e <list_insert_first+0x67>
        list->first = list->last = node;
   12d48:	8b 45 08             	mov    0x8(%ebp),%eax
   12d4b:	8b 55 0c             	mov    0xc(%ebp),%edx
   12d4e:	89 50 04             	mov    %edx,0x4(%eax)
   12d51:	8b 45 08             	mov    0x8(%ebp),%eax
   12d54:	8b 50 04             	mov    0x4(%eax),%edx
   12d57:	8b 45 08             	mov    0x8(%ebp),%eax
   12d5a:	89 10                	mov    %edx,(%eax)
   12d5c:	eb 12                	jmp    12d70 <list_insert_first+0x79>
    } else {
        list->first->pre = node;
   12d5e:	8b 45 08             	mov    0x8(%ebp),%eax
   12d61:	8b 00                	mov    (%eax),%eax
   12d63:	8b 55 0c             	mov    0xc(%ebp),%edx
   12d66:	89 10                	mov    %edx,(%eax)
        list->first = node;
   12d68:	8b 45 08             	mov    0x8(%ebp),%eax
   12d6b:	8b 55 0c             	mov    0xc(%ebp),%edx
   12d6e:	89 10                	mov    %edx,(%eax)
    }

    list->size++;
   12d70:	8b 45 08             	mov    0x8(%ebp),%eax
   12d73:	8b 40 08             	mov    0x8(%eax),%eax
   12d76:	8d 50 01             	lea    0x1(%eax),%edx
   12d79:	8b 45 08             	mov    0x8(%ebp),%eax
   12d7c:	89 50 08             	mov    %edx,0x8(%eax)
}
   12d7f:	90                   	nop
   12d80:	c9                   	leave  
   12d81:	c3                   	ret    

00012d82 <list_insert_last>:

void list_insert_last(list_t *list, list_node_t *node) {
   12d82:	55                   	push   %ebp
   12d83:	89 e5                	mov    %esp,%ebp
   12d85:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   12d88:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12d8c:	74 06                	je     12d94 <list_insert_last+0x12>
   12d8e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12d92:	75 19                	jne    12dad <list_insert_last+0x2b>
   12d94:	68 a4 3c 01 00       	push   $0x13ca4
   12d99:	68 44 3d 01 00       	push   $0x13d44
   12d9e:	6a 1f                	push   $0x1f
   12da0:	68 d4 3c 01 00       	push   $0x13cd4
   12da5:	e8 8d f6 ff ff       	call   12437 <pannic>
   12daa:	83 c4 10             	add    $0x10,%esp

    node->pre = list->last;
   12dad:	8b 45 08             	mov    0x8(%ebp),%eax
   12db0:	8b 50 04             	mov    0x4(%eax),%edx
   12db3:	8b 45 0c             	mov    0xc(%ebp),%eax
   12db6:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   12db8:	8b 45 0c             	mov    0xc(%ebp),%eax
   12dbb:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)


    if (list_is_empty(list)) {
   12dc2:	83 ec 0c             	sub    $0xc,%esp
   12dc5:	ff 75 08             	push   0x8(%ebp)
   12dc8:	e8 c8 fe ff ff       	call   12c95 <list_is_empty>
   12dcd:	83 c4 10             	add    $0x10,%esp
   12dd0:	85 c0                	test   %eax,%eax
   12dd2:	74 16                	je     12dea <list_insert_last+0x68>
        list->first = list->last = node;
   12dd4:	8b 45 08             	mov    0x8(%ebp),%eax
   12dd7:	8b 55 0c             	mov    0xc(%ebp),%edx
   12dda:	89 50 04             	mov    %edx,0x4(%eax)
   12ddd:	8b 45 08             	mov    0x8(%ebp),%eax
   12de0:	8b 50 04             	mov    0x4(%eax),%edx
   12de3:	8b 45 08             	mov    0x8(%ebp),%eax
   12de6:	89 10                	mov    %edx,(%eax)
   12de8:	eb 15                	jmp    12dff <list_insert_last+0x7d>
    } else {
        list->last->next = node;
   12dea:	8b 45 08             	mov    0x8(%ebp),%eax
   12ded:	8b 40 04             	mov    0x4(%eax),%eax
   12df0:	8b 55 0c             	mov    0xc(%ebp),%edx
   12df3:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   12df6:	8b 45 08             	mov    0x8(%ebp),%eax
   12df9:	8b 55 0c             	mov    0xc(%ebp),%edx
   12dfc:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->size++;
   12dff:	8b 45 08             	mov    0x8(%ebp),%eax
   12e02:	8b 40 08             	mov    0x8(%eax),%eax
   12e05:	8d 50 01             	lea    0x1(%eax),%edx
   12e08:	8b 45 08             	mov    0x8(%ebp),%eax
   12e0b:	89 50 08             	mov    %edx,0x8(%eax)

}
   12e0e:	90                   	nop
   12e0f:	c9                   	leave  
   12e10:	c3                   	ret    

00012e11 <list_remove_first>:

list_node_t* list_remove_first(list_t *list){
   12e11:	55                   	push   %ebp
   12e12:	89 e5                	mov    %esp,%ebp
   12e14:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   12e17:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12e1b:	75 19                	jne    12e36 <list_remove_first+0x25>
   12e1d:	68 0a 3d 01 00       	push   $0x13d0a
   12e22:	68 58 3d 01 00       	push   $0x13d58
   12e27:	6a 31                	push   $0x31
   12e29:	68 d4 3c 01 00       	push   $0x13cd4
   12e2e:	e8 04 f6 ff ff       	call   12437 <pannic>
   12e33:	83 c4 10             	add    $0x10,%esp
    if (list_is_empty(list)) {
   12e36:	83 ec 0c             	sub    $0xc,%esp
   12e39:	ff 75 08             	push   0x8(%ebp)
   12e3c:	e8 54 fe ff ff       	call   12c95 <list_is_empty>
   12e41:	83 c4 10             	add    $0x10,%esp
   12e44:	85 c0                	test   %eax,%eax
   12e46:	74 07                	je     12e4f <list_remove_first+0x3e>
        return (list_node_t*)0;
   12e48:	b8 00 00 00 00       	mov    $0x0,%eax
   12e4d:	eb 71                	jmp    12ec0 <list_remove_first+0xaf>
    }

    list_node_t *ret = list->first;
   12e4f:	8b 45 08             	mov    0x8(%ebp),%eax
   12e52:	8b 00                	mov    (%eax),%eax
   12e54:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   12e57:	83 ec 0c             	sub    $0xc,%esp
   12e5a:	ff 75 08             	push   0x8(%ebp)
   12e5d:	e8 68 fe ff ff       	call   12cca <list_get_size>
   12e62:	83 c4 10             	add    $0x10,%esp
   12e65:	83 f8 01             	cmp    $0x1,%eax
   12e68:	75 17                	jne    12e81 <list_remove_first+0x70>
        list->first = list->last = (list_node_t*)0;
   12e6a:	8b 45 08             	mov    0x8(%ebp),%eax
   12e6d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12e74:	8b 45 08             	mov    0x8(%ebp),%eax
   12e77:	8b 50 04             	mov    0x4(%eax),%edx
   12e7a:	8b 45 08             	mov    0x8(%ebp),%eax
   12e7d:	89 10                	mov    %edx,(%eax)
   12e7f:	eb 18                	jmp    12e99 <list_remove_first+0x88>
    } else {
        list->first = list->first->next;
   12e81:	8b 45 08             	mov    0x8(%ebp),%eax
   12e84:	8b 00                	mov    (%eax),%eax
   12e86:	8b 50 04             	mov    0x4(%eax),%edx
   12e89:	8b 45 08             	mov    0x8(%ebp),%eax
   12e8c:	89 10                	mov    %edx,(%eax)
        list->first->pre = (list_node_t*)0;
   12e8e:	8b 45 08             	mov    0x8(%ebp),%eax
   12e91:	8b 00                	mov    (%eax),%eax
   12e93:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    list->size--;
   12e99:	8b 45 08             	mov    0x8(%ebp),%eax
   12e9c:	8b 40 08             	mov    0x8(%eax),%eax
   12e9f:	8d 50 ff             	lea    -0x1(%eax),%edx
   12ea2:	8b 45 08             	mov    0x8(%ebp),%eax
   12ea5:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   12ea8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12eab:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12eb2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12eb5:	8b 50 04             	mov    0x4(%eax),%edx
   12eb8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12ebb:	89 10                	mov    %edx,(%eax)
    return ret;
   12ebd:	8b 45 f4             	mov    -0xc(%ebp),%eax
 }
   12ec0:	c9                   	leave  
   12ec1:	c3                   	ret    

00012ec2 <list_remove_last>:

list_node_t* list_remove_last(list_t *list) {
   12ec2:	55                   	push   %ebp
   12ec3:	89 e5                	mov    %esp,%ebp
   12ec5:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   12ec8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12ecc:	75 19                	jne    12ee7 <list_remove_last+0x25>
   12ece:	68 0a 3d 01 00       	push   $0x13d0a
   12ed3:	68 7c 3d 01 00       	push   $0x13d7c
   12ed8:	6a 46                	push   $0x46
   12eda:	68 d4 3c 01 00       	push   $0x13cd4
   12edf:	e8 53 f5 ff ff       	call   12437 <pannic>
   12ee4:	83 c4 10             	add    $0x10,%esp
     if (list_is_empty(list)) {
   12ee7:	83 ec 0c             	sub    $0xc,%esp
   12eea:	ff 75 08             	push   0x8(%ebp)
   12eed:	e8 a3 fd ff ff       	call   12c95 <list_is_empty>
   12ef2:	83 c4 10             	add    $0x10,%esp
   12ef5:	85 c0                	test   %eax,%eax
   12ef7:	74 07                	je     12f00 <list_remove_last+0x3e>
        return (list_node_t*)0;
   12ef9:	b8 00 00 00 00       	mov    $0x0,%eax
   12efe:	eb 75                	jmp    12f75 <list_remove_last+0xb3>
    }

    list_node_t *ret = list->last;
   12f00:	8b 45 08             	mov    0x8(%ebp),%eax
   12f03:	8b 40 04             	mov    0x4(%eax),%eax
   12f06:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   12f09:	83 ec 0c             	sub    $0xc,%esp
   12f0c:	ff 75 08             	push   0x8(%ebp)
   12f0f:	e8 b6 fd ff ff       	call   12cca <list_get_size>
   12f14:	83 c4 10             	add    $0x10,%esp
   12f17:	83 f8 01             	cmp    $0x1,%eax
   12f1a:	75 17                	jne    12f33 <list_remove_last+0x71>
        list->first = list->last = (list_node_t*)0;
   12f1c:	8b 45 08             	mov    0x8(%ebp),%eax
   12f1f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12f26:	8b 45 08             	mov    0x8(%ebp),%eax
   12f29:	8b 50 04             	mov    0x4(%eax),%edx
   12f2c:	8b 45 08             	mov    0x8(%ebp),%eax
   12f2f:	89 10                	mov    %edx,(%eax)
   12f31:	eb 1b                	jmp    12f4e <list_remove_last+0x8c>
    } else {
        list->last = list->last->pre;
   12f33:	8b 45 08             	mov    0x8(%ebp),%eax
   12f36:	8b 40 04             	mov    0x4(%eax),%eax
   12f39:	8b 10                	mov    (%eax),%edx
   12f3b:	8b 45 08             	mov    0x8(%ebp),%eax
   12f3e:	89 50 04             	mov    %edx,0x4(%eax)
        list->last->next = (list_node_t*)0;
   12f41:	8b 45 08             	mov    0x8(%ebp),%eax
   12f44:	8b 40 04             	mov    0x4(%eax),%eax
   12f47:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    }

    list->size--;
   12f4e:	8b 45 08             	mov    0x8(%ebp),%eax
   12f51:	8b 40 08             	mov    0x8(%eax),%eax
   12f54:	8d 50 ff             	lea    -0x1(%eax),%edx
   12f57:	8b 45 08             	mov    0x8(%ebp),%eax
   12f5a:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   12f5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12f60:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12f67:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12f6a:	8b 50 04             	mov    0x4(%eax),%edx
   12f6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12f70:	89 10                	mov    %edx,(%eax)
    return ret;
   12f72:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   12f75:	c9                   	leave  
   12f76:	c3                   	ret    

00012f77 <list_remove>:

list_node_t* list_remove(list_t *list, list_node_t *node) {
   12f77:	55                   	push   %ebp
   12f78:	89 e5                	mov    %esp,%ebp
   12f7a:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   12f7d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12f81:	74 06                	je     12f89 <list_remove+0x12>
   12f83:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12f87:	75 19                	jne    12fa2 <list_remove+0x2b>
   12f89:	68 a4 3c 01 00       	push   $0x13ca4
   12f8e:	68 90 3d 01 00       	push   $0x13d90
   12f93:	6a 5b                	push   $0x5b
   12f95:	68 d4 3c 01 00       	push   $0x13cd4
   12f9a:	e8 98 f4 ff ff       	call   12437 <pannic>
   12f9f:	83 c4 10             	add    $0x10,%esp

    if (list_is_empty(list)) {
   12fa2:	83 ec 0c             	sub    $0xc,%esp
   12fa5:	ff 75 08             	push   0x8(%ebp)
   12fa8:	e8 e8 fc ff ff       	call   12c95 <list_is_empty>
   12fad:	83 c4 10             	add    $0x10,%esp
   12fb0:	85 c0                	test   %eax,%eax
   12fb2:	74 0a                	je     12fbe <list_remove+0x47>
        return (list_node_t*)0;
   12fb4:	b8 00 00 00 00       	mov    $0x0,%eax
   12fb9:	e9 80 00 00 00       	jmp    1303e <list_remove+0xc7>
    }

    if (node == list->first) list->first = node->next;
   12fbe:	8b 45 08             	mov    0x8(%ebp),%eax
   12fc1:	8b 00                	mov    (%eax),%eax
   12fc3:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12fc6:	75 0b                	jne    12fd3 <list_remove+0x5c>
   12fc8:	8b 45 0c             	mov    0xc(%ebp),%eax
   12fcb:	8b 50 04             	mov    0x4(%eax),%edx
   12fce:	8b 45 08             	mov    0x8(%ebp),%eax
   12fd1:	89 10                	mov    %edx,(%eax)
    if (node == list->last) list->last = node->pre;
   12fd3:	8b 45 08             	mov    0x8(%ebp),%eax
   12fd6:	8b 40 04             	mov    0x4(%eax),%eax
   12fd9:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12fdc:	75 0b                	jne    12fe9 <list_remove+0x72>
   12fde:	8b 45 0c             	mov    0xc(%ebp),%eax
   12fe1:	8b 10                	mov    (%eax),%edx
   12fe3:	8b 45 08             	mov    0x8(%ebp),%eax
   12fe6:	89 50 04             	mov    %edx,0x4(%eax)

    if (node->pre) node->pre->next = node->next;
   12fe9:	8b 45 0c             	mov    0xc(%ebp),%eax
   12fec:	8b 00                	mov    (%eax),%eax
   12fee:	85 c0                	test   %eax,%eax
   12ff0:	74 0e                	je     13000 <list_remove+0x89>
   12ff2:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ff5:	8b 00                	mov    (%eax),%eax
   12ff7:	8b 55 0c             	mov    0xc(%ebp),%edx
   12ffa:	8b 52 04             	mov    0x4(%edx),%edx
   12ffd:	89 50 04             	mov    %edx,0x4(%eax)
    if (node->next) node->next->pre = node->pre;
   13000:	8b 45 0c             	mov    0xc(%ebp),%eax
   13003:	8b 40 04             	mov    0x4(%eax),%eax
   13006:	85 c0                	test   %eax,%eax
   13008:	74 0d                	je     13017 <list_remove+0xa0>
   1300a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1300d:	8b 40 04             	mov    0x4(%eax),%eax
   13010:	8b 55 0c             	mov    0xc(%ebp),%edx
   13013:	8b 12                	mov    (%edx),%edx
   13015:	89 10                	mov    %edx,(%eax)

    node->pre = node->next = (list_node_t*)0;
   13017:	8b 45 0c             	mov    0xc(%ebp),%eax
   1301a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   13021:	8b 45 0c             	mov    0xc(%ebp),%eax
   13024:	8b 50 04             	mov    0x4(%eax),%edx
   13027:	8b 45 0c             	mov    0xc(%ebp),%eax
   1302a:	89 10                	mov    %edx,(%eax)
    list->size--;
   1302c:	8b 45 08             	mov    0x8(%ebp),%eax
   1302f:	8b 40 08             	mov    0x8(%eax),%eax
   13032:	8d 50 ff             	lea    -0x1(%eax),%edx
   13035:	8b 45 08             	mov    0x8(%ebp),%eax
   13038:	89 50 08             	mov    %edx,0x8(%eax)

    return node;
   1303b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1303e:	c9                   	leave  
   1303f:	c3                   	ret    

00013040 <inb>:
static inline uint8_t inb(uint16_t port) {
   13040:	55                   	push   %ebp
   13041:	89 e5                	mov    %esp,%ebp
   13043:	83 ec 14             	sub    $0x14,%esp
   13046:	8b 45 08             	mov    0x8(%ebp),%eax
   13049:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   1304d:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   13051:	89 c2                	mov    %eax,%edx
   13053:	ec                   	in     (%dx),%al
   13054:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   13057:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   1305b:	c9                   	leave  
   1305c:	c3                   	ret    

0001305d <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   1305d:	55                   	push   %ebp
   1305e:	89 e5                	mov    %esp,%ebp
   13060:	83 ec 08             	sub    $0x8,%esp
   13063:	8b 45 08             	mov    0x8(%ebp),%eax
   13066:	8b 55 0c             	mov    0xc(%ebp),%edx
   13069:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   1306d:	89 d0                	mov    %edx,%eax
   1306f:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   13072:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   13076:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1307a:	ee                   	out    %al,(%dx)
}
   1307b:	90                   	nop
   1307c:	c9                   	leave  
   1307d:	c3                   	ret    

0001307e <log_init>:

/**
 * @brief  初始化串行端口寄存器COM1
 * 
 */
void log_init(void) {
   1307e:	55                   	push   %ebp
   1307f:	89 e5                	mov    %esp,%ebp
   13081:	83 ec 08             	sub    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   13084:	6a 00                	push   $0x0
   13086:	68 f9 03 00 00       	push   $0x3f9
   1308b:	e8 cd ff ff ff       	call   1305d <outb>
   13090:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   13093:	68 80 00 00 00       	push   $0x80
   13098:	68 fb 03 00 00       	push   $0x3fb
   1309d:	e8 bb ff ff ff       	call   1305d <outb>
   130a2:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   130a5:	6a 03                	push   $0x3
   130a7:	68 f8 03 00 00       	push   $0x3f8
   130ac:	e8 ac ff ff ff       	call   1305d <outb>
   130b1:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   130b4:	6a 00                	push   $0x0
   130b6:	68 f9 03 00 00       	push   $0x3f9
   130bb:	e8 9d ff ff ff       	call   1305d <outb>
   130c0:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   130c3:	6a 03                	push   $0x3
   130c5:	68 fb 03 00 00       	push   $0x3fb
   130ca:	e8 8e ff ff ff       	call   1305d <outb>
   130cf:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0xc7);
   130d2:	68 c7 00 00 00       	push   $0xc7
   130d7:	68 fa 03 00 00       	push   $0x3fa
   130dc:	e8 7c ff ff ff       	call   1305d <outb>
   130e1:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0f);
   130e4:	6a 0f                	push   $0xf
   130e6:	68 fc 03 00 00       	push   $0x3fc
   130eb:	e8 6d ff ff ff       	call   1305d <outb>
   130f0:	83 c4 08             	add    $0x8,%esp

    //初始化互斥锁
    mutex_init(&mutex);
   130f3:	83 ec 0c             	sub    $0xc,%esp
   130f6:	68 c4 fb 02 00       	push   $0x2fbc4
   130fb:	e8 22 ec ff ff       	call   11d22 <mutex_init>
   13100:	83 c4 10             	add    $0x10,%esp
}
   13103:	90                   	nop
   13104:	c9                   	leave  
   13105:	c3                   	ret    

00013106 <log_printf>:
 * @brief  格式化输出到串口
 * 
 * @param formate 
 * @param ... 
 */
void log_printf(const char *formate, ...) {
   13106:	55                   	push   %ebp
   13107:	89 e5                	mov    %esp,%ebp
   13109:	81 ec 98 00 00 00    	sub    $0x98,%esp
    //1.设置字符缓冲区
    char str_buf[128];
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   1310f:	83 ec 04             	sub    $0x4,%esp
   13112:	68 80 00 00 00       	push   $0x80
   13117:	6a 00                	push   $0x0
   13119:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   1311f:	50                   	push   %eax
   13120:	e8 14 f8 ff ff       	call   12939 <kernel_memset>
   13125:	83 c4 10             	add    $0x10,%esp
    
    //2.获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   13128:	8d 45 0c             	lea    0xc(%ebp),%eax
   1312b:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, formate, args);
   13131:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   13137:	83 ec 04             	sub    $0x4,%esp
   1313a:	50                   	push   %eax
   1313b:	ff 75 08             	push   0x8(%ebp)
   1313e:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   13144:	50                   	push   %eax
   13145:	e8 d8 f8 ff ff       	call   12a22 <kernel_vsprintf>
   1314a:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    const char *p = str_buf;
   1314d:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   13153:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将以下资源放入临界资源包含区，防止在运行时发生进程切换（cpu关中断）
    mutex_lock(&mutex); //TODO:加锁
   13156:	83 ec 0c             	sub    $0xc,%esp
   13159:	68 c4 fb 02 00       	push   $0x2fbc4
   1315e:	e8 0c ec ff ff       	call   11d6f <mutex_lock>
   13163:	83 c4 10             	add    $0x10,%esp

    //3.将字符串输出到串口
    while (*p != '\0') {
   13166:	eb 57                	jmp    131bf <log_printf+0xb9>
        //4.判断串口是否正在忙碌，是则阻塞等待
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0);
   13168:	90                   	nop
   13169:	83 ec 0c             	sub    $0xc,%esp
   1316c:	68 fd 03 00 00       	push   $0x3fd
   13171:	e8 ca fe ff ff       	call   13040 <inb>
   13176:	83 c4 10             	add    $0x10,%esp
   13179:	0f b6 c0             	movzbl %al,%eax
   1317c:	83 e0 40             	and    $0x40,%eax
   1317f:	85 c0                	test   %eax,%eax
   13181:	74 e6                	je     13169 <log_printf+0x63>

        if (*p == '\n') outb(COM1_PORT, '\r');
   13183:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13186:	0f b6 00             	movzbl (%eax),%eax
   13189:	3c 0a                	cmp    $0xa,%al
   1318b:	75 12                	jne    1319f <log_printf+0x99>
   1318d:	83 ec 08             	sub    $0x8,%esp
   13190:	6a 0d                	push   $0xd
   13192:	68 f8 03 00 00       	push   $0x3f8
   13197:	e8 c1 fe ff ff       	call   1305d <outb>
   1319c:	83 c4 10             	add    $0x10,%esp
        
        outb(COM1_PORT, *(p++));
   1319f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   131a2:	8d 50 01             	lea    0x1(%eax),%edx
   131a5:	89 55 f4             	mov    %edx,-0xc(%ebp)
   131a8:	0f b6 00             	movzbl (%eax),%eax
   131ab:	0f b6 c0             	movzbl %al,%eax
   131ae:	83 ec 08             	sub    $0x8,%esp
   131b1:	50                   	push   %eax
   131b2:	68 f8 03 00 00       	push   $0x3f8
   131b7:	e8 a1 fe ff ff       	call   1305d <outb>
   131bc:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0') {
   131bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
   131c2:	0f b6 00             	movzbl (%eax),%eax
   131c5:	84 c0                	test   %al,%al
   131c7:	75 9f                	jne    13168 <log_printf+0x62>
    }
    
    //5.换行
    outb(COM1_PORT, '\r');
   131c9:	83 ec 08             	sub    $0x8,%esp
   131cc:	6a 0d                	push   $0xd
   131ce:	68 f8 03 00 00       	push   $0x3f8
   131d3:	e8 85 fe ff ff       	call   1305d <outb>
   131d8:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   131db:	83 ec 08             	sub    $0x8,%esp
   131de:	6a 0a                	push   $0xa
   131e0:	68 f8 03 00 00       	push   $0x3f8
   131e5:	e8 73 fe ff ff       	call   1305d <outb>
   131ea:	83 c4 10             	add    $0x10,%esp

    //执行完毕，将资源离开临界资源保护区，(cpu开中断)
    mutex_unlock(&mutex); //TODO:解锁
   131ed:	83 ec 0c             	sub    $0xc,%esp
   131f0:	68 c4 fb 02 00       	push   $0x2fbc4
   131f5:	e8 06 ec ff ff       	call   11e00 <mutex_unlock>
   131fa:	83 c4 10             	add    $0x10,%esp
   131fd:	90                   	nop
   131fe:	c9                   	leave  
   131ff:	c3                   	ret    
