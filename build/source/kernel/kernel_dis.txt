
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf:     file format elf32-i386
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00005f4c memsz 0x00005f4c flags r-x
    LOAD off    0x00007000 vaddr 0x00016000 paddr 0x00016000 align 2**12
         filesz 0x00000054 memsz 0x00024e40 flags rw-
    LOAD off    0x00008000 vaddr 0x80000000 paddr 0x0003b000 align 2**12
         filesz 0x000002ee memsz 0x000002ee flags rwx
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004e5f  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       000010ec  00014e60  00014e60  00005e60  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000054  00016000  00016000  00007000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00023e40  00017000  00017000  00007054  2**12
                  ALLOC
  4 .first_task   000002ee  80000000  0003b000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  5 .debug_line   00002bfb  00000000  00000000  000082ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_line_str 00000973  00000000  00000000  0000aee9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   00007c0d  00000000  00000000  0000b85c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00002188  00000000  00000000  00013469  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_aranges 000002c0  00000000  00000000  000155f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    000019c8  00000000  00000000  000158b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_rnglists 0000004e  00000000  00000000  00017280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .comment      0000002d  00000000  00000000  000172ce  2**0
                  CONTENTS, READONLY
 13 .debug_frame  00001cbc  00000000  00000000  000172fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010012 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
000102c7 l     F .text	0000000d down2
000102d4 l     F .text	00000017 up2
000102eb l     F .text	0000000c write_cr3
000102f7 l     F .text	0000000b pde_index
00010302 l     F .text	00000010 pte_index
00010312 l     F .text	00000027 pde_to_pt_addr
00010339 l     F .text	00000027 pte_to_pg_addr
00010360 l     F .text	0000000f get_pte_privilege
0001036f l     F .text	00000011 mmu_set_page_dir
00017000 l     O .bss	00007e88 paddr_alloc
0001f000 l     O .bss	00001000 kernel_page_dir
00010380 l     F .text	00000025 page_index
000103a5 l     F .text	00000056 page_ref_add
000103fb l     F .text	00000068 page_ref_sub
00010463 l     F .text	0000004e get_page_ref
000104b1 l     F .text	00000051 clear_page_ref
00010502 l     F .text	00000087 addr_alloc_init
00010589 l     F .text	00000067 addr_alloc_page
000105f0 l     F .text	0000009c addr_free_page
0001068c l     F .text	00000066 show_mem_info
000106f2 l     F .text	00000037 total_mem_size
00014fec l     O .rodata	00000011 __func__.4
00016000 l     O .data	00000050 kernal_map.3
00015000 l     O .rodata	0000000c __func__.2
00010e0f l     F .text	00000010 curr_page_dir
0001500c l     O .rodata	00000011 __func__.1
00015020 l     O .rodata	00000009 __func__.0
00000000 l    df *ABS*	00000000 task.c
000110d4 l     F .text	0000003d list_node_init
000151dc l     O .rodata	0000000f __func__.11
00011111 l     F .text	0000002d list_node_next
0001523c l     O .rodata	0000000f __func__.5
0001113e l     F .text	00000047 list_init
000151ec l     O .rodata	0000000a __func__.10
00011185 l     F .text	00000035 list_is_empty
0001524c l     O .rodata	0000000e __func__.4
000111ba l     F .text	0000002d list_get_size
0001527c l     O .rodata	0000000e __func__.1
000111e7 l     F .text	0000002c list_get_first
0001522c l     O .rodata	0000000f __func__.6
00011213 l     F .text	00000017 up2
0001122a l     F .text	00000007 hlt
00011231 l     F .text	0000000c write_cr3
0001123d l     F .text	0000001a far_jump
00011257 l     F .text	00000017 write_tr
0001126e l     F .text	00000011 mmu_set_page_dir
00020000 l     O .bss	000001b8 task_manager
000201c0 l     O .bss	00006200 task_table
000263c0 l     O .bss	00000014 task_table_lock
0001127f l     F .text	0000001f switch_to_tss
000112b9 l     F .text	00000172 tss_init
000151d0 l     O .rodata	0000000a __func__.12
000263e0 l     O .bss	00000200 empty_task_stack
000115e2 l     F .text	0000000a empty_task
000151f8 l     O .rodata	00000010 __func__.9
00015208 l     O .rodata	0000000f __func__.8
00015218 l     O .rodata	00000011 __func__.7
0001525c l     O .rodata	0000000f __func__.3
0001526c l     O .rodata	00000010 __func__.2
00011ac1 l     F .text	00000068 alloc_task
00011b29 l     F .text	00000033 free_task
00011da5 l     F .text	00000114 load_phdr
00011eb9 l     F .text	00000213 load_elf_file
000120cc l     F .text	000000f1 copy_args
0001528c l     O .rodata	0000000a __func__.0
00000000 l    df *ABS*	00000000 gate.c
00000000 l    df *ABS*	00000000 gdt.c
000123b3 l     F .text	00000028 lgdt
000265e0 l     O .bss	00010000 gdt_table
000365e0 l     O .bss	00002000 is_alloc
000385e0 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 idt.c
000125e9 l     F .text	00000007 cli
000125f0 l     F .text	00000007 sti
000125f7 l     F .text	00000007 hlt
000125fe l     F .text	0000001d inb
0001261b l     F .text	00000021 outb
0001263c l     F .text	00000028 lidt
00012664 l     F .text	00000011 read_cr2
00012675 l     F .text	00000010 read_eflags
00012685 l     F .text	0000000b write_eflags
00038600 l     O .bss	00000800 idt_table
00012690 l     F .text	0000010f print_exception_fram
0001279f l     F .text	0000003e do_default_handler
00012bb5 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 mmu.c
00000000 l    df *ABS*	00000000 syscall.c
00015860 l     O .rodata	000000e8 sys_table
00000000 l    df *ABS*	00000000 console.c
0001304a l     F .text	0000001d inb
00013067 l     F .text	00000021 outb
00038e00 l     O .bss	0000001c console_buf
00013088 l     F .text	00000052 read_cursor_pos
000130da l     F .text	00000075 update_cursor_pos
0001314f l     F .text	00000094 erase_rows
000131e3 l     F .text	00000092 scroll_up
00013275 l     F .text	00000010 move_to_col0
00013285 l     F .text	00000038 move_to_next_line
000132bd l     F .text	00000077 move_forward
00013334 l     F .text	00000094 show_char
00000000 l    df *ABS*	00000000 time.c
000134f8 l     F .text	00000021 outb
00038e1c l     O .bss	00000004 sys_tick
00013541 l     F .text	00000062 init_pit
00000000 l    df *ABS*	00000000 fs.c
000135bb l     F .text	0000001d inb
000135d8 l     F .text	00000021 outb
000135f9 l     F .text	0000001f inw
00038e20 l     O .bss	00000004 temp_pos
00013618 l     F .text	0000013d read_disk
00000000 l    df *ABS*	00000000 init.c
00015a08 l     O .rodata	0000000c __func__.1
00015a14 l     O .rodata	00000013 __func__.0
00000000 l    df *ABS*	00000000 mutex.c
0001392e l     F .text	00000047 list_init
00015ad4 l     O .rodata	0000000a __func__.1
00013975 l     F .text	00000035 list_is_empty
00015ae0 l     O .rodata	0000000e __func__.0
00015ac8 l     O .rodata	0000000b __func__.2
00000000 l    df *ABS*	00000000 sem.c
00013b40 l     F .text	00000047 list_init
00015b94 l     O .rodata	0000000a __func__.1
00013b87 l     F .text	00000035 list_is_empty
00015ba0 l     O .rodata	0000000e __func__.0
00015b88 l     O .rodata	00000009 __func__.2
00000000 l    df *ABS*	00000000 test.c
00013d10 l     F .text	00000047 list_init
00015cb4 l     O .rodata	0000000a __func__.3
00013d57 l     F .text	0000002d list_get_size
00015cc0 l     O .rodata	0000000e __func__.2
00013d84 l     F .text	0000002c list_get_first
00015ce0 l     O .rodata	0000000f __func__.0
00013db0 l     F .text	0000002d list_get_last
00015cd0 l     O .rodata	0000000e __func__.1
00000000 l    df *ABS*	00000000 assert.c
000140b8 l     F .text	00000007 hlt
00000000 l    df *ABS*	00000000 bitmap.c
00015db0 l     O .rodata	0000000c __func__.3
00015dbc l     O .rodata	0000000f __func__.2
00015dcc l     O .rodata	0000000f __func__.1
00015ddc l     O .rodata	00000013 __func__.0
00000000 l    df *ABS*	00000000 klib.c
00016050 l     O .data	00000004 num_to_char.0
00000000 l    df *ABS*	00000000 list.c
000149e4 l     F .text	00000035 list_is_empty
00015ee4 l     O .rodata	0000000e __func__.5
00014a19 l     F .text	0000002d list_get_size
00015f1c l     O .rodata	0000000e __func__.2
00015ed0 l     O .rodata	00000012 __func__.6
00015ef4 l     O .rodata	00000011 __func__.4
00015f08 l     O .rodata	00000012 __func__.3
00015f2c l     O .rodata	00000011 __func__.1
00015f40 l     O .rodata	0000000c __func__.0
00000000 l    df *ABS*	00000000 log.c
00038e24 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 first_task.c
00000000 l    df *ABS*	00000000 lib_syscall.c
0001419f g     F .text	00000078 bitmap_get_bit
00014572 g     F .text	0000004f kernel_memcpy
00013817 g     F .text	0000000a sys_close
00012dfd g     F .text	00000098 idt_enable
0001189d g     F .text	0000000a task_current
8000019b g     F .first_task	0000001b yield
00014ad1 g     F .text	0000008f list_insert_last
00010fae g     F .text	00000126 sys_sbrk
00011d44 g     F .text	00000061 sys_yield
00012911 g     F .text	0000001c do_handler_segment_not_present
000117d9 g     F .text	0000004b task_set_ready
0001431f g     F .text	00000021 bitmap_is_set
00012f34 g     F .text	0000000b idt_enable_global
000145c1 g     F .text	00000041 kernel_memset
000137f3 g     F .text	00000024 sys_lseek
00010081 g       .text	00000000 exception_handler_nmi
00010243 g       .text	00000000 exception_handler_virtual_exception
00012fbb g     F .text	0000008f do_handler_syscall
00014971 g     F .text	0000002d strings_count
00014d8f g     F .text	00000019 log_init
00011bc9 g     F .text	0000017b sys_fork
000138f1 g     F .text	0000003d init_main
000101ee g       .text	00000000 exception_handler_alignment_check
00012fa1 g     F .text	0000001a sys_print_msg
0001443b g     F .text	00000047 kernel_strcpy
00012f29 g     F .text	0000000b idt_disable_global
00016000 g       .data	00000000 s_data
80000010 g     F .first_task	0000006b first_main
00012b72 g     F .text	00000043 idt_install
8000016e g     F .first_task	0000002d execve
80000110 g     F .first_task	0000001b getpid
0001002a g       .text	00000000 exception_handler_unknown
0001009e g       .text	00000000 exception_handler_breakpoint
00012869 g     F .text	0000001c do_handler_overflow
00012ae6 g     F .text	0000001c do_handler_alignment_check
0001378e g     F .text	0000003f sys_read
0001019b g       .text	00000000 exception_handler_general_protection
00012949 g     F .text	000000b1 do_handler_general_protection
00012b56 g     F .text	0000001c do_handler_control_exception
00013ce7 g     F .text	00000029 sem_count
000127f9 g     F .text	0000001c do_handler_divider
00014217 g     F .text	00000108 bitmap_set_bit
000128d9 g     F .text	0000001c do_handler_double_fault
000129fa g     F .text	000000d0 do_handler_page_fault
80000285 g     F .first_task	00000021 isatty
0001012f g       .text	00000000 exception_handler_double_fault
00012f3f g     F .text	00000039 pic_send_eoi
00014c11 g     F .text	000000b5 list_remove_last
000117cf g     F .text	0000000a task_first_task
00010000 g       .text	00000000 s_text
00013bff g     F .text	0000006b sem_wait
00010ded g     F .text	00000022 memory_alloc_page_for
00010180 g       .text	00000000 exception_handler_stack_segment_fault
80000000 g       .first_task	00000000 first_task_entry
0001382b g     F .text	0000000a sys_fstat
0001249a g     F .text	000000b3 gdt_init
00012b3a g     F .text	0000001c do_handler_virtual_exception
000100bb g       .text	00000000 exception_handler_overflow
00010298 g       .text	00000000 simple_switch
80000258 g     F .first_task	0000002d lseek
0001027b g       .text	00000000 exception_handler_time
00012815 g     F .text	0000001c do_handler_debug
00038e40 g     O .bss	00002000 stack
00011b5c g     F .text	00000060 sys_sleep
00010e3f g     F .text	00000099 memory_free_page
00013ddd g     F .text	000002db list_test
00010260 g       .text	00000000 exception_handler_control_exception
0003b000 g       *ABS*	00000000 s_first_task
000133c8 g     F .text	000000a7 console_init
00011562 g     F .text	00000080 task_uninit
00010d35 g     F .text	000000b8 memory_alloc_for_page_dir
000100d8 g       .text	00000000 exception_handler_bound_range
00012c48 g     F .text	000001b5 idt_init
00013c6a g     F .text	0000007d sem_notify
00010f2b g     F .text	00000083 memory_copy_uvm_data
000125c2 g     F .text	00000027 gdt_free
000128a1 g     F .text	0000001c do_handler_invalid_opcode
0001014a g       .text	00000000 exception_handler_invalid_tss
00012aca g     F .text	0000001c do_handler_fpu_error
000116c9 g     F .text	00000106 task_first_init
00012b02 g     F .text	0000001c do_handler_machine_check
8000020a g     F .first_task	0000002d write
00013755 g     F .text	00000039 sys_open
800002a6 g     F .first_task	00000027 fstat
00013821 g     F .text	0000000a sys_isatty
00014a46 g     F .text	0000008b list_insert_first
00011a76 g     F .text	0000004b task_set_wakeup
0001186f g     F .text	0000002e task_ready_first
00010047 g       .text	00000000 exception_handler_divider
8000009a g     F .first_task	0000004c sys_call
00010943 g     F .text	00000085 memory_creat_uvm
00014482 g     F .text	00000051 kernel_strncpy
000137cd g     F .text	00000026 sys_write
0003b2ee g       *ABS*	00000000 mem_free_start
00013835 g     F .text	00000058 kernel_init
00013bbc g     F .text	00000043 sem_init
00010000 g       .text	00000000 _start
000146aa g     F .text	0000019d kernel_vsprintf
0001499e g     F .text	00000046 get_file_name
00010112 g       .text	00000000 exception_handler_device_unavailable
000100f5 g       .text	00000000 exception_handler_invalid_opcode
0003b000 g       .first_task	00000000 e_data
800001dd g     F .first_task	0000002d read
000139f7 g     F .text	00000091 mutex_lock
00010209 g       .text	00000000 exception_handler_machine_check
000128f5 g     F .text	0000001c do_handler_invalid_tss
00012e95 g     F .text	00000094 idt_disable
0003b2ee g       *ABS*	00000000 e_first_task
00011a1a g     F .text	0000005c task_set_sleep
000107d9 g     F .text	000000b6 memory_creat_map
00012831 g     F .text	0000001c do_handler_nmi
80000153 g     F .first_task	0000001b fork
000139aa g     F .text	0000004d mutex_init
800002cd g     F .first_task	00000021 sbrk
00010226 g       .text	00000000 exception_handler_smd_exception
00010b55 g     F .text	000000e7 memory_destroy_uvm
000140f5 g     F .text	00000016 bitmap_byte_count
000128bd g     F .text	0000001c do_handler_device_unavailable
00012f78 g     F .text	00000018 idt_enter_protection
0001088f g     F .text	000000b4 create_kernal_table
0001190f g     F .text	0000010b task_slice_end
000109c8 g     F .text	0000018d memory_copy_uvm
0001388d g     F .text	00000064 move_to_first_task
0001346f g     F .text	00000083 console_write
00014602 g     F .text	00000084 kernel_memcmp
00012b1e g     F .text	0000001c do_handler_smd_exception
000101b6 g       .text	00000000 exception_handler_page_fault
000127dd g     F .text	0000001c do_handler_unknown
00010e1f g     F .text	00000020 memory_alloc_page
000101d1 g       .text	00000000 exception_handler_fpu_error
0001129e g     F .text	0000001b task_switch_from_to
00013a88 g     F .text	000000b8 mutex_unlock
000118a7 g     F .text	00000068 task_switch
8000012b g     F .first_task	00000028 print_msg
0001453d g     F .text	00000035 kernel_strlen
00011824 g     F .text	0000004b task_set_unready
00010064 g       .text	00000000 exception_handler_debug
000123db g     F .text	000000bf segment_desc_set
00012885 g     F .text	0000001c do_handler_bound_range
000102ad g       .text	00000000 exception_handler_syscall
00014b60 g     F .text	000000b1 list_remove_first
00015f4c g       .rodata	00000000 e_text
000144d3 g     F .text	0000006a kernel_strncmp
0001410b g     F .text	00000094 bitmap_init
00010165 g       .text	00000000 exception_handler_segment_not_present
00014340 g     F .text	000000fb bitmap_alloc_nbits
000115ec g     F .text	000000dd task_manager_init
0001142b g     F .text	00000044 task_start
00010c3c g     F .text	000000f9 memory_init
000121bd g     F .text	000001af sys_execve
000140bf g     F .text	00000036 pannic
000134f2 g     F .text	00000006 console_close
00010ed8 g     F .text	00000053 memory_get_paddr
0001292d g     F .text	0000001c do_handler_stack_segment_fault
0001284d g     F .text	0000001c do_handler_breakpoint
00014da8 g     F .text	000000b7 log_printf
0001146f g     F .text	000000f3 task_init
800001b6 g     F .first_task	00000027 open
00014686 g     F .text	00000024 kernel_sprintf
00011bbc g     F .text	0000000d sys_getpid
0001254d g     F .text	00000075 gdt_alloc_desc
00014847 g     F .text	0000012a kernel_itoa
00014cc6 g     F .text	000000c9 list_remove
0001236c g     F .text	00000047 gate_desc_set
800000e6 g     F .first_task	0000002a msleep
00012f90 g     F .text	00000011 idt_leave_protection
80000237 g     F .first_task	00000021 close
00010729 g     F .text	000000b0 find_pte
00013519 g     F .text	00000028 do_handler_time
000135a3 g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
*            [&boot_info]
*    esp ->  [返回地址]
*   所以要想访问到&boot_info，则只需从当前esp的位置偏移+4字节即可
*/
_start:
    mov %esp, %ebp      //栈空间最好只用ebp来进行偏移访问
   10000:	89 e5                	mov    %esp,%ebp
    mov 0x4(%ebp), %eax //将&boot_info的值存入eax中
   10002:	8b 45 04             	mov    0x4(%ebp),%eax

    push %eax           //外部函数将参数压入栈中，再进行函数调用
   10005:	50                   	push   %eax
    call kernel_init    //调用内核初始化函数
   10006:	e8 2a 38 00 00       	call   13835 <kernel_init>

    //完成内核初始化后，进行直接跳转，以替换cs寄存器中临时的内核代码段的选择子为此时内存中真正的内核代码段选择子
    //cs:KERNEL_SELECTOR_CS, ip:gdt_reload
    jmp $KERNEL_SELECTOR_CS, $gdt_reload    
   1000b:	ea 12 00 01 00 08 00 	ljmp   $0x8,$0x10012

00010012 <gdt_reload>:

gdt_reload:
    //替换其他段寄存器中临时的内核数据段的选择子为此时内存中真正的内核数据段的选择子
    mov $KERNEL_SELECTOR_DS, %ax
   10012:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10016:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10018:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001a:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001c:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001e:	8e e8                	mov    %eax,%gs

    //重新指定栈空间位置，不再使用0~0x7c00这部分空间
    //stack段已在下面预留了KERNEL_STACK_SIZE的空间大小，直接将最高地址赋值给esp，esp便可使用这片空间
    mov $(stack + KERNEL_STACK_SIZE), %esp
   10020:	bc 40 ae 03 00       	mov    $0x3ae40,%esp

    //继续初始化内核
    //TODO:后序再来说明该函数的作用
    jmp init_main 
   10025:	e9 c7 38 00 00       	jmp    138f1 <init_main>

0001002a <exception_handler_unknown>:
//宏结束标志
.endm

//使用定义的异常宏 ,以下都是不可屏蔽中断，cpu必须处理该中断请求。
//                |异常类型|       |IDT索引| |错误码|
exception_handler unknown,              -1, 0    //未知异常
   1002a:	6a 00                	push   $0x0
   1002c:	6a ff                	push   $0xffffffff
   1002e:	60                   	pusha  
   1002f:	1e                   	push   %ds
   10030:	06                   	push   %es
   10031:	0f a0                	push   %fs
   10033:	0f a8                	push   %gs
   10035:	54                   	push   %esp
   10036:	e8 a2 27 00 00       	call   127dd <do_handler_unknown>
   1003b:	5c                   	pop    %esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider,              0,  0    //除0异常
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 a1 27 00 00       	call   127f9 <do_handler_divider>
   10058:	5c                   	pop    %esp
   10059:	0f a9                	pop    %gs
   1005b:	0f a1                	pop    %fs
   1005d:	07                   	pop    %es
   1005e:	1f                   	pop    %ds
   1005f:	61                   	popa   
   10060:	83 c4 08             	add    $0x8,%esp
   10063:	cf                   	iret   

00010064 <exception_handler_debug>:
exception_handler debug,                1,  0    //debug异常
   10064:	6a 00                	push   $0x0
   10066:	6a 01                	push   $0x1
   10068:	60                   	pusha  
   10069:	1e                   	push   %ds
   1006a:	06                   	push   %es
   1006b:	0f a0                	push   %fs
   1006d:	0f a8                	push   %gs
   1006f:	54                   	push   %esp
   10070:	e8 a0 27 00 00       	call   12815 <do_handler_debug>
   10075:	5c                   	pop    %esp
   10076:	0f a9                	pop    %gs
   10078:	0f a1                	pop    %fs
   1007a:	07                   	pop    %es
   1007b:	1f                   	pop    %ds
   1007c:	61                   	popa   
   1007d:	83 c4 08             	add    $0x8,%esp
   10080:	cf                   	iret   

00010081 <exception_handler_nmi>:
exception_handler nmi,                  2,  0
   10081:	6a 00                	push   $0x0
   10083:	6a 02                	push   $0x2
   10085:	60                   	pusha  
   10086:	1e                   	push   %ds
   10087:	06                   	push   %es
   10088:	0f a0                	push   %fs
   1008a:	0f a8                	push   %gs
   1008c:	54                   	push   %esp
   1008d:	e8 9f 27 00 00       	call   12831 <do_handler_nmi>
   10092:	5c                   	pop    %esp
   10093:	0f a9                	pop    %gs
   10095:	0f a1                	pop    %fs
   10097:	07                   	pop    %es
   10098:	1f                   	pop    %ds
   10099:	61                   	popa   
   1009a:	83 c4 08             	add    $0x8,%esp
   1009d:	cf                   	iret   

0001009e <exception_handler_breakpoint>:
exception_handler breakpoint,           3,  0
   1009e:	6a 00                	push   $0x0
   100a0:	6a 03                	push   $0x3
   100a2:	60                   	pusha  
   100a3:	1e                   	push   %ds
   100a4:	06                   	push   %es
   100a5:	0f a0                	push   %fs
   100a7:	0f a8                	push   %gs
   100a9:	54                   	push   %esp
   100aa:	e8 9e 27 00 00       	call   1284d <do_handler_breakpoint>
   100af:	5c                   	pop    %esp
   100b0:	0f a9                	pop    %gs
   100b2:	0f a1                	pop    %fs
   100b4:	07                   	pop    %es
   100b5:	1f                   	pop    %ds
   100b6:	61                   	popa   
   100b7:	83 c4 08             	add    $0x8,%esp
   100ba:	cf                   	iret   

000100bb <exception_handler_overflow>:
exception_handler overflow,             4,  0
   100bb:	6a 00                	push   $0x0
   100bd:	6a 04                	push   $0x4
   100bf:	60                   	pusha  
   100c0:	1e                   	push   %ds
   100c1:	06                   	push   %es
   100c2:	0f a0                	push   %fs
   100c4:	0f a8                	push   %gs
   100c6:	54                   	push   %esp
   100c7:	e8 9d 27 00 00       	call   12869 <do_handler_overflow>
   100cc:	5c                   	pop    %esp
   100cd:	0f a9                	pop    %gs
   100cf:	0f a1                	pop    %fs
   100d1:	07                   	pop    %es
   100d2:	1f                   	pop    %ds
   100d3:	61                   	popa   
   100d4:	83 c4 08             	add    $0x8,%esp
   100d7:	cf                   	iret   

000100d8 <exception_handler_bound_range>:
exception_handler bound_range,          5,  0
   100d8:	6a 00                	push   $0x0
   100da:	6a 05                	push   $0x5
   100dc:	60                   	pusha  
   100dd:	1e                   	push   %ds
   100de:	06                   	push   %es
   100df:	0f a0                	push   %fs
   100e1:	0f a8                	push   %gs
   100e3:	54                   	push   %esp
   100e4:	e8 9c 27 00 00       	call   12885 <do_handler_bound_range>
   100e9:	5c                   	pop    %esp
   100ea:	0f a9                	pop    %gs
   100ec:	0f a1                	pop    %fs
   100ee:	07                   	pop    %es
   100ef:	1f                   	pop    %ds
   100f0:	61                   	popa   
   100f1:	83 c4 08             	add    $0x8,%esp
   100f4:	cf                   	iret   

000100f5 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode,       6,  0
   100f5:	6a 00                	push   $0x0
   100f7:	6a 06                	push   $0x6
   100f9:	60                   	pusha  
   100fa:	1e                   	push   %ds
   100fb:	06                   	push   %es
   100fc:	0f a0                	push   %fs
   100fe:	0f a8                	push   %gs
   10100:	54                   	push   %esp
   10101:	e8 9b 27 00 00       	call   128a1 <do_handler_invalid_opcode>
   10106:	5c                   	pop    %esp
   10107:	0f a9                	pop    %gs
   10109:	0f a1                	pop    %fs
   1010b:	07                   	pop    %es
   1010c:	1f                   	pop    %ds
   1010d:	61                   	popa   
   1010e:	83 c4 08             	add    $0x8,%esp
   10111:	cf                   	iret   

00010112 <exception_handler_device_unavailable>:
exception_handler device_unavailable,   7,  0
   10112:	6a 00                	push   $0x0
   10114:	6a 07                	push   $0x7
   10116:	60                   	pusha  
   10117:	1e                   	push   %ds
   10118:	06                   	push   %es
   10119:	0f a0                	push   %fs
   1011b:	0f a8                	push   %gs
   1011d:	54                   	push   %esp
   1011e:	e8 9a 27 00 00       	call   128bd <do_handler_device_unavailable>
   10123:	5c                   	pop    %esp
   10124:	0f a9                	pop    %gs
   10126:	0f a1                	pop    %fs
   10128:	07                   	pop    %es
   10129:	1f                   	pop    %ds
   1012a:	61                   	popa   
   1012b:	83 c4 08             	add    $0x8,%esp
   1012e:	cf                   	iret   

0001012f <exception_handler_double_fault>:
exception_handler double_fault,         8,  1
   1012f:	6a 08                	push   $0x8
   10131:	60                   	pusha  
   10132:	1e                   	push   %ds
   10133:	06                   	push   %es
   10134:	0f a0                	push   %fs
   10136:	0f a8                	push   %gs
   10138:	54                   	push   %esp
   10139:	e8 9b 27 00 00       	call   128d9 <do_handler_double_fault>
   1013e:	5c                   	pop    %esp
   1013f:	0f a9                	pop    %gs
   10141:	0f a1                	pop    %fs
   10143:	07                   	pop    %es
   10144:	1f                   	pop    %ds
   10145:	61                   	popa   
   10146:	83 c4 08             	add    $0x8,%esp
   10149:	cf                   	iret   

0001014a <exception_handler_invalid_tss>:
exception_handler invalid_tss,          10, 1
   1014a:	6a 0a                	push   $0xa
   1014c:	60                   	pusha  
   1014d:	1e                   	push   %ds
   1014e:	06                   	push   %es
   1014f:	0f a0                	push   %fs
   10151:	0f a8                	push   %gs
   10153:	54                   	push   %esp
   10154:	e8 9c 27 00 00       	call   128f5 <do_handler_invalid_tss>
   10159:	5c                   	pop    %esp
   1015a:	0f a9                	pop    %gs
   1015c:	0f a1                	pop    %fs
   1015e:	07                   	pop    %es
   1015f:	1f                   	pop    %ds
   10160:	61                   	popa   
   10161:	83 c4 08             	add    $0x8,%esp
   10164:	cf                   	iret   

00010165 <exception_handler_segment_not_present>:
exception_handler segment_not_present,  11, 1
   10165:	6a 0b                	push   $0xb
   10167:	60                   	pusha  
   10168:	1e                   	push   %ds
   10169:	06                   	push   %es
   1016a:	0f a0                	push   %fs
   1016c:	0f a8                	push   %gs
   1016e:	54                   	push   %esp
   1016f:	e8 9d 27 00 00       	call   12911 <do_handler_segment_not_present>
   10174:	5c                   	pop    %esp
   10175:	0f a9                	pop    %gs
   10177:	0f a1                	pop    %fs
   10179:	07                   	pop    %es
   1017a:	1f                   	pop    %ds
   1017b:	61                   	popa   
   1017c:	83 c4 08             	add    $0x8,%esp
   1017f:	cf                   	iret   

00010180 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,  12, 1
   10180:	6a 0c                	push   $0xc
   10182:	60                   	pusha  
   10183:	1e                   	push   %ds
   10184:	06                   	push   %es
   10185:	0f a0                	push   %fs
   10187:	0f a8                	push   %gs
   10189:	54                   	push   %esp
   1018a:	e8 9e 27 00 00       	call   1292d <do_handler_stack_segment_fault>
   1018f:	5c                   	pop    %esp
   10190:	0f a9                	pop    %gs
   10192:	0f a1                	pop    %fs
   10194:	07                   	pop    %es
   10195:	1f                   	pop    %ds
   10196:	61                   	popa   
   10197:	83 c4 08             	add    $0x8,%esp
   1019a:	cf                   	iret   

0001019b <exception_handler_general_protection>:
exception_handler general_protection,   13, 1
   1019b:	6a 0d                	push   $0xd
   1019d:	60                   	pusha  
   1019e:	1e                   	push   %ds
   1019f:	06                   	push   %es
   101a0:	0f a0                	push   %fs
   101a2:	0f a8                	push   %gs
   101a4:	54                   	push   %esp
   101a5:	e8 9f 27 00 00       	call   12949 <do_handler_general_protection>
   101aa:	5c                   	pop    %esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa   
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret   

000101b6 <exception_handler_page_fault>:
exception_handler page_fault,           14, 1
   101b6:	6a 0e                	push   $0xe
   101b8:	60                   	pusha  
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 35 28 00 00       	call   129fa <do_handler_page_fault>
   101c5:	5c                   	pop    %esp
   101c6:	0f a9                	pop    %gs
   101c8:	0f a1                	pop    %fs
   101ca:	07                   	pop    %es
   101cb:	1f                   	pop    %ds
   101cc:	61                   	popa   
   101cd:	83 c4 08             	add    $0x8,%esp
   101d0:	cf                   	iret   

000101d1 <exception_handler_fpu_error>:
exception_handler fpu_error,            16, 0
   101d1:	6a 00                	push   $0x0
   101d3:	6a 10                	push   $0x10
   101d5:	60                   	pusha  
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 e8 28 00 00       	call   12aca <do_handler_fpu_error>
   101e2:	5c                   	pop    %esp
   101e3:	0f a9                	pop    %gs
   101e5:	0f a1                	pop    %fs
   101e7:	07                   	pop    %es
   101e8:	1f                   	pop    %ds
   101e9:	61                   	popa   
   101ea:	83 c4 08             	add    $0x8,%esp
   101ed:	cf                   	iret   

000101ee <exception_handler_alignment_check>:
exception_handler alignment_check,      17, 1
   101ee:	6a 11                	push   $0x11
   101f0:	60                   	pusha  
   101f1:	1e                   	push   %ds
   101f2:	06                   	push   %es
   101f3:	0f a0                	push   %fs
   101f5:	0f a8                	push   %gs
   101f7:	54                   	push   %esp
   101f8:	e8 e9 28 00 00       	call   12ae6 <do_handler_alignment_check>
   101fd:	5c                   	pop    %esp
   101fe:	0f a9                	pop    %gs
   10200:	0f a1                	pop    %fs
   10202:	07                   	pop    %es
   10203:	1f                   	pop    %ds
   10204:	61                   	popa   
   10205:	83 c4 08             	add    $0x8,%esp
   10208:	cf                   	iret   

00010209 <exception_handler_machine_check>:
exception_handler machine_check,        18, 0
   10209:	6a 00                	push   $0x0
   1020b:	6a 12                	push   $0x12
   1020d:	60                   	pusha  
   1020e:	1e                   	push   %ds
   1020f:	06                   	push   %es
   10210:	0f a0                	push   %fs
   10212:	0f a8                	push   %gs
   10214:	54                   	push   %esp
   10215:	e8 e8 28 00 00       	call   12b02 <do_handler_machine_check>
   1021a:	5c                   	pop    %esp
   1021b:	0f a9                	pop    %gs
   1021d:	0f a1                	pop    %fs
   1021f:	07                   	pop    %es
   10220:	1f                   	pop    %ds
   10221:	61                   	popa   
   10222:	83 c4 08             	add    $0x8,%esp
   10225:	cf                   	iret   

00010226 <exception_handler_smd_exception>:
exception_handler smd_exception,        19, 0
   10226:	6a 00                	push   $0x0
   10228:	6a 13                	push   $0x13
   1022a:	60                   	pusha  
   1022b:	1e                   	push   %ds
   1022c:	06                   	push   %es
   1022d:	0f a0                	push   %fs
   1022f:	0f a8                	push   %gs
   10231:	54                   	push   %esp
   10232:	e8 e7 28 00 00       	call   12b1e <do_handler_smd_exception>
   10237:	5c                   	pop    %esp
   10238:	0f a9                	pop    %gs
   1023a:	0f a1                	pop    %fs
   1023c:	07                   	pop    %es
   1023d:	1f                   	pop    %ds
   1023e:	61                   	popa   
   1023f:	83 c4 08             	add    $0x8,%esp
   10242:	cf                   	iret   

00010243 <exception_handler_virtual_exception>:
exception_handler virtual_exception,    20, 0
   10243:	6a 00                	push   $0x0
   10245:	6a 14                	push   $0x14
   10247:	60                   	pusha  
   10248:	1e                   	push   %ds
   10249:	06                   	push   %es
   1024a:	0f a0                	push   %fs
   1024c:	0f a8                	push   %gs
   1024e:	54                   	push   %esp
   1024f:	e8 e6 28 00 00       	call   12b3a <do_handler_virtual_exception>
   10254:	5c                   	pop    %esp
   10255:	0f a9                	pop    %gs
   10257:	0f a1                	pop    %fs
   10259:	07                   	pop    %es
   1025a:	1f                   	pop    %ds
   1025b:	61                   	popa   
   1025c:	83 c4 08             	add    $0x8,%esp
   1025f:	cf                   	iret   

00010260 <exception_handler_control_exception>:
exception_handler control_exception,    21, 1
   10260:	6a 15                	push   $0x15
   10262:	60                   	pusha  
   10263:	1e                   	push   %ds
   10264:	06                   	push   %es
   10265:	0f a0                	push   %fs
   10267:	0f a8                	push   %gs
   10269:	54                   	push   %esp
   1026a:	e8 e7 28 00 00       	call   12b56 <do_handler_control_exception>
   1026f:	5c                   	pop    %esp
   10270:	0f a9                	pop    %gs
   10272:	0f a1                	pop    %fs
   10274:	07                   	pop    %es
   10275:	1f                   	pop    %ds
   10276:	61                   	popa   
   10277:	83 c4 08             	add    $0x8,%esp
   1027a:	cf                   	iret   

0001027b <exception_handler_time>:

//定时器的中断处理函数
exception_handler time,                 0x20, 0 
   1027b:	6a 00                	push   $0x0
   1027d:	6a 20                	push   $0x20
   1027f:	60                   	pusha  
   10280:	1e                   	push   %ds
   10281:	06                   	push   %es
   10282:	0f a0                	push   %fs
   10284:	0f a8                	push   %gs
   10286:	54                   	push   %esp
   10287:	e8 8d 32 00 00       	call   13519 <do_handler_time>
   1028c:	5c                   	pop    %esp
   1028d:	0f a9                	pop    %gs
   1028f:	0f a1                	pop    %fs
   10291:	07                   	pop    %es
   10292:	1f                   	pop    %ds
   10293:	61                   	popa   
   10294:	83 c4 08             	add    $0x8,%esp
   10297:	cf                   	iret   

00010298 <simple_switch>:
//TODO:该部分为另一种任务切换时cpu上下文环境的保存方法，并未被调用
    .text
    .global simple_switch
simple_switch:  //simple_switch(from, to)
    //1.获取参数，跳过4字节的 eip
    mov 8(%esp), %edx   //获取 to, 地址(指针) --> 目标任务的栈空间对应的 esp 的值
   10298:	8b 54 24 08          	mov    0x8(%esp),%edx
    mov 4(%esp), %eax   //获取 from, 地址(指针) --> 当前任务的栈空间对应的 esp 的值
   1029c:	8b 44 24 04          	mov    0x4(%esp),%eax


    //2.被调用者保存当前任务的 ebp, ebx, esi, edi 到当前任务的栈中
    //eax, ecx, edx, eip, eflags 已由调用者压入当前任务的栈中
    push %ebp
   102a0:	55                   	push   %ebp
    push %ebx
   102a1:	53                   	push   %ebx
    push %esi
   102a2:	56                   	push   %esi
    push %edi
   102a3:	57                   	push   %edi

    //3.更新当前任务栈空间的 esp
    mov %esp, (%eax)
   102a4:	89 20                	mov    %esp,(%eax)

    //3.进行任务栈的切换
    mov (%edx), %esp
   102a6:	8b 22                	mov    (%edx),%esp


    //4.恢复切换后的任务状态，ebp, ebx, esi, edi 手动恢复
    //eax, ecx, edx, eip, eflags, 是在当前任务(c函数)调用simple_switch时已压入当前任务栈中，
    //调用 ret 后会自行弹出并恢复
    pop %edi
   102a8:	5f                   	pop    %edi
    pop %esi
   102a9:	5e                   	pop    %esi
    pop %ebx
   102aa:	5b                   	pop    %ebx
    pop %ebp
   102ab:	5d                   	pop    %ebp

    //5.恢复切换后的任务执行流，相当于此时 esp ->[eip]， 即 pop %eip
    ret 
   102ac:	c3                   	ret    

000102ad <exception_handler_syscall>:

    //注意：cpu只自动保护了 cs eip ss esp寄存器，其它寄存器没有被维护，可能在调用门处理函数里被修改
    //所以需要手动压入，即保护cpu上下文环境，也为fork系统调用提供cpu上下文环境

    //1.用 pusha 指令压入8个通用寄存器
    pusha
   102ad:	60                   	pusha  

    //2.压入其他段寄存器
    push %ds
   102ae:	1e                   	push   %ds
    push %es
   102af:	06                   	push   %es
    push %fs
   102b0:	0f a0                	push   %fs
    push %gs
   102b2:	0f a8                	push   %gs

    //3.压入eflags寄存器
    pushf
   102b4:	9c                   	pushf  

    //4.将当前 esp 的值压入栈中，当作调用门栈帧的起始地址
    push %esp
   102b5:	54                   	push   %esp

    //5.调用系统调用处理函数，按id进一步判断需要进行的系统调用并执行
    call do_handler_syscall
   102b6:	e8 00 2d 00 00       	call   12fbb <do_handler_syscall>


    //5.恢复现场
    pop %esp
   102bb:	5c                   	pop    %esp
    popf
   102bc:	9d                   	popf   
    pop %gs
   102bd:	0f a9                	pop    %gs
    pop %fs
   102bf:	0f a1                	pop    %fs
    pop %es
   102c1:	07                   	pop    %es
    pop %ds
   102c2:	1f                   	pop    %ds
    popa
   102c3:	61                   	popa   
    //如果要变换特权级，它会加载被调用者堆栈上的CS和EIP，并增加ESP跳过参数，
    //然后ESP将指向被保存过的调用者SS和ESP¹。
    //它还会对目标代码段特权级和目标栈段特权级做严格的检查，
    //要求代码段可执行特权级CPL (即DPL) == 栈段选择子请求特权级RPL == 栈段目标内存特权级DPL²。
    
    retf $(5*4) 
   102c4:	ca 14 00             	lret   $0x14

000102c7 <down2>:
 * 
 * @param size 
 * @param bound 一般取2的n次方
 * @return uint32_t 
 */
static inline uint32_t down2(uint32_t size, uint32_t bound) {
   102c7:	55                   	push   %ebp
   102c8:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);  
   102ca:	8b 45 0c             	mov    0xc(%ebp),%eax
   102cd:	f7 d8                	neg    %eax
   102cf:	23 45 08             	and    0x8(%ebp),%eax
}
   102d2:	5d                   	pop    %ebp
   102d3:	c3                   	ret    

000102d4 <up2>:
 * 
 * @param size 
 * @param bound 一般取2的n次方
 * @return uint32_t 
 */
static inline uint32_t up2(uint32_t size, uint32_t bound) {
   102d4:	55                   	push   %ebp
   102d5:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   102d7:	8b 55 08             	mov    0x8(%ebp),%edx
   102da:	8b 45 0c             	mov    0xc(%ebp),%eax
   102dd:	01 d0                	add    %edx,%eax
   102df:	8d 50 ff             	lea    -0x1(%eax),%edx
   102e2:	8b 45 0c             	mov    0xc(%ebp),%eax
   102e5:	f7 d8                	neg    %eax
   102e7:	21 d0                	and    %edx,%eax
}
   102e9:	5d                   	pop    %ebp
   102ea:	c3                   	ret    

000102eb <write_cr3>:
 * 它含有存放页目录表页面的物理地址，
 * 因此 CR3 也被称为 PDBR（Page-Directory Base address Register）。
 *
 * @param data
 */
static inline void write_cr3(uint32_t data) {
   102eb:	55                   	push   %ebp
   102ec:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("mov %[v], %%cr3" : : [v] "r"(data));
   102ee:	8b 45 08             	mov    0x8(%ebp),%eax
   102f1:	0f 22 d8             	mov    %eax,%cr3
}
   102f4:	90                   	nop
   102f5:	5d                   	pop    %ebp
   102f6:	c3                   	ret    

000102f7 <pde_index>:
 * @brief 获取虚拟地址的高10位，及对应的页目录项在页目录表中的索引
 * 
 * @param vstart 
 * @return uint32_t 
 */
static inline uint32_t pde_index(uint32_t vstart) {
   102f7:	55                   	push   %ebp
   102f8:	89 e5                	mov    %esp,%ebp
    return (vstart >> 22);
   102fa:	8b 45 08             	mov    0x8(%ebp),%eax
   102fd:	c1 e8 16             	shr    $0x16,%eax
}
   10300:	5d                   	pop    %ebp
   10301:	c3                   	ret    

00010302 <pte_index>:
 * @brief 获取虚拟地址的次10位，及对应的页表项在页表中的索引
 * 
 * @param vstart 
 * @return uint32_t 
 */
static inline uint32_t pte_index(uint32_t vstart) {
   10302:	55                   	push   %ebp
   10303:	89 e5                	mov    %esp,%ebp
    return (vstart >> 12) & 0x3ff;
   10305:	8b 45 08             	mov    0x8(%ebp),%eax
   10308:	c1 e8 0c             	shr    $0xc,%eax
   1030b:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   10310:	5d                   	pop    %ebp
   10311:	c3                   	ret    

00010312 <pde_to_pt_addr>:
 * @brief 获取页目录项中对应的页表的起始地址，及该页表第一个页表项的地址
 * 
 * @param pde 页目录项
 * @return uint32_t 返回的页表的地址
 */
static inline uint32_t pde_to_pt_addr(pde_t *pde) {
   10312:	55                   	push   %ebp
   10313:	89 e5                	mov    %esp,%ebp
    //高20位为页表的物理地址的有效位，将其左移12位，及按4kb对齐后才是该页的物理地址
    return pde->phy_pt_addr << 12;
   10315:	8b 45 08             	mov    0x8(%ebp),%eax
   10318:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   1031c:	c0 ea 04             	shr    $0x4,%dl
   1031f:	0f b6 ca             	movzbl %dl,%ecx
   10322:	0f b6 50 02          	movzbl 0x2(%eax),%edx
   10326:	c1 e2 04             	shl    $0x4,%edx
   10329:	09 ca                	or     %ecx,%edx
   1032b:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   1032f:	c1 e0 0c             	shl    $0xc,%eax
   10332:	09 d0                	or     %edx,%eax
   10334:	c1 e0 0c             	shl    $0xc,%eax
}
   10337:	5d                   	pop    %ebp
   10338:	c3                   	ret    

00010339 <pte_to_pg_addr>:
 * @brief 获取页表项中对应的页的起始地址
 * 
 * @param pte 页表项
 * @return uint32_t 返回的页的地址
 */
static inline uint32_t pte_to_pg_addr(pte_t *pte) {
   10339:	55                   	push   %ebp
   1033a:	89 e5                	mov    %esp,%ebp
    //高20位为页的物理地址有效位，将其左移12位，及按4kb对齐后才是该页的物理地址
    return pte->phy_page_addr << 12;
   1033c:	8b 45 08             	mov    0x8(%ebp),%eax
   1033f:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   10343:	c0 ea 04             	shr    $0x4,%dl
   10346:	0f b6 ca             	movzbl %dl,%ecx
   10349:	0f b6 50 02          	movzbl 0x2(%eax),%edx
   1034d:	c1 e2 04             	shl    $0x4,%edx
   10350:	09 ca                	or     %ecx,%edx
   10352:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   10356:	c1 e0 0c             	shl    $0xc,%eax
   10359:	09 d0                	or     %edx,%eax
   1035b:	c1 e0 0c             	shl    $0xc,%eax
}
   1035e:	5d                   	pop    %ebp
   1035f:	c3                   	ret    

00010360 <get_pte_privilege>:
 * @brief 获取页表项的权限
 * 
 * @param pte 
 * @return uint32_t 
 */
static inline uint32_t get_pte_privilege(pte_t *pte) {
   10360:	55                   	push   %ebp
   10361:	89 e5                	mov    %esp,%ebp
    return pte->v & 0x1ff;  //直接获取低9位即为所有权限
   10363:	8b 45 08             	mov    0x8(%ebp),%eax
   10366:	8b 00                	mov    (%eax),%eax
   10368:	25 ff 01 00 00       	and    $0x1ff,%eax
}
   1036d:	5d                   	pop    %ebp
   1036e:	c3                   	ret    

0001036f <mmu_set_page_dir>:
/**
 * @brief 设置页目录表的起始地址，将起始地址写入CR3寄存器
 * 
 * @param paddr 页目录表的物理起始地址
 */
static inline void mmu_set_page_dir(uint32_t paddr) {
   1036f:	55                   	push   %ebp
   10370:	89 e5                	mov    %esp,%ebp

    //设置cr3寄存器的高20位为页目录表的地址，因为按4kb对齐，所以
    //页目录表的起始地址page_dir的高20位才为有效位，低12位为0，将cr3的低12位就设置为0
    write_cr3(paddr);
   10372:	ff 75 08             	push   0x8(%ebp)
   10375:	e8 71 ff ff ff       	call   102eb <write_cr3>
   1037a:	83 c4 04             	add    $0x4,%esp
}
   1037d:	90                   	nop
   1037e:	c9                   	leave  
   1037f:	c3                   	ret    

00010380 <page_index>:
 * @brief 获取页的索引
 * 
 * @param alloc 
 * @param page_addr 
 */
static inline int page_index(addr_alloc_t *alloc, uint32_t page_addr) {
   10380:	55                   	push   %ebp
   10381:	89 e5                	mov    %esp,%ebp
   10383:	53                   	push   %ebx
  return (page_addr - alloc->start) / alloc->page_size;
   10384:	8b 45 08             	mov    0x8(%ebp),%eax
   10387:	8b 50 1c             	mov    0x1c(%eax),%edx
   1038a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1038d:	29 d0                	sub    %edx,%eax
   1038f:	89 c1                	mov    %eax,%ecx
   10391:	8b 45 08             	mov    0x8(%ebp),%eax
   10394:	8b 58 24             	mov    0x24(%eax),%ebx
   10397:	89 c8                	mov    %ecx,%eax
   10399:	ba 00 00 00 00       	mov    $0x0,%edx
   1039e:	f7 f3                	div    %ebx
}
   103a0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   103a3:	c9                   	leave  
   103a4:	c3                   	ret    

000103a5 <page_ref_add>:
 * @brief 为页的引用计数+1
 * 
 * @param alloc 
 * @param page_addr 页起始地址
 */
static inline void page_ref_add(addr_alloc_t *alloc, uint32_t page_addr) {
   103a5:	55                   	push   %ebp
   103a6:	89 e5                	mov    %esp,%ebp
   103a8:	83 ec 18             	sub    $0x18,%esp
  //计算出页的索引
  int index = page_index(alloc, page_addr);
   103ab:	ff 75 0c             	push   0xc(%ebp)
   103ae:	ff 75 08             	push   0x8(%ebp)
   103b1:	e8 ca ff ff ff       	call   10380 <page_index>
   103b6:	83 c4 08             	add    $0x8,%esp
   103b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
  
  mutex_lock(&alloc->mutex);
   103bc:	8b 45 08             	mov    0x8(%ebp),%eax
   103bf:	83 ec 0c             	sub    $0xc,%esp
   103c2:	50                   	push   %eax
   103c3:	e8 2f 36 00 00       	call   139f7 <mutex_lock>
   103c8:	83 c4 10             	add    $0x10,%esp
  //引用计数+1
  alloc->page_ref[index]++;
   103cb:	8b 55 08             	mov    0x8(%ebp),%edx
   103ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
   103d1:	01 d0                	add    %edx,%eax
   103d3:	83 c0 28             	add    $0x28,%eax
   103d6:	0f b6 00             	movzbl (%eax),%eax
   103d9:	8d 50 01             	lea    0x1(%eax),%edx
   103dc:	8b 4d 08             	mov    0x8(%ebp),%ecx
   103df:	8b 45 f4             	mov    -0xc(%ebp),%eax
   103e2:	01 c8                	add    %ecx,%eax
   103e4:	83 c0 28             	add    $0x28,%eax
   103e7:	88 10                	mov    %dl,(%eax)

  mutex_unlock(&alloc->mutex);
   103e9:	8b 45 08             	mov    0x8(%ebp),%eax
   103ec:	83 ec 0c             	sub    $0xc,%esp
   103ef:	50                   	push   %eax
   103f0:	e8 93 36 00 00       	call   13a88 <mutex_unlock>
   103f5:	83 c4 10             	add    $0x10,%esp
 }
   103f8:	90                   	nop
   103f9:	c9                   	leave  
   103fa:	c3                   	ret    

000103fb <page_ref_sub>:
 * @brief 页的引用计数-1
 * 
 * @param alloc 
 * @param page_addr 
 */
static inline void page_ref_sub(addr_alloc_t *alloc, uint32_t page_addr) {
   103fb:	55                   	push   %ebp
   103fc:	89 e5                	mov    %esp,%ebp
   103fe:	83 ec 18             	sub    $0x18,%esp
  //计算出页的索引
  int index = page_index(alloc, page_addr);
   10401:	ff 75 0c             	push   0xc(%ebp)
   10404:	ff 75 08             	push   0x8(%ebp)
   10407:	e8 74 ff ff ff       	call   10380 <page_index>
   1040c:	83 c4 08             	add    $0x8,%esp
   1040f:	89 45 f4             	mov    %eax,-0xc(%ebp)

  mutex_lock(&alloc->mutex);
   10412:	8b 45 08             	mov    0x8(%ebp),%eax
   10415:	83 ec 0c             	sub    $0xc,%esp
   10418:	50                   	push   %eax
   10419:	e8 d9 35 00 00       	call   139f7 <mutex_lock>
   1041e:	83 c4 10             	add    $0x10,%esp
  //引用计数-1
  if (alloc->page_ref[index] > 0) 
   10421:	8b 55 08             	mov    0x8(%ebp),%edx
   10424:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10427:	01 d0                	add    %edx,%eax
   10429:	83 c0 28             	add    $0x28,%eax
   1042c:	0f b6 00             	movzbl (%eax),%eax
   1042f:	84 c0                	test   %al,%al
   10431:	74 1e                	je     10451 <page_ref_sub+0x56>
      alloc->page_ref[index]--;    
   10433:	8b 55 08             	mov    0x8(%ebp),%edx
   10436:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10439:	01 d0                	add    %edx,%eax
   1043b:	83 c0 28             	add    $0x28,%eax
   1043e:	0f b6 00             	movzbl (%eax),%eax
   10441:	8d 50 ff             	lea    -0x1(%eax),%edx
   10444:	8b 4d 08             	mov    0x8(%ebp),%ecx
   10447:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1044a:	01 c8                	add    %ecx,%eax
   1044c:	83 c0 28             	add    $0x28,%eax
   1044f:	88 10                	mov    %dl,(%eax)

  mutex_unlock(&alloc->mutex);
   10451:	8b 45 08             	mov    0x8(%ebp),%eax
   10454:	83 ec 0c             	sub    $0xc,%esp
   10457:	50                   	push   %eax
   10458:	e8 2b 36 00 00       	call   13a88 <mutex_unlock>
   1045d:	83 c4 10             	add    $0x10,%esp
 }
   10460:	90                   	nop
   10461:	c9                   	leave  
   10462:	c3                   	ret    

00010463 <get_page_ref>:
 * @brief 获取页的引用计数
 * 
 * @param alloc 
 * @param page_addr 
 */
static inline int get_page_ref(addr_alloc_t *alloc, uint32_t page_addr) {
   10463:	55                   	push   %ebp
   10464:	89 e5                	mov    %esp,%ebp
   10466:	83 ec 18             	sub    $0x18,%esp
    //计算出页的索引
  int index = page_index(alloc, page_addr);
   10469:	ff 75 0c             	push   0xc(%ebp)
   1046c:	ff 75 08             	push   0x8(%ebp)
   1046f:	e8 0c ff ff ff       	call   10380 <page_index>
   10474:	83 c4 08             	add    $0x8,%esp
   10477:	89 45 f4             	mov    %eax,-0xc(%ebp)

  mutex_lock(&alloc->mutex);
   1047a:	8b 45 08             	mov    0x8(%ebp),%eax
   1047d:	83 ec 0c             	sub    $0xc,%esp
   10480:	50                   	push   %eax
   10481:	e8 71 35 00 00       	call   139f7 <mutex_lock>
   10486:	83 c4 10             	add    $0x10,%esp

  int ref = alloc->page_ref[index];
   10489:	8b 55 08             	mov    0x8(%ebp),%edx
   1048c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1048f:	01 d0                	add    %edx,%eax
   10491:	83 c0 28             	add    $0x28,%eax
   10494:	0f b6 00             	movzbl (%eax),%eax
   10497:	0f b6 c0             	movzbl %al,%eax
   1049a:	89 45 f0             	mov    %eax,-0x10(%ebp)

  mutex_unlock(&alloc->mutex);
   1049d:	8b 45 08             	mov    0x8(%ebp),%eax
   104a0:	83 ec 0c             	sub    $0xc,%esp
   104a3:	50                   	push   %eax
   104a4:	e8 df 35 00 00       	call   13a88 <mutex_unlock>
   104a9:	83 c4 10             	add    $0x10,%esp

  return ref;
   104ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   104af:	c9                   	leave  
   104b0:	c3                   	ret    

000104b1 <clear_page_ref>:
 * @brief 清除所有页的引用
 * 
 * @param alloc 
 * @return int 
 */
static inline void clear_page_ref(addr_alloc_t *alloc) {
   104b1:	55                   	push   %ebp
   104b2:	89 e5                	mov    %esp,%ebp
   104b4:	83 ec 08             	sub    $0x8,%esp

  mutex_lock(&alloc->mutex);
   104b7:	8b 45 08             	mov    0x8(%ebp),%eax
   104ba:	83 ec 0c             	sub    $0xc,%esp
   104bd:	50                   	push   %eax
   104be:	e8 34 35 00 00       	call   139f7 <mutex_lock>
   104c3:	83 c4 10             	add    $0x10,%esp

  kernel_memset(alloc->page_ref, 0, alloc->size / alloc->page_size);
   104c6:	8b 45 08             	mov    0x8(%ebp),%eax
   104c9:	8b 40 20             	mov    0x20(%eax),%eax
   104cc:	8b 55 08             	mov    0x8(%ebp),%edx
   104cf:	8b 4a 24             	mov    0x24(%edx),%ecx
   104d2:	ba 00 00 00 00       	mov    $0x0,%edx
   104d7:	f7 f1                	div    %ecx
   104d9:	89 c2                	mov    %eax,%edx
   104db:	8b 45 08             	mov    0x8(%ebp),%eax
   104de:	83 c0 28             	add    $0x28,%eax
   104e1:	83 ec 04             	sub    $0x4,%esp
   104e4:	52                   	push   %edx
   104e5:	6a 00                	push   $0x0
   104e7:	50                   	push   %eax
   104e8:	e8 d4 40 00 00       	call   145c1 <kernel_memset>
   104ed:	83 c4 10             	add    $0x10,%esp

  mutex_unlock(&alloc->mutex);
   104f0:	8b 45 08             	mov    0x8(%ebp),%eax
   104f3:	83 ec 0c             	sub    $0xc,%esp
   104f6:	50                   	push   %eax
   104f7:	e8 8c 35 00 00       	call   13a88 <mutex_unlock>
   104fc:	83 c4 10             	add    $0x10,%esp
}
   104ff:	90                   	nop
   10500:	c9                   	leave  
   10501:	c3                   	ret    

00010502 <addr_alloc_init>:
 * @param start 管理内存的起始地址
 * @param size 管理内存的大小
 * @param page_size 管理的内存页的大小
 */
static void addr_alloc_init(addr_alloc_t *alloc, uint8_t *bits, uint32_t start,
                            uint32_t size, uint32_t page_size) {
   10502:	55                   	push   %ebp
   10503:	89 e5                	mov    %esp,%ebp
   10505:	83 ec 08             	sub    $0x8,%esp
  mutex_init(&alloc->mutex);
   10508:	8b 45 08             	mov    0x8(%ebp),%eax
   1050b:	83 ec 0c             	sub    $0xc,%esp
   1050e:	50                   	push   %eax
   1050f:	e8 96 34 00 00       	call   139aa <mutex_init>
   10514:	83 c4 10             	add    $0x10,%esp
  alloc->start = start;
   10517:	8b 45 08             	mov    0x8(%ebp),%eax
   1051a:	8b 55 10             	mov    0x10(%ebp),%edx
   1051d:	89 50 1c             	mov    %edx,0x1c(%eax)
  alloc->size = size;
   10520:	8b 45 08             	mov    0x8(%ebp),%eax
   10523:	8b 55 14             	mov    0x14(%ebp),%edx
   10526:	89 50 20             	mov    %edx,0x20(%eax)
  alloc->page_size = page_size;
   10529:	8b 45 08             	mov    0x8(%ebp),%eax
   1052c:	8b 55 18             	mov    0x18(%ebp),%edx
   1052f:	89 50 24             	mov    %edx,0x24(%eax)
  bitmap_init(&alloc->bitmap, bits, alloc->size / alloc->page_size, 0);
   10532:	8b 45 08             	mov    0x8(%ebp),%eax
   10535:	8b 40 20             	mov    0x20(%eax),%eax
   10538:	8b 55 08             	mov    0x8(%ebp),%edx
   1053b:	8b 4a 24             	mov    0x24(%edx),%ecx
   1053e:	ba 00 00 00 00       	mov    $0x0,%edx
   10543:	f7 f1                	div    %ecx
   10545:	89 c2                	mov    %eax,%edx
   10547:	8b 45 08             	mov    0x8(%ebp),%eax
   1054a:	83 c0 14             	add    $0x14,%eax
   1054d:	6a 00                	push   $0x0
   1054f:	52                   	push   %edx
   10550:	ff 75 0c             	push   0xc(%ebp)
   10553:	50                   	push   %eax
   10554:	e8 b2 3b 00 00       	call   1410b <bitmap_init>
   10559:	83 c4 10             	add    $0x10,%esp
  //清空页的引用数组
  kernel_memset(alloc->page_ref, 0,  alloc->size / alloc->page_size);
   1055c:	8b 45 08             	mov    0x8(%ebp),%eax
   1055f:	8b 40 20             	mov    0x20(%eax),%eax
   10562:	8b 55 08             	mov    0x8(%ebp),%edx
   10565:	8b 4a 24             	mov    0x24(%edx),%ecx
   10568:	ba 00 00 00 00       	mov    $0x0,%edx
   1056d:	f7 f1                	div    %ecx
   1056f:	89 c2                	mov    %eax,%edx
   10571:	8b 45 08             	mov    0x8(%ebp),%eax
   10574:	83 c0 28             	add    $0x28,%eax
   10577:	83 ec 04             	sub    $0x4,%esp
   1057a:	52                   	push   %edx
   1057b:	6a 00                	push   $0x0
   1057d:	50                   	push   %eax
   1057e:	e8 3e 40 00 00       	call   145c1 <kernel_memset>
   10583:	83 c4 10             	add    $0x10,%esp
}
   10586:	90                   	nop
   10587:	c9                   	leave  
   10588:	c3                   	ret    

00010589 <addr_alloc_page>:
 *
 * @param alloc
 * @param page_count 申请页的数量
 * @return uint32_t 申请的第一个页的起始地址， 0：分配失败
 */
static uint32_t addr_alloc_page(addr_alloc_t *alloc, int page_count) {
   10589:	55                   	push   %ebp
   1058a:	89 e5                	mov    %esp,%ebp
   1058c:	83 ec 18             	sub    $0x18,%esp
  uint32_t addr = 0;  // 记录分配的页的起始地址
   1058f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  mutex_lock(&alloc->mutex);
   10596:	8b 45 08             	mov    0x8(%ebp),%eax
   10599:	83 ec 0c             	sub    $0xc,%esp
   1059c:	50                   	push   %eax
   1059d:	e8 55 34 00 00       	call   139f7 <mutex_lock>
   105a2:	83 c4 10             	add    $0x10,%esp

  // 在位图中取连续的page_count个页进行分配
  int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   105a5:	8b 45 08             	mov    0x8(%ebp),%eax
   105a8:	83 c0 14             	add    $0x14,%eax
   105ab:	83 ec 04             	sub    $0x4,%esp
   105ae:	ff 75 0c             	push   0xc(%ebp)
   105b1:	6a 00                	push   $0x0
   105b3:	50                   	push   %eax
   105b4:	e8 87 3d 00 00       	call   14340 <bitmap_alloc_nbits>
   105b9:	83 c4 10             	add    $0x10,%esp
   105bc:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (page_count >= 0) {
   105bf:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   105c3:	78 17                	js     105dc <addr_alloc_page+0x53>
    // 计算出申请到的第一个页的起始地址
    addr = alloc->start + page_index * alloc->page_size;
   105c5:	8b 45 08             	mov    0x8(%ebp),%eax
   105c8:	8b 48 1c             	mov    0x1c(%eax),%ecx
   105cb:	8b 45 08             	mov    0x8(%ebp),%eax
   105ce:	8b 50 24             	mov    0x24(%eax),%edx
   105d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   105d4:	0f af c2             	imul   %edx,%eax
   105d7:	01 c8                	add    %ecx,%eax
   105d9:	89 45 f4             	mov    %eax,-0xc(%ebp)
  }

  mutex_unlock(&alloc->mutex);
   105dc:	8b 45 08             	mov    0x8(%ebp),%eax
   105df:	83 ec 0c             	sub    $0xc,%esp
   105e2:	50                   	push   %eax
   105e3:	e8 a0 34 00 00       	call   13a88 <mutex_unlock>
   105e8:	83 c4 10             	add    $0x10,%esp

  return addr;
   105eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   105ee:	c9                   	leave  
   105ef:	c3                   	ret    

000105f0 <addr_free_page>:
 *
 * @param alloc
 * @param addr 第一个内存页的起始地址
 * @param page_count 内存页的数量
 */
static void addr_free_page(addr_alloc_t *alloc, uint32_t addr, int page_count) {
   105f0:	55                   	push   %ebp
   105f1:	89 e5                	mov    %esp,%ebp
   105f3:	83 ec 18             	sub    $0x18,%esp
  mutex_lock(&alloc->mutex);
   105f6:	8b 45 08             	mov    0x8(%ebp),%eax
   105f9:	83 ec 0c             	sub    $0xc,%esp
   105fc:	50                   	push   %eax
   105fd:	e8 f5 33 00 00       	call   139f7 <mutex_lock>
   10602:	83 c4 10             	add    $0x10,%esp

  //将所有页引用-1
  for (int i = 0; i < page_count; ++i) {
   10605:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1060c:	eb 64                	jmp    10672 <addr_free_page+0x82>
    //获取当前页的地址
    uint32_t page_addr = addr + i * MEM_PAGE_SIZE;
   1060e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10611:	c1 e0 0c             	shl    $0xc,%eax
   10614:	89 c2                	mov    %eax,%edx
   10616:	8b 45 0c             	mov    0xc(%ebp),%eax
   10619:	01 d0                	add    %edx,%eax
   1061b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    //引用-1
    page_ref_sub(alloc, page_addr);
   1061e:	83 ec 08             	sub    $0x8,%esp
   10621:	ff 75 f0             	push   -0x10(%ebp)
   10624:	ff 75 08             	push   0x8(%ebp)
   10627:	e8 cf fd ff ff       	call   103fb <page_ref_sub>
   1062c:	83 c4 10             	add    $0x10,%esp
    //获取当前页引用
    int ref = get_page_ref(alloc, page_addr);
   1062f:	83 ec 08             	sub    $0x8,%esp
   10632:	ff 75 f0             	push   -0x10(%ebp)
   10635:	ff 75 08             	push   0x8(%ebp)
   10638:	e8 26 fe ff ff       	call   10463 <get_page_ref>
   1063d:	83 c4 10             	add    $0x10,%esp
   10640:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (ref == 0)  {//引用为0，释放该页
   10643:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   10647:	75 25                	jne    1066e <addr_free_page+0x7e>
        bitmap_set_bit(&alloc->bitmap, page_index(alloc, page_addr), 1, 0);
   10649:	83 ec 08             	sub    $0x8,%esp
   1064c:	ff 75 f0             	push   -0x10(%ebp)
   1064f:	ff 75 08             	push   0x8(%ebp)
   10652:	e8 29 fd ff ff       	call   10380 <page_index>
   10657:	83 c4 10             	add    $0x10,%esp
   1065a:	8b 55 08             	mov    0x8(%ebp),%edx
   1065d:	83 c2 14             	add    $0x14,%edx
   10660:	6a 00                	push   $0x0
   10662:	6a 01                	push   $0x1
   10664:	50                   	push   %eax
   10665:	52                   	push   %edx
   10666:	e8 ac 3b 00 00       	call   14217 <bitmap_set_bit>
   1066b:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < page_count; ++i) {
   1066e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10672:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10675:	3b 45 10             	cmp    0x10(%ebp),%eax
   10678:	7c 94                	jl     1060e <addr_free_page+0x1e>
    }

  }

  mutex_unlock(&alloc->mutex);
   1067a:	8b 45 08             	mov    0x8(%ebp),%eax
   1067d:	83 ec 0c             	sub    $0xc,%esp
   10680:	50                   	push   %eax
   10681:	e8 02 34 00 00       	call   13a88 <mutex_unlock>
   10686:	83 c4 10             	add    $0x10,%esp
}
   10689:	90                   	nop
   1068a:	c9                   	leave  
   1068b:	c3                   	ret    

0001068c <show_mem_info>:
/**
 * @brief  打印1m以内内存的可用空间
 * 
 * @param boot_info 
 */
static void show_mem_info(boot_info_t *boot_info) {
   1068c:	55                   	push   %ebp
   1068d:	89 e5                	mov    %esp,%ebp
   1068f:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:");
   10692:	83 ec 0c             	sub    $0xc,%esp
   10695:	68 60 4e 01 00       	push   $0x14e60
   1069a:	e8 09 47 00 00       	call   14da8 <log_printf>
   1069f:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   106a2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   106a9:	eb 29                	jmp    106d4 <show_mem_info+0x48>
        log_printf("[%d]: 0x%x - 0x%x", i, boot_info->ram_region_cfg[i].start, boot_info->ram_region_cfg[i].size);
   106ab:	8b 45 08             	mov    0x8(%ebp),%eax
   106ae:	8b 55 f4             	mov    -0xc(%ebp),%edx
   106b1:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   106b5:	8b 45 08             	mov    0x8(%ebp),%eax
   106b8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   106bb:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   106be:	52                   	push   %edx
   106bf:	50                   	push   %eax
   106c0:	ff 75 f4             	push   -0xc(%ebp)
   106c3:	68 6c 4e 01 00       	push   $0x14e6c
   106c8:	e8 db 46 00 00       	call   14da8 <log_printf>
   106cd:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   106d0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   106d4:	8b 45 08             	mov    0x8(%ebp),%eax
   106d7:	8b 40 50             	mov    0x50(%eax),%eax
   106da:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   106dd:	7c cc                	jl     106ab <show_mem_info+0x1f>
    }

    log_printf("");
   106df:	83 ec 0c             	sub    $0xc,%esp
   106e2:	68 7e 4e 01 00       	push   $0x14e7e
   106e7:	e8 bc 46 00 00       	call   14da8 <log_printf>
   106ec:	83 c4 10             	add    $0x10,%esp
}
   106ef:	90                   	nop
   106f0:	c9                   	leave  
   106f1:	c3                   	ret    

000106f2 <total_mem_size>:
 * @brief  计算总的可用内存空间大小
 * 
 * @param boot_info 
 * @return uint32_t 
 */
static uint32_t total_mem_size(boot_info_t *boot_info) {
   106f2:	55                   	push   %ebp
   106f3:	89 e5                	mov    %esp,%ebp
   106f5:	83 ec 10             	sub    $0x10,%esp
    uint32_t mem_size = 0;
   106f8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   106ff:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   10706:	eb 11                	jmp    10719 <total_mem_size+0x27>
        mem_size += boot_info->ram_region_cfg[i].size;
   10708:	8b 45 08             	mov    0x8(%ebp),%eax
   1070b:	8b 55 f8             	mov    -0x8(%ebp),%edx
   1070e:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
   10712:	01 45 fc             	add    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   10715:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   10719:	8b 45 08             	mov    0x8(%ebp),%eax
   1071c:	8b 40 50             	mov    0x50(%eax),%eax
   1071f:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   10722:	7c e4                	jl     10708 <total_mem_size+0x16>
    }

    return mem_size;
   10724:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10727:	c9                   	leave  
   10728:	c3                   	ret    

00010729 <find_pte>:
 *                 1：表示创建一个新页目录项，并为其分配一个新页作为页表
 *                 0: 返回0
 *                
 * @return pte_t* 索引到的页表项
 */
pte_t* find_pte(pde_t* page_dir, uint32_t vstart, int is_alloc) {
   10729:	55                   	push   %ebp
   1072a:	89 e5                	mov    %esp,%ebp
   1072c:	83 ec 18             	sub    $0x18,%esp
  pte_t* page_table; //记录被索引的页表
  //1.通过虚拟地址高10位索引到对应的页目录项
  pde_t* pde = page_dir + pde_index(vstart);
   1072f:	ff 75 0c             	push   0xc(%ebp)
   10732:	e8 c0 fb ff ff       	call   102f7 <pde_index>
   10737:	83 c4 04             	add    $0x4,%esp
   1073a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10741:	8b 45 08             	mov    0x8(%ebp),%eax
   10744:	01 d0                	add    %edx,%eax
   10746:	89 45 f0             	mov    %eax,-0x10(%ebp)

  //2.判断该页目录项是否已存在，及该页目录项是否已指向一个被分配的页表
  if (pde->present) { //该页目录项存在，及存在对应的页表，可以索引到对应的页表
   10749:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1074c:	0f b6 00             	movzbl (%eax),%eax
   1074f:	83 e0 01             	and    $0x1,%eax
   10752:	84 c0                	test   %al,%al
   10754:	74 10                	je     10766 <find_pte+0x3d>
    page_table = (pte_t*)pde_to_pt_addr(pde);
   10756:	ff 75 f0             	push   -0x10(%ebp)
   10759:	e8 b4 fb ff ff       	call   10312 <pde_to_pt_addr>
   1075e:	83 c4 04             	add    $0x4,%esp
   10761:	89 45 f4             	mov    %eax,-0xc(%ebp)
   10764:	eb 57                	jmp    107bd <find_pte+0x94>
  } else {//该目录项不存在内存中，及对应的页表不存在
    if (is_alloc == 0) {  //不为该目录项创建对应的页表
   10766:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1076a:	75 07                	jne    10773 <find_pte+0x4a>
      return (pte_t*)0;
   1076c:	b8 00 00 00 00       	mov    $0x0,%eax
   10771:	eb 64                	jmp    107d7 <find_pte+0xae>
    }

    //为该目录项分配一页作为页表
    uint32_t pg_addr = addr_alloc_page(&paddr_alloc, 1);
   10773:	83 ec 08             	sub    $0x8,%esp
   10776:	6a 01                	push   $0x1
   10778:	68 00 70 01 00       	push   $0x17000
   1077d:	e8 07 fe ff ff       	call   10589 <addr_alloc_page>
   10782:	83 c4 10             	add    $0x10,%esp
   10785:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pg_addr == 0) { //分配失败
   10788:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1078c:	75 07                	jne    10795 <find_pte+0x6c>
      return (pte_t*)0;
   1078e:	b8 00 00 00 00       	mov    $0x0,%eax
   10793:	eb 42                	jmp    107d7 <find_pte+0xae>
    }

    //分配成功, 索引对应的页表
    page_table = (pte_t*)pg_addr;
   10795:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10798:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_memset(page_table, 0, MEM_PAGE_SIZE);
   1079b:	83 ec 04             	sub    $0x4,%esp
   1079e:	68 00 10 00 00       	push   $0x1000
   107a3:	6a 00                	push   $0x0
   107a5:	ff 75 f4             	push   -0xc(%ebp)
   107a8:	e8 14 3e 00 00       	call   145c1 <kernel_memset>
   107ad:	83 c4 10             	add    $0x10,%esp

    //将该页表的起始地址放入对应的页目录项中并放入页目录表中，方便后续索引到该页表
    //且权限都放宽，即普通用户可访问，对应的页表的所有页可读写，将具体的权限交给每一页来进一步限制
    pde->v = pg_addr | PDE_U | PDE_W | PDE_P;
   107b0:	8b 45 ec             	mov    -0x14(%ebp),%eax
   107b3:	83 c8 07             	or     $0x7,%eax
   107b6:	89 c2                	mov    %eax,%edx
   107b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   107bb:	89 10                	mov    %edx,(%eax)

  // log_printf("sizeof(pte_t) = %d", sizeof(pte_t));


  //3.返回在该页表中索引到的页表项
  return page_table + pte_index(vstart);
   107bd:	83 ec 0c             	sub    $0xc,%esp
   107c0:	ff 75 0c             	push   0xc(%ebp)
   107c3:	e8 3a fb ff ff       	call   10302 <pte_index>
   107c8:	83 c4 10             	add    $0x10,%esp
   107cb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   107d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107d5:	01 d0                	add    %edx,%eax

}
   107d7:	c9                   	leave  
   107d8:	c3                   	ret    

000107d9 <memory_creat_map>:
 * @param pstart 物理地址的起始地址
 * @param page_count 分页数量
 * @param privilege 该段虚拟地址的特权级
 * @return int -1:分配失败
 */
int  memory_creat_map(pde_t *page_dir, uint32_t vstart, uint32_t pstart, int page_count, uint32_t privilege) {
   107d9:	55                   	push   %ebp
   107da:	89 e5                	mov    %esp,%ebp
   107dc:	83 ec 18             	sub    $0x18,%esp
  //1.为每一页创建对应的页表项
  for (int i = 0; i < page_count; ++i) {
   107df:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   107e6:	e9 91 00 00 00       	jmp    1087c <memory_creat_map+0xa3>
    // //打印调试信息
    // log_printf("creat map: v-0x%x, p-0x%x, privilege:0x%x", vstart, pstart, privilege);

    //2.通过虚拟地址在页目录表中获取对应的页目录项指向的页表,
    //且当没有该页目录项时，为其分配一个页作为页表并让一个目录项指向该页表
    pte_t *pte = find_pte(page_dir, vstart, 1);
   107eb:	83 ec 04             	sub    $0x4,%esp
   107ee:	6a 01                	push   $0x1
   107f0:	ff 75 0c             	push   0xc(%ebp)
   107f3:	ff 75 08             	push   0x8(%ebp)
   107f6:	e8 2e ff ff ff       	call   10729 <find_pte>
   107fb:	83 c4 10             	add    $0x10,%esp
   107fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pte == (pte_t*)0) {//没有找到可用的页表项
   10801:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10805:	75 17                	jne    1081e <memory_creat_map+0x45>
    log_printf("creat pte failed pte == 0");
   10807:	83 ec 0c             	sub    $0xc,%esp
   1080a:	68 7f 4e 01 00       	push   $0x14e7f
   1080f:	e8 94 45 00 00       	call   14da8 <log_printf>
   10814:	83 c4 10             	add    $0x10,%esp
      return -1;
   10817:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1081c:	eb 6f                	jmp    1088d <memory_creat_map+0xb4>
    }

    // log_printf("pte addr : 0x%x", (uint32_t)pte);
    //3.确保该页并未已存在内存中
    ASSERT(pte->present == 0);
   1081e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10821:	0f b6 00             	movzbl (%eax),%eax
   10824:	83 e0 01             	and    $0x1,%eax
   10827:	84 c0                	test   %al,%al
   10829:	74 1c                	je     10847 <memory_creat_map+0x6e>
   1082b:	68 99 4e 01 00       	push   $0x14e99
   10830:	68 ec 4f 01 00       	push   $0x14fec
   10835:	68 1d 01 00 00       	push   $0x11d
   1083a:	68 ac 4e 01 00       	push   $0x14eac
   1083f:	e8 7b 38 00 00       	call   140bf <pannic>
   10844:	83 c4 10             	add    $0x10,%esp

    //4.在页表项中创建对应的映射关系，并该页权限，页权限以当前权限为主，因为pde处已放宽权限
    pte->v = pstart | privilege | PTE_P;
   10847:	8b 45 10             	mov    0x10(%ebp),%eax
   1084a:	0b 45 18             	or     0x18(%ebp),%eax
   1084d:	83 c8 01             	or     $0x1,%eax
   10850:	89 c2                	mov    %eax,%edx
   10852:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10855:	89 10                	mov    %edx,(%eax)

    //5.将该页引用计数+1
    page_ref_add(&paddr_alloc, pstart);
   10857:	83 ec 08             	sub    $0x8,%esp
   1085a:	ff 75 10             	push   0x10(%ebp)
   1085d:	68 00 70 01 00       	push   $0x17000
   10862:	e8 3e fb ff ff       	call   103a5 <page_ref_add>
   10867:	83 c4 10             	add    $0x10,%esp

    //6.切换为下一页
    vstart += MEM_PAGE_SIZE;
   1086a:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    pstart += MEM_PAGE_SIZE;
   10871:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
  for (int i = 0; i < page_count; ++i) {
   10878:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1087c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1087f:	3b 45 14             	cmp    0x14(%ebp),%eax
   10882:	0f 8c 63 ff ff ff    	jl     107eb <memory_creat_map+0x12>

  }

  return 1;
   10888:	b8 01 00 00 00       	mov    $0x1,%eax
 }
   1088d:	c9                   	leave  
   1088e:	c3                   	ret    

0001088f <create_kernal_table>:

//TODO:编写函数注释
void create_kernal_table(void) {
   1088f:	55                   	push   %ebp
   10890:	89 e5                	mov    %esp,%ebp
   10892:	83 ec 28             	sub    $0x28,%esp
    {(void*)CONSOLE_DISP_START_ADDR, (void*)CONSOLE_DISP_END_ADDR, (void*)CONSOLE_DISP_START_ADDR, PTE_W},//显存区域的映射关系
    {(void*)MEM_EXT_START, (void*)MEM_EXT_END, (void*)MEM_EXT_START, PTE_W}, //将1mb到127mb都映射给操作系统使用

  };

  for (int i = 0; i < sizeof(kernal_map) / sizeof(kernal_map[0]); ++i) {
   10895:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1089c:	e9 92 00 00 00       	jmp    10933 <create_kernal_table+0xa4>
    memory_map_t *map = kernal_map + i;
   108a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   108a4:	c1 e0 04             	shl    $0x4,%eax
   108a7:	05 00 60 01 00       	add    $0x16000,%eax
   108ac:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //将虚拟地址的起始地址按页大小4kb对齐，为了不丢失原有的虚拟地址空间，所以向下对齐vstart
    //理论上虚拟地址是不需要上下边缘对齐的，这里主要是为了计算所需页数
    //因为虚拟地址的每一页都和页目录项以及页表项捆绑了，
    //只需用页目录项和页表项为该页映射一个物理页即可，所以物理页才必须上下边缘按4kb对齐
    uint32_t vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   108af:	8b 45 f0             	mov    -0x10(%ebp),%eax
   108b2:	8b 00                	mov    (%eax),%eax
   108b4:	68 00 10 00 00       	push   $0x1000
   108b9:	50                   	push   %eax
   108ba:	e8 08 fa ff ff       	call   102c7 <down2>
   108bf:	83 c4 08             	add    $0x8,%esp
   108c2:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32_t pstart = down2((uint32_t)map->pstart, MEM_PAGE_SIZE);
   108c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   108c8:	8b 40 08             	mov    0x8(%eax),%eax
   108cb:	68 00 10 00 00       	push   $0x1000
   108d0:	50                   	push   %eax
   108d1:	e8 f1 f9 ff ff       	call   102c7 <down2>
   108d6:	83 c4 08             	add    $0x8,%esp
   108d9:	89 45 e8             	mov    %eax,-0x18(%ebp)
    //将虚拟地址的结束地址按页大小4kb对齐, 为了不丢失原有的虚拟地址空间，所以向上对齐vend
    uint32_t vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   108dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   108df:	8b 40 04             	mov    0x4(%eax),%eax
   108e2:	68 00 10 00 00       	push   $0x1000
   108e7:	50                   	push   %eax
   108e8:	e8 e7 f9 ff ff       	call   102d4 <up2>
   108ed:	83 c4 08             	add    $0x8,%esp
   108f0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    //计算该虚拟空间需要的页数
    int page_count = (vend - vstart) / MEM_PAGE_SIZE;
   108f3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   108f6:	2b 45 ec             	sub    -0x14(%ebp),%eax
   108f9:	c1 e8 0c             	shr    $0xc,%eax
   108fc:	89 45 e0             	mov    %eax,-0x20(%ebp)

    //创建内存映射关系
    memory_creat_map(kernel_page_dir, vstart, pstart, page_count, map->privilege);
   108ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10902:	8b 40 0c             	mov    0xc(%eax),%eax
   10905:	83 ec 0c             	sub    $0xc,%esp
   10908:	50                   	push   %eax
   10909:	ff 75 e0             	push   -0x20(%ebp)
   1090c:	ff 75 e8             	push   -0x18(%ebp)
   1090f:	ff 75 ec             	push   -0x14(%ebp)
   10912:	68 00 f0 01 00       	push   $0x1f000
   10917:	e8 bd fe ff ff       	call   107d9 <memory_creat_map>
   1091c:	83 c4 20             	add    $0x20,%esp
    //清空内核空间对页的引用
    clear_page_ref(&paddr_alloc);
   1091f:	83 ec 0c             	sub    $0xc,%esp
   10922:	68 00 70 01 00       	push   $0x17000
   10927:	e8 85 fb ff ff       	call   104b1 <clear_page_ref>
   1092c:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < sizeof(kernal_map) / sizeof(kernal_map[0]); ++i) {
   1092f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10933:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10936:	83 f8 04             	cmp    $0x4,%eax
   10939:	0f 86 62 ff ff ff    	jbe    108a1 <create_kernal_table+0x12>

  }
}
   1093f:	90                   	nop
   10940:	90                   	nop
   10941:	c9                   	leave  
   10942:	c3                   	ret    

00010943 <memory_creat_uvm>:
/**
 * @brief 创建用户进程的虚拟内存空间，即页目录表
 * 
 * @return uint32_t 
 */
uint32_t memory_creat_uvm() {
   10943:	55                   	push   %ebp
   10944:	89 e5                	mov    %esp,%ebp
   10946:	83 ec 18             	sub    $0x18,%esp
  //1.分配一页作为页目录表
  pde_t *page_dir = (pde_t *)addr_alloc_page(&paddr_alloc, 1);
   10949:	83 ec 08             	sub    $0x8,%esp
   1094c:	6a 01                	push   $0x1
   1094e:	68 00 70 01 00       	push   $0x17000
   10953:	e8 31 fc ff ff       	call   10589 <addr_alloc_page>
   10958:	83 c4 10             	add    $0x10,%esp
   1095b:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (page_dir == 0) return 0;
   1095e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10962:	75 07                	jne    1096b <memory_creat_uvm+0x28>
   10964:	b8 00 00 00 00       	mov    $0x0,%eax
   10969:	eb 5b                	jmp    109c6 <memory_creat_uvm+0x83>
  //TODO:新分配的页并未做虚拟内存映射，会触发缺页异常，需要处理,这里先将1mb以上的所有空间都映射给内核进程

  //2.将该页的内容清空
  kernel_memset((void*)page_dir, 0, MEM_PAGE_SIZE);
   1096b:	83 ec 04             	sub    $0x4,%esp
   1096e:	68 00 10 00 00       	push   $0x1000
   10973:	6a 00                	push   $0x0
   10975:	ff 75 f0             	push   -0x10(%ebp)
   10978:	e8 44 3c 00 00       	call   145c1 <kernel_memset>
   1097d:	83 c4 10             	add    $0x10,%esp

  //3.获取用户进程空间的第一个页目录项索引, 用户进程空间的起始地址MEM_TASK_BASE = 0x800 00000
  uint32_t user_pde_start = pde_index(MEM_TASK_BASE);
   10980:	83 ec 0c             	sub    $0xc,%esp
   10983:	68 00 00 00 80       	push   $0x80000000
   10988:	e8 6a f9 ff ff       	call   102f7 <pde_index>
   1098d:	83 c4 10             	add    $0x10,%esp
   10990:	89 45 ec             	mov    %eax,-0x14(%ebp)

  //4.将用户进程空间以下的空间映射给操作系统使用，即将0~user_pde_start的pde提供给操作系统作为页目录项
  for (int i = 0; i < user_pde_start; ++i) {
   10993:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1099a:	eb 1f                	jmp    109bb <memory_creat_uvm+0x78>
      page_dir[i].v = kernel_page_dir[i].v; //所有进程都共享操作系统的页表
   1099c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1099f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   109a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   109a9:	01 c2                	add    %eax,%edx
   109ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109ae:	8b 04 85 00 f0 01 00 	mov    0x1f000(,%eax,4),%eax
   109b5:	89 02                	mov    %eax,(%edx)
  for (int i = 0; i < user_pde_start; ++i) {
   109b7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   109bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109be:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   109c1:	77 d9                	ja     1099c <memory_creat_uvm+0x59>
  }


  return (uint32_t)page_dir;
   109c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   109c6:	c9                   	leave  
   109c7:	c3                   	ret    

000109c8 <memory_copy_uvm>:
 * 
 * @param to_page_dir 拷贝到的目标页目录表地址
 * @param from_page_dir 被拷贝的源页目录表地址
 * @return uint32_t 
 */
int memory_copy_uvm(uint32_t to_page_dir, uint32_t from_page_dir) {
   109c8:	55                   	push   %ebp
   109c9:	89 e5                	mov    %esp,%ebp
   109cb:	83 ec 38             	sub    $0x38,%esp
  //1.获取用户程序虚拟地址的起始pde索引，即0x8000 0000 的pde索引值
  uint32_t user_pde_start = pde_index(MEM_TASK_BASE);
   109ce:	68 00 00 00 80       	push   $0x80000000
   109d3:	e8 1f f9 ff ff       	call   102f7 <pde_index>
   109d8:	83 c4 04             	add    $0x4,%esp
   109db:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  pde_t *pde = (pde_t *)from_page_dir + user_pde_start;
   109de:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   109e1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   109e8:	8b 45 0c             	mov    0xc(%ebp),%eax
   109eb:	01 d0                	add    %edx,%eax
   109ed:	89 45 f4             	mov    %eax,-0xc(%ebp)

  //2.遍历源页目录表中的每一个页目录项，拷贝给目标目录
  for (int i = user_pde_start; i < PDE_CNT; ++i, ++pde) {
   109f0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   109f3:	89 45 f0             	mov    %eax,-0x10(%ebp)
   109f6:	e9 2a 01 00 00       	jmp    10b25 <memory_copy_uvm+0x15d>
    if (!pde->present)  //当前页目录项不存在
   109fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109fe:	0f b6 00             	movzbl (%eax),%eax
   10a01:	83 e0 01             	and    $0x1,%eax
   10a04:	84 c0                	test   %al,%al
   10a06:	0f 84 10 01 00 00    	je     10b1c <memory_copy_uvm+0x154>
      continue;

    //3.获取页目录项指向的页表的起始地址
    pte_t *pte = (pte_t*)pde_to_pt_addr(pde);
   10a0c:	ff 75 f4             	push   -0xc(%ebp)
   10a0f:	e8 fe f8 ff ff       	call   10312 <pde_to_pt_addr>
   10a14:	83 c4 04             	add    $0x4,%esp
   10a17:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //4.遍历页表的页表项，进行读共享写复制的映射操作
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   10a1a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   10a21:	e9 e7 00 00 00       	jmp    10b0d <memory_copy_uvm+0x145>
      if (!pte->present)  //当前页表项不存在
   10a26:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10a29:	0f b6 00             	movzbl (%eax),%eax
   10a2c:	83 e0 01             	and    $0x1,%eax
   10a2f:	84 c0                	test   %al,%al
   10a31:	0f 84 cd 00 00 00    	je     10b04 <memory_copy_uvm+0x13c>
        continue;
      
      //5.获取该页表项对应的虚拟地址
      uint32_t vaddr = (i << 22) | (j << 12);
   10a37:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10a3a:	c1 e0 16             	shl    $0x16,%eax
   10a3d:	89 c2                	mov    %eax,%edx
   10a3f:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10a42:	c1 e0 0c             	shl    $0xc,%eax
   10a45:	09 d0                	or     %edx,%eax
   10a47:	89 45 e0             	mov    %eax,-0x20(%ebp)
      
      //6.判断当前页表项指向的页是否支持写操作
      if (pte->v & PTE_W) { //当前页支持写操作，需进行复制操作
   10a4a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10a4d:	8b 00                	mov    (%eax),%eax
   10a4f:	83 e0 02             	and    $0x2,%eax
   10a52:	85 c0                	test   %eax,%eax
   10a54:	74 6c                	je     10ac2 <memory_copy_uvm+0xfa>
        //分配一个新的页，进行拷贝
        uint32_t page = addr_alloc_page(&paddr_alloc, 1);
   10a56:	83 ec 08             	sub    $0x8,%esp
   10a59:	6a 01                	push   $0x1
   10a5b:	68 00 70 01 00       	push   $0x17000
   10a60:	e8 24 fb ff ff       	call   10589 <addr_alloc_page>
   10a65:	83 c4 10             	add    $0x10,%esp
   10a68:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        if (page == 0)  //分配失败
   10a6b:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   10a6f:	0f 84 c4 00 00 00    	je     10b39 <memory_copy_uvm+0x171>
          goto copy_uvm_failed;
        
        //记录映射关系
        int err = memory_creat_map((pde_t*)to_page_dir, vaddr, page, 1, get_pte_privilege(pte));
   10a75:	83 ec 0c             	sub    $0xc,%esp
   10a78:	ff 75 ec             	push   -0x14(%ebp)
   10a7b:	e8 e0 f8 ff ff       	call   10360 <get_pte_privilege>
   10a80:	83 c4 10             	add    $0x10,%esp
   10a83:	8b 55 08             	mov    0x8(%ebp),%edx
   10a86:	83 ec 0c             	sub    $0xc,%esp
   10a89:	50                   	push   %eax
   10a8a:	6a 01                	push   $0x1
   10a8c:	ff 75 d4             	push   -0x2c(%ebp)
   10a8f:	ff 75 e0             	push   -0x20(%ebp)
   10a92:	52                   	push   %edx
   10a93:	e8 41 fd ff ff       	call   107d9 <memory_creat_map>
   10a98:	83 c4 20             	add    $0x20,%esp
   10a9b:	89 45 d0             	mov    %eax,-0x30(%ebp)
        if (err < 0)
   10a9e:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
   10aa2:	0f 88 94 00 00 00    	js     10b3c <memory_copy_uvm+0x174>
          goto copy_uvm_failed;
        
        //拷贝该页内容
        kernel_memcpy((void*)page, (void*)vaddr, MEM_PAGE_SIZE);
   10aa8:	8b 55 e0             	mov    -0x20(%ebp),%edx
   10aab:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   10aae:	83 ec 04             	sub    $0x4,%esp
   10ab1:	68 00 10 00 00       	push   $0x1000
   10ab6:	52                   	push   %edx
   10ab7:	50                   	push   %eax
   10ab8:	e8 b5 3a 00 00       	call   14572 <kernel_memcpy>
   10abd:	83 c4 10             	add    $0x10,%esp
   10ac0:	eb 43                	jmp    10b05 <memory_copy_uvm+0x13d>

      } else {  //当前页为只读页，直接共享该页即可，即只复制页表项即可
        //获取该页的地址
        uint32_t page = pte_to_pg_addr(pte);
   10ac2:	83 ec 0c             	sub    $0xc,%esp
   10ac5:	ff 75 ec             	push   -0x14(%ebp)
   10ac8:	e8 6c f8 ff ff       	call   10339 <pte_to_pg_addr>
   10acd:	83 c4 10             	add    $0x10,%esp
   10ad0:	89 45 dc             	mov    %eax,-0x24(%ebp)
        //记录映射关系
        int err = memory_creat_map((pde_t*)to_page_dir, vaddr, page, 1, get_pte_privilege(pte));
   10ad3:	83 ec 0c             	sub    $0xc,%esp
   10ad6:	ff 75 ec             	push   -0x14(%ebp)
   10ad9:	e8 82 f8 ff ff       	call   10360 <get_pte_privilege>
   10ade:	83 c4 10             	add    $0x10,%esp
   10ae1:	8b 55 08             	mov    0x8(%ebp),%edx
   10ae4:	83 ec 0c             	sub    $0xc,%esp
   10ae7:	50                   	push   %eax
   10ae8:	6a 01                	push   $0x1
   10aea:	ff 75 dc             	push   -0x24(%ebp)
   10aed:	ff 75 e0             	push   -0x20(%ebp)
   10af0:	52                   	push   %edx
   10af1:	e8 e3 fc ff ff       	call   107d9 <memory_creat_map>
   10af6:	83 c4 20             	add    $0x20,%esp
   10af9:	89 45 d8             	mov    %eax,-0x28(%ebp)
        if (err < 0)
   10afc:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
   10b00:	78 3d                	js     10b3f <memory_copy_uvm+0x177>
   10b02:	eb 01                	jmp    10b05 <memory_copy_uvm+0x13d>
        continue;
   10b04:	90                   	nop
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   10b05:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   10b09:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   10b0d:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   10b14:	0f 8e 0c ff ff ff    	jle    10a26 <memory_copy_uvm+0x5e>
   10b1a:	eb 01                	jmp    10b1d <memory_copy_uvm+0x155>
      continue;
   10b1c:	90                   	nop
  for (int i = user_pde_start; i < PDE_CNT; ++i, ++pde) {
   10b1d:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10b21:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   10b25:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   10b2c:	0f 8e c9 fe ff ff    	jle    109fb <memory_copy_uvm+0x33>
      }

    }
  }

  return 1;
   10b32:	b8 01 00 00 00       	mov    $0x1,%eax
   10b37:	eb 1a                	jmp    10b53 <memory_copy_uvm+0x18b>
          goto copy_uvm_failed;
   10b39:	90                   	nop
   10b3a:	eb 04                	jmp    10b40 <memory_copy_uvm+0x178>
          goto copy_uvm_failed;
   10b3c:	90                   	nop
   10b3d:	eb 01                	jmp    10b40 <memory_copy_uvm+0x178>
          goto copy_uvm_failed;
   10b3f:	90                   	nop


copy_uvm_failed:
  //copy虚拟空间映射失败，以开启读共享的方式清理对应资源
  memory_destroy_uvm(to_page_dir);
   10b40:	83 ec 0c             	sub    $0xc,%esp
   10b43:	ff 75 08             	push   0x8(%ebp)
   10b46:	e8 0a 00 00 00       	call   10b55 <memory_destroy_uvm>
   10b4b:	83 c4 10             	add    $0x10,%esp
  return -1;
   10b4e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10b53:	c9                   	leave  
   10b54:	c3                   	ret    

00010b55 <memory_destroy_uvm>:
 *        //TODO:进行了读不释放写释放的处理操作，只能供memory_copy_uvm函数失败时调用
 * 
 * @param page_dir 页目录表的地址
 * @param is_read_share 是否开启了读共享策略，1开启，0未开启
 */
void memory_destroy_uvm(uint32_t page_dir) {
   10b55:	55                   	push   %ebp
   10b56:	89 e5                	mov    %esp,%ebp
   10b58:	83 ec 28             	sub    $0x28,%esp
  //1.获取用户进程虚拟地址的起始地址对应的该页目录项
  uint32_t user_task_start  = pde_index(MEM_TASK_BASE);
   10b5b:	68 00 00 00 80       	push   $0x80000000
   10b60:	e8 92 f7 ff ff       	call   102f7 <pde_index>
   10b65:	83 c4 04             	add    $0x4,%esp
   10b68:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  pde_t *pde = (pde_t*) page_dir + user_task_start;
   10b6b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10b6e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10b75:	8b 45 08             	mov    0x8(%ebp),%eax
   10b78:	01 d0                	add    %edx,%eax
   10b7a:	89 45 f4             	mov    %eax,-0xc(%ebp)

  //2.遍历每一个页目录项，清理对应资源
  for (int i = user_task_start; i < PDE_CNT; ++i, ++pde) {
   10b7d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10b80:	89 45 f0             	mov    %eax,-0x10(%ebp)
   10b83:	e9 8f 00 00 00       	jmp    10c17 <memory_destroy_uvm+0xc2>
    if (!pde->present) 
   10b88:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b8b:	0f b6 00             	movzbl (%eax),%eax
   10b8e:	83 e0 01             	and    $0x1,%eax
   10b91:	84 c0                	test   %al,%al
   10b93:	74 79                	je     10c0e <memory_destroy_uvm+0xb9>
        continue;

    //3.获取页目录项对应的页表的起始地址
    pte_t *pte = (pte_t*)pde_to_pt_addr(pde);
   10b95:	ff 75 f4             	push   -0xc(%ebp)
   10b98:	e8 75 f7 ff ff       	call   10312 <pde_to_pt_addr>
   10b9d:	83 c4 04             	add    $0x4,%esp
   10ba0:	89 45 ec             	mov    %eax,-0x14(%ebp)
    
    //4.遍历所有页表项，清理对应资源
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   10ba3:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   10baa:	eb 36                	jmp    10be2 <memory_destroy_uvm+0x8d>
      if (!pte->present)
   10bac:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10baf:	0f b6 00             	movzbl (%eax),%eax
   10bb2:	83 e0 01             	and    $0x1,%eax
   10bb5:	84 c0                	test   %al,%al
   10bb7:	74 20                	je     10bd9 <memory_destroy_uvm+0x84>
        continue;
      
      //5.释放该物理页
      addr_free_page(&paddr_alloc, pte_to_pg_addr(pte), 1);
   10bb9:	ff 75 ec             	push   -0x14(%ebp)
   10bbc:	e8 78 f7 ff ff       	call   10339 <pte_to_pg_addr>
   10bc1:	83 c4 04             	add    $0x4,%esp
   10bc4:	83 ec 04             	sub    $0x4,%esp
   10bc7:	6a 01                	push   $0x1
   10bc9:	50                   	push   %eax
   10bca:	68 00 70 01 00       	push   $0x17000
   10bcf:	e8 1c fa ff ff       	call   105f0 <addr_free_page>
   10bd4:	83 c4 10             	add    $0x10,%esp
   10bd7:	eb 01                	jmp    10bda <memory_destroy_uvm+0x85>
        continue;
   10bd9:	90                   	nop
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   10bda:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   10bde:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   10be2:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   10be9:	7e c1                	jle    10bac <memory_destroy_uvm+0x57>
    }

    //6.释放存储该页表的物理页
    addr_free_page(&paddr_alloc, pde_to_pt_addr(pde), 1);
   10beb:	83 ec 0c             	sub    $0xc,%esp
   10bee:	ff 75 f4             	push   -0xc(%ebp)
   10bf1:	e8 1c f7 ff ff       	call   10312 <pde_to_pt_addr>
   10bf6:	83 c4 10             	add    $0x10,%esp
   10bf9:	83 ec 04             	sub    $0x4,%esp
   10bfc:	6a 01                	push   $0x1
   10bfe:	50                   	push   %eax
   10bff:	68 00 70 01 00       	push   $0x17000
   10c04:	e8 e7 f9 ff ff       	call   105f0 <addr_free_page>
   10c09:	83 c4 10             	add    $0x10,%esp
   10c0c:	eb 01                	jmp    10c0f <memory_destroy_uvm+0xba>
        continue;
   10c0e:	90                   	nop
  for (int i = user_task_start; i < PDE_CNT; ++i, ++pde) {
   10c0f:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10c13:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   10c17:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   10c1e:	0f 8e 64 ff ff ff    	jle    10b88 <memory_destroy_uvm+0x33>
  }


  //7.释放存储该页目录表的物理页
  addr_free_page(&paddr_alloc, page_dir, 1);
   10c24:	83 ec 04             	sub    $0x4,%esp
   10c27:	6a 01                	push   $0x1
   10c29:	ff 75 08             	push   0x8(%ebp)
   10c2c:	68 00 70 01 00       	push   $0x17000
   10c31:	e8 ba f9 ff ff       	call   105f0 <addr_free_page>
   10c36:	83 c4 10             	add    $0x10,%esp
}
   10c39:	90                   	nop
   10c3a:	c9                   	leave  
   10c3b:	c3                   	ret    

00010c3c <memory_init>:
/**
 * @brief  初始化化内存
 *
 * @param boot_info cpu在实模式下检测到的可用内存对象
 */
void memory_init(boot_info_t *boot_info) {
   10c3c:	55                   	push   %ebp
   10c3d:	89 e5                	mov    %esp,%ebp
   10c3f:	83 ec 18             	sub    $0x18,%esp

  
    //声明紧邻在内核bss段后面的空间地址，用于存储位图，该变量定义在kernel.lds中
    extern char mem_free_start;

    log_printf("memory init");
   10c42:	83 ec 0c             	sub    $0xc,%esp
   10c45:	68 e3 4e 01 00       	push   $0x14ee3
   10c4a:	e8 59 41 00 00       	call   14da8 <log_printf>
   10c4f:	83 c4 10             	add    $0x10,%esp

    log_printf("mem_free_start: 0x%x", &mem_free_start);
   10c52:	83 ec 08             	sub    $0x8,%esp
   10c55:	68 ee b2 03 00       	push   $0x3b2ee
   10c5a:	68 ef 4e 01 00       	push   $0x14eef
   10c5f:	e8 44 41 00 00       	call   14da8 <log_printf>
   10c64:	83 c4 10             	add    $0x10,%esp

    show_mem_info(boot_info);
   10c67:	83 ec 0c             	sub    $0xc,%esp
   10c6a:	ff 75 08             	push   0x8(%ebp)
   10c6d:	e8 1a fa ff ff       	call   1068c <show_mem_info>
   10c72:	83 c4 10             	add    $0x10,%esp
    
    //去除保护模式下1mb大小后可用的内存空间大小
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   10c75:	83 ec 0c             	sub    $0xc,%esp
   10c78:	ff 75 08             	push   0x8(%ebp)
   10c7b:	e8 72 fa ff ff       	call   106f2 <total_mem_size>
   10c80:	83 c4 10             	add    $0x10,%esp
   10c83:	2d 00 00 10 00       	sub    $0x100000,%eax
   10c88:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将可用空间大小下调到页大小的整数倍
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);
   10c8b:	83 ec 08             	sub    $0x8,%esp
   10c8e:	68 00 10 00 00       	push   $0x1000
   10c93:	ff 75 f4             	push   -0xc(%ebp)
   10c96:	e8 2c f6 ff ff       	call   102c7 <down2>
   10c9b:	83 c4 10             	add    $0x10,%esp
   10c9e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    log_printf("free memory: 0x%x, size: 0x%x", MEM_EXT_START, mem_up1MB_free);
   10ca1:	83 ec 04             	sub    $0x4,%esp
   10ca4:	ff 75 f4             	push   -0xc(%ebp)
   10ca7:	68 00 00 10 00       	push   $0x100000
   10cac:	68 04 4f 01 00       	push   $0x14f04
   10cb1:	e8 f2 40 00 00       	call   14da8 <log_printf>
   10cb6:	83 c4 10             	add    $0x10,%esp

    //mem_free_start被分配的地址在链接文件中定义，紧邻着first_task段
    uint8_t *mem_free = (uint8_t*)&mem_free_start;
   10cb9:	c7 45 f0 ee b2 03 00 	movl   $0x3b2ee,-0x10(%ebp)

    //用paddr_alloc，内存页分配对象管理1mb以上的所有空闲空间，页大小为MEM_PAGE_SIZE=4kb
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   10cc0:	83 ec 0c             	sub    $0xc,%esp
   10cc3:	68 00 10 00 00       	push   $0x1000
   10cc8:	ff 75 f4             	push   -0xc(%ebp)
   10ccb:	68 00 00 10 00       	push   $0x100000
   10cd0:	ff 75 f0             	push   -0x10(%ebp)
   10cd3:	68 00 70 01 00       	push   $0x17000
   10cd8:	e8 25 f8 ff ff       	call   10502 <addr_alloc_init>
   10cdd:	83 c4 20             	add    $0x20,%esp

    //跳过存储位图的内存区域, 位图的每一位表示一个页，计算位图所站的字节数即可跳过该区域
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);  
   10ce0:	a1 20 70 01 00       	mov    0x17020,%eax
   10ce5:	c1 e8 0c             	shr    $0xc,%eax
   10ce8:	83 ec 0c             	sub    $0xc,%esp
   10ceb:	50                   	push   %eax
   10cec:	e8 04 34 00 00       	call   140f5 <bitmap_byte_count>
   10cf1:	83 c4 10             	add    $0x10,%esp
   10cf4:	01 45 f0             	add    %eax,-0x10(%ebp)

    //判断mem_free是否已越过可用数据区
    ASSERT(mem_free < (uint8_t*)MEM_EBDA_START);
   10cf7:	81 7d f0 ff fb 09 00 	cmpl   $0x9fbff,-0x10(%ebp)
   10cfe:	76 1c                	jbe    10d1c <memory_init+0xe0>
   10d00:	68 24 4f 01 00       	push   $0x14f24
   10d05:	68 00 50 01 00       	push   $0x15000
   10d0a:	68 fb 01 00 00       	push   $0x1fb
   10d0f:	68 ac 4e 01 00       	push   $0x14eac
   10d14:	e8 a6 33 00 00       	call   140bf <pannic>
   10d19:	83 c4 10             	add    $0x10,%esp
    
    //创建内核的页表映射
    create_kernal_table();
   10d1c:	e8 6e fb ff ff       	call   1088f <create_kernal_table>

    //设置内核的页目录表到CR3寄存器，并开启分页机制
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   10d21:	b8 00 f0 01 00       	mov    $0x1f000,%eax
   10d26:	83 ec 0c             	sub    $0xc,%esp
   10d29:	50                   	push   %eax
   10d2a:	e8 40 f6 ff ff       	call   1036f <mmu_set_page_dir>
   10d2f:	83 c4 10             	add    $0x10,%esp
}
   10d32:	90                   	nop
   10d33:	c9                   	leave  
   10d34:	c3                   	ret    

00010d35 <memory_alloc_for_page_dir>:
 * @param vaddr 进程各个代码段的起始虚拟地址
 * @param alloc_size 为进程分配的页空间大小
 * @param priority 进程页空间的权限
 * @return int 
 */
int memory_alloc_for_page_dir(uint32_t page_dir, uint32_t vaddr, uint32_t alloc_size, uint32_t privilege) {
   10d35:	55                   	push   %ebp
   10d36:	89 e5                	mov    %esp,%ebp
   10d38:	83 ec 28             	sub    $0x28,%esp
  //1.记录当前分配的虚拟页的起始地址
  uint32_t curr_vaddr = vaddr;
   10d3b:	8b 45 0c             	mov    0xc(%ebp),%eax
   10d3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
  //2.计算需要分配多少页
  int page_count = up2(alloc_size, MEM_PAGE_SIZE) / MEM_PAGE_SIZE;
   10d41:	68 00 10 00 00       	push   $0x1000
   10d46:	ff 75 10             	push   0x10(%ebp)
   10d49:	e8 86 f5 ff ff       	call   102d4 <up2>
   10d4e:	83 c4 08             	add    $0x8,%esp
   10d51:	c1 e8 0c             	shr    $0xc,%eax
   10d54:	89 45 ec             	mov    %eax,-0x14(%ebp)

  //3.逐页进行映射
  for (int i = 0; i < page_count; ++i) {
   10d57:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   10d5e:	eb 7a                	jmp    10dda <memory_alloc_for_page_dir+0xa5>
    uint32_t paddr = addr_alloc_page(&paddr_alloc, 1);
   10d60:	83 ec 08             	sub    $0x8,%esp
   10d63:	6a 01                	push   $0x1
   10d65:	68 00 70 01 00       	push   $0x17000
   10d6a:	e8 1a f8 ff ff       	call   10589 <addr_alloc_page>
   10d6f:	83 c4 10             	add    $0x10,%esp
   10d72:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (paddr == 0) {//分配失败
   10d75:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10d79:	75 17                	jne    10d92 <memory_alloc_for_page_dir+0x5d>
      log_printf("mem alloc failed. no memory");
   10d7b:	83 ec 0c             	sub    $0xc,%esp
   10d7e:	68 48 4f 01 00       	push   $0x14f48
   10d83:	e8 20 40 00 00       	call   14da8 <log_printf>
   10d88:	83 c4 10             	add    $0x10,%esp
      //TODO:当分配失败时应该将之前分配的页全部归还，且将映射关系也全部解除
      return 0;
   10d8b:	b8 00 00 00 00       	mov    $0x0,%eax
   10d90:	eb 59                	jmp    10deb <memory_alloc_for_page_dir+0xb6>
    }

    int err = memory_creat_map((pde_t*)page_dir, curr_vaddr, paddr, 1, privilege);
   10d92:	8b 45 08             	mov    0x8(%ebp),%eax
   10d95:	83 ec 0c             	sub    $0xc,%esp
   10d98:	ff 75 14             	push   0x14(%ebp)
   10d9b:	6a 01                	push   $0x1
   10d9d:	ff 75 e8             	push   -0x18(%ebp)
   10da0:	ff 75 f4             	push   -0xc(%ebp)
   10da3:	50                   	push   %eax
   10da4:	e8 30 fa ff ff       	call   107d9 <memory_creat_map>
   10da9:	83 c4 20             	add    $0x20,%esp
   10dac:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (err < 0) {//分配失败
   10daf:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10db3:	79 1a                	jns    10dcf <memory_alloc_for_page_dir+0x9a>
      log_printf("create memory failed. err = %d", err);
   10db5:	83 ec 08             	sub    $0x8,%esp
   10db8:	ff 75 e4             	push   -0x1c(%ebp)
   10dbb:	68 64 4f 01 00       	push   $0x14f64
   10dc0:	e8 e3 3f 00 00       	call   14da8 <log_printf>
   10dc5:	83 c4 10             	add    $0x10,%esp
      //TODO:当分配失败时应该将之前分配的页全部归还，且将映射关系也全部解除
      return 0;
   10dc8:	b8 00 00 00 00       	mov    $0x0,%eax
   10dcd:	eb 1c                	jmp    10deb <memory_alloc_for_page_dir+0xb6>
    }

    curr_vaddr += MEM_PAGE_SIZE;
   10dcf:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
  for (int i = 0; i < page_count; ++i) {
   10dd6:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10dda:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10ddd:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   10de0:	0f 8c 7a ff ff ff    	jl     10d60 <memory_alloc_for_page_dir+0x2b>
  }

  return 0;
   10de6:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10deb:	c9                   	leave  
   10dec:	c3                   	ret    

00010ded <memory_alloc_page_for>:
 * @param vaddr 待分配空间的起始地址
 * @param alloc_size 为其分配的空间大小
 * @param privilege 对应页空间的权限
 * @return int 错误码
 */
int memory_alloc_page_for(uint32_t vaddr, uint32_t alloc_size, uint32_t privilege) {
   10ded:	55                   	push   %ebp
   10dee:	89 e5                	mov    %esp,%ebp
   10df0:	83 ec 08             	sub    $0x8,%esp
  return memory_alloc_for_page_dir(task_current()->tss.cr3, vaddr, alloc_size, privilege);
   10df3:	e8 a5 0a 00 00       	call   1189d <task_current>
   10df8:	8b 40 74             	mov    0x74(%eax),%eax
   10dfb:	ff 75 10             	push   0x10(%ebp)
   10dfe:	ff 75 0c             	push   0xc(%ebp)
   10e01:	ff 75 08             	push   0x8(%ebp)
   10e04:	50                   	push   %eax
   10e05:	e8 2b ff ff ff       	call   10d35 <memory_alloc_for_page_dir>
   10e0a:	83 c4 10             	add    $0x10,%esp
}
   10e0d:	c9                   	leave  
   10e0e:	c3                   	ret    

00010e0f <curr_page_dir>:
/**
 * @brief 返回当前进程的页目录表的地址
 * 
 * @return pde_t* 
 */
static pde_t* curr_page_dir() {
   10e0f:	55                   	push   %ebp
   10e10:	89 e5                	mov    %esp,%ebp
   10e12:	83 ec 08             	sub    $0x8,%esp
  return (pde_t*)(task_current()->tss.cr3);
   10e15:	e8 83 0a 00 00       	call   1189d <task_current>
   10e1a:	8b 40 74             	mov    0x74(%eax),%eax
}
   10e1d:	c9                   	leave  
   10e1e:	c3                   	ret    

00010e1f <memory_alloc_page>:
/**
 * @brief 为进程的内核空间分配一页内存，需特权级0访问
 * 
 * @return uint32_t 内存的起始地址
 */
uint32_t memory_alloc_page() {
   10e1f:	55                   	push   %ebp
   10e20:	89 e5                	mov    %esp,%ebp
   10e22:	83 ec 18             	sub    $0x18,%esp
  //因为0x100000 ~ 0x8000 0000,即低 1mb~2gb都由操作系统内核使用，
  //操作系统内核已对整个内存空间进行了一一映射，而每个程序的2gb以下空间都使用操作系统的虚拟页表
  //所以直接返回该页物理地址，也就是该页在操作系统虚拟地址空间中的虚拟地址
  //需要注意的是后续访问该页需要0特权级，因为访问的是内核空间
  uint32_t addr = addr_alloc_page(&paddr_alloc, 1);
   10e25:	83 ec 08             	sub    $0x8,%esp
   10e28:	6a 01                	push   $0x1
   10e2a:	68 00 70 01 00       	push   $0x17000
   10e2f:	e8 55 f7 ff ff       	call   10589 <addr_alloc_page>
   10e34:	83 c4 10             	add    $0x10,%esp
   10e37:	89 45 f4             	mov    %eax,-0xc(%ebp)
  return addr;
   10e3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   10e3d:	c9                   	leave  
   10e3e:	c3                   	ret    

00010e3f <memory_free_page>:
 * @brief 释放一页内存空间
 * 
 * @param addr 
 */

void memory_free_page(uint32_t addr) {
   10e3f:	55                   	push   %ebp
   10e40:	89 e5                	mov    %esp,%ebp
   10e42:	83 ec 18             	sub    $0x18,%esp
  if (addr < MEM_TASK_BASE) { //释放内核空间的一页内存
   10e45:	8b 45 08             	mov    0x8(%ebp),%eax
   10e48:	85 c0                	test   %eax,%eax
   10e4a:	78 17                	js     10e63 <memory_free_page+0x24>
    addr_free_page(&paddr_alloc, addr, 1);  //因为内核空间为一一映射关系，虚拟地址即为物理地址,且不需要解除映射关系
   10e4c:	83 ec 04             	sub    $0x4,%esp
   10e4f:	6a 01                	push   $0x1
   10e51:	ff 75 08             	push   0x8(%ebp)
   10e54:	68 00 70 01 00       	push   $0x17000
   10e59:	e8 92 f7 ff ff       	call   105f0 <addr_free_page>
   10e5e:	83 c4 10             	add    $0x10,%esp

    //3.将页表项清空，解除映射关系
    pte->v = 0;
  }

}
   10e61:	eb 72                	jmp    10ed5 <memory_free_page+0x96>
    pte_t *pte = find_pte(curr_page_dir(), addr, 0);
   10e63:	e8 a7 ff ff ff       	call   10e0f <curr_page_dir>
   10e68:	83 ec 04             	sub    $0x4,%esp
   10e6b:	6a 00                	push   $0x0
   10e6d:	ff 75 08             	push   0x8(%ebp)
   10e70:	50                   	push   %eax
   10e71:	e8 b3 f8 ff ff       	call   10729 <find_pte>
   10e76:	83 c4 10             	add    $0x10,%esp
   10e79:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT(pte != (pte_t*)0 && pte->present);
   10e7c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10e80:	74 0d                	je     10e8f <memory_free_page+0x50>
   10e82:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e85:	0f b6 00             	movzbl (%eax),%eax
   10e88:	83 e0 01             	and    $0x1,%eax
   10e8b:	84 c0                	test   %al,%al
   10e8d:	75 1c                	jne    10eab <memory_free_page+0x6c>
   10e8f:	68 84 4f 01 00       	push   $0x14f84
   10e94:	68 0c 50 01 00       	push   $0x1500c
   10e99:	68 5d 02 00 00       	push   $0x25d
   10e9e:	68 ac 4e 01 00       	push   $0x14eac
   10ea3:	e8 17 32 00 00       	call   140bf <pannic>
   10ea8:	83 c4 10             	add    $0x10,%esp
    addr_free_page(&paddr_alloc, pte_to_pg_addr(pte), 1);
   10eab:	83 ec 0c             	sub    $0xc,%esp
   10eae:	ff 75 f4             	push   -0xc(%ebp)
   10eb1:	e8 83 f4 ff ff       	call   10339 <pte_to_pg_addr>
   10eb6:	83 c4 10             	add    $0x10,%esp
   10eb9:	83 ec 04             	sub    $0x4,%esp
   10ebc:	6a 01                	push   $0x1
   10ebe:	50                   	push   %eax
   10ebf:	68 00 70 01 00       	push   $0x17000
   10ec4:	e8 27 f7 ff ff       	call   105f0 <addr_free_page>
   10ec9:	83 c4 10             	add    $0x10,%esp
    pte->v = 0;
   10ecc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10ecf:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   10ed5:	90                   	nop
   10ed6:	c9                   	leave  
   10ed7:	c3                   	ret    

00010ed8 <memory_get_paddr>:
 * 
 * @param page_dir 
 * @param vaddr 
 * @return uint32_t 
 */
uint32_t memory_get_paddr(uint32_t page_dir, uint32_t vaddr) {
   10ed8:	55                   	push   %ebp
   10ed9:	89 e5                	mov    %esp,%ebp
   10edb:	83 ec 18             	sub    $0x18,%esp
  //查找vaddr对应的页表项
  pte_t * pte = find_pte((pde_t*)page_dir, vaddr, 0);
   10ede:	8b 45 08             	mov    0x8(%ebp),%eax
   10ee1:	83 ec 04             	sub    $0x4,%esp
   10ee4:	6a 00                	push   $0x0
   10ee6:	ff 75 0c             	push   0xc(%ebp)
   10ee9:	50                   	push   %eax
   10eea:	e8 3a f8 ff ff       	call   10729 <find_pte>
   10eef:	83 c4 10             	add    $0x10,%esp
   10ef2:	89 45 f4             	mov    %eax,-0xc(%ebp)

  //若没有找到该页表项或该页表项还不存在，则返回0
  if (!pte || !pte->present) {
   10ef5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10ef9:	74 0d                	je     10f08 <memory_get_paddr+0x30>
   10efb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10efe:	0f b6 00             	movzbl (%eax),%eax
   10f01:	83 e0 01             	and    $0x1,%eax
   10f04:	84 c0                	test   %al,%al
   10f06:	75 07                	jne    10f0f <memory_get_paddr+0x37>
    return 0;
   10f08:	b8 00 00 00 00       	mov    $0x0,%eax
   10f0d:	eb 1a                	jmp    10f29 <memory_get_paddr+0x51>
  }

  //找到并存在该页表项，返回绑定的物理地址
  return pte_to_pg_addr(pte) | (vaddr & (MEM_PAGE_SIZE - 1));
   10f0f:	83 ec 0c             	sub    $0xc,%esp
   10f12:	ff 75 f4             	push   -0xc(%ebp)
   10f15:	e8 1f f4 ff ff       	call   10339 <pte_to_pg_addr>
   10f1a:	83 c4 10             	add    $0x10,%esp
   10f1d:	89 c2                	mov    %eax,%edx
   10f1f:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f22:	25 ff 0f 00 00       	and    $0xfff,%eax
   10f27:	09 d0                	or     %edx,%eax

}
   10f29:	c9                   	leave  
   10f2a:	c3                   	ret    

00010f2b <memory_copy_uvm_data>:
 * @param to_addr 目标虚拟空间的起始地址
 * @param to_page_dir 目标虚拟空间的页目录表
 * @param from_addr 当前虚拟空间中的源地址
 * @param size 拷贝的大小
 */
int memory_copy_uvm_data(uint32_t to_vaddr, uint32_t to_page_dir, uint32_t from_vaddr, uint32_t size) {
   10f2b:	55                   	push   %ebp
   10f2c:	89 e5                	mov    %esp,%ebp
   10f2e:	83 ec 18             	sub    $0x18,%esp

  //由于虚拟地址空间是连续的而物理地址空间不一定，所以需要一页一页的单独拷贝
  while (size > 0) {
   10f31:	eb 6e                	jmp    10fa1 <memory_copy_uvm_data+0x76>
    //1.获取to_vaddr对应的物理地址
    uint32_t to_paddr = memory_get_paddr(to_page_dir, to_vaddr);
   10f33:	83 ec 08             	sub    $0x8,%esp
   10f36:	ff 75 08             	push   0x8(%ebp)
   10f39:	ff 75 0c             	push   0xc(%ebp)
   10f3c:	e8 97 ff ff ff       	call   10ed8 <memory_get_paddr>
   10f41:	83 c4 10             	add    $0x10,%esp
   10f44:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (to_paddr == 0) {
   10f47:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10f4b:	75 07                	jne    10f54 <memory_copy_uvm_data+0x29>
      return -1;
   10f4d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10f52:	eb 58                	jmp    10fac <memory_copy_uvm_data+0x81>
    }

    //2.获取to_paddr所在的物理页可以写入的空间大小
    //即从to_paddr到该页的末尾的空间大小
    uint32_t offset = (MEM_PAGE_SIZE - 1) & to_paddr;
   10f54:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10f57:	25 ff 0f 00 00       	and    $0xfff,%eax
   10f5c:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32_t curr_size = MEM_PAGE_SIZE - offset;
   10f5f:	b8 00 10 00 00       	mov    $0x1000,%eax
   10f64:	2b 45 ec             	sub    -0x14(%ebp),%eax
   10f67:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //3.判断size是否  < curr_size
    if (size < curr_size) { //size < curr_size则在当前物理页拷贝szie个字节即可
   10f6a:	8b 45 14             	mov    0x14(%ebp),%eax
   10f6d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
   10f70:	73 06                	jae    10f78 <memory_copy_uvm_data+0x4d>
      curr_size = size;
   10f72:	8b 45 14             	mov    0x14(%ebp),%eax
   10f75:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    //4.拷贝内容并更新到下一个需要拷贝的地方
    kernel_memcpy((void*)to_paddr, (void*)from_vaddr, curr_size);
   10f78:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   10f7b:	8b 55 10             	mov    0x10(%ebp),%edx
   10f7e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10f81:	83 ec 04             	sub    $0x4,%esp
   10f84:	51                   	push   %ecx
   10f85:	52                   	push   %edx
   10f86:	50                   	push   %eax
   10f87:	e8 e6 35 00 00       	call   14572 <kernel_memcpy>
   10f8c:	83 c4 10             	add    $0x10,%esp
    size -= curr_size;
   10f8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f92:	29 45 14             	sub    %eax,0x14(%ebp)
    to_vaddr += curr_size;
   10f95:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f98:	01 45 08             	add    %eax,0x8(%ebp)
    from_vaddr += curr_size;
   10f9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f9e:	01 45 10             	add    %eax,0x10(%ebp)
  while (size > 0) {
   10fa1:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   10fa5:	75 8c                	jne    10f33 <memory_copy_uvm_data+0x8>

  }
  
  return 0;
   10fa7:	b8 00 00 00 00       	mov    $0x0,%eax

}
   10fac:	c9                   	leave  
   10fad:	c3                   	ret    

00010fae <sys_sbrk>:
 * @brief 拓展堆区内存
 * 
 * @param incr 增长指定字节
 * @return char* 
 */
char *sys_sbrk(int incr) {
   10fae:	55                   	push   %ebp
   10faf:	89 e5                	mov    %esp,%ebp
   10fb1:	83 ec 38             	sub    $0x38,%esp
  ASSERT(incr >= 0); //只处理堆区内存增加的情况
   10fb4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10fb8:	79 1c                	jns    10fd6 <sys_sbrk+0x28>
   10fba:	68 a5 4f 01 00       	push   $0x14fa5
   10fbf:	68 20 50 01 00       	push   $0x15020
   10fc4:	68 ac 02 00 00       	push   $0x2ac
   10fc9:	68 ac 4e 01 00       	push   $0x14eac
   10fce:	e8 ec 30 00 00       	call   140bf <pannic>
   10fd3:	83 c4 10             	add    $0x10,%esp
  task_t *task = task_current();
   10fd6:	e8 c2 08 00 00       	call   1189d <task_current>
   10fdb:	89 45 f0             	mov    %eax,-0x10(%ebp)
  char * pre_heap_end = (char *)task->heap_end;
   10fde:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10fe1:	8b 40 10             	mov    0x10(%eax),%eax
   10fe4:	89 45 ec             	mov    %eax,-0x14(%ebp)
  int pre_incr = incr;
   10fe7:	8b 45 08             	mov    0x8(%ebp),%eax
   10fea:	89 45 e8             	mov    %eax,-0x18(%ebp)

  if (incr == 0) {
   10fed:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10ff1:	75 1b                	jne    1100e <sys_sbrk+0x60>
    log_printf("sbrk(0): end=0x%x", pre_heap_end);
   10ff3:	83 ec 08             	sub    $0x8,%esp
   10ff6:	ff 75 ec             	push   -0x14(%ebp)
   10ff9:	68 af 4f 01 00       	push   $0x14faf
   10ffe:	e8 a5 3d 00 00       	call   14da8 <log_printf>
   11003:	83 c4 10             	add    $0x10,%esp
    return pre_heap_end;
   11006:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11009:	e9 c4 00 00 00       	jmp    110d2 <sys_sbrk+0x124>
  }

  uint32_t start = task->heap_end;  //堆区原始末尾位置
   1100e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11011:	8b 40 10             	mov    0x10(%eax),%eax
   11014:	89 45 f4             	mov    %eax,-0xc(%ebp)
  uint32_t end = start + incr;  //需要拓展到的末尾位置
   11017:	8b 55 08             	mov    0x8(%ebp),%edx
   1101a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1101d:	01 d0                	add    %edx,%eax
   1101f:	89 45 e4             	mov    %eax,-0x1c(%ebp)

  uint32_t start_offset = start % MEM_PAGE_SIZE;  //获取末尾位置在当前页内的偏移量
   11022:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11025:	25 ff 0f 00 00       	and    $0xfff,%eax
   1102a:	89 45 e0             	mov    %eax,-0x20(%ebp)
  if (start_offset) { //先将当前页的剩余空间分配出去
   1102d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   11031:	74 3b                	je     1106e <sys_sbrk+0xc0>
    if (start_offset + incr <= MEM_PAGE_SIZE) { //当前页剩余内存可供分配
   11033:	8b 55 08             	mov    0x8(%ebp),%edx
   11036:	8b 45 e0             	mov    -0x20(%ebp),%eax
   11039:	01 d0                	add    %edx,%eax
   1103b:	3d 00 10 00 00       	cmp    $0x1000,%eax
   11040:	77 12                	ja     11054 <sys_sbrk+0xa6>
      task->heap_end = end; 
   11042:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11045:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   11048:	89 50 10             	mov    %edx,0x10(%eax)
      incr = 0;
   1104b:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
   11052:	eb 1a                	jmp    1106e <sys_sbrk+0xc0>
    } else {  //当前页剩余内存不够分配
      uint32_t curr_size = MEM_PAGE_SIZE - start_offset;  //获取当前页剩余大小
   11054:	b8 00 10 00 00       	mov    $0x1000,%eax
   11059:	2b 45 e0             	sub    -0x20(%ebp),%eax
   1105c:	89 45 dc             	mov    %eax,-0x24(%ebp)
      //将当前页剩余内存全部分配出
      start += curr_size;
   1105f:	8b 45 dc             	mov    -0x24(%ebp),%eax
   11062:	01 45 f4             	add    %eax,-0xc(%ebp)
      incr -= curr_size;
   11065:	8b 45 08             	mov    0x8(%ebp),%eax
   11068:	2b 45 dc             	sub    -0x24(%ebp),%eax
   1106b:	89 45 08             	mov    %eax,0x8(%ebp)
    }
  }

  if (incr) { //还需要继续拓展
   1106e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11072:	74 3c                	je     110b0 <sys_sbrk+0x102>
    uint32_t curr_size = end - start; //还需拓展的大小
   11074:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11077:	2b 45 f4             	sub    -0xc(%ebp),%eax
   1107a:	89 45 d8             	mov    %eax,-0x28(%ebp)
    int err = memory_alloc_page_for(start, curr_size, PTE_P | PTE_U |  PTE_W);  //为该部分内存创建映射关系
   1107d:	83 ec 04             	sub    $0x4,%esp
   11080:	6a 07                	push   $0x7
   11082:	ff 75 d8             	push   -0x28(%ebp)
   11085:	ff 75 f4             	push   -0xc(%ebp)
   11088:	e8 60 fd ff ff       	call   10ded <memory_alloc_page_for>
   1108d:	83 c4 10             	add    $0x10,%esp
   11090:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    if (err < 0) {
   11093:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   11097:	79 17                	jns    110b0 <sys_sbrk+0x102>
      log_printf("sbrk: alloc mem failed.");
   11099:	83 ec 0c             	sub    $0xc,%esp
   1109c:	68 c1 4f 01 00       	push   $0x14fc1
   110a1:	e8 02 3d 00 00       	call   14da8 <log_printf>
   110a6:	83 c4 10             	add    $0x10,%esp
      return (char*)-1;
   110a9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   110ae:	eb 22                	jmp    110d2 <sys_sbrk+0x124>
    }

  }

  log_printf("sbrk(%d): end=0x%x", pre_incr, end);
   110b0:	83 ec 04             	sub    $0x4,%esp
   110b3:	ff 75 e4             	push   -0x1c(%ebp)
   110b6:	ff 75 e8             	push   -0x18(%ebp)
   110b9:	68 d9 4f 01 00       	push   $0x14fd9
   110be:	e8 e5 3c 00 00       	call   14da8 <log_printf>
   110c3:	83 c4 10             	add    $0x10,%esp
  task->heap_end = end;
   110c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   110c9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   110cc:	89 50 10             	mov    %edx,0x10(%eax)

  return (char*)end;
   110cf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   110d2:	c9                   	leave  
   110d3:	c3                   	ret    

000110d4 <list_node_init>:
    list_node_t * first;
    list_node_t * last;
    int size;
}list_t;

static inline void list_node_init(list_node_t *node) {
   110d4:	55                   	push   %ebp
   110d5:	89 e5                	mov    %esp,%ebp
   110d7:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   110da:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   110de:	75 19                	jne    110f9 <list_node_init+0x25>
   110e0:	68 2c 50 01 00       	push   $0x1502c
   110e5:	68 dc 51 01 00       	push   $0x151dc
   110ea:	6a 20                	push   $0x20
   110ec:	68 44 50 01 00       	push   $0x15044
   110f1:	e8 c9 2f 00 00       	call   140bf <pannic>
   110f6:	83 c4 10             	add    $0x10,%esp
    node->pre = node->next = (list_node_t*)0;
   110f9:	8b 45 08             	mov    0x8(%ebp),%eax
   110fc:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11103:	8b 45 08             	mov    0x8(%ebp),%eax
   11106:	8b 50 04             	mov    0x4(%eax),%edx
   11109:	8b 45 08             	mov    0x8(%ebp),%eax
   1110c:	89 10                	mov    %edx,(%eax)
}
   1110e:	90                   	nop
   1110f:	c9                   	leave  
   11110:	c3                   	ret    

00011111 <list_node_next>:
    ASSERT(node != (list_node_t*)0);

    return node->pre;
}

static inline list_node_t *list_node_next(list_node_t *node) {
   11111:	55                   	push   %ebp
   11112:	89 e5                	mov    %esp,%ebp
   11114:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   11117:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1111b:	75 19                	jne    11136 <list_node_next+0x25>
   1111d:	68 2c 50 01 00       	push   $0x1502c
   11122:	68 3c 52 01 00       	push   $0x1523c
   11127:	6a 2b                	push   $0x2b
   11129:	68 44 50 01 00       	push   $0x15044
   1112e:	e8 8c 2f 00 00       	call   140bf <pannic>
   11133:	83 c4 10             	add    $0x10,%esp

    return node->next;
   11136:	8b 45 08             	mov    0x8(%ebp),%eax
   11139:	8b 40 04             	mov    0x4(%eax),%eax
}
   1113c:	c9                   	leave  
   1113d:	c3                   	ret    

0001113e <list_init>:

static inline void list_init(list_t *list) {
   1113e:	55                   	push   %ebp
   1113f:	89 e5                	mov    %esp,%ebp
   11141:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11144:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11148:	75 19                	jne    11163 <list_init+0x25>
   1114a:	68 82 50 01 00       	push   $0x15082
   1114f:	68 ec 51 01 00       	push   $0x151ec
   11154:	6a 31                	push   $0x31
   11156:	68 44 50 01 00       	push   $0x15044
   1115b:	e8 5f 2f 00 00       	call   140bf <pannic>
   11160:	83 c4 10             	add    $0x10,%esp

    list->first = list->last = (list_node_t*)0;
   11163:	8b 45 08             	mov    0x8(%ebp),%eax
   11166:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1116d:	8b 45 08             	mov    0x8(%ebp),%eax
   11170:	8b 50 04             	mov    0x4(%eax),%edx
   11173:	8b 45 08             	mov    0x8(%ebp),%eax
   11176:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   11178:	8b 45 08             	mov    0x8(%ebp),%eax
   1117b:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   11182:	90                   	nop
   11183:	c9                   	leave  
   11184:	c3                   	ret    

00011185 <list_is_empty>:

static inline int list_is_empty(list_t *list) {
   11185:	55                   	push   %ebp
   11186:	89 e5                	mov    %esp,%ebp
   11188:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1118b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1118f:	75 19                	jne    111aa <list_is_empty+0x25>
   11191:	68 82 50 01 00       	push   $0x15082
   11196:	68 4c 52 01 00       	push   $0x1524c
   1119b:	6a 38                	push   $0x38
   1119d:	68 44 50 01 00       	push   $0x15044
   111a2:	e8 18 2f 00 00       	call   140bf <pannic>
   111a7:	83 c4 10             	add    $0x10,%esp

    return list->size == 0;
   111aa:	8b 45 08             	mov    0x8(%ebp),%eax
   111ad:	8b 40 08             	mov    0x8(%eax),%eax
   111b0:	85 c0                	test   %eax,%eax
   111b2:	0f 94 c0             	sete   %al
   111b5:	0f b6 c0             	movzbl %al,%eax
}
   111b8:	c9                   	leave  
   111b9:	c3                   	ret    

000111ba <list_get_size>:

static inline int list_get_size(list_t *list) {
   111ba:	55                   	push   %ebp
   111bb:	89 e5                	mov    %esp,%ebp
   111bd:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   111c0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   111c4:	75 19                	jne    111df <list_get_size+0x25>
   111c6:	68 82 50 01 00       	push   $0x15082
   111cb:	68 7c 52 01 00       	push   $0x1527c
   111d0:	6a 3e                	push   $0x3e
   111d2:	68 44 50 01 00       	push   $0x15044
   111d7:	e8 e3 2e 00 00       	call   140bf <pannic>
   111dc:	83 c4 10             	add    $0x10,%esp

    return list->size;
   111df:	8b 45 08             	mov    0x8(%ebp),%eax
   111e2:	8b 40 08             	mov    0x8(%eax),%eax
}
   111e5:	c9                   	leave  
   111e6:	c3                   	ret    

000111e7 <list_get_first>:

static inline list_node_t *list_get_first(list_t *list) {
   111e7:	55                   	push   %ebp
   111e8:	89 e5                	mov    %esp,%ebp
   111ea:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   111ed:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   111f1:	75 19                	jne    1120c <list_get_first+0x25>
   111f3:	68 82 50 01 00       	push   $0x15082
   111f8:	68 2c 52 01 00       	push   $0x1522c
   111fd:	6a 44                	push   $0x44
   111ff:	68 44 50 01 00       	push   $0x15044
   11204:	e8 b6 2e 00 00       	call   140bf <pannic>
   11209:	83 c4 10             	add    $0x10,%esp

    return list->first;
   1120c:	8b 45 08             	mov    0x8(%ebp),%eax
   1120f:	8b 00                	mov    (%eax),%eax
}
   11211:	c9                   	leave  
   11212:	c3                   	ret    

00011213 <up2>:
static inline uint32_t up2(uint32_t size, uint32_t bound) {
   11213:	55                   	push   %ebp
   11214:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   11216:	8b 55 08             	mov    0x8(%ebp),%edx
   11219:	8b 45 0c             	mov    0xc(%ebp),%eax
   1121c:	01 d0                	add    %edx,%eax
   1121e:	8d 50 ff             	lea    -0x1(%eax),%edx
   11221:	8b 45 0c             	mov    0xc(%ebp),%eax
   11224:	f7 d8                	neg    %eax
   11226:	21 d0                	and    %edx,%eax
}
   11228:	5d                   	pop    %ebp
   11229:	c3                   	ret    

0001122a <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   1122a:	55                   	push   %ebp
   1122b:	89 e5                	mov    %esp,%ebp
   1122d:	f4                   	hlt    
   1122e:	90                   	nop
   1122f:	5d                   	pop    %ebp
   11230:	c3                   	ret    

00011231 <write_cr3>:
static inline void write_cr3(uint32_t data) {
   11231:	55                   	push   %ebp
   11232:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("mov %[v], %%cr3" : : [v] "r"(data));
   11234:	8b 45 08             	mov    0x8(%ebp),%eax
   11237:	0f 22 d8             	mov    %eax,%cr3
}
   1123a:	90                   	nop
   1123b:	5d                   	pop    %ebp
   1123c:	c3                   	ret    

0001123d <far_jump>:
 * @brief  远跳转，当跳转发生在TSS段之间时，cpu将会保存状态到当前TR寄存器指向的TSS段
 *
 * @param selector 选择子
 * @param offset 跳转的偏移量
 */
static inline void far_jump(uint32_t selector, uint32_t offset) {
   1123d:	55                   	push   %ebp
   1123e:	89 e5                	mov    %esp,%ebp
   11240:	83 ec 10             	sub    $0x10,%esp
  // 传入远跳转需要的参数, 即cs = selector, eip = offset 
  uint32_t addr[] = {offset, selector};  
   11243:	8b 45 0c             	mov    0xc(%ebp),%eax
   11246:	89 45 f8             	mov    %eax,-0x8(%ebp)
   11249:	8b 45 08             	mov    0x8(%ebp),%eax
   1124c:	89 45 fc             	mov    %eax,-0x4(%ebp)

  __asm__ __volatile__("ljmpl *(%[a])" : : [a] "r"(addr));
   1124f:	8d 45 f8             	lea    -0x8(%ebp),%eax
   11252:	ff 28                	ljmp   *(%eax)
}
   11254:	90                   	nop
   11255:	c9                   	leave  
   11256:	c3                   	ret    

00011257 <write_tr>:
 * @brief   写入当前任务的TSS段描述符的选择子到TR寄存器中，告诉cpu当前段的TSS位置
 *          以便在进行任务切换时，将状态保存到该TSS段中
 * 
 * @param tss_selector 准备运行的任务的TSS段的选择子
 */
static inline void write_tr(uint16_t tss_selector) {
   11257:	55                   	push   %ebp
   11258:	89 e5                	mov    %esp,%ebp
   1125a:	83 ec 04             	sub    $0x4,%esp
   1125d:	8b 45 08             	mov    0x8(%ebp),%eax
   11260:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  __asm__ __volatile__("ltr %[v]" : : [v]"r"(tss_selector));
   11264:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   11268:	0f 00 d8             	ltr    %ax
}
   1126b:	90                   	nop
   1126c:	c9                   	leave  
   1126d:	c3                   	ret    

0001126e <mmu_set_page_dir>:
static inline void mmu_set_page_dir(uint32_t paddr) {
   1126e:	55                   	push   %ebp
   1126f:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   11271:	ff 75 08             	push   0x8(%ebp)
   11274:	e8 b8 ff ff ff       	call   11231 <write_cr3>
   11279:	83 c4 04             	add    $0x4,%esp
}
   1127c:	90                   	nop
   1127d:	c9                   	leave  
   1127e:	c3                   	ret    

0001127f <switch_to_tss>:
static task_t task_table[TASK_COUNT];
//定义用于维护task_table的互斥锁
static mutex_t task_table_lock;


static void switch_to_tss(uint16_t tss_selector) {
   1127f:	55                   	push   %ebp
   11280:	89 e5                	mov    %esp,%ebp
   11282:	83 ec 04             	sub    $0x4,%esp
   11285:	8b 45 08             	mov    0x8(%ebp),%eax
   11288:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    //进行远跳转，让cpu访问该tss段的描述符，cpu将重启到之前运行该tss对应的任务的状态继续运行该任务
    far_jump(tss_selector, 0);
   1128c:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   11290:	6a 00                	push   $0x0
   11292:	50                   	push   %eax
   11293:	e8 a5 ff ff ff       	call   1123d <far_jump>
   11298:	83 c4 08             	add    $0x8,%esp
}
   1129b:	90                   	nop
   1129c:	c9                   	leave  
   1129d:	c3                   	ret    

0001129e <task_switch_from_to>:
 * @brief  将任务从from切换到to
 * 
 * @param from 切换前的任务
 * @param to 切换后的任务
 */
void task_switch_from_to(task_t *from, task_t *to) {
   1129e:	55                   	push   %ebp
   1129f:	89 e5                	mov    %esp,%ebp
    //跳转到对应的tss段读取并恢复cpu任务状态
    switch_to_tss(to->tss_selector);
   112a1:	8b 45 0c             	mov    0xc(%ebp),%eax
   112a4:	8b 80 c0 00 00 00    	mov    0xc0(%eax),%eax
   112aa:	0f b7 c0             	movzwl %ax,%eax
   112ad:	50                   	push   %eax
   112ae:	e8 cc ff ff ff       	call   1127f <switch_to_tss>
   112b3:	83 c4 04             	add    $0x4,%esp
}
   112b6:	90                   	nop
   112b7:	c9                   	leave  
   112b8:	c3                   	ret    

000112b9 <tss_init>:
 * @param task 需要初始化的任务对象
 * @param entry 任务入口地址
 * @param esp 任务所用的栈顶指针
 * @param flag 任务属性标志位，如特权级
 */
static int tss_init(task_t *task, uint32_t entry, uint32_t esp, uint32_t flag) {
   112b9:	55                   	push   %ebp
   112ba:	89 e5                	mov    %esp,%ebp
   112bc:	83 ec 28             	sub    $0x28,%esp
   //1.将该TSS段绑定到GDT中的某个段描述符
    uint32_t tss_selector = gdt_alloc_desc();
   112bf:	e8 89 12 00 00       	call   1254d <gdt_alloc_desc>
   112c4:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (tss_selector < 0) {
        log_printf("alloc tss failed!");
        return -1;
    }
    segment_desc_set(tss_selector, (uint32_t)&task->tss, sizeof(task->tss), 
   112c7:	8b 45 08             	mov    0x8(%ebp),%eax
   112ca:	83 c0 58             	add    $0x58,%eax
   112cd:	89 c2                	mov    %eax,%edx
   112cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
   112d2:	0f b7 c0             	movzwl %ax,%eax
   112d5:	68 89 00 00 00       	push   $0x89
   112da:	6a 68                	push   $0x68
   112dc:	52                   	push   %edx
   112dd:	50                   	push   %eax
   112de:	e8 f8 10 00 00       	call   123db <segment_desc_set>
   112e3:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_TYPE_TSS);


    //2.将tss段的值置空
    kernel_memset(&task->tss, 0, sizeof(task->tss));
   112e6:	8b 45 08             	mov    0x8(%ebp),%eax
   112e9:	83 c0 58             	add    $0x58,%eax
   112ec:	83 ec 04             	sub    $0x4,%esp
   112ef:	6a 68                	push   $0x68
   112f1:	6a 00                	push   $0x0
   112f3:	50                   	push   %eax
   112f4:	e8 c8 32 00 00       	call   145c1 <kernel_memset>
   112f9:	83 c4 10             	add    $0x10,%esp

    //3.记录tss绑定到的描述符的选择子
    task->tss_selector = tss_selector;
   112fc:	8b 45 08             	mov    0x8(%ebp),%eax
   112ff:	8b 55 ec             	mov    -0x14(%ebp),%edx
   11302:	89 90 c0 00 00 00    	mov    %edx,0xc0(%eax)


    //4.根据任务的特权级来设置对应选择子的cpl
    uint32_t code_selector, data_selector;
    if (flag & TASK_FLAGS_SYSTEM) { //内核特权级
   11308:	8b 45 14             	mov    0x14(%ebp),%eax
   1130b:	83 e0 01             	and    $0x1,%eax
   1130e:	85 c0                	test   %eax,%eax
   11310:	74 10                	je     11322 <tss_init+0x69>
        code_selector = KERNEL_SELECTOR_CS;
   11312:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%ebp)
        data_selector = KERNEL_SELECTOR_DS;
   11319:	c7 45 f0 10 00 00 00 	movl   $0x10,-0x10(%ebp)
   11320:	eb 16                	jmp    11338 <tss_init+0x7f>
    } else {    //用户特权级
        //获取任务的代码段选择子和数据段选择子，并初始化其CPL,因为是平台模型，所以基本不涉及到跨段访问，所以不需要RPL
        code_selector = task_manager.app_code_selector | SEG_CPL3;
   11322:	a1 b0 01 02 00       	mov    0x201b0,%eax
   11327:	83 c8 03             	or     $0x3,%eax
   1132a:	89 45 f4             	mov    %eax,-0xc(%ebp)
        data_selector = task_manager.app_data_selector | SEG_CPL3;
   1132d:	a1 b4 01 02 00       	mov    0x201b4,%eax
   11332:	83 c8 03             	or     $0x3,%eax
   11335:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }


    //5.设置eip，即任务的起始地址
    task->tss.eip = entry;
   11338:	8b 45 08             	mov    0x8(%ebp),%eax
   1133b:	8b 55 0c             	mov    0xc(%ebp),%edx
   1133e:	89 50 78             	mov    %edx,0x78(%eax)

    //6.根据任务的特权级设置任务所使用的栈空间
    task->tss.esp =  esp;   //特权级为3的栈空间
   11341:	8b 45 08             	mov    0x8(%ebp),%eax
   11344:	8b 55 10             	mov    0x10(%ebp),%edx
   11347:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
    uint32_t kernel_stack = memory_alloc_page();  //分配一页作为内核特权级0的栈空间
   1134d:	e8 cd fa ff ff       	call   10e1f <memory_alloc_page>
   11352:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (kernel_stack == 0) //内核栈空间初始化失败
   11355:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11359:	0f 84 9b 00 00 00    	je     113fa <tss_init+0x141>
        goto tss_init_failed;   
    else task->tss.esp0 =  kernel_stack + MEM_PAGE_SIZE;//特权级为0的栈空间
   1135f:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11362:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edx
   11368:	8b 45 08             	mov    0x8(%ebp),%eax
   1136b:	89 50 5c             	mov    %edx,0x5c(%eax)

    //7.平坦模型，初始化栈空间段寄存器
    task->tss.ss =  data_selector;  //特权级为3时使用的栈段
   1136e:	8b 45 08             	mov    0x8(%ebp),%eax
   11371:	8b 55 f0             	mov    -0x10(%ebp),%edx
   11374:	89 90 a8 00 00 00    	mov    %edx,0xa8(%eax)
    task->tss.ss0 = KERNEL_SELECTOR_DS; //特权级为0时使用的栈段，
   1137a:	8b 45 08             	mov    0x8(%ebp),%eax
   1137d:	c7 40 60 10 00 00 00 	movl   $0x10,0x60(%eax)
                                        //由于平坦模型，其实使用的是同一片空间，只是特权级发生了变化

    //8. 平坦模型，初始其余化段寄存器
    task->tss.es = task->tss.fs = task->tss.gs = task->tss.ds = data_selector;
   11384:	8b 45 08             	mov    0x8(%ebp),%eax
   11387:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1138a:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
   11390:	8b 45 08             	mov    0x8(%ebp),%eax
   11393:	8b 90 ac 00 00 00    	mov    0xac(%eax),%edx
   11399:	8b 45 08             	mov    0x8(%ebp),%eax
   1139c:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)
   113a2:	8b 45 08             	mov    0x8(%ebp),%eax
   113a5:	8b 90 b4 00 00 00    	mov    0xb4(%eax),%edx
   113ab:	8b 45 08             	mov    0x8(%ebp),%eax
   113ae:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
   113b4:	8b 45 08             	mov    0x8(%ebp),%eax
   113b7:	8b 90 b0 00 00 00    	mov    0xb0(%eax),%edx
   113bd:	8b 45 08             	mov    0x8(%ebp),%eax
   113c0:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)

    //9.平坦模型，初始化代码段寄存器
    task->tss.cs = code_selector;
   113c6:	8b 45 08             	mov    0x8(%ebp),%eax
   113c9:	8b 55 f4             	mov    -0xc(%ebp),%edx
   113cc:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)

    //10.初始化eflags寄存器，使cpu中断保持开启
    task->tss.eflags = EFLAGS_DEFAULT_1 | EFLAGS_IF;
   113d2:	8b 45 08             	mov    0x8(%ebp),%eax
   113d5:	c7 40 7c 02 02 00 00 	movl   $0x202,0x7c(%eax)

    //11.创建当前进程的虚拟页目录表，并设置cr3寄存器
    uint32_t page_dir = memory_creat_uvm();
   113dc:	e8 62 f5 ff ff       	call   10943 <memory_creat_uvm>
   113e1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (page_dir == 0) 
   113e4:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   113e8:	74 13                	je     113fd <tss_init+0x144>
        goto tss_init_failed;
    task->tss.cr3 = page_dir;
   113ea:	8b 45 08             	mov    0x8(%ebp),%eax
   113ed:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   113f0:	89 50 74             	mov    %edx,0x74(%eax)
    
    return 0;
   113f3:	b8 00 00 00 00       	mov    $0x0,%eax
   113f8:	eb 2f                	jmp    11429 <tss_init+0x170>
        goto tss_init_failed;   
   113fa:	90                   	nop
   113fb:	eb 01                	jmp    113fe <tss_init+0x145>
        goto tss_init_failed;
   113fd:	90                   	nop

//tss初始化失败
tss_init_failed:
    gdt_free(tss_selector);  //释放选择子
   113fe:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11401:	0f b7 c0             	movzwl %ax,%eax
   11404:	83 ec 0c             	sub    $0xc,%esp
   11407:	50                   	push   %eax
   11408:	e8 b5 11 00 00       	call   125c2 <gdt_free>
   1140d:	83 c4 10             	add    $0x10,%esp

    if (kernel_stack) { //内核栈空间分配有效，需要释放
   11410:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11414:	74 0e                	je     11424 <tss_init+0x16b>
        memory_free_page(kernel_stack);
   11416:	83 ec 0c             	sub    $0xc,%esp
   11419:	ff 75 e8             	push   -0x18(%ebp)
   1141c:	e8 1e fa ff ff       	call   10e3f <memory_free_page>
   11421:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   11424:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11429:	c9                   	leave  
   1142a:	c3                   	ret    

0001142b <task_start>:
/**
 * @brief 将任务插入任务链表中并设为就绪态，标志该任务可被调度
 * 
 * @param task 
 */
void task_start(task_t *task) {
   1142b:	55                   	push   %ebp
   1142c:	89 e5                	mov    %esp,%ebp
   1142e:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   11431:	e8 42 1b 00 00       	call   12f78 <idt_enter_protection>
   11436:	89 45 f4             	mov    %eax,-0xc(%ebp)
   
    //5.将任务加入任务队列
    list_insert_last(&task_manager.task_list, &task->task_node);
   11439:	8b 45 08             	mov    0x8(%ebp),%eax
   1143c:	83 c0 48             	add    $0x48,%eax
   1143f:	83 ec 08             	sub    $0x8,%esp
   11442:	50                   	push   %eax
   11443:	68 10 00 02 00       	push   $0x20010
   11448:	e8 84 36 00 00       	call   14ad1 <list_insert_last>
   1144d:	83 c4 10             	add    $0x10,%esp

    //6.将任务设置为就绪态
    task_set_ready(task);
   11450:	83 ec 0c             	sub    $0xc,%esp
   11453:	ff 75 08             	push   0x8(%ebp)
   11456:	e8 7e 03 00 00       	call   117d9 <task_set_ready>
   1145b:	83 c4 10             	add    $0x10,%esp

    
    idt_leave_protection(state);//TODO:解锁
   1145e:	83 ec 0c             	sub    $0xc,%esp
   11461:	ff 75 f4             	push   -0xc(%ebp)
   11464:	e8 27 1b 00 00       	call   12f90 <idt_leave_protection>
   11469:	83 c4 10             	add    $0x10,%esp
}
   1146c:	90                   	nop
   1146d:	c9                   	leave  
   1146e:	c3                   	ret    

0001146f <task_init>:
 * @param entry 任务的入口地址
 * @param esp 任务指行时所用的栈顶指针
 * @param flag 任务属性标志位，如特权级
 * @return int 
 */
int task_init(task_t *task, const char* name, uint32_t entry, uint32_t esp, uint32_t flag) {
   1146f:	55                   	push   %ebp
   11470:	89 e5                	mov    %esp,%ebp
   11472:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t*)0);
   11475:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11479:	75 1c                	jne    11497 <task_init+0x28>
   1147b:	68 95 50 01 00       	push   $0x15095
   11480:	68 d0 51 01 00       	push   $0x151d0
   11485:	68 9f 00 00 00       	push   $0x9f
   1148a:	68 a8 50 01 00       	push   $0x150a8
   1148f:	e8 2b 2c 00 00       	call   140bf <pannic>
   11494:	83 c4 10             	add    $0x10,%esp
    //1.初始化任务TSS段
    int err = tss_init(task, entry, esp, flag);
   11497:	ff 75 18             	push   0x18(%ebp)
   1149a:	ff 75 14             	push   0x14(%ebp)
   1149d:	ff 75 10             	push   0x10(%ebp)
   114a0:	ff 75 08             	push   0x8(%ebp)
   114a3:	e8 11 fe ff ff       	call   112b9 <tss_init>
   114a8:	83 c4 10             	add    $0x10,%esp
   114ab:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (err == -1)
   114ae:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
   114b2:	75 08                	jne    114bc <task_init+0x4d>
        return err;
   114b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   114b7:	e9 a4 00 00 00       	jmp    11560 <task_init+0xf1>
    

    //2.初始化任务名称
    kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   114bc:	8b 45 08             	mov    0x8(%ebp),%eax
   114bf:	83 c0 20             	add    $0x20,%eax
   114c2:	83 ec 04             	sub    $0x4,%esp
   114c5:	6a 20                	push   $0x20
   114c7:	ff 75 0c             	push   0xc(%ebp)
   114ca:	50                   	push   %eax
   114cb:	e8 b2 2f 00 00       	call   14482 <kernel_strncpy>
   114d0:	83 c4 10             	add    $0x10,%esp

    //3.初始化任务队列节点及就绪队列节点
    list_node_init(&task->ready_node);
   114d3:	8b 45 08             	mov    0x8(%ebp),%eax
   114d6:	83 c0 40             	add    $0x40,%eax
   114d9:	83 ec 0c             	sub    $0xc,%esp
   114dc:	50                   	push   %eax
   114dd:	e8 f2 fb ff ff       	call   110d4 <list_node_init>
   114e2:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->task_node);
   114e5:	8b 45 08             	mov    0x8(%ebp),%eax
   114e8:	83 c0 48             	add    $0x48,%eax
   114eb:	83 ec 0c             	sub    $0xc,%esp
   114ee:	50                   	push   %eax
   114ef:	e8 e0 fb ff ff       	call   110d4 <list_node_init>
   114f4:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   114f7:	8b 45 08             	mov    0x8(%ebp),%eax
   114fa:	83 c0 50             	add    $0x50,%eax
   114fd:	83 ec 0c             	sub    $0xc,%esp
   11500:	50                   	push   %eax
   11501:	e8 ce fb ff ff       	call   110d4 <list_node_init>
   11506:	83 c4 10             	add    $0x10,%esp

    //4.初始化最大时间片数与当前拥有时间片数,以及延时时间片数
    task->state = TASK_CREATED;
   11509:	8b 45 08             	mov    0x8(%ebp),%eax
   1150c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    task->slice_max = task->slice_curr = TASK_TIME_SLICE_DEFAULT;
   11512:	8b 45 08             	mov    0x8(%ebp),%eax
   11515:	c7 40 18 0a 00 00 00 	movl   $0xa,0x18(%eax)
   1151c:	8b 45 08             	mov    0x8(%ebp),%eax
   1151f:	8b 50 18             	mov    0x18(%eax),%edx
   11522:	8b 45 08             	mov    0x8(%ebp),%eax
   11525:	89 50 14             	mov    %edx,0x14(%eax)
    task->sleep = 0;
   11528:	8b 45 08             	mov    0x8(%ebp),%eax
   1152b:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    task->pid = (uint32_t)task;
   11532:	8b 55 08             	mov    0x8(%ebp),%edx
   11535:	8b 45 08             	mov    0x8(%ebp),%eax
   11538:	89 50 08             	mov    %edx,0x8(%eax)
    task->parent = (task_t*)0;
   1153b:	8b 45 08             	mov    0x8(%ebp),%eax
   1153e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    task->heap_start = task->heap_end = 0;
   11545:	8b 45 08             	mov    0x8(%ebp),%eax
   11548:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
   1154f:	8b 45 08             	mov    0x8(%ebp),%eax
   11552:	8b 50 10             	mov    0x10(%eax),%edx
   11555:	8b 45 08             	mov    0x8(%ebp),%eax
   11558:	89 50 0c             	mov    %edx,0xc(%eax)
   

    return 1;
   1155b:	b8 01 00 00 00       	mov    $0x1,%eax
}
   11560:	c9                   	leave  
   11561:	c3                   	ret    

00011562 <task_uninit>:
/**
 * @brief 反初始化任务对象，释放对应的资源
 * 
 * @param task 
 */
void task_uninit(task_t *task) {
   11562:	55                   	push   %ebp
   11563:	89 e5                	mov    %esp,%ebp
   11565:	83 ec 08             	sub    $0x8,%esp
    if (task->tss_selector) {   //释放已分配的选择子
   11568:	8b 45 08             	mov    0x8(%ebp),%eax
   1156b:	8b 80 c0 00 00 00    	mov    0xc0(%eax),%eax
   11571:	85 c0                	test   %eax,%eax
   11573:	74 18                	je     1158d <task_uninit+0x2b>
        gdt_free(task->tss_selector);
   11575:	8b 45 08             	mov    0x8(%ebp),%eax
   11578:	8b 80 c0 00 00 00    	mov    0xc0(%eax),%eax
   1157e:	0f b7 c0             	movzwl %ax,%eax
   11581:	83 ec 0c             	sub    $0xc,%esp
   11584:	50                   	push   %eax
   11585:	e8 38 10 00 00       	call   125c2 <gdt_free>
   1158a:	83 c4 10             	add    $0x10,%esp
    }

    if (task->tss.esp0) {   //释放已分配的内核栈空间
   1158d:	8b 45 08             	mov    0x8(%ebp),%eax
   11590:	8b 40 5c             	mov    0x5c(%eax),%eax
   11593:	85 c0                	test   %eax,%eax
   11595:	74 17                	je     115ae <task_uninit+0x4c>
        memory_free_page((uint32_t)(task->tss.esp0 - MEM_PAGE_SIZE));
   11597:	8b 45 08             	mov    0x8(%ebp),%eax
   1159a:	8b 40 5c             	mov    0x5c(%eax),%eax
   1159d:	2d 00 10 00 00       	sub    $0x1000,%eax
   115a2:	83 ec 0c             	sub    $0xc,%esp
   115a5:	50                   	push   %eax
   115a6:	e8 94 f8 ff ff       	call   10e3f <memory_free_page>
   115ab:	83 c4 10             	add    $0x10,%esp
    }

    if (task->tss.cr3) {    //释放为页目录分配的页空间及其映射关系
   115ae:	8b 45 08             	mov    0x8(%ebp),%eax
   115b1:	8b 40 74             	mov    0x74(%eax),%eax
   115b4:	85 c0                	test   %eax,%eax
   115b6:	74 12                	je     115ca <task_uninit+0x68>
        memory_destroy_uvm(task->tss.cr3);
   115b8:	8b 45 08             	mov    0x8(%ebp),%eax
   115bb:	8b 40 74             	mov    0x74(%eax),%eax
   115be:	83 ec 0c             	sub    $0xc,%esp
   115c1:	50                   	push   %eax
   115c2:	e8 8e f5 ff ff       	call   10b55 <memory_destroy_uvm>
   115c7:	83 c4 10             	add    $0x10,%esp
    }

    kernel_memset(task, 0, sizeof(task_t));
   115ca:	83 ec 04             	sub    $0x4,%esp
   115cd:	68 c4 00 00 00       	push   $0xc4
   115d2:	6a 00                	push   $0x0
   115d4:	ff 75 08             	push   0x8(%ebp)
   115d7:	e8 e5 2f 00 00       	call   145c1 <kernel_memset>
   115dc:	83 c4 10             	add    $0x10,%esp
}
   115df:	90                   	nop
   115e0:	c9                   	leave  
   115e1:	c3                   	ret    

000115e2 <empty_task>:
static uint32_t empty_task_stack[EMPTY_TASK_STACK_SIZE];
/**
 * @brief  空闲进程，当所有进程都延时运行时，让cpu运行空闲进程
 * 
 */
static void empty_task(void) {
   115e2:	55                   	push   %ebp
   115e3:	89 e5                	mov    %esp,%ebp

    while(1) {
        //停止cpu运行，让cpu等待时间中断
        hlt();
   115e5:	e8 40 fc ff ff       	call   1122a <hlt>
   115ea:	eb f9                	jmp    115e5 <empty_task+0x3>

000115ec <task_manager_init>:

/**
 * @brief  初始化任务管理器
 * 
 */
void task_manager_init(void) {
   115ec:	55                   	push   %ebp
   115ed:	89 e5                	mov    %esp,%ebp
   115ef:	83 ec 18             	sub    $0x18,%esp
    //1.初始化应用程序及所有任务的代码段选择子和数据段选择子，以区分和内核选择子的特权级
    //应用程序运行在 DPL_3 下， 内核运行在DPL_0下，配合分页机制中的us位，0为内核特权级，1为用户特权级
    //就可做到特权级保护
    uint32_t data_selector = gdt_alloc_desc();
   115f2:	e8 56 0f 00 00       	call   1254d <gdt_alloc_desc>
   115f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t code_selector = gdt_alloc_desc();
   115fa:	e8 4e 0f 00 00       	call   1254d <gdt_alloc_desc>
   115ff:	89 45 f0             	mov    %eax,-0x10(%ebp)
    segment_desc_set(data_selector, 0, 0xffffffff, SEG_ATTR_P | SEG_ATTR_DPL_3 | SEG_ATTR_S_NORMAL | SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);
   11602:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11605:	0f b7 c0             	movzwl %ax,%eax
   11608:	68 f2 40 00 00       	push   $0x40f2
   1160d:	6a ff                	push   $0xffffffff
   1160f:	6a 00                	push   $0x0
   11611:	50                   	push   %eax
   11612:	e8 c4 0d 00 00       	call   123db <segment_desc_set>
   11617:	83 c4 10             	add    $0x10,%esp
    segment_desc_set(code_selector, 0, 0xffffffff, SEG_ATTR_P | SEG_ATTR_DPL_3 | SEG_ATTR_S_NORMAL | SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);
   1161a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1161d:	0f b7 c0             	movzwl %ax,%eax
   11620:	68 fa 40 00 00       	push   $0x40fa
   11625:	6a ff                	push   $0xffffffff
   11627:	6a 00                	push   $0x0
   11629:	50                   	push   %eax
   1162a:	e8 ac 0d 00 00       	call   123db <segment_desc_set>
   1162f:	83 c4 10             	add    $0x10,%esp
    task_manager.app_code_selector = code_selector;
   11632:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11635:	a3 b0 01 02 00       	mov    %eax,0x201b0
    task_manager.app_data_selector = data_selector;
   1163a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1163d:	a3 b4 01 02 00       	mov    %eax,0x201b4
    
    //2.初始化所有任务队列
    list_init(&task_manager.ready_list);
   11642:	83 ec 0c             	sub    $0xc,%esp
   11645:	68 04 00 02 00       	push   $0x20004
   1164a:	e8 ef fa ff ff       	call   1113e <list_init>
   1164f:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   11652:	83 ec 0c             	sub    $0xc,%esp
   11655:	68 10 00 02 00       	push   $0x20010
   1165a:	e8 df fa ff ff       	call   1113e <list_init>
   1165f:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   11662:	83 ec 0c             	sub    $0xc,%esp
   11665:	68 1c 00 02 00       	push   $0x2001c
   1166a:	e8 cf fa ff ff       	call   1113e <list_init>
   1166f:	83 c4 10             	add    $0x10,%esp

    //3.将当前任务置零
    task_manager.curr_task = (task_t*)0;
   11672:	c7 05 00 00 02 00 00 	movl   $0x0,0x20000
   11679:	00 00 00 

    //4.初始化空闲进程
    task_init(  &task_manager.empty_task,
   1167c:	ba e0 65 02 00       	mov    $0x265e0,%edx
   11681:	b8 e2 15 01 00       	mov    $0x115e2,%eax
   11686:	83 ec 0c             	sub    $0xc,%esp
   11689:	6a 01                	push   $0x1
   1168b:	52                   	push   %edx
   1168c:	50                   	push   %eax
   1168d:	68 dd 50 01 00       	push   $0x150dd
   11692:	68 ec 00 02 00       	push   $0x200ec
   11697:	e8 d3 fd ff ff       	call   1146f <task_init>
   1169c:	83 c4 20             	add    $0x20,%esp
                 (uint32_t)&empty_task_stack[EMPTY_TASK_STACK_SIZE], TASK_FLAGS_SYSTEM);
                 


    //5.初始化静态任务表,及其互斥锁
    kernel_memset(task_table, 0, sizeof(task_table));
   1169f:	83 ec 04             	sub    $0x4,%esp
   116a2:	68 00 62 00 00       	push   $0x6200
   116a7:	6a 00                	push   $0x0
   116a9:	68 c0 01 02 00       	push   $0x201c0
   116ae:	e8 0e 2f 00 00       	call   145c1 <kernel_memset>
   116b3:	83 c4 10             	add    $0x10,%esp
    mutex_init(&task_table_lock);
   116b6:	83 ec 0c             	sub    $0xc,%esp
   116b9:	68 c0 63 02 00       	push   $0x263c0
   116be:	e8 e7 22 00 00       	call   139aa <mutex_init>
   116c3:	83 c4 10             	add    $0x10,%esp
  
}
   116c6:	90                   	nop
   116c7:	c9                   	leave  
   116c8:	c3                   	ret    

000116c9 <task_first_init>:
 *     页目录表 = 1页
 * ------------------
 * 内核0特权级栈 = 1页
 * ------------------
 */
void task_first_init(void) {
   116c9:	55                   	push   %ebp
   116ca:	89 e5                	mov    %esp,%ebp
   116cc:	83 ec 18             	sub    $0x18,%esp
    //1.声明第一个任务的符号
    void first_task_entry(void);

    //2.确定第一个任务进程需要的空间大小
    extern char s_first_task[], e_first_task[];
    uint32_t copy_size = (uint32_t)(e_first_task - s_first_task);   //进程所需空间大小
   116cf:	b8 ee b2 03 00       	mov    $0x3b2ee,%eax
   116d4:	2d 00 b0 03 00       	sub    $0x3b000,%eax
   116d9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t alloc_size = up2(copy_size, MEM_PAGE_SIZE) + 10 * MEM_PAGE_SIZE;   //需要为进程分配的内存大小，按4kb对齐,并多拿五页当作栈空间
   116dc:	68 00 10 00 00       	push   $0x1000
   116e1:	ff 75 f4             	push   -0xc(%ebp)
   116e4:	e8 2a fb ff ff       	call   11213 <up2>
   116e9:	83 c4 08             	add    $0x8,%esp
   116ec:	05 00 a0 00 00       	add    $0xa000,%eax
   116f1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    ASSERT(copy_size < alloc_size);
   116f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   116f7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
   116fa:	72 1c                	jb     11718 <task_first_init+0x4f>
   116fc:	68 e8 50 01 00       	push   $0x150e8
   11701:	68 f8 51 01 00       	push   $0x151f8
   11706:	68 35 01 00 00       	push   $0x135
   1170b:	68 a8 50 01 00       	push   $0x150a8
   11710:	e8 aa 29 00 00       	call   140bf <pannic>
   11715:	83 c4 10             	add    $0x10,%esp

    uint32_t task_start_addr = (uint32_t)first_task_entry;  //获取第一个任务的入口地址
   11718:	c7 45 ec 00 00 00 80 	movl   $0x80000000,-0x14(%ebp)

    //3.初始化第一个任务,因为当前为操作系统进程，esp初始值随意赋值都可，
    // 因为当前进程已开启，cpu会在切换的时候保留真实的状态，即真实的esp值
    task_init(&task_manager.first_task, "first task", task_start_addr, task_start_addr + alloc_size, TASK_FLAGS_USER);
   1171f:	8b 55 ec             	mov    -0x14(%ebp),%edx
   11722:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11725:	01 d0                	add    %edx,%eax
   11727:	83 ec 0c             	sub    $0xc,%esp
   1172a:	6a 00                	push   $0x0
   1172c:	50                   	push   %eax
   1172d:	ff 75 ec             	push   -0x14(%ebp)
   11730:	68 ff 50 01 00       	push   $0x150ff
   11735:	68 28 00 02 00       	push   $0x20028
   1173a:	e8 30 fd ff ff       	call   1146f <task_init>
   1173f:	83 c4 20             	add    $0x20,%esp
    
    //4.初始化进程的起始堆空间 TODO:不对，此处堆区还在低2gb的内核空间中
    task_manager.first_task.heap_start = (uint32_t)e_first_task;    //堆起始地址紧靠程序bss段之后
   11742:	b8 ee b2 03 00       	mov    $0x3b2ee,%eax
   11747:	a3 34 00 02 00       	mov    %eax,0x20034
    task_manager.first_task.heap_end = (uint32_t)e_first_task;      //堆大小初始为0
   1174c:	b8 ee b2 03 00       	mov    $0x3b2ee,%eax
   11751:	a3 38 00 02 00       	mov    %eax,0x20038

    //5.将当前任务的TSS选择子告诉cpu，用来切换任务时保存状态
    write_tr(task_manager.first_task.tss_selector);
   11756:	a1 e8 00 02 00       	mov    0x200e8,%eax
   1175b:	0f b7 c0             	movzwl %ax,%eax
   1175e:	83 ec 0c             	sub    $0xc,%esp
   11761:	50                   	push   %eax
   11762:	e8 f0 fa ff ff       	call   11257 <write_tr>
   11767:	83 c4 10             	add    $0x10,%esp

    //6.将当前任务执行第一个任务
    task_manager.curr_task = &task_manager.first_task;
   1176a:	c7 05 00 00 02 00 28 	movl   $0x20028,0x20000
   11771:	00 02 00 

    //7.将当前页表设置为第一个任务的页表
    mmu_set_page_dir(task_manager.first_task.tss.cr3);
   11774:	a1 9c 00 02 00       	mov    0x2009c,%eax
   11779:	83 ec 0c             	sub    $0xc,%esp
   1177c:	50                   	push   %eax
   1177d:	e8 ec fa ff ff       	call   1126e <mmu_set_page_dir>
   11782:	83 c4 10             	add    $0x10,%esp

    //8.将当前任务状态设置为运行态
    task_manager.curr_task->state = TASK_RUNNING;
   11785:	a1 00 00 02 00       	mov    0x20000,%eax
   1178a:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

    //9.进程的各个段还只是在虚拟地址中，所以要为各个段分配物理地址页空间，并进行映射
    memory_alloc_page_for(task_start_addr, alloc_size, PTE_P | PTE_W | PTE_U);
   11790:	83 ec 04             	sub    $0x4,%esp
   11793:	6a 07                	push   $0x7
   11795:	ff 75 f0             	push   -0x10(%ebp)
   11798:	ff 75 ec             	push   -0x14(%ebp)
   1179b:	e8 4d f6 ff ff       	call   10ded <memory_alloc_page_for>
   117a0:	83 c4 10             	add    $0x10,%esp

    //10.将任务进程各个段从内核四个段之后的紧邻位置，拷贝到已分配好的且与虚拟地址对应的物理地址空间，实现代码隔离
    kernel_memcpy(first_task_entry, s_first_task, alloc_size);
   117a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   117a6:	83 ec 04             	sub    $0x4,%esp
   117a9:	50                   	push   %eax
   117aa:	68 00 b0 03 00       	push   $0x3b000
   117af:	68 00 00 00 80       	push   $0x80000000
   117b4:	e8 b9 2d 00 00       	call   14572 <kernel_memcpy>
   117b9:	83 c4 10             	add    $0x10,%esp

    //11.将任务设为可被调度
    task_start(&task_manager.first_task);
   117bc:	83 ec 0c             	sub    $0xc,%esp
   117bf:	68 28 00 02 00       	push   $0x20028
   117c4:	e8 62 fc ff ff       	call   1142b <task_start>
   117c9:	83 c4 10             	add    $0x10,%esp
}
   117cc:	90                   	nop
   117cd:	c9                   	leave  
   117ce:	c3                   	ret    

000117cf <task_first_task>:
/**
 * @brief  获取当前任务管理器的第一个任务
 * 
 * @return task_t* 
 */
task_t *task_first_task(void) {
   117cf:	55                   	push   %ebp
   117d0:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   117d2:	b8 28 00 02 00       	mov    $0x20028,%eax
}
   117d7:	5d                   	pop    %ebp
   117d8:	c3                   	ret    

000117d9 <task_set_ready>:
/**
 * @brief  将任务task加入就绪队列
 * 
 * @param task 需要加入就绪队列的任务
 */
void task_set_ready(task_t *task) {
   117d9:	55                   	push   %ebp
   117da:	89 e5                	mov    %esp,%ebp
   117dc:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   117df:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   117e3:	75 1c                	jne    11801 <task_set_ready+0x28>
   117e5:	68 95 50 01 00       	push   $0x15095
   117ea:	68 08 52 01 00       	push   $0x15208
   117ef:	68 66 01 00 00       	push   $0x166
   117f4:	68 a8 50 01 00       	push   $0x150a8
   117f9:	e8 c1 28 00 00       	call   140bf <pannic>
   117fe:	83 c4 10             	add    $0x10,%esp
    //1.将任务插入到就绪队列的尾部
    list_insert_last(&task_manager.ready_list, &task->ready_node);
   11801:	8b 45 08             	mov    0x8(%ebp),%eax
   11804:	83 c0 40             	add    $0x40,%eax
   11807:	83 ec 08             	sub    $0x8,%esp
   1180a:	50                   	push   %eax
   1180b:	68 04 00 02 00       	push   $0x20004
   11810:	e8 bc 32 00 00       	call   14ad1 <list_insert_last>
   11815:	83 c4 10             	add    $0x10,%esp

    //2.将任务状态设置为就绪态
    task->state = TASK_READY;
   11818:	8b 45 08             	mov    0x8(%ebp),%eax
   1181b:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
}
   11821:	90                   	nop
   11822:	c9                   	leave  
   11823:	c3                   	ret    

00011824 <task_set_unready>:
/**
 * @brief  将任务task从就绪队列中取下
 * 
 * @param task 
 */
void task_set_unready(task_t *task) {
   11824:	55                   	push   %ebp
   11825:	89 e5                	mov    %esp,%ebp
   11827:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   1182a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1182e:	75 1c                	jne    1184c <task_set_unready+0x28>
   11830:	68 95 50 01 00       	push   $0x15095
   11835:	68 18 52 01 00       	push   $0x15218
   1183a:	68 75 01 00 00       	push   $0x175
   1183f:	68 a8 50 01 00       	push   $0x150a8
   11844:	e8 76 28 00 00       	call   140bf <pannic>
   11849:	83 c4 10             	add    $0x10,%esp
    list_remove(&task_manager.ready_list, &task->ready_node);
   1184c:	8b 45 08             	mov    0x8(%ebp),%eax
   1184f:	83 c0 40             	add    $0x40,%eax
   11852:	83 ec 08             	sub    $0x8,%esp
   11855:	50                   	push   %eax
   11856:	68 04 00 02 00       	push   $0x20004
   1185b:	e8 66 34 00 00       	call   14cc6 <list_remove>
   11860:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   11863:	8b 45 08             	mov    0x8(%ebp),%eax
   11866:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   1186c:	90                   	nop
   1186d:	c9                   	leave  
   1186e:	c3                   	ret    

0001186f <task_ready_first>:

/**
 * @brief  获取就绪队列中的第一个任务
 * 
 */
task_t* task_ready_first(void) {
   1186f:	55                   	push   %ebp
   11870:	89 e5                	mov    %esp,%ebp
   11872:	83 ec 18             	sub    $0x18,%esp
    list_node_t *ready_node = list_get_first(&task_manager.ready_list);
   11875:	83 ec 0c             	sub    $0xc,%esp
   11878:	68 04 00 02 00       	push   $0x20004
   1187d:	e8 65 f9 ff ff       	call   111e7 <list_get_first>
   11882:	83 c4 10             	add    $0x10,%esp
   11885:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    return list_node_parent(ready_node, task_t, ready_node);
   11888:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1188c:	74 08                	je     11896 <task_ready_first+0x27>
   1188e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11891:	83 e8 40             	sub    $0x40,%eax
   11894:	eb 05                	jmp    1189b <task_ready_first+0x2c>
   11896:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1189b:	c9                   	leave  
   1189c:	c3                   	ret    

0001189d <task_current>:
/**
 * @brief  获取当前正在运行的任务
 * 
 * @return task_t* 
 */
task_t *task_current(void) {
   1189d:	55                   	push   %ebp
   1189e:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   118a0:	a1 00 00 02 00       	mov    0x20000,%eax
}
   118a5:	5d                   	pop    %ebp
   118a6:	c3                   	ret    

000118a7 <task_switch>:

/**
 * @brief  任务管理器进行任务切换
 * 
 */
void task_switch(void) {
   118a7:	55                   	push   %ebp
   118a8:	89 e5                	mov    %esp,%ebp
   118aa:	83 ec 18             	sub    $0x18,%esp

    idt_state_t state = idt_enter_protection();//TODO:加锁
   118ad:	e8 c6 16 00 00       	call   12f78 <idt_enter_protection>
   118b2:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //1.获取就绪队列中的第一个任务
    task_t *to = task_ready_first();
   118b5:	e8 b5 ff ff ff       	call   1186f <task_ready_first>
   118ba:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.若获取到的任务不是当前任务就进行切换
    if (to != task_manager.curr_task) {
   118bd:	a1 00 00 02 00       	mov    0x20000,%eax
   118c2:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   118c5:	74 37                	je     118fe <task_switch+0x57>
        //3.获取当前任务
        task_t *from = task_manager.curr_task;
   118c7:	a1 00 00 02 00       	mov    0x20000,%eax
   118cc:	89 45 ec             	mov    %eax,-0x14(%ebp)

        //4.目标任务若为空，则所有任务都在延时，让cpu运行空闲任务
        if (to == (task_t*)0) { 
   118cf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   118d3:	75 07                	jne    118dc <task_switch+0x35>
            to = &task_manager.empty_task;
   118d5:	c7 45 f4 ec 00 02 00 	movl   $0x200ec,-0xc(%ebp)
        }
        //5.切换当前任务, 并将当前任务置为运行态
        to->state = TASK_RUNNING;
   118dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   118df:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        task_manager.curr_task = to;
   118e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   118e8:	a3 00 00 02 00       	mov    %eax,0x20000
        

        //6.进行任务切换
        task_switch_from_to(from, to);
   118ed:	83 ec 08             	sub    $0x8,%esp
   118f0:	ff 75 f4             	push   -0xc(%ebp)
   118f3:	ff 75 ec             	push   -0x14(%ebp)
   118f6:	e8 a3 f9 ff ff       	call   1129e <task_switch_from_to>
   118fb:	83 c4 10             	add    $0x10,%esp
    } 

    idt_leave_protection(state);//TODO:解锁
   118fe:	83 ec 0c             	sub    $0xc,%esp
   11901:	ff 75 f0             	push   -0x10(%ebp)
   11904:	e8 87 16 00 00       	call   12f90 <idt_leave_protection>
   11909:	83 c4 10             	add    $0x10,%esp
}
   1190c:	90                   	nop
   1190d:	c9                   	leave  
   1190e:	c3                   	ret    

0001190f <task_slice_end>:
/**
 * @brief  提供给时钟中断使用，每中断一次，当前任务的时间片使用完一次
 *         减少当前任务的时间片数，并判断是否还有剩余时间片，若没有就进行任务切换
 * 
 */
void task_slice_end(void) {
   1190f:	55                   	push   %ebp
   11910:	89 e5                	mov    %esp,%ebp
   11912:	83 ec 18             	sub    $0x18,%esp

    //1.遍历当前延时队列，判断是否有可唤醒的任务
    list_node_t *curr_sleep_node = list_get_first(&task_manager.sleep_list);
   11915:	83 ec 0c             	sub    $0xc,%esp
   11918:	68 1c 00 02 00       	push   $0x2001c
   1191d:	e8 c5 f8 ff ff       	call   111e7 <list_get_first>
   11922:	83 c4 10             	add    $0x10,%esp
   11925:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.遍历并判断每一个任务执行完当前时间片是否可被唤醒，若可以则唤醒
    while (curr_sleep_node) {
   11928:	eb 62                	jmp    1198c <task_slice_end+0x7d>
        
        list_node_t *next_sleep_node = list_node_next(curr_sleep_node);
   1192a:	83 ec 0c             	sub    $0xc,%esp
   1192d:	ff 75 f4             	push   -0xc(%ebp)
   11930:	e8 dc f7 ff ff       	call   11111 <list_node_next>
   11935:	83 c4 10             	add    $0x10,%esp
   11938:	89 45 ec             	mov    %eax,-0x14(%ebp)
        
        task_t *curr_sleep_task = list_node_parent(curr_sleep_node, task_t, ready_node);
   1193b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1193f:	74 08                	je     11949 <task_slice_end+0x3a>
   11941:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11944:	83 e8 40             	sub    $0x40,%eax
   11947:	eb 05                	jmp    1194e <task_slice_end+0x3f>
   11949:	b8 00 00 00 00       	mov    $0x0,%eax
   1194e:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (--curr_sleep_task->sleep == 0) {
   11951:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11954:	8b 40 1c             	mov    0x1c(%eax),%eax
   11957:	8d 50 ff             	lea    -0x1(%eax),%edx
   1195a:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1195d:	89 50 1c             	mov    %edx,0x1c(%eax)
   11960:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11963:	8b 40 1c             	mov    0x1c(%eax),%eax
   11966:	85 c0                	test   %eax,%eax
   11968:	75 1c                	jne    11986 <task_slice_end+0x77>
            task_set_wakeup(curr_sleep_task);   //从延时队列中取下
   1196a:	83 ec 0c             	sub    $0xc,%esp
   1196d:	ff 75 e8             	push   -0x18(%ebp)
   11970:	e8 01 01 00 00       	call   11a76 <task_set_wakeup>
   11975:	83 c4 10             	add    $0x10,%esp
            task_set_ready(curr_sleep_task);    //加入就绪队列
   11978:	83 ec 0c             	sub    $0xc,%esp
   1197b:	ff 75 e8             	push   -0x18(%ebp)
   1197e:	e8 56 fe ff ff       	call   117d9 <task_set_ready>
   11983:	83 c4 10             	add    $0x10,%esp
        }

        curr_sleep_node = next_sleep_node;
   11986:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11989:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr_sleep_node) {
   1198c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11990:	75 98                	jne    1192a <task_slice_end+0x1b>
    }

    // task_switch(); 没有必要立马进行任务切换，当前任务时间片用完后会自动切换
    //3.获取当前任务
    task_t *curr_task = task_current();
   11992:	e8 06 ff ff ff       	call   1189d <task_current>
   11997:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //4.若当前任务为空闲任务，则判断就绪队列是否为空
    if (curr_task == &task_manager.empty_task) {
   1199a:	81 7d f0 ec 00 02 00 	cmpl   $0x200ec,-0x10(%ebp)
   119a1:	75 23                	jne    119c6 <task_slice_end+0xb7>
        
        if (list_is_empty(&task_manager.ready_list)) return;
   119a3:	83 ec 0c             	sub    $0xc,%esp
   119a6:	68 04 00 02 00       	push   $0x20004
   119ab:	e8 d5 f7 ff ff       	call   11185 <list_is_empty>
   119b0:	83 c4 10             	add    $0x10,%esp
   119b3:	85 c0                	test   %eax,%eax
   119b5:	75 60                	jne    11a17 <task_slice_end+0x108>
        
        task_manager.empty_task.state = TASK_CREATED;
   119b7:	c7 05 ec 00 02 00 00 	movl   $0x0,0x200ec
   119be:	00 00 00 
        
        task_switch();//就绪队列有任务，则直接切换任务
   119c1:	e8 e1 fe ff ff       	call   118a7 <task_switch>
    }

    //5.若当前任务为普通任务则，减小当前时间片数
    if (curr_task != &task_manager.empty_task && --curr_task->slice_curr == 0) {
   119c6:	81 7d f0 ec 00 02 00 	cmpl   $0x200ec,-0x10(%ebp)
   119cd:	74 49                	je     11a18 <task_slice_end+0x109>
   119cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
   119d2:	8b 40 18             	mov    0x18(%eax),%eax
   119d5:	8d 50 ff             	lea    -0x1(%eax),%edx
   119d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   119db:	89 50 18             	mov    %edx,0x18(%eax)
   119de:	8b 45 f0             	mov    -0x10(%ebp),%eax
   119e1:	8b 40 18             	mov    0x18(%eax),%eax
   119e4:	85 c0                	test   %eax,%eax
   119e6:	75 30                	jne    11a18 <task_slice_end+0x109>
        //6.时间片数用完了，重置时间片并进行任务切换
        curr_task->slice_curr = curr_task->slice_max;
   119e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   119eb:	8b 50 14             	mov    0x14(%eax),%edx
   119ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
   119f1:	89 50 18             	mov    %edx,0x18(%eax)
        task_set_unready(curr_task);
   119f4:	83 ec 0c             	sub    $0xc,%esp
   119f7:	ff 75 f0             	push   -0x10(%ebp)
   119fa:	e8 25 fe ff ff       	call   11824 <task_set_unready>
   119ff:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   11a02:	83 ec 0c             	sub    $0xc,%esp
   11a05:	ff 75 f0             	push   -0x10(%ebp)
   11a08:	e8 cc fd ff ff       	call   117d9 <task_set_ready>
   11a0d:	83 c4 10             	add    $0x10,%esp
        task_switch();
   11a10:	e8 92 fe ff ff       	call   118a7 <task_switch>
   11a15:	eb 01                	jmp    11a18 <task_slice_end+0x109>
        if (list_is_empty(&task_manager.ready_list)) return;
   11a17:	90                   	nop
    }
}
   11a18:	c9                   	leave  
   11a19:	c3                   	ret    

00011a1a <task_set_sleep>:
 * @brief  设置进程延时的时间片数
 * 
 * @param task 需要延时的进程
 * @param slice 延时的时间片数
 */
void task_set_sleep(task_t *task, uint32_t slice) {
   11a1a:	55                   	push   %ebp
   11a1b:	89 e5                	mov    %esp,%ebp
   11a1d:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   11a20:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11a24:	75 1c                	jne    11a42 <task_set_sleep+0x28>
   11a26:	68 95 50 01 00       	push   $0x15095
   11a2b:	68 5c 52 01 00       	push   $0x1525c
   11a30:	68 ea 01 00 00       	push   $0x1ea
   11a35:	68 a8 50 01 00       	push   $0x150a8
   11a3a:	e8 80 26 00 00       	call   140bf <pannic>
   11a3f:	83 c4 10             	add    $0x10,%esp
    if (slice == 0) return;
   11a42:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11a46:	74 2b                	je     11a73 <task_set_sleep+0x59>

    task->sleep = slice;
   11a48:	8b 55 0c             	mov    0xc(%ebp),%edx
   11a4b:	8b 45 08             	mov    0x8(%ebp),%eax
   11a4e:	89 50 1c             	mov    %edx,0x1c(%eax)
    task->state = TASK_SLEEP;
   11a51:	8b 45 08             	mov    0x8(%ebp),%eax
   11a54:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    list_insert_last(&task_manager.sleep_list, &task->ready_node);
   11a5a:	8b 45 08             	mov    0x8(%ebp),%eax
   11a5d:	83 c0 40             	add    $0x40,%eax
   11a60:	83 ec 08             	sub    $0x8,%esp
   11a63:	50                   	push   %eax
   11a64:	68 1c 00 02 00       	push   $0x2001c
   11a69:	e8 63 30 00 00       	call   14ad1 <list_insert_last>
   11a6e:	83 c4 10             	add    $0x10,%esp
   11a71:	eb 01                	jmp    11a74 <task_set_sleep+0x5a>
    if (slice == 0) return;
   11a73:	90                   	nop
}
   11a74:	c9                   	leave  
   11a75:	c3                   	ret    

00011a76 <task_set_wakeup>:
/**
 * @brief  唤醒正在延时的进程
 * 
 * @param task 
 */
void task_set_wakeup(task_t *task) {
   11a76:	55                   	push   %ebp
   11a77:	89 e5                	mov    %esp,%ebp
   11a79:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   11a7c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11a80:	75 1c                	jne    11a9e <task_set_wakeup+0x28>
   11a82:	68 95 50 01 00       	push   $0x15095
   11a87:	68 6c 52 01 00       	push   $0x1526c
   11a8c:	68 f8 01 00 00       	push   $0x1f8
   11a91:	68 a8 50 01 00       	push   $0x150a8
   11a96:	e8 24 26 00 00       	call   140bf <pannic>
   11a9b:	83 c4 10             	add    $0x10,%esp
    list_remove(&task_manager.sleep_list, &task->ready_node);
   11a9e:	8b 45 08             	mov    0x8(%ebp),%eax
   11aa1:	83 c0 40             	add    $0x40,%eax
   11aa4:	83 ec 08             	sub    $0x8,%esp
   11aa7:	50                   	push   %eax
   11aa8:	68 1c 00 02 00       	push   $0x2001c
   11aad:	e8 14 32 00 00       	call   14cc6 <list_remove>
   11ab2:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   11ab5:	8b 45 08             	mov    0x8(%ebp),%eax
   11ab8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   11abe:	90                   	nop
   11abf:	c9                   	leave  
   11ac0:	c3                   	ret    

00011ac1 <alloc_task>:
/**
 * @brief 从静态任务表中分配一个任务对象
 * 
 * @return task_t* 
 */
static task_t *alloc_task(void) {
   11ac1:	55                   	push   %ebp
   11ac2:	89 e5                	mov    %esp,%ebp
   11ac4:	83 ec 18             	sub    $0x18,%esp
    task_t *task = 0;
   11ac7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_lock(&task_table_lock);
   11ace:	83 ec 0c             	sub    $0xc,%esp
   11ad1:	68 c0 63 02 00       	push   $0x263c0
   11ad6:	e8 1c 1f 00 00       	call   139f7 <mutex_lock>
   11adb:	83 c4 10             	add    $0x10,%esp
    
    //遍历静态任务表，取出未被分配的任务对象空间
    for (int i = 0; i < TASK_COUNT; ++i) {
   11ade:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11ae5:	eb 27                	jmp    11b0e <alloc_task+0x4d>
        task_t *curr = task_table + i;
   11ae7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11aea:	69 c0 c4 00 00 00    	imul   $0xc4,%eax,%eax
   11af0:	05 c0 01 02 00       	add    $0x201c0,%eax
   11af5:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (curr->pid == 0) {
   11af8:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11afb:	8b 40 08             	mov    0x8(%eax),%eax
   11afe:	85 c0                	test   %eax,%eax
   11b00:	75 08                	jne    11b0a <alloc_task+0x49>
            task = curr;
   11b02:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b05:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   11b08:	eb 0a                	jmp    11b14 <alloc_task+0x53>
    for (int i = 0; i < TASK_COUNT; ++i) {
   11b0a:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   11b0e:	83 7d f0 7f          	cmpl   $0x7f,-0x10(%ebp)
   11b12:	7e d3                	jle    11ae7 <alloc_task+0x26>
        }
    }

    mutex_unlock(&task_table_lock);
   11b14:	83 ec 0c             	sub    $0xc,%esp
   11b17:	68 c0 63 02 00       	push   $0x263c0
   11b1c:	e8 67 1f 00 00       	call   13a88 <mutex_unlock>
   11b21:	83 c4 10             	add    $0x10,%esp

    return task;
   11b24:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   11b27:	c9                   	leave  
   11b28:	c3                   	ret    

00011b29 <free_task>:
/**
 * @brief 释放静态任务表的任务对象
 * 
 * @param task 
 */
static void free_task(task_t *task) {
   11b29:	55                   	push   %ebp
   11b2a:	89 e5                	mov    %esp,%ebp
   11b2c:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&task_table_lock);
   11b2f:	83 ec 0c             	sub    $0xc,%esp
   11b32:	68 c0 63 02 00       	push   $0x263c0
   11b37:	e8 bb 1e 00 00       	call   139f7 <mutex_lock>
   11b3c:	83 c4 10             	add    $0x10,%esp
    
    task->pid = 0;
   11b3f:	8b 45 08             	mov    0x8(%ebp),%eax
   11b42:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)

    mutex_unlock(&task_table_lock);
   11b49:	83 ec 0c             	sub    $0xc,%esp
   11b4c:	68 c0 63 02 00       	push   $0x263c0
   11b51:	e8 32 1f 00 00       	call   13a88 <mutex_unlock>
   11b56:	83 c4 10             	add    $0x10,%esp
}
   11b59:	90                   	nop
   11b5a:	c9                   	leave  
   11b5b:	c3                   	ret    

00011b5c <sys_sleep>:
/**
 * @brief  使进程进入延时状态
 * 
 * @param ms 延时的时间，以ms为单位
 */
void sys_sleep(uint32_t ms) {
   11b5c:	55                   	push   %ebp
   11b5d:	89 e5                	mov    %esp,%ebp
   11b5f:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection(); //TODO:加锁
   11b62:	e8 11 14 00 00       	call   12f78 <idt_enter_protection>
   11b67:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //1.获取当前任务  
    task_t *curr_task = task_current();
   11b6a:	e8 2e fd ff ff       	call   1189d <task_current>
   11b6f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    //2.将当前任务离开就绪队列
    task_set_unready(curr_task);
   11b72:	83 ec 0c             	sub    $0xc,%esp
   11b75:	ff 75 f0             	push   -0x10(%ebp)
   11b78:	e8 a7 fc ff ff       	call   11824 <task_set_unready>
   11b7d:	83 c4 10             	add    $0x10,%esp

    //3.计算出需要延时的时间片数，对时间片数向上取整，保证进程至少能延时指定时间
    uint32_t slice = (ms + (OS_TICKS_MS - 1)) / OS_TICKS_MS;
   11b80:	8b 45 08             	mov    0x8(%ebp),%eax
   11b83:	83 c0 09             	add    $0x9,%eax
   11b86:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   11b8b:	f7 e2                	mul    %edx
   11b8d:	89 d0                	mov    %edx,%eax
   11b8f:	c1 e8 03             	shr    $0x3,%eax
   11b92:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //4.将当前任务放入延时队列，并设置延时时间片数
    task_set_sleep(curr_task, slice);
   11b95:	83 ec 08             	sub    $0x8,%esp
   11b98:	ff 75 ec             	push   -0x14(%ebp)
   11b9b:	ff 75 f0             	push   -0x10(%ebp)
   11b9e:	e8 77 fe ff ff       	call   11a1a <task_set_sleep>
   11ba3:	83 c4 10             	add    $0x10,%esp

    //5.切换任务
    task_switch();
   11ba6:	e8 fc fc ff ff       	call   118a7 <task_switch>

    idt_leave_protection(state); //TODO:解锁
   11bab:	83 ec 0c             	sub    $0xc,%esp
   11bae:	ff 75 f4             	push   -0xc(%ebp)
   11bb1:	e8 da 13 00 00       	call   12f90 <idt_leave_protection>
   11bb6:	83 c4 10             	add    $0x10,%esp
}
   11bb9:	90                   	nop
   11bba:	c9                   	leave  
   11bbb:	c3                   	ret    

00011bbc <sys_getpid>:
/**
 * @brief 获取任务pid
 * 
 * @return int pid
 */
int sys_getpid(void) {
   11bbc:	55                   	push   %ebp
   11bbd:	89 e5                	mov    %esp,%ebp
    return task_current()->pid;
   11bbf:	e8 d9 fc ff ff       	call   1189d <task_current>
   11bc4:	8b 40 08             	mov    0x8(%eax),%eax
}
   11bc7:	5d                   	pop    %ebp
   11bc8:	c3                   	ret    

00011bc9 <sys_fork>:
/**
 * @brief 创建子进程
 * 
 * @return int 子进程的pid
 */
int sys_fork(void) {
   11bc9:	55                   	push   %ebp
   11bca:	89 e5                	mov    %esp,%ebp
   11bcc:	83 ec 28             	sub    $0x28,%esp

    //获取当前进程为fork进程的父进程
    task_t *parent_task = task_current();
   11bcf:	e8 c9 fc ff ff       	call   1189d <task_current>
   11bd4:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //分配子进程控制块
    task_t *child_task = alloc_task();
   11bd7:	e8 e5 fe ff ff       	call   11ac1 <alloc_task>
   11bdc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (child_task == (task_t*)0)
   11bdf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11be3:	0f 84 2b 01 00 00    	je     11d14 <sys_fork+0x14b>
        goto fork_failed;

    //获取系统调用的栈帧,因为每次通过调用门进入内核栈中都只会一帧该结构体的数据，
    //所以用最高地址减去大小即可获得该帧的起始地址
    syscall_frame_t *frame = (syscall_frame_t*)(parent_task->tss.esp0 - sizeof(syscall_frame_t));
   11be9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11bec:	8b 40 5c             	mov    0x5c(%eax),%eax
   11bef:	83 e8 58             	sub    $0x58,%eax
   11bf2:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //初始子进程控制块，直接用父进程进入调用门的下一条指令地址作为子进程的入口地址
    int err = task_init(child_task, parent_task->name, frame->eip, frame->esp + sizeof(uint32_t)*SYSCALL_PARAM_COUNT, TASK_FLAGS_USER);
   11bf5:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11bf8:	8b 40 50             	mov    0x50(%eax),%eax
   11bfb:	8d 48 14             	lea    0x14(%eax),%ecx
   11bfe:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11c01:	8b 40 34             	mov    0x34(%eax),%eax
   11c04:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11c07:	83 c2 20             	add    $0x20,%edx
   11c0a:	83 ec 0c             	sub    $0xc,%esp
   11c0d:	6a 00                	push   $0x0
   11c0f:	51                   	push   %ecx
   11c10:	50                   	push   %eax
   11c11:	52                   	push   %edx
   11c12:	ff 75 f0             	push   -0x10(%ebp)
   11c15:	e8 55 f8 ff ff       	call   1146f <task_init>
   11c1a:	83 c4 20             	add    $0x20,%esp
   11c1d:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (err < 0)
   11c20:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11c24:	0f 88 ed 00 00 00    	js     11d17 <sys_fork+0x14e>
        goto fork_failed;

    //恢复到父进程的上下文环境
    tss_t *tss = &(child_task->tss);
   11c2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11c2d:	83 c0 58             	add    $0x58,%eax
   11c30:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    //子进程执行的第一条指令就是从eax中取出系统用的返回值，即进程id，子进程固定获取0
    tss->eax = 0;   
   11c33:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11c36:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    tss->ebx = frame->ebx;
   11c3d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11c40:	8b 50 24             	mov    0x24(%eax),%edx
   11c43:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11c46:	89 50 34             	mov    %edx,0x34(%eax)
    tss->ecx = frame->ecx;
   11c49:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11c4c:	8b 50 2c             	mov    0x2c(%eax),%edx
   11c4f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11c52:	89 50 2c             	mov    %edx,0x2c(%eax)
    tss->edx = frame->edx;
   11c55:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11c58:	8b 50 28             	mov    0x28(%eax),%edx
   11c5b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11c5e:	89 50 30             	mov    %edx,0x30(%eax)
    tss->edi = frame->edi;
   11c61:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11c64:	8b 50 14             	mov    0x14(%eax),%edx
   11c67:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11c6a:	89 50 44             	mov    %edx,0x44(%eax)
    tss->esi = frame->esi;
   11c6d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11c70:	8b 50 18             	mov    0x18(%eax),%edx
   11c73:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11c76:	89 50 40             	mov    %edx,0x40(%eax)
    tss->eflags = frame->eflags;
   11c79:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11c7c:	8b 10                	mov    (%eax),%edx
   11c7e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11c81:	89 50 24             	mov    %edx,0x24(%eax)
    tss->ebp = frame->ebp;
   11c84:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11c87:	8b 50 1c             	mov    0x1c(%eax),%edx
   11c8a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11c8d:	89 50 3c             	mov    %edx,0x3c(%eax)

    //复用父进程的段寄存器
    tss->cs = frame->cs;
   11c90:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11c93:	8b 50 38             	mov    0x38(%eax),%edx
   11c96:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11c99:	89 50 4c             	mov    %edx,0x4c(%eax)
    tss->ds = frame->ds;
   11c9c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11c9f:	8b 50 10             	mov    0x10(%eax),%edx
   11ca2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11ca5:	89 50 54             	mov    %edx,0x54(%eax)
    tss->es = frame->es;
   11ca8:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11cab:	8b 50 0c             	mov    0xc(%eax),%edx
   11cae:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11cb1:	89 50 48             	mov    %edx,0x48(%eax)
    tss->fs = frame->fs;
   11cb4:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11cb7:	8b 50 08             	mov    0x8(%eax),%edx
   11cba:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11cbd:	89 50 58             	mov    %edx,0x58(%eax)
    tss->gs = frame->gs;
   11cc0:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11cc3:	8b 50 04             	mov    0x4(%eax),%edx
   11cc6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11cc9:	89 50 5c             	mov    %edx,0x5c(%eax)
    tss->ss = frame->ss;
   11ccc:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11ccf:	8b 50 54             	mov    0x54(%eax),%edx
   11cd2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11cd5:	89 50 50             	mov    %edx,0x50(%eax)

    //记录父进程地址
    child_task->parent = parent_task;
   11cd8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11cdb:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11cde:	89 50 04             	mov    %edx,0x4(%eax)

    //拷贝进程虚拟页目录表和页表，即拷贝其映射关系
    if (memory_copy_uvm(tss->cr3, parent_task->tss.cr3) < 0)
   11ce1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11ce4:	8b 50 74             	mov    0x74(%eax),%edx
   11ce7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11cea:	8b 40 1c             	mov    0x1c(%eax),%eax
   11ced:	83 ec 08             	sub    $0x8,%esp
   11cf0:	52                   	push   %edx
   11cf1:	50                   	push   %eax
   11cf2:	e8 d1 ec ff ff       	call   109c8 <memory_copy_uvm>
   11cf7:	83 c4 10             	add    $0x10,%esp
   11cfa:	85 c0                	test   %eax,%eax
   11cfc:	78 1c                	js     11d1a <sys_fork+0x151>
        goto fork_failed;

    //子进程控制块初始化完毕，设为可被调度态
    task_start(child_task);
   11cfe:	83 ec 0c             	sub    $0xc,%esp
   11d01:	ff 75 f0             	push   -0x10(%ebp)
   11d04:	e8 22 f7 ff ff       	call   1142b <task_start>
   11d09:	83 c4 10             	add    $0x10,%esp
    //反回子进程id
    return child_task->pid;
   11d0c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11d0f:	8b 40 08             	mov    0x8(%eax),%eax
   11d12:	eb 2e                	jmp    11d42 <sys_fork+0x179>
        goto fork_failed;
   11d14:	90                   	nop
   11d15:	eb 04                	jmp    11d1b <sys_fork+0x152>
        goto fork_failed;
   11d17:	90                   	nop
   11d18:	eb 01                	jmp    11d1b <sys_fork+0x152>
        goto fork_failed;
   11d1a:	90                   	nop

//fork失败，清理资源
fork_failed:
    if (child_task) {   //初始化失败，释放对应资源
   11d1b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11d1f:	74 1c                	je     11d3d <sys_fork+0x174>
        task_uninit(child_task);
   11d21:	83 ec 0c             	sub    $0xc,%esp
   11d24:	ff 75 f0             	push   -0x10(%ebp)
   11d27:	e8 36 f8 ff ff       	call   11562 <task_uninit>
   11d2c:	83 c4 10             	add    $0x10,%esp
        free_task(child_task);
   11d2f:	83 ec 0c             	sub    $0xc,%esp
   11d32:	ff 75 f0             	push   -0x10(%ebp)
   11d35:	e8 ef fd ff ff       	call   11b29 <free_task>
   11d3a:	83 c4 10             	add    $0x10,%esp
    }

    return -1;
   11d3d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11d42:	c9                   	leave  
   11d43:	c3                   	ret    

00011d44 <sys_yield>:
/**
 * @brief  使当前正在运行的任务主动让出cpu
 * 
 * @return int 
 */
int sys_yield(void) {
   11d44:	55                   	push   %ebp
   11d45:	89 e5                	mov    %esp,%ebp
   11d47:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   11d4a:	e8 29 12 00 00       	call   12f78 <idt_enter_protection>
   11d4f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    //1.判断当前就绪队列中是否有多个任务
    if (list_get_size(&task_manager.ready_list) > 1) {
   11d52:	83 ec 0c             	sub    $0xc,%esp
   11d55:	68 04 00 02 00       	push   $0x20004
   11d5a:	e8 5b f4 ff ff       	call   111ba <list_get_size>
   11d5f:	83 c4 10             	add    $0x10,%esp
   11d62:	83 f8 01             	cmp    $0x1,%eax
   11d65:	7e 29                	jle    11d90 <sys_yield+0x4c>
        //2.获取当前任务  
        task_t *curr_task = task_current();
   11d67:	e8 31 fb ff ff       	call   1189d <task_current>
   11d6c:	89 45 f0             	mov    %eax,-0x10(%ebp)
        
        //3.将当前任务从就绪队列中取下
        task_set_unready(curr_task);
   11d6f:	83 ec 0c             	sub    $0xc,%esp
   11d72:	ff 75 f0             	push   -0x10(%ebp)
   11d75:	e8 aa fa ff ff       	call   11824 <task_set_unready>
   11d7a:	83 c4 10             	add    $0x10,%esp

        //4.将当前任务重新加入到就绪队列的队尾
        task_set_ready(curr_task);
   11d7d:	83 ec 0c             	sub    $0xc,%esp
   11d80:	ff 75 f0             	push   -0x10(%ebp)
   11d83:	e8 51 fa ff ff       	call   117d9 <task_set_ready>
   11d88:	83 c4 10             	add    $0x10,%esp

        //5.任务管理器运行下一个任务，从而释放cpu使用权
        task_switch();
   11d8b:	e8 17 fb ff ff       	call   118a7 <task_switch>
    }
    
    idt_leave_protection(state);//TODO:解锁
   11d90:	83 ec 0c             	sub    $0xc,%esp
   11d93:	ff 75 f4             	push   -0xc(%ebp)
   11d96:	e8 f5 11 00 00       	call   12f90 <idt_leave_protection>
   11d9b:	83 c4 10             	add    $0x10,%esp
    return 0;
   11d9e:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11da3:	c9                   	leave  
   11da4:	c3                   	ret    

00011da5 <load_phdr>:
 * @param file elf文件描述符
 * @param elf_phdr  程序段表项
 * @param page_dir 需要加载到的目标空间的页目录表地址
 * @return int 
 */
static int load_phdr(int file, Elf32_Phdr *elf_phdr, uint32_t page_dir) {
   11da5:	55                   	push   %ebp
   11da6:	89 e5                	mov    %esp,%ebp
   11da8:	83 ec 28             	sub    $0x28,%esp
    //获取该段的权限
    uint32_t privilege = PTE_P | PTE_U;
   11dab:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
    if (elf_phdr->p_flags & PT_W) { //该段具有写权限
   11db2:	8b 45 0c             	mov    0xc(%ebp),%eax
   11db5:	8b 40 18             	mov    0x18(%eax),%eax
   11db8:	83 e0 02             	and    $0x2,%eax
   11dbb:	85 c0                	test   %eax,%eax
   11dbd:	74 04                	je     11dc3 <load_phdr+0x1e>
        privilege |= PTE_W;
   11dbf:	83 4d f4 02          	orl    $0x2,-0xc(%ebp)
    }

    //为该段分配页空间并创建映射关系
    int err = memory_alloc_for_page_dir(page_dir, elf_phdr->p_vaddr, elf_phdr->p_memsz, privilege);
   11dc3:	8b 45 0c             	mov    0xc(%ebp),%eax
   11dc6:	8b 50 14             	mov    0x14(%eax),%edx
   11dc9:	8b 45 0c             	mov    0xc(%ebp),%eax
   11dcc:	8b 40 08             	mov    0x8(%eax),%eax
   11dcf:	ff 75 f4             	push   -0xc(%ebp)
   11dd2:	52                   	push   %edx
   11dd3:	50                   	push   %eax
   11dd4:	ff 75 10             	push   0x10(%ebp)
   11dd7:	e8 59 ef ff ff       	call   10d35 <memory_alloc_for_page_dir>
   11ddc:	83 c4 10             	add    $0x10,%esp
   11ddf:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (err < 0) {
   11de2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11de6:	79 1a                	jns    11e02 <load_phdr+0x5d>
        log_printf("no memory");
   11de8:	83 ec 0c             	sub    $0xc,%esp
   11deb:	68 0a 51 01 00       	push   $0x1510a
   11df0:	e8 b3 2f 00 00       	call   14da8 <log_printf>
   11df5:	83 c4 10             	add    $0x10,%esp
        return -1;
   11df8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11dfd:	e9 b5 00 00 00       	jmp    11eb7 <load_phdr+0x112>
    }

    //使文件的读取位置偏移到该程序段的起始位置
    if (sys_lseek(file, elf_phdr->p_offset, 0) < 0) {
   11e02:	8b 45 0c             	mov    0xc(%ebp),%eax
   11e05:	8b 40 04             	mov    0x4(%eax),%eax
   11e08:	83 ec 04             	sub    $0x4,%esp
   11e0b:	6a 00                	push   $0x0
   11e0d:	50                   	push   %eax
   11e0e:	ff 75 08             	push   0x8(%ebp)
   11e11:	e8 dd 19 00 00       	call   137f3 <sys_lseek>
   11e16:	83 c4 10             	add    $0x10,%esp
   11e19:	85 c0                	test   %eax,%eax
   11e1b:	79 1a                	jns    11e37 <load_phdr+0x92>
        log_printf("lseek file failed");
   11e1d:	83 ec 0c             	sub    $0xc,%esp
   11e20:	68 14 51 01 00       	push   $0x15114
   11e25:	e8 7e 2f 00 00       	call   14da8 <log_printf>
   11e2a:	83 c4 10             	add    $0x10,%esp
        return -1;
   11e2d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11e32:	e9 80 00 00 00       	jmp    11eb7 <load_phdr+0x112>
    }

    //获取该程序段的起始虚拟地址和段在文件中的大小
    uint32_t vaddr = elf_phdr->p_vaddr;
   11e37:	8b 45 0c             	mov    0xc(%ebp),%eax
   11e3a:	8b 40 08             	mov    0x8(%eax),%eax
   11e3d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    uint32_t size = elf_phdr->p_filesz;
   11e40:	8b 45 0c             	mov    0xc(%ebp),%eax
   11e43:	8b 40 10             	mov    0x10(%eax),%eax
   11e46:	89 45 ec             	mov    %eax,-0x14(%ebp)

    while (size > 0) {  //按页读取并拷贝
   11e49:	eb 61                	jmp    11eac <load_phdr+0x107>
        //获取需要拷贝的空间大小
        int curr_size = (size > MEM_PAGE_SIZE) ? MEM_PAGE_SIZE : size;
   11e4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11e4e:	ba 00 10 00 00       	mov    $0x1000,%edx
   11e53:	39 d0                	cmp    %edx,%eax
   11e55:	0f 47 c2             	cmova  %edx,%eax
   11e58:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        //获取vaddr在page_dir中关联的物理页的物理地址
        uint32_t paddr = memory_get_paddr(page_dir, vaddr);
   11e5b:	83 ec 08             	sub    $0x8,%esp
   11e5e:	ff 75 f0             	push   -0x10(%ebp)
   11e61:	ff 75 10             	push   0x10(%ebp)
   11e64:	e8 6f f0 ff ff       	call   10ed8 <memory_get_paddr>
   11e69:	83 c4 10             	add    $0x10,%esp
   11e6c:	89 45 e0             	mov    %eax,-0x20(%ebp)

        //拷贝curr_size大小的内容到paddr对应的页中
        if (sys_read(file, (char*)paddr, curr_size) < curr_size) {
   11e6f:	8b 45 e0             	mov    -0x20(%ebp),%eax
   11e72:	83 ec 04             	sub    $0x4,%esp
   11e75:	ff 75 e4             	push   -0x1c(%ebp)
   11e78:	50                   	push   %eax
   11e79:	ff 75 08             	push   0x8(%ebp)
   11e7c:	e8 0d 19 00 00       	call   1378e <sys_read>
   11e81:	83 c4 10             	add    $0x10,%esp
   11e84:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
   11e87:	7e 17                	jle    11ea0 <load_phdr+0xfb>
            log_printf("read file failed");
   11e89:	83 ec 0c             	sub    $0xc,%esp
   11e8c:	68 26 51 01 00       	push   $0x15126
   11e91:	e8 12 2f 00 00       	call   14da8 <log_printf>
   11e96:	83 c4 10             	add    $0x10,%esp
            return -1;
   11e99:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11e9e:	eb 17                	jmp    11eb7 <load_phdr+0x112>
        }

        size -= curr_size;
   11ea0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11ea3:	29 45 ec             	sub    %eax,-0x14(%ebp)
        vaddr += curr_size;
   11ea6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11ea9:	01 45 f0             	add    %eax,-0x10(%ebp)
    while (size > 0) {  //按页读取并拷贝
   11eac:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11eb0:	75 99                	jne    11e4b <load_phdr+0xa6>
    }

    return 0;
   11eb2:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11eb7:	c9                   	leave  
   11eb8:	c3                   	ret    

00011eb9 <load_elf_file>:
 * @param task 
 * @param name 
 * @param page_dir 
 * @return uint32_t 
 */
static uint32_t load_elf_file(task_t *task, const char * name, uint32_t page_dir) {
   11eb9:	55                   	push   %ebp
   11eba:	89 e5                	mov    %esp,%ebp
   11ebc:	83 ec 78             	sub    $0x78,%esp
    //1.定义elf文件头对象,和程序段表项对象
    Elf32_Ehdr elf_hdr;
    Elf32_Phdr elf_phdr;

    //2.打开文件
    int file = sys_open(name, 0);
   11ebf:	83 ec 08             	sub    $0x8,%esp
   11ec2:	6a 00                	push   $0x0
   11ec4:	ff 75 0c             	push   0xc(%ebp)
   11ec7:	e8 89 18 00 00       	call   13755 <sys_open>
   11ecc:	83 c4 10             	add    $0x10,%esp
   11ecf:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (file < 0) {
   11ed2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11ed6:	79 18                	jns    11ef0 <load_elf_file+0x37>
        log_printf("open failed %s", name);
   11ed8:	83 ec 08             	sub    $0x8,%esp
   11edb:	ff 75 0c             	push   0xc(%ebp)
   11ede:	68 37 51 01 00       	push   $0x15137
   11ee3:	e8 c0 2e 00 00       	call   14da8 <log_printf>
   11ee8:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11eeb:	e9 c1 01 00 00       	jmp    120b1 <load_elf_file+0x1f8>
    }

    //3.读取elf文件的elf头部分
    int cnt = sys_read(file, (char*)&elf_hdr, sizeof(Elf32_Ehdr));
   11ef0:	83 ec 04             	sub    $0x4,%esp
   11ef3:	6a 34                	push   $0x34
   11ef5:	8d 45 b0             	lea    -0x50(%ebp),%eax
   11ef8:	50                   	push   %eax
   11ef9:	ff 75 ec             	push   -0x14(%ebp)
   11efc:	e8 8d 18 00 00       	call   1378e <sys_read>
   11f01:	83 c4 10             	add    $0x10,%esp
   11f04:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (cnt < sizeof(Elf32_Ehdr)) {
   11f07:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11f0a:	83 f8 33             	cmp    $0x33,%eax
   11f0d:	77 18                	ja     11f27 <load_elf_file+0x6e>
        log_printf("elf hdr too small. size=%d", cnt);
   11f0f:	83 ec 08             	sub    $0x8,%esp
   11f12:	ff 75 e8             	push   -0x18(%ebp)
   11f15:	68 46 51 01 00       	push   $0x15146
   11f1a:	e8 89 2e 00 00       	call   14da8 <log_printf>
   11f1f:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11f22:	e9 8a 01 00 00       	jmp    120b1 <load_elf_file+0x1f8>
    }

    //4.判断是否为ELF文件
    if (elf_hdr.e_ident[0] != 0x7F || elf_hdr.e_ident[1] != 'E' 
   11f27:	0f b6 45 b0          	movzbl -0x50(%ebp),%eax
   11f2b:	3c 7f                	cmp    $0x7f,%al
   11f2d:	75 18                	jne    11f47 <load_elf_file+0x8e>
   11f2f:	0f b6 45 b1          	movzbl -0x4f(%ebp),%eax
   11f33:	3c 45                	cmp    $0x45,%al
   11f35:	75 10                	jne    11f47 <load_elf_file+0x8e>
        || elf_hdr.e_ident[2] != 'L' || elf_hdr.e_ident[3] != 'F') {
   11f37:	0f b6 45 b2          	movzbl -0x4e(%ebp),%eax
   11f3b:	3c 4c                	cmp    $0x4c,%al
   11f3d:	75 08                	jne    11f47 <load_elf_file+0x8e>
   11f3f:	0f b6 45 b3          	movzbl -0x4d(%ebp),%eax
   11f43:	3c 46                	cmp    $0x46,%al
   11f45:	74 15                	je     11f5c <load_elf_file+0xa3>
            log_printf("check elf ident failed.");
   11f47:	83 ec 0c             	sub    $0xc,%esp
   11f4a:	68 61 51 01 00       	push   $0x15161
   11f4f:	e8 54 2e 00 00       	call   14da8 <log_printf>
   11f54:	83 c4 10             	add    $0x10,%esp
            goto load_failed;
   11f57:	e9 55 01 00 00       	jmp    120b1 <load_elf_file+0x1f8>
    }

    
    //5.必须是可执行文件和针对386处理器的类型，且有入口
    if ((elf_hdr.e_type != ET_EXEC) || (elf_hdr.e_machine != EM_386) || (elf_hdr.e_entry == 0)) {
   11f5c:	0f b7 45 c0          	movzwl -0x40(%ebp),%eax
   11f60:	66 83 f8 02          	cmp    $0x2,%ax
   11f64:	75 11                	jne    11f77 <load_elf_file+0xbe>
   11f66:	0f b7 45 c2          	movzwl -0x3e(%ebp),%eax
   11f6a:	66 83 f8 03          	cmp    $0x3,%ax
   11f6e:	75 07                	jne    11f77 <load_elf_file+0xbe>
   11f70:	8b 45 c8             	mov    -0x38(%ebp),%eax
   11f73:	85 c0                	test   %eax,%eax
   11f75:	75 15                	jne    11f8c <load_elf_file+0xd3>
        log_printf("check elf type or entry failed.");
   11f77:	83 ec 0c             	sub    $0xc,%esp
   11f7a:	68 7c 51 01 00       	push   $0x1517c
   11f7f:	e8 24 2e 00 00       	call   14da8 <log_printf>
   11f84:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11f87:	e9 25 01 00 00       	jmp    120b1 <load_elf_file+0x1f8>
    }

    //6.必须有程序头部
    if ((elf_hdr.e_phentsize == 0) || (elf_hdr.e_phoff == 0)) {
   11f8c:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
   11f90:	66 85 c0             	test   %ax,%ax
   11f93:	74 07                	je     11f9c <load_elf_file+0xe3>
   11f95:	8b 45 cc             	mov    -0x34(%ebp),%eax
   11f98:	85 c0                	test   %eax,%eax
   11f9a:	75 15                	jne    11fb1 <load_elf_file+0xf8>
        log_printf("none programe header");
   11f9c:	83 ec 0c             	sub    $0xc,%esp
   11f9f:	68 9c 51 01 00       	push   $0x1519c
   11fa4:	e8 ff 2d 00 00       	call   14da8 <log_printf>
   11fa9:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11fac:	e9 00 01 00 00       	jmp    120b1 <load_elf_file+0x1f8>
    }

    //7.遍历elf文件的程序段，加载可加载段到内存中对应位置
    uint32_t e_phoff = elf_hdr.e_phoff; //获取程序段表的偏移地址
   11fb1:	8b 45 cc             	mov    -0x34(%ebp),%eax
   11fb4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (int i = 0; i < elf_hdr.e_phnum; ++i, e_phoff += elf_hdr.e_phentsize) {
   11fb7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11fbe:	e9 cb 00 00 00       	jmp    1208e <load_elf_file+0x1d5>
        if (sys_lseek(file, e_phoff, 0) < 0) {
   11fc3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11fc6:	83 ec 04             	sub    $0x4,%esp
   11fc9:	6a 00                	push   $0x0
   11fcb:	50                   	push   %eax
   11fcc:	ff 75 ec             	push   -0x14(%ebp)
   11fcf:	e8 1f 18 00 00       	call   137f3 <sys_lseek>
   11fd4:	83 c4 10             	add    $0x10,%esp
   11fd7:	85 c0                	test   %eax,%eax
   11fd9:	79 15                	jns    11ff0 <load_elf_file+0x137>
            log_printf("read file failed");
   11fdb:	83 ec 0c             	sub    $0xc,%esp
   11fde:	68 26 51 01 00       	push   $0x15126
   11fe3:	e8 c0 2d 00 00       	call   14da8 <log_printf>
   11fe8:	83 c4 10             	add    $0x10,%esp
            goto load_failed;
   11feb:	e9 c1 00 00 00       	jmp    120b1 <load_elf_file+0x1f8>
        }

        cnt = sys_read(file, (char*)&elf_phdr, sizeof(Elf32_Phdr));
   11ff0:	83 ec 04             	sub    $0x4,%esp
   11ff3:	6a 20                	push   $0x20
   11ff5:	8d 45 90             	lea    -0x70(%ebp),%eax
   11ff8:	50                   	push   %eax
   11ff9:	ff 75 ec             	push   -0x14(%ebp)
   11ffc:	e8 8d 17 00 00       	call   1378e <sys_read>
   12001:	83 c4 10             	add    $0x10,%esp
   12004:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (cnt < sizeof(Elf32_Phdr)) {
   12007:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1200a:	83 f8 1f             	cmp    $0x1f,%eax
   1200d:	77 15                	ja     12024 <load_elf_file+0x16b>
            log_printf("read file failed");
   1200f:	83 ec 0c             	sub    $0xc,%esp
   12012:	68 26 51 01 00       	push   $0x15126
   12017:	e8 8c 2d 00 00       	call   14da8 <log_printf>
   1201c:	83 c4 10             	add    $0x10,%esp
            goto load_failed;
   1201f:	e9 8d 00 00 00       	jmp    120b1 <load_elf_file+0x1f8>
        }

        //若程序段不是可加载的或虚拟地址 < 用户程序的起始地址，则不可用
        if (elf_phdr.p_type != 1 || elf_phdr.p_vaddr < MEM_TASK_BASE) {
   12024:	8b 45 90             	mov    -0x70(%ebp),%eax
   12027:	83 f8 01             	cmp    $0x1,%eax
   1202a:	75 53                	jne    1207f <load_elf_file+0x1c6>
   1202c:	8b 45 98             	mov    -0x68(%ebp),%eax
   1202f:	85 c0                	test   %eax,%eax
   12031:	79 4c                	jns    1207f <load_elf_file+0x1c6>
            continue;
        }

        //加载该程序段
        int err = load_phdr(file, &elf_phdr, page_dir);
   12033:	83 ec 04             	sub    $0x4,%esp
   12036:	ff 75 10             	push   0x10(%ebp)
   12039:	8d 45 90             	lea    -0x70(%ebp),%eax
   1203c:	50                   	push   %eax
   1203d:	ff 75 ec             	push   -0x14(%ebp)
   12040:	e8 60 fd ff ff       	call   11da5 <load_phdr>
   12045:	83 c4 10             	add    $0x10,%esp
   12048:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0) {
   1204b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   1204f:	79 12                	jns    12063 <load_elf_file+0x1aa>
            log_printf("load program failed");
   12051:	83 ec 0c             	sub    $0xc,%esp
   12054:	68 b1 51 01 00       	push   $0x151b1
   12059:	e8 4a 2d 00 00       	call   14da8 <log_printf>
   1205e:	83 c4 10             	add    $0x10,%esp
            goto load_failed;
   12061:	eb 4e                	jmp    120b1 <load_elf_file+0x1f8>
        }

        //更新堆空间的位置，紧靠最后一个可加载段
        task->heap_start = elf_phdr.p_vaddr + elf_phdr.p_memsz;
   12063:	8b 55 98             	mov    -0x68(%ebp),%edx
   12066:	8b 45 a4             	mov    -0x5c(%ebp),%eax
   12069:	01 c2                	add    %eax,%edx
   1206b:	8b 45 08             	mov    0x8(%ebp),%eax
   1206e:	89 50 0c             	mov    %edx,0xc(%eax)
        task->heap_end = task->heap_start;
   12071:	8b 45 08             	mov    0x8(%ebp),%eax
   12074:	8b 50 0c             	mov    0xc(%eax),%edx
   12077:	8b 45 08             	mov    0x8(%ebp),%eax
   1207a:	89 50 10             	mov    %edx,0x10(%eax)
   1207d:	eb 01                	jmp    12080 <load_elf_file+0x1c7>
            continue;
   1207f:	90                   	nop
    for (int i = 0; i < elf_hdr.e_phnum; ++i, e_phoff += elf_hdr.e_phentsize) {
   12080:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   12084:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
   12088:	0f b7 c0             	movzwl %ax,%eax
   1208b:	01 45 f4             	add    %eax,-0xc(%ebp)
   1208e:	0f b7 45 dc          	movzwl -0x24(%ebp),%eax
   12092:	0f b7 c0             	movzwl %ax,%eax
   12095:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   12098:	0f 8c 25 ff ff ff    	jl     11fc3 <load_elf_file+0x10a>
    }

    //成功解析并加载完整个elf文件后关闭文件，并返回程序入口地址
    sys_close(file);
   1209e:	83 ec 0c             	sub    $0xc,%esp
   120a1:	ff 75 ec             	push   -0x14(%ebp)
   120a4:	e8 6e 17 00 00       	call   13817 <sys_close>
   120a9:	83 c4 10             	add    $0x10,%esp
    return elf_hdr.e_entry;
   120ac:	8b 45 c8             	mov    -0x38(%ebp),%eax
   120af:	eb 19                	jmp    120ca <load_elf_file+0x211>

//错误处理
load_failed:
    if (file >= 0) {    //文件已被打开，则关闭该文件
   120b1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   120b5:	78 0e                	js     120c5 <load_elf_file+0x20c>
        sys_close(file);
   120b7:	83 ec 0c             	sub    $0xc,%esp
   120ba:	ff 75 ec             	push   -0x14(%ebp)
   120bd:	e8 55 17 00 00       	call   13817 <sys_close>
   120c2:	83 c4 10             	add    $0x10,%esp
    }
    return 0;
   120c5:	b8 00 00 00 00       	mov    $0x0,%eax
}
   120ca:	c9                   	leave  
   120cb:	c3                   	ret    

000120cc <copy_args>:
 * @param stack_top 新任务的栈顶地址
 * @param argv 参数的字符串数组
 * @param argc 参数的个数
 * @return int 
 */
static int copy_args(uint32_t to_page_dir, char *stack_top, char * const *argv, int argc) {
   120cc:	55                   	push   %ebp
   120cd:	89 e5                	mov    %esp,%ebp
   120cf:	83 ec 38             	sub    $0x38,%esp
    task_args_t task_args;
    task_args.argc = argc;
   120d2:	8b 45 14             	mov    0x14(%ebp),%eax
   120d5:	89 45 d8             	mov    %eax,-0x28(%ebp)


    //1.获取char*数组在目标虚拟空间中的的虚拟地址
    //char*数组将被拷贝到task_args的上方,所以直接让argv指向栈顶偏移task_args的大小个字节的空间即可
    //即指向了该字符串数组第一个char*的地址
    task_args.argv = (char **)(stack_top + sizeof(task_args_t));
   120d8:	8b 45 0c             	mov    0xc(%ebp),%eax
   120db:	83 c0 0c             	add    $0xc,%eax
   120de:	89 45 dc             	mov    %eax,-0x24(%ebp)

    //2.获取char*数组对应的虚拟空间关联的物理地址
    char **to_argv_paddr = (char**)memory_get_paddr(to_page_dir, (uint32_t)task_args.argv);  
   120e1:	8b 45 dc             	mov    -0x24(%ebp),%eax
   120e4:	83 ec 08             	sub    $0x8,%esp
   120e7:	50                   	push   %eax
   120e8:	ff 75 08             	push   0x8(%ebp)
   120eb:	e8 e8 ed ff ff       	call   10ed8 <memory_get_paddr>
   120f0:	83 c4 10             	add    $0x10,%esp
   120f3:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //3.获取参数的存储地址, 偏移量为 task_args 加上 argc个参数的字符串指针的大小，
    char *dest_arg = stack_top + sizeof(task_args_t) + sizeof(char*) * argc;
   120f6:	8b 45 14             	mov    0x14(%ebp),%eax
   120f9:	83 c0 03             	add    $0x3,%eax
   120fc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   12103:	8b 45 0c             	mov    0xc(%ebp),%eax
   12106:	01 d0                	add    %edx,%eax
   12108:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //3.将参数拷贝到dest_arg处，并将每个参数的地址记录到task.argv指向的char*数组中
    for (int i = 0; i < argc; ++i) {
   1210b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   12112:	e9 82 00 00 00       	jmp    12199 <copy_args+0xcd>
        char *from = argv[i];
   12117:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1211a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   12121:	8b 45 10             	mov    0x10(%ebp),%eax
   12124:	01 d0                	add    %edx,%eax
   12126:	8b 00                	mov    (%eax),%eax
   12128:	89 45 e8             	mov    %eax,-0x18(%ebp)
        int len = kernel_strlen(from) + 1;
   1212b:	83 ec 0c             	sub    $0xc,%esp
   1212e:	ff 75 e8             	push   -0x18(%ebp)
   12131:	e8 07 24 00 00       	call   1453d <kernel_strlen>
   12136:	83 c4 10             	add    $0x10,%esp
   12139:	83 c0 01             	add    $0x1,%eax
   1213c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        int err = memory_copy_uvm_data((uint32_t)dest_arg, to_page_dir, (uint32_t)from, len);
   1213f:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
   12142:	8b 55 e8             	mov    -0x18(%ebp),%edx
   12145:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12148:	51                   	push   %ecx
   12149:	52                   	push   %edx
   1214a:	ff 75 08             	push   0x8(%ebp)
   1214d:	50                   	push   %eax
   1214e:	e8 d8 ed ff ff       	call   10f2b <memory_copy_uvm_data>
   12153:	83 c4 10             	add    $0x10,%esp
   12156:	89 45 e0             	mov    %eax,-0x20(%ebp)
        ASSERT(err >= 0);
   12159:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   1215d:	79 1c                	jns    1217b <copy_args+0xaf>
   1215f:	68 c5 51 01 00       	push   $0x151c5
   12164:	68 8c 52 01 00       	push   $0x1528c
   12169:	68 50 03 00 00       	push   $0x350
   1216e:	68 a8 50 01 00       	push   $0x150a8
   12173:	e8 47 1f 00 00       	call   140bf <pannic>
   12178:	83 c4 10             	add    $0x10,%esp
        to_argv_paddr[i] = dest_arg;
   1217b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1217e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   12185:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12188:	01 c2                	add    %eax,%edx
   1218a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1218d:	89 02                	mov    %eax,(%edx)
        dest_arg += len;
   1218f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12192:	01 45 f4             	add    %eax,-0xc(%ebp)
    for (int i = 0; i < argc; ++i) {
   12195:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   12199:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1219c:	3b 45 14             	cmp    0x14(%ebp),%eax
   1219f:	0f 8c 72 ff ff ff    	jl     12117 <copy_args+0x4b>
    }


    //4.将task_args拷贝到用户虚拟空间中,紧邻栈顶上方，作为入口函数的参数
    memory_copy_uvm_data((uint32_t)stack_top, to_page_dir, (uint32_t)&task_args, sizeof(task_args_t)); 
   121a5:	8d 55 d4             	lea    -0x2c(%ebp),%edx
   121a8:	8b 45 0c             	mov    0xc(%ebp),%eax
   121ab:	6a 0c                	push   $0xc
   121ad:	52                   	push   %edx
   121ae:	ff 75 08             	push   0x8(%ebp)
   121b1:	50                   	push   %eax
   121b2:	e8 74 ed ff ff       	call   10f2b <memory_copy_uvm_data>
   121b7:	83 c4 10             	add    $0x10,%esp
}
   121ba:	90                   	nop
   121bb:	c9                   	leave  
   121bc:	c3                   	ret    

000121bd <sys_execve>:
 * @param name 程序名
 * @param argv 命令行参数数组
 * @param env 程序继承的环境变量数组
 * @return int 
 */
int sys_execve(char *name, char * const *argv, char * const *env ) {
   121bd:	55                   	push   %ebp
   121be:	89 e5                	mov    %esp,%ebp
   121c0:	83 ec 28             	sub    $0x28,%esp
        //1.获取当前任务进程
        task_t *task = task_current();
   121c3:	e8 d5 f6 ff ff       	call   1189d <task_current>
   121c8:	89 45 f4             	mov    %eax,-0xc(%ebp)

        //2.获取当前任务的页目录表
        uint32_t old_page_dir = task->tss.cr3;
   121cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   121ce:	8b 40 74             	mov    0x74(%eax),%eax
   121d1:	89 45 f0             	mov    %eax,-0x10(%ebp)

        //3.创建一个新的页目录表
        uint32_t new_page_dir = memory_creat_uvm();
   121d4:	e8 6a e7 ff ff       	call   10943 <memory_creat_uvm>
   121d9:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (new_page_dir == 0)  //创建失败
   121dc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   121e0:	0f 84 4a 01 00 00    	je     12330 <sys_execve+0x173>
            goto exec_failed;

        //4.加载elf文件，替换当前任务
        uint32_t entry = load_elf_file(task, name, new_page_dir);
   121e6:	83 ec 04             	sub    $0x4,%esp
   121e9:	ff 75 ec             	push   -0x14(%ebp)
   121ec:	ff 75 08             	push   0x8(%ebp)
   121ef:	ff 75 f4             	push   -0xc(%ebp)
   121f2:	e8 c2 fc ff ff       	call   11eb9 <load_elf_file>
   121f7:	83 c4 10             	add    $0x10,%esp
   121fa:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (entry == 0)
   121fd:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   12201:	0f 84 2c 01 00 00    	je     12333 <sys_execve+0x176>
            goto exec_failed;

        
        //5.为新进程分配用户栈空间
        uint32_t stack_top = MEM_TASK_STACK_TOP - MEM_TASK_ARG_SIZE;
   12207:	c7 45 e4 00 c0 ff df 	movl   $0xdfffc000,-0x1c(%ebp)
        int err = memory_alloc_for_page_dir(new_page_dir, 
   1220e:	6a 07                	push   $0x7
   12210:	68 00 20 03 00       	push   $0x32000
   12215:	68 00 e0 fc df       	push   $0xdffce000
   1221a:	ff 75 ec             	push   -0x14(%ebp)
   1221d:	e8 13 eb ff ff       	call   10d35 <memory_alloc_for_page_dir>
   12222:	83 c4 10             	add    $0x10,%esp
   12225:	89 45 e0             	mov    %eax,-0x20(%ebp)
            MEM_TASK_STACK_TOP - MEM_TASK_STACK_SIZE, 
            MEM_TASK_STACK_SIZE, 
            PTE_P | PTE_U | PTE_W);

        if (err < 0) 
   12228:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   1222c:	0f 88 04 01 00 00    	js     12336 <sys_execve+0x179>
            goto exec_failed;

        //6.将被执行任务的入口参数拷贝到栈上方对应内存空间
        int argc = strings_count(argv);
   12232:	83 ec 0c             	sub    $0xc,%esp
   12235:	ff 75 0c             	push   0xc(%ebp)
   12238:	e8 34 27 00 00       	call   14971 <strings_count>
   1223d:	83 c4 10             	add    $0x10,%esp
   12240:	89 45 dc             	mov    %eax,-0x24(%ebp)
        err = copy_args(new_page_dir, (char *)stack_top, argv, argc);
   12243:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12246:	ff 75 dc             	push   -0x24(%ebp)
   12249:	ff 75 0c             	push   0xc(%ebp)
   1224c:	50                   	push   %eax
   1224d:	ff 75 ec             	push   -0x14(%ebp)
   12250:	e8 77 fe ff ff       	call   120cc <copy_args>
   12255:	83 c4 10             	add    $0x10,%esp
   12258:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (err < 0)
   1225b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   1225f:	0f 88 d4 00 00 00    	js     12339 <sys_execve+0x17c>

      

        //7.获取系统调用的栈帧,因为每次通过调用门进入内核栈中都只会一帧该结构体的数据，
        //所以用最高地址减去大小即可获得该帧的起始地址
        syscall_frame_t *frame = (syscall_frame_t*)(task_current()->tss.esp0 - sizeof(syscall_frame_t));
   12265:	e8 33 f6 ff ff       	call   1189d <task_current>
   1226a:	8b 40 5c             	mov    0x5c(%eax),%eax
   1226d:	83 e8 58             	sub    $0x58,%eax
   12270:	89 45 d8             	mov    %eax,-0x28(%ebp)
        
        //8.更改进程用户栈的位置，并更改调用门返回后执行的指令地址为程序入口地址
        frame->esp = stack_top - 5 * 4;
   12273:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12276:	8d 50 ec             	lea    -0x14(%eax),%edx
   12279:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1227c:	89 50 50             	mov    %edx,0x50(%eax)
        frame->eip = entry;
   1227f:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12282:	8b 55 e8             	mov    -0x18(%ebp),%edx
   12285:	89 50 34             	mov    %edx,0x34(%eax)

        //9.让进程更清爽的运行，清空通用寄存器的值
        frame->eax = frame->ebx = frame->ecx = frame->edx = 0;
   12288:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1228b:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
   12292:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12295:	8b 50 28             	mov    0x28(%eax),%edx
   12298:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1229b:	89 50 2c             	mov    %edx,0x2c(%eax)
   1229e:	8b 45 d8             	mov    -0x28(%ebp),%eax
   122a1:	8b 50 2c             	mov    0x2c(%eax),%edx
   122a4:	8b 45 d8             	mov    -0x28(%ebp),%eax
   122a7:	89 50 24             	mov    %edx,0x24(%eax)
   122aa:	8b 45 d8             	mov    -0x28(%ebp),%eax
   122ad:	8b 50 24             	mov    0x24(%eax),%edx
   122b0:	8b 45 d8             	mov    -0x28(%ebp),%eax
   122b3:	89 50 30             	mov    %edx,0x30(%eax)
        frame->esi = frame->edi = frame->ebp = 0;
   122b6:	8b 45 d8             	mov    -0x28(%ebp),%eax
   122b9:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
   122c0:	8b 45 d8             	mov    -0x28(%ebp),%eax
   122c3:	8b 50 1c             	mov    0x1c(%eax),%edx
   122c6:	8b 45 d8             	mov    -0x28(%ebp),%eax
   122c9:	89 50 14             	mov    %edx,0x14(%eax)
   122cc:	8b 45 d8             	mov    -0x28(%ebp),%eax
   122cf:	8b 50 14             	mov    0x14(%eax),%edx
   122d2:	8b 45 d8             	mov    -0x28(%ebp),%eax
   122d5:	89 50 18             	mov    %edx,0x18(%eax)
        frame->eflags = EFLAGS_IF | EFLAGS_DEFAULT_1;
   122d8:	8b 45 d8             	mov    -0x28(%ebp),%eax
   122db:	c7 00 02 02 00 00    	movl   $0x202,(%eax)

        //10.修改当前任务名为被执行任务名
        kernel_strncpy(task->name, get_file_name(name), TASK_NAME_SIZE);
   122e1:	83 ec 0c             	sub    $0xc,%esp
   122e4:	ff 75 08             	push   0x8(%ebp)
   122e7:	e8 b2 26 00 00       	call   1499e <get_file_name>
   122ec:	83 c4 10             	add    $0x10,%esp
   122ef:	8b 55 f4             	mov    -0xc(%ebp),%edx
   122f2:	83 c2 20             	add    $0x20,%edx
   122f5:	83 ec 04             	sub    $0x4,%esp
   122f8:	6a 20                	push   $0x20
   122fa:	50                   	push   %eax
   122fb:	52                   	push   %edx
   122fc:	e8 81 21 00 00       	call   14482 <kernel_strncpy>
   12301:	83 c4 10             	add    $0x10,%esp
        
        //11.记录并设置新页目录表，并销毁原页目录表的虚拟映射关系
        task->tss.cr3 = new_page_dir;
   12304:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12307:	8b 55 ec             	mov    -0x14(%ebp),%edx
   1230a:	89 50 74             	mov    %edx,0x74(%eax)
        mmu_set_page_dir(new_page_dir);
   1230d:	83 ec 0c             	sub    $0xc,%esp
   12310:	ff 75 ec             	push   -0x14(%ebp)
   12313:	e8 56 ef ff ff       	call   1126e <mmu_set_page_dir>
   12318:	83 c4 10             	add    $0x10,%esp
        memory_destroy_uvm(old_page_dir);
   1231b:	83 ec 0c             	sub    $0xc,%esp
   1231e:	ff 75 f0             	push   -0x10(%ebp)
   12321:	e8 2f e8 ff ff       	call   10b55 <memory_destroy_uvm>
   12326:	83 c4 10             	add    $0x10,%esp
    return 0;
   12329:	b8 00 00 00 00       	mov    $0x0,%eax
   1232e:	eb 3a                	jmp    1236a <sys_execve+0x1ad>
            goto exec_failed;
   12330:	90                   	nop
   12331:	eb 07                	jmp    1233a <sys_execve+0x17d>
            goto exec_failed;
   12333:	90                   	nop
   12334:	eb 04                	jmp    1233a <sys_execve+0x17d>
            goto exec_failed;
   12336:	90                   	nop
   12337:	eb 01                	jmp    1233a <sys_execve+0x17d>
            goto exec_failed;
   12339:	90                   	nop

exec_failed:
    // 执行失败，释放资源并恢复到原进程状态
    if (new_page_dir) {
   1233a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1233e:	74 25                	je     12365 <sys_execve+0x1a8>
        task->tss.cr3 = old_page_dir;
   12340:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12343:	8b 55 f0             	mov    -0x10(%ebp),%edx
   12346:	89 50 74             	mov    %edx,0x74(%eax)
        mmu_set_page_dir(old_page_dir);
   12349:	83 ec 0c             	sub    $0xc,%esp
   1234c:	ff 75 f0             	push   -0x10(%ebp)
   1234f:	e8 1a ef ff ff       	call   1126e <mmu_set_page_dir>
   12354:	83 c4 10             	add    $0x10,%esp
        memory_destroy_uvm(new_page_dir);
   12357:	83 ec 0c             	sub    $0xc,%esp
   1235a:	ff 75 ec             	push   -0x14(%ebp)
   1235d:	e8 f3 e7 ff ff       	call   10b55 <memory_destroy_uvm>
   12362:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   12365:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1236a:	c9                   	leave  
   1236b:	c3                   	ret    

0001236c <gate_desc_set>:
 * @param selector 门描述符对应的处理程序所在的段的选择子
 * @param offset 门描述符对应的处理程序相对于所在段的偏移量
 * @param attr 门描述符的属性
 */
void gate_desc_set(gate_desc_t *desc, const uint16_t selector, const uint32_t offset,
                          const uint16_t attr) {
   1236c:	55                   	push   %ebp
   1236d:	89 e5                	mov    %esp,%ebp
   1236f:	83 ec 08             	sub    $0x8,%esp
   12372:	8b 55 0c             	mov    0xc(%ebp),%edx
   12375:	8b 45 14             	mov    0x14(%ebp),%eax
   12378:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   1237c:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
  // 1.初始化偏移量
  desc->offset15_0 = offset & 0xffff;
   12380:	8b 45 10             	mov    0x10(%ebp),%eax
   12383:	89 c2                	mov    %eax,%edx
   12385:	8b 45 08             	mov    0x8(%ebp),%eax
   12388:	66 89 10             	mov    %dx,(%eax)
  desc->offset31_16 = (offset >> 16) & 0xffff;
   1238b:	8b 45 10             	mov    0x10(%ebp),%eax
   1238e:	c1 e8 10             	shr    $0x10,%eax
   12391:	89 c2                	mov    %eax,%edx
   12393:	8b 45 08             	mov    0x8(%ebp),%eax
   12396:	66 89 50 06          	mov    %dx,0x6(%eax)

  // 2.初始化选择子
  desc->selector = selector;
   1239a:	8b 45 08             	mov    0x8(%ebp),%eax
   1239d:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   123a1:	66 89 50 02          	mov    %dx,0x2(%eax)

  // 3.初始化属性位
  desc->attr = attr;
   123a5:	8b 45 08             	mov    0x8(%ebp),%eax
   123a8:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   123ac:	66 89 50 04          	mov    %dx,0x4(%eax)
   123b0:	90                   	nop
   123b1:	c9                   	leave  
   123b2:	c3                   	ret    

000123b3 <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   123b3:	55                   	push   %ebp
   123b4:	89 e5                	mov    %esp,%ebp
   123b6:	83 ec 10             	sub    $0x10,%esp
  gdt.start31_16 = (start >> 16) & 0xffff;  // 初始化GDT地址的高16位
   123b9:	8b 45 08             	mov    0x8(%ebp),%eax
   123bc:	c1 e8 10             	shr    $0x10,%eax
   123bf:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  gdt.start15_0 = start & 0xffff;           // 初始化GDT地址的低16位
   123c3:	8b 45 08             	mov    0x8(%ebp),%eax
   123c6:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   123ca:	8b 45 0c             	mov    0xc(%ebp),%eax
   123cd:	83 e8 01             	sub    $0x1,%eax
  gdt.limit =
   123d0:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   123d4:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   123d8:	90                   	nop
   123d9:	c9                   	leave  
   123da:	c3                   	ret    

000123db <segment_desc_set>:
 *                 即2的13次方个段，也就是8192
 * @param base 该段在内存中的真实段基址
 * @param limit 该段的段界限，是一个偏移量，表示段中最大的偏移界限
 * @param attr 该段的属性位
 */
void segment_desc_set(uint16_t selector,  uint32_t base, uint32_t limit, uint16_t attr) {
   123db:	55                   	push   %ebp
   123dc:	89 e5                	mov    %esp,%ebp
   123de:	83 ec 18             	sub    $0x18,%esp
   123e1:	8b 55 08             	mov    0x8(%ebp),%edx
   123e4:	8b 45 14             	mov    0x14(%ebp),%eax
   123e7:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
   123eb:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    //1. 获取该段描述符在内存中的起始地址，selector >> 3 取出3~15位才是其在全局描述符中的下标
    segment_desc_t *desc = gdt_table + (selector >> 3);
   123ef:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   123f3:	66 c1 e8 03          	shr    $0x3,%ax
   123f7:	0f b7 c0             	movzwl %ax,%eax
   123fa:	c1 e0 03             	shl    $0x3,%eax
   123fd:	05 e0 65 02 00       	add    $0x265e0,%eax
   12402:	89 45 fc             	mov    %eax,-0x4(%ebp)

    //2. 设置段基地址
    desc->base15_0 = (uint16_t)base;
   12405:	8b 45 0c             	mov    0xc(%ebp),%eax
   12408:	89 c2                	mov    %eax,%edx
   1240a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1240d:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (uint8_t)(base >> 16);
   12411:	8b 45 0c             	mov    0xc(%ebp),%eax
   12414:	c1 e8 10             	shr    $0x10,%eax
   12417:	89 c2                	mov    %eax,%edx
   12419:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1241c:	88 50 04             	mov    %dl,0x4(%eax)
    desc->base31_24 = (uint8_t)(base >> 24);
   1241f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12422:	c1 e8 18             	shr    $0x18,%eax
   12425:	89 c2                	mov    %eax,%edx
   12427:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1242a:	88 50 07             	mov    %dl,0x7(%eax)

    //3. 设置段界限
    if (limit > 0xfffff) { //limit大于了20位能表示的最大值
   1242d:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   12434:	76 1d                	jbe    12453 <segment_desc_set+0x78>
        //将limit的粒度设置为 4kb，即将属性位G置1
        desc->attr |= 0x8000;
   12436:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12439:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   1243d:	66 0d 00 80          	or     $0x8000,%ax
   12441:	89 c2                	mov    %eax,%edx
   12443:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12446:	66 89 50 05          	mov    %dx,0x5(%eax)

        //将limit改成以 4kb 为单位
        limit /= (4 * 1024);
   1244a:	8b 45 10             	mov    0x10(%ebp),%eax
   1244d:	c1 e8 0c             	shr    $0xc,%eax
   12450:	89 45 10             	mov    %eax,0x10(%ebp)

    }
    desc->limit15_0 = (uint16_t)limit;
   12453:	8b 45 10             	mov    0x10(%ebp),%eax
   12456:	89 c2                	mov    %eax,%edx
   12458:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1245b:	66 89 10             	mov    %dx,(%eax)
    desc->attr |= ((uint16_t)(limit >> 8) & 0x0f00); //将limit高4位赋值到attr的8~11位(段界限的高4位)
   1245e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12461:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   12465:	89 c2                	mov    %eax,%edx
   12467:	8b 45 10             	mov    0x10(%ebp),%eax
   1246a:	c1 e8 08             	shr    $0x8,%eax
   1246d:	66 25 00 0f          	and    $0xf00,%ax
   12471:	09 d0                	or     %edx,%eax
   12473:	89 c2                	mov    %eax,%edx
   12475:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12478:	66 89 50 05          	mov    %dx,0x5(%eax)

    //4.设置属性位
    desc->attr |= attr & 0xf0ff;
   1247c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1247f:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   12483:	89 c2                	mov    %eax,%edx
   12485:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   12489:	80 e4 f0             	and    $0xf0,%ah
   1248c:	09 d0                	or     %edx,%eax
   1248e:	89 c2                	mov    %eax,%edx
   12490:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12493:	66 89 50 05          	mov    %dx,0x5(%eax)


}
   12497:	90                   	nop
   12498:	c9                   	leave  
   12499:	c3                   	ret    

0001249a <gdt_init>:

/**
 * @brief  初始化GDT
 * 
 */
void gdt_init(void) {
   1249a:	55                   	push   %ebp
   1249b:	89 e5                	mov    %esp,%ebp
   1249d:	83 ec 18             	sub    $0x18,%esp
    //TODO:暂时将所有段都初始化为0
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   124a0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   124a7:	eb 1c                	jmp    124c5 <gdt_init+0x2b>
        segment_desc_set(i << 3, 0, 0, 0);
   124a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   124ac:	c1 e0 03             	shl    $0x3,%eax
   124af:	0f b7 c0             	movzwl %ax,%eax
   124b2:	6a 00                	push   $0x0
   124b4:	6a 00                	push   $0x0
   124b6:	6a 00                	push   $0x0
   124b8:	50                   	push   %eax
   124b9:	e8 1d ff ff ff       	call   123db <segment_desc_set>
   124be:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   124c1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   124c5:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   124cc:	7e db                	jle    124a9 <gdt_init+0xf>
        is_alloc[i] == 0;
    }

    //使用平坦模型，即段基址为0, 段界限直接用最大值，界限粒度为4kb，即段大小为4GB
    //1.设置内核的数据段,并将其标记
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff,
   124ce:	68 92 40 00 00       	push   $0x4092
   124d3:	6a ff                	push   $0xffffffff
   124d5:	6a 00                	push   $0x0
   124d7:	6a 10                	push   $0x10
   124d9:	e8 fd fe ff ff       	call   123db <segment_desc_set>
   124de:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL | 
                    SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_DS >> 3] = 1;
   124e1:	c6 05 e2 65 03 00 01 	movb   $0x1,0x365e2

    //2.设置内核的代码段，并将其标记
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff,
   124e8:	68 9a 40 00 00       	push   $0x409a
   124ed:	6a ff                	push   $0xffffffff
   124ef:	6a 00                	push   $0x0
   124f1:	6a 08                	push   $0x8
   124f3:	e8 e3 fe ff ff       	call   123db <segment_desc_set>
   124f8:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL |
                    SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_CS >> 3] = 1;
   124fb:	c6 05 e1 65 03 00 01 	movb   $0x1,0x365e1

    //3.初始化调用门描述符，调用门的 DPL >= CPL = 3 && DPL >= RPL = 0, 若目标代码段的特权级更高则发生特权级转换
    gate_desc_set((gate_desc_t*)(gdt_table + (SYSCALL_SELECTOR >> 3)), 
   12502:	ba ad 02 01 00       	mov    $0x102ad,%edx
   12507:	b8 f8 65 02 00       	mov    $0x265f8,%eax
   1250c:	68 05 ec 00 00       	push   $0xec05
   12511:	52                   	push   %edx
   12512:	6a 08                	push   $0x8
   12514:	50                   	push   %eax
   12515:	e8 52 fe ff ff       	call   1236c <gate_desc_set>
   1251a:	83 c4 10             	add    $0x10,%esp
        KERNEL_SELECTOR_CS, (uint32_t)exception_handler_syscall, 
        GATE_ATTR_P | GATE_ATTR_DPL_3 | GATE_TYPE_SYSCALL | SYSCALL_PARAM_COUNT);
    
    is_alloc[SYSCALL_SELECTOR >> 3] = 1;
   1251d:	c6 05 e3 65 03 00 01 	movb   $0x1,0x365e3


    //4.加载新的GDT表
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   12524:	b8 e0 65 02 00       	mov    $0x265e0,%eax
   12529:	83 ec 08             	sub    $0x8,%esp
   1252c:	68 00 00 01 00       	push   $0x10000
   12531:	50                   	push   %eax
   12532:	e8 7c fe ff ff       	call   123b3 <lgdt>
   12537:	83 c4 10             	add    $0x10,%esp

    //4.初始化互斥锁
    mutex_init(&mutex);
   1253a:	83 ec 0c             	sub    $0xc,%esp
   1253d:	68 e0 85 03 00       	push   $0x385e0
   12542:	e8 63 14 00 00       	call   139aa <mutex_init>
   12547:	83 c4 10             	add    $0x10,%esp
}
   1254a:	90                   	nop
   1254b:	c9                   	leave  
   1254c:	c3                   	ret    

0001254d <gdt_alloc_desc>:
/**
 * @brief  寻找gdt中未赋值的段描述符空间
 * 
 * @return int 返回的找到的描述符的选择子
 */
int gdt_alloc_desc() {
   1254d:	55                   	push   %ebp
   1254e:	89 e5                	mov    %esp,%ebp
   12550:	83 ec 18             	sub    $0x18,%esp

    mutex_lock(&mutex);//TODO:加锁
   12553:	83 ec 0c             	sub    $0xc,%esp
   12556:	68 e0 85 03 00       	push   $0x385e0
   1255b:	e8 97 14 00 00       	call   139f7 <mutex_lock>
   12560:	83 c4 10             	add    $0x10,%esp

    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   12563:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   1256a:	eb 36                	jmp    125a2 <gdt_alloc_desc+0x55>
        if (is_alloc[i] == 0)  {
   1256c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1256f:	05 e0 65 03 00       	add    $0x365e0,%eax
   12574:	0f b6 00             	movzbl (%eax),%eax
   12577:	84 c0                	test   %al,%al
   12579:	75 23                	jne    1259e <gdt_alloc_desc+0x51>
            is_alloc[i] = 1;
   1257b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1257e:	05 e0 65 03 00       	add    $0x365e0,%eax
   12583:	c6 00 01             	movb   $0x1,(%eax)

            mutex_unlock(&mutex);//TODO:解锁
   12586:	83 ec 0c             	sub    $0xc,%esp
   12589:	68 e0 85 03 00       	push   $0x385e0
   1258e:	e8 f5 14 00 00       	call   13a88 <mutex_unlock>
   12593:	83 c4 10             	add    $0x10,%esp
            return (i << 3);
   12596:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12599:	c1 e0 03             	shl    $0x3,%eax
   1259c:	eb 22                	jmp    125c0 <gdt_alloc_desc+0x73>
    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   1259e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   125a2:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   125a9:	7e c1                	jle    1256c <gdt_alloc_desc+0x1f>
        }
    }

    mutex_unlock(&mutex);//TODO:解锁
   125ab:	83 ec 0c             	sub    $0xc,%esp
   125ae:	68 e0 85 03 00       	push   $0x385e0
   125b3:	e8 d0 14 00 00       	call   13a88 <mutex_unlock>
   125b8:	83 c4 10             	add    $0x10,%esp
    return -1;
   125bb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   125c0:	c9                   	leave  
   125c1:	c3                   	ret    

000125c2 <gdt_free>:
/**
 * @brief 释放gdt表项
 * 
 * @param selector 需要释放的表项对应的选择子
 */
void gdt_free(uint16_t selector) {
   125c2:	55                   	push   %ebp
   125c3:	89 e5                	mov    %esp,%ebp
   125c5:	83 ec 14             	sub    $0x14,%esp
   125c8:	8b 45 08             	mov    0x8(%ebp),%eax
   125cb:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    uint16_t index = selector >> 3;
   125cf:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   125d3:	66 c1 e8 03          	shr    $0x3,%ax
   125d7:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    is_alloc[index] = 0;
   125db:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
   125df:	c6 80 e0 65 03 00 00 	movb   $0x0,0x365e0(%eax)
}
   125e6:	90                   	nop
   125e7:	c9                   	leave  
   125e8:	c3                   	ret    

000125e9 <cli>:
static inline void cli(void) { __asm__ __volatile__("cli"); }
   125e9:	55                   	push   %ebp
   125ea:	89 e5                	mov    %esp,%ebp
   125ec:	fa                   	cli    
   125ed:	90                   	nop
   125ee:	5d                   	pop    %ebp
   125ef:	c3                   	ret    

000125f0 <sti>:
static inline void sti(void) { __asm__ __volatile__("sti"); }
   125f0:	55                   	push   %ebp
   125f1:	89 e5                	mov    %esp,%ebp
   125f3:	fb                   	sti    
   125f4:	90                   	nop
   125f5:	5d                   	pop    %ebp
   125f6:	c3                   	ret    

000125f7 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   125f7:	55                   	push   %ebp
   125f8:	89 e5                	mov    %esp,%ebp
   125fa:	f4                   	hlt    
   125fb:	90                   	nop
   125fc:	5d                   	pop    %ebp
   125fd:	c3                   	ret    

000125fe <inb>:
static inline uint8_t inb(uint16_t port) {
   125fe:	55                   	push   %ebp
   125ff:	89 e5                	mov    %esp,%ebp
   12601:	83 ec 14             	sub    $0x14,%esp
   12604:	8b 45 08             	mov    0x8(%ebp),%eax
   12607:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   1260b:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1260f:	89 c2                	mov    %eax,%edx
   12611:	ec                   	in     (%dx),%al
   12612:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   12615:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   12619:	c9                   	leave  
   1261a:	c3                   	ret    

0001261b <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   1261b:	55                   	push   %ebp
   1261c:	89 e5                	mov    %esp,%ebp
   1261e:	83 ec 08             	sub    $0x8,%esp
   12621:	8b 45 08             	mov    0x8(%ebp),%eax
   12624:	8b 55 0c             	mov    0xc(%ebp),%edx
   12627:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   1262b:	89 d0                	mov    %edx,%eax
   1262d:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   12630:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12634:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   12638:	ee                   	out    %al,(%dx)
}
   12639:	90                   	nop
   1263a:	c9                   	leave  
   1263b:	c3                   	ret    

0001263c <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   1263c:	55                   	push   %ebp
   1263d:	89 e5                	mov    %esp,%ebp
   1263f:	83 ec 10             	sub    $0x10,%esp
  idt.start31_16 = (start >> 16) & 0xffff;  // 初始化IDT地址的高16位
   12642:	8b 45 08             	mov    0x8(%ebp),%eax
   12645:	c1 e8 10             	shr    $0x10,%eax
   12648:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  idt.start15_0 = start & 0xffff;           // 初始化IDT地址的低16位
   1264c:	8b 45 08             	mov    0x8(%ebp),%eax
   1264f:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   12653:	8b 45 0c             	mov    0xc(%ebp),%eax
   12656:	83 e8 01             	sub    $0x1,%eax
  idt.limit =
   12659:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   1265d:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   12661:	90                   	nop
   12662:	c9                   	leave  
   12663:	c3                   	ret    

00012664 <read_cr2>:
static inline uint32_t read_cr2(void) {
   12664:	55                   	push   %ebp
   12665:	89 e5                	mov    %esp,%ebp
   12667:	83 ec 10             	sub    $0x10,%esp
  __asm__ __volatile__("mov %%cr2, %[v]" : [v] "=r"(cr2));
   1266a:	0f 20 d0             	mov    %cr2,%eax
   1266d:	89 45 fc             	mov    %eax,-0x4(%ebp)
  return cr2;
   12670:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12673:	c9                   	leave  
   12674:	c3                   	ret    

00012675 <read_eflags>:
/**
 * @brief  读取当前cpu的eflags寄存器
 * 
 * @return uint32_t 放回eflags的值
 */
static inline uint32_t read_eflags(void) {
   12675:	55                   	push   %ebp
   12676:	89 e5                	mov    %esp,%ebp
   12678:	83 ec 10             	sub    $0x10,%esp
  uint32_t eflags;
  //pushf 压入eflags的值到栈中
  __asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   1267b:	9c                   	pushf  
   1267c:	58                   	pop    %eax
   1267d:	89 45 fc             	mov    %eax,-0x4(%ebp)
  
  return eflags;
   12680:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12683:	c9                   	leave  
   12684:	c3                   	ret    

00012685 <write_eflags>:
/**
 * @brief  将状态state写入eflags寄存器
 * 
 * @param state 
 */
static inline void write_eflags(uint32_t state) {
   12685:	55                   	push   %ebp
   12686:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("push %%eax\n\tpopf"::"a"(state));
   12688:	8b 45 08             	mov    0x8(%ebp),%eax
   1268b:	50                   	push   %eax
   1268c:	9d                   	popf   
}
   1268d:	90                   	nop
   1268e:	5d                   	pop    %ebp
   1268f:	c3                   	ret    

00012690 <print_exception_fram>:
/**
 * @brief  打印异常栈帧信息
 * 
 * @param frame 栈帧
 */
static void print_exception_fram(const exception_frame_t *frame) {
   12690:	55                   	push   %ebp
   12691:	89 e5                	mov    %esp,%ebp
   12693:	57                   	push   %edi
   12694:	56                   	push   %esi
   12695:	53                   	push   %ebx
   12696:	83 ec 2c             	sub    $0x2c,%esp
  uint32_t ss, esp;
  if (frame->cs & 0x3) {  //cpl不为0，因为只设置了两种特权级，所以当前cpl为3，即用户程序异常
   12699:	8b 45 08             	mov    0x8(%ebp),%eax
   1269c:	8b 40 3c             	mov    0x3c(%eax),%eax
   1269f:	83 e0 03             	and    $0x3,%eax
   126a2:	85 c0                	test   %eax,%eax
   126a4:	74 14                	je     126ba <print_exception_fram+0x2a>
    ss = frame->ss3;
   126a6:	8b 45 08             	mov    0x8(%ebp),%eax
   126a9:	8b 40 48             	mov    0x48(%eax),%eax
   126ac:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    esp = frame->esp3;
   126af:	8b 45 08             	mov    0x8(%ebp),%eax
   126b2:	8b 40 44             	mov    0x44(%eax),%eax
   126b5:	89 45 e0             	mov    %eax,-0x20(%ebp)
   126b8:	eb 12                	jmp    126cc <print_exception_fram+0x3c>
  } else {  //cpl为0，即内核异常
    ss = frame->ds; //内核ss与ds相同
   126ba:	8b 45 08             	mov    0x8(%ebp),%eax
   126bd:	8b 40 0c             	mov    0xc(%eax),%eax
   126c0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    esp = frame->esp;
   126c3:	8b 45 08             	mov    0x8(%ebp),%eax
   126c6:	8b 40 1c             	mov    0x1c(%eax),%eax
   126c9:	89 45 e0             	mov    %eax,-0x20(%ebp)
  }

  log_printf("------------------------stack frame info---------------------");
   126cc:	83 ec 0c             	sub    $0xc,%esp
   126cf:	68 98 52 01 00       	push   $0x15298
   126d4:	e8 cf 26 00 00       	call   14da8 <log_printf>
   126d9:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ:\t\t%d\nerror code:\t%d", frame->num, frame->error_code);
   126dc:	8b 45 08             	mov    0x8(%ebp),%eax
   126df:	8b 50 34             	mov    0x34(%eax),%edx
   126e2:	8b 45 08             	mov    0x8(%ebp),%eax
   126e5:	8b 40 30             	mov    0x30(%eax),%eax
   126e8:	83 ec 04             	sub    $0x4,%esp
   126eb:	52                   	push   %edx
   126ec:	50                   	push   %eax
   126ed:	68 d6 52 01 00       	push   $0x152d6
   126f2:	e8 b1 26 00 00       	call   14da8 <log_printf>
   126f7:	83 c4 10             	add    $0x10,%esp
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
    //TODO:SS暂时没法获取，先用ds替代，之后再进行获取
    frame->cs, frame->ds, ss, frame->es, frame->fs, frame->gs
   126fa:	8b 45 08             	mov    0x8(%ebp),%eax
   126fd:	8b 30                	mov    (%eax),%esi
   126ff:	8b 45 08             	mov    0x8(%ebp),%eax
   12702:	8b 58 04             	mov    0x4(%eax),%ebx
   12705:	8b 45 08             	mov    0x8(%ebp),%eax
   12708:	8b 48 08             	mov    0x8(%eax),%ecx
   1270b:	8b 45 08             	mov    0x8(%ebp),%eax
   1270e:	8b 50 0c             	mov    0xc(%eax),%edx
   12711:	8b 45 08             	mov    0x8(%ebp),%eax
   12714:	8b 40 3c             	mov    0x3c(%eax),%eax
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
   12717:	83 ec 04             	sub    $0x4,%esp
   1271a:	56                   	push   %esi
   1271b:	53                   	push   %ebx
   1271c:	51                   	push   %ecx
   1271d:	ff 75 e4             	push   -0x1c(%ebp)
   12720:	52                   	push   %edx
   12721:	50                   	push   %eax
   12722:	68 f0 52 01 00       	push   $0x152f0
   12727:	e8 7c 26 00 00       	call   14da8 <log_printf>
   1272c:	83 c4 20             	add    $0x20,%esp
              "ESI:\t\t0x%x\n"
              "EDI:\t\t0x%x\n"
              "EBP:\t\t0x%x\n"
              "ESP:\t\t0x%x", 
              frame->eax, frame->ebx, frame->ecx, frame->edx,
              frame->esi, frame->edi, frame->ebp, esp 
   1272f:	8b 45 08             	mov    0x8(%ebp),%eax
   12732:	8b 40 18             	mov    0x18(%eax),%eax
   12735:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   12738:	8b 45 08             	mov    0x8(%ebp),%eax
   1273b:	8b 78 10             	mov    0x10(%eax),%edi
   1273e:	8b 45 08             	mov    0x8(%ebp),%eax
   12741:	8b 70 14             	mov    0x14(%eax),%esi
              frame->eax, frame->ebx, frame->ecx, frame->edx,
   12744:	8b 45 08             	mov    0x8(%ebp),%eax
   12747:	8b 58 24             	mov    0x24(%eax),%ebx
   1274a:	8b 45 08             	mov    0x8(%ebp),%eax
   1274d:	8b 48 28             	mov    0x28(%eax),%ecx
   12750:	8b 45 08             	mov    0x8(%ebp),%eax
   12753:	8b 50 20             	mov    0x20(%eax),%edx
   12756:	8b 45 08             	mov    0x8(%ebp),%eax
   12759:	8b 40 2c             	mov    0x2c(%eax),%eax
  log_printf( 
   1275c:	83 ec 0c             	sub    $0xc,%esp
   1275f:	ff 75 e0             	push   -0x20(%ebp)
   12762:	ff 75 d4             	push   -0x2c(%ebp)
   12765:	57                   	push   %edi
   12766:	56                   	push   %esi
   12767:	53                   	push   %ebx
   12768:	51                   	push   %ecx
   12769:	52                   	push   %edx
   1276a:	50                   	push   %eax
   1276b:	68 20 53 01 00       	push   $0x15320
   12770:	e8 33 26 00 00       	call   14da8 <log_printf>
   12775:	83 c4 30             	add    $0x30,%esp
              );

  log_printf("EIP:\t\t0x%x\nEFLAGS:\t\t0x%x", frame->eip, frame->eflags);
   12778:	8b 45 08             	mov    0x8(%ebp),%eax
   1277b:	8b 50 40             	mov    0x40(%eax),%edx
   1277e:	8b 45 08             	mov    0x8(%ebp),%eax
   12781:	8b 40 38             	mov    0x38(%eax),%eax
   12784:	83 ec 04             	sub    $0x4,%esp
   12787:	52                   	push   %edx
   12788:	50                   	push   %eax
   12789:	68 78 53 01 00       	push   $0x15378
   1278e:	e8 15 26 00 00       	call   14da8 <log_printf>
   12793:	83 c4 10             	add    $0x10,%esp
}
   12796:	90                   	nop
   12797:	8d 65 f4             	lea    -0xc(%ebp),%esp
   1279a:	5b                   	pop    %ebx
   1279b:	5e                   	pop    %esi
   1279c:	5f                   	pop    %edi
   1279d:	5d                   	pop    %ebp
   1279e:	c3                   	ret    

0001279f <do_default_handler>:
 *
 * @param message 异常信息
 * @param fram  异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
static void do_default_handler(const exception_frame_t *frame,
                               const char *message) {
   1279f:	55                   	push   %ebp
   127a0:	89 e5                	mov    %esp,%ebp
   127a2:	83 ec 08             	sub    $0x8,%esp

  log_printf("---------------------------------------------------");
   127a5:	83 ec 0c             	sub    $0xc,%esp
   127a8:	68 94 53 01 00       	push   $0x15394
   127ad:	e8 f6 25 00 00       	call   14da8 <log_printf>
   127b2:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ/Exception happend: %s", message);
   127b5:	83 ec 08             	sub    $0x8,%esp
   127b8:	ff 75 0c             	push   0xc(%ebp)
   127bb:	68 c8 53 01 00       	push   $0x153c8
   127c0:	e8 e3 25 00 00       	call   14da8 <log_printf>
   127c5:	83 c4 10             	add    $0x10,%esp
  print_exception_fram(frame);
   127c8:	83 ec 0c             	sub    $0xc,%esp
   127cb:	ff 75 08             	push   0x8(%ebp)
   127ce:	e8 bd fe ff ff       	call   12690 <print_exception_fram>
   127d3:	83 c4 10             	add    $0x10,%esp
                              
  
  for (;;) {
    hlt();
   127d6:	e8 1c fe ff ff       	call   125f7 <hlt>
   127db:	eb f9                	jmp    127d6 <do_default_handler+0x37>

000127dd <do_handler_unknown>:

/**
 * @brief   对没有针对性处理程序的异常进行处理
 * @param frame 异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
void do_handler_unknown(const exception_frame_t *frame) {
   127dd:	55                   	push   %ebp
   127de:	89 e5                	mov    %esp,%ebp
   127e0:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "unknown exception");
   127e3:	83 ec 08             	sub    $0x8,%esp
   127e6:	68 e2 53 01 00       	push   $0x153e2
   127eb:	ff 75 08             	push   0x8(%ebp)
   127ee:	e8 ac ff ff ff       	call   1279f <do_default_handler>
   127f3:	83 c4 10             	add    $0x10,%esp
}
   127f6:	90                   	nop
   127f7:	c9                   	leave  
   127f8:	c3                   	ret    

000127f9 <do_handler_divider>:
/**
 * @brief  除0异常
 *
 * @param frame 异常栈帧
 */
void do_handler_divider(const exception_frame_t *frame) {
   127f9:	55                   	push   %ebp
   127fa:	89 e5                	mov    %esp,%ebp
   127fc:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "divider exception");
   127ff:	83 ec 08             	sub    $0x8,%esp
   12802:	68 f4 53 01 00       	push   $0x153f4
   12807:	ff 75 08             	push   0x8(%ebp)
   1280a:	e8 90 ff ff ff       	call   1279f <do_default_handler>
   1280f:	83 c4 10             	add    $0x10,%esp
}
   12812:	90                   	nop
   12813:	c9                   	leave  
   12814:	c3                   	ret    

00012815 <do_handler_debug>:

void do_handler_debug(const exception_frame_t *frame) {
   12815:	55                   	push   %ebp
   12816:	89 e5                	mov    %esp,%ebp
   12818:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "debug exception");
   1281b:	83 ec 08             	sub    $0x8,%esp
   1281e:	68 06 54 01 00       	push   $0x15406
   12823:	ff 75 08             	push   0x8(%ebp)
   12826:	e8 74 ff ff ff       	call   1279f <do_default_handler>
   1282b:	83 c4 10             	add    $0x10,%esp
}
   1282e:	90                   	nop
   1282f:	c9                   	leave  
   12830:	c3                   	ret    

00012831 <do_handler_nmi>:

void do_handler_nmi(const exception_frame_t *frame) {
   12831:	55                   	push   %ebp
   12832:	89 e5                	mov    %esp,%ebp
   12834:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "nmi exception");
   12837:	83 ec 08             	sub    $0x8,%esp
   1283a:	68 16 54 01 00       	push   $0x15416
   1283f:	ff 75 08             	push   0x8(%ebp)
   12842:	e8 58 ff ff ff       	call   1279f <do_default_handler>
   12847:	83 c4 10             	add    $0x10,%esp
}
   1284a:	90                   	nop
   1284b:	c9                   	leave  
   1284c:	c3                   	ret    

0001284d <do_handler_breakpoint>:
void do_handler_breakpoint(const exception_frame_t *frame) {
   1284d:	55                   	push   %ebp
   1284e:	89 e5                	mov    %esp,%ebp
   12850:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "breakpoint exception");
   12853:	83 ec 08             	sub    $0x8,%esp
   12856:	68 24 54 01 00       	push   $0x15424
   1285b:	ff 75 08             	push   0x8(%ebp)
   1285e:	e8 3c ff ff ff       	call   1279f <do_default_handler>
   12863:	83 c4 10             	add    $0x10,%esp
}
   12866:	90                   	nop
   12867:	c9                   	leave  
   12868:	c3                   	ret    

00012869 <do_handler_overflow>:
void do_handler_overflow(const exception_frame_t *frame) {
   12869:	55                   	push   %ebp
   1286a:	89 e5                	mov    %esp,%ebp
   1286c:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "overflow exception");
   1286f:	83 ec 08             	sub    $0x8,%esp
   12872:	68 39 54 01 00       	push   $0x15439
   12877:	ff 75 08             	push   0x8(%ebp)
   1287a:	e8 20 ff ff ff       	call   1279f <do_default_handler>
   1287f:	83 c4 10             	add    $0x10,%esp
}
   12882:	90                   	nop
   12883:	c9                   	leave  
   12884:	c3                   	ret    

00012885 <do_handler_bound_range>:
void do_handler_bound_range(const exception_frame_t *frame) {
   12885:	55                   	push   %ebp
   12886:	89 e5                	mov    %esp,%ebp
   12888:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "bound_range exception");
   1288b:	83 ec 08             	sub    $0x8,%esp
   1288e:	68 4c 54 01 00       	push   $0x1544c
   12893:	ff 75 08             	push   0x8(%ebp)
   12896:	e8 04 ff ff ff       	call   1279f <do_default_handler>
   1289b:	83 c4 10             	add    $0x10,%esp
}
   1289e:	90                   	nop
   1289f:	c9                   	leave  
   128a0:	c3                   	ret    

000128a1 <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(const exception_frame_t *frame) {
   128a1:	55                   	push   %ebp
   128a2:	89 e5                	mov    %esp,%ebp
   128a4:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_opcode exception");
   128a7:	83 ec 08             	sub    $0x8,%esp
   128aa:	68 62 54 01 00       	push   $0x15462
   128af:	ff 75 08             	push   0x8(%ebp)
   128b2:	e8 e8 fe ff ff       	call   1279f <do_default_handler>
   128b7:	83 c4 10             	add    $0x10,%esp
}
   128ba:	90                   	nop
   128bb:	c9                   	leave  
   128bc:	c3                   	ret    

000128bd <do_handler_device_unavailable>:
void do_handler_device_unavailable(const exception_frame_t *frame) {
   128bd:	55                   	push   %ebp
   128be:	89 e5                	mov    %esp,%ebp
   128c0:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "device_unavailable exception");
   128c3:	83 ec 08             	sub    $0x8,%esp
   128c6:	68 7b 54 01 00       	push   $0x1547b
   128cb:	ff 75 08             	push   0x8(%ebp)
   128ce:	e8 cc fe ff ff       	call   1279f <do_default_handler>
   128d3:	83 c4 10             	add    $0x10,%esp
}
   128d6:	90                   	nop
   128d7:	c9                   	leave  
   128d8:	c3                   	ret    

000128d9 <do_handler_double_fault>:
void do_handler_double_fault(const exception_frame_t *frame) {
   128d9:	55                   	push   %ebp
   128da:	89 e5                	mov    %esp,%ebp
   128dc:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "double_fault exception");
   128df:	83 ec 08             	sub    $0x8,%esp
   128e2:	68 98 54 01 00       	push   $0x15498
   128e7:	ff 75 08             	push   0x8(%ebp)
   128ea:	e8 b0 fe ff ff       	call   1279f <do_default_handler>
   128ef:	83 c4 10             	add    $0x10,%esp
}
   128f2:	90                   	nop
   128f3:	c9                   	leave  
   128f4:	c3                   	ret    

000128f5 <do_handler_invalid_tss>:
void do_handler_invalid_tss(const exception_frame_t *frame) {
   128f5:	55                   	push   %ebp
   128f6:	89 e5                	mov    %esp,%ebp
   128f8:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_tss exception");
   128fb:	83 ec 08             	sub    $0x8,%esp
   128fe:	68 af 54 01 00       	push   $0x154af
   12903:	ff 75 08             	push   0x8(%ebp)
   12906:	e8 94 fe ff ff       	call   1279f <do_default_handler>
   1290b:	83 c4 10             	add    $0x10,%esp
}
   1290e:	90                   	nop
   1290f:	c9                   	leave  
   12910:	c3                   	ret    

00012911 <do_handler_segment_not_present>:
void do_handler_segment_not_present(const exception_frame_t *frame) {
   12911:	55                   	push   %ebp
   12912:	89 e5                	mov    %esp,%ebp
   12914:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "segment_not_present exception");
   12917:	83 ec 08             	sub    $0x8,%esp
   1291a:	68 c5 54 01 00       	push   $0x154c5
   1291f:	ff 75 08             	push   0x8(%ebp)
   12922:	e8 78 fe ff ff       	call   1279f <do_default_handler>
   12927:	83 c4 10             	add    $0x10,%esp
}
   1292a:	90                   	nop
   1292b:	c9                   	leave  
   1292c:	c3                   	ret    

0001292d <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(const exception_frame_t *frame) {
   1292d:	55                   	push   %ebp
   1292e:	89 e5                	mov    %esp,%ebp
   12930:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "stack_segment_fault exception");
   12933:	83 ec 08             	sub    $0x8,%esp
   12936:	68 e3 54 01 00       	push   $0x154e3
   1293b:	ff 75 08             	push   0x8(%ebp)
   1293e:	e8 5c fe ff ff       	call   1279f <do_default_handler>
   12943:	83 c4 10             	add    $0x10,%esp
}
   12946:	90                   	nop
   12947:	c9                   	leave  
   12948:	c3                   	ret    

00012949 <do_handler_general_protection>:
void do_handler_general_protection(const exception_frame_t *frame) {
   12949:	55                   	push   %ebp
   1294a:	89 e5                	mov    %esp,%ebp
   1294c:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   1294f:	83 ec 0c             	sub    $0xc,%esp
   12952:	68 04 55 01 00       	push   $0x15504
   12957:	e8 4c 24 00 00       	call   14da8 <log_printf>
   1295c:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: General Protection.");
   1295f:	83 ec 0c             	sub    $0xc,%esp
   12962:	68 28 55 01 00       	push   $0x15528
   12967:	e8 3c 24 00 00       	call   14da8 <log_printf>
   1296c:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_EXT) {
   1296f:	8b 45 08             	mov    0x8(%ebp),%eax
   12972:	8b 40 34             	mov    0x34(%eax),%eax
   12975:	83 e0 01             	and    $0x1,%eax
   12978:	85 c0                	test   %eax,%eax
   1297a:	74 12                	je     1298e <do_handler_general_protection+0x45>
        log_printf("the exception occurred during delivery of an "
   1297c:	83 ec 0c             	sub    $0xc,%esp
   1297f:	68 54 55 01 00       	push   $0x15554
   12984:	e8 1f 24 00 00       	call   14da8 <log_printf>
   12989:	83 c4 10             	add    $0x10,%esp
   1298c:	eb 10                	jmp    1299e <do_handler_general_protection+0x55>
                "event external to the program, such as an interrupt"
                "or an earlier exception.");
    } else {
        log_printf("the exception occurred during delivery of a"
   1298e:	83 ec 0c             	sub    $0xc,%esp
   12991:	68 d0 55 01 00       	push   $0x155d0
   12996:	e8 0d 24 00 00       	call   14da8 <log_printf>
   1299b:	83 c4 10             	add    $0x10,%esp
                    "software interrupt (INT n, INT3, or INTO).");
    }
    
    if (frame->error_code & ERR_IDT) {
   1299e:	8b 45 08             	mov    0x8(%ebp),%eax
   129a1:	8b 40 34             	mov    0x34(%eax),%eax
   129a4:	83 e0 02             	and    $0x2,%eax
   129a7:	85 c0                	test   %eax,%eax
   129a9:	74 12                	je     129bd <do_handler_general_protection+0x74>
        log_printf("the index portion of the error code refers "
   129ab:	83 ec 0c             	sub    $0xc,%esp
   129ae:	68 28 56 01 00       	push   $0x15628
   129b3:	e8 f0 23 00 00       	call   14da8 <log_printf>
   129b8:	83 c4 10             	add    $0x10,%esp
   129bb:	eb 10                	jmp    129cd <do_handler_general_protection+0x84>
                    "to a gate descriptor in the IDT");
    } else {
        log_printf("the index refers to a descriptor in the GDT");
   129bd:	83 ec 0c             	sub    $0xc,%esp
   129c0:	68 74 56 01 00       	push   $0x15674
   129c5:	e8 de 23 00 00       	call   14da8 <log_printf>
   129ca:	83 c4 10             	add    $0x10,%esp
    }
    
    log_printf("segment index: %d", frame->error_code & 0xFFF8);
   129cd:	8b 45 08             	mov    0x8(%ebp),%eax
   129d0:	8b 40 34             	mov    0x34(%eax),%eax
   129d3:	25 f8 ff 00 00       	and    $0xfff8,%eax
   129d8:	83 ec 08             	sub    $0x8,%esp
   129db:	50                   	push   %eax
   129dc:	68 a0 56 01 00       	push   $0x156a0
   129e1:	e8 c2 23 00 00       	call   14da8 <log_printf>
   129e6:	83 c4 10             	add    $0x10,%esp
    print_exception_fram(frame);
   129e9:	83 ec 0c             	sub    $0xc,%esp
   129ec:	ff 75 08             	push   0x8(%ebp)
   129ef:	e8 9c fc ff ff       	call   12690 <print_exception_fram>
   129f4:	83 c4 10             	add    $0x10,%esp
}
   129f7:	90                   	nop
   129f8:	c9                   	leave  
   129f9:	c3                   	ret    

000129fa <do_handler_page_fault>:
/**
 * @brief page_fault异常处理函数
 * 
 * @param frame 
 */
void do_handler_page_fault(const exception_frame_t *frame) {
   129fa:	55                   	push   %ebp
   129fb:	89 e5                	mov    %esp,%ebp
   129fd:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   12a00:	83 ec 0c             	sub    $0xc,%esp
   12a03:	68 04 55 01 00       	push   $0x15504
   12a08:	e8 9b 23 00 00       	call   14da8 <log_printf>
   12a0d:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: Page fault.");
   12a10:	83 ec 0c             	sub    $0xc,%esp
   12a13:	68 b4 56 01 00       	push   $0x156b4
   12a18:	e8 8b 23 00 00       	call   14da8 <log_printf>
   12a1d:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_PAGE_P) {
   12a20:	8b 45 08             	mov    0x8(%ebp),%eax
   12a23:	8b 40 34             	mov    0x34(%eax),%eax
   12a26:	83 e0 01             	and    $0x1,%eax
   12a29:	85 c0                	test   %eax,%eax
   12a2b:	74 18                	je     12a45 <do_handler_page_fault+0x4b>
        log_printf("page-level protection violation: 0x%x.", read_cr2());
   12a2d:	e8 32 fc ff ff       	call   12664 <read_cr2>
   12a32:	83 ec 08             	sub    $0x8,%esp
   12a35:	50                   	push   %eax
   12a36:	68 d8 56 01 00       	push   $0x156d8
   12a3b:	e8 68 23 00 00       	call   14da8 <log_printf>
   12a40:	83 c4 10             	add    $0x10,%esp
   12a43:	eb 16                	jmp    12a5b <do_handler_page_fault+0x61>
    } else {
        log_printf("Page doesn't present 0x%x", read_cr2());
   12a45:	e8 1a fc ff ff       	call   12664 <read_cr2>
   12a4a:	83 ec 08             	sub    $0x8,%esp
   12a4d:	50                   	push   %eax
   12a4e:	68 ff 56 01 00       	push   $0x156ff
   12a53:	e8 50 23 00 00       	call   14da8 <log_printf>
   12a58:	83 c4 10             	add    $0x10,%esp
   }
    
    if (frame->error_code & ERR_PAGE_WR) {
   12a5b:	8b 45 08             	mov    0x8(%ebp),%eax
   12a5e:	8b 40 34             	mov    0x34(%eax),%eax
   12a61:	83 e0 02             	and    $0x2,%eax
   12a64:	85 c0                	test   %eax,%eax
   12a66:	74 12                	je     12a7a <do_handler_page_fault+0x80>
        log_printf("The access causing the fault was a write.");
   12a68:	83 ec 0c             	sub    $0xc,%esp
   12a6b:	68 1c 57 01 00       	push   $0x1571c
   12a70:	e8 33 23 00 00       	call   14da8 <log_printf>
   12a75:	83 c4 10             	add    $0x10,%esp
   12a78:	eb 10                	jmp    12a8a <do_handler_page_fault+0x90>
    } else {
        log_printf("The access causing the fault was a read.");
   12a7a:	83 ec 0c             	sub    $0xc,%esp
   12a7d:	68 48 57 01 00       	push   $0x15748
   12a82:	e8 21 23 00 00       	call   14da8 <log_printf>
   12a87:	83 c4 10             	add    $0x10,%esp
    }
    
    if (frame->error_code & ERR_PAGE_US) {
   12a8a:	8b 45 08             	mov    0x8(%ebp),%eax
   12a8d:	8b 40 34             	mov    0x34(%eax),%eax
   12a90:	83 e0 04             	and    $0x4,%eax
   12a93:	85 c0                	test   %eax,%eax
   12a95:	74 12                	je     12aa9 <do_handler_page_fault+0xaf>
        log_printf("A user-mode access caused the fault.");
   12a97:	83 ec 0c             	sub    $0xc,%esp
   12a9a:	68 74 57 01 00       	push   $0x15774
   12a9f:	e8 04 23 00 00       	call   14da8 <log_printf>
   12aa4:	83 c4 10             	add    $0x10,%esp
   12aa7:	eb 10                	jmp    12ab9 <do_handler_page_fault+0xbf>
    } else {
        log_printf("A supervisor-mode access caused the fault.");
   12aa9:	83 ec 0c             	sub    $0xc,%esp
   12aac:	68 9c 57 01 00       	push   $0x1579c
   12ab1:	e8 f2 22 00 00       	call   14da8 <log_printf>
   12ab6:	83 c4 10             	add    $0x10,%esp
    }

   print_exception_fram(frame);
   12ab9:	83 ec 0c             	sub    $0xc,%esp
   12abc:	ff 75 08             	push   0x8(%ebp)
   12abf:	e8 cc fb ff ff       	call   12690 <print_exception_fram>
   12ac4:	83 c4 10             	add    $0x10,%esp
}
   12ac7:	90                   	nop
   12ac8:	c9                   	leave  
   12ac9:	c3                   	ret    

00012aca <do_handler_fpu_error>:

void do_handler_fpu_error(const exception_frame_t *frame) {
   12aca:	55                   	push   %ebp
   12acb:	89 e5                	mov    %esp,%ebp
   12acd:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "fpu_error exception");
   12ad0:	83 ec 08             	sub    $0x8,%esp
   12ad3:	68 c7 57 01 00       	push   $0x157c7
   12ad8:	ff 75 08             	push   0x8(%ebp)
   12adb:	e8 bf fc ff ff       	call   1279f <do_default_handler>
   12ae0:	83 c4 10             	add    $0x10,%esp
}
   12ae3:	90                   	nop
   12ae4:	c9                   	leave  
   12ae5:	c3                   	ret    

00012ae6 <do_handler_alignment_check>:
void do_handler_alignment_check(const exception_frame_t *frame) {
   12ae6:	55                   	push   %ebp
   12ae7:	89 e5                	mov    %esp,%ebp
   12ae9:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "alignment_check exception");
   12aec:	83 ec 08             	sub    $0x8,%esp
   12aef:	68 db 57 01 00       	push   $0x157db
   12af4:	ff 75 08             	push   0x8(%ebp)
   12af7:	e8 a3 fc ff ff       	call   1279f <do_default_handler>
   12afc:	83 c4 10             	add    $0x10,%esp
}
   12aff:	90                   	nop
   12b00:	c9                   	leave  
   12b01:	c3                   	ret    

00012b02 <do_handler_machine_check>:
void do_handler_machine_check(const exception_frame_t *frame) {
   12b02:	55                   	push   %ebp
   12b03:	89 e5                	mov    %esp,%ebp
   12b05:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "machine_check exception");
   12b08:	83 ec 08             	sub    $0x8,%esp
   12b0b:	68 f5 57 01 00       	push   $0x157f5
   12b10:	ff 75 08             	push   0x8(%ebp)
   12b13:	e8 87 fc ff ff       	call   1279f <do_default_handler>
   12b18:	83 c4 10             	add    $0x10,%esp
}
   12b1b:	90                   	nop
   12b1c:	c9                   	leave  
   12b1d:	c3                   	ret    

00012b1e <do_handler_smd_exception>:
void do_handler_smd_exception(const exception_frame_t *frame) {
   12b1e:	55                   	push   %ebp
   12b1f:	89 e5                	mov    %esp,%ebp
   12b21:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "smd_exception exception");
   12b24:	83 ec 08             	sub    $0x8,%esp
   12b27:	68 0d 58 01 00       	push   $0x1580d
   12b2c:	ff 75 08             	push   0x8(%ebp)
   12b2f:	e8 6b fc ff ff       	call   1279f <do_default_handler>
   12b34:	83 c4 10             	add    $0x10,%esp
}
   12b37:	90                   	nop
   12b38:	c9                   	leave  
   12b39:	c3                   	ret    

00012b3a <do_handler_virtual_exception>:
void do_handler_virtual_exception(const exception_frame_t *frame) {
   12b3a:	55                   	push   %ebp
   12b3b:	89 e5                	mov    %esp,%ebp
   12b3d:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "virtual_exception exception");
   12b40:	83 ec 08             	sub    $0x8,%esp
   12b43:	68 25 58 01 00       	push   $0x15825
   12b48:	ff 75 08             	push   0x8(%ebp)
   12b4b:	e8 4f fc ff ff       	call   1279f <do_default_handler>
   12b50:	83 c4 10             	add    $0x10,%esp
}
   12b53:	90                   	nop
   12b54:	c9                   	leave  
   12b55:	c3                   	ret    

00012b56 <do_handler_control_exception>:
void do_handler_control_exception(const exception_frame_t *frame) {
   12b56:	55                   	push   %ebp
   12b57:	89 e5                	mov    %esp,%ebp
   12b59:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "control_exception exception");
   12b5c:	83 ec 08             	sub    $0x8,%esp
   12b5f:	68 41 58 01 00       	push   $0x15841
   12b64:	ff 75 08             	push   0x8(%ebp)
   12b67:	e8 33 fc ff ff       	call   1279f <do_default_handler>
   12b6c:	83 c4 10             	add    $0x10,%esp
}
   12b6f:	90                   	nop
   12b70:	c9                   	leave  
   12b71:	c3                   	ret    

00012b72 <idt_install>:
 *
 * @param idt_num 异常的下标
 * @param handler 异常处理程序的偏移地址
 * @return int 成功返回 0 失败放回 -1
 */
int idt_install(const int idt_num, const idt_handler_t handler) {
   12b72:	55                   	push   %ebp
   12b73:	89 e5                	mov    %esp,%ebp
   12b75:	83 ec 08             	sub    $0x8,%esp
  // 1.判断IDT下标是否越界
  if (idt_num >= IDT_TABLE_SIZE || idt_num < 0) return -1;
   12b78:	81 7d 08 ff 00 00 00 	cmpl   $0xff,0x8(%ebp)
   12b7f:	7f 06                	jg     12b87 <idt_install+0x15>
   12b81:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12b85:	79 07                	jns    12b8e <idt_install+0x1c>
   12b87:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12b8c:	eb 25                	jmp    12bb3 <idt_install+0x41>
  // 2.在IDT表中设置下标为 idt_num 的中断门,中断门描述符的 DPL <= CPL, 
  //因为中断门是cpu自己从中断描述符表中索引，也可以用 int $中断号主动触发，
  //int $ 主动触发需要中断门描述符的DPL >= CPL
  //所以没有请求选择子即RPL用检查因为没有
  //若目标代码段的特权级更高则发生特权级转换
  gate_desc_set(idt_table + idt_num, KERNEL_SELECTOR_CS, (uint32_t)handler,
   12b8e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b91:	8b 55 08             	mov    0x8(%ebp),%edx
   12b94:	c1 e2 03             	shl    $0x3,%edx
   12b97:	81 c2 00 86 03 00    	add    $0x38600,%edx
   12b9d:	68 00 8e 00 00       	push   $0x8e00
   12ba2:	50                   	push   %eax
   12ba3:	6a 08                	push   $0x8
   12ba5:	52                   	push   %edx
   12ba6:	e8 c1 f7 ff ff       	call   1236c <gate_desc_set>
   12bab:	83 c4 10             	add    $0x10,%esp
                GATE_TYPE_INT | GATE_ATTR_P | GATE_ATTR_DPL_0);

  return 0;
   12bae:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12bb3:	c9                   	leave  
   12bb4:	c3                   	ret    

00012bb5 <init_pic>:

/**
 * @brief  初始化主从8259芯片
 * 
 */
static void init_pic(void) {
   12bb5:	55                   	push   %ebp
   12bb6:	89 e5                	mov    %esp,%ebp
  //1.对主片(8259A芯片)进行初始化, 写入时必须按照ICW1~4的顺序写入
  outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);  //ICW1:边缘触发，级联模式，需要ICW4
   12bb8:	6a 11                	push   $0x11
   12bba:	6a 20                	push   $0x20
   12bbc:	e8 5a fa ff ff       	call   1261b <outb>
   12bc1:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW2, PIC_ICW2_IDT_START);                //ICW2:起始中断向量号为0x20
   12bc4:	6a 20                	push   $0x20
   12bc6:	6a 21                	push   $0x21
   12bc8:	e8 4e fa ff ff       	call   1261b <outb>
   12bcd:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW3, PIC_ICW3_MASTER_CASCADE);           //ICW3:主片用IR2级联从片
   12bd0:	6a 04                	push   $0x4
   12bd2:	6a 21                	push   $0x21
   12bd4:	e8 42 fa ff ff       	call   1261b <outb>
   12bd9:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW4, PIC_ICW4_8086);                     //ICW4:8086模式，正常EOI
   12bdc:	6a 01                	push   $0x1
   12bde:	6a 21                	push   $0x21
   12be0:	e8 36 fa ff ff       	call   1261b <outb>
   12be5:	83 c4 08             	add    $0x8,%esp

  //2.对从片(8259A芯片)进行初始化
  outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);
   12be8:	6a 11                	push   $0x11
   12bea:	68 a0 00 00 00       	push   $0xa0
   12bef:	e8 27 fa ff ff       	call   1261b <outb>
   12bf4:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW2, PIC_ICW2_IDT_START + 8); //第一块芯片占用了8个中断，所以第二块芯片从第8个中断的下一个开始
   12bf7:	6a 28                	push   $0x28
   12bf9:	68 a1 00 00 00       	push   $0xa1
   12bfe:	e8 18 fa ff ff       	call   1261b <outb>
   12c03:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW3, PIC_ICW3_SLAVE_CASCADE);
   12c06:	6a 02                	push   $0x2
   12c08:	68 a1 00 00 00       	push   $0xa1
   12c0d:	e8 09 fa ff ff       	call   1261b <outb>
   12c12:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW4, PIC_ICW4_8086);
   12c15:	6a 01                	push   $0x1
   12c17:	68 a1 00 00 00       	push   $0xa1
   12c1c:	e8 fa f9 ff ff       	call   1261b <outb>
   12c21:	83 c4 08             	add    $0x8,%esp


  //3.初始化完两块8259芯片后，还需要为每一个中断设置处理程序
  //才可以去接收中断，所以现在要屏蔽中断，IMR位置1则屏蔽该中断请求，0则不屏蔽
  outb(PIC0_IMR, 0xfb); //屏蔽主片除 irq2(第3位) 以外的位传来的中断，(1111 1011)
   12c24:	68 fb 00 00 00       	push   $0xfb
   12c29:	6a 21                	push   $0x21
   12c2b:	e8 eb f9 ff ff       	call   1261b <outb>
   12c30:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_IMR, 0xff); //屏蔽从片的所有中断
   12c33:	68 ff 00 00 00       	push   $0xff
   12c38:	68 a1 00 00 00       	push   $0xa1
   12c3d:	e8 d9 f9 ff ff       	call   1261b <outb>
   12c42:	83 c4 08             	add    $0x8,%esp


}
   12c45:	90                   	nop
   12c46:	c9                   	leave  
   12c47:	c3                   	ret    

00012c48 <idt_init>:

/**
 * @brief  初始化中断向量表
 *
 */
void idt_init(void) {
   12c48:	55                   	push   %ebp
   12c49:	89 e5                	mov    %esp,%ebp
   12c4b:	83 ec 18             	sub    $0x18,%esp
  // 1.初始化IDT中的各个中断门(未知异常类型)
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   12c4e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12c55:	eb 17                	jmp    12c6e <idt_init+0x26>
    idt_install(i, (idt_handler_t)exception_handler_unknown);
   12c57:	83 ec 08             	sub    $0x8,%esp
   12c5a:	68 2a 00 01 00       	push   $0x1002a
   12c5f:	ff 75 f4             	push   -0xc(%ebp)
   12c62:	e8 0b ff ff ff       	call   12b72 <idt_install>
   12c67:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   12c6a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12c6e:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   12c75:	7e e0                	jle    12c57 <idt_init+0xf>
  }

  // 2.绑定异常中断向量表中对应下标的中断门的处理函数
  idt_install(IDT0_DE, (idt_handler_t)exception_handler_divider);
   12c77:	83 ec 08             	sub    $0x8,%esp
   12c7a:	68 47 00 01 00       	push   $0x10047
   12c7f:	6a 00                	push   $0x0
   12c81:	e8 ec fe ff ff       	call   12b72 <idt_install>
   12c86:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT1_DB, (idt_handler_t)exception_handler_debug);
   12c89:	83 ec 08             	sub    $0x8,%esp
   12c8c:	68 64 00 01 00       	push   $0x10064
   12c91:	6a 01                	push   $0x1
   12c93:	e8 da fe ff ff       	call   12b72 <idt_install>
   12c98:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT2_NMI, (idt_handler_t)exception_handler_nmi);
   12c9b:	83 ec 08             	sub    $0x8,%esp
   12c9e:	68 81 00 01 00       	push   $0x10081
   12ca3:	6a 02                	push   $0x2
   12ca5:	e8 c8 fe ff ff       	call   12b72 <idt_install>
   12caa:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT3_BP, (idt_handler_t)exception_handler_breakpoint);
   12cad:	83 ec 08             	sub    $0x8,%esp
   12cb0:	68 9e 00 01 00       	push   $0x1009e
   12cb5:	6a 03                	push   $0x3
   12cb7:	e8 b6 fe ff ff       	call   12b72 <idt_install>
   12cbc:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT4_OF, (idt_handler_t)exception_handler_overflow);
   12cbf:	83 ec 08             	sub    $0x8,%esp
   12cc2:	68 bb 00 01 00       	push   $0x100bb
   12cc7:	6a 04                	push   $0x4
   12cc9:	e8 a4 fe ff ff       	call   12b72 <idt_install>
   12cce:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT5_BR, (idt_handler_t)exception_handler_bound_range);
   12cd1:	83 ec 08             	sub    $0x8,%esp
   12cd4:	68 d8 00 01 00       	push   $0x100d8
   12cd9:	6a 05                	push   $0x5
   12cdb:	e8 92 fe ff ff       	call   12b72 <idt_install>
   12ce0:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT6_UD, (idt_handler_t)exception_handler_invalid_opcode);
   12ce3:	83 ec 08             	sub    $0x8,%esp
   12ce6:	68 f5 00 01 00       	push   $0x100f5
   12ceb:	6a 06                	push   $0x6
   12ced:	e8 80 fe ff ff       	call   12b72 <idt_install>
   12cf2:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT7_NM, (idt_handler_t)exception_handler_device_unavailable);
   12cf5:	83 ec 08             	sub    $0x8,%esp
   12cf8:	68 12 01 01 00       	push   $0x10112
   12cfd:	6a 07                	push   $0x7
   12cff:	e8 6e fe ff ff       	call   12b72 <idt_install>
   12d04:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT8_DF, (idt_handler_t)exception_handler_double_fault);
   12d07:	83 ec 08             	sub    $0x8,%esp
   12d0a:	68 2f 01 01 00       	push   $0x1012f
   12d0f:	6a 08                	push   $0x8
   12d11:	e8 5c fe ff ff       	call   12b72 <idt_install>
   12d16:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT10_TS, (idt_handler_t)exception_handler_invalid_tss);
   12d19:	83 ec 08             	sub    $0x8,%esp
   12d1c:	68 4a 01 01 00       	push   $0x1014a
   12d21:	6a 0a                	push   $0xa
   12d23:	e8 4a fe ff ff       	call   12b72 <idt_install>
   12d28:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT11_NP, (idt_handler_t)exception_handler_segment_not_present);
   12d2b:	83 ec 08             	sub    $0x8,%esp
   12d2e:	68 65 01 01 00       	push   $0x10165
   12d33:	6a 0b                	push   $0xb
   12d35:	e8 38 fe ff ff       	call   12b72 <idt_install>
   12d3a:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT12_SS, (idt_handler_t)exception_handler_stack_segment_fault);
   12d3d:	83 ec 08             	sub    $0x8,%esp
   12d40:	68 80 01 01 00       	push   $0x10180
   12d45:	6a 0c                	push   $0xc
   12d47:	e8 26 fe ff ff       	call   12b72 <idt_install>
   12d4c:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT13_GP, (idt_handler_t)exception_handler_general_protection);
   12d4f:	83 ec 08             	sub    $0x8,%esp
   12d52:	68 9b 01 01 00       	push   $0x1019b
   12d57:	6a 0d                	push   $0xd
   12d59:	e8 14 fe ff ff       	call   12b72 <idt_install>
   12d5e:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT14_PF, (idt_handler_t)exception_handler_page_fault);
   12d61:	83 ec 08             	sub    $0x8,%esp
   12d64:	68 b6 01 01 00       	push   $0x101b6
   12d69:	6a 0e                	push   $0xe
   12d6b:	e8 02 fe ff ff       	call   12b72 <idt_install>
   12d70:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT16_MF, (idt_handler_t)exception_handler_fpu_error);
   12d73:	83 ec 08             	sub    $0x8,%esp
   12d76:	68 d1 01 01 00       	push   $0x101d1
   12d7b:	6a 10                	push   $0x10
   12d7d:	e8 f0 fd ff ff       	call   12b72 <idt_install>
   12d82:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT17_AC, (idt_handler_t)exception_handler_alignment_check);
   12d85:	83 ec 08             	sub    $0x8,%esp
   12d88:	68 ee 01 01 00       	push   $0x101ee
   12d8d:	6a 11                	push   $0x11
   12d8f:	e8 de fd ff ff       	call   12b72 <idt_install>
   12d94:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT18_MC, (idt_handler_t)exception_handler_machine_check);
   12d97:	83 ec 08             	sub    $0x8,%esp
   12d9a:	68 09 02 01 00       	push   $0x10209
   12d9f:	6a 12                	push   $0x12
   12da1:	e8 cc fd ff ff       	call   12b72 <idt_install>
   12da6:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT19_XM, (idt_handler_t)exception_handler_smd_exception);
   12da9:	83 ec 08             	sub    $0x8,%esp
   12dac:	68 26 02 01 00       	push   $0x10226
   12db1:	6a 13                	push   $0x13
   12db3:	e8 ba fd ff ff       	call   12b72 <idt_install>
   12db8:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT20_VE, (idt_handler_t)exception_handler_virtual_exception);
   12dbb:	83 ec 08             	sub    $0x8,%esp
   12dbe:	68 43 02 01 00       	push   $0x10243
   12dc3:	6a 14                	push   $0x14
   12dc5:	e8 a8 fd ff ff       	call   12b72 <idt_install>
   12dca:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT21_CP, (idt_handler_t)exception_handler_control_exception);
   12dcd:	83 ec 08             	sub    $0x8,%esp
   12dd0:	68 60 02 01 00       	push   $0x10260
   12dd5:	6a 15                	push   $0x15
   12dd7:	e8 96 fd ff ff       	call   12b72 <idt_install>
   12ddc:	83 c4 10             	add    $0x10,%esp

  //3.加载IDT
  lidt((uint32_t)idt_table, sizeof(idt_table));
   12ddf:	b8 00 86 03 00       	mov    $0x38600,%eax
   12de4:	83 ec 08             	sub    $0x8,%esp
   12de7:	68 00 08 00 00       	push   $0x800
   12dec:	50                   	push   %eax
   12ded:	e8 4a f8 ff ff       	call   1263c <lidt>
   12df2:	83 c4 10             	add    $0x10,%esp

  //4.初始化8259设备中断芯片
  init_pic();
   12df5:	e8 bb fd ff ff       	call   12bb5 <init_pic>
}
   12dfa:	90                   	nop
   12dfb:	c9                   	leave  
   12dfc:	c3                   	ret    

00012dfd <idt_enable>:
/**
 * @brief  开启外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号,即IDT中的下标
 */
void idt_enable(uint8_t irq_num) {
   12dfd:	55                   	push   %ebp
   12dfe:	89 e5                	mov    %esp,%ebp
   12e00:	53                   	push   %ebx
   12e01:	83 ec 14             	sub    $0x14,%esp
   12e04:	8b 45 08             	mov    0x8(%ebp),%eax
   12e07:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   12e0a:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   12e0e:	76 7f                	jbe    12e8f <idt_enable+0x92>
   12e10:	80 7d e8 2e          	cmpb   $0x2e,-0x18(%ebp)
   12e14:	77 79                	ja     12e8f <idt_enable+0x92>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   12e16:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置0，即不屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   12e1a:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   12e1e:	77 33                	ja     12e53 <idt_enable+0x56>
    uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   12e20:	6a 21                	push   $0x21
   12e22:	e8 d7 f7 ff ff       	call   125fe <inb>
   12e27:	83 c4 04             	add    $0x4,%esp
   12e2a:	89 c3                	mov    %eax,%ebx
   12e2c:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   12e30:	ba 01 00 00 00       	mov    $0x1,%edx
   12e35:	89 c1                	mov    %eax,%ecx
   12e37:	d3 e2                	shl    %cl,%edx
   12e39:	89 d0                	mov    %edx,%eax
   12e3b:	f7 d0                	not    %eax
   12e3d:	21 d8                	and    %ebx,%eax
   12e3f:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   12e42:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   12e46:	50                   	push   %eax
   12e47:	6a 21                	push   $0x21
   12e49:	e8 cd f7 ff ff       	call   1261b <outb>
   12e4e:	83 c4 08             	add    $0x8,%esp
   12e51:	eb 3d                	jmp    12e90 <idt_enable+0x93>
  } else {
    uint8_t mask = inb(PIC1_IMR) & ~(1 << (irq_num - 8));
   12e53:	68 a1 00 00 00       	push   $0xa1
   12e58:	e8 a1 f7 ff ff       	call   125fe <inb>
   12e5d:	83 c4 04             	add    $0x4,%esp
   12e60:	89 c3                	mov    %eax,%ebx
   12e62:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   12e66:	83 e8 08             	sub    $0x8,%eax
   12e69:	ba 01 00 00 00       	mov    $0x1,%edx
   12e6e:	89 c1                	mov    %eax,%ecx
   12e70:	d3 e2                	shl    %cl,%edx
   12e72:	89 d0                	mov    %edx,%eax
   12e74:	f7 d0                	not    %eax
   12e76:	21 d8                	and    %ebx,%eax
   12e78:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   12e7b:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   12e7f:	50                   	push   %eax
   12e80:	68 a1 00 00 00       	push   $0xa1
   12e85:	e8 91 f7 ff ff       	call   1261b <outb>
   12e8a:	83 c4 08             	add    $0x8,%esp
   12e8d:	eb 01                	jmp    12e90 <idt_enable+0x93>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   12e8f:	90                   	nop
  }
  
}
   12e90:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   12e93:	c9                   	leave  
   12e94:	c3                   	ret    

00012e95 <idt_disable>:
/**
 * @brief  关闭外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号，即IDT中的下标
 */
void idt_disable(uint8_t irq_num) {
   12e95:	55                   	push   %ebp
   12e96:	89 e5                	mov    %esp,%ebp
   12e98:	53                   	push   %ebx
   12e99:	83 ec 14             	sub    $0x14,%esp
   12e9c:	8b 45 08             	mov    0x8(%ebp),%eax
   12e9f:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   12ea2:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   12ea6:	76 7b                	jbe    12f23 <idt_disable+0x8e>
   12ea8:	80 7d e8 2f          	cmpb   $0x2f,-0x18(%ebp)
   12eac:	77 75                	ja     12f23 <idt_disable+0x8e>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   12eae:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置1，即屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   12eb2:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   12eb6:	77 31                	ja     12ee9 <idt_disable+0x54>
    uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   12eb8:	6a 21                	push   $0x21
   12eba:	e8 3f f7 ff ff       	call   125fe <inb>
   12ebf:	83 c4 04             	add    $0x4,%esp
   12ec2:	89 c3                	mov    %eax,%ebx
   12ec4:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   12ec8:	ba 01 00 00 00       	mov    $0x1,%edx
   12ecd:	89 c1                	mov    %eax,%ecx
   12ecf:	d3 e2                	shl    %cl,%edx
   12ed1:	89 d0                	mov    %edx,%eax
   12ed3:	09 d8                	or     %ebx,%eax
   12ed5:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   12ed8:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   12edc:	50                   	push   %eax
   12edd:	6a 21                	push   $0x21
   12edf:	e8 37 f7 ff ff       	call   1261b <outb>
   12ee4:	83 c4 08             	add    $0x8,%esp
   12ee7:	eb 3b                	jmp    12f24 <idt_disable+0x8f>
  } else {
    uint8_t mask = inb(PIC1_IMR) | (1 << (irq_num - 8));
   12ee9:	68 a1 00 00 00       	push   $0xa1
   12eee:	e8 0b f7 ff ff       	call   125fe <inb>
   12ef3:	83 c4 04             	add    $0x4,%esp
   12ef6:	89 c3                	mov    %eax,%ebx
   12ef8:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   12efc:	83 e8 08             	sub    $0x8,%eax
   12eff:	ba 01 00 00 00       	mov    $0x1,%edx
   12f04:	89 c1                	mov    %eax,%ecx
   12f06:	d3 e2                	shl    %cl,%edx
   12f08:	89 d0                	mov    %edx,%eax
   12f0a:	09 d8                	or     %ebx,%eax
   12f0c:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   12f0f:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   12f13:	50                   	push   %eax
   12f14:	68 a1 00 00 00       	push   $0xa1
   12f19:	e8 fd f6 ff ff       	call   1261b <outb>
   12f1e:	83 c4 08             	add    $0x8,%esp
   12f21:	eb 01                	jmp    12f24 <idt_disable+0x8f>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   12f23:	90                   	nop
  }
  
}
   12f24:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   12f27:	c9                   	leave  
   12f28:	c3                   	ret    

00012f29 <idt_disable_global>:

/**
 * @brief  关闭全局中断
 * 
 */
void idt_disable_global(void) {
   12f29:	55                   	push   %ebp
   12f2a:	89 e5                	mov    %esp,%ebp
  cli();
   12f2c:	e8 b8 f6 ff ff       	call   125e9 <cli>
}
   12f31:	90                   	nop
   12f32:	5d                   	pop    %ebp
   12f33:	c3                   	ret    

00012f34 <idt_enable_global>:

/**
 * @brief  开启全局中断
 * 
 */
void idt_enable_global(void) {
   12f34:	55                   	push   %ebp
   12f35:	89 e5                	mov    %esp,%ebp
  sti();
   12f37:	e8 b4 f6 ff ff       	call   125f0 <sti>
}
   12f3c:	90                   	nop
   12f3d:	5d                   	pop    %ebp
   12f3e:	c3                   	ret    

00012f3f <pic_send_eoi>:
 * @brief  将OCW2寄存器的7~5位置为 001，用普通的EOI结束方式
 *         向8259A发送EOI命令，8259A会将ISR中优先级最高的位置0
 *
 * @param irq_num 中断向量号，即IDT下标
 */
void pic_send_eoi(int irq_num) {
   12f3f:	55                   	push   %ebp
   12f40:	89 e5                	mov    %esp,%ebp
  //1.获取该中断对应的IRQ标号
  irq_num -= PIC_ICW2_IDT_START;
   12f42:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
  //2.判断标号是否越界,若不越界则交给对应芯片处理
  if (irq_num < 0 || irq_num > 15) return;
   12f46:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12f4a:	78 29                	js     12f75 <pic_send_eoi+0x36>
   12f4c:	83 7d 08 0f          	cmpl   $0xf,0x8(%ebp)
   12f50:	7f 23                	jg     12f75 <pic_send_eoi+0x36>

  //3.若中断来自主片则只需向主片发送EOI
  outb(PIC0_OCW2, PIC_OCW2_EOI);
   12f52:	6a 20                	push   $0x20
   12f54:	6a 20                	push   $0x20
   12f56:	e8 c0 f6 ff ff       	call   1261b <outb>
   12f5b:	83 c4 08             	add    $0x8,%esp

  //4.若中断来自从片则还需向从片发送EOI
  if (irq_num >= 8) { 
   12f5e:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   12f62:	7e 12                	jle    12f76 <pic_send_eoi+0x37>
    outb(PIC1_OCW2, PIC_OCW2_EOI);
   12f64:	6a 20                	push   $0x20
   12f66:	68 a0 00 00 00       	push   $0xa0
   12f6b:	e8 ab f6 ff ff       	call   1261b <outb>
   12f70:	83 c4 08             	add    $0x8,%esp
   12f73:	eb 01                	jmp    12f76 <pic_send_eoi+0x37>
  if (irq_num < 0 || irq_num > 15) return;
   12f75:	90                   	nop
  }

}
   12f76:	c9                   	leave  
   12f77:	c3                   	ret    

00012f78 <idt_enter_protection>:

/**
 * @brief  
 * 
 */
idt_state_t idt_enter_protection(void) {
   12f78:	55                   	push   %ebp
   12f79:	89 e5                	mov    %esp,%ebp
   12f7b:	83 ec 10             	sub    $0x10,%esp
  idt_state_t state = read_eflags();
   12f7e:	e8 f2 f6 ff ff       	call   12675 <read_eflags>
   12f83:	89 45 fc             	mov    %eax,-0x4(%ebp)
  idt_disable_global();
   12f86:	e8 9e ff ff ff       	call   12f29 <idt_disable_global>
  return state;;
   12f8b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12f8e:	c9                   	leave  
   12f8f:	c3                   	ret    

00012f90 <idt_leave_protection>:
/**
 * @brief  
 * 
 * @return idt_state_t 
 */
idt_state_t idt_leave_protection(idt_state_t state){
   12f90:	55                   	push   %ebp
   12f91:	89 e5                	mov    %esp,%ebp
  write_eflags(state);
   12f93:	ff 75 08             	push   0x8(%ebp)
   12f96:	e8 ea f6 ff ff       	call   12685 <write_eflags>
   12f9b:	83 c4 04             	add    $0x4,%esp
}
   12f9e:	90                   	nop
   12f9f:	c9                   	leave  
   12fa0:	c3                   	ret    

00012fa1 <sys_print_msg>:
 * @brief 临时的格式化输出系统调用
 * 
 * @param fmt 
 * @param arg 
 */
void sys_print_msg(const char *fmt, int arg) {
   12fa1:	55                   	push   %ebp
   12fa2:	89 e5                	mov    %esp,%ebp
   12fa4:	83 ec 08             	sub    $0x8,%esp
    log_printf(fmt, arg);
   12fa7:	83 ec 08             	sub    $0x8,%esp
   12faa:	ff 75 0c             	push   0xc(%ebp)
   12fad:	ff 75 08             	push   0x8(%ebp)
   12fb0:	e8 f3 1d 00 00       	call   14da8 <log_printf>
   12fb5:	83 c4 10             	add    $0x10,%esp
}
   12fb8:	90                   	nop
   12fb9:	c9                   	leave  
   12fba:	c3                   	ret    

00012fbb <do_handler_syscall>:
/**
 * @brief 门调用处理函数，通过定义的系统调用id，将该调用分发到正确的系统调用上
 * 
 * @param frame 
 */
void do_handler_syscall(syscall_frame_t* frame) {
   12fbb:	55                   	push   %ebp
   12fbc:	89 e5                	mov    %esp,%ebp
   12fbe:	53                   	push   %ebx
   12fbf:	83 ec 14             	sub    $0x14,%esp
    if (frame->function_id < sizeof(sys_table) / sizeof(sys_table[0])) {    //当前系统调用存在
   12fc2:	8b 45 08             	mov    0x8(%ebp),%eax
   12fc5:	8b 40 3c             	mov    0x3c(%eax),%eax
   12fc8:	83 f8 39             	cmp    $0x39,%eax
   12fcb:	77 48                	ja     13015 <do_handler_syscall+0x5a>
        sys_handler_t handler = sys_table[frame->function_id];
   12fcd:	8b 45 08             	mov    0x8(%ebp),%eax
   12fd0:	8b 40 3c             	mov    0x3c(%eax),%eax
   12fd3:	8b 04 85 60 58 01 00 	mov    0x15860(,%eax,4),%eax
   12fda:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (handler) {
   12fdd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12fe1:	74 32                	je     13015 <do_handler_syscall+0x5a>
            //直接将4个参数全部传入即可，
            //因为是按从右到左的顺序将参数压栈，所以原始的参数只要是从arg0开始赋值的即可，
            //多余的参数在高地址处，不影响handler对应的真正的系统调用
            int ret = handler(frame->arg0, frame->arg1, frame->arg2, frame->arg3);
   12fe3:	8b 45 08             	mov    0x8(%ebp),%eax
   12fe6:	8b 58 4c             	mov    0x4c(%eax),%ebx
   12fe9:	8b 45 08             	mov    0x8(%ebp),%eax
   12fec:	8b 48 48             	mov    0x48(%eax),%ecx
   12fef:	8b 45 08             	mov    0x8(%ebp),%eax
   12ff2:	8b 50 44             	mov    0x44(%eax),%edx
   12ff5:	8b 45 08             	mov    0x8(%ebp),%eax
   12ff8:	8b 40 40             	mov    0x40(%eax),%eax
   12ffb:	53                   	push   %ebx
   12ffc:	51                   	push   %ecx
   12ffd:	52                   	push   %edx
   12ffe:	50                   	push   %eax
   12fff:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13002:	ff d0                	call   *%eax
   13004:	83 c4 10             	add    $0x10,%esp
   13007:	89 45 f0             	mov    %eax,-0x10(%ebp)
            //正常函数返回后会将返回值先存放到eax寄存器中，再eax中的值放入对应接收返回值的内存中
            //此处用eax先接收ret，在调用门返回后再从eax中取处该值
            frame->eax = ret;
   1300a:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1300d:	8b 45 08             	mov    0x8(%ebp),%eax
   13010:	89 50 30             	mov    %edx,0x30(%eax)
            return;
   13013:	eb 30                	jmp    13045 <do_handler_syscall+0x8a>
        }
    }
    
    //打印系统调用失败的异常日志
    task_t *task = task_current();
   13015:	e8 83 e8 ff ff       	call   1189d <task_current>
   1301a:	89 45 ec             	mov    %eax,-0x14(%ebp)
    log_printf("task: %s, Unknown syscall_id: %d", task->name, frame->function_id);
   1301d:	8b 45 08             	mov    0x8(%ebp),%eax
   13020:	8b 40 3c             	mov    0x3c(%eax),%eax
   13023:	8b 55 ec             	mov    -0x14(%ebp),%edx
   13026:	83 c2 20             	add    $0x20,%edx
   13029:	83 ec 04             	sub    $0x4,%esp
   1302c:	50                   	push   %eax
   1302d:	52                   	push   %edx
   1302e:	68 48 59 01 00       	push   $0x15948
   13033:	e8 70 1d 00 00       	call   14da8 <log_printf>
   13038:	83 c4 10             	add    $0x10,%esp
    frame->eax = -1;
   1303b:	8b 45 08             	mov    0x8(%ebp),%eax
   1303e:	c7 40 30 ff ff ff ff 	movl   $0xffffffff,0x30(%eax)

   13045:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   13048:	c9                   	leave  
   13049:	c3                   	ret    

0001304a <inb>:
static inline uint8_t inb(uint16_t port) {
   1304a:	55                   	push   %ebp
   1304b:	89 e5                	mov    %esp,%ebp
   1304d:	83 ec 14             	sub    $0x14,%esp
   13050:	8b 45 08             	mov    0x8(%ebp),%eax
   13053:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   13057:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1305b:	89 c2                	mov    %eax,%edx
   1305d:	ec                   	in     (%dx),%al
   1305e:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   13061:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   13065:	c9                   	leave  
   13066:	c3                   	ret    

00013067 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   13067:	55                   	push   %ebp
   13068:	89 e5                	mov    %esp,%ebp
   1306a:	83 ec 08             	sub    $0x8,%esp
   1306d:	8b 45 08             	mov    0x8(%ebp),%eax
   13070:	8b 55 0c             	mov    0xc(%ebp),%edx
   13073:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   13077:	89 d0                	mov    %edx,%eax
   13079:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   1307c:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   13080:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   13084:	ee                   	out    %al,(%dx)
}
   13085:	90                   	nop
   13086:	c9                   	leave  
   13087:	c3                   	ret    

00013088 <read_cursor_pos>:
/**
 * @brief 获取光标位置
 *
 * @return int
 */
static inline int read_cursor_pos(void) {
   13088:	55                   	push   %ebp
   13089:	89 e5                	mov    %esp,%ebp
   1308b:	83 ec 10             	sub    $0x10,%esp
  int pos;
  // 光标位置由两个字节组成
  outb(0x3d4, 0xf);  // 访问低8位
   1308e:	6a 0f                	push   $0xf
   13090:	68 d4 03 00 00       	push   $0x3d4
   13095:	e8 cd ff ff ff       	call   13067 <outb>
   1309a:	83 c4 08             	add    $0x8,%esp
  pos = inb(0x3d5);
   1309d:	68 d5 03 00 00       	push   $0x3d5
   130a2:	e8 a3 ff ff ff       	call   1304a <inb>
   130a7:	83 c4 04             	add    $0x4,%esp
   130aa:	0f b6 c0             	movzbl %al,%eax
   130ad:	89 45 fc             	mov    %eax,-0x4(%ebp)

  outb(0x3d4, 0xe);  // 访问高8位
   130b0:	6a 0e                	push   $0xe
   130b2:	68 d4 03 00 00       	push   $0x3d4
   130b7:	e8 ab ff ff ff       	call   13067 <outb>
   130bc:	83 c4 08             	add    $0x8,%esp
  pos |= inb(0x3d5) << 8;
   130bf:	68 d5 03 00 00       	push   $0x3d5
   130c4:	e8 81 ff ff ff       	call   1304a <inb>
   130c9:	83 c4 04             	add    $0x4,%esp
   130cc:	0f b6 c0             	movzbl %al,%eax
   130cf:	c1 e0 08             	shl    $0x8,%eax
   130d2:	09 45 fc             	or     %eax,-0x4(%ebp)

  return pos;
   130d5:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   130d8:	c9                   	leave  
   130d9:	c3                   	ret    

000130da <update_cursor_pos>:
 * @brief 更新光标的位置
 *
 * @param console
 * @return int
 */
static inline int update_cursor_pos(console_t *console) {
   130da:	55                   	push   %ebp
   130db:	89 e5                	mov    %esp,%ebp
   130dd:	83 ec 10             	sub    $0x10,%esp
  uint16_t pos =
      console->cursor_row * console->display_cols + console->cursor_col;
   130e0:	8b 45 08             	mov    0x8(%ebp),%eax
   130e3:	8b 40 0c             	mov    0xc(%eax),%eax
   130e6:	89 c2                	mov    %eax,%edx
   130e8:	8b 45 08             	mov    0x8(%ebp),%eax
   130eb:	8b 40 08             	mov    0x8(%eax),%eax
   130ee:	0f af d0             	imul   %eax,%edx
   130f1:	8b 45 08             	mov    0x8(%ebp),%eax
   130f4:	8b 40 10             	mov    0x10(%eax),%eax
  uint16_t pos =
   130f7:	01 d0                	add    %edx,%eax
   130f9:	66 89 45 fe          	mov    %ax,-0x2(%ebp)

  // 光标位置由两个字节组成
  outb(0x3d4, 0xf);  // 访问低8位
   130fd:	6a 0f                	push   $0xf
   130ff:	68 d4 03 00 00       	push   $0x3d4
   13104:	e8 5e ff ff ff       	call   13067 <outb>
   13109:	83 c4 08             	add    $0x8,%esp
  outb(0x3d5, (uint8_t)(pos & 0xff));
   1310c:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
   13110:	0f b6 c0             	movzbl %al,%eax
   13113:	50                   	push   %eax
   13114:	68 d5 03 00 00       	push   $0x3d5
   13119:	e8 49 ff ff ff       	call   13067 <outb>
   1311e:	83 c4 08             	add    $0x8,%esp

  outb(0x3d4, 0xe);  // 访问高8位
   13121:	6a 0e                	push   $0xe
   13123:	68 d4 03 00 00       	push   $0x3d4
   13128:	e8 3a ff ff ff       	call   13067 <outb>
   1312d:	83 c4 08             	add    $0x8,%esp
  outb(0x3d5, (uint8_t)((pos >> 8) & 0xff));
   13130:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
   13134:	66 c1 e8 08          	shr    $0x8,%ax
   13138:	0f b6 c0             	movzbl %al,%eax
   1313b:	50                   	push   %eax
   1313c:	68 d5 03 00 00       	push   $0x3d5
   13141:	e8 21 ff ff ff       	call   13067 <outb>
   13146:	83 c4 08             	add    $0x8,%esp

  return pos;
   13149:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
}
   1314d:	c9                   	leave  
   1314e:	c3                   	ret    

0001314f <erase_rows>:
 *
 * @param console
 * @param start
 * @param end
 */
static inline void erase_rows(console_t *console, int start, int end) {
   1314f:	55                   	push   %ebp
   13150:	89 e5                	mov    %esp,%ebp
   13152:	83 ec 10             	sub    $0x10,%esp
  disp_char_t *disp_start = console->disp_base + console->display_cols * start;
   13155:	8b 45 08             	mov    0x8(%ebp),%eax
   13158:	8b 08                	mov    (%eax),%ecx
   1315a:	8b 45 08             	mov    0x8(%ebp),%eax
   1315d:	8b 50 08             	mov    0x8(%eax),%edx
   13160:	8b 45 0c             	mov    0xc(%ebp),%eax
   13163:	0f af c2             	imul   %edx,%eax
   13166:	01 c0                	add    %eax,%eax
   13168:	01 c8                	add    %ecx,%eax
   1316a:	89 45 fc             	mov    %eax,-0x4(%ebp)
  disp_char_t *disp_end =
      console->disp_base + console->display_cols * (end + 1);
   1316d:	8b 45 08             	mov    0x8(%ebp),%eax
   13170:	8b 08                	mov    (%eax),%ecx
   13172:	8b 45 08             	mov    0x8(%ebp),%eax
   13175:	8b 40 08             	mov    0x8(%eax),%eax
   13178:	8b 55 10             	mov    0x10(%ebp),%edx
   1317b:	83 c2 01             	add    $0x1,%edx
   1317e:	0f af c2             	imul   %edx,%eax
   13181:	01 c0                	add    %eax,%eax
  disp_char_t *disp_end =
   13183:	01 c8                	add    %ecx,%eax
   13185:	89 45 f8             	mov    %eax,-0x8(%ebp)

  while (disp_start < disp_end) {
   13188:	eb 4d                	jmp    131d7 <erase_rows+0x88>
    disp_start->c = ' ';
   1318a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1318d:	c6 00 20             	movb   $0x20,(%eax)
    disp_start->foreground = console->foreground;
   13190:	8b 45 08             	mov    0x8(%ebp),%eax
   13193:	8b 40 14             	mov    0x14(%eax),%eax
   13196:	c1 e0 04             	shl    $0x4,%eax
   13199:	c0 f8 04             	sar    $0x4,%al
   1319c:	8b 55 fc             	mov    -0x4(%ebp),%edx
   1319f:	83 e0 0f             	and    $0xf,%eax
   131a2:	89 c1                	mov    %eax,%ecx
   131a4:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   131a8:	83 e0 f0             	and    $0xfffffff0,%eax
   131ab:	09 c8                	or     %ecx,%eax
   131ad:	88 42 01             	mov    %al,0x1(%edx)
    disp_start->background = console->background;
   131b0:	8b 45 08             	mov    0x8(%ebp),%eax
   131b3:	8b 40 18             	mov    0x18(%eax),%eax
   131b6:	c1 e0 05             	shl    $0x5,%eax
   131b9:	c0 f8 05             	sar    $0x5,%al
   131bc:	8b 55 fc             	mov    -0x4(%ebp),%edx
   131bf:	83 e0 07             	and    $0x7,%eax
   131c2:	c1 e0 04             	shl    $0x4,%eax
   131c5:	89 c1                	mov    %eax,%ecx
   131c7:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   131cb:	83 e0 8f             	and    $0xffffff8f,%eax
   131ce:	09 c8                	or     %ecx,%eax
   131d0:	88 42 01             	mov    %al,0x1(%edx)

    disp_start++;
   131d3:	83 45 fc 02          	addl   $0x2,-0x4(%ebp)
  while (disp_start < disp_end) {
   131d7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   131da:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   131dd:	72 ab                	jb     1318a <erase_rows+0x3b>
  }
}
   131df:	90                   	nop
   131e0:	90                   	nop
   131e1:	c9                   	leave  
   131e2:	c3                   	ret    

000131e3 <scroll_up>:
 * @brief 控制台console上滚lines行
 *
 * @param console
 * @param lines
 */
static inline void scroll_up(console_t *console, int lines) {
   131e3:	55                   	push   %ebp
   131e4:	89 e5                	mov    %esp,%ebp
   131e6:	83 ec 18             	sub    $0x18,%esp
  // 获取拷贝的目标位置
  disp_char_t *dest = console->disp_base;
   131e9:	8b 45 08             	mov    0x8(%ebp),%eax
   131ec:	8b 00                	mov    (%eax),%eax
   131ee:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 获取拷贝的源位置
  disp_char_t *src = console->disp_base + console->display_cols * lines;
   131f1:	8b 45 08             	mov    0x8(%ebp),%eax
   131f4:	8b 08                	mov    (%eax),%ecx
   131f6:	8b 45 08             	mov    0x8(%ebp),%eax
   131f9:	8b 50 08             	mov    0x8(%eax),%edx
   131fc:	8b 45 0c             	mov    0xc(%ebp),%eax
   131ff:	0f af c2             	imul   %edx,%eax
   13202:	01 c0                	add    %eax,%eax
   13204:	01 c8                	add    %ecx,%eax
   13206:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 获取拷贝的字节量
  uint32_t size = (console->display_rows - lines) * console->display_cols *
   13209:	8b 45 08             	mov    0x8(%ebp),%eax
   1320c:	8b 40 04             	mov    0x4(%eax),%eax
   1320f:	8b 4d 0c             	mov    0xc(%ebp),%ecx
   13212:	29 c8                	sub    %ecx,%eax
   13214:	89 c2                	mov    %eax,%edx
   13216:	8b 45 08             	mov    0x8(%ebp),%eax
   13219:	8b 40 08             	mov    0x8(%eax),%eax
   1321c:	0f af c2             	imul   %edx,%eax
   1321f:	01 c0                	add    %eax,%eax
   13221:	89 45 ec             	mov    %eax,-0x14(%ebp)
                  sizeof(disp_char_t);

  // 拷贝
  kernel_memcpy(dest, src, size);
   13224:	8b 45 ec             	mov    -0x14(%ebp),%eax
   13227:	83 ec 04             	sub    $0x4,%esp
   1322a:	50                   	push   %eax
   1322b:	ff 75 f0             	push   -0x10(%ebp)
   1322e:	ff 75 f4             	push   -0xc(%ebp)
   13231:	e8 3c 13 00 00       	call   14572 <kernel_memcpy>
   13236:	83 c4 10             	add    $0x10,%esp

  // 清除底部重复行
  erase_rows(console, console->display_rows - lines, console->display_rows - 1);
   13239:	8b 45 08             	mov    0x8(%ebp),%eax
   1323c:	8b 40 04             	mov    0x4(%eax),%eax
   1323f:	83 e8 01             	sub    $0x1,%eax
   13242:	89 c2                	mov    %eax,%edx
   13244:	8b 45 08             	mov    0x8(%ebp),%eax
   13247:	8b 40 04             	mov    0x4(%eax),%eax
   1324a:	8b 4d 0c             	mov    0xc(%ebp),%ecx
   1324d:	29 c8                	sub    %ecx,%eax
   1324f:	83 ec 04             	sub    $0x4,%esp
   13252:	52                   	push   %edx
   13253:	50                   	push   %eax
   13254:	ff 75 08             	push   0x8(%ebp)
   13257:	e8 f3 fe ff ff       	call   1314f <erase_rows>
   1325c:	83 c4 10             	add    $0x10,%esp

  // 光标回退到之前的最后一行的下一行
  console->cursor_row -= lines;
   1325f:	8b 45 08             	mov    0x8(%ebp),%eax
   13262:	8b 40 0c             	mov    0xc(%eax),%eax
   13265:	8b 4d 0c             	mov    0xc(%ebp),%ecx
   13268:	29 c8                	sub    %ecx,%eax
   1326a:	89 c2                	mov    %eax,%edx
   1326c:	8b 45 08             	mov    0x8(%ebp),%eax
   1326f:	89 50 0c             	mov    %edx,0xc(%eax)
}
   13272:	90                   	nop
   13273:	c9                   	leave  
   13274:	c3                   	ret    

00013275 <move_to_col0>:
/**
 * @brief 将控制台光标移动到第0列
 *
 * @param console
 */
static inline void move_to_col0(console_t *console) { console->cursor_col = 0; }
   13275:	55                   	push   %ebp
   13276:	89 e5                	mov    %esp,%ebp
   13278:	8b 45 08             	mov    0x8(%ebp),%eax
   1327b:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
   13282:	90                   	nop
   13283:	5d                   	pop    %ebp
   13284:	c3                   	ret    

00013285 <move_to_next_line>:
/**
 * @brief 将控制台光标移动到下一行
 *
 * @param console
 */
static inline void move_to_next_line(console_t *console) {
   13285:	55                   	push   %ebp
   13286:	89 e5                	mov    %esp,%ebp
   13288:	83 ec 08             	sub    $0x8,%esp
  console->cursor_row++;
   1328b:	8b 45 08             	mov    0x8(%ebp),%eax
   1328e:	8b 40 0c             	mov    0xc(%eax),%eax
   13291:	8d 50 01             	lea    0x1(%eax),%edx
   13294:	8b 45 08             	mov    0x8(%ebp),%eax
   13297:	89 50 0c             	mov    %edx,0xc(%eax)
  // 当前行已经大于最大显示行数，屏幕需要进行上滚1行
  if (console->cursor_row >= console->display_rows) {
   1329a:	8b 45 08             	mov    0x8(%ebp),%eax
   1329d:	8b 50 0c             	mov    0xc(%eax),%edx
   132a0:	8b 45 08             	mov    0x8(%ebp),%eax
   132a3:	8b 40 04             	mov    0x4(%eax),%eax
   132a6:	39 c2                	cmp    %eax,%edx
   132a8:	72 10                	jb     132ba <move_to_next_line+0x35>
    scroll_up(console, 1);
   132aa:	83 ec 08             	sub    $0x8,%esp
   132ad:	6a 01                	push   $0x1
   132af:	ff 75 08             	push   0x8(%ebp)
   132b2:	e8 2c ff ff ff       	call   131e3 <scroll_up>
   132b7:	83 c4 10             	add    $0x10,%esp
  }
}
   132ba:	90                   	nop
   132bb:	c9                   	leave  
   132bc:	c3                   	ret    

000132bd <move_forward>:
 * @brief 将控制台console的光标迁移n个位置
 *
 * @param console
 * @param n
 */
static inline void move_forward(console_t *console, int n) {
   132bd:	55                   	push   %ebp
   132be:	89 e5                	mov    %esp,%ebp
   132c0:	83 ec 18             	sub    $0x18,%esp
  for (int i = 0; i < n; ++i) {
   132c3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   132ca:	eb 5c                	jmp    13328 <move_forward+0x6b>
    if (++(console->cursor_col) >=
   132cc:	8b 45 08             	mov    0x8(%ebp),%eax
   132cf:	8b 40 10             	mov    0x10(%eax),%eax
   132d2:	8d 50 01             	lea    0x1(%eax),%edx
   132d5:	8b 45 08             	mov    0x8(%ebp),%eax
   132d8:	89 50 10             	mov    %edx,0x10(%eax)
   132db:	8b 45 08             	mov    0x8(%ebp),%eax
   132de:	8b 50 10             	mov    0x10(%eax),%edx
        console->display_cols) {  // 光标达到最大列数，进行换行
   132e1:	8b 45 08             	mov    0x8(%ebp),%eax
   132e4:	8b 40 08             	mov    0x8(%eax),%eax
    if (++(console->cursor_col) >=
   132e7:	39 c2                	cmp    %eax,%edx
   132e9:	72 39                	jb     13324 <move_forward+0x67>
      console->cursor_row++;
   132eb:	8b 45 08             	mov    0x8(%ebp),%eax
   132ee:	8b 40 0c             	mov    0xc(%eax),%eax
   132f1:	8d 50 01             	lea    0x1(%eax),%edx
   132f4:	8b 45 08             	mov    0x8(%ebp),%eax
   132f7:	89 50 0c             	mov    %edx,0xc(%eax)
      console->cursor_col = 0;
   132fa:	8b 45 08             	mov    0x8(%ebp),%eax
   132fd:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
      // 当前行已经大于最大显示行数，屏幕需要进行上滚1行
      if (console->cursor_row >= console->display_rows) {
   13304:	8b 45 08             	mov    0x8(%ebp),%eax
   13307:	8b 50 0c             	mov    0xc(%eax),%edx
   1330a:	8b 45 08             	mov    0x8(%ebp),%eax
   1330d:	8b 40 04             	mov    0x4(%eax),%eax
   13310:	39 c2                	cmp    %eax,%edx
   13312:	72 10                	jb     13324 <move_forward+0x67>
        scroll_up(console, 1);
   13314:	83 ec 08             	sub    $0x8,%esp
   13317:	6a 01                	push   $0x1
   13319:	ff 75 08             	push   0x8(%ebp)
   1331c:	e8 c2 fe ff ff       	call   131e3 <scroll_up>
   13321:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < n; ++i) {
   13324:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   13328:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1332b:	3b 45 0c             	cmp    0xc(%ebp),%eax
   1332e:	7c 9c                	jl     132cc <move_forward+0xf>
      }
    }
  }
}
   13330:	90                   	nop
   13331:	90                   	nop
   13332:	c9                   	leave  
   13333:	c3                   	ret    

00013334 <show_char>:
 * @brief 将字符c显示到控制台console上
 *
 * @param console
 * @param c
 */
static inline void show_char(console_t *console, char c) {
   13334:	55                   	push   %ebp
   13335:	89 e5                	mov    %esp,%ebp
   13337:	83 ec 28             	sub    $0x28,%esp
   1333a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1333d:	88 45 e4             	mov    %al,-0x1c(%ebp)
  // 计算当前光标对应控制台在现存位置中的偏移量
  int offset =
      console->cursor_col + console->cursor_row * console->display_cols;
   13340:	8b 45 08             	mov    0x8(%ebp),%eax
   13343:	8b 48 10             	mov    0x10(%eax),%ecx
   13346:	8b 45 08             	mov    0x8(%ebp),%eax
   13349:	8b 50 0c             	mov    0xc(%eax),%edx
   1334c:	8b 45 08             	mov    0x8(%ebp),%eax
   1334f:	8b 40 08             	mov    0x8(%eax),%eax
   13352:	0f af c2             	imul   %edx,%eax
   13355:	01 c8                	add    %ecx,%eax
  int offset =
   13357:	89 45 f4             	mov    %eax,-0xc(%ebp)
  disp_char_t *p = console->disp_base + offset;
   1335a:	8b 45 08             	mov    0x8(%ebp),%eax
   1335d:	8b 10                	mov    (%eax),%edx
   1335f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13362:	01 c0                	add    %eax,%eax
   13364:	01 d0                	add    %edx,%eax
   13366:	89 45 f0             	mov    %eax,-0x10(%ebp)
  p->c = c;
   13369:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1336c:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
   13370:	88 10                	mov    %dl,(%eax)
  p->foreground = console->foreground;
   13372:	8b 45 08             	mov    0x8(%ebp),%eax
   13375:	8b 40 14             	mov    0x14(%eax),%eax
   13378:	c1 e0 04             	shl    $0x4,%eax
   1337b:	c0 f8 04             	sar    $0x4,%al
   1337e:	8b 55 f0             	mov    -0x10(%ebp),%edx
   13381:	83 e0 0f             	and    $0xf,%eax
   13384:	89 c1                	mov    %eax,%ecx
   13386:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   1338a:	83 e0 f0             	and    $0xfffffff0,%eax
   1338d:	09 c8                	or     %ecx,%eax
   1338f:	88 42 01             	mov    %al,0x1(%edx)
  p->background = console->background;
   13392:	8b 45 08             	mov    0x8(%ebp),%eax
   13395:	8b 40 18             	mov    0x18(%eax),%eax
   13398:	c1 e0 05             	shl    $0x5,%eax
   1339b:	c0 f8 05             	sar    $0x5,%al
   1339e:	8b 55 f0             	mov    -0x10(%ebp),%edx
   133a1:	83 e0 07             	and    $0x7,%eax
   133a4:	c1 e0 04             	shl    $0x4,%eax
   133a7:	89 c1                	mov    %eax,%ecx
   133a9:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   133ad:	83 e0 8f             	and    $0xffffff8f,%eax
   133b0:	09 c8                	or     %ecx,%eax
   133b2:	88 42 01             	mov    %al,0x1(%edx)
  move_forward(console, 1);
   133b5:	83 ec 08             	sub    $0x8,%esp
   133b8:	6a 01                	push   $0x1
   133ba:	ff 75 08             	push   0x8(%ebp)
   133bd:	e8 fb fe ff ff       	call   132bd <move_forward>
   133c2:	83 c4 10             	add    $0x10,%esp
}
   133c5:	90                   	nop
   133c6:	c9                   	leave  
   133c7:	c3                   	ret    

000133c8 <console_init>:
/**
 * @brief 初始化控制台
 *
 * @return int
 */
int console_init(void) {
   133c8:	55                   	push   %ebp
   133c9:	89 e5                	mov    %esp,%ebp
   133cb:	83 ec 10             	sub    $0x10,%esp
  for (int i = 0; i < CONSOLE_NR; ++i) {
   133ce:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   133d5:	e9 84 00 00 00       	jmp    1345e <console_init+0x96>
    console_t *console = console_buf + i;
   133da:	8b 45 fc             	mov    -0x4(%ebp),%eax
   133dd:	6b c0 1c             	imul   $0x1c,%eax,%eax
   133e0:	05 00 8e 03 00       	add    $0x38e00,%eax
   133e5:	89 45 f8             	mov    %eax,-0x8(%ebp)
    console->display_rows = CONSOLE_ROW_MAX;
   133e8:	8b 45 f8             	mov    -0x8(%ebp),%eax
   133eb:	c7 40 04 19 00 00 00 	movl   $0x19,0x4(%eax)
    console->display_cols = CONSOLE_CLO_MAX;
   133f2:	8b 45 f8             	mov    -0x8(%ebp),%eax
   133f5:	c7 40 08 50 00 00 00 	movl   $0x50,0x8(%eax)
    console->foreground = COLOR_White;
   133fc:	8b 45 f8             	mov    -0x8(%ebp),%eax
   133ff:	c7 40 14 0f 00 00 00 	movl   $0xf,0x14(%eax)
    console->background = COLOR_Black;
   13406:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13409:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)

    // 初始化光标位置
    int cursor_pos = read_cursor_pos();
   13410:	e8 73 fc ff ff       	call   13088 <read_cursor_pos>
   13415:	89 45 f4             	mov    %eax,-0xc(%ebp)
    console->cursor_row = cursor_pos / console->display_cols;
   13418:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1341b:	8b 55 f8             	mov    -0x8(%ebp),%edx
   1341e:	8b 4a 08             	mov    0x8(%edx),%ecx
   13421:	ba 00 00 00 00       	mov    $0x0,%edx
   13426:	f7 f1                	div    %ecx
   13428:	89 c2                	mov    %eax,%edx
   1342a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1342d:	89 50 0c             	mov    %edx,0xc(%eax)
    console->cursor_col = cursor_pos % console->display_cols;
   13430:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13433:	8b 55 f8             	mov    -0x8(%ebp),%edx
   13436:	8b 4a 08             	mov    0x8(%edx),%ecx
   13439:	ba 00 00 00 00       	mov    $0x0,%edx
   1343e:	f7 f1                	div    %ecx
   13440:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13443:	89 50 10             	mov    %edx,0x10(%eax)

    // 计算每个终端在现存中的起始地址
    console->disp_base = (disp_char_t *)CONSOLE_DISP_START_ADDR +
   13446:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13449:	69 c0 a0 0f 00 00    	imul   $0xfa0,%eax,%eax
   1344f:	8d 90 00 80 0b 00    	lea    0xb8000(%eax),%edx
   13455:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13458:	89 10                	mov    %edx,(%eax)
  for (int i = 0; i < CONSOLE_NR; ++i) {
   1345a:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   1345e:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   13462:	0f 8e 72 ff ff ff    	jle    133da <console_init+0x12>
                         (i * CONSOLE_CLO_MAX * CONSOLE_ROW_MAX);
  }

  return 0;
   13468:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1346d:	c9                   	leave  
   1346e:	c3                   	ret    

0001346f <console_write>:
 * @param console 第几个控制台
 * @param data 写入的字符串
 * @param size 字符串大小
 * @return int
 */
int console_write(int console, char *data, int size) {
   1346f:	55                   	push   %ebp
   13470:	89 e5                	mov    %esp,%ebp
   13472:	83 ec 18             	sub    $0x18,%esp
  // 获取需要需要写入的终端
  console_t *c = console_buf + console;
   13475:	8b 45 08             	mov    0x8(%ebp),%eax
   13478:	6b c0 1c             	imul   $0x1c,%eax,%eax
   1347b:	05 00 8e 03 00       	add    $0x38e00,%eax
   13480:	89 45 f0             	mov    %eax,-0x10(%ebp)
  int len;
  for (len = 0; len < size; ++len) {
   13483:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1348a:	eb 4b                	jmp    134d7 <console_write+0x68>
    char ch = *(data++);
   1348c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1348f:	8d 50 01             	lea    0x1(%eax),%edx
   13492:	89 55 0c             	mov    %edx,0xc(%ebp)
   13495:	0f b6 00             	movzbl (%eax),%eax
   13498:	88 45 ef             	mov    %al,-0x11(%ebp)
    switch (ch) {
   1349b:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
   1349f:	83 f8 0a             	cmp    $0xa,%eax
   134a2:	75 1b                	jne    134bf <console_write+0x50>
      case '\n':
        move_to_col0(c);
   134a4:	ff 75 f0             	push   -0x10(%ebp)
   134a7:	e8 c9 fd ff ff       	call   13275 <move_to_col0>
   134ac:	83 c4 04             	add    $0x4,%esp
        move_to_next_line(c);
   134af:	83 ec 0c             	sub    $0xc,%esp
   134b2:	ff 75 f0             	push   -0x10(%ebp)
   134b5:	e8 cb fd ff ff       	call   13285 <move_to_next_line>
   134ba:	83 c4 10             	add    $0x10,%esp
        break;
   134bd:	eb 14                	jmp    134d3 <console_write+0x64>

      default:
        show_char(c, ch);
   134bf:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
   134c3:	83 ec 08             	sub    $0x8,%esp
   134c6:	50                   	push   %eax
   134c7:	ff 75 f0             	push   -0x10(%ebp)
   134ca:	e8 65 fe ff ff       	call   13334 <show_char>
   134cf:	83 c4 10             	add    $0x10,%esp
        break;
   134d2:	90                   	nop
  for (len = 0; len < size; ++len) {
   134d3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   134d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   134da:	3b 45 10             	cmp    0x10(%ebp),%eax
   134dd:	7c ad                	jl     1348c <console_write+0x1d>
    }
  }

  // 更新光标的位置
  update_cursor_pos(c);
   134df:	83 ec 0c             	sub    $0xc,%esp
   134e2:	ff 75 f0             	push   -0x10(%ebp)
   134e5:	e8 f0 fb ff ff       	call   130da <update_cursor_pos>
   134ea:	83 c4 10             	add    $0x10,%esp
  return len;
   134ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   134f0:	c9                   	leave  
   134f1:	c3                   	ret    

000134f2 <console_close>:
 * @brief 关闭控制台
 *
 * @param console
 * @return int
 */
   134f2:	55                   	push   %ebp
   134f3:	89 e5                	mov    %esp,%ebp
   134f5:	90                   	nop
   134f6:	5d                   	pop    %ebp
   134f7:	c3                   	ret    

000134f8 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   134f8:	55                   	push   %ebp
   134f9:	89 e5                	mov    %esp,%ebp
   134fb:	83 ec 08             	sub    $0x8,%esp
   134fe:	8b 45 08             	mov    0x8(%ebp),%eax
   13501:	8b 55 0c             	mov    0xc(%ebp),%edx
   13504:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   13508:	89 d0                	mov    %edx,%eax
   1350a:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   1350d:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   13511:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   13515:	ee                   	out    %al,(%dx)
}
   13516:	90                   	nop
   13517:	c9                   	leave  
   13518:	c3                   	ret    

00013519 <do_handler_time>:
/**
 * @brief  处理定时器中断的c函数
 * 
 * @param frame 异常栈帧
 */
void do_handler_time(const exception_frame_t *frame) {
   13519:	55                   	push   %ebp
   1351a:	89 e5                	mov    %esp,%ebp
   1351c:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   1351f:	a1 1c 8e 03 00       	mov    0x38e1c,%eax
   13524:	83 c0 01             	add    $0x1,%eax
   13527:	a3 1c 8e 03 00       	mov    %eax,0x38e1c

    //因为ICW4的EOI位为0，所以要手动发送EOI即中断结束信号
    pic_send_eoi(IRQ0_TIMER);
   1352c:	83 ec 0c             	sub    $0xc,%esp
   1352f:	6a 20                	push   $0x20
   13531:	e8 09 fa ff ff       	call   12f3f <pic_send_eoi>
   13536:	83 c4 10             	add    $0x10,%esp

    //运行完一个时间片，判断是否需要执行任务切换，若需要则执行
    //必须写在发送eoi之后，防止发生任务切换导致eoi没有发送，从而无法进行下一次中断
    task_slice_end();   
   13539:	e8 d1 e3 ff ff       	call   1190f <task_slice_end>
}
   1353e:	90                   	nop
   1353f:	c9                   	leave  
   13540:	c3                   	ret    

00013541 <init_pit>:

/**
 * @brief  初始化可编程定时器
 * 
 */
static void init_pit(void) {
   13541:	55                   	push   %ebp
   13542:	89 e5                	mov    %esp,%ebp
   13544:	83 ec 18             	sub    $0x18,%esp
    //1.选择定时器的计算器，读取与加载初始值模式，以及工作模式
    outb(PIT_COMMAND_MODE_PORT, PIT_SELECT_COUNTER | PIT_READ_LOAD | PIT_MODE);
   13547:	6a 36                	push   $0x36
   13549:	6a 43                	push   $0x43
   1354b:	e8 a8 ff ff ff       	call   134f8 <outb>
   13550:	83 c4 08             	add    $0x8,%esp

    //2.写入16位初始值,即一个中断后期晶体的振荡次数，由确定的加载方式知，先写入低8位，再写入高8位
    uint16_t reload_count = (PIT_OSC_FREQ / 1000) * OS_TICKS_MS;   //确定晶体一个中断周期的震荡次数
   13553:	66 c7 45 f6 9a 2e    	movw   $0x2e9a,-0xa(%ebp)
    outb(PIT_CHANNEL_DATA_PORT, reload_count & 0xff);
   13559:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   1355d:	0f b6 c0             	movzbl %al,%eax
   13560:	50                   	push   %eax
   13561:	6a 40                	push   $0x40
   13563:	e8 90 ff ff ff       	call   134f8 <outb>
   13568:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL_DATA_PORT, (reload_count >> 8) & 0xff);
   1356b:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   1356f:	66 c1 e8 08          	shr    $0x8,%ax
   13573:	0f b6 c0             	movzbl %al,%eax
   13576:	50                   	push   %eax
   13577:	6a 40                	push   $0x40
   13579:	e8 7a ff ff ff       	call   134f8 <outb>
   1357e:	83 c4 08             	add    $0x8,%esp

    //3.绑定定时器中断的异常处理程序,并开启该中断
    idt_install(IRQ0_TIMER, (idt_handler_t)exception_handler_time);
   13581:	83 ec 08             	sub    $0x8,%esp
   13584:	68 7b 02 01 00       	push   $0x1027b
   13589:	6a 20                	push   $0x20
   1358b:	e8 e2 f5 ff ff       	call   12b72 <idt_install>
   13590:	83 c4 10             	add    $0x10,%esp
    idt_enable(IRQ0_TIMER);
   13593:	83 ec 0c             	sub    $0xc,%esp
   13596:	6a 20                	push   $0x20
   13598:	e8 60 f8 ff ff       	call   12dfd <idt_enable>
   1359d:	83 c4 10             	add    $0x10,%esp

}
   135a0:	90                   	nop
   135a1:	c9                   	leave  
   135a2:	c3                   	ret    

000135a3 <time_init>:

/**
 * @brief  初始化定时器
 * 
 */
void time_init(void) {
   135a3:	55                   	push   %ebp
   135a4:	89 e5                	mov    %esp,%ebp
   135a6:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   135a9:	c7 05 1c 8e 03 00 00 	movl   $0x0,0x38e1c
   135b0:	00 00 00 
    init_pit();
   135b3:	e8 89 ff ff ff       	call   13541 <init_pit>
   135b8:	90                   	nop
   135b9:	c9                   	leave  
   135ba:	c3                   	ret    

000135bb <inb>:
static inline uint8_t inb(uint16_t port) {
   135bb:	55                   	push   %ebp
   135bc:	89 e5                	mov    %esp,%ebp
   135be:	83 ec 14             	sub    $0x14,%esp
   135c1:	8b 45 08             	mov    0x8(%ebp),%eax
   135c4:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   135c8:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   135cc:	89 c2                	mov    %eax,%edx
   135ce:	ec                   	in     (%dx),%al
   135cf:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   135d2:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   135d6:	c9                   	leave  
   135d7:	c3                   	ret    

000135d8 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   135d8:	55                   	push   %ebp
   135d9:	89 e5                	mov    %esp,%ebp
   135db:	83 ec 08             	sub    $0x8,%esp
   135de:	8b 45 08             	mov    0x8(%ebp),%eax
   135e1:	8b 55 0c             	mov    0xc(%ebp),%edx
   135e4:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   135e8:	89 d0                	mov    %edx,%eax
   135ea:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   135ed:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   135f1:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   135f5:	ee                   	out    %al,(%dx)
}
   135f6:	90                   	nop
   135f7:	c9                   	leave  
   135f8:	c3                   	ret    

000135f9 <inw>:
static inline uint16_t inw(uint16_t port) {
   135f9:	55                   	push   %ebp
   135fa:	89 e5                	mov    %esp,%ebp
   135fc:	83 ec 14             	sub    $0x14,%esp
   135ff:	8b 45 08             	mov    0x8(%ebp),%eax
   13602:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__("in %[p], %[v]"  // in默认就是inw, 读取一个字即16位
   13606:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1360a:	89 c2                	mov    %eax,%edx
   1360c:	66 ed                	in     (%dx),%ax
   1360e:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  return rv;
   13612:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
}
   13616:	c9                   	leave  
   13617:	c3                   	ret    

00013618 <read_disk>:
 * 
 * @param sector 读取的分区号
 * @param sector_count 读取的分区数量
 * @param buf 缓冲区第一个字节的地址
 */
static void read_disk(uint32_t sector, uint16_t sector_count, uint8_t *buf) {
   13618:	55                   	push   %ebp
   13619:	89 e5                	mov    %esp,%ebp
   1361b:	53                   	push   %ebx
   1361c:	83 ec 14             	sub    $0x14,%esp
   1361f:	8b 45 0c             	mov    0xc(%ebp),%eax
   13622:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    
    //1.设置以LBA模式进行读取，即将磁盘看作一片连续的扇区
    outb(0x1F6, 0xE0 | (0x0 << 4));              //0xE0 将寄存器第6位置1进入LBA模式，0x0将第4位置0指定驱动器号为主盘
   13626:	68 e0 00 00 00       	push   $0xe0
   1362b:	68 f6 01 00 00       	push   $0x1f6
   13630:	e8 a3 ff ff ff       	call   135d8 <outb>
   13635:	83 c4 08             	add    $0x8,%esp
                                                            //现在一个通道上只有一个盘，默认当作主盘
                    
    //2.初始化各个端口寄存器的高8位
    outb(0x1F2, (uint8_t)(sector_count >> 8));  //读取扇区数的高8位
   13638:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   1363c:	66 c1 e8 08          	shr    $0x8,%ax
   13640:	0f b6 c0             	movzbl %al,%eax
   13643:	50                   	push   %eax
   13644:	68 f2 01 00 00       	push   $0x1f2
   13649:	e8 8a ff ff ff       	call   135d8 <outb>
   1364e:	83 c4 08             	add    $0x8,%esp
                                                //6字节LBA值，先初始化第456个字节
                                                //我暂时只用到了4个字节的LBA值, 所以第56个字节置0即可
    outb(0x1F3, (uint8_t)(sector >> 24));       //LBA4 
   13651:	8b 45 08             	mov    0x8(%ebp),%eax
   13654:	c1 e8 18             	shr    $0x18,%eax
   13657:	0f b6 c0             	movzbl %al,%eax
   1365a:	50                   	push   %eax
   1365b:	68 f3 01 00 00       	push   $0x1f3
   13660:	e8 73 ff ff ff       	call   135d8 <outb>
   13665:	83 c4 08             	add    $0x8,%esp
    outb(0x1F4, 0x00);                          //LBA5
   13668:	6a 00                	push   $0x0
   1366a:	68 f4 01 00 00       	push   $0x1f4
   1366f:	e8 64 ff ff ff       	call   135d8 <outb>
   13674:	83 c4 08             	add    $0x8,%esp
    outb(0x1F5, 0x00);                          //LBA6
   13677:	6a 00                	push   $0x0
   13679:	68 f5 01 00 00       	push   $0x1f5
   1367e:	e8 55 ff ff ff       	call   135d8 <outb>
   13683:	83 c4 08             	add    $0x8,%esp

    //3.初始化各个端口寄存器的低8位
    outb(0x1F2, (uint8_t)sector_count);         //读取扇区数的低8位
   13686:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   1368a:	0f b6 c0             	movzbl %al,%eax
   1368d:	50                   	push   %eax
   1368e:	68 f2 01 00 00       	push   $0x1f2
   13693:	e8 40 ff ff ff       	call   135d8 <outb>
   13698:	83 c4 08             	add    $0x8,%esp
    outb(0x1F3, (uint8_t)sector);               //LBA1
   1369b:	8b 45 08             	mov    0x8(%ebp),%eax
   1369e:	0f b6 c0             	movzbl %al,%eax
   136a1:	50                   	push   %eax
   136a2:	68 f3 01 00 00       	push   $0x1f3
   136a7:	e8 2c ff ff ff       	call   135d8 <outb>
   136ac:	83 c4 08             	add    $0x8,%esp
    outb(0x1F4, (uint8_t)(sector >> 8));        //LBA2
   136af:	8b 45 08             	mov    0x8(%ebp),%eax
   136b2:	c1 e8 08             	shr    $0x8,%eax
   136b5:	0f b6 c0             	movzbl %al,%eax
   136b8:	50                   	push   %eax
   136b9:	68 f4 01 00 00       	push   $0x1f4
   136be:	e8 15 ff ff ff       	call   135d8 <outb>
   136c3:	83 c4 08             	add    $0x8,%esp
    outb(0x1F5, (uint8_t)(sector >> 16));       //LBA3
   136c6:	8b 45 08             	mov    0x8(%ebp),%eax
   136c9:	c1 e8 10             	shr    $0x10,%eax
   136cc:	0f b6 c0             	movzbl %al,%eax
   136cf:	50                   	push   %eax
   136d0:	68 f5 01 00 00       	push   $0x1f5
   136d5:	e8 fe fe ff ff       	call   135d8 <outb>
   136da:	83 c4 08             	add    $0x8,%esp

    //4.将读取扇区命令 （0x24） 发送到端口 0x1F7
    outb(0x1F7, 0x24);
   136dd:	6a 24                	push   $0x24
   136df:	68 f7 01 00 00       	push   $0x1f7
   136e4:	e8 ef fe ff ff       	call   135d8 <outb>
   136e9:	83 c4 08             	add    $0x8,%esp

    //5.读取状态端口寄存器，判断是否可读取,若可以则读取，否则阻塞等待
    uint16_t *data_buf = (uint16_t*) buf;       //数据缓冲区，以后每次会读取16位数据
   136ec:	8b 45 10             	mov    0x10(%ebp),%eax
   136ef:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (sector_count--) {
   136f2:	eb 4a                	jmp    1373e <read_disk+0x126>
        while ((inb(0x1F7) & 0x88) != 0x8) {};  //取出状态寄存器3位和7位
   136f4:	90                   	nop
   136f5:	68 f7 01 00 00       	push   $0x1f7
   136fa:	e8 bc fe ff ff       	call   135bb <inb>
   136ff:	83 c4 04             	add    $0x4,%esp
   13702:	0f b6 c0             	movzbl %al,%eax
   13705:	25 88 00 00 00       	and    $0x88,%eax
   1370a:	83 f8 08             	cmp    $0x8,%eax
   1370d:	75 e6                	jne    136f5 <read_disk+0xdd>
                                                //若!=0x8即DRQ位(3位)为0，即非就绪状态
                                                //或者BSY(7位)为1，即忙碌状态，都不可读取

        for (int i = 0; i < SECTOR_SIZE / 2; ++i) {
   1370f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   13716:	eb 1d                	jmp    13735 <read_disk+0x11d>
            *(data_buf++) = inw(0x1F0);          //从数据端口寄存器中读取16位数据，即2个字节
   13718:	8b 5d f8             	mov    -0x8(%ebp),%ebx
   1371b:	8d 43 02             	lea    0x2(%ebx),%eax
   1371e:	89 45 f8             	mov    %eax,-0x8(%ebp)
   13721:	68 f0 01 00 00       	push   $0x1f0
   13726:	e8 ce fe ff ff       	call   135f9 <inw>
   1372b:	83 c4 04             	add    $0x4,%esp
   1372e:	66 89 03             	mov    %ax,(%ebx)
        for (int i = 0; i < SECTOR_SIZE / 2; ++i) {
   13731:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   13735:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   1373c:	7e da                	jle    13718 <read_disk+0x100>
    while (sector_count--) {
   1373e:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   13742:	8d 50 ff             	lea    -0x1(%eax),%edx
   13745:	66 89 55 e8          	mov    %dx,-0x18(%ebp)
   13749:	66 85 c0             	test   %ax,%ax
   1374c:	75 a6                	jne    136f4 <read_disk+0xdc>
        }
        
    }
    
}
   1374e:	90                   	nop
   1374f:	90                   	nop
   13750:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   13753:	c9                   	leave  
   13754:	c3                   	ret    

00013755 <sys_open>:
 * @param name 文件路径
 * @param flags 打开方式的标志
 * @param ... 
 * @return int 文件描述符 
 */
int sys_open(const char *name, int flags, ...) {
   13755:	55                   	push   %ebp
   13756:	89 e5                	mov    %esp,%ebp
    if (name[0] == '/') {  //打开外部程序
   13758:	8b 45 08             	mov    0x8(%ebp),%eax
   1375b:	0f b6 00             	movzbl (%eax),%eax
   1375e:	3c 2f                	cmp    $0x2f,%al
   13760:	75 25                	jne    13787 <sys_open+0x32>
        read_disk(5000, 80, (uint8_t*)TEMP_ADDR);
   13762:	68 00 00 80 07       	push   $0x7800000
   13767:	6a 50                	push   $0x50
   13769:	68 88 13 00 00       	push   $0x1388
   1376e:	e8 a5 fe ff ff       	call   13618 <read_disk>
   13773:	83 c4 0c             	add    $0xc,%esp
        temp_pos = (uint8_t*)TEMP_ADDR;
   13776:	c7 05 20 8e 03 00 00 	movl   $0x7800000,0x38e20
   1377d:	00 80 07 
        return TEMP_FILE_ID;
   13780:	b8 64 00 00 00       	mov    $0x64,%eax
   13785:	eb 05                	jmp    1378c <sys_open+0x37>
    }

    return -1;
   13787:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1378c:	c9                   	leave  
   1378d:	c3                   	ret    

0001378e <sys_read>:
 * @param file 文件描述符
 * @param ptr 缓冲区地址
 * @param len 读取字节数
 * @return int 成功读取字节数
 */
int sys_read(int file, char *ptr, int len) {
   1378e:	55                   	push   %ebp
   1378f:	89 e5                	mov    %esp,%ebp
   13791:	83 ec 08             	sub    $0x8,%esp
    if (file == TEMP_FILE_ID) {
   13794:	83 7d 08 64          	cmpl   $0x64,0x8(%ebp)
   13798:	75 2c                	jne    137c6 <sys_read+0x38>
        kernel_memcpy(ptr, temp_pos, len);
   1379a:	a1 20 8e 03 00       	mov    0x38e20,%eax
   1379f:	83 ec 04             	sub    $0x4,%esp
   137a2:	ff 75 10             	push   0x10(%ebp)
   137a5:	50                   	push   %eax
   137a6:	ff 75 0c             	push   0xc(%ebp)
   137a9:	e8 c4 0d 00 00       	call   14572 <kernel_memcpy>
   137ae:	83 c4 10             	add    $0x10,%esp
        temp_pos += len;
   137b1:	8b 15 20 8e 03 00    	mov    0x38e20,%edx
   137b7:	8b 45 10             	mov    0x10(%ebp),%eax
   137ba:	01 d0                	add    %edx,%eax
   137bc:	a3 20 8e 03 00       	mov    %eax,0x38e20
        return len;
   137c1:	8b 45 10             	mov    0x10(%ebp),%eax
   137c4:	eb 05                	jmp    137cb <sys_read+0x3d>
    }
    return -1;
   137c6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   137cb:	c9                   	leave  
   137cc:	c3                   	ret    

000137cd <sys_write>:
 * @param ptr 缓冲区地址
 * @param len 写入字节数
 * @return int 成功写入字节数
 */
#include "tools/log.h"
int sys_write(int file, char *ptr, int len) {
   137cd:	55                   	push   %ebp
   137ce:	89 e5                	mov    %esp,%ebp
   137d0:	83 ec 08             	sub    $0x8,%esp
    if (file == 1) {
   137d3:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
   137d7:	75 13                	jne    137ec <sys_write+0x1f>
        //ptr[len] = '\0';
        //log_printf("%s", ptr);
        console_write(0, ptr, len);
   137d9:	83 ec 04             	sub    $0x4,%esp
   137dc:	ff 75 10             	push   0x10(%ebp)
   137df:	ff 75 0c             	push   0xc(%ebp)
   137e2:	6a 00                	push   $0x0
   137e4:	e8 86 fc ff ff       	call   1346f <console_write>
   137e9:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   137ec:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   137f1:	c9                   	leave  
   137f2:	c3                   	ret    

000137f3 <sys_lseek>:
 * @param file 
 * @param offset 
 * @param pos 
 * @return int 
 */
int sys_lseek(int file, int offset, int pos) {
   137f3:	55                   	push   %ebp
   137f4:	89 e5                	mov    %esp,%ebp
    if (file == TEMP_FILE_ID) {
   137f6:	83 7d 08 64          	cmpl   $0x64,0x8(%ebp)
   137fa:	75 14                	jne    13810 <sys_lseek+0x1d>
        temp_pos = (uint8_t*)(TEMP_ADDR + offset);
   137fc:	8b 45 0c             	mov    0xc(%ebp),%eax
   137ff:	05 00 00 80 07       	add    $0x7800000,%eax
   13804:	a3 20 8e 03 00       	mov    %eax,0x38e20
        return 0;
   13809:	b8 00 00 00 00       	mov    $0x0,%eax
   1380e:	eb 05                	jmp    13815 <sys_lseek+0x22>
    }

    return -1;
   13810:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

}
   13815:	5d                   	pop    %ebp
   13816:	c3                   	ret    

00013817 <sys_close>:
 * @brief 关闭文件
 * 
 * @param file 
 * @return int 
 */
int sys_close(int file) {
   13817:	55                   	push   %ebp
   13818:	89 e5                	mov    %esp,%ebp
    return 0;
   1381a:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1381f:	5d                   	pop    %ebp
   13820:	c3                   	ret    

00013821 <sys_isatty>:
 * @brief 
 * 
 * @param file 
 * @return int 
 */
int sys_isatty(int file) {
   13821:	55                   	push   %ebp
   13822:	89 e5                	mov    %esp,%ebp
    return -1;
   13824:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   13829:	5d                   	pop    %ebp
   1382a:	c3                   	ret    

0001382b <sys_fstat>:
 * 
 * @param file 
 * @param st 
 * @return int 
 */
int sys_fstat(int file, struct stat *st) {
   1382b:	55                   	push   %ebp
   1382c:	89 e5                	mov    %esp,%ebp
    return -1;
   1382e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   13833:	5d                   	pop    %ebp
   13834:	c3                   	ret    

00013835 <kernel_init>:

/**
 * @brief  对内核进行初始化操作
 * 
 */
void kernel_init(boot_info_t* boot_info) {
   13835:	55                   	push   %ebp
   13836:	89 e5                	mov    %esp,%ebp
   13838:	83 ec 08             	sub    $0x8,%esp
    //1.判断是否检测到可用内存
    ASSERT(boot_info->ram_region_count != 0);
   1383b:	8b 45 08             	mov    0x8(%ebp),%eax
   1383e:	8b 40 50             	mov    0x50(%eax),%eax
   13841:	85 c0                	test   %eax,%eax
   13843:	75 19                	jne    1385e <kernel_init+0x29>
   13845:	68 6c 59 01 00       	push   $0x1596c
   1384a:	68 08 5a 01 00       	push   $0x15a08
   1384f:	6a 23                	push   $0x23
   13851:	68 90 59 01 00       	push   $0x15990
   13856:	e8 64 08 00 00       	call   140bf <pannic>
   1385b:	83 c4 10             	add    $0x10,%esp
    
    //2.初始化日志程序,便于后期调用
    log_init();
   1385e:	e8 2c 15 00 00       	call   14d8f <log_init>

    //3.初始化控制台
    console_init();
   13863:	e8 60 fb ff ff       	call   133c8 <console_init>
    
    //3.初始化内存管理
    memory_init(boot_info);  
   13868:	83 ec 0c             	sub    $0xc,%esp
   1386b:	ff 75 08             	push   0x8(%ebp)
   1386e:	e8 c9 d3 ff ff       	call   10c3c <memory_init>
   13873:	83 c4 10             	add    $0x10,%esp

    //4.初始化并重新加载GDT表
    gdt_init();
   13876:	e8 1f ec ff ff       	call   1249a <gdt_init>

    //5.初始化并加载中断描述符表IDT
    idt_init();
   1387b:	e8 c8 f3 ff ff       	call   12c48 <idt_init>

    //6.初始化定时器的中断处理
    time_init();
   13880:	e8 1e fd ff ff       	call   135a3 <time_init>

    //7.初始化任务管理器
    task_manager_init();
   13885:	e8 62 dd ff ff       	call   115ec <task_manager_init>
    //初始化完成后将在汇编里重新加载内核代码段与数据段的选择子，并为内核程序分配栈空间

}
   1388a:	90                   	nop
   1388b:	c9                   	leave  
   1388c:	c3                   	ret    

0001388d <move_to_first_task>:

/**
 * @brief 跳转到第一个任务进程
 * 
 */
void move_to_first_task(void) {
   1388d:	55                   	push   %ebp
   1388e:	89 e5                	mov    %esp,%ebp
   13890:	56                   	push   %esi
   13891:	53                   	push   %ebx
   13892:	83 ec 10             	sub    $0x10,%esp
    //1.获取当前任务
    task_t *curr = task_current();
   13895:	e8 03 e0 ff ff       	call   1189d <task_current>
   1389a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT(curr != 0);
   1389d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   138a1:	75 19                	jne    138bc <move_to_first_task+0x2f>
   138a3:	68 c5 59 01 00       	push   $0x159c5
   138a8:	68 14 5a 01 00       	push   $0x15a14
   138ad:	6a 46                	push   $0x46
   138af:	68 90 59 01 00       	push   $0x15990
   138b4:	e8 06 08 00 00       	call   140bf <pannic>
   138b9:	83 c4 10             	add    $0x10,%esp

    //2.获取当前任务的tss结构
    tss_t *tss = &(curr->tss);
   138bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   138bf:	83 c0 58             	add    $0x58,%eax
   138c2:	89 45 f0             	mov    %eax,-0x10(%ebp)
        "push %[ss]\n\t"
        "push %[esp]\n\t"
        "push %[eflags]\n\t"
        "push %[cs]\n\t"
        "push %[eip]\n\t"
        "iret"::[ss]"r"(tss->ss), [esp]"r"(tss->esp), [eflags]"r"(tss->eflags), [cs]"r"(tss->cs), [eip]"r"(tss->eip)
   138c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   138c8:	8b 40 50             	mov    0x50(%eax),%eax
   138cb:	8b 55 f0             	mov    -0x10(%ebp),%edx
   138ce:	8b 52 38             	mov    0x38(%edx),%edx
   138d1:	8b 4d f0             	mov    -0x10(%ebp),%ecx
   138d4:	8b 49 24             	mov    0x24(%ecx),%ecx
   138d7:	8b 5d f0             	mov    -0x10(%ebp),%ebx
   138da:	8b 5b 4c             	mov    0x4c(%ebx),%ebx
   138dd:	8b 75 f0             	mov    -0x10(%ebp),%esi
   138e0:	8b 76 20             	mov    0x20(%esi),%esi
     __asm__ __volatile__(
   138e3:	50                   	push   %eax
   138e4:	52                   	push   %edx
   138e5:	51                   	push   %ecx
   138e6:	53                   	push   %ebx
   138e7:	56                   	push   %esi
   138e8:	cf                   	iret   

        
    );
}
   138e9:	90                   	nop
   138ea:	8d 65 f8             	lea    -0x8(%ebp),%esp
   138ed:	5b                   	pop    %ebx
   138ee:	5e                   	pop    %esi
   138ef:	5d                   	pop    %ebp
   138f0:	c3                   	ret    

000138f1 <init_main>:


void init_main(void) {
   138f1:	55                   	push   %ebp
   138f2:	89 e5                	mov    %esp,%ebp
   138f4:	83 ec 08             	sub    $0x8,%esp
    
    log_printf("Kernel is running......");
   138f7:	83 ec 0c             	sub    $0xc,%esp
   138fa:	68 cf 59 01 00       	push   $0x159cf
   138ff:	e8 a4 14 00 00       	call   14da8 <log_printf>
   13904:	83 c4 10             	add    $0x10,%esp
    log_printf("Name: %s, Version: %s", "KbOS", OS_VERSION);
   13907:	83 ec 04             	sub    $0x4,%esp
   1390a:	68 e7 59 01 00       	push   $0x159e7
   1390f:	68 ed 59 01 00       	push   $0x159ed
   13914:	68 f2 59 01 00       	push   $0x159f2
   13919:	e8 8a 14 00 00       	call   14da8 <log_printf>
   1391e:	83 c4 10             	add    $0x10,%esp


    //当前任务作为任务管理器启用时的第一个任务
    task_first_init();
   13921:	e8 a3 dd ff ff       	call   116c9 <task_first_init>

    //跳转到第一个任务进程去运行
    move_to_first_task();
   13926:	e8 62 ff ff ff       	call   1388d <move_to_first_task>
   1392b:	90                   	nop
   1392c:	c9                   	leave  
   1392d:	c3                   	ret    

0001392e <list_init>:
static inline void list_init(list_t *list) {
   1392e:	55                   	push   %ebp
   1392f:	89 e5                	mov    %esp,%ebp
   13931:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   13934:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13938:	75 19                	jne    13953 <list_init+0x25>
   1393a:	68 28 5a 01 00       	push   $0x15a28
   1393f:	68 d4 5a 01 00       	push   $0x15ad4
   13944:	6a 31                	push   $0x31
   13946:	68 3c 5a 01 00       	push   $0x15a3c
   1394b:	e8 6f 07 00 00       	call   140bf <pannic>
   13950:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   13953:	8b 45 08             	mov    0x8(%ebp),%eax
   13956:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1395d:	8b 45 08             	mov    0x8(%ebp),%eax
   13960:	8b 50 04             	mov    0x4(%eax),%edx
   13963:	8b 45 08             	mov    0x8(%ebp),%eax
   13966:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   13968:	8b 45 08             	mov    0x8(%ebp),%eax
   1396b:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   13972:	90                   	nop
   13973:	c9                   	leave  
   13974:	c3                   	ret    

00013975 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   13975:	55                   	push   %ebp
   13976:	89 e5                	mov    %esp,%ebp
   13978:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1397b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1397f:	75 19                	jne    1399a <list_is_empty+0x25>
   13981:	68 28 5a 01 00       	push   $0x15a28
   13986:	68 e0 5a 01 00       	push   $0x15ae0
   1398b:	6a 38                	push   $0x38
   1398d:	68 3c 5a 01 00       	push   $0x15a3c
   13992:	e8 28 07 00 00       	call   140bf <pannic>
   13997:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   1399a:	8b 45 08             	mov    0x8(%ebp),%eax
   1399d:	8b 40 08             	mov    0x8(%eax),%eax
   139a0:	85 c0                	test   %eax,%eax
   139a2:	0f 94 c0             	sete   %al
   139a5:	0f b6 c0             	movzbl %al,%eax
}
   139a8:	c9                   	leave  
   139a9:	c3                   	ret    

000139aa <mutex_init>:
/**
 * @brief  初始化互斥锁
 *
 * @param mutex
 */
void mutex_init(mutex_t *mutex) {
   139aa:	55                   	push   %ebp
   139ab:	89 e5                	mov    %esp,%ebp
   139ad:	83 ec 08             	sub    $0x8,%esp
  ASSERT(mutex != (mutex_t *)0);
   139b0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   139b4:	75 19                	jne    139cf <mutex_init+0x25>
   139b6:	68 7a 5a 01 00       	push   $0x15a7a
   139bb:	68 c8 5a 01 00       	push   $0x15ac8
   139c0:	6a 15                	push   $0x15
   139c2:	68 90 5a 01 00       	push   $0x15a90
   139c7:	e8 f3 06 00 00       	call   140bf <pannic>
   139cc:	83 c4 10             	add    $0x10,%esp

  mutex->locked_count = 0;
   139cf:	8b 45 08             	mov    0x8(%ebp),%eax
   139d2:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  mutex->owner = (task_t *)0;
   139d9:	8b 45 08             	mov    0x8(%ebp),%eax
   139dc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  list_init(&mutex->wait_list);
   139e2:	8b 45 08             	mov    0x8(%ebp),%eax
   139e5:	83 c0 08             	add    $0x8,%eax
   139e8:	83 ec 0c             	sub    $0xc,%esp
   139eb:	50                   	push   %eax
   139ec:	e8 3d ff ff ff       	call   1392e <list_init>
   139f1:	83 c4 10             	add    $0x10,%esp
}
   139f4:	90                   	nop
   139f5:	c9                   	leave  
   139f6:	c3                   	ret    

000139f7 <mutex_lock>:
/**
 * @brief  加锁
 *
 * @param mutex
 */
void mutex_lock(mutex_t *mutex) {
   139f7:	55                   	push   %ebp
   139f8:	89 e5                	mov    %esp,%ebp
   139fa:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   139fd:	e8 76 f5 ff ff       	call   12f78 <idt_enter_protection>
   13a02:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 1. 获取当前任务
  task_t *curr = task_current();
   13a05:	e8 93 de ff ff       	call   1189d <task_current>
   13a0a:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 2.判断该锁是否已被加锁
  if (mutex->locked_count == 0) {  
   13a0d:	8b 45 08             	mov    0x8(%ebp),%eax
   13a10:	8b 40 04             	mov    0x4(%eax),%eax
   13a13:	85 c0                	test   %eax,%eax
   13a15:	75 19                	jne    13a30 <mutex_lock+0x39>
    //3.还未被加锁，则加锁并记录拥有该锁的任务
    mutex->locked_count++;
   13a17:	8b 45 08             	mov    0x8(%ebp),%eax
   13a1a:	8b 40 04             	mov    0x4(%eax),%eax
   13a1d:	8d 50 01             	lea    0x1(%eax),%edx
   13a20:	8b 45 08             	mov    0x8(%ebp),%eax
   13a23:	89 50 04             	mov    %edx,0x4(%eax)
    mutex->owner = curr;
   13a26:	8b 45 08             	mov    0x8(%ebp),%eax
   13a29:	8b 55 f0             	mov    -0x10(%ebp),%edx
   13a2c:	89 10                	mov    %edx,(%eax)
   13a2e:	eb 47                	jmp    13a77 <mutex_lock+0x80>
  } else if (mutex->owner == curr) {
   13a30:	8b 45 08             	mov    0x8(%ebp),%eax
   13a33:	8b 00                	mov    (%eax),%eax
   13a35:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   13a38:	75 11                	jne    13a4b <mutex_lock+0x54>
    //4.已被加锁，但当前加锁请求的任务为当前锁的拥有者，直接再加锁即可
    mutex->locked_count++;
   13a3a:	8b 45 08             	mov    0x8(%ebp),%eax
   13a3d:	8b 40 04             	mov    0x4(%eax),%eax
   13a40:	8d 50 01             	lea    0x1(%eax),%edx
   13a43:	8b 45 08             	mov    0x8(%ebp),%eax
   13a46:	89 50 04             	mov    %edx,0x4(%eax)
   13a49:	eb 2c                	jmp    13a77 <mutex_lock+0x80>
  } else {  
    //5.已被加锁，且当前任务不是锁的拥有者，则当前任务进入锁的等待队列，被阻塞住
    task_set_unready(curr);
   13a4b:	83 ec 0c             	sub    $0xc,%esp
   13a4e:	ff 75 f0             	push   -0x10(%ebp)
   13a51:	e8 ce dd ff ff       	call   11824 <task_set_unready>
   13a56:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&mutex->wait_list, &curr->wait_node);
   13a59:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13a5c:	8d 50 50             	lea    0x50(%eax),%edx
   13a5f:	8b 45 08             	mov    0x8(%ebp),%eax
   13a62:	83 c0 08             	add    $0x8,%eax
   13a65:	83 ec 08             	sub    $0x8,%esp
   13a68:	52                   	push   %edx
   13a69:	50                   	push   %eax
   13a6a:	e8 62 10 00 00       	call   14ad1 <list_insert_last>
   13a6f:	83 c4 10             	add    $0x10,%esp
    task_switch();
   13a72:	e8 30 de ff ff       	call   118a7 <task_switch>
  }

  idt_leave_protection(state);  // TODO:解锁
   13a77:	83 ec 0c             	sub    $0xc,%esp
   13a7a:	ff 75 f4             	push   -0xc(%ebp)
   13a7d:	e8 0e f5 ff ff       	call   12f90 <idt_leave_protection>
   13a82:	83 c4 10             	add    $0x10,%esp
}
   13a85:	90                   	nop
   13a86:	c9                   	leave  
   13a87:	c3                   	ret    

00013a88 <mutex_unlock>:
/**
 * @brief  解锁
 *
 * @param mutex
 */
void mutex_unlock(mutex_t *mutex) {
   13a88:	55                   	push   %ebp
   13a89:	89 e5                	mov    %esp,%ebp
   13a8b:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   13a8e:	e8 e5 f4 ff ff       	call   12f78 <idt_enter_protection>
   13a93:	89 45 f4             	mov    %eax,-0xc(%ebp)

  task_t *curr = task_current();
   13a96:	e8 02 de ff ff       	call   1189d <task_current>
   13a9b:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 1.判断当前任务是否是锁的拥有者
  if (mutex->owner == curr) {
   13a9e:	8b 45 08             	mov    0x8(%ebp),%eax
   13aa1:	8b 00                	mov    (%eax),%eax
   13aa3:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   13aa6:	0f 85 83 00 00 00    	jne    13b2f <mutex_unlock+0xa7>
    //2.当前任务是锁的拥有者,对锁进行一次解锁，并判断是否已完全解锁
    if (--mutex->locked_count == 0) {
   13aac:	8b 45 08             	mov    0x8(%ebp),%eax
   13aaf:	8b 40 04             	mov    0x4(%eax),%eax
   13ab2:	8d 50 ff             	lea    -0x1(%eax),%edx
   13ab5:	8b 45 08             	mov    0x8(%ebp),%eax
   13ab8:	89 50 04             	mov    %edx,0x4(%eax)
   13abb:	8b 45 08             	mov    0x8(%ebp),%eax
   13abe:	8b 40 04             	mov    0x4(%eax),%eax
   13ac1:	85 c0                	test   %eax,%eax
   13ac3:	75 6a                	jne    13b2f <mutex_unlock+0xa7>
      //3.锁已被完全解锁,将锁的所有者置空
      mutex->owner = (task_t*)0;
   13ac5:	8b 45 08             	mov    0x8(%ebp),%eax
   13ac8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      //4.判断当前等待队列是否为空
      if (!list_is_empty(&mutex->wait_list)) { 
   13ace:	8b 45 08             	mov    0x8(%ebp),%eax
   13ad1:	83 c0 08             	add    $0x8,%eax
   13ad4:	83 ec 0c             	sub    $0xc,%esp
   13ad7:	50                   	push   %eax
   13ad8:	e8 98 fe ff ff       	call   13975 <list_is_empty>
   13add:	83 c4 10             	add    $0x10,%esp
   13ae0:	85 c0                	test   %eax,%eax
   13ae2:	75 4b                	jne    13b2f <mutex_unlock+0xa7>
        //5.当前等待队列不为空,对锁进行加锁，并交给等待队列的第一个任务
        list_node_t *node = list_remove_first(&mutex->wait_list);
   13ae4:	8b 45 08             	mov    0x8(%ebp),%eax
   13ae7:	83 c0 08             	add    $0x8,%eax
   13aea:	83 ec 0c             	sub    $0xc,%esp
   13aed:	50                   	push   %eax
   13aee:	e8 6d 10 00 00       	call   14b60 <list_remove_first>
   13af3:	83 c4 10             	add    $0x10,%esp
   13af6:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t *task_wait = list_node_parent(node, task_t, wait_node);
   13af9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   13afd:	74 08                	je     13b07 <mutex_unlock+0x7f>
   13aff:	8b 45 ec             	mov    -0x14(%ebp),%eax
   13b02:	83 e8 50             	sub    $0x50,%eax
   13b05:	eb 05                	jmp    13b0c <mutex_unlock+0x84>
   13b07:	b8 00 00 00 00       	mov    $0x0,%eax
   13b0c:	89 45 e8             	mov    %eax,-0x18(%ebp)
        mutex->locked_count = 1;
   13b0f:	8b 45 08             	mov    0x8(%ebp),%eax
   13b12:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        mutex->owner = task_wait;
   13b19:	8b 45 08             	mov    0x8(%ebp),%eax
   13b1c:	8b 55 e8             	mov    -0x18(%ebp),%edx
   13b1f:	89 10                	mov    %edx,(%eax)
        //6.让该任务进入就绪队列
        task_set_ready(task_wait);
   13b21:	83 ec 0c             	sub    $0xc,%esp
   13b24:	ff 75 e8             	push   -0x18(%ebp)
   13b27:	e8 ad dc ff ff       	call   117d9 <task_set_ready>
   13b2c:	83 c4 10             	add    $0x10,%esp
      }
    }
  }

  idt_leave_protection(state);  // TODO:解锁
   13b2f:	83 ec 0c             	sub    $0xc,%esp
   13b32:	ff 75 f4             	push   -0xc(%ebp)
   13b35:	e8 56 f4 ff ff       	call   12f90 <idt_leave_protection>
   13b3a:	83 c4 10             	add    $0x10,%esp
}
   13b3d:	90                   	nop
   13b3e:	c9                   	leave  
   13b3f:	c3                   	ret    

00013b40 <list_init>:
static inline void list_init(list_t *list) {
   13b40:	55                   	push   %ebp
   13b41:	89 e5                	mov    %esp,%ebp
   13b43:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   13b46:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13b4a:	75 19                	jne    13b65 <list_init+0x25>
   13b4c:	68 f0 5a 01 00       	push   $0x15af0
   13b51:	68 94 5b 01 00       	push   $0x15b94
   13b56:	6a 31                	push   $0x31
   13b58:	68 04 5b 01 00       	push   $0x15b04
   13b5d:	e8 5d 05 00 00       	call   140bf <pannic>
   13b62:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   13b65:	8b 45 08             	mov    0x8(%ebp),%eax
   13b68:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   13b6f:	8b 45 08             	mov    0x8(%ebp),%eax
   13b72:	8b 50 04             	mov    0x4(%eax),%edx
   13b75:	8b 45 08             	mov    0x8(%ebp),%eax
   13b78:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   13b7a:	8b 45 08             	mov    0x8(%ebp),%eax
   13b7d:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   13b84:	90                   	nop
   13b85:	c9                   	leave  
   13b86:	c3                   	ret    

00013b87 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   13b87:	55                   	push   %ebp
   13b88:	89 e5                	mov    %esp,%ebp
   13b8a:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   13b8d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13b91:	75 19                	jne    13bac <list_is_empty+0x25>
   13b93:	68 f0 5a 01 00       	push   $0x15af0
   13b98:	68 a0 5b 01 00       	push   $0x15ba0
   13b9d:	6a 38                	push   $0x38
   13b9f:	68 04 5b 01 00       	push   $0x15b04
   13ba4:	e8 16 05 00 00       	call   140bf <pannic>
   13ba9:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   13bac:	8b 45 08             	mov    0x8(%ebp),%eax
   13baf:	8b 40 08             	mov    0x8(%eax),%eax
   13bb2:	85 c0                	test   %eax,%eax
   13bb4:	0f 94 c0             	sete   %al
   13bb7:	0f b6 c0             	movzbl %al,%eax
}
   13bba:	c9                   	leave  
   13bbb:	c3                   	ret    

00013bbc <sem_init>:
 * @brief  初始化信号量对象
 * 
 * @param sem 信号量对象
 * @param init_count 初始化信号量数量 
 */
void sem_init(sem_t *sem, int init_count) {
   13bbc:	55                   	push   %ebp
   13bbd:	89 e5                	mov    %esp,%ebp
   13bbf:	83 ec 08             	sub    $0x8,%esp
    ASSERT(sem != (sem_t*)0);
   13bc2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13bc6:	75 19                	jne    13be1 <sem_init+0x25>
   13bc8:	68 42 5b 01 00       	push   $0x15b42
   13bcd:	68 88 5b 01 00       	push   $0x15b88
   13bd2:	6a 18                	push   $0x18
   13bd4:	68 54 5b 01 00       	push   $0x15b54
   13bd9:	e8 e1 04 00 00       	call   140bf <pannic>
   13bde:	83 c4 10             	add    $0x10,%esp
    sem->count = 0;
   13be1:	8b 45 08             	mov    0x8(%ebp),%eax
   13be4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list_init(&sem->wait_list);
   13bea:	8b 45 08             	mov    0x8(%ebp),%eax
   13bed:	83 c0 04             	add    $0x4,%eax
   13bf0:	83 ec 0c             	sub    $0xc,%esp
   13bf3:	50                   	push   %eax
   13bf4:	e8 47 ff ff ff       	call   13b40 <list_init>
   13bf9:	83 c4 10             	add    $0x10,%esp
}
   13bfc:	90                   	nop
   13bfd:	c9                   	leave  
   13bfe:	c3                   	ret    

00013bff <sem_wait>:
 *         信号量相当于入场券，获取信号量之后才有资格访问信号量保护的资源
 * 
 * @param sem 
 * @param init_count 
 */
void sem_wait(sem_t *sem) {
   13bff:	55                   	push   %ebp
   13c00:	89 e5                	mov    %esp,%ebp
   13c02:	83 ec 18             	sub    $0x18,%esp
    
    idt_state_t state = idt_enter_protection();//TODO:加锁
   13c05:	e8 6e f3 ff ff       	call   12f78 <idt_enter_protection>
   13c0a:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //1.判断信号量是否还有剩余
    if(sem->count > 0) {//有剩余，直接使用，任务获取信号量继续执行
   13c0d:	8b 45 08             	mov    0x8(%ebp),%eax
   13c10:	8b 00                	mov    (%eax),%eax
   13c12:	85 c0                	test   %eax,%eax
   13c14:	7e 0f                	jle    13c25 <sem_wait+0x26>
        --sem->count;   
   13c16:	8b 45 08             	mov    0x8(%ebp),%eax
   13c19:	8b 00                	mov    (%eax),%eax
   13c1b:	8d 50 ff             	lea    -0x1(%eax),%edx
   13c1e:	8b 45 08             	mov    0x8(%ebp),%eax
   13c21:	89 10                	mov    %edx,(%eax)
   13c23:	eb 34                	jmp    13c59 <sem_wait+0x5a>
    } else {//没有剩余，任务进入延时队列等待信号量
        task_t *curr = task_current();
   13c25:	e8 73 dc ff ff       	call   1189d <task_current>
   13c2a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        //2.将当前任务从就绪队列中取下
        task_set_unready(curr); 
   13c2d:	83 ec 0c             	sub    $0xc,%esp
   13c30:	ff 75 f0             	push   -0x10(%ebp)
   13c33:	e8 ec db ff ff       	call   11824 <task_set_unready>
   13c38:	83 c4 10             	add    $0x10,%esp
        //3.将当前任务加入到信号量等待队列
        list_insert_last(&sem->wait_list, &curr->wait_node); 
   13c3b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13c3e:	8d 50 50             	lea    0x50(%eax),%edx
   13c41:	8b 45 08             	mov    0x8(%ebp),%eax
   13c44:	83 c0 04             	add    $0x4,%eax
   13c47:	83 ec 08             	sub    $0x8,%esp
   13c4a:	52                   	push   %edx
   13c4b:	50                   	push   %eax
   13c4c:	e8 80 0e 00 00       	call   14ad1 <list_insert_last>
   13c51:	83 c4 10             	add    $0x10,%esp
        //4.切换任务
        task_switch();
   13c54:	e8 4e dc ff ff       	call   118a7 <task_switch>
    }

    idt_leave_protection(state);//TODO:解锁
   13c59:	83 ec 0c             	sub    $0xc,%esp
   13c5c:	ff 75 f4             	push   -0xc(%ebp)
   13c5f:	e8 2c f3 ff ff       	call   12f90 <idt_leave_protection>
   13c64:	83 c4 10             	add    $0x10,%esp
}
   13c67:	90                   	nop
   13c68:	c9                   	leave  
   13c69:	c3                   	ret    

00013c6a <sem_notify>:
 *        等待队列中若有任务则直接获取该信号量，继续执行即访问资源
 *         若没有任务，则信号量对象记录的信号量数量加1，预留给下一次获取
 * 
 * @param sem 
 */
void sem_notify(sem_t *sem) {
   13c6a:	55                   	push   %ebp
   13c6b:	89 e5                	mov    %esp,%ebp
   13c6d:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   13c70:	e8 03 f3 ff ff       	call   12f78 <idt_enter_protection>
   13c75:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if (!list_is_empty(&sem->wait_list)) {
   13c78:	8b 45 08             	mov    0x8(%ebp),%eax
   13c7b:	83 c0 04             	add    $0x4,%eax
   13c7e:	83 ec 0c             	sub    $0xc,%esp
   13c81:	50                   	push   %eax
   13c82:	e8 00 ff ff ff       	call   13b87 <list_is_empty>
   13c87:	83 c4 10             	add    $0x10,%esp
   13c8a:	85 c0                	test   %eax,%eax
   13c8c:	75 3b                	jne    13cc9 <sem_notify+0x5f>
        list_node_t *node = list_remove_first(&sem->wait_list);
   13c8e:	8b 45 08             	mov    0x8(%ebp),%eax
   13c91:	83 c0 04             	add    $0x4,%eax
   13c94:	83 ec 0c             	sub    $0xc,%esp
   13c97:	50                   	push   %eax
   13c98:	e8 c3 0e 00 00       	call   14b60 <list_remove_first>
   13c9d:	83 c4 10             	add    $0x10,%esp
   13ca0:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t *task = list_node_parent(node, task_t, wait_node);
   13ca3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   13ca7:	74 08                	je     13cb1 <sem_notify+0x47>
   13ca9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13cac:	83 e8 50             	sub    $0x50,%eax
   13caf:	eb 05                	jmp    13cb6 <sem_notify+0x4c>
   13cb1:	b8 00 00 00 00       	mov    $0x0,%eax
   13cb6:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   13cb9:	83 ec 0c             	sub    $0xc,%esp
   13cbc:	ff 75 ec             	push   -0x14(%ebp)
   13cbf:	e8 15 db ff ff       	call   117d9 <task_set_ready>
   13cc4:	83 c4 10             	add    $0x10,%esp
   13cc7:	eb 0d                	jmp    13cd6 <sem_notify+0x6c>
    } else {
        sem->count++;
   13cc9:	8b 45 08             	mov    0x8(%ebp),%eax
   13ccc:	8b 00                	mov    (%eax),%eax
   13cce:	8d 50 01             	lea    0x1(%eax),%edx
   13cd1:	8b 45 08             	mov    0x8(%ebp),%eax
   13cd4:	89 10                	mov    %edx,(%eax)
    }

    idt_leave_protection(state);//TODO:解锁
   13cd6:	83 ec 0c             	sub    $0xc,%esp
   13cd9:	ff 75 f4             	push   -0xc(%ebp)
   13cdc:	e8 af f2 ff ff       	call   12f90 <idt_leave_protection>
   13ce1:	83 c4 10             	add    $0x10,%esp

}
   13ce4:	90                   	nop
   13ce5:	c9                   	leave  
   13ce6:	c3                   	ret    

00013ce7 <sem_count>:

int sem_count(sem_t *sem) {
   13ce7:	55                   	push   %ebp
   13ce8:	89 e5                	mov    %esp,%ebp
   13cea:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   13ced:	e8 86 f2 ff ff       	call   12f78 <idt_enter_protection>
   13cf2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   13cf5:	8b 45 08             	mov    0x8(%ebp),%eax
   13cf8:	8b 00                	mov    (%eax),%eax
   13cfa:	89 45 f0             	mov    %eax,-0x10(%ebp)
    idt_leave_protection(state);//TODO:解锁
   13cfd:	83 ec 0c             	sub    $0xc,%esp
   13d00:	ff 75 f4             	push   -0xc(%ebp)
   13d03:	e8 88 f2 ff ff       	call   12f90 <idt_leave_protection>
   13d08:	83 c4 10             	add    $0x10,%esp

    return count;
   13d0b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13d0e:	c9                   	leave  
   13d0f:	c3                   	ret    

00013d10 <list_init>:
static inline void list_init(list_t *list) {
   13d10:	55                   	push   %ebp
   13d11:	89 e5                	mov    %esp,%ebp
   13d13:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   13d16:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13d1a:	75 19                	jne    13d35 <list_init+0x25>
   13d1c:	68 b0 5b 01 00       	push   $0x15bb0
   13d21:	68 b4 5c 01 00       	push   $0x15cb4
   13d26:	6a 31                	push   $0x31
   13d28:	68 c4 5b 01 00       	push   $0x15bc4
   13d2d:	e8 8d 03 00 00       	call   140bf <pannic>
   13d32:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   13d35:	8b 45 08             	mov    0x8(%ebp),%eax
   13d38:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   13d3f:	8b 45 08             	mov    0x8(%ebp),%eax
   13d42:	8b 50 04             	mov    0x4(%eax),%edx
   13d45:	8b 45 08             	mov    0x8(%ebp),%eax
   13d48:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   13d4a:	8b 45 08             	mov    0x8(%ebp),%eax
   13d4d:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   13d54:	90                   	nop
   13d55:	c9                   	leave  
   13d56:	c3                   	ret    

00013d57 <list_get_size>:
static inline int list_get_size(list_t *list) {
   13d57:	55                   	push   %ebp
   13d58:	89 e5                	mov    %esp,%ebp
   13d5a:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   13d5d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13d61:	75 19                	jne    13d7c <list_get_size+0x25>
   13d63:	68 b0 5b 01 00       	push   $0x15bb0
   13d68:	68 c0 5c 01 00       	push   $0x15cc0
   13d6d:	6a 3e                	push   $0x3e
   13d6f:	68 c4 5b 01 00       	push   $0x15bc4
   13d74:	e8 46 03 00 00       	call   140bf <pannic>
   13d79:	83 c4 10             	add    $0x10,%esp
    return list->size;
   13d7c:	8b 45 08             	mov    0x8(%ebp),%eax
   13d7f:	8b 40 08             	mov    0x8(%eax),%eax
}
   13d82:	c9                   	leave  
   13d83:	c3                   	ret    

00013d84 <list_get_first>:
static inline list_node_t *list_get_first(list_t *list) {
   13d84:	55                   	push   %ebp
   13d85:	89 e5                	mov    %esp,%ebp
   13d87:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   13d8a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13d8e:	75 19                	jne    13da9 <list_get_first+0x25>
   13d90:	68 b0 5b 01 00       	push   $0x15bb0
   13d95:	68 e0 5c 01 00       	push   $0x15ce0
   13d9a:	6a 44                	push   $0x44
   13d9c:	68 c4 5b 01 00       	push   $0x15bc4
   13da1:	e8 19 03 00 00       	call   140bf <pannic>
   13da6:	83 c4 10             	add    $0x10,%esp
    return list->first;
   13da9:	8b 45 08             	mov    0x8(%ebp),%eax
   13dac:	8b 00                	mov    (%eax),%eax
}
   13dae:	c9                   	leave  
   13daf:	c3                   	ret    

00013db0 <list_get_last>:

static inline list_node_t *list_get_last(list_t *list) {
   13db0:	55                   	push   %ebp
   13db1:	89 e5                	mov    %esp,%ebp
   13db3:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   13db6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13dba:	75 19                	jne    13dd5 <list_get_last+0x25>
   13dbc:	68 b0 5b 01 00       	push   $0x15bb0
   13dc1:	68 d0 5c 01 00       	push   $0x15cd0
   13dc6:	6a 4a                	push   $0x4a
   13dc8:	68 c4 5b 01 00       	push   $0x15bc4
   13dcd:	e8 ed 02 00 00       	call   140bf <pannic>
   13dd2:	83 c4 10             	add    $0x10,%esp

    return list->last;
   13dd5:	8b 45 08             	mov    0x8(%ebp),%eax
   13dd8:	8b 40 04             	mov    0x4(%eax),%eax
}
   13ddb:	c9                   	leave  
   13ddc:	c3                   	ret    

00013ddd <list_test>:

#include "tools/list.h"
#include "tools/log.h"
#include "common/types.h"

void list_test(void) {
   13ddd:	55                   	push   %ebp
   13dde:	89 e5                	mov    %esp,%ebp
   13de0:	56                   	push   %esi
   13de1:	53                   	push   %ebx
   13de2:	83 ec 70             	sub    $0x70,%esp
    list_t list;
    list_node_t nodes[5];

    list_init(&list);
   13de5:	83 ec 0c             	sub    $0xc,%esp
   13de8:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   13deb:	50                   	push   %eax
   13dec:	e8 1f ff ff ff       	call   13d10 <list_init>
   13df1:	83 c4 10             	add    $0x10,%esp
    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   13df4:	83 ec 0c             	sub    $0xc,%esp
   13df7:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   13dfa:	50                   	push   %eax
   13dfb:	e8 57 ff ff ff       	call   13d57 <list_get_size>
   13e00:	83 c4 10             	add    $0x10,%esp
   13e03:	89 c6                	mov    %eax,%esi
   13e05:	83 ec 0c             	sub    $0xc,%esp
   13e08:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   13e0b:	50                   	push   %eax
   13e0c:	e8 9f ff ff ff       	call   13db0 <list_get_last>
   13e11:	83 c4 10             	add    $0x10,%esp
   13e14:	89 c3                	mov    %eax,%ebx
   13e16:	83 ec 0c             	sub    $0xc,%esp
   13e19:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   13e1c:	50                   	push   %eax
   13e1d:	e8 62 ff ff ff       	call   13d84 <list_get_first>
   13e22:	83 c4 10             	add    $0x10,%esp
   13e25:	56                   	push   %esi
   13e26:	53                   	push   %ebx
   13e27:	50                   	push   %eax
   13e28:	68 04 5c 01 00       	push   $0x15c04
   13e2d:	e8 76 0f 00 00       	call   14da8 <log_printf>
   13e32:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_insert_first
    for (int i = 0; i < 5; ++i) {
   13e35:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   13e3c:	eb 3f                	jmp    13e7d <list_test+0xa0>
        list_node_t *node = nodes + i;
   13e3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13e41:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   13e48:	8d 45 9c             	lea    -0x64(%ebp),%eax
   13e4b:	01 d0                	add    %edx,%eax
   13e4d:	89 45 d0             	mov    %eax,-0x30(%ebp)

        log_printf("insert first to list: %d, 0x%x", i, (uint32_t)node);
   13e50:	8b 45 d0             	mov    -0x30(%ebp),%eax
   13e53:	83 ec 04             	sub    $0x4,%esp
   13e56:	50                   	push   %eax
   13e57:	ff 75 f4             	push   -0xc(%ebp)
   13e5a:	68 2c 5c 01 00       	push   $0x15c2c
   13e5f:	e8 44 0f 00 00       	call   14da8 <log_printf>
   13e64:	83 c4 10             	add    $0x10,%esp
        list_insert_first(&list, node);
   13e67:	83 ec 08             	sub    $0x8,%esp
   13e6a:	ff 75 d0             	push   -0x30(%ebp)
   13e6d:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   13e70:	50                   	push   %eax
   13e71:	e8 d0 0b 00 00       	call   14a46 <list_insert_first>
   13e76:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   13e79:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   13e7d:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   13e81:	7e bb                	jle    13e3e <list_test+0x61>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   13e83:	83 ec 0c             	sub    $0xc,%esp
   13e86:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   13e89:	50                   	push   %eax
   13e8a:	e8 c8 fe ff ff       	call   13d57 <list_get_size>
   13e8f:	83 c4 10             	add    $0x10,%esp
   13e92:	89 c6                	mov    %eax,%esi
   13e94:	83 ec 0c             	sub    $0xc,%esp
   13e97:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   13e9a:	50                   	push   %eax
   13e9b:	e8 10 ff ff ff       	call   13db0 <list_get_last>
   13ea0:	83 c4 10             	add    $0x10,%esp
   13ea3:	89 c3                	mov    %eax,%ebx
   13ea5:	83 ec 0c             	sub    $0xc,%esp
   13ea8:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   13eab:	50                   	push   %eax
   13eac:	e8 d3 fe ff ff       	call   13d84 <list_get_first>
   13eb1:	83 c4 10             	add    $0x10,%esp
   13eb4:	56                   	push   %esi
   13eb5:	53                   	push   %ebx
   13eb6:	50                   	push   %eax
   13eb7:	68 04 5c 01 00       	push   $0x15c04
   13ebc:	e8 e7 0e 00 00       	call   14da8 <log_printf>
   13ec1:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

   
    //测试list_remove_first
    for (int i = 0; i < 5; ++i) {
   13ec4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   13ecb:	eb 2d                	jmp    13efa <list_test+0x11d>
        list_node_t *node = list_remove_first(&list);
   13ecd:	83 ec 0c             	sub    $0xc,%esp
   13ed0:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   13ed3:	50                   	push   %eax
   13ed4:	e8 87 0c 00 00       	call   14b60 <list_remove_first>
   13ed9:	83 c4 10             	add    $0x10,%esp
   13edc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        log_printf("remove first: %d, 0x%x", i, (uint32_t)node);
   13edf:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   13ee2:	83 ec 04             	sub    $0x4,%esp
   13ee5:	50                   	push   %eax
   13ee6:	ff 75 f0             	push   -0x10(%ebp)
   13ee9:	68 4b 5c 01 00       	push   $0x15c4b
   13eee:	e8 b5 0e 00 00       	call   14da8 <log_printf>
   13ef3:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   13ef6:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   13efa:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   13efe:	7e cd                	jle    13ecd <list_test+0xf0>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   13f00:	83 ec 0c             	sub    $0xc,%esp
   13f03:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   13f06:	50                   	push   %eax
   13f07:	e8 4b fe ff ff       	call   13d57 <list_get_size>
   13f0c:	83 c4 10             	add    $0x10,%esp
   13f0f:	89 c6                	mov    %eax,%esi
   13f11:	83 ec 0c             	sub    $0xc,%esp
   13f14:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   13f17:	50                   	push   %eax
   13f18:	e8 93 fe ff ff       	call   13db0 <list_get_last>
   13f1d:	83 c4 10             	add    $0x10,%esp
   13f20:	89 c3                	mov    %eax,%ebx
   13f22:	83 ec 0c             	sub    $0xc,%esp
   13f25:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   13f28:	50                   	push   %eax
   13f29:	e8 56 fe ff ff       	call   13d84 <list_get_first>
   13f2e:	83 c4 10             	add    $0x10,%esp
   13f31:	56                   	push   %esi
   13f32:	53                   	push   %ebx
   13f33:	50                   	push   %eax
   13f34:	68 04 5c 01 00       	push   $0x15c04
   13f39:	e8 6a 0e 00 00       	call   14da8 <log_printf>
   13f3e:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    

    //测试list_insert_last
    for (int i = 0; i < 5; ++i) {
   13f41:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   13f48:	eb 3f                	jmp    13f89 <list_test+0x1ac>
        list_node_t *node = nodes + i;
   13f4a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   13f4d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   13f54:	8d 45 9c             	lea    -0x64(%ebp),%eax
   13f57:	01 d0                	add    %edx,%eax
   13f59:	89 45 d8             	mov    %eax,-0x28(%ebp)

        log_printf("insert last to list: %d, 0x%x", i, (uint32_t)node);
   13f5c:	8b 45 d8             	mov    -0x28(%ebp),%eax
   13f5f:	83 ec 04             	sub    $0x4,%esp
   13f62:	50                   	push   %eax
   13f63:	ff 75 ec             	push   -0x14(%ebp)
   13f66:	68 62 5c 01 00       	push   $0x15c62
   13f6b:	e8 38 0e 00 00       	call   14da8 <log_printf>
   13f70:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&list, node);
   13f73:	83 ec 08             	sub    $0x8,%esp
   13f76:	ff 75 d8             	push   -0x28(%ebp)
   13f79:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   13f7c:	50                   	push   %eax
   13f7d:	e8 4f 0b 00 00       	call   14ad1 <list_insert_last>
   13f82:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   13f85:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   13f89:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   13f8d:	7e bb                	jle    13f4a <list_test+0x16d>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   13f8f:	83 ec 0c             	sub    $0xc,%esp
   13f92:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   13f95:	50                   	push   %eax
   13f96:	e8 bc fd ff ff       	call   13d57 <list_get_size>
   13f9b:	83 c4 10             	add    $0x10,%esp
   13f9e:	89 c6                	mov    %eax,%esi
   13fa0:	83 ec 0c             	sub    $0xc,%esp
   13fa3:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   13fa6:	50                   	push   %eax
   13fa7:	e8 04 fe ff ff       	call   13db0 <list_get_last>
   13fac:	83 c4 10             	add    $0x10,%esp
   13faf:	89 c3                	mov    %eax,%ebx
   13fb1:	83 ec 0c             	sub    $0xc,%esp
   13fb4:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   13fb7:	50                   	push   %eax
   13fb8:	e8 c7 fd ff ff       	call   13d84 <list_get_first>
   13fbd:	83 c4 10             	add    $0x10,%esp
   13fc0:	56                   	push   %esi
   13fc1:	53                   	push   %ebx
   13fc2:	50                   	push   %eax
   13fc3:	68 04 5c 01 00       	push   $0x15c04
   13fc8:	e8 db 0d 00 00       	call   14da8 <log_printf>
   13fcd:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_remove_last
    for (int i = 0; i < 5; ++i) {
   13fd0:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   13fd7:	eb 2d                	jmp    14006 <list_test+0x229>
        list_node_t *node = list_remove_last(&list);
   13fd9:	83 ec 0c             	sub    $0xc,%esp
   13fdc:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   13fdf:	50                   	push   %eax
   13fe0:	e8 2c 0c 00 00       	call   14c11 <list_remove_last>
   13fe5:	83 c4 10             	add    $0x10,%esp
   13fe8:	89 45 dc             	mov    %eax,-0x24(%ebp)
        log_printf("remove last: %d, 0x%x", i, (uint32_t)node);
   13feb:	8b 45 dc             	mov    -0x24(%ebp),%eax
   13fee:	83 ec 04             	sub    $0x4,%esp
   13ff1:	50                   	push   %eax
   13ff2:	ff 75 e8             	push   -0x18(%ebp)
   13ff5:	68 80 5c 01 00       	push   $0x15c80
   13ffa:	e8 a9 0d 00 00       	call   14da8 <log_printf>
   13fff:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   14002:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   14006:	83 7d e8 04          	cmpl   $0x4,-0x18(%ebp)
   1400a:	7e cd                	jle    13fd9 <list_test+0x1fc>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   1400c:	83 ec 0c             	sub    $0xc,%esp
   1400f:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   14012:	50                   	push   %eax
   14013:	e8 3f fd ff ff       	call   13d57 <list_get_size>
   14018:	83 c4 10             	add    $0x10,%esp
   1401b:	89 c6                	mov    %eax,%esi
   1401d:	83 ec 0c             	sub    $0xc,%esp
   14020:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   14023:	50                   	push   %eax
   14024:	e8 87 fd ff ff       	call   13db0 <list_get_last>
   14029:	83 c4 10             	add    $0x10,%esp
   1402c:	89 c3                	mov    %eax,%ebx
   1402e:	83 ec 0c             	sub    $0xc,%esp
   14031:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   14034:	50                   	push   %eax
   14035:	e8 4a fd ff ff       	call   13d84 <list_get_first>
   1403a:	83 c4 10             	add    $0x10,%esp
   1403d:	56                   	push   %esi
   1403e:	53                   	push   %ebx
   1403f:	50                   	push   %eax
   14040:	68 04 5c 01 00       	push   $0x15c04
   14045:	e8 5e 0d 00 00       	call   14da8 <log_printf>
   1404a:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    
    struct type_t {
        int i;
        list_node_t node;
    }v = {0x123456};
   1404d:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
   14054:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
   1405b:	c7 45 98 00 00 00 00 	movl   $0x0,-0x68(%ebp)
   14062:	c7 45 90 56 34 12 00 	movl   $0x123456,-0x70(%ebp)

    list_node_t *v_node = &v.node;
   14069:	8d 45 90             	lea    -0x70(%ebp),%eax
   1406c:	83 c0 04             	add    $0x4,%eax
   1406f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    struct type_t *p = list_node_parent(v_node, struct type_t, node);  
   14072:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   14076:	74 08                	je     14080 <list_test+0x2a3>
   14078:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1407b:	83 e8 04             	sub    $0x4,%eax
   1407e:	eb 05                	jmp    14085 <list_test+0x2a8>
   14080:	b8 00 00 00 00       	mov    $0x0,%eax
   14085:	89 45 e0             	mov    %eax,-0x20(%ebp)

    log_printf("v addr = 0x%x", (uint32_t)&v);
   14088:	8d 45 90             	lea    -0x70(%ebp),%eax
   1408b:	83 ec 08             	sub    $0x8,%esp
   1408e:	50                   	push   %eax
   1408f:	68 96 5c 01 00       	push   $0x15c96
   14094:	e8 0f 0d 00 00       	call   14da8 <log_printf>
   14099:	83 c4 10             	add    $0x10,%esp
    log_printf("p addr = 0x%x", (uint32_t)p);  
   1409c:	8b 45 e0             	mov    -0x20(%ebp),%eax
   1409f:	83 ec 08             	sub    $0x8,%esp
   140a2:	50                   	push   %eax
   140a3:	68 a4 5c 01 00       	push   $0x15ca4
   140a8:	e8 fb 0c 00 00       	call   14da8 <log_printf>
   140ad:	83 c4 10             	add    $0x10,%esp

 }
   140b0:	90                   	nop
   140b1:	8d 65 f8             	lea    -0x8(%ebp),%esp
   140b4:	5b                   	pop    %ebx
   140b5:	5e                   	pop    %esi
   140b6:	5d                   	pop    %ebp
   140b7:	c3                   	ret    

000140b8 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   140b8:	55                   	push   %ebp
   140b9:	89 e5                	mov    %esp,%ebp
   140bb:	f4                   	hlt    
   140bc:	90                   	nop
   140bd:	5d                   	pop    %ebp
   140be:	c3                   	ret    

000140bf <pannic>:
 * @param file 异常所在文件绝对路径
 * @param line 异常所在行号
 * @param func 异常所在函数名 
 * @param reason 异常的原因
 */
void pannic(const char *file, int line, const char *func, const char *reason) {
   140bf:	55                   	push   %ebp
   140c0:	89 e5                	mov    %esp,%ebp
   140c2:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert faild! %s", reason);
   140c5:	83 ec 08             	sub    $0x8,%esp
   140c8:	ff 75 14             	push   0x14(%ebp)
   140cb:	68 ef 5c 01 00       	push   $0x15cef
   140d0:	e8 d3 0c 00 00       	call   14da8 <log_printf>
   140d5:	83 c4 10             	add    $0x10,%esp
    log_printf("file:\t%s\nline:\t%d\nfunc:\t%s", file, line, func);
   140d8:	ff 75 10             	push   0x10(%ebp)
   140db:	ff 75 0c             	push   0xc(%ebp)
   140de:	ff 75 08             	push   0x8(%ebp)
   140e1:	68 00 5d 01 00       	push   $0x15d00
   140e6:	e8 bd 0c 00 00       	call   14da8 <log_printf>
   140eb:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   140ee:	e8 c5 ff ff ff       	call   140b8 <hlt>
   140f3:	eb f9                	jmp    140ee <pannic+0x2f>

000140f5 <bitmap_byte_count>:
 * @brief  向上取整获取位图数组中有多少字节
 * 
 * @param bit_count  位图数组拥有的bit位数
 * @return int 向上取整得到的字节数
 */
int bitmap_byte_count(int bit_count) {
   140f5:	55                   	push   %ebp
   140f6:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8;
   140f8:	8b 45 08             	mov    0x8(%ebp),%eax
   140fb:	83 c0 07             	add    $0x7,%eax
   140fe:	8d 50 07             	lea    0x7(%eax),%edx
   14101:	85 c0                	test   %eax,%eax
   14103:	0f 48 c2             	cmovs  %edx,%eax
   14106:	c1 f8 03             	sar    $0x3,%eax
}
   14109:	5d                   	pop    %ebp
   1410a:	c3                   	ret    

0001410b <bitmap_init>:
 * @param bitmap 需要初始化的位图
 * @param bits 位图所包含的位图数组的起始地址
 * @param count 页的数量
 * @param init_bit 将位图数组的每一位设置为init_bit
 */
void bitmap_init(bitmap_t *bitmap, uint8_t *bits, int count, int init_bit) {
   1410b:	55                   	push   %ebp
   1410c:	89 e5                	mov    %esp,%ebp
   1410e:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   14111:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   14115:	75 19                	jne    14130 <bitmap_init+0x25>
   14117:	68 1c 5d 01 00       	push   $0x15d1c
   1411c:	68 b0 5d 01 00       	push   $0x15db0
   14121:	6a 24                	push   $0x24
   14123:	68 34 5d 01 00       	push   $0x15d34
   14128:	e8 92 ff ff ff       	call   140bf <pannic>
   1412d:	83 c4 10             	add    $0x10,%esp
    ASSERT(bits != (uint8_t*)0);
   14130:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   14134:	75 19                	jne    1414f <bitmap_init+0x44>
   14136:	68 6c 5d 01 00       	push   $0x15d6c
   1413b:	68 b0 5d 01 00       	push   $0x15db0
   14140:	6a 25                	push   $0x25
   14142:	68 34 5d 01 00       	push   $0x15d34
   14147:	e8 73 ff ff ff       	call   140bf <pannic>
   1414c:	83 c4 10             	add    $0x10,%esp

    bitmap->bit_count = count;
   1414f:	8b 45 08             	mov    0x8(%ebp),%eax
   14152:	8b 55 10             	mov    0x10(%ebp),%edx
   14155:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   14157:	8b 45 08             	mov    0x8(%ebp),%eax
   1415a:	8b 55 0c             	mov    0xc(%ebp),%edx
   1415d:	89 50 04             	mov    %edx,0x4(%eax)

    //计算该位图需要多少字节
    int bytes = bitmap_byte_count(bitmap->bit_count);
   14160:	8b 45 08             	mov    0x8(%ebp),%eax
   14163:	8b 00                	mov    (%eax),%eax
   14165:	83 ec 0c             	sub    $0xc,%esp
   14168:	50                   	push   %eax
   14169:	e8 87 ff ff ff       	call   140f5 <bitmap_byte_count>
   1416e:	83 c4 10             	add    $0x10,%esp
   14171:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    kernel_memset(bitmap->bits, init_bit ? 0xff : 0, bytes);
   14174:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   14178:	74 07                	je     14181 <bitmap_init+0x76>
   1417a:	ba ff 00 00 00       	mov    $0xff,%edx
   1417f:	eb 05                	jmp    14186 <bitmap_init+0x7b>
   14181:	ba 00 00 00 00       	mov    $0x0,%edx
   14186:	8b 45 08             	mov    0x8(%ebp),%eax
   14189:	8b 40 04             	mov    0x4(%eax),%eax
   1418c:	83 ec 04             	sub    $0x4,%esp
   1418f:	ff 75 f4             	push   -0xc(%ebp)
   14192:	52                   	push   %edx
   14193:	50                   	push   %eax
   14194:	e8 28 04 00 00       	call   145c1 <kernel_memset>
   14199:	83 c4 10             	add    $0x10,%esp

}
   1419c:	90                   	nop
   1419d:	c9                   	leave  
   1419e:	c3                   	ret    

0001419f <bitmap_get_bit>:
 * 
 * @param bitmap 
 * @param index 
 * @return uint8_t 
 */
uint8_t bitmap_get_bit(bitmap_t *bitmap, int index) {
   1419f:	55                   	push   %ebp
   141a0:	89 e5                	mov    %esp,%ebp
   141a2:	53                   	push   %ebx
   141a3:	83 ec 04             	sub    $0x4,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   141a6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   141aa:	75 19                	jne    141c5 <bitmap_get_bit+0x26>
   141ac:	68 1c 5d 01 00       	push   $0x15d1c
   141b1:	68 bc 5d 01 00       	push   $0x15dbc
   141b6:	6a 39                	push   $0x39
   141b8:	68 34 5d 01 00       	push   $0x15d34
   141bd:	e8 fd fe ff ff       	call   140bf <pannic>
   141c2:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0);
   141c5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   141c9:	79 19                	jns    141e4 <bitmap_get_bit+0x45>
   141cb:	68 80 5d 01 00       	push   $0x15d80
   141d0:	68 bc 5d 01 00       	push   $0x15dbc
   141d5:	6a 3a                	push   $0x3a
   141d7:	68 34 5d 01 00       	push   $0x15d34
   141dc:	e8 de fe ff ff       	call   140bf <pannic>
   141e1:	83 c4 10             	add    $0x10,%esp

    return (bitmap->bits[index / 8] & (1 << (index % 8)));
   141e4:	8b 45 08             	mov    0x8(%ebp),%eax
   141e7:	8b 48 04             	mov    0x4(%eax),%ecx
   141ea:	8b 45 0c             	mov    0xc(%ebp),%eax
   141ed:	8d 50 07             	lea    0x7(%eax),%edx
   141f0:	85 c0                	test   %eax,%eax
   141f2:	0f 48 c2             	cmovs  %edx,%eax
   141f5:	c1 f8 03             	sar    $0x3,%eax
   141f8:	01 c8                	add    %ecx,%eax
   141fa:	0f b6 00             	movzbl (%eax),%eax
   141fd:	89 c3                	mov    %eax,%ebx
   141ff:	8b 45 0c             	mov    0xc(%ebp),%eax
   14202:	83 e0 07             	and    $0x7,%eax
   14205:	ba 01 00 00 00       	mov    $0x1,%edx
   1420a:	89 c1                	mov    %eax,%ecx
   1420c:	d3 e2                	shl    %cl,%edx
   1420e:	89 d0                	mov    %edx,%eax
   14210:	21 d8                	and    %ebx,%eax
}
   14212:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   14215:	c9                   	leave  
   14216:	c3                   	ret    

00014217 <bitmap_set_bit>:
 * @param bitmap 
 * @param index 
 * @param count 
 * @param bit 
 */
void bitmap_set_bit(bitmap_t *bitmap, int index, int count, int bit) {
   14217:	55                   	push   %ebp
   14218:	89 e5                	mov    %esp,%ebp
   1421a:	56                   	push   %esi
   1421b:	53                   	push   %ebx
   1421c:	83 ec 10             	sub    $0x10,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   1421f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   14223:	75 19                	jne    1423e <bitmap_set_bit+0x27>
   14225:	68 1c 5d 01 00       	push   $0x15d1c
   1422a:	68 cc 5d 01 00       	push   $0x15dcc
   1422f:	6a 48                	push   $0x48
   14231:	68 34 5d 01 00       	push   $0x15d34
   14236:	e8 84 fe ff ff       	call   140bf <pannic>
   1423b:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0 && count >= 0);
   1423e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   14242:	78 06                	js     1424a <bitmap_set_bit+0x33>
   14244:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   14248:	79 19                	jns    14263 <bitmap_set_bit+0x4c>
   1424a:	68 8b 5d 01 00       	push   $0x15d8b
   1424f:	68 cc 5d 01 00       	push   $0x15dcc
   14254:	6a 49                	push   $0x49
   14256:	68 34 5d 01 00       	push   $0x15d34
   1425b:	e8 5f fe ff ff       	call   140bf <pannic>
   14260:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   14263:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1426a:	e9 92 00 00 00       	jmp    14301 <bitmap_set_bit+0xea>
        if (bit) {
   1426f:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   14273:	74 42                	je     142b7 <bitmap_set_bit+0xa0>
            bitmap->bits[index / 8] |= (1 << (index % 8));
   14275:	8b 45 08             	mov    0x8(%ebp),%eax
   14278:	8b 48 04             	mov    0x4(%eax),%ecx
   1427b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1427e:	8d 50 07             	lea    0x7(%eax),%edx
   14281:	85 c0                	test   %eax,%eax
   14283:	0f 48 c2             	cmovs  %edx,%eax
   14286:	c1 f8 03             	sar    $0x3,%eax
   14289:	89 c2                	mov    %eax,%edx
   1428b:	89 d0                	mov    %edx,%eax
   1428d:	01 c8                	add    %ecx,%eax
   1428f:	0f b6 00             	movzbl (%eax),%eax
   14292:	89 c6                	mov    %eax,%esi
   14294:	8b 45 0c             	mov    0xc(%ebp),%eax
   14297:	83 e0 07             	and    $0x7,%eax
   1429a:	bb 01 00 00 00       	mov    $0x1,%ebx
   1429f:	89 c1                	mov    %eax,%ecx
   142a1:	d3 e3                	shl    %cl,%ebx
   142a3:	89 d8                	mov    %ebx,%eax
   142a5:	89 f1                	mov    %esi,%ecx
   142a7:	09 c1                	or     %eax,%ecx
   142a9:	8b 45 08             	mov    0x8(%ebp),%eax
   142ac:	8b 40 04             	mov    0x4(%eax),%eax
   142af:	01 d0                	add    %edx,%eax
   142b1:	89 ca                	mov    %ecx,%edx
   142b3:	88 10                	mov    %dl,(%eax)
   142b5:	eb 42                	jmp    142f9 <bitmap_set_bit+0xe2>
        } else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   142b7:	8b 45 08             	mov    0x8(%ebp),%eax
   142ba:	8b 48 04             	mov    0x4(%eax),%ecx
   142bd:	8b 45 0c             	mov    0xc(%ebp),%eax
   142c0:	8d 50 07             	lea    0x7(%eax),%edx
   142c3:	85 c0                	test   %eax,%eax
   142c5:	0f 48 c2             	cmovs  %edx,%eax
   142c8:	c1 f8 03             	sar    $0x3,%eax
   142cb:	89 c2                	mov    %eax,%edx
   142cd:	89 d0                	mov    %edx,%eax
   142cf:	01 c8                	add    %ecx,%eax
   142d1:	0f b6 00             	movzbl (%eax),%eax
   142d4:	89 c6                	mov    %eax,%esi
   142d6:	8b 45 0c             	mov    0xc(%ebp),%eax
   142d9:	83 e0 07             	and    $0x7,%eax
   142dc:	bb 01 00 00 00       	mov    $0x1,%ebx
   142e1:	89 c1                	mov    %eax,%ecx
   142e3:	d3 e3                	shl    %cl,%ebx
   142e5:	89 d8                	mov    %ebx,%eax
   142e7:	f7 d0                	not    %eax
   142e9:	89 f1                	mov    %esi,%ecx
   142eb:	21 c1                	and    %eax,%ecx
   142ed:	8b 45 08             	mov    0x8(%ebp),%eax
   142f0:	8b 40 04             	mov    0x4(%eax),%eax
   142f3:	01 d0                	add    %edx,%eax
   142f5:	89 ca                	mov    %ecx,%edx
   142f7:	88 10                	mov    %dl,(%eax)
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   142f9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   142fd:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   14301:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14304:	3b 45 10             	cmp    0x10(%ebp),%eax
   14307:	7d 0e                	jge    14317 <bitmap_set_bit+0x100>
   14309:	8b 45 08             	mov    0x8(%ebp),%eax
   1430c:	8b 00                	mov    (%eax),%eax
   1430e:	39 45 0c             	cmp    %eax,0xc(%ebp)
   14311:	0f 8c 58 ff ff ff    	jl     1426f <bitmap_set_bit+0x58>
        }
    }
}
   14317:	90                   	nop
   14318:	8d 65 f8             	lea    -0x8(%ebp),%esp
   1431b:	5b                   	pop    %ebx
   1431c:	5e                   	pop    %esi
   1431d:	5d                   	pop    %ebp
   1431e:	c3                   	ret    

0001431f <bitmap_is_set>:
 * 
 * @param bitmap 
 * @param index 
 * @return int 
 */
int bitmap_is_set(bitmap_t *bitmap, int index) {
   1431f:	55                   	push   %ebp
   14320:	89 e5                	mov    %esp,%ebp
   14322:	83 ec 08             	sub    $0x8,%esp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   14325:	83 ec 08             	sub    $0x8,%esp
   14328:	ff 75 0c             	push   0xc(%ebp)
   1432b:	ff 75 08             	push   0x8(%ebp)
   1432e:	e8 6c fe ff ff       	call   1419f <bitmap_get_bit>
   14333:	83 c4 10             	add    $0x10,%esp
   14336:	84 c0                	test   %al,%al
   14338:	0f 95 c0             	setne  %al
   1433b:	0f b6 c0             	movzbl %al,%eax
}
   1433e:	c9                   	leave  
   1433f:	c3                   	ret    

00014340 <bitmap_alloc_nbits>:
 * @param bitmap 
 * @param bit 当某一位的值为bit时表示该位空闲，可供分配
 * @param count 
 * @return int 
 */
int bitmap_alloc_nbits(bitmap_t *bitmap, int bit, int count) {
   14340:	55                   	push   %ebp
   14341:	89 e5                	mov    %esp,%ebp
   14343:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   14346:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1434a:	75 19                	jne    14365 <bitmap_alloc_nbits+0x25>
   1434c:	68 1c 5d 01 00       	push   $0x15d1c
   14351:	68 dc 5d 01 00       	push   $0x15ddc
   14356:	6a 68                	push   $0x68
   14358:	68 34 5d 01 00       	push   $0x15d34
   1435d:	e8 5d fd ff ff       	call   140bf <pannic>
   14362:	83 c4 10             	add    $0x10,%esp
    ASSERT(count >= 0);
   14365:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   14369:	79 19                	jns    14384 <bitmap_alloc_nbits+0x44>
   1436b:	68 a4 5d 01 00       	push   $0x15da4
   14370:	68 dc 5d 01 00       	push   $0x15ddc
   14375:	6a 69                	push   $0x69
   14377:	68 34 5d 01 00       	push   $0x15d34
   1437c:	e8 3e fd ff ff       	call   140bf <pannic>
   14381:	83 c4 10             	add    $0x10,%esp

    int search_index = 0;
   14384:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    int ok_index = -1;
   1438b:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
    while (search_index < bitmap->bit_count) {
   14392:	e9 8f 00 00 00       	jmp    14426 <bitmap_alloc_nbits+0xe6>
        //确定可分配空间的起始索引
        if (bitmap_get_bit(bitmap, search_index) != bit) {
   14397:	83 ec 08             	sub    $0x8,%esp
   1439a:	ff 75 f4             	push   -0xc(%ebp)
   1439d:	ff 75 08             	push   0x8(%ebp)
   143a0:	e8 fa fd ff ff       	call   1419f <bitmap_get_bit>
   143a5:	83 c4 10             	add    $0x10,%esp
   143a8:	0f b6 c0             	movzbl %al,%eax
   143ab:	39 45 0c             	cmp    %eax,0xc(%ebp)
   143ae:	74 06                	je     143b6 <bitmap_alloc_nbits+0x76>
            search_index++;
   143b0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
            continue;
   143b4:	eb 70                	jmp    14426 <bitmap_alloc_nbits+0xe6>
        }

        //记录可分配空间的起始索引
        ok_index = search_index;
   143b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   143b9:	89 45 f0             	mov    %eax,-0x10(%ebp)

        //判断该空间是否大小满足要求
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   143bc:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
   143c3:	eb 2d                	jmp    143f2 <bitmap_alloc_nbits+0xb2>
            //空间大小不满足要求, 分配失败
            if (bitmap_get_bit(bitmap, search_index++) != bit) {
   143c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   143c8:	8d 50 01             	lea    0x1(%eax),%edx
   143cb:	89 55 f4             	mov    %edx,-0xc(%ebp)
   143ce:	83 ec 08             	sub    $0x8,%esp
   143d1:	50                   	push   %eax
   143d2:	ff 75 08             	push   0x8(%ebp)
   143d5:	e8 c5 fd ff ff       	call   1419f <bitmap_get_bit>
   143da:	83 c4 10             	add    $0x10,%esp
   143dd:	0f b6 c0             	movzbl %al,%eax
   143e0:	39 45 0c             	cmp    %eax,0xc(%ebp)
   143e3:	74 09                	je     143ee <bitmap_alloc_nbits+0xae>
                ok_index = -1;
   143e5:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
                break;
   143ec:	eb 16                	jmp    14404 <bitmap_alloc_nbits+0xc4>
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   143ee:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   143f2:	8b 45 ec             	mov    -0x14(%ebp),%eax
   143f5:	3b 45 10             	cmp    0x10(%ebp),%eax
   143f8:	7d 0a                	jge    14404 <bitmap_alloc_nbits+0xc4>
   143fa:	8b 45 08             	mov    0x8(%ebp),%eax
   143fd:	8b 00                	mov    (%eax),%eax
   143ff:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   14402:	7c c1                	jl     143c5 <bitmap_alloc_nbits+0x85>
            }
        }

        if (ok_index != -1) {//分配成功
   14404:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
   14408:	74 1c                	je     14426 <bitmap_alloc_nbits+0xe6>
            //将该片空间标记为已分配状态, 并返回起始索引
            bitmap_set_bit(bitmap, ok_index, count, ~bit);
   1440a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1440d:	f7 d0                	not    %eax
   1440f:	50                   	push   %eax
   14410:	ff 75 10             	push   0x10(%ebp)
   14413:	ff 75 f0             	push   -0x10(%ebp)
   14416:	ff 75 08             	push   0x8(%ebp)
   14419:	e8 f9 fd ff ff       	call   14217 <bitmap_set_bit>
   1441e:	83 c4 10             	add    $0x10,%esp
            return ok_index;
   14421:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14424:	eb 13                	jmp    14439 <bitmap_alloc_nbits+0xf9>
    while (search_index < bitmap->bit_count) {
   14426:	8b 45 08             	mov    0x8(%ebp),%eax
   14429:	8b 00                	mov    (%eax),%eax
   1442b:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   1442e:	0f 8c 63 ff ff ff    	jl     14397 <bitmap_alloc_nbits+0x57>
        }
    }
    
    //遍历完整个位图也没有满足要求的空间则返回-1
    return -1;
   14434:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

   14439:	c9                   	leave  
   1443a:	c3                   	ret    

0001443b <kernel_strcpy>:
 * @brief  拷贝字符串
 *
 * @param dest 目标字符串
 * @param src  源字符串
 */
void kernel_strcpy(char *dest, const char *src) {
   1443b:	55                   	push   %ebp
   1443c:	89 e5                	mov    %esp,%ebp
  // 1.判断是否为NULL
  if (!dest || !src) return;
   1443e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   14442:	74 3b                	je     1447f <kernel_strcpy+0x44>
   14444:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   14448:	74 35                	je     1447f <kernel_strcpy+0x44>

  // 2.拷贝 src '\0' 以前的部分到 dest中
  // TODO:完成（访问未初始化的内存）的异常中断后就只判断src是否读到'\0'
  while (*dest && *src) {
   1444a:	eb 17                	jmp    14463 <kernel_strcpy+0x28>
    *(dest++) = *(src++);
   1444c:	8b 55 0c             	mov    0xc(%ebp),%edx
   1444f:	8d 42 01             	lea    0x1(%edx),%eax
   14452:	89 45 0c             	mov    %eax,0xc(%ebp)
   14455:	8b 45 08             	mov    0x8(%ebp),%eax
   14458:	8d 48 01             	lea    0x1(%eax),%ecx
   1445b:	89 4d 08             	mov    %ecx,0x8(%ebp)
   1445e:	0f b6 12             	movzbl (%edx),%edx
   14461:	88 10                	mov    %dl,(%eax)
  while (*dest && *src) {
   14463:	8b 45 08             	mov    0x8(%ebp),%eax
   14466:	0f b6 00             	movzbl (%eax),%eax
   14469:	84 c0                	test   %al,%al
   1446b:	74 0a                	je     14477 <kernel_strcpy+0x3c>
   1446d:	8b 45 0c             	mov    0xc(%ebp),%eax
   14470:	0f b6 00             	movzbl (%eax),%eax
   14473:	84 c0                	test   %al,%al
   14475:	75 d5                	jne    1444c <kernel_strcpy+0x11>
  }

  // 3.添加结束符
  *dest = '\0';
   14477:	8b 45 08             	mov    0x8(%ebp),%eax
   1447a:	c6 00 00             	movb   $0x0,(%eax)
   1447d:	eb 01                	jmp    14480 <kernel_strcpy+0x45>
  if (!dest || !src) return;
   1447f:	90                   	nop
}
   14480:	5d                   	pop    %ebp
   14481:	c3                   	ret    

00014482 <kernel_strncpy>:
 *
 * @param dest 目的字符串
 * @param src 源字符串
 * @param size 拷贝字符串的长度，包含'\0'
 */
void kernel_strncpy(char *dest, const char *src, int size) {
   14482:	55                   	push   %ebp
   14483:	89 e5                	mov    %esp,%ebp
  // 1.判断是否需要拷贝
  if (!dest || !src || !size) return;
   14485:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   14489:	74 45                	je     144d0 <kernel_strncpy+0x4e>
   1448b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1448f:	74 3f                	je     144d0 <kernel_strncpy+0x4e>
   14491:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   14495:	74 39                	je     144d0 <kernel_strncpy+0x4e>

  // 2.size的大小包含了'\0'，所以要预留一个空间给'\0'，只能拷贝 size - 1个字符
  while ((size-- > 1) && (*src)) {
   14497:	eb 17                	jmp    144b0 <kernel_strncpy+0x2e>
    *(dest++) = *(src++);
   14499:	8b 55 0c             	mov    0xc(%ebp),%edx
   1449c:	8d 42 01             	lea    0x1(%edx),%eax
   1449f:	89 45 0c             	mov    %eax,0xc(%ebp)
   144a2:	8b 45 08             	mov    0x8(%ebp),%eax
   144a5:	8d 48 01             	lea    0x1(%eax),%ecx
   144a8:	89 4d 08             	mov    %ecx,0x8(%ebp)
   144ab:	0f b6 12             	movzbl (%edx),%edx
   144ae:	88 10                	mov    %dl,(%eax)
  while ((size-- > 1) && (*src)) {
   144b0:	8b 45 10             	mov    0x10(%ebp),%eax
   144b3:	8d 50 ff             	lea    -0x1(%eax),%edx
   144b6:	89 55 10             	mov    %edx,0x10(%ebp)
   144b9:	83 f8 01             	cmp    $0x1,%eax
   144bc:	7e 0a                	jle    144c8 <kernel_strncpy+0x46>
   144be:	8b 45 0c             	mov    0xc(%ebp),%eax
   144c1:	0f b6 00             	movzbl (%eax),%eax
   144c4:	84 c0                	test   %al,%al
   144c6:	75 d1                	jne    14499 <kernel_strncpy+0x17>
  }

  // 3.添加结束符
  *dest = '\0';
   144c8:	8b 45 08             	mov    0x8(%ebp),%eax
   144cb:	c6 00 00             	movb   $0x0,(%eax)
   144ce:	eb 01                	jmp    144d1 <kernel_strncpy+0x4f>
  if (!dest || !src || !size) return;
   144d0:	90                   	nop
}
   144d1:	5d                   	pop    %ebp
   144d2:	c3                   	ret    

000144d3 <kernel_strncmp>:
 * @param s2 字符串2
 * @param size 比较前比较的子串长度，从下标0开始到(size - 1)
 *
 * @return int ==: 0, > : 1, < : -1
 */
int kernel_strncmp(const char *s1, const char *s2, int size) {
   144d3:	55                   	push   %ebp
   144d4:	89 e5                	mov    %esp,%ebp
  if (!s1 || !s2) return 0;
   144d6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   144da:	74 06                	je     144e2 <kernel_strncmp+0xf>
   144dc:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   144e0:	75 0f                	jne    144f1 <kernel_strncmp+0x1e>
   144e2:	b8 00 00 00 00       	mov    $0x0,%eax
   144e7:	eb 52                	jmp    1453b <kernel_strncmp+0x68>

  while (*s1 && *s2 && --size && *s1 == *s2) {
    ++s1;
   144e9:	83 45 08 01          	addl   $0x1,0x8(%ebp)
    ++s2;
   144ed:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
  while (*s1 && *s2 && --size && *s1 == *s2) {
   144f1:	8b 45 08             	mov    0x8(%ebp),%eax
   144f4:	0f b6 00             	movzbl (%eax),%eax
   144f7:	84 c0                	test   %al,%al
   144f9:	74 24                	je     1451f <kernel_strncmp+0x4c>
   144fb:	8b 45 0c             	mov    0xc(%ebp),%eax
   144fe:	0f b6 00             	movzbl (%eax),%eax
   14501:	84 c0                	test   %al,%al
   14503:	74 1a                	je     1451f <kernel_strncmp+0x4c>
   14505:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   14509:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1450d:	74 10                	je     1451f <kernel_strncmp+0x4c>
   1450f:	8b 45 08             	mov    0x8(%ebp),%eax
   14512:	0f b6 10             	movzbl (%eax),%edx
   14515:	8b 45 0c             	mov    0xc(%ebp),%eax
   14518:	0f b6 00             	movzbl (%eax),%eax
   1451b:	38 c2                	cmp    %al,%dl
   1451d:	74 ca                	je     144e9 <kernel_strncmp+0x16>
  }

  if (*s1 > *s2)
   1451f:	8b 45 08             	mov    0x8(%ebp),%eax
   14522:	0f b6 10             	movzbl (%eax),%edx
   14525:	8b 45 0c             	mov    0xc(%ebp),%eax
   14528:	0f b6 00             	movzbl (%eax),%eax
   1452b:	38 c2                	cmp    %al,%dl
   1452d:	7e 07                	jle    14536 <kernel_strncmp+0x63>
    return 1;
   1452f:	b8 01 00 00 00       	mov    $0x1,%eax
   14534:	eb 05                	jmp    1453b <kernel_strncmp+0x68>
  else if (*s1 < *s1)
    return -1;
  else
    return 0;
   14536:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1453b:	5d                   	pop    %ebp
   1453c:	c3                   	ret    

0001453d <kernel_strlen>:
 * @brief  获取字符串str的长度, 不含'\0'
 *
 * @param str
 * @return int
 */
int kernel_strlen(const char *str) {
   1453d:	55                   	push   %ebp
   1453e:	89 e5                	mov    %esp,%ebp
   14540:	83 ec 10             	sub    $0x10,%esp
  if (!str) return 0;
   14543:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   14547:	75 07                	jne    14550 <kernel_strlen+0x13>
   14549:	b8 00 00 00 00       	mov    $0x0,%eax
   1454e:	eb 20                	jmp    14570 <kernel_strlen+0x33>

  int len = 0;
   14550:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  while (*(str++)) len++;
   14557:	eb 04                	jmp    1455d <kernel_strlen+0x20>
   14559:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   1455d:	8b 45 08             	mov    0x8(%ebp),%eax
   14560:	8d 50 01             	lea    0x1(%eax),%edx
   14563:	89 55 08             	mov    %edx,0x8(%ebp)
   14566:	0f b6 00             	movzbl (%eax),%eax
   14569:	84 c0                	test   %al,%al
   1456b:	75 ec                	jne    14559 <kernel_strlen+0x1c>

  return len;
   1456d:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   14570:	c9                   	leave  
   14571:	c3                   	ret    

00014572 <kernel_memcpy>:
 *
 * @param dest 目的内存的起始地址
 * @param src 原内存的起始地址
 * @param size 复制的内存字节大小
 */
void kernel_memcpy(void *dest, const void *src, int size) {
   14572:	55                   	push   %ebp
   14573:	89 e5                	mov    %esp,%ebp
   14575:	83 ec 10             	sub    $0x10,%esp
  if (!dest || !src || !size) return;
   14578:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1457c:	74 40                	je     145be <kernel_memcpy+0x4c>
   1457e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   14582:	74 3a                	je     145be <kernel_memcpy+0x4c>
   14584:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   14588:	74 34                	je     145be <kernel_memcpy+0x4c>

  uint8_t *d = (uint8_t *)dest;
   1458a:	8b 45 08             	mov    0x8(%ebp),%eax
   1458d:	89 45 fc             	mov    %eax,-0x4(%ebp)
  uint8_t *s = (uint8_t *)src;
   14590:	8b 45 0c             	mov    0xc(%ebp),%eax
   14593:	89 45 f8             	mov    %eax,-0x8(%ebp)

  while (size--) {
   14596:	eb 17                	jmp    145af <kernel_memcpy+0x3d>
    *(d++) = *(s++);
   14598:	8b 55 f8             	mov    -0x8(%ebp),%edx
   1459b:	8d 42 01             	lea    0x1(%edx),%eax
   1459e:	89 45 f8             	mov    %eax,-0x8(%ebp)
   145a1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   145a4:	8d 48 01             	lea    0x1(%eax),%ecx
   145a7:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   145aa:	0f b6 12             	movzbl (%edx),%edx
   145ad:	88 10                	mov    %dl,(%eax)
  while (size--) {
   145af:	8b 45 10             	mov    0x10(%ebp),%eax
   145b2:	8d 50 ff             	lea    -0x1(%eax),%edx
   145b5:	89 55 10             	mov    %edx,0x10(%ebp)
   145b8:	85 c0                	test   %eax,%eax
   145ba:	75 dc                	jne    14598 <kernel_memcpy+0x26>
   145bc:	eb 01                	jmp    145bf <kernel_memcpy+0x4d>
  if (!dest || !src || !size) return;
   145be:	90                   	nop
  }
}
   145bf:	c9                   	leave  
   145c0:	c3                   	ret    

000145c1 <kernel_memset>:
 *
 * @param dest 区域起始地址
 * @param v 每个字节的值
 * @param size 赋值的内存的大小
 */
void kernel_memset(void *dest, uint8_t v, int size) {
   145c1:	55                   	push   %ebp
   145c2:	89 e5                	mov    %esp,%ebp
   145c4:	83 ec 14             	sub    $0x14,%esp
   145c7:	8b 45 0c             	mov    0xc(%ebp),%eax
   145ca:	88 45 ec             	mov    %al,-0x14(%ebp)
  if (!dest || !size) return;
   145cd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   145d1:	74 2c                	je     145ff <kernel_memset+0x3e>
   145d3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   145d7:	74 26                	je     145ff <kernel_memset+0x3e>

  uint8_t *d = (uint8_t *)dest;
   145d9:	8b 45 08             	mov    0x8(%ebp),%eax
   145dc:	89 45 fc             	mov    %eax,-0x4(%ebp)

  while (size--) {
   145df:	eb 0f                	jmp    145f0 <kernel_memset+0x2f>
    *(d++) = v;
   145e1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   145e4:	8d 50 01             	lea    0x1(%eax),%edx
   145e7:	89 55 fc             	mov    %edx,-0x4(%ebp)
   145ea:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   145ee:	88 10                	mov    %dl,(%eax)
  while (size--) {
   145f0:	8b 45 10             	mov    0x10(%ebp),%eax
   145f3:	8d 50 ff             	lea    -0x1(%eax),%edx
   145f6:	89 55 10             	mov    %edx,0x10(%ebp)
   145f9:	85 c0                	test   %eax,%eax
   145fb:	75 e4                	jne    145e1 <kernel_memset+0x20>
   145fd:	eb 01                	jmp    14600 <kernel_memset+0x3f>
  if (!dest || !size) return;
   145ff:	90                   	nop
  }
}
   14600:	c9                   	leave  
   14601:	c3                   	ret    

00014602 <kernel_memcmp>:
 * @param d1 区域1的起始地址
 * @param d2 区域2的起始地址
 * @param size 比较的字节数量
 * @return int ==:0, >:1, <:-1
 */
int kernel_memcmp(const void *dest1, const void *dest2, int size) {
   14602:	55                   	push   %ebp
   14603:	89 e5                	mov    %esp,%ebp
   14605:	83 ec 10             	sub    $0x10,%esp
  if (!dest1 || !dest2 || !size) return 0;
   14608:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1460c:	74 0c                	je     1461a <kernel_memcmp+0x18>
   1460e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   14612:	74 06                	je     1461a <kernel_memcmp+0x18>
   14614:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   14618:	75 07                	jne    14621 <kernel_memcmp+0x1f>
   1461a:	b8 00 00 00 00       	mov    $0x0,%eax
   1461f:	eb 63                	jmp    14684 <kernel_memcmp+0x82>

  uint8_t *d1 = (uint8_t *)dest1;
   14621:	8b 45 08             	mov    0x8(%ebp),%eax
   14624:	89 45 fc             	mov    %eax,-0x4(%ebp)
  uint8_t *d2 = (uint8_t *)dest2;
   14627:	8b 45 0c             	mov    0xc(%ebp),%eax
   1462a:	89 45 f8             	mov    %eax,-0x8(%ebp)

  while (--size && *d1 == *d2) {
   1462d:	eb 08                	jmp    14637 <kernel_memcmp+0x35>
    d1++;
   1462f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    d2++;
   14633:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  while (--size && *d1 == *d2) {
   14637:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   1463b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1463f:	74 10                	je     14651 <kernel_memcmp+0x4f>
   14641:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14644:	0f b6 10             	movzbl (%eax),%edx
   14647:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1464a:	0f b6 00             	movzbl (%eax),%eax
   1464d:	38 c2                	cmp    %al,%dl
   1464f:	74 de                	je     1462f <kernel_memcmp+0x2d>
  }

  if (*d1 > *d2)
   14651:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14654:	0f b6 10             	movzbl (%eax),%edx
   14657:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1465a:	0f b6 00             	movzbl (%eax),%eax
   1465d:	38 c2                	cmp    %al,%dl
   1465f:	76 07                	jbe    14668 <kernel_memcmp+0x66>
    return 1;
   14661:	b8 01 00 00 00       	mov    $0x1,%eax
   14666:	eb 1c                	jmp    14684 <kernel_memcmp+0x82>
  else if (*d1 < *d2)
   14668:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1466b:	0f b6 10             	movzbl (%eax),%edx
   1466e:	8b 45 f8             	mov    -0x8(%ebp),%eax
   14671:	0f b6 00             	movzbl (%eax),%eax
   14674:	38 c2                	cmp    %al,%dl
   14676:	73 07                	jae    1467f <kernel_memcmp+0x7d>
    return -1;
   14678:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1467d:	eb 05                	jmp    14684 <kernel_memcmp+0x82>
  else
    return 0;
   1467f:	b8 00 00 00 00       	mov    $0x0,%eax
}
   14684:	c9                   	leave  
   14685:	c3                   	ret    

00014686 <kernel_sprintf>:

void kernel_sprintf(char *buf, const char *formate, ...) {
   14686:	55                   	push   %ebp
   14687:	89 e5                	mov    %esp,%ebp
   14689:	83 ec 18             	sub    $0x18,%esp
  // 获取可变参数并将其格式化到缓冲区中
  va_list args;
  va_start(args, formate);
   1468c:	8d 45 10             	lea    0x10(%ebp),%eax
   1468f:	89 45 f4             	mov    %eax,-0xc(%ebp)
  kernel_vsprintf(buf, formate, args);
   14692:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14695:	83 ec 04             	sub    $0x4,%esp
   14698:	50                   	push   %eax
   14699:	ff 75 0c             	push   0xc(%ebp)
   1469c:	ff 75 08             	push   0x8(%ebp)
   1469f:	e8 06 00 00 00       	call   146aa <kernel_vsprintf>
   146a4:	83 c4 10             	add    $0x10,%esp
  va_end(args);
}
   146a7:	90                   	nop
   146a8:	c9                   	leave  
   146a9:	c3                   	ret    

000146aa <kernel_vsprintf>:
 *
 * @param buf
 * @param formate
 * @param args
 */
void kernel_vsprintf(char *buf, const char *formate, va_list args) {
   146aa:	55                   	push   %ebp
   146ab:	89 e5                	mov    %esp,%ebp
   146ad:	83 ec 28             	sub    $0x28,%esp
  // 定义状态机，包含两种状态
  enum { NORMAL, READ_FMT } state = NORMAL;
   146b0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  char *curr = buf;
   146b7:	8b 45 08             	mov    0x8(%ebp),%eax
   146ba:	89 45 f0             	mov    %eax,-0x10(%ebp)

  char ch;

  while ((ch = *(formate++)) != '\0') {
   146bd:	e9 68 01 00 00       	jmp    1482a <kernel_vsprintf+0x180>
    switch (state) {
   146c2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   146c6:	74 0b                	je     146d3 <kernel_vsprintf+0x29>
   146c8:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   146cc:	74 2b                	je     146f9 <kernel_vsprintf+0x4f>
   146ce:	e9 56 01 00 00       	jmp    14829 <kernel_vsprintf+0x17f>
      case NORMAL:
        if (ch == '%')
   146d3:	80 7d e7 25          	cmpb   $0x25,-0x19(%ebp)
   146d7:	75 0c                	jne    146e5 <kernel_vsprintf+0x3b>
          state = READ_FMT;
   146d9:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   146e0:	e9 45 01 00 00       	jmp    1482a <kernel_vsprintf+0x180>
        else
          *(curr++) = ch;
   146e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   146e8:	8d 50 01             	lea    0x1(%eax),%edx
   146eb:	89 55 f0             	mov    %edx,-0x10(%ebp)
   146ee:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   146f2:	88 10                	mov    %dl,(%eax)
        break;
   146f4:	e9 31 01 00 00       	jmp    1482a <kernel_vsprintf+0x180>
      case READ_FMT:
        if (ch == 's') {
   146f9:	80 7d e7 73          	cmpb   $0x73,-0x19(%ebp)
   146fd:	75 47                	jne    14746 <kernel_vsprintf+0x9c>
          const char *str = va_arg(args, char *);
   146ff:	8b 45 10             	mov    0x10(%ebp),%eax
   14702:	8d 50 04             	lea    0x4(%eax),%edx
   14705:	89 55 10             	mov    %edx,0x10(%ebp)
   14708:	8b 00                	mov    (%eax),%eax
   1470a:	89 45 ec             	mov    %eax,-0x14(%ebp)
          int len = kernel_strlen(str);
   1470d:	ff 75 ec             	push   -0x14(%ebp)
   14710:	e8 28 fe ff ff       	call   1453d <kernel_strlen>
   14715:	83 c4 04             	add    $0x4,%esp
   14718:	89 45 e8             	mov    %eax,-0x18(%ebp)
          while (len--) {
   1471b:	eb 17                	jmp    14734 <kernel_vsprintf+0x8a>
            *(curr++) = *(str++);
   1471d:	8b 55 ec             	mov    -0x14(%ebp),%edx
   14720:	8d 42 01             	lea    0x1(%edx),%eax
   14723:	89 45 ec             	mov    %eax,-0x14(%ebp)
   14726:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14729:	8d 48 01             	lea    0x1(%eax),%ecx
   1472c:	89 4d f0             	mov    %ecx,-0x10(%ebp)
   1472f:	0f b6 12             	movzbl (%edx),%edx
   14732:	88 10                	mov    %dl,(%eax)
          while (len--) {
   14734:	8b 45 e8             	mov    -0x18(%ebp),%eax
   14737:	8d 50 ff             	lea    -0x1(%eax),%edx
   1473a:	89 55 e8             	mov    %edx,-0x18(%ebp)
   1473d:	85 c0                	test   %eax,%eax
   1473f:	75 dc                	jne    1471d <kernel_vsprintf+0x73>
   14741:	e9 da 00 00 00       	jmp    14820 <kernel_vsprintf+0x176>
          }
        } else if (ch == 'd') {
   14746:	80 7d e7 64          	cmpb   $0x64,-0x19(%ebp)
   1474a:	75 37                	jne    14783 <kernel_vsprintf+0xd9>
          const int num = va_arg(args, int);
   1474c:	8b 45 10             	mov    0x10(%ebp),%eax
   1474f:	8d 50 04             	lea    0x4(%eax),%edx
   14752:	89 55 10             	mov    %edx,0x10(%ebp)
   14755:	8b 00                	mov    (%eax),%eax
   14757:	89 45 d8             	mov    %eax,-0x28(%ebp)
          kernel_itoa(curr, num, 10);
   1475a:	83 ec 04             	sub    $0x4,%esp
   1475d:	6a 0a                	push   $0xa
   1475f:	ff 75 d8             	push   -0x28(%ebp)
   14762:	ff 75 f0             	push   -0x10(%ebp)
   14765:	e8 dd 00 00 00       	call   14847 <kernel_itoa>
   1476a:	83 c4 10             	add    $0x10,%esp
          curr += kernel_strlen(curr);
   1476d:	83 ec 0c             	sub    $0xc,%esp
   14770:	ff 75 f0             	push   -0x10(%ebp)
   14773:	e8 c5 fd ff ff       	call   1453d <kernel_strlen>
   14778:	83 c4 10             	add    $0x10,%esp
   1477b:	01 45 f0             	add    %eax,-0x10(%ebp)
   1477e:	e9 9d 00 00 00       	jmp    14820 <kernel_vsprintf+0x176>
        } else if (ch == 'x' || ch == 'X') {
   14783:	80 7d e7 78          	cmpb   $0x78,-0x19(%ebp)
   14787:	74 06                	je     1478f <kernel_vsprintf+0xe5>
   14789:	80 7d e7 58          	cmpb   $0x58,-0x19(%ebp)
   1478d:	75 34                	jne    147c3 <kernel_vsprintf+0x119>
          const int num = va_arg(args, int);
   1478f:	8b 45 10             	mov    0x10(%ebp),%eax
   14792:	8d 50 04             	lea    0x4(%eax),%edx
   14795:	89 55 10             	mov    %edx,0x10(%ebp)
   14798:	8b 00                	mov    (%eax),%eax
   1479a:	89 45 dc             	mov    %eax,-0x24(%ebp)
          kernel_itoa(curr, num, 16);
   1479d:	83 ec 04             	sub    $0x4,%esp
   147a0:	6a 10                	push   $0x10
   147a2:	ff 75 dc             	push   -0x24(%ebp)
   147a5:	ff 75 f0             	push   -0x10(%ebp)
   147a8:	e8 9a 00 00 00       	call   14847 <kernel_itoa>
   147ad:	83 c4 10             	add    $0x10,%esp
          curr += kernel_strlen(curr);
   147b0:	83 ec 0c             	sub    $0xc,%esp
   147b3:	ff 75 f0             	push   -0x10(%ebp)
   147b6:	e8 82 fd ff ff       	call   1453d <kernel_strlen>
   147bb:	83 c4 10             	add    $0x10,%esp
   147be:	01 45 f0             	add    %eax,-0x10(%ebp)
        } else if (ch == 'x' || ch == 'X') {
   147c1:	eb 5d                	jmp    14820 <kernel_vsprintf+0x176>
        } else if (ch == 'b') {
   147c3:	80 7d e7 62          	cmpb   $0x62,-0x19(%ebp)
   147c7:	75 34                	jne    147fd <kernel_vsprintf+0x153>
          const int num = va_arg(args, int);
   147c9:	8b 45 10             	mov    0x10(%ebp),%eax
   147cc:	8d 50 04             	lea    0x4(%eax),%edx
   147cf:	89 55 10             	mov    %edx,0x10(%ebp)
   147d2:	8b 00                	mov    (%eax),%eax
   147d4:	89 45 e0             	mov    %eax,-0x20(%ebp)
          kernel_itoa(curr, num, 2);
   147d7:	83 ec 04             	sub    $0x4,%esp
   147da:	6a 02                	push   $0x2
   147dc:	ff 75 e0             	push   -0x20(%ebp)
   147df:	ff 75 f0             	push   -0x10(%ebp)
   147e2:	e8 60 00 00 00       	call   14847 <kernel_itoa>
   147e7:	83 c4 10             	add    $0x10,%esp
          curr += kernel_strlen(curr);
   147ea:	83 ec 0c             	sub    $0xc,%esp
   147ed:	ff 75 f0             	push   -0x10(%ebp)
   147f0:	e8 48 fd ff ff       	call   1453d <kernel_strlen>
   147f5:	83 c4 10             	add    $0x10,%esp
   147f8:	01 45 f0             	add    %eax,-0x10(%ebp)
   147fb:	eb 23                	jmp    14820 <kernel_vsprintf+0x176>
        } else if (ch == 'c') {
   147fd:	80 7d e7 63          	cmpb   $0x63,-0x19(%ebp)
   14801:	75 1d                	jne    14820 <kernel_vsprintf+0x176>
          char c = va_arg(args, int);
   14803:	8b 45 10             	mov    0x10(%ebp),%eax
   14806:	8d 50 04             	lea    0x4(%eax),%edx
   14809:	89 55 10             	mov    %edx,0x10(%ebp)
   1480c:	8b 00                	mov    (%eax),%eax
   1480e:	88 45 e6             	mov    %al,-0x1a(%ebp)
          *(curr++) = c;
   14811:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14814:	8d 50 01             	lea    0x1(%eax),%edx
   14817:	89 55 f0             	mov    %edx,-0x10(%ebp)
   1481a:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   1481e:	88 10                	mov    %dl,(%eax)
        }
        state = NORMAL;
   14820:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        break;
   14827:	eb 01                	jmp    1482a <kernel_vsprintf+0x180>
      default:
        break;
   14829:	90                   	nop
  while ((ch = *(formate++)) != '\0') {
   1482a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1482d:	8d 50 01             	lea    0x1(%eax),%edx
   14830:	89 55 0c             	mov    %edx,0xc(%ebp)
   14833:	0f b6 00             	movzbl (%eax),%eax
   14836:	88 45 e7             	mov    %al,-0x19(%ebp)
   14839:	80 7d e7 00          	cmpb   $0x0,-0x19(%ebp)
   1483d:	0f 85 7f fe ff ff    	jne    146c2 <kernel_vsprintf+0x18>
    }
  }
}
   14843:	90                   	nop
   14844:	90                   	nop
   14845:	c9                   	leave  
   14846:	c3                   	ret    

00014847 <kernel_itoa>:
 *
 * @param buf 缓冲区
 * @param num 整数
 * @param base 转换的进制规则
 */
void kernel_itoa(char *buf, int num, int base) {
   14847:	55                   	push   %ebp
   14848:	89 e5                	mov    %esp,%ebp
   1484a:	53                   	push   %ebx
   1484b:	81 ec 90 00 00 00    	sub    $0x90,%esp

  if (base != 2 && base != 8 && base != 10 && base != 16) {
   14851:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   14855:	74 1d                	je     14874 <kernel_itoa+0x2d>
   14857:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   1485b:	74 17                	je     14874 <kernel_itoa+0x2d>
   1485d:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   14861:	74 11                	je     14874 <kernel_itoa+0x2d>
   14863:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   14867:	74 0b                	je     14874 <kernel_itoa+0x2d>
    *buf = '\0';
   14869:	8b 45 08             	mov    0x8(%ebp),%eax
   1486c:	c6 00 00             	movb   $0x0,(%eax)
    return;
   1486f:	e9 f8 00 00 00       	jmp    1496c <kernel_itoa+0x125>
  }

  if (num == 0) {
   14874:	8b 45 0c             	mov    0xc(%ebp),%eax
   14877:	85 c0                	test   %eax,%eax
   14879:	75 17                	jne    14892 <kernel_itoa+0x4b>
    *(buf++) = '0';
   1487b:	8b 45 08             	mov    0x8(%ebp),%eax
   1487e:	8d 50 01             	lea    0x1(%eax),%edx
   14881:	89 55 08             	mov    %edx,0x8(%ebp)
   14884:	c6 00 30             	movb   $0x30,(%eax)
    *buf = '\0';
   14887:	8b 45 08             	mov    0x8(%ebp),%eax
   1488a:	c6 00 00             	movb   $0x0,(%eax)
    return;
   1488d:	e9 da 00 00 00       	jmp    1496c <kernel_itoa+0x125>
  }

  char *p = buf;
   14892:	8b 45 08             	mov    0x8(%ebp),%eax
   14895:	89 45 f8             	mov    %eax,-0x8(%ebp)
  uint32_t u_num = 0;
   14898:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  if (base == 10) {
   1489f:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   148a3:	75 41                	jne    148e6 <kernel_itoa+0x9f>
    u_num = num;
   148a5:	8b 45 0c             	mov    0xc(%ebp),%eax
   148a8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (num < 0) {
   148ab:	8b 45 0c             	mov    0xc(%ebp),%eax
   148ae:	85 c0                	test   %eax,%eax
   148b0:	79 16                	jns    148c8 <kernel_itoa+0x81>
      *(p++) = '-';
   148b2:	8b 45 f8             	mov    -0x8(%ebp),%eax
   148b5:	8d 50 01             	lea    0x1(%eax),%edx
   148b8:	89 55 f8             	mov    %edx,-0x8(%ebp)
   148bb:	c6 00 2d             	movb   $0x2d,(%eax)
      u_num = -1 * num;
   148be:	8b 45 0c             	mov    0xc(%ebp),%eax
   148c1:	f7 d8                	neg    %eax
   148c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
   148c6:	eb 26                	jmp    148ee <kernel_itoa+0xa7>
    } else if (num == 0) {
   148c8:	8b 45 0c             	mov    0xc(%ebp),%eax
   148cb:	85 c0                	test   %eax,%eax
   148cd:	75 1f                	jne    148ee <kernel_itoa+0xa7>
      *(p++) = '0';
   148cf:	8b 45 f8             	mov    -0x8(%ebp),%eax
   148d2:	8d 50 01             	lea    0x1(%eax),%edx
   148d5:	89 55 f8             	mov    %edx,-0x8(%ebp)
   148d8:	c6 00 30             	movb   $0x30,(%eax)
      *p = '\0';
   148db:	8b 45 f8             	mov    -0x8(%ebp),%eax
   148de:	c6 00 00             	movb   $0x0,(%eax)
      return;
   148e1:	e9 86 00 00 00       	jmp    1496c <kernel_itoa+0x125>
    }
  } else {
    u_num = *((uint32_t *)&num);
   148e6:	8d 45 0c             	lea    0xc(%ebp),%eax
   148e9:	8b 00                	mov    (%eax),%eax
   148eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
  }

  static const char *num_to_char = {"0123456789abcdef"};
  char arr[128];
  int len = 0;
   148ee:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  while (u_num > 0) {
   148f5:	eb 3b                	jmp    14932 <kernel_itoa+0xeb>
    arr[len++] = num_to_char[u_num % base];
   148f7:	8b 1d 50 60 01 00    	mov    0x16050,%ebx
   148fd:	8b 4d 10             	mov    0x10(%ebp),%ecx
   14900:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14903:	ba 00 00 00 00       	mov    $0x0,%edx
   14908:	f7 f1                	div    %ecx
   1490a:	89 d0                	mov    %edx,%eax
   1490c:	8d 0c 03             	lea    (%ebx,%eax,1),%ecx
   1490f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14912:	8d 50 01             	lea    0x1(%eax),%edx
   14915:	89 55 f0             	mov    %edx,-0x10(%ebp)
   14918:	0f b6 11             	movzbl (%ecx),%edx
   1491b:	88 94 05 6c ff ff ff 	mov    %dl,-0x94(%ebp,%eax,1)
    u_num /= base;
   14922:	8b 5d 10             	mov    0x10(%ebp),%ebx
   14925:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14928:	ba 00 00 00 00       	mov    $0x0,%edx
   1492d:	f7 f3                	div    %ebx
   1492f:	89 45 f4             	mov    %eax,-0xc(%ebp)
  while (u_num > 0) {
   14932:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   14936:	75 bf                	jne    148f7 <kernel_itoa+0xb0>
  }

  for (int i = len - 1; i >= 0; --i) {
   14938:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1493b:	83 e8 01             	sub    $0x1,%eax
   1493e:	89 45 ec             	mov    %eax,-0x14(%ebp)
   14941:	eb 1d                	jmp    14960 <kernel_itoa+0x119>
    *(p++) = arr[i];
   14943:	8b 45 f8             	mov    -0x8(%ebp),%eax
   14946:	8d 50 01             	lea    0x1(%eax),%edx
   14949:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1494c:	8d 8d 6c ff ff ff    	lea    -0x94(%ebp),%ecx
   14952:	8b 55 ec             	mov    -0x14(%ebp),%edx
   14955:	01 ca                	add    %ecx,%edx
   14957:	0f b6 12             	movzbl (%edx),%edx
   1495a:	88 10                	mov    %dl,(%eax)
  for (int i = len - 1; i >= 0; --i) {
   1495c:	83 6d ec 01          	subl   $0x1,-0x14(%ebp)
   14960:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   14964:	79 dd                	jns    14943 <kernel_itoa+0xfc>
  }
  *p = '\0';
   14966:	8b 45 f8             	mov    -0x8(%ebp),%eax
   14969:	c6 00 00             	movb   $0x0,(%eax)
}
   1496c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1496f:	c9                   	leave  
   14970:	c3                   	ret    

00014971 <strings_count>:
 * @brief 计算字符串数组str中字符串的个数
 *
 * @param str
 * @return int
 */
int strings_count(char *const *strs) {
   14971:	55                   	push   %ebp
   14972:	89 e5                	mov    %esp,%ebp
   14974:	83 ec 10             	sub    $0x10,%esp
  int count = 0;
   14977:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  if (strs) {
   1497e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   14982:	74 15                	je     14999 <strings_count+0x28>
    while (*(strs++)) {
   14984:	eb 04                	jmp    1498a <strings_count+0x19>
      count++;
   14986:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    while (*(strs++)) {
   1498a:	8b 45 08             	mov    0x8(%ebp),%eax
   1498d:	8d 50 04             	lea    0x4(%eax),%edx
   14990:	89 55 08             	mov    %edx,0x8(%ebp)
   14993:	8b 00                	mov    (%eax),%eax
   14995:	85 c0                	test   %eax,%eax
   14997:	75 ed                	jne    14986 <strings_count+0x15>
    }
  }

  return count;
   14999:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1499c:	c9                   	leave  
   1499d:	c3                   	ret    

0001499e <get_file_name>:
 * @brief 根据文件路径获取文件名
 *
 * @param path
 * @return char*
 */
const char *get_file_name(const char *path) {
   1499e:	55                   	push   %ebp
   1499f:	89 e5                	mov    %esp,%ebp
   149a1:	83 ec 10             	sub    $0x10,%esp
  const char *s = path;
   149a4:	8b 45 08             	mov    0x8(%ebp),%eax
   149a7:	89 45 fc             	mov    %eax,-0x4(%ebp)
  while (*s != '\0') {
   149aa:	eb 04                	jmp    149b0 <get_file_name+0x12>
    s++;
   149ac:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  while (*s != '\0') {
   149b0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   149b3:	0f b6 00             	movzbl (%eax),%eax
   149b6:	84 c0                	test   %al,%al
   149b8:	75 f2                	jne    149ac <get_file_name+0xe>
  }

  while ((*s != '/') && (*s != '\\') && (s >= path)) {
   149ba:	eb 04                	jmp    149c0 <get_file_name+0x22>
    s--;
   149bc:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
  while ((*s != '/') && (*s != '\\') && (s >= path)) {
   149c0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   149c3:	0f b6 00             	movzbl (%eax),%eax
   149c6:	3c 2f                	cmp    $0x2f,%al
   149c8:	74 12                	je     149dc <get_file_name+0x3e>
   149ca:	8b 45 fc             	mov    -0x4(%ebp),%eax
   149cd:	0f b6 00             	movzbl (%eax),%eax
   149d0:	3c 5c                	cmp    $0x5c,%al
   149d2:	74 08                	je     149dc <get_file_name+0x3e>
   149d4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   149d7:	3b 45 08             	cmp    0x8(%ebp),%eax
   149da:	73 e0                	jae    149bc <get_file_name+0x1e>
  }

  return s + 1;
   149dc:	8b 45 fc             	mov    -0x4(%ebp),%eax
   149df:	83 c0 01             	add    $0x1,%eax
   149e2:	c9                   	leave  
   149e3:	c3                   	ret    

000149e4 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   149e4:	55                   	push   %ebp
   149e5:	89 e5                	mov    %esp,%ebp
   149e7:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   149ea:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   149ee:	75 19                	jne    14a09 <list_is_empty+0x25>
   149f0:	68 00 5e 01 00       	push   $0x15e00
   149f5:	68 e4 5e 01 00       	push   $0x15ee4
   149fa:	6a 38                	push   $0x38
   149fc:	68 14 5e 01 00       	push   $0x15e14
   14a01:	e8 b9 f6 ff ff       	call   140bf <pannic>
   14a06:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   14a09:	8b 45 08             	mov    0x8(%ebp),%eax
   14a0c:	8b 40 08             	mov    0x8(%eax),%eax
   14a0f:	85 c0                	test   %eax,%eax
   14a11:	0f 94 c0             	sete   %al
   14a14:	0f b6 c0             	movzbl %al,%eax
}
   14a17:	c9                   	leave  
   14a18:	c3                   	ret    

00014a19 <list_get_size>:
static inline int list_get_size(list_t *list) {
   14a19:	55                   	push   %ebp
   14a1a:	89 e5                	mov    %esp,%ebp
   14a1c:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   14a1f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   14a23:	75 19                	jne    14a3e <list_get_size+0x25>
   14a25:	68 00 5e 01 00       	push   $0x15e00
   14a2a:	68 1c 5f 01 00       	push   $0x15f1c
   14a2f:	6a 3e                	push   $0x3e
   14a31:	68 14 5e 01 00       	push   $0x15e14
   14a36:	e8 84 f6 ff ff       	call   140bf <pannic>
   14a3b:	83 c4 10             	add    $0x10,%esp
    return list->size;
   14a3e:	8b 45 08             	mov    0x8(%ebp),%eax
   14a41:	8b 40 08             	mov    0x8(%eax),%eax
}
   14a44:	c9                   	leave  
   14a45:	c3                   	ret    

00014a46 <list_insert_first>:
 * 
 */

#include "tools/list.h"

void list_insert_first(list_t *list, list_node_t *node) {
   14a46:	55                   	push   %ebp
   14a47:	89 e5                	mov    %esp,%ebp
   14a49:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   14a4c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   14a50:	74 06                	je     14a58 <list_insert_first+0x12>
   14a52:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   14a56:	75 19                	jne    14a71 <list_insert_first+0x2b>
   14a58:	68 54 5e 01 00       	push   $0x15e54
   14a5d:	68 d0 5e 01 00       	push   $0x15ed0
   14a62:	6a 0f                	push   $0xf
   14a64:	68 84 5e 01 00       	push   $0x15e84
   14a69:	e8 51 f6 ff ff       	call   140bf <pannic>
   14a6e:	83 c4 10             	add    $0x10,%esp

    node->next = list->first;
   14a71:	8b 45 08             	mov    0x8(%ebp),%eax
   14a74:	8b 10                	mov    (%eax),%edx
   14a76:	8b 45 0c             	mov    0xc(%ebp),%eax
   14a79:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   14a7c:	8b 45 0c             	mov    0xc(%ebp),%eax
   14a7f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   14a85:	83 ec 0c             	sub    $0xc,%esp
   14a88:	ff 75 08             	push   0x8(%ebp)
   14a8b:	e8 54 ff ff ff       	call   149e4 <list_is_empty>
   14a90:	83 c4 10             	add    $0x10,%esp
   14a93:	85 c0                	test   %eax,%eax
   14a95:	74 16                	je     14aad <list_insert_first+0x67>
        list->first = list->last = node;
   14a97:	8b 45 08             	mov    0x8(%ebp),%eax
   14a9a:	8b 55 0c             	mov    0xc(%ebp),%edx
   14a9d:	89 50 04             	mov    %edx,0x4(%eax)
   14aa0:	8b 45 08             	mov    0x8(%ebp),%eax
   14aa3:	8b 50 04             	mov    0x4(%eax),%edx
   14aa6:	8b 45 08             	mov    0x8(%ebp),%eax
   14aa9:	89 10                	mov    %edx,(%eax)
   14aab:	eb 12                	jmp    14abf <list_insert_first+0x79>
    } else {
        list->first->pre = node;
   14aad:	8b 45 08             	mov    0x8(%ebp),%eax
   14ab0:	8b 00                	mov    (%eax),%eax
   14ab2:	8b 55 0c             	mov    0xc(%ebp),%edx
   14ab5:	89 10                	mov    %edx,(%eax)
        list->first = node;
   14ab7:	8b 45 08             	mov    0x8(%ebp),%eax
   14aba:	8b 55 0c             	mov    0xc(%ebp),%edx
   14abd:	89 10                	mov    %edx,(%eax)
    }

    list->size++;
   14abf:	8b 45 08             	mov    0x8(%ebp),%eax
   14ac2:	8b 40 08             	mov    0x8(%eax),%eax
   14ac5:	8d 50 01             	lea    0x1(%eax),%edx
   14ac8:	8b 45 08             	mov    0x8(%ebp),%eax
   14acb:	89 50 08             	mov    %edx,0x8(%eax)
}
   14ace:	90                   	nop
   14acf:	c9                   	leave  
   14ad0:	c3                   	ret    

00014ad1 <list_insert_last>:

void list_insert_last(list_t *list, list_node_t *node) {
   14ad1:	55                   	push   %ebp
   14ad2:	89 e5                	mov    %esp,%ebp
   14ad4:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   14ad7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   14adb:	74 06                	je     14ae3 <list_insert_last+0x12>
   14add:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   14ae1:	75 19                	jne    14afc <list_insert_last+0x2b>
   14ae3:	68 54 5e 01 00       	push   $0x15e54
   14ae8:	68 f4 5e 01 00       	push   $0x15ef4
   14aed:	6a 1f                	push   $0x1f
   14aef:	68 84 5e 01 00       	push   $0x15e84
   14af4:	e8 c6 f5 ff ff       	call   140bf <pannic>
   14af9:	83 c4 10             	add    $0x10,%esp

    node->pre = list->last;
   14afc:	8b 45 08             	mov    0x8(%ebp),%eax
   14aff:	8b 50 04             	mov    0x4(%eax),%edx
   14b02:	8b 45 0c             	mov    0xc(%ebp),%eax
   14b05:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   14b07:	8b 45 0c             	mov    0xc(%ebp),%eax
   14b0a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)


    if (list_is_empty(list)) {
   14b11:	83 ec 0c             	sub    $0xc,%esp
   14b14:	ff 75 08             	push   0x8(%ebp)
   14b17:	e8 c8 fe ff ff       	call   149e4 <list_is_empty>
   14b1c:	83 c4 10             	add    $0x10,%esp
   14b1f:	85 c0                	test   %eax,%eax
   14b21:	74 16                	je     14b39 <list_insert_last+0x68>
        list->first = list->last = node;
   14b23:	8b 45 08             	mov    0x8(%ebp),%eax
   14b26:	8b 55 0c             	mov    0xc(%ebp),%edx
   14b29:	89 50 04             	mov    %edx,0x4(%eax)
   14b2c:	8b 45 08             	mov    0x8(%ebp),%eax
   14b2f:	8b 50 04             	mov    0x4(%eax),%edx
   14b32:	8b 45 08             	mov    0x8(%ebp),%eax
   14b35:	89 10                	mov    %edx,(%eax)
   14b37:	eb 15                	jmp    14b4e <list_insert_last+0x7d>
    } else {
        list->last->next = node;
   14b39:	8b 45 08             	mov    0x8(%ebp),%eax
   14b3c:	8b 40 04             	mov    0x4(%eax),%eax
   14b3f:	8b 55 0c             	mov    0xc(%ebp),%edx
   14b42:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   14b45:	8b 45 08             	mov    0x8(%ebp),%eax
   14b48:	8b 55 0c             	mov    0xc(%ebp),%edx
   14b4b:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->size++;
   14b4e:	8b 45 08             	mov    0x8(%ebp),%eax
   14b51:	8b 40 08             	mov    0x8(%eax),%eax
   14b54:	8d 50 01             	lea    0x1(%eax),%edx
   14b57:	8b 45 08             	mov    0x8(%ebp),%eax
   14b5a:	89 50 08             	mov    %edx,0x8(%eax)

}
   14b5d:	90                   	nop
   14b5e:	c9                   	leave  
   14b5f:	c3                   	ret    

00014b60 <list_remove_first>:

list_node_t* list_remove_first(list_t *list){
   14b60:	55                   	push   %ebp
   14b61:	89 e5                	mov    %esp,%ebp
   14b63:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   14b66:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   14b6a:	75 19                	jne    14b85 <list_remove_first+0x25>
   14b6c:	68 ba 5e 01 00       	push   $0x15eba
   14b71:	68 08 5f 01 00       	push   $0x15f08
   14b76:	6a 31                	push   $0x31
   14b78:	68 84 5e 01 00       	push   $0x15e84
   14b7d:	e8 3d f5 ff ff       	call   140bf <pannic>
   14b82:	83 c4 10             	add    $0x10,%esp
    if (list_is_empty(list)) {
   14b85:	83 ec 0c             	sub    $0xc,%esp
   14b88:	ff 75 08             	push   0x8(%ebp)
   14b8b:	e8 54 fe ff ff       	call   149e4 <list_is_empty>
   14b90:	83 c4 10             	add    $0x10,%esp
   14b93:	85 c0                	test   %eax,%eax
   14b95:	74 07                	je     14b9e <list_remove_first+0x3e>
        return (list_node_t*)0;
   14b97:	b8 00 00 00 00       	mov    $0x0,%eax
   14b9c:	eb 71                	jmp    14c0f <list_remove_first+0xaf>
    }

    list_node_t *ret = list->first;
   14b9e:	8b 45 08             	mov    0x8(%ebp),%eax
   14ba1:	8b 00                	mov    (%eax),%eax
   14ba3:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   14ba6:	83 ec 0c             	sub    $0xc,%esp
   14ba9:	ff 75 08             	push   0x8(%ebp)
   14bac:	e8 68 fe ff ff       	call   14a19 <list_get_size>
   14bb1:	83 c4 10             	add    $0x10,%esp
   14bb4:	83 f8 01             	cmp    $0x1,%eax
   14bb7:	75 17                	jne    14bd0 <list_remove_first+0x70>
        list->first = list->last = (list_node_t*)0;
   14bb9:	8b 45 08             	mov    0x8(%ebp),%eax
   14bbc:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   14bc3:	8b 45 08             	mov    0x8(%ebp),%eax
   14bc6:	8b 50 04             	mov    0x4(%eax),%edx
   14bc9:	8b 45 08             	mov    0x8(%ebp),%eax
   14bcc:	89 10                	mov    %edx,(%eax)
   14bce:	eb 18                	jmp    14be8 <list_remove_first+0x88>
    } else {
        list->first = list->first->next;
   14bd0:	8b 45 08             	mov    0x8(%ebp),%eax
   14bd3:	8b 00                	mov    (%eax),%eax
   14bd5:	8b 50 04             	mov    0x4(%eax),%edx
   14bd8:	8b 45 08             	mov    0x8(%ebp),%eax
   14bdb:	89 10                	mov    %edx,(%eax)
        list->first->pre = (list_node_t*)0;
   14bdd:	8b 45 08             	mov    0x8(%ebp),%eax
   14be0:	8b 00                	mov    (%eax),%eax
   14be2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    list->size--;
   14be8:	8b 45 08             	mov    0x8(%ebp),%eax
   14beb:	8b 40 08             	mov    0x8(%eax),%eax
   14bee:	8d 50 ff             	lea    -0x1(%eax),%edx
   14bf1:	8b 45 08             	mov    0x8(%ebp),%eax
   14bf4:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   14bf7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14bfa:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   14c01:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14c04:	8b 50 04             	mov    0x4(%eax),%edx
   14c07:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14c0a:	89 10                	mov    %edx,(%eax)
    return ret;
   14c0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
 }
   14c0f:	c9                   	leave  
   14c10:	c3                   	ret    

00014c11 <list_remove_last>:

list_node_t* list_remove_last(list_t *list) {
   14c11:	55                   	push   %ebp
   14c12:	89 e5                	mov    %esp,%ebp
   14c14:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   14c17:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   14c1b:	75 19                	jne    14c36 <list_remove_last+0x25>
   14c1d:	68 ba 5e 01 00       	push   $0x15eba
   14c22:	68 2c 5f 01 00       	push   $0x15f2c
   14c27:	6a 46                	push   $0x46
   14c29:	68 84 5e 01 00       	push   $0x15e84
   14c2e:	e8 8c f4 ff ff       	call   140bf <pannic>
   14c33:	83 c4 10             	add    $0x10,%esp
     if (list_is_empty(list)) {
   14c36:	83 ec 0c             	sub    $0xc,%esp
   14c39:	ff 75 08             	push   0x8(%ebp)
   14c3c:	e8 a3 fd ff ff       	call   149e4 <list_is_empty>
   14c41:	83 c4 10             	add    $0x10,%esp
   14c44:	85 c0                	test   %eax,%eax
   14c46:	74 07                	je     14c4f <list_remove_last+0x3e>
        return (list_node_t*)0;
   14c48:	b8 00 00 00 00       	mov    $0x0,%eax
   14c4d:	eb 75                	jmp    14cc4 <list_remove_last+0xb3>
    }

    list_node_t *ret = list->last;
   14c4f:	8b 45 08             	mov    0x8(%ebp),%eax
   14c52:	8b 40 04             	mov    0x4(%eax),%eax
   14c55:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   14c58:	83 ec 0c             	sub    $0xc,%esp
   14c5b:	ff 75 08             	push   0x8(%ebp)
   14c5e:	e8 b6 fd ff ff       	call   14a19 <list_get_size>
   14c63:	83 c4 10             	add    $0x10,%esp
   14c66:	83 f8 01             	cmp    $0x1,%eax
   14c69:	75 17                	jne    14c82 <list_remove_last+0x71>
        list->first = list->last = (list_node_t*)0;
   14c6b:	8b 45 08             	mov    0x8(%ebp),%eax
   14c6e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   14c75:	8b 45 08             	mov    0x8(%ebp),%eax
   14c78:	8b 50 04             	mov    0x4(%eax),%edx
   14c7b:	8b 45 08             	mov    0x8(%ebp),%eax
   14c7e:	89 10                	mov    %edx,(%eax)
   14c80:	eb 1b                	jmp    14c9d <list_remove_last+0x8c>
    } else {
        list->last = list->last->pre;
   14c82:	8b 45 08             	mov    0x8(%ebp),%eax
   14c85:	8b 40 04             	mov    0x4(%eax),%eax
   14c88:	8b 10                	mov    (%eax),%edx
   14c8a:	8b 45 08             	mov    0x8(%ebp),%eax
   14c8d:	89 50 04             	mov    %edx,0x4(%eax)
        list->last->next = (list_node_t*)0;
   14c90:	8b 45 08             	mov    0x8(%ebp),%eax
   14c93:	8b 40 04             	mov    0x4(%eax),%eax
   14c96:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    }

    list->size--;
   14c9d:	8b 45 08             	mov    0x8(%ebp),%eax
   14ca0:	8b 40 08             	mov    0x8(%eax),%eax
   14ca3:	8d 50 ff             	lea    -0x1(%eax),%edx
   14ca6:	8b 45 08             	mov    0x8(%ebp),%eax
   14ca9:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   14cac:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14caf:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   14cb6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14cb9:	8b 50 04             	mov    0x4(%eax),%edx
   14cbc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14cbf:	89 10                	mov    %edx,(%eax)
    return ret;
   14cc1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   14cc4:	c9                   	leave  
   14cc5:	c3                   	ret    

00014cc6 <list_remove>:

list_node_t* list_remove(list_t *list, list_node_t *node) {
   14cc6:	55                   	push   %ebp
   14cc7:	89 e5                	mov    %esp,%ebp
   14cc9:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   14ccc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   14cd0:	74 06                	je     14cd8 <list_remove+0x12>
   14cd2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   14cd6:	75 19                	jne    14cf1 <list_remove+0x2b>
   14cd8:	68 54 5e 01 00       	push   $0x15e54
   14cdd:	68 40 5f 01 00       	push   $0x15f40
   14ce2:	6a 5b                	push   $0x5b
   14ce4:	68 84 5e 01 00       	push   $0x15e84
   14ce9:	e8 d1 f3 ff ff       	call   140bf <pannic>
   14cee:	83 c4 10             	add    $0x10,%esp

    if (list_is_empty(list)) {
   14cf1:	83 ec 0c             	sub    $0xc,%esp
   14cf4:	ff 75 08             	push   0x8(%ebp)
   14cf7:	e8 e8 fc ff ff       	call   149e4 <list_is_empty>
   14cfc:	83 c4 10             	add    $0x10,%esp
   14cff:	85 c0                	test   %eax,%eax
   14d01:	74 0a                	je     14d0d <list_remove+0x47>
        return (list_node_t*)0;
   14d03:	b8 00 00 00 00       	mov    $0x0,%eax
   14d08:	e9 80 00 00 00       	jmp    14d8d <list_remove+0xc7>
    }

    if (node == list->first) list->first = node->next;
   14d0d:	8b 45 08             	mov    0x8(%ebp),%eax
   14d10:	8b 00                	mov    (%eax),%eax
   14d12:	39 45 0c             	cmp    %eax,0xc(%ebp)
   14d15:	75 0b                	jne    14d22 <list_remove+0x5c>
   14d17:	8b 45 0c             	mov    0xc(%ebp),%eax
   14d1a:	8b 50 04             	mov    0x4(%eax),%edx
   14d1d:	8b 45 08             	mov    0x8(%ebp),%eax
   14d20:	89 10                	mov    %edx,(%eax)
    if (node == list->last) list->last = node->pre;
   14d22:	8b 45 08             	mov    0x8(%ebp),%eax
   14d25:	8b 40 04             	mov    0x4(%eax),%eax
   14d28:	39 45 0c             	cmp    %eax,0xc(%ebp)
   14d2b:	75 0b                	jne    14d38 <list_remove+0x72>
   14d2d:	8b 45 0c             	mov    0xc(%ebp),%eax
   14d30:	8b 10                	mov    (%eax),%edx
   14d32:	8b 45 08             	mov    0x8(%ebp),%eax
   14d35:	89 50 04             	mov    %edx,0x4(%eax)

    if (node->pre) node->pre->next = node->next;
   14d38:	8b 45 0c             	mov    0xc(%ebp),%eax
   14d3b:	8b 00                	mov    (%eax),%eax
   14d3d:	85 c0                	test   %eax,%eax
   14d3f:	74 0e                	je     14d4f <list_remove+0x89>
   14d41:	8b 45 0c             	mov    0xc(%ebp),%eax
   14d44:	8b 00                	mov    (%eax),%eax
   14d46:	8b 55 0c             	mov    0xc(%ebp),%edx
   14d49:	8b 52 04             	mov    0x4(%edx),%edx
   14d4c:	89 50 04             	mov    %edx,0x4(%eax)
    if (node->next) node->next->pre = node->pre;
   14d4f:	8b 45 0c             	mov    0xc(%ebp),%eax
   14d52:	8b 40 04             	mov    0x4(%eax),%eax
   14d55:	85 c0                	test   %eax,%eax
   14d57:	74 0d                	je     14d66 <list_remove+0xa0>
   14d59:	8b 45 0c             	mov    0xc(%ebp),%eax
   14d5c:	8b 40 04             	mov    0x4(%eax),%eax
   14d5f:	8b 55 0c             	mov    0xc(%ebp),%edx
   14d62:	8b 12                	mov    (%edx),%edx
   14d64:	89 10                	mov    %edx,(%eax)

    node->pre = node->next = (list_node_t*)0;
   14d66:	8b 45 0c             	mov    0xc(%ebp),%eax
   14d69:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   14d70:	8b 45 0c             	mov    0xc(%ebp),%eax
   14d73:	8b 50 04             	mov    0x4(%eax),%edx
   14d76:	8b 45 0c             	mov    0xc(%ebp),%eax
   14d79:	89 10                	mov    %edx,(%eax)
    list->size--;
   14d7b:	8b 45 08             	mov    0x8(%ebp),%eax
   14d7e:	8b 40 08             	mov    0x8(%eax),%eax
   14d81:	8d 50 ff             	lea    -0x1(%eax),%edx
   14d84:	8b 45 08             	mov    0x8(%ebp),%eax
   14d87:	89 50 08             	mov    %edx,0x8(%eax)

    return node;
   14d8a:	8b 45 0c             	mov    0xc(%ebp),%eax
   14d8d:	c9                   	leave  
   14d8e:	c3                   	ret    

00014d8f <log_init>:

/**
 * @brief  初始化串行端口寄存器COM1
 * 
 */
void log_init(void) {
   14d8f:	55                   	push   %ebp
   14d90:	89 e5                	mov    %esp,%ebp
   14d92:	83 ec 08             	sub    $0x8,%esp
    outb(COM1_PORT + 2, 0xc7);
    outb(COM1_PORT + 4, 0x0f);

#endif 
    //初始化互斥锁
    mutex_init(&mutex);
   14d95:	83 ec 0c             	sub    $0xc,%esp
   14d98:	68 24 8e 03 00       	push   $0x38e24
   14d9d:	e8 08 ec ff ff       	call   139aa <mutex_init>
   14da2:	83 c4 10             	add    $0x10,%esp
}
   14da5:	90                   	nop
   14da6:	c9                   	leave  
   14da7:	c3                   	ret    

00014da8 <log_printf>:
 * @brief  格式化输出到串口
 * 
 * @param formate 
 * @param ... 
 */
void log_printf(const char *formate, ...) {
   14da8:	55                   	push   %ebp
   14da9:	89 e5                	mov    %esp,%ebp
   14dab:	81 ec 98 00 00 00    	sub    $0x98,%esp
    //1.设置字符缓冲区
    char str_buf[128];
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   14db1:	83 ec 04             	sub    $0x4,%esp
   14db4:	68 80 00 00 00       	push   $0x80
   14db9:	6a 00                	push   $0x0
   14dbb:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   14dc1:	50                   	push   %eax
   14dc2:	e8 fa f7 ff ff       	call   145c1 <kernel_memset>
   14dc7:	83 c4 10             	add    $0x10,%esp
    
    //2.获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   14dca:	8d 45 0c             	lea    0xc(%ebp),%eax
   14dcd:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, formate, args);
   14dd3:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   14dd9:	83 ec 04             	sub    $0x4,%esp
   14ddc:	50                   	push   %eax
   14ddd:	ff 75 08             	push   0x8(%ebp)
   14de0:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   14de6:	50                   	push   %eax
   14de7:	e8 be f8 ff ff       	call   146aa <kernel_vsprintf>
   14dec:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    const char *p = str_buf;
   14def:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   14df5:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将以下资源放入临界资源包含区，防止在运行时发生进程切换（cpu关中断）
    mutex_lock(&mutex); //TODO:加锁
   14df8:	83 ec 0c             	sub    $0xc,%esp
   14dfb:	68 24 8e 03 00       	push   $0x38e24
   14e00:	e8 f2 eb ff ff       	call   139f7 <mutex_lock>
   14e05:	83 c4 10             	add    $0x10,%esp
    //5.换行
    outb(COM1_PORT, '\r');
    outb(COM1_PORT, '\n');

#else
    console_write(0, str_buf, kernel_strlen(str_buf));
   14e08:	83 ec 0c             	sub    $0xc,%esp
   14e0b:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   14e11:	50                   	push   %eax
   14e12:	e8 26 f7 ff ff       	call   1453d <kernel_strlen>
   14e17:	83 c4 10             	add    $0x10,%esp
   14e1a:	83 ec 04             	sub    $0x4,%esp
   14e1d:	50                   	push   %eax
   14e1e:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   14e24:	50                   	push   %eax
   14e25:	6a 00                	push   $0x0
   14e27:	e8 43 e6 ff ff       	call   1346f <console_write>
   14e2c:	83 c4 10             	add    $0x10,%esp
    char c = '\n';
   14e2f:	c6 85 6f ff ff ff 0a 	movb   $0xa,-0x91(%ebp)
    console_write(0, &c, 1); 
   14e36:	83 ec 04             	sub    $0x4,%esp
   14e39:	6a 01                	push   $0x1
   14e3b:	8d 85 6f ff ff ff    	lea    -0x91(%ebp),%eax
   14e41:	50                   	push   %eax
   14e42:	6a 00                	push   $0x0
   14e44:	e8 26 e6 ff ff       	call   1346f <console_write>
   14e49:	83 c4 10             	add    $0x10,%esp
#endif

    //执行完毕，将资源离开临界资源保护区，(cpu开中断)
    mutex_unlock(&mutex); //TODO:解锁
   14e4c:	83 ec 0c             	sub    $0xc,%esp
   14e4f:	68 24 8e 03 00       	push   $0x38e24
   14e54:	e8 2f ec ff ff       	call   13a88 <mutex_unlock>
   14e59:	83 c4 10             	add    $0x10,%esp
   14e5c:	90                   	nop
   14e5d:	c9                   	leave  
   14e5e:	c3                   	ret    

Disassembly of section .first_task:

80000000 <first_task_entry>:
//第一个任务进程入口函数
first_task_entry:
    //iret指令返回后，将之前压入的 ss,esp,eflags,cs,eip 寄存器值返回给对应寄存器，
	//由于cpu从0特权级切换到了3特权级，而之前其余的段寄存器都是0特权级，不能供3特权级使用，
	//所以cpu将其余寄存器置零，这里直接用ss寄存器再初始化其余段寄存器即可
	mov %ss, %ax
80000000:	66 8c d0             	mov    %ss,%ax
	mov %ax, %ds
80000003:	8e d8                	mov    %eax,%ds
	mov %ax, %es
80000005:	8e c0                	mov    %eax,%es
	mov %ax, %fs
80000007:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
80000009:	8e e8                	mov    %eax,%gs

    //因为cs寄存器已由操作系统分配，所以直接跳转即可
8000000b:	e9 00 00 00 00       	jmp    80000010 <first_main>

80000010 <first_main>:

#include "tools/log.h"
#include "core/task.h"
#include  "applib/lib_syscall.h"

int first_main(void) {
80000010:	55                   	push   %ebp
80000011:	89 e5                	mov    %esp,%ebp
80000013:	83 ec 28             	sub    $0x28,%esp
    //     //msleep(100);
    // }
    
    int pid;
    int i;
    for (i = 0; i < 1; ++i) {
80000016:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
8000001d:	eb 12                	jmp    80000031 <first_main+0x21>
        pid = fork();
8000001f:	e8 2f 01 00 00       	call   80000153 <fork>
80000024:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (pid == 0)
80000027:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
8000002b:	74 0c                	je     80000039 <first_main+0x29>
    for (i = 0; i < 1; ++i) {
8000002d:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
80000031:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80000035:	7e e8                	jle    8000001f <first_main+0xf>
80000037:	eb 01                	jmp    8000003a <first_main+0x2a>
            break;
80000039:	90                   	nop
    }

    char * const argv[] = {"arg0", "arg1", "arg2", "arg3", 0};
8000003a:	c7 45 dc 7b 00 00 80 	movl   $0x8000007b,-0x24(%ebp)
80000041:	c7 45 e0 80 00 00 80 	movl   $0x80000080,-0x20(%ebp)
80000048:	c7 45 e4 85 00 00 80 	movl   $0x80000085,-0x1c(%ebp)
8000004f:	c7 45 e8 8a 00 00 80 	movl   $0x8000008a,-0x18(%ebp)
80000056:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    if (pid != 0) execve("/shell.elf", argv, 0);
8000005d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80000061:	74 16                	je     80000079 <first_main+0x69>
80000063:	83 ec 04             	sub    $0x4,%esp
80000066:	6a 00                	push   $0x0
80000068:	8d 45 dc             	lea    -0x24(%ebp),%eax
8000006b:	50                   	push   %eax
8000006c:	68 8f 00 00 80       	push   $0x8000008f
80000071:	e8 f8 00 00 00       	call   8000016e <execve>
80000076:	83 c4 10             	add    $0x10,%esp
    
    for (;;)
80000079:	eb fe                	jmp    80000079 <first_main+0x69>
8000007b:	61                   	popa   
8000007c:	72 67                	jb     800000e5 <sys_call+0x4b>
8000007e:	30 00                	xor    %al,(%eax)
80000080:	61                   	popa   
80000081:	72 67                	jb     800000ea <msleep+0x4>
80000083:	31 00                	xor    %eax,(%eax)
80000085:	61                   	popa   
80000086:	72 67                	jb     800000ef <msleep+0x9>
80000088:	32 00                	xor    (%eax),%al
8000008a:	61                   	popa   
8000008b:	72 67                	jb     800000f4 <msleep+0xe>
8000008d:	33 00                	xor    (%eax),%eax
8000008f:	2f                   	das    
80000090:	73 68                	jae    800000fa <msleep+0x14>
80000092:	65 6c                	gs insb (%dx),%es:(%edi)
80000094:	6c                   	insb   (%dx),%es:(%edi)
80000095:	2e 65 6c             	cs gs insb (%dx),%es:(%edi)
80000098:	66                   	data16
	...

8000009a <sys_call>:
#include    "cpu/syscall.h"
#include    "os_cfg.h"
#include    "lib_syscall.h"


int sys_call(syscall_args_t *args) {
8000009a:	55                   	push   %ebp
8000009b:	89 e5                	mov    %esp,%ebp
8000009d:	57                   	push   %edi
8000009e:	56                   	push   %esi
8000009f:	53                   	push   %ebx
800000a0:	83 ec 10             	sub    $0x10,%esp
    // 传入远跳转需要的参数, 即cs = selector, eip = offset 
    //为调用门选择子赋予0特权级,调用门的 cpl 和 RPL <= 系统调用段描述符的DPL
    //门描述符中目标选择子的 CPL <= 门描述符的 DPL
    uint32_t addr[] = {0, SYSCALL_SELECTOR | 0};  
800000a3:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
800000aa:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%ebp)
        "push %[arg1]\n\t"
        "push %[arg0]\n\t"
        "push %[id]\n\t"
        "lcalll *(%[addr])\n\t"
        :"=a"(ret)
        :[arg3]"r"(args->arg3), 
800000b1:	8b 45 08             	mov    0x8(%ebp),%eax
800000b4:	8b 40 10             	mov    0x10(%eax),%eax
         [arg2]"r"(args->arg2), 
800000b7:	8b 55 08             	mov    0x8(%ebp),%edx
800000ba:	8b 52 0c             	mov    0xc(%edx),%edx
         [arg1]"r"(args->arg1),
800000bd:	8b 4d 08             	mov    0x8(%ebp),%ecx
800000c0:	8b 49 08             	mov    0x8(%ecx),%ecx
         [arg0]"r"(args->arg0), 
800000c3:	8b 5d 08             	mov    0x8(%ebp),%ebx
800000c6:	8b 5b 04             	mov    0x4(%ebx),%ebx
         [id]"r"(args->id), 
800000c9:	8b 75 08             	mov    0x8(%ebp),%esi
800000cc:	8b 36                	mov    (%esi),%esi
     __asm__ __volatile__(
800000ce:	8d 7d e8             	lea    -0x18(%ebp),%edi
800000d1:	50                   	push   %eax
800000d2:	52                   	push   %edx
800000d3:	51                   	push   %ecx
800000d4:	53                   	push   %ebx
800000d5:	56                   	push   %esi
800000d6:	ff 1f                	lcall  *(%edi)
800000d8:	89 45 f0             	mov    %eax,-0x10(%ebp)
         [addr]"r"(addr)
    );

    return ret;
800000db:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
800000de:	83 c4 10             	add    $0x10,%esp
800000e1:	5b                   	pop    %ebx
800000e2:	5e                   	pop    %esi
800000e3:	5f                   	pop    %edi
800000e4:	5d                   	pop    %ebp
800000e5:	c3                   	ret    

800000e6 <msleep>:
/**
 * @brief 以ms为单位进行延时
 * 
 * @param ms 
 */
void msleep(int ms) {
800000e6:	55                   	push   %ebp
800000e7:	89 e5                	mov    %esp,%ebp
800000e9:	83 ec 20             	sub    $0x20,%esp
    if (ms <= 0) return;
800000ec:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
800000f0:	7e 1b                	jle    8000010d <msleep+0x27>

    syscall_args_t args;
    args.id = SYS_sleep;
800000f2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    args.arg0 = ms;
800000f9:	8b 45 08             	mov    0x8(%ebp),%eax
800000fc:	89 45 f0             	mov    %eax,-0x10(%ebp)

    sys_call(&args);
800000ff:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000102:	50                   	push   %eax
80000103:	e8 92 ff ff ff       	call   8000009a <sys_call>
80000108:	83 c4 04             	add    $0x4,%esp
8000010b:	eb 01                	jmp    8000010e <msleep+0x28>
    if (ms <= 0) return;
8000010d:	90                   	nop

}
8000010e:	c9                   	leave  
8000010f:	c3                   	ret    

80000110 <getpid>:
/**
 * @brief 获取用户进程id
 * 
 * @return int 
 */
int getpid(void) {
80000110:	55                   	push   %ebp
80000111:	89 e5                	mov    %esp,%ebp
80000113:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_getpid;
80000116:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)

    return sys_call(&args);
8000011d:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000120:	50                   	push   %eax
80000121:	e8 74 ff ff ff       	call   8000009a <sys_call>
80000126:	83 c4 04             	add    $0x4,%esp
}
80000129:	c9                   	leave  
8000012a:	c3                   	ret    

8000012b <print_msg>:

void print_msg(const char *fmt, int arg) {
8000012b:	55                   	push   %ebp
8000012c:	89 e5                	mov    %esp,%ebp
8000012e:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_printmsg;
80000131:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
    args.arg0 = (int)fmt;
80000138:	8b 45 08             	mov    0x8(%ebp),%eax
8000013b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = arg;
8000013e:	8b 45 0c             	mov    0xc(%ebp),%eax
80000141:	89 45 f4             	mov    %eax,-0xc(%ebp)

    sys_call(&args);
80000144:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000147:	50                   	push   %eax
80000148:	e8 4d ff ff ff       	call   8000009a <sys_call>
8000014d:	83 c4 04             	add    $0x4,%esp
}
80000150:	90                   	nop
80000151:	c9                   	leave  
80000152:	c3                   	ret    

80000153 <fork>:

int fork (void) {
80000153:	55                   	push   %ebp
80000154:	89 e5                	mov    %esp,%ebp
80000156:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fork;
80000159:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)

    return sys_call(&args);
80000160:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000163:	50                   	push   %eax
80000164:	e8 31 ff ff ff       	call   8000009a <sys_call>
80000169:	83 c4 04             	add    $0x4,%esp
}
8000016c:	c9                   	leave  
8000016d:	c3                   	ret    

8000016e <execve>:
 * @param name 外部程序名
 * @param argv 外部程序的参数，字符串常量指针，即字符串数组，数组中的char*值为常量
 * @param env  所加载程序的环境变量
 * @return int 
 */
int execve(const char *name, char * const * argv, char * const * env) {
8000016e:	55                   	push   %ebp
8000016f:	89 e5                	mov    %esp,%ebp
80000171:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_execve;
80000174:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
    args.arg0 = (int)name;
8000017b:	8b 45 08             	mov    0x8(%ebp),%eax
8000017e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)argv;
80000181:	8b 45 0c             	mov    0xc(%ebp),%eax
80000184:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = (int)env;
80000187:	8b 45 10             	mov    0x10(%ebp),%eax
8000018a:	89 45 f8             	mov    %eax,-0x8(%ebp)


    return sys_call(&args);
8000018d:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000190:	50                   	push   %eax
80000191:	e8 04 ff ff ff       	call   8000009a <sys_call>
80000196:	83 c4 04             	add    $0x4,%esp
}
80000199:	c9                   	leave  
8000019a:	c3                   	ret    

8000019b <yield>:
/**
 * @brief 进程主动放弃cpu
 * 
 * @return int 
 */
int yield (void) {
8000019b:	55                   	push   %ebp
8000019c:	89 e5                	mov    %esp,%ebp
8000019e:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_yield;
800001a1:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)

    return sys_call(&args);
800001a8:	8d 45 ec             	lea    -0x14(%ebp),%eax
800001ab:	50                   	push   %eax
800001ac:	e8 e9 fe ff ff       	call   8000009a <sys_call>
800001b1:	83 c4 04             	add    $0x4,%esp
}
800001b4:	c9                   	leave  
800001b5:	c3                   	ret    

800001b6 <open>:
 * @param name 
 * @param flags 
 * @param ... 
 * @return int 
 */
int open(const char *name, int flags, ...) {
800001b6:	55                   	push   %ebp
800001b7:	89 e5                	mov    %esp,%ebp
800001b9:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_open;
800001bc:	c7 45 ec 32 00 00 00 	movl   $0x32,-0x14(%ebp)
    args.arg0 = (int)name;
800001c3:	8b 45 08             	mov    0x8(%ebp),%eax
800001c6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = flags;
800001c9:	8b 45 0c             	mov    0xc(%ebp),%eax
800001cc:	89 45 f4             	mov    %eax,-0xc(%ebp)

    return sys_call(&args);
800001cf:	8d 45 ec             	lea    -0x14(%ebp),%eax
800001d2:	50                   	push   %eax
800001d3:	e8 c2 fe ff ff       	call   8000009a <sys_call>
800001d8:	83 c4 04             	add    $0x4,%esp
}
800001db:	c9                   	leave  
800001dc:	c3                   	ret    

800001dd <read>:
 * @param file 
 * @param ptr 
 * @param len 
 * @return int 
 */
int read(int file, char *ptr, int len) {
800001dd:	55                   	push   %ebp
800001de:	89 e5                	mov    %esp,%ebp
800001e0:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_read;
800001e3:	c7 45 ec 33 00 00 00 	movl   $0x33,-0x14(%ebp)
    args.arg0 = file;
800001ea:	8b 45 08             	mov    0x8(%ebp),%eax
800001ed:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
800001f0:	8b 45 0c             	mov    0xc(%ebp),%eax
800001f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
800001f6:	8b 45 10             	mov    0x10(%ebp),%eax
800001f9:	89 45 f8             	mov    %eax,-0x8(%ebp)

    return sys_call(&args);
800001fc:	8d 45 ec             	lea    -0x14(%ebp),%eax
800001ff:	50                   	push   %eax
80000200:	e8 95 fe ff ff       	call   8000009a <sys_call>
80000205:	83 c4 04             	add    $0x4,%esp
}
80000208:	c9                   	leave  
80000209:	c3                   	ret    

8000020a <write>:
 * @param file 
 * @param ptr 
 * @param len 
 * @return int 
 */
int write(int file, char *ptr, int len) {
8000020a:	55                   	push   %ebp
8000020b:	89 e5                	mov    %esp,%ebp
8000020d:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_write;
80000210:	c7 45 ec 34 00 00 00 	movl   $0x34,-0x14(%ebp)
    args.arg0 = file;
80000217:	8b 45 08             	mov    0x8(%ebp),%eax
8000021a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
8000021d:	8b 45 0c             	mov    0xc(%ebp),%eax
80000220:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
80000223:	8b 45 10             	mov    0x10(%ebp),%eax
80000226:	89 45 f8             	mov    %eax,-0x8(%ebp)

    return sys_call(&args);
80000229:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000022c:	50                   	push   %eax
8000022d:	e8 68 fe ff ff       	call   8000009a <sys_call>
80000232:	83 c4 04             	add    $0x4,%esp
}
80000235:	c9                   	leave  
80000236:	c3                   	ret    

80000237 <close>:
 * @brief 关闭文件描述符
 * 
 * @param file 
 * @return int 
 */
int close(int file) {
80000237:	55                   	push   %ebp
80000238:	89 e5                	mov    %esp,%ebp
8000023a:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_close;
8000023d:	c7 45 ec 35 00 00 00 	movl   $0x35,-0x14(%ebp)
    args.arg0 = file;
80000244:	8b 45 08             	mov    0x8(%ebp),%eax
80000247:	89 45 f0             	mov    %eax,-0x10(%ebp)

    return sys_call(&args);
8000024a:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000024d:	50                   	push   %eax
8000024e:	e8 47 fe ff ff       	call   8000009a <sys_call>
80000253:	83 c4 04             	add    $0x4,%esp
}
80000256:	c9                   	leave  
80000257:	c3                   	ret    

80000258 <lseek>:
 * @param file 
 * @param offset 
 * @param dir 
 * @return int 
 */
int lseek(int file, int offset, int dir) {
80000258:	55                   	push   %ebp
80000259:	89 e5                	mov    %esp,%ebp
8000025b:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_lseek;
8000025e:	c7 45 ec 36 00 00 00 	movl   $0x36,-0x14(%ebp)
    args.arg0 = file;
80000265:	8b 45 08             	mov    0x8(%ebp),%eax
80000268:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = offset;
8000026b:	8b 45 0c             	mov    0xc(%ebp),%eax
8000026e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = dir;
80000271:	8b 45 10             	mov    0x10(%ebp),%eax
80000274:	89 45 f8             	mov    %eax,-0x8(%ebp)

    return sys_call(&args);
80000277:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000027a:	50                   	push   %eax
8000027b:	e8 1a fe ff ff       	call   8000009a <sys_call>
80000280:	83 c4 04             	add    $0x4,%esp
}
80000283:	c9                   	leave  
80000284:	c3                   	ret    

80000285 <isatty>:
 * @brief 
 * 
 * @param file 
 * @return int 
 */
int isatty(int file) {
80000285:	55                   	push   %ebp
80000286:	89 e5                	mov    %esp,%ebp
80000288:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_isatty;
8000028b:	c7 45 ec 37 00 00 00 	movl   $0x37,-0x14(%ebp)
    args.arg0 = file;
80000292:	8b 45 08             	mov    0x8(%ebp),%eax
80000295:	89 45 f0             	mov    %eax,-0x10(%ebp)

    return sys_call(&args);
80000298:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000029b:	50                   	push   %eax
8000029c:	e8 f9 fd ff ff       	call   8000009a <sys_call>
800002a1:	83 c4 04             	add    $0x4,%esp
}
800002a4:	c9                   	leave  
800002a5:	c3                   	ret    

800002a6 <fstat>:
 * 
 * @param file 
 * @param st 
 * @return int 
 */
int fstat(int file, struct stat *st) {
800002a6:	55                   	push   %ebp
800002a7:	89 e5                	mov    %esp,%ebp
800002a9:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fstat;
800002ac:	c7 45 ec 38 00 00 00 	movl   $0x38,-0x14(%ebp)
    args.arg0 = file;
800002b3:	8b 45 08             	mov    0x8(%ebp),%eax
800002b6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)st;
800002b9:	8b 45 0c             	mov    0xc(%ebp),%eax
800002bc:	89 45 f4             	mov    %eax,-0xc(%ebp)

    return sys_call(&args);
800002bf:	8d 45 ec             	lea    -0x14(%ebp),%eax
800002c2:	50                   	push   %eax
800002c3:	e8 d2 fd ff ff       	call   8000009a <sys_call>
800002c8:	83 c4 04             	add    $0x4,%esp
}
800002cb:	c9                   	leave  
800002cc:	c3                   	ret    

800002cd <sbrk>:
 * @brief 
 * 
 * @param incr 
 * @return void* 
 */
char *sbrk(ptrdiff_t incr) {
800002cd:	55                   	push   %ebp
800002ce:	89 e5                	mov    %esp,%ebp
800002d0:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_sbrk;
800002d3:	c7 45 ec 39 00 00 00 	movl   $0x39,-0x14(%ebp)
    args.arg0 = (int)incr;
800002da:	8b 45 08             	mov    0x8(%ebp),%eax
800002dd:	89 45 f0             	mov    %eax,-0x10(%ebp)

    return (char*)sys_call(&args);
800002e0:	8d 45 ec             	lea    -0x14(%ebp),%eax
800002e3:	50                   	push   %eax
800002e4:	e8 b1 fd ff ff       	call   8000009a <sys_call>
800002e9:	83 c4 04             	add    $0x4,%esp
800002ec:	c9                   	leave  
800002ed:	c3                   	ret    
