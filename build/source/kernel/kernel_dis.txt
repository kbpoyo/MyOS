
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf:     file format elf32-i386
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00007b08 memsz 0x00007b08 flags r-x
    LOAD off    0x00009000 vaddr 0x00018000 paddr 0x00018000 align 2**12
         filesz 0x00000090 memsz 0x000541d0 flags rw-
    LOAD off    0x0000a000 vaddr 0x80000000 paddr 0x0006d000 align 2**12
         filesz 0x00000341 memsz 0x00000341 flags rwx
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006612  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       000014e8  00016620  00016620  00007620  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000090  00018000  00018000  00009000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000531d0  00019000  00019000  00009090  2**12
                  ALLOC
  4 .first_task   00000341  80000000  0006d000  0000a000  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  5 .debug_line   000037e9  00000000  00000000  0000a341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_line_str 00000a62  00000000  00000000  0000db2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   0000a3b5  00000000  00000000  0000e58c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00002c92  00000000  00000000  00018941  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_aranges 00000340  00000000  00000000  0001b5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    00001e9f  00000000  00000000  0001b918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_rnglists 00000087  00000000  00000000  0001d7b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .comment      0000002d  00000000  00000000  0001d83e  2**0
                  CONTENTS, READONLY
 13 .debug_frame  00002354  00000000  00000000  0001d86c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010012 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
000102e4 l     F .text	0000000d down2
000102f1 l     F .text	00000017 up2
00010308 l     F .text	0000000c write_cr3
00010314 l     F .text	0000000b pde_index
0001031f l     F .text	00000010 pte_index
0001032f l     F .text	00000027 pde_to_pt_addr
00010356 l     F .text	00000027 pte_to_pg_addr
0001037d l     F .text	0000000f get_pte_privilege
0001038c l     F .text	00000011 mmu_set_page_dir
00019000 l     O .bss	00007e88 paddr_alloc
00021000 l     O .bss	00001000 kernel_page_dir
0001039d l     F .text	00000025 page_index
000103c2 l     F .text	00000056 page_ref_add
00010418 l     F .text	00000068 page_ref_sub
00010480 l     F .text	0000004e get_page_ref
000104ce l     F .text	00000051 clear_page_ref
0001051f l     F .text	00000087 addr_alloc_init
000105a6 l     F .text	00000067 addr_alloc_page
0001060d l     F .text	0000009c addr_free_page
000106a9 l     F .text	00000066 show_mem_info
0001070f l     F .text	00000037 total_mem_size
000167bc l     O .rodata	00000011 __func__.4
00018000 l     O .data	00000050 kernal_map.3
000167d0 l     O .rodata	0000000c __func__.2
00010e2c l     F .text	00000010 curr_page_dir
000167dc l     O .rodata	00000011 __func__.1
000167f0 l     O .rodata	00000009 __func__.0
00000000 l    df *ABS*	00000000 task.c
000110f1 l     F .text	0000003d list_node_init
000169b4 l     O .rodata	0000000f __func__.11
0001112e l     F .text	0000002d list_node_next
00016a14 l     O .rodata	0000000f __func__.5
0001115b l     F .text	00000047 list_init
000169c4 l     O .rodata	0000000a __func__.10
000111a2 l     F .text	00000035 list_is_empty
00016a24 l     O .rodata	0000000e __func__.4
000111d7 l     F .text	0000002d list_get_size
00016a54 l     O .rodata	0000000e __func__.1
00011204 l     F .text	0000002c list_get_first
00016a04 l     O .rodata	0000000f __func__.6
00011230 l     F .text	00000017 up2
00011247 l     F .text	00000007 hlt
0001124e l     F .text	0000000c write_cr3
0001125a l     F .text	0000001a far_jump
00011274 l     F .text	00000017 write_tr
0001128b l     F .text	00000011 mmu_set_page_dir
00022000 l     O .bss	000005b8 task_manager
000225c0 l     O .bss	00016200 task_table
000387c0 l     O .bss	00000014 task_table_lock
00011347 l     F .text	0000001f switch_to_tss
00011381 l     F .text	00000172 tss_init
000169a8 l     O .rodata	0000000a __func__.12
000387e0 l     O .bss	00000200 empty_task_stack
000116c5 l     F .text	0000000a empty_task
000169d0 l     O .rodata	00000010 __func__.9
000169e0 l     O .rodata	0000000f __func__.8
000169f0 l     O .rodata	00000011 __func__.7
00016a34 l     O .rodata	0000000f __func__.3
00016a44 l     O .rodata	00000010 __func__.2
00011ba4 l     F .text	00000068 alloc_task
00011c0c l     F .text	00000033 free_task
00011e88 l     F .text	00000114 load_phdr
00011f9c l     F .text	00000213 load_elf_file
000121af l     F .text	000000f1 copy_args
00016a64 l     O .rodata	0000000a __func__.0
00000000 l    df *ABS*	00000000 gate.c
00000000 l    df *ABS*	00000000 gdt.c
00012496 l     F .text	00000028 lgdt
000389e0 l     O .bss	00010000 gdt_table
000489e0 l     O .bss	00002000 is_alloc
0004a9e0 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 idt.c
000126cc l     F .text	00000007 cli
000126d3 l     F .text	00000007 sti
000126da l     F .text	00000007 hlt
000126e1 l     F .text	0000001d inb
000126fe l     F .text	00000021 outb
0001271f l     F .text	00000028 lidt
00012747 l     F .text	00000011 read_cr2
00012758 l     F .text	00000010 read_eflags
00012768 l     F .text	0000000b write_eflags
0004aa00 l     O .bss	00000800 idt_table
00012773 l     F .text	0000010f print_exception_fram
00012882 l     F .text	0000003e do_default_handler
00012c98 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 mmu.c
00000000 l    df *ABS*	00000000 syscall.c
00017040 l     O .rodata	000000ec sys_table
00000000 l    df *ABS*	00000000 console.c
0001312d l     F .text	0000001d inb
0001314a l     F .text	00000021 outb
0004b200 l     O .bss	000002a0 console_table
0004b4a0 l     O .bss	00000004 curr_console_index
0001316b l     F .text	00000074 read_cursor_pos
000131df l     F .text	000000a6 update_cursor_pos
00013285 l     F .text	00000096 erase_rows
0001331b l     F .text	00000094 scroll_up
000133af l     F .text	00000010 move_to_col0
000133bf l     F .text	00000038 move_to_next_line
000133f7 l     F .text	00000077 move_forward
0001346e l     F .text	00000095 show_char
00013503 l     F .text	00000078 move_backword
0001357b l     F .text	0000003a erase_backword
000135b5 l     F .text	00000087 clear_display
00013735 l     F .text	000000aa write_normal
000137df l     F .text	0000001e save_cursor
000137fd l     F .text	0000001e restore_cursor
0001381b l     F .text	00000029 clear_esc_param
00013844 l     F .text	0000007c write_esc
000138c0 l     F .text	0000009a set_font_style
00017160 l     O .rodata	00000020 color_table.0
0001395a l     F .text	0000004f erase_in_display
000139a9 l     F .text	00000022 move_cursor
000139cb l     F .text	00000039 move_left
00013a04 l     F .text	00000045 move_right
00013a49 l     F .text	00000104 write_esc_square
00000000 l    df *ABS*	00000000 dev.c
00018050 l     O .data	00000008 dev_des_table
0004b4c0 l     O .bss	00000a00 dev_table
00013d09 l     F .text	00000054 is_dev_exist
00000000 l    df *ABS*	00000000 keyboard.c
0001400e l     F .text	0000001d inb
00017180 l     O .rodata	00000200 map_table
0004bec0 l     O .bss	00000004 kbd_state
0001402b l     F .text	0000001a is_make_code
00014045 l     F .text	00000015 get_key
0001405a l     F .text	00000043 do_fx_key
0001409d l     F .text	000001e0 do_normal_key
0001427d l     F .text	0000008e do_e0_key
0004bec4 l     O .bss	00000001 is_inited.1
0004bec8 l     O .bss	00000004 recv_state.0
00000000 l    df *ABS*	00000000 time.c
00014423 l     F .text	00000021 outb
0004becc l     O .bss	00000004 sys_tick
0001446c l     F .text	00000062 init_pit
00000000 l    df *ABS*	00000000 tty.c
0004bee0 l     O .bss	000022a0 tty_table
0004e180 l     O .bss	00000004 curr_tty_index
000144e6 l     F .text	0000004f get_tty
00014535 l     F .text	00000037 tty_fifo_init
00000000 l    df *ABS*	00000000 file.c
0004e1a0 l     O .bss	0001c000 file_table
0006a1a0 l     O .bss	00000014 file_alloc_mutex
00000000 l    df *ABS*	00000000 fs.c
00014afd l     F .text	0000001d inb
00014b1a l     F .text	00000021 outb
00014b3b l     F .text	0000001f inw
0006a1b4 l     O .bss	00000004 temp_pos
00014b5a l     F .text	0000013d read_disk
00014c97 l     F .text	00000021 is_path_valid
00000000 l    df *ABS*	00000000 init.c
000175c0 l     O .rodata	0000000c __func__.1
000175cc l     O .rodata	00000013 __func__.0
00000000 l    df *ABS*	00000000 mutex.c
000150c9 l     F .text	00000047 list_init
0001768c l     O .rodata	0000000a __func__.1
00015110 l     F .text	00000035 list_is_empty
00017698 l     O .rodata	0000000e __func__.0
00017680 l     O .rodata	0000000b __func__.2
00000000 l    df *ABS*	00000000 sem.c
000152db l     F .text	00000047 list_init
0001774c l     O .rodata	0000000a __func__.1
00015322 l     F .text	00000035 list_is_empty
00017758 l     O .rodata	0000000e __func__.0
00017740 l     O .rodata	00000009 __func__.2
00000000 l    df *ABS*	00000000 test.c
000154af l     F .text	00000047 list_init
0001786c l     O .rodata	0000000a __func__.3
000154f6 l     F .text	0000002d list_get_size
00017878 l     O .rodata	0000000e __func__.2
00015523 l     F .text	0000002c list_get_first
00017898 l     O .rodata	0000000f __func__.0
0001554f l     F .text	0000002d list_get_last
00017888 l     O .rodata	0000000e __func__.1
00000000 l    df *ABS*	00000000 assert.c
00015857 l     F .text	00000007 hlt
00000000 l    df *ABS*	00000000 bitmap.c
0001796c l     O .rodata	0000000c __func__.3
00017978 l     O .rodata	0000000f __func__.2
00017988 l     O .rodata	0000000f __func__.1
00017998 l     O .rodata	00000013 __func__.0
00000000 l    df *ABS*	00000000 klib.c
0001808c l     O .data	00000004 num_to_char.0
00000000 l    df *ABS*	00000000 list.c
0001619a l     F .text	00000035 list_is_empty
00017aa0 l     O .rodata	0000000e __func__.5
000161cf l     F .text	0000002d list_get_size
00017ad8 l     O .rodata	0000000e __func__.2
00017a8c l     O .rodata	00000012 __func__.6
00017ab0 l     O .rodata	00000011 __func__.4
00017ac4 l     O .rodata	00000012 __func__.3
00017ae8 l     O .rodata	00000011 __func__.1
00017afc l     O .rodata	0000000c __func__.0
00000000 l    df *ABS*	00000000 log.c
0006a1b8 l     O .bss	00000014 mutex
0006a1cc l     O .bss	00000004 log_dev_id
00000000 l    df *ABS*	00000000 first_task.c
00000000 l    df *ABS*	00000000 lib_syscall.c
0001593e g     F .text	00000078 bitmap_get_bit
00015d28 g     F .text	0000004f kernel_memcpy
00014f0d g     F .text	0000000a sys_close
00012ee0 g     F .text	00000098 idt_enable
00011980 g     F .text	0000000a task_current
800001cd g     F .first_task	0000001b yield
00016287 g     F .text	0000008f list_insert_last
0001129c g     F .text	00000030 task_file
00010298 g       .text	00000000 exception_handler_kbd
00010fcb g     F .text	00000126 sys_sbrk
00011e27 g     F .text	00000061 sys_yield
000129f4 g     F .text	0000001c do_handler_segment_not_present
000118bc g     F .text	0000004b task_set_ready
00015abe g     F .text	00000021 bitmap_is_set
00013017 g     F .text	0000000b idt_enable_global
00015d77 g     F .text	00000041 kernel_memset
00013ef3 g     F .text	0000004c dev_write
00014ee9 g     F .text	00000024 sys_lseek
0001430b g     F .text	0000004e kbd_init
00010081 g       .text	00000000 exception_handler_nmi
00010243 g       .text	00000000 exception_handler_virtual_exception
0001309e g     F .text	0000008f do_handler_syscall
00016127 g     F .text	0000002d strings_count
00016545 g     F .text	0000002f log_init
00011cac g     F .text	0000017b sys_fork
00015091 g     F .text	00000038 init_main
000101ee g       .text	00000000 exception_handler_alignment_check
00013084 g     F .text	0000001a sys_print_msg
00015bda g     F .text	00000047 kernel_strcpy
0001300c g     F .text	0000000b idt_disable_global
00018000 g       .data	00000000 s_data
80000010 g     F .first_task	0000009c first_main
00012c55 g     F .text	00000043 idt_install
800001a0 g     F .first_task	0000002d execve
80000142 g     F .first_task	0000001b getpid
0001002a g       .text	00000000 exception_handler_unknown
0001009e g       .text	00000000 exception_handler_breakpoint
0001294c g     F .text	0000001c do_handler_overflow
00012bc9 g     F .text	0000001c do_handler_alignment_check
00014e1d g     F .text	0000007f sys_read
00013c39 g     F .text	000000d0 console_select
0001019b g       .text	00000000 exception_handler_general_protection
00012a2c g     F .text	000000b1 do_handler_general_protection
00012c39 g     F .text	0000001c do_handler_control_exception
00015486 g     F .text	00000029 sem_count
000128dc g     F .text	0000001c do_handler_divider
000159b6 g     F .text	00000108 bitmap_set_bit
000129bc g     F .text	0000001c do_handler_double_fault
00012add g     F .text	000000d0 do_handler_page_fault
800002b7 g     F .first_task	00000021 isatty
0001012f g       .text	00000000 exception_handler_double_fault
00013022 g     F .text	00000039 pic_send_eoi
000163c7 g     F .text	000000b5 list_remove_last
000118b2 g     F .text	0000000a task_first_task
00010000 g       .text	00000000 s_text
00015399 g     F .text	0000006b sem_wait
00010e0a g     F .text	00000022 memory_alloc_page_for
00010180 g       .text	00000000 exception_handler_stack_segment_fault
80000000 g       .first_task	00000000 first_task_entry
00014f21 g     F .text	0000000a sys_fstat
00013ea7 g     F .text	0000004c dev_read
0001257d g     F .text	000000b3 gdt_init
00012c1d g     F .text	0000001c do_handler_virtual_exception
000100bb g       .text	00000000 exception_handler_overflow
000102b5 g       .text	00000000 simple_switch
8000028a g     F .first_task	0000002d lseek
0001027b g       .text	00000000 exception_handler_time
000128f8 g     F .text	0000001c do_handler_debug
0006a1d0 g     O .bss	00002000 stack
00011c3f g     F .text	00000060 sys_sleep
00014fc7 g     F .text	0000000e fs_init
00010e5c g     F .text	00000099 memory_free_page
0001557c g     F .text	000002db list_test
00010260 g       .text	00000000 exception_handler_control_exception
0006d000 g       *ABS*	00000000 s_first_task
0001131f g     F .text	00000028 task_remove_fd
00014968 g     F .text	0000000a tty_control
0001363c g     F .text	000000f9 console_init
0001486c g     F .text	000000fc tty_read
00011645 g     F .text	00000080 task_uninit
00010d52 g     F .text	000000b8 memory_alloc_for_page_dir
00014604 g     F .text	0000008d tty_fifo_get
000100d8 g       .text	00000000 exception_handler_bound_range
00014978 g     F .text	00000066 tty_in
00012d2b g     F .text	000001b5 idt_init
00015404 g     F .text	00000082 sem_notify
00010f48 g     F .text	00000083 memory_copy_uvm_data
00013f3f g     F .text	0000004c dev_control
00014359 g     F .text	000000ca do_handler_kbd
000126a5 g     F .text	00000027 gdt_free
00012984 g     F .text	0000001c do_handler_invalid_opcode
0001014a g       .text	00000000 exception_handler_invalid_tss
00012bad g     F .text	0000001c do_handler_fpu_error
000117ac g     F .text	00000106 task_first_init
00012be5 g     F .text	0000001c do_handler_machine_check
8000023c g     F .first_task	0000002d write
00014cb8 g     F .text	00000165 sys_open
800002d8 g     F .first_task	00000027 fstat
00014f17 g     F .text	0000000a sys_isatty
000161fc g     F .text	0000008b list_insert_first
00013d5d g     F .text	0000014a dev_open
00011b59 g     F .text	0000004b task_set_wakeup
00011952 g     F .text	0000002e task_ready_first
00010047 g       .text	00000000 exception_handler_divider
800000cc g     F .first_task	0000004c sys_call
00010960 g     F .text	00000085 memory_creat_uvm
00015c21 g     F .text	00000051 kernel_strncpy
00014e9c g     F .text	0000004d sys_write
0006d341 g       *ABS*	00000000 mem_free_start
00014fd5 g     F .text	00000058 kernel_init
00015357 g     F .text	00000042 sem_init
00010000 g       .text	00000000 _start
00015e60 g     F .text	0000019d kernel_vsprintf
00016154 g     F .text	00000046 get_file_name
00010112 g       .text	00000000 exception_handler_device_unavailable
000100f5 g       .text	00000000 exception_handler_invalid_opcode
00013f8b g     F .text	00000083 dev_close
0006d000 g       .first_task	00000000 e_data
8000020f g     F .first_task	0000002d read
00015192 g     F .text	00000091 mutex_lock
000112cc g     F .text	00000053 task_alloc_fd
00010209 g       .text	00000000 exception_handler_machine_check
0001477a g     F .text	000000f2 tty_write
000129d8 g     F .text	0000001c do_handler_invalid_tss
0001456c g     F .text	00000098 tty_fifo_put
00012f78 g     F .text	00000094 idt_disable
0006d341 g       *ABS*	00000000 e_first_task
00011afd g     F .text	0000005c task_set_sleep
00014f2b g     F .text	0000009c sys_dup
000107f6 g     F .text	000000b6 memory_creat_map
00012914 g     F .text	0000001c do_handler_nmi
00014691 g     F .text	000000e9 tty_open
80000185 g     F .first_task	0000001b fork
00015145 g     F .text	0000004d mutex_init
800002ff g     F .first_task	00000021 sbrk
00010226 g       .text	00000000 exception_handler_smd_exception
00010b72 g     F .text	000000e7 memory_destroy_uvm
00015894 g     F .text	00000016 bitmap_byte_count
000129a0 g     F .text	0000001c do_handler_device_unavailable
0001305b g     F .text	00000018 idt_enter_protection
000108ac g     F .text	000000b4 create_kernal_table
000119f2 g     F .text	0000010b task_slice_end
000109e5 g     F .text	0000018d memory_copy_uvm
00014972 g     F .text	00000006 tty_close
0001502d g     F .text	00000064 move_to_first_task
00013b4d g     F .text	000000e6 console_write
80000320 g     F .first_task	00000021 dup
00015db8 g     F .text	00000084 kernel_memcmp
00012c01 g     F .text	0000001c do_handler_smd_exception
000101b6 g       .text	00000000 exception_handler_page_fault
000128c0 g     F .text	0000001c do_handler_unknown
00010e3c g     F .text	00000020 memory_alloc_page
000101d1 g       .text	00000000 exception_handler_fpu_error
00011366 g     F .text	0000001b task_switch_from_to
00015223 g     F .text	000000b8 mutex_unlock
00014a07 g     F .text	00000030 file_table_init
00014abb g     F .text	00000042 file_free
0001198a g     F .text	00000068 task_switch
8000015d g     F .first_task	00000028 print_msg
00015cf3 g     F .text	00000035 kernel_strlen
00011907 g     F .text	0000004b task_set_unready
00010064 g       .text	00000000 exception_handler_debug
000124be g     F .text	000000bf segment_desc_set
00012968 g     F .text	0000001c do_handler_bound_range
000102ca g       .text	00000000 exception_handler_syscall
00016316 g     F .text	000000b1 list_remove_first
00017b08 g       .rodata	00000000 e_text
00015c72 g     F .text	00000081 kernel_strncmp
000158aa g     F .text	00000094 bitmap_init
00010165 g       .text	00000000 exception_handler_segment_not_present
00015adf g     F .text	000000fb bitmap_alloc_nbits
00014a37 g     F .text	00000084 file_alloc
000116cf g     F .text	000000dd task_manager_init
000114f3 g     F .text	00000044 task_start
00010c59 g     F .text	000000f9 memory_init
000122a0 g     F .text	000001af sys_execve
0001585e g     F .text	00000036 pannic
000149de g     F .text	00000029 tty_select
00013c33 g     F .text	00000006 console_close
00010ef5 g     F .text	00000053 memory_get_paddr
00012a10 g     F .text	0000001c do_handler_stack_segment_fault
00012930 g     F .text	0000001c do_handler_breakpoint
00016574 g     F .text	0000009e log_printf
00011537 g     F .text	0000010e task_init
800001e8 g     F .first_task	00000027 open
00015e3c g     F .text	00000024 kernel_sprintf
00011c9f g     F .text	0000000d sys_getpid
00012630 g     F .text	00000075 gdt_alloc_desc
00015ffd g     F .text	0000012a kernel_itoa
0001647c g     F .text	000000c9 list_remove
0001244f g     F .text	00000047 gate_desc_set
80000118 g     F .first_task	0000002a msleep
00013073 g     F .text	00000011 idt_leave_protection
80000269 g     F .first_task	00000021 close
00010746 g     F .text	000000b0 find_pte
00014444 g     F .text	00000028 do_handler_time
000144ce g     F .text	00000018 time_init
00018060 g     O .data	0000002c dev_tty_desc



Disassembly of section .text:

00010000 <_start>:
*            [&boot_info]
*    esp ->  [返回地址]
*   所以要想访问到&boot_info，则只需从当前esp的位置偏移+4字节即可
*/
_start:
    mov %esp, %ebp      //栈空间最好只用ebp来进行偏移访问
   10000:	89 e5                	mov    %esp,%ebp
    mov 0x4(%ebp), %eax //将&boot_info的值存入eax中
   10002:	8b 45 04             	mov    0x4(%ebp),%eax

    push %eax           //外部函数将参数压入栈中，再进行函数调用
   10005:	50                   	push   %eax
    call kernel_init    //调用内核初始化函数
   10006:	e8 ca 4f 00 00       	call   14fd5 <kernel_init>

    //完成内核初始化后，进行直接跳转，以替换cs寄存器中临时的内核代码段的选择子为此时内存中真正的内核代码段选择子
    //cs:KERNEL_SELECTOR_CS, ip:gdt_reload
    jmp $KERNEL_SELECTOR_CS, $gdt_reload    
   1000b:	ea 12 00 01 00 08 00 	ljmp   $0x8,$0x10012

00010012 <gdt_reload>:

gdt_reload:
    //替换其他段寄存器中临时的内核数据段的选择子为此时内存中真正的内核数据段的选择子
    mov $KERNEL_SELECTOR_DS, %ax
   10012:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10016:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10018:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001a:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001c:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001e:	8e e8                	mov    %eax,%gs

    //重新指定栈空间位置，不再使用0~0x7c00这部分空间
    //stack段已在下面预留了KERNEL_STACK_SIZE的空间大小，直接将最高地址赋值给esp，esp便可使用这片空间
    mov $(stack + KERNEL_STACK_SIZE), %esp
   10020:	bc d0 c1 06 00       	mov    $0x6c1d0,%esp

    //继续初始化内核
    //TODO:后序再来说明该函数的作用
    jmp init_main 
   10025:	e9 67 50 00 00       	jmp    15091 <init_main>

0001002a <exception_handler_unknown>:
//宏结束标志
.endm

//使用定义的异常宏 ,以下都是不可屏蔽中断，cpu必须处理该中断请求。
//                |异常类型|       |IDT索引| |错误码|
exception_handler unknown,              -1, 0    //未知异常
   1002a:	6a 00                	push   $0x0
   1002c:	6a ff                	push   $0xffffffff
   1002e:	60                   	pusha  
   1002f:	1e                   	push   %ds
   10030:	06                   	push   %es
   10031:	0f a0                	push   %fs
   10033:	0f a8                	push   %gs
   10035:	54                   	push   %esp
   10036:	e8 85 28 00 00       	call   128c0 <do_handler_unknown>
   1003b:	5c                   	pop    %esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider,              0,  0    //除0异常
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 84 28 00 00       	call   128dc <do_handler_divider>
   10058:	5c                   	pop    %esp
   10059:	0f a9                	pop    %gs
   1005b:	0f a1                	pop    %fs
   1005d:	07                   	pop    %es
   1005e:	1f                   	pop    %ds
   1005f:	61                   	popa   
   10060:	83 c4 08             	add    $0x8,%esp
   10063:	cf                   	iret   

00010064 <exception_handler_debug>:
exception_handler debug,                1,  0    //debug异常
   10064:	6a 00                	push   $0x0
   10066:	6a 01                	push   $0x1
   10068:	60                   	pusha  
   10069:	1e                   	push   %ds
   1006a:	06                   	push   %es
   1006b:	0f a0                	push   %fs
   1006d:	0f a8                	push   %gs
   1006f:	54                   	push   %esp
   10070:	e8 83 28 00 00       	call   128f8 <do_handler_debug>
   10075:	5c                   	pop    %esp
   10076:	0f a9                	pop    %gs
   10078:	0f a1                	pop    %fs
   1007a:	07                   	pop    %es
   1007b:	1f                   	pop    %ds
   1007c:	61                   	popa   
   1007d:	83 c4 08             	add    $0x8,%esp
   10080:	cf                   	iret   

00010081 <exception_handler_nmi>:
exception_handler nmi,                  2,  0
   10081:	6a 00                	push   $0x0
   10083:	6a 02                	push   $0x2
   10085:	60                   	pusha  
   10086:	1e                   	push   %ds
   10087:	06                   	push   %es
   10088:	0f a0                	push   %fs
   1008a:	0f a8                	push   %gs
   1008c:	54                   	push   %esp
   1008d:	e8 82 28 00 00       	call   12914 <do_handler_nmi>
   10092:	5c                   	pop    %esp
   10093:	0f a9                	pop    %gs
   10095:	0f a1                	pop    %fs
   10097:	07                   	pop    %es
   10098:	1f                   	pop    %ds
   10099:	61                   	popa   
   1009a:	83 c4 08             	add    $0x8,%esp
   1009d:	cf                   	iret   

0001009e <exception_handler_breakpoint>:
exception_handler breakpoint,           3,  0
   1009e:	6a 00                	push   $0x0
   100a0:	6a 03                	push   $0x3
   100a2:	60                   	pusha  
   100a3:	1e                   	push   %ds
   100a4:	06                   	push   %es
   100a5:	0f a0                	push   %fs
   100a7:	0f a8                	push   %gs
   100a9:	54                   	push   %esp
   100aa:	e8 81 28 00 00       	call   12930 <do_handler_breakpoint>
   100af:	5c                   	pop    %esp
   100b0:	0f a9                	pop    %gs
   100b2:	0f a1                	pop    %fs
   100b4:	07                   	pop    %es
   100b5:	1f                   	pop    %ds
   100b6:	61                   	popa   
   100b7:	83 c4 08             	add    $0x8,%esp
   100ba:	cf                   	iret   

000100bb <exception_handler_overflow>:
exception_handler overflow,             4,  0
   100bb:	6a 00                	push   $0x0
   100bd:	6a 04                	push   $0x4
   100bf:	60                   	pusha  
   100c0:	1e                   	push   %ds
   100c1:	06                   	push   %es
   100c2:	0f a0                	push   %fs
   100c4:	0f a8                	push   %gs
   100c6:	54                   	push   %esp
   100c7:	e8 80 28 00 00       	call   1294c <do_handler_overflow>
   100cc:	5c                   	pop    %esp
   100cd:	0f a9                	pop    %gs
   100cf:	0f a1                	pop    %fs
   100d1:	07                   	pop    %es
   100d2:	1f                   	pop    %ds
   100d3:	61                   	popa   
   100d4:	83 c4 08             	add    $0x8,%esp
   100d7:	cf                   	iret   

000100d8 <exception_handler_bound_range>:
exception_handler bound_range,          5,  0
   100d8:	6a 00                	push   $0x0
   100da:	6a 05                	push   $0x5
   100dc:	60                   	pusha  
   100dd:	1e                   	push   %ds
   100de:	06                   	push   %es
   100df:	0f a0                	push   %fs
   100e1:	0f a8                	push   %gs
   100e3:	54                   	push   %esp
   100e4:	e8 7f 28 00 00       	call   12968 <do_handler_bound_range>
   100e9:	5c                   	pop    %esp
   100ea:	0f a9                	pop    %gs
   100ec:	0f a1                	pop    %fs
   100ee:	07                   	pop    %es
   100ef:	1f                   	pop    %ds
   100f0:	61                   	popa   
   100f1:	83 c4 08             	add    $0x8,%esp
   100f4:	cf                   	iret   

000100f5 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode,       6,  0
   100f5:	6a 00                	push   $0x0
   100f7:	6a 06                	push   $0x6
   100f9:	60                   	pusha  
   100fa:	1e                   	push   %ds
   100fb:	06                   	push   %es
   100fc:	0f a0                	push   %fs
   100fe:	0f a8                	push   %gs
   10100:	54                   	push   %esp
   10101:	e8 7e 28 00 00       	call   12984 <do_handler_invalid_opcode>
   10106:	5c                   	pop    %esp
   10107:	0f a9                	pop    %gs
   10109:	0f a1                	pop    %fs
   1010b:	07                   	pop    %es
   1010c:	1f                   	pop    %ds
   1010d:	61                   	popa   
   1010e:	83 c4 08             	add    $0x8,%esp
   10111:	cf                   	iret   

00010112 <exception_handler_device_unavailable>:
exception_handler device_unavailable,   7,  0
   10112:	6a 00                	push   $0x0
   10114:	6a 07                	push   $0x7
   10116:	60                   	pusha  
   10117:	1e                   	push   %ds
   10118:	06                   	push   %es
   10119:	0f a0                	push   %fs
   1011b:	0f a8                	push   %gs
   1011d:	54                   	push   %esp
   1011e:	e8 7d 28 00 00       	call   129a0 <do_handler_device_unavailable>
   10123:	5c                   	pop    %esp
   10124:	0f a9                	pop    %gs
   10126:	0f a1                	pop    %fs
   10128:	07                   	pop    %es
   10129:	1f                   	pop    %ds
   1012a:	61                   	popa   
   1012b:	83 c4 08             	add    $0x8,%esp
   1012e:	cf                   	iret   

0001012f <exception_handler_double_fault>:
exception_handler double_fault,         8,  1
   1012f:	6a 08                	push   $0x8
   10131:	60                   	pusha  
   10132:	1e                   	push   %ds
   10133:	06                   	push   %es
   10134:	0f a0                	push   %fs
   10136:	0f a8                	push   %gs
   10138:	54                   	push   %esp
   10139:	e8 7e 28 00 00       	call   129bc <do_handler_double_fault>
   1013e:	5c                   	pop    %esp
   1013f:	0f a9                	pop    %gs
   10141:	0f a1                	pop    %fs
   10143:	07                   	pop    %es
   10144:	1f                   	pop    %ds
   10145:	61                   	popa   
   10146:	83 c4 08             	add    $0x8,%esp
   10149:	cf                   	iret   

0001014a <exception_handler_invalid_tss>:
exception_handler invalid_tss,          10, 1
   1014a:	6a 0a                	push   $0xa
   1014c:	60                   	pusha  
   1014d:	1e                   	push   %ds
   1014e:	06                   	push   %es
   1014f:	0f a0                	push   %fs
   10151:	0f a8                	push   %gs
   10153:	54                   	push   %esp
   10154:	e8 7f 28 00 00       	call   129d8 <do_handler_invalid_tss>
   10159:	5c                   	pop    %esp
   1015a:	0f a9                	pop    %gs
   1015c:	0f a1                	pop    %fs
   1015e:	07                   	pop    %es
   1015f:	1f                   	pop    %ds
   10160:	61                   	popa   
   10161:	83 c4 08             	add    $0x8,%esp
   10164:	cf                   	iret   

00010165 <exception_handler_segment_not_present>:
exception_handler segment_not_present,  11, 1
   10165:	6a 0b                	push   $0xb
   10167:	60                   	pusha  
   10168:	1e                   	push   %ds
   10169:	06                   	push   %es
   1016a:	0f a0                	push   %fs
   1016c:	0f a8                	push   %gs
   1016e:	54                   	push   %esp
   1016f:	e8 80 28 00 00       	call   129f4 <do_handler_segment_not_present>
   10174:	5c                   	pop    %esp
   10175:	0f a9                	pop    %gs
   10177:	0f a1                	pop    %fs
   10179:	07                   	pop    %es
   1017a:	1f                   	pop    %ds
   1017b:	61                   	popa   
   1017c:	83 c4 08             	add    $0x8,%esp
   1017f:	cf                   	iret   

00010180 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,  12, 1
   10180:	6a 0c                	push   $0xc
   10182:	60                   	pusha  
   10183:	1e                   	push   %ds
   10184:	06                   	push   %es
   10185:	0f a0                	push   %fs
   10187:	0f a8                	push   %gs
   10189:	54                   	push   %esp
   1018a:	e8 81 28 00 00       	call   12a10 <do_handler_stack_segment_fault>
   1018f:	5c                   	pop    %esp
   10190:	0f a9                	pop    %gs
   10192:	0f a1                	pop    %fs
   10194:	07                   	pop    %es
   10195:	1f                   	pop    %ds
   10196:	61                   	popa   
   10197:	83 c4 08             	add    $0x8,%esp
   1019a:	cf                   	iret   

0001019b <exception_handler_general_protection>:
exception_handler general_protection,   13, 1
   1019b:	6a 0d                	push   $0xd
   1019d:	60                   	pusha  
   1019e:	1e                   	push   %ds
   1019f:	06                   	push   %es
   101a0:	0f a0                	push   %fs
   101a2:	0f a8                	push   %gs
   101a4:	54                   	push   %esp
   101a5:	e8 82 28 00 00       	call   12a2c <do_handler_general_protection>
   101aa:	5c                   	pop    %esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa   
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret   

000101b6 <exception_handler_page_fault>:
exception_handler page_fault,           14, 1
   101b6:	6a 0e                	push   $0xe
   101b8:	60                   	pusha  
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 18 29 00 00       	call   12add <do_handler_page_fault>
   101c5:	5c                   	pop    %esp
   101c6:	0f a9                	pop    %gs
   101c8:	0f a1                	pop    %fs
   101ca:	07                   	pop    %es
   101cb:	1f                   	pop    %ds
   101cc:	61                   	popa   
   101cd:	83 c4 08             	add    $0x8,%esp
   101d0:	cf                   	iret   

000101d1 <exception_handler_fpu_error>:
exception_handler fpu_error,            16, 0
   101d1:	6a 00                	push   $0x0
   101d3:	6a 10                	push   $0x10
   101d5:	60                   	pusha  
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 cb 29 00 00       	call   12bad <do_handler_fpu_error>
   101e2:	5c                   	pop    %esp
   101e3:	0f a9                	pop    %gs
   101e5:	0f a1                	pop    %fs
   101e7:	07                   	pop    %es
   101e8:	1f                   	pop    %ds
   101e9:	61                   	popa   
   101ea:	83 c4 08             	add    $0x8,%esp
   101ed:	cf                   	iret   

000101ee <exception_handler_alignment_check>:
exception_handler alignment_check,      17, 1
   101ee:	6a 11                	push   $0x11
   101f0:	60                   	pusha  
   101f1:	1e                   	push   %ds
   101f2:	06                   	push   %es
   101f3:	0f a0                	push   %fs
   101f5:	0f a8                	push   %gs
   101f7:	54                   	push   %esp
   101f8:	e8 cc 29 00 00       	call   12bc9 <do_handler_alignment_check>
   101fd:	5c                   	pop    %esp
   101fe:	0f a9                	pop    %gs
   10200:	0f a1                	pop    %fs
   10202:	07                   	pop    %es
   10203:	1f                   	pop    %ds
   10204:	61                   	popa   
   10205:	83 c4 08             	add    $0x8,%esp
   10208:	cf                   	iret   

00010209 <exception_handler_machine_check>:
exception_handler machine_check,        18, 0
   10209:	6a 00                	push   $0x0
   1020b:	6a 12                	push   $0x12
   1020d:	60                   	pusha  
   1020e:	1e                   	push   %ds
   1020f:	06                   	push   %es
   10210:	0f a0                	push   %fs
   10212:	0f a8                	push   %gs
   10214:	54                   	push   %esp
   10215:	e8 cb 29 00 00       	call   12be5 <do_handler_machine_check>
   1021a:	5c                   	pop    %esp
   1021b:	0f a9                	pop    %gs
   1021d:	0f a1                	pop    %fs
   1021f:	07                   	pop    %es
   10220:	1f                   	pop    %ds
   10221:	61                   	popa   
   10222:	83 c4 08             	add    $0x8,%esp
   10225:	cf                   	iret   

00010226 <exception_handler_smd_exception>:
exception_handler smd_exception,        19, 0
   10226:	6a 00                	push   $0x0
   10228:	6a 13                	push   $0x13
   1022a:	60                   	pusha  
   1022b:	1e                   	push   %ds
   1022c:	06                   	push   %es
   1022d:	0f a0                	push   %fs
   1022f:	0f a8                	push   %gs
   10231:	54                   	push   %esp
   10232:	e8 ca 29 00 00       	call   12c01 <do_handler_smd_exception>
   10237:	5c                   	pop    %esp
   10238:	0f a9                	pop    %gs
   1023a:	0f a1                	pop    %fs
   1023c:	07                   	pop    %es
   1023d:	1f                   	pop    %ds
   1023e:	61                   	popa   
   1023f:	83 c4 08             	add    $0x8,%esp
   10242:	cf                   	iret   

00010243 <exception_handler_virtual_exception>:
exception_handler virtual_exception,    20, 0
   10243:	6a 00                	push   $0x0
   10245:	6a 14                	push   $0x14
   10247:	60                   	pusha  
   10248:	1e                   	push   %ds
   10249:	06                   	push   %es
   1024a:	0f a0                	push   %fs
   1024c:	0f a8                	push   %gs
   1024e:	54                   	push   %esp
   1024f:	e8 c9 29 00 00       	call   12c1d <do_handler_virtual_exception>
   10254:	5c                   	pop    %esp
   10255:	0f a9                	pop    %gs
   10257:	0f a1                	pop    %fs
   10259:	07                   	pop    %es
   1025a:	1f                   	pop    %ds
   1025b:	61                   	popa   
   1025c:	83 c4 08             	add    $0x8,%esp
   1025f:	cf                   	iret   

00010260 <exception_handler_control_exception>:
exception_handler control_exception,    21, 1
   10260:	6a 15                	push   $0x15
   10262:	60                   	pusha  
   10263:	1e                   	push   %ds
   10264:	06                   	push   %es
   10265:	0f a0                	push   %fs
   10267:	0f a8                	push   %gs
   10269:	54                   	push   %esp
   1026a:	e8 ca 29 00 00       	call   12c39 <do_handler_control_exception>
   1026f:	5c                   	pop    %esp
   10270:	0f a9                	pop    %gs
   10272:	0f a1                	pop    %fs
   10274:	07                   	pop    %es
   10275:	1f                   	pop    %ds
   10276:	61                   	popa   
   10277:	83 c4 08             	add    $0x8,%esp
   1027a:	cf                   	iret   

0001027b <exception_handler_time>:

//定时器的中断处理函数
exception_handler time,                 0x20, 0 
   1027b:	6a 00                	push   $0x0
   1027d:	6a 20                	push   $0x20
   1027f:	60                   	pusha  
   10280:	1e                   	push   %ds
   10281:	06                   	push   %es
   10282:	0f a0                	push   %fs
   10284:	0f a8                	push   %gs
   10286:	54                   	push   %esp
   10287:	e8 b8 41 00 00       	call   14444 <do_handler_time>
   1028c:	5c                   	pop    %esp
   1028d:	0f a9                	pop    %gs
   1028f:	0f a1                	pop    %fs
   10291:	07                   	pop    %es
   10292:	1f                   	pop    %ds
   10293:	61                   	popa   
   10294:	83 c4 08             	add    $0x8,%esp
   10297:	cf                   	iret   

00010298 <exception_handler_kbd>:
//键盘的中断处理函数
exception_handler kbd,                 0x21, 0 
   10298:	6a 00                	push   $0x0
   1029a:	6a 21                	push   $0x21
   1029c:	60                   	pusha  
   1029d:	1e                   	push   %ds
   1029e:	06                   	push   %es
   1029f:	0f a0                	push   %fs
   102a1:	0f a8                	push   %gs
   102a3:	54                   	push   %esp
   102a4:	e8 b0 40 00 00       	call   14359 <do_handler_kbd>
   102a9:	5c                   	pop    %esp
   102aa:	0f a9                	pop    %gs
   102ac:	0f a1                	pop    %fs
   102ae:	07                   	pop    %es
   102af:	1f                   	pop    %ds
   102b0:	61                   	popa   
   102b1:	83 c4 08             	add    $0x8,%esp
   102b4:	cf                   	iret   

000102b5 <simple_switch>:
//TODO:该部分为另一种任务切换时cpu上下文环境的保存方法，并未被调用
    .text
    .global simple_switch
simple_switch:  //simple_switch(from, to)
    //1.获取参数，跳过4字节的 eip
    mov 8(%esp), %edx   //获取 to, 地址(指针) --> 目标任务的栈空间对应的 esp 的值
   102b5:	8b 54 24 08          	mov    0x8(%esp),%edx
    mov 4(%esp), %eax   //获取 from, 地址(指针) --> 当前任务的栈空间对应的 esp 的值
   102b9:	8b 44 24 04          	mov    0x4(%esp),%eax


    //2.被调用者保存当前任务的 ebp, ebx, esi, edi 到当前任务的栈中
    //eax, ecx, edx, eip, eflags 已由调用者压入当前任务的栈中
    push %ebp
   102bd:	55                   	push   %ebp
    push %ebx
   102be:	53                   	push   %ebx
    push %esi
   102bf:	56                   	push   %esi
    push %edi
   102c0:	57                   	push   %edi

    //3.更新当前任务栈空间的 esp
    mov %esp, (%eax)
   102c1:	89 20                	mov    %esp,(%eax)

    //3.进行任务栈的切换
    mov (%edx), %esp
   102c3:	8b 22                	mov    (%edx),%esp


    //4.恢复切换后的任务状态，ebp, ebx, esi, edi 手动恢复
    //eax, ecx, edx, eip, eflags, 是在当前任务(c函数)调用simple_switch时已压入当前任务栈中，
    //调用 ret 后会自行弹出并恢复
    pop %edi
   102c5:	5f                   	pop    %edi
    pop %esi
   102c6:	5e                   	pop    %esi
    pop %ebx
   102c7:	5b                   	pop    %ebx
    pop %ebp
   102c8:	5d                   	pop    %ebp

    //5.恢复切换后的任务执行流，相当于此时 esp ->[eip]， 即 pop %eip
    ret 
   102c9:	c3                   	ret    

000102ca <exception_handler_syscall>:

    //注意：cpu只自动保护了 cs eip ss esp寄存器，其它寄存器没有被维护，可能在调用门处理函数里被修改
    //所以需要手动压入，即保护cpu上下文环境，也为fork系统调用提供cpu上下文环境

    //1.用 pusha 指令压入8个通用寄存器
    pusha
   102ca:	60                   	pusha  

    //2.压入其他段寄存器
    push %ds
   102cb:	1e                   	push   %ds
    push %es
   102cc:	06                   	push   %es
    push %fs
   102cd:	0f a0                	push   %fs
    push %gs
   102cf:	0f a8                	push   %gs

    //3.压入eflags寄存器
    pushf
   102d1:	9c                   	pushf  

    //4.将当前 esp 的值压入栈中，当作调用门栈帧的起始地址
    push %esp
   102d2:	54                   	push   %esp

    //5.调用系统调用处理函数，按id进一步判断需要进行的系统调用并执行
    call do_handler_syscall
   102d3:	e8 c6 2d 00 00       	call   1309e <do_handler_syscall>


    //5.恢复现场
    pop %esp
   102d8:	5c                   	pop    %esp
    popf
   102d9:	9d                   	popf   
    pop %gs
   102da:	0f a9                	pop    %gs
    pop %fs
   102dc:	0f a1                	pop    %fs
    pop %es
   102de:	07                   	pop    %es
    pop %ds
   102df:	1f                   	pop    %ds
    popa
   102e0:	61                   	popa   
    //如果要变换特权级，它会加载被调用者堆栈上的CS和EIP，并增加ESP跳过参数，
    //然后ESP将指向被保存过的调用者SS和ESP¹。
    //它还会对目标代码段特权级和目标栈段特权级做严格的检查，
    //要求代码段可执行特权级CPL (即DPL) == 栈段选择子请求特权级RPL == 栈段目标内存特权级DPL²。
    
    retf $(5*4) 
   102e1:	ca 14 00             	lret   $0x14

000102e4 <down2>:
 * 
 * @param size 
 * @param bound 一般取2的n次方
 * @return uint32_t 
 */
static inline uint32_t down2(uint32_t size, uint32_t bound) {
   102e4:	55                   	push   %ebp
   102e5:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);  
   102e7:	8b 45 0c             	mov    0xc(%ebp),%eax
   102ea:	f7 d8                	neg    %eax
   102ec:	23 45 08             	and    0x8(%ebp),%eax
}
   102ef:	5d                   	pop    %ebp
   102f0:	c3                   	ret    

000102f1 <up2>:
 * 
 * @param size 
 * @param bound 一般取2的n次方
 * @return uint32_t 
 */
static inline uint32_t up2(uint32_t size, uint32_t bound) {
   102f1:	55                   	push   %ebp
   102f2:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   102f4:	8b 55 08             	mov    0x8(%ebp),%edx
   102f7:	8b 45 0c             	mov    0xc(%ebp),%eax
   102fa:	01 d0                	add    %edx,%eax
   102fc:	8d 50 ff             	lea    -0x1(%eax),%edx
   102ff:	8b 45 0c             	mov    0xc(%ebp),%eax
   10302:	f7 d8                	neg    %eax
   10304:	21 d0                	and    %edx,%eax
}
   10306:	5d                   	pop    %ebp
   10307:	c3                   	ret    

00010308 <write_cr3>:
 * 它含有存放页目录表页面的物理地址，
 * 因此 CR3 也被称为 PDBR（Page-Directory Base address Register）。
 *
 * @param data
 */
static inline void write_cr3(uint32_t data) {
   10308:	55                   	push   %ebp
   10309:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("mov %[v], %%cr3" : : [v] "r"(data));
   1030b:	8b 45 08             	mov    0x8(%ebp),%eax
   1030e:	0f 22 d8             	mov    %eax,%cr3
}
   10311:	90                   	nop
   10312:	5d                   	pop    %ebp
   10313:	c3                   	ret    

00010314 <pde_index>:
 * @brief 获取虚拟地址的高10位，及对应的页目录项在页目录表中的索引
 * 
 * @param vstart 
 * @return uint32_t 
 */
static inline uint32_t pde_index(uint32_t vstart) {
   10314:	55                   	push   %ebp
   10315:	89 e5                	mov    %esp,%ebp
    return (vstart >> 22);
   10317:	8b 45 08             	mov    0x8(%ebp),%eax
   1031a:	c1 e8 16             	shr    $0x16,%eax
}
   1031d:	5d                   	pop    %ebp
   1031e:	c3                   	ret    

0001031f <pte_index>:
 * @brief 获取虚拟地址的次10位，及对应的页表项在页表中的索引
 * 
 * @param vstart 
 * @return uint32_t 
 */
static inline uint32_t pte_index(uint32_t vstart) {
   1031f:	55                   	push   %ebp
   10320:	89 e5                	mov    %esp,%ebp
    return (vstart >> 12) & 0x3ff;
   10322:	8b 45 08             	mov    0x8(%ebp),%eax
   10325:	c1 e8 0c             	shr    $0xc,%eax
   10328:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   1032d:	5d                   	pop    %ebp
   1032e:	c3                   	ret    

0001032f <pde_to_pt_addr>:
 * @brief 获取页目录项中对应的页表的起始地址，及该页表第一个页表项的地址
 * 
 * @param pde 页目录项
 * @return uint32_t 返回的页表的地址
 */
static inline uint32_t pde_to_pt_addr(pde_t *pde) {
   1032f:	55                   	push   %ebp
   10330:	89 e5                	mov    %esp,%ebp
    //高20位为页表的物理地址的有效位，将其左移12位，及按4kb对齐后才是该页的物理地址
    return pde->phy_pt_addr << 12;
   10332:	8b 45 08             	mov    0x8(%ebp),%eax
   10335:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   10339:	c0 ea 04             	shr    $0x4,%dl
   1033c:	0f b6 ca             	movzbl %dl,%ecx
   1033f:	0f b6 50 02          	movzbl 0x2(%eax),%edx
   10343:	c1 e2 04             	shl    $0x4,%edx
   10346:	09 ca                	or     %ecx,%edx
   10348:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   1034c:	c1 e0 0c             	shl    $0xc,%eax
   1034f:	09 d0                	or     %edx,%eax
   10351:	c1 e0 0c             	shl    $0xc,%eax
}
   10354:	5d                   	pop    %ebp
   10355:	c3                   	ret    

00010356 <pte_to_pg_addr>:
 * @brief 获取页表项中对应的页的起始地址
 * 
 * @param pte 页表项
 * @return uint32_t 返回的页的地址
 */
static inline uint32_t pte_to_pg_addr(pte_t *pte) {
   10356:	55                   	push   %ebp
   10357:	89 e5                	mov    %esp,%ebp
    //高20位为页的物理地址有效位，将其左移12位，及按4kb对齐后才是该页的物理地址
    return pte->phy_page_addr << 12;
   10359:	8b 45 08             	mov    0x8(%ebp),%eax
   1035c:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   10360:	c0 ea 04             	shr    $0x4,%dl
   10363:	0f b6 ca             	movzbl %dl,%ecx
   10366:	0f b6 50 02          	movzbl 0x2(%eax),%edx
   1036a:	c1 e2 04             	shl    $0x4,%edx
   1036d:	09 ca                	or     %ecx,%edx
   1036f:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   10373:	c1 e0 0c             	shl    $0xc,%eax
   10376:	09 d0                	or     %edx,%eax
   10378:	c1 e0 0c             	shl    $0xc,%eax
}
   1037b:	5d                   	pop    %ebp
   1037c:	c3                   	ret    

0001037d <get_pte_privilege>:
 * @brief 获取页表项的权限
 * 
 * @param pte 
 * @return uint32_t 
 */
static inline uint32_t get_pte_privilege(pte_t *pte) {
   1037d:	55                   	push   %ebp
   1037e:	89 e5                	mov    %esp,%ebp
    return pte->v & 0x1ff;  //直接获取低9位即为所有权限
   10380:	8b 45 08             	mov    0x8(%ebp),%eax
   10383:	8b 00                	mov    (%eax),%eax
   10385:	25 ff 01 00 00       	and    $0x1ff,%eax
}
   1038a:	5d                   	pop    %ebp
   1038b:	c3                   	ret    

0001038c <mmu_set_page_dir>:
/**
 * @brief 设置页目录表的起始地址，将起始地址写入CR3寄存器
 * 
 * @param paddr 页目录表的物理起始地址
 */
static inline void mmu_set_page_dir(uint32_t paddr) {
   1038c:	55                   	push   %ebp
   1038d:	89 e5                	mov    %esp,%ebp

    //设置cr3寄存器的高20位为页目录表的地址，因为按4kb对齐，所以
    //页目录表的起始地址page_dir的高20位才为有效位，低12位为0，将cr3的低12位就设置为0
    write_cr3(paddr);
   1038f:	ff 75 08             	push   0x8(%ebp)
   10392:	e8 71 ff ff ff       	call   10308 <write_cr3>
   10397:	83 c4 04             	add    $0x4,%esp
}
   1039a:	90                   	nop
   1039b:	c9                   	leave  
   1039c:	c3                   	ret    

0001039d <page_index>:
 * @brief 获取页的索引
 * 
 * @param alloc 
 * @param page_addr 
 */
static inline int page_index(addr_alloc_t *alloc, uint32_t page_addr) {
   1039d:	55                   	push   %ebp
   1039e:	89 e5                	mov    %esp,%ebp
   103a0:	53                   	push   %ebx
  return (page_addr - alloc->start) / alloc->page_size;
   103a1:	8b 45 08             	mov    0x8(%ebp),%eax
   103a4:	8b 50 1c             	mov    0x1c(%eax),%edx
   103a7:	8b 45 0c             	mov    0xc(%ebp),%eax
   103aa:	29 d0                	sub    %edx,%eax
   103ac:	89 c1                	mov    %eax,%ecx
   103ae:	8b 45 08             	mov    0x8(%ebp),%eax
   103b1:	8b 58 24             	mov    0x24(%eax),%ebx
   103b4:	89 c8                	mov    %ecx,%eax
   103b6:	ba 00 00 00 00       	mov    $0x0,%edx
   103bb:	f7 f3                	div    %ebx
}
   103bd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   103c0:	c9                   	leave  
   103c1:	c3                   	ret    

000103c2 <page_ref_add>:
 * @brief 为页的引用计数+1
 * 
 * @param alloc 
 * @param page_addr 页起始地址
 */
static inline void page_ref_add(addr_alloc_t *alloc, uint32_t page_addr) {
   103c2:	55                   	push   %ebp
   103c3:	89 e5                	mov    %esp,%ebp
   103c5:	83 ec 18             	sub    $0x18,%esp
  //计算出页的索引
  int index = page_index(alloc, page_addr);
   103c8:	ff 75 0c             	push   0xc(%ebp)
   103cb:	ff 75 08             	push   0x8(%ebp)
   103ce:	e8 ca ff ff ff       	call   1039d <page_index>
   103d3:	83 c4 08             	add    $0x8,%esp
   103d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
  
  mutex_lock(&alloc->mutex);
   103d9:	8b 45 08             	mov    0x8(%ebp),%eax
   103dc:	83 ec 0c             	sub    $0xc,%esp
   103df:	50                   	push   %eax
   103e0:	e8 ad 4d 00 00       	call   15192 <mutex_lock>
   103e5:	83 c4 10             	add    $0x10,%esp
  //引用计数+1
  alloc->page_ref[index]++;
   103e8:	8b 55 08             	mov    0x8(%ebp),%edx
   103eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   103ee:	01 d0                	add    %edx,%eax
   103f0:	83 c0 28             	add    $0x28,%eax
   103f3:	0f b6 00             	movzbl (%eax),%eax
   103f6:	8d 50 01             	lea    0x1(%eax),%edx
   103f9:	8b 4d 08             	mov    0x8(%ebp),%ecx
   103fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   103ff:	01 c8                	add    %ecx,%eax
   10401:	83 c0 28             	add    $0x28,%eax
   10404:	88 10                	mov    %dl,(%eax)

  mutex_unlock(&alloc->mutex);
   10406:	8b 45 08             	mov    0x8(%ebp),%eax
   10409:	83 ec 0c             	sub    $0xc,%esp
   1040c:	50                   	push   %eax
   1040d:	e8 11 4e 00 00       	call   15223 <mutex_unlock>
   10412:	83 c4 10             	add    $0x10,%esp
 }
   10415:	90                   	nop
   10416:	c9                   	leave  
   10417:	c3                   	ret    

00010418 <page_ref_sub>:
 * @brief 页的引用计数-1
 * 
 * @param alloc 
 * @param page_addr 
 */
static inline void page_ref_sub(addr_alloc_t *alloc, uint32_t page_addr) {
   10418:	55                   	push   %ebp
   10419:	89 e5                	mov    %esp,%ebp
   1041b:	83 ec 18             	sub    $0x18,%esp
  //计算出页的索引
  int index = page_index(alloc, page_addr);
   1041e:	ff 75 0c             	push   0xc(%ebp)
   10421:	ff 75 08             	push   0x8(%ebp)
   10424:	e8 74 ff ff ff       	call   1039d <page_index>
   10429:	83 c4 08             	add    $0x8,%esp
   1042c:	89 45 f4             	mov    %eax,-0xc(%ebp)

  mutex_lock(&alloc->mutex);
   1042f:	8b 45 08             	mov    0x8(%ebp),%eax
   10432:	83 ec 0c             	sub    $0xc,%esp
   10435:	50                   	push   %eax
   10436:	e8 57 4d 00 00       	call   15192 <mutex_lock>
   1043b:	83 c4 10             	add    $0x10,%esp
  //引用计数-1
  if (alloc->page_ref[index] > 0) 
   1043e:	8b 55 08             	mov    0x8(%ebp),%edx
   10441:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10444:	01 d0                	add    %edx,%eax
   10446:	83 c0 28             	add    $0x28,%eax
   10449:	0f b6 00             	movzbl (%eax),%eax
   1044c:	84 c0                	test   %al,%al
   1044e:	74 1e                	je     1046e <page_ref_sub+0x56>
      alloc->page_ref[index]--;    
   10450:	8b 55 08             	mov    0x8(%ebp),%edx
   10453:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10456:	01 d0                	add    %edx,%eax
   10458:	83 c0 28             	add    $0x28,%eax
   1045b:	0f b6 00             	movzbl (%eax),%eax
   1045e:	8d 50 ff             	lea    -0x1(%eax),%edx
   10461:	8b 4d 08             	mov    0x8(%ebp),%ecx
   10464:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10467:	01 c8                	add    %ecx,%eax
   10469:	83 c0 28             	add    $0x28,%eax
   1046c:	88 10                	mov    %dl,(%eax)

  mutex_unlock(&alloc->mutex);
   1046e:	8b 45 08             	mov    0x8(%ebp),%eax
   10471:	83 ec 0c             	sub    $0xc,%esp
   10474:	50                   	push   %eax
   10475:	e8 a9 4d 00 00       	call   15223 <mutex_unlock>
   1047a:	83 c4 10             	add    $0x10,%esp
 }
   1047d:	90                   	nop
   1047e:	c9                   	leave  
   1047f:	c3                   	ret    

00010480 <get_page_ref>:
 * @brief 获取页的引用计数
 * 
 * @param alloc 
 * @param page_addr 
 */
static inline int get_page_ref(addr_alloc_t *alloc, uint32_t page_addr) {
   10480:	55                   	push   %ebp
   10481:	89 e5                	mov    %esp,%ebp
   10483:	83 ec 18             	sub    $0x18,%esp
    //计算出页的索引
  int index = page_index(alloc, page_addr);
   10486:	ff 75 0c             	push   0xc(%ebp)
   10489:	ff 75 08             	push   0x8(%ebp)
   1048c:	e8 0c ff ff ff       	call   1039d <page_index>
   10491:	83 c4 08             	add    $0x8,%esp
   10494:	89 45 f4             	mov    %eax,-0xc(%ebp)

  mutex_lock(&alloc->mutex);
   10497:	8b 45 08             	mov    0x8(%ebp),%eax
   1049a:	83 ec 0c             	sub    $0xc,%esp
   1049d:	50                   	push   %eax
   1049e:	e8 ef 4c 00 00       	call   15192 <mutex_lock>
   104a3:	83 c4 10             	add    $0x10,%esp

  int ref = alloc->page_ref[index];
   104a6:	8b 55 08             	mov    0x8(%ebp),%edx
   104a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   104ac:	01 d0                	add    %edx,%eax
   104ae:	83 c0 28             	add    $0x28,%eax
   104b1:	0f b6 00             	movzbl (%eax),%eax
   104b4:	0f b6 c0             	movzbl %al,%eax
   104b7:	89 45 f0             	mov    %eax,-0x10(%ebp)

  mutex_unlock(&alloc->mutex);
   104ba:	8b 45 08             	mov    0x8(%ebp),%eax
   104bd:	83 ec 0c             	sub    $0xc,%esp
   104c0:	50                   	push   %eax
   104c1:	e8 5d 4d 00 00       	call   15223 <mutex_unlock>
   104c6:	83 c4 10             	add    $0x10,%esp

  return ref;
   104c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   104cc:	c9                   	leave  
   104cd:	c3                   	ret    

000104ce <clear_page_ref>:
 * @brief 清除所有页的引用
 * 
 * @param alloc 
 * @return int 
 */
static inline void clear_page_ref(addr_alloc_t *alloc) {
   104ce:	55                   	push   %ebp
   104cf:	89 e5                	mov    %esp,%ebp
   104d1:	83 ec 08             	sub    $0x8,%esp

  mutex_lock(&alloc->mutex);
   104d4:	8b 45 08             	mov    0x8(%ebp),%eax
   104d7:	83 ec 0c             	sub    $0xc,%esp
   104da:	50                   	push   %eax
   104db:	e8 b2 4c 00 00       	call   15192 <mutex_lock>
   104e0:	83 c4 10             	add    $0x10,%esp

  kernel_memset(alloc->page_ref, 0, alloc->size / alloc->page_size);
   104e3:	8b 45 08             	mov    0x8(%ebp),%eax
   104e6:	8b 40 20             	mov    0x20(%eax),%eax
   104e9:	8b 55 08             	mov    0x8(%ebp),%edx
   104ec:	8b 4a 24             	mov    0x24(%edx),%ecx
   104ef:	ba 00 00 00 00       	mov    $0x0,%edx
   104f4:	f7 f1                	div    %ecx
   104f6:	89 c2                	mov    %eax,%edx
   104f8:	8b 45 08             	mov    0x8(%ebp),%eax
   104fb:	83 c0 28             	add    $0x28,%eax
   104fe:	83 ec 04             	sub    $0x4,%esp
   10501:	52                   	push   %edx
   10502:	6a 00                	push   $0x0
   10504:	50                   	push   %eax
   10505:	e8 6d 58 00 00       	call   15d77 <kernel_memset>
   1050a:	83 c4 10             	add    $0x10,%esp

  mutex_unlock(&alloc->mutex);
   1050d:	8b 45 08             	mov    0x8(%ebp),%eax
   10510:	83 ec 0c             	sub    $0xc,%esp
   10513:	50                   	push   %eax
   10514:	e8 0a 4d 00 00       	call   15223 <mutex_unlock>
   10519:	83 c4 10             	add    $0x10,%esp
}
   1051c:	90                   	nop
   1051d:	c9                   	leave  
   1051e:	c3                   	ret    

0001051f <addr_alloc_init>:
 * @param start 管理内存的起始地址
 * @param size 管理内存的大小
 * @param page_size 管理的内存页的大小
 */
static void addr_alloc_init(addr_alloc_t *alloc, uint8_t *bits, uint32_t start,
                            uint32_t size, uint32_t page_size) {
   1051f:	55                   	push   %ebp
   10520:	89 e5                	mov    %esp,%ebp
   10522:	83 ec 08             	sub    $0x8,%esp
  mutex_init(&alloc->mutex);
   10525:	8b 45 08             	mov    0x8(%ebp),%eax
   10528:	83 ec 0c             	sub    $0xc,%esp
   1052b:	50                   	push   %eax
   1052c:	e8 14 4c 00 00       	call   15145 <mutex_init>
   10531:	83 c4 10             	add    $0x10,%esp
  alloc->start = start;
   10534:	8b 45 08             	mov    0x8(%ebp),%eax
   10537:	8b 55 10             	mov    0x10(%ebp),%edx
   1053a:	89 50 1c             	mov    %edx,0x1c(%eax)
  alloc->size = size;
   1053d:	8b 45 08             	mov    0x8(%ebp),%eax
   10540:	8b 55 14             	mov    0x14(%ebp),%edx
   10543:	89 50 20             	mov    %edx,0x20(%eax)
  alloc->page_size = page_size;
   10546:	8b 45 08             	mov    0x8(%ebp),%eax
   10549:	8b 55 18             	mov    0x18(%ebp),%edx
   1054c:	89 50 24             	mov    %edx,0x24(%eax)
  bitmap_init(&alloc->bitmap, bits, alloc->size / alloc->page_size, 0);
   1054f:	8b 45 08             	mov    0x8(%ebp),%eax
   10552:	8b 40 20             	mov    0x20(%eax),%eax
   10555:	8b 55 08             	mov    0x8(%ebp),%edx
   10558:	8b 4a 24             	mov    0x24(%edx),%ecx
   1055b:	ba 00 00 00 00       	mov    $0x0,%edx
   10560:	f7 f1                	div    %ecx
   10562:	89 c2                	mov    %eax,%edx
   10564:	8b 45 08             	mov    0x8(%ebp),%eax
   10567:	83 c0 14             	add    $0x14,%eax
   1056a:	6a 00                	push   $0x0
   1056c:	52                   	push   %edx
   1056d:	ff 75 0c             	push   0xc(%ebp)
   10570:	50                   	push   %eax
   10571:	e8 34 53 00 00       	call   158aa <bitmap_init>
   10576:	83 c4 10             	add    $0x10,%esp
  //清空页的引用数组
  kernel_memset(alloc->page_ref, 0,  alloc->size / alloc->page_size);
   10579:	8b 45 08             	mov    0x8(%ebp),%eax
   1057c:	8b 40 20             	mov    0x20(%eax),%eax
   1057f:	8b 55 08             	mov    0x8(%ebp),%edx
   10582:	8b 4a 24             	mov    0x24(%edx),%ecx
   10585:	ba 00 00 00 00       	mov    $0x0,%edx
   1058a:	f7 f1                	div    %ecx
   1058c:	89 c2                	mov    %eax,%edx
   1058e:	8b 45 08             	mov    0x8(%ebp),%eax
   10591:	83 c0 28             	add    $0x28,%eax
   10594:	83 ec 04             	sub    $0x4,%esp
   10597:	52                   	push   %edx
   10598:	6a 00                	push   $0x0
   1059a:	50                   	push   %eax
   1059b:	e8 d7 57 00 00       	call   15d77 <kernel_memset>
   105a0:	83 c4 10             	add    $0x10,%esp
}
   105a3:	90                   	nop
   105a4:	c9                   	leave  
   105a5:	c3                   	ret    

000105a6 <addr_alloc_page>:
 *
 * @param alloc
 * @param page_count 申请页的数量
 * @return uint32_t 申请的第一个页的起始地址， 0：分配失败
 */
static uint32_t addr_alloc_page(addr_alloc_t *alloc, int page_count) {
   105a6:	55                   	push   %ebp
   105a7:	89 e5                	mov    %esp,%ebp
   105a9:	83 ec 18             	sub    $0x18,%esp
  uint32_t addr = 0;  // 记录分配的页的起始地址
   105ac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  mutex_lock(&alloc->mutex);
   105b3:	8b 45 08             	mov    0x8(%ebp),%eax
   105b6:	83 ec 0c             	sub    $0xc,%esp
   105b9:	50                   	push   %eax
   105ba:	e8 d3 4b 00 00       	call   15192 <mutex_lock>
   105bf:	83 c4 10             	add    $0x10,%esp

  // 在位图中取连续的page_count个页进行分配
  int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   105c2:	8b 45 08             	mov    0x8(%ebp),%eax
   105c5:	83 c0 14             	add    $0x14,%eax
   105c8:	83 ec 04             	sub    $0x4,%esp
   105cb:	ff 75 0c             	push   0xc(%ebp)
   105ce:	6a 00                	push   $0x0
   105d0:	50                   	push   %eax
   105d1:	e8 09 55 00 00       	call   15adf <bitmap_alloc_nbits>
   105d6:	83 c4 10             	add    $0x10,%esp
   105d9:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (page_count >= 0) {
   105dc:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   105e0:	78 17                	js     105f9 <addr_alloc_page+0x53>
    // 计算出申请到的第一个页的起始地址
    addr = alloc->start + page_index * alloc->page_size;
   105e2:	8b 45 08             	mov    0x8(%ebp),%eax
   105e5:	8b 48 1c             	mov    0x1c(%eax),%ecx
   105e8:	8b 45 08             	mov    0x8(%ebp),%eax
   105eb:	8b 50 24             	mov    0x24(%eax),%edx
   105ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
   105f1:	0f af c2             	imul   %edx,%eax
   105f4:	01 c8                	add    %ecx,%eax
   105f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
  }

  mutex_unlock(&alloc->mutex);
   105f9:	8b 45 08             	mov    0x8(%ebp),%eax
   105fc:	83 ec 0c             	sub    $0xc,%esp
   105ff:	50                   	push   %eax
   10600:	e8 1e 4c 00 00       	call   15223 <mutex_unlock>
   10605:	83 c4 10             	add    $0x10,%esp

  return addr;
   10608:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   1060b:	c9                   	leave  
   1060c:	c3                   	ret    

0001060d <addr_free_page>:
 *
 * @param alloc
 * @param addr 第一个内存页的起始地址
 * @param page_count 内存页的数量
 */
static void addr_free_page(addr_alloc_t *alloc, uint32_t addr, int page_count) {
   1060d:	55                   	push   %ebp
   1060e:	89 e5                	mov    %esp,%ebp
   10610:	83 ec 18             	sub    $0x18,%esp
  mutex_lock(&alloc->mutex);
   10613:	8b 45 08             	mov    0x8(%ebp),%eax
   10616:	83 ec 0c             	sub    $0xc,%esp
   10619:	50                   	push   %eax
   1061a:	e8 73 4b 00 00       	call   15192 <mutex_lock>
   1061f:	83 c4 10             	add    $0x10,%esp

  //将所有页引用-1
  for (int i = 0; i < page_count; ++i) {
   10622:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10629:	eb 64                	jmp    1068f <addr_free_page+0x82>
    //获取当前页的地址
    uint32_t page_addr = addr + i * MEM_PAGE_SIZE;
   1062b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1062e:	c1 e0 0c             	shl    $0xc,%eax
   10631:	89 c2                	mov    %eax,%edx
   10633:	8b 45 0c             	mov    0xc(%ebp),%eax
   10636:	01 d0                	add    %edx,%eax
   10638:	89 45 f0             	mov    %eax,-0x10(%ebp)
    //引用-1
    page_ref_sub(alloc, page_addr);
   1063b:	83 ec 08             	sub    $0x8,%esp
   1063e:	ff 75 f0             	push   -0x10(%ebp)
   10641:	ff 75 08             	push   0x8(%ebp)
   10644:	e8 cf fd ff ff       	call   10418 <page_ref_sub>
   10649:	83 c4 10             	add    $0x10,%esp
    //获取当前页引用
    int ref = get_page_ref(alloc, page_addr);
   1064c:	83 ec 08             	sub    $0x8,%esp
   1064f:	ff 75 f0             	push   -0x10(%ebp)
   10652:	ff 75 08             	push   0x8(%ebp)
   10655:	e8 26 fe ff ff       	call   10480 <get_page_ref>
   1065a:	83 c4 10             	add    $0x10,%esp
   1065d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (ref == 0)  {//引用为0，释放该页
   10660:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   10664:	75 25                	jne    1068b <addr_free_page+0x7e>
        bitmap_set_bit(&alloc->bitmap, page_index(alloc, page_addr), 1, 0);
   10666:	83 ec 08             	sub    $0x8,%esp
   10669:	ff 75 f0             	push   -0x10(%ebp)
   1066c:	ff 75 08             	push   0x8(%ebp)
   1066f:	e8 29 fd ff ff       	call   1039d <page_index>
   10674:	83 c4 10             	add    $0x10,%esp
   10677:	8b 55 08             	mov    0x8(%ebp),%edx
   1067a:	83 c2 14             	add    $0x14,%edx
   1067d:	6a 00                	push   $0x0
   1067f:	6a 01                	push   $0x1
   10681:	50                   	push   %eax
   10682:	52                   	push   %edx
   10683:	e8 2e 53 00 00       	call   159b6 <bitmap_set_bit>
   10688:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < page_count; ++i) {
   1068b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1068f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10692:	3b 45 10             	cmp    0x10(%ebp),%eax
   10695:	7c 94                	jl     1062b <addr_free_page+0x1e>
    }

  }

  mutex_unlock(&alloc->mutex);
   10697:	8b 45 08             	mov    0x8(%ebp),%eax
   1069a:	83 ec 0c             	sub    $0xc,%esp
   1069d:	50                   	push   %eax
   1069e:	e8 80 4b 00 00       	call   15223 <mutex_unlock>
   106a3:	83 c4 10             	add    $0x10,%esp
}
   106a6:	90                   	nop
   106a7:	c9                   	leave  
   106a8:	c3                   	ret    

000106a9 <show_mem_info>:
/**
 * @brief  打印1m以内内存的可用空间
 * 
 * @param boot_info 
 */
static void show_mem_info(boot_info_t *boot_info) {
   106a9:	55                   	push   %ebp
   106aa:	89 e5                	mov    %esp,%ebp
   106ac:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:\n");
   106af:	83 ec 0c             	sub    $0xc,%esp
   106b2:	68 20 66 01 00       	push   $0x16620
   106b7:	e8 b8 5e 00 00       	call   16574 <log_printf>
   106bc:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   106bf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   106c6:	eb 29                	jmp    106f1 <show_mem_info+0x48>
        log_printf("[%d]: 0x%x - 0x%x\n", i, boot_info->ram_region_cfg[i].start, boot_info->ram_region_cfg[i].size);
   106c8:	8b 45 08             	mov    0x8(%ebp),%eax
   106cb:	8b 55 f4             	mov    -0xc(%ebp),%edx
   106ce:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   106d2:	8b 45 08             	mov    0x8(%ebp),%eax
   106d5:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   106d8:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   106db:	52                   	push   %edx
   106dc:	50                   	push   %eax
   106dd:	ff 75 f4             	push   -0xc(%ebp)
   106e0:	68 2d 66 01 00       	push   $0x1662d
   106e5:	e8 8a 5e 00 00       	call   16574 <log_printf>
   106ea:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   106ed:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   106f1:	8b 45 08             	mov    0x8(%ebp),%eax
   106f4:	8b 40 50             	mov    0x50(%eax),%eax
   106f7:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   106fa:	7c cc                	jl     106c8 <show_mem_info+0x1f>
    }

    log_printf("\n");
   106fc:	83 ec 0c             	sub    $0xc,%esp
   106ff:	68 40 66 01 00       	push   $0x16640
   10704:	e8 6b 5e 00 00       	call   16574 <log_printf>
   10709:	83 c4 10             	add    $0x10,%esp
}
   1070c:	90                   	nop
   1070d:	c9                   	leave  
   1070e:	c3                   	ret    

0001070f <total_mem_size>:
 * @brief  计算总的可用内存空间大小
 * 
 * @param boot_info 
 * @return uint32_t 
 */
static uint32_t total_mem_size(boot_info_t *boot_info) {
   1070f:	55                   	push   %ebp
   10710:	89 e5                	mov    %esp,%ebp
   10712:	83 ec 10             	sub    $0x10,%esp
    uint32_t mem_size = 0;
   10715:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   1071c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   10723:	eb 11                	jmp    10736 <total_mem_size+0x27>
        mem_size += boot_info->ram_region_cfg[i].size;
   10725:	8b 45 08             	mov    0x8(%ebp),%eax
   10728:	8b 55 f8             	mov    -0x8(%ebp),%edx
   1072b:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
   1072f:	01 45 fc             	add    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   10732:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   10736:	8b 45 08             	mov    0x8(%ebp),%eax
   10739:	8b 40 50             	mov    0x50(%eax),%eax
   1073c:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   1073f:	7c e4                	jl     10725 <total_mem_size+0x16>
    }

    return mem_size;
   10741:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10744:	c9                   	leave  
   10745:	c3                   	ret    

00010746 <find_pte>:
 *                 1：表示创建一个新页目录项，并为其分配一个新页作为页表
 *                 0: 返回0
 *                
 * @return pte_t* 索引到的页表项
 */
pte_t* find_pte(pde_t* page_dir, uint32_t vstart, int is_alloc) {
   10746:	55                   	push   %ebp
   10747:	89 e5                	mov    %esp,%ebp
   10749:	83 ec 18             	sub    $0x18,%esp
  pte_t* page_table; //记录被索引的页表
  //1.通过虚拟地址高10位索引到对应的页目录项
  pde_t* pde = page_dir + pde_index(vstart);
   1074c:	ff 75 0c             	push   0xc(%ebp)
   1074f:	e8 c0 fb ff ff       	call   10314 <pde_index>
   10754:	83 c4 04             	add    $0x4,%esp
   10757:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1075e:	8b 45 08             	mov    0x8(%ebp),%eax
   10761:	01 d0                	add    %edx,%eax
   10763:	89 45 f0             	mov    %eax,-0x10(%ebp)

  //2.判断该页目录项是否已存在，及该页目录项是否已指向一个被分配的页表
  if (pde->present) { //该页目录项存在，及存在对应的页表，可以索引到对应的页表
   10766:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10769:	0f b6 00             	movzbl (%eax),%eax
   1076c:	83 e0 01             	and    $0x1,%eax
   1076f:	84 c0                	test   %al,%al
   10771:	74 10                	je     10783 <find_pte+0x3d>
    page_table = (pte_t*)pde_to_pt_addr(pde);
   10773:	ff 75 f0             	push   -0x10(%ebp)
   10776:	e8 b4 fb ff ff       	call   1032f <pde_to_pt_addr>
   1077b:	83 c4 04             	add    $0x4,%esp
   1077e:	89 45 f4             	mov    %eax,-0xc(%ebp)
   10781:	eb 57                	jmp    107da <find_pte+0x94>
  } else {//该目录项不存在内存中，及对应的页表不存在
    if (is_alloc == 0) {  //不为该目录项创建对应的页表
   10783:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10787:	75 07                	jne    10790 <find_pte+0x4a>
      return (pte_t*)0;
   10789:	b8 00 00 00 00       	mov    $0x0,%eax
   1078e:	eb 64                	jmp    107f4 <find_pte+0xae>
    }

    //为该目录项分配一页作为页表
    uint32_t pg_addr = addr_alloc_page(&paddr_alloc, 1);
   10790:	83 ec 08             	sub    $0x8,%esp
   10793:	6a 01                	push   $0x1
   10795:	68 00 90 01 00       	push   $0x19000
   1079a:	e8 07 fe ff ff       	call   105a6 <addr_alloc_page>
   1079f:	83 c4 10             	add    $0x10,%esp
   107a2:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pg_addr == 0) { //分配失败
   107a5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   107a9:	75 07                	jne    107b2 <find_pte+0x6c>
      return (pte_t*)0;
   107ab:	b8 00 00 00 00       	mov    $0x0,%eax
   107b0:	eb 42                	jmp    107f4 <find_pte+0xae>
    }

    //分配成功, 索引对应的页表
    page_table = (pte_t*)pg_addr;
   107b2:	8b 45 ec             	mov    -0x14(%ebp),%eax
   107b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_memset(page_table, 0, MEM_PAGE_SIZE);
   107b8:	83 ec 04             	sub    $0x4,%esp
   107bb:	68 00 10 00 00       	push   $0x1000
   107c0:	6a 00                	push   $0x0
   107c2:	ff 75 f4             	push   -0xc(%ebp)
   107c5:	e8 ad 55 00 00       	call   15d77 <kernel_memset>
   107ca:	83 c4 10             	add    $0x10,%esp

    //将该页表的起始地址放入对应的页目录项中并放入页目录表中，方便后续索引到该页表
    //且权限都放宽，即普通用户可访问，对应的页表的所有页可读写，将具体的权限交给每一页来进一步限制
    pde->v = pg_addr | PDE_U | PDE_W | PDE_P;
   107cd:	8b 45 ec             	mov    -0x14(%ebp),%eax
   107d0:	83 c8 07             	or     $0x7,%eax
   107d3:	89 c2                	mov    %eax,%edx
   107d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   107d8:	89 10                	mov    %edx,(%eax)

  // log_printf("sizeof(pte_t) = %d", sizeof(pte_t));


  //3.返回在该页表中索引到的页表项
  return page_table + pte_index(vstart);
   107da:	83 ec 0c             	sub    $0xc,%esp
   107dd:	ff 75 0c             	push   0xc(%ebp)
   107e0:	e8 3a fb ff ff       	call   1031f <pte_index>
   107e5:	83 c4 10             	add    $0x10,%esp
   107e8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   107ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107f2:	01 d0                	add    %edx,%eax

}
   107f4:	c9                   	leave  
   107f5:	c3                   	ret    

000107f6 <memory_creat_map>:
 * @param pstart 物理地址的起始地址
 * @param page_count 分页数量
 * @param privilege 该段虚拟地址的特权级
 * @return int -1:分配失败
 */
int  memory_creat_map(pde_t *page_dir, uint32_t vstart, uint32_t pstart, int page_count, uint32_t privilege) {
   107f6:	55                   	push   %ebp
   107f7:	89 e5                	mov    %esp,%ebp
   107f9:	83 ec 18             	sub    $0x18,%esp
  //1.为每一页创建对应的页表项
  for (int i = 0; i < page_count; ++i) {
   107fc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10803:	e9 91 00 00 00       	jmp    10899 <memory_creat_map+0xa3>
    // //打印调试信息
    // log_printf("creat map: v-0x%x, p-0x%x, privilege:0x%x", vstart, pstart, privilege);

    //2.通过虚拟地址在页目录表中获取对应的页目录项指向的页表,
    //且当没有该页目录项时，为其分配一个页作为页表并让一个目录项指向该页表
    pte_t *pte = find_pte(page_dir, vstart, 1);
   10808:	83 ec 04             	sub    $0x4,%esp
   1080b:	6a 01                	push   $0x1
   1080d:	ff 75 0c             	push   0xc(%ebp)
   10810:	ff 75 08             	push   0x8(%ebp)
   10813:	e8 2e ff ff ff       	call   10746 <find_pte>
   10818:	83 c4 10             	add    $0x10,%esp
   1081b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pte == (pte_t*)0) {//没有找到可用的页表项
   1081e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10822:	75 17                	jne    1083b <memory_creat_map+0x45>
    log_printf("creat pte failed pte == 0\n");
   10824:	83 ec 0c             	sub    $0xc,%esp
   10827:	68 42 66 01 00       	push   $0x16642
   1082c:	e8 43 5d 00 00       	call   16574 <log_printf>
   10831:	83 c4 10             	add    $0x10,%esp
      return -1;
   10834:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10839:	eb 6f                	jmp    108aa <memory_creat_map+0xb4>
    }

    // log_printf("pte addr : 0x%x", (uint32_t)pte);
    //3.确保该页并未已存在内存中
    ASSERT(pte->present == 0);
   1083b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1083e:	0f b6 00             	movzbl (%eax),%eax
   10841:	83 e0 01             	and    $0x1,%eax
   10844:	84 c0                	test   %al,%al
   10846:	74 1c                	je     10864 <memory_creat_map+0x6e>
   10848:	68 5d 66 01 00       	push   $0x1665d
   1084d:	68 bc 67 01 00       	push   $0x167bc
   10852:	68 1d 01 00 00       	push   $0x11d
   10857:	68 70 66 01 00       	push   $0x16670
   1085c:	e8 fd 4f 00 00       	call   1585e <pannic>
   10861:	83 c4 10             	add    $0x10,%esp

    //4.在页表项中创建对应的映射关系，并该页权限，页权限以当前权限为主，因为pde处已放宽权限
    pte->v = pstart | privilege | PTE_P;
   10864:	8b 45 10             	mov    0x10(%ebp),%eax
   10867:	0b 45 18             	or     0x18(%ebp),%eax
   1086a:	83 c8 01             	or     $0x1,%eax
   1086d:	89 c2                	mov    %eax,%edx
   1086f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10872:	89 10                	mov    %edx,(%eax)

    //5.将该页引用计数+1
    page_ref_add(&paddr_alloc, pstart);
   10874:	83 ec 08             	sub    $0x8,%esp
   10877:	ff 75 10             	push   0x10(%ebp)
   1087a:	68 00 90 01 00       	push   $0x19000
   1087f:	e8 3e fb ff ff       	call   103c2 <page_ref_add>
   10884:	83 c4 10             	add    $0x10,%esp

    //6.切换为下一页
    vstart += MEM_PAGE_SIZE;
   10887:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    pstart += MEM_PAGE_SIZE;
   1088e:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
  for (int i = 0; i < page_count; ++i) {
   10895:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10899:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1089c:	3b 45 14             	cmp    0x14(%ebp),%eax
   1089f:	0f 8c 63 ff ff ff    	jl     10808 <memory_creat_map+0x12>

  }

  return 1;
   108a5:	b8 01 00 00 00       	mov    $0x1,%eax
 }
   108aa:	c9                   	leave  
   108ab:	c3                   	ret    

000108ac <create_kernal_table>:

//TODO:编写函数注释
void create_kernal_table(void) {
   108ac:	55                   	push   %ebp
   108ad:	89 e5                	mov    %esp,%ebp
   108af:	83 ec 28             	sub    $0x28,%esp
    {(void*)CONSOLE_DISP_START_ADDR, (void*)CONSOLE_DISP_END_ADDR, (void*)CONSOLE_DISP_START_ADDR, PTE_W},//显存区域的映射关系
    {(void*)MEM_EXT_START, (void*)MEM_EXT_END, (void*)MEM_EXT_START, PTE_W}, //将1mb到127mb都映射给操作系统使用

  };

  for (int i = 0; i < sizeof(kernal_map) / sizeof(kernal_map[0]); ++i) {
   108b2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   108b9:	e9 92 00 00 00       	jmp    10950 <create_kernal_table+0xa4>
    memory_map_t *map = kernal_map + i;
   108be:	8b 45 f4             	mov    -0xc(%ebp),%eax
   108c1:	c1 e0 04             	shl    $0x4,%eax
   108c4:	05 00 80 01 00       	add    $0x18000,%eax
   108c9:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //将虚拟地址的起始地址按页大小4kb对齐，为了不丢失原有的虚拟地址空间，所以向下对齐vstart
    //理论上虚拟地址是不需要上下边缘对齐的，这里主要是为了计算所需页数
    //因为虚拟地址的每一页都和页目录项以及页表项捆绑了，
    //只需用页目录项和页表项为该页映射一个物理页即可，所以物理页才必须上下边缘按4kb对齐
    uint32_t vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   108cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   108cf:	8b 00                	mov    (%eax),%eax
   108d1:	68 00 10 00 00       	push   $0x1000
   108d6:	50                   	push   %eax
   108d7:	e8 08 fa ff ff       	call   102e4 <down2>
   108dc:	83 c4 08             	add    $0x8,%esp
   108df:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32_t pstart = down2((uint32_t)map->pstart, MEM_PAGE_SIZE);
   108e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   108e5:	8b 40 08             	mov    0x8(%eax),%eax
   108e8:	68 00 10 00 00       	push   $0x1000
   108ed:	50                   	push   %eax
   108ee:	e8 f1 f9 ff ff       	call   102e4 <down2>
   108f3:	83 c4 08             	add    $0x8,%esp
   108f6:	89 45 e8             	mov    %eax,-0x18(%ebp)
    //将虚拟地址的结束地址按页大小4kb对齐, 为了不丢失原有的虚拟地址空间，所以向上对齐vend
    uint32_t vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   108f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   108fc:	8b 40 04             	mov    0x4(%eax),%eax
   108ff:	68 00 10 00 00       	push   $0x1000
   10904:	50                   	push   %eax
   10905:	e8 e7 f9 ff ff       	call   102f1 <up2>
   1090a:	83 c4 08             	add    $0x8,%esp
   1090d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    //计算该虚拟空间需要的页数
    int page_count = (vend - vstart) / MEM_PAGE_SIZE;
   10910:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10913:	2b 45 ec             	sub    -0x14(%ebp),%eax
   10916:	c1 e8 0c             	shr    $0xc,%eax
   10919:	89 45 e0             	mov    %eax,-0x20(%ebp)

    //创建内存映射关系
    memory_creat_map(kernel_page_dir, vstart, pstart, page_count, map->privilege);
   1091c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1091f:	8b 40 0c             	mov    0xc(%eax),%eax
   10922:	83 ec 0c             	sub    $0xc,%esp
   10925:	50                   	push   %eax
   10926:	ff 75 e0             	push   -0x20(%ebp)
   10929:	ff 75 e8             	push   -0x18(%ebp)
   1092c:	ff 75 ec             	push   -0x14(%ebp)
   1092f:	68 00 10 02 00       	push   $0x21000
   10934:	e8 bd fe ff ff       	call   107f6 <memory_creat_map>
   10939:	83 c4 20             	add    $0x20,%esp
    //清空内核空间对页的引用
    clear_page_ref(&paddr_alloc);
   1093c:	83 ec 0c             	sub    $0xc,%esp
   1093f:	68 00 90 01 00       	push   $0x19000
   10944:	e8 85 fb ff ff       	call   104ce <clear_page_ref>
   10949:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < sizeof(kernal_map) / sizeof(kernal_map[0]); ++i) {
   1094c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10950:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10953:	83 f8 04             	cmp    $0x4,%eax
   10956:	0f 86 62 ff ff ff    	jbe    108be <create_kernal_table+0x12>

  }
}
   1095c:	90                   	nop
   1095d:	90                   	nop
   1095e:	c9                   	leave  
   1095f:	c3                   	ret    

00010960 <memory_creat_uvm>:
/**
 * @brief 创建用户进程的虚拟内存空间，即页目录表
 * 
 * @return uint32_t 
 */
uint32_t memory_creat_uvm() {
   10960:	55                   	push   %ebp
   10961:	89 e5                	mov    %esp,%ebp
   10963:	83 ec 18             	sub    $0x18,%esp
  //1.分配一页作为页目录表
  pde_t *page_dir = (pde_t *)addr_alloc_page(&paddr_alloc, 1);
   10966:	83 ec 08             	sub    $0x8,%esp
   10969:	6a 01                	push   $0x1
   1096b:	68 00 90 01 00       	push   $0x19000
   10970:	e8 31 fc ff ff       	call   105a6 <addr_alloc_page>
   10975:	83 c4 10             	add    $0x10,%esp
   10978:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (page_dir == 0) return 0;
   1097b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1097f:	75 07                	jne    10988 <memory_creat_uvm+0x28>
   10981:	b8 00 00 00 00       	mov    $0x0,%eax
   10986:	eb 5b                	jmp    109e3 <memory_creat_uvm+0x83>
  //TODO:新分配的页并未做虚拟内存映射，会触发缺页异常，需要处理,这里先将1mb以上的所有空间都映射给内核进程

  //2.将该页的内容清空
  kernel_memset((void*)page_dir, 0, MEM_PAGE_SIZE);
   10988:	83 ec 04             	sub    $0x4,%esp
   1098b:	68 00 10 00 00       	push   $0x1000
   10990:	6a 00                	push   $0x0
   10992:	ff 75 f0             	push   -0x10(%ebp)
   10995:	e8 dd 53 00 00       	call   15d77 <kernel_memset>
   1099a:	83 c4 10             	add    $0x10,%esp

  //3.获取用户进程空间的第一个页目录项索引, 用户进程空间的起始地址MEM_TASK_BASE = 0x800 00000
  uint32_t user_pde_start = pde_index(MEM_TASK_BASE);
   1099d:	83 ec 0c             	sub    $0xc,%esp
   109a0:	68 00 00 00 80       	push   $0x80000000
   109a5:	e8 6a f9 ff ff       	call   10314 <pde_index>
   109aa:	83 c4 10             	add    $0x10,%esp
   109ad:	89 45 ec             	mov    %eax,-0x14(%ebp)

  //4.将用户进程空间以下的空间映射给操作系统使用，即将0~user_pde_start的pde提供给操作系统作为页目录项
  for (int i = 0; i < user_pde_start; ++i) {
   109b0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   109b7:	eb 1f                	jmp    109d8 <memory_creat_uvm+0x78>
      page_dir[i].v = kernel_page_dir[i].v; //所有进程都共享操作系统的页表
   109b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109bc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   109c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   109c6:	01 c2                	add    %eax,%edx
   109c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109cb:	8b 04 85 00 10 02 00 	mov    0x21000(,%eax,4),%eax
   109d2:	89 02                	mov    %eax,(%edx)
  for (int i = 0; i < user_pde_start; ++i) {
   109d4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   109d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109db:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   109de:	77 d9                	ja     109b9 <memory_creat_uvm+0x59>
  }


  return (uint32_t)page_dir;
   109e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   109e3:	c9                   	leave  
   109e4:	c3                   	ret    

000109e5 <memory_copy_uvm>:
 * 
 * @param to_page_dir 拷贝到的目标页目录表地址
 * @param from_page_dir 被拷贝的源页目录表地址
 * @return uint32_t 
 */
int memory_copy_uvm(uint32_t to_page_dir, uint32_t from_page_dir) {
   109e5:	55                   	push   %ebp
   109e6:	89 e5                	mov    %esp,%ebp
   109e8:	83 ec 38             	sub    $0x38,%esp
  //1.获取用户程序虚拟地址的起始pde索引，即0x8000 0000 的pde索引值
  uint32_t user_pde_start = pde_index(MEM_TASK_BASE);
   109eb:	68 00 00 00 80       	push   $0x80000000
   109f0:	e8 1f f9 ff ff       	call   10314 <pde_index>
   109f5:	83 c4 04             	add    $0x4,%esp
   109f8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  pde_t *pde = (pde_t *)from_page_dir + user_pde_start;
   109fb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   109fe:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10a05:	8b 45 0c             	mov    0xc(%ebp),%eax
   10a08:	01 d0                	add    %edx,%eax
   10a0a:	89 45 f4             	mov    %eax,-0xc(%ebp)

  //2.遍历源页目录表中的每一个页目录项，拷贝给目标目录
  for (int i = user_pde_start; i < PDE_CNT; ++i, ++pde) {
   10a0d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10a10:	89 45 f0             	mov    %eax,-0x10(%ebp)
   10a13:	e9 2a 01 00 00       	jmp    10b42 <memory_copy_uvm+0x15d>
    if (!pde->present)  //当前页目录项不存在
   10a18:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10a1b:	0f b6 00             	movzbl (%eax),%eax
   10a1e:	83 e0 01             	and    $0x1,%eax
   10a21:	84 c0                	test   %al,%al
   10a23:	0f 84 10 01 00 00    	je     10b39 <memory_copy_uvm+0x154>
      continue;

    //3.获取页目录项指向的页表的起始地址
    pte_t *pte = (pte_t*)pde_to_pt_addr(pde);
   10a29:	ff 75 f4             	push   -0xc(%ebp)
   10a2c:	e8 fe f8 ff ff       	call   1032f <pde_to_pt_addr>
   10a31:	83 c4 04             	add    $0x4,%esp
   10a34:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //4.遍历页表的页表项，进行读共享写复制的映射操作
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   10a37:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   10a3e:	e9 e7 00 00 00       	jmp    10b2a <memory_copy_uvm+0x145>
      if (!pte->present)  //当前页表项不存在
   10a43:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10a46:	0f b6 00             	movzbl (%eax),%eax
   10a49:	83 e0 01             	and    $0x1,%eax
   10a4c:	84 c0                	test   %al,%al
   10a4e:	0f 84 cd 00 00 00    	je     10b21 <memory_copy_uvm+0x13c>
        continue;
      
      //5.获取该页表项对应的虚拟地址
      uint32_t vaddr = (i << 22) | (j << 12);
   10a54:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10a57:	c1 e0 16             	shl    $0x16,%eax
   10a5a:	89 c2                	mov    %eax,%edx
   10a5c:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10a5f:	c1 e0 0c             	shl    $0xc,%eax
   10a62:	09 d0                	or     %edx,%eax
   10a64:	89 45 e0             	mov    %eax,-0x20(%ebp)
      
      //6.判断当前页表项指向的页是否支持写操作
      if (pte->v & PTE_W) { //7当前页支持写操作，需进行复制操作
   10a67:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10a6a:	8b 00                	mov    (%eax),%eax
   10a6c:	83 e0 02             	and    $0x2,%eax
   10a6f:	85 c0                	test   %eax,%eax
   10a71:	74 6c                	je     10adf <memory_copy_uvm+0xfa>
        //7.1分配一个新的页，进行拷贝
        uint32_t page = addr_alloc_page(&paddr_alloc, 1);
   10a73:	83 ec 08             	sub    $0x8,%esp
   10a76:	6a 01                	push   $0x1
   10a78:	68 00 90 01 00       	push   $0x19000
   10a7d:	e8 24 fb ff ff       	call   105a6 <addr_alloc_page>
   10a82:	83 c4 10             	add    $0x10,%esp
   10a85:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        if (page == 0)  //分配失败
   10a88:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   10a8c:	0f 84 c4 00 00 00    	je     10b56 <memory_copy_uvm+0x171>
          goto copy_uvm_failed;
        
        //7.2在目标进程空间中记录映射关系
        int err = memory_creat_map((pde_t*)to_page_dir, vaddr, page, 1, get_pte_privilege(pte));
   10a92:	83 ec 0c             	sub    $0xc,%esp
   10a95:	ff 75 ec             	push   -0x14(%ebp)
   10a98:	e8 e0 f8 ff ff       	call   1037d <get_pte_privilege>
   10a9d:	83 c4 10             	add    $0x10,%esp
   10aa0:	8b 55 08             	mov    0x8(%ebp),%edx
   10aa3:	83 ec 0c             	sub    $0xc,%esp
   10aa6:	50                   	push   %eax
   10aa7:	6a 01                	push   $0x1
   10aa9:	ff 75 d4             	push   -0x2c(%ebp)
   10aac:	ff 75 e0             	push   -0x20(%ebp)
   10aaf:	52                   	push   %edx
   10ab0:	e8 41 fd ff ff       	call   107f6 <memory_creat_map>
   10ab5:	83 c4 20             	add    $0x20,%esp
   10ab8:	89 45 d0             	mov    %eax,-0x30(%ebp)
        if (err < 0)
   10abb:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
   10abf:	0f 88 94 00 00 00    	js     10b59 <memory_copy_uvm+0x174>
          goto copy_uvm_failed;
        
        //7.3将该页内容拷贝到目标进程空间中
        kernel_memcpy((void*)page, (void*)vaddr, MEM_PAGE_SIZE);
   10ac5:	8b 55 e0             	mov    -0x20(%ebp),%edx
   10ac8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   10acb:	83 ec 04             	sub    $0x4,%esp
   10ace:	68 00 10 00 00       	push   $0x1000
   10ad3:	52                   	push   %edx
   10ad4:	50                   	push   %eax
   10ad5:	e8 4e 52 00 00       	call   15d28 <kernel_memcpy>
   10ada:	83 c4 10             	add    $0x10,%esp
   10add:	eb 43                	jmp    10b22 <memory_copy_uvm+0x13d>

      } else {  //8.当前页为只读页，直接共享该页即可，即只复制页表项即可
        //8.1获取该页的物理地址
        uint32_t page = pte_to_pg_addr(pte);
   10adf:	83 ec 0c             	sub    $0xc,%esp
   10ae2:	ff 75 ec             	push   -0x14(%ebp)
   10ae5:	e8 6c f8 ff ff       	call   10356 <pte_to_pg_addr>
   10aea:	83 c4 10             	add    $0x10,%esp
   10aed:	89 45 dc             	mov    %eax,-0x24(%ebp)
        //8.2直接在目标进程空间中记录映射关系
        int err = memory_creat_map((pde_t*)to_page_dir, vaddr, page, 1, get_pte_privilege(pte));
   10af0:	83 ec 0c             	sub    $0xc,%esp
   10af3:	ff 75 ec             	push   -0x14(%ebp)
   10af6:	e8 82 f8 ff ff       	call   1037d <get_pte_privilege>
   10afb:	83 c4 10             	add    $0x10,%esp
   10afe:	8b 55 08             	mov    0x8(%ebp),%edx
   10b01:	83 ec 0c             	sub    $0xc,%esp
   10b04:	50                   	push   %eax
   10b05:	6a 01                	push   $0x1
   10b07:	ff 75 dc             	push   -0x24(%ebp)
   10b0a:	ff 75 e0             	push   -0x20(%ebp)
   10b0d:	52                   	push   %edx
   10b0e:	e8 e3 fc ff ff       	call   107f6 <memory_creat_map>
   10b13:	83 c4 20             	add    $0x20,%esp
   10b16:	89 45 d8             	mov    %eax,-0x28(%ebp)
        if (err < 0)
   10b19:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
   10b1d:	78 3d                	js     10b5c <memory_copy_uvm+0x177>
   10b1f:	eb 01                	jmp    10b22 <memory_copy_uvm+0x13d>
        continue;
   10b21:	90                   	nop
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   10b22:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   10b26:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   10b2a:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   10b31:	0f 8e 0c ff ff ff    	jle    10a43 <memory_copy_uvm+0x5e>
   10b37:	eb 01                	jmp    10b3a <memory_copy_uvm+0x155>
      continue;
   10b39:	90                   	nop
  for (int i = user_pde_start; i < PDE_CNT; ++i, ++pde) {
   10b3a:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10b3e:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   10b42:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   10b49:	0f 8e c9 fe ff ff    	jle    10a18 <memory_copy_uvm+0x33>
      }

    }
  }

  return 1;
   10b4f:	b8 01 00 00 00       	mov    $0x1,%eax
   10b54:	eb 1a                	jmp    10b70 <memory_copy_uvm+0x18b>
          goto copy_uvm_failed;
   10b56:	90                   	nop
   10b57:	eb 04                	jmp    10b5d <memory_copy_uvm+0x178>
          goto copy_uvm_failed;
   10b59:	90                   	nop
   10b5a:	eb 01                	jmp    10b5d <memory_copy_uvm+0x178>
          goto copy_uvm_failed;
   10b5c:	90                   	nop


copy_uvm_failed:
  memory_destroy_uvm(to_page_dir);
   10b5d:	83 ec 0c             	sub    $0xc,%esp
   10b60:	ff 75 08             	push   0x8(%ebp)
   10b63:	e8 0a 00 00 00       	call   10b72 <memory_destroy_uvm>
   10b68:	83 c4 10             	add    $0x10,%esp
  return -1;
   10b6b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10b70:	c9                   	leave  
   10b71:	c3                   	ret    

00010b72 <memory_destroy_uvm>:
 * @brief 销毁该页目录表对应的所有虚拟空间资源，包括映射关系与内存空间
 * 
 * @param page_dir 页目录表的地址
 * @param is_read_share 是否开启了读共享策略，1开启，0未开启
 */
void memory_destroy_uvm(uint32_t page_dir) {
   10b72:	55                   	push   %ebp
   10b73:	89 e5                	mov    %esp,%ebp
   10b75:	83 ec 28             	sub    $0x28,%esp
  //1.获取用户进程虚拟地址的起始地址对应的该页目录项
  uint32_t user_task_start  = pde_index(MEM_TASK_BASE);
   10b78:	68 00 00 00 80       	push   $0x80000000
   10b7d:	e8 92 f7 ff ff       	call   10314 <pde_index>
   10b82:	83 c4 04             	add    $0x4,%esp
   10b85:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  pde_t *pde = (pde_t*) page_dir + user_task_start;
   10b88:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10b8b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10b92:	8b 45 08             	mov    0x8(%ebp),%eax
   10b95:	01 d0                	add    %edx,%eax
   10b97:	89 45 f4             	mov    %eax,-0xc(%ebp)

  //2.遍历每一个页目录项，清理对应资源
  for (int i = user_task_start; i < PDE_CNT; ++i, ++pde) {
   10b9a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10b9d:	89 45 f0             	mov    %eax,-0x10(%ebp)
   10ba0:	e9 8f 00 00 00       	jmp    10c34 <memory_destroy_uvm+0xc2>
    if (!pde->present) 
   10ba5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10ba8:	0f b6 00             	movzbl (%eax),%eax
   10bab:	83 e0 01             	and    $0x1,%eax
   10bae:	84 c0                	test   %al,%al
   10bb0:	74 79                	je     10c2b <memory_destroy_uvm+0xb9>
        continue;

    //3.获取页目录项对应的页表的起始地址
    pte_t *pte = (pte_t*)pde_to_pt_addr(pde);
   10bb2:	ff 75 f4             	push   -0xc(%ebp)
   10bb5:	e8 75 f7 ff ff       	call   1032f <pde_to_pt_addr>
   10bba:	83 c4 04             	add    $0x4,%esp
   10bbd:	89 45 ec             	mov    %eax,-0x14(%ebp)
    
    //4.遍历所有页表项，清理对应资源
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   10bc0:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   10bc7:	eb 36                	jmp    10bff <memory_destroy_uvm+0x8d>
      if (!pte->present)
   10bc9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10bcc:	0f b6 00             	movzbl (%eax),%eax
   10bcf:	83 e0 01             	and    $0x1,%eax
   10bd2:	84 c0                	test   %al,%al
   10bd4:	74 20                	je     10bf6 <memory_destroy_uvm+0x84>
        continue;
      
      //5.释放该物理页
      addr_free_page(&paddr_alloc, pte_to_pg_addr(pte), 1);
   10bd6:	ff 75 ec             	push   -0x14(%ebp)
   10bd9:	e8 78 f7 ff ff       	call   10356 <pte_to_pg_addr>
   10bde:	83 c4 04             	add    $0x4,%esp
   10be1:	83 ec 04             	sub    $0x4,%esp
   10be4:	6a 01                	push   $0x1
   10be6:	50                   	push   %eax
   10be7:	68 00 90 01 00       	push   $0x19000
   10bec:	e8 1c fa ff ff       	call   1060d <addr_free_page>
   10bf1:	83 c4 10             	add    $0x10,%esp
   10bf4:	eb 01                	jmp    10bf7 <memory_destroy_uvm+0x85>
        continue;
   10bf6:	90                   	nop
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   10bf7:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   10bfb:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   10bff:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   10c06:	7e c1                	jle    10bc9 <memory_destroy_uvm+0x57>
    }

    //6.释放存储该页表的物理页
    addr_free_page(&paddr_alloc, pde_to_pt_addr(pde), 1);
   10c08:	83 ec 0c             	sub    $0xc,%esp
   10c0b:	ff 75 f4             	push   -0xc(%ebp)
   10c0e:	e8 1c f7 ff ff       	call   1032f <pde_to_pt_addr>
   10c13:	83 c4 10             	add    $0x10,%esp
   10c16:	83 ec 04             	sub    $0x4,%esp
   10c19:	6a 01                	push   $0x1
   10c1b:	50                   	push   %eax
   10c1c:	68 00 90 01 00       	push   $0x19000
   10c21:	e8 e7 f9 ff ff       	call   1060d <addr_free_page>
   10c26:	83 c4 10             	add    $0x10,%esp
   10c29:	eb 01                	jmp    10c2c <memory_destroy_uvm+0xba>
        continue;
   10c2b:	90                   	nop
  for (int i = user_task_start; i < PDE_CNT; ++i, ++pde) {
   10c2c:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10c30:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   10c34:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   10c3b:	0f 8e 64 ff ff ff    	jle    10ba5 <memory_destroy_uvm+0x33>
  }


  //7.释放存储该页目录表的物理页
  addr_free_page(&paddr_alloc, page_dir, 1);
   10c41:	83 ec 04             	sub    $0x4,%esp
   10c44:	6a 01                	push   $0x1
   10c46:	ff 75 08             	push   0x8(%ebp)
   10c49:	68 00 90 01 00       	push   $0x19000
   10c4e:	e8 ba f9 ff ff       	call   1060d <addr_free_page>
   10c53:	83 c4 10             	add    $0x10,%esp
}
   10c56:	90                   	nop
   10c57:	c9                   	leave  
   10c58:	c3                   	ret    

00010c59 <memory_init>:
/**
 * @brief  初始化化内存
 *
 * @param boot_info cpu在实模式下检测到的可用内存对象
 */
void memory_init(boot_info_t *boot_info) {
   10c59:	55                   	push   %ebp
   10c5a:	89 e5                	mov    %esp,%ebp
   10c5c:	83 ec 18             	sub    $0x18,%esp

  
    //声明紧邻在内核bss段后面的空间地址，用于存储位图，该变量定义在kernel.lds中
    extern char mem_free_start;

    log_printf("memory init\n");
   10c5f:	83 ec 0c             	sub    $0xc,%esp
   10c62:	68 a7 66 01 00       	push   $0x166a7
   10c67:	e8 08 59 00 00       	call   16574 <log_printf>
   10c6c:	83 c4 10             	add    $0x10,%esp

    log_printf("mem_free_start: 0x%x\n", &mem_free_start);
   10c6f:	83 ec 08             	sub    $0x8,%esp
   10c72:	68 41 d3 06 00       	push   $0x6d341
   10c77:	68 b4 66 01 00       	push   $0x166b4
   10c7c:	e8 f3 58 00 00       	call   16574 <log_printf>
   10c81:	83 c4 10             	add    $0x10,%esp

    show_mem_info(boot_info);
   10c84:	83 ec 0c             	sub    $0xc,%esp
   10c87:	ff 75 08             	push   0x8(%ebp)
   10c8a:	e8 1a fa ff ff       	call   106a9 <show_mem_info>
   10c8f:	83 c4 10             	add    $0x10,%esp
    
    //去除保护模式下1mb大小后可用的内存空间大小
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   10c92:	83 ec 0c             	sub    $0xc,%esp
   10c95:	ff 75 08             	push   0x8(%ebp)
   10c98:	e8 72 fa ff ff       	call   1070f <total_mem_size>
   10c9d:	83 c4 10             	add    $0x10,%esp
   10ca0:	2d 00 00 10 00       	sub    $0x100000,%eax
   10ca5:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将可用空间大小下调到页大小的整数倍
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);
   10ca8:	83 ec 08             	sub    $0x8,%esp
   10cab:	68 00 10 00 00       	push   $0x1000
   10cb0:	ff 75 f4             	push   -0xc(%ebp)
   10cb3:	e8 2c f6 ff ff       	call   102e4 <down2>
   10cb8:	83 c4 10             	add    $0x10,%esp
   10cbb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    log_printf("free memory: 0x%x, size: 0x%x\n", MEM_EXT_START, mem_up1MB_free);
   10cbe:	83 ec 04             	sub    $0x4,%esp
   10cc1:	ff 75 f4             	push   -0xc(%ebp)
   10cc4:	68 00 00 10 00       	push   $0x100000
   10cc9:	68 cc 66 01 00       	push   $0x166cc
   10cce:	e8 a1 58 00 00       	call   16574 <log_printf>
   10cd3:	83 c4 10             	add    $0x10,%esp

    //mem_free_start被分配的地址在链接文件中定义，紧邻着first_task段
    uint8_t *mem_free = (uint8_t*)&mem_free_start;
   10cd6:	c7 45 f0 41 d3 06 00 	movl   $0x6d341,-0x10(%ebp)

    //用paddr_alloc，内存页分配对象管理1mb以上的所有空闲空间，页大小为MEM_PAGE_SIZE=4kb
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   10cdd:	83 ec 0c             	sub    $0xc,%esp
   10ce0:	68 00 10 00 00       	push   $0x1000
   10ce5:	ff 75 f4             	push   -0xc(%ebp)
   10ce8:	68 00 00 10 00       	push   $0x100000
   10ced:	ff 75 f0             	push   -0x10(%ebp)
   10cf0:	68 00 90 01 00       	push   $0x19000
   10cf5:	e8 25 f8 ff ff       	call   1051f <addr_alloc_init>
   10cfa:	83 c4 20             	add    $0x20,%esp

    //跳过存储位图的内存区域, 位图的每一位表示一个页，计算位图所站的字节数即可跳过该区域
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);  
   10cfd:	a1 20 90 01 00       	mov    0x19020,%eax
   10d02:	c1 e8 0c             	shr    $0xc,%eax
   10d05:	83 ec 0c             	sub    $0xc,%esp
   10d08:	50                   	push   %eax
   10d09:	e8 86 4b 00 00       	call   15894 <bitmap_byte_count>
   10d0e:	83 c4 10             	add    $0x10,%esp
   10d11:	01 45 f0             	add    %eax,-0x10(%ebp)

    //判断mem_free是否已越过可用数据区
    ASSERT(mem_free < (uint8_t*)MEM_EBDA_START);
   10d14:	81 7d f0 ff fb 09 00 	cmpl   $0x9fbff,-0x10(%ebp)
   10d1b:	76 1c                	jbe    10d39 <memory_init+0xe0>
   10d1d:	68 ec 66 01 00       	push   $0x166ec
   10d22:	68 d0 67 01 00       	push   $0x167d0
   10d27:	68 f8 01 00 00       	push   $0x1f8
   10d2c:	68 70 66 01 00       	push   $0x16670
   10d31:	e8 28 4b 00 00       	call   1585e <pannic>
   10d36:	83 c4 10             	add    $0x10,%esp
    
    //创建内核的页表映射
    create_kernal_table();
   10d39:	e8 6e fb ff ff       	call   108ac <create_kernal_table>

    //设置内核的页目录表到CR3寄存器，并开启分页机制
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   10d3e:	b8 00 10 02 00       	mov    $0x21000,%eax
   10d43:	83 ec 0c             	sub    $0xc,%esp
   10d46:	50                   	push   %eax
   10d47:	e8 40 f6 ff ff       	call   1038c <mmu_set_page_dir>
   10d4c:	83 c4 10             	add    $0x10,%esp
}
   10d4f:	90                   	nop
   10d50:	c9                   	leave  
   10d51:	c3                   	ret    

00010d52 <memory_alloc_for_page_dir>:
 * @param vaddr 进程各个代码段的起始虚拟地址
 * @param alloc_size 为进程分配的页空间大小
 * @param priority 进程页空间的权限
 * @return int 
 */
int memory_alloc_for_page_dir(uint32_t page_dir, uint32_t vaddr, uint32_t alloc_size, uint32_t privilege) {
   10d52:	55                   	push   %ebp
   10d53:	89 e5                	mov    %esp,%ebp
   10d55:	83 ec 28             	sub    $0x28,%esp
  //1.记录当前分配的虚拟页的起始地址
  uint32_t curr_vaddr = vaddr;
   10d58:	8b 45 0c             	mov    0xc(%ebp),%eax
   10d5b:	89 45 f4             	mov    %eax,-0xc(%ebp)
  //2.计算需要分配多少页
  int page_count = up2(alloc_size, MEM_PAGE_SIZE) / MEM_PAGE_SIZE;
   10d5e:	68 00 10 00 00       	push   $0x1000
   10d63:	ff 75 10             	push   0x10(%ebp)
   10d66:	e8 86 f5 ff ff       	call   102f1 <up2>
   10d6b:	83 c4 08             	add    $0x8,%esp
   10d6e:	c1 e8 0c             	shr    $0xc,%eax
   10d71:	89 45 ec             	mov    %eax,-0x14(%ebp)

  //3.逐页进行映射
  for (int i = 0; i < page_count; ++i) {
   10d74:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   10d7b:	eb 7a                	jmp    10df7 <memory_alloc_for_page_dir+0xa5>
    uint32_t paddr = addr_alloc_page(&paddr_alloc, 1);
   10d7d:	83 ec 08             	sub    $0x8,%esp
   10d80:	6a 01                	push   $0x1
   10d82:	68 00 90 01 00       	push   $0x19000
   10d87:	e8 1a f8 ff ff       	call   105a6 <addr_alloc_page>
   10d8c:	83 c4 10             	add    $0x10,%esp
   10d8f:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (paddr == 0) {//分配失败
   10d92:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10d96:	75 17                	jne    10daf <memory_alloc_for_page_dir+0x5d>
      log_printf("mem alloc failed. no memory\n");
   10d98:	83 ec 0c             	sub    $0xc,%esp
   10d9b:	68 10 67 01 00       	push   $0x16710
   10da0:	e8 cf 57 00 00       	call   16574 <log_printf>
   10da5:	83 c4 10             	add    $0x10,%esp
      //TODO:当分配失败时应该将之前分配的页全部归还，且将映射关系也全部解除
      return 0;
   10da8:	b8 00 00 00 00       	mov    $0x0,%eax
   10dad:	eb 59                	jmp    10e08 <memory_alloc_for_page_dir+0xb6>
    }

    int err = memory_creat_map((pde_t*)page_dir, curr_vaddr, paddr, 1, privilege);
   10daf:	8b 45 08             	mov    0x8(%ebp),%eax
   10db2:	83 ec 0c             	sub    $0xc,%esp
   10db5:	ff 75 14             	push   0x14(%ebp)
   10db8:	6a 01                	push   $0x1
   10dba:	ff 75 e8             	push   -0x18(%ebp)
   10dbd:	ff 75 f4             	push   -0xc(%ebp)
   10dc0:	50                   	push   %eax
   10dc1:	e8 30 fa ff ff       	call   107f6 <memory_creat_map>
   10dc6:	83 c4 20             	add    $0x20,%esp
   10dc9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (err < 0) {//分配失败
   10dcc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10dd0:	79 1a                	jns    10dec <memory_alloc_for_page_dir+0x9a>
      log_printf("create memory failed. err = %d\n", err);
   10dd2:	83 ec 08             	sub    $0x8,%esp
   10dd5:	ff 75 e4             	push   -0x1c(%ebp)
   10dd8:	68 30 67 01 00       	push   $0x16730
   10ddd:	e8 92 57 00 00       	call   16574 <log_printf>
   10de2:	83 c4 10             	add    $0x10,%esp
      //TODO:当分配失败时应该将之前分配的页全部归还，且将映射关系也全部解除
      return 0;
   10de5:	b8 00 00 00 00       	mov    $0x0,%eax
   10dea:	eb 1c                	jmp    10e08 <memory_alloc_for_page_dir+0xb6>
    }

    curr_vaddr += MEM_PAGE_SIZE;
   10dec:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
  for (int i = 0; i < page_count; ++i) {
   10df3:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10df7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10dfa:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   10dfd:	0f 8c 7a ff ff ff    	jl     10d7d <memory_alloc_for_page_dir+0x2b>
  }

  return 0;
   10e03:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10e08:	c9                   	leave  
   10e09:	c3                   	ret    

00010e0a <memory_alloc_page_for>:
 * @param vaddr 待分配空间的起始地址
 * @param alloc_size 为其分配的空间大小
 * @param privilege 对应页空间的权限
 * @return int 错误码
 */
int memory_alloc_page_for(uint32_t vaddr, uint32_t alloc_size, uint32_t privilege) {
   10e0a:	55                   	push   %ebp
   10e0b:	89 e5                	mov    %esp,%ebp
   10e0d:	83 ec 08             	sub    $0x8,%esp
  return memory_alloc_for_page_dir(task_current()->tss.cr3, vaddr, alloc_size, privilege);
   10e10:	e8 6b 0b 00 00       	call   11980 <task_current>
   10e15:	8b 40 74             	mov    0x74(%eax),%eax
   10e18:	ff 75 10             	push   0x10(%ebp)
   10e1b:	ff 75 0c             	push   0xc(%ebp)
   10e1e:	ff 75 08             	push   0x8(%ebp)
   10e21:	50                   	push   %eax
   10e22:	e8 2b ff ff ff       	call   10d52 <memory_alloc_for_page_dir>
   10e27:	83 c4 10             	add    $0x10,%esp
}
   10e2a:	c9                   	leave  
   10e2b:	c3                   	ret    

00010e2c <curr_page_dir>:
/**
 * @brief 返回当前进程的页目录表的地址
 * 
 * @return pde_t* 
 */
static pde_t* curr_page_dir() {
   10e2c:	55                   	push   %ebp
   10e2d:	89 e5                	mov    %esp,%ebp
   10e2f:	83 ec 08             	sub    $0x8,%esp
  return (pde_t*)(task_current()->tss.cr3);
   10e32:	e8 49 0b 00 00       	call   11980 <task_current>
   10e37:	8b 40 74             	mov    0x74(%eax),%eax
}
   10e3a:	c9                   	leave  
   10e3b:	c3                   	ret    

00010e3c <memory_alloc_page>:
/**
 * @brief 为进程的内核空间分配一页内存，需特权级0访问
 * 
 * @return uint32_t 内存的起始地址
 */
uint32_t memory_alloc_page() {
   10e3c:	55                   	push   %ebp
   10e3d:	89 e5                	mov    %esp,%ebp
   10e3f:	83 ec 18             	sub    $0x18,%esp
  //因为0x100000 ~ 0x8000 0000,即低 1mb~2gb都由操作系统内核使用，
  //操作系统内核已对整个内存空间进行了一一映射，而每个程序的2gb以下空间都使用操作系统的虚拟页表
  //所以直接返回该页物理地址，也就是该页在操作系统虚拟地址空间中的虚拟地址
  //需要注意的是后续访问该页需要0特权级，因为访问的是内核空间
  uint32_t addr = addr_alloc_page(&paddr_alloc, 1);
   10e42:	83 ec 08             	sub    $0x8,%esp
   10e45:	6a 01                	push   $0x1
   10e47:	68 00 90 01 00       	push   $0x19000
   10e4c:	e8 55 f7 ff ff       	call   105a6 <addr_alloc_page>
   10e51:	83 c4 10             	add    $0x10,%esp
   10e54:	89 45 f4             	mov    %eax,-0xc(%ebp)
  return addr;
   10e57:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   10e5a:	c9                   	leave  
   10e5b:	c3                   	ret    

00010e5c <memory_free_page>:
 * @brief 释放一页内存空间
 * 
 * @param addr 
 */

void memory_free_page(uint32_t addr) {
   10e5c:	55                   	push   %ebp
   10e5d:	89 e5                	mov    %esp,%ebp
   10e5f:	83 ec 18             	sub    $0x18,%esp
  if (addr < MEM_TASK_BASE) { //释放内核空间的一页内存
   10e62:	8b 45 08             	mov    0x8(%ebp),%eax
   10e65:	85 c0                	test   %eax,%eax
   10e67:	78 17                	js     10e80 <memory_free_page+0x24>
    addr_free_page(&paddr_alloc, addr, 1);  //因为内核空间为一一映射关系，虚拟地址即为物理地址,且不需要解除映射关系
   10e69:	83 ec 04             	sub    $0x4,%esp
   10e6c:	6a 01                	push   $0x1
   10e6e:	ff 75 08             	push   0x8(%ebp)
   10e71:	68 00 90 01 00       	push   $0x19000
   10e76:	e8 92 f7 ff ff       	call   1060d <addr_free_page>
   10e7b:	83 c4 10             	add    $0x10,%esp

    //3.将页表项清空，解除映射关系
    pte->v = 0;
  }

}
   10e7e:	eb 72                	jmp    10ef2 <memory_free_page+0x96>
    pte_t *pte = find_pte(curr_page_dir(), addr, 0);
   10e80:	e8 a7 ff ff ff       	call   10e2c <curr_page_dir>
   10e85:	83 ec 04             	sub    $0x4,%esp
   10e88:	6a 00                	push   $0x0
   10e8a:	ff 75 08             	push   0x8(%ebp)
   10e8d:	50                   	push   %eax
   10e8e:	e8 b3 f8 ff ff       	call   10746 <find_pte>
   10e93:	83 c4 10             	add    $0x10,%esp
   10e96:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT(pte != (pte_t*)0 && pte->present);
   10e99:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10e9d:	74 0d                	je     10eac <memory_free_page+0x50>
   10e9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10ea2:	0f b6 00             	movzbl (%eax),%eax
   10ea5:	83 e0 01             	and    $0x1,%eax
   10ea8:	84 c0                	test   %al,%al
   10eaa:	75 1c                	jne    10ec8 <memory_free_page+0x6c>
   10eac:	68 50 67 01 00       	push   $0x16750
   10eb1:	68 dc 67 01 00       	push   $0x167dc
   10eb6:	68 5a 02 00 00       	push   $0x25a
   10ebb:	68 70 66 01 00       	push   $0x16670
   10ec0:	e8 99 49 00 00       	call   1585e <pannic>
   10ec5:	83 c4 10             	add    $0x10,%esp
    addr_free_page(&paddr_alloc, pte_to_pg_addr(pte), 1);
   10ec8:	83 ec 0c             	sub    $0xc,%esp
   10ecb:	ff 75 f4             	push   -0xc(%ebp)
   10ece:	e8 83 f4 ff ff       	call   10356 <pte_to_pg_addr>
   10ed3:	83 c4 10             	add    $0x10,%esp
   10ed6:	83 ec 04             	sub    $0x4,%esp
   10ed9:	6a 01                	push   $0x1
   10edb:	50                   	push   %eax
   10edc:	68 00 90 01 00       	push   $0x19000
   10ee1:	e8 27 f7 ff ff       	call   1060d <addr_free_page>
   10ee6:	83 c4 10             	add    $0x10,%esp
    pte->v = 0;
   10ee9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10eec:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   10ef2:	90                   	nop
   10ef3:	c9                   	leave  
   10ef4:	c3                   	ret    

00010ef5 <memory_get_paddr>:
 * 
 * @param page_dir 
 * @param vaddr 
 * @return uint32_t 
 */
uint32_t memory_get_paddr(uint32_t page_dir, uint32_t vaddr) {
   10ef5:	55                   	push   %ebp
   10ef6:	89 e5                	mov    %esp,%ebp
   10ef8:	83 ec 18             	sub    $0x18,%esp
  //查找vaddr对应的页表项
  pte_t * pte = find_pte((pde_t*)page_dir, vaddr, 0);
   10efb:	8b 45 08             	mov    0x8(%ebp),%eax
   10efe:	83 ec 04             	sub    $0x4,%esp
   10f01:	6a 00                	push   $0x0
   10f03:	ff 75 0c             	push   0xc(%ebp)
   10f06:	50                   	push   %eax
   10f07:	e8 3a f8 ff ff       	call   10746 <find_pte>
   10f0c:	83 c4 10             	add    $0x10,%esp
   10f0f:	89 45 f4             	mov    %eax,-0xc(%ebp)

  //若没有找到该页表项或该页表项还不存在，则返回0
  if (!pte || !pte->present) {
   10f12:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10f16:	74 0d                	je     10f25 <memory_get_paddr+0x30>
   10f18:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f1b:	0f b6 00             	movzbl (%eax),%eax
   10f1e:	83 e0 01             	and    $0x1,%eax
   10f21:	84 c0                	test   %al,%al
   10f23:	75 07                	jne    10f2c <memory_get_paddr+0x37>
    return 0;
   10f25:	b8 00 00 00 00       	mov    $0x0,%eax
   10f2a:	eb 1a                	jmp    10f46 <memory_get_paddr+0x51>
  }

  //找到并存在该页表项，返回绑定的物理地址
  return pte_to_pg_addr(pte) | (vaddr & (MEM_PAGE_SIZE - 1));
   10f2c:	83 ec 0c             	sub    $0xc,%esp
   10f2f:	ff 75 f4             	push   -0xc(%ebp)
   10f32:	e8 1f f4 ff ff       	call   10356 <pte_to_pg_addr>
   10f37:	83 c4 10             	add    $0x10,%esp
   10f3a:	89 c2                	mov    %eax,%edx
   10f3c:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f3f:	25 ff 0f 00 00       	and    $0xfff,%eax
   10f44:	09 d0                	or     %edx,%eax

}
   10f46:	c9                   	leave  
   10f47:	c3                   	ret    

00010f48 <memory_copy_uvm_data>:
 * @param to_addr 目标虚拟空间的起始地址
 * @param to_page_dir 目标虚拟空间的页目录表
 * @param from_addr 当前虚拟空间中的源地址
 * @param size 拷贝的大小
 */
int memory_copy_uvm_data(uint32_t to_vaddr, uint32_t to_page_dir, uint32_t from_vaddr, uint32_t size) {
   10f48:	55                   	push   %ebp
   10f49:	89 e5                	mov    %esp,%ebp
   10f4b:	83 ec 18             	sub    $0x18,%esp

  //由于虚拟地址空间是连续的而物理地址空间不一定，所以需要一页一页的单独拷贝
  while (size > 0) {
   10f4e:	eb 6e                	jmp    10fbe <memory_copy_uvm_data+0x76>
    //1.获取to_vaddr对应的物理地址
    uint32_t to_paddr = memory_get_paddr(to_page_dir, to_vaddr);
   10f50:	83 ec 08             	sub    $0x8,%esp
   10f53:	ff 75 08             	push   0x8(%ebp)
   10f56:	ff 75 0c             	push   0xc(%ebp)
   10f59:	e8 97 ff ff ff       	call   10ef5 <memory_get_paddr>
   10f5e:	83 c4 10             	add    $0x10,%esp
   10f61:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (to_paddr == 0) {
   10f64:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10f68:	75 07                	jne    10f71 <memory_copy_uvm_data+0x29>
      return -1;
   10f6a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10f6f:	eb 58                	jmp    10fc9 <memory_copy_uvm_data+0x81>
    }

    //2.获取to_paddr所在的物理页可以写入的空间大小
    //即从to_paddr到该页的末尾的空间大小
    uint32_t offset = (MEM_PAGE_SIZE - 1) & to_paddr;
   10f71:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10f74:	25 ff 0f 00 00       	and    $0xfff,%eax
   10f79:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32_t curr_size = MEM_PAGE_SIZE - offset;
   10f7c:	b8 00 10 00 00       	mov    $0x1000,%eax
   10f81:	2b 45 ec             	sub    -0x14(%ebp),%eax
   10f84:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //3.判断size是否  < curr_size
    if (size < curr_size) { //size < curr_size则在当前物理页拷贝szie个字节即可
   10f87:	8b 45 14             	mov    0x14(%ebp),%eax
   10f8a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
   10f8d:	73 06                	jae    10f95 <memory_copy_uvm_data+0x4d>
      curr_size = size;
   10f8f:	8b 45 14             	mov    0x14(%ebp),%eax
   10f92:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    //4.拷贝内容并更新到下一个需要拷贝的地方
    kernel_memcpy((void*)to_paddr, (void*)from_vaddr, curr_size);
   10f95:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   10f98:	8b 55 10             	mov    0x10(%ebp),%edx
   10f9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10f9e:	83 ec 04             	sub    $0x4,%esp
   10fa1:	51                   	push   %ecx
   10fa2:	52                   	push   %edx
   10fa3:	50                   	push   %eax
   10fa4:	e8 7f 4d 00 00       	call   15d28 <kernel_memcpy>
   10fa9:	83 c4 10             	add    $0x10,%esp
    size -= curr_size;
   10fac:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10faf:	29 45 14             	sub    %eax,0x14(%ebp)
    to_vaddr += curr_size;
   10fb2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10fb5:	01 45 08             	add    %eax,0x8(%ebp)
    from_vaddr += curr_size;
   10fb8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10fbb:	01 45 10             	add    %eax,0x10(%ebp)
  while (size > 0) {
   10fbe:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   10fc2:	75 8c                	jne    10f50 <memory_copy_uvm_data+0x8>

  }
  
  return 0;
   10fc4:	b8 00 00 00 00       	mov    $0x0,%eax

}
   10fc9:	c9                   	leave  
   10fca:	c3                   	ret    

00010fcb <sys_sbrk>:
 * @brief 拓展堆区内存
 * 
 * @param incr 增长指定字节
 * @return char* 
 */
char *sys_sbrk(int incr) {
   10fcb:	55                   	push   %ebp
   10fcc:	89 e5                	mov    %esp,%ebp
   10fce:	83 ec 38             	sub    $0x38,%esp
  ASSERT(incr >= 0); //只处理堆区内存增加的情况
   10fd1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10fd5:	79 1c                	jns    10ff3 <sys_sbrk+0x28>
   10fd7:	68 71 67 01 00       	push   $0x16771
   10fdc:	68 f0 67 01 00       	push   $0x167f0
   10fe1:	68 a9 02 00 00       	push   $0x2a9
   10fe6:	68 70 66 01 00       	push   $0x16670
   10feb:	e8 6e 48 00 00       	call   1585e <pannic>
   10ff0:	83 c4 10             	add    $0x10,%esp
  task_t *task = task_current();
   10ff3:	e8 88 09 00 00       	call   11980 <task_current>
   10ff8:	89 45 f0             	mov    %eax,-0x10(%ebp)
  char * pre_heap_end = (char *)task->heap_end;
   10ffb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10ffe:	8b 40 10             	mov    0x10(%eax),%eax
   11001:	89 45 ec             	mov    %eax,-0x14(%ebp)
  int pre_incr = incr;
   11004:	8b 45 08             	mov    0x8(%ebp),%eax
   11007:	89 45 e8             	mov    %eax,-0x18(%ebp)

  if (incr == 0) {
   1100a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1100e:	75 1b                	jne    1102b <sys_sbrk+0x60>
    log_printf("sbrk(0): end=0x%x\n", pre_heap_end);
   11010:	83 ec 08             	sub    $0x8,%esp
   11013:	ff 75 ec             	push   -0x14(%ebp)
   11016:	68 7b 67 01 00       	push   $0x1677b
   1101b:	e8 54 55 00 00       	call   16574 <log_printf>
   11020:	83 c4 10             	add    $0x10,%esp
    return pre_heap_end;
   11023:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11026:	e9 c4 00 00 00       	jmp    110ef <sys_sbrk+0x124>
  }

  uint32_t start = task->heap_end;  //堆区原始末尾位置
   1102b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1102e:	8b 40 10             	mov    0x10(%eax),%eax
   11031:	89 45 f4             	mov    %eax,-0xc(%ebp)
  uint32_t end = start + incr;  //需要拓展到的末尾位置
   11034:	8b 55 08             	mov    0x8(%ebp),%edx
   11037:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1103a:	01 d0                	add    %edx,%eax
   1103c:	89 45 e4             	mov    %eax,-0x1c(%ebp)

  uint32_t start_offset = start % MEM_PAGE_SIZE;  //获取末尾位置在当前页内的偏移量
   1103f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11042:	25 ff 0f 00 00       	and    $0xfff,%eax
   11047:	89 45 e0             	mov    %eax,-0x20(%ebp)
  if (start_offset) { //先将当前页的剩余空间分配出去
   1104a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   1104e:	74 3b                	je     1108b <sys_sbrk+0xc0>
    if (start_offset + incr <= MEM_PAGE_SIZE) { //当前页剩余内存可供分配
   11050:	8b 55 08             	mov    0x8(%ebp),%edx
   11053:	8b 45 e0             	mov    -0x20(%ebp),%eax
   11056:	01 d0                	add    %edx,%eax
   11058:	3d 00 10 00 00       	cmp    $0x1000,%eax
   1105d:	77 12                	ja     11071 <sys_sbrk+0xa6>
      task->heap_end = end; 
   1105f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11062:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   11065:	89 50 10             	mov    %edx,0x10(%eax)
      incr = 0;
   11068:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
   1106f:	eb 1a                	jmp    1108b <sys_sbrk+0xc0>
    } else {  //当前页剩余内存不够分配
      uint32_t curr_size = MEM_PAGE_SIZE - start_offset;  //获取当前页剩余大小
   11071:	b8 00 10 00 00       	mov    $0x1000,%eax
   11076:	2b 45 e0             	sub    -0x20(%ebp),%eax
   11079:	89 45 dc             	mov    %eax,-0x24(%ebp)
      //将当前页剩余内存全部分配出
      start += curr_size;
   1107c:	8b 45 dc             	mov    -0x24(%ebp),%eax
   1107f:	01 45 f4             	add    %eax,-0xc(%ebp)
      incr -= curr_size;
   11082:	8b 45 08             	mov    0x8(%ebp),%eax
   11085:	2b 45 dc             	sub    -0x24(%ebp),%eax
   11088:	89 45 08             	mov    %eax,0x8(%ebp)
    }
  }

  if (incr) { //还需要继续拓展
   1108b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1108f:	74 3c                	je     110cd <sys_sbrk+0x102>
    uint32_t curr_size = end - start; //还需拓展的大小
   11091:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11094:	2b 45 f4             	sub    -0xc(%ebp),%eax
   11097:	89 45 d8             	mov    %eax,-0x28(%ebp)
    int err = memory_alloc_page_for(start, curr_size, PTE_P | PTE_U |  PTE_W);  //为该部分内存创建映射关系
   1109a:	83 ec 04             	sub    $0x4,%esp
   1109d:	6a 07                	push   $0x7
   1109f:	ff 75 d8             	push   -0x28(%ebp)
   110a2:	ff 75 f4             	push   -0xc(%ebp)
   110a5:	e8 60 fd ff ff       	call   10e0a <memory_alloc_page_for>
   110aa:	83 c4 10             	add    $0x10,%esp
   110ad:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    if (err < 0) {
   110b0:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   110b4:	79 17                	jns    110cd <sys_sbrk+0x102>
      log_printf("sbrk: alloc mem failed.\n");
   110b6:	83 ec 0c             	sub    $0xc,%esp
   110b9:	68 8e 67 01 00       	push   $0x1678e
   110be:	e8 b1 54 00 00       	call   16574 <log_printf>
   110c3:	83 c4 10             	add    $0x10,%esp
      return (char*)-1;
   110c6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   110cb:	eb 22                	jmp    110ef <sys_sbrk+0x124>
    }

  }

  log_printf("sbrk(%d): end=0x%x\n", pre_incr, end);
   110cd:	83 ec 04             	sub    $0x4,%esp
   110d0:	ff 75 e4             	push   -0x1c(%ebp)
   110d3:	ff 75 e8             	push   -0x18(%ebp)
   110d6:	68 a7 67 01 00       	push   $0x167a7
   110db:	e8 94 54 00 00       	call   16574 <log_printf>
   110e0:	83 c4 10             	add    $0x10,%esp
  task->heap_end = end;
   110e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   110e6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   110e9:	89 50 10             	mov    %edx,0x10(%eax)

  return (char*)end;
   110ec:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   110ef:	c9                   	leave  
   110f0:	c3                   	ret    

000110f1 <list_node_init>:
    list_node_t * first;
    list_node_t * last;
    int size;
}list_t;

static inline void list_node_init(list_node_t *node) {
   110f1:	55                   	push   %ebp
   110f2:	89 e5                	mov    %esp,%ebp
   110f4:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   110f7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   110fb:	75 19                	jne    11116 <list_node_init+0x25>
   110fd:	68 fc 67 01 00       	push   $0x167fc
   11102:	68 b4 69 01 00       	push   $0x169b4
   11107:	6a 20                	push   $0x20
   11109:	68 14 68 01 00       	push   $0x16814
   1110e:	e8 4b 47 00 00       	call   1585e <pannic>
   11113:	83 c4 10             	add    $0x10,%esp
    node->pre = node->next = (list_node_t*)0;
   11116:	8b 45 08             	mov    0x8(%ebp),%eax
   11119:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11120:	8b 45 08             	mov    0x8(%ebp),%eax
   11123:	8b 50 04             	mov    0x4(%eax),%edx
   11126:	8b 45 08             	mov    0x8(%ebp),%eax
   11129:	89 10                	mov    %edx,(%eax)
}
   1112b:	90                   	nop
   1112c:	c9                   	leave  
   1112d:	c3                   	ret    

0001112e <list_node_next>:
    ASSERT(node != (list_node_t*)0);

    return node->pre;
}

static inline list_node_t *list_node_next(list_node_t *node) {
   1112e:	55                   	push   %ebp
   1112f:	89 e5                	mov    %esp,%ebp
   11131:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   11134:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11138:	75 19                	jne    11153 <list_node_next+0x25>
   1113a:	68 fc 67 01 00       	push   $0x167fc
   1113f:	68 14 6a 01 00       	push   $0x16a14
   11144:	6a 2b                	push   $0x2b
   11146:	68 14 68 01 00       	push   $0x16814
   1114b:	e8 0e 47 00 00       	call   1585e <pannic>
   11150:	83 c4 10             	add    $0x10,%esp

    return node->next;
   11153:	8b 45 08             	mov    0x8(%ebp),%eax
   11156:	8b 40 04             	mov    0x4(%eax),%eax
}
   11159:	c9                   	leave  
   1115a:	c3                   	ret    

0001115b <list_init>:

static inline void list_init(list_t *list) {
   1115b:	55                   	push   %ebp
   1115c:	89 e5                	mov    %esp,%ebp
   1115e:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11161:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11165:	75 19                	jne    11180 <list_init+0x25>
   11167:	68 52 68 01 00       	push   $0x16852
   1116c:	68 c4 69 01 00       	push   $0x169c4
   11171:	6a 31                	push   $0x31
   11173:	68 14 68 01 00       	push   $0x16814
   11178:	e8 e1 46 00 00       	call   1585e <pannic>
   1117d:	83 c4 10             	add    $0x10,%esp

    list->first = list->last = (list_node_t*)0;
   11180:	8b 45 08             	mov    0x8(%ebp),%eax
   11183:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1118a:	8b 45 08             	mov    0x8(%ebp),%eax
   1118d:	8b 50 04             	mov    0x4(%eax),%edx
   11190:	8b 45 08             	mov    0x8(%ebp),%eax
   11193:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   11195:	8b 45 08             	mov    0x8(%ebp),%eax
   11198:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   1119f:	90                   	nop
   111a0:	c9                   	leave  
   111a1:	c3                   	ret    

000111a2 <list_is_empty>:

static inline int list_is_empty(list_t *list) {
   111a2:	55                   	push   %ebp
   111a3:	89 e5                	mov    %esp,%ebp
   111a5:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   111a8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   111ac:	75 19                	jne    111c7 <list_is_empty+0x25>
   111ae:	68 52 68 01 00       	push   $0x16852
   111b3:	68 24 6a 01 00       	push   $0x16a24
   111b8:	6a 38                	push   $0x38
   111ba:	68 14 68 01 00       	push   $0x16814
   111bf:	e8 9a 46 00 00       	call   1585e <pannic>
   111c4:	83 c4 10             	add    $0x10,%esp

    return list->size == 0;
   111c7:	8b 45 08             	mov    0x8(%ebp),%eax
   111ca:	8b 40 08             	mov    0x8(%eax),%eax
   111cd:	85 c0                	test   %eax,%eax
   111cf:	0f 94 c0             	sete   %al
   111d2:	0f b6 c0             	movzbl %al,%eax
}
   111d5:	c9                   	leave  
   111d6:	c3                   	ret    

000111d7 <list_get_size>:

static inline int list_get_size(list_t *list) {
   111d7:	55                   	push   %ebp
   111d8:	89 e5                	mov    %esp,%ebp
   111da:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   111dd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   111e1:	75 19                	jne    111fc <list_get_size+0x25>
   111e3:	68 52 68 01 00       	push   $0x16852
   111e8:	68 54 6a 01 00       	push   $0x16a54
   111ed:	6a 3e                	push   $0x3e
   111ef:	68 14 68 01 00       	push   $0x16814
   111f4:	e8 65 46 00 00       	call   1585e <pannic>
   111f9:	83 c4 10             	add    $0x10,%esp

    return list->size;
   111fc:	8b 45 08             	mov    0x8(%ebp),%eax
   111ff:	8b 40 08             	mov    0x8(%eax),%eax
}
   11202:	c9                   	leave  
   11203:	c3                   	ret    

00011204 <list_get_first>:

static inline list_node_t *list_get_first(list_t *list) {
   11204:	55                   	push   %ebp
   11205:	89 e5                	mov    %esp,%ebp
   11207:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1120a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1120e:	75 19                	jne    11229 <list_get_first+0x25>
   11210:	68 52 68 01 00       	push   $0x16852
   11215:	68 04 6a 01 00       	push   $0x16a04
   1121a:	6a 44                	push   $0x44
   1121c:	68 14 68 01 00       	push   $0x16814
   11221:	e8 38 46 00 00       	call   1585e <pannic>
   11226:	83 c4 10             	add    $0x10,%esp

    return list->first;
   11229:	8b 45 08             	mov    0x8(%ebp),%eax
   1122c:	8b 00                	mov    (%eax),%eax
}
   1122e:	c9                   	leave  
   1122f:	c3                   	ret    

00011230 <up2>:
static inline uint32_t up2(uint32_t size, uint32_t bound) {
   11230:	55                   	push   %ebp
   11231:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   11233:	8b 55 08             	mov    0x8(%ebp),%edx
   11236:	8b 45 0c             	mov    0xc(%ebp),%eax
   11239:	01 d0                	add    %edx,%eax
   1123b:	8d 50 ff             	lea    -0x1(%eax),%edx
   1123e:	8b 45 0c             	mov    0xc(%ebp),%eax
   11241:	f7 d8                	neg    %eax
   11243:	21 d0                	and    %edx,%eax
}
   11245:	5d                   	pop    %ebp
   11246:	c3                   	ret    

00011247 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   11247:	55                   	push   %ebp
   11248:	89 e5                	mov    %esp,%ebp
   1124a:	f4                   	hlt    
   1124b:	90                   	nop
   1124c:	5d                   	pop    %ebp
   1124d:	c3                   	ret    

0001124e <write_cr3>:
static inline void write_cr3(uint32_t data) {
   1124e:	55                   	push   %ebp
   1124f:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("mov %[v], %%cr3" : : [v] "r"(data));
   11251:	8b 45 08             	mov    0x8(%ebp),%eax
   11254:	0f 22 d8             	mov    %eax,%cr3
}
   11257:	90                   	nop
   11258:	5d                   	pop    %ebp
   11259:	c3                   	ret    

0001125a <far_jump>:
 * @brief  远跳转，当跳转发生在TSS段之间时，cpu将会保存状态到当前TR寄存器指向的TSS段
 *
 * @param selector 选择子
 * @param offset 跳转的偏移量
 */
static inline void far_jump(uint32_t selector, uint32_t offset) {
   1125a:	55                   	push   %ebp
   1125b:	89 e5                	mov    %esp,%ebp
   1125d:	83 ec 10             	sub    $0x10,%esp
  // 传入远跳转需要的参数, 即cs = selector, eip = offset 
  uint32_t addr[] = {offset, selector};  
   11260:	8b 45 0c             	mov    0xc(%ebp),%eax
   11263:	89 45 f8             	mov    %eax,-0x8(%ebp)
   11266:	8b 45 08             	mov    0x8(%ebp),%eax
   11269:	89 45 fc             	mov    %eax,-0x4(%ebp)

  __asm__ __volatile__("ljmpl *(%[a])" : : [a] "r"(addr));
   1126c:	8d 45 f8             	lea    -0x8(%ebp),%eax
   1126f:	ff 28                	ljmp   *(%eax)
}
   11271:	90                   	nop
   11272:	c9                   	leave  
   11273:	c3                   	ret    

00011274 <write_tr>:
 * @brief   写入当前任务的TSS段描述符的选择子到TR寄存器中，告诉cpu当前段的TSS位置
 *          以便在进行任务切换时，将状态保存到该TSS段中
 * 
 * @param tss_selector 准备运行的任务的TSS段的选择子
 */
static inline void write_tr(uint16_t tss_selector) {
   11274:	55                   	push   %ebp
   11275:	89 e5                	mov    %esp,%ebp
   11277:	83 ec 04             	sub    $0x4,%esp
   1127a:	8b 45 08             	mov    0x8(%ebp),%eax
   1127d:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  __asm__ __volatile__("ltr %[v]" : : [v]"r"(tss_selector));
   11281:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   11285:	0f 00 d8             	ltr    %ax
}
   11288:	90                   	nop
   11289:	c9                   	leave  
   1128a:	c3                   	ret    

0001128b <mmu_set_page_dir>:
static inline void mmu_set_page_dir(uint32_t paddr) {
   1128b:	55                   	push   %ebp
   1128c:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   1128e:	ff 75 08             	push   0x8(%ebp)
   11291:	e8 b8 ff ff ff       	call   1124e <write_cr3>
   11296:	83 c4 04             	add    $0x4,%esp
}
   11299:	90                   	nop
   1129a:	c9                   	leave  
   1129b:	c3                   	ret    

0001129c <task_file>:
 * @brief 根据文件描述符从当前任务进程的打开文件表中返回对应的文件结构指针
 * 
 * @param fd 文件描述符
 * @return file_t* 
 */
file_t *task_file(int fd) {
   1129c:	55                   	push   %ebp
   1129d:	89 e5                	mov    %esp,%ebp
   1129f:	83 ec 18             	sub    $0x18,%esp
    file_t *file = (file_t*)0;
   112a2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    if (fd >= 0 && fd < TASK_OFILE_SIZE) {
   112a9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   112ad:	78 18                	js     112c7 <task_file+0x2b>
   112af:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   112b3:	7f 12                	jg     112c7 <task_file+0x2b>
        file = task_current()->file_table[fd];
   112b5:	e8 c6 06 00 00       	call   11980 <task_current>
   112ba:	8b 55 08             	mov    0x8(%ebp),%edx
   112bd:	83 c2 30             	add    $0x30,%edx
   112c0:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
   112c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    return file;
   112c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   112ca:	c9                   	leave  
   112cb:	c3                   	ret    

000112cc <task_alloc_fd>:
 * @brief 将已分配的文件结构指针放入当前进程的打开文件表中，并返回文件描述符
 * 
 * @param file 已从系统file_table中分配的文件结构指针
 * @return int 文件描述符
 */
int task_alloc_fd(file_t *file) {
   112cc:	55                   	push   %ebp
   112cd:	89 e5                	mov    %esp,%ebp
   112cf:	83 ec 18             	sub    $0x18,%esp
    task_t *task = task_current();
   112d2:	e8 a9 06 00 00       	call   11980 <task_current>
   112d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (int i = 0; i < TASK_OFILE_SIZE; ++i) {
   112da:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   112e1:	eb 2f                	jmp    11312 <task_alloc_fd+0x46>
        file_t *p = task->file_table[i];
   112e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   112e6:	8b 55 f4             	mov    -0xc(%ebp),%edx
   112e9:	83 c2 30             	add    $0x30,%edx
   112ec:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
   112f0:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (p == (file_t*)0) {  //打开文件表中的第i项未分配，对其进行分配操作
   112f3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   112f7:	75 15                	jne    1130e <task_alloc_fd+0x42>
            task->file_table[i] = file;
   112f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   112fc:	8b 55 f4             	mov    -0xc(%ebp),%edx
   112ff:	8d 4a 30             	lea    0x30(%edx),%ecx
   11302:	8b 55 08             	mov    0x8(%ebp),%edx
   11305:	89 54 88 04          	mov    %edx,0x4(%eax,%ecx,4)
            return i;
   11309:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1130c:	eb 0f                	jmp    1131d <task_alloc_fd+0x51>
    for (int i = 0; i < TASK_OFILE_SIZE; ++i) {
   1130e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11312:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   11316:	7e cb                	jle    112e3 <task_alloc_fd+0x17>
        }
    }

    return -1;
   11318:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1131d:	c9                   	leave  
   1131e:	c3                   	ret    

0001131f <task_remove_fd>:
/**
 * @brief 从当前进程的打开文件表中移除文件描述符对应的文件结构指针
 * 
 * @param fd 
 */
void task_remove_fd(int fd) {
   1131f:	55                   	push   %ebp
   11320:	89 e5                	mov    %esp,%ebp
   11322:	83 ec 08             	sub    $0x8,%esp

    //清空文件描述符对应的内存资源即可
    if (fd >= 0 && fd < TASK_OFILE_SIZE) {
   11325:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11329:	78 19                	js     11344 <task_remove_fd+0x25>
   1132b:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   1132f:	7f 13                	jg     11344 <task_remove_fd+0x25>
        task_current()->file_table[fd] = (file_t*)0;
   11331:	e8 4a 06 00 00       	call   11980 <task_current>
   11336:	8b 55 08             	mov    0x8(%ebp),%edx
   11339:	83 c2 30             	add    $0x30,%edx
   1133c:	c7 44 90 04 00 00 00 	movl   $0x0,0x4(%eax,%edx,4)
   11343:	00 
    }

}
   11344:	90                   	nop
   11345:	c9                   	leave  
   11346:	c3                   	ret    

00011347 <switch_to_tss>:



static void switch_to_tss(uint16_t tss_selector) {
   11347:	55                   	push   %ebp
   11348:	89 e5                	mov    %esp,%ebp
   1134a:	83 ec 04             	sub    $0x4,%esp
   1134d:	8b 45 08             	mov    0x8(%ebp),%eax
   11350:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    //进行远跳转，让cpu访问该tss段的描述符，cpu将重启到之前运行该tss对应的任务的状态继续运行该任务
    far_jump(tss_selector, 0);
   11354:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   11358:	6a 00                	push   $0x0
   1135a:	50                   	push   %eax
   1135b:	e8 fa fe ff ff       	call   1125a <far_jump>
   11360:	83 c4 08             	add    $0x8,%esp
}
   11363:	90                   	nop
   11364:	c9                   	leave  
   11365:	c3                   	ret    

00011366 <task_switch_from_to>:
 * @brief  将任务从from切换到to
 * 
 * @param from 切换前的任务
 * @param to 切换后的任务
 */
void task_switch_from_to(task_t *from, task_t *to) {
   11366:	55                   	push   %ebp
   11367:	89 e5                	mov    %esp,%ebp
    //跳转到对应的tss段读取并恢复cpu任务状态
    switch_to_tss(to->tss_selector);
   11369:	8b 45 0c             	mov    0xc(%ebp),%eax
   1136c:	8b 80 c0 00 00 00    	mov    0xc0(%eax),%eax
   11372:	0f b7 c0             	movzwl %ax,%eax
   11375:	50                   	push   %eax
   11376:	e8 cc ff ff ff       	call   11347 <switch_to_tss>
   1137b:	83 c4 04             	add    $0x4,%esp
}
   1137e:	90                   	nop
   1137f:	c9                   	leave  
   11380:	c3                   	ret    

00011381 <tss_init>:
 * @param task 需要初始化的任务对象
 * @param entry 任务入口地址
 * @param esp 任务所用的栈顶指针
 * @param flag 任务属性标志位，如特权级
 */
static int tss_init(task_t *task, uint32_t entry, uint32_t esp, uint32_t flag) {
   11381:	55                   	push   %ebp
   11382:	89 e5                	mov    %esp,%ebp
   11384:	83 ec 28             	sub    $0x28,%esp
   //1.将该TSS段绑定到GDT中的某个段描述符
    uint32_t tss_selector = gdt_alloc_desc();
   11387:	e8 a4 12 00 00       	call   12630 <gdt_alloc_desc>
   1138c:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (tss_selector < 0) {
        log_printf("alloc tss failed!\n");
        return -1;
    }
    segment_desc_set(tss_selector, (uint32_t)&task->tss, sizeof(task->tss), 
   1138f:	8b 45 08             	mov    0x8(%ebp),%eax
   11392:	83 c0 58             	add    $0x58,%eax
   11395:	89 c2                	mov    %eax,%edx
   11397:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1139a:	0f b7 c0             	movzwl %ax,%eax
   1139d:	68 89 00 00 00       	push   $0x89
   113a2:	6a 68                	push   $0x68
   113a4:	52                   	push   %edx
   113a5:	50                   	push   %eax
   113a6:	e8 13 11 00 00       	call   124be <segment_desc_set>
   113ab:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_TYPE_TSS);


    //2.将tss段的值置空
    kernel_memset(&task->tss, 0, sizeof(task->tss));
   113ae:	8b 45 08             	mov    0x8(%ebp),%eax
   113b1:	83 c0 58             	add    $0x58,%eax
   113b4:	83 ec 04             	sub    $0x4,%esp
   113b7:	6a 68                	push   $0x68
   113b9:	6a 00                	push   $0x0
   113bb:	50                   	push   %eax
   113bc:	e8 b6 49 00 00       	call   15d77 <kernel_memset>
   113c1:	83 c4 10             	add    $0x10,%esp

    //3.记录tss绑定到的描述符的选择子
    task->tss_selector = tss_selector;
   113c4:	8b 45 08             	mov    0x8(%ebp),%eax
   113c7:	8b 55 ec             	mov    -0x14(%ebp),%edx
   113ca:	89 90 c0 00 00 00    	mov    %edx,0xc0(%eax)


    //4.根据任务的特权级来设置对应选择子的cpl
    uint32_t code_selector, data_selector;
    if (flag & TASK_FLAGS_SYSTEM) { //内核特权级
   113d0:	8b 45 14             	mov    0x14(%ebp),%eax
   113d3:	83 e0 01             	and    $0x1,%eax
   113d6:	85 c0                	test   %eax,%eax
   113d8:	74 10                	je     113ea <tss_init+0x69>
        code_selector = KERNEL_SELECTOR_CS;
   113da:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%ebp)
        data_selector = KERNEL_SELECTOR_DS;
   113e1:	c7 45 f0 10 00 00 00 	movl   $0x10,-0x10(%ebp)
   113e8:	eb 16                	jmp    11400 <tss_init+0x7f>
    } else {    //用户特权级
        //获取任务的代码段选择子和数据段选择子，并初始化其CPL,因为是平台模型，所以基本不涉及到跨段访问，所以不需要RPL
        code_selector = task_manager.app_code_selector | SEG_CPL3;
   113ea:	a1 b0 25 02 00       	mov    0x225b0,%eax
   113ef:	83 c8 03             	or     $0x3,%eax
   113f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
        data_selector = task_manager.app_data_selector | SEG_CPL3;
   113f5:	a1 b4 25 02 00       	mov    0x225b4,%eax
   113fa:	83 c8 03             	or     $0x3,%eax
   113fd:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }


    //5.设置eip，即任务的起始地址
    task->tss.eip = entry;
   11400:	8b 45 08             	mov    0x8(%ebp),%eax
   11403:	8b 55 0c             	mov    0xc(%ebp),%edx
   11406:	89 50 78             	mov    %edx,0x78(%eax)

    //6.根据任务的特权级设置任务所使用的栈空间
    task->tss.esp =  esp;   //特权级为3的栈空间
   11409:	8b 45 08             	mov    0x8(%ebp),%eax
   1140c:	8b 55 10             	mov    0x10(%ebp),%edx
   1140f:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
    uint32_t kernel_stack = memory_alloc_page();  //分配一页作为内核特权级0的栈空间
   11415:	e8 22 fa ff ff       	call   10e3c <memory_alloc_page>
   1141a:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (kernel_stack == 0) //内核栈空间初始化失败
   1141d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11421:	0f 84 9b 00 00 00    	je     114c2 <tss_init+0x141>
        goto tss_init_failed;   
    else task->tss.esp0 =  kernel_stack + MEM_PAGE_SIZE;//特权级为0的栈空间
   11427:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1142a:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edx
   11430:	8b 45 08             	mov    0x8(%ebp),%eax
   11433:	89 50 5c             	mov    %edx,0x5c(%eax)

    //7.平坦模型，初始化栈空间段寄存器
    task->tss.ss =  data_selector;  //特权级为3时使用的栈段
   11436:	8b 45 08             	mov    0x8(%ebp),%eax
   11439:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1143c:	89 90 a8 00 00 00    	mov    %edx,0xa8(%eax)
    task->tss.ss0 = KERNEL_SELECTOR_DS; //特权级为0时使用的栈段，
   11442:	8b 45 08             	mov    0x8(%ebp),%eax
   11445:	c7 40 60 10 00 00 00 	movl   $0x10,0x60(%eax)
                                        //由于平坦模型，其实使用的是同一片空间，只是特权级发生了变化

    //8. 平坦模型，初始其余化段寄存器
    task->tss.es = task->tss.fs = task->tss.gs = task->tss.ds = data_selector;
   1144c:	8b 45 08             	mov    0x8(%ebp),%eax
   1144f:	8b 55 f0             	mov    -0x10(%ebp),%edx
   11452:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
   11458:	8b 45 08             	mov    0x8(%ebp),%eax
   1145b:	8b 90 ac 00 00 00    	mov    0xac(%eax),%edx
   11461:	8b 45 08             	mov    0x8(%ebp),%eax
   11464:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)
   1146a:	8b 45 08             	mov    0x8(%ebp),%eax
   1146d:	8b 90 b4 00 00 00    	mov    0xb4(%eax),%edx
   11473:	8b 45 08             	mov    0x8(%ebp),%eax
   11476:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
   1147c:	8b 45 08             	mov    0x8(%ebp),%eax
   1147f:	8b 90 b0 00 00 00    	mov    0xb0(%eax),%edx
   11485:	8b 45 08             	mov    0x8(%ebp),%eax
   11488:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)

    //9.平坦模型，初始化代码段寄存器
    task->tss.cs = code_selector;
   1148e:	8b 45 08             	mov    0x8(%ebp),%eax
   11491:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11494:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)

    //10.初始化eflags寄存器，使cpu中断保持开启
    task->tss.eflags = EFLAGS_DEFAULT_1 | EFLAGS_IF;
   1149a:	8b 45 08             	mov    0x8(%ebp),%eax
   1149d:	c7 40 7c 02 02 00 00 	movl   $0x202,0x7c(%eax)

    //11.创建当前进程的虚拟页目录表，并设置cr3寄存器
    uint32_t page_dir = memory_creat_uvm();
   114a4:	e8 b7 f4 ff ff       	call   10960 <memory_creat_uvm>
   114a9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (page_dir == 0) 
   114ac:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   114b0:	74 13                	je     114c5 <tss_init+0x144>
        goto tss_init_failed;
    task->tss.cr3 = page_dir;
   114b2:	8b 45 08             	mov    0x8(%ebp),%eax
   114b5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   114b8:	89 50 74             	mov    %edx,0x74(%eax)
    
    return 0;
   114bb:	b8 00 00 00 00       	mov    $0x0,%eax
   114c0:	eb 2f                	jmp    114f1 <tss_init+0x170>
        goto tss_init_failed;   
   114c2:	90                   	nop
   114c3:	eb 01                	jmp    114c6 <tss_init+0x145>
        goto tss_init_failed;
   114c5:	90                   	nop

//tss初始化失败
tss_init_failed:
    gdt_free(tss_selector);  //释放选择子
   114c6:	8b 45 ec             	mov    -0x14(%ebp),%eax
   114c9:	0f b7 c0             	movzwl %ax,%eax
   114cc:	83 ec 0c             	sub    $0xc,%esp
   114cf:	50                   	push   %eax
   114d0:	e8 d0 11 00 00       	call   126a5 <gdt_free>
   114d5:	83 c4 10             	add    $0x10,%esp

    if (kernel_stack) { //内核栈空间分配有效，需要释放
   114d8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   114dc:	74 0e                	je     114ec <tss_init+0x16b>
        memory_free_page(kernel_stack);
   114de:	83 ec 0c             	sub    $0xc,%esp
   114e1:	ff 75 e8             	push   -0x18(%ebp)
   114e4:	e8 73 f9 ff ff       	call   10e5c <memory_free_page>
   114e9:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   114ec:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   114f1:	c9                   	leave  
   114f2:	c3                   	ret    

000114f3 <task_start>:
/**
 * @brief 将任务插入任务链表中并设为就绪态，标志该任务可被调度
 * 
 * @param task 
 */
void task_start(task_t *task) {
   114f3:	55                   	push   %ebp
   114f4:	89 e5                	mov    %esp,%ebp
   114f6:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   114f9:	e8 5d 1b 00 00       	call   1305b <idt_enter_protection>
   114fe:	89 45 f4             	mov    %eax,-0xc(%ebp)
   
    //5.将任务加入任务队列
    list_insert_last(&task_manager.task_list, &task->task_node);
   11501:	8b 45 08             	mov    0x8(%ebp),%eax
   11504:	83 c0 48             	add    $0x48,%eax
   11507:	83 ec 08             	sub    $0x8,%esp
   1150a:	50                   	push   %eax
   1150b:	68 10 20 02 00       	push   $0x22010
   11510:	e8 72 4d 00 00       	call   16287 <list_insert_last>
   11515:	83 c4 10             	add    $0x10,%esp

    //6.将任务设置为就绪态
    task_set_ready(task);
   11518:	83 ec 0c             	sub    $0xc,%esp
   1151b:	ff 75 08             	push   0x8(%ebp)
   1151e:	e8 99 03 00 00       	call   118bc <task_set_ready>
   11523:	83 c4 10             	add    $0x10,%esp

    
    idt_leave_protection(state);//TODO:解锁
   11526:	83 ec 0c             	sub    $0xc,%esp
   11529:	ff 75 f4             	push   -0xc(%ebp)
   1152c:	e8 42 1b 00 00       	call   13073 <idt_leave_protection>
   11531:	83 c4 10             	add    $0x10,%esp
}
   11534:	90                   	nop
   11535:	c9                   	leave  
   11536:	c3                   	ret    

00011537 <task_init>:
 * @param entry 任务的入口地址
 * @param esp 任务指行时所用的栈顶指针
 * @param flag 任务属性标志位，如特权级
 * @return int 
 */
int task_init(task_t *task, const char* name, uint32_t entry, uint32_t esp, uint32_t flag) {
   11537:	55                   	push   %ebp
   11538:	89 e5                	mov    %esp,%ebp
   1153a:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t*)0);
   1153d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11541:	75 1c                	jne    1155f <task_init+0x28>
   11543:	68 65 68 01 00       	push   $0x16865
   11548:	68 a8 69 01 00       	push   $0x169a8
   1154d:	68 d3 00 00 00       	push   $0xd3
   11552:	68 78 68 01 00       	push   $0x16878
   11557:	e8 02 43 00 00       	call   1585e <pannic>
   1155c:	83 c4 10             	add    $0x10,%esp
    //1.初始化任务TSS段
    int err = tss_init(task, entry, esp, flag);
   1155f:	ff 75 18             	push   0x18(%ebp)
   11562:	ff 75 14             	push   0x14(%ebp)
   11565:	ff 75 10             	push   0x10(%ebp)
   11568:	ff 75 08             	push   0x8(%ebp)
   1156b:	e8 11 fe ff ff       	call   11381 <tss_init>
   11570:	83 c4 10             	add    $0x10,%esp
   11573:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (err == -1)
   11576:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
   1157a:	75 08                	jne    11584 <task_init+0x4d>
        return err;
   1157c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1157f:	e9 bf 00 00 00       	jmp    11643 <task_init+0x10c>
    

    //2.初始化任务名称
    kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   11584:	8b 45 08             	mov    0x8(%ebp),%eax
   11587:	83 c0 20             	add    $0x20,%eax
   1158a:	83 ec 04             	sub    $0x4,%esp
   1158d:	6a 20                	push   $0x20
   1158f:	ff 75 0c             	push   0xc(%ebp)
   11592:	50                   	push   %eax
   11593:	e8 89 46 00 00       	call   15c21 <kernel_strncpy>
   11598:	83 c4 10             	add    $0x10,%esp

    //3.初始化任务队列节点及就绪队列节点
    list_node_init(&task->ready_node);
   1159b:	8b 45 08             	mov    0x8(%ebp),%eax
   1159e:	83 c0 40             	add    $0x40,%eax
   115a1:	83 ec 0c             	sub    $0xc,%esp
   115a4:	50                   	push   %eax
   115a5:	e8 47 fb ff ff       	call   110f1 <list_node_init>
   115aa:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->task_node);
   115ad:	8b 45 08             	mov    0x8(%ebp),%eax
   115b0:	83 c0 48             	add    $0x48,%eax
   115b3:	83 ec 0c             	sub    $0xc,%esp
   115b6:	50                   	push   %eax
   115b7:	e8 35 fb ff ff       	call   110f1 <list_node_init>
   115bc:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   115bf:	8b 45 08             	mov    0x8(%ebp),%eax
   115c2:	83 c0 50             	add    $0x50,%eax
   115c5:	83 ec 0c             	sub    $0xc,%esp
   115c8:	50                   	push   %eax
   115c9:	e8 23 fb ff ff       	call   110f1 <list_node_init>
   115ce:	83 c4 10             	add    $0x10,%esp

    //4.初始化最大时间片数与当前拥有时间片数,以及延时时间片数
    task->state = TASK_CREATED;
   115d1:	8b 45 08             	mov    0x8(%ebp),%eax
   115d4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    task->slice_max = task->slice_curr = TASK_TIME_SLICE_DEFAULT;
   115da:	8b 45 08             	mov    0x8(%ebp),%eax
   115dd:	c7 40 18 0a 00 00 00 	movl   $0xa,0x18(%eax)
   115e4:	8b 45 08             	mov    0x8(%ebp),%eax
   115e7:	8b 50 18             	mov    0x18(%eax),%edx
   115ea:	8b 45 08             	mov    0x8(%ebp),%eax
   115ed:	89 50 14             	mov    %edx,0x14(%eax)
    task->sleep = 0;
   115f0:	8b 45 08             	mov    0x8(%ebp),%eax
   115f3:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    task->pid = (uint32_t)task;
   115fa:	8b 55 08             	mov    0x8(%ebp),%edx
   115fd:	8b 45 08             	mov    0x8(%ebp),%eax
   11600:	89 50 08             	mov    %edx,0x8(%eax)
    task->parent = (task_t*)0;
   11603:	8b 45 08             	mov    0x8(%ebp),%eax
   11606:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    task->heap_start = task->heap_end = 0;
   1160d:	8b 45 08             	mov    0x8(%ebp),%eax
   11610:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
   11617:	8b 45 08             	mov    0x8(%ebp),%eax
   1161a:	8b 50 10             	mov    0x10(%eax),%edx
   1161d:	8b 45 08             	mov    0x8(%ebp),%eax
   11620:	89 50 0c             	mov    %edx,0xc(%eax)

    //5.初始化文件表
    kernel_memset(&task->file_table, 0, sizeof(task->file_table));
   11623:	8b 45 08             	mov    0x8(%ebp),%eax
   11626:	05 c4 00 00 00       	add    $0xc4,%eax
   1162b:	83 ec 04             	sub    $0x4,%esp
   1162e:	68 00 02 00 00       	push   $0x200
   11633:	6a 00                	push   $0x0
   11635:	50                   	push   %eax
   11636:	e8 3c 47 00 00       	call   15d77 <kernel_memset>
   1163b:	83 c4 10             	add    $0x10,%esp

    return 1;
   1163e:	b8 01 00 00 00       	mov    $0x1,%eax
}
   11643:	c9                   	leave  
   11644:	c3                   	ret    

00011645 <task_uninit>:
/**
 * @brief 反初始化任务对象，释放对应的资源
 * 
 * @param task 
 */
void task_uninit(task_t *task) {
   11645:	55                   	push   %ebp
   11646:	89 e5                	mov    %esp,%ebp
   11648:	83 ec 08             	sub    $0x8,%esp
    if (task->tss_selector) {   //释放已分配的选择子
   1164b:	8b 45 08             	mov    0x8(%ebp),%eax
   1164e:	8b 80 c0 00 00 00    	mov    0xc0(%eax),%eax
   11654:	85 c0                	test   %eax,%eax
   11656:	74 18                	je     11670 <task_uninit+0x2b>
        gdt_free(task->tss_selector);
   11658:	8b 45 08             	mov    0x8(%ebp),%eax
   1165b:	8b 80 c0 00 00 00    	mov    0xc0(%eax),%eax
   11661:	0f b7 c0             	movzwl %ax,%eax
   11664:	83 ec 0c             	sub    $0xc,%esp
   11667:	50                   	push   %eax
   11668:	e8 38 10 00 00       	call   126a5 <gdt_free>
   1166d:	83 c4 10             	add    $0x10,%esp
    }

    if (task->tss.esp0) {   //释放已分配的内核栈空间
   11670:	8b 45 08             	mov    0x8(%ebp),%eax
   11673:	8b 40 5c             	mov    0x5c(%eax),%eax
   11676:	85 c0                	test   %eax,%eax
   11678:	74 17                	je     11691 <task_uninit+0x4c>
        memory_free_page((uint32_t)(task->tss.esp0 - MEM_PAGE_SIZE));
   1167a:	8b 45 08             	mov    0x8(%ebp),%eax
   1167d:	8b 40 5c             	mov    0x5c(%eax),%eax
   11680:	2d 00 10 00 00       	sub    $0x1000,%eax
   11685:	83 ec 0c             	sub    $0xc,%esp
   11688:	50                   	push   %eax
   11689:	e8 ce f7 ff ff       	call   10e5c <memory_free_page>
   1168e:	83 c4 10             	add    $0x10,%esp
    }

    if (task->tss.cr3) {    //释放为页目录分配的页空间及其映射关系
   11691:	8b 45 08             	mov    0x8(%ebp),%eax
   11694:	8b 40 74             	mov    0x74(%eax),%eax
   11697:	85 c0                	test   %eax,%eax
   11699:	74 12                	je     116ad <task_uninit+0x68>
        memory_destroy_uvm(task->tss.cr3);
   1169b:	8b 45 08             	mov    0x8(%ebp),%eax
   1169e:	8b 40 74             	mov    0x74(%eax),%eax
   116a1:	83 ec 0c             	sub    $0xc,%esp
   116a4:	50                   	push   %eax
   116a5:	e8 c8 f4 ff ff       	call   10b72 <memory_destroy_uvm>
   116aa:	83 c4 10             	add    $0x10,%esp
    }

    kernel_memset(task, 0, sizeof(task_t));
   116ad:	83 ec 04             	sub    $0x4,%esp
   116b0:	68 c4 02 00 00       	push   $0x2c4
   116b5:	6a 00                	push   $0x0
   116b7:	ff 75 08             	push   0x8(%ebp)
   116ba:	e8 b8 46 00 00       	call   15d77 <kernel_memset>
   116bf:	83 c4 10             	add    $0x10,%esp
}
   116c2:	90                   	nop
   116c3:	c9                   	leave  
   116c4:	c3                   	ret    

000116c5 <empty_task>:
static uint32_t empty_task_stack[EMPTY_TASK_STACK_SIZE];
/**
 * @brief  空闲进程，当所有进程都延时运行时，让cpu运行空闲进程
 * 
 */
static void empty_task(void) {
   116c5:	55                   	push   %ebp
   116c6:	89 e5                	mov    %esp,%ebp

    while(1) {
        //停止cpu运行，让cpu等待时间中断
        hlt();
   116c8:	e8 7a fb ff ff       	call   11247 <hlt>
   116cd:	eb f9                	jmp    116c8 <empty_task+0x3>

000116cf <task_manager_init>:

/**
 * @brief  初始化任务管理器
 * 
 */
void task_manager_init(void) {
   116cf:	55                   	push   %ebp
   116d0:	89 e5                	mov    %esp,%ebp
   116d2:	83 ec 18             	sub    $0x18,%esp
    //1.初始化应用程序及所有任务的代码段选择子和数据段选择子，以区分和内核选择子的特权级
    //应用程序运行在 DPL_3 下， 内核运行在DPL_0下，配合分页机制中的us位，0为内核特权级，1为用户特权级
    //就可做到特权级保护
    uint32_t data_selector = gdt_alloc_desc();
   116d5:	e8 56 0f 00 00       	call   12630 <gdt_alloc_desc>
   116da:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t code_selector = gdt_alloc_desc();
   116dd:	e8 4e 0f 00 00       	call   12630 <gdt_alloc_desc>
   116e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    segment_desc_set(data_selector, 0, 0xffffffff, SEG_ATTR_P | SEG_ATTR_DPL_3 | SEG_ATTR_S_NORMAL | SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);
   116e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   116e8:	0f b7 c0             	movzwl %ax,%eax
   116eb:	68 f2 40 00 00       	push   $0x40f2
   116f0:	6a ff                	push   $0xffffffff
   116f2:	6a 00                	push   $0x0
   116f4:	50                   	push   %eax
   116f5:	e8 c4 0d 00 00       	call   124be <segment_desc_set>
   116fa:	83 c4 10             	add    $0x10,%esp
    segment_desc_set(code_selector, 0, 0xffffffff, SEG_ATTR_P | SEG_ATTR_DPL_3 | SEG_ATTR_S_NORMAL | SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);
   116fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11700:	0f b7 c0             	movzwl %ax,%eax
   11703:	68 fa 40 00 00       	push   $0x40fa
   11708:	6a ff                	push   $0xffffffff
   1170a:	6a 00                	push   $0x0
   1170c:	50                   	push   %eax
   1170d:	e8 ac 0d 00 00       	call   124be <segment_desc_set>
   11712:	83 c4 10             	add    $0x10,%esp
    task_manager.app_code_selector = code_selector;
   11715:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11718:	a3 b0 25 02 00       	mov    %eax,0x225b0
    task_manager.app_data_selector = data_selector;
   1171d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11720:	a3 b4 25 02 00       	mov    %eax,0x225b4
    
    //2.初始化所有任务队列
    list_init(&task_manager.ready_list);
   11725:	83 ec 0c             	sub    $0xc,%esp
   11728:	68 04 20 02 00       	push   $0x22004
   1172d:	e8 29 fa ff ff       	call   1115b <list_init>
   11732:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   11735:	83 ec 0c             	sub    $0xc,%esp
   11738:	68 10 20 02 00       	push   $0x22010
   1173d:	e8 19 fa ff ff       	call   1115b <list_init>
   11742:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   11745:	83 ec 0c             	sub    $0xc,%esp
   11748:	68 1c 20 02 00       	push   $0x2201c
   1174d:	e8 09 fa ff ff       	call   1115b <list_init>
   11752:	83 c4 10             	add    $0x10,%esp

    //3.将当前任务置零
    task_manager.curr_task = (task_t*)0;
   11755:	c7 05 00 20 02 00 00 	movl   $0x0,0x22000
   1175c:	00 00 00 

    //4.初始化空闲进程
    task_init(  &task_manager.empty_task,
   1175f:	ba e0 89 03 00       	mov    $0x389e0,%edx
   11764:	b8 c5 16 01 00       	mov    $0x116c5,%eax
   11769:	83 ec 0c             	sub    $0xc,%esp
   1176c:	6a 01                	push   $0x1
   1176e:	52                   	push   %edx
   1176f:	50                   	push   %eax
   11770:	68 ad 68 01 00       	push   $0x168ad
   11775:	68 ec 22 02 00       	push   $0x222ec
   1177a:	e8 b8 fd ff ff       	call   11537 <task_init>
   1177f:	83 c4 20             	add    $0x20,%esp
                 (uint32_t)&empty_task_stack[EMPTY_TASK_STACK_SIZE], TASK_FLAGS_SYSTEM);
                 


    //5.初始化静态任务表,及其互斥锁
    kernel_memset(task_table, 0, sizeof(task_table));
   11782:	83 ec 04             	sub    $0x4,%esp
   11785:	68 00 62 01 00       	push   $0x16200
   1178a:	6a 00                	push   $0x0
   1178c:	68 c0 25 02 00       	push   $0x225c0
   11791:	e8 e1 45 00 00       	call   15d77 <kernel_memset>
   11796:	83 c4 10             	add    $0x10,%esp
    mutex_init(&task_table_lock);
   11799:	83 ec 0c             	sub    $0xc,%esp
   1179c:	68 c0 87 03 00       	push   $0x387c0
   117a1:	e8 9f 39 00 00       	call   15145 <mutex_init>
   117a6:	83 c4 10             	add    $0x10,%esp
  
}
   117a9:	90                   	nop
   117aa:	c9                   	leave  
   117ab:	c3                   	ret    

000117ac <task_first_init>:
 *     页目录表 = 1页
 * ------------------
 * 内核0特权级栈 = 1页
 * ------------------
 */
void task_first_init(void) {
   117ac:	55                   	push   %ebp
   117ad:	89 e5                	mov    %esp,%ebp
   117af:	83 ec 18             	sub    $0x18,%esp
    //1.声明第一个任务的符号
    void first_task_entry(void);

    //2.确定第一个任务进程需要的空间大小
    extern char s_first_task[], e_first_task[];
    uint32_t copy_size = (uint32_t)(e_first_task - s_first_task);   //进程所需空间大小
   117b2:	b8 41 d3 06 00       	mov    $0x6d341,%eax
   117b7:	2d 00 d0 06 00       	sub    $0x6d000,%eax
   117bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t alloc_size = up2(copy_size, MEM_PAGE_SIZE) + 10 * MEM_PAGE_SIZE;   //需要为进程分配的内存大小，按4kb对齐,并多拿五页当作栈空间
   117bf:	68 00 10 00 00       	push   $0x1000
   117c4:	ff 75 f4             	push   -0xc(%ebp)
   117c7:	e8 64 fa ff ff       	call   11230 <up2>
   117cc:	83 c4 08             	add    $0x8,%esp
   117cf:	05 00 a0 00 00       	add    $0xa000,%eax
   117d4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    ASSERT(copy_size < alloc_size);
   117d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   117da:	3b 45 f0             	cmp    -0x10(%ebp),%eax
   117dd:	72 1c                	jb     117fb <task_first_init+0x4f>
   117df:	68 b8 68 01 00       	push   $0x168b8
   117e4:	68 d0 69 01 00       	push   $0x169d0
   117e9:	68 6b 01 00 00       	push   $0x16b
   117ee:	68 78 68 01 00       	push   $0x16878
   117f3:	e8 66 40 00 00       	call   1585e <pannic>
   117f8:	83 c4 10             	add    $0x10,%esp

    uint32_t task_start_addr = (uint32_t)first_task_entry;  //获取第一个任务的入口地址
   117fb:	c7 45 ec 00 00 00 80 	movl   $0x80000000,-0x14(%ebp)

    //3.初始化第一个任务,因为当前为操作系统进程，esp初始值随意赋值都可，
    // 因为当前进程已开启，cpu会在切换的时候保留真实的状态，即真实的esp值
    task_init(&task_manager.first_task, "first task", task_start_addr, task_start_addr + alloc_size, TASK_FLAGS_USER);
   11802:	8b 55 ec             	mov    -0x14(%ebp),%edx
   11805:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11808:	01 d0                	add    %edx,%eax
   1180a:	83 ec 0c             	sub    $0xc,%esp
   1180d:	6a 00                	push   $0x0
   1180f:	50                   	push   %eax
   11810:	ff 75 ec             	push   -0x14(%ebp)
   11813:	68 cf 68 01 00       	push   $0x168cf
   11818:	68 28 20 02 00       	push   $0x22028
   1181d:	e8 15 fd ff ff       	call   11537 <task_init>
   11822:	83 c4 20             	add    $0x20,%esp
    
    //4.初始化进程的起始堆空间 TODO:不对，此处堆区还在低2gb的内核空间中
    task_manager.first_task.heap_start = (uint32_t)e_first_task;    //堆起始地址紧靠程序bss段之后
   11825:	b8 41 d3 06 00       	mov    $0x6d341,%eax
   1182a:	a3 34 20 02 00       	mov    %eax,0x22034
    task_manager.first_task.heap_end = (uint32_t)e_first_task;      //堆大小初始为0
   1182f:	b8 41 d3 06 00       	mov    $0x6d341,%eax
   11834:	a3 38 20 02 00       	mov    %eax,0x22038

    //5.将当前任务的TSS选择子告诉cpu，用来切换任务时保存状态
    write_tr(task_manager.first_task.tss_selector);
   11839:	a1 e8 20 02 00       	mov    0x220e8,%eax
   1183e:	0f b7 c0             	movzwl %ax,%eax
   11841:	83 ec 0c             	sub    $0xc,%esp
   11844:	50                   	push   %eax
   11845:	e8 2a fa ff ff       	call   11274 <write_tr>
   1184a:	83 c4 10             	add    $0x10,%esp

    //6.将当前任务执行第一个任务
    task_manager.curr_task = &task_manager.first_task;
   1184d:	c7 05 00 20 02 00 28 	movl   $0x22028,0x22000
   11854:	20 02 00 

    //7.将当前页表设置为第一个任务的页表
    mmu_set_page_dir(task_manager.first_task.tss.cr3);
   11857:	a1 9c 20 02 00       	mov    0x2209c,%eax
   1185c:	83 ec 0c             	sub    $0xc,%esp
   1185f:	50                   	push   %eax
   11860:	e8 26 fa ff ff       	call   1128b <mmu_set_page_dir>
   11865:	83 c4 10             	add    $0x10,%esp

    //8.将当前任务状态设置为运行态
    task_manager.curr_task->state = TASK_RUNNING;
   11868:	a1 00 20 02 00       	mov    0x22000,%eax
   1186d:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

    //9.进程的各个段还只是在虚拟地址中，所以要为各个段分配物理地址页空间，并进行映射
    memory_alloc_page_for(task_start_addr, alloc_size, PTE_P | PTE_W | PTE_U);
   11873:	83 ec 04             	sub    $0x4,%esp
   11876:	6a 07                	push   $0x7
   11878:	ff 75 f0             	push   -0x10(%ebp)
   1187b:	ff 75 ec             	push   -0x14(%ebp)
   1187e:	e8 87 f5 ff ff       	call   10e0a <memory_alloc_page_for>
   11883:	83 c4 10             	add    $0x10,%esp

    //10.将任务进程各个段从内核四个段之后的紧邻位置，拷贝到已分配好的且与虚拟地址对应的物理地址空间，实现代码隔离
    kernel_memcpy(first_task_entry, s_first_task, alloc_size);
   11886:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11889:	83 ec 04             	sub    $0x4,%esp
   1188c:	50                   	push   %eax
   1188d:	68 00 d0 06 00       	push   $0x6d000
   11892:	68 00 00 00 80       	push   $0x80000000
   11897:	e8 8c 44 00 00       	call   15d28 <kernel_memcpy>
   1189c:	83 c4 10             	add    $0x10,%esp

    //11.将任务设为可被调度
    task_start(&task_manager.first_task);
   1189f:	83 ec 0c             	sub    $0xc,%esp
   118a2:	68 28 20 02 00       	push   $0x22028
   118a7:	e8 47 fc ff ff       	call   114f3 <task_start>
   118ac:	83 c4 10             	add    $0x10,%esp
}
   118af:	90                   	nop
   118b0:	c9                   	leave  
   118b1:	c3                   	ret    

000118b2 <task_first_task>:
/**
 * @brief  获取当前任务管理器的第一个任务
 * 
 * @return task_t* 
 */
task_t *task_first_task(void) {
   118b2:	55                   	push   %ebp
   118b3:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   118b5:	b8 28 20 02 00       	mov    $0x22028,%eax
}
   118ba:	5d                   	pop    %ebp
   118bb:	c3                   	ret    

000118bc <task_set_ready>:
/**
 * @brief  将任务task加入就绪队列
 * 
 * @param task 需要加入就绪队列的任务
 */
void task_set_ready(task_t *task) {
   118bc:	55                   	push   %ebp
   118bd:	89 e5                	mov    %esp,%ebp
   118bf:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   118c2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   118c6:	75 1c                	jne    118e4 <task_set_ready+0x28>
   118c8:	68 65 68 01 00       	push   $0x16865
   118cd:	68 e0 69 01 00       	push   $0x169e0
   118d2:	68 9c 01 00 00       	push   $0x19c
   118d7:	68 78 68 01 00       	push   $0x16878
   118dc:	e8 7d 3f 00 00       	call   1585e <pannic>
   118e1:	83 c4 10             	add    $0x10,%esp
    // if (task == (task_t*)0) return;
    //1.将任务插入到就绪队列的尾部
    list_insert_last(&task_manager.ready_list, &task->ready_node);
   118e4:	8b 45 08             	mov    0x8(%ebp),%eax
   118e7:	83 c0 40             	add    $0x40,%eax
   118ea:	83 ec 08             	sub    $0x8,%esp
   118ed:	50                   	push   %eax
   118ee:	68 04 20 02 00       	push   $0x22004
   118f3:	e8 8f 49 00 00       	call   16287 <list_insert_last>
   118f8:	83 c4 10             	add    $0x10,%esp

    //2.将任务状态设置为就绪态
    task->state = TASK_READY;
   118fb:	8b 45 08             	mov    0x8(%ebp),%eax
   118fe:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
}
   11904:	90                   	nop
   11905:	c9                   	leave  
   11906:	c3                   	ret    

00011907 <task_set_unready>:
/**
 * @brief  将任务task从就绪队列中取下
 * 
 * @param task 
 */
void task_set_unready(task_t *task) {
   11907:	55                   	push   %ebp
   11908:	89 e5                	mov    %esp,%ebp
   1190a:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   1190d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11911:	75 1c                	jne    1192f <task_set_unready+0x28>
   11913:	68 65 68 01 00       	push   $0x16865
   11918:	68 f0 69 01 00       	push   $0x169f0
   1191d:	68 ac 01 00 00       	push   $0x1ac
   11922:	68 78 68 01 00       	push   $0x16878
   11927:	e8 32 3f 00 00       	call   1585e <pannic>
   1192c:	83 c4 10             	add    $0x10,%esp
    // if (task == (task_t*)0) return;
    list_remove(&task_manager.ready_list, &task->ready_node);
   1192f:	8b 45 08             	mov    0x8(%ebp),%eax
   11932:	83 c0 40             	add    $0x40,%eax
   11935:	83 ec 08             	sub    $0x8,%esp
   11938:	50                   	push   %eax
   11939:	68 04 20 02 00       	push   $0x22004
   1193e:	e8 39 4b 00 00       	call   1647c <list_remove>
   11943:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   11946:	8b 45 08             	mov    0x8(%ebp),%eax
   11949:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   1194f:	90                   	nop
   11950:	c9                   	leave  
   11951:	c3                   	ret    

00011952 <task_ready_first>:

/**
 * @brief  获取就绪队列中的第一个任务
 * 
 */
task_t* task_ready_first(void) {
   11952:	55                   	push   %ebp
   11953:	89 e5                	mov    %esp,%ebp
   11955:	83 ec 18             	sub    $0x18,%esp
    list_node_t *ready_node = list_get_first(&task_manager.ready_list);
   11958:	83 ec 0c             	sub    $0xc,%esp
   1195b:	68 04 20 02 00       	push   $0x22004
   11960:	e8 9f f8 ff ff       	call   11204 <list_get_first>
   11965:	83 c4 10             	add    $0x10,%esp
   11968:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    return list_node_parent(ready_node, task_t, ready_node);
   1196b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1196f:	74 08                	je     11979 <task_ready_first+0x27>
   11971:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11974:	83 e8 40             	sub    $0x40,%eax
   11977:	eb 05                	jmp    1197e <task_ready_first+0x2c>
   11979:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1197e:	c9                   	leave  
   1197f:	c3                   	ret    

00011980 <task_current>:
/**
 * @brief  获取当前正在运行的任务
 * 
 * @return task_t* 
 */
task_t *task_current(void) {
   11980:	55                   	push   %ebp
   11981:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   11983:	a1 00 20 02 00       	mov    0x22000,%eax
}
   11988:	5d                   	pop    %ebp
   11989:	c3                   	ret    

0001198a <task_switch>:

/**
 * @brief  任务管理器进行任务切换
 * 
 */
void task_switch(void) {
   1198a:	55                   	push   %ebp
   1198b:	89 e5                	mov    %esp,%ebp
   1198d:	83 ec 18             	sub    $0x18,%esp

    idt_state_t state = idt_enter_protection();//TODO:加锁
   11990:	e8 c6 16 00 00       	call   1305b <idt_enter_protection>
   11995:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //1.获取就绪队列中的第一个任务
    task_t *to = task_ready_first();
   11998:	e8 b5 ff ff ff       	call   11952 <task_ready_first>
   1199d:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.若获取到的任务不是当前任务就进行切换
    if (to != task_manager.curr_task) {
   119a0:	a1 00 20 02 00       	mov    0x22000,%eax
   119a5:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   119a8:	74 37                	je     119e1 <task_switch+0x57>
        //3.获取当前任务
        task_t *from = task_manager.curr_task;
   119aa:	a1 00 20 02 00       	mov    0x22000,%eax
   119af:	89 45 ec             	mov    %eax,-0x14(%ebp)

        //4.目标任务若为空，则所有任务都在延时，让cpu运行空闲任务
        if (to == (task_t*)0) { 
   119b2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   119b6:	75 07                	jne    119bf <task_switch+0x35>
            to = &task_manager.empty_task;
   119b8:	c7 45 f4 ec 22 02 00 	movl   $0x222ec,-0xc(%ebp)
        }
        //5.切换当前任务, 并将当前任务置为运行态
        to->state = TASK_RUNNING;
   119bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
   119c2:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        task_manager.curr_task = to;
   119c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   119cb:	a3 00 20 02 00       	mov    %eax,0x22000
        

        //6.进行任务切换
        task_switch_from_to(from, to);
   119d0:	83 ec 08             	sub    $0x8,%esp
   119d3:	ff 75 f4             	push   -0xc(%ebp)
   119d6:	ff 75 ec             	push   -0x14(%ebp)
   119d9:	e8 88 f9 ff ff       	call   11366 <task_switch_from_to>
   119de:	83 c4 10             	add    $0x10,%esp
    } 

    idt_leave_protection(state);//TODO:解锁
   119e1:	83 ec 0c             	sub    $0xc,%esp
   119e4:	ff 75 f0             	push   -0x10(%ebp)
   119e7:	e8 87 16 00 00       	call   13073 <idt_leave_protection>
   119ec:	83 c4 10             	add    $0x10,%esp
}
   119ef:	90                   	nop
   119f0:	c9                   	leave  
   119f1:	c3                   	ret    

000119f2 <task_slice_end>:
/**
 * @brief  提供给时钟中断使用，每中断一次，当前任务的时间片使用完一次
 *         减少当前任务的时间片数，并判断是否还有剩余时间片，若没有就进行任务切换
 * 
 */
void task_slice_end(void) {
   119f2:	55                   	push   %ebp
   119f3:	89 e5                	mov    %esp,%ebp
   119f5:	83 ec 18             	sub    $0x18,%esp

    //1.遍历当前延时队列，判断是否有可唤醒的任务
    list_node_t *curr_sleep_node = list_get_first(&task_manager.sleep_list);
   119f8:	83 ec 0c             	sub    $0xc,%esp
   119fb:	68 1c 20 02 00       	push   $0x2201c
   11a00:	e8 ff f7 ff ff       	call   11204 <list_get_first>
   11a05:	83 c4 10             	add    $0x10,%esp
   11a08:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.遍历并判断每一个任务执行完当前时间片是否可被唤醒，若可以则唤醒
    while (curr_sleep_node) {
   11a0b:	eb 62                	jmp    11a6f <task_slice_end+0x7d>
        
        list_node_t *next_sleep_node = list_node_next(curr_sleep_node);
   11a0d:	83 ec 0c             	sub    $0xc,%esp
   11a10:	ff 75 f4             	push   -0xc(%ebp)
   11a13:	e8 16 f7 ff ff       	call   1112e <list_node_next>
   11a18:	83 c4 10             	add    $0x10,%esp
   11a1b:	89 45 ec             	mov    %eax,-0x14(%ebp)
        
        task_t *curr_sleep_task = list_node_parent(curr_sleep_node, task_t, ready_node);
   11a1e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11a22:	74 08                	je     11a2c <task_slice_end+0x3a>
   11a24:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11a27:	83 e8 40             	sub    $0x40,%eax
   11a2a:	eb 05                	jmp    11a31 <task_slice_end+0x3f>
   11a2c:	b8 00 00 00 00       	mov    $0x0,%eax
   11a31:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (--curr_sleep_task->sleep == 0) {
   11a34:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11a37:	8b 40 1c             	mov    0x1c(%eax),%eax
   11a3a:	8d 50 ff             	lea    -0x1(%eax),%edx
   11a3d:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11a40:	89 50 1c             	mov    %edx,0x1c(%eax)
   11a43:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11a46:	8b 40 1c             	mov    0x1c(%eax),%eax
   11a49:	85 c0                	test   %eax,%eax
   11a4b:	75 1c                	jne    11a69 <task_slice_end+0x77>
            task_set_wakeup(curr_sleep_task);   //从延时队列中取下
   11a4d:	83 ec 0c             	sub    $0xc,%esp
   11a50:	ff 75 e8             	push   -0x18(%ebp)
   11a53:	e8 01 01 00 00       	call   11b59 <task_set_wakeup>
   11a58:	83 c4 10             	add    $0x10,%esp
            task_set_ready(curr_sleep_task);    //加入就绪队列
   11a5b:	83 ec 0c             	sub    $0xc,%esp
   11a5e:	ff 75 e8             	push   -0x18(%ebp)
   11a61:	e8 56 fe ff ff       	call   118bc <task_set_ready>
   11a66:	83 c4 10             	add    $0x10,%esp
        }

        curr_sleep_node = next_sleep_node;
   11a69:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a6c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr_sleep_node) {
   11a6f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11a73:	75 98                	jne    11a0d <task_slice_end+0x1b>
    }

    // task_switch(); 没有必要立马进行任务切换，当前任务时间片用完后会自动切换
    //3.获取当前任务
    task_t *curr_task = task_current();
   11a75:	e8 06 ff ff ff       	call   11980 <task_current>
   11a7a:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //4.若当前任务为空闲任务，则判断就绪队列是否为空
    if (curr_task == &task_manager.empty_task) {
   11a7d:	81 7d f0 ec 22 02 00 	cmpl   $0x222ec,-0x10(%ebp)
   11a84:	75 23                	jne    11aa9 <task_slice_end+0xb7>
        
        if (list_is_empty(&task_manager.ready_list)) return;
   11a86:	83 ec 0c             	sub    $0xc,%esp
   11a89:	68 04 20 02 00       	push   $0x22004
   11a8e:	e8 0f f7 ff ff       	call   111a2 <list_is_empty>
   11a93:	83 c4 10             	add    $0x10,%esp
   11a96:	85 c0                	test   %eax,%eax
   11a98:	75 60                	jne    11afa <task_slice_end+0x108>
        
        task_manager.empty_task.state = TASK_CREATED;
   11a9a:	c7 05 ec 22 02 00 00 	movl   $0x0,0x222ec
   11aa1:	00 00 00 
        
        task_switch();//就绪队列有任务，则直接切换任务
   11aa4:	e8 e1 fe ff ff       	call   1198a <task_switch>
    }

    //5.若当前任务为普通任务则，减小当前时间片数
    if (curr_task != &task_manager.empty_task && --curr_task->slice_curr == 0) {
   11aa9:	81 7d f0 ec 22 02 00 	cmpl   $0x222ec,-0x10(%ebp)
   11ab0:	74 49                	je     11afb <task_slice_end+0x109>
   11ab2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ab5:	8b 40 18             	mov    0x18(%eax),%eax
   11ab8:	8d 50 ff             	lea    -0x1(%eax),%edx
   11abb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11abe:	89 50 18             	mov    %edx,0x18(%eax)
   11ac1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ac4:	8b 40 18             	mov    0x18(%eax),%eax
   11ac7:	85 c0                	test   %eax,%eax
   11ac9:	75 30                	jne    11afb <task_slice_end+0x109>
        //6.时间片数用完了，重置时间片并进行任务切换
        curr_task->slice_curr = curr_task->slice_max;
   11acb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ace:	8b 50 14             	mov    0x14(%eax),%edx
   11ad1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ad4:	89 50 18             	mov    %edx,0x18(%eax)
        task_set_unready(curr_task);
   11ad7:	83 ec 0c             	sub    $0xc,%esp
   11ada:	ff 75 f0             	push   -0x10(%ebp)
   11add:	e8 25 fe ff ff       	call   11907 <task_set_unready>
   11ae2:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   11ae5:	83 ec 0c             	sub    $0xc,%esp
   11ae8:	ff 75 f0             	push   -0x10(%ebp)
   11aeb:	e8 cc fd ff ff       	call   118bc <task_set_ready>
   11af0:	83 c4 10             	add    $0x10,%esp
        task_switch();
   11af3:	e8 92 fe ff ff       	call   1198a <task_switch>
   11af8:	eb 01                	jmp    11afb <task_slice_end+0x109>
        if (list_is_empty(&task_manager.ready_list)) return;
   11afa:	90                   	nop
    }
}
   11afb:	c9                   	leave  
   11afc:	c3                   	ret    

00011afd <task_set_sleep>:
 * @brief  设置进程延时的时间片数
 * 
 * @param task 需要延时的进程
 * @param slice 延时的时间片数
 */
void task_set_sleep(task_t *task, uint32_t slice) {
   11afd:	55                   	push   %ebp
   11afe:	89 e5                	mov    %esp,%ebp
   11b00:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   11b03:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11b07:	75 1c                	jne    11b25 <task_set_sleep+0x28>
   11b09:	68 65 68 01 00       	push   $0x16865
   11b0e:	68 34 6a 01 00       	push   $0x16a34
   11b13:	68 22 02 00 00       	push   $0x222
   11b18:	68 78 68 01 00       	push   $0x16878
   11b1d:	e8 3c 3d 00 00       	call   1585e <pannic>
   11b22:	83 c4 10             	add    $0x10,%esp
    if (slice == 0) return;
   11b25:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11b29:	74 2b                	je     11b56 <task_set_sleep+0x59>

    task->sleep = slice;
   11b2b:	8b 55 0c             	mov    0xc(%ebp),%edx
   11b2e:	8b 45 08             	mov    0x8(%ebp),%eax
   11b31:	89 50 1c             	mov    %edx,0x1c(%eax)
    task->state = TASK_SLEEP;
   11b34:	8b 45 08             	mov    0x8(%ebp),%eax
   11b37:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    list_insert_last(&task_manager.sleep_list, &task->ready_node);
   11b3d:	8b 45 08             	mov    0x8(%ebp),%eax
   11b40:	83 c0 40             	add    $0x40,%eax
   11b43:	83 ec 08             	sub    $0x8,%esp
   11b46:	50                   	push   %eax
   11b47:	68 1c 20 02 00       	push   $0x2201c
   11b4c:	e8 36 47 00 00       	call   16287 <list_insert_last>
   11b51:	83 c4 10             	add    $0x10,%esp
   11b54:	eb 01                	jmp    11b57 <task_set_sleep+0x5a>
    if (slice == 0) return;
   11b56:	90                   	nop
}
   11b57:	c9                   	leave  
   11b58:	c3                   	ret    

00011b59 <task_set_wakeup>:
/**
 * @brief  唤醒正在延时的进程
 * 
 * @param task 
 */
void task_set_wakeup(task_t *task) {
   11b59:	55                   	push   %ebp
   11b5a:	89 e5                	mov    %esp,%ebp
   11b5c:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   11b5f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11b63:	75 1c                	jne    11b81 <task_set_wakeup+0x28>
   11b65:	68 65 68 01 00       	push   $0x16865
   11b6a:	68 44 6a 01 00       	push   $0x16a44
   11b6f:	68 30 02 00 00       	push   $0x230
   11b74:	68 78 68 01 00       	push   $0x16878
   11b79:	e8 e0 3c 00 00       	call   1585e <pannic>
   11b7e:	83 c4 10             	add    $0x10,%esp
    list_remove(&task_manager.sleep_list, &task->ready_node);
   11b81:	8b 45 08             	mov    0x8(%ebp),%eax
   11b84:	83 c0 40             	add    $0x40,%eax
   11b87:	83 ec 08             	sub    $0x8,%esp
   11b8a:	50                   	push   %eax
   11b8b:	68 1c 20 02 00       	push   $0x2201c
   11b90:	e8 e7 48 00 00       	call   1647c <list_remove>
   11b95:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   11b98:	8b 45 08             	mov    0x8(%ebp),%eax
   11b9b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   11ba1:	90                   	nop
   11ba2:	c9                   	leave  
   11ba3:	c3                   	ret    

00011ba4 <alloc_task>:
/**
 * @brief 从静态任务表中分配一个任务对象
 * 
 * @return task_t* 
 */
static task_t *alloc_task(void) {
   11ba4:	55                   	push   %ebp
   11ba5:	89 e5                	mov    %esp,%ebp
   11ba7:	83 ec 18             	sub    $0x18,%esp
    task_t *task = 0;
   11baa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_lock(&task_table_lock);
   11bb1:	83 ec 0c             	sub    $0xc,%esp
   11bb4:	68 c0 87 03 00       	push   $0x387c0
   11bb9:	e8 d4 35 00 00       	call   15192 <mutex_lock>
   11bbe:	83 c4 10             	add    $0x10,%esp
    
    //遍历静态任务表，取出未被分配的任务对象空间
    for (int i = 0; i < TASK_COUNT; ++i) {
   11bc1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11bc8:	eb 27                	jmp    11bf1 <alloc_task+0x4d>
        task_t *curr = task_table + i;
   11bca:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11bcd:	69 c0 c4 02 00 00    	imul   $0x2c4,%eax,%eax
   11bd3:	05 c0 25 02 00       	add    $0x225c0,%eax
   11bd8:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (curr->pid == 0) {
   11bdb:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11bde:	8b 40 08             	mov    0x8(%eax),%eax
   11be1:	85 c0                	test   %eax,%eax
   11be3:	75 08                	jne    11bed <alloc_task+0x49>
            task = curr;
   11be5:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11be8:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   11beb:	eb 0a                	jmp    11bf7 <alloc_task+0x53>
    for (int i = 0; i < TASK_COUNT; ++i) {
   11bed:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   11bf1:	83 7d f0 7f          	cmpl   $0x7f,-0x10(%ebp)
   11bf5:	7e d3                	jle    11bca <alloc_task+0x26>
        }
    }

    mutex_unlock(&task_table_lock);
   11bf7:	83 ec 0c             	sub    $0xc,%esp
   11bfa:	68 c0 87 03 00       	push   $0x387c0
   11bff:	e8 1f 36 00 00       	call   15223 <mutex_unlock>
   11c04:	83 c4 10             	add    $0x10,%esp

    return task;
   11c07:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   11c0a:	c9                   	leave  
   11c0b:	c3                   	ret    

00011c0c <free_task>:
/**
 * @brief 释放静态任务表的任务对象
 * 
 * @param task 
 */
static void free_task(task_t *task) {
   11c0c:	55                   	push   %ebp
   11c0d:	89 e5                	mov    %esp,%ebp
   11c0f:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&task_table_lock);
   11c12:	83 ec 0c             	sub    $0xc,%esp
   11c15:	68 c0 87 03 00       	push   $0x387c0
   11c1a:	e8 73 35 00 00       	call   15192 <mutex_lock>
   11c1f:	83 c4 10             	add    $0x10,%esp
    
    task->pid = 0;
   11c22:	8b 45 08             	mov    0x8(%ebp),%eax
   11c25:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)

    mutex_unlock(&task_table_lock);
   11c2c:	83 ec 0c             	sub    $0xc,%esp
   11c2f:	68 c0 87 03 00       	push   $0x387c0
   11c34:	e8 ea 35 00 00       	call   15223 <mutex_unlock>
   11c39:	83 c4 10             	add    $0x10,%esp
}
   11c3c:	90                   	nop
   11c3d:	c9                   	leave  
   11c3e:	c3                   	ret    

00011c3f <sys_sleep>:
/**
 * @brief  使进程进入延时状态
 * 
 * @param ms 延时的时间，以ms为单位
 */
void sys_sleep(uint32_t ms) {
   11c3f:	55                   	push   %ebp
   11c40:	89 e5                	mov    %esp,%ebp
   11c42:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection(); //TODO:加锁
   11c45:	e8 11 14 00 00       	call   1305b <idt_enter_protection>
   11c4a:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //1.获取当前任务  
    task_t *curr_task = task_current();
   11c4d:	e8 2e fd ff ff       	call   11980 <task_current>
   11c52:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    //2.将当前任务离开就绪队列
    task_set_unready(curr_task);
   11c55:	83 ec 0c             	sub    $0xc,%esp
   11c58:	ff 75 f0             	push   -0x10(%ebp)
   11c5b:	e8 a7 fc ff ff       	call   11907 <task_set_unready>
   11c60:	83 c4 10             	add    $0x10,%esp

    //3.计算出需要延时的时间片数，对时间片数向上取整，保证进程至少能延时指定时间
    uint32_t slice = (ms + (OS_TICKS_MS - 1)) / OS_TICKS_MS;
   11c63:	8b 45 08             	mov    0x8(%ebp),%eax
   11c66:	83 c0 09             	add    $0x9,%eax
   11c69:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   11c6e:	f7 e2                	mul    %edx
   11c70:	89 d0                	mov    %edx,%eax
   11c72:	c1 e8 03             	shr    $0x3,%eax
   11c75:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //4.将当前任务放入延时队列，并设置延时时间片数
    task_set_sleep(curr_task, slice);
   11c78:	83 ec 08             	sub    $0x8,%esp
   11c7b:	ff 75 ec             	push   -0x14(%ebp)
   11c7e:	ff 75 f0             	push   -0x10(%ebp)
   11c81:	e8 77 fe ff ff       	call   11afd <task_set_sleep>
   11c86:	83 c4 10             	add    $0x10,%esp

    //5.切换任务
    task_switch();
   11c89:	e8 fc fc ff ff       	call   1198a <task_switch>

    idt_leave_protection(state); //TODO:解锁
   11c8e:	83 ec 0c             	sub    $0xc,%esp
   11c91:	ff 75 f4             	push   -0xc(%ebp)
   11c94:	e8 da 13 00 00       	call   13073 <idt_leave_protection>
   11c99:	83 c4 10             	add    $0x10,%esp
}
   11c9c:	90                   	nop
   11c9d:	c9                   	leave  
   11c9e:	c3                   	ret    

00011c9f <sys_getpid>:
/**
 * @brief 获取任务pid
 * 
 * @return int pid
 */
int sys_getpid(void) {
   11c9f:	55                   	push   %ebp
   11ca0:	89 e5                	mov    %esp,%ebp
    return task_current()->pid;
   11ca2:	e8 d9 fc ff ff       	call   11980 <task_current>
   11ca7:	8b 40 08             	mov    0x8(%eax),%eax
}
   11caa:	5d                   	pop    %ebp
   11cab:	c3                   	ret    

00011cac <sys_fork>:
/**
 * @brief 创建子进程
 * 
 * @return int 子进程的pid
 */
int sys_fork(void) {
   11cac:	55                   	push   %ebp
   11cad:	89 e5                	mov    %esp,%ebp
   11caf:	83 ec 28             	sub    $0x28,%esp

    //1.获取当前进程为fork进程的父进程
    task_t *parent_task = task_current();
   11cb2:	e8 c9 fc ff ff       	call   11980 <task_current>
   11cb7:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.分配子进程控制块
    task_t *child_task = alloc_task();
   11cba:	e8 e5 fe ff ff       	call   11ba4 <alloc_task>
   11cbf:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (child_task == (task_t*)0)
   11cc2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11cc6:	0f 84 2b 01 00 00    	je     11df7 <sys_fork+0x14b>
        goto fork_failed;

    //3.获取系统调用的栈帧,因为每次通过调用门进入内核栈中都只会一帧该结构体的数据，
    //所以用最高地址减去大小即可获得该帧的起始地址
    syscall_frame_t *frame = (syscall_frame_t*)(parent_task->tss.esp0 - sizeof(syscall_frame_t));
   11ccc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11ccf:	8b 40 5c             	mov    0x5c(%eax),%eax
   11cd2:	83 e8 58             	sub    $0x58,%eax
   11cd5:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //4.初始子进程控制块，直接用父进程进入调用门的下一条指令地址作为子进程的入口地址
    int err = task_init(child_task, parent_task->name, frame->eip, frame->esp + sizeof(uint32_t)*SYSCALL_PARAM_COUNT, TASK_FLAGS_USER);
   11cd8:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11cdb:	8b 40 50             	mov    0x50(%eax),%eax
   11cde:	8d 48 14             	lea    0x14(%eax),%ecx
   11ce1:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11ce4:	8b 40 34             	mov    0x34(%eax),%eax
   11ce7:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11cea:	83 c2 20             	add    $0x20,%edx
   11ced:	83 ec 0c             	sub    $0xc,%esp
   11cf0:	6a 00                	push   $0x0
   11cf2:	51                   	push   %ecx
   11cf3:	50                   	push   %eax
   11cf4:	52                   	push   %edx
   11cf5:	ff 75 f0             	push   -0x10(%ebp)
   11cf8:	e8 3a f8 ff ff       	call   11537 <task_init>
   11cfd:	83 c4 20             	add    $0x20,%esp
   11d00:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (err < 0)
   11d03:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11d07:	0f 88 ed 00 00 00    	js     11dfa <sys_fork+0x14e>
        goto fork_failed;

    //5.恢复到父进程的上下文环境
    tss_t *tss = &(child_task->tss);
   11d0d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11d10:	83 c0 58             	add    $0x58,%eax
   11d13:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    //子进程执行的第一条指令就是从eax中取出系统用的返回值，即进程id，子进程固定获取0
    tss->eax = 0;   
   11d16:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11d19:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    tss->ebx = frame->ebx;
   11d20:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11d23:	8b 50 24             	mov    0x24(%eax),%edx
   11d26:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11d29:	89 50 34             	mov    %edx,0x34(%eax)
    tss->ecx = frame->ecx;
   11d2c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11d2f:	8b 50 2c             	mov    0x2c(%eax),%edx
   11d32:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11d35:	89 50 2c             	mov    %edx,0x2c(%eax)
    tss->edx = frame->edx;
   11d38:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11d3b:	8b 50 28             	mov    0x28(%eax),%edx
   11d3e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11d41:	89 50 30             	mov    %edx,0x30(%eax)
    tss->edi = frame->edi;
   11d44:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11d47:	8b 50 14             	mov    0x14(%eax),%edx
   11d4a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11d4d:	89 50 44             	mov    %edx,0x44(%eax)
    tss->esi = frame->esi;
   11d50:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11d53:	8b 50 18             	mov    0x18(%eax),%edx
   11d56:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11d59:	89 50 40             	mov    %edx,0x40(%eax)
    tss->eflags = frame->eflags;
   11d5c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11d5f:	8b 10                	mov    (%eax),%edx
   11d61:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11d64:	89 50 24             	mov    %edx,0x24(%eax)
    tss->ebp = frame->ebp;
   11d67:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11d6a:	8b 50 1c             	mov    0x1c(%eax),%edx
   11d6d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11d70:	89 50 3c             	mov    %edx,0x3c(%eax)

    //复用父进程的段寄存器
    tss->cs = frame->cs;
   11d73:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11d76:	8b 50 38             	mov    0x38(%eax),%edx
   11d79:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11d7c:	89 50 4c             	mov    %edx,0x4c(%eax)
    tss->ds = frame->ds;
   11d7f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11d82:	8b 50 10             	mov    0x10(%eax),%edx
   11d85:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11d88:	89 50 54             	mov    %edx,0x54(%eax)
    tss->es = frame->es;
   11d8b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11d8e:	8b 50 0c             	mov    0xc(%eax),%edx
   11d91:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11d94:	89 50 48             	mov    %edx,0x48(%eax)
    tss->fs = frame->fs;
   11d97:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11d9a:	8b 50 08             	mov    0x8(%eax),%edx
   11d9d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11da0:	89 50 58             	mov    %edx,0x58(%eax)
    tss->gs = frame->gs;
   11da3:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11da6:	8b 50 04             	mov    0x4(%eax),%edx
   11da9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11dac:	89 50 5c             	mov    %edx,0x5c(%eax)
    tss->ss = frame->ss;
   11daf:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11db2:	8b 50 54             	mov    0x54(%eax),%edx
   11db5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11db8:	89 50 50             	mov    %edx,0x50(%eax)

    //记录父进程地址
    child_task->parent = parent_task;
   11dbb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11dbe:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11dc1:	89 50 04             	mov    %edx,0x4(%eax)

    //7.拷贝进程虚拟页目录表和页表，即拷贝其映射关系
    if (memory_copy_uvm(tss->cr3, parent_task->tss.cr3) < 0)
   11dc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11dc7:	8b 50 74             	mov    0x74(%eax),%edx
   11dca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11dcd:	8b 40 1c             	mov    0x1c(%eax),%eax
   11dd0:	83 ec 08             	sub    $0x8,%esp
   11dd3:	52                   	push   %edx
   11dd4:	50                   	push   %eax
   11dd5:	e8 0b ec ff ff       	call   109e5 <memory_copy_uvm>
   11dda:	83 c4 10             	add    $0x10,%esp
   11ddd:	85 c0                	test   %eax,%eax
   11ddf:	78 1c                	js     11dfd <sys_fork+0x151>
        goto fork_failed;

    //8.子进程控制块初始化完毕，设为可被调度态
    task_start(child_task);
   11de1:	83 ec 0c             	sub    $0xc,%esp
   11de4:	ff 75 f0             	push   -0x10(%ebp)
   11de7:	e8 07 f7 ff ff       	call   114f3 <task_start>
   11dec:	83 c4 10             	add    $0x10,%esp
    //反回子进程id
    return child_task->pid;
   11def:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11df2:	8b 40 08             	mov    0x8(%eax),%eax
   11df5:	eb 2e                	jmp    11e25 <sys_fork+0x179>
        goto fork_failed;
   11df7:	90                   	nop
   11df8:	eb 04                	jmp    11dfe <sys_fork+0x152>
        goto fork_failed;
   11dfa:	90                   	nop
   11dfb:	eb 01                	jmp    11dfe <sys_fork+0x152>
        goto fork_failed;
   11dfd:	90                   	nop

//fork失败，清理资源
fork_failed:
    if (child_task) {   //初始化失败，释放对应资源
   11dfe:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11e02:	74 1c                	je     11e20 <sys_fork+0x174>
        task_uninit(child_task);
   11e04:	83 ec 0c             	sub    $0xc,%esp
   11e07:	ff 75 f0             	push   -0x10(%ebp)
   11e0a:	e8 36 f8 ff ff       	call   11645 <task_uninit>
   11e0f:	83 c4 10             	add    $0x10,%esp
        free_task(child_task);
   11e12:	83 ec 0c             	sub    $0xc,%esp
   11e15:	ff 75 f0             	push   -0x10(%ebp)
   11e18:	e8 ef fd ff ff       	call   11c0c <free_task>
   11e1d:	83 c4 10             	add    $0x10,%esp
    }

    return -1;
   11e20:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11e25:	c9                   	leave  
   11e26:	c3                   	ret    

00011e27 <sys_yield>:
/**
 * @brief  使当前正在运行的任务主动让出cpu
 * 
 * @return int 
 */
int sys_yield(void) {
   11e27:	55                   	push   %ebp
   11e28:	89 e5                	mov    %esp,%ebp
   11e2a:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   11e2d:	e8 29 12 00 00       	call   1305b <idt_enter_protection>
   11e32:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    //1.判断当前就绪队列中是否有多个任务
    if (list_get_size(&task_manager.ready_list) > 1) {
   11e35:	83 ec 0c             	sub    $0xc,%esp
   11e38:	68 04 20 02 00       	push   $0x22004
   11e3d:	e8 95 f3 ff ff       	call   111d7 <list_get_size>
   11e42:	83 c4 10             	add    $0x10,%esp
   11e45:	83 f8 01             	cmp    $0x1,%eax
   11e48:	7e 29                	jle    11e73 <sys_yield+0x4c>
        //2.获取当前任务  
        task_t *curr_task = task_current();
   11e4a:	e8 31 fb ff ff       	call   11980 <task_current>
   11e4f:	89 45 f0             	mov    %eax,-0x10(%ebp)
        
        //3.将当前任务从就绪队列中取下
        task_set_unready(curr_task);
   11e52:	83 ec 0c             	sub    $0xc,%esp
   11e55:	ff 75 f0             	push   -0x10(%ebp)
   11e58:	e8 aa fa ff ff       	call   11907 <task_set_unready>
   11e5d:	83 c4 10             	add    $0x10,%esp

        //4.将当前任务重新加入到就绪队列的队尾
        task_set_ready(curr_task);
   11e60:	83 ec 0c             	sub    $0xc,%esp
   11e63:	ff 75 f0             	push   -0x10(%ebp)
   11e66:	e8 51 fa ff ff       	call   118bc <task_set_ready>
   11e6b:	83 c4 10             	add    $0x10,%esp

        //5.任务管理器运行下一个任务，从而释放cpu使用权
        task_switch();
   11e6e:	e8 17 fb ff ff       	call   1198a <task_switch>
    }
    
    idt_leave_protection(state);//TODO:解锁
   11e73:	83 ec 0c             	sub    $0xc,%esp
   11e76:	ff 75 f4             	push   -0xc(%ebp)
   11e79:	e8 f5 11 00 00       	call   13073 <idt_leave_protection>
   11e7e:	83 c4 10             	add    $0x10,%esp
    return 0;
   11e81:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11e86:	c9                   	leave  
   11e87:	c3                   	ret    

00011e88 <load_phdr>:
 * @param file elf文件描述符
 * @param elf_phdr  程序段表项
 * @param page_dir 需要加载到的目标空间的页目录表地址
 * @return int 
 */
static int load_phdr(int file, Elf32_Phdr *elf_phdr, uint32_t page_dir) {
   11e88:	55                   	push   %ebp
   11e89:	89 e5                	mov    %esp,%ebp
   11e8b:	83 ec 28             	sub    $0x28,%esp
    //获取该段的权限
    uint32_t privilege = PTE_P | PTE_U;
   11e8e:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
    if (elf_phdr->p_flags & PT_W) { //该段具有写权限
   11e95:	8b 45 0c             	mov    0xc(%ebp),%eax
   11e98:	8b 40 18             	mov    0x18(%eax),%eax
   11e9b:	83 e0 02             	and    $0x2,%eax
   11e9e:	85 c0                	test   %eax,%eax
   11ea0:	74 04                	je     11ea6 <load_phdr+0x1e>
        privilege |= PTE_W;
   11ea2:	83 4d f4 02          	orl    $0x2,-0xc(%ebp)
    }

    //为该段分配页空间并创建映射关系
    int err = memory_alloc_for_page_dir(page_dir, elf_phdr->p_vaddr, elf_phdr->p_memsz, privilege);
   11ea6:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ea9:	8b 50 14             	mov    0x14(%eax),%edx
   11eac:	8b 45 0c             	mov    0xc(%ebp),%eax
   11eaf:	8b 40 08             	mov    0x8(%eax),%eax
   11eb2:	ff 75 f4             	push   -0xc(%ebp)
   11eb5:	52                   	push   %edx
   11eb6:	50                   	push   %eax
   11eb7:	ff 75 10             	push   0x10(%ebp)
   11eba:	e8 93 ee ff ff       	call   10d52 <memory_alloc_for_page_dir>
   11ebf:	83 c4 10             	add    $0x10,%esp
   11ec2:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (err < 0) {
   11ec5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11ec9:	79 1a                	jns    11ee5 <load_phdr+0x5d>
        log_printf("no memory\n");
   11ecb:	83 ec 0c             	sub    $0xc,%esp
   11ece:	68 da 68 01 00       	push   $0x168da
   11ed3:	e8 9c 46 00 00       	call   16574 <log_printf>
   11ed8:	83 c4 10             	add    $0x10,%esp
        return -1;
   11edb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11ee0:	e9 b5 00 00 00       	jmp    11f9a <load_phdr+0x112>
    }

    //使文件的读取位置偏移到该程序段的起始位置
    if (sys_lseek(file, elf_phdr->p_offset, 0) < 0) {
   11ee5:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ee8:	8b 40 04             	mov    0x4(%eax),%eax
   11eeb:	83 ec 04             	sub    $0x4,%esp
   11eee:	6a 00                	push   $0x0
   11ef0:	50                   	push   %eax
   11ef1:	ff 75 08             	push   0x8(%ebp)
   11ef4:	e8 f0 2f 00 00       	call   14ee9 <sys_lseek>
   11ef9:	83 c4 10             	add    $0x10,%esp
   11efc:	85 c0                	test   %eax,%eax
   11efe:	79 1a                	jns    11f1a <load_phdr+0x92>
        log_printf("lseek file failed\n");
   11f00:	83 ec 0c             	sub    $0xc,%esp
   11f03:	68 e5 68 01 00       	push   $0x168e5
   11f08:	e8 67 46 00 00       	call   16574 <log_printf>
   11f0d:	83 c4 10             	add    $0x10,%esp
        return -1;
   11f10:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11f15:	e9 80 00 00 00       	jmp    11f9a <load_phdr+0x112>
    }

    //获取该程序段的起始虚拟地址和段在文件中的大小
    uint32_t vaddr = elf_phdr->p_vaddr;
   11f1a:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f1d:	8b 40 08             	mov    0x8(%eax),%eax
   11f20:	89 45 f0             	mov    %eax,-0x10(%ebp)
    uint32_t size = elf_phdr->p_filesz;
   11f23:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f26:	8b 40 10             	mov    0x10(%eax),%eax
   11f29:	89 45 ec             	mov    %eax,-0x14(%ebp)

    while (size > 0) {  //按页读取并拷贝
   11f2c:	eb 61                	jmp    11f8f <load_phdr+0x107>
        //获取需要拷贝的空间大小
        int curr_size = (size > MEM_PAGE_SIZE) ? MEM_PAGE_SIZE : size;
   11f2e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11f31:	ba 00 10 00 00       	mov    $0x1000,%edx
   11f36:	39 d0                	cmp    %edx,%eax
   11f38:	0f 47 c2             	cmova  %edx,%eax
   11f3b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        //获取vaddr在page_dir中关联的物理页的物理地址
        uint32_t paddr = memory_get_paddr(page_dir, vaddr);
   11f3e:	83 ec 08             	sub    $0x8,%esp
   11f41:	ff 75 f0             	push   -0x10(%ebp)
   11f44:	ff 75 10             	push   0x10(%ebp)
   11f47:	e8 a9 ef ff ff       	call   10ef5 <memory_get_paddr>
   11f4c:	83 c4 10             	add    $0x10,%esp
   11f4f:	89 45 e0             	mov    %eax,-0x20(%ebp)

        //拷贝curr_size大小的内容到paddr对应的页中
        if (sys_read(file, (char*)paddr, curr_size) < curr_size) {
   11f52:	8b 45 e0             	mov    -0x20(%ebp),%eax
   11f55:	83 ec 04             	sub    $0x4,%esp
   11f58:	ff 75 e4             	push   -0x1c(%ebp)
   11f5b:	50                   	push   %eax
   11f5c:	ff 75 08             	push   0x8(%ebp)
   11f5f:	e8 b9 2e 00 00       	call   14e1d <sys_read>
   11f64:	83 c4 10             	add    $0x10,%esp
   11f67:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
   11f6a:	7e 17                	jle    11f83 <load_phdr+0xfb>
            log_printf("read file failed\n");
   11f6c:	83 ec 0c             	sub    $0xc,%esp
   11f6f:	68 f8 68 01 00       	push   $0x168f8
   11f74:	e8 fb 45 00 00       	call   16574 <log_printf>
   11f79:	83 c4 10             	add    $0x10,%esp
            return -1;
   11f7c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11f81:	eb 17                	jmp    11f9a <load_phdr+0x112>
        }

        size -= curr_size;
   11f83:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11f86:	29 45 ec             	sub    %eax,-0x14(%ebp)
        vaddr += curr_size;
   11f89:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11f8c:	01 45 f0             	add    %eax,-0x10(%ebp)
    while (size > 0) {  //按页读取并拷贝
   11f8f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11f93:	75 99                	jne    11f2e <load_phdr+0xa6>
    }

    return 0;
   11f95:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11f9a:	c9                   	leave  
   11f9b:	c3                   	ret    

00011f9c <load_elf_file>:
 * @param task 
 * @param name 
 * @param page_dir 
 * @return uint32_t 
 */
static uint32_t load_elf_file(task_t *task, const char * name, uint32_t page_dir) {
   11f9c:	55                   	push   %ebp
   11f9d:	89 e5                	mov    %esp,%ebp
   11f9f:	83 ec 78             	sub    $0x78,%esp
    //1.定义elf文件头对象,和程序段表项对象
    Elf32_Ehdr elf_hdr;
    Elf32_Phdr elf_phdr;

    //2.打开文件
    int file = sys_open(name, 0);
   11fa2:	83 ec 08             	sub    $0x8,%esp
   11fa5:	6a 00                	push   $0x0
   11fa7:	ff 75 0c             	push   0xc(%ebp)
   11faa:	e8 09 2d 00 00       	call   14cb8 <sys_open>
   11faf:	83 c4 10             	add    $0x10,%esp
   11fb2:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (file < 0) {
   11fb5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11fb9:	79 18                	jns    11fd3 <load_elf_file+0x37>
        log_printf("open failed %s\n", name);
   11fbb:	83 ec 08             	sub    $0x8,%esp
   11fbe:	ff 75 0c             	push   0xc(%ebp)
   11fc1:	68 0a 69 01 00       	push   $0x1690a
   11fc6:	e8 a9 45 00 00       	call   16574 <log_printf>
   11fcb:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11fce:	e9 c1 01 00 00       	jmp    12194 <load_elf_file+0x1f8>
    }

    //3.读取elf文件的elf头部分
    int cnt = sys_read(file, (char*)&elf_hdr, sizeof(Elf32_Ehdr));
   11fd3:	83 ec 04             	sub    $0x4,%esp
   11fd6:	6a 34                	push   $0x34
   11fd8:	8d 45 b0             	lea    -0x50(%ebp),%eax
   11fdb:	50                   	push   %eax
   11fdc:	ff 75 ec             	push   -0x14(%ebp)
   11fdf:	e8 39 2e 00 00       	call   14e1d <sys_read>
   11fe4:	83 c4 10             	add    $0x10,%esp
   11fe7:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (cnt < sizeof(Elf32_Ehdr)) {
   11fea:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11fed:	83 f8 33             	cmp    $0x33,%eax
   11ff0:	77 18                	ja     1200a <load_elf_file+0x6e>
        log_printf("elf hdr too small. size=%d\n", cnt);
   11ff2:	83 ec 08             	sub    $0x8,%esp
   11ff5:	ff 75 e8             	push   -0x18(%ebp)
   11ff8:	68 1a 69 01 00       	push   $0x1691a
   11ffd:	e8 72 45 00 00       	call   16574 <log_printf>
   12002:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   12005:	e9 8a 01 00 00       	jmp    12194 <load_elf_file+0x1f8>
    }

    //4.判断是否为ELF文件
    if (elf_hdr.e_ident[0] != 0x7F || elf_hdr.e_ident[1] != 'E' 
   1200a:	0f b6 45 b0          	movzbl -0x50(%ebp),%eax
   1200e:	3c 7f                	cmp    $0x7f,%al
   12010:	75 18                	jne    1202a <load_elf_file+0x8e>
   12012:	0f b6 45 b1          	movzbl -0x4f(%ebp),%eax
   12016:	3c 45                	cmp    $0x45,%al
   12018:	75 10                	jne    1202a <load_elf_file+0x8e>
        || elf_hdr.e_ident[2] != 'L' || elf_hdr.e_ident[3] != 'F') {
   1201a:	0f b6 45 b2          	movzbl -0x4e(%ebp),%eax
   1201e:	3c 4c                	cmp    $0x4c,%al
   12020:	75 08                	jne    1202a <load_elf_file+0x8e>
   12022:	0f b6 45 b3          	movzbl -0x4d(%ebp),%eax
   12026:	3c 46                	cmp    $0x46,%al
   12028:	74 15                	je     1203f <load_elf_file+0xa3>
            log_printf("check elf ident failed.\n");
   1202a:	83 ec 0c             	sub    $0xc,%esp
   1202d:	68 36 69 01 00       	push   $0x16936
   12032:	e8 3d 45 00 00       	call   16574 <log_printf>
   12037:	83 c4 10             	add    $0x10,%esp
            goto load_failed;
   1203a:	e9 55 01 00 00       	jmp    12194 <load_elf_file+0x1f8>
    }

    
    //5.必须是可执行文件和针对386处理器的类型，且有入口
    if ((elf_hdr.e_type != ET_EXEC) || (elf_hdr.e_machine != EM_386) || (elf_hdr.e_entry == 0)) {
   1203f:	0f b7 45 c0          	movzwl -0x40(%ebp),%eax
   12043:	66 83 f8 02          	cmp    $0x2,%ax
   12047:	75 11                	jne    1205a <load_elf_file+0xbe>
   12049:	0f b7 45 c2          	movzwl -0x3e(%ebp),%eax
   1204d:	66 83 f8 03          	cmp    $0x3,%ax
   12051:	75 07                	jne    1205a <load_elf_file+0xbe>
   12053:	8b 45 c8             	mov    -0x38(%ebp),%eax
   12056:	85 c0                	test   %eax,%eax
   12058:	75 15                	jne    1206f <load_elf_file+0xd3>
        log_printf("check elf type or entry failed.\n");
   1205a:	83 ec 0c             	sub    $0xc,%esp
   1205d:	68 50 69 01 00       	push   $0x16950
   12062:	e8 0d 45 00 00       	call   16574 <log_printf>
   12067:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   1206a:	e9 25 01 00 00       	jmp    12194 <load_elf_file+0x1f8>
    }

    //6.必须有程序头部
    if ((elf_hdr.e_phentsize == 0) || (elf_hdr.e_phoff == 0)) {
   1206f:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
   12073:	66 85 c0             	test   %ax,%ax
   12076:	74 07                	je     1207f <load_elf_file+0xe3>
   12078:	8b 45 cc             	mov    -0x34(%ebp),%eax
   1207b:	85 c0                	test   %eax,%eax
   1207d:	75 15                	jne    12094 <load_elf_file+0xf8>
        log_printf("none programe header\n");
   1207f:	83 ec 0c             	sub    $0xc,%esp
   12082:	68 71 69 01 00       	push   $0x16971
   12087:	e8 e8 44 00 00       	call   16574 <log_printf>
   1208c:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   1208f:	e9 00 01 00 00       	jmp    12194 <load_elf_file+0x1f8>
    }

    //7.遍历elf文件的程序段，加载可加载段到内存中对应位置
    uint32_t e_phoff = elf_hdr.e_phoff; //获取程序段表的偏移地址
   12094:	8b 45 cc             	mov    -0x34(%ebp),%eax
   12097:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (int i = 0; i < elf_hdr.e_phnum; ++i, e_phoff += elf_hdr.e_phentsize) {
   1209a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   120a1:	e9 cb 00 00 00       	jmp    12171 <load_elf_file+0x1d5>
        if (sys_lseek(file, e_phoff, 0) < 0) {
   120a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   120a9:	83 ec 04             	sub    $0x4,%esp
   120ac:	6a 00                	push   $0x0
   120ae:	50                   	push   %eax
   120af:	ff 75 ec             	push   -0x14(%ebp)
   120b2:	e8 32 2e 00 00       	call   14ee9 <sys_lseek>
   120b7:	83 c4 10             	add    $0x10,%esp
   120ba:	85 c0                	test   %eax,%eax
   120bc:	79 15                	jns    120d3 <load_elf_file+0x137>
            log_printf("read file failed\n");
   120be:	83 ec 0c             	sub    $0xc,%esp
   120c1:	68 f8 68 01 00       	push   $0x168f8
   120c6:	e8 a9 44 00 00       	call   16574 <log_printf>
   120cb:	83 c4 10             	add    $0x10,%esp
            goto load_failed;
   120ce:	e9 c1 00 00 00       	jmp    12194 <load_elf_file+0x1f8>
        }

        cnt = sys_read(file, (char*)&elf_phdr, sizeof(Elf32_Phdr));
   120d3:	83 ec 04             	sub    $0x4,%esp
   120d6:	6a 20                	push   $0x20
   120d8:	8d 45 90             	lea    -0x70(%ebp),%eax
   120db:	50                   	push   %eax
   120dc:	ff 75 ec             	push   -0x14(%ebp)
   120df:	e8 39 2d 00 00       	call   14e1d <sys_read>
   120e4:	83 c4 10             	add    $0x10,%esp
   120e7:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (cnt < sizeof(Elf32_Phdr)) {
   120ea:	8b 45 e8             	mov    -0x18(%ebp),%eax
   120ed:	83 f8 1f             	cmp    $0x1f,%eax
   120f0:	77 15                	ja     12107 <load_elf_file+0x16b>
            log_printf("read file failed\n");
   120f2:	83 ec 0c             	sub    $0xc,%esp
   120f5:	68 f8 68 01 00       	push   $0x168f8
   120fa:	e8 75 44 00 00       	call   16574 <log_printf>
   120ff:	83 c4 10             	add    $0x10,%esp
            goto load_failed;
   12102:	e9 8d 00 00 00       	jmp    12194 <load_elf_file+0x1f8>
        }

        //若程序段不是可加载的或虚拟地址 < 用户程序的起始地址，则不可用
        if (elf_phdr.p_type != 1 || elf_phdr.p_vaddr < MEM_TASK_BASE) {
   12107:	8b 45 90             	mov    -0x70(%ebp),%eax
   1210a:	83 f8 01             	cmp    $0x1,%eax
   1210d:	75 53                	jne    12162 <load_elf_file+0x1c6>
   1210f:	8b 45 98             	mov    -0x68(%ebp),%eax
   12112:	85 c0                	test   %eax,%eax
   12114:	79 4c                	jns    12162 <load_elf_file+0x1c6>
            continue;
        }

        //加载该程序段
        int err = load_phdr(file, &elf_phdr, page_dir);
   12116:	83 ec 04             	sub    $0x4,%esp
   12119:	ff 75 10             	push   0x10(%ebp)
   1211c:	8d 45 90             	lea    -0x70(%ebp),%eax
   1211f:	50                   	push   %eax
   12120:	ff 75 ec             	push   -0x14(%ebp)
   12123:	e8 60 fd ff ff       	call   11e88 <load_phdr>
   12128:	83 c4 10             	add    $0x10,%esp
   1212b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0) {
   1212e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   12132:	79 12                	jns    12146 <load_elf_file+0x1aa>
            log_printf("load program failed\n");
   12134:	83 ec 0c             	sub    $0xc,%esp
   12137:	68 87 69 01 00       	push   $0x16987
   1213c:	e8 33 44 00 00       	call   16574 <log_printf>
   12141:	83 c4 10             	add    $0x10,%esp
            goto load_failed;
   12144:	eb 4e                	jmp    12194 <load_elf_file+0x1f8>
        }

        //更新堆空间的位置，紧靠最后一个可加载段
        task->heap_start = elf_phdr.p_vaddr + elf_phdr.p_memsz;
   12146:	8b 55 98             	mov    -0x68(%ebp),%edx
   12149:	8b 45 a4             	mov    -0x5c(%ebp),%eax
   1214c:	01 c2                	add    %eax,%edx
   1214e:	8b 45 08             	mov    0x8(%ebp),%eax
   12151:	89 50 0c             	mov    %edx,0xc(%eax)
        task->heap_end = task->heap_start;
   12154:	8b 45 08             	mov    0x8(%ebp),%eax
   12157:	8b 50 0c             	mov    0xc(%eax),%edx
   1215a:	8b 45 08             	mov    0x8(%ebp),%eax
   1215d:	89 50 10             	mov    %edx,0x10(%eax)
   12160:	eb 01                	jmp    12163 <load_elf_file+0x1c7>
            continue;
   12162:	90                   	nop
    for (int i = 0; i < elf_hdr.e_phnum; ++i, e_phoff += elf_hdr.e_phentsize) {
   12163:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   12167:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
   1216b:	0f b7 c0             	movzwl %ax,%eax
   1216e:	01 45 f4             	add    %eax,-0xc(%ebp)
   12171:	0f b7 45 dc          	movzwl -0x24(%ebp),%eax
   12175:	0f b7 c0             	movzwl %ax,%eax
   12178:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   1217b:	0f 8c 25 ff ff ff    	jl     120a6 <load_elf_file+0x10a>
    }

    //成功解析并加载完整个elf文件后关闭文件，并返回程序入口地址
    sys_close(file);
   12181:	83 ec 0c             	sub    $0xc,%esp
   12184:	ff 75 ec             	push   -0x14(%ebp)
   12187:	e8 81 2d 00 00       	call   14f0d <sys_close>
   1218c:	83 c4 10             	add    $0x10,%esp
    return elf_hdr.e_entry;
   1218f:	8b 45 c8             	mov    -0x38(%ebp),%eax
   12192:	eb 19                	jmp    121ad <load_elf_file+0x211>

//错误处理
load_failed:
    if (file >= 0) {    //文件已被打开，则关闭该文件
   12194:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   12198:	78 0e                	js     121a8 <load_elf_file+0x20c>
        sys_close(file);
   1219a:	83 ec 0c             	sub    $0xc,%esp
   1219d:	ff 75 ec             	push   -0x14(%ebp)
   121a0:	e8 68 2d 00 00       	call   14f0d <sys_close>
   121a5:	83 c4 10             	add    $0x10,%esp
    }
    return 0;
   121a8:	b8 00 00 00 00       	mov    $0x0,%eax
}
   121ad:	c9                   	leave  
   121ae:	c3                   	ret    

000121af <copy_args>:
 * @param stack_top 新任务的栈顶地址
 * @param argv 参数的字符串数组
 * @param argc 参数的个数
 * @return int 
 */
static int copy_args(uint32_t to_page_dir, char *stack_top, char * const *argv, int argc) {
   121af:	55                   	push   %ebp
   121b0:	89 e5                	mov    %esp,%ebp
   121b2:	83 ec 38             	sub    $0x38,%esp
    task_args_t task_args;
    task_args.argc = argc;
   121b5:	8b 45 14             	mov    0x14(%ebp),%eax
   121b8:	89 45 d8             	mov    %eax,-0x28(%ebp)


    //1.获取char*数组在目标虚拟空间中的的虚拟地址
    //char*数组将被拷贝到task_args的上方,所以直接让argv指向栈顶偏移task_args的大小个字节的空间即可
    //即指向了该字符串数组第一个char*的地址
    task_args.argv = (char **)(stack_top + sizeof(task_args_t));
   121bb:	8b 45 0c             	mov    0xc(%ebp),%eax
   121be:	83 c0 0c             	add    $0xc,%eax
   121c1:	89 45 dc             	mov    %eax,-0x24(%ebp)

    //2.获取char*数组对应的虚拟空间关联的物理地址
    char **to_argv_paddr = (char**)memory_get_paddr(to_page_dir, (uint32_t)task_args.argv);  
   121c4:	8b 45 dc             	mov    -0x24(%ebp),%eax
   121c7:	83 ec 08             	sub    $0x8,%esp
   121ca:	50                   	push   %eax
   121cb:	ff 75 08             	push   0x8(%ebp)
   121ce:	e8 22 ed ff ff       	call   10ef5 <memory_get_paddr>
   121d3:	83 c4 10             	add    $0x10,%esp
   121d6:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //3.获取参数的存储地址, 偏移量为 task_args 加上 argc个参数的字符串指针的大小，
    char *dest_arg = stack_top + sizeof(task_args_t) + sizeof(char*) * argc;
   121d9:	8b 45 14             	mov    0x14(%ebp),%eax
   121dc:	83 c0 03             	add    $0x3,%eax
   121df:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   121e6:	8b 45 0c             	mov    0xc(%ebp),%eax
   121e9:	01 d0                	add    %edx,%eax
   121eb:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //3.将参数拷贝到dest_arg处，并将每个参数的地址记录到task.argv指向的char*数组中
    for (int i = 0; i < argc; ++i) {
   121ee:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   121f5:	e9 82 00 00 00       	jmp    1227c <copy_args+0xcd>
        char *from = argv[i];
   121fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
   121fd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   12204:	8b 45 10             	mov    0x10(%ebp),%eax
   12207:	01 d0                	add    %edx,%eax
   12209:	8b 00                	mov    (%eax),%eax
   1220b:	89 45 e8             	mov    %eax,-0x18(%ebp)
        int len = kernel_strlen(from) + 1;
   1220e:	83 ec 0c             	sub    $0xc,%esp
   12211:	ff 75 e8             	push   -0x18(%ebp)
   12214:	e8 da 3a 00 00       	call   15cf3 <kernel_strlen>
   12219:	83 c4 10             	add    $0x10,%esp
   1221c:	83 c0 01             	add    $0x1,%eax
   1221f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        int err = memory_copy_uvm_data((uint32_t)dest_arg, to_page_dir, (uint32_t)from, len);
   12222:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
   12225:	8b 55 e8             	mov    -0x18(%ebp),%edx
   12228:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1222b:	51                   	push   %ecx
   1222c:	52                   	push   %edx
   1222d:	ff 75 08             	push   0x8(%ebp)
   12230:	50                   	push   %eax
   12231:	e8 12 ed ff ff       	call   10f48 <memory_copy_uvm_data>
   12236:	83 c4 10             	add    $0x10,%esp
   12239:	89 45 e0             	mov    %eax,-0x20(%ebp)
        ASSERT(err >= 0);
   1223c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   12240:	79 1c                	jns    1225e <copy_args+0xaf>
   12242:	68 9c 69 01 00       	push   $0x1699c
   12247:	68 64 6a 01 00       	push   $0x16a64
   1224c:	68 88 03 00 00       	push   $0x388
   12251:	68 78 68 01 00       	push   $0x16878
   12256:	e8 03 36 00 00       	call   1585e <pannic>
   1225b:	83 c4 10             	add    $0x10,%esp
        to_argv_paddr[i] = dest_arg;
   1225e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12261:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   12268:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1226b:	01 c2                	add    %eax,%edx
   1226d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12270:	89 02                	mov    %eax,(%edx)
        dest_arg += len;
   12272:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12275:	01 45 f4             	add    %eax,-0xc(%ebp)
    for (int i = 0; i < argc; ++i) {
   12278:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   1227c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1227f:	3b 45 14             	cmp    0x14(%ebp),%eax
   12282:	0f 8c 72 ff ff ff    	jl     121fa <copy_args+0x4b>
    }


    //4.将task_args拷贝到用户虚拟空间中,紧邻栈顶上方，作为入口函数的参数
    memory_copy_uvm_data((uint32_t)stack_top, to_page_dir, (uint32_t)&task_args, sizeof(task_args_t)); 
   12288:	8d 55 d4             	lea    -0x2c(%ebp),%edx
   1228b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1228e:	6a 0c                	push   $0xc
   12290:	52                   	push   %edx
   12291:	ff 75 08             	push   0x8(%ebp)
   12294:	50                   	push   %eax
   12295:	e8 ae ec ff ff       	call   10f48 <memory_copy_uvm_data>
   1229a:	83 c4 10             	add    $0x10,%esp
}
   1229d:	90                   	nop
   1229e:	c9                   	leave  
   1229f:	c3                   	ret    

000122a0 <sys_execve>:
 * @param name 程序名
 * @param argv 命令行参数数组
 * @param env 程序继承的环境变量数组
 * @return int 
 */
int sys_execve(char *name, char * const *argv, char * const *env ) {
   122a0:	55                   	push   %ebp
   122a1:	89 e5                	mov    %esp,%ebp
   122a3:	83 ec 28             	sub    $0x28,%esp
        //1.获取当前任务进程
        task_t *task = task_current();
   122a6:	e8 d5 f6 ff ff       	call   11980 <task_current>
   122ab:	89 45 f4             	mov    %eax,-0xc(%ebp)

        //2.获取当前任务的页目录表
        uint32_t old_page_dir = task->tss.cr3;
   122ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
   122b1:	8b 40 74             	mov    0x74(%eax),%eax
   122b4:	89 45 f0             	mov    %eax,-0x10(%ebp)

        //3.创建一个新的页目录表
        uint32_t new_page_dir = memory_creat_uvm();
   122b7:	e8 a4 e6 ff ff       	call   10960 <memory_creat_uvm>
   122bc:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (new_page_dir == 0)  //创建失败
   122bf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   122c3:	0f 84 4a 01 00 00    	je     12413 <sys_execve+0x173>
            goto exec_failed;

        //4.加载elf文件，替换当前任务
        uint32_t entry = load_elf_file(task, name, new_page_dir);
   122c9:	83 ec 04             	sub    $0x4,%esp
   122cc:	ff 75 ec             	push   -0x14(%ebp)
   122cf:	ff 75 08             	push   0x8(%ebp)
   122d2:	ff 75 f4             	push   -0xc(%ebp)
   122d5:	e8 c2 fc ff ff       	call   11f9c <load_elf_file>
   122da:	83 c4 10             	add    $0x10,%esp
   122dd:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (entry == 0)
   122e0:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   122e4:	0f 84 2c 01 00 00    	je     12416 <sys_execve+0x176>
            goto exec_failed;

        
        //5.为新进程分配用户栈空间
        uint32_t stack_top = MEM_TASK_STACK_TOP - MEM_TASK_ARG_SIZE;
   122ea:	c7 45 e4 00 c0 ff df 	movl   $0xdfffc000,-0x1c(%ebp)
        int err = memory_alloc_for_page_dir(new_page_dir, 
   122f1:	6a 07                	push   $0x7
   122f3:	68 00 20 03 00       	push   $0x32000
   122f8:	68 00 e0 fc df       	push   $0xdffce000
   122fd:	ff 75 ec             	push   -0x14(%ebp)
   12300:	e8 4d ea ff ff       	call   10d52 <memory_alloc_for_page_dir>
   12305:	83 c4 10             	add    $0x10,%esp
   12308:	89 45 e0             	mov    %eax,-0x20(%ebp)
            MEM_TASK_STACK_TOP - MEM_TASK_STACK_SIZE, 
            MEM_TASK_STACK_SIZE, 
            PTE_P | PTE_U | PTE_W);

        if (err < 0) 
   1230b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   1230f:	0f 88 04 01 00 00    	js     12419 <sys_execve+0x179>
            goto exec_failed;

        //6.将被执行任务的入口参数拷贝到栈上方对应内存空间
        int argc = strings_count(argv);
   12315:	83 ec 0c             	sub    $0xc,%esp
   12318:	ff 75 0c             	push   0xc(%ebp)
   1231b:	e8 07 3e 00 00       	call   16127 <strings_count>
   12320:	83 c4 10             	add    $0x10,%esp
   12323:	89 45 dc             	mov    %eax,-0x24(%ebp)
        err = copy_args(new_page_dir, (char *)stack_top, argv, argc);
   12326:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12329:	ff 75 dc             	push   -0x24(%ebp)
   1232c:	ff 75 0c             	push   0xc(%ebp)
   1232f:	50                   	push   %eax
   12330:	ff 75 ec             	push   -0x14(%ebp)
   12333:	e8 77 fe ff ff       	call   121af <copy_args>
   12338:	83 c4 10             	add    $0x10,%esp
   1233b:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (err < 0)
   1233e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   12342:	0f 88 d4 00 00 00    	js     1241c <sys_execve+0x17c>

      

        //7.获取系统调用的栈帧,因为每次通过调用门进入内核栈中都只会一帧该结构体的数据，
        //所以用最高地址减去大小即可获得该帧的起始地址
        syscall_frame_t *frame = (syscall_frame_t*)(task_current()->tss.esp0 - sizeof(syscall_frame_t));
   12348:	e8 33 f6 ff ff       	call   11980 <task_current>
   1234d:	8b 40 5c             	mov    0x5c(%eax),%eax
   12350:	83 e8 58             	sub    $0x58,%eax
   12353:	89 45 d8             	mov    %eax,-0x28(%ebp)
        
        //8.更改进程用户栈的位置，并更改调用门返回后执行的指令地址为程序入口地址
        frame->esp = stack_top - 5 * 4;
   12356:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12359:	8d 50 ec             	lea    -0x14(%eax),%edx
   1235c:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1235f:	89 50 50             	mov    %edx,0x50(%eax)
        frame->eip = entry;
   12362:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12365:	8b 55 e8             	mov    -0x18(%ebp),%edx
   12368:	89 50 34             	mov    %edx,0x34(%eax)

        //9.让进程更清爽的运行，清空通用寄存器的值
        frame->eax = frame->ebx = frame->ecx = frame->edx = 0;
   1236b:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1236e:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
   12375:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12378:	8b 50 28             	mov    0x28(%eax),%edx
   1237b:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1237e:	89 50 2c             	mov    %edx,0x2c(%eax)
   12381:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12384:	8b 50 2c             	mov    0x2c(%eax),%edx
   12387:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1238a:	89 50 24             	mov    %edx,0x24(%eax)
   1238d:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12390:	8b 50 24             	mov    0x24(%eax),%edx
   12393:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12396:	89 50 30             	mov    %edx,0x30(%eax)
        frame->esi = frame->edi = frame->ebp = 0;
   12399:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1239c:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
   123a3:	8b 45 d8             	mov    -0x28(%ebp),%eax
   123a6:	8b 50 1c             	mov    0x1c(%eax),%edx
   123a9:	8b 45 d8             	mov    -0x28(%ebp),%eax
   123ac:	89 50 14             	mov    %edx,0x14(%eax)
   123af:	8b 45 d8             	mov    -0x28(%ebp),%eax
   123b2:	8b 50 14             	mov    0x14(%eax),%edx
   123b5:	8b 45 d8             	mov    -0x28(%ebp),%eax
   123b8:	89 50 18             	mov    %edx,0x18(%eax)
        frame->eflags = EFLAGS_IF | EFLAGS_DEFAULT_1;
   123bb:	8b 45 d8             	mov    -0x28(%ebp),%eax
   123be:	c7 00 02 02 00 00    	movl   $0x202,(%eax)

        //10.修改当前任务名为被执行任务名
        kernel_strncpy(task->name, get_file_name(name), TASK_NAME_SIZE);
   123c4:	83 ec 0c             	sub    $0xc,%esp
   123c7:	ff 75 08             	push   0x8(%ebp)
   123ca:	e8 85 3d 00 00       	call   16154 <get_file_name>
   123cf:	83 c4 10             	add    $0x10,%esp
   123d2:	8b 55 f4             	mov    -0xc(%ebp),%edx
   123d5:	83 c2 20             	add    $0x20,%edx
   123d8:	83 ec 04             	sub    $0x4,%esp
   123db:	6a 20                	push   $0x20
   123dd:	50                   	push   %eax
   123de:	52                   	push   %edx
   123df:	e8 3d 38 00 00       	call   15c21 <kernel_strncpy>
   123e4:	83 c4 10             	add    $0x10,%esp
        
        //11.记录并设置新页目录表，并销毁原页目录表的虚拟映射关系
        task->tss.cr3 = new_page_dir;
   123e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   123ea:	8b 55 ec             	mov    -0x14(%ebp),%edx
   123ed:	89 50 74             	mov    %edx,0x74(%eax)
        mmu_set_page_dir(new_page_dir);
   123f0:	83 ec 0c             	sub    $0xc,%esp
   123f3:	ff 75 ec             	push   -0x14(%ebp)
   123f6:	e8 90 ee ff ff       	call   1128b <mmu_set_page_dir>
   123fb:	83 c4 10             	add    $0x10,%esp
        memory_destroy_uvm(old_page_dir);
   123fe:	83 ec 0c             	sub    $0xc,%esp
   12401:	ff 75 f0             	push   -0x10(%ebp)
   12404:	e8 69 e7 ff ff       	call   10b72 <memory_destroy_uvm>
   12409:	83 c4 10             	add    $0x10,%esp
    return 0;
   1240c:	b8 00 00 00 00       	mov    $0x0,%eax
   12411:	eb 3a                	jmp    1244d <sys_execve+0x1ad>
            goto exec_failed;
   12413:	90                   	nop
   12414:	eb 07                	jmp    1241d <sys_execve+0x17d>
            goto exec_failed;
   12416:	90                   	nop
   12417:	eb 04                	jmp    1241d <sys_execve+0x17d>
            goto exec_failed;
   12419:	90                   	nop
   1241a:	eb 01                	jmp    1241d <sys_execve+0x17d>
            goto exec_failed;
   1241c:	90                   	nop

exec_failed:
    // 执行失败，释放资源并恢复到原进程状态
    if (new_page_dir) {
   1241d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   12421:	74 25                	je     12448 <sys_execve+0x1a8>
        task->tss.cr3 = old_page_dir;
   12423:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12426:	8b 55 f0             	mov    -0x10(%ebp),%edx
   12429:	89 50 74             	mov    %edx,0x74(%eax)
        mmu_set_page_dir(old_page_dir);
   1242c:	83 ec 0c             	sub    $0xc,%esp
   1242f:	ff 75 f0             	push   -0x10(%ebp)
   12432:	e8 54 ee ff ff       	call   1128b <mmu_set_page_dir>
   12437:	83 c4 10             	add    $0x10,%esp
        memory_destroy_uvm(new_page_dir);
   1243a:	83 ec 0c             	sub    $0xc,%esp
   1243d:	ff 75 ec             	push   -0x14(%ebp)
   12440:	e8 2d e7 ff ff       	call   10b72 <memory_destroy_uvm>
   12445:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   12448:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1244d:	c9                   	leave  
   1244e:	c3                   	ret    

0001244f <gate_desc_set>:
 * @param selector 门描述符对应的处理程序所在的段的选择子
 * @param offset 门描述符对应的处理程序相对于所在段的偏移量
 * @param attr 门描述符的属性
 */
void gate_desc_set(gate_desc_t *desc, const uint16_t selector, const uint32_t offset,
                          const uint16_t attr) {
   1244f:	55                   	push   %ebp
   12450:	89 e5                	mov    %esp,%ebp
   12452:	83 ec 08             	sub    $0x8,%esp
   12455:	8b 55 0c             	mov    0xc(%ebp),%edx
   12458:	8b 45 14             	mov    0x14(%ebp),%eax
   1245b:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   1245f:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
  // 1.初始化偏移量
  desc->offset15_0 = offset & 0xffff;
   12463:	8b 45 10             	mov    0x10(%ebp),%eax
   12466:	89 c2                	mov    %eax,%edx
   12468:	8b 45 08             	mov    0x8(%ebp),%eax
   1246b:	66 89 10             	mov    %dx,(%eax)
  desc->offset31_16 = (offset >> 16) & 0xffff;
   1246e:	8b 45 10             	mov    0x10(%ebp),%eax
   12471:	c1 e8 10             	shr    $0x10,%eax
   12474:	89 c2                	mov    %eax,%edx
   12476:	8b 45 08             	mov    0x8(%ebp),%eax
   12479:	66 89 50 06          	mov    %dx,0x6(%eax)

  // 2.初始化选择子
  desc->selector = selector;
   1247d:	8b 45 08             	mov    0x8(%ebp),%eax
   12480:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12484:	66 89 50 02          	mov    %dx,0x2(%eax)

  // 3.初始化属性位
  desc->attr = attr;
   12488:	8b 45 08             	mov    0x8(%ebp),%eax
   1248b:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   1248f:	66 89 50 04          	mov    %dx,0x4(%eax)
   12493:	90                   	nop
   12494:	c9                   	leave  
   12495:	c3                   	ret    

00012496 <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   12496:	55                   	push   %ebp
   12497:	89 e5                	mov    %esp,%ebp
   12499:	83 ec 10             	sub    $0x10,%esp
  gdt.start31_16 = (start >> 16) & 0xffff;  // 初始化GDT地址的高16位
   1249c:	8b 45 08             	mov    0x8(%ebp),%eax
   1249f:	c1 e8 10             	shr    $0x10,%eax
   124a2:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  gdt.start15_0 = start & 0xffff;           // 初始化GDT地址的低16位
   124a6:	8b 45 08             	mov    0x8(%ebp),%eax
   124a9:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   124ad:	8b 45 0c             	mov    0xc(%ebp),%eax
   124b0:	83 e8 01             	sub    $0x1,%eax
  gdt.limit =
   124b3:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   124b7:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   124bb:	90                   	nop
   124bc:	c9                   	leave  
   124bd:	c3                   	ret    

000124be <segment_desc_set>:
 *                 即2的13次方个段，也就是8192
 * @param base 该段在内存中的真实段基址
 * @param limit 该段的段界限，是一个偏移量，表示段中最大的偏移界限
 * @param attr 该段的属性位
 */
void segment_desc_set(uint16_t selector,  uint32_t base, uint32_t limit, uint16_t attr) {
   124be:	55                   	push   %ebp
   124bf:	89 e5                	mov    %esp,%ebp
   124c1:	83 ec 18             	sub    $0x18,%esp
   124c4:	8b 55 08             	mov    0x8(%ebp),%edx
   124c7:	8b 45 14             	mov    0x14(%ebp),%eax
   124ca:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
   124ce:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    //1. 获取该段描述符在内存中的起始地址，selector >> 3 取出3~15位才是其在全局描述符中的下标
    segment_desc_t *desc = gdt_table + (selector >> 3);
   124d2:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   124d6:	66 c1 e8 03          	shr    $0x3,%ax
   124da:	0f b7 c0             	movzwl %ax,%eax
   124dd:	c1 e0 03             	shl    $0x3,%eax
   124e0:	05 e0 89 03 00       	add    $0x389e0,%eax
   124e5:	89 45 fc             	mov    %eax,-0x4(%ebp)

    //2. 设置段基地址
    desc->base15_0 = (uint16_t)base;
   124e8:	8b 45 0c             	mov    0xc(%ebp),%eax
   124eb:	89 c2                	mov    %eax,%edx
   124ed:	8b 45 fc             	mov    -0x4(%ebp),%eax
   124f0:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (uint8_t)(base >> 16);
   124f4:	8b 45 0c             	mov    0xc(%ebp),%eax
   124f7:	c1 e8 10             	shr    $0x10,%eax
   124fa:	89 c2                	mov    %eax,%edx
   124fc:	8b 45 fc             	mov    -0x4(%ebp),%eax
   124ff:	88 50 04             	mov    %dl,0x4(%eax)
    desc->base31_24 = (uint8_t)(base >> 24);
   12502:	8b 45 0c             	mov    0xc(%ebp),%eax
   12505:	c1 e8 18             	shr    $0x18,%eax
   12508:	89 c2                	mov    %eax,%edx
   1250a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1250d:	88 50 07             	mov    %dl,0x7(%eax)

    //3. 设置段界限
    if (limit > 0xfffff) { //limit大于了20位能表示的最大值
   12510:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   12517:	76 1d                	jbe    12536 <segment_desc_set+0x78>
        //将limit的粒度设置为 4kb，即将属性位G置1
        desc->attr |= 0x8000;
   12519:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1251c:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   12520:	66 0d 00 80          	or     $0x8000,%ax
   12524:	89 c2                	mov    %eax,%edx
   12526:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12529:	66 89 50 05          	mov    %dx,0x5(%eax)

        //将limit改成以 4kb 为单位
        limit /= (4 * 1024);
   1252d:	8b 45 10             	mov    0x10(%ebp),%eax
   12530:	c1 e8 0c             	shr    $0xc,%eax
   12533:	89 45 10             	mov    %eax,0x10(%ebp)

    }
    desc->limit15_0 = (uint16_t)limit;
   12536:	8b 45 10             	mov    0x10(%ebp),%eax
   12539:	89 c2                	mov    %eax,%edx
   1253b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1253e:	66 89 10             	mov    %dx,(%eax)
    desc->attr |= ((uint16_t)(limit >> 8) & 0x0f00); //将limit高4位赋值到attr的8~11位(段界限的高4位)
   12541:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12544:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   12548:	89 c2                	mov    %eax,%edx
   1254a:	8b 45 10             	mov    0x10(%ebp),%eax
   1254d:	c1 e8 08             	shr    $0x8,%eax
   12550:	66 25 00 0f          	and    $0xf00,%ax
   12554:	09 d0                	or     %edx,%eax
   12556:	89 c2                	mov    %eax,%edx
   12558:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1255b:	66 89 50 05          	mov    %dx,0x5(%eax)

    //4.设置属性位
    desc->attr |= attr & 0xf0ff;
   1255f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12562:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   12566:	89 c2                	mov    %eax,%edx
   12568:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   1256c:	80 e4 f0             	and    $0xf0,%ah
   1256f:	09 d0                	or     %edx,%eax
   12571:	89 c2                	mov    %eax,%edx
   12573:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12576:	66 89 50 05          	mov    %dx,0x5(%eax)


}
   1257a:	90                   	nop
   1257b:	c9                   	leave  
   1257c:	c3                   	ret    

0001257d <gdt_init>:

/**
 * @brief  初始化GDT
 * 
 */
void gdt_init(void) {
   1257d:	55                   	push   %ebp
   1257e:	89 e5                	mov    %esp,%ebp
   12580:	83 ec 18             	sub    $0x18,%esp
    //TODO:暂时将所有段都初始化为0
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   12583:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1258a:	eb 1c                	jmp    125a8 <gdt_init+0x2b>
        segment_desc_set(i << 3, 0, 0, 0);
   1258c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1258f:	c1 e0 03             	shl    $0x3,%eax
   12592:	0f b7 c0             	movzwl %ax,%eax
   12595:	6a 00                	push   $0x0
   12597:	6a 00                	push   $0x0
   12599:	6a 00                	push   $0x0
   1259b:	50                   	push   %eax
   1259c:	e8 1d ff ff ff       	call   124be <segment_desc_set>
   125a1:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   125a4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   125a8:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   125af:	7e db                	jle    1258c <gdt_init+0xf>
        is_alloc[i] == 0;
    }

    //使用平坦模型，即段基址为0, 段界限直接用最大值，界限粒度为4kb，即段大小为4GB
    //1.设置内核的数据段,并将其标记
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff,
   125b1:	68 92 40 00 00       	push   $0x4092
   125b6:	6a ff                	push   $0xffffffff
   125b8:	6a 00                	push   $0x0
   125ba:	6a 10                	push   $0x10
   125bc:	e8 fd fe ff ff       	call   124be <segment_desc_set>
   125c1:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL | 
                    SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_DS >> 3] = 1;
   125c4:	c6 05 e2 89 04 00 01 	movb   $0x1,0x489e2

    //2.设置内核的代码段，并将其标记
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff,
   125cb:	68 9a 40 00 00       	push   $0x409a
   125d0:	6a ff                	push   $0xffffffff
   125d2:	6a 00                	push   $0x0
   125d4:	6a 08                	push   $0x8
   125d6:	e8 e3 fe ff ff       	call   124be <segment_desc_set>
   125db:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL |
                    SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_CS >> 3] = 1;
   125de:	c6 05 e1 89 04 00 01 	movb   $0x1,0x489e1

    //3.初始化调用门描述符，调用门的 DPL >= CPL = 3 && DPL >= RPL = 0, 若目标代码段的特权级更高则发生特权级转换
    gate_desc_set((gate_desc_t*)(gdt_table + (SYSCALL_SELECTOR >> 3)), 
   125e5:	ba ca 02 01 00       	mov    $0x102ca,%edx
   125ea:	b8 f8 89 03 00       	mov    $0x389f8,%eax
   125ef:	68 05 ec 00 00       	push   $0xec05
   125f4:	52                   	push   %edx
   125f5:	6a 08                	push   $0x8
   125f7:	50                   	push   %eax
   125f8:	e8 52 fe ff ff       	call   1244f <gate_desc_set>
   125fd:	83 c4 10             	add    $0x10,%esp
        KERNEL_SELECTOR_CS, (uint32_t)exception_handler_syscall, 
        GATE_ATTR_P | GATE_ATTR_DPL_3 | GATE_TYPE_SYSCALL | SYSCALL_PARAM_COUNT);
    
    is_alloc[SYSCALL_SELECTOR >> 3] = 1;
   12600:	c6 05 e3 89 04 00 01 	movb   $0x1,0x489e3


    //4.加载新的GDT表
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   12607:	b8 e0 89 03 00       	mov    $0x389e0,%eax
   1260c:	83 ec 08             	sub    $0x8,%esp
   1260f:	68 00 00 01 00       	push   $0x10000
   12614:	50                   	push   %eax
   12615:	e8 7c fe ff ff       	call   12496 <lgdt>
   1261a:	83 c4 10             	add    $0x10,%esp

    //4.初始化互斥锁
    mutex_init(&mutex);
   1261d:	83 ec 0c             	sub    $0xc,%esp
   12620:	68 e0 a9 04 00       	push   $0x4a9e0
   12625:	e8 1b 2b 00 00       	call   15145 <mutex_init>
   1262a:	83 c4 10             	add    $0x10,%esp
}
   1262d:	90                   	nop
   1262e:	c9                   	leave  
   1262f:	c3                   	ret    

00012630 <gdt_alloc_desc>:
/**
 * @brief  寻找gdt中未赋值的段描述符空间
 * 
 * @return int 返回的找到的描述符的选择子
 */
int gdt_alloc_desc() {
   12630:	55                   	push   %ebp
   12631:	89 e5                	mov    %esp,%ebp
   12633:	83 ec 18             	sub    $0x18,%esp

    mutex_lock(&mutex);//TODO:加锁
   12636:	83 ec 0c             	sub    $0xc,%esp
   12639:	68 e0 a9 04 00       	push   $0x4a9e0
   1263e:	e8 4f 2b 00 00       	call   15192 <mutex_lock>
   12643:	83 c4 10             	add    $0x10,%esp

    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   12646:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   1264d:	eb 36                	jmp    12685 <gdt_alloc_desc+0x55>
        if (is_alloc[i] == 0)  {
   1264f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12652:	05 e0 89 04 00       	add    $0x489e0,%eax
   12657:	0f b6 00             	movzbl (%eax),%eax
   1265a:	84 c0                	test   %al,%al
   1265c:	75 23                	jne    12681 <gdt_alloc_desc+0x51>
            is_alloc[i] = 1;
   1265e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12661:	05 e0 89 04 00       	add    $0x489e0,%eax
   12666:	c6 00 01             	movb   $0x1,(%eax)

            mutex_unlock(&mutex);//TODO:解锁
   12669:	83 ec 0c             	sub    $0xc,%esp
   1266c:	68 e0 a9 04 00       	push   $0x4a9e0
   12671:	e8 ad 2b 00 00       	call   15223 <mutex_unlock>
   12676:	83 c4 10             	add    $0x10,%esp
            return (i << 3);
   12679:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1267c:	c1 e0 03             	shl    $0x3,%eax
   1267f:	eb 22                	jmp    126a3 <gdt_alloc_desc+0x73>
    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   12681:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12685:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   1268c:	7e c1                	jle    1264f <gdt_alloc_desc+0x1f>
        }
    }

    mutex_unlock(&mutex);//TODO:解锁
   1268e:	83 ec 0c             	sub    $0xc,%esp
   12691:	68 e0 a9 04 00       	push   $0x4a9e0
   12696:	e8 88 2b 00 00       	call   15223 <mutex_unlock>
   1269b:	83 c4 10             	add    $0x10,%esp
    return -1;
   1269e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   126a3:	c9                   	leave  
   126a4:	c3                   	ret    

000126a5 <gdt_free>:
/**
 * @brief 释放gdt表项
 * 
 * @param selector 需要释放的表项对应的选择子
 */
void gdt_free(uint16_t selector) {
   126a5:	55                   	push   %ebp
   126a6:	89 e5                	mov    %esp,%ebp
   126a8:	83 ec 14             	sub    $0x14,%esp
   126ab:	8b 45 08             	mov    0x8(%ebp),%eax
   126ae:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    uint16_t index = selector >> 3;
   126b2:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   126b6:	66 c1 e8 03          	shr    $0x3,%ax
   126ba:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    is_alloc[index] = 0;
   126be:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
   126c2:	c6 80 e0 89 04 00 00 	movb   $0x0,0x489e0(%eax)
}
   126c9:	90                   	nop
   126ca:	c9                   	leave  
   126cb:	c3                   	ret    

000126cc <cli>:
static inline void cli(void) { __asm__ __volatile__("cli"); }
   126cc:	55                   	push   %ebp
   126cd:	89 e5                	mov    %esp,%ebp
   126cf:	fa                   	cli    
   126d0:	90                   	nop
   126d1:	5d                   	pop    %ebp
   126d2:	c3                   	ret    

000126d3 <sti>:
static inline void sti(void) { __asm__ __volatile__("sti"); }
   126d3:	55                   	push   %ebp
   126d4:	89 e5                	mov    %esp,%ebp
   126d6:	fb                   	sti    
   126d7:	90                   	nop
   126d8:	5d                   	pop    %ebp
   126d9:	c3                   	ret    

000126da <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   126da:	55                   	push   %ebp
   126db:	89 e5                	mov    %esp,%ebp
   126dd:	f4                   	hlt    
   126de:	90                   	nop
   126df:	5d                   	pop    %ebp
   126e0:	c3                   	ret    

000126e1 <inb>:
static inline uint8_t inb(uint16_t port) {
   126e1:	55                   	push   %ebp
   126e2:	89 e5                	mov    %esp,%ebp
   126e4:	83 ec 14             	sub    $0x14,%esp
   126e7:	8b 45 08             	mov    0x8(%ebp),%eax
   126ea:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   126ee:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   126f2:	89 c2                	mov    %eax,%edx
   126f4:	ec                   	in     (%dx),%al
   126f5:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   126f8:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   126fc:	c9                   	leave  
   126fd:	c3                   	ret    

000126fe <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   126fe:	55                   	push   %ebp
   126ff:	89 e5                	mov    %esp,%ebp
   12701:	83 ec 08             	sub    $0x8,%esp
   12704:	8b 45 08             	mov    0x8(%ebp),%eax
   12707:	8b 55 0c             	mov    0xc(%ebp),%edx
   1270a:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   1270e:	89 d0                	mov    %edx,%eax
   12710:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   12713:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12717:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1271b:	ee                   	out    %al,(%dx)
}
   1271c:	90                   	nop
   1271d:	c9                   	leave  
   1271e:	c3                   	ret    

0001271f <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   1271f:	55                   	push   %ebp
   12720:	89 e5                	mov    %esp,%ebp
   12722:	83 ec 10             	sub    $0x10,%esp
  idt.start31_16 = (start >> 16) & 0xffff;  // 初始化IDT地址的高16位
   12725:	8b 45 08             	mov    0x8(%ebp),%eax
   12728:	c1 e8 10             	shr    $0x10,%eax
   1272b:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  idt.start15_0 = start & 0xffff;           // 初始化IDT地址的低16位
   1272f:	8b 45 08             	mov    0x8(%ebp),%eax
   12732:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   12736:	8b 45 0c             	mov    0xc(%ebp),%eax
   12739:	83 e8 01             	sub    $0x1,%eax
  idt.limit =
   1273c:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   12740:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   12744:	90                   	nop
   12745:	c9                   	leave  
   12746:	c3                   	ret    

00012747 <read_cr2>:
static inline uint32_t read_cr2(void) {
   12747:	55                   	push   %ebp
   12748:	89 e5                	mov    %esp,%ebp
   1274a:	83 ec 10             	sub    $0x10,%esp
  __asm__ __volatile__("mov %%cr2, %[v]" : [v] "=r"(cr2));
   1274d:	0f 20 d0             	mov    %cr2,%eax
   12750:	89 45 fc             	mov    %eax,-0x4(%ebp)
  return cr2;
   12753:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12756:	c9                   	leave  
   12757:	c3                   	ret    

00012758 <read_eflags>:
/**
 * @brief  读取当前cpu的eflags寄存器
 * 
 * @return uint32_t 放回eflags的值
 */
static inline uint32_t read_eflags(void) {
   12758:	55                   	push   %ebp
   12759:	89 e5                	mov    %esp,%ebp
   1275b:	83 ec 10             	sub    $0x10,%esp
  uint32_t eflags;
  //pushf 压入eflags的值到栈中
  __asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   1275e:	9c                   	pushf  
   1275f:	58                   	pop    %eax
   12760:	89 45 fc             	mov    %eax,-0x4(%ebp)
  
  return eflags;
   12763:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12766:	c9                   	leave  
   12767:	c3                   	ret    

00012768 <write_eflags>:
/**
 * @brief  将状态state写入eflags寄存器
 * 
 * @param state 
 */
static inline void write_eflags(uint32_t state) {
   12768:	55                   	push   %ebp
   12769:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("push %%eax\n\tpopf"::"a"(state));
   1276b:	8b 45 08             	mov    0x8(%ebp),%eax
   1276e:	50                   	push   %eax
   1276f:	9d                   	popf   
}
   12770:	90                   	nop
   12771:	5d                   	pop    %ebp
   12772:	c3                   	ret    

00012773 <print_exception_fram>:
/**
 * @brief  打印异常栈帧信息
 * 
 * @param frame 栈帧
 */
static void print_exception_fram(const exception_frame_t *frame) {
   12773:	55                   	push   %ebp
   12774:	89 e5                	mov    %esp,%ebp
   12776:	57                   	push   %edi
   12777:	56                   	push   %esi
   12778:	53                   	push   %ebx
   12779:	83 ec 2c             	sub    $0x2c,%esp
  uint32_t ss, esp;
  if (frame->cs & 0x3) {  //cpl不为0，因为只设置了两种特权级，所以当前cpl为3，即用户程序异常
   1277c:	8b 45 08             	mov    0x8(%ebp),%eax
   1277f:	8b 40 3c             	mov    0x3c(%eax),%eax
   12782:	83 e0 03             	and    $0x3,%eax
   12785:	85 c0                	test   %eax,%eax
   12787:	74 14                	je     1279d <print_exception_fram+0x2a>
    ss = frame->ss3;
   12789:	8b 45 08             	mov    0x8(%ebp),%eax
   1278c:	8b 40 48             	mov    0x48(%eax),%eax
   1278f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    esp = frame->esp3;
   12792:	8b 45 08             	mov    0x8(%ebp),%eax
   12795:	8b 40 44             	mov    0x44(%eax),%eax
   12798:	89 45 e0             	mov    %eax,-0x20(%ebp)
   1279b:	eb 12                	jmp    127af <print_exception_fram+0x3c>
  } else {  //cpl为0，即内核异常
    ss = frame->ds; //内核ss与ds相同
   1279d:	8b 45 08             	mov    0x8(%ebp),%eax
   127a0:	8b 40 0c             	mov    0xc(%eax),%eax
   127a3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    esp = frame->esp;
   127a6:	8b 45 08             	mov    0x8(%ebp),%eax
   127a9:	8b 40 1c             	mov    0x1c(%eax),%eax
   127ac:	89 45 e0             	mov    %eax,-0x20(%ebp)
  }

  log_printf("------------------------stack frame info---------------------\n");
   127af:	83 ec 0c             	sub    $0xc,%esp
   127b2:	68 70 6a 01 00       	push   $0x16a70
   127b7:	e8 b8 3d 00 00       	call   16574 <log_printf>
   127bc:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ:\t\t%d\nerror code:\t%d\n", frame->num, frame->error_code);
   127bf:	8b 45 08             	mov    0x8(%ebp),%eax
   127c2:	8b 50 34             	mov    0x34(%eax),%edx
   127c5:	8b 45 08             	mov    0x8(%ebp),%eax
   127c8:	8b 40 30             	mov    0x30(%eax),%eax
   127cb:	83 ec 04             	sub    $0x4,%esp
   127ce:	52                   	push   %edx
   127cf:	50                   	push   %eax
   127d0:	68 af 6a 01 00       	push   $0x16aaf
   127d5:	e8 9a 3d 00 00       	call   16574 <log_printf>
   127da:	83 c4 10             	add    $0x10,%esp
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d\n", 
    //TODO:SS暂时没法获取，先用ds替代，之后再进行获取
    frame->cs, frame->ds, ss, frame->es, frame->fs, frame->gs
   127dd:	8b 45 08             	mov    0x8(%ebp),%eax
   127e0:	8b 30                	mov    (%eax),%esi
   127e2:	8b 45 08             	mov    0x8(%ebp),%eax
   127e5:	8b 58 04             	mov    0x4(%eax),%ebx
   127e8:	8b 45 08             	mov    0x8(%ebp),%eax
   127eb:	8b 48 08             	mov    0x8(%eax),%ecx
   127ee:	8b 45 08             	mov    0x8(%ebp),%eax
   127f1:	8b 50 0c             	mov    0xc(%eax),%edx
   127f4:	8b 45 08             	mov    0x8(%ebp),%eax
   127f7:	8b 40 3c             	mov    0x3c(%eax),%eax
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d\n", 
   127fa:	83 ec 04             	sub    $0x4,%esp
   127fd:	56                   	push   %esi
   127fe:	53                   	push   %ebx
   127ff:	51                   	push   %ecx
   12800:	ff 75 e4             	push   -0x1c(%ebp)
   12803:	52                   	push   %edx
   12804:	50                   	push   %eax
   12805:	68 c8 6a 01 00       	push   $0x16ac8
   1280a:	e8 65 3d 00 00       	call   16574 <log_printf>
   1280f:	83 c4 20             	add    $0x20,%esp
              "ESI:\t\t0x%x\n"
              "EDI:\t\t0x%x\n"
              "EBP:\t\t0x%x\n"
              "ESP:\t\t0x%x\n", 
              frame->eax, frame->ebx, frame->ecx, frame->edx,
              frame->esi, frame->edi, frame->ebp, esp 
   12812:	8b 45 08             	mov    0x8(%ebp),%eax
   12815:	8b 40 18             	mov    0x18(%eax),%eax
   12818:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   1281b:	8b 45 08             	mov    0x8(%ebp),%eax
   1281e:	8b 78 10             	mov    0x10(%eax),%edi
   12821:	8b 45 08             	mov    0x8(%ebp),%eax
   12824:	8b 70 14             	mov    0x14(%eax),%esi
              frame->eax, frame->ebx, frame->ecx, frame->edx,
   12827:	8b 45 08             	mov    0x8(%ebp),%eax
   1282a:	8b 58 24             	mov    0x24(%eax),%ebx
   1282d:	8b 45 08             	mov    0x8(%ebp),%eax
   12830:	8b 48 28             	mov    0x28(%eax),%ecx
   12833:	8b 45 08             	mov    0x8(%ebp),%eax
   12836:	8b 50 20             	mov    0x20(%eax),%edx
   12839:	8b 45 08             	mov    0x8(%ebp),%eax
   1283c:	8b 40 2c             	mov    0x2c(%eax),%eax
  log_printf( 
   1283f:	83 ec 0c             	sub    $0xc,%esp
   12842:	ff 75 e0             	push   -0x20(%ebp)
   12845:	ff 75 d4             	push   -0x2c(%ebp)
   12848:	57                   	push   %edi
   12849:	56                   	push   %esi
   1284a:	53                   	push   %ebx
   1284b:	51                   	push   %ecx
   1284c:	52                   	push   %edx
   1284d:	50                   	push   %eax
   1284e:	68 fc 6a 01 00       	push   $0x16afc
   12853:	e8 1c 3d 00 00       	call   16574 <log_printf>
   12858:	83 c4 30             	add    $0x30,%esp
              );

  log_printf("EIP:\t\t0x%x\nEFLAGS:\t\t0x%x\n", frame->eip, frame->eflags);
   1285b:	8b 45 08             	mov    0x8(%ebp),%eax
   1285e:	8b 50 40             	mov    0x40(%eax),%edx
   12861:	8b 45 08             	mov    0x8(%ebp),%eax
   12864:	8b 40 38             	mov    0x38(%eax),%eax
   12867:	83 ec 04             	sub    $0x4,%esp
   1286a:	52                   	push   %edx
   1286b:	50                   	push   %eax
   1286c:	68 55 6b 01 00       	push   $0x16b55
   12871:	e8 fe 3c 00 00       	call   16574 <log_printf>
   12876:	83 c4 10             	add    $0x10,%esp
}
   12879:	90                   	nop
   1287a:	8d 65 f4             	lea    -0xc(%ebp),%esp
   1287d:	5b                   	pop    %ebx
   1287e:	5e                   	pop    %esi
   1287f:	5f                   	pop    %edi
   12880:	5d                   	pop    %ebp
   12881:	c3                   	ret    

00012882 <do_default_handler>:
 *
 * @param message 异常信息
 * @param fram  异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
static void do_default_handler(const exception_frame_t *frame,
                               const char *message) {
   12882:	55                   	push   %ebp
   12883:	89 e5                	mov    %esp,%ebp
   12885:	83 ec 08             	sub    $0x8,%esp

  log_printf("---------------------------------------------------\n");
   12888:	83 ec 0c             	sub    $0xc,%esp
   1288b:	68 70 6b 01 00       	push   $0x16b70
   12890:	e8 df 3c 00 00       	call   16574 <log_printf>
   12895:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ/Exception happend: %s\n", message);
   12898:	83 ec 08             	sub    $0x8,%esp
   1289b:	ff 75 0c             	push   0xc(%ebp)
   1289e:	68 a5 6b 01 00       	push   $0x16ba5
   128a3:	e8 cc 3c 00 00       	call   16574 <log_printf>
   128a8:	83 c4 10             	add    $0x10,%esp
  print_exception_fram(frame);
   128ab:	83 ec 0c             	sub    $0xc,%esp
   128ae:	ff 75 08             	push   0x8(%ebp)
   128b1:	e8 bd fe ff ff       	call   12773 <print_exception_fram>
   128b6:	83 c4 10             	add    $0x10,%esp
                              
  
  for (;;) {
    hlt();
   128b9:	e8 1c fe ff ff       	call   126da <hlt>
   128be:	eb f9                	jmp    128b9 <do_default_handler+0x37>

000128c0 <do_handler_unknown>:

/**
 * @brief   对没有针对性处理程序的异常进行处理
 * @param frame 异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
void do_handler_unknown(const exception_frame_t *frame) {
   128c0:	55                   	push   %ebp
   128c1:	89 e5                	mov    %esp,%ebp
   128c3:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "unknown exception");
   128c6:	83 ec 08             	sub    $0x8,%esp
   128c9:	68 c0 6b 01 00       	push   $0x16bc0
   128ce:	ff 75 08             	push   0x8(%ebp)
   128d1:	e8 ac ff ff ff       	call   12882 <do_default_handler>
   128d6:	83 c4 10             	add    $0x10,%esp
}
   128d9:	90                   	nop
   128da:	c9                   	leave  
   128db:	c3                   	ret    

000128dc <do_handler_divider>:
/**
 * @brief  除0异常
 *
 * @param frame 异常栈帧
 */
void do_handler_divider(const exception_frame_t *frame) {
   128dc:	55                   	push   %ebp
   128dd:	89 e5                	mov    %esp,%ebp
   128df:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "divider exception");
   128e2:	83 ec 08             	sub    $0x8,%esp
   128e5:	68 d2 6b 01 00       	push   $0x16bd2
   128ea:	ff 75 08             	push   0x8(%ebp)
   128ed:	e8 90 ff ff ff       	call   12882 <do_default_handler>
   128f2:	83 c4 10             	add    $0x10,%esp
}
   128f5:	90                   	nop
   128f6:	c9                   	leave  
   128f7:	c3                   	ret    

000128f8 <do_handler_debug>:

void do_handler_debug(const exception_frame_t *frame) {
   128f8:	55                   	push   %ebp
   128f9:	89 e5                	mov    %esp,%ebp
   128fb:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "debug exception");
   128fe:	83 ec 08             	sub    $0x8,%esp
   12901:	68 e4 6b 01 00       	push   $0x16be4
   12906:	ff 75 08             	push   0x8(%ebp)
   12909:	e8 74 ff ff ff       	call   12882 <do_default_handler>
   1290e:	83 c4 10             	add    $0x10,%esp
}
   12911:	90                   	nop
   12912:	c9                   	leave  
   12913:	c3                   	ret    

00012914 <do_handler_nmi>:

void do_handler_nmi(const exception_frame_t *frame) {
   12914:	55                   	push   %ebp
   12915:	89 e5                	mov    %esp,%ebp
   12917:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "nmi exception");
   1291a:	83 ec 08             	sub    $0x8,%esp
   1291d:	68 f4 6b 01 00       	push   $0x16bf4
   12922:	ff 75 08             	push   0x8(%ebp)
   12925:	e8 58 ff ff ff       	call   12882 <do_default_handler>
   1292a:	83 c4 10             	add    $0x10,%esp
}
   1292d:	90                   	nop
   1292e:	c9                   	leave  
   1292f:	c3                   	ret    

00012930 <do_handler_breakpoint>:
void do_handler_breakpoint(const exception_frame_t *frame) {
   12930:	55                   	push   %ebp
   12931:	89 e5                	mov    %esp,%ebp
   12933:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "breakpoint exception");
   12936:	83 ec 08             	sub    $0x8,%esp
   12939:	68 02 6c 01 00       	push   $0x16c02
   1293e:	ff 75 08             	push   0x8(%ebp)
   12941:	e8 3c ff ff ff       	call   12882 <do_default_handler>
   12946:	83 c4 10             	add    $0x10,%esp
}
   12949:	90                   	nop
   1294a:	c9                   	leave  
   1294b:	c3                   	ret    

0001294c <do_handler_overflow>:
void do_handler_overflow(const exception_frame_t *frame) {
   1294c:	55                   	push   %ebp
   1294d:	89 e5                	mov    %esp,%ebp
   1294f:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "overflow exception");
   12952:	83 ec 08             	sub    $0x8,%esp
   12955:	68 17 6c 01 00       	push   $0x16c17
   1295a:	ff 75 08             	push   0x8(%ebp)
   1295d:	e8 20 ff ff ff       	call   12882 <do_default_handler>
   12962:	83 c4 10             	add    $0x10,%esp
}
   12965:	90                   	nop
   12966:	c9                   	leave  
   12967:	c3                   	ret    

00012968 <do_handler_bound_range>:
void do_handler_bound_range(const exception_frame_t *frame) {
   12968:	55                   	push   %ebp
   12969:	89 e5                	mov    %esp,%ebp
   1296b:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "bound_range exception");
   1296e:	83 ec 08             	sub    $0x8,%esp
   12971:	68 2a 6c 01 00       	push   $0x16c2a
   12976:	ff 75 08             	push   0x8(%ebp)
   12979:	e8 04 ff ff ff       	call   12882 <do_default_handler>
   1297e:	83 c4 10             	add    $0x10,%esp
}
   12981:	90                   	nop
   12982:	c9                   	leave  
   12983:	c3                   	ret    

00012984 <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(const exception_frame_t *frame) {
   12984:	55                   	push   %ebp
   12985:	89 e5                	mov    %esp,%ebp
   12987:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_opcode exception");
   1298a:	83 ec 08             	sub    $0x8,%esp
   1298d:	68 40 6c 01 00       	push   $0x16c40
   12992:	ff 75 08             	push   0x8(%ebp)
   12995:	e8 e8 fe ff ff       	call   12882 <do_default_handler>
   1299a:	83 c4 10             	add    $0x10,%esp
}
   1299d:	90                   	nop
   1299e:	c9                   	leave  
   1299f:	c3                   	ret    

000129a0 <do_handler_device_unavailable>:
void do_handler_device_unavailable(const exception_frame_t *frame) {
   129a0:	55                   	push   %ebp
   129a1:	89 e5                	mov    %esp,%ebp
   129a3:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "device_unavailable exception");
   129a6:	83 ec 08             	sub    $0x8,%esp
   129a9:	68 59 6c 01 00       	push   $0x16c59
   129ae:	ff 75 08             	push   0x8(%ebp)
   129b1:	e8 cc fe ff ff       	call   12882 <do_default_handler>
   129b6:	83 c4 10             	add    $0x10,%esp
}
   129b9:	90                   	nop
   129ba:	c9                   	leave  
   129bb:	c3                   	ret    

000129bc <do_handler_double_fault>:
void do_handler_double_fault(const exception_frame_t *frame) {
   129bc:	55                   	push   %ebp
   129bd:	89 e5                	mov    %esp,%ebp
   129bf:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "double_fault exception");
   129c2:	83 ec 08             	sub    $0x8,%esp
   129c5:	68 76 6c 01 00       	push   $0x16c76
   129ca:	ff 75 08             	push   0x8(%ebp)
   129cd:	e8 b0 fe ff ff       	call   12882 <do_default_handler>
   129d2:	83 c4 10             	add    $0x10,%esp
}
   129d5:	90                   	nop
   129d6:	c9                   	leave  
   129d7:	c3                   	ret    

000129d8 <do_handler_invalid_tss>:
void do_handler_invalid_tss(const exception_frame_t *frame) {
   129d8:	55                   	push   %ebp
   129d9:	89 e5                	mov    %esp,%ebp
   129db:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_tss exception");
   129de:	83 ec 08             	sub    $0x8,%esp
   129e1:	68 8d 6c 01 00       	push   $0x16c8d
   129e6:	ff 75 08             	push   0x8(%ebp)
   129e9:	e8 94 fe ff ff       	call   12882 <do_default_handler>
   129ee:	83 c4 10             	add    $0x10,%esp
}
   129f1:	90                   	nop
   129f2:	c9                   	leave  
   129f3:	c3                   	ret    

000129f4 <do_handler_segment_not_present>:
void do_handler_segment_not_present(const exception_frame_t *frame) {
   129f4:	55                   	push   %ebp
   129f5:	89 e5                	mov    %esp,%ebp
   129f7:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "segment_not_present exception");
   129fa:	83 ec 08             	sub    $0x8,%esp
   129fd:	68 a3 6c 01 00       	push   $0x16ca3
   12a02:	ff 75 08             	push   0x8(%ebp)
   12a05:	e8 78 fe ff ff       	call   12882 <do_default_handler>
   12a0a:	83 c4 10             	add    $0x10,%esp
}
   12a0d:	90                   	nop
   12a0e:	c9                   	leave  
   12a0f:	c3                   	ret    

00012a10 <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(const exception_frame_t *frame) {
   12a10:	55                   	push   %ebp
   12a11:	89 e5                	mov    %esp,%ebp
   12a13:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "stack_segment_fault exception");
   12a16:	83 ec 08             	sub    $0x8,%esp
   12a19:	68 c1 6c 01 00       	push   $0x16cc1
   12a1e:	ff 75 08             	push   0x8(%ebp)
   12a21:	e8 5c fe ff ff       	call   12882 <do_default_handler>
   12a26:	83 c4 10             	add    $0x10,%esp
}
   12a29:	90                   	nop
   12a2a:	c9                   	leave  
   12a2b:	c3                   	ret    

00012a2c <do_handler_general_protection>:
void do_handler_general_protection(const exception_frame_t *frame) {
   12a2c:	55                   	push   %ebp
   12a2d:	89 e5                	mov    %esp,%ebp
   12a2f:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------\n");
   12a32:	83 ec 0c             	sub    $0xc,%esp
   12a35:	68 e0 6c 01 00       	push   $0x16ce0
   12a3a:	e8 35 3b 00 00       	call   16574 <log_printf>
   12a3f:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: General Protection.\n");
   12a42:	83 ec 0c             	sub    $0xc,%esp
   12a45:	68 04 6d 01 00       	push   $0x16d04
   12a4a:	e8 25 3b 00 00       	call   16574 <log_printf>
   12a4f:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_EXT) {
   12a52:	8b 45 08             	mov    0x8(%ebp),%eax
   12a55:	8b 40 34             	mov    0x34(%eax),%eax
   12a58:	83 e0 01             	and    $0x1,%eax
   12a5b:	85 c0                	test   %eax,%eax
   12a5d:	74 12                	je     12a71 <do_handler_general_protection+0x45>
        log_printf("the exception occurred during delivery of an "
   12a5f:	83 ec 0c             	sub    $0xc,%esp
   12a62:	68 30 6d 01 00       	push   $0x16d30
   12a67:	e8 08 3b 00 00       	call   16574 <log_printf>
   12a6c:	83 c4 10             	add    $0x10,%esp
   12a6f:	eb 10                	jmp    12a81 <do_handler_general_protection+0x55>
                "event external to the program, such as an interrupt"
                "or an earlier exception.\n");
    } else {
        log_printf("the exception occurred during delivery of a"
   12a71:	83 ec 0c             	sub    $0xc,%esp
   12a74:	68 ac 6d 01 00       	push   $0x16dac
   12a79:	e8 f6 3a 00 00       	call   16574 <log_printf>
   12a7e:	83 c4 10             	add    $0x10,%esp
                    "software interrupt (INT n, INT3, or INTO).\n");
    }
    
    if (frame->error_code & ERR_IDT) {
   12a81:	8b 45 08             	mov    0x8(%ebp),%eax
   12a84:	8b 40 34             	mov    0x34(%eax),%eax
   12a87:	83 e0 02             	and    $0x2,%eax
   12a8a:	85 c0                	test   %eax,%eax
   12a8c:	74 12                	je     12aa0 <do_handler_general_protection+0x74>
        log_printf("the index portion of the error code refers "
   12a8e:	83 ec 0c             	sub    $0xc,%esp
   12a91:	68 04 6e 01 00       	push   $0x16e04
   12a96:	e8 d9 3a 00 00       	call   16574 <log_printf>
   12a9b:	83 c4 10             	add    $0x10,%esp
   12a9e:	eb 10                	jmp    12ab0 <do_handler_general_protection+0x84>
                    "to a gate descriptor in the IDT\n");
    } else {
        log_printf("the index refers to a descriptor in the GDT\n");
   12aa0:	83 ec 0c             	sub    $0xc,%esp
   12aa3:	68 50 6e 01 00       	push   $0x16e50
   12aa8:	e8 c7 3a 00 00       	call   16574 <log_printf>
   12aad:	83 c4 10             	add    $0x10,%esp
    }
    
    log_printf("segment index: %d\n", frame->error_code & 0xFFF8);
   12ab0:	8b 45 08             	mov    0x8(%ebp),%eax
   12ab3:	8b 40 34             	mov    0x34(%eax),%eax
   12ab6:	25 f8 ff 00 00       	and    $0xfff8,%eax
   12abb:	83 ec 08             	sub    $0x8,%esp
   12abe:	50                   	push   %eax
   12abf:	68 7d 6e 01 00       	push   $0x16e7d
   12ac4:	e8 ab 3a 00 00       	call   16574 <log_printf>
   12ac9:	83 c4 10             	add    $0x10,%esp
    print_exception_fram(frame);
   12acc:	83 ec 0c             	sub    $0xc,%esp
   12acf:	ff 75 08             	push   0x8(%ebp)
   12ad2:	e8 9c fc ff ff       	call   12773 <print_exception_fram>
   12ad7:	83 c4 10             	add    $0x10,%esp
}
   12ada:	90                   	nop
   12adb:	c9                   	leave  
   12adc:	c3                   	ret    

00012add <do_handler_page_fault>:
/**
 * @brief page_fault异常处理函数
 * 
 * @param frame 
 */
void do_handler_page_fault(const exception_frame_t *frame) {
   12add:	55                   	push   %ebp
   12ade:	89 e5                	mov    %esp,%ebp
   12ae0:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------\n");
   12ae3:	83 ec 0c             	sub    $0xc,%esp
   12ae6:	68 e0 6c 01 00       	push   $0x16ce0
   12aeb:	e8 84 3a 00 00       	call   16574 <log_printf>
   12af0:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: Page fault.\n");
   12af3:	83 ec 0c             	sub    $0xc,%esp
   12af6:	68 90 6e 01 00       	push   $0x16e90
   12afb:	e8 74 3a 00 00       	call   16574 <log_printf>
   12b00:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_PAGE_P) {
   12b03:	8b 45 08             	mov    0x8(%ebp),%eax
   12b06:	8b 40 34             	mov    0x34(%eax),%eax
   12b09:	83 e0 01             	and    $0x1,%eax
   12b0c:	85 c0                	test   %eax,%eax
   12b0e:	74 18                	je     12b28 <do_handler_page_fault+0x4b>
        log_printf("page-level protection violation: 0x%x.\n", read_cr2());
   12b10:	e8 32 fc ff ff       	call   12747 <read_cr2>
   12b15:	83 ec 08             	sub    $0x8,%esp
   12b18:	50                   	push   %eax
   12b19:	68 b4 6e 01 00       	push   $0x16eb4
   12b1e:	e8 51 3a 00 00       	call   16574 <log_printf>
   12b23:	83 c4 10             	add    $0x10,%esp
   12b26:	eb 16                	jmp    12b3e <do_handler_page_fault+0x61>
    } else {
        log_printf("Page doesn't present 0x%x\n", read_cr2());
   12b28:	e8 1a fc ff ff       	call   12747 <read_cr2>
   12b2d:	83 ec 08             	sub    $0x8,%esp
   12b30:	50                   	push   %eax
   12b31:	68 dc 6e 01 00       	push   $0x16edc
   12b36:	e8 39 3a 00 00       	call   16574 <log_printf>
   12b3b:	83 c4 10             	add    $0x10,%esp
   }
    
    if (frame->error_code & ERR_PAGE_WR) {
   12b3e:	8b 45 08             	mov    0x8(%ebp),%eax
   12b41:	8b 40 34             	mov    0x34(%eax),%eax
   12b44:	83 e0 02             	and    $0x2,%eax
   12b47:	85 c0                	test   %eax,%eax
   12b49:	74 12                	je     12b5d <do_handler_page_fault+0x80>
        log_printf("The access causing the fault was a write.\n");
   12b4b:	83 ec 0c             	sub    $0xc,%esp
   12b4e:	68 f8 6e 01 00       	push   $0x16ef8
   12b53:	e8 1c 3a 00 00       	call   16574 <log_printf>
   12b58:	83 c4 10             	add    $0x10,%esp
   12b5b:	eb 10                	jmp    12b6d <do_handler_page_fault+0x90>
    } else {
        log_printf("The access causing the fault was a read.\n");
   12b5d:	83 ec 0c             	sub    $0xc,%esp
   12b60:	68 24 6f 01 00       	push   $0x16f24
   12b65:	e8 0a 3a 00 00       	call   16574 <log_printf>
   12b6a:	83 c4 10             	add    $0x10,%esp
    }
    
    if (frame->error_code & ERR_PAGE_US) {
   12b6d:	8b 45 08             	mov    0x8(%ebp),%eax
   12b70:	8b 40 34             	mov    0x34(%eax),%eax
   12b73:	83 e0 04             	and    $0x4,%eax
   12b76:	85 c0                	test   %eax,%eax
   12b78:	74 12                	je     12b8c <do_handler_page_fault+0xaf>
        log_printf("A user-mode access caused the fault.\n");
   12b7a:	83 ec 0c             	sub    $0xc,%esp
   12b7d:	68 50 6f 01 00       	push   $0x16f50
   12b82:	e8 ed 39 00 00       	call   16574 <log_printf>
   12b87:	83 c4 10             	add    $0x10,%esp
   12b8a:	eb 10                	jmp    12b9c <do_handler_page_fault+0xbf>
    } else {
        log_printf("A supervisor-mode access caused the fault.\n");
   12b8c:	83 ec 0c             	sub    $0xc,%esp
   12b8f:	68 78 6f 01 00       	push   $0x16f78
   12b94:	e8 db 39 00 00       	call   16574 <log_printf>
   12b99:	83 c4 10             	add    $0x10,%esp
    }

   print_exception_fram(frame);
   12b9c:	83 ec 0c             	sub    $0xc,%esp
   12b9f:	ff 75 08             	push   0x8(%ebp)
   12ba2:	e8 cc fb ff ff       	call   12773 <print_exception_fram>
   12ba7:	83 c4 10             	add    $0x10,%esp
}
   12baa:	90                   	nop
   12bab:	c9                   	leave  
   12bac:	c3                   	ret    

00012bad <do_handler_fpu_error>:

void do_handler_fpu_error(const exception_frame_t *frame) {
   12bad:	55                   	push   %ebp
   12bae:	89 e5                	mov    %esp,%ebp
   12bb0:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "fpu_error exception\n");
   12bb3:	83 ec 08             	sub    $0x8,%esp
   12bb6:	68 a4 6f 01 00       	push   $0x16fa4
   12bbb:	ff 75 08             	push   0x8(%ebp)
   12bbe:	e8 bf fc ff ff       	call   12882 <do_default_handler>
   12bc3:	83 c4 10             	add    $0x10,%esp
}
   12bc6:	90                   	nop
   12bc7:	c9                   	leave  
   12bc8:	c3                   	ret    

00012bc9 <do_handler_alignment_check>:
void do_handler_alignment_check(const exception_frame_t *frame) {
   12bc9:	55                   	push   %ebp
   12bca:	89 e5                	mov    %esp,%ebp
   12bcc:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "alignment_check exception\n");
   12bcf:	83 ec 08             	sub    $0x8,%esp
   12bd2:	68 b9 6f 01 00       	push   $0x16fb9
   12bd7:	ff 75 08             	push   0x8(%ebp)
   12bda:	e8 a3 fc ff ff       	call   12882 <do_default_handler>
   12bdf:	83 c4 10             	add    $0x10,%esp
}
   12be2:	90                   	nop
   12be3:	c9                   	leave  
   12be4:	c3                   	ret    

00012be5 <do_handler_machine_check>:
void do_handler_machine_check(const exception_frame_t *frame) {
   12be5:	55                   	push   %ebp
   12be6:	89 e5                	mov    %esp,%ebp
   12be8:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "machine_check exception\n");
   12beb:	83 ec 08             	sub    $0x8,%esp
   12bee:	68 d4 6f 01 00       	push   $0x16fd4
   12bf3:	ff 75 08             	push   0x8(%ebp)
   12bf6:	e8 87 fc ff ff       	call   12882 <do_default_handler>
   12bfb:	83 c4 10             	add    $0x10,%esp
}
   12bfe:	90                   	nop
   12bff:	c9                   	leave  
   12c00:	c3                   	ret    

00012c01 <do_handler_smd_exception>:
void do_handler_smd_exception(const exception_frame_t *frame) {
   12c01:	55                   	push   %ebp
   12c02:	89 e5                	mov    %esp,%ebp
   12c04:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "smd_exception exception\n");
   12c07:	83 ec 08             	sub    $0x8,%esp
   12c0a:	68 ed 6f 01 00       	push   $0x16fed
   12c0f:	ff 75 08             	push   0x8(%ebp)
   12c12:	e8 6b fc ff ff       	call   12882 <do_default_handler>
   12c17:	83 c4 10             	add    $0x10,%esp
}
   12c1a:	90                   	nop
   12c1b:	c9                   	leave  
   12c1c:	c3                   	ret    

00012c1d <do_handler_virtual_exception>:
void do_handler_virtual_exception(const exception_frame_t *frame) {
   12c1d:	55                   	push   %ebp
   12c1e:	89 e5                	mov    %esp,%ebp
   12c20:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "virtual_exception exception\n");
   12c23:	83 ec 08             	sub    $0x8,%esp
   12c26:	68 06 70 01 00       	push   $0x17006
   12c2b:	ff 75 08             	push   0x8(%ebp)
   12c2e:	e8 4f fc ff ff       	call   12882 <do_default_handler>
   12c33:	83 c4 10             	add    $0x10,%esp
}
   12c36:	90                   	nop
   12c37:	c9                   	leave  
   12c38:	c3                   	ret    

00012c39 <do_handler_control_exception>:
void do_handler_control_exception(const exception_frame_t *frame) {
   12c39:	55                   	push   %ebp
   12c3a:	89 e5                	mov    %esp,%ebp
   12c3c:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "control_exception exception\n");
   12c3f:	83 ec 08             	sub    $0x8,%esp
   12c42:	68 23 70 01 00       	push   $0x17023
   12c47:	ff 75 08             	push   0x8(%ebp)
   12c4a:	e8 33 fc ff ff       	call   12882 <do_default_handler>
   12c4f:	83 c4 10             	add    $0x10,%esp
}
   12c52:	90                   	nop
   12c53:	c9                   	leave  
   12c54:	c3                   	ret    

00012c55 <idt_install>:
 *
 * @param idt_num 异常的下标
 * @param handler 异常处理程序的偏移地址
 * @return int 成功返回 0 失败放回 -1
 */
int idt_install(const int idt_num, const idt_handler_t handler) {
   12c55:	55                   	push   %ebp
   12c56:	89 e5                	mov    %esp,%ebp
   12c58:	83 ec 08             	sub    $0x8,%esp
  // 1.判断IDT下标是否越界
  if (idt_num >= IDT_TABLE_SIZE || idt_num < 0) return -1;
   12c5b:	81 7d 08 ff 00 00 00 	cmpl   $0xff,0x8(%ebp)
   12c62:	7f 06                	jg     12c6a <idt_install+0x15>
   12c64:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12c68:	79 07                	jns    12c71 <idt_install+0x1c>
   12c6a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12c6f:	eb 25                	jmp    12c96 <idt_install+0x41>
  // 2.在IDT表中设置下标为 idt_num 的中断门,中断门描述符的 DPL <= CPL, 
  //因为中断门是cpu自己从中断描述符表中索引，也可以用 int $中断号主动触发，
  //int $ 主动触发需要中断门描述符的DPL >= CPL，即只能在内核态触发
  //所以没有请求选择子即RPL不用检查，因为没有
  //若目标代码段的特权级更高则发生特权级转换
  gate_desc_set(idt_table + idt_num, KERNEL_SELECTOR_CS, (uint32_t)handler,
   12c71:	8b 45 0c             	mov    0xc(%ebp),%eax
   12c74:	8b 55 08             	mov    0x8(%ebp),%edx
   12c77:	c1 e2 03             	shl    $0x3,%edx
   12c7a:	81 c2 00 aa 04 00    	add    $0x4aa00,%edx
   12c80:	68 00 8e 00 00       	push   $0x8e00
   12c85:	50                   	push   %eax
   12c86:	6a 08                	push   $0x8
   12c88:	52                   	push   %edx
   12c89:	e8 c1 f7 ff ff       	call   1244f <gate_desc_set>
   12c8e:	83 c4 10             	add    $0x10,%esp
                GATE_TYPE_INT | GATE_ATTR_P | GATE_ATTR_DPL_0);

  return 0;
   12c91:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12c96:	c9                   	leave  
   12c97:	c3                   	ret    

00012c98 <init_pic>:

/**
 * @brief  初始化主从8259芯片
 * 
 */
static void init_pic(void) {
   12c98:	55                   	push   %ebp
   12c99:	89 e5                	mov    %esp,%ebp
  //1.对主片(8259A芯片)进行初始化, 写入时必须按照ICW1~4的顺序写入
  outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);  //ICW1:边缘触发，级联模式，需要ICW4
   12c9b:	6a 11                	push   $0x11
   12c9d:	6a 20                	push   $0x20
   12c9f:	e8 5a fa ff ff       	call   126fe <outb>
   12ca4:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW2, PIC_ICW2_IDT_START);                //ICW2:起始中断向量号为0x20
   12ca7:	6a 20                	push   $0x20
   12ca9:	6a 21                	push   $0x21
   12cab:	e8 4e fa ff ff       	call   126fe <outb>
   12cb0:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW3, PIC_ICW3_MASTER_CASCADE);           //ICW3:主片用IR2级联从片
   12cb3:	6a 04                	push   $0x4
   12cb5:	6a 21                	push   $0x21
   12cb7:	e8 42 fa ff ff       	call   126fe <outb>
   12cbc:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW4, PIC_ICW4_8086);                     //ICW4:8086模式，正常EOI
   12cbf:	6a 01                	push   $0x1
   12cc1:	6a 21                	push   $0x21
   12cc3:	e8 36 fa ff ff       	call   126fe <outb>
   12cc8:	83 c4 08             	add    $0x8,%esp

  //2.对从片(8259A芯片)进行初始化
  outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);
   12ccb:	6a 11                	push   $0x11
   12ccd:	68 a0 00 00 00       	push   $0xa0
   12cd2:	e8 27 fa ff ff       	call   126fe <outb>
   12cd7:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW2, PIC_ICW2_IDT_START + 8); //第一块芯片占用了8个中断，所以第二块芯片从第8个中断的下一个开始
   12cda:	6a 28                	push   $0x28
   12cdc:	68 a1 00 00 00       	push   $0xa1
   12ce1:	e8 18 fa ff ff       	call   126fe <outb>
   12ce6:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW3, PIC_ICW3_SLAVE_CASCADE);
   12ce9:	6a 02                	push   $0x2
   12ceb:	68 a1 00 00 00       	push   $0xa1
   12cf0:	e8 09 fa ff ff       	call   126fe <outb>
   12cf5:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW4, PIC_ICW4_8086);
   12cf8:	6a 01                	push   $0x1
   12cfa:	68 a1 00 00 00       	push   $0xa1
   12cff:	e8 fa f9 ff ff       	call   126fe <outb>
   12d04:	83 c4 08             	add    $0x8,%esp


  //3.初始化完两块8259芯片后，还需要为每一个中断设置处理程序
  //才可以去接收中断，所以现在要屏蔽中断，IMR位置1则屏蔽该中断请求，0则不屏蔽
  outb(PIC0_IMR, 0xfb); //屏蔽主片除 irq2(第3位) 以外的位传来的中断，(1111 1011)
   12d07:	68 fb 00 00 00       	push   $0xfb
   12d0c:	6a 21                	push   $0x21
   12d0e:	e8 eb f9 ff ff       	call   126fe <outb>
   12d13:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_IMR, 0xff); //屏蔽从片的所有中断
   12d16:	68 ff 00 00 00       	push   $0xff
   12d1b:	68 a1 00 00 00       	push   $0xa1
   12d20:	e8 d9 f9 ff ff       	call   126fe <outb>
   12d25:	83 c4 08             	add    $0x8,%esp


}
   12d28:	90                   	nop
   12d29:	c9                   	leave  
   12d2a:	c3                   	ret    

00012d2b <idt_init>:

/**
 * @brief  初始化中断向量表
 *
 */
void idt_init(void) {
   12d2b:	55                   	push   %ebp
   12d2c:	89 e5                	mov    %esp,%ebp
   12d2e:	83 ec 18             	sub    $0x18,%esp
  // 1.初始化IDT中的各个中断门(未知异常类型)
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   12d31:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12d38:	eb 17                	jmp    12d51 <idt_init+0x26>
    idt_install(i, (idt_handler_t)exception_handler_unknown);
   12d3a:	83 ec 08             	sub    $0x8,%esp
   12d3d:	68 2a 00 01 00       	push   $0x1002a
   12d42:	ff 75 f4             	push   -0xc(%ebp)
   12d45:	e8 0b ff ff ff       	call   12c55 <idt_install>
   12d4a:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   12d4d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12d51:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   12d58:	7e e0                	jle    12d3a <idt_init+0xf>
  }

  // 2.绑定异常中断向量表中对应下标的中断门的处理函数
  idt_install(IDT0_DE, (idt_handler_t)exception_handler_divider);
   12d5a:	83 ec 08             	sub    $0x8,%esp
   12d5d:	68 47 00 01 00       	push   $0x10047
   12d62:	6a 00                	push   $0x0
   12d64:	e8 ec fe ff ff       	call   12c55 <idt_install>
   12d69:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT1_DB, (idt_handler_t)exception_handler_debug);
   12d6c:	83 ec 08             	sub    $0x8,%esp
   12d6f:	68 64 00 01 00       	push   $0x10064
   12d74:	6a 01                	push   $0x1
   12d76:	e8 da fe ff ff       	call   12c55 <idt_install>
   12d7b:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT2_NMI, (idt_handler_t)exception_handler_nmi);
   12d7e:	83 ec 08             	sub    $0x8,%esp
   12d81:	68 81 00 01 00       	push   $0x10081
   12d86:	6a 02                	push   $0x2
   12d88:	e8 c8 fe ff ff       	call   12c55 <idt_install>
   12d8d:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT3_BP, (idt_handler_t)exception_handler_breakpoint);
   12d90:	83 ec 08             	sub    $0x8,%esp
   12d93:	68 9e 00 01 00       	push   $0x1009e
   12d98:	6a 03                	push   $0x3
   12d9a:	e8 b6 fe ff ff       	call   12c55 <idt_install>
   12d9f:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT4_OF, (idt_handler_t)exception_handler_overflow);
   12da2:	83 ec 08             	sub    $0x8,%esp
   12da5:	68 bb 00 01 00       	push   $0x100bb
   12daa:	6a 04                	push   $0x4
   12dac:	e8 a4 fe ff ff       	call   12c55 <idt_install>
   12db1:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT5_BR, (idt_handler_t)exception_handler_bound_range);
   12db4:	83 ec 08             	sub    $0x8,%esp
   12db7:	68 d8 00 01 00       	push   $0x100d8
   12dbc:	6a 05                	push   $0x5
   12dbe:	e8 92 fe ff ff       	call   12c55 <idt_install>
   12dc3:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT6_UD, (idt_handler_t)exception_handler_invalid_opcode);
   12dc6:	83 ec 08             	sub    $0x8,%esp
   12dc9:	68 f5 00 01 00       	push   $0x100f5
   12dce:	6a 06                	push   $0x6
   12dd0:	e8 80 fe ff ff       	call   12c55 <idt_install>
   12dd5:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT7_NM, (idt_handler_t)exception_handler_device_unavailable);
   12dd8:	83 ec 08             	sub    $0x8,%esp
   12ddb:	68 12 01 01 00       	push   $0x10112
   12de0:	6a 07                	push   $0x7
   12de2:	e8 6e fe ff ff       	call   12c55 <idt_install>
   12de7:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT8_DF, (idt_handler_t)exception_handler_double_fault);
   12dea:	83 ec 08             	sub    $0x8,%esp
   12ded:	68 2f 01 01 00       	push   $0x1012f
   12df2:	6a 08                	push   $0x8
   12df4:	e8 5c fe ff ff       	call   12c55 <idt_install>
   12df9:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT10_TS, (idt_handler_t)exception_handler_invalid_tss);
   12dfc:	83 ec 08             	sub    $0x8,%esp
   12dff:	68 4a 01 01 00       	push   $0x1014a
   12e04:	6a 0a                	push   $0xa
   12e06:	e8 4a fe ff ff       	call   12c55 <idt_install>
   12e0b:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT11_NP, (idt_handler_t)exception_handler_segment_not_present);
   12e0e:	83 ec 08             	sub    $0x8,%esp
   12e11:	68 65 01 01 00       	push   $0x10165
   12e16:	6a 0b                	push   $0xb
   12e18:	e8 38 fe ff ff       	call   12c55 <idt_install>
   12e1d:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT12_SS, (idt_handler_t)exception_handler_stack_segment_fault);
   12e20:	83 ec 08             	sub    $0x8,%esp
   12e23:	68 80 01 01 00       	push   $0x10180
   12e28:	6a 0c                	push   $0xc
   12e2a:	e8 26 fe ff ff       	call   12c55 <idt_install>
   12e2f:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT13_GP, (idt_handler_t)exception_handler_general_protection);
   12e32:	83 ec 08             	sub    $0x8,%esp
   12e35:	68 9b 01 01 00       	push   $0x1019b
   12e3a:	6a 0d                	push   $0xd
   12e3c:	e8 14 fe ff ff       	call   12c55 <idt_install>
   12e41:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT14_PF, (idt_handler_t)exception_handler_page_fault);
   12e44:	83 ec 08             	sub    $0x8,%esp
   12e47:	68 b6 01 01 00       	push   $0x101b6
   12e4c:	6a 0e                	push   $0xe
   12e4e:	e8 02 fe ff ff       	call   12c55 <idt_install>
   12e53:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT16_MF, (idt_handler_t)exception_handler_fpu_error);
   12e56:	83 ec 08             	sub    $0x8,%esp
   12e59:	68 d1 01 01 00       	push   $0x101d1
   12e5e:	6a 10                	push   $0x10
   12e60:	e8 f0 fd ff ff       	call   12c55 <idt_install>
   12e65:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT17_AC, (idt_handler_t)exception_handler_alignment_check);
   12e68:	83 ec 08             	sub    $0x8,%esp
   12e6b:	68 ee 01 01 00       	push   $0x101ee
   12e70:	6a 11                	push   $0x11
   12e72:	e8 de fd ff ff       	call   12c55 <idt_install>
   12e77:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT18_MC, (idt_handler_t)exception_handler_machine_check);
   12e7a:	83 ec 08             	sub    $0x8,%esp
   12e7d:	68 09 02 01 00       	push   $0x10209
   12e82:	6a 12                	push   $0x12
   12e84:	e8 cc fd ff ff       	call   12c55 <idt_install>
   12e89:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT19_XM, (idt_handler_t)exception_handler_smd_exception);
   12e8c:	83 ec 08             	sub    $0x8,%esp
   12e8f:	68 26 02 01 00       	push   $0x10226
   12e94:	6a 13                	push   $0x13
   12e96:	e8 ba fd ff ff       	call   12c55 <idt_install>
   12e9b:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT20_VE, (idt_handler_t)exception_handler_virtual_exception);
   12e9e:	83 ec 08             	sub    $0x8,%esp
   12ea1:	68 43 02 01 00       	push   $0x10243
   12ea6:	6a 14                	push   $0x14
   12ea8:	e8 a8 fd ff ff       	call   12c55 <idt_install>
   12ead:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT21_CP, (idt_handler_t)exception_handler_control_exception);
   12eb0:	83 ec 08             	sub    $0x8,%esp
   12eb3:	68 60 02 01 00       	push   $0x10260
   12eb8:	6a 15                	push   $0x15
   12eba:	e8 96 fd ff ff       	call   12c55 <idt_install>
   12ebf:	83 c4 10             	add    $0x10,%esp

  //3.加载IDT
  lidt((uint32_t)idt_table, sizeof(idt_table));
   12ec2:	b8 00 aa 04 00       	mov    $0x4aa00,%eax
   12ec7:	83 ec 08             	sub    $0x8,%esp
   12eca:	68 00 08 00 00       	push   $0x800
   12ecf:	50                   	push   %eax
   12ed0:	e8 4a f8 ff ff       	call   1271f <lidt>
   12ed5:	83 c4 10             	add    $0x10,%esp

  //4.初始化8259设备中断芯片
  init_pic();
   12ed8:	e8 bb fd ff ff       	call   12c98 <init_pic>
}
   12edd:	90                   	nop
   12ede:	c9                   	leave  
   12edf:	c3                   	ret    

00012ee0 <idt_enable>:
/**
 * @brief  开启外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号,即IDT中的下标
 */
void idt_enable(uint8_t irq_num) {
   12ee0:	55                   	push   %ebp
   12ee1:	89 e5                	mov    %esp,%ebp
   12ee3:	53                   	push   %ebx
   12ee4:	83 ec 14             	sub    $0x14,%esp
   12ee7:	8b 45 08             	mov    0x8(%ebp),%eax
   12eea:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   12eed:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   12ef1:	76 7f                	jbe    12f72 <idt_enable+0x92>
   12ef3:	80 7d e8 2e          	cmpb   $0x2e,-0x18(%ebp)
   12ef7:	77 79                	ja     12f72 <idt_enable+0x92>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   12ef9:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置0，即不屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   12efd:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   12f01:	77 33                	ja     12f36 <idt_enable+0x56>
    uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   12f03:	6a 21                	push   $0x21
   12f05:	e8 d7 f7 ff ff       	call   126e1 <inb>
   12f0a:	83 c4 04             	add    $0x4,%esp
   12f0d:	89 c3                	mov    %eax,%ebx
   12f0f:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   12f13:	ba 01 00 00 00       	mov    $0x1,%edx
   12f18:	89 c1                	mov    %eax,%ecx
   12f1a:	d3 e2                	shl    %cl,%edx
   12f1c:	89 d0                	mov    %edx,%eax
   12f1e:	f7 d0                	not    %eax
   12f20:	21 d8                	and    %ebx,%eax
   12f22:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   12f25:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   12f29:	50                   	push   %eax
   12f2a:	6a 21                	push   $0x21
   12f2c:	e8 cd f7 ff ff       	call   126fe <outb>
   12f31:	83 c4 08             	add    $0x8,%esp
   12f34:	eb 3d                	jmp    12f73 <idt_enable+0x93>
  } else {
    uint8_t mask = inb(PIC1_IMR) & ~(1 << (irq_num - 8));
   12f36:	68 a1 00 00 00       	push   $0xa1
   12f3b:	e8 a1 f7 ff ff       	call   126e1 <inb>
   12f40:	83 c4 04             	add    $0x4,%esp
   12f43:	89 c3                	mov    %eax,%ebx
   12f45:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   12f49:	83 e8 08             	sub    $0x8,%eax
   12f4c:	ba 01 00 00 00       	mov    $0x1,%edx
   12f51:	89 c1                	mov    %eax,%ecx
   12f53:	d3 e2                	shl    %cl,%edx
   12f55:	89 d0                	mov    %edx,%eax
   12f57:	f7 d0                	not    %eax
   12f59:	21 d8                	and    %ebx,%eax
   12f5b:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   12f5e:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   12f62:	50                   	push   %eax
   12f63:	68 a1 00 00 00       	push   $0xa1
   12f68:	e8 91 f7 ff ff       	call   126fe <outb>
   12f6d:	83 c4 08             	add    $0x8,%esp
   12f70:	eb 01                	jmp    12f73 <idt_enable+0x93>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   12f72:	90                   	nop
  }
  
}
   12f73:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   12f76:	c9                   	leave  
   12f77:	c3                   	ret    

00012f78 <idt_disable>:
/**
 * @brief  关闭外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号，即IDT中的下标
 */
void idt_disable(uint8_t irq_num) {
   12f78:	55                   	push   %ebp
   12f79:	89 e5                	mov    %esp,%ebp
   12f7b:	53                   	push   %ebx
   12f7c:	83 ec 14             	sub    $0x14,%esp
   12f7f:	8b 45 08             	mov    0x8(%ebp),%eax
   12f82:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   12f85:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   12f89:	76 7b                	jbe    13006 <idt_disable+0x8e>
   12f8b:	80 7d e8 2f          	cmpb   $0x2f,-0x18(%ebp)
   12f8f:	77 75                	ja     13006 <idt_disable+0x8e>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   12f91:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置1，即屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   12f95:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   12f99:	77 31                	ja     12fcc <idt_disable+0x54>
    uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   12f9b:	6a 21                	push   $0x21
   12f9d:	e8 3f f7 ff ff       	call   126e1 <inb>
   12fa2:	83 c4 04             	add    $0x4,%esp
   12fa5:	89 c3                	mov    %eax,%ebx
   12fa7:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   12fab:	ba 01 00 00 00       	mov    $0x1,%edx
   12fb0:	89 c1                	mov    %eax,%ecx
   12fb2:	d3 e2                	shl    %cl,%edx
   12fb4:	89 d0                	mov    %edx,%eax
   12fb6:	09 d8                	or     %ebx,%eax
   12fb8:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   12fbb:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   12fbf:	50                   	push   %eax
   12fc0:	6a 21                	push   $0x21
   12fc2:	e8 37 f7 ff ff       	call   126fe <outb>
   12fc7:	83 c4 08             	add    $0x8,%esp
   12fca:	eb 3b                	jmp    13007 <idt_disable+0x8f>
  } else {
    uint8_t mask = inb(PIC1_IMR) | (1 << (irq_num - 8));
   12fcc:	68 a1 00 00 00       	push   $0xa1
   12fd1:	e8 0b f7 ff ff       	call   126e1 <inb>
   12fd6:	83 c4 04             	add    $0x4,%esp
   12fd9:	89 c3                	mov    %eax,%ebx
   12fdb:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   12fdf:	83 e8 08             	sub    $0x8,%eax
   12fe2:	ba 01 00 00 00       	mov    $0x1,%edx
   12fe7:	89 c1                	mov    %eax,%ecx
   12fe9:	d3 e2                	shl    %cl,%edx
   12feb:	89 d0                	mov    %edx,%eax
   12fed:	09 d8                	or     %ebx,%eax
   12fef:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   12ff2:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   12ff6:	50                   	push   %eax
   12ff7:	68 a1 00 00 00       	push   $0xa1
   12ffc:	e8 fd f6 ff ff       	call   126fe <outb>
   13001:	83 c4 08             	add    $0x8,%esp
   13004:	eb 01                	jmp    13007 <idt_disable+0x8f>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   13006:	90                   	nop
  }
  
}
   13007:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1300a:	c9                   	leave  
   1300b:	c3                   	ret    

0001300c <idt_disable_global>:

/**
 * @brief  关闭全局中断
 * 
 */
void idt_disable_global(void) {
   1300c:	55                   	push   %ebp
   1300d:	89 e5                	mov    %esp,%ebp
  cli();
   1300f:	e8 b8 f6 ff ff       	call   126cc <cli>
}
   13014:	90                   	nop
   13015:	5d                   	pop    %ebp
   13016:	c3                   	ret    

00013017 <idt_enable_global>:

/**
 * @brief  开启全局中断
 * 
 */
void idt_enable_global(void) {
   13017:	55                   	push   %ebp
   13018:	89 e5                	mov    %esp,%ebp
  sti();
   1301a:	e8 b4 f6 ff ff       	call   126d3 <sti>
}
   1301f:	90                   	nop
   13020:	5d                   	pop    %ebp
   13021:	c3                   	ret    

00013022 <pic_send_eoi>:
 * @brief  将OCW2寄存器的7~5位置为 001，用普通的EOI结束方式
 *         向8259A发送EOI命令，8259A会将ISR中优先级最高的位置0
 *
 * @param irq_num 中断向量号，即IDT下标
 */
void pic_send_eoi(int irq_num) {
   13022:	55                   	push   %ebp
   13023:	89 e5                	mov    %esp,%ebp
  //1.获取该中断对应的IRQ标号
  irq_num -= PIC_ICW2_IDT_START;
   13025:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
  //2.判断标号是否越界,若不越界则交给对应芯片处理
  if (irq_num < 0 || irq_num > 15) return;
   13029:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1302d:	78 29                	js     13058 <pic_send_eoi+0x36>
   1302f:	83 7d 08 0f          	cmpl   $0xf,0x8(%ebp)
   13033:	7f 23                	jg     13058 <pic_send_eoi+0x36>

  //3.若中断来自主片则只需向主片发送EOI
  outb(PIC0_OCW2, PIC_OCW2_EOI);
   13035:	6a 20                	push   $0x20
   13037:	6a 20                	push   $0x20
   13039:	e8 c0 f6 ff ff       	call   126fe <outb>
   1303e:	83 c4 08             	add    $0x8,%esp

  //4.若中断来自从片则还需向从片发送EOI
  if (irq_num >= 8) { 
   13041:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   13045:	7e 12                	jle    13059 <pic_send_eoi+0x37>
    outb(PIC1_OCW2, PIC_OCW2_EOI);
   13047:	6a 20                	push   $0x20
   13049:	68 a0 00 00 00       	push   $0xa0
   1304e:	e8 ab f6 ff ff       	call   126fe <outb>
   13053:	83 c4 08             	add    $0x8,%esp
   13056:	eb 01                	jmp    13059 <pic_send_eoi+0x37>
  if (irq_num < 0 || irq_num > 15) return;
   13058:	90                   	nop
  }

}
   13059:	c9                   	leave  
   1305a:	c3                   	ret    

0001305b <idt_enter_protection>:

/**
 * @brief  
 * 
 */
idt_state_t idt_enter_protection(void) {
   1305b:	55                   	push   %ebp
   1305c:	89 e5                	mov    %esp,%ebp
   1305e:	83 ec 10             	sub    $0x10,%esp
  idt_state_t state = read_eflags();
   13061:	e8 f2 f6 ff ff       	call   12758 <read_eflags>
   13066:	89 45 fc             	mov    %eax,-0x4(%ebp)
  idt_disable_global();
   13069:	e8 9e ff ff ff       	call   1300c <idt_disable_global>
  return state;;
   1306e:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   13071:	c9                   	leave  
   13072:	c3                   	ret    

00013073 <idt_leave_protection>:
/**
 * @brief  
 * 
 * @return idt_state_t 
 */
void idt_leave_protection(idt_state_t state){
   13073:	55                   	push   %ebp
   13074:	89 e5                	mov    %esp,%ebp
  write_eflags(state);
   13076:	ff 75 08             	push   0x8(%ebp)
   13079:	e8 ea f6 ff ff       	call   12768 <write_eflags>
   1307e:	83 c4 04             	add    $0x4,%esp
}
   13081:	90                   	nop
   13082:	c9                   	leave  
   13083:	c3                   	ret    

00013084 <sys_print_msg>:
 * @brief 临时的格式化输出系统调用
 * 
 * @param fmt 
 * @param arg 
 */
void sys_print_msg(const char *fmt, int arg) {
   13084:	55                   	push   %ebp
   13085:	89 e5                	mov    %esp,%ebp
   13087:	83 ec 08             	sub    $0x8,%esp
    log_printf(fmt, arg);
   1308a:	83 ec 08             	sub    $0x8,%esp
   1308d:	ff 75 0c             	push   0xc(%ebp)
   13090:	ff 75 08             	push   0x8(%ebp)
   13093:	e8 dc 34 00 00       	call   16574 <log_printf>
   13098:	83 c4 10             	add    $0x10,%esp
}
   1309b:	90                   	nop
   1309c:	c9                   	leave  
   1309d:	c3                   	ret    

0001309e <do_handler_syscall>:
/**
 * @brief 门调用处理函数，通过定义的系统调用id，将该调用分发到正确的系统调用上
 * 
 * @param frame 
 */
void do_handler_syscall(syscall_frame_t* frame) {
   1309e:	55                   	push   %ebp
   1309f:	89 e5                	mov    %esp,%ebp
   130a1:	53                   	push   %ebx
   130a2:	83 ec 14             	sub    $0x14,%esp
    if (frame->function_id < sizeof(sys_table) / sizeof(sys_table[0])) {    //当前系统调用存在
   130a5:	8b 45 08             	mov    0x8(%ebp),%eax
   130a8:	8b 40 3c             	mov    0x3c(%eax),%eax
   130ab:	83 f8 3a             	cmp    $0x3a,%eax
   130ae:	77 48                	ja     130f8 <do_handler_syscall+0x5a>
        sys_handler_t handler = sys_table[frame->function_id];
   130b0:	8b 45 08             	mov    0x8(%ebp),%eax
   130b3:	8b 40 3c             	mov    0x3c(%eax),%eax
   130b6:	8b 04 85 40 70 01 00 	mov    0x17040(,%eax,4),%eax
   130bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (handler) {
   130c0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   130c4:	74 32                	je     130f8 <do_handler_syscall+0x5a>
            //直接将4个参数全部传入即可，
            //因为是按从右到左的顺序将参数压栈，所以原始的参数只要是从arg0开始赋值的即可，
            //多余的参数在高地址处，不影响handler对应的真正的系统调用
            int ret = handler(frame->arg0, frame->arg1, frame->arg2, frame->arg3);
   130c6:	8b 45 08             	mov    0x8(%ebp),%eax
   130c9:	8b 58 4c             	mov    0x4c(%eax),%ebx
   130cc:	8b 45 08             	mov    0x8(%ebp),%eax
   130cf:	8b 48 48             	mov    0x48(%eax),%ecx
   130d2:	8b 45 08             	mov    0x8(%ebp),%eax
   130d5:	8b 50 44             	mov    0x44(%eax),%edx
   130d8:	8b 45 08             	mov    0x8(%ebp),%eax
   130db:	8b 40 40             	mov    0x40(%eax),%eax
   130de:	53                   	push   %ebx
   130df:	51                   	push   %ecx
   130e0:	52                   	push   %edx
   130e1:	50                   	push   %eax
   130e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   130e5:	ff d0                	call   *%eax
   130e7:	83 c4 10             	add    $0x10,%esp
   130ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
            //正常函数返回后会将返回值先存放到eax寄存器中，再eax中的值放入对应接收返回值的内存中
            //此处用eax先接收ret，在调用门返回后再从eax中取处该值
            frame->eax = ret;
   130ed:	8b 55 f0             	mov    -0x10(%ebp),%edx
   130f0:	8b 45 08             	mov    0x8(%ebp),%eax
   130f3:	89 50 30             	mov    %edx,0x30(%eax)
            return;
   130f6:	eb 30                	jmp    13128 <do_handler_syscall+0x8a>
        }
    }
    
    //打印系统调用失败的异常日志
    task_t *task = task_current();
   130f8:	e8 83 e8 ff ff       	call   11980 <task_current>
   130fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
    log_printf("task: %s, Unknown syscall_id: %d\n", task->name, frame->function_id);
   13100:	8b 45 08             	mov    0x8(%ebp),%eax
   13103:	8b 40 3c             	mov    0x3c(%eax),%eax
   13106:	8b 55 ec             	mov    -0x14(%ebp),%edx
   13109:	83 c2 20             	add    $0x20,%edx
   1310c:	83 ec 04             	sub    $0x4,%esp
   1310f:	50                   	push   %eax
   13110:	52                   	push   %edx
   13111:	68 2c 71 01 00       	push   $0x1712c
   13116:	e8 59 34 00 00       	call   16574 <log_printf>
   1311b:	83 c4 10             	add    $0x10,%esp
    frame->eax = -1;
   1311e:	8b 45 08             	mov    0x8(%ebp),%eax
   13121:	c7 40 30 ff ff ff ff 	movl   $0xffffffff,0x30(%eax)

   13128:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1312b:	c9                   	leave  
   1312c:	c3                   	ret    

0001312d <inb>:
static inline uint8_t inb(uint16_t port) {
   1312d:	55                   	push   %ebp
   1312e:	89 e5                	mov    %esp,%ebp
   13130:	83 ec 14             	sub    $0x14,%esp
   13133:	8b 45 08             	mov    0x8(%ebp),%eax
   13136:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   1313a:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1313e:	89 c2                	mov    %eax,%edx
   13140:	ec                   	in     (%dx),%al
   13141:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   13144:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   13148:	c9                   	leave  
   13149:	c3                   	ret    

0001314a <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   1314a:	55                   	push   %ebp
   1314b:	89 e5                	mov    %esp,%ebp
   1314d:	83 ec 08             	sub    $0x8,%esp
   13150:	8b 45 08             	mov    0x8(%ebp),%eax
   13153:	8b 55 0c             	mov    0xc(%ebp),%edx
   13156:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   1315a:	89 d0                	mov    %edx,%eax
   1315c:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   1315f:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   13163:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   13167:	ee                   	out    %al,(%dx)
}
   13168:	90                   	nop
   13169:	c9                   	leave  
   1316a:	c3                   	ret    

0001316b <read_cursor_pos>:
/**
 * @brief 获取光标位置
 *
 * @return int
 */
static inline int read_cursor_pos(void) {
   1316b:	55                   	push   %ebp
   1316c:	89 e5                	mov    %esp,%ebp
   1316e:	83 ec 18             	sub    $0x18,%esp
  //TODO:加锁
  idt_state_t state = idt_enter_protection();
   13171:	e8 e5 fe ff ff       	call   1305b <idt_enter_protection>
   13176:	89 45 f4             	mov    %eax,-0xc(%ebp)

  int pos;
  // 光标位置由两个字节组成
  outb(0x3d4, 0xf);  // 访问低8位
   13179:	83 ec 08             	sub    $0x8,%esp
   1317c:	6a 0f                	push   $0xf
   1317e:	68 d4 03 00 00       	push   $0x3d4
   13183:	e8 c2 ff ff ff       	call   1314a <outb>
   13188:	83 c4 10             	add    $0x10,%esp
  pos = inb(0x3d5);
   1318b:	83 ec 0c             	sub    $0xc,%esp
   1318e:	68 d5 03 00 00       	push   $0x3d5
   13193:	e8 95 ff ff ff       	call   1312d <inb>
   13198:	83 c4 10             	add    $0x10,%esp
   1319b:	0f b6 c0             	movzbl %al,%eax
   1319e:	89 45 f0             	mov    %eax,-0x10(%ebp)

  outb(0x3d4, 0xe);  // 访问高8位
   131a1:	83 ec 08             	sub    $0x8,%esp
   131a4:	6a 0e                	push   $0xe
   131a6:	68 d4 03 00 00       	push   $0x3d4
   131ab:	e8 9a ff ff ff       	call   1314a <outb>
   131b0:	83 c4 10             	add    $0x10,%esp
  pos |= inb(0x3d5) << 8;
   131b3:	83 ec 0c             	sub    $0xc,%esp
   131b6:	68 d5 03 00 00       	push   $0x3d5
   131bb:	e8 6d ff ff ff       	call   1312d <inb>
   131c0:	83 c4 10             	add    $0x10,%esp
   131c3:	0f b6 c0             	movzbl %al,%eax
   131c6:	c1 e0 08             	shl    $0x8,%eax
   131c9:	09 45 f0             	or     %eax,-0x10(%ebp)

  //TODO:解锁
  idt_leave_protection(state);
   131cc:	83 ec 0c             	sub    $0xc,%esp
   131cf:	ff 75 f4             	push   -0xc(%ebp)
   131d2:	e8 9c fe ff ff       	call   13073 <idt_leave_protection>
   131d7:	83 c4 10             	add    $0x10,%esp
  return pos;
   131da:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   131dd:	c9                   	leave  
   131de:	c3                   	ret    

000131df <update_cursor_pos>:
 * @brief 更新光标的位置
 *
 * @param console
 * @return int
 */
static inline int update_cursor_pos(console_t *console) {
   131df:	55                   	push   %ebp
   131e0:	89 e5                	mov    %esp,%ebp
   131e2:	83 ec 18             	sub    $0x18,%esp
  //TODO:加锁
  idt_state_t state = idt_enter_protection();
   131e5:	e8 71 fe ff ff       	call   1305b <idt_enter_protection>
   131ea:	89 45 f4             	mov    %eax,-0xc(%ebp)

  //计算以当前控制台为屏幕显示区域时的光标位置
  uint16_t pos = console->cursor_row * console->display_cols +
   131ed:	8b 45 08             	mov    0x8(%ebp),%eax
   131f0:	8b 40 10             	mov    0x10(%eax),%eax
   131f3:	89 c2                	mov    %eax,%edx
   131f5:	8b 45 08             	mov    0x8(%ebp),%eax
   131f8:	8b 40 0c             	mov    0xc(%eax),%eax
   131fb:	0f af d0             	imul   %eax,%edx
                 console->cursor_col +
   131fe:	8b 45 08             	mov    0x8(%ebp),%eax
   13201:	8b 40 14             	mov    0x14(%eax),%eax
  uint16_t pos = console->cursor_row * console->display_cols +
   13204:	01 c2                	add    %eax,%edx
                 ((uint32_t)console->disp_base - CONSOLE_DISP_START_ADDR) /
   13206:	8b 45 08             	mov    0x8(%ebp),%eax
   13209:	8b 40 04             	mov    0x4(%eax),%eax
   1320c:	2d 00 80 0b 00       	sub    $0xb8000,%eax
   13211:	d1 e8                	shr    %eax
  uint16_t pos = console->cursor_row * console->display_cols +
   13213:	01 d0                	add    %edx,%eax
   13215:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
                     sizeof(disp_char_t);

  // 光标位置由两个字节组成
  outb(0x3d4, 0xf);  // 访问低8位
   13219:	83 ec 08             	sub    $0x8,%esp
   1321c:	6a 0f                	push   $0xf
   1321e:	68 d4 03 00 00       	push   $0x3d4
   13223:	e8 22 ff ff ff       	call   1314a <outb>
   13228:	83 c4 10             	add    $0x10,%esp
  outb(0x3d5, (uint8_t)(pos & 0xff));
   1322b:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   1322f:	0f b6 c0             	movzbl %al,%eax
   13232:	83 ec 08             	sub    $0x8,%esp
   13235:	50                   	push   %eax
   13236:	68 d5 03 00 00       	push   $0x3d5
   1323b:	e8 0a ff ff ff       	call   1314a <outb>
   13240:	83 c4 10             	add    $0x10,%esp

  outb(0x3d4, 0xe);  // 访问高8位
   13243:	83 ec 08             	sub    $0x8,%esp
   13246:	6a 0e                	push   $0xe
   13248:	68 d4 03 00 00       	push   $0x3d4
   1324d:	e8 f8 fe ff ff       	call   1314a <outb>
   13252:	83 c4 10             	add    $0x10,%esp
  outb(0x3d5, (uint8_t)((pos >> 8) & 0xff));
   13255:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   13259:	66 c1 e8 08          	shr    $0x8,%ax
   1325d:	0f b6 c0             	movzbl %al,%eax
   13260:	83 ec 08             	sub    $0x8,%esp
   13263:	50                   	push   %eax
   13264:	68 d5 03 00 00       	push   $0x3d5
   13269:	e8 dc fe ff ff       	call   1314a <outb>
   1326e:	83 c4 10             	add    $0x10,%esp

  //TODO:解锁
  idt_leave_protection(state);
   13271:	83 ec 0c             	sub    $0xc,%esp
   13274:	ff 75 f4             	push   -0xc(%ebp)
   13277:	e8 f7 fd ff ff       	call   13073 <idt_leave_protection>
   1327c:	83 c4 10             	add    $0x10,%esp
  return pos;
   1327f:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
}
   13283:	c9                   	leave  
   13284:	c3                   	ret    

00013285 <erase_rows>:
 *
 * @param console
 * @param start
 * @param end
 */
static inline void erase_rows(console_t *console, int start, int end) {
   13285:	55                   	push   %ebp
   13286:	89 e5                	mov    %esp,%ebp
   13288:	83 ec 10             	sub    $0x10,%esp
  disp_char_t *disp_start = console->disp_base + console->display_cols * start;
   1328b:	8b 45 08             	mov    0x8(%ebp),%eax
   1328e:	8b 48 04             	mov    0x4(%eax),%ecx
   13291:	8b 45 08             	mov    0x8(%ebp),%eax
   13294:	8b 50 0c             	mov    0xc(%eax),%edx
   13297:	8b 45 0c             	mov    0xc(%ebp),%eax
   1329a:	0f af c2             	imul   %edx,%eax
   1329d:	01 c0                	add    %eax,%eax
   1329f:	01 c8                	add    %ecx,%eax
   132a1:	89 45 fc             	mov    %eax,-0x4(%ebp)
  disp_char_t *disp_end =
      console->disp_base + console->display_cols * (end + 1);
   132a4:	8b 45 08             	mov    0x8(%ebp),%eax
   132a7:	8b 48 04             	mov    0x4(%eax),%ecx
   132aa:	8b 45 08             	mov    0x8(%ebp),%eax
   132ad:	8b 40 0c             	mov    0xc(%eax),%eax
   132b0:	8b 55 10             	mov    0x10(%ebp),%edx
   132b3:	83 c2 01             	add    $0x1,%edx
   132b6:	0f af c2             	imul   %edx,%eax
   132b9:	01 c0                	add    %eax,%eax
  disp_char_t *disp_end =
   132bb:	01 c8                	add    %ecx,%eax
   132bd:	89 45 f8             	mov    %eax,-0x8(%ebp)

  while (disp_start < disp_end) {
   132c0:	eb 4d                	jmp    1330f <erase_rows+0x8a>
    disp_start->c = ' ';
   132c2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   132c5:	c6 00 20             	movb   $0x20,(%eax)
    disp_start->foreground = console->foreground;
   132c8:	8b 45 08             	mov    0x8(%ebp),%eax
   132cb:	8b 40 18             	mov    0x18(%eax),%eax
   132ce:	c1 e0 04             	shl    $0x4,%eax
   132d1:	c0 f8 04             	sar    $0x4,%al
   132d4:	8b 55 fc             	mov    -0x4(%ebp),%edx
   132d7:	83 e0 0f             	and    $0xf,%eax
   132da:	89 c1                	mov    %eax,%ecx
   132dc:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   132e0:	83 e0 f0             	and    $0xfffffff0,%eax
   132e3:	09 c8                	or     %ecx,%eax
   132e5:	88 42 01             	mov    %al,0x1(%edx)
    disp_start->background = console->background;
   132e8:	8b 45 08             	mov    0x8(%ebp),%eax
   132eb:	8b 40 1c             	mov    0x1c(%eax),%eax
   132ee:	c1 e0 05             	shl    $0x5,%eax
   132f1:	c0 f8 05             	sar    $0x5,%al
   132f4:	8b 55 fc             	mov    -0x4(%ebp),%edx
   132f7:	83 e0 07             	and    $0x7,%eax
   132fa:	c1 e0 04             	shl    $0x4,%eax
   132fd:	89 c1                	mov    %eax,%ecx
   132ff:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   13303:	83 e0 8f             	and    $0xffffff8f,%eax
   13306:	09 c8                	or     %ecx,%eax
   13308:	88 42 01             	mov    %al,0x1(%edx)

    disp_start++;
   1330b:	83 45 fc 02          	addl   $0x2,-0x4(%ebp)
  while (disp_start < disp_end) {
   1330f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13312:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   13315:	72 ab                	jb     132c2 <erase_rows+0x3d>
  }
}
   13317:	90                   	nop
   13318:	90                   	nop
   13319:	c9                   	leave  
   1331a:	c3                   	ret    

0001331b <scroll_up>:
 * @brief 控制台console上滚lines行
 *
 * @param console
 * @param lines
 */
static inline void scroll_up(console_t *console, int lines) {
   1331b:	55                   	push   %ebp
   1331c:	89 e5                	mov    %esp,%ebp
   1331e:	83 ec 18             	sub    $0x18,%esp
  // 获取拷贝的目标位置
  disp_char_t *dest = console->disp_base;
   13321:	8b 45 08             	mov    0x8(%ebp),%eax
   13324:	8b 40 04             	mov    0x4(%eax),%eax
   13327:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 获取拷贝的源位置
  disp_char_t *src = console->disp_base + console->display_cols * lines;
   1332a:	8b 45 08             	mov    0x8(%ebp),%eax
   1332d:	8b 48 04             	mov    0x4(%eax),%ecx
   13330:	8b 45 08             	mov    0x8(%ebp),%eax
   13333:	8b 50 0c             	mov    0xc(%eax),%edx
   13336:	8b 45 0c             	mov    0xc(%ebp),%eax
   13339:	0f af c2             	imul   %edx,%eax
   1333c:	01 c0                	add    %eax,%eax
   1333e:	01 c8                	add    %ecx,%eax
   13340:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 获取拷贝的字节量
  uint32_t size = (console->display_rows - lines) * console->display_cols *
   13343:	8b 45 08             	mov    0x8(%ebp),%eax
   13346:	8b 40 08             	mov    0x8(%eax),%eax
   13349:	8b 4d 0c             	mov    0xc(%ebp),%ecx
   1334c:	29 c8                	sub    %ecx,%eax
   1334e:	89 c2                	mov    %eax,%edx
   13350:	8b 45 08             	mov    0x8(%ebp),%eax
   13353:	8b 40 0c             	mov    0xc(%eax),%eax
   13356:	0f af c2             	imul   %edx,%eax
   13359:	01 c0                	add    %eax,%eax
   1335b:	89 45 ec             	mov    %eax,-0x14(%ebp)
                  sizeof(disp_char_t);

  // 拷贝
  kernel_memcpy(dest, src, size);
   1335e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   13361:	83 ec 04             	sub    $0x4,%esp
   13364:	50                   	push   %eax
   13365:	ff 75 f0             	push   -0x10(%ebp)
   13368:	ff 75 f4             	push   -0xc(%ebp)
   1336b:	e8 b8 29 00 00       	call   15d28 <kernel_memcpy>
   13370:	83 c4 10             	add    $0x10,%esp

  // 清除底部重复行
  erase_rows(console, console->display_rows - lines, console->display_rows - 1);
   13373:	8b 45 08             	mov    0x8(%ebp),%eax
   13376:	8b 40 08             	mov    0x8(%eax),%eax
   13379:	83 e8 01             	sub    $0x1,%eax
   1337c:	89 c2                	mov    %eax,%edx
   1337e:	8b 45 08             	mov    0x8(%ebp),%eax
   13381:	8b 40 08             	mov    0x8(%eax),%eax
   13384:	8b 4d 0c             	mov    0xc(%ebp),%ecx
   13387:	29 c8                	sub    %ecx,%eax
   13389:	83 ec 04             	sub    $0x4,%esp
   1338c:	52                   	push   %edx
   1338d:	50                   	push   %eax
   1338e:	ff 75 08             	push   0x8(%ebp)
   13391:	e8 ef fe ff ff       	call   13285 <erase_rows>
   13396:	83 c4 10             	add    $0x10,%esp

  // 光标回退到之前的最后一行的下一行
  console->cursor_row -= lines;
   13399:	8b 45 08             	mov    0x8(%ebp),%eax
   1339c:	8b 40 10             	mov    0x10(%eax),%eax
   1339f:	8b 4d 0c             	mov    0xc(%ebp),%ecx
   133a2:	29 c8                	sub    %ecx,%eax
   133a4:	89 c2                	mov    %eax,%edx
   133a6:	8b 45 08             	mov    0x8(%ebp),%eax
   133a9:	89 50 10             	mov    %edx,0x10(%eax)
}
   133ac:	90                   	nop
   133ad:	c9                   	leave  
   133ae:	c3                   	ret    

000133af <move_to_col0>:
/**
 * @brief 将控制台光标移动到第0列
 *
 * @param console
 */
static inline void move_to_col0(console_t *console) { console->cursor_col = 0; }
   133af:	55                   	push   %ebp
   133b0:	89 e5                	mov    %esp,%ebp
   133b2:	8b 45 08             	mov    0x8(%ebp),%eax
   133b5:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
   133bc:	90                   	nop
   133bd:	5d                   	pop    %ebp
   133be:	c3                   	ret    

000133bf <move_to_next_line>:
/**
 * @brief 将控制台光标移动到下一行
 *
 * @param console
 */
static inline void move_to_next_line(console_t *console) {
   133bf:	55                   	push   %ebp
   133c0:	89 e5                	mov    %esp,%ebp
   133c2:	83 ec 08             	sub    $0x8,%esp
  console->cursor_row++;
   133c5:	8b 45 08             	mov    0x8(%ebp),%eax
   133c8:	8b 40 10             	mov    0x10(%eax),%eax
   133cb:	8d 50 01             	lea    0x1(%eax),%edx
   133ce:	8b 45 08             	mov    0x8(%ebp),%eax
   133d1:	89 50 10             	mov    %edx,0x10(%eax)
  // 当前行已经大于最大显示行数，屏幕需要进行上滚1行
  if (console->cursor_row >= console->display_rows) {
   133d4:	8b 45 08             	mov    0x8(%ebp),%eax
   133d7:	8b 50 10             	mov    0x10(%eax),%edx
   133da:	8b 45 08             	mov    0x8(%ebp),%eax
   133dd:	8b 40 08             	mov    0x8(%eax),%eax
   133e0:	39 c2                	cmp    %eax,%edx
   133e2:	72 10                	jb     133f4 <move_to_next_line+0x35>
    scroll_up(console, 1);
   133e4:	83 ec 08             	sub    $0x8,%esp
   133e7:	6a 01                	push   $0x1
   133e9:	ff 75 08             	push   0x8(%ebp)
   133ec:	e8 2a ff ff ff       	call   1331b <scroll_up>
   133f1:	83 c4 10             	add    $0x10,%esp
  }
}
   133f4:	90                   	nop
   133f5:	c9                   	leave  
   133f6:	c3                   	ret    

000133f7 <move_forward>:
 * @brief 将控制台console的光标迁移n个位置
 *
 * @param console
 * @param n
 */
static inline void move_forward(console_t *console, int n) {
   133f7:	55                   	push   %ebp
   133f8:	89 e5                	mov    %esp,%ebp
   133fa:	83 ec 18             	sub    $0x18,%esp
  for (int i = 0; i < n; ++i) {
   133fd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   13404:	eb 5c                	jmp    13462 <move_forward+0x6b>
    if (++(console->cursor_col) >=
   13406:	8b 45 08             	mov    0x8(%ebp),%eax
   13409:	8b 40 14             	mov    0x14(%eax),%eax
   1340c:	8d 50 01             	lea    0x1(%eax),%edx
   1340f:	8b 45 08             	mov    0x8(%ebp),%eax
   13412:	89 50 14             	mov    %edx,0x14(%eax)
   13415:	8b 45 08             	mov    0x8(%ebp),%eax
   13418:	8b 50 14             	mov    0x14(%eax),%edx
        console->display_cols) {  // 光标达到最大列数，进行换行
   1341b:	8b 45 08             	mov    0x8(%ebp),%eax
   1341e:	8b 40 0c             	mov    0xc(%eax),%eax
    if (++(console->cursor_col) >=
   13421:	39 c2                	cmp    %eax,%edx
   13423:	72 39                	jb     1345e <move_forward+0x67>
      console->cursor_row++;
   13425:	8b 45 08             	mov    0x8(%ebp),%eax
   13428:	8b 40 10             	mov    0x10(%eax),%eax
   1342b:	8d 50 01             	lea    0x1(%eax),%edx
   1342e:	8b 45 08             	mov    0x8(%ebp),%eax
   13431:	89 50 10             	mov    %edx,0x10(%eax)
      console->cursor_col = 0;
   13434:	8b 45 08             	mov    0x8(%ebp),%eax
   13437:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
      // 当前行已经大于最大显示行数，屏幕需要进行上滚1行
      if (console->cursor_row >= console->display_rows) {
   1343e:	8b 45 08             	mov    0x8(%ebp),%eax
   13441:	8b 50 10             	mov    0x10(%eax),%edx
   13444:	8b 45 08             	mov    0x8(%ebp),%eax
   13447:	8b 40 08             	mov    0x8(%eax),%eax
   1344a:	39 c2                	cmp    %eax,%edx
   1344c:	72 10                	jb     1345e <move_forward+0x67>
        scroll_up(console, 1);
   1344e:	83 ec 08             	sub    $0x8,%esp
   13451:	6a 01                	push   $0x1
   13453:	ff 75 08             	push   0x8(%ebp)
   13456:	e8 c0 fe ff ff       	call   1331b <scroll_up>
   1345b:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < n; ++i) {
   1345e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   13462:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13465:	3b 45 0c             	cmp    0xc(%ebp),%eax
   13468:	7c 9c                	jl     13406 <move_forward+0xf>
      }
    }
  }
}
   1346a:	90                   	nop
   1346b:	90                   	nop
   1346c:	c9                   	leave  
   1346d:	c3                   	ret    

0001346e <show_char>:
 * @brief 将字符c显示到控制台console上
 *
 * @param console
 * @param c
 */
static inline void show_char(console_t *console, char c) {
   1346e:	55                   	push   %ebp
   1346f:	89 e5                	mov    %esp,%ebp
   13471:	83 ec 28             	sub    $0x28,%esp
   13474:	8b 45 0c             	mov    0xc(%ebp),%eax
   13477:	88 45 e4             	mov    %al,-0x1c(%ebp)
  // 计算当前光标对应控制台在现存位置中的偏移量
  int offset =
      console->cursor_col + console->cursor_row * console->display_cols;
   1347a:	8b 45 08             	mov    0x8(%ebp),%eax
   1347d:	8b 48 14             	mov    0x14(%eax),%ecx
   13480:	8b 45 08             	mov    0x8(%ebp),%eax
   13483:	8b 50 10             	mov    0x10(%eax),%edx
   13486:	8b 45 08             	mov    0x8(%ebp),%eax
   13489:	8b 40 0c             	mov    0xc(%eax),%eax
   1348c:	0f af c2             	imul   %edx,%eax
   1348f:	01 c8                	add    %ecx,%eax
  int offset =
   13491:	89 45 f4             	mov    %eax,-0xc(%ebp)
  disp_char_t *p = console->disp_base + offset;
   13494:	8b 45 08             	mov    0x8(%ebp),%eax
   13497:	8b 50 04             	mov    0x4(%eax),%edx
   1349a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1349d:	01 c0                	add    %eax,%eax
   1349f:	01 d0                	add    %edx,%eax
   134a1:	89 45 f0             	mov    %eax,-0x10(%ebp)
  p->c = c;
   134a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   134a7:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
   134ab:	88 10                	mov    %dl,(%eax)
  p->foreground = console->foreground;
   134ad:	8b 45 08             	mov    0x8(%ebp),%eax
   134b0:	8b 40 18             	mov    0x18(%eax),%eax
   134b3:	c1 e0 04             	shl    $0x4,%eax
   134b6:	c0 f8 04             	sar    $0x4,%al
   134b9:	8b 55 f0             	mov    -0x10(%ebp),%edx
   134bc:	83 e0 0f             	and    $0xf,%eax
   134bf:	89 c1                	mov    %eax,%ecx
   134c1:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   134c5:	83 e0 f0             	and    $0xfffffff0,%eax
   134c8:	09 c8                	or     %ecx,%eax
   134ca:	88 42 01             	mov    %al,0x1(%edx)
  p->background = console->background;
   134cd:	8b 45 08             	mov    0x8(%ebp),%eax
   134d0:	8b 40 1c             	mov    0x1c(%eax),%eax
   134d3:	c1 e0 05             	shl    $0x5,%eax
   134d6:	c0 f8 05             	sar    $0x5,%al
   134d9:	8b 55 f0             	mov    -0x10(%ebp),%edx
   134dc:	83 e0 07             	and    $0x7,%eax
   134df:	c1 e0 04             	shl    $0x4,%eax
   134e2:	89 c1                	mov    %eax,%ecx
   134e4:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   134e8:	83 e0 8f             	and    $0xffffff8f,%eax
   134eb:	09 c8                	or     %ecx,%eax
   134ed:	88 42 01             	mov    %al,0x1(%edx)
  move_forward(console, 1);
   134f0:	83 ec 08             	sub    $0x8,%esp
   134f3:	6a 01                	push   $0x1
   134f5:	ff 75 08             	push   0x8(%ebp)
   134f8:	e8 fa fe ff ff       	call   133f7 <move_forward>
   134fd:	83 c4 10             	add    $0x10,%esp
}
   13500:	90                   	nop
   13501:	c9                   	leave  
   13502:	c3                   	ret    

00013503 <move_backword>:
 *
 * @param console
 * @param n
 * @return int
 */
static inline int move_backword(console_t *console, int n) {
   13503:	55                   	push   %ebp
   13504:	89 e5                	mov    %esp,%ebp
   13506:	83 ec 10             	sub    $0x10,%esp
  int status = -1;
   13509:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%ebp)
  for (int i = 0; i < n; ++i) {
   13510:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   13517:	eb 55                	jmp    1356e <move_backword+0x6b>
    if (console->cursor_col > 0) {  // 当前光标在行中，直接左移
   13519:	8b 45 08             	mov    0x8(%ebp),%eax
   1351c:	8b 40 14             	mov    0x14(%eax),%eax
   1351f:	85 c0                	test   %eax,%eax
   13521:	74 18                	je     1353b <move_backword+0x38>
      console->cursor_col--;
   13523:	8b 45 08             	mov    0x8(%ebp),%eax
   13526:	8b 40 14             	mov    0x14(%eax),%eax
   13529:	8d 50 ff             	lea    -0x1(%eax),%edx
   1352c:	8b 45 08             	mov    0x8(%ebp),%eax
   1352f:	89 50 14             	mov    %edx,0x14(%eax)
      status = 0;
   13532:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   13539:	eb 2f                	jmp    1356a <move_backword+0x67>
    } else if (console->cursor_row >
   1353b:	8b 45 08             	mov    0x8(%ebp),%eax
   1353e:	8b 40 10             	mov    0x10(%eax),%eax
   13541:	85 c0                	test   %eax,%eax
   13543:	74 25                	je     1356a <move_backword+0x67>
               0) {  // 当前光标在行开头，若当前行不为第一行则可移动到上一行末尾
      console->cursor_row--;
   13545:	8b 45 08             	mov    0x8(%ebp),%eax
   13548:	8b 40 10             	mov    0x10(%eax),%eax
   1354b:	8d 50 ff             	lea    -0x1(%eax),%edx
   1354e:	8b 45 08             	mov    0x8(%ebp),%eax
   13551:	89 50 10             	mov    %edx,0x10(%eax)
      console->cursor_col = console->display_cols - 1;
   13554:	8b 45 08             	mov    0x8(%ebp),%eax
   13557:	8b 40 0c             	mov    0xc(%eax),%eax
   1355a:	8d 50 ff             	lea    -0x1(%eax),%edx
   1355d:	8b 45 08             	mov    0x8(%ebp),%eax
   13560:	89 50 14             	mov    %edx,0x14(%eax)
      status = 0;
   13563:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  for (int i = 0; i < n; ++i) {
   1356a:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   1356e:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13571:	3b 45 0c             	cmp    0xc(%ebp),%eax
   13574:	7c a3                	jl     13519 <move_backword+0x16>
    }
  }

  return status;
   13576:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   13579:	c9                   	leave  
   1357a:	c3                   	ret    

0001357b <erase_backword>:
/**
 * @brief 往左擦除一个字符
 *
 * @param console
 */
static inline void erase_backword(console_t *console) {
   1357b:	55                   	push   %ebp
   1357c:	89 e5                	mov    %esp,%ebp
   1357e:	83 ec 08             	sub    $0x8,%esp
  if (move_backword(console, 1) == 0) {  // 左移成功
   13581:	6a 01                	push   $0x1
   13583:	ff 75 08             	push   0x8(%ebp)
   13586:	e8 78 ff ff ff       	call   13503 <move_backword>
   1358b:	83 c4 08             	add    $0x8,%esp
   1358e:	85 c0                	test   %eax,%eax
   13590:	75 20                	jne    135b2 <erase_backword+0x37>
    show_char(console, ' ');             // 用空格覆盖需要擦除的字符
   13592:	83 ec 08             	sub    $0x8,%esp
   13595:	6a 20                	push   $0x20
   13597:	ff 75 08             	push   0x8(%ebp)
   1359a:	e8 cf fe ff ff       	call   1346e <show_char>
   1359f:	83 c4 10             	add    $0x10,%esp
    move_backword(console, 1);           // 再左移一位实现擦除
   135a2:	83 ec 08             	sub    $0x8,%esp
   135a5:	6a 01                	push   $0x1
   135a7:	ff 75 08             	push   0x8(%ebp)
   135aa:	e8 54 ff ff ff       	call   13503 <move_backword>
   135af:	83 c4 10             	add    $0x10,%esp
  }
}
   135b2:	90                   	nop
   135b3:	c9                   	leave  
   135b4:	c3                   	ret    

000135b5 <clear_display>:
/**
 * @brief 清空屏幕
 *
 * @param console
 */
static inline void clear_display(console_t *console) {
   135b5:	55                   	push   %ebp
   135b6:	89 e5                	mov    %esp,%ebp
   135b8:	83 ec 10             	sub    $0x10,%esp
  int size = console->display_cols * console->display_rows;
   135bb:	8b 45 08             	mov    0x8(%ebp),%eax
   135be:	8b 50 0c             	mov    0xc(%eax),%edx
   135c1:	8b 45 08             	mov    0x8(%ebp),%eax
   135c4:	8b 40 08             	mov    0x8(%eax),%eax
   135c7:	0f af c2             	imul   %edx,%eax
   135ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
  disp_char_t *start = console->disp_base;
   135cd:	8b 45 08             	mov    0x8(%ebp),%eax
   135d0:	8b 40 04             	mov    0x4(%eax),%eax
   135d3:	89 45 fc             	mov    %eax,-0x4(%ebp)
  for (int i = 0; i < size; ++i, ++start) {
   135d6:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   135dd:	eb 51                	jmp    13630 <clear_display+0x7b>
    start->c = ' ';
   135df:	8b 45 fc             	mov    -0x4(%ebp),%eax
   135e2:	c6 00 20             	movb   $0x20,(%eax)
    start->foreground = console->foreground;
   135e5:	8b 45 08             	mov    0x8(%ebp),%eax
   135e8:	8b 40 18             	mov    0x18(%eax),%eax
   135eb:	c1 e0 04             	shl    $0x4,%eax
   135ee:	c0 f8 04             	sar    $0x4,%al
   135f1:	8b 55 fc             	mov    -0x4(%ebp),%edx
   135f4:	83 e0 0f             	and    $0xf,%eax
   135f7:	89 c1                	mov    %eax,%ecx
   135f9:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   135fd:	83 e0 f0             	and    $0xfffffff0,%eax
   13600:	09 c8                	or     %ecx,%eax
   13602:	88 42 01             	mov    %al,0x1(%edx)
    start->background = console->background;
   13605:	8b 45 08             	mov    0x8(%ebp),%eax
   13608:	8b 40 1c             	mov    0x1c(%eax),%eax
   1360b:	c1 e0 05             	shl    $0x5,%eax
   1360e:	c0 f8 05             	sar    $0x5,%al
   13611:	8b 55 fc             	mov    -0x4(%ebp),%edx
   13614:	83 e0 07             	and    $0x7,%eax
   13617:	c1 e0 04             	shl    $0x4,%eax
   1361a:	89 c1                	mov    %eax,%ecx
   1361c:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   13620:	83 e0 8f             	and    $0xffffff8f,%eax
   13623:	09 c8                	or     %ecx,%eax
   13625:	88 42 01             	mov    %al,0x1(%edx)
  for (int i = 0; i < size; ++i, ++start) {
   13628:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   1362c:	83 45 fc 02          	addl   $0x2,-0x4(%ebp)
   13630:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13633:	3b 45 f4             	cmp    -0xc(%ebp),%eax
   13636:	7c a7                	jl     135df <clear_display+0x2a>
  }
}
   13638:	90                   	nop
   13639:	90                   	nop
   1363a:	c9                   	leave  
   1363b:	c3                   	ret    

0001363c <console_init>:
/**
 * @brief 初始化控制台
 *
 * @return int
 */
int console_init(int index) {
   1363c:	55                   	push   %ebp
   1363d:	89 e5                	mov    %esp,%ebp
   1363f:	83 ec 18             	sub    $0x18,%esp
  // 获取对应console，并进行初始化
  console_t *console = console_table + index;
   13642:	8b 45 08             	mov    0x8(%ebp),%eax
   13645:	6b c0 54             	imul   $0x54,%eax,%eax
   13648:	05 00 b2 04 00       	add    $0x4b200,%eax
   1364d:	89 45 f4             	mov    %eax,-0xc(%ebp)
  console->display_rows = CONSOLE_ROW_MAX;
   13650:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13653:	c7 40 08 19 00 00 00 	movl   $0x19,0x8(%eax)
  console->display_cols = CONSOLE_CLO_MAX;
   1365a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1365d:	c7 40 0c 50 00 00 00 	movl   $0x50,0xc(%eax)
  console->foreground = COLOR_White;
   13664:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13667:	c7 40 18 0f 00 00 00 	movl   $0xf,0x18(%eax)
  console->background = COLOR_Black;
   1366e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13671:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)

  // 初始化光标位置
  if (index == 0) {  // 保留bios在第一个console的输出信息
   13678:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1367c:	75 38                	jne    136b6 <console_init+0x7a>
    int cursor_pos = read_cursor_pos();
   1367e:	e8 e8 fa ff ff       	call   1316b <read_cursor_pos>
   13683:	89 45 f0             	mov    %eax,-0x10(%ebp)
    console->cursor_row = cursor_pos / console->display_cols;
   13686:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13689:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1368c:	8b 4a 0c             	mov    0xc(%edx),%ecx
   1368f:	ba 00 00 00 00       	mov    $0x0,%edx
   13694:	f7 f1                	div    %ecx
   13696:	89 c2                	mov    %eax,%edx
   13698:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1369b:	89 50 10             	mov    %edx,0x10(%eax)
    console->cursor_col = cursor_pos % console->display_cols;
   1369e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   136a1:	8b 55 f4             	mov    -0xc(%ebp),%edx
   136a4:	8b 4a 0c             	mov    0xc(%edx),%ecx
   136a7:	ba 00 00 00 00       	mov    $0x0,%edx
   136ac:	f7 f1                	div    %ecx
   136ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
   136b1:	89 50 14             	mov    %edx,0x14(%eax)
   136b4:	eb 22                	jmp    136d8 <console_init+0x9c>
  } else {  // 清空其它console，并将光标放在起始位置
    console->cursor_col = 0;
   136b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   136b9:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    console->cursor_row = 0;
   136c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   136c3:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    clear_display(console);
   136ca:	83 ec 0c             	sub    $0xc,%esp
   136cd:	ff 75 f4             	push   -0xc(%ebp)
   136d0:	e8 e0 fe ff ff       	call   135b5 <clear_display>
   136d5:	83 c4 10             	add    $0x10,%esp
    //update_cursor_pos(console);
  }

  // 初始化上一次光标位置
  console->old_cursor_col = console->cursor_col;
   136d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   136db:	8b 50 14             	mov    0x14(%eax),%edx
   136de:	8b 45 f4             	mov    -0xc(%ebp),%eax
   136e1:	89 50 20             	mov    %edx,0x20(%eax)
  console->old_cursor_row = console->cursor_row;
   136e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   136e7:	8b 50 10             	mov    0x10(%eax),%edx
   136ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
   136ed:	89 50 24             	mov    %edx,0x24(%eax)

  // 初始化esc序列的参数数组
  kernel_memset(console->esc_param, 0, sizeof(int) * ESC_PARAM_MAX);
   136f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   136f3:	83 c0 28             	add    $0x28,%eax
   136f6:	83 ec 04             	sub    $0x4,%esp
   136f9:	6a 28                	push   $0x28
   136fb:	6a 00                	push   $0x0
   136fd:	50                   	push   %eax
   136fe:	e8 74 26 00 00       	call   15d77 <kernel_memset>
   13703:	83 c4 10             	add    $0x10,%esp
  console->curr_param_index = 0;
   13706:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13709:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)

  // 初始化终端写入的状态
  console->write_state = CONSOLE_WRITE_NORMAL;
   13710:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13713:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

  // 计算每个终端在现存中的起始地址
  console->disp_base = (disp_char_t *)CONSOLE_DISP_START_ADDR +
   13719:	8b 45 08             	mov    0x8(%ebp),%eax
   1371c:	69 c0 a0 0f 00 00    	imul   $0xfa0,%eax,%eax
   13722:	8d 90 00 80 0b 00    	lea    0xb8000(%eax),%edx
   13728:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1372b:	89 50 04             	mov    %edx,0x4(%eax)
                       (index * CONSOLE_CLO_MAX * CONSOLE_ROW_MAX);

  return 0;
   1372e:	b8 00 00 00 00       	mov    $0x0,%eax
}
   13733:	c9                   	leave  
   13734:	c3                   	ret    

00013735 <write_normal>:
 * @brief 终端写普通字符的策略
 *
 * @param console
 * @param c
 */
static inline void write_normal(console_t *console, char c) {
   13735:	55                   	push   %ebp
   13736:	89 e5                	mov    %esp,%ebp
   13738:	83 ec 18             	sub    $0x18,%esp
   1373b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1373e:	88 45 f4             	mov    %al,-0xc(%ebp)
  switch (c) {
   13741:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
   13745:	83 f8 7f             	cmp    $0x7f,%eax
   13748:	74 30                	je     1377a <write_normal+0x45>
   1374a:	83 f8 7f             	cmp    $0x7f,%eax
   1374d:	7f 6d                	jg     137bc <write_normal+0x87>
   1374f:	83 f8 1b             	cmp    $0x1b,%eax
   13752:	74 1b                	je     1376f <write_normal+0x3a>
   13754:	83 f8 1b             	cmp    $0x1b,%eax
   13757:	7f 63                	jg     137bc <write_normal+0x87>
   13759:	83 f8 0d             	cmp    $0xd,%eax
   1375c:	74 3e                	je     1379c <write_normal+0x67>
   1375e:	83 f8 0d             	cmp    $0xd,%eax
   13761:	7f 59                	jg     137bc <write_normal+0x87>
   13763:	83 f8 08             	cmp    $0x8,%eax
   13766:	74 22                	je     1378a <write_normal+0x55>
   13768:	83 f8 0a             	cmp    $0xa,%eax
   1376b:	74 3f                	je     137ac <write_normal+0x77>
   1376d:	eb 4d                	jmp    137bc <write_normal+0x87>
    case ASCII_ESC:
      console->write_state = CONSOLE_WRITE_ESC;
   1376f:	8b 45 08             	mov    0x8(%ebp),%eax
   13772:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
      break;
   13778:	eb 62                	jmp    137dc <write_normal+0xa7>
    case 0x7f:  // 退格
      erase_backword(console);
   1377a:	83 ec 0c             	sub    $0xc,%esp
   1377d:	ff 75 08             	push   0x8(%ebp)
   13780:	e8 f6 fd ff ff       	call   1357b <erase_backword>
   13785:	83 c4 10             	add    $0x10,%esp
      break;
   13788:	eb 52                	jmp    137dc <write_normal+0xa7>
    case '\b':  // 光标左移一位
      move_backword(console, 1);
   1378a:	83 ec 08             	sub    $0x8,%esp
   1378d:	6a 01                	push   $0x1
   1378f:	ff 75 08             	push   0x8(%ebp)
   13792:	e8 6c fd ff ff       	call   13503 <move_backword>
   13797:	83 c4 10             	add    $0x10,%esp
      break;
   1379a:	eb 40                	jmp    137dc <write_normal+0xa7>

    case '\r':  // 回车
      move_to_col0(console);
   1379c:	83 ec 0c             	sub    $0xc,%esp
   1379f:	ff 75 08             	push   0x8(%ebp)
   137a2:	e8 08 fc ff ff       	call   133af <move_to_col0>
   137a7:	83 c4 10             	add    $0x10,%esp
      break;
   137aa:	eb 30                	jmp    137dc <write_normal+0xa7>
    case '\n':  // 换行
      // move_to_col0(console);
      move_to_next_line(console);
   137ac:	83 ec 0c             	sub    $0xc,%esp
   137af:	ff 75 08             	push   0x8(%ebp)
   137b2:	e8 08 fc ff ff       	call   133bf <move_to_next_line>
   137b7:	83 c4 10             	add    $0x10,%esp
      break;
   137ba:	eb 20                	jmp    137dc <write_normal+0xa7>
    default:
      if (c >= ' ' && c <= '~') {  // 可显示字符的范围
   137bc:	80 7d f4 1f          	cmpb   $0x1f,-0xc(%ebp)
   137c0:	7e 19                	jle    137db <write_normal+0xa6>
   137c2:	80 7d f4 7f          	cmpb   $0x7f,-0xc(%ebp)
   137c6:	74 13                	je     137db <write_normal+0xa6>
        show_char(console, c);
   137c8:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
   137cc:	83 ec 08             	sub    $0x8,%esp
   137cf:	50                   	push   %eax
   137d0:	ff 75 08             	push   0x8(%ebp)
   137d3:	e8 96 fc ff ff       	call   1346e <show_char>
   137d8:	83 c4 10             	add    $0x10,%esp
      }
      break;
   137db:	90                   	nop
  }
}
   137dc:	90                   	nop
   137dd:	c9                   	leave  
   137de:	c3                   	ret    

000137df <save_cursor>:
/**
 * @brief 保存光标当前位置
 *
 * @param console
 */
static inline void save_cursor(console_t *console) {
   137df:	55                   	push   %ebp
   137e0:	89 e5                	mov    %esp,%ebp
  console->old_cursor_col = console->cursor_col;
   137e2:	8b 45 08             	mov    0x8(%ebp),%eax
   137e5:	8b 50 14             	mov    0x14(%eax),%edx
   137e8:	8b 45 08             	mov    0x8(%ebp),%eax
   137eb:	89 50 20             	mov    %edx,0x20(%eax)
  console->old_cursor_row = console->cursor_row;
   137ee:	8b 45 08             	mov    0x8(%ebp),%eax
   137f1:	8b 50 10             	mov    0x10(%eax),%edx
   137f4:	8b 45 08             	mov    0x8(%ebp),%eax
   137f7:	89 50 24             	mov    %edx,0x24(%eax)
}
   137fa:	90                   	nop
   137fb:	5d                   	pop    %ebp
   137fc:	c3                   	ret    

000137fd <restore_cursor>:
/**
 * @brief 恢复光标位置
 *
 * @param console
 */
static inline void restore_cursor(console_t *console) {
   137fd:	55                   	push   %ebp
   137fe:	89 e5                	mov    %esp,%ebp
  console->cursor_col = console->old_cursor_col;
   13800:	8b 45 08             	mov    0x8(%ebp),%eax
   13803:	8b 50 20             	mov    0x20(%eax),%edx
   13806:	8b 45 08             	mov    0x8(%ebp),%eax
   13809:	89 50 14             	mov    %edx,0x14(%eax)
  console->cursor_row = console->old_cursor_row;
   1380c:	8b 45 08             	mov    0x8(%ebp),%eax
   1380f:	8b 50 24             	mov    0x24(%eax),%edx
   13812:	8b 45 08             	mov    0x8(%ebp),%eax
   13815:	89 50 10             	mov    %edx,0x10(%eax)
}
   13818:	90                   	nop
   13819:	5d                   	pop    %ebp
   1381a:	c3                   	ret    

0001381b <clear_esc_param>:
/**
 * @brief 清空esc参数缓冲数组
 *
 * @param console
 */
static inline void clear_esc_param(console_t *console) {
   1381b:	55                   	push   %ebp
   1381c:	89 e5                	mov    %esp,%ebp
   1381e:	83 ec 08             	sub    $0x8,%esp
  kernel_memset(console->esc_param, 0, sizeof(int) * ESC_PARAM_MAX);
   13821:	8b 45 08             	mov    0x8(%ebp),%eax
   13824:	83 c0 28             	add    $0x28,%eax
   13827:	83 ec 04             	sub    $0x4,%esp
   1382a:	6a 28                	push   $0x28
   1382c:	6a 00                	push   $0x0
   1382e:	50                   	push   %eax
   1382f:	e8 43 25 00 00       	call   15d77 <kernel_memset>
   13834:	83 c4 10             	add    $0x10,%esp
  console->curr_param_index = 0;
   13837:	8b 45 08             	mov    0x8(%ebp),%eax
   1383a:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
}
   13841:	90                   	nop
   13842:	c9                   	leave  
   13843:	c3                   	ret    

00013844 <write_esc>:
 * @brief 终端写ESC字符的策略
 *
 * @param console
 * @param c
 */
static inline void write_esc(console_t *console, char c) {
   13844:	55                   	push   %ebp
   13845:	89 e5                	mov    %esp,%ebp
   13847:	83 ec 18             	sub    $0x18,%esp
   1384a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1384d:	88 45 f4             	mov    %al,-0xc(%ebp)
  switch (c) {
   13850:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
   13854:	83 f8 5b             	cmp    $0x5b,%eax
   13857:	74 11                	je     1386a <write_esc+0x26>
   13859:	83 f8 5b             	cmp    $0x5b,%eax
   1385c:	7f 55                	jg     138b3 <write_esc+0x6f>
   1385e:	83 f8 37             	cmp    $0x37,%eax
   13861:	74 20                	je     13883 <write_esc+0x3f>
   13863:	83 f8 38             	cmp    $0x38,%eax
   13866:	74 34                	je     1389c <write_esc+0x58>
   13868:	eb 49                	jmp    138b3 <write_esc+0x6f>
    case '[':
      clear_esc_param(console);
   1386a:	83 ec 0c             	sub    $0xc,%esp
   1386d:	ff 75 08             	push   0x8(%ebp)
   13870:	e8 a6 ff ff ff       	call   1381b <clear_esc_param>
   13875:	83 c4 10             	add    $0x10,%esp
      console->write_state = CONSOLE_WRITE_ESC_SQUARE;
   13878:	8b 45 08             	mov    0x8(%ebp),%eax
   1387b:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
      break;
   13881:	eb 3a                	jmp    138bd <write_esc+0x79>
    case '7':
      save_cursor(console);
   13883:	83 ec 0c             	sub    $0xc,%esp
   13886:	ff 75 08             	push   0x8(%ebp)
   13889:	e8 51 ff ff ff       	call   137df <save_cursor>
   1388e:	83 c4 10             	add    $0x10,%esp
      console->write_state = CONSOLE_WRITE_NORMAL;
   13891:	8b 45 08             	mov    0x8(%ebp),%eax
   13894:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      break;
   1389a:	eb 21                	jmp    138bd <write_esc+0x79>
    case '8':
      restore_cursor(console);
   1389c:	83 ec 0c             	sub    $0xc,%esp
   1389f:	ff 75 08             	push   0x8(%ebp)
   138a2:	e8 56 ff ff ff       	call   137fd <restore_cursor>
   138a7:	83 c4 10             	add    $0x10,%esp
      console->write_state = CONSOLE_WRITE_NORMAL;
   138aa:	8b 45 08             	mov    0x8(%ebp),%eax
   138ad:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    default:
      console->write_state = CONSOLE_WRITE_NORMAL;
   138b3:	8b 45 08             	mov    0x8(%ebp),%eax
   138b6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      break;
   138bc:	90                   	nop
  }
}
   138bd:	90                   	nop
   138be:	c9                   	leave  
   138bf:	c3                   	ret    

000138c0 <set_font_style>:
/**
 * @brief 根据esc参数设置字符的风格
 *
 * @param console
 */
static inline void set_font_style(console_t *console) {
   138c0:	55                   	push   %ebp
   138c1:	89 e5                	mov    %esp,%ebp
   138c3:	83 ec 10             	sub    $0x10,%esp
  static const color_t color_table[] = {COLOR_Black,  COLOR_Red,  COLOR_Green,
                                        COLOR_Yellow, COLOR_Blue, COLOR_Magenta,
                                        COLOR_Cyan,   COLOR_White};
  for (int i = 0; i <= console->curr_param_index; ++i) {
   138c6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   138cd:	eb 78                	jmp    13947 <set_font_style+0x87>
    int param = console->esc_param[i];
   138cf:	8b 45 08             	mov    0x8(%ebp),%eax
   138d2:	8b 55 fc             	mov    -0x4(%ebp),%edx
   138d5:	83 c2 08             	add    $0x8,%edx
   138d8:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   138dc:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if (param >= 30 && param <= 37) {
   138df:	83 7d f8 1d          	cmpl   $0x1d,-0x8(%ebp)
   138e3:	7e 1b                	jle    13900 <set_font_style+0x40>
   138e5:	83 7d f8 25          	cmpl   $0x25,-0x8(%ebp)
   138e9:	7f 15                	jg     13900 <set_font_style+0x40>
      console->foreground = color_table[param - 30];
   138eb:	8b 45 f8             	mov    -0x8(%ebp),%eax
   138ee:	83 e8 1e             	sub    $0x1e,%eax
   138f1:	8b 14 85 60 71 01 00 	mov    0x17160(,%eax,4),%edx
   138f8:	8b 45 08             	mov    0x8(%ebp),%eax
   138fb:	89 50 18             	mov    %edx,0x18(%eax)
   138fe:	eb 43                	jmp    13943 <set_font_style+0x83>
    } else if (param >= 40 && param <= 47) {
   13900:	83 7d f8 27          	cmpl   $0x27,-0x8(%ebp)
   13904:	7e 1b                	jle    13921 <set_font_style+0x61>
   13906:	83 7d f8 2f          	cmpl   $0x2f,-0x8(%ebp)
   1390a:	7f 15                	jg     13921 <set_font_style+0x61>
      console->background = color_table[param - 40];
   1390c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1390f:	83 e8 28             	sub    $0x28,%eax
   13912:	8b 14 85 60 71 01 00 	mov    0x17160(,%eax,4),%edx
   13919:	8b 45 08             	mov    0x8(%ebp),%eax
   1391c:	89 50 1c             	mov    %edx,0x1c(%eax)
   1391f:	eb 22                	jmp    13943 <set_font_style+0x83>
    } else if (param == 39) {
   13921:	83 7d f8 27          	cmpl   $0x27,-0x8(%ebp)
   13925:	75 0c                	jne    13933 <set_font_style+0x73>
      console->foreground = COLOR_White;
   13927:	8b 45 08             	mov    0x8(%ebp),%eax
   1392a:	c7 40 18 0f 00 00 00 	movl   $0xf,0x18(%eax)
   13931:	eb 10                	jmp    13943 <set_font_style+0x83>
    } else if (param == 49) {
   13933:	83 7d f8 31          	cmpl   $0x31,-0x8(%ebp)
   13937:	75 0a                	jne    13943 <set_font_style+0x83>
      console->background = COLOR_Black;
   13939:	8b 45 08             	mov    0x8(%ebp),%eax
   1393c:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
  for (int i = 0; i <= console->curr_param_index; ++i) {
   13943:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   13947:	8b 45 08             	mov    0x8(%ebp),%eax
   1394a:	8b 40 50             	mov    0x50(%eax),%eax
   1394d:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   13950:	0f 8e 79 ff ff ff    	jle    138cf <set_font_style+0xf>
    }
  }
}
   13956:	90                   	nop
   13957:	90                   	nop
   13958:	c9                   	leave  
   13959:	c3                   	ret    

0001395a <erase_in_display>:
/**
 * @brief 擦除屏幕指定区域
 *
 * @param console
 */
static inline void erase_in_display(console_t *console) {
   1395a:	55                   	push   %ebp
   1395b:	89 e5                	mov    %esp,%ebp
   1395d:	83 ec 10             	sub    $0x10,%esp
  if (console->curr_param_index < 0) {
   13960:	8b 45 08             	mov    0x8(%ebp),%eax
   13963:	8b 40 50             	mov    0x50(%eax),%eax
   13966:	85 c0                	test   %eax,%eax
   13968:	78 3c                	js     139a6 <erase_in_display+0x4c>
    return;
  }

  int param = console->esc_param[0];
   1396a:	8b 45 08             	mov    0x8(%ebp),%eax
   1396d:	8b 40 28             	mov    0x28(%eax),%eax
   13970:	89 45 fc             	mov    %eax,-0x4(%ebp)
  if (param == 2) {  // 擦除整个屏幕
   13973:	83 7d fc 02          	cmpl   $0x2,-0x4(%ebp)
   13977:	75 2e                	jne    139a7 <erase_in_display+0x4d>
    erase_rows(console, 0, console->display_rows - 1);
   13979:	8b 45 08             	mov    0x8(%ebp),%eax
   1397c:	8b 40 08             	mov    0x8(%eax),%eax
   1397f:	83 e8 01             	sub    $0x1,%eax
   13982:	50                   	push   %eax
   13983:	6a 00                	push   $0x0
   13985:	ff 75 08             	push   0x8(%ebp)
   13988:	e8 f8 f8 ff ff       	call   13285 <erase_rows>
   1398d:	83 c4 0c             	add    $0xc,%esp
    console->cursor_col = 0;
   13990:	8b 45 08             	mov    0x8(%ebp),%eax
   13993:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    console->cursor_row = 0;
   1399a:	8b 45 08             	mov    0x8(%ebp),%eax
   1399d:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
   139a4:	eb 01                	jmp    139a7 <erase_in_display+0x4d>
    return;
   139a6:	90                   	nop
  }
}
   139a7:	c9                   	leave  
   139a8:	c3                   	ret    

000139a9 <move_cursor>:
/**
 * @brief 移动光标到指定位置
 *
 * @param console
 */
static inline void move_cursor(console_t *console) {
   139a9:	55                   	push   %ebp
   139aa:	89 e5                	mov    %esp,%ebp
  console->cursor_row = console->esc_param[0];
   139ac:	8b 45 08             	mov    0x8(%ebp),%eax
   139af:	8b 40 28             	mov    0x28(%eax),%eax
   139b2:	89 c2                	mov    %eax,%edx
   139b4:	8b 45 08             	mov    0x8(%ebp),%eax
   139b7:	89 50 10             	mov    %edx,0x10(%eax)
  console->cursor_col = console->esc_param[1];
   139ba:	8b 45 08             	mov    0x8(%ebp),%eax
   139bd:	8b 40 2c             	mov    0x2c(%eax),%eax
   139c0:	89 c2                	mov    %eax,%edx
   139c2:	8b 45 08             	mov    0x8(%ebp),%eax
   139c5:	89 50 14             	mov    %edx,0x14(%eax)
}
   139c8:	90                   	nop
   139c9:	5d                   	pop    %ebp
   139ca:	c3                   	ret    

000139cb <move_left>:
 * @brief 将光标左移n位
 *
 * @param console
 * @param n
 */
static inline void move_left(console_t *console, int n) {
   139cb:	55                   	push   %ebp
   139cc:	89 e5                	mov    %esp,%ebp
   139ce:	83 ec 10             	sub    $0x10,%esp
  if (n == 0) {  // 默认至少移动一位
   139d1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   139d5:	75 07                	jne    139de <move_left+0x13>
    n = 1;
   139d7:	c7 45 0c 01 00 00 00 	movl   $0x1,0xc(%ebp)
  }

  int col = console->cursor_col - n;
   139de:	8b 45 08             	mov    0x8(%ebp),%eax
   139e1:	8b 40 14             	mov    0x14(%eax),%eax
   139e4:	8b 55 0c             	mov    0xc(%ebp),%edx
   139e7:	29 d0                	sub    %edx,%eax
   139e9:	89 45 fc             	mov    %eax,-0x4(%ebp)
  console->cursor_col = (col > 0) ? col : 0;
   139ec:	8b 45 fc             	mov    -0x4(%ebp),%eax
   139ef:	ba 00 00 00 00       	mov    $0x0,%edx
   139f4:	85 c0                	test   %eax,%eax
   139f6:	0f 48 c2             	cmovs  %edx,%eax
   139f9:	89 c2                	mov    %eax,%edx
   139fb:	8b 45 08             	mov    0x8(%ebp),%eax
   139fe:	89 50 14             	mov    %edx,0x14(%eax)
}
   13a01:	90                   	nop
   13a02:	c9                   	leave  
   13a03:	c3                   	ret    

00013a04 <move_right>:
 * @brief 将光标右移n位
 *
 * @param console
 * @param n
 */
static inline void move_right(console_t *console, int n) {
   13a04:	55                   	push   %ebp
   13a05:	89 e5                	mov    %esp,%ebp
   13a07:	83 ec 10             	sub    $0x10,%esp
  if (n == 0) {  // 默认至少移动一位
   13a0a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13a0e:	75 07                	jne    13a17 <move_right+0x13>
    n = 1;
   13a10:	c7 45 0c 01 00 00 00 	movl   $0x1,0xc(%ebp)
  }

  int col = console->cursor_col + n;
   13a17:	8b 45 08             	mov    0x8(%ebp),%eax
   13a1a:	8b 50 14             	mov    0x14(%eax),%edx
   13a1d:	8b 45 0c             	mov    0xc(%ebp),%eax
   13a20:	01 d0                	add    %edx,%eax
   13a22:	89 45 fc             	mov    %eax,-0x4(%ebp)
  console->cursor_col =
      (col >= console->display_cols) ? console->display_cols - 1 : col;
   13a25:	8b 45 08             	mov    0x8(%ebp),%eax
   13a28:	8b 50 0c             	mov    0xc(%eax),%edx
   13a2b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13a2e:	39 c2                	cmp    %eax,%edx
   13a30:	77 0b                	ja     13a3d <move_right+0x39>
   13a32:	8b 45 08             	mov    0x8(%ebp),%eax
   13a35:	8b 40 0c             	mov    0xc(%eax),%eax
   13a38:	83 e8 01             	sub    $0x1,%eax
   13a3b:	eb 03                	jmp    13a40 <move_right+0x3c>
   13a3d:	8b 45 fc             	mov    -0x4(%ebp),%eax
  console->cursor_col =
   13a40:	8b 55 08             	mov    0x8(%ebp),%edx
   13a43:	89 42 14             	mov    %eax,0x14(%edx)
}
   13a46:	90                   	nop
   13a47:	c9                   	leave  
   13a48:	c3                   	ret    

00013a49 <write_esc_square>:
 * @brief 在终端console中写入esc序列
 *
 * @param console
 * @param c
 */
static inline void write_esc_square(console_t *console, char c) {
   13a49:	55                   	push   %ebp
   13a4a:	89 e5                	mov    %esp,%ebp
   13a4c:	83 ec 14             	sub    $0x14,%esp
   13a4f:	8b 45 0c             	mov    0xc(%ebp),%eax
   13a52:	88 45 ec             	mov    %al,-0x14(%ebp)
  if (c >= '0' && c <= '9') {  // 解析出序列的参数
   13a55:	80 7d ec 2f          	cmpb   $0x2f,-0x14(%ebp)
   13a59:	7e 44                	jle    13a9f <write_esc_square+0x56>
   13a5b:	80 7d ec 39          	cmpb   $0x39,-0x14(%ebp)
   13a5f:	7f 3e                	jg     13a9f <write_esc_square+0x56>
    int *param = &console->esc_param[console->curr_param_index];
   13a61:	8b 45 08             	mov    0x8(%ebp),%eax
   13a64:	8b 40 50             	mov    0x50(%eax),%eax
   13a67:	83 c0 08             	add    $0x8,%eax
   13a6a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   13a71:	8b 45 08             	mov    0x8(%ebp),%eax
   13a74:	01 d0                	add    %edx,%eax
   13a76:	83 c0 08             	add    $0x8,%eax
   13a79:	89 45 fc             	mov    %eax,-0x4(%ebp)
    *param = (*param) * 10 + c - '0';
   13a7c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13a7f:	8b 10                	mov    (%eax),%edx
   13a81:	89 d0                	mov    %edx,%eax
   13a83:	c1 e0 02             	shl    $0x2,%eax
   13a86:	01 d0                	add    %edx,%eax
   13a88:	01 c0                	add    %eax,%eax
   13a8a:	89 c2                	mov    %eax,%edx
   13a8c:	0f be 45 ec          	movsbl -0x14(%ebp),%eax
   13a90:	01 d0                	add    %edx,%eax
   13a92:	8d 50 d0             	lea    -0x30(%eax),%edx
   13a95:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13a98:	89 10                	mov    %edx,(%eax)
  if (c >= '0' && c <= '9') {  // 解析出序列的参数
   13a9a:	e9 ab 00 00 00       	jmp    13b4a <write_esc_square+0x101>
  } else if (c == ';' && console->curr_param_index <
   13a9f:	80 7d ec 3b          	cmpb   $0x3b,-0x14(%ebp)
   13aa3:	75 1f                	jne    13ac4 <write_esc_square+0x7b>
   13aa5:	8b 45 08             	mov    0x8(%ebp),%eax
   13aa8:	8b 40 50             	mov    0x50(%eax),%eax
   13aab:	83 f8 09             	cmp    $0x9,%eax
   13aae:	7f 14                	jg     13ac4 <write_esc_square+0x7b>
                             ESC_PARAM_MAX) {  // 解析完一个参数，索引加1
    console->curr_param_index++;
   13ab0:	8b 45 08             	mov    0x8(%ebp),%eax
   13ab3:	8b 40 50             	mov    0x50(%eax),%eax
   13ab6:	8d 50 01             	lea    0x1(%eax),%edx
   13ab9:	8b 45 08             	mov    0x8(%ebp),%eax
   13abc:	89 50 50             	mov    %edx,0x50(%eax)
   13abf:	e9 86 00 00 00       	jmp    13b4a <write_esc_square+0x101>
  } else {  // 用序列结束符判断需要进行的操作
    switch (c) {
   13ac4:	0f be 45 ec          	movsbl -0x14(%ebp),%eax
   13ac8:	83 f8 6d             	cmp    $0x6d,%eax
   13acb:	74 25                	je     13af2 <write_esc_square+0xa9>
   13acd:	83 f8 6d             	cmp    $0x6d,%eax
   13ad0:	7f 6d                	jg     13b3f <write_esc_square+0xf6>
   13ad2:	83 f8 4a             	cmp    $0x4a,%eax
   13ad5:	74 5d                	je     13b34 <write_esc_square+0xeb>
   13ad7:	83 f8 4a             	cmp    $0x4a,%eax
   13ada:	7f 63                	jg     13b3f <write_esc_square+0xf6>
   13adc:	83 f8 48             	cmp    $0x48,%eax
   13adf:	74 46                	je     13b27 <write_esc_square+0xde>
   13ae1:	83 f8 48             	cmp    $0x48,%eax
   13ae4:	7f 59                	jg     13b3f <write_esc_square+0xf6>
   13ae6:	83 f8 43             	cmp    $0x43,%eax
   13ae9:	74 28                	je     13b13 <write_esc_square+0xca>
   13aeb:	83 f8 44             	cmp    $0x44,%eax
   13aee:	74 0f                	je     13aff <write_esc_square+0xb6>
        move_cursor(console);
        break;
      case 'J':  // 擦除屏幕指定区域
        erase_in_display(console);
      default:
        break;
   13af0:	eb 4d                	jmp    13b3f <write_esc_square+0xf6>
        set_font_style(console);
   13af2:	ff 75 08             	push   0x8(%ebp)
   13af5:	e8 c6 fd ff ff       	call   138c0 <set_font_style>
   13afa:	83 c4 04             	add    $0x4,%esp
        break;
   13afd:	eb 41                	jmp    13b40 <write_esc_square+0xf7>
        move_left(console, console->esc_param[0]);
   13aff:	8b 45 08             	mov    0x8(%ebp),%eax
   13b02:	8b 40 28             	mov    0x28(%eax),%eax
   13b05:	50                   	push   %eax
   13b06:	ff 75 08             	push   0x8(%ebp)
   13b09:	e8 bd fe ff ff       	call   139cb <move_left>
   13b0e:	83 c4 08             	add    $0x8,%esp
        break;
   13b11:	eb 2d                	jmp    13b40 <write_esc_square+0xf7>
        move_right(console, console->esc_param[0]);
   13b13:	8b 45 08             	mov    0x8(%ebp),%eax
   13b16:	8b 40 28             	mov    0x28(%eax),%eax
   13b19:	50                   	push   %eax
   13b1a:	ff 75 08             	push   0x8(%ebp)
   13b1d:	e8 e2 fe ff ff       	call   13a04 <move_right>
   13b22:	83 c4 08             	add    $0x8,%esp
        break;
   13b25:	eb 19                	jmp    13b40 <write_esc_square+0xf7>
        move_cursor(console);
   13b27:	ff 75 08             	push   0x8(%ebp)
   13b2a:	e8 7a fe ff ff       	call   139a9 <move_cursor>
   13b2f:	83 c4 04             	add    $0x4,%esp
        break;
   13b32:	eb 0c                	jmp    13b40 <write_esc_square+0xf7>
        erase_in_display(console);
   13b34:	ff 75 08             	push   0x8(%ebp)
   13b37:	e8 1e fe ff ff       	call   1395a <erase_in_display>
   13b3c:	83 c4 04             	add    $0x4,%esp
        break;
   13b3f:	90                   	nop
    }

    // 执行完操作，将状态机切换回写普通字符模式
    console->write_state = CONSOLE_WRITE_NORMAL;
   13b40:	8b 45 08             	mov    0x8(%ebp),%eax
   13b43:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  }
}
   13b49:	90                   	nop
   13b4a:	90                   	nop
   13b4b:	c9                   	leave  
   13b4c:	c3                   	ret    

00013b4d <console_write>:
 * @param console 第几个控制台
 * @param data 写入的字符串
 * @param size 字符串大小
 * @return int
 */
int console_write(tty_t *tty) {
   13b4d:	55                   	push   %ebp
   13b4e:	89 e5                	mov    %esp,%ebp
   13b50:	83 ec 18             	sub    $0x18,%esp
  // 获取需要需要写入的终端
  console_t *console = console_table + tty->console_index;
   13b53:	8b 45 08             	mov    0x8(%ebp),%eax
   13b56:	8b 40 08             	mov    0x8(%eax),%eax
   13b59:	6b c0 54             	imul   $0x54,%eax,%eax
   13b5c:	05 00 b2 04 00       	add    $0x4b200,%eax
   13b61:	89 45 f0             	mov    %eax,-0x10(%ebp)
  int len = 0;
   13b64:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  //在tty的缓冲队列中读取一个字符写入终端
  do {
    char c;
    int err = tty_fifo_get(&tty->out_fifo, &c);
   13b6b:	8b 45 08             	mov    0x8(%ebp),%eax
   13b6e:	8d 50 0c             	lea    0xc(%eax),%edx
   13b71:	83 ec 08             	sub    $0x8,%esp
   13b74:	8d 45 eb             	lea    -0x15(%ebp),%eax
   13b77:	50                   	push   %eax
   13b78:	52                   	push   %edx
   13b79:	e8 86 0a 00 00       	call   14604 <tty_fifo_get>
   13b7e:	83 c4 10             	add    $0x10,%esp
   13b81:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (err < 0) {
   13b84:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   13b88:	79 18                	jns    13ba2 <console_write+0x55>

    len++;
  } while (1);

  // 更新光标的位置
  if (tty->console_index == curr_console_index) {
   13b8a:	8b 45 08             	mov    0x8(%ebp),%eax
   13b8d:	8b 50 08             	mov    0x8(%eax),%edx
   13b90:	a1 a0 b4 04 00       	mov    0x4b4a0,%eax
   13b95:	39 c2                	cmp    %eax,%edx
   13b97:	0f 84 83 00 00 00    	je     13c20 <console_write+0xd3>
   13b9d:	e9 8c 00 00 00       	jmp    13c2e <console_write+0xe1>
    sem_notify(&tty->out_sem);
   13ba2:	8b 45 08             	mov    0x8(%ebp),%eax
   13ba5:	83 c0 34             	add    $0x34,%eax
   13ba8:	83 ec 0c             	sub    $0xc,%esp
   13bab:	50                   	push   %eax
   13bac:	e8 53 18 00 00       	call   15404 <sem_notify>
   13bb1:	83 c4 10             	add    $0x10,%esp
    switch (console->write_state) {
   13bb4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13bb7:	8b 00                	mov    (%eax),%eax
   13bb9:	83 f8 02             	cmp    $0x2,%eax
   13bbc:	74 40                	je     13bfe <console_write+0xb1>
   13bbe:	83 f8 02             	cmp    $0x2,%eax
   13bc1:	77 53                	ja     13c16 <console_write+0xc9>
   13bc3:	85 c0                	test   %eax,%eax
   13bc5:	74 07                	je     13bce <console_write+0x81>
   13bc7:	83 f8 01             	cmp    $0x1,%eax
   13bca:	74 1a                	je     13be6 <console_write+0x99>
        break;
   13bcc:	eb 48                	jmp    13c16 <console_write+0xc9>
        write_normal(console, c);
   13bce:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   13bd2:	0f be c0             	movsbl %al,%eax
   13bd5:	83 ec 08             	sub    $0x8,%esp
   13bd8:	50                   	push   %eax
   13bd9:	ff 75 f0             	push   -0x10(%ebp)
   13bdc:	e8 54 fb ff ff       	call   13735 <write_normal>
   13be1:	83 c4 10             	add    $0x10,%esp
        break;
   13be4:	eb 31                	jmp    13c17 <console_write+0xca>
        write_esc(console, c);
   13be6:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   13bea:	0f be c0             	movsbl %al,%eax
   13bed:	83 ec 08             	sub    $0x8,%esp
   13bf0:	50                   	push   %eax
   13bf1:	ff 75 f0             	push   -0x10(%ebp)
   13bf4:	e8 4b fc ff ff       	call   13844 <write_esc>
   13bf9:	83 c4 10             	add    $0x10,%esp
        break;
   13bfc:	eb 19                	jmp    13c17 <console_write+0xca>
        write_esc_square(console, c);
   13bfe:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   13c02:	0f be c0             	movsbl %al,%eax
   13c05:	83 ec 08             	sub    $0x8,%esp
   13c08:	50                   	push   %eax
   13c09:	ff 75 f0             	push   -0x10(%ebp)
   13c0c:	e8 38 fe ff ff       	call   13a49 <write_esc_square>
   13c11:	83 c4 10             	add    $0x10,%esp
        break;
   13c14:	eb 01                	jmp    13c17 <console_write+0xca>
        break;
   13c16:	90                   	nop
    len++;
   13c17:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  do {
   13c1b:	e9 4b ff ff ff       	jmp    13b6b <console_write+0x1e>
    //若当前tty设备是正在显示的设备，则更新对应的光标位置
    update_cursor_pos(console);
   13c20:	83 ec 0c             	sub    $0xc,%esp
   13c23:	ff 75 f0             	push   -0x10(%ebp)
   13c26:	e8 b4 f5 ff ff       	call   131df <update_cursor_pos>
   13c2b:	83 c4 10             	add    $0x10,%esp
  }
  return len;
   13c2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   13c31:	c9                   	leave  
   13c32:	c3                   	ret    

00013c33 <console_close>:
 * @brief 关闭控制台
 *
 * @param console
 * @return int
 */
void console_close(int console) {}
   13c33:	55                   	push   %ebp
   13c34:	89 e5                	mov    %esp,%ebp
   13c36:	90                   	nop
   13c37:	5d                   	pop    %ebp
   13c38:	c3                   	ret    

00013c39 <console_select>:
/**
 * @brief 通过索引号更改当前系统使用的终端
 * 
 * @param console 
 */
void console_select(int console_index) {
   13c39:	55                   	push   %ebp
   13c3a:	89 e5                	mov    %esp,%ebp
   13c3c:	83 ec 18             	sub    $0x18,%esp
    console_t *console = console_table + console_index;
   13c3f:	8b 45 08             	mov    0x8(%ebp),%eax
   13c42:	6b c0 54             	imul   $0x54,%eax,%eax
   13c45:	05 00 b2 04 00       	add    $0x4b200,%eax
   13c4a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (console->disp_base == 0) {  //当前控制台还未被初始化，进行初始化操作
   13c4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13c50:	8b 40 04             	mov    0x4(%eax),%eax
   13c53:	85 c0                	test   %eax,%eax
   13c55:	75 0e                	jne    13c65 <console_select+0x2c>
      console_init(console_index);
   13c57:	83 ec 0c             	sub    $0xc,%esp
   13c5a:	ff 75 08             	push   0x8(%ebp)
   13c5d:	e8 da f9 ff ff       	call   1363c <console_init>
   13c62:	83 c4 10             	add    $0x10,%esp
    }

    //计算屏幕显示的起始位置
    uint16_t pos = console_index * console->display_rows * console->display_cols;
   13c65:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13c68:	8b 40 08             	mov    0x8(%eax),%eax
   13c6b:	89 c2                	mov    %eax,%edx
   13c6d:	8b 45 08             	mov    0x8(%ebp),%eax
   13c70:	0f af d0             	imul   %eax,%edx
   13c73:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13c76:	8b 40 0c             	mov    0xc(%eax),%eax
   13c79:	0f af c2             	imul   %edx,%eax
   13c7c:	66 89 45 f2          	mov    %ax,-0xe(%ebp)

    //向端口写入起始位置
    outb(0x3d4, 0xc); //告诉端口要写屏幕起始索引的高8位
   13c80:	83 ec 08             	sub    $0x8,%esp
   13c83:	6a 0c                	push   $0xc
   13c85:	68 d4 03 00 00       	push   $0x3d4
   13c8a:	e8 bb f4 ff ff       	call   1314a <outb>
   13c8f:	83 c4 10             	add    $0x10,%esp
    outb(0x3d5, (uint8_t)((pos >> 8) & 0xff));  
   13c92:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   13c96:	66 c1 e8 08          	shr    $0x8,%ax
   13c9a:	0f b6 c0             	movzbl %al,%eax
   13c9d:	83 ec 08             	sub    $0x8,%esp
   13ca0:	50                   	push   %eax
   13ca1:	68 d5 03 00 00       	push   $0x3d5
   13ca6:	e8 9f f4 ff ff       	call   1314a <outb>
   13cab:	83 c4 10             	add    $0x10,%esp
    outb(0x3d4, 0xd);//告诉端口要写屏幕起始索引的低8位
   13cae:	83 ec 08             	sub    $0x8,%esp
   13cb1:	6a 0d                	push   $0xd
   13cb3:	68 d4 03 00 00       	push   $0x3d4
   13cb8:	e8 8d f4 ff ff       	call   1314a <outb>
   13cbd:	83 c4 10             	add    $0x10,%esp
    outb(0x3d5, (uint8_t)(pos & 0xff));  
   13cc0:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   13cc4:	0f b6 c0             	movzbl %al,%eax
   13cc7:	83 ec 08             	sub    $0x8,%esp
   13cca:	50                   	push   %eax
   13ccb:	68 d5 03 00 00       	push   $0x3d5
   13cd0:	e8 75 f4 ff ff       	call   1314a <outb>
   13cd5:	83 c4 10             	add    $0x10,%esp

    //更新当前使用控制台
    curr_console_index = console_index;
   13cd8:	8b 45 08             	mov    0x8(%ebp),%eax
   13cdb:	a3 a0 b4 04 00       	mov    %eax,0x4b4a0

    //更新光标位置
    update_cursor_pos(console);
   13ce0:	83 ec 0c             	sub    $0xc,%esp
   13ce3:	ff 75 f4             	push   -0xc(%ebp)
   13ce6:	e8 f4 f4 ff ff       	call   131df <update_cursor_pos>
   13ceb:	83 c4 10             	add    $0x10,%esp

    //在控制台显示终端设备号
    show_char(console, console_index + '0');
   13cee:	8b 45 08             	mov    0x8(%ebp),%eax
   13cf1:	83 c0 30             	add    $0x30,%eax
   13cf4:	0f be c0             	movsbl %al,%eax
   13cf7:	83 ec 08             	sub    $0x8,%esp
   13cfa:	50                   	push   %eax
   13cfb:	ff 75 f4             	push   -0xc(%ebp)
   13cfe:	e8 6b f7 ff ff       	call   1346e <show_char>
   13d03:	83 c4 10             	add    $0x10,%esp

   13d06:	90                   	nop
   13d07:	c9                   	leave  
   13d08:	c3                   	ret    

00013d09 <is_dev_exist>:
 * @brief 根据设备id判断设备是否存在
 * 
 * @param dev_id 
 * @return int 
 */
static int is_dev_exist(int dev_id) {
   13d09:	55                   	push   %ebp
   13d0a:	89 e5                	mov    %esp,%ebp
    //dev_id越界，设备不存在
    if (dev_id < 0 || dev_id >= DEV_TABLE_SIZE) {
   13d0c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13d10:	78 06                	js     13d18 <is_dev_exist+0xf>
   13d12:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   13d16:	7e 07                	jle    13d1f <is_dev_exist+0x16>
        return 0;
   13d18:	b8 00 00 00 00       	mov    $0x0,%eax
   13d1d:	eb 3c                	jmp    13d5b <is_dev_exist+0x52>
    }
    
    //设备空间未初始化，设备不存在
    if (dev_table[dev_id].open_count == 0 || dev_table[dev_id].desc == (dev_desc_t*)0) {
   13d1f:	8b 55 08             	mov    0x8(%ebp),%edx
   13d22:	89 d0                	mov    %edx,%eax
   13d24:	c1 e0 02             	shl    $0x2,%eax
   13d27:	01 d0                	add    %edx,%eax
   13d29:	c1 e0 02             	shl    $0x2,%eax
   13d2c:	05 d0 b4 04 00       	add    $0x4b4d0,%eax
   13d31:	8b 00                	mov    (%eax),%eax
   13d33:	85 c0                	test   %eax,%eax
   13d35:	74 18                	je     13d4f <is_dev_exist+0x46>
   13d37:	8b 55 08             	mov    0x8(%ebp),%edx
   13d3a:	89 d0                	mov    %edx,%eax
   13d3c:	c1 e0 02             	shl    $0x2,%eax
   13d3f:	01 d0                	add    %edx,%eax
   13d41:	c1 e0 02             	shl    $0x2,%eax
   13d44:	05 c0 b4 04 00       	add    $0x4b4c0,%eax
   13d49:	8b 00                	mov    (%eax),%eax
   13d4b:	85 c0                	test   %eax,%eax
   13d4d:	75 07                	jne    13d56 <is_dev_exist+0x4d>
        return 0;
   13d4f:	b8 00 00 00 00       	mov    $0x0,%eax
   13d54:	eb 05                	jmp    13d5b <is_dev_exist+0x52>
    }

    return 1;
   13d56:	b8 01 00 00 00       	mov    $0x1,%eax
}
   13d5b:	5d                   	pop    %ebp
   13d5c:	c3                   	ret    

00013d5d <dev_open>:
 * @param dev_type 打开的设备类型
 * @param dev_index 打开的对应类型设备中的具体设备号
 * @param data 设备需要的参数数据
 * @return int 返回dev_id，该设备的描述符
 */
int dev_open(int dev_type, int dev_index, void *data) {
   13d5d:	55                   	push   %ebp
   13d5e:	89 e5                	mov    %esp,%ebp
   13d60:	83 ec 28             	sub    $0x28,%esp
    //1.关中断，确保线程成功获取到设备描述符
    idt_state_t state = idt_enter_protection();
   13d63:	e8 f3 f2 ff ff       	call   1305b <idt_enter_protection>
   13d68:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    
    //2.遍历dev_table，若该设备打开过则记录打开次数再返回描述符
    //若未打开过则在dev_table分配空间给该设备，并打开该设备
    device_t *free_dev = (device_t*)0;
   13d6b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (int i = 0; i < sizeof(dev_table) / sizeof(dev_table[0]); ++i) {
   13d72:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   13d79:	eb 68                	jmp    13de3 <dev_open+0x86>
        device_t *dev = dev_table + i;
   13d7b:	8b 55 f0             	mov    -0x10(%ebp),%edx
   13d7e:	89 d0                	mov    %edx,%eax
   13d80:	c1 e0 02             	shl    $0x2,%eax
   13d83:	01 d0                	add    %edx,%eax
   13d85:	c1 e0 02             	shl    $0x2,%eax
   13d88:	05 c0 b4 04 00       	add    $0x4b4c0,%eax
   13d8d:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (dev->open_count == 0) { 
   13d90:	8b 45 e0             	mov    -0x20(%ebp),%eax
   13d93:	8b 40 10             	mov    0x10(%eax),%eax
   13d96:	85 c0                	test   %eax,%eax
   13d98:	75 08                	jne    13da2 <dev_open+0x45>
            //需要打开的设备未打开过，为该设备分配空间
            free_dev = dev;
   13d9a:	8b 45 e0             	mov    -0x20(%ebp),%eax
   13d9d:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   13da0:	eb 49                	jmp    13deb <dev_open+0x8e>
        } else if (dev->desc->dev_type == dev_type && dev->dev_index == dev_index) {
   13da2:	8b 45 e0             	mov    -0x20(%ebp),%eax
   13da5:	8b 00                	mov    (%eax),%eax
   13da7:	8b 40 14             	mov    0x14(%eax),%eax
   13daa:	39 45 08             	cmp    %eax,0x8(%ebp)
   13dad:	75 30                	jne    13ddf <dev_open+0x82>
   13daf:	8b 45 e0             	mov    -0x20(%ebp),%eax
   13db2:	8b 40 08             	mov    0x8(%eax),%eax
   13db5:	39 45 0c             	cmp    %eax,0xc(%ebp)
   13db8:	75 25                	jne    13ddf <dev_open+0x82>
            //设备已打开过,增加打开次数
            dev->open_count++;
   13dba:	8b 45 e0             	mov    -0x20(%ebp),%eax
   13dbd:	8b 40 10             	mov    0x10(%eax),%eax
   13dc0:	8d 50 01             	lea    0x1(%eax),%edx
   13dc3:	8b 45 e0             	mov    -0x20(%ebp),%eax
   13dc6:	89 50 10             	mov    %edx,0x10(%eax)
            idt_leave_protection(state);
   13dc9:	83 ec 0c             	sub    $0xc,%esp
   13dcc:	ff 75 e4             	push   -0x1c(%ebp)
   13dcf:	e8 9f f2 ff ff       	call   13073 <idt_leave_protection>
   13dd4:	83 c4 10             	add    $0x10,%esp
            //返回设备描述符
            return i;
   13dd7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13dda:	e9 c6 00 00 00       	jmp    13ea5 <dev_open+0x148>
    for (int i = 0; i < sizeof(dev_table) / sizeof(dev_table[0]); ++i) {
   13ddf:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   13de3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13de6:	83 f8 7f             	cmp    $0x7f,%eax
   13de9:	76 90                	jbe    13d7b <dev_open+0x1e>
        }
    }

    //3.设备未打开过，遍历设备类型描述表，寻找对应的设备类型用于初始化该设备
    dev_desc_t *desc = (dev_desc_t*)0;
   13deb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    for (int i = 0; i < sizeof(dev_des_table) / sizeof(dev_des_table[0]); ++i) {
   13df2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   13df9:	eb 24                	jmp    13e1f <dev_open+0xc2>
        dev_desc_t *d = dev_des_table[i];
   13dfb:	8b 45 e8             	mov    -0x18(%ebp),%eax
   13dfe:	8b 04 85 50 80 01 00 	mov    0x18050(,%eax,4),%eax
   13e05:	89 45 dc             	mov    %eax,-0x24(%ebp)
        if (d->dev_type == dev_type) {
   13e08:	8b 45 dc             	mov    -0x24(%ebp),%eax
   13e0b:	8b 40 14             	mov    0x14(%eax),%eax
   13e0e:	39 45 08             	cmp    %eax,0x8(%ebp)
   13e11:	75 08                	jne    13e1b <dev_open+0xbe>
            desc = d;
   13e13:	8b 45 dc             	mov    -0x24(%ebp),%eax
   13e16:	89 45 ec             	mov    %eax,-0x14(%ebp)
            break;
   13e19:	eb 0c                	jmp    13e27 <dev_open+0xca>
    for (int i = 0; i < sizeof(dev_des_table) / sizeof(dev_des_table[0]); ++i) {
   13e1b:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   13e1f:	8b 45 e8             	mov    -0x18(%ebp),%eax
   13e22:	83 f8 01             	cmp    $0x1,%eax
   13e25:	76 d4                	jbe    13dfb <dev_open+0x9e>
        }
    }

    //4.设备描述结构存在，设备空间分配成功，进行设备的初始化
    if (desc && free_dev) {
   13e27:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   13e2b:	74 65                	je     13e92 <dev_open+0x135>
   13e2d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   13e31:	74 5f                	je     13e92 <dev_open+0x135>
        free_dev->desc = desc;
   13e33:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13e36:	8b 55 ec             	mov    -0x14(%ebp),%edx
   13e39:	89 10                	mov    %edx,(%eax)
        free_dev->data = data;
   13e3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13e3e:	8b 55 10             	mov    0x10(%ebp),%edx
   13e41:	89 50 0c             	mov    %edx,0xc(%eax)
        free_dev->dev_index = dev_index;
   13e44:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13e47:	8b 55 0c             	mov    0xc(%ebp),%edx
   13e4a:	89 50 08             	mov    %edx,0x8(%eax)

        //用该设备描述结构打开该设备
        int err = desc->open(free_dev);
   13e4d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   13e50:	8b 40 18             	mov    0x18(%eax),%eax
   13e53:	83 ec 0c             	sub    $0xc,%esp
   13e56:	ff 75 f4             	push   -0xc(%ebp)
   13e59:	ff d0                	call   *%eax
   13e5b:	83 c4 10             	add    $0x10,%esp
   13e5e:	89 45 d8             	mov    %eax,-0x28(%ebp)
        if (err == 0) { //打开成功
   13e61:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
   13e65:	75 2b                	jne    13e92 <dev_open+0x135>
            free_dev->open_count = 1;
   13e67:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13e6a:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
            idt_leave_protection(state);
   13e71:	83 ec 0c             	sub    $0xc,%esp
   13e74:	ff 75 e4             	push   -0x1c(%ebp)
   13e77:	e8 f7 f1 ff ff       	call   13073 <idt_leave_protection>
   13e7c:	83 c4 10             	add    $0x10,%esp
            //返回设备描述符
            return free_dev - dev_table;
   13e7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13e82:	2d c0 b4 04 00       	sub    $0x4b4c0,%eax
   13e87:	c1 f8 02             	sar    $0x2,%eax
   13e8a:	69 c0 cd cc cc cc    	imul   $0xcccccccd,%eax,%eax
   13e90:	eb 13                	jmp    13ea5 <dev_open+0x148>

        }
    }

    idt_leave_protection(state);
   13e92:	83 ec 0c             	sub    $0xc,%esp
   13e95:	ff 75 e4             	push   -0x1c(%ebp)
   13e98:	e8 d6 f1 ff ff       	call   13073 <idt_leave_protection>
   13e9d:	83 c4 10             	add    $0x10,%esp
    return -1;
   13ea0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   13ea5:	c9                   	leave  
   13ea6:	c3                   	ret    

00013ea7 <dev_read>:
 * @param addr 读取地址
 * @param buf 读取数据缓冲区
 * @param size 读取字节大小
 * @return int 成功读取大小
 */
int dev_read(int dev_id, int addr, char *buf, int size) {
   13ea7:	55                   	push   %ebp
   13ea8:	89 e5                	mov    %esp,%ebp
   13eaa:	83 ec 18             	sub    $0x18,%esp
    //设备不存在，直接返回-1
    if (!is_dev_exist(dev_id)) {
   13ead:	ff 75 08             	push   0x8(%ebp)
   13eb0:	e8 54 fe ff ff       	call   13d09 <is_dev_exist>
   13eb5:	83 c4 04             	add    $0x4,%esp
   13eb8:	85 c0                	test   %eax,%eax
   13eba:	75 07                	jne    13ec3 <dev_read+0x1c>
        return -1;
   13ebc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   13ec1:	eb 2e                	jmp    13ef1 <dev_read+0x4a>
    }

    //获取设备，并通过其描述结构的操作接口进行真正的读操作
    device_t *dev = dev_table + dev_id;
   13ec3:	8b 55 08             	mov    0x8(%ebp),%edx
   13ec6:	89 d0                	mov    %edx,%eax
   13ec8:	c1 e0 02             	shl    $0x2,%eax
   13ecb:	01 d0                	add    %edx,%eax
   13ecd:	c1 e0 02             	shl    $0x2,%eax
   13ed0:	05 c0 b4 04 00       	add    $0x4b4c0,%eax
   13ed5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dev->desc->read(dev, addr, buf, size);
   13ed8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13edb:	8b 00                	mov    (%eax),%eax
   13edd:	8b 40 1c             	mov    0x1c(%eax),%eax
   13ee0:	ff 75 14             	push   0x14(%ebp)
   13ee3:	ff 75 10             	push   0x10(%ebp)
   13ee6:	ff 75 0c             	push   0xc(%ebp)
   13ee9:	ff 75 f4             	push   -0xc(%ebp)
   13eec:	ff d0                	call   *%eax
   13eee:	83 c4 10             	add    $0x10,%esp
}
   13ef1:	c9                   	leave  
   13ef2:	c3                   	ret    

00013ef3 <dev_write>:
 * @param addr 写入地址
 * @param buf 写入数据缓冲区
 * @param size 写入字节大小
 * @return int 成功写入大小
 */
int dev_write(int dev_id, int addr, char *buf, int size)  {
   13ef3:	55                   	push   %ebp
   13ef4:	89 e5                	mov    %esp,%ebp
   13ef6:	83 ec 18             	sub    $0x18,%esp
    //设备不存在，直接返回-1
    if (!is_dev_exist(dev_id)) {
   13ef9:	ff 75 08             	push   0x8(%ebp)
   13efc:	e8 08 fe ff ff       	call   13d09 <is_dev_exist>
   13f01:	83 c4 04             	add    $0x4,%esp
   13f04:	85 c0                	test   %eax,%eax
   13f06:	75 07                	jne    13f0f <dev_write+0x1c>
        return -1;
   13f08:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   13f0d:	eb 2e                	jmp    13f3d <dev_write+0x4a>
    }

    //获取设备，并通过其描述结构的操作接口进行真正的写操作
    device_t *dev = dev_table + dev_id;
   13f0f:	8b 55 08             	mov    0x8(%ebp),%edx
   13f12:	89 d0                	mov    %edx,%eax
   13f14:	c1 e0 02             	shl    $0x2,%eax
   13f17:	01 d0                	add    %edx,%eax
   13f19:	c1 e0 02             	shl    $0x2,%eax
   13f1c:	05 c0 b4 04 00       	add    $0x4b4c0,%eax
   13f21:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dev->desc->write(dev, addr, buf, size);
   13f24:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13f27:	8b 00                	mov    (%eax),%eax
   13f29:	8b 40 20             	mov    0x20(%eax),%eax
   13f2c:	ff 75 14             	push   0x14(%ebp)
   13f2f:	ff 75 10             	push   0x10(%ebp)
   13f32:	ff 75 0c             	push   0xc(%ebp)
   13f35:	ff 75 f4             	push   -0xc(%ebp)
   13f38:	ff d0                	call   *%eax
   13f3a:	83 c4 10             	add    $0x10,%esp
}
   13f3d:	c9                   	leave  
   13f3e:	c3                   	ret    

00013f3f <dev_control>:
 * @param cmd 控制指令
 * @param arg0 指令参数
 * @param arg1 指令参数
 * @return int 
 */
int dev_control(int dev_id, int cmd, int arg0, int arg1) {
   13f3f:	55                   	push   %ebp
   13f40:	89 e5                	mov    %esp,%ebp
   13f42:	83 ec 18             	sub    $0x18,%esp
    //设备不存在，直接返回-1
    if (!is_dev_exist(dev_id)) {
   13f45:	ff 75 08             	push   0x8(%ebp)
   13f48:	e8 bc fd ff ff       	call   13d09 <is_dev_exist>
   13f4d:	83 c4 04             	add    $0x4,%esp
   13f50:	85 c0                	test   %eax,%eax
   13f52:	75 07                	jne    13f5b <dev_control+0x1c>
        return -1;
   13f54:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   13f59:	eb 2e                	jmp    13f89 <dev_control+0x4a>
    }

    //获取设备，并通过其描述结构的操作接口进行真正的控制操作
    device_t *dev = dev_table + dev_id;
   13f5b:	8b 55 08             	mov    0x8(%ebp),%edx
   13f5e:	89 d0                	mov    %edx,%eax
   13f60:	c1 e0 02             	shl    $0x2,%eax
   13f63:	01 d0                	add    %edx,%eax
   13f65:	c1 e0 02             	shl    $0x2,%eax
   13f68:	05 c0 b4 04 00       	add    $0x4b4c0,%eax
   13f6d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dev->desc->control(dev, cmd, arg0, arg1);
   13f70:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13f73:	8b 00                	mov    (%eax),%eax
   13f75:	8b 40 24             	mov    0x24(%eax),%eax
   13f78:	ff 75 14             	push   0x14(%ebp)
   13f7b:	ff 75 10             	push   0x10(%ebp)
   13f7e:	ff 75 0c             	push   0xc(%ebp)
   13f81:	ff 75 f4             	push   -0xc(%ebp)
   13f84:	ff d0                	call   *%eax
   13f86:	83 c4 10             	add    $0x10,%esp
}
   13f89:	c9                   	leave  
   13f8a:	c3                   	ret    

00013f8b <dev_close>:
/**
 * @brief 关闭设备
 * 
 * @param dev_id 设备描述符
 */
void dev_close(int dev_id) {
   13f8b:	55                   	push   %ebp
   13f8c:	89 e5                	mov    %esp,%ebp
   13f8e:	83 ec 18             	sub    $0x18,%esp
    //设备不存在，直接返回-1
    if (!is_dev_exist(dev_id)) {
   13f91:	ff 75 08             	push   0x8(%ebp)
   13f94:	e8 70 fd ff ff       	call   13d09 <is_dev_exist>
   13f99:	83 c4 04             	add    $0x4,%esp
   13f9c:	85 c0                	test   %eax,%eax
   13f9e:	74 6b                	je     1400b <dev_close+0x80>
        return;
    }

    //获取设备，并通过其描述结构的操作接口进行真正的关闭操作
    device_t *dev = dev_table + dev_id;
   13fa0:	8b 55 08             	mov    0x8(%ebp),%edx
   13fa3:	89 d0                	mov    %edx,%eax
   13fa5:	c1 e0 02             	shl    $0x2,%eax
   13fa8:	01 d0                	add    %edx,%eax
   13faa:	c1 e0 02             	shl    $0x2,%eax
   13fad:	05 c0 b4 04 00       	add    $0x4b4c0,%eax
   13fb2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    //释放资源
    idt_state_t state = idt_enter_protection();
   13fb5:	e8 a1 f0 ff ff       	call   1305b <idt_enter_protection>
   13fba:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (--dev->open_count == 0) {   //该设备已不被操作系统引用，可以关闭
   13fbd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13fc0:	8b 40 10             	mov    0x10(%eax),%eax
   13fc3:	8d 50 ff             	lea    -0x1(%eax),%edx
   13fc6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13fc9:	89 50 10             	mov    %edx,0x10(%eax)
   13fcc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13fcf:	8b 40 10             	mov    0x10(%eax),%eax
   13fd2:	85 c0                	test   %eax,%eax
   13fd4:	75 25                	jne    13ffb <dev_close+0x70>
        //关闭设备
        dev->desc->close(dev);
   13fd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13fd9:	8b 00                	mov    (%eax),%eax
   13fdb:	8b 40 28             	mov    0x28(%eax),%eax
   13fde:	83 ec 0c             	sub    $0xc,%esp
   13fe1:	ff 75 f4             	push   -0xc(%ebp)
   13fe4:	ff d0                	call   *%eax
   13fe6:	83 c4 10             	add    $0x10,%esp
        //释放设备空间资源
        kernel_memset(dev, 0, sizeof(device_t));
   13fe9:	83 ec 04             	sub    $0x4,%esp
   13fec:	6a 14                	push   $0x14
   13fee:	6a 00                	push   $0x0
   13ff0:	ff 75 f4             	push   -0xc(%ebp)
   13ff3:	e8 7f 1d 00 00       	call   15d77 <kernel_memset>
   13ff8:	83 c4 10             	add    $0x10,%esp
    }

    idt_leave_protection(state);
   13ffb:	83 ec 0c             	sub    $0xc,%esp
   13ffe:	ff 75 f0             	push   -0x10(%ebp)
   14001:	e8 6d f0 ff ff       	call   13073 <idt_leave_protection>
   14006:	83 c4 10             	add    $0x10,%esp
   14009:	eb 01                	jmp    1400c <dev_close+0x81>
        return;
   1400b:	90                   	nop
   1400c:	c9                   	leave  
   1400d:	c3                   	ret    

0001400e <inb>:
static inline uint8_t inb(uint16_t port) {
   1400e:	55                   	push   %ebp
   1400f:	89 e5                	mov    %esp,%ebp
   14011:	83 ec 14             	sub    $0x14,%esp
   14014:	8b 45 08             	mov    0x8(%ebp),%eax
   14017:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   1401b:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1401f:	89 c2                	mov    %eax,%edx
   14021:	ec                   	in     (%dx),%al
   14022:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   14025:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   14029:	c9                   	leave  
   1402a:	c3                   	ret    

0001402b <is_make_code>:
 * @brief 判断按键是按下还是弹起
 * 
 * @param key_code 
 * @return int 
 */
static inline int is_make_code(uint8_t key_code) {
   1402b:	55                   	push   %ebp
   1402c:	89 e5                	mov    %esp,%ebp
   1402e:	83 ec 04             	sub    $0x4,%esp
   14031:	8b 45 08             	mov    0x8(%ebp),%eax
   14034:	88 45 fc             	mov    %al,-0x4(%ebp)
    return !(key_code & 0x80);  //key_code的第7位为1则为按下，为0则为弹起
   14037:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
   1403b:	f7 d0                	not    %eax
   1403d:	c0 e8 07             	shr    $0x7,%al
   14040:	0f b6 c0             	movzbl %al,%eax
}
   14043:	c9                   	leave  
   14044:	c3                   	ret    

00014045 <get_key>:
 * @brief 获取真正的键值码，用来映射键值
 * 
 * @param key_code 
 * @return int 
 */
static inline int get_key(uint8_t key_code) {
   14045:	55                   	push   %ebp
   14046:	89 e5                	mov    %esp,%ebp
   14048:	83 ec 04             	sub    $0x4,%esp
   1404b:	8b 45 08             	mov    0x8(%ebp),%eax
   1404e:	88 45 fc             	mov    %al,-0x4(%ebp)
    return key_code & 0x7f; //key_code的低7位为键值码
   14051:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
   14055:	83 e0 7f             	and    $0x7f,%eax
}
   14058:	c9                   	leave  
   14059:	c3                   	ret    

0001405a <do_fx_key>:
/**
 * @brief 对F1~F8功能键进行处理
 * 
 * @param key 
 */
static void do_fx_key(char key) {
   1405a:	55                   	push   %ebp
   1405b:	89 e5                	mov    %esp,%ebp
   1405d:	83 ec 28             	sub    $0x28,%esp
   14060:	8b 45 08             	mov    0x8(%ebp),%eax
   14063:	88 45 e4             	mov    %al,-0x1c(%ebp)
    int index = key - KEY_F1;
   14066:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
   1406a:	83 e8 3b             	sub    $0x3b,%eax
   1406d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    //在ctr键按下的情况下才进行处理
    if (kbd_state.lctrl_press || kbd_state.rctrl_press) {
   14070:	0f b6 05 c0 be 04 00 	movzbl 0x4bec0,%eax
   14077:	83 e0 20             	and    $0x20,%eax
   1407a:	84 c0                	test   %al,%al
   1407c:	75 0e                	jne    1408c <do_fx_key+0x32>
   1407e:	0f b6 05 c0 be 04 00 	movzbl 0x4bec0,%eax
   14085:	83 e0 40             	and    $0x40,%eax
   14088:	84 c0                	test   %al,%al
   1408a:	74 0e                	je     1409a <do_fx_key+0x40>
        tty_select(index);
   1408c:	83 ec 0c             	sub    $0xc,%esp
   1408f:	ff 75 f4             	push   -0xc(%ebp)
   14092:	e8 47 09 00 00       	call   149de <tty_select>
   14097:	83 c4 10             	add    $0x10,%esp
    }
}
   1409a:	90                   	nop
   1409b:	c9                   	leave  
   1409c:	c3                   	ret    

0001409d <do_normal_key>:
/**
 * @brief 处理键盘按键按下时得到的原码
 *  
 * @param key_code 键按下时得到的原码
 */
static void do_normal_key(uint8_t key_code) {
   1409d:	55                   	push   %ebp
   1409e:	89 e5                	mov    %esp,%ebp
   140a0:	83 ec 28             	sub    $0x28,%esp
   140a3:	8b 45 08             	mov    0x8(%ebp),%eax
   140a6:	88 45 e4             	mov    %al,-0x1c(%ebp)
    char key = get_key(key_code);
   140a9:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
   140ad:	50                   	push   %eax
   140ae:	e8 92 ff ff ff       	call   14045 <get_key>
   140b3:	83 c4 04             	add    $0x4,%esp
   140b6:	88 45 f7             	mov    %al,-0x9(%ebp)
    int is_make = is_make_code(key_code);
   140b9:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
   140bd:	50                   	push   %eax
   140be:	e8 68 ff ff ff       	call   1402b <is_make_code>
   140c3:	83 c4 04             	add    $0x4,%esp
   140c6:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //处理对应按键
    switch (key) {
   140c9:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   140cd:	83 e8 1d             	sub    $0x1d,%eax
   140d0:	83 f8 3b             	cmp    $0x3b,%eax
   140d3:	0f 87 06 01 00 00    	ja     141df <do_normal_key+0x142>
   140d9:	8b 04 85 80 73 01 00 	mov    0x17380(,%eax,4),%eax
   140e0:	ff e0                	jmp    *%eax
        case KEY_RSHIFT:
            kbd_state.rshift_press = is_make ? 1 : 0;
   140e2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   140e6:	0f 95 c0             	setne  %al
   140e9:	c1 e0 07             	shl    $0x7,%eax
   140ec:	c0 f8 07             	sar    $0x7,%al
   140ef:	83 e0 01             	and    $0x1,%eax
   140f2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   140f9:	0f b6 05 c0 be 04 00 	movzbl 0x4bec0,%eax
   14100:	83 e0 fb             	and    $0xfffffffb,%eax
   14103:	09 d0                	or     %edx,%eax
   14105:	a2 c0 be 04 00       	mov    %al,0x4bec0
            break;
   1410a:	e9 6b 01 00 00       	jmp    1427a <do_normal_key+0x1dd>
        
        case KEY_LSHIFT:
            kbd_state.lshift_press = is_make ? 1 : 0;
   1410f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14113:	0f 95 c0             	setne  %al
   14116:	c1 e0 07             	shl    $0x7,%eax
   14119:	c0 f8 07             	sar    $0x7,%al
   1411c:	83 e0 01             	and    $0x1,%eax
   1411f:	8d 14 00             	lea    (%eax,%eax,1),%edx
   14122:	0f b6 05 c0 be 04 00 	movzbl 0x4bec0,%eax
   14129:	83 e0 fd             	and    $0xfffffffd,%eax
   1412c:	09 d0                	or     %edx,%eax
   1412e:	a2 c0 be 04 00       	mov    %al,0x4bec0
            break;  
   14133:	e9 42 01 00 00       	jmp    1427a <do_normal_key+0x1dd>
        case KEY_CAPS:
            if (is_make) {
   14138:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1413c:	0f 84 34 01 00 00    	je     14276 <do_normal_key+0x1d9>
                kbd_state.caps_lock = ~kbd_state.caps_lock;
   14142:	0f b6 05 c0 be 04 00 	movzbl 0x4bec0,%eax
   14149:	c1 e0 07             	shl    $0x7,%eax
   1414c:	c0 f8 07             	sar    $0x7,%al
   1414f:	f7 d0                	not    %eax
   14151:	c1 e0 07             	shl    $0x7,%eax
   14154:	c0 f8 07             	sar    $0x7,%al
   14157:	83 e0 01             	and    $0x1,%eax
   1415a:	89 c2                	mov    %eax,%edx
   1415c:	0f b6 05 c0 be 04 00 	movzbl 0x4bec0,%eax
   14163:	83 e0 fe             	and    $0xfffffffe,%eax
   14166:	09 d0                	or     %edx,%eax
   14168:	a2 c0 be 04 00       	mov    %al,0x4bec0
            }
            break;
   1416d:	e9 04 01 00 00       	jmp    14276 <do_normal_key+0x1d9>
        
        case KEY_ALT:
            kbd_state.lalt_press = is_make ? 1 : 0;
   14172:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14176:	0f 95 c0             	setne  %al
   14179:	c1 e0 07             	shl    $0x7,%eax
   1417c:	c0 f8 07             	sar    $0x7,%al
   1417f:	83 e0 01             	and    $0x1,%eax
   14182:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   14189:	0f b6 05 c0 be 04 00 	movzbl 0x4bec0,%eax
   14190:	83 e0 f7             	and    $0xfffffff7,%eax
   14193:	09 d0                	or     %edx,%eax
   14195:	a2 c0 be 04 00       	mov    %al,0x4bec0
            break;
   1419a:	e9 db 00 00 00       	jmp    1427a <do_normal_key+0x1dd>
        case KEY_CTRL:
            kbd_state.lctrl_press = is_make ? 1 : 0;
   1419f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   141a3:	0f 95 c0             	setne  %al
   141a6:	c1 e0 07             	shl    $0x7,%eax
   141a9:	c0 f8 07             	sar    $0x7,%al
   141ac:	83 e0 01             	and    $0x1,%eax
   141af:	c1 e0 05             	shl    $0x5,%eax
   141b2:	89 c2                	mov    %eax,%edx
   141b4:	0f b6 05 c0 be 04 00 	movzbl 0x4bec0,%eax
   141bb:	83 e0 df             	and    $0xffffffdf,%eax
   141be:	09 d0                	or     %edx,%eax
   141c0:	a2 c0 be 04 00       	mov    %al,0x4bec0
            break;
   141c5:	e9 b0 00 00 00       	jmp    1427a <do_normal_key+0x1dd>
        case KEY_F4:
        case KEY_F5:
        case KEY_F6:
        case KEY_F7:
        case KEY_F8:
            do_fx_key(key);
   141ca:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   141ce:	83 ec 0c             	sub    $0xc,%esp
   141d1:	50                   	push   %eax
   141d2:	e8 83 fe ff ff       	call   1405a <do_fx_key>
   141d7:	83 c4 10             	add    $0x10,%esp
            break;
   141da:	e9 9b 00 00 00       	jmp    1427a <do_normal_key+0x1dd>
            break;
        case KEY_F12:
            break;

        default:    //处理可被映射的非功能键
            if (is_make) {
   141df:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   141e3:	0f 84 90 00 00 00    	je     14279 <do_normal_key+0x1dc>
                    if (kbd_state.rshift_press || kbd_state.lshift_press) {
   141e9:	0f b6 05 c0 be 04 00 	movzbl 0x4bec0,%eax
   141f0:	83 e0 04             	and    $0x4,%eax
   141f3:	84 c0                	test   %al,%al
   141f5:	75 0e                	jne    14205 <do_normal_key+0x168>
   141f7:	0f b6 05 c0 be 04 00 	movzbl 0x4bec0,%eax
   141fe:	83 e0 02             	and    $0x2,%eax
   14201:	84 c0                	test   %al,%al
   14203:	74 11                	je     14216 <do_normal_key+0x179>
                        //shift功能键已被按下，获取该键的对应值
                        key = map_table[key].func;
   14205:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14209:	0f b6 84 00 81 71 01 	movzbl 0x17181(%eax,%eax,1),%eax
   14210:	00 
   14211:	88 45 f7             	mov    %al,-0x9(%ebp)
   14214:	eb 0f                	jmp    14225 <do_normal_key+0x188>
                    } else {
                        key = map_table[key].normal;
   14216:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   1421a:	0f b6 84 00 80 71 01 	movzbl 0x17180(%eax,%eax,1),%eax
   14221:	00 
   14222:	88 45 f7             	mov    %al,-0x9(%ebp)
                    }

                    if (kbd_state.caps_lock) {  //当前状态下大写锁定已开启
   14225:	0f b6 05 c0 be 04 00 	movzbl 0x4bec0,%eax
   1422c:	83 e0 01             	and    $0x1,%eax
   1422f:	84 c0                	test   %al,%al
   14231:	74 2e                	je     14261 <do_normal_key+0x1c4>
                        if ((key >= 'A' && key <= 'Z')) {
   14233:	80 7d f7 40          	cmpb   $0x40,-0x9(%ebp)
   14237:	7e 12                	jle    1424b <do_normal_key+0x1ae>
   14239:	80 7d f7 5a          	cmpb   $0x5a,-0x9(%ebp)
   1423d:	7f 0c                	jg     1424b <do_normal_key+0x1ae>
                            key = key - 'A' + 'a';
   1423f:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
   14243:	83 c0 20             	add    $0x20,%eax
   14246:	88 45 f7             	mov    %al,-0x9(%ebp)
   14249:	eb 16                	jmp    14261 <do_normal_key+0x1c4>
                        } else if (key >= 'a' && key <= 'z') {
   1424b:	80 7d f7 60          	cmpb   $0x60,-0x9(%ebp)
   1424f:	7e 10                	jle    14261 <do_normal_key+0x1c4>
   14251:	80 7d f7 7a          	cmpb   $0x7a,-0x9(%ebp)
   14255:	7f 0a                	jg     14261 <do_normal_key+0x1c4>
                            key = key -'a' + 'A';
   14257:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
   1425b:	83 e8 20             	sub    $0x20,%eax
   1425e:	88 45 f7             	mov    %al,-0x9(%ebp)
                        }
                    }
                // log_printf("key: %c\n", key);
                // log_printf("sizeof(kbd_state_t) = %d\n", sizeof(kbd_state_t));
                //将读取的键值放入tty设备的输入缓冲区
                tty_in(key);
   14261:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14265:	83 ec 0c             	sub    $0xc,%esp
   14268:	50                   	push   %eax
   14269:	e8 0a 07 00 00       	call   14978 <tty_in>
   1426e:	83 c4 10             	add    $0x10,%esp
            }
            break;
   14271:	eb 06                	jmp    14279 <do_normal_key+0x1dc>
            break;
   14273:	90                   	nop
   14274:	eb 04                	jmp    1427a <do_normal_key+0x1dd>
            break;
   14276:	90                   	nop
   14277:	eb 01                	jmp    1427a <do_normal_key+0x1dd>
            break;
   14279:	90                   	nop
    }
}
   1427a:	90                   	nop
   1427b:	c9                   	leave  
   1427c:	c3                   	ret    

0001427d <do_e0_key>:
/**
 * @brief 处理0xE0开头的键值码，即EBGIN_E0状态下接收到的键值码
 * 
 * @param key_code 
 */
static void do_e0_key(uint8_t key_code) {
   1427d:	55                   	push   %ebp
   1427e:	89 e5                	mov    %esp,%ebp
   14280:	83 ec 14             	sub    $0x14,%esp
   14283:	8b 45 08             	mov    0x8(%ebp),%eax
   14286:	88 45 ec             	mov    %al,-0x14(%ebp)
    char key = get_key(key_code);
   14289:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
   1428d:	50                   	push   %eax
   1428e:	e8 b2 fd ff ff       	call   14045 <get_key>
   14293:	83 c4 04             	add    $0x4,%esp
   14296:	88 45 ff             	mov    %al,-0x1(%ebp)
    int is_make = is_make_code(key_code);
   14299:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
   1429d:	50                   	push   %eax
   1429e:	e8 88 fd ff ff       	call   1402b <is_make_code>
   142a3:	83 c4 04             	add    $0x4,%esp
   142a6:	89 45 f8             	mov    %eax,-0x8(%ebp)

    switch (key) {
   142a9:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
   142ad:	83 f8 1d             	cmp    $0x1d,%eax
   142b0:	74 07                	je     142b9 <do_e0_key+0x3c>
   142b2:	83 f8 38             	cmp    $0x38,%eax
   142b5:	74 2a                	je     142e1 <do_e0_key+0x64>
        break;
    case KEY_ALT:
        kbd_state.ralt_press = is_make ? 1 : 0;
        break;
    default:
        break;
   142b7:	eb 4f                	jmp    14308 <do_e0_key+0x8b>
        kbd_state.rctrl_press = is_make ? 1 : 0;
   142b9:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
   142bd:	0f 95 c0             	setne  %al
   142c0:	c1 e0 07             	shl    $0x7,%eax
   142c3:	c0 f8 07             	sar    $0x7,%al
   142c6:	83 e0 01             	and    $0x1,%eax
   142c9:	c1 e0 06             	shl    $0x6,%eax
   142cc:	89 c2                	mov    %eax,%edx
   142ce:	0f b6 05 c0 be 04 00 	movzbl 0x4bec0,%eax
   142d5:	83 e0 bf             	and    $0xffffffbf,%eax
   142d8:	09 d0                	or     %edx,%eax
   142da:	a2 c0 be 04 00       	mov    %al,0x4bec0
        break;
   142df:	eb 27                	jmp    14308 <do_e0_key+0x8b>
        kbd_state.ralt_press = is_make ? 1 : 0;
   142e1:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
   142e5:	0f 95 c0             	setne  %al
   142e8:	c1 e0 07             	shl    $0x7,%eax
   142eb:	c0 f8 07             	sar    $0x7,%al
   142ee:	83 e0 01             	and    $0x1,%eax
   142f1:	c1 e0 04             	shl    $0x4,%eax
   142f4:	89 c2                	mov    %eax,%edx
   142f6:	0f b6 05 c0 be 04 00 	movzbl 0x4bec0,%eax
   142fd:	83 e0 ef             	and    $0xffffffef,%eax
   14300:	09 d0                	or     %edx,%eax
   14302:	a2 c0 be 04 00       	mov    %al,0x4bec0
        break;
   14307:	90                   	nop
    }
}
   14308:	90                   	nop
   14309:	c9                   	leave  
   1430a:	c3                   	ret    

0001430b <kbd_init>:

/**
 * @brief 键盘初始化
 * 
 */
void kbd_init(void) {
   1430b:	55                   	push   %ebp
   1430c:	89 e5                	mov    %esp,%ebp
   1430e:	83 ec 08             	sub    $0x8,%esp
    static uint8_t is_inited = 0;
    if (!is_inited)  {
   14311:	0f b6 05 c4 be 04 00 	movzbl 0x4bec4,%eax
   14318:	84 c0                	test   %al,%al
   1431a:	75 3a                	jne    14356 <kbd_init+0x4b>
        idt_install(IRQ1_KEYBOARD, (idt_handler_t)exception_handler_kbd);
   1431c:	83 ec 08             	sub    $0x8,%esp
   1431f:	68 98 02 01 00       	push   $0x10298
   14324:	6a 21                	push   $0x21
   14326:	e8 2a e9 ff ff       	call   12c55 <idt_install>
   1432b:	83 c4 10             	add    $0x10,%esp
        idt_enable(IRQ1_KEYBOARD);
   1432e:	83 ec 0c             	sub    $0xc,%esp
   14331:	6a 21                	push   $0x21
   14333:	e8 a8 eb ff ff       	call   12ee0 <idt_enable>
   14338:	83 c4 10             	add    $0x10,%esp
        kernel_memset(&kbd_state, 0, sizeof(kbd_state));
   1433b:	83 ec 04             	sub    $0x4,%esp
   1433e:	6a 04                	push   $0x4
   14340:	6a 00                	push   $0x0
   14342:	68 c0 be 04 00       	push   $0x4bec0
   14347:	e8 2b 1a 00 00       	call   15d77 <kernel_memset>
   1434c:	83 c4 10             	add    $0x10,%esp
        is_inited = 1;
   1434f:	c6 05 c4 be 04 00 01 	movb   $0x1,0x4bec4
    }
}
   14356:	90                   	nop
   14357:	c9                   	leave  
   14358:	c3                   	ret    

00014359 <do_handler_kbd>:

/**
 * @brief 键盘中断处理程序
 * 
 */
void do_handler_kbd(exception_frame_t *frame) {
   14359:	55                   	push   %ebp
   1435a:	89 e5                	mov    %esp,%ebp
   1435c:	83 ec 18             	sub    $0x18,%esp
        BEGIN_E0, //E0开始的键值码，占2个或4个字节
        BEGIN_E1, //E1开始的键值码，占6个字节
    }recv_state = NORMAL;

    //1.获取键盘的读取状态
    uint32_t status = inb(KBD_PORT_STAT);
   1435f:	6a 64                	push   $0x64
   14361:	e8 a8 fc ff ff       	call   1400e <inb>
   14366:	83 c4 04             	add    $0x4,%esp
   14369:	0f b6 c0             	movzbl %al,%eax
   1436c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!(status & KBD_STAT_RECV_READY)) {  //端口没有准备好的数据，直接结束中断
   1436f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14372:	83 e0 01             	and    $0x1,%eax
   14375:	85 c0                	test   %eax,%eax
   14377:	75 12                	jne    1438b <do_handler_kbd+0x32>
        pic_send_eoi(IRQ1_KEYBOARD);
   14379:	83 ec 0c             	sub    $0xc,%esp
   1437c:	6a 21                	push   $0x21
   1437e:	e8 9f ec ff ff       	call   13022 <pic_send_eoi>
   14383:	83 c4 10             	add    $0x10,%esp
        return;
   14386:	e9 96 00 00 00       	jmp    14421 <do_handler_kbd+0xc8>
    }

    //2.端口数据已准备好，读取数据端口
    uint8_t key_code = inb(KBD_PORT_DATA);
   1438b:	83 ec 0c             	sub    $0xc,%esp
   1438e:	6a 60                	push   $0x60
   14390:	e8 79 fc ff ff       	call   1400e <inb>
   14395:	83 c4 10             	add    $0x10,%esp
   14398:	88 45 f3             	mov    %al,-0xd(%ebp)

    //3.因为ICW4的EOI位为0，所以要手动发送EOI即中断结束信号
    pic_send_eoi(IRQ1_KEYBOARD);
   1439b:	83 ec 0c             	sub    $0xc,%esp
   1439e:	6a 21                	push   $0x21
   143a0:	e8 7d ec ff ff       	call   13022 <pic_send_eoi>
   143a5:	83 c4 10             	add    $0x10,%esp

    //4.根据接受的键值原码的第一个字节，判断当前接收的原码的状态
    if (key_code == KEY_E0) {   //第一个字节为0xE0,代表还有后续字节
   143a8:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
   143ac:	75 0c                	jne    143ba <do_handler_kbd+0x61>
        recv_state = BEGIN_E0;
   143ae:	c7 05 c8 be 04 00 01 	movl   $0x1,0x4bec8
   143b5:	00 00 00 
   143b8:	eb 67                	jmp    14421 <do_handler_kbd+0xc8>
    } else if (key_code == KEY_E1) {    //第一个字节为0xE1，代表还有后续字节
   143ba:	80 7d f3 e1          	cmpb   $0xe1,-0xd(%ebp)
   143be:	75 0c                	jne    143cc <do_handler_kbd+0x73>
        recv_state = BEGIN_E1;
   143c0:	c7 05 c8 be 04 00 02 	movl   $0x2,0x4bec8
   143c7:	00 00 00 
   143ca:	eb 55                	jmp    14421 <do_handler_kbd+0xc8>
    } else {
        switch (recv_state) {
   143cc:	a1 c8 be 04 00       	mov    0x4bec8,%eax
   143d1:	83 f8 02             	cmp    $0x2,%eax
   143d4:	74 3e                	je     14414 <do_handler_kbd+0xbb>
   143d6:	83 f8 02             	cmp    $0x2,%eax
   143d9:	77 45                	ja     14420 <do_handler_kbd+0xc7>
   143db:	85 c0                	test   %eax,%eax
   143dd:	74 07                	je     143e6 <do_handler_kbd+0x8d>
   143df:	83 f8 01             	cmp    $0x1,%eax
   143e2:	74 14                	je     143f8 <do_handler_kbd+0x9f>
                break;
            case BEGIN_E1://TODO: 读取的6字节原码, pause 键，暂不处理
                recv_state = NORMAL;
                break;
            default :   
                break;
   143e4:	eb 3a                	jmp    14420 <do_handler_kbd+0xc7>
                do_normal_key(key_code);
   143e6:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
   143ea:	83 ec 0c             	sub    $0xc,%esp
   143ed:	50                   	push   %eax
   143ee:	e8 aa fc ff ff       	call   1409d <do_normal_key>
   143f3:	83 c4 10             	add    $0x10,%esp
                break;
   143f6:	eb 29                	jmp    14421 <do_handler_kbd+0xc8>
                do_e0_key(key_code);
   143f8:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
   143fc:	83 ec 0c             	sub    $0xc,%esp
   143ff:	50                   	push   %eax
   14400:	e8 78 fe ff ff       	call   1427d <do_e0_key>
   14405:	83 c4 10             	add    $0x10,%esp
                recv_state = NORMAL;
   14408:	c7 05 c8 be 04 00 00 	movl   $0x0,0x4bec8
   1440f:	00 00 00 
                break;
   14412:	eb 0d                	jmp    14421 <do_handler_kbd+0xc8>
                recv_state = NORMAL;
   14414:	c7 05 c8 be 04 00 00 	movl   $0x0,0x4bec8
   1441b:	00 00 00 
                break;
   1441e:	eb 01                	jmp    14421 <do_handler_kbd+0xc8>
                break;
   14420:	90                   	nop
        }
    }

   14421:	c9                   	leave  
   14422:	c3                   	ret    

00014423 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   14423:	55                   	push   %ebp
   14424:	89 e5                	mov    %esp,%ebp
   14426:	83 ec 08             	sub    $0x8,%esp
   14429:	8b 45 08             	mov    0x8(%ebp),%eax
   1442c:	8b 55 0c             	mov    0xc(%ebp),%edx
   1442f:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   14433:	89 d0                	mov    %edx,%eax
   14435:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   14438:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1443c:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   14440:	ee                   	out    %al,(%dx)
}
   14441:	90                   	nop
   14442:	c9                   	leave  
   14443:	c3                   	ret    

00014444 <do_handler_time>:
/**
 * @brief  处理定时器中断的c函数
 * 
 * @param frame 异常栈帧
 */
void do_handler_time(const exception_frame_t *frame) {
   14444:	55                   	push   %ebp
   14445:	89 e5                	mov    %esp,%ebp
   14447:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   1444a:	a1 cc be 04 00       	mov    0x4becc,%eax
   1444f:	83 c0 01             	add    $0x1,%eax
   14452:	a3 cc be 04 00       	mov    %eax,0x4becc

    //因为ICW4的EOI位为0，所以要手动发送EOI即中断结束信号
    pic_send_eoi(IRQ0_TIMER);
   14457:	83 ec 0c             	sub    $0xc,%esp
   1445a:	6a 20                	push   $0x20
   1445c:	e8 c1 eb ff ff       	call   13022 <pic_send_eoi>
   14461:	83 c4 10             	add    $0x10,%esp

    //运行完一个时间片，判断是否需要执行任务切换，若需要则执行
    //必须写在发送eoi之后，防止发生任务切换导致eoi没有发送，从而无法进行下一次中断
    task_slice_end();   
   14464:	e8 89 d5 ff ff       	call   119f2 <task_slice_end>
}
   14469:	90                   	nop
   1446a:	c9                   	leave  
   1446b:	c3                   	ret    

0001446c <init_pit>:

/**
 * @brief  初始化可编程定时器
 * 
 */
static void init_pit(void) {
   1446c:	55                   	push   %ebp
   1446d:	89 e5                	mov    %esp,%ebp
   1446f:	83 ec 18             	sub    $0x18,%esp
    //1.选择定时器的计算器，读取与加载初始值模式，以及工作模式
    outb(PIT_COMMAND_MODE_PORT, PIT_SELECT_COUNTER | PIT_READ_LOAD | PIT_MODE);
   14472:	6a 36                	push   $0x36
   14474:	6a 43                	push   $0x43
   14476:	e8 a8 ff ff ff       	call   14423 <outb>
   1447b:	83 c4 08             	add    $0x8,%esp

    //2.写入16位初始值,即一个中断后期晶体的振荡次数，由确定的加载方式知，先写入低8位，再写入高8位
    uint16_t reload_count = (PIT_OSC_FREQ / 1000) * OS_TICKS_MS;   //确定晶体一个中断周期的震荡次数
   1447e:	66 c7 45 f6 9a 2e    	movw   $0x2e9a,-0xa(%ebp)
    outb(PIT_CHANNEL_DATA_PORT, reload_count & 0xff);
   14484:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   14488:	0f b6 c0             	movzbl %al,%eax
   1448b:	50                   	push   %eax
   1448c:	6a 40                	push   $0x40
   1448e:	e8 90 ff ff ff       	call   14423 <outb>
   14493:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL_DATA_PORT, (reload_count >> 8) & 0xff);
   14496:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   1449a:	66 c1 e8 08          	shr    $0x8,%ax
   1449e:	0f b6 c0             	movzbl %al,%eax
   144a1:	50                   	push   %eax
   144a2:	6a 40                	push   $0x40
   144a4:	e8 7a ff ff ff       	call   14423 <outb>
   144a9:	83 c4 08             	add    $0x8,%esp

    //3.绑定定时器中断的异常处理程序,并开启该中断
    idt_install(IRQ0_TIMER, (idt_handler_t)exception_handler_time);
   144ac:	83 ec 08             	sub    $0x8,%esp
   144af:	68 7b 02 01 00       	push   $0x1027b
   144b4:	6a 20                	push   $0x20
   144b6:	e8 9a e7 ff ff       	call   12c55 <idt_install>
   144bb:	83 c4 10             	add    $0x10,%esp
    idt_enable(IRQ0_TIMER);
   144be:	83 ec 0c             	sub    $0xc,%esp
   144c1:	6a 20                	push   $0x20
   144c3:	e8 18 ea ff ff       	call   12ee0 <idt_enable>
   144c8:	83 c4 10             	add    $0x10,%esp

}
   144cb:	90                   	nop
   144cc:	c9                   	leave  
   144cd:	c3                   	ret    

000144ce <time_init>:

/**
 * @brief  初始化定时器
 * 
 */
void time_init(void) {
   144ce:	55                   	push   %ebp
   144cf:	89 e5                	mov    %esp,%ebp
   144d1:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   144d4:	c7 05 cc be 04 00 00 	movl   $0x0,0x4becc
   144db:	00 00 00 
    init_pit();
   144de:	e8 89 ff ff ff       	call   1446c <init_pit>
   144e3:	90                   	nop
   144e4:	c9                   	leave  
   144e5:	c3                   	ret    

000144e6 <get_tty>:
 * @brief 根据dev结构获取到对应的tty设备结构
 * 
 * @param dev 
 * @return tty_t* 
 */
static tty_t* get_tty(device_t *dev) {
   144e6:	55                   	push   %ebp
   144e7:	89 e5                	mov    %esp,%ebp
   144e9:	83 ec 18             	sub    $0x18,%esp
    int tty_index = dev->dev_index;
   144ec:	8b 45 08             	mov    0x8(%ebp),%eax
   144ef:	8b 40 08             	mov    0x8(%eax),%eax
   144f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (tty_index < 0 || tty_index >= TTY_TABLE_SIZE || !dev->open_count) {
   144f5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   144f9:	78 10                	js     1450b <get_tty+0x25>
   144fb:	83 7d f4 07          	cmpl   $0x7,-0xc(%ebp)
   144ff:	7f 0a                	jg     1450b <get_tty+0x25>
   14501:	8b 45 08             	mov    0x8(%ebp),%eax
   14504:	8b 40 10             	mov    0x10(%eax),%eax
   14507:	85 c0                	test   %eax,%eax
   14509:	75 1a                	jne    14525 <get_tty+0x3f>
        log_printf("tty is not opened. tty = %d\n", tty_index);
   1450b:	83 ec 08             	sub    $0x8,%esp
   1450e:	ff 75 f4             	push   -0xc(%ebp)
   14511:	68 70 74 01 00       	push   $0x17470
   14516:	e8 59 20 00 00       	call   16574 <log_printf>
   1451b:	83 c4 10             	add    $0x10,%esp
        return (tty_t*)0;
   1451e:	b8 00 00 00 00       	mov    $0x0,%eax
   14523:	eb 0e                	jmp    14533 <get_tty+0x4d>
    }

    return tty_table + tty_index;
   14525:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14528:	69 c0 54 04 00 00    	imul   $0x454,%eax,%eax
   1452e:	05 e0 be 04 00       	add    $0x4bee0,%eax
}
   14533:	c9                   	leave  
   14534:	c3                   	ret    

00014535 <tty_fifo_init>:
 * 
 * @param fifo 
 * @param buf 
 * @param size 
 */
static void tty_fifo_init(tty_fifo_t *fifo, char *buf, int size) {
   14535:	55                   	push   %ebp
   14536:	89 e5                	mov    %esp,%ebp
    fifo->buf = buf;
   14538:	8b 45 08             	mov    0x8(%ebp),%eax
   1453b:	8b 55 0c             	mov    0xc(%ebp),%edx
   1453e:	89 10                	mov    %edx,(%eax)
    fifo->count = 0;
   14540:	8b 45 08             	mov    0x8(%ebp),%eax
   14543:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    fifo->size = size;
   1454a:	8b 45 08             	mov    0x8(%ebp),%eax
   1454d:	8b 55 10             	mov    0x10(%ebp),%edx
   14550:	89 50 04             	mov    %edx,0x4(%eax)
    fifo->read = fifo->write = 0;
   14553:	8b 45 08             	mov    0x8(%ebp),%eax
   14556:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
   1455d:	8b 45 08             	mov    0x8(%ebp),%eax
   14560:	8b 50 0c             	mov    0xc(%eax),%edx
   14563:	8b 45 08             	mov    0x8(%ebp),%eax
   14566:	89 50 08             	mov    %edx,0x8(%eax)
}
   14569:	90                   	nop
   1456a:	5d                   	pop    %ebp
   1456b:	c3                   	ret    

0001456c <tty_fifo_put>:
 * 
 * @param fifo 
 * @param c 
 * @return int 
 */
int tty_fifo_put(tty_fifo_t *fifo, char c) {
   1456c:	55                   	push   %ebp
   1456d:	89 e5                	mov    %esp,%ebp
   1456f:	53                   	push   %ebx
   14570:	83 ec 24             	sub    $0x24,%esp
   14573:	8b 45 0c             	mov    0xc(%ebp),%eax
   14576:	88 45 e4             	mov    %al,-0x1c(%ebp)
    //TODO:加锁
    idt_state_t state = idt_enter_protection();
   14579:	e8 dd ea ff ff       	call   1305b <idt_enter_protection>
   1457e:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //fifo已满，不能再写入
    if (fifo->count >= fifo->size) {
   14581:	8b 45 08             	mov    0x8(%ebp),%eax
   14584:	8b 50 10             	mov    0x10(%eax),%edx
   14587:	8b 45 08             	mov    0x8(%ebp),%eax
   1458a:	8b 40 04             	mov    0x4(%eax),%eax
   1458d:	39 c2                	cmp    %eax,%edx
   1458f:	7c 15                	jl     145a6 <tty_fifo_put+0x3a>
    //TODO:解锁
        idt_leave_protection(state);
   14591:	83 ec 0c             	sub    $0xc,%esp
   14594:	ff 75 f4             	push   -0xc(%ebp)
   14597:	e8 d7 ea ff ff       	call   13073 <idt_leave_protection>
   1459c:	83 c4 10             	add    $0x10,%esp
        return -1;
   1459f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   145a4:	eb 59                	jmp    145ff <tty_fifo_put+0x93>
    }

    fifo->buf[fifo->write++] = c;   //写入一个字符
   145a6:	8b 45 08             	mov    0x8(%ebp),%eax
   145a9:	8b 18                	mov    (%eax),%ebx
   145ab:	8b 45 08             	mov    0x8(%ebp),%eax
   145ae:	8b 40 0c             	mov    0xc(%eax),%eax
   145b1:	8d 48 01             	lea    0x1(%eax),%ecx
   145b4:	8b 55 08             	mov    0x8(%ebp),%edx
   145b7:	89 4a 0c             	mov    %ecx,0xc(%edx)
   145ba:	8d 14 03             	lea    (%ebx,%eax,1),%edx
   145bd:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
   145c1:	88 02                	mov    %al,(%edx)
    if (fifo->write >= fifo->size) { //循环队列的方式写入
   145c3:	8b 45 08             	mov    0x8(%ebp),%eax
   145c6:	8b 50 0c             	mov    0xc(%eax),%edx
   145c9:	8b 45 08             	mov    0x8(%ebp),%eax
   145cc:	8b 40 04             	mov    0x4(%eax),%eax
   145cf:	39 c2                	cmp    %eax,%edx
   145d1:	7c 0a                	jl     145dd <tty_fifo_put+0x71>
        fifo->write = 0;
   145d3:	8b 45 08             	mov    0x8(%ebp),%eax
   145d6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    }

    fifo->count++;
   145dd:	8b 45 08             	mov    0x8(%ebp),%eax
   145e0:	8b 40 10             	mov    0x10(%eax),%eax
   145e3:	8d 50 01             	lea    0x1(%eax),%edx
   145e6:	8b 45 08             	mov    0x8(%ebp),%eax
   145e9:	89 50 10             	mov    %edx,0x10(%eax)
    
    //开中断取消资源保护
    //TODO:解锁
    idt_leave_protection(state);
   145ec:	83 ec 0c             	sub    $0xc,%esp
   145ef:	ff 75 f4             	push   -0xc(%ebp)
   145f2:	e8 7c ea ff ff       	call   13073 <idt_leave_protection>
   145f7:	83 c4 10             	add    $0x10,%esp
    return 0;
   145fa:	b8 00 00 00 00       	mov    $0x0,%eax
}
   145ff:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   14602:	c9                   	leave  
   14603:	c3                   	ret    

00014604 <tty_fifo_get>:
 * 
 * @param fifo 
 * @param c 
 * @return int 
 */
int tty_fifo_get(tty_fifo_t *fifo, char *c) {
   14604:	55                   	push   %ebp
   14605:	89 e5                	mov    %esp,%ebp
   14607:	53                   	push   %ebx
   14608:	83 ec 14             	sub    $0x14,%esp
    //TODO:加锁关中断进行资源保护
    idt_state_t state = idt_enter_protection();
   1460b:	e8 4b ea ff ff       	call   1305b <idt_enter_protection>
   14610:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if (fifo->count <= 0) {
   14613:	8b 45 08             	mov    0x8(%ebp),%eax
   14616:	8b 40 10             	mov    0x10(%eax),%eax
   14619:	85 c0                	test   %eax,%eax
   1461b:	7f 15                	jg     14632 <tty_fifo_get+0x2e>
    //TODO:解锁
        idt_leave_protection(state);
   1461d:	83 ec 0c             	sub    $0xc,%esp
   14620:	ff 75 f4             	push   -0xc(%ebp)
   14623:	e8 4b ea ff ff       	call   13073 <idt_leave_protection>
   14628:	83 c4 10             	add    $0x10,%esp
        return -1;
   1462b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14630:	eb 5a                	jmp    1468c <tty_fifo_get+0x88>
    }

    *c = fifo->buf[fifo->read++];   //读取一个字符
   14632:	8b 45 08             	mov    0x8(%ebp),%eax
   14635:	8b 18                	mov    (%eax),%ebx
   14637:	8b 45 08             	mov    0x8(%ebp),%eax
   1463a:	8b 40 08             	mov    0x8(%eax),%eax
   1463d:	8d 48 01             	lea    0x1(%eax),%ecx
   14640:	8b 55 08             	mov    0x8(%ebp),%edx
   14643:	89 4a 08             	mov    %ecx,0x8(%edx)
   14646:	01 d8                	add    %ebx,%eax
   14648:	0f b6 10             	movzbl (%eax),%edx
   1464b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1464e:	88 10                	mov    %dl,(%eax)
    if (fifo->read >= fifo->size) { //循环队列的方式读取
   14650:	8b 45 08             	mov    0x8(%ebp),%eax
   14653:	8b 50 08             	mov    0x8(%eax),%edx
   14656:	8b 45 08             	mov    0x8(%ebp),%eax
   14659:	8b 40 04             	mov    0x4(%eax),%eax
   1465c:	39 c2                	cmp    %eax,%edx
   1465e:	7c 0a                	jl     1466a <tty_fifo_get+0x66>
        fifo->read = 0;
   14660:	8b 45 08             	mov    0x8(%ebp),%eax
   14663:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    }

    fifo->count--;
   1466a:	8b 45 08             	mov    0x8(%ebp),%eax
   1466d:	8b 40 10             	mov    0x10(%eax),%eax
   14670:	8d 50 ff             	lea    -0x1(%eax),%edx
   14673:	8b 45 08             	mov    0x8(%ebp),%eax
   14676:	89 50 10             	mov    %edx,0x10(%eax)

    //TODO:解锁
    idt_leave_protection(state);
   14679:	83 ec 0c             	sub    $0xc,%esp
   1467c:	ff 75 f4             	push   -0xc(%ebp)
   1467f:	e8 ef e9 ff ff       	call   13073 <idt_leave_protection>
   14684:	83 c4 10             	add    $0x10,%esp
    return 0;
   14687:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1468c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1468f:	c9                   	leave  
   14690:	c3                   	ret    

00014691 <tty_open>:

/**
 * @brief 打开tty设备
 * 
 */
int tty_open(device_t *dev) {
   14691:	55                   	push   %ebp
   14692:	89 e5                	mov    %esp,%ebp
   14694:	83 ec 18             	sub    $0x18,%esp
    int index = dev->dev_index;
   14697:	8b 45 08             	mov    0x8(%ebp),%eax
   1469a:	8b 40 08             	mov    0x8(%eax),%eax
   1469d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (index < 0 || index >= TTY_TABLE_SIZE) {
   146a0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   146a4:	78 06                	js     146ac <tty_open+0x1b>
   146a6:	83 7d f4 07          	cmpl   $0x7,-0xc(%ebp)
   146aa:	7e 1d                	jle    146c9 <tty_open+0x38>
        log_printf("open tty failed. incorrect tty num = %d\n", index);
   146ac:	83 ec 08             	sub    $0x8,%esp
   146af:	ff 75 f4             	push   -0xc(%ebp)
   146b2:	68 90 74 01 00       	push   $0x17490
   146b7:	e8 b8 1e 00 00       	call   16574 <log_printf>
   146bc:	83 c4 10             	add    $0x10,%esp
        return -1;
   146bf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   146c4:	e9 af 00 00 00       	jmp    14778 <tty_open+0xe7>
    }

    tty_t *tty = tty_table + index;
   146c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   146cc:	69 c0 54 04 00 00    	imul   $0x454,%eax,%eax
   146d2:	05 e0 be 04 00       	add    $0x4bee0,%eax
   146d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    //初始化输入输出缓冲队列
    tty_fifo_init(&tty->out_fifo, tty->out_buf, TTY_OBUF_SIZE);
   146da:	8b 45 f0             	mov    -0x10(%ebp),%eax
   146dd:	8d 50 54             	lea    0x54(%eax),%edx
   146e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   146e3:	83 c0 0c             	add    $0xc,%eax
   146e6:	83 ec 04             	sub    $0x4,%esp
   146e9:	68 00 02 00 00       	push   $0x200
   146ee:	52                   	push   %edx
   146ef:	50                   	push   %eax
   146f0:	e8 40 fe ff ff       	call   14535 <tty_fifo_init>
   146f5:	83 c4 10             	add    $0x10,%esp
    tty_fifo_init(&tty->in_fifo, tty->in_buf, TTY_IBUF_SIZE);
   146f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   146fb:	8d 90 54 02 00 00    	lea    0x254(%eax),%edx
   14701:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14704:	83 c0 20             	add    $0x20,%eax
   14707:	83 ec 04             	sub    $0x4,%esp
   1470a:	68 00 02 00 00       	push   $0x200
   1470f:	52                   	push   %edx
   14710:	50                   	push   %eax
   14711:	e8 1f fe ff ff       	call   14535 <tty_fifo_init>
   14716:	83 c4 10             	add    $0x10,%esp

    //初始化缓冲区的信号量, 缓冲区的每一个字节都视为资源
    sem_init(&tty->out_sem, TTY_OBUF_SIZE); //输出缓冲区一开始有TTY_OBUF_SIZE大小的资源可写
   14719:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1471c:	83 c0 34             	add    $0x34,%eax
   1471f:	83 ec 08             	sub    $0x8,%esp
   14722:	68 00 02 00 00       	push   $0x200
   14727:	50                   	push   %eax
   14728:	e8 2a 0c 00 00       	call   15357 <sem_init>
   1472d:	83 c4 10             	add    $0x10,%esp
    sem_init(&tty->in_sem, 0);  //输入缓冲区一开始无资源可读
   14730:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14733:	83 c0 44             	add    $0x44,%eax
   14736:	83 ec 08             	sub    $0x8,%esp
   14739:	6a 00                	push   $0x0
   1473b:	50                   	push   %eax
   1473c:	e8 16 0c 00 00       	call   15357 <sem_init>
   14741:	83 c4 10             	add    $0x10,%esp

    //为tty设备绑定输出终端
    tty->console_index = index;
   14744:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14747:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1474a:	89 50 08             	mov    %edx,0x8(%eax)
    tty->oflags = TTY_OCRLF;    //默认开启输出模式下'\n'转换为'\r\n'的模式
   1474d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14750:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    tty->iflags = TTY_INCLR | TTY_IECHO; //默认开启输入模式下的换行转换和字符回显
   14756:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14759:	c7 40 04 03 00 00 00 	movl   $0x3,0x4(%eax)

    //初始化tty设备需要的键盘与终端
    kbd_init();
   14760:	e8 a6 fb ff ff       	call   1430b <kbd_init>
    console_init(index);
   14765:	83 ec 0c             	sub    $0xc,%esp
   14768:	ff 75 f4             	push   -0xc(%ebp)
   1476b:	e8 cc ee ff ff       	call   1363c <console_init>
   14770:	83 c4 10             	add    $0x10,%esp
    
    
    return 0;
   14773:	b8 00 00 00 00       	mov    $0x0,%eax
}
   14778:	c9                   	leave  
   14779:	c3                   	ret    

0001477a <tty_write>:

/**
 * @brief 写入tty设备
 * 
 */
int tty_write(device_t *dev, int addr, char *buf, int size) {
   1477a:	55                   	push   %ebp
   1477b:	89 e5                	mov    %esp,%ebp
   1477d:	83 ec 28             	sub    $0x28,%esp
    if (size < 0) {
   14780:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   14784:	79 0a                	jns    14790 <tty_write+0x16>
        return -1;
   14786:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1478b:	e9 da 00 00 00       	jmp    1486a <tty_write+0xf0>
    }

    //根据dev结构获取到对应的tty设备结构
    tty_t *tty = get_tty(dev);
   14790:	83 ec 0c             	sub    $0xc,%esp
   14793:	ff 75 08             	push   0x8(%ebp)
   14796:	e8 4b fd ff ff       	call   144e6 <get_tty>
   1479b:	83 c4 10             	add    $0x10,%esp
   1479e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!tty) {
   147a1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   147a5:	75 0a                	jne    147b1 <tty_write+0x37>
        return -1;
   147a7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   147ac:	e9 b9 00 00 00       	jmp    1486a <tty_write+0xf0>
    }

    int len = 0;
   147b1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (size) {
   147b8:	e9 98 00 00 00       	jmp    14855 <tty_write+0xdb>

        //获取待写入字符
        char c = *(buf++);
   147bd:	8b 45 10             	mov    0x10(%ebp),%eax
   147c0:	8d 50 01             	lea    0x1(%eax),%edx
   147c3:	89 55 10             	mov    %edx,0x10(%ebp)
   147c6:	0f b6 00             	movzbl (%eax),%eax
   147c9:	88 45 ef             	mov    %al,-0x11(%ebp)

        //当前输出为"\r\n"换行模式，
        if (c == '\n' && (tty->oflags & TTY_OCRLF)) {
   147cc:	80 7d ef 0a          	cmpb   $0xa,-0x11(%ebp)
   147d0:	75 3b                	jne    1480d <tty_write+0x93>
   147d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   147d5:	8b 00                	mov    (%eax),%eax
   147d7:	83 e0 01             	and    $0x1,%eax
   147da:	85 c0                	test   %eax,%eax
   147dc:	74 2f                	je     1480d <tty_write+0x93>
            sem_wait(&tty->out_sem);
   147de:	8b 45 f0             	mov    -0x10(%ebp),%eax
   147e1:	83 c0 34             	add    $0x34,%eax
   147e4:	83 ec 0c             	sub    $0xc,%esp
   147e7:	50                   	push   %eax
   147e8:	e8 ac 0b 00 00       	call   15399 <sem_wait>
   147ed:	83 c4 10             	add    $0x10,%esp
            int err = tty_fifo_put(&tty->out_fifo, '\r');
   147f0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   147f3:	83 c0 0c             	add    $0xc,%eax
   147f6:	83 ec 08             	sub    $0x8,%esp
   147f9:	6a 0d                	push   $0xd
   147fb:	50                   	push   %eax
   147fc:	e8 6b fd ff ff       	call   1456c <tty_fifo_put>
   14801:	83 c4 10             	add    $0x10,%esp
   14804:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (err < 0) {
   14807:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   1480b:	78 54                	js     14861 <tty_write+0xe7>
            }
        }

        //先获取到访问缓冲区一个字节资源的资格
        //若缓冲区写满就阻塞住，等待中断程序将缓冲区消耗掉再写
        sem_wait(&tty->out_sem);
   1480d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14810:	83 c0 34             	add    $0x34,%eax
   14813:	83 ec 0c             	sub    $0xc,%esp
   14816:	50                   	push   %eax
   14817:	e8 7d 0b 00 00       	call   15399 <sem_wait>
   1481c:	83 c4 10             	add    $0x10,%esp

        int err = tty_fifo_put(&tty->out_fifo, c);
   1481f:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
   14823:	8b 55 f0             	mov    -0x10(%ebp),%edx
   14826:	83 c2 0c             	add    $0xc,%edx
   14829:	83 ec 08             	sub    $0x8,%esp
   1482c:	50                   	push   %eax
   1482d:	52                   	push   %edx
   1482e:	e8 39 fd ff ff       	call   1456c <tty_fifo_put>
   14833:	83 c4 10             	add    $0x10,%esp
   14836:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0) {
   14839:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   1483d:	78 25                	js     14864 <tty_write+0xea>
            break;
        }

        len++;
   1483f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
        size--;
   14843:	83 6d 14 01          	subl   $0x1,0x14(%ebp)

        //显示器直接写显存，不需要写io端口
        //所以不需要交给中断处理程序，即当前进程自己往缓冲区写入并读取
        //此处是为了模仿当前进程对缓冲区写入的同时中断处理程序读取缓冲区
        //此处肯定不会阻塞在信号量中，但利用中断处理程序就会阻塞
        console_write(tty);
   14847:	83 ec 0c             	sub    $0xc,%esp
   1484a:	ff 75 f0             	push   -0x10(%ebp)
   1484d:	e8 fb f2 ff ff       	call   13b4d <console_write>
   14852:	83 c4 10             	add    $0x10,%esp
    while (size) {
   14855:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   14859:	0f 85 5e ff ff ff    	jne    147bd <tty_write+0x43>
   1485f:	eb 04                	jmp    14865 <tty_write+0xeb>
                break;
   14861:	90                   	nop
   14862:	eb 01                	jmp    14865 <tty_write+0xeb>
            break;
   14864:	90                   	nop
    }
    


    return 0;
   14865:	b8 00 00 00 00       	mov    $0x0,%eax
} 
   1486a:	c9                   	leave  
   1486b:	c3                   	ret    

0001486c <tty_read>:

/**
 * @brief 读取读取设备
 * 
 */
int tty_read(device_t *dev, int addr, char *buf, int size) {
   1486c:	55                   	push   %ebp
   1486d:	89 e5                	mov    %esp,%ebp
   1486f:	83 ec 18             	sub    $0x18,%esp
    if (size < 0) {
   14872:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   14876:	79 0a                	jns    14882 <tty_read+0x16>
        return -1;
   14878:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1487d:	e9 e4 00 00 00       	jmp    14966 <tty_read+0xfa>
    }

    //1.获取操作的tty设备
    tty_t *tty = get_tty(dev);
   14882:	83 ec 0c             	sub    $0xc,%esp
   14885:	ff 75 08             	push   0x8(%ebp)
   14888:	e8 59 fc ff ff       	call   144e6 <get_tty>
   1488d:	83 c4 10             	add    $0x10,%esp
   14890:	89 45 ec             	mov    %eax,-0x14(%ebp)
    
    char *pbuf = buf;
   14893:	8b 45 10             	mov    0x10(%ebp),%eax
   14896:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int len = 0;
   14899:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    
    //2.从输入缓冲队列中读取字符到缓冲区buf中
    while (len < size) {
   148a0:	e9 b2 00 00 00       	jmp    14957 <tty_read+0xeb>
        //2.1等待资源就绪
        sem_wait(&tty->in_sem);
   148a5:	8b 45 ec             	mov    -0x14(%ebp),%eax
   148a8:	83 c0 44             	add    $0x44,%eax
   148ab:	83 ec 0c             	sub    $0xc,%esp
   148ae:	50                   	push   %eax
   148af:	e8 e5 0a 00 00       	call   15399 <sem_wait>
   148b4:	83 c4 10             	add    $0x10,%esp

        //2.2资源已就绪，读取一个字符
        char ch;
        tty_fifo_get(&tty->in_fifo, &ch);
   148b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
   148ba:	8d 50 20             	lea    0x20(%eax),%edx
   148bd:	83 ec 08             	sub    $0x8,%esp
   148c0:	8d 45 eb             	lea    -0x15(%ebp),%eax
   148c3:	50                   	push   %eax
   148c4:	52                   	push   %edx
   148c5:	e8 3a fd ff ff       	call   14604 <tty_fifo_get>
   148ca:	83 c4 10             	add    $0x10,%esp
        switch (ch) {
   148cd:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   148d1:	0f be c0             	movsbl %al,%eax
   148d4:	83 f8 0a             	cmp    $0xa,%eax
   148d7:	75 3a                	jne    14913 <tty_read+0xa7>
        case '\n':
            if ((tty->iflags & TTY_INCLR) && len < size - 1) {
   148d9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   148dc:	8b 40 04             	mov    0x4(%eax),%eax
   148df:	83 e0 01             	and    $0x1,%eax
   148e2:	85 c0                	test   %eax,%eax
   148e4:	74 1b                	je     14901 <tty_read+0x95>
   148e6:	8b 45 14             	mov    0x14(%ebp),%eax
   148e9:	83 e8 01             	sub    $0x1,%eax
   148ec:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   148ef:	7d 10                	jge    14901 <tty_read+0x95>
                //开启了换行转换
                *(pbuf++) = '\r';
   148f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   148f4:	8d 50 01             	lea    0x1(%eax),%edx
   148f7:	89 55 f4             	mov    %edx,-0xc(%ebp)
   148fa:	c6 00 0d             	movb   $0xd,(%eax)
                len++;
   148fd:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
            }
            *(pbuf++) = '\n';
   14901:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14904:	8d 50 01             	lea    0x1(%eax),%edx
   14907:	89 55 f4             	mov    %edx,-0xc(%ebp)
   1490a:	c6 00 0a             	movb   $0xa,(%eax)
            len++;
   1490d:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
            break;
   14911:	eb 14                	jmp    14927 <tty_read+0xbb>
        default:
            *(pbuf++) = ch;
   14913:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14916:	8d 50 01             	lea    0x1(%eax),%edx
   14919:	89 55 f4             	mov    %edx,-0xc(%ebp)
   1491c:	0f b6 55 eb          	movzbl -0x15(%ebp),%edx
   14920:	88 10                	mov    %dl,(%eax)
            len++;
   14922:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
            break;
   14926:	90                   	nop
        }

        //若tty设备开启了回显模式，则将输入回显到设备上
        if (tty->iflags & TTY_IECHO) {
   14927:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1492a:	8b 40 04             	mov    0x4(%eax),%eax
   1492d:	83 e0 02             	and    $0x2,%eax
   14930:	85 c0                	test   %eax,%eax
   14932:	74 13                	je     14947 <tty_read+0xdb>
            tty_write(dev, 0, &ch, 1);
   14934:	6a 01                	push   $0x1
   14936:	8d 45 eb             	lea    -0x15(%ebp),%eax
   14939:	50                   	push   %eax
   1493a:	6a 00                	push   $0x0
   1493c:	ff 75 08             	push   0x8(%ebp)
   1493f:	e8 36 fe ff ff       	call   1477a <tty_write>
   14944:	83 c4 10             	add    $0x10,%esp
        }

        //若输入回车或者换行则直接停止读取
        if (ch == '\n' || ch == '\r') {
   14947:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   1494b:	3c 0a                	cmp    $0xa,%al
   1494d:	74 14                	je     14963 <tty_read+0xf7>
   1494f:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   14953:	3c 0d                	cmp    $0xd,%al
   14955:	74 0c                	je     14963 <tty_read+0xf7>
    while (len < size) {
   14957:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1495a:	3b 45 14             	cmp    0x14(%ebp),%eax
   1495d:	0f 8c 42 ff ff ff    	jl     148a5 <tty_read+0x39>
            break;
        }

    }

    return len;
   14963:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   14966:	c9                   	leave  
   14967:	c3                   	ret    

00014968 <tty_control>:

/**
 * @brief 向tty设备发送控制指令
 * 
 */
int tty_control(device_t *dev, int cmd, int arg0, int arg1) {
   14968:	55                   	push   %ebp
   14969:	89 e5                	mov    %esp,%ebp

    return 0;
   1496b:	b8 00 00 00 00       	mov    $0x0,%eax
}
   14970:	5d                   	pop    %ebp
   14971:	c3                   	ret    

00014972 <tty_close>:

/**
 * @brief 关闭tty设备
 * 
 */
void tty_close(device_t *dev) {
   14972:	55                   	push   %ebp
   14973:	89 e5                	mov    %esp,%ebp

}
   14975:	90                   	nop
   14976:	5d                   	pop    %ebp
   14977:	c3                   	ret    

00014978 <tty_in>:
 * @brief 将字符放入对应索引的tty设备的输入缓冲队列中
 * 
 * @param dev_index 
 * @param ch 
 */
void tty_in(char ch) {
   14978:	55                   	push   %ebp
   14979:	89 e5                	mov    %esp,%ebp
   1497b:	83 ec 28             	sub    $0x28,%esp
   1497e:	8b 45 08             	mov    0x8(%ebp),%eax
   14981:	88 45 e4             	mov    %al,-0x1c(%ebp)
    //1.获取tty设备
    tty_t *tty = tty_table + curr_tty_index;
   14984:	a1 80 e1 04 00       	mov    0x4e180,%eax
   14989:	69 c0 54 04 00 00    	imul   $0x454,%eax,%eax
   1498f:	05 e0 be 04 00       	add    $0x4bee0,%eax
   14994:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.判断输入缓冲区资源是否已准备满
    if (sem_count(&tty->in_sem) >= TTY_IBUF_SIZE) {
   14997:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1499a:	83 c0 44             	add    $0x44,%eax
   1499d:	83 ec 0c             	sub    $0xc,%esp
   149a0:	50                   	push   %eax
   149a1:	e8 e0 0a 00 00       	call   15486 <sem_count>
   149a6:	83 c4 10             	add    $0x10,%esp
   149a9:	3d ff 01 00 00       	cmp    $0x1ff,%eax
   149ae:	7f 2b                	jg     149db <tty_in+0x63>
        //输入缓冲区已写满，放弃写入
        return;
    }

    //3.将字符写入输入缓冲队列
    tty_fifo_put(&tty->in_fifo, ch);
   149b0:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
   149b4:	8b 55 f4             	mov    -0xc(%ebp),%edx
   149b7:	83 c2 20             	add    $0x20,%edx
   149ba:	83 ec 08             	sub    $0x8,%esp
   149bd:	50                   	push   %eax
   149be:	52                   	push   %edx
   149bf:	e8 a8 fb ff ff       	call   1456c <tty_fifo_put>
   149c4:	83 c4 10             	add    $0x10,%esp
    
    //4.准备好一份可读资源，唤醒等待的进程或添加可获取资源
    sem_notify(&tty->in_sem);
   149c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   149ca:	83 c0 44             	add    $0x44,%eax
   149cd:	83 ec 0c             	sub    $0xc,%esp
   149d0:	50                   	push   %eax
   149d1:	e8 2e 0a 00 00       	call   15404 <sem_notify>
   149d6:	83 c4 10             	add    $0x10,%esp
   149d9:	eb 01                	jmp    149dc <tty_in+0x64>
        return;
   149db:	90                   	nop
}
   149dc:	c9                   	leave  
   149dd:	c3                   	ret    

000149de <tty_select>:
/**
 * @brief 通过索引号更改当前系统使用的tty设备
 * 
 * @param tty_index 
 */
void tty_select(int tty_index) {
   149de:	55                   	push   %ebp
   149df:	89 e5                	mov    %esp,%ebp
   149e1:	83 ec 08             	sub    $0x8,%esp
    if (tty_index != curr_tty_index) {
   149e4:	a1 80 e1 04 00       	mov    0x4e180,%eax
   149e9:	39 45 08             	cmp    %eax,0x8(%ebp)
   149ec:	74 16                	je     14a04 <tty_select+0x26>
        //选择对应的终端设备
       console_select(tty_index);
   149ee:	83 ec 0c             	sub    $0xc,%esp
   149f1:	ff 75 08             	push   0x8(%ebp)
   149f4:	e8 40 f2 ff ff       	call   13c39 <console_select>
   149f9:	83 c4 10             	add    $0x10,%esp
       curr_tty_index = tty_index; 
   149fc:	8b 45 08             	mov    0x8(%ebp),%eax
   149ff:	a3 80 e1 04 00       	mov    %eax,0x4e180
    }
}
   14a04:	90                   	nop
   14a05:	c9                   	leave  
   14a06:	c3                   	ret    

00014a07 <file_table_init>:

/**
 * @brief 初始化file_table
 * 
 */
void file_table_init(void) {
   14a07:	55                   	push   %ebp
   14a08:	89 e5                	mov    %esp,%ebp
   14a0a:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&file_alloc_mutex);
   14a0d:	83 ec 0c             	sub    $0xc,%esp
   14a10:	68 a0 a1 06 00       	push   $0x6a1a0
   14a15:	e8 2b 07 00 00       	call   15145 <mutex_init>
   14a1a:	83 c4 10             	add    $0x10,%esp
    kernel_memset(file_table, 0, sizeof(file_table));
   14a1d:	83 ec 04             	sub    $0x4,%esp
   14a20:	68 00 c0 01 00       	push   $0x1c000
   14a25:	6a 00                	push   $0x0
   14a27:	68 a0 e1 04 00       	push   $0x4e1a0
   14a2c:	e8 46 13 00 00       	call   15d77 <kernel_memset>
   14a31:	83 c4 10             	add    $0x10,%esp
}
   14a34:	90                   	nop
   14a35:	c9                   	leave  
   14a36:	c3                   	ret    

00014a37 <file_alloc>:
/**
 * @brief 从file_table中分配一个file结构
 * 
 * @return file_t* 
 */
file_t *file_alloc(void) {
   14a37:	55                   	push   %ebp
   14a38:	89 e5                	mov    %esp,%ebp
   14a3a:	83 ec 18             	sub    $0x18,%esp
    file_t *file = (file_t*)0;
   14a3d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    //TODO:加锁
    mutex_lock(&file_alloc_mutex);
   14a44:	83 ec 0c             	sub    $0xc,%esp
   14a47:	68 a0 a1 06 00       	push   $0x6a1a0
   14a4c:	e8 41 07 00 00       	call   15192 <mutex_lock>
   14a51:	83 c4 10             	add    $0x10,%esp

    //在file_table中获取分配一个资源
    for (int i = 0; i < FILE_TABLE_SIZE; ++i) {
   14a54:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   14a5b:	eb 40                	jmp    14a9d <file_alloc+0x66>
        file_t * p_file = file_table + i;
   14a5d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14a60:	6b c0 38             	imul   $0x38,%eax,%eax
   14a63:	05 a0 e1 04 00       	add    $0x4e1a0,%eax
   14a68:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (p_file->ref == 0) { //当前资源未被分配
   14a6b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14a6e:	8b 40 28             	mov    0x28(%eax),%eax
   14a71:	85 c0                	test   %eax,%eax
   14a73:	75 24                	jne    14a99 <file_alloc+0x62>
            kernel_memset(p_file, 0, sizeof(file_t));
   14a75:	83 ec 04             	sub    $0x4,%esp
   14a78:	6a 38                	push   $0x38
   14a7a:	6a 00                	push   $0x0
   14a7c:	ff 75 ec             	push   -0x14(%ebp)
   14a7f:	e8 f3 12 00 00       	call   15d77 <kernel_memset>
   14a84:	83 c4 10             	add    $0x10,%esp
            p_file->ref = 1;    //记录被外部引用
   14a87:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14a8a:	c7 40 28 01 00 00 00 	movl   $0x1,0x28(%eax)
            file = p_file;
   14a91:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14a94:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   14a97:	eb 0d                	jmp    14aa6 <file_alloc+0x6f>
    for (int i = 0; i < FILE_TABLE_SIZE; ++i) {
   14a99:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   14a9d:	81 7d f0 ff 07 00 00 	cmpl   $0x7ff,-0x10(%ebp)
   14aa4:	7e b7                	jle    14a5d <file_alloc+0x26>
        }
    }

    //TODO:解锁
    mutex_unlock(&file_alloc_mutex);
   14aa6:	83 ec 0c             	sub    $0xc,%esp
   14aa9:	68 a0 a1 06 00       	push   $0x6a1a0
   14aae:	e8 70 07 00 00       	call   15223 <mutex_unlock>
   14ab3:	83 c4 10             	add    $0x10,%esp
    return file;
   14ab6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   14ab9:	c9                   	leave  
   14aba:	c3                   	ret    

00014abb <file_free>:
/**
 * @brief 释放一个文件结构资源
 * 
 * @param file 
 */
void file_free(file_t *file) {
   14abb:	55                   	push   %ebp
   14abc:	89 e5                	mov    %esp,%ebp
   14abe:	83 ec 08             	sub    $0x8,%esp

    //TODO:加锁
    mutex_lock(&file_alloc_mutex);
   14ac1:	83 ec 0c             	sub    $0xc,%esp
   14ac4:	68 a0 a1 06 00       	push   $0x6a1a0
   14ac9:	e8 c4 06 00 00       	call   15192 <mutex_lock>
   14ace:	83 c4 10             	add    $0x10,%esp
    
    if (file->ref > 0) {    //引用计数减1
   14ad1:	8b 45 08             	mov    0x8(%ebp),%eax
   14ad4:	8b 40 28             	mov    0x28(%eax),%eax
   14ad7:	85 c0                	test   %eax,%eax
   14ad9:	7e 0f                	jle    14aea <file_free+0x2f>
        file->ref--;
   14adb:	8b 45 08             	mov    0x8(%ebp),%eax
   14ade:	8b 40 28             	mov    0x28(%eax),%eax
   14ae1:	8d 50 ff             	lea    -0x1(%eax),%edx
   14ae4:	8b 45 08             	mov    0x8(%ebp),%eax
   14ae7:	89 50 28             	mov    %edx,0x28(%eax)
    }

    //TODO:解锁
    mutex_unlock(&file_alloc_mutex);
   14aea:	83 ec 0c             	sub    $0xc,%esp
   14aed:	68 a0 a1 06 00       	push   $0x6a1a0
   14af2:	e8 2c 07 00 00       	call   15223 <mutex_unlock>
   14af7:	83 c4 10             	add    $0x10,%esp
   14afa:	90                   	nop
   14afb:	c9                   	leave  
   14afc:	c3                   	ret    

00014afd <inb>:
static inline uint8_t inb(uint16_t port) {
   14afd:	55                   	push   %ebp
   14afe:	89 e5                	mov    %esp,%ebp
   14b00:	83 ec 14             	sub    $0x14,%esp
   14b03:	8b 45 08             	mov    0x8(%ebp),%eax
   14b06:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   14b0a:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   14b0e:	89 c2                	mov    %eax,%edx
   14b10:	ec                   	in     (%dx),%al
   14b11:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   14b14:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   14b18:	c9                   	leave  
   14b19:	c3                   	ret    

00014b1a <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   14b1a:	55                   	push   %ebp
   14b1b:	89 e5                	mov    %esp,%ebp
   14b1d:	83 ec 08             	sub    $0x8,%esp
   14b20:	8b 45 08             	mov    0x8(%ebp),%eax
   14b23:	8b 55 0c             	mov    0xc(%ebp),%edx
   14b26:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   14b2a:	89 d0                	mov    %edx,%eax
   14b2c:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   14b2f:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   14b33:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   14b37:	ee                   	out    %al,(%dx)
}
   14b38:	90                   	nop
   14b39:	c9                   	leave  
   14b3a:	c3                   	ret    

00014b3b <inw>:
static inline uint16_t inw(uint16_t port) {
   14b3b:	55                   	push   %ebp
   14b3c:	89 e5                	mov    %esp,%ebp
   14b3e:	83 ec 14             	sub    $0x14,%esp
   14b41:	8b 45 08             	mov    0x8(%ebp),%eax
   14b44:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__("in %[p], %[v]"  // in默认就是inw, 读取一个字即16位
   14b48:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   14b4c:	89 c2                	mov    %eax,%edx
   14b4e:	66 ed                	in     (%dx),%ax
   14b50:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  return rv;
   14b54:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
}
   14b58:	c9                   	leave  
   14b59:	c3                   	ret    

00014b5a <read_disk>:
 * 
 * @param sector 读取的分区号
 * @param sector_count 读取的分区数量
 * @param buf 缓冲区第一个字节的地址
 */
static void read_disk(uint32_t sector, uint16_t sector_count, uint8_t *buf) {
   14b5a:	55                   	push   %ebp
   14b5b:	89 e5                	mov    %esp,%ebp
   14b5d:	53                   	push   %ebx
   14b5e:	83 ec 14             	sub    $0x14,%esp
   14b61:	8b 45 0c             	mov    0xc(%ebp),%eax
   14b64:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    
    //1.设置以LBA模式进行读取，即将磁盘看作一片连续的扇区
    outb(0x1F6, 0xE0 | (0x0 << 4));              //0xE0 将寄存器第6位置1进入LBA模式，0x0将第4位置0指定驱动器号为主盘
   14b68:	68 e0 00 00 00       	push   $0xe0
   14b6d:	68 f6 01 00 00       	push   $0x1f6
   14b72:	e8 a3 ff ff ff       	call   14b1a <outb>
   14b77:	83 c4 08             	add    $0x8,%esp
                                                            //现在一个通道上只有一个盘，默认当作主盘
                    
    //2.初始化各个端口寄存器的高8位
    outb(0x1F2, (uint8_t)(sector_count >> 8));  //读取扇区数的高8位
   14b7a:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   14b7e:	66 c1 e8 08          	shr    $0x8,%ax
   14b82:	0f b6 c0             	movzbl %al,%eax
   14b85:	50                   	push   %eax
   14b86:	68 f2 01 00 00       	push   $0x1f2
   14b8b:	e8 8a ff ff ff       	call   14b1a <outb>
   14b90:	83 c4 08             	add    $0x8,%esp
                                                //6字节LBA值，先初始化第456个字节
                                                //我暂时只用到了4个字节的LBA值, 所以第56个字节置0即可
    outb(0x1F3, (uint8_t)(sector >> 24));       //LBA4 
   14b93:	8b 45 08             	mov    0x8(%ebp),%eax
   14b96:	c1 e8 18             	shr    $0x18,%eax
   14b99:	0f b6 c0             	movzbl %al,%eax
   14b9c:	50                   	push   %eax
   14b9d:	68 f3 01 00 00       	push   $0x1f3
   14ba2:	e8 73 ff ff ff       	call   14b1a <outb>
   14ba7:	83 c4 08             	add    $0x8,%esp
    outb(0x1F4, 0x00);                          //LBA5
   14baa:	6a 00                	push   $0x0
   14bac:	68 f4 01 00 00       	push   $0x1f4
   14bb1:	e8 64 ff ff ff       	call   14b1a <outb>
   14bb6:	83 c4 08             	add    $0x8,%esp
    outb(0x1F5, 0x00);                          //LBA6
   14bb9:	6a 00                	push   $0x0
   14bbb:	68 f5 01 00 00       	push   $0x1f5
   14bc0:	e8 55 ff ff ff       	call   14b1a <outb>
   14bc5:	83 c4 08             	add    $0x8,%esp

    //3.初始化各个端口寄存器的低8位
    outb(0x1F2, (uint8_t)sector_count);         //读取扇区数的低8位
   14bc8:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   14bcc:	0f b6 c0             	movzbl %al,%eax
   14bcf:	50                   	push   %eax
   14bd0:	68 f2 01 00 00       	push   $0x1f2
   14bd5:	e8 40 ff ff ff       	call   14b1a <outb>
   14bda:	83 c4 08             	add    $0x8,%esp
    outb(0x1F3, (uint8_t)sector);               //LBA1
   14bdd:	8b 45 08             	mov    0x8(%ebp),%eax
   14be0:	0f b6 c0             	movzbl %al,%eax
   14be3:	50                   	push   %eax
   14be4:	68 f3 01 00 00       	push   $0x1f3
   14be9:	e8 2c ff ff ff       	call   14b1a <outb>
   14bee:	83 c4 08             	add    $0x8,%esp
    outb(0x1F4, (uint8_t)(sector >> 8));        //LBA2
   14bf1:	8b 45 08             	mov    0x8(%ebp),%eax
   14bf4:	c1 e8 08             	shr    $0x8,%eax
   14bf7:	0f b6 c0             	movzbl %al,%eax
   14bfa:	50                   	push   %eax
   14bfb:	68 f4 01 00 00       	push   $0x1f4
   14c00:	e8 15 ff ff ff       	call   14b1a <outb>
   14c05:	83 c4 08             	add    $0x8,%esp
    outb(0x1F5, (uint8_t)(sector >> 16));       //LBA3
   14c08:	8b 45 08             	mov    0x8(%ebp),%eax
   14c0b:	c1 e8 10             	shr    $0x10,%eax
   14c0e:	0f b6 c0             	movzbl %al,%eax
   14c11:	50                   	push   %eax
   14c12:	68 f5 01 00 00       	push   $0x1f5
   14c17:	e8 fe fe ff ff       	call   14b1a <outb>
   14c1c:	83 c4 08             	add    $0x8,%esp

    //4.将读取扇区命令 （0x24） 发送到端口 0x1F7
    outb(0x1F7, 0x24);
   14c1f:	6a 24                	push   $0x24
   14c21:	68 f7 01 00 00       	push   $0x1f7
   14c26:	e8 ef fe ff ff       	call   14b1a <outb>
   14c2b:	83 c4 08             	add    $0x8,%esp

    //5.读取状态端口寄存器，判断是否可读取,若可以则读取，否则阻塞等待
    uint16_t *data_buf = (uint16_t*) buf;       //数据缓冲区，以后每次会读取16位数据
   14c2e:	8b 45 10             	mov    0x10(%ebp),%eax
   14c31:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (sector_count--) {
   14c34:	eb 4a                	jmp    14c80 <read_disk+0x126>
        while ((inb(0x1F7) & 0x88) != 0x8) {};  //取出状态寄存器3位和7位
   14c36:	90                   	nop
   14c37:	68 f7 01 00 00       	push   $0x1f7
   14c3c:	e8 bc fe ff ff       	call   14afd <inb>
   14c41:	83 c4 04             	add    $0x4,%esp
   14c44:	0f b6 c0             	movzbl %al,%eax
   14c47:	25 88 00 00 00       	and    $0x88,%eax
   14c4c:	83 f8 08             	cmp    $0x8,%eax
   14c4f:	75 e6                	jne    14c37 <read_disk+0xdd>
                                                //若!=0x8即DRQ位(3位)为0，即非就绪状态
                                                //或者BSY(7位)为1，即忙碌状态，都不可读取

        for (int i = 0; i < SECTOR_SIZE / 2; ++i) {
   14c51:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   14c58:	eb 1d                	jmp    14c77 <read_disk+0x11d>
            *(data_buf++) = inw(0x1F0);          //从数据端口寄存器中读取16位数据，即2个字节
   14c5a:	8b 5d f8             	mov    -0x8(%ebp),%ebx
   14c5d:	8d 43 02             	lea    0x2(%ebx),%eax
   14c60:	89 45 f8             	mov    %eax,-0x8(%ebp)
   14c63:	68 f0 01 00 00       	push   $0x1f0
   14c68:	e8 ce fe ff ff       	call   14b3b <inw>
   14c6d:	83 c4 04             	add    $0x4,%esp
   14c70:	66 89 03             	mov    %ax,(%ebx)
        for (int i = 0; i < SECTOR_SIZE / 2; ++i) {
   14c73:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   14c77:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   14c7e:	7e da                	jle    14c5a <read_disk+0x100>
    while (sector_count--) {
   14c80:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   14c84:	8d 50 ff             	lea    -0x1(%eax),%edx
   14c87:	66 89 55 e8          	mov    %dx,-0x18(%ebp)
   14c8b:	66 85 c0             	test   %ax,%ax
   14c8e:	75 a6                	jne    14c36 <read_disk+0xdc>
        }
        
    }
    
}
   14c90:	90                   	nop
   14c91:	90                   	nop
   14c92:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   14c95:	c9                   	leave  
   14c96:	c3                   	ret    

00014c97 <is_path_valid>:
 * @brief 判断文件路径是否有效
 * 
 * @param path 
 * @return int 
 */
static int is_path_valid(const char *path) {
   14c97:	55                   	push   %ebp
   14c98:	89 e5                	mov    %esp,%ebp
    if (path == (const char*)0 || path[0] == '\0') {//路径无效
   14c9a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   14c9e:	74 0a                	je     14caa <is_path_valid+0x13>
   14ca0:	8b 45 08             	mov    0x8(%ebp),%eax
   14ca3:	0f b6 00             	movzbl (%eax),%eax
   14ca6:	84 c0                	test   %al,%al
   14ca8:	75 07                	jne    14cb1 <is_path_valid+0x1a>
        return 0;
   14caa:	b8 00 00 00 00       	mov    $0x0,%eax
   14caf:	eb 05                	jmp    14cb6 <is_path_valid+0x1f>
    }

    return 1;
   14cb1:	b8 01 00 00 00       	mov    $0x1,%eax
}
   14cb6:	5d                   	pop    %ebp
   14cb7:	c3                   	ret    

00014cb8 <sys_open>:
 * @param name 文件路径
 * @param flags 打开方式的标志
 * @param ... 
 * @return int 文件描述符 
 */
int sys_open(const char *name, int flags, ...) {
   14cb8:	55                   	push   %ebp
   14cb9:	89 e5                	mov    %esp,%ebp
   14cbb:	83 ec 18             	sub    $0x18,%esp
    if (kernel_strncmp(name, "tty", 3) == 0) {  //打开tty设备文件
   14cbe:	83 ec 04             	sub    $0x4,%esp
   14cc1:	6a 03                	push   $0x3
   14cc3:	68 b9 74 01 00       	push   $0x174b9
   14cc8:	ff 75 08             	push   0x8(%ebp)
   14ccb:	e8 a2 0f 00 00       	call   15c72 <kernel_strncmp>
   14cd0:	83 c4 10             	add    $0x10,%esp
   14cd3:	85 c0                	test   %eax,%eax
   14cd5:	0f 85 09 01 00 00    	jne    14de4 <sys_open+0x12c>
        
        //1.判断路径是否有效
        if(!is_path_valid(name)) {//文件路径无效
   14cdb:	83 ec 0c             	sub    $0xc,%esp
   14cde:	ff 75 08             	push   0x8(%ebp)
   14ce1:	e8 b1 ff ff ff       	call   14c97 <is_path_valid>
   14ce6:	83 c4 10             	add    $0x10,%esp
   14ce9:	85 c0                	test   %eax,%eax
   14ceb:	75 1a                	jne    14d07 <sys_open+0x4f>
            log_printf("path is not valid\n");
   14ced:	83 ec 0c             	sub    $0xc,%esp
   14cf0:	68 bd 74 01 00       	push   $0x174bd
   14cf5:	e8 7a 18 00 00       	call   16574 <log_printf>
   14cfa:	83 c4 10             	add    $0x10,%esp
            return -1;
   14cfd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14d02:	e9 14 01 00 00       	jmp    14e1b <sys_open+0x163>
        }

        //2.从系统file_table中分配一个文件结构
        file_t *file = file_alloc();
   14d07:	e8 2b fd ff ff       	call   14a37 <file_alloc>
   14d0c:	89 45 f0             	mov    %eax,-0x10(%ebp)

        //3.将文件结构放入当前进程的打开文件表中并得到文件描述符
        int fd = -1;
   14d0f:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
        if (file) {//分配成功，放入调用该系统调用的任务进程的打开文件表中
   14d16:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14d1a:	0f 84 8e 00 00 00    	je     14dae <sys_open+0xf6>
            fd = task_alloc_fd(file);
   14d20:	83 ec 0c             	sub    $0xc,%esp
   14d23:	ff 75 f0             	push   -0x10(%ebp)
   14d26:	e8 a1 c5 ff ff       	call   112cc <task_alloc_fd>
   14d2b:	83 c4 10             	add    $0x10,%esp
   14d2e:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (fd < 0) {//放入失败
   14d31:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   14d35:	78 7a                	js     14db1 <sys_open+0xf9>
            goto sys_open_failed;
        }

        //4.打开对应具体设备号的tty设备
        //name的开头为"tty:0(设备号)"
        int num = name[4] - '0';    //获取设备号
   14d37:	8b 45 08             	mov    0x8(%ebp),%eax
   14d3a:	83 c0 04             	add    $0x4,%eax
   14d3d:	0f b6 00             	movzbl (%eax),%eax
   14d40:	0f be c0             	movsbl %al,%eax
   14d43:	83 e8 30             	sub    $0x30,%eax
   14d46:	89 45 ec             	mov    %eax,-0x14(%ebp)
        int dev_id = dev_open(DEV_TTY, num, 0); //打开设备并获取设备描述符
   14d49:	83 ec 04             	sub    $0x4,%esp
   14d4c:	6a 00                	push   $0x0
   14d4e:	ff 75 ec             	push   -0x14(%ebp)
   14d51:	6a 01                	push   $0x1
   14d53:	e8 05 f0 ff ff       	call   13d5d <dev_open>
   14d58:	83 c4 10             	add    $0x10,%esp
   14d5b:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (dev_id < 0) {
   14d5e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   14d62:	78 50                	js     14db4 <sys_open+0xfc>
            goto sys_open_failed;
        }

        //5.将打开的tty设备与分配的文件结构绑定
        file->dev_id = dev_id;
   14d64:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14d67:	8b 55 e8             	mov    -0x18(%ebp),%edx
   14d6a:	89 50 2c             	mov    %edx,0x2c(%eax)
        file->mode = 0;
   14d6d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14d70:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
        file->pos = 0;
   14d77:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14d7a:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
        file->ref = 1;
   14d81:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14d84:	c7 40 28 01 00 00 00 	movl   $0x1,0x28(%eax)
        file->type = FILE_TTY;
   14d8b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14d8e:	c7 40 20 01 00 00 00 	movl   $0x1,0x20(%eax)
        kernel_strncpy(file->file_name, name, FILE_NAME_SIZE);
   14d95:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14d98:	83 ec 04             	sub    $0x4,%esp
   14d9b:	6a 20                	push   $0x20
   14d9d:	ff 75 08             	push   0x8(%ebp)
   14da0:	50                   	push   %eax
   14da1:	e8 7b 0e 00 00       	call   15c21 <kernel_strncpy>
   14da6:	83 c4 10             	add    $0x10,%esp


        //6.返回文件描述符
        return fd;
   14da9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14dac:	eb 6d                	jmp    14e1b <sys_open+0x163>
            goto sys_open_failed;
   14dae:	90                   	nop
   14daf:	eb 04                	jmp    14db5 <sys_open+0xfd>
                goto sys_open_failed;
   14db1:	90                   	nop
   14db2:	eb 01                	jmp    14db5 <sys_open+0xfd>
            goto sys_open_failed;
   14db4:	90                   	nop

    //打开失败，回收资源
    sys_open_failed:
        if (file) { //释放掉已分配的file
   14db5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14db9:	74 0e                	je     14dc9 <sys_open+0x111>
            file_free(file);
   14dbb:	83 ec 0c             	sub    $0xc,%esp
   14dbe:	ff 75 f0             	push   -0x10(%ebp)
   14dc1:	e8 f5 fc ff ff       	call   14abb <file_free>
   14dc6:	83 c4 10             	add    $0x10,%esp
        }
        if (fd >= 0) {  //释放掉已分配的打开文件表的资源
   14dc9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   14dcd:	78 0e                	js     14ddd <sys_open+0x125>
            task_remove_fd(fd);
   14dcf:	83 ec 0c             	sub    $0xc,%esp
   14dd2:	ff 75 f4             	push   -0xc(%ebp)
   14dd5:	e8 45 c5 ff ff       	call   1131f <task_remove_fd>
   14dda:	83 c4 10             	add    $0x10,%esp
        }

        return -1;
   14ddd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14de2:	eb 37                	jmp    14e1b <sys_open+0x163>

    } else if (name[0] == '/') {  //打开外部程序
   14de4:	8b 45 08             	mov    0x8(%ebp),%eax
   14de7:	0f b6 00             	movzbl (%eax),%eax
   14dea:	3c 2f                	cmp    $0x2f,%al
   14dec:	75 28                	jne    14e16 <sys_open+0x15e>
        read_disk(5000, 80, (uint8_t*)TEMP_ADDR);
   14dee:	83 ec 04             	sub    $0x4,%esp
   14df1:	68 00 00 80 07       	push   $0x7800000
   14df6:	6a 50                	push   $0x50
   14df8:	68 88 13 00 00       	push   $0x1388
   14dfd:	e8 58 fd ff ff       	call   14b5a <read_disk>
   14e02:	83 c4 10             	add    $0x10,%esp
        temp_pos = (uint8_t*)TEMP_ADDR;
   14e05:	c7 05 b4 a1 06 00 00 	movl   $0x7800000,0x6a1b4
   14e0c:	00 80 07 
        return TEMP_FILE_ID;
   14e0f:	b8 64 00 00 00       	mov    $0x64,%eax
   14e14:	eb 05                	jmp    14e1b <sys_open+0x163>
    }

    return -1;
   14e16:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   14e1b:	c9                   	leave  
   14e1c:	c3                   	ret    

00014e1d <sys_read>:
 * @param file 文件描述符
 * @param ptr 缓冲区地址
 * @param len 读取字节数
 * @return int 成功读取字节数
 */
int sys_read(int file, char *ptr, int len) {
   14e1d:	55                   	push   %ebp
   14e1e:	89 e5                	mov    %esp,%ebp
   14e20:	83 ec 18             	sub    $0x18,%esp
    if (file == TEMP_FILE_ID) {
   14e23:	83 7d 08 64          	cmpl   $0x64,0x8(%ebp)
   14e27:	75 2c                	jne    14e55 <sys_read+0x38>
        kernel_memcpy(ptr, temp_pos, len);
   14e29:	a1 b4 a1 06 00       	mov    0x6a1b4,%eax
   14e2e:	83 ec 04             	sub    $0x4,%esp
   14e31:	ff 75 10             	push   0x10(%ebp)
   14e34:	50                   	push   %eax
   14e35:	ff 75 0c             	push   0xc(%ebp)
   14e38:	e8 eb 0e 00 00       	call   15d28 <kernel_memcpy>
   14e3d:	83 c4 10             	add    $0x10,%esp
        temp_pos += len;
   14e40:	8b 15 b4 a1 06 00    	mov    0x6a1b4,%edx
   14e46:	8b 45 10             	mov    0x10(%ebp),%eax
   14e49:	01 d0                	add    %edx,%eax
   14e4b:	a3 b4 a1 06 00       	mov    %eax,0x6a1b4
        return len;
   14e50:	8b 45 10             	mov    0x10(%ebp),%eax
   14e53:	eb 45                	jmp    14e9a <sys_read+0x7d>
    } else {
        //根据文件描述符从当前进程的打开文件表中获取文件指针
        file_t *p_file = task_file(file);
   14e55:	83 ec 0c             	sub    $0xc,%esp
   14e58:	ff 75 08             	push   0x8(%ebp)
   14e5b:	e8 3c c4 ff ff       	call   1129c <task_file>
   14e60:	83 c4 10             	add    $0x10,%esp
   14e63:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (!p_file) {//获取失败
   14e66:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   14e6a:	75 17                	jne    14e83 <sys_read+0x66>
            log_printf("file not opened!\n");
   14e6c:	83 ec 0c             	sub    $0xc,%esp
   14e6f:	68 d0 74 01 00       	push   $0x174d0
   14e74:	e8 fb 16 00 00       	call   16574 <log_printf>
   14e79:	83 c4 10             	add    $0x10,%esp
            return -1;
   14e7c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14e81:	eb 17                	jmp    14e9a <sys_read+0x7d>
        }
        //2.对文件结构所对应的设备进行真实的读操作
        return dev_read(p_file->dev_id, 0, ptr, len);
   14e83:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14e86:	8b 40 2c             	mov    0x2c(%eax),%eax
   14e89:	ff 75 10             	push   0x10(%ebp)
   14e8c:	ff 75 0c             	push   0xc(%ebp)
   14e8f:	6a 00                	push   $0x0
   14e91:	50                   	push   %eax
   14e92:	e8 10 f0 ff ff       	call   13ea7 <dev_read>
   14e97:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
}
   14e9a:	c9                   	leave  
   14e9b:	c3                   	ret    

00014e9c <sys_write>:
 * @param file 文件描述符
 * @param ptr 缓冲区地址
 * @param len 写入字节数
 * @return int 成功写入字节数
 */
int sys_write(int file, char *ptr, int len) {
   14e9c:	55                   	push   %ebp
   14e9d:	89 e5                	mov    %esp,%ebp
   14e9f:	83 ec 18             	sub    $0x18,%esp
    //1.根据文件描述符从当前进程的打开文件表中获取文件结构指针
     file_t *p_file = task_file(file);
   14ea2:	83 ec 0c             	sub    $0xc,%esp
   14ea5:	ff 75 08             	push   0x8(%ebp)
   14ea8:	e8 ef c3 ff ff       	call   1129c <task_file>
   14ead:	83 c4 10             	add    $0x10,%esp
   14eb0:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (!p_file) {//获取失败
   14eb3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   14eb7:	75 17                	jne    14ed0 <sys_write+0x34>
        log_printf("file not opened!\n");
   14eb9:	83 ec 0c             	sub    $0xc,%esp
   14ebc:	68 d0 74 01 00       	push   $0x174d0
   14ec1:	e8 ae 16 00 00       	call   16574 <log_printf>
   14ec6:	83 c4 10             	add    $0x10,%esp
        return -1;
   14ec9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14ece:	eb 17                	jmp    14ee7 <sys_write+0x4b>
    }

    //2.对文件结构所对应的设备进行真实的写操作
    return dev_write(p_file->dev_id, 0, ptr, len);
   14ed0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14ed3:	8b 40 2c             	mov    0x2c(%eax),%eax
   14ed6:	ff 75 10             	push   0x10(%ebp)
   14ed9:	ff 75 0c             	push   0xc(%ebp)
   14edc:	6a 00                	push   $0x0
   14ede:	50                   	push   %eax
   14edf:	e8 0f f0 ff ff       	call   13ef3 <dev_write>
   14ee4:	83 c4 10             	add    $0x10,%esp
    //     // dev_write(dev_id, 0, ptr, len);
    //     // dev_close(dev_id);

    // }
    // return -1;
}
   14ee7:	c9                   	leave  
   14ee8:	c3                   	ret    

00014ee9 <sys_lseek>:
 * @param file 
 * @param offset 
 * @param pos 
 * @return int 
 */
int sys_lseek(int file, int offset, int pos) {
   14ee9:	55                   	push   %ebp
   14eea:	89 e5                	mov    %esp,%ebp
    if (file == TEMP_FILE_ID) {
   14eec:	83 7d 08 64          	cmpl   $0x64,0x8(%ebp)
   14ef0:	75 14                	jne    14f06 <sys_lseek+0x1d>
        temp_pos = (uint8_t*)(TEMP_ADDR + offset);
   14ef2:	8b 45 0c             	mov    0xc(%ebp),%eax
   14ef5:	05 00 00 80 07       	add    $0x7800000,%eax
   14efa:	a3 b4 a1 06 00       	mov    %eax,0x6a1b4
        return 0;
   14eff:	b8 00 00 00 00       	mov    $0x0,%eax
   14f04:	eb 05                	jmp    14f0b <sys_lseek+0x22>
    }

    return -1;
   14f06:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

}
   14f0b:	5d                   	pop    %ebp
   14f0c:	c3                   	ret    

00014f0d <sys_close>:
 * @brief 关闭文件
 * 
 * @param file 
 * @return int 
 */
int sys_close(int file) {
   14f0d:	55                   	push   %ebp
   14f0e:	89 e5                	mov    %esp,%ebp
    return 0;
   14f10:	b8 00 00 00 00       	mov    $0x0,%eax
}
   14f15:	5d                   	pop    %ebp
   14f16:	c3                   	ret    

00014f17 <sys_isatty>:
 * @brief 
 * 
 * @param file 
 * @return int 
 */
int sys_isatty(int file) {
   14f17:	55                   	push   %ebp
   14f18:	89 e5                	mov    %esp,%ebp
    return -1;
   14f1a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   14f1f:	5d                   	pop    %ebp
   14f20:	c3                   	ret    

00014f21 <sys_fstat>:
 * 
 * @param file 
 * @param st 
 * @return int 
 */
int sys_fstat(int file, struct stat *st) {
   14f21:	55                   	push   %ebp
   14f22:	89 e5                	mov    %esp,%ebp
    return -1;
   14f24:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   14f29:	5d                   	pop    %ebp
   14f2a:	c3                   	ret    

00014f2b <sys_dup>:
 * @brief 在当前进程的打开文件表中分配新的一项指向该文件描述符对应的文件指针
 * 
 * @param file 需要被多次引用的文件指针的文件描述符
 * @return int 新的文件描述符
 */
int sys_dup(int file) {
   14f2b:	55                   	push   %ebp
   14f2c:	89 e5                	mov    %esp,%ebp
   14f2e:	83 ec 18             	sub    $0x18,%esp
    if (file < 0 || file >= TASK_OFILE_SIZE) {
   14f31:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   14f35:	78 06                	js     14f3d <sys_dup+0x12>
   14f37:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   14f3b:	7e 1a                	jle    14f57 <sys_dup+0x2c>
        log_printf("file %d is not valid.", file);
   14f3d:	83 ec 08             	sub    $0x8,%esp
   14f40:	ff 75 08             	push   0x8(%ebp)
   14f43:	68 e2 74 01 00       	push   $0x174e2
   14f48:	e8 27 16 00 00       	call   16574 <log_printf>
   14f4d:	83 c4 10             	add    $0x10,%esp
        return -1;
   14f50:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14f55:	eb 6e                	jmp    14fc5 <sys_dup+0x9a>
    }

    //1.获取需要重复引用的文件指针
    file_t *p_file = task_file(file);
   14f57:	83 ec 0c             	sub    $0xc,%esp
   14f5a:	ff 75 08             	push   0x8(%ebp)
   14f5d:	e8 3a c3 ff ff       	call   1129c <task_file>
   14f62:	83 c4 10             	add    $0x10,%esp
   14f65:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!p_file) {
   14f68:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   14f6c:	75 17                	jne    14f85 <sys_dup+0x5a>
        log_printf("file not opend!\n");
   14f6e:	83 ec 0c             	sub    $0xc,%esp
   14f71:	68 f8 74 01 00       	push   $0x174f8
   14f76:	e8 f9 15 00 00       	call   16574 <log_printf>
   14f7b:	83 c4 10             	add    $0x10,%esp
        return -1;
   14f7e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14f83:	eb 40                	jmp    14fc5 <sys_dup+0x9a>
    }

    //2.在打开文件表中新分配一项给该文件指针
    int fd = task_alloc_fd(p_file);
   14f85:	83 ec 0c             	sub    $0xc,%esp
   14f88:	ff 75 f4             	push   -0xc(%ebp)
   14f8b:	e8 3c c3 ff ff       	call   112cc <task_alloc_fd>
   14f90:	83 c4 10             	add    $0x10,%esp
   14f93:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (fd < 0) {
   14f96:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14f9a:	79 17                	jns    14fb3 <sys_dup+0x88>
        log_printf("no task file avaliable\n");
   14f9c:	83 ec 0c             	sub    $0xc,%esp
   14f9f:	68 09 75 01 00       	push   $0x17509
   14fa4:	e8 cb 15 00 00       	call   16574 <log_printf>
   14fa9:	83 c4 10             	add    $0x10,%esp
        return -1;
   14fac:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14fb1:	eb 12                	jmp    14fc5 <sys_dup+0x9a>
    }

    p_file->ref++;  //分配成功，该文件引用次数加一
   14fb3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14fb6:	8b 40 28             	mov    0x28(%eax),%eax
   14fb9:	8d 50 01             	lea    0x1(%eax),%edx
   14fbc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14fbf:	89 50 28             	mov    %edx,0x28(%eax)
    return fd;
   14fc2:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   14fc5:	c9                   	leave  
   14fc6:	c3                   	ret    

00014fc7 <fs_init>:

/**
 * @brief 初始化文件系统
 * 
 */
void fs_init(void) {
   14fc7:	55                   	push   %ebp
   14fc8:	89 e5                	mov    %esp,%ebp
   14fca:	83 ec 08             	sub    $0x8,%esp
    file_table_init();
   14fcd:	e8 35 fa ff ff       	call   14a07 <file_table_init>
   14fd2:	90                   	nop
   14fd3:	c9                   	leave  
   14fd4:	c3                   	ret    

00014fd5 <kernel_init>:

/**
 * @brief  对内核进行初始化操作
 * 
 */
void kernel_init(boot_info_t* boot_info) {
   14fd5:	55                   	push   %ebp
   14fd6:	89 e5                	mov    %esp,%ebp
   14fd8:	83 ec 08             	sub    $0x8,%esp
    //1.判断是否检测到可用内存
    ASSERT(boot_info->ram_region_count != 0);
   14fdb:	8b 45 08             	mov    0x8(%ebp),%eax
   14fde:	8b 40 50             	mov    0x50(%eax),%eax
   14fe1:	85 c0                	test   %eax,%eax
   14fe3:	75 19                	jne    14ffe <kernel_init+0x29>
   14fe5:	68 24 75 01 00       	push   $0x17524
   14fea:	68 c0 75 01 00       	push   $0x175c0
   14fef:	6a 25                	push   $0x25
   14ff1:	68 48 75 01 00       	push   $0x17548
   14ff6:	e8 63 08 00 00       	call   1585e <pannic>
   14ffb:	83 c4 10             	add    $0x10,%esp
    
    //2.初始化并重新加载GDT表
    gdt_init();
   14ffe:	e8 7a d5 ff ff       	call   1257d <gdt_init>

    //3.初始化并加载中断描述符表IDT
    idt_init();
   15003:	e8 23 dd ff ff       	call   12d2b <idt_init>
 
    //4.初始化日志程序,便于后期调用
    log_init();
   15008:	e8 38 15 00 00       	call   16545 <log_init>

    //5.初始化内存管理
    memory_init(boot_info);  
   1500d:	83 ec 0c             	sub    $0xc,%esp
   15010:	ff 75 08             	push   0x8(%ebp)
   15013:	e8 41 bc ff ff       	call   10c59 <memory_init>
   15018:	83 c4 10             	add    $0x10,%esp

    //6.初始化文件系统
    fs_init();
   1501b:	e8 a7 ff ff ff       	call   14fc7 <fs_init>

    //6.初始化定时器的中断处理
    time_init();
   15020:	e8 a9 f4 ff ff       	call   144ce <time_init>
    
    //7.初始化任务管理器
    task_manager_init();
   15025:	e8 a5 c6 ff ff       	call   116cf <task_manager_init>
   
    //初始化完成后将在汇编里重新加载内核代码段与数据段的选择子，并为内核程序分配栈空间
}
   1502a:	90                   	nop
   1502b:	c9                   	leave  
   1502c:	c3                   	ret    

0001502d <move_to_first_task>:

/**
 * @brief 跳转到第一个任务进程
 * 
 */
void move_to_first_task(void) {
   1502d:	55                   	push   %ebp
   1502e:	89 e5                	mov    %esp,%ebp
   15030:	56                   	push   %esi
   15031:	53                   	push   %ebx
   15032:	83 ec 10             	sub    $0x10,%esp
    //1.获取当前任务
    task_t *curr = task_current();
   15035:	e8 46 c9 ff ff       	call   11980 <task_current>
   1503a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT(curr != 0);
   1503d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   15041:	75 19                	jne    1505c <move_to_first_task+0x2f>
   15043:	68 7d 75 01 00       	push   $0x1757d
   15048:	68 cc 75 01 00       	push   $0x175cc
   1504d:	6a 48                	push   $0x48
   1504f:	68 48 75 01 00       	push   $0x17548
   15054:	e8 05 08 00 00       	call   1585e <pannic>
   15059:	83 c4 10             	add    $0x10,%esp

    //2.获取当前任务的tss结构
    tss_t *tss = &(curr->tss);
   1505c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1505f:	83 c0 58             	add    $0x58,%eax
   15062:	89 45 f0             	mov    %eax,-0x10(%ebp)
        "push %[ss]\n\t"
        "push %[esp]\n\t"
        "push %[eflags]\n\t"
        "push %[cs]\n\t"
        "push %[eip]\n\t"
        "iret"::[ss]"r"(tss->ss), [esp]"r"(tss->esp), [eflags]"r"(tss->eflags), [cs]"r"(tss->cs), [eip]"r"(tss->eip)
   15065:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15068:	8b 40 50             	mov    0x50(%eax),%eax
   1506b:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1506e:	8b 52 38             	mov    0x38(%edx),%edx
   15071:	8b 4d f0             	mov    -0x10(%ebp),%ecx
   15074:	8b 49 24             	mov    0x24(%ecx),%ecx
   15077:	8b 5d f0             	mov    -0x10(%ebp),%ebx
   1507a:	8b 5b 4c             	mov    0x4c(%ebx),%ebx
   1507d:	8b 75 f0             	mov    -0x10(%ebp),%esi
   15080:	8b 76 20             	mov    0x20(%esi),%esi
     __asm__ __volatile__(
   15083:	50                   	push   %eax
   15084:	52                   	push   %edx
   15085:	51                   	push   %ecx
   15086:	53                   	push   %ebx
   15087:	56                   	push   %esi
   15088:	cf                   	iret   

        
    );
}
   15089:	90                   	nop
   1508a:	8d 65 f8             	lea    -0x8(%ebp),%esp
   1508d:	5b                   	pop    %ebx
   1508e:	5e                   	pop    %esi
   1508f:	5d                   	pop    %ebp
   15090:	c3                   	ret    

00015091 <init_main>:


void init_main(void) {
   15091:	55                   	push   %ebp
   15092:	89 e5                	mov    %esp,%ebp
   15094:	83 ec 08             	sub    $0x8,%esp
    
    log_printf("Kernel is running......\n");
   15097:	83 ec 0c             	sub    $0xc,%esp
   1509a:	68 87 75 01 00       	push   $0x17587
   1509f:	e8 d0 14 00 00       	call   16574 <log_printf>
   150a4:	83 c4 10             	add    $0x10,%esp
    log_printf("Name: kbOS, Version: %s\n", OS_VERSION);
   150a7:	83 ec 08             	sub    $0x8,%esp
   150aa:	68 a0 75 01 00       	push   $0x175a0
   150af:	68 a6 75 01 00       	push   $0x175a6
   150b4:	e8 bb 14 00 00       	call   16574 <log_printf>
   150b9:	83 c4 10             	add    $0x10,%esp


    //当前任务作为任务管理器启用时的第一个任务
    task_first_init();
   150bc:	e8 eb c6 ff ff       	call   117ac <task_first_init>

    //跳转到第一个任务进程去运行
    move_to_first_task();
   150c1:	e8 67 ff ff ff       	call   1502d <move_to_first_task>
   150c6:	90                   	nop
   150c7:	c9                   	leave  
   150c8:	c3                   	ret    

000150c9 <list_init>:
static inline void list_init(list_t *list) {
   150c9:	55                   	push   %ebp
   150ca:	89 e5                	mov    %esp,%ebp
   150cc:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   150cf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   150d3:	75 19                	jne    150ee <list_init+0x25>
   150d5:	68 e0 75 01 00       	push   $0x175e0
   150da:	68 8c 76 01 00       	push   $0x1768c
   150df:	6a 31                	push   $0x31
   150e1:	68 f4 75 01 00       	push   $0x175f4
   150e6:	e8 73 07 00 00       	call   1585e <pannic>
   150eb:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   150ee:	8b 45 08             	mov    0x8(%ebp),%eax
   150f1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   150f8:	8b 45 08             	mov    0x8(%ebp),%eax
   150fb:	8b 50 04             	mov    0x4(%eax),%edx
   150fe:	8b 45 08             	mov    0x8(%ebp),%eax
   15101:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   15103:	8b 45 08             	mov    0x8(%ebp),%eax
   15106:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   1510d:	90                   	nop
   1510e:	c9                   	leave  
   1510f:	c3                   	ret    

00015110 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   15110:	55                   	push   %ebp
   15111:	89 e5                	mov    %esp,%ebp
   15113:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   15116:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1511a:	75 19                	jne    15135 <list_is_empty+0x25>
   1511c:	68 e0 75 01 00       	push   $0x175e0
   15121:	68 98 76 01 00       	push   $0x17698
   15126:	6a 38                	push   $0x38
   15128:	68 f4 75 01 00       	push   $0x175f4
   1512d:	e8 2c 07 00 00       	call   1585e <pannic>
   15132:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   15135:	8b 45 08             	mov    0x8(%ebp),%eax
   15138:	8b 40 08             	mov    0x8(%eax),%eax
   1513b:	85 c0                	test   %eax,%eax
   1513d:	0f 94 c0             	sete   %al
   15140:	0f b6 c0             	movzbl %al,%eax
}
   15143:	c9                   	leave  
   15144:	c3                   	ret    

00015145 <mutex_init>:
/**
 * @brief  初始化互斥锁
 *
 * @param mutex
 */
void mutex_init(mutex_t *mutex) {
   15145:	55                   	push   %ebp
   15146:	89 e5                	mov    %esp,%ebp
   15148:	83 ec 08             	sub    $0x8,%esp
  ASSERT(mutex != (mutex_t *)0);
   1514b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1514f:	75 19                	jne    1516a <mutex_init+0x25>
   15151:	68 32 76 01 00       	push   $0x17632
   15156:	68 80 76 01 00       	push   $0x17680
   1515b:	6a 15                	push   $0x15
   1515d:	68 48 76 01 00       	push   $0x17648
   15162:	e8 f7 06 00 00       	call   1585e <pannic>
   15167:	83 c4 10             	add    $0x10,%esp

  mutex->locked_count = 0;
   1516a:	8b 45 08             	mov    0x8(%ebp),%eax
   1516d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  mutex->owner = (task_t *)0;
   15174:	8b 45 08             	mov    0x8(%ebp),%eax
   15177:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  list_init(&mutex->wait_list);
   1517d:	8b 45 08             	mov    0x8(%ebp),%eax
   15180:	83 c0 08             	add    $0x8,%eax
   15183:	83 ec 0c             	sub    $0xc,%esp
   15186:	50                   	push   %eax
   15187:	e8 3d ff ff ff       	call   150c9 <list_init>
   1518c:	83 c4 10             	add    $0x10,%esp
}
   1518f:	90                   	nop
   15190:	c9                   	leave  
   15191:	c3                   	ret    

00015192 <mutex_lock>:
/**
 * @brief  加锁
 *
 * @param mutex
 */
void mutex_lock(mutex_t *mutex) {
   15192:	55                   	push   %ebp
   15193:	89 e5                	mov    %esp,%ebp
   15195:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   15198:	e8 be de ff ff       	call   1305b <idt_enter_protection>
   1519d:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 1. 获取当前任务
  task_t *curr = task_current();
   151a0:	e8 db c7 ff ff       	call   11980 <task_current>
   151a5:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 2.判断该锁是否已被加锁
  if (mutex->locked_count == 0) {  
   151a8:	8b 45 08             	mov    0x8(%ebp),%eax
   151ab:	8b 40 04             	mov    0x4(%eax),%eax
   151ae:	85 c0                	test   %eax,%eax
   151b0:	75 19                	jne    151cb <mutex_lock+0x39>
    //3.还未被加锁，则加锁并记录拥有该锁的任务
    mutex->locked_count++;
   151b2:	8b 45 08             	mov    0x8(%ebp),%eax
   151b5:	8b 40 04             	mov    0x4(%eax),%eax
   151b8:	8d 50 01             	lea    0x1(%eax),%edx
   151bb:	8b 45 08             	mov    0x8(%ebp),%eax
   151be:	89 50 04             	mov    %edx,0x4(%eax)
    mutex->owner = curr;
   151c1:	8b 45 08             	mov    0x8(%ebp),%eax
   151c4:	8b 55 f0             	mov    -0x10(%ebp),%edx
   151c7:	89 10                	mov    %edx,(%eax)
   151c9:	eb 47                	jmp    15212 <mutex_lock+0x80>
  } else if (mutex->owner == curr) {
   151cb:	8b 45 08             	mov    0x8(%ebp),%eax
   151ce:	8b 00                	mov    (%eax),%eax
   151d0:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   151d3:	75 11                	jne    151e6 <mutex_lock+0x54>
    //4.已被加锁，但当前加锁请求的任务为当前锁的拥有者，直接再加锁即可
    mutex->locked_count++;
   151d5:	8b 45 08             	mov    0x8(%ebp),%eax
   151d8:	8b 40 04             	mov    0x4(%eax),%eax
   151db:	8d 50 01             	lea    0x1(%eax),%edx
   151de:	8b 45 08             	mov    0x8(%ebp),%eax
   151e1:	89 50 04             	mov    %edx,0x4(%eax)
   151e4:	eb 2c                	jmp    15212 <mutex_lock+0x80>
  } else {  
    //5.已被加锁，且当前任务不是锁的拥有者，则当前任务进入锁的等待队列，被阻塞住
    task_set_unready(curr);
   151e6:	83 ec 0c             	sub    $0xc,%esp
   151e9:	ff 75 f0             	push   -0x10(%ebp)
   151ec:	e8 16 c7 ff ff       	call   11907 <task_set_unready>
   151f1:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&mutex->wait_list, &curr->wait_node);
   151f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   151f7:	8d 50 50             	lea    0x50(%eax),%edx
   151fa:	8b 45 08             	mov    0x8(%ebp),%eax
   151fd:	83 c0 08             	add    $0x8,%eax
   15200:	83 ec 08             	sub    $0x8,%esp
   15203:	52                   	push   %edx
   15204:	50                   	push   %eax
   15205:	e8 7d 10 00 00       	call   16287 <list_insert_last>
   1520a:	83 c4 10             	add    $0x10,%esp
    task_switch();
   1520d:	e8 78 c7 ff ff       	call   1198a <task_switch>
  }

  idt_leave_protection(state);  // TODO:解锁
   15212:	83 ec 0c             	sub    $0xc,%esp
   15215:	ff 75 f4             	push   -0xc(%ebp)
   15218:	e8 56 de ff ff       	call   13073 <idt_leave_protection>
   1521d:	83 c4 10             	add    $0x10,%esp
}
   15220:	90                   	nop
   15221:	c9                   	leave  
   15222:	c3                   	ret    

00015223 <mutex_unlock>:
/**
 * @brief  解锁
 *
 * @param mutex
 */
void mutex_unlock(mutex_t *mutex) {
   15223:	55                   	push   %ebp
   15224:	89 e5                	mov    %esp,%ebp
   15226:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   15229:	e8 2d de ff ff       	call   1305b <idt_enter_protection>
   1522e:	89 45 f4             	mov    %eax,-0xc(%ebp)

  task_t *curr = task_current();
   15231:	e8 4a c7 ff ff       	call   11980 <task_current>
   15236:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 1.判断当前任务是否是锁的拥有者
  if (mutex->owner == curr) {
   15239:	8b 45 08             	mov    0x8(%ebp),%eax
   1523c:	8b 00                	mov    (%eax),%eax
   1523e:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   15241:	0f 85 83 00 00 00    	jne    152ca <mutex_unlock+0xa7>
    //2.当前任务是锁的拥有者,对锁进行一次解锁，并判断是否已完全解锁
    if (--mutex->locked_count == 0) {
   15247:	8b 45 08             	mov    0x8(%ebp),%eax
   1524a:	8b 40 04             	mov    0x4(%eax),%eax
   1524d:	8d 50 ff             	lea    -0x1(%eax),%edx
   15250:	8b 45 08             	mov    0x8(%ebp),%eax
   15253:	89 50 04             	mov    %edx,0x4(%eax)
   15256:	8b 45 08             	mov    0x8(%ebp),%eax
   15259:	8b 40 04             	mov    0x4(%eax),%eax
   1525c:	85 c0                	test   %eax,%eax
   1525e:	75 6a                	jne    152ca <mutex_unlock+0xa7>
      //3.锁已被完全解锁,将锁的所有者置空
      mutex->owner = (task_t*)0;
   15260:	8b 45 08             	mov    0x8(%ebp),%eax
   15263:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      //4.判断当前等待队列是否为空
      if (!list_is_empty(&mutex->wait_list)) { 
   15269:	8b 45 08             	mov    0x8(%ebp),%eax
   1526c:	83 c0 08             	add    $0x8,%eax
   1526f:	83 ec 0c             	sub    $0xc,%esp
   15272:	50                   	push   %eax
   15273:	e8 98 fe ff ff       	call   15110 <list_is_empty>
   15278:	83 c4 10             	add    $0x10,%esp
   1527b:	85 c0                	test   %eax,%eax
   1527d:	75 4b                	jne    152ca <mutex_unlock+0xa7>
        //5.当前等待队列不为空,对锁进行加锁，并交给等待队列的第一个任务
        list_node_t *node = list_remove_first(&mutex->wait_list);
   1527f:	8b 45 08             	mov    0x8(%ebp),%eax
   15282:	83 c0 08             	add    $0x8,%eax
   15285:	83 ec 0c             	sub    $0xc,%esp
   15288:	50                   	push   %eax
   15289:	e8 88 10 00 00       	call   16316 <list_remove_first>
   1528e:	83 c4 10             	add    $0x10,%esp
   15291:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t *task_wait = list_node_parent(node, task_t, wait_node);
   15294:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   15298:	74 08                	je     152a2 <mutex_unlock+0x7f>
   1529a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1529d:	83 e8 50             	sub    $0x50,%eax
   152a0:	eb 05                	jmp    152a7 <mutex_unlock+0x84>
   152a2:	b8 00 00 00 00       	mov    $0x0,%eax
   152a7:	89 45 e8             	mov    %eax,-0x18(%ebp)
        mutex->locked_count = 1;
   152aa:	8b 45 08             	mov    0x8(%ebp),%eax
   152ad:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        mutex->owner = task_wait;
   152b4:	8b 45 08             	mov    0x8(%ebp),%eax
   152b7:	8b 55 e8             	mov    -0x18(%ebp),%edx
   152ba:	89 10                	mov    %edx,(%eax)
        //6.让该任务进入就绪队列
        task_set_ready(task_wait);
   152bc:	83 ec 0c             	sub    $0xc,%esp
   152bf:	ff 75 e8             	push   -0x18(%ebp)
   152c2:	e8 f5 c5 ff ff       	call   118bc <task_set_ready>
   152c7:	83 c4 10             	add    $0x10,%esp
      }
    }
  }

  idt_leave_protection(state);  // TODO:解锁
   152ca:	83 ec 0c             	sub    $0xc,%esp
   152cd:	ff 75 f4             	push   -0xc(%ebp)
   152d0:	e8 9e dd ff ff       	call   13073 <idt_leave_protection>
   152d5:	83 c4 10             	add    $0x10,%esp
}
   152d8:	90                   	nop
   152d9:	c9                   	leave  
   152da:	c3                   	ret    

000152db <list_init>:
static inline void list_init(list_t *list) {
   152db:	55                   	push   %ebp
   152dc:	89 e5                	mov    %esp,%ebp
   152de:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   152e1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   152e5:	75 19                	jne    15300 <list_init+0x25>
   152e7:	68 a8 76 01 00       	push   $0x176a8
   152ec:	68 4c 77 01 00       	push   $0x1774c
   152f1:	6a 31                	push   $0x31
   152f3:	68 bc 76 01 00       	push   $0x176bc
   152f8:	e8 61 05 00 00       	call   1585e <pannic>
   152fd:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   15300:	8b 45 08             	mov    0x8(%ebp),%eax
   15303:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1530a:	8b 45 08             	mov    0x8(%ebp),%eax
   1530d:	8b 50 04             	mov    0x4(%eax),%edx
   15310:	8b 45 08             	mov    0x8(%ebp),%eax
   15313:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   15315:	8b 45 08             	mov    0x8(%ebp),%eax
   15318:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   1531f:	90                   	nop
   15320:	c9                   	leave  
   15321:	c3                   	ret    

00015322 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   15322:	55                   	push   %ebp
   15323:	89 e5                	mov    %esp,%ebp
   15325:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   15328:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1532c:	75 19                	jne    15347 <list_is_empty+0x25>
   1532e:	68 a8 76 01 00       	push   $0x176a8
   15333:	68 58 77 01 00       	push   $0x17758
   15338:	6a 38                	push   $0x38
   1533a:	68 bc 76 01 00       	push   $0x176bc
   1533f:	e8 1a 05 00 00       	call   1585e <pannic>
   15344:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   15347:	8b 45 08             	mov    0x8(%ebp),%eax
   1534a:	8b 40 08             	mov    0x8(%eax),%eax
   1534d:	85 c0                	test   %eax,%eax
   1534f:	0f 94 c0             	sete   %al
   15352:	0f b6 c0             	movzbl %al,%eax
}
   15355:	c9                   	leave  
   15356:	c3                   	ret    

00015357 <sem_init>:
 * @brief  初始化信号量对象
 * 
 * @param sem 信号量对象
 * @param init_count 初始化信号量数量 
 */
void sem_init(sem_t *sem, int init_count) {
   15357:	55                   	push   %ebp
   15358:	89 e5                	mov    %esp,%ebp
   1535a:	83 ec 08             	sub    $0x8,%esp
    ASSERT(sem != (sem_t*)0);
   1535d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15361:	75 19                	jne    1537c <sem_init+0x25>
   15363:	68 fa 76 01 00       	push   $0x176fa
   15368:	68 40 77 01 00       	push   $0x17740
   1536d:	6a 18                	push   $0x18
   1536f:	68 0c 77 01 00       	push   $0x1770c
   15374:	e8 e5 04 00 00       	call   1585e <pannic>
   15379:	83 c4 10             	add    $0x10,%esp
    sem->count = init_count;
   1537c:	8b 45 08             	mov    0x8(%ebp),%eax
   1537f:	8b 55 0c             	mov    0xc(%ebp),%edx
   15382:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   15384:	8b 45 08             	mov    0x8(%ebp),%eax
   15387:	83 c0 04             	add    $0x4,%eax
   1538a:	83 ec 0c             	sub    $0xc,%esp
   1538d:	50                   	push   %eax
   1538e:	e8 48 ff ff ff       	call   152db <list_init>
   15393:	83 c4 10             	add    $0x10,%esp
}
   15396:	90                   	nop
   15397:	c9                   	leave  
   15398:	c3                   	ret    

00015399 <sem_wait>:
 *         信号量相当于入场券，获取信号量之后才有资格访问信号量保护的资源
 * 
 * @param sem 
 * @param init_count 
 */
void sem_wait(sem_t *sem) {
   15399:	55                   	push   %ebp
   1539a:	89 e5                	mov    %esp,%ebp
   1539c:	83 ec 18             	sub    $0x18,%esp
    
    idt_state_t state = idt_enter_protection();//TODO:加锁
   1539f:	e8 b7 dc ff ff       	call   1305b <idt_enter_protection>
   153a4:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //1.判断信号量是否还有剩余
    if(sem->count > 0) {//有剩余，直接使用，任务获取信号量继续执行
   153a7:	8b 45 08             	mov    0x8(%ebp),%eax
   153aa:	8b 00                	mov    (%eax),%eax
   153ac:	85 c0                	test   %eax,%eax
   153ae:	7e 0f                	jle    153bf <sem_wait+0x26>
        --sem->count;   
   153b0:	8b 45 08             	mov    0x8(%ebp),%eax
   153b3:	8b 00                	mov    (%eax),%eax
   153b5:	8d 50 ff             	lea    -0x1(%eax),%edx
   153b8:	8b 45 08             	mov    0x8(%ebp),%eax
   153bb:	89 10                	mov    %edx,(%eax)
   153bd:	eb 34                	jmp    153f3 <sem_wait+0x5a>
    } else {//没有剩余，任务进入延时队列等待信号量
        task_t *curr = task_current();
   153bf:	e8 bc c5 ff ff       	call   11980 <task_current>
   153c4:	89 45 f0             	mov    %eax,-0x10(%ebp)
        //2.将当前任务从就绪队列中取下
        task_set_unready(curr); 
   153c7:	83 ec 0c             	sub    $0xc,%esp
   153ca:	ff 75 f0             	push   -0x10(%ebp)
   153cd:	e8 35 c5 ff ff       	call   11907 <task_set_unready>
   153d2:	83 c4 10             	add    $0x10,%esp
        //3.将当前任务加入到信号量等待队列
        list_insert_last(&sem->wait_list, &curr->wait_node); 
   153d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   153d8:	8d 50 50             	lea    0x50(%eax),%edx
   153db:	8b 45 08             	mov    0x8(%ebp),%eax
   153de:	83 c0 04             	add    $0x4,%eax
   153e1:	83 ec 08             	sub    $0x8,%esp
   153e4:	52                   	push   %edx
   153e5:	50                   	push   %eax
   153e6:	e8 9c 0e 00 00       	call   16287 <list_insert_last>
   153eb:	83 c4 10             	add    $0x10,%esp
        //4.切换任务
        task_switch();
   153ee:	e8 97 c5 ff ff       	call   1198a <task_switch>
    }

    idt_leave_protection(state);//TODO:解锁
   153f3:	83 ec 0c             	sub    $0xc,%esp
   153f6:	ff 75 f4             	push   -0xc(%ebp)
   153f9:	e8 75 dc ff ff       	call   13073 <idt_leave_protection>
   153fe:	83 c4 10             	add    $0x10,%esp
}
   15401:	90                   	nop
   15402:	c9                   	leave  
   15403:	c3                   	ret    

00015404 <sem_notify>:
 *        等待队列中若有任务则直接获取该信号量，继续执行即访问资源
 *         若没有任务，则信号量对象记录的信号量数量加1，预留给下一次获取
 * 
 * @param sem 
 */
void sem_notify(sem_t *sem) {
   15404:	55                   	push   %ebp
   15405:	89 e5                	mov    %esp,%ebp
   15407:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   1540a:	e8 4c dc ff ff       	call   1305b <idt_enter_protection>
   1540f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if (!list_is_empty(&sem->wait_list)) {
   15412:	8b 45 08             	mov    0x8(%ebp),%eax
   15415:	83 c0 04             	add    $0x4,%eax
   15418:	83 ec 0c             	sub    $0xc,%esp
   1541b:	50                   	push   %eax
   1541c:	e8 01 ff ff ff       	call   15322 <list_is_empty>
   15421:	83 c4 10             	add    $0x10,%esp
   15424:	85 c0                	test   %eax,%eax
   15426:	75 40                	jne    15468 <sem_notify+0x64>
        list_node_t *node = list_remove_first(&sem->wait_list);
   15428:	8b 45 08             	mov    0x8(%ebp),%eax
   1542b:	83 c0 04             	add    $0x4,%eax
   1542e:	83 ec 0c             	sub    $0xc,%esp
   15431:	50                   	push   %eax
   15432:	e8 df 0e 00 00       	call   16316 <list_remove_first>
   15437:	83 c4 10             	add    $0x10,%esp
   1543a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t *task = list_node_parent(node, task_t, wait_node);
   1543d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   15441:	74 08                	je     1544b <sem_notify+0x47>
   15443:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15446:	83 e8 50             	sub    $0x50,%eax
   15449:	eb 05                	jmp    15450 <sem_notify+0x4c>
   1544b:	b8 00 00 00 00       	mov    $0x0,%eax
   15450:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   15453:	83 ec 0c             	sub    $0xc,%esp
   15456:	ff 75 ec             	push   -0x14(%ebp)
   15459:	e8 5e c4 ff ff       	call   118bc <task_set_ready>
   1545e:	83 c4 10             	add    $0x10,%esp
        task_switch();
   15461:	e8 24 c5 ff ff       	call   1198a <task_switch>
   15466:	eb 0d                	jmp    15475 <sem_notify+0x71>
    } else {
        sem->count++;
   15468:	8b 45 08             	mov    0x8(%ebp),%eax
   1546b:	8b 00                	mov    (%eax),%eax
   1546d:	8d 50 01             	lea    0x1(%eax),%edx
   15470:	8b 45 08             	mov    0x8(%ebp),%eax
   15473:	89 10                	mov    %edx,(%eax)
    }

    idt_leave_protection(state);//TODO:解锁
   15475:	83 ec 0c             	sub    $0xc,%esp
   15478:	ff 75 f4             	push   -0xc(%ebp)
   1547b:	e8 f3 db ff ff       	call   13073 <idt_leave_protection>
   15480:	83 c4 10             	add    $0x10,%esp

}
   15483:	90                   	nop
   15484:	c9                   	leave  
   15485:	c3                   	ret    

00015486 <sem_count>:

int sem_count(sem_t *sem) {
   15486:	55                   	push   %ebp
   15487:	89 e5                	mov    %esp,%ebp
   15489:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   1548c:	e8 ca db ff ff       	call   1305b <idt_enter_protection>
   15491:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   15494:	8b 45 08             	mov    0x8(%ebp),%eax
   15497:	8b 00                	mov    (%eax),%eax
   15499:	89 45 f0             	mov    %eax,-0x10(%ebp)
    idt_leave_protection(state);//TODO:解锁
   1549c:	83 ec 0c             	sub    $0xc,%esp
   1549f:	ff 75 f4             	push   -0xc(%ebp)
   154a2:	e8 cc db ff ff       	call   13073 <idt_leave_protection>
   154a7:	83 c4 10             	add    $0x10,%esp

    return count;
   154aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
   154ad:	c9                   	leave  
   154ae:	c3                   	ret    

000154af <list_init>:
static inline void list_init(list_t *list) {
   154af:	55                   	push   %ebp
   154b0:	89 e5                	mov    %esp,%ebp
   154b2:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   154b5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   154b9:	75 19                	jne    154d4 <list_init+0x25>
   154bb:	68 68 77 01 00       	push   $0x17768
   154c0:	68 6c 78 01 00       	push   $0x1786c
   154c5:	6a 31                	push   $0x31
   154c7:	68 7c 77 01 00       	push   $0x1777c
   154cc:	e8 8d 03 00 00       	call   1585e <pannic>
   154d1:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   154d4:	8b 45 08             	mov    0x8(%ebp),%eax
   154d7:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   154de:	8b 45 08             	mov    0x8(%ebp),%eax
   154e1:	8b 50 04             	mov    0x4(%eax),%edx
   154e4:	8b 45 08             	mov    0x8(%ebp),%eax
   154e7:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   154e9:	8b 45 08             	mov    0x8(%ebp),%eax
   154ec:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   154f3:	90                   	nop
   154f4:	c9                   	leave  
   154f5:	c3                   	ret    

000154f6 <list_get_size>:
static inline int list_get_size(list_t *list) {
   154f6:	55                   	push   %ebp
   154f7:	89 e5                	mov    %esp,%ebp
   154f9:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   154fc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15500:	75 19                	jne    1551b <list_get_size+0x25>
   15502:	68 68 77 01 00       	push   $0x17768
   15507:	68 78 78 01 00       	push   $0x17878
   1550c:	6a 3e                	push   $0x3e
   1550e:	68 7c 77 01 00       	push   $0x1777c
   15513:	e8 46 03 00 00       	call   1585e <pannic>
   15518:	83 c4 10             	add    $0x10,%esp
    return list->size;
   1551b:	8b 45 08             	mov    0x8(%ebp),%eax
   1551e:	8b 40 08             	mov    0x8(%eax),%eax
}
   15521:	c9                   	leave  
   15522:	c3                   	ret    

00015523 <list_get_first>:
static inline list_node_t *list_get_first(list_t *list) {
   15523:	55                   	push   %ebp
   15524:	89 e5                	mov    %esp,%ebp
   15526:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   15529:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1552d:	75 19                	jne    15548 <list_get_first+0x25>
   1552f:	68 68 77 01 00       	push   $0x17768
   15534:	68 98 78 01 00       	push   $0x17898
   15539:	6a 44                	push   $0x44
   1553b:	68 7c 77 01 00       	push   $0x1777c
   15540:	e8 19 03 00 00       	call   1585e <pannic>
   15545:	83 c4 10             	add    $0x10,%esp
    return list->first;
   15548:	8b 45 08             	mov    0x8(%ebp),%eax
   1554b:	8b 00                	mov    (%eax),%eax
}
   1554d:	c9                   	leave  
   1554e:	c3                   	ret    

0001554f <list_get_last>:

static inline list_node_t *list_get_last(list_t *list) {
   1554f:	55                   	push   %ebp
   15550:	89 e5                	mov    %esp,%ebp
   15552:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   15555:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15559:	75 19                	jne    15574 <list_get_last+0x25>
   1555b:	68 68 77 01 00       	push   $0x17768
   15560:	68 88 78 01 00       	push   $0x17888
   15565:	6a 4a                	push   $0x4a
   15567:	68 7c 77 01 00       	push   $0x1777c
   1556c:	e8 ed 02 00 00       	call   1585e <pannic>
   15571:	83 c4 10             	add    $0x10,%esp

    return list->last;
   15574:	8b 45 08             	mov    0x8(%ebp),%eax
   15577:	8b 40 04             	mov    0x4(%eax),%eax
}
   1557a:	c9                   	leave  
   1557b:	c3                   	ret    

0001557c <list_test>:

#include "tools/list.h"
#include "tools/log.h"
#include "common/types.h"

void list_test(void) {
   1557c:	55                   	push   %ebp
   1557d:	89 e5                	mov    %esp,%ebp
   1557f:	56                   	push   %esi
   15580:	53                   	push   %ebx
   15581:	83 ec 70             	sub    $0x70,%esp
    list_t list;
    list_node_t nodes[5];

    list_init(&list);
   15584:	83 ec 0c             	sub    $0xc,%esp
   15587:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1558a:	50                   	push   %eax
   1558b:	e8 1f ff ff ff       	call   154af <list_init>
   15590:	83 c4 10             	add    $0x10,%esp
    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   15593:	83 ec 0c             	sub    $0xc,%esp
   15596:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   15599:	50                   	push   %eax
   1559a:	e8 57 ff ff ff       	call   154f6 <list_get_size>
   1559f:	83 c4 10             	add    $0x10,%esp
   155a2:	89 c6                	mov    %eax,%esi
   155a4:	83 ec 0c             	sub    $0xc,%esp
   155a7:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   155aa:	50                   	push   %eax
   155ab:	e8 9f ff ff ff       	call   1554f <list_get_last>
   155b0:	83 c4 10             	add    $0x10,%esp
   155b3:	89 c3                	mov    %eax,%ebx
   155b5:	83 ec 0c             	sub    $0xc,%esp
   155b8:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   155bb:	50                   	push   %eax
   155bc:	e8 62 ff ff ff       	call   15523 <list_get_first>
   155c1:	83 c4 10             	add    $0x10,%esp
   155c4:	56                   	push   %esi
   155c5:	53                   	push   %ebx
   155c6:	50                   	push   %eax
   155c7:	68 bc 77 01 00       	push   $0x177bc
   155cc:	e8 a3 0f 00 00       	call   16574 <log_printf>
   155d1:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_insert_first
    for (int i = 0; i < 5; ++i) {
   155d4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   155db:	eb 3f                	jmp    1561c <list_test+0xa0>
        list_node_t *node = nodes + i;
   155dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   155e0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   155e7:	8d 45 9c             	lea    -0x64(%ebp),%eax
   155ea:	01 d0                	add    %edx,%eax
   155ec:	89 45 d0             	mov    %eax,-0x30(%ebp)

        log_printf("insert first to list: %d, 0x%x", i, (uint32_t)node);
   155ef:	8b 45 d0             	mov    -0x30(%ebp),%eax
   155f2:	83 ec 04             	sub    $0x4,%esp
   155f5:	50                   	push   %eax
   155f6:	ff 75 f4             	push   -0xc(%ebp)
   155f9:	68 e4 77 01 00       	push   $0x177e4
   155fe:	e8 71 0f 00 00       	call   16574 <log_printf>
   15603:	83 c4 10             	add    $0x10,%esp
        list_insert_first(&list, node);
   15606:	83 ec 08             	sub    $0x8,%esp
   15609:	ff 75 d0             	push   -0x30(%ebp)
   1560c:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1560f:	50                   	push   %eax
   15610:	e8 e7 0b 00 00       	call   161fc <list_insert_first>
   15615:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   15618:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1561c:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   15620:	7e bb                	jle    155dd <list_test+0x61>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   15622:	83 ec 0c             	sub    $0xc,%esp
   15625:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   15628:	50                   	push   %eax
   15629:	e8 c8 fe ff ff       	call   154f6 <list_get_size>
   1562e:	83 c4 10             	add    $0x10,%esp
   15631:	89 c6                	mov    %eax,%esi
   15633:	83 ec 0c             	sub    $0xc,%esp
   15636:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   15639:	50                   	push   %eax
   1563a:	e8 10 ff ff ff       	call   1554f <list_get_last>
   1563f:	83 c4 10             	add    $0x10,%esp
   15642:	89 c3                	mov    %eax,%ebx
   15644:	83 ec 0c             	sub    $0xc,%esp
   15647:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1564a:	50                   	push   %eax
   1564b:	e8 d3 fe ff ff       	call   15523 <list_get_first>
   15650:	83 c4 10             	add    $0x10,%esp
   15653:	56                   	push   %esi
   15654:	53                   	push   %ebx
   15655:	50                   	push   %eax
   15656:	68 bc 77 01 00       	push   $0x177bc
   1565b:	e8 14 0f 00 00       	call   16574 <log_printf>
   15660:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

   
    //测试list_remove_first
    for (int i = 0; i < 5; ++i) {
   15663:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   1566a:	eb 2d                	jmp    15699 <list_test+0x11d>
        list_node_t *node = list_remove_first(&list);
   1566c:	83 ec 0c             	sub    $0xc,%esp
   1566f:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   15672:	50                   	push   %eax
   15673:	e8 9e 0c 00 00       	call   16316 <list_remove_first>
   15678:	83 c4 10             	add    $0x10,%esp
   1567b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        log_printf("remove first: %d, 0x%x", i, (uint32_t)node);
   1567e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   15681:	83 ec 04             	sub    $0x4,%esp
   15684:	50                   	push   %eax
   15685:	ff 75 f0             	push   -0x10(%ebp)
   15688:	68 03 78 01 00       	push   $0x17803
   1568d:	e8 e2 0e 00 00       	call   16574 <log_printf>
   15692:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   15695:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   15699:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   1569d:	7e cd                	jle    1566c <list_test+0xf0>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   1569f:	83 ec 0c             	sub    $0xc,%esp
   156a2:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   156a5:	50                   	push   %eax
   156a6:	e8 4b fe ff ff       	call   154f6 <list_get_size>
   156ab:	83 c4 10             	add    $0x10,%esp
   156ae:	89 c6                	mov    %eax,%esi
   156b0:	83 ec 0c             	sub    $0xc,%esp
   156b3:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   156b6:	50                   	push   %eax
   156b7:	e8 93 fe ff ff       	call   1554f <list_get_last>
   156bc:	83 c4 10             	add    $0x10,%esp
   156bf:	89 c3                	mov    %eax,%ebx
   156c1:	83 ec 0c             	sub    $0xc,%esp
   156c4:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   156c7:	50                   	push   %eax
   156c8:	e8 56 fe ff ff       	call   15523 <list_get_first>
   156cd:	83 c4 10             	add    $0x10,%esp
   156d0:	56                   	push   %esi
   156d1:	53                   	push   %ebx
   156d2:	50                   	push   %eax
   156d3:	68 bc 77 01 00       	push   $0x177bc
   156d8:	e8 97 0e 00 00       	call   16574 <log_printf>
   156dd:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    

    //测试list_insert_last
    for (int i = 0; i < 5; ++i) {
   156e0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   156e7:	eb 3f                	jmp    15728 <list_test+0x1ac>
        list_node_t *node = nodes + i;
   156e9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   156ec:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   156f3:	8d 45 9c             	lea    -0x64(%ebp),%eax
   156f6:	01 d0                	add    %edx,%eax
   156f8:	89 45 d8             	mov    %eax,-0x28(%ebp)

        log_printf("insert last to list: %d, 0x%x", i, (uint32_t)node);
   156fb:	8b 45 d8             	mov    -0x28(%ebp),%eax
   156fe:	83 ec 04             	sub    $0x4,%esp
   15701:	50                   	push   %eax
   15702:	ff 75 ec             	push   -0x14(%ebp)
   15705:	68 1a 78 01 00       	push   $0x1781a
   1570a:	e8 65 0e 00 00       	call   16574 <log_printf>
   1570f:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&list, node);
   15712:	83 ec 08             	sub    $0x8,%esp
   15715:	ff 75 d8             	push   -0x28(%ebp)
   15718:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1571b:	50                   	push   %eax
   1571c:	e8 66 0b 00 00       	call   16287 <list_insert_last>
   15721:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   15724:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   15728:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   1572c:	7e bb                	jle    156e9 <list_test+0x16d>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   1572e:	83 ec 0c             	sub    $0xc,%esp
   15731:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   15734:	50                   	push   %eax
   15735:	e8 bc fd ff ff       	call   154f6 <list_get_size>
   1573a:	83 c4 10             	add    $0x10,%esp
   1573d:	89 c6                	mov    %eax,%esi
   1573f:	83 ec 0c             	sub    $0xc,%esp
   15742:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   15745:	50                   	push   %eax
   15746:	e8 04 fe ff ff       	call   1554f <list_get_last>
   1574b:	83 c4 10             	add    $0x10,%esp
   1574e:	89 c3                	mov    %eax,%ebx
   15750:	83 ec 0c             	sub    $0xc,%esp
   15753:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   15756:	50                   	push   %eax
   15757:	e8 c7 fd ff ff       	call   15523 <list_get_first>
   1575c:	83 c4 10             	add    $0x10,%esp
   1575f:	56                   	push   %esi
   15760:	53                   	push   %ebx
   15761:	50                   	push   %eax
   15762:	68 bc 77 01 00       	push   $0x177bc
   15767:	e8 08 0e 00 00       	call   16574 <log_printf>
   1576c:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_remove_last
    for (int i = 0; i < 5; ++i) {
   1576f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   15776:	eb 2d                	jmp    157a5 <list_test+0x229>
        list_node_t *node = list_remove_last(&list);
   15778:	83 ec 0c             	sub    $0xc,%esp
   1577b:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1577e:	50                   	push   %eax
   1577f:	e8 43 0c 00 00       	call   163c7 <list_remove_last>
   15784:	83 c4 10             	add    $0x10,%esp
   15787:	89 45 dc             	mov    %eax,-0x24(%ebp)
        log_printf("remove last: %d, 0x%x", i, (uint32_t)node);
   1578a:	8b 45 dc             	mov    -0x24(%ebp),%eax
   1578d:	83 ec 04             	sub    $0x4,%esp
   15790:	50                   	push   %eax
   15791:	ff 75 e8             	push   -0x18(%ebp)
   15794:	68 38 78 01 00       	push   $0x17838
   15799:	e8 d6 0d 00 00       	call   16574 <log_printf>
   1579e:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   157a1:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   157a5:	83 7d e8 04          	cmpl   $0x4,-0x18(%ebp)
   157a9:	7e cd                	jle    15778 <list_test+0x1fc>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   157ab:	83 ec 0c             	sub    $0xc,%esp
   157ae:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   157b1:	50                   	push   %eax
   157b2:	e8 3f fd ff ff       	call   154f6 <list_get_size>
   157b7:	83 c4 10             	add    $0x10,%esp
   157ba:	89 c6                	mov    %eax,%esi
   157bc:	83 ec 0c             	sub    $0xc,%esp
   157bf:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   157c2:	50                   	push   %eax
   157c3:	e8 87 fd ff ff       	call   1554f <list_get_last>
   157c8:	83 c4 10             	add    $0x10,%esp
   157cb:	89 c3                	mov    %eax,%ebx
   157cd:	83 ec 0c             	sub    $0xc,%esp
   157d0:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   157d3:	50                   	push   %eax
   157d4:	e8 4a fd ff ff       	call   15523 <list_get_first>
   157d9:	83 c4 10             	add    $0x10,%esp
   157dc:	56                   	push   %esi
   157dd:	53                   	push   %ebx
   157de:	50                   	push   %eax
   157df:	68 bc 77 01 00       	push   $0x177bc
   157e4:	e8 8b 0d 00 00       	call   16574 <log_printf>
   157e9:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    
    struct type_t {
        int i;
        list_node_t node;
    }v = {0x123456};
   157ec:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
   157f3:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
   157fa:	c7 45 98 00 00 00 00 	movl   $0x0,-0x68(%ebp)
   15801:	c7 45 90 56 34 12 00 	movl   $0x123456,-0x70(%ebp)

    list_node_t *v_node = &v.node;
   15808:	8d 45 90             	lea    -0x70(%ebp),%eax
   1580b:	83 c0 04             	add    $0x4,%eax
   1580e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    struct type_t *p = list_node_parent(v_node, struct type_t, node);  
   15811:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   15815:	74 08                	je     1581f <list_test+0x2a3>
   15817:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1581a:	83 e8 04             	sub    $0x4,%eax
   1581d:	eb 05                	jmp    15824 <list_test+0x2a8>
   1581f:	b8 00 00 00 00       	mov    $0x0,%eax
   15824:	89 45 e0             	mov    %eax,-0x20(%ebp)

    log_printf("v addr = 0x%x", (uint32_t)&v);
   15827:	8d 45 90             	lea    -0x70(%ebp),%eax
   1582a:	83 ec 08             	sub    $0x8,%esp
   1582d:	50                   	push   %eax
   1582e:	68 4e 78 01 00       	push   $0x1784e
   15833:	e8 3c 0d 00 00       	call   16574 <log_printf>
   15838:	83 c4 10             	add    $0x10,%esp
    log_printf("p addr = 0x%x", (uint32_t)p);  
   1583b:	8b 45 e0             	mov    -0x20(%ebp),%eax
   1583e:	83 ec 08             	sub    $0x8,%esp
   15841:	50                   	push   %eax
   15842:	68 5c 78 01 00       	push   $0x1785c
   15847:	e8 28 0d 00 00       	call   16574 <log_printf>
   1584c:	83 c4 10             	add    $0x10,%esp

 }
   1584f:	90                   	nop
   15850:	8d 65 f8             	lea    -0x8(%ebp),%esp
   15853:	5b                   	pop    %ebx
   15854:	5e                   	pop    %esi
   15855:	5d                   	pop    %ebp
   15856:	c3                   	ret    

00015857 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   15857:	55                   	push   %ebp
   15858:	89 e5                	mov    %esp,%ebp
   1585a:	f4                   	hlt    
   1585b:	90                   	nop
   1585c:	5d                   	pop    %ebp
   1585d:	c3                   	ret    

0001585e <pannic>:
 * @param file 异常所在文件绝对路径
 * @param line 异常所在行号
 * @param func 异常所在函数名 
 * @param reason 异常的原因
 */
void pannic(const char *file, int line, const char *func, const char *reason) {
   1585e:	55                   	push   %ebp
   1585f:	89 e5                	mov    %esp,%ebp
   15861:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert faild! %s\n", reason);
   15864:	83 ec 08             	sub    $0x8,%esp
   15867:	ff 75 14             	push   0x14(%ebp)
   1586a:	68 a7 78 01 00       	push   $0x178a7
   1586f:	e8 00 0d 00 00       	call   16574 <log_printf>
   15874:	83 c4 10             	add    $0x10,%esp
    log_printf("file:\t%s\nline:\t%d\nfunc:\t%s\n", file, line, func);
   15877:	ff 75 10             	push   0x10(%ebp)
   1587a:	ff 75 0c             	push   0xc(%ebp)
   1587d:	ff 75 08             	push   0x8(%ebp)
   15880:	68 b9 78 01 00       	push   $0x178b9
   15885:	e8 ea 0c 00 00       	call   16574 <log_printf>
   1588a:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   1588d:	e8 c5 ff ff ff       	call   15857 <hlt>
   15892:	eb f9                	jmp    1588d <pannic+0x2f>

00015894 <bitmap_byte_count>:
 * @brief  向上取整获取位图数组中有多少字节
 * 
 * @param bit_count  位图数组拥有的bit位数
 * @return int 向上取整得到的字节数
 */
int bitmap_byte_count(int bit_count) {
   15894:	55                   	push   %ebp
   15895:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8;
   15897:	8b 45 08             	mov    0x8(%ebp),%eax
   1589a:	83 c0 07             	add    $0x7,%eax
   1589d:	8d 50 07             	lea    0x7(%eax),%edx
   158a0:	85 c0                	test   %eax,%eax
   158a2:	0f 48 c2             	cmovs  %edx,%eax
   158a5:	c1 f8 03             	sar    $0x3,%eax
}
   158a8:	5d                   	pop    %ebp
   158a9:	c3                   	ret    

000158aa <bitmap_init>:
 * @param bitmap 需要初始化的位图
 * @param bits 位图所包含的位图数组的起始地址
 * @param count 页的数量
 * @param init_bit 将位图数组的每一位设置为init_bit
 */
void bitmap_init(bitmap_t *bitmap, uint8_t *bits, int count, int init_bit) {
   158aa:	55                   	push   %ebp
   158ab:	89 e5                	mov    %esp,%ebp
   158ad:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   158b0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   158b4:	75 19                	jne    158cf <bitmap_init+0x25>
   158b6:	68 d8 78 01 00       	push   $0x178d8
   158bb:	68 6c 79 01 00       	push   $0x1796c
   158c0:	6a 24                	push   $0x24
   158c2:	68 f0 78 01 00       	push   $0x178f0
   158c7:	e8 92 ff ff ff       	call   1585e <pannic>
   158cc:	83 c4 10             	add    $0x10,%esp
    ASSERT(bits != (uint8_t*)0);
   158cf:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   158d3:	75 19                	jne    158ee <bitmap_init+0x44>
   158d5:	68 28 79 01 00       	push   $0x17928
   158da:	68 6c 79 01 00       	push   $0x1796c
   158df:	6a 25                	push   $0x25
   158e1:	68 f0 78 01 00       	push   $0x178f0
   158e6:	e8 73 ff ff ff       	call   1585e <pannic>
   158eb:	83 c4 10             	add    $0x10,%esp

    bitmap->bit_count = count;
   158ee:	8b 45 08             	mov    0x8(%ebp),%eax
   158f1:	8b 55 10             	mov    0x10(%ebp),%edx
   158f4:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   158f6:	8b 45 08             	mov    0x8(%ebp),%eax
   158f9:	8b 55 0c             	mov    0xc(%ebp),%edx
   158fc:	89 50 04             	mov    %edx,0x4(%eax)

    //计算该位图需要多少字节
    int bytes = bitmap_byte_count(bitmap->bit_count);
   158ff:	8b 45 08             	mov    0x8(%ebp),%eax
   15902:	8b 00                	mov    (%eax),%eax
   15904:	83 ec 0c             	sub    $0xc,%esp
   15907:	50                   	push   %eax
   15908:	e8 87 ff ff ff       	call   15894 <bitmap_byte_count>
   1590d:	83 c4 10             	add    $0x10,%esp
   15910:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    kernel_memset(bitmap->bits, init_bit ? 0xff : 0, bytes);
   15913:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   15917:	74 07                	je     15920 <bitmap_init+0x76>
   15919:	ba ff 00 00 00       	mov    $0xff,%edx
   1591e:	eb 05                	jmp    15925 <bitmap_init+0x7b>
   15920:	ba 00 00 00 00       	mov    $0x0,%edx
   15925:	8b 45 08             	mov    0x8(%ebp),%eax
   15928:	8b 40 04             	mov    0x4(%eax),%eax
   1592b:	83 ec 04             	sub    $0x4,%esp
   1592e:	ff 75 f4             	push   -0xc(%ebp)
   15931:	52                   	push   %edx
   15932:	50                   	push   %eax
   15933:	e8 3f 04 00 00       	call   15d77 <kernel_memset>
   15938:	83 c4 10             	add    $0x10,%esp

}
   1593b:	90                   	nop
   1593c:	c9                   	leave  
   1593d:	c3                   	ret    

0001593e <bitmap_get_bit>:
 * 
 * @param bitmap 
 * @param index 
 * @return uint8_t 
 */
uint8_t bitmap_get_bit(bitmap_t *bitmap, int index) {
   1593e:	55                   	push   %ebp
   1593f:	89 e5                	mov    %esp,%ebp
   15941:	53                   	push   %ebx
   15942:	83 ec 04             	sub    $0x4,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   15945:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15949:	75 19                	jne    15964 <bitmap_get_bit+0x26>
   1594b:	68 d8 78 01 00       	push   $0x178d8
   15950:	68 78 79 01 00       	push   $0x17978
   15955:	6a 39                	push   $0x39
   15957:	68 f0 78 01 00       	push   $0x178f0
   1595c:	e8 fd fe ff ff       	call   1585e <pannic>
   15961:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0);
   15964:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   15968:	79 19                	jns    15983 <bitmap_get_bit+0x45>
   1596a:	68 3c 79 01 00       	push   $0x1793c
   1596f:	68 78 79 01 00       	push   $0x17978
   15974:	6a 3a                	push   $0x3a
   15976:	68 f0 78 01 00       	push   $0x178f0
   1597b:	e8 de fe ff ff       	call   1585e <pannic>
   15980:	83 c4 10             	add    $0x10,%esp

    return (bitmap->bits[index / 8] & (1 << (index % 8)));
   15983:	8b 45 08             	mov    0x8(%ebp),%eax
   15986:	8b 48 04             	mov    0x4(%eax),%ecx
   15989:	8b 45 0c             	mov    0xc(%ebp),%eax
   1598c:	8d 50 07             	lea    0x7(%eax),%edx
   1598f:	85 c0                	test   %eax,%eax
   15991:	0f 48 c2             	cmovs  %edx,%eax
   15994:	c1 f8 03             	sar    $0x3,%eax
   15997:	01 c8                	add    %ecx,%eax
   15999:	0f b6 00             	movzbl (%eax),%eax
   1599c:	89 c3                	mov    %eax,%ebx
   1599e:	8b 45 0c             	mov    0xc(%ebp),%eax
   159a1:	83 e0 07             	and    $0x7,%eax
   159a4:	ba 01 00 00 00       	mov    $0x1,%edx
   159a9:	89 c1                	mov    %eax,%ecx
   159ab:	d3 e2                	shl    %cl,%edx
   159ad:	89 d0                	mov    %edx,%eax
   159af:	21 d8                	and    %ebx,%eax
}
   159b1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   159b4:	c9                   	leave  
   159b5:	c3                   	ret    

000159b6 <bitmap_set_bit>:
 * @param bitmap 
 * @param index 
 * @param count 
 * @param bit 
 */
void bitmap_set_bit(bitmap_t *bitmap, int index, int count, int bit) {
   159b6:	55                   	push   %ebp
   159b7:	89 e5                	mov    %esp,%ebp
   159b9:	56                   	push   %esi
   159ba:	53                   	push   %ebx
   159bb:	83 ec 10             	sub    $0x10,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   159be:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   159c2:	75 19                	jne    159dd <bitmap_set_bit+0x27>
   159c4:	68 d8 78 01 00       	push   $0x178d8
   159c9:	68 88 79 01 00       	push   $0x17988
   159ce:	6a 48                	push   $0x48
   159d0:	68 f0 78 01 00       	push   $0x178f0
   159d5:	e8 84 fe ff ff       	call   1585e <pannic>
   159da:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0 && count >= 0);
   159dd:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   159e1:	78 06                	js     159e9 <bitmap_set_bit+0x33>
   159e3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   159e7:	79 19                	jns    15a02 <bitmap_set_bit+0x4c>
   159e9:	68 47 79 01 00       	push   $0x17947
   159ee:	68 88 79 01 00       	push   $0x17988
   159f3:	6a 49                	push   $0x49
   159f5:	68 f0 78 01 00       	push   $0x178f0
   159fa:	e8 5f fe ff ff       	call   1585e <pannic>
   159ff:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   15a02:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   15a09:	e9 92 00 00 00       	jmp    15aa0 <bitmap_set_bit+0xea>
        if (bit) {
   15a0e:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   15a12:	74 42                	je     15a56 <bitmap_set_bit+0xa0>
            bitmap->bits[index / 8] |= (1 << (index % 8));
   15a14:	8b 45 08             	mov    0x8(%ebp),%eax
   15a17:	8b 48 04             	mov    0x4(%eax),%ecx
   15a1a:	8b 45 0c             	mov    0xc(%ebp),%eax
   15a1d:	8d 50 07             	lea    0x7(%eax),%edx
   15a20:	85 c0                	test   %eax,%eax
   15a22:	0f 48 c2             	cmovs  %edx,%eax
   15a25:	c1 f8 03             	sar    $0x3,%eax
   15a28:	89 c2                	mov    %eax,%edx
   15a2a:	89 d0                	mov    %edx,%eax
   15a2c:	01 c8                	add    %ecx,%eax
   15a2e:	0f b6 00             	movzbl (%eax),%eax
   15a31:	89 c6                	mov    %eax,%esi
   15a33:	8b 45 0c             	mov    0xc(%ebp),%eax
   15a36:	83 e0 07             	and    $0x7,%eax
   15a39:	bb 01 00 00 00       	mov    $0x1,%ebx
   15a3e:	89 c1                	mov    %eax,%ecx
   15a40:	d3 e3                	shl    %cl,%ebx
   15a42:	89 d8                	mov    %ebx,%eax
   15a44:	89 f1                	mov    %esi,%ecx
   15a46:	09 c1                	or     %eax,%ecx
   15a48:	8b 45 08             	mov    0x8(%ebp),%eax
   15a4b:	8b 40 04             	mov    0x4(%eax),%eax
   15a4e:	01 d0                	add    %edx,%eax
   15a50:	89 ca                	mov    %ecx,%edx
   15a52:	88 10                	mov    %dl,(%eax)
   15a54:	eb 42                	jmp    15a98 <bitmap_set_bit+0xe2>
        } else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   15a56:	8b 45 08             	mov    0x8(%ebp),%eax
   15a59:	8b 48 04             	mov    0x4(%eax),%ecx
   15a5c:	8b 45 0c             	mov    0xc(%ebp),%eax
   15a5f:	8d 50 07             	lea    0x7(%eax),%edx
   15a62:	85 c0                	test   %eax,%eax
   15a64:	0f 48 c2             	cmovs  %edx,%eax
   15a67:	c1 f8 03             	sar    $0x3,%eax
   15a6a:	89 c2                	mov    %eax,%edx
   15a6c:	89 d0                	mov    %edx,%eax
   15a6e:	01 c8                	add    %ecx,%eax
   15a70:	0f b6 00             	movzbl (%eax),%eax
   15a73:	89 c6                	mov    %eax,%esi
   15a75:	8b 45 0c             	mov    0xc(%ebp),%eax
   15a78:	83 e0 07             	and    $0x7,%eax
   15a7b:	bb 01 00 00 00       	mov    $0x1,%ebx
   15a80:	89 c1                	mov    %eax,%ecx
   15a82:	d3 e3                	shl    %cl,%ebx
   15a84:	89 d8                	mov    %ebx,%eax
   15a86:	f7 d0                	not    %eax
   15a88:	89 f1                	mov    %esi,%ecx
   15a8a:	21 c1                	and    %eax,%ecx
   15a8c:	8b 45 08             	mov    0x8(%ebp),%eax
   15a8f:	8b 40 04             	mov    0x4(%eax),%eax
   15a92:	01 d0                	add    %edx,%eax
   15a94:	89 ca                	mov    %ecx,%edx
   15a96:	88 10                	mov    %dl,(%eax)
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   15a98:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   15a9c:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   15aa0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15aa3:	3b 45 10             	cmp    0x10(%ebp),%eax
   15aa6:	7d 0e                	jge    15ab6 <bitmap_set_bit+0x100>
   15aa8:	8b 45 08             	mov    0x8(%ebp),%eax
   15aab:	8b 00                	mov    (%eax),%eax
   15aad:	39 45 0c             	cmp    %eax,0xc(%ebp)
   15ab0:	0f 8c 58 ff ff ff    	jl     15a0e <bitmap_set_bit+0x58>
        }
    }
}
   15ab6:	90                   	nop
   15ab7:	8d 65 f8             	lea    -0x8(%ebp),%esp
   15aba:	5b                   	pop    %ebx
   15abb:	5e                   	pop    %esi
   15abc:	5d                   	pop    %ebp
   15abd:	c3                   	ret    

00015abe <bitmap_is_set>:
 * 
 * @param bitmap 
 * @param index 
 * @return int 
 */
int bitmap_is_set(bitmap_t *bitmap, int index) {
   15abe:	55                   	push   %ebp
   15abf:	89 e5                	mov    %esp,%ebp
   15ac1:	83 ec 08             	sub    $0x8,%esp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   15ac4:	83 ec 08             	sub    $0x8,%esp
   15ac7:	ff 75 0c             	push   0xc(%ebp)
   15aca:	ff 75 08             	push   0x8(%ebp)
   15acd:	e8 6c fe ff ff       	call   1593e <bitmap_get_bit>
   15ad2:	83 c4 10             	add    $0x10,%esp
   15ad5:	84 c0                	test   %al,%al
   15ad7:	0f 95 c0             	setne  %al
   15ada:	0f b6 c0             	movzbl %al,%eax
}
   15add:	c9                   	leave  
   15ade:	c3                   	ret    

00015adf <bitmap_alloc_nbits>:
 * @param bitmap 
 * @param bit 当某一位的值为bit时表示该位空闲，可供分配
 * @param count 
 * @return int 
 */
int bitmap_alloc_nbits(bitmap_t *bitmap, int bit, int count) {
   15adf:	55                   	push   %ebp
   15ae0:	89 e5                	mov    %esp,%ebp
   15ae2:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   15ae5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15ae9:	75 19                	jne    15b04 <bitmap_alloc_nbits+0x25>
   15aeb:	68 d8 78 01 00       	push   $0x178d8
   15af0:	68 98 79 01 00       	push   $0x17998
   15af5:	6a 68                	push   $0x68
   15af7:	68 f0 78 01 00       	push   $0x178f0
   15afc:	e8 5d fd ff ff       	call   1585e <pannic>
   15b01:	83 c4 10             	add    $0x10,%esp
    ASSERT(count >= 0);
   15b04:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   15b08:	79 19                	jns    15b23 <bitmap_alloc_nbits+0x44>
   15b0a:	68 60 79 01 00       	push   $0x17960
   15b0f:	68 98 79 01 00       	push   $0x17998
   15b14:	6a 69                	push   $0x69
   15b16:	68 f0 78 01 00       	push   $0x178f0
   15b1b:	e8 3e fd ff ff       	call   1585e <pannic>
   15b20:	83 c4 10             	add    $0x10,%esp

    int search_index = 0;
   15b23:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    int ok_index = -1;
   15b2a:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
    while (search_index < bitmap->bit_count) {
   15b31:	e9 8f 00 00 00       	jmp    15bc5 <bitmap_alloc_nbits+0xe6>
        //确定可分配空间的起始索引
        if (bitmap_get_bit(bitmap, search_index) != bit) {
   15b36:	83 ec 08             	sub    $0x8,%esp
   15b39:	ff 75 f4             	push   -0xc(%ebp)
   15b3c:	ff 75 08             	push   0x8(%ebp)
   15b3f:	e8 fa fd ff ff       	call   1593e <bitmap_get_bit>
   15b44:	83 c4 10             	add    $0x10,%esp
   15b47:	0f b6 c0             	movzbl %al,%eax
   15b4a:	39 45 0c             	cmp    %eax,0xc(%ebp)
   15b4d:	74 06                	je     15b55 <bitmap_alloc_nbits+0x76>
            search_index++;
   15b4f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
            continue;
   15b53:	eb 70                	jmp    15bc5 <bitmap_alloc_nbits+0xe6>
        }

        //记录可分配空间的起始索引
        ok_index = search_index;
   15b55:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15b58:	89 45 f0             	mov    %eax,-0x10(%ebp)

        //判断该空间是否大小满足要求
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   15b5b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
   15b62:	eb 2d                	jmp    15b91 <bitmap_alloc_nbits+0xb2>
            //空间大小不满足要求, 分配失败
            if (bitmap_get_bit(bitmap, search_index++) != bit) {
   15b64:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15b67:	8d 50 01             	lea    0x1(%eax),%edx
   15b6a:	89 55 f4             	mov    %edx,-0xc(%ebp)
   15b6d:	83 ec 08             	sub    $0x8,%esp
   15b70:	50                   	push   %eax
   15b71:	ff 75 08             	push   0x8(%ebp)
   15b74:	e8 c5 fd ff ff       	call   1593e <bitmap_get_bit>
   15b79:	83 c4 10             	add    $0x10,%esp
   15b7c:	0f b6 c0             	movzbl %al,%eax
   15b7f:	39 45 0c             	cmp    %eax,0xc(%ebp)
   15b82:	74 09                	je     15b8d <bitmap_alloc_nbits+0xae>
                ok_index = -1;
   15b84:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
                break;
   15b8b:	eb 16                	jmp    15ba3 <bitmap_alloc_nbits+0xc4>
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   15b8d:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   15b91:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15b94:	3b 45 10             	cmp    0x10(%ebp),%eax
   15b97:	7d 0a                	jge    15ba3 <bitmap_alloc_nbits+0xc4>
   15b99:	8b 45 08             	mov    0x8(%ebp),%eax
   15b9c:	8b 00                	mov    (%eax),%eax
   15b9e:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   15ba1:	7c c1                	jl     15b64 <bitmap_alloc_nbits+0x85>
            }
        }

        if (ok_index != -1) {//分配成功
   15ba3:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
   15ba7:	74 1c                	je     15bc5 <bitmap_alloc_nbits+0xe6>
            //将该片空间标记为已分配状态, 并返回起始索引
            bitmap_set_bit(bitmap, ok_index, count, ~bit);
   15ba9:	8b 45 0c             	mov    0xc(%ebp),%eax
   15bac:	f7 d0                	not    %eax
   15bae:	50                   	push   %eax
   15baf:	ff 75 10             	push   0x10(%ebp)
   15bb2:	ff 75 f0             	push   -0x10(%ebp)
   15bb5:	ff 75 08             	push   0x8(%ebp)
   15bb8:	e8 f9 fd ff ff       	call   159b6 <bitmap_set_bit>
   15bbd:	83 c4 10             	add    $0x10,%esp
            return ok_index;
   15bc0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15bc3:	eb 13                	jmp    15bd8 <bitmap_alloc_nbits+0xf9>
    while (search_index < bitmap->bit_count) {
   15bc5:	8b 45 08             	mov    0x8(%ebp),%eax
   15bc8:	8b 00                	mov    (%eax),%eax
   15bca:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   15bcd:	0f 8c 63 ff ff ff    	jl     15b36 <bitmap_alloc_nbits+0x57>
        }
    }
    
    //遍历完整个位图也没有满足要求的空间则返回-1
    return -1;
   15bd3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

   15bd8:	c9                   	leave  
   15bd9:	c3                   	ret    

00015bda <kernel_strcpy>:
 * @brief  拷贝字符串
 *
 * @param dest 目标字符串
 * @param src  源字符串
 */
void kernel_strcpy(char *dest, const char *src) {
   15bda:	55                   	push   %ebp
   15bdb:	89 e5                	mov    %esp,%ebp
  // 1.判断是否为NULL
  if (!dest || !src) return;
   15bdd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15be1:	74 3b                	je     15c1e <kernel_strcpy+0x44>
   15be3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   15be7:	74 35                	je     15c1e <kernel_strcpy+0x44>

  // 2.拷贝 src '\0' 以前的部分到 dest中
  // TODO:完成（访问未初始化的内存）的异常中断后就只判断src是否读到'\0'
  while (*dest && *src) {
   15be9:	eb 17                	jmp    15c02 <kernel_strcpy+0x28>
    *(dest++) = *(src++);
   15beb:	8b 55 0c             	mov    0xc(%ebp),%edx
   15bee:	8d 42 01             	lea    0x1(%edx),%eax
   15bf1:	89 45 0c             	mov    %eax,0xc(%ebp)
   15bf4:	8b 45 08             	mov    0x8(%ebp),%eax
   15bf7:	8d 48 01             	lea    0x1(%eax),%ecx
   15bfa:	89 4d 08             	mov    %ecx,0x8(%ebp)
   15bfd:	0f b6 12             	movzbl (%edx),%edx
   15c00:	88 10                	mov    %dl,(%eax)
  while (*dest && *src) {
   15c02:	8b 45 08             	mov    0x8(%ebp),%eax
   15c05:	0f b6 00             	movzbl (%eax),%eax
   15c08:	84 c0                	test   %al,%al
   15c0a:	74 0a                	je     15c16 <kernel_strcpy+0x3c>
   15c0c:	8b 45 0c             	mov    0xc(%ebp),%eax
   15c0f:	0f b6 00             	movzbl (%eax),%eax
   15c12:	84 c0                	test   %al,%al
   15c14:	75 d5                	jne    15beb <kernel_strcpy+0x11>
  }

  // 3.添加结束符
  *dest = '\0';
   15c16:	8b 45 08             	mov    0x8(%ebp),%eax
   15c19:	c6 00 00             	movb   $0x0,(%eax)
   15c1c:	eb 01                	jmp    15c1f <kernel_strcpy+0x45>
  if (!dest || !src) return;
   15c1e:	90                   	nop
}
   15c1f:	5d                   	pop    %ebp
   15c20:	c3                   	ret    

00015c21 <kernel_strncpy>:
 *
 * @param dest 目的字符串
 * @param src 源字符串
 * @param size 拷贝字符串的长度，包含'\0'
 */
void kernel_strncpy(char *dest, const char *src, int size) {
   15c21:	55                   	push   %ebp
   15c22:	89 e5                	mov    %esp,%ebp
  // 1.判断是否需要拷贝
  if (!dest || !src || !size) return;
   15c24:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15c28:	74 45                	je     15c6f <kernel_strncpy+0x4e>
   15c2a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   15c2e:	74 3f                	je     15c6f <kernel_strncpy+0x4e>
   15c30:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   15c34:	74 39                	je     15c6f <kernel_strncpy+0x4e>

  // 2.size的大小包含了'\0'，所以要预留一个空间给'\0'，只能拷贝 size - 1个字符
  while ((size-- > 1) && (*src)) {
   15c36:	eb 17                	jmp    15c4f <kernel_strncpy+0x2e>
    *(dest++) = *(src++);
   15c38:	8b 55 0c             	mov    0xc(%ebp),%edx
   15c3b:	8d 42 01             	lea    0x1(%edx),%eax
   15c3e:	89 45 0c             	mov    %eax,0xc(%ebp)
   15c41:	8b 45 08             	mov    0x8(%ebp),%eax
   15c44:	8d 48 01             	lea    0x1(%eax),%ecx
   15c47:	89 4d 08             	mov    %ecx,0x8(%ebp)
   15c4a:	0f b6 12             	movzbl (%edx),%edx
   15c4d:	88 10                	mov    %dl,(%eax)
  while ((size-- > 1) && (*src)) {
   15c4f:	8b 45 10             	mov    0x10(%ebp),%eax
   15c52:	8d 50 ff             	lea    -0x1(%eax),%edx
   15c55:	89 55 10             	mov    %edx,0x10(%ebp)
   15c58:	83 f8 01             	cmp    $0x1,%eax
   15c5b:	7e 0a                	jle    15c67 <kernel_strncpy+0x46>
   15c5d:	8b 45 0c             	mov    0xc(%ebp),%eax
   15c60:	0f b6 00             	movzbl (%eax),%eax
   15c63:	84 c0                	test   %al,%al
   15c65:	75 d1                	jne    15c38 <kernel_strncpy+0x17>
  }

  // 3.添加结束符
  *dest = '\0';
   15c67:	8b 45 08             	mov    0x8(%ebp),%eax
   15c6a:	c6 00 00             	movb   $0x0,(%eax)
   15c6d:	eb 01                	jmp    15c70 <kernel_strncpy+0x4f>
  if (!dest || !src || !size) return;
   15c6f:	90                   	nop
}
   15c70:	5d                   	pop    %ebp
   15c71:	c3                   	ret    

00015c72 <kernel_strncmp>:
 * @param s2 字符串2
 * @param size 比较前比较的子串长度，从下标0开始到(size - 1)
 *
 * @return int ==: 0, > : 1, < : -1
 */
int kernel_strncmp(const char *s1, const char *s2, int size) {
   15c72:	55                   	push   %ebp
   15c73:	89 e5                	mov    %esp,%ebp
  if (!s1 || !s2) return 0;
   15c75:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15c79:	74 06                	je     15c81 <kernel_strncmp+0xf>
   15c7b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   15c7f:	75 0f                	jne    15c90 <kernel_strncmp+0x1e>
   15c81:	b8 00 00 00 00       	mov    $0x0,%eax
   15c86:	eb 69                	jmp    15cf1 <kernel_strncmp+0x7f>

  while (*s1 && *s2 && --size && *s1 == *s2) {
    ++s1;
   15c88:	83 45 08 01          	addl   $0x1,0x8(%ebp)
    ++s2;
   15c8c:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
  while (*s1 && *s2 && --size && *s1 == *s2) {
   15c90:	8b 45 08             	mov    0x8(%ebp),%eax
   15c93:	0f b6 00             	movzbl (%eax),%eax
   15c96:	84 c0                	test   %al,%al
   15c98:	74 24                	je     15cbe <kernel_strncmp+0x4c>
   15c9a:	8b 45 0c             	mov    0xc(%ebp),%eax
   15c9d:	0f b6 00             	movzbl (%eax),%eax
   15ca0:	84 c0                	test   %al,%al
   15ca2:	74 1a                	je     15cbe <kernel_strncmp+0x4c>
   15ca4:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   15ca8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   15cac:	74 10                	je     15cbe <kernel_strncmp+0x4c>
   15cae:	8b 45 08             	mov    0x8(%ebp),%eax
   15cb1:	0f b6 10             	movzbl (%eax),%edx
   15cb4:	8b 45 0c             	mov    0xc(%ebp),%eax
   15cb7:	0f b6 00             	movzbl (%eax),%eax
   15cba:	38 c2                	cmp    %al,%dl
   15cbc:	74 ca                	je     15c88 <kernel_strncmp+0x16>
  }

  if (*s1 > *s2) {
   15cbe:	8b 45 08             	mov    0x8(%ebp),%eax
   15cc1:	0f b6 10             	movzbl (%eax),%edx
   15cc4:	8b 45 0c             	mov    0xc(%ebp),%eax
   15cc7:	0f b6 00             	movzbl (%eax),%eax
   15cca:	38 c2                	cmp    %al,%dl
   15ccc:	7e 07                	jle    15cd5 <kernel_strncmp+0x63>
    return 1;
   15cce:	b8 01 00 00 00       	mov    $0x1,%eax
   15cd3:	eb 1c                	jmp    15cf1 <kernel_strncmp+0x7f>
  } else if (*s1 < *s2) {
   15cd5:	8b 45 08             	mov    0x8(%ebp),%eax
   15cd8:	0f b6 10             	movzbl (%eax),%edx
   15cdb:	8b 45 0c             	mov    0xc(%ebp),%eax
   15cde:	0f b6 00             	movzbl (%eax),%eax
   15ce1:	38 c2                	cmp    %al,%dl
   15ce3:	7d 07                	jge    15cec <kernel_strncmp+0x7a>
    return -1;
   15ce5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15cea:	eb 05                	jmp    15cf1 <kernel_strncmp+0x7f>
  } else {
    return 0;
   15cec:	b8 00 00 00 00       	mov    $0x0,%eax
  }
}
   15cf1:	5d                   	pop    %ebp
   15cf2:	c3                   	ret    

00015cf3 <kernel_strlen>:
 * @brief  获取字符串str的长度, 不含'\0'
 *
 * @param str
 * @return int
 */
int kernel_strlen(const char *str) {
   15cf3:	55                   	push   %ebp
   15cf4:	89 e5                	mov    %esp,%ebp
   15cf6:	83 ec 10             	sub    $0x10,%esp
  if (!str) return 0;
   15cf9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15cfd:	75 07                	jne    15d06 <kernel_strlen+0x13>
   15cff:	b8 00 00 00 00       	mov    $0x0,%eax
   15d04:	eb 20                	jmp    15d26 <kernel_strlen+0x33>

  int len = 0;
   15d06:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  while (*(str++)) len++;
   15d0d:	eb 04                	jmp    15d13 <kernel_strlen+0x20>
   15d0f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   15d13:	8b 45 08             	mov    0x8(%ebp),%eax
   15d16:	8d 50 01             	lea    0x1(%eax),%edx
   15d19:	89 55 08             	mov    %edx,0x8(%ebp)
   15d1c:	0f b6 00             	movzbl (%eax),%eax
   15d1f:	84 c0                	test   %al,%al
   15d21:	75 ec                	jne    15d0f <kernel_strlen+0x1c>

  return len;
   15d23:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   15d26:	c9                   	leave  
   15d27:	c3                   	ret    

00015d28 <kernel_memcpy>:
 *
 * @param dest 目的内存的起始地址
 * @param src 原内存的起始地址
 * @param size 复制的内存字节大小
 */
void kernel_memcpy(void *dest, const void *src, int size) {
   15d28:	55                   	push   %ebp
   15d29:	89 e5                	mov    %esp,%ebp
   15d2b:	83 ec 10             	sub    $0x10,%esp
  if (!dest || !src || !size) return;
   15d2e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15d32:	74 40                	je     15d74 <kernel_memcpy+0x4c>
   15d34:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   15d38:	74 3a                	je     15d74 <kernel_memcpy+0x4c>
   15d3a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   15d3e:	74 34                	je     15d74 <kernel_memcpy+0x4c>

  uint8_t *d = (uint8_t *)dest;
   15d40:	8b 45 08             	mov    0x8(%ebp),%eax
   15d43:	89 45 fc             	mov    %eax,-0x4(%ebp)
  uint8_t *s = (uint8_t *)src;
   15d46:	8b 45 0c             	mov    0xc(%ebp),%eax
   15d49:	89 45 f8             	mov    %eax,-0x8(%ebp)

  while (size--) {
   15d4c:	eb 17                	jmp    15d65 <kernel_memcpy+0x3d>
    *(d++) = *(s++);
   15d4e:	8b 55 f8             	mov    -0x8(%ebp),%edx
   15d51:	8d 42 01             	lea    0x1(%edx),%eax
   15d54:	89 45 f8             	mov    %eax,-0x8(%ebp)
   15d57:	8b 45 fc             	mov    -0x4(%ebp),%eax
   15d5a:	8d 48 01             	lea    0x1(%eax),%ecx
   15d5d:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   15d60:	0f b6 12             	movzbl (%edx),%edx
   15d63:	88 10                	mov    %dl,(%eax)
  while (size--) {
   15d65:	8b 45 10             	mov    0x10(%ebp),%eax
   15d68:	8d 50 ff             	lea    -0x1(%eax),%edx
   15d6b:	89 55 10             	mov    %edx,0x10(%ebp)
   15d6e:	85 c0                	test   %eax,%eax
   15d70:	75 dc                	jne    15d4e <kernel_memcpy+0x26>
   15d72:	eb 01                	jmp    15d75 <kernel_memcpy+0x4d>
  if (!dest || !src || !size) return;
   15d74:	90                   	nop
  }
}
   15d75:	c9                   	leave  
   15d76:	c3                   	ret    

00015d77 <kernel_memset>:
 *
 * @param dest 区域起始地址
 * @param v 每个字节的值
 * @param size 赋值的内存的大小
 */
void kernel_memset(void *dest, uint8_t v, int size) {
   15d77:	55                   	push   %ebp
   15d78:	89 e5                	mov    %esp,%ebp
   15d7a:	83 ec 14             	sub    $0x14,%esp
   15d7d:	8b 45 0c             	mov    0xc(%ebp),%eax
   15d80:	88 45 ec             	mov    %al,-0x14(%ebp)
  if (!dest || !size) return;
   15d83:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15d87:	74 2c                	je     15db5 <kernel_memset+0x3e>
   15d89:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   15d8d:	74 26                	je     15db5 <kernel_memset+0x3e>

  uint8_t *d = (uint8_t *)dest;
   15d8f:	8b 45 08             	mov    0x8(%ebp),%eax
   15d92:	89 45 fc             	mov    %eax,-0x4(%ebp)

  while (size--) {
   15d95:	eb 0f                	jmp    15da6 <kernel_memset+0x2f>
    *(d++) = v;
   15d97:	8b 45 fc             	mov    -0x4(%ebp),%eax
   15d9a:	8d 50 01             	lea    0x1(%eax),%edx
   15d9d:	89 55 fc             	mov    %edx,-0x4(%ebp)
   15da0:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   15da4:	88 10                	mov    %dl,(%eax)
  while (size--) {
   15da6:	8b 45 10             	mov    0x10(%ebp),%eax
   15da9:	8d 50 ff             	lea    -0x1(%eax),%edx
   15dac:	89 55 10             	mov    %edx,0x10(%ebp)
   15daf:	85 c0                	test   %eax,%eax
   15db1:	75 e4                	jne    15d97 <kernel_memset+0x20>
   15db3:	eb 01                	jmp    15db6 <kernel_memset+0x3f>
  if (!dest || !size) return;
   15db5:	90                   	nop
  }
}
   15db6:	c9                   	leave  
   15db7:	c3                   	ret    

00015db8 <kernel_memcmp>:
 * @param d1 区域1的起始地址
 * @param d2 区域2的起始地址
 * @param size 比较的字节数量
 * @return int ==:0, >:1, <:-1
 */
int kernel_memcmp(const void *dest1, const void *dest2, int size) {
   15db8:	55                   	push   %ebp
   15db9:	89 e5                	mov    %esp,%ebp
   15dbb:	83 ec 10             	sub    $0x10,%esp
  if (!dest1 || !dest2 || !size) return 0;
   15dbe:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15dc2:	74 0c                	je     15dd0 <kernel_memcmp+0x18>
   15dc4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   15dc8:	74 06                	je     15dd0 <kernel_memcmp+0x18>
   15dca:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   15dce:	75 07                	jne    15dd7 <kernel_memcmp+0x1f>
   15dd0:	b8 00 00 00 00       	mov    $0x0,%eax
   15dd5:	eb 63                	jmp    15e3a <kernel_memcmp+0x82>

  uint8_t *d1 = (uint8_t *)dest1;
   15dd7:	8b 45 08             	mov    0x8(%ebp),%eax
   15dda:	89 45 fc             	mov    %eax,-0x4(%ebp)
  uint8_t *d2 = (uint8_t *)dest2;
   15ddd:	8b 45 0c             	mov    0xc(%ebp),%eax
   15de0:	89 45 f8             	mov    %eax,-0x8(%ebp)

  while (--size && *d1 == *d2) {
   15de3:	eb 08                	jmp    15ded <kernel_memcmp+0x35>
    d1++;
   15de5:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    d2++;
   15de9:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  while (--size && *d1 == *d2) {
   15ded:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   15df1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   15df5:	74 10                	je     15e07 <kernel_memcmp+0x4f>
   15df7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   15dfa:	0f b6 10             	movzbl (%eax),%edx
   15dfd:	8b 45 f8             	mov    -0x8(%ebp),%eax
   15e00:	0f b6 00             	movzbl (%eax),%eax
   15e03:	38 c2                	cmp    %al,%dl
   15e05:	74 de                	je     15de5 <kernel_memcmp+0x2d>
  }

  if (*d1 > *d2)
   15e07:	8b 45 fc             	mov    -0x4(%ebp),%eax
   15e0a:	0f b6 10             	movzbl (%eax),%edx
   15e0d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   15e10:	0f b6 00             	movzbl (%eax),%eax
   15e13:	38 c2                	cmp    %al,%dl
   15e15:	76 07                	jbe    15e1e <kernel_memcmp+0x66>
    return 1;
   15e17:	b8 01 00 00 00       	mov    $0x1,%eax
   15e1c:	eb 1c                	jmp    15e3a <kernel_memcmp+0x82>
  else if (*d1 < *d2)
   15e1e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   15e21:	0f b6 10             	movzbl (%eax),%edx
   15e24:	8b 45 f8             	mov    -0x8(%ebp),%eax
   15e27:	0f b6 00             	movzbl (%eax),%eax
   15e2a:	38 c2                	cmp    %al,%dl
   15e2c:	73 07                	jae    15e35 <kernel_memcmp+0x7d>
    return -1;
   15e2e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15e33:	eb 05                	jmp    15e3a <kernel_memcmp+0x82>
  else
    return 0;
   15e35:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15e3a:	c9                   	leave  
   15e3b:	c3                   	ret    

00015e3c <kernel_sprintf>:

void kernel_sprintf(char *buf, const char *formate, ...) {
   15e3c:	55                   	push   %ebp
   15e3d:	89 e5                	mov    %esp,%ebp
   15e3f:	83 ec 18             	sub    $0x18,%esp
  // 获取可变参数并将其格式化到缓冲区中
  va_list args;
  va_start(args, formate);
   15e42:	8d 45 10             	lea    0x10(%ebp),%eax
   15e45:	89 45 f4             	mov    %eax,-0xc(%ebp)
  kernel_vsprintf(buf, formate, args);
   15e48:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15e4b:	83 ec 04             	sub    $0x4,%esp
   15e4e:	50                   	push   %eax
   15e4f:	ff 75 0c             	push   0xc(%ebp)
   15e52:	ff 75 08             	push   0x8(%ebp)
   15e55:	e8 06 00 00 00       	call   15e60 <kernel_vsprintf>
   15e5a:	83 c4 10             	add    $0x10,%esp
  va_end(args);
}
   15e5d:	90                   	nop
   15e5e:	c9                   	leave  
   15e5f:	c3                   	ret    

00015e60 <kernel_vsprintf>:
 *
 * @param buf
 * @param formate
 * @param args
 */
void kernel_vsprintf(char *buf, const char *formate, va_list args) {
   15e60:	55                   	push   %ebp
   15e61:	89 e5                	mov    %esp,%ebp
   15e63:	83 ec 28             	sub    $0x28,%esp
  // 定义状态机，包含两种状态
  enum { NORMAL, READ_FMT } state = NORMAL;
   15e66:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  char *curr = buf;
   15e6d:	8b 45 08             	mov    0x8(%ebp),%eax
   15e70:	89 45 f0             	mov    %eax,-0x10(%ebp)

  char ch;

  while ((ch = *(formate++)) != '\0') {
   15e73:	e9 68 01 00 00       	jmp    15fe0 <kernel_vsprintf+0x180>
    switch (state) {
   15e78:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   15e7c:	74 0b                	je     15e89 <kernel_vsprintf+0x29>
   15e7e:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   15e82:	74 2b                	je     15eaf <kernel_vsprintf+0x4f>
   15e84:	e9 56 01 00 00       	jmp    15fdf <kernel_vsprintf+0x17f>
      case NORMAL:
        if (ch == '%')
   15e89:	80 7d e7 25          	cmpb   $0x25,-0x19(%ebp)
   15e8d:	75 0c                	jne    15e9b <kernel_vsprintf+0x3b>
          state = READ_FMT;
   15e8f:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   15e96:	e9 45 01 00 00       	jmp    15fe0 <kernel_vsprintf+0x180>
        else
          *(curr++) = ch;
   15e9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15e9e:	8d 50 01             	lea    0x1(%eax),%edx
   15ea1:	89 55 f0             	mov    %edx,-0x10(%ebp)
   15ea4:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   15ea8:	88 10                	mov    %dl,(%eax)
        break;
   15eaa:	e9 31 01 00 00       	jmp    15fe0 <kernel_vsprintf+0x180>
      case READ_FMT:
        if (ch == 's') {
   15eaf:	80 7d e7 73          	cmpb   $0x73,-0x19(%ebp)
   15eb3:	75 47                	jne    15efc <kernel_vsprintf+0x9c>
          const char *str = va_arg(args, char *);
   15eb5:	8b 45 10             	mov    0x10(%ebp),%eax
   15eb8:	8d 50 04             	lea    0x4(%eax),%edx
   15ebb:	89 55 10             	mov    %edx,0x10(%ebp)
   15ebe:	8b 00                	mov    (%eax),%eax
   15ec0:	89 45 ec             	mov    %eax,-0x14(%ebp)
          int len = kernel_strlen(str);
   15ec3:	ff 75 ec             	push   -0x14(%ebp)
   15ec6:	e8 28 fe ff ff       	call   15cf3 <kernel_strlen>
   15ecb:	83 c4 04             	add    $0x4,%esp
   15ece:	89 45 e8             	mov    %eax,-0x18(%ebp)
          while (len--) {
   15ed1:	eb 17                	jmp    15eea <kernel_vsprintf+0x8a>
            *(curr++) = *(str++);
   15ed3:	8b 55 ec             	mov    -0x14(%ebp),%edx
   15ed6:	8d 42 01             	lea    0x1(%edx),%eax
   15ed9:	89 45 ec             	mov    %eax,-0x14(%ebp)
   15edc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15edf:	8d 48 01             	lea    0x1(%eax),%ecx
   15ee2:	89 4d f0             	mov    %ecx,-0x10(%ebp)
   15ee5:	0f b6 12             	movzbl (%edx),%edx
   15ee8:	88 10                	mov    %dl,(%eax)
          while (len--) {
   15eea:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15eed:	8d 50 ff             	lea    -0x1(%eax),%edx
   15ef0:	89 55 e8             	mov    %edx,-0x18(%ebp)
   15ef3:	85 c0                	test   %eax,%eax
   15ef5:	75 dc                	jne    15ed3 <kernel_vsprintf+0x73>
   15ef7:	e9 da 00 00 00       	jmp    15fd6 <kernel_vsprintf+0x176>
          }
        } else if (ch == 'd') {
   15efc:	80 7d e7 64          	cmpb   $0x64,-0x19(%ebp)
   15f00:	75 37                	jne    15f39 <kernel_vsprintf+0xd9>
          const int num = va_arg(args, int);
   15f02:	8b 45 10             	mov    0x10(%ebp),%eax
   15f05:	8d 50 04             	lea    0x4(%eax),%edx
   15f08:	89 55 10             	mov    %edx,0x10(%ebp)
   15f0b:	8b 00                	mov    (%eax),%eax
   15f0d:	89 45 d8             	mov    %eax,-0x28(%ebp)
          kernel_itoa(curr, num, 10);
   15f10:	83 ec 04             	sub    $0x4,%esp
   15f13:	6a 0a                	push   $0xa
   15f15:	ff 75 d8             	push   -0x28(%ebp)
   15f18:	ff 75 f0             	push   -0x10(%ebp)
   15f1b:	e8 dd 00 00 00       	call   15ffd <kernel_itoa>
   15f20:	83 c4 10             	add    $0x10,%esp
          curr += kernel_strlen(curr);
   15f23:	83 ec 0c             	sub    $0xc,%esp
   15f26:	ff 75 f0             	push   -0x10(%ebp)
   15f29:	e8 c5 fd ff ff       	call   15cf3 <kernel_strlen>
   15f2e:	83 c4 10             	add    $0x10,%esp
   15f31:	01 45 f0             	add    %eax,-0x10(%ebp)
   15f34:	e9 9d 00 00 00       	jmp    15fd6 <kernel_vsprintf+0x176>
        } else if (ch == 'x' || ch == 'X') {
   15f39:	80 7d e7 78          	cmpb   $0x78,-0x19(%ebp)
   15f3d:	74 06                	je     15f45 <kernel_vsprintf+0xe5>
   15f3f:	80 7d e7 58          	cmpb   $0x58,-0x19(%ebp)
   15f43:	75 34                	jne    15f79 <kernel_vsprintf+0x119>
          const int num = va_arg(args, int);
   15f45:	8b 45 10             	mov    0x10(%ebp),%eax
   15f48:	8d 50 04             	lea    0x4(%eax),%edx
   15f4b:	89 55 10             	mov    %edx,0x10(%ebp)
   15f4e:	8b 00                	mov    (%eax),%eax
   15f50:	89 45 dc             	mov    %eax,-0x24(%ebp)
          kernel_itoa(curr, num, 16);
   15f53:	83 ec 04             	sub    $0x4,%esp
   15f56:	6a 10                	push   $0x10
   15f58:	ff 75 dc             	push   -0x24(%ebp)
   15f5b:	ff 75 f0             	push   -0x10(%ebp)
   15f5e:	e8 9a 00 00 00       	call   15ffd <kernel_itoa>
   15f63:	83 c4 10             	add    $0x10,%esp
          curr += kernel_strlen(curr);
   15f66:	83 ec 0c             	sub    $0xc,%esp
   15f69:	ff 75 f0             	push   -0x10(%ebp)
   15f6c:	e8 82 fd ff ff       	call   15cf3 <kernel_strlen>
   15f71:	83 c4 10             	add    $0x10,%esp
   15f74:	01 45 f0             	add    %eax,-0x10(%ebp)
        } else if (ch == 'x' || ch == 'X') {
   15f77:	eb 5d                	jmp    15fd6 <kernel_vsprintf+0x176>
        } else if (ch == 'b') {
   15f79:	80 7d e7 62          	cmpb   $0x62,-0x19(%ebp)
   15f7d:	75 34                	jne    15fb3 <kernel_vsprintf+0x153>
          const int num = va_arg(args, int);
   15f7f:	8b 45 10             	mov    0x10(%ebp),%eax
   15f82:	8d 50 04             	lea    0x4(%eax),%edx
   15f85:	89 55 10             	mov    %edx,0x10(%ebp)
   15f88:	8b 00                	mov    (%eax),%eax
   15f8a:	89 45 e0             	mov    %eax,-0x20(%ebp)
          kernel_itoa(curr, num, 2);
   15f8d:	83 ec 04             	sub    $0x4,%esp
   15f90:	6a 02                	push   $0x2
   15f92:	ff 75 e0             	push   -0x20(%ebp)
   15f95:	ff 75 f0             	push   -0x10(%ebp)
   15f98:	e8 60 00 00 00       	call   15ffd <kernel_itoa>
   15f9d:	83 c4 10             	add    $0x10,%esp
          curr += kernel_strlen(curr);
   15fa0:	83 ec 0c             	sub    $0xc,%esp
   15fa3:	ff 75 f0             	push   -0x10(%ebp)
   15fa6:	e8 48 fd ff ff       	call   15cf3 <kernel_strlen>
   15fab:	83 c4 10             	add    $0x10,%esp
   15fae:	01 45 f0             	add    %eax,-0x10(%ebp)
   15fb1:	eb 23                	jmp    15fd6 <kernel_vsprintf+0x176>
        } else if (ch == 'c') {
   15fb3:	80 7d e7 63          	cmpb   $0x63,-0x19(%ebp)
   15fb7:	75 1d                	jne    15fd6 <kernel_vsprintf+0x176>
          char c = va_arg(args, int);
   15fb9:	8b 45 10             	mov    0x10(%ebp),%eax
   15fbc:	8d 50 04             	lea    0x4(%eax),%edx
   15fbf:	89 55 10             	mov    %edx,0x10(%ebp)
   15fc2:	8b 00                	mov    (%eax),%eax
   15fc4:	88 45 e6             	mov    %al,-0x1a(%ebp)
          *(curr++) = c;
   15fc7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15fca:	8d 50 01             	lea    0x1(%eax),%edx
   15fcd:	89 55 f0             	mov    %edx,-0x10(%ebp)
   15fd0:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   15fd4:	88 10                	mov    %dl,(%eax)
        }
        state = NORMAL;
   15fd6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        break;
   15fdd:	eb 01                	jmp    15fe0 <kernel_vsprintf+0x180>
      default:
        break;
   15fdf:	90                   	nop
  while ((ch = *(formate++)) != '\0') {
   15fe0:	8b 45 0c             	mov    0xc(%ebp),%eax
   15fe3:	8d 50 01             	lea    0x1(%eax),%edx
   15fe6:	89 55 0c             	mov    %edx,0xc(%ebp)
   15fe9:	0f b6 00             	movzbl (%eax),%eax
   15fec:	88 45 e7             	mov    %al,-0x19(%ebp)
   15fef:	80 7d e7 00          	cmpb   $0x0,-0x19(%ebp)
   15ff3:	0f 85 7f fe ff ff    	jne    15e78 <kernel_vsprintf+0x18>
    }
  }
}
   15ff9:	90                   	nop
   15ffa:	90                   	nop
   15ffb:	c9                   	leave  
   15ffc:	c3                   	ret    

00015ffd <kernel_itoa>:
 *
 * @param buf 缓冲区
 * @param num 整数
 * @param base 转换的进制规则
 */
void kernel_itoa(char *buf, int num, int base) {
   15ffd:	55                   	push   %ebp
   15ffe:	89 e5                	mov    %esp,%ebp
   16000:	53                   	push   %ebx
   16001:	81 ec 90 00 00 00    	sub    $0x90,%esp

  if (base != 2 && base != 8 && base != 10 && base != 16) {
   16007:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   1600b:	74 1d                	je     1602a <kernel_itoa+0x2d>
   1600d:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   16011:	74 17                	je     1602a <kernel_itoa+0x2d>
   16013:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   16017:	74 11                	je     1602a <kernel_itoa+0x2d>
   16019:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   1601d:	74 0b                	je     1602a <kernel_itoa+0x2d>
    *buf = '\0';
   1601f:	8b 45 08             	mov    0x8(%ebp),%eax
   16022:	c6 00 00             	movb   $0x0,(%eax)
    return;
   16025:	e9 f8 00 00 00       	jmp    16122 <kernel_itoa+0x125>
  }

  if (num == 0) {
   1602a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1602d:	85 c0                	test   %eax,%eax
   1602f:	75 17                	jne    16048 <kernel_itoa+0x4b>
    *(buf++) = '0';
   16031:	8b 45 08             	mov    0x8(%ebp),%eax
   16034:	8d 50 01             	lea    0x1(%eax),%edx
   16037:	89 55 08             	mov    %edx,0x8(%ebp)
   1603a:	c6 00 30             	movb   $0x30,(%eax)
    *buf = '\0';
   1603d:	8b 45 08             	mov    0x8(%ebp),%eax
   16040:	c6 00 00             	movb   $0x0,(%eax)
    return;
   16043:	e9 da 00 00 00       	jmp    16122 <kernel_itoa+0x125>
  }

  char *p = buf;
   16048:	8b 45 08             	mov    0x8(%ebp),%eax
   1604b:	89 45 f8             	mov    %eax,-0x8(%ebp)
  uint32_t u_num = 0;
   1604e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  if (base == 10) {
   16055:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   16059:	75 41                	jne    1609c <kernel_itoa+0x9f>
    u_num = num;
   1605b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1605e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (num < 0) {
   16061:	8b 45 0c             	mov    0xc(%ebp),%eax
   16064:	85 c0                	test   %eax,%eax
   16066:	79 16                	jns    1607e <kernel_itoa+0x81>
      *(p++) = '-';
   16068:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1606b:	8d 50 01             	lea    0x1(%eax),%edx
   1606e:	89 55 f8             	mov    %edx,-0x8(%ebp)
   16071:	c6 00 2d             	movb   $0x2d,(%eax)
      u_num = -1 * num;
   16074:	8b 45 0c             	mov    0xc(%ebp),%eax
   16077:	f7 d8                	neg    %eax
   16079:	89 45 f4             	mov    %eax,-0xc(%ebp)
   1607c:	eb 26                	jmp    160a4 <kernel_itoa+0xa7>
    } else if (num == 0) {
   1607e:	8b 45 0c             	mov    0xc(%ebp),%eax
   16081:	85 c0                	test   %eax,%eax
   16083:	75 1f                	jne    160a4 <kernel_itoa+0xa7>
      *(p++) = '0';
   16085:	8b 45 f8             	mov    -0x8(%ebp),%eax
   16088:	8d 50 01             	lea    0x1(%eax),%edx
   1608b:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1608e:	c6 00 30             	movb   $0x30,(%eax)
      *p = '\0';
   16091:	8b 45 f8             	mov    -0x8(%ebp),%eax
   16094:	c6 00 00             	movb   $0x0,(%eax)
      return;
   16097:	e9 86 00 00 00       	jmp    16122 <kernel_itoa+0x125>
    }
  } else {
    u_num = *((uint32_t *)&num);
   1609c:	8d 45 0c             	lea    0xc(%ebp),%eax
   1609f:	8b 00                	mov    (%eax),%eax
   160a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
  }

  static const char *num_to_char = {"0123456789abcdef"};
  char arr[128];
  int len = 0;
   160a4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  while (u_num > 0) {
   160ab:	eb 3b                	jmp    160e8 <kernel_itoa+0xeb>
    arr[len++] = num_to_char[u_num % base];
   160ad:	8b 1d 8c 80 01 00    	mov    0x1808c,%ebx
   160b3:	8b 4d 10             	mov    0x10(%ebp),%ecx
   160b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   160b9:	ba 00 00 00 00       	mov    $0x0,%edx
   160be:	f7 f1                	div    %ecx
   160c0:	89 d0                	mov    %edx,%eax
   160c2:	8d 0c 03             	lea    (%ebx,%eax,1),%ecx
   160c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   160c8:	8d 50 01             	lea    0x1(%eax),%edx
   160cb:	89 55 f0             	mov    %edx,-0x10(%ebp)
   160ce:	0f b6 11             	movzbl (%ecx),%edx
   160d1:	88 94 05 6c ff ff ff 	mov    %dl,-0x94(%ebp,%eax,1)
    u_num /= base;
   160d8:	8b 5d 10             	mov    0x10(%ebp),%ebx
   160db:	8b 45 f4             	mov    -0xc(%ebp),%eax
   160de:	ba 00 00 00 00       	mov    $0x0,%edx
   160e3:	f7 f3                	div    %ebx
   160e5:	89 45 f4             	mov    %eax,-0xc(%ebp)
  while (u_num > 0) {
   160e8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   160ec:	75 bf                	jne    160ad <kernel_itoa+0xb0>
  }

  for (int i = len - 1; i >= 0; --i) {
   160ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
   160f1:	83 e8 01             	sub    $0x1,%eax
   160f4:	89 45 ec             	mov    %eax,-0x14(%ebp)
   160f7:	eb 1d                	jmp    16116 <kernel_itoa+0x119>
    *(p++) = arr[i];
   160f9:	8b 45 f8             	mov    -0x8(%ebp),%eax
   160fc:	8d 50 01             	lea    0x1(%eax),%edx
   160ff:	89 55 f8             	mov    %edx,-0x8(%ebp)
   16102:	8d 8d 6c ff ff ff    	lea    -0x94(%ebp),%ecx
   16108:	8b 55 ec             	mov    -0x14(%ebp),%edx
   1610b:	01 ca                	add    %ecx,%edx
   1610d:	0f b6 12             	movzbl (%edx),%edx
   16110:	88 10                	mov    %dl,(%eax)
  for (int i = len - 1; i >= 0; --i) {
   16112:	83 6d ec 01          	subl   $0x1,-0x14(%ebp)
   16116:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1611a:	79 dd                	jns    160f9 <kernel_itoa+0xfc>
  }
  *p = '\0';
   1611c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1611f:	c6 00 00             	movb   $0x0,(%eax)
}
   16122:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   16125:	c9                   	leave  
   16126:	c3                   	ret    

00016127 <strings_count>:
 * @brief 计算字符串数组str中字符串的个数
 *
 * @param str
 * @return int
 */
int strings_count(char *const *strs) {
   16127:	55                   	push   %ebp
   16128:	89 e5                	mov    %esp,%ebp
   1612a:	83 ec 10             	sub    $0x10,%esp
  int count = 0;
   1612d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  if (strs) {
   16134:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   16138:	74 15                	je     1614f <strings_count+0x28>
    while (*(strs++)) {
   1613a:	eb 04                	jmp    16140 <strings_count+0x19>
      count++;
   1613c:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    while (*(strs++)) {
   16140:	8b 45 08             	mov    0x8(%ebp),%eax
   16143:	8d 50 04             	lea    0x4(%eax),%edx
   16146:	89 55 08             	mov    %edx,0x8(%ebp)
   16149:	8b 00                	mov    (%eax),%eax
   1614b:	85 c0                	test   %eax,%eax
   1614d:	75 ed                	jne    1613c <strings_count+0x15>
    }
  }

  return count;
   1614f:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   16152:	c9                   	leave  
   16153:	c3                   	ret    

00016154 <get_file_name>:
 * @brief 根据文件路径获取文件名
 *
 * @param path
 * @return char*
 */
const char *get_file_name(const char *path) {
   16154:	55                   	push   %ebp
   16155:	89 e5                	mov    %esp,%ebp
   16157:	83 ec 10             	sub    $0x10,%esp
  const char *s = path;
   1615a:	8b 45 08             	mov    0x8(%ebp),%eax
   1615d:	89 45 fc             	mov    %eax,-0x4(%ebp)
  while (*s != '\0') {
   16160:	eb 04                	jmp    16166 <get_file_name+0x12>
    s++;
   16162:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  while (*s != '\0') {
   16166:	8b 45 fc             	mov    -0x4(%ebp),%eax
   16169:	0f b6 00             	movzbl (%eax),%eax
   1616c:	84 c0                	test   %al,%al
   1616e:	75 f2                	jne    16162 <get_file_name+0xe>
  }

  while ((*s != '/') && (*s != '\\') && (s >= path)) {
   16170:	eb 04                	jmp    16176 <get_file_name+0x22>
    s--;
   16172:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
  while ((*s != '/') && (*s != '\\') && (s >= path)) {
   16176:	8b 45 fc             	mov    -0x4(%ebp),%eax
   16179:	0f b6 00             	movzbl (%eax),%eax
   1617c:	3c 2f                	cmp    $0x2f,%al
   1617e:	74 12                	je     16192 <get_file_name+0x3e>
   16180:	8b 45 fc             	mov    -0x4(%ebp),%eax
   16183:	0f b6 00             	movzbl (%eax),%eax
   16186:	3c 5c                	cmp    $0x5c,%al
   16188:	74 08                	je     16192 <get_file_name+0x3e>
   1618a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1618d:	3b 45 08             	cmp    0x8(%ebp),%eax
   16190:	73 e0                	jae    16172 <get_file_name+0x1e>
  }

  return s + 1;
   16192:	8b 45 fc             	mov    -0x4(%ebp),%eax
   16195:	83 c0 01             	add    $0x1,%eax
   16198:	c9                   	leave  
   16199:	c3                   	ret    

0001619a <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   1619a:	55                   	push   %ebp
   1619b:	89 e5                	mov    %esp,%ebp
   1619d:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   161a0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   161a4:	75 19                	jne    161bf <list_is_empty+0x25>
   161a6:	68 bc 79 01 00       	push   $0x179bc
   161ab:	68 a0 7a 01 00       	push   $0x17aa0
   161b0:	6a 38                	push   $0x38
   161b2:	68 d0 79 01 00       	push   $0x179d0
   161b7:	e8 a2 f6 ff ff       	call   1585e <pannic>
   161bc:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   161bf:	8b 45 08             	mov    0x8(%ebp),%eax
   161c2:	8b 40 08             	mov    0x8(%eax),%eax
   161c5:	85 c0                	test   %eax,%eax
   161c7:	0f 94 c0             	sete   %al
   161ca:	0f b6 c0             	movzbl %al,%eax
}
   161cd:	c9                   	leave  
   161ce:	c3                   	ret    

000161cf <list_get_size>:
static inline int list_get_size(list_t *list) {
   161cf:	55                   	push   %ebp
   161d0:	89 e5                	mov    %esp,%ebp
   161d2:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   161d5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   161d9:	75 19                	jne    161f4 <list_get_size+0x25>
   161db:	68 bc 79 01 00       	push   $0x179bc
   161e0:	68 d8 7a 01 00       	push   $0x17ad8
   161e5:	6a 3e                	push   $0x3e
   161e7:	68 d0 79 01 00       	push   $0x179d0
   161ec:	e8 6d f6 ff ff       	call   1585e <pannic>
   161f1:	83 c4 10             	add    $0x10,%esp
    return list->size;
   161f4:	8b 45 08             	mov    0x8(%ebp),%eax
   161f7:	8b 40 08             	mov    0x8(%eax),%eax
}
   161fa:	c9                   	leave  
   161fb:	c3                   	ret    

000161fc <list_insert_first>:
 * 
 */

#include "tools/list.h"

void list_insert_first(list_t *list, list_node_t *node) {
   161fc:	55                   	push   %ebp
   161fd:	89 e5                	mov    %esp,%ebp
   161ff:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   16202:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   16206:	74 06                	je     1620e <list_insert_first+0x12>
   16208:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1620c:	75 19                	jne    16227 <list_insert_first+0x2b>
   1620e:	68 10 7a 01 00       	push   $0x17a10
   16213:	68 8c 7a 01 00       	push   $0x17a8c
   16218:	6a 0f                	push   $0xf
   1621a:	68 40 7a 01 00       	push   $0x17a40
   1621f:	e8 3a f6 ff ff       	call   1585e <pannic>
   16224:	83 c4 10             	add    $0x10,%esp

    // if (node == (list_node_t*)0) return;

    node->next = list->first;
   16227:	8b 45 08             	mov    0x8(%ebp),%eax
   1622a:	8b 10                	mov    (%eax),%edx
   1622c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1622f:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   16232:	8b 45 0c             	mov    0xc(%ebp),%eax
   16235:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   1623b:	83 ec 0c             	sub    $0xc,%esp
   1623e:	ff 75 08             	push   0x8(%ebp)
   16241:	e8 54 ff ff ff       	call   1619a <list_is_empty>
   16246:	83 c4 10             	add    $0x10,%esp
   16249:	85 c0                	test   %eax,%eax
   1624b:	74 16                	je     16263 <list_insert_first+0x67>
        list->first = list->last = node;
   1624d:	8b 45 08             	mov    0x8(%ebp),%eax
   16250:	8b 55 0c             	mov    0xc(%ebp),%edx
   16253:	89 50 04             	mov    %edx,0x4(%eax)
   16256:	8b 45 08             	mov    0x8(%ebp),%eax
   16259:	8b 50 04             	mov    0x4(%eax),%edx
   1625c:	8b 45 08             	mov    0x8(%ebp),%eax
   1625f:	89 10                	mov    %edx,(%eax)
   16261:	eb 12                	jmp    16275 <list_insert_first+0x79>
    } else {
        list->first->pre = node;
   16263:	8b 45 08             	mov    0x8(%ebp),%eax
   16266:	8b 00                	mov    (%eax),%eax
   16268:	8b 55 0c             	mov    0xc(%ebp),%edx
   1626b:	89 10                	mov    %edx,(%eax)
        list->first = node;
   1626d:	8b 45 08             	mov    0x8(%ebp),%eax
   16270:	8b 55 0c             	mov    0xc(%ebp),%edx
   16273:	89 10                	mov    %edx,(%eax)
    }

    list->size++;
   16275:	8b 45 08             	mov    0x8(%ebp),%eax
   16278:	8b 40 08             	mov    0x8(%eax),%eax
   1627b:	8d 50 01             	lea    0x1(%eax),%edx
   1627e:	8b 45 08             	mov    0x8(%ebp),%eax
   16281:	89 50 08             	mov    %edx,0x8(%eax)
}
   16284:	90                   	nop
   16285:	c9                   	leave  
   16286:	c3                   	ret    

00016287 <list_insert_last>:

void list_insert_last(list_t *list, list_node_t *node) {
   16287:	55                   	push   %ebp
   16288:	89 e5                	mov    %esp,%ebp
   1628a:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   1628d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   16291:	74 06                	je     16299 <list_insert_last+0x12>
   16293:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   16297:	75 19                	jne    162b2 <list_insert_last+0x2b>
   16299:	68 10 7a 01 00       	push   $0x17a10
   1629e:	68 b0 7a 01 00       	push   $0x17ab0
   162a3:	6a 21                	push   $0x21
   162a5:	68 40 7a 01 00       	push   $0x17a40
   162aa:	e8 af f5 ff ff       	call   1585e <pannic>
   162af:	83 c4 10             	add    $0x10,%esp
    // if (node == (list_node_t*)0) return;

    node->pre = list->last;
   162b2:	8b 45 08             	mov    0x8(%ebp),%eax
   162b5:	8b 50 04             	mov    0x4(%eax),%edx
   162b8:	8b 45 0c             	mov    0xc(%ebp),%eax
   162bb:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   162bd:	8b 45 0c             	mov    0xc(%ebp),%eax
   162c0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)


    if (list_is_empty(list)) {
   162c7:	83 ec 0c             	sub    $0xc,%esp
   162ca:	ff 75 08             	push   0x8(%ebp)
   162cd:	e8 c8 fe ff ff       	call   1619a <list_is_empty>
   162d2:	83 c4 10             	add    $0x10,%esp
   162d5:	85 c0                	test   %eax,%eax
   162d7:	74 16                	je     162ef <list_insert_last+0x68>
        list->first = list->last = node;
   162d9:	8b 45 08             	mov    0x8(%ebp),%eax
   162dc:	8b 55 0c             	mov    0xc(%ebp),%edx
   162df:	89 50 04             	mov    %edx,0x4(%eax)
   162e2:	8b 45 08             	mov    0x8(%ebp),%eax
   162e5:	8b 50 04             	mov    0x4(%eax),%edx
   162e8:	8b 45 08             	mov    0x8(%ebp),%eax
   162eb:	89 10                	mov    %edx,(%eax)
   162ed:	eb 15                	jmp    16304 <list_insert_last+0x7d>
    } else {
        list->last->next = node;
   162ef:	8b 45 08             	mov    0x8(%ebp),%eax
   162f2:	8b 40 04             	mov    0x4(%eax),%eax
   162f5:	8b 55 0c             	mov    0xc(%ebp),%edx
   162f8:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   162fb:	8b 45 08             	mov    0x8(%ebp),%eax
   162fe:	8b 55 0c             	mov    0xc(%ebp),%edx
   16301:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->size++;
   16304:	8b 45 08             	mov    0x8(%ebp),%eax
   16307:	8b 40 08             	mov    0x8(%eax),%eax
   1630a:	8d 50 01             	lea    0x1(%eax),%edx
   1630d:	8b 45 08             	mov    0x8(%ebp),%eax
   16310:	89 50 08             	mov    %edx,0x8(%eax)

}
   16313:	90                   	nop
   16314:	c9                   	leave  
   16315:	c3                   	ret    

00016316 <list_remove_first>:

list_node_t* list_remove_first(list_t *list){
   16316:	55                   	push   %ebp
   16317:	89 e5                	mov    %esp,%ebp
   16319:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   1631c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   16320:	75 19                	jne    1633b <list_remove_first+0x25>
   16322:	68 76 7a 01 00       	push   $0x17a76
   16327:	68 c4 7a 01 00       	push   $0x17ac4
   1632c:	6a 34                	push   $0x34
   1632e:	68 40 7a 01 00       	push   $0x17a40
   16333:	e8 26 f5 ff ff       	call   1585e <pannic>
   16338:	83 c4 10             	add    $0x10,%esp

    if (list_is_empty(list)) {
   1633b:	83 ec 0c             	sub    $0xc,%esp
   1633e:	ff 75 08             	push   0x8(%ebp)
   16341:	e8 54 fe ff ff       	call   1619a <list_is_empty>
   16346:	83 c4 10             	add    $0x10,%esp
   16349:	85 c0                	test   %eax,%eax
   1634b:	74 07                	je     16354 <list_remove_first+0x3e>
        return (list_node_t*)0;
   1634d:	b8 00 00 00 00       	mov    $0x0,%eax
   16352:	eb 71                	jmp    163c5 <list_remove_first+0xaf>
    }

    list_node_t *ret = list->first;
   16354:	8b 45 08             	mov    0x8(%ebp),%eax
   16357:	8b 00                	mov    (%eax),%eax
   16359:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   1635c:	83 ec 0c             	sub    $0xc,%esp
   1635f:	ff 75 08             	push   0x8(%ebp)
   16362:	e8 68 fe ff ff       	call   161cf <list_get_size>
   16367:	83 c4 10             	add    $0x10,%esp
   1636a:	83 f8 01             	cmp    $0x1,%eax
   1636d:	75 17                	jne    16386 <list_remove_first+0x70>
        list->first = list->last = (list_node_t*)0;
   1636f:	8b 45 08             	mov    0x8(%ebp),%eax
   16372:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   16379:	8b 45 08             	mov    0x8(%ebp),%eax
   1637c:	8b 50 04             	mov    0x4(%eax),%edx
   1637f:	8b 45 08             	mov    0x8(%ebp),%eax
   16382:	89 10                	mov    %edx,(%eax)
   16384:	eb 18                	jmp    1639e <list_remove_first+0x88>
    } else {
        list->first = list->first->next;
   16386:	8b 45 08             	mov    0x8(%ebp),%eax
   16389:	8b 00                	mov    (%eax),%eax
   1638b:	8b 50 04             	mov    0x4(%eax),%edx
   1638e:	8b 45 08             	mov    0x8(%ebp),%eax
   16391:	89 10                	mov    %edx,(%eax)
        list->first->pre = (list_node_t*)0;
   16393:	8b 45 08             	mov    0x8(%ebp),%eax
   16396:	8b 00                	mov    (%eax),%eax
   16398:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    list->size--;
   1639e:	8b 45 08             	mov    0x8(%ebp),%eax
   163a1:	8b 40 08             	mov    0x8(%eax),%eax
   163a4:	8d 50 ff             	lea    -0x1(%eax),%edx
   163a7:	8b 45 08             	mov    0x8(%ebp),%eax
   163aa:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   163ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
   163b0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   163b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   163ba:	8b 50 04             	mov    0x4(%eax),%edx
   163bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   163c0:	89 10                	mov    %edx,(%eax)
    return ret;
   163c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
 }
   163c5:	c9                   	leave  
   163c6:	c3                   	ret    

000163c7 <list_remove_last>:

list_node_t* list_remove_last(list_t *list) {
   163c7:	55                   	push   %ebp
   163c8:	89 e5                	mov    %esp,%ebp
   163ca:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   163cd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   163d1:	75 19                	jne    163ec <list_remove_last+0x25>
   163d3:	68 76 7a 01 00       	push   $0x17a76
   163d8:	68 e8 7a 01 00       	push   $0x17ae8
   163dd:	6a 4a                	push   $0x4a
   163df:	68 40 7a 01 00       	push   $0x17a40
   163e4:	e8 75 f4 ff ff       	call   1585e <pannic>
   163e9:	83 c4 10             	add    $0x10,%esp

     if (list_is_empty(list)) {
   163ec:	83 ec 0c             	sub    $0xc,%esp
   163ef:	ff 75 08             	push   0x8(%ebp)
   163f2:	e8 a3 fd ff ff       	call   1619a <list_is_empty>
   163f7:	83 c4 10             	add    $0x10,%esp
   163fa:	85 c0                	test   %eax,%eax
   163fc:	74 07                	je     16405 <list_remove_last+0x3e>
        return (list_node_t*)0;
   163fe:	b8 00 00 00 00       	mov    $0x0,%eax
   16403:	eb 75                	jmp    1647a <list_remove_last+0xb3>
    }

    list_node_t *ret = list->last;
   16405:	8b 45 08             	mov    0x8(%ebp),%eax
   16408:	8b 40 04             	mov    0x4(%eax),%eax
   1640b:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   1640e:	83 ec 0c             	sub    $0xc,%esp
   16411:	ff 75 08             	push   0x8(%ebp)
   16414:	e8 b6 fd ff ff       	call   161cf <list_get_size>
   16419:	83 c4 10             	add    $0x10,%esp
   1641c:	83 f8 01             	cmp    $0x1,%eax
   1641f:	75 17                	jne    16438 <list_remove_last+0x71>
        list->first = list->last = (list_node_t*)0;
   16421:	8b 45 08             	mov    0x8(%ebp),%eax
   16424:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1642b:	8b 45 08             	mov    0x8(%ebp),%eax
   1642e:	8b 50 04             	mov    0x4(%eax),%edx
   16431:	8b 45 08             	mov    0x8(%ebp),%eax
   16434:	89 10                	mov    %edx,(%eax)
   16436:	eb 1b                	jmp    16453 <list_remove_last+0x8c>
    } else {
        list->last = list->last->pre;
   16438:	8b 45 08             	mov    0x8(%ebp),%eax
   1643b:	8b 40 04             	mov    0x4(%eax),%eax
   1643e:	8b 10                	mov    (%eax),%edx
   16440:	8b 45 08             	mov    0x8(%ebp),%eax
   16443:	89 50 04             	mov    %edx,0x4(%eax)
        list->last->next = (list_node_t*)0;
   16446:	8b 45 08             	mov    0x8(%ebp),%eax
   16449:	8b 40 04             	mov    0x4(%eax),%eax
   1644c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    }

    list->size--;
   16453:	8b 45 08             	mov    0x8(%ebp),%eax
   16456:	8b 40 08             	mov    0x8(%eax),%eax
   16459:	8d 50 ff             	lea    -0x1(%eax),%edx
   1645c:	8b 45 08             	mov    0x8(%ebp),%eax
   1645f:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   16462:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16465:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1646c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1646f:	8b 50 04             	mov    0x4(%eax),%edx
   16472:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16475:	89 10                	mov    %edx,(%eax)
    return ret;
   16477:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   1647a:	c9                   	leave  
   1647b:	c3                   	ret    

0001647c <list_remove>:

list_node_t* list_remove(list_t *list, list_node_t *node) {
   1647c:	55                   	push   %ebp
   1647d:	89 e5                	mov    %esp,%ebp
   1647f:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   16482:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   16486:	74 06                	je     1648e <list_remove+0x12>
   16488:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1648c:	75 19                	jne    164a7 <list_remove+0x2b>
   1648e:	68 10 7a 01 00       	push   $0x17a10
   16493:	68 fc 7a 01 00       	push   $0x17afc
   16498:	6a 60                	push   $0x60
   1649a:	68 40 7a 01 00       	push   $0x17a40
   1649f:	e8 ba f3 ff ff       	call   1585e <pannic>
   164a4:	83 c4 10             	add    $0x10,%esp

    if (list_is_empty(list)) {
   164a7:	83 ec 0c             	sub    $0xc,%esp
   164aa:	ff 75 08             	push   0x8(%ebp)
   164ad:	e8 e8 fc ff ff       	call   1619a <list_is_empty>
   164b2:	83 c4 10             	add    $0x10,%esp
   164b5:	85 c0                	test   %eax,%eax
   164b7:	74 0a                	je     164c3 <list_remove+0x47>
        return (list_node_t*)0;
   164b9:	b8 00 00 00 00       	mov    $0x0,%eax
   164be:	e9 80 00 00 00       	jmp    16543 <list_remove+0xc7>
    }

    if (node == list->first) list->first = node->next;
   164c3:	8b 45 08             	mov    0x8(%ebp),%eax
   164c6:	8b 00                	mov    (%eax),%eax
   164c8:	39 45 0c             	cmp    %eax,0xc(%ebp)
   164cb:	75 0b                	jne    164d8 <list_remove+0x5c>
   164cd:	8b 45 0c             	mov    0xc(%ebp),%eax
   164d0:	8b 50 04             	mov    0x4(%eax),%edx
   164d3:	8b 45 08             	mov    0x8(%ebp),%eax
   164d6:	89 10                	mov    %edx,(%eax)
    if (node == list->last) list->last = node->pre;
   164d8:	8b 45 08             	mov    0x8(%ebp),%eax
   164db:	8b 40 04             	mov    0x4(%eax),%eax
   164de:	39 45 0c             	cmp    %eax,0xc(%ebp)
   164e1:	75 0b                	jne    164ee <list_remove+0x72>
   164e3:	8b 45 0c             	mov    0xc(%ebp),%eax
   164e6:	8b 10                	mov    (%eax),%edx
   164e8:	8b 45 08             	mov    0x8(%ebp),%eax
   164eb:	89 50 04             	mov    %edx,0x4(%eax)

    if (node->pre) node->pre->next = node->next;
   164ee:	8b 45 0c             	mov    0xc(%ebp),%eax
   164f1:	8b 00                	mov    (%eax),%eax
   164f3:	85 c0                	test   %eax,%eax
   164f5:	74 0e                	je     16505 <list_remove+0x89>
   164f7:	8b 45 0c             	mov    0xc(%ebp),%eax
   164fa:	8b 00                	mov    (%eax),%eax
   164fc:	8b 55 0c             	mov    0xc(%ebp),%edx
   164ff:	8b 52 04             	mov    0x4(%edx),%edx
   16502:	89 50 04             	mov    %edx,0x4(%eax)
    if (node->next) node->next->pre = node->pre;
   16505:	8b 45 0c             	mov    0xc(%ebp),%eax
   16508:	8b 40 04             	mov    0x4(%eax),%eax
   1650b:	85 c0                	test   %eax,%eax
   1650d:	74 0d                	je     1651c <list_remove+0xa0>
   1650f:	8b 45 0c             	mov    0xc(%ebp),%eax
   16512:	8b 40 04             	mov    0x4(%eax),%eax
   16515:	8b 55 0c             	mov    0xc(%ebp),%edx
   16518:	8b 12                	mov    (%edx),%edx
   1651a:	89 10                	mov    %edx,(%eax)

    node->pre = node->next = (list_node_t*)0;
   1651c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1651f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   16526:	8b 45 0c             	mov    0xc(%ebp),%eax
   16529:	8b 50 04             	mov    0x4(%eax),%edx
   1652c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1652f:	89 10                	mov    %edx,(%eax)
    list->size--;
   16531:	8b 45 08             	mov    0x8(%ebp),%eax
   16534:	8b 40 08             	mov    0x8(%eax),%eax
   16537:	8d 50 ff             	lea    -0x1(%eax),%edx
   1653a:	8b 45 08             	mov    0x8(%ebp),%eax
   1653d:	89 50 08             	mov    %edx,0x8(%eax)

    return node;
   16540:	8b 45 0c             	mov    0xc(%ebp),%eax
   16543:	c9                   	leave  
   16544:	c3                   	ret    

00016545 <log_init>:

/**
 * @brief  初始化串行端口寄存器COM1
 * 
 */
void log_init(void) {
   16545:	55                   	push   %ebp
   16546:	89 e5                	mov    %esp,%ebp
   16548:	83 ec 08             	sub    $0x8,%esp
    outb(COM1_PORT + 2, 0xc7);
    outb(COM1_PORT + 4, 0x0f);

#endif 
    //初始化互斥锁
    mutex_init(&mutex);
   1654b:	83 ec 0c             	sub    $0xc,%esp
   1654e:	68 b8 a1 06 00       	push   $0x6a1b8
   16553:	e8 ed eb ff ff       	call   15145 <mutex_init>
   16558:	83 c4 10             	add    $0x10,%esp

    //打开一个tty设备用于日志打印
    log_dev_id = dev_open(DEV_TTY, 0, (void*)0);
   1655b:	83 ec 04             	sub    $0x4,%esp
   1655e:	6a 00                	push   $0x0
   16560:	6a 00                	push   $0x0
   16562:	6a 01                	push   $0x1
   16564:	e8 f4 d7 ff ff       	call   13d5d <dev_open>
   16569:	83 c4 10             	add    $0x10,%esp
   1656c:	a3 cc a1 06 00       	mov    %eax,0x6a1cc
}
   16571:	90                   	nop
   16572:	c9                   	leave  
   16573:	c3                   	ret    

00016574 <log_printf>:
 * @brief  格式化输出到串口
 * 
 * @param formate 
 * @param ... 
 */
void log_printf(const char *formate, ...) {
   16574:	55                   	push   %ebp
   16575:	89 e5                	mov    %esp,%ebp
   16577:	81 ec 98 00 00 00    	sub    $0x98,%esp
    //1.设置字符缓冲区
    char str_buf[128];
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   1657d:	83 ec 04             	sub    $0x4,%esp
   16580:	68 80 00 00 00       	push   $0x80
   16585:	6a 00                	push   $0x0
   16587:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   1658d:	50                   	push   %eax
   1658e:	e8 e4 f7 ff ff       	call   15d77 <kernel_memset>
   16593:	83 c4 10             	add    $0x10,%esp
    
    //2.获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   16596:	8d 45 0c             	lea    0xc(%ebp),%eax
   16599:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, formate, args);
   1659f:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   165a5:	83 ec 04             	sub    $0x4,%esp
   165a8:	50                   	push   %eax
   165a9:	ff 75 08             	push   0x8(%ebp)
   165ac:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   165b2:	50                   	push   %eax
   165b3:	e8 a8 f8 ff ff       	call   15e60 <kernel_vsprintf>
   165b8:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    const char *p = str_buf;
   165bb:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   165c1:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将以下资源放入临界资源包含区，防止在运行时发生进程切换（cpu关中断）
    mutex_lock(&mutex); //TODO:加锁
   165c4:	83 ec 0c             	sub    $0xc,%esp
   165c7:	68 b8 a1 06 00       	push   $0x6a1b8
   165cc:	e8 c1 eb ff ff       	call   15192 <mutex_lock>
   165d1:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');

#else
    //console_write(0, str_buf, kernel_strlen(str_buf));
    //tty设备在显示器上写入时是根据当前光标位置来的，所以不需要传入addr参数
    dev_write(log_dev_id, 0, str_buf, kernel_strlen(str_buf));
   165d4:	83 ec 0c             	sub    $0xc,%esp
   165d7:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   165dd:	50                   	push   %eax
   165de:	e8 10 f7 ff ff       	call   15cf3 <kernel_strlen>
   165e3:	83 c4 10             	add    $0x10,%esp
   165e6:	8b 15 cc a1 06 00    	mov    0x6a1cc,%edx
   165ec:	50                   	push   %eax
   165ed:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   165f3:	50                   	push   %eax
   165f4:	6a 00                	push   $0x0
   165f6:	52                   	push   %edx
   165f7:	e8 f7 d8 ff ff       	call   13ef3 <dev_write>
   165fc:	83 c4 10             	add    $0x10,%esp
    //console_write(0, &c, 1); 
#endif

    //执行完毕，将资源离开临界资源保护区，(cpu开中断)
    mutex_unlock(&mutex); //TODO:解锁
   165ff:	83 ec 0c             	sub    $0xc,%esp
   16602:	68 b8 a1 06 00       	push   $0x6a1b8
   16607:	e8 17 ec ff ff       	call   15223 <mutex_unlock>
   1660c:	83 c4 10             	add    $0x10,%esp
   1660f:	90                   	nop
   16610:	c9                   	leave  
   16611:	c3                   	ret    

Disassembly of section .first_task:

80000000 <first_task_entry>:
//第一个任务进程入口函数
first_task_entry:
    //iret指令返回后，将之前压入的 ss,esp,eflags,cs,eip 寄存器值返回给对应寄存器，
	//由于cpu从0特权级切换到了3特权级，而之前其余的段寄存器都是0特权级，不能供3特权级使用，
	//所以cpu将其余寄存器置零，这里直接用ss寄存器再初始化其余段寄存器即可
	mov %ss, %ax
80000000:	66 8c d0             	mov    %ss,%ax
	mov %ax, %ds
80000003:	8e d8                	mov    %eax,%ds
	mov %ax, %es
80000005:	8e c0                	mov    %eax,%es
	mov %ax, %fs
80000007:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
80000009:	8e e8                	mov    %eax,%gs

    //因为cs寄存器已由操作系统分配，所以直接跳转即可
8000000b:	e9 00 00 00 00       	jmp    80000010 <first_main>

80000010 <first_main>:
#include "tools/log.h"
#include "core/task.h"
#include  "applib/lib_syscall.h"
#include "dev/tty.h"

int first_main(void) {
80000010:	55                   	push   %ebp
80000011:	89 e5                	mov    %esp,%ebp
80000013:	83 ec 28             	sub    $0x28,%esp
    // for (;;)
    // {
    // }

    //为每个tty设备创建一个进程
    for (int i = 0; i < TTY_TABLE_SIZE; ++i) {
80000016:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
8000001d:	eb 75                	jmp    80000094 <first_main+0x84>
        int pid = fork();
8000001f:	e8 61 01 00 00       	call   80000185 <fork>
80000024:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pid < 0) {
80000027:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
8000002b:	79 14                	jns    80000041 <first_main+0x31>
            print_msg("create shell failed.", 0);
8000002d:	83 ec 08             	sub    $0x8,%esp
80000030:	6a 00                	push   $0x0
80000032:	68 ac 00 00 80       	push   $0x800000ac
80000037:	e8 21 01 00 00       	call   8000015d <print_msg>
8000003c:	83 c4 10             	add    $0x10,%esp
            break;
8000003f:	eb 59                	jmp    8000009a <first_main+0x8a>
        } else if (pid == 0) {
80000041:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80000045:	75 49                	jne    80000090 <first_main+0x80>
            char tty_num[5] = "tty:?";
80000047:	c7 45 eb 74 74 79 3a 	movl   $0x3a797474,-0x15(%ebp)
8000004e:	c6 45 ef 3f          	movb   $0x3f,-0x11(%ebp)
            tty_num[4] = i + '0';
80000052:	8b 45 f4             	mov    -0xc(%ebp),%eax
80000055:	83 c0 30             	add    $0x30,%eax
80000058:	88 45 ef             	mov    %al,-0x11(%ebp)
            char * const argv[] = {tty_num, 0};
8000005b:	8d 45 eb             	lea    -0x15(%ebp),%eax
8000005e:	89 45 e0             	mov    %eax,-0x20(%ebp)
80000061:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
            execve("/sehll.elf", argv, 0);
80000068:	83 ec 04             	sub    $0x4,%esp
8000006b:	6a 00                	push   $0x0
8000006d:	8d 45 e0             	lea    -0x20(%ebp),%eax
80000070:	50                   	push   %eax
80000071:	68 c1 00 00 80       	push   $0x800000c1
80000076:	e8 25 01 00 00       	call   800001a0 <execve>
8000007b:	83 c4 10             	add    $0x10,%esp
            while (1)   {
                msleep(1000);
8000007e:	83 ec 0c             	sub    $0xc,%esp
80000081:	68 e8 03 00 00       	push   $0x3e8
80000086:	e8 8d 00 00 00       	call   80000118 <msleep>
8000008b:	83 c4 10             	add    $0x10,%esp
8000008e:	eb ee                	jmp    8000007e <first_main+0x6e>
    for (int i = 0; i < TTY_TABLE_SIZE; ++i) {
80000090:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
80000094:	83 7d f4 07          	cmpl   $0x7,-0xc(%ebp)
80000098:	7e 85                	jle    8000001f <first_main+0xf>
            
        }
    }    

    for (;;) {
        msleep(1000);
8000009a:	83 ec 0c             	sub    $0xc,%esp
8000009d:	68 e8 03 00 00       	push   $0x3e8
800000a2:	e8 71 00 00 00       	call   80000118 <msleep>
800000a7:	83 c4 10             	add    $0x10,%esp
800000aa:	eb ee                	jmp    8000009a <first_main+0x8a>
800000ac:	63 72 65             	arpl   %si,0x65(%edx)
800000af:	61                   	popa   
800000b0:	74 65                	je     80000117 <sys_call+0x4b>
800000b2:	20 73 68             	and    %dh,0x68(%ebx)
800000b5:	65 6c                	gs insb (%dx),%es:(%edi)
800000b7:	6c                   	insb   (%dx),%es:(%edi)
800000b8:	20 66 61             	and    %ah,0x61(%esi)
800000bb:	69 6c 65 64 2e 00 2f 	imul   $0x732f002e,0x64(%ebp,%eiz,2),%ebp
800000c2:	73 
800000c3:	65 68 6c 6c 2e 65    	gs push $0x652e6c6c
800000c9:	6c                   	insb   (%dx),%es:(%edi)
800000ca:	66                   	data16
	...

800000cc <sys_call>:
#include    "cpu/syscall.h"
#include    "os_cfg.h"
#include    "lib_syscall.h"


int sys_call(syscall_args_t *args) {
800000cc:	55                   	push   %ebp
800000cd:	89 e5                	mov    %esp,%ebp
800000cf:	57                   	push   %edi
800000d0:	56                   	push   %esi
800000d1:	53                   	push   %ebx
800000d2:	83 ec 10             	sub    $0x10,%esp
    // 传入远跳转需要的参数, 即cs = selector, eip = offset 
    //为调用门选择子赋予0特权级,调用门的 cpl 和 RPL <= 系统调用段描述符的DPL
    //门描述符中目标选择子的 CPL <= 门描述符的 DPL
    uint32_t addr[] = {0, SYSCALL_SELECTOR | 0};  
800000d5:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
800000dc:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%ebp)
        "push %[arg1]\n\t"
        "push %[arg0]\n\t"
        "push %[id]\n\t"
        "lcalll *(%[addr])\n\t"
        :"=a"(ret)
        :[arg3]"r"(args->arg3), 
800000e3:	8b 45 08             	mov    0x8(%ebp),%eax
800000e6:	8b 40 10             	mov    0x10(%eax),%eax
         [arg2]"r"(args->arg2), 
800000e9:	8b 55 08             	mov    0x8(%ebp),%edx
800000ec:	8b 52 0c             	mov    0xc(%edx),%edx
         [arg1]"r"(args->arg1),
800000ef:	8b 4d 08             	mov    0x8(%ebp),%ecx
800000f2:	8b 49 08             	mov    0x8(%ecx),%ecx
         [arg0]"r"(args->arg0), 
800000f5:	8b 5d 08             	mov    0x8(%ebp),%ebx
800000f8:	8b 5b 04             	mov    0x4(%ebx),%ebx
         [id]"r"(args->id), 
800000fb:	8b 75 08             	mov    0x8(%ebp),%esi
800000fe:	8b 36                	mov    (%esi),%esi
     __asm__ __volatile__(
80000100:	8d 7d e8             	lea    -0x18(%ebp),%edi
80000103:	50                   	push   %eax
80000104:	52                   	push   %edx
80000105:	51                   	push   %ecx
80000106:	53                   	push   %ebx
80000107:	56                   	push   %esi
80000108:	ff 1f                	lcall  *(%edi)
8000010a:	89 45 f0             	mov    %eax,-0x10(%ebp)
         [addr]"r"(addr)
    );

    return ret;
8000010d:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
80000110:	83 c4 10             	add    $0x10,%esp
80000113:	5b                   	pop    %ebx
80000114:	5e                   	pop    %esi
80000115:	5f                   	pop    %edi
80000116:	5d                   	pop    %ebp
80000117:	c3                   	ret    

80000118 <msleep>:
/**
 * @brief 以ms为单位进行延时
 * 
 * @param ms 
 */
void msleep(int ms) {
80000118:	55                   	push   %ebp
80000119:	89 e5                	mov    %esp,%ebp
8000011b:	83 ec 20             	sub    $0x20,%esp
    if (ms <= 0) return;
8000011e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
80000122:	7e 1b                	jle    8000013f <msleep+0x27>

    syscall_args_t args;
    args.id = SYS_sleep;
80000124:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    args.arg0 = ms;
8000012b:	8b 45 08             	mov    0x8(%ebp),%eax
8000012e:	89 45 f0             	mov    %eax,-0x10(%ebp)

    sys_call(&args);
80000131:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000134:	50                   	push   %eax
80000135:	e8 92 ff ff ff       	call   800000cc <sys_call>
8000013a:	83 c4 04             	add    $0x4,%esp
8000013d:	eb 01                	jmp    80000140 <msleep+0x28>
    if (ms <= 0) return;
8000013f:	90                   	nop

}
80000140:	c9                   	leave  
80000141:	c3                   	ret    

80000142 <getpid>:
/**
 * @brief 获取用户进程id
 * 
 * @return int 
 */
int getpid(void) {
80000142:	55                   	push   %ebp
80000143:	89 e5                	mov    %esp,%ebp
80000145:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_getpid;
80000148:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)

    return sys_call(&args);
8000014f:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000152:	50                   	push   %eax
80000153:	e8 74 ff ff ff       	call   800000cc <sys_call>
80000158:	83 c4 04             	add    $0x4,%esp
}
8000015b:	c9                   	leave  
8000015c:	c3                   	ret    

8000015d <print_msg>:

void print_msg(const char *fmt, int arg) {
8000015d:	55                   	push   %ebp
8000015e:	89 e5                	mov    %esp,%ebp
80000160:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_printmsg;
80000163:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
    args.arg0 = (int)fmt;
8000016a:	8b 45 08             	mov    0x8(%ebp),%eax
8000016d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = arg;
80000170:	8b 45 0c             	mov    0xc(%ebp),%eax
80000173:	89 45 f4             	mov    %eax,-0xc(%ebp)

    sys_call(&args);
80000176:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000179:	50                   	push   %eax
8000017a:	e8 4d ff ff ff       	call   800000cc <sys_call>
8000017f:	83 c4 04             	add    $0x4,%esp
}
80000182:	90                   	nop
80000183:	c9                   	leave  
80000184:	c3                   	ret    

80000185 <fork>:

int fork (void) {
80000185:	55                   	push   %ebp
80000186:	89 e5                	mov    %esp,%ebp
80000188:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fork;
8000018b:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)

    return sys_call(&args);
80000192:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000195:	50                   	push   %eax
80000196:	e8 31 ff ff ff       	call   800000cc <sys_call>
8000019b:	83 c4 04             	add    $0x4,%esp
}
8000019e:	c9                   	leave  
8000019f:	c3                   	ret    

800001a0 <execve>:
 * @param name 外部程序名
 * @param argv 外部程序的参数，字符串常量指针，即字符串数组，数组中的char*值为常量
 * @param env  所加载程序的环境变量
 * @return int 
 */
int execve(const char *name, char * const * argv, char * const * env) {
800001a0:	55                   	push   %ebp
800001a1:	89 e5                	mov    %esp,%ebp
800001a3:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_execve;
800001a6:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
    args.arg0 = (int)name;
800001ad:	8b 45 08             	mov    0x8(%ebp),%eax
800001b0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)argv;
800001b3:	8b 45 0c             	mov    0xc(%ebp),%eax
800001b6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = (int)env;
800001b9:	8b 45 10             	mov    0x10(%ebp),%eax
800001bc:	89 45 f8             	mov    %eax,-0x8(%ebp)


    return sys_call(&args);
800001bf:	8d 45 ec             	lea    -0x14(%ebp),%eax
800001c2:	50                   	push   %eax
800001c3:	e8 04 ff ff ff       	call   800000cc <sys_call>
800001c8:	83 c4 04             	add    $0x4,%esp
}
800001cb:	c9                   	leave  
800001cc:	c3                   	ret    

800001cd <yield>:
/**
 * @brief 进程主动放弃cpu
 * 
 * @return int 
 */
int yield (void) {
800001cd:	55                   	push   %ebp
800001ce:	89 e5                	mov    %esp,%ebp
800001d0:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_yield;
800001d3:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)

    return sys_call(&args);
800001da:	8d 45 ec             	lea    -0x14(%ebp),%eax
800001dd:	50                   	push   %eax
800001de:	e8 e9 fe ff ff       	call   800000cc <sys_call>
800001e3:	83 c4 04             	add    $0x4,%esp
}
800001e6:	c9                   	leave  
800001e7:	c3                   	ret    

800001e8 <open>:
 * @param name 
 * @param flags 
 * @param ... 
 * @return int 
 */
int open(const char *name, int flags, ...) {
800001e8:	55                   	push   %ebp
800001e9:	89 e5                	mov    %esp,%ebp
800001eb:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_open;
800001ee:	c7 45 ec 32 00 00 00 	movl   $0x32,-0x14(%ebp)
    args.arg0 = (int)name;
800001f5:	8b 45 08             	mov    0x8(%ebp),%eax
800001f8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = flags;
800001fb:	8b 45 0c             	mov    0xc(%ebp),%eax
800001fe:	89 45 f4             	mov    %eax,-0xc(%ebp)

    return sys_call(&args);
80000201:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000204:	50                   	push   %eax
80000205:	e8 c2 fe ff ff       	call   800000cc <sys_call>
8000020a:	83 c4 04             	add    $0x4,%esp
}
8000020d:	c9                   	leave  
8000020e:	c3                   	ret    

8000020f <read>:
 * @param file 
 * @param ptr 
 * @param len 
 * @return int 
 */
int read(int file, char *ptr, int len) {
8000020f:	55                   	push   %ebp
80000210:	89 e5                	mov    %esp,%ebp
80000212:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_read;
80000215:	c7 45 ec 33 00 00 00 	movl   $0x33,-0x14(%ebp)
    args.arg0 = file;
8000021c:	8b 45 08             	mov    0x8(%ebp),%eax
8000021f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
80000222:	8b 45 0c             	mov    0xc(%ebp),%eax
80000225:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
80000228:	8b 45 10             	mov    0x10(%ebp),%eax
8000022b:	89 45 f8             	mov    %eax,-0x8(%ebp)

    return sys_call(&args);
8000022e:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000231:	50                   	push   %eax
80000232:	e8 95 fe ff ff       	call   800000cc <sys_call>
80000237:	83 c4 04             	add    $0x4,%esp
}
8000023a:	c9                   	leave  
8000023b:	c3                   	ret    

8000023c <write>:
 * @param file 
 * @param ptr 
 * @param len 
 * @return int 
 */
int write(int file, char *ptr, int len) {
8000023c:	55                   	push   %ebp
8000023d:	89 e5                	mov    %esp,%ebp
8000023f:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_write;
80000242:	c7 45 ec 34 00 00 00 	movl   $0x34,-0x14(%ebp)
    args.arg0 = file;
80000249:	8b 45 08             	mov    0x8(%ebp),%eax
8000024c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
8000024f:	8b 45 0c             	mov    0xc(%ebp),%eax
80000252:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
80000255:	8b 45 10             	mov    0x10(%ebp),%eax
80000258:	89 45 f8             	mov    %eax,-0x8(%ebp)

    return sys_call(&args);
8000025b:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000025e:	50                   	push   %eax
8000025f:	e8 68 fe ff ff       	call   800000cc <sys_call>
80000264:	83 c4 04             	add    $0x4,%esp
}
80000267:	c9                   	leave  
80000268:	c3                   	ret    

80000269 <close>:
 * @brief 关闭文件描述符
 * 
 * @param file 
 * @return int 
 */
int close(int file) {
80000269:	55                   	push   %ebp
8000026a:	89 e5                	mov    %esp,%ebp
8000026c:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_close;
8000026f:	c7 45 ec 35 00 00 00 	movl   $0x35,-0x14(%ebp)
    args.arg0 = file;
80000276:	8b 45 08             	mov    0x8(%ebp),%eax
80000279:	89 45 f0             	mov    %eax,-0x10(%ebp)

    return sys_call(&args);
8000027c:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000027f:	50                   	push   %eax
80000280:	e8 47 fe ff ff       	call   800000cc <sys_call>
80000285:	83 c4 04             	add    $0x4,%esp
}
80000288:	c9                   	leave  
80000289:	c3                   	ret    

8000028a <lseek>:
 * @param file 
 * @param offset 
 * @param dir 
 * @return int 
 */
int lseek(int file, int offset, int dir) {
8000028a:	55                   	push   %ebp
8000028b:	89 e5                	mov    %esp,%ebp
8000028d:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_lseek;
80000290:	c7 45 ec 36 00 00 00 	movl   $0x36,-0x14(%ebp)
    args.arg0 = file;
80000297:	8b 45 08             	mov    0x8(%ebp),%eax
8000029a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = offset;
8000029d:	8b 45 0c             	mov    0xc(%ebp),%eax
800002a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = dir;
800002a3:	8b 45 10             	mov    0x10(%ebp),%eax
800002a6:	89 45 f8             	mov    %eax,-0x8(%ebp)

    return sys_call(&args);
800002a9:	8d 45 ec             	lea    -0x14(%ebp),%eax
800002ac:	50                   	push   %eax
800002ad:	e8 1a fe ff ff       	call   800000cc <sys_call>
800002b2:	83 c4 04             	add    $0x4,%esp
}
800002b5:	c9                   	leave  
800002b6:	c3                   	ret    

800002b7 <isatty>:
 * @brief 
 * 
 * @param file 
 * @return int 
 */
int isatty(int file) {
800002b7:	55                   	push   %ebp
800002b8:	89 e5                	mov    %esp,%ebp
800002ba:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_isatty;
800002bd:	c7 45 ec 37 00 00 00 	movl   $0x37,-0x14(%ebp)
    args.arg0 = file;
800002c4:	8b 45 08             	mov    0x8(%ebp),%eax
800002c7:	89 45 f0             	mov    %eax,-0x10(%ebp)

    return sys_call(&args);
800002ca:	8d 45 ec             	lea    -0x14(%ebp),%eax
800002cd:	50                   	push   %eax
800002ce:	e8 f9 fd ff ff       	call   800000cc <sys_call>
800002d3:	83 c4 04             	add    $0x4,%esp
}
800002d6:	c9                   	leave  
800002d7:	c3                   	ret    

800002d8 <fstat>:
 * 
 * @param file 
 * @param st 
 * @return int 
 */
int fstat(int file, struct stat *st) {
800002d8:	55                   	push   %ebp
800002d9:	89 e5                	mov    %esp,%ebp
800002db:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fstat;
800002de:	c7 45 ec 38 00 00 00 	movl   $0x38,-0x14(%ebp)
    args.arg0 = file;
800002e5:	8b 45 08             	mov    0x8(%ebp),%eax
800002e8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)st;
800002eb:	8b 45 0c             	mov    0xc(%ebp),%eax
800002ee:	89 45 f4             	mov    %eax,-0xc(%ebp)

    return sys_call(&args);
800002f1:	8d 45 ec             	lea    -0x14(%ebp),%eax
800002f4:	50                   	push   %eax
800002f5:	e8 d2 fd ff ff       	call   800000cc <sys_call>
800002fa:	83 c4 04             	add    $0x4,%esp
}
800002fd:	c9                   	leave  
800002fe:	c3                   	ret    

800002ff <sbrk>:
 * @brief 
 * 
 * @param incr 
 * @return void* 
 */
char *sbrk(ptrdiff_t incr) {
800002ff:	55                   	push   %ebp
80000300:	89 e5                	mov    %esp,%ebp
80000302:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_sbrk;
80000305:	c7 45 ec 39 00 00 00 	movl   $0x39,-0x14(%ebp)
    args.arg0 = (int)incr;
8000030c:	8b 45 08             	mov    0x8(%ebp),%eax
8000030f:	89 45 f0             	mov    %eax,-0x10(%ebp)

    return (char*)sys_call(&args);
80000312:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000315:	50                   	push   %eax
80000316:	e8 b1 fd ff ff       	call   800000cc <sys_call>
8000031b:	83 c4 04             	add    $0x4,%esp
}
8000031e:	c9                   	leave  
8000031f:	c3                   	ret    

80000320 <dup>:
 * @brief 在当前进程的打开文件表中分配新的一项指向该文件描述符对应的文件指针
 * 
 * @param file 需要被多次引用的文件指针的文件描述符
 * @return int 新的文件描述符
 */
int dup(int file) {
80000320:	55                   	push   %ebp
80000321:	89 e5                	mov    %esp,%ebp
80000323:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_dup;
80000326:	c7 45 ec 3a 00 00 00 	movl   $0x3a,-0x14(%ebp)
    args.arg0 = file;
8000032d:	8b 45 08             	mov    0x8(%ebp),%eax
80000330:	89 45 f0             	mov    %eax,-0x10(%ebp)

    return sys_call(&args);
80000333:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000336:	50                   	push   %eax
80000337:	e8 90 fd ff ff       	call   800000cc <sys_call>
8000033c:	83 c4 04             	add    $0x4,%esp
8000033f:	c9                   	leave  
80000340:	c3                   	ret    
