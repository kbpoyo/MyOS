
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf:     file format elf32-i386
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00003b14 memsz 0x00003b14 flags rwx
    LOAD off    0x00000000 vaddr 0x00014000 paddr 0x00014000 align 2**12
         filesz 0x00000000 memsz 0x0001ed90 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f6f  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000b68  00012f70  00012f70  00003f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000034  00013ae0  00013ae0  00004ae0  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0001ed90  00014000  00014000  00005000  2**12
                  ALLOC
  4 .debug_line   000019fe  00000000  00000000  00004b14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_line_str 00000656  00000000  00000000  00006512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   00004b6a  00000000  00000000  00006b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00001721  00000000  00000000  0000b6d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_aranges 000001e0  00000000  00000000  0000cdf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    0000100c  00000000  00000000  0000cfd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .comment      0000002b  00000000  00000000  0000dfe4  2**0
                  CONTENTS, READONLY
 11 .debug_frame  00001214  00000000  00000000  0000e010  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010012 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
000102ad l     F .text	0000000d down2
000102ba l     F .text	00000017 up2
00014000 l     O .bss	00000028 paddr_alloc
00015000 l     O .bss	00001000 kernel_page_dir_table
000102d1 l     F .text	0000005d addr_alloc_init
0001032e l     F .text	00000067 addr_alloc_page
00010395 l     F .text	00000061 addr_free_page
000103f6 l     F .text	00000066 show_mem_info
0001045c l     F .text	00000037 total_mem_size
00013ae0 l     O .data	00000030 kernal_map.1
00013028 l     O .rodata	0000000c __func__.0
00000000 l    df *ABS*	00000000 task.c
000105e7 l     F .text	0000003d list_node_init
00013108 l     O .rodata	0000000f __func__.9
00010624 l     F .text	0000002d list_node_next
00013168 l     O .rodata	0000000f __func__.3
00010651 l     F .text	00000047 list_init
00013118 l     O .rodata	0000000a __func__.8
00010698 l     F .text	00000035 list_is_empty
00013178 l     O .rodata	0000000e __func__.2
000106cd l     F .text	0000002d list_get_size
00013158 l     O .rodata	0000000e __func__.4
000106fa l     F .text	0000002c list_get_first
00013148 l     O .rodata	0000000f __func__.5
00010726 l     F .text	00000007 hlt
0001072d l     F .text	0000001a far_jump
00010747 l     F .text	00000017 write_tr
00016000 l     O .bss	00000190 task_manager
0001075e l     F .text	0000001f switch_to_tss
00010798 l     F .text	000000e5 tss_init
000130fc l     O .rodata	0000000a __func__.10
000161a0 l     O .bss	00000200 empty_task_stack
00010961 l     F .text	0000000a empty_task
00013124 l     O .rodata	0000000f __func__.7
00013134 l     O .rodata	00000011 __func__.6
00013188 l     O .rodata	0000000f __func__.1
00013198 l     O .rodata	00000010 __func__.0
00000000 l    df *ABS*	00000000 gdt.c
00010de1 l     F .text	00000028 lgdt
000163a0 l     O .bss	00010000 gdt_table
000263a0 l     O .bss	00008000 is_alloc
0002e3a0 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 idt.c
00010fd3 l     F .text	00000007 cli
00010fda l     F .text	00000007 sti
00010fe1 l     F .text	00000007 hlt
00010fe8 l     F .text	0000001d inb
00011005 l     F .text	00000021 outb
00011026 l     F .text	00000028 lidt
0001104e l     F .text	00000010 read_eflags
0001105e l     F .text	0000000b write_eflags
0002e3c0 l     O .bss	00000800 idt_table
00011069 l     F .text	000000e9 print_exception_fram
00011152 l     F .text	0000003e do_default_handler
000113dc l     F .text	00000047 gate_desc_set
00011463 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 time.c
0001180d l     F .text	00000021 outb
0002ebc0 l     O .bss	00000004 sys_tick
00011856 l     F .text	00000062 init_pit
00000000 l    df *ABS*	00000000 init.c
000118d0 l     F .text	00000007 sti
000135a8 l     O .rodata	0000000c __func__.0
0002ebe0 l     O .bss	000000b4 task_test_task_1
0002eca0 l     O .bss	000000b4 task_test_task_2
0002ed60 l     O .bss	00001000 test_task_1_stack
0002fd60 l     O .bss	00001000 test_task_2_stack
00030d60 l     O .bss	00000010 sem
00000000 l    df *ABS*	00000000 mutex.c
00011a15 l     F .text	00000047 list_init
00013660 l     O .rodata	0000000a __func__.1
00011a5c l     F .text	00000035 list_is_empty
0001366c l     O .rodata	0000000e __func__.0
00013654 l     O .rodata	0000000b __func__.2
00000000 l    df *ABS*	00000000 sem.c
00011c27 l     F .text	00000047 list_init
00013720 l     O .rodata	0000000a __func__.1
00011c6e l     F .text	00000035 list_is_empty
0001372c l     O .rodata	0000000e __func__.0
00013714 l     O .rodata	00000009 __func__.2
00000000 l    df *ABS*	00000000 test.c
00011df7 l     F .text	00000047 list_init
00013840 l     O .rodata	0000000a __func__.3
00011e3e l     F .text	0000002d list_get_size
0001384c l     O .rodata	0000000e __func__.2
00011e6b l     F .text	0000002c list_get_first
0001386c l     O .rodata	0000000f __func__.0
00011e97 l     F .text	0000002d list_get_last
0001385c l     O .rodata	0000000e __func__.1
00000000 l    df *ABS*	00000000 assert.c
0001219f l     F .text	00000007 hlt
00000000 l    df *ABS*	00000000 bitmap.c
0001393c l     O .rodata	0000000c __func__.3
00013948 l     O .rodata	0000000f __func__.2
00013958 l     O .rodata	0000000f __func__.1
00013968 l     O .rodata	00000013 __func__.0
00000000 l    df *ABS*	00000000 klib.c
00013b10 l     O .data	00000004 num_to_char.0
00000000 l    df *ABS*	00000000 list.c
00012a04 l     F .text	00000035 list_is_empty
00013a70 l     O .rodata	0000000e __func__.5
00012a39 l     F .text	0000002d list_get_size
00013aa8 l     O .rodata	0000000e __func__.2
00013a5c l     O .rodata	00000012 __func__.6
00013a80 l     O .rodata	00000011 __func__.4
00013a94 l     O .rodata	00000012 __func__.3
00013ab8 l     O .rodata	00000011 __func__.1
00013acc l     O .rodata	0000000c __func__.0
00000000 l    df *ABS*	00000000 log.c
00012daf l     F .text	0000001d inb
00012dcc l     F .text	00000021 outb
00030d70 l     O .bss	00000014 mutex
00012286 g     F .text	00000078 bitmap_get_bit
00012659 g     F .text	0000004f kernel_memcpy
00011669 g     F .text	00000098 idt_enable
00010afc g     F .text	0000000a task_current
00012af1 g     F .text	0000008f list_insert_last
00010b6e g     F .text	00000061 sys_yield
000112c4 g     F .text	0000001c do_handler_segment_not_present
00010a38 g     F .text	0000004b task_set_ready
00012406 g     F .text	00000021 bitmap_is_set
000117a0 g     F .text	0000000b idt_enable_global
000126a8 g     F .text	00000041 kernel_memset
00010081 g       .text	00000000 exception_handler_nmi
00010243 g       .text	00000000 exception_handler_virtual_exception
00012ded g     F .text	00000088 log_init
0001197c g     F .text	00000099 init_main
000101ee g       .text	00000000 exception_handler_alignment_check
00012522 g     F .text	00000047 kernel_strcpy
00011795 g     F .text	0000000b idt_disable_global
00013ad8 g       .rodata	00000000 s_data
00011423 g     F .text	00000040 idt_install
0001002a g       .text	00000000 exception_handler_unknown
0001009e g       .text	00000000 exception_handler_breakpoint
0001121c g     F .text	0000001c do_handler_overflow
00011350 g     F .text	0000001c do_handler_alignment_check
0001019b g       .text	00000000 exception_handler_general_protection
000112fc g     F .text	0000001c do_handler_general_protection
000113c0 g     F .text	0000001c do_handler_control_exception
00011dce g     F .text	00000029 sem_count
000111ac g     F .text	0000001c do_handler_divider
000122fe g     F .text	00000108 bitmap_set_bit
0001128c g     F .text	0000001c do_handler_double_fault
00011318 g     F .text	0000001c do_handler_page_fault
0001012f g       .text	00000000 exception_handler_double_fault
000117ab g     F .text	00000039 pic_send_eoi
00012c31 g     F .text	000000b5 list_remove_last
00010a2e g     F .text	0000000a task_first_task
00010000 g       .text	00000000 s_text
00011ce6 g     F .text	0000006b sem_wait
00010180 g       .text	00000000 exception_handler_stack_segment_fault
00010ec8 g     F .text	00000094 gdt_init
000113a4 g     F .text	0000001c do_handler_virtual_exception
000100bb g       .text	00000000 exception_handler_overflow
00010298 g       .text	00000000 simple_switch
0001027b g       .text	00000000 exception_handler_time
000111c8 g     F .text	0000001c do_handler_debug
00030d90 g     O .bss	00002000 stack
00010d81 g     F .text	00000060 sys_sleep
00011953 g     F .text	00000029 test_task_2
00011ec4 g     F .text	000002db list_test
00010260 g       .text	00000000 exception_handler_control_exception
000100d8 g       .text	00000000 exception_handler_bound_range
000114f6 g     F .text	00000173 idt_init
00011d51 g     F .text	0000007d sem_notify
00011254 g     F .text	0000001c do_handler_invalid_opcode
0001014a g       .text	00000000 exception_handler_invalid_tss
00011334 g     F .text	0000001c do_handler_fpu_error
000109e6 g     F .text	00000048 task_first_init
0001136c g     F .text	0000001c do_handler_machine_check
00012a66 g     F .text	0000008b list_insert_first
00010d36 g     F .text	0000004b task_set_wakeup
00010ace g     F .text	0000002e task_ready_first
00010047 g       .text	00000000 exception_handler_divider
00012569 g     F .text	00000051 kernel_strncpy
00032d90 g       .bss	00000000 mem_free_start
000118d7 g     F .text	00000053 kernel_init
00011ca3 g     F .text	00000043 sem_init
00010000 g       .text	00000000 _start
00012791 g     F .text	0000019d kernel_vsprintf
00010112 g       .text	00000000 exception_handler_device_unavailable
000100f5 g       .text	00000000 exception_handler_invalid_opcode
00011ade g     F .text	00000091 mutex_lock
00010209 g       .text	00000000 exception_handler_machine_check
000112a8 g     F .text	0000001c do_handler_invalid_tss
00011701 g     F .text	00000094 idt_disable
00010cda g     F .text	0000005c task_set_sleep
000111e4 g     F .text	0000001c do_handler_nmi
00011a91 g     F .text	0000004d mutex_init
0001192a g     F .text	00000029 test_task_1
00010226 g       .text	00000000 exception_handler_smd_exception
000121dc g     F .text	00000016 bitmap_byte_count
00011270 g     F .text	0000001c do_handler_device_unavailable
000117e4 g     F .text	00000018 idt_enter_protection
00010493 g     F .text	00000066 create_kernal_table
00010bcf g     F .text	0000010b task_slice_end
000126e9 g     F .text	00000084 kernel_memcmp
00011388 g     F .text	0000001c do_handler_smd_exception
000101b6 g       .text	00000000 exception_handler_page_fault
00011190 g     F .text	0000001c do_handler_unknown
000101d1 g       .text	00000000 exception_handler_fpu_error
0001077d g     F .text	0000001b task_switch_from_to
00011b6f g     F .text	000000b8 mutex_unlock
00010b06 g     F .text	00000068 task_switch
00012624 g     F .text	00000035 kernel_strlen
00010a83 g     F .text	0000004b task_set_unready
00010064 g       .text	00000000 exception_handler_debug
00010e09 g     F .text	000000bf segment_desc_set
00011238 g     F .text	0000001c do_handler_bound_range
00012b80 g     F .text	000000b1 list_remove_first
00013ad8 g       .rodata	00000000 e_text
000125ba g     F .text	0000006a kernel_strncmp
000121f2 g     F .text	00000094 bitmap_init
00010165 g       .text	00000000 exception_handler_segment_not_present
00012427 g     F .text	000000fb bitmap_alloc_nbits
0001096b g     F .text	0000007b task_manager_init
000104f9 g     F .text	000000ee memory_init
000121a6 g     F .text	00000036 pannic
000112e0 g     F .text	0000001c do_handler_stack_segment_fault
00011200 g     F .text	0000001c do_handler_breakpoint
00012e75 g     F .text	000000fa log_printf
0001087d g     F .text	000000e4 task_init
0001276d g     F .text	00000024 kernel_sprintf
00010f5c g     F .text	00000077 gdt_alloc_desc
0001292e g     F .text	000000d6 kernel_itoa
00012ce6 g     F .text	000000c9 list_remove
000117fc g     F .text	00000011 idt_leave_protection
0001182e g     F .text	00000028 do_handler_time
000118b8 g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
*            [&boot_info]
*    esp ->  [返回地址]
*   所以要想访问到&boot_info，则只需从当前esp的位置偏移+4字节即可
*/
_start:
    mov %esp, %ebp      //栈空间最好只用ebp来进行偏移访问
   10000:	89 e5                	mov    %esp,%ebp
    mov 0x4(%ebp), %eax //将&boot_info的值存入eax中
   10002:	8b 45 04             	mov    0x4(%ebp),%eax

    push %eax           //外部函数将参数压入栈中，再进行函数调用
   10005:	50                   	push   %eax
    call kernel_init    //调用内核初始化函数
   10006:	e8 cc 18 00 00       	call   118d7 <kernel_init>

    //完成内核初始化后，进行直接跳转，以替换cs寄存器中临时的内核代码段的选择子为此时内存中真正的内核代码段选择子
    //cs:KERNEL_SELECTOR_CS, ip:gdt_reload
    jmp $KERNEL_SELECTOR_CS, $gdt_reload    
   1000b:	ea 12 00 01 00 08 00 	ljmp   $0x8,$0x10012

00010012 <gdt_reload>:

gdt_reload:
    //替换其他段寄存器中临时的内核数据段的选择子为此时内存中真正的内核数据段的选择子
    mov $KERNEL_SELECTOR_DS, %ax
   10012:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10016:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10018:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001a:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001c:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001e:	8e e8                	mov    %eax,%gs

    //重新指定栈空间位置，不再使用0~0x7c00这部分空间
    //stack段已在下面预留了KERNEL_STACK_SIZE的空间大小，直接将最高地址赋值给esp，esp便可使用这片空间
    mov $(stack + KERNEL_STACK_SIZE), %esp
   10020:	bc 90 2d 03 00       	mov    $0x32d90,%esp

    //继续初始化内核
    //TODO:后序再来说明该函数的作用
    jmp init_main 
   10025:	e9 52 19 00 00       	jmp    1197c <init_main>

0001002a <exception_handler_unknown>:
//宏结束标志
.endm

//使用定义的异常宏 
//                |异常类型|       |IDT索引| |错误码|
exception_handler unknown,              -1, 0    //未知异常
   1002a:	6a 00                	push   $0x0
   1002c:	6a ff                	push   $0xffffffff
   1002e:	60                   	pusha  
   1002f:	1e                   	push   %ds
   10030:	06                   	push   %es
   10031:	0f a0                	push   %fs
   10033:	0f a8                	push   %gs
   10035:	54                   	push   %esp
   10036:	e8 55 11 00 00       	call   11190 <do_handler_unknown>
   1003b:	5c                   	pop    %esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider,              0,  0    //除0异常
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 54 11 00 00       	call   111ac <do_handler_divider>
   10058:	5c                   	pop    %esp
   10059:	0f a9                	pop    %gs
   1005b:	0f a1                	pop    %fs
   1005d:	07                   	pop    %es
   1005e:	1f                   	pop    %ds
   1005f:	61                   	popa   
   10060:	83 c4 08             	add    $0x8,%esp
   10063:	cf                   	iret   

00010064 <exception_handler_debug>:
exception_handler debug,                1,  0    //debug异常
   10064:	6a 00                	push   $0x0
   10066:	6a 01                	push   $0x1
   10068:	60                   	pusha  
   10069:	1e                   	push   %ds
   1006a:	06                   	push   %es
   1006b:	0f a0                	push   %fs
   1006d:	0f a8                	push   %gs
   1006f:	54                   	push   %esp
   10070:	e8 53 11 00 00       	call   111c8 <do_handler_debug>
   10075:	5c                   	pop    %esp
   10076:	0f a9                	pop    %gs
   10078:	0f a1                	pop    %fs
   1007a:	07                   	pop    %es
   1007b:	1f                   	pop    %ds
   1007c:	61                   	popa   
   1007d:	83 c4 08             	add    $0x8,%esp
   10080:	cf                   	iret   

00010081 <exception_handler_nmi>:
exception_handler nmi,                  2,  0
   10081:	6a 00                	push   $0x0
   10083:	6a 02                	push   $0x2
   10085:	60                   	pusha  
   10086:	1e                   	push   %ds
   10087:	06                   	push   %es
   10088:	0f a0                	push   %fs
   1008a:	0f a8                	push   %gs
   1008c:	54                   	push   %esp
   1008d:	e8 52 11 00 00       	call   111e4 <do_handler_nmi>
   10092:	5c                   	pop    %esp
   10093:	0f a9                	pop    %gs
   10095:	0f a1                	pop    %fs
   10097:	07                   	pop    %es
   10098:	1f                   	pop    %ds
   10099:	61                   	popa   
   1009a:	83 c4 08             	add    $0x8,%esp
   1009d:	cf                   	iret   

0001009e <exception_handler_breakpoint>:
exception_handler breakpoint,           3,  0
   1009e:	6a 00                	push   $0x0
   100a0:	6a 03                	push   $0x3
   100a2:	60                   	pusha  
   100a3:	1e                   	push   %ds
   100a4:	06                   	push   %es
   100a5:	0f a0                	push   %fs
   100a7:	0f a8                	push   %gs
   100a9:	54                   	push   %esp
   100aa:	e8 51 11 00 00       	call   11200 <do_handler_breakpoint>
   100af:	5c                   	pop    %esp
   100b0:	0f a9                	pop    %gs
   100b2:	0f a1                	pop    %fs
   100b4:	07                   	pop    %es
   100b5:	1f                   	pop    %ds
   100b6:	61                   	popa   
   100b7:	83 c4 08             	add    $0x8,%esp
   100ba:	cf                   	iret   

000100bb <exception_handler_overflow>:
exception_handler overflow,             4,  0
   100bb:	6a 00                	push   $0x0
   100bd:	6a 04                	push   $0x4
   100bf:	60                   	pusha  
   100c0:	1e                   	push   %ds
   100c1:	06                   	push   %es
   100c2:	0f a0                	push   %fs
   100c4:	0f a8                	push   %gs
   100c6:	54                   	push   %esp
   100c7:	e8 50 11 00 00       	call   1121c <do_handler_overflow>
   100cc:	5c                   	pop    %esp
   100cd:	0f a9                	pop    %gs
   100cf:	0f a1                	pop    %fs
   100d1:	07                   	pop    %es
   100d2:	1f                   	pop    %ds
   100d3:	61                   	popa   
   100d4:	83 c4 08             	add    $0x8,%esp
   100d7:	cf                   	iret   

000100d8 <exception_handler_bound_range>:
exception_handler bound_range,          5,  0
   100d8:	6a 00                	push   $0x0
   100da:	6a 05                	push   $0x5
   100dc:	60                   	pusha  
   100dd:	1e                   	push   %ds
   100de:	06                   	push   %es
   100df:	0f a0                	push   %fs
   100e1:	0f a8                	push   %gs
   100e3:	54                   	push   %esp
   100e4:	e8 4f 11 00 00       	call   11238 <do_handler_bound_range>
   100e9:	5c                   	pop    %esp
   100ea:	0f a9                	pop    %gs
   100ec:	0f a1                	pop    %fs
   100ee:	07                   	pop    %es
   100ef:	1f                   	pop    %ds
   100f0:	61                   	popa   
   100f1:	83 c4 08             	add    $0x8,%esp
   100f4:	cf                   	iret   

000100f5 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode,       6,  0
   100f5:	6a 00                	push   $0x0
   100f7:	6a 06                	push   $0x6
   100f9:	60                   	pusha  
   100fa:	1e                   	push   %ds
   100fb:	06                   	push   %es
   100fc:	0f a0                	push   %fs
   100fe:	0f a8                	push   %gs
   10100:	54                   	push   %esp
   10101:	e8 4e 11 00 00       	call   11254 <do_handler_invalid_opcode>
   10106:	5c                   	pop    %esp
   10107:	0f a9                	pop    %gs
   10109:	0f a1                	pop    %fs
   1010b:	07                   	pop    %es
   1010c:	1f                   	pop    %ds
   1010d:	61                   	popa   
   1010e:	83 c4 08             	add    $0x8,%esp
   10111:	cf                   	iret   

00010112 <exception_handler_device_unavailable>:
exception_handler device_unavailable,   7,  0
   10112:	6a 00                	push   $0x0
   10114:	6a 07                	push   $0x7
   10116:	60                   	pusha  
   10117:	1e                   	push   %ds
   10118:	06                   	push   %es
   10119:	0f a0                	push   %fs
   1011b:	0f a8                	push   %gs
   1011d:	54                   	push   %esp
   1011e:	e8 4d 11 00 00       	call   11270 <do_handler_device_unavailable>
   10123:	5c                   	pop    %esp
   10124:	0f a9                	pop    %gs
   10126:	0f a1                	pop    %fs
   10128:	07                   	pop    %es
   10129:	1f                   	pop    %ds
   1012a:	61                   	popa   
   1012b:	83 c4 08             	add    $0x8,%esp
   1012e:	cf                   	iret   

0001012f <exception_handler_double_fault>:
exception_handler double_fault,         8,  1
   1012f:	6a 08                	push   $0x8
   10131:	60                   	pusha  
   10132:	1e                   	push   %ds
   10133:	06                   	push   %es
   10134:	0f a0                	push   %fs
   10136:	0f a8                	push   %gs
   10138:	54                   	push   %esp
   10139:	e8 4e 11 00 00       	call   1128c <do_handler_double_fault>
   1013e:	5c                   	pop    %esp
   1013f:	0f a9                	pop    %gs
   10141:	0f a1                	pop    %fs
   10143:	07                   	pop    %es
   10144:	1f                   	pop    %ds
   10145:	61                   	popa   
   10146:	83 c4 08             	add    $0x8,%esp
   10149:	cf                   	iret   

0001014a <exception_handler_invalid_tss>:
exception_handler invalid_tss,          10, 1
   1014a:	6a 0a                	push   $0xa
   1014c:	60                   	pusha  
   1014d:	1e                   	push   %ds
   1014e:	06                   	push   %es
   1014f:	0f a0                	push   %fs
   10151:	0f a8                	push   %gs
   10153:	54                   	push   %esp
   10154:	e8 4f 11 00 00       	call   112a8 <do_handler_invalid_tss>
   10159:	5c                   	pop    %esp
   1015a:	0f a9                	pop    %gs
   1015c:	0f a1                	pop    %fs
   1015e:	07                   	pop    %es
   1015f:	1f                   	pop    %ds
   10160:	61                   	popa   
   10161:	83 c4 08             	add    $0x8,%esp
   10164:	cf                   	iret   

00010165 <exception_handler_segment_not_present>:
exception_handler segment_not_present,  11, 1
   10165:	6a 0b                	push   $0xb
   10167:	60                   	pusha  
   10168:	1e                   	push   %ds
   10169:	06                   	push   %es
   1016a:	0f a0                	push   %fs
   1016c:	0f a8                	push   %gs
   1016e:	54                   	push   %esp
   1016f:	e8 50 11 00 00       	call   112c4 <do_handler_segment_not_present>
   10174:	5c                   	pop    %esp
   10175:	0f a9                	pop    %gs
   10177:	0f a1                	pop    %fs
   10179:	07                   	pop    %es
   1017a:	1f                   	pop    %ds
   1017b:	61                   	popa   
   1017c:	83 c4 08             	add    $0x8,%esp
   1017f:	cf                   	iret   

00010180 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,  12, 1
   10180:	6a 0c                	push   $0xc
   10182:	60                   	pusha  
   10183:	1e                   	push   %ds
   10184:	06                   	push   %es
   10185:	0f a0                	push   %fs
   10187:	0f a8                	push   %gs
   10189:	54                   	push   %esp
   1018a:	e8 51 11 00 00       	call   112e0 <do_handler_stack_segment_fault>
   1018f:	5c                   	pop    %esp
   10190:	0f a9                	pop    %gs
   10192:	0f a1                	pop    %fs
   10194:	07                   	pop    %es
   10195:	1f                   	pop    %ds
   10196:	61                   	popa   
   10197:	83 c4 08             	add    $0x8,%esp
   1019a:	cf                   	iret   

0001019b <exception_handler_general_protection>:
exception_handler general_protection,   13, 1
   1019b:	6a 0d                	push   $0xd
   1019d:	60                   	pusha  
   1019e:	1e                   	push   %ds
   1019f:	06                   	push   %es
   101a0:	0f a0                	push   %fs
   101a2:	0f a8                	push   %gs
   101a4:	54                   	push   %esp
   101a5:	e8 52 11 00 00       	call   112fc <do_handler_general_protection>
   101aa:	5c                   	pop    %esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa   
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret   

000101b6 <exception_handler_page_fault>:
exception_handler page_fault,           14, 1
   101b6:	6a 0e                	push   $0xe
   101b8:	60                   	pusha  
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 53 11 00 00       	call   11318 <do_handler_page_fault>
   101c5:	5c                   	pop    %esp
   101c6:	0f a9                	pop    %gs
   101c8:	0f a1                	pop    %fs
   101ca:	07                   	pop    %es
   101cb:	1f                   	pop    %ds
   101cc:	61                   	popa   
   101cd:	83 c4 08             	add    $0x8,%esp
   101d0:	cf                   	iret   

000101d1 <exception_handler_fpu_error>:
exception_handler fpu_error,            16, 0
   101d1:	6a 00                	push   $0x0
   101d3:	6a 10                	push   $0x10
   101d5:	60                   	pusha  
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 52 11 00 00       	call   11334 <do_handler_fpu_error>
   101e2:	5c                   	pop    %esp
   101e3:	0f a9                	pop    %gs
   101e5:	0f a1                	pop    %fs
   101e7:	07                   	pop    %es
   101e8:	1f                   	pop    %ds
   101e9:	61                   	popa   
   101ea:	83 c4 08             	add    $0x8,%esp
   101ed:	cf                   	iret   

000101ee <exception_handler_alignment_check>:
exception_handler alignment_check,      17, 1
   101ee:	6a 11                	push   $0x11
   101f0:	60                   	pusha  
   101f1:	1e                   	push   %ds
   101f2:	06                   	push   %es
   101f3:	0f a0                	push   %fs
   101f5:	0f a8                	push   %gs
   101f7:	54                   	push   %esp
   101f8:	e8 53 11 00 00       	call   11350 <do_handler_alignment_check>
   101fd:	5c                   	pop    %esp
   101fe:	0f a9                	pop    %gs
   10200:	0f a1                	pop    %fs
   10202:	07                   	pop    %es
   10203:	1f                   	pop    %ds
   10204:	61                   	popa   
   10205:	83 c4 08             	add    $0x8,%esp
   10208:	cf                   	iret   

00010209 <exception_handler_machine_check>:
exception_handler machine_check,        18, 0
   10209:	6a 00                	push   $0x0
   1020b:	6a 12                	push   $0x12
   1020d:	60                   	pusha  
   1020e:	1e                   	push   %ds
   1020f:	06                   	push   %es
   10210:	0f a0                	push   %fs
   10212:	0f a8                	push   %gs
   10214:	54                   	push   %esp
   10215:	e8 52 11 00 00       	call   1136c <do_handler_machine_check>
   1021a:	5c                   	pop    %esp
   1021b:	0f a9                	pop    %gs
   1021d:	0f a1                	pop    %fs
   1021f:	07                   	pop    %es
   10220:	1f                   	pop    %ds
   10221:	61                   	popa   
   10222:	83 c4 08             	add    $0x8,%esp
   10225:	cf                   	iret   

00010226 <exception_handler_smd_exception>:
exception_handler smd_exception,        19, 0
   10226:	6a 00                	push   $0x0
   10228:	6a 13                	push   $0x13
   1022a:	60                   	pusha  
   1022b:	1e                   	push   %ds
   1022c:	06                   	push   %es
   1022d:	0f a0                	push   %fs
   1022f:	0f a8                	push   %gs
   10231:	54                   	push   %esp
   10232:	e8 51 11 00 00       	call   11388 <do_handler_smd_exception>
   10237:	5c                   	pop    %esp
   10238:	0f a9                	pop    %gs
   1023a:	0f a1                	pop    %fs
   1023c:	07                   	pop    %es
   1023d:	1f                   	pop    %ds
   1023e:	61                   	popa   
   1023f:	83 c4 08             	add    $0x8,%esp
   10242:	cf                   	iret   

00010243 <exception_handler_virtual_exception>:
exception_handler virtual_exception,    20, 0
   10243:	6a 00                	push   $0x0
   10245:	6a 14                	push   $0x14
   10247:	60                   	pusha  
   10248:	1e                   	push   %ds
   10249:	06                   	push   %es
   1024a:	0f a0                	push   %fs
   1024c:	0f a8                	push   %gs
   1024e:	54                   	push   %esp
   1024f:	e8 50 11 00 00       	call   113a4 <do_handler_virtual_exception>
   10254:	5c                   	pop    %esp
   10255:	0f a9                	pop    %gs
   10257:	0f a1                	pop    %fs
   10259:	07                   	pop    %es
   1025a:	1f                   	pop    %ds
   1025b:	61                   	popa   
   1025c:	83 c4 08             	add    $0x8,%esp
   1025f:	cf                   	iret   

00010260 <exception_handler_control_exception>:
exception_handler control_exception,    21, 1
   10260:	6a 15                	push   $0x15
   10262:	60                   	pusha  
   10263:	1e                   	push   %ds
   10264:	06                   	push   %es
   10265:	0f a0                	push   %fs
   10267:	0f a8                	push   %gs
   10269:	54                   	push   %esp
   1026a:	e8 51 11 00 00       	call   113c0 <do_handler_control_exception>
   1026f:	5c                   	pop    %esp
   10270:	0f a9                	pop    %gs
   10272:	0f a1                	pop    %fs
   10274:	07                   	pop    %es
   10275:	1f                   	pop    %ds
   10276:	61                   	popa   
   10277:	83 c4 08             	add    $0x8,%esp
   1027a:	cf                   	iret   

0001027b <exception_handler_time>:

//定时器的中断处理函数
exception_handler time,                 0x20, 0 
   1027b:	6a 00                	push   $0x0
   1027d:	6a 20                	push   $0x20
   1027f:	60                   	pusha  
   10280:	1e                   	push   %ds
   10281:	06                   	push   %es
   10282:	0f a0                	push   %fs
   10284:	0f a8                	push   %gs
   10286:	54                   	push   %esp
   10287:	e8 a2 15 00 00       	call   1182e <do_handler_time>
   1028c:	5c                   	pop    %esp
   1028d:	0f a9                	pop    %gs
   1028f:	0f a1                	pop    %fs
   10291:	07                   	pop    %es
   10292:	1f                   	pop    %ds
   10293:	61                   	popa   
   10294:	83 c4 08             	add    $0x8,%esp
   10297:	cf                   	iret   

00010298 <simple_switch>:
//TODO:该部分为另一种任务切换时cpu上下文环境的保存方法，并未被调用
    .text
    .global simple_switch
simple_switch:  //simple_switch(from, to)
    //1.获取参数
    mov 8(%esp), %edx   //获取 to, 地址(指针) --> 目标任务的栈空间对应的 esp 的值
   10298:	8b 54 24 08          	mov    0x8(%esp),%edx
    mov 4(%esp), %eax   //获取 from, 地址(指针) --> 当前任务的栈空间对应的 esp 的值
   1029c:	8b 44 24 04          	mov    0x4(%esp),%eax


    //2.被调用者保存当前任务的 ebp, ebx, esi, edi 到当前任务的栈中
    //eax, ecx, edx, eip, eflags 已由调用者压入当前任务的栈中
    push %ebp
   102a0:	55                   	push   %ebp
    push %ebx
   102a1:	53                   	push   %ebx
    push %esi
   102a2:	56                   	push   %esi
    push %edi
   102a3:	57                   	push   %edi

    //3.更新当前任务栈空间的 esp
    mov %esp, (%eax)
   102a4:	89 20                	mov    %esp,(%eax)

    //3.进行栈任务栈的切换
    mov (%edx), %esp
   102a6:	8b 22                	mov    (%edx),%esp


    //4.恢复切换后的任务状态，ebp, ebx, esi, edi 手动恢复
    //eax, ecx, edx, eip, eflags, 是在当前任务(c函数)调用simple_switch时已压入当前任务栈中，
    //调用 ret 后会自行弹出并恢复
    pop %edi
   102a8:	5f                   	pop    %edi
    pop %esi
   102a9:	5e                   	pop    %esi
    pop %ebx
   102aa:	5b                   	pop    %ebx
    pop %ebp
   102ab:	5d                   	pop    %ebp

    //5.恢复切换后的任务执行流，相当于此时 esp ->[eip]， 即 pop %eip
   102ac:	c3                   	ret    

000102ad <down2>:
 * 
 * @param size 
 * @param bound 一般取2的n次方
 * @return uint32_t 
 */
static inline uint32_t down2(uint32_t size, uint32_t bound) {
   102ad:	55                   	push   %ebp
   102ae:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);  
   102b0:	8b 45 0c             	mov    0xc(%ebp),%eax
   102b3:	f7 d8                	neg    %eax
   102b5:	23 45 08             	and    0x8(%ebp),%eax
}
   102b8:	5d                   	pop    %ebp
   102b9:	c3                   	ret    

000102ba <up2>:
 * 
 * @param size 
 * @param bound 一般取2的n次方
 * @return uint32_t 
 */
static inline uint32_t up2(uint32_t size, uint32_t bound) {
   102ba:	55                   	push   %ebp
   102bb:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   102bd:	8b 55 08             	mov    0x8(%ebp),%edx
   102c0:	8b 45 0c             	mov    0xc(%ebp),%eax
   102c3:	01 d0                	add    %edx,%eax
   102c5:	8d 50 ff             	lea    -0x1(%eax),%edx
   102c8:	8b 45 0c             	mov    0xc(%ebp),%eax
   102cb:	f7 d8                	neg    %eax
   102cd:	21 d0                	and    %edx,%eax
}
   102cf:	5d                   	pop    %ebp
   102d0:	c3                   	ret    

000102d1 <addr_alloc_init>:
 * @param start 管理内存的起始地址
 * @param size 管理内存的大小
 * @param page_size 管理的内存页的大小
 */
static void addr_alloc_init(addr_alloc_t *alloc, uint8_t *bits, uint32_t start,
                            uint32_t size, uint32_t page_size) {
   102d1:	55                   	push   %ebp
   102d2:	89 e5                	mov    %esp,%ebp
   102d4:	83 ec 08             	sub    $0x8,%esp
  mutex_init(&alloc->mutex);
   102d7:	8b 45 08             	mov    0x8(%ebp),%eax
   102da:	83 ec 0c             	sub    $0xc,%esp
   102dd:	50                   	push   %eax
   102de:	e8 ae 17 00 00       	call   11a91 <mutex_init>
   102e3:	83 c4 10             	add    $0x10,%esp
  alloc->start = start;
   102e6:	8b 45 08             	mov    0x8(%ebp),%eax
   102e9:	8b 55 10             	mov    0x10(%ebp),%edx
   102ec:	89 50 1c             	mov    %edx,0x1c(%eax)
  alloc->size = size;
   102ef:	8b 45 08             	mov    0x8(%ebp),%eax
   102f2:	8b 55 14             	mov    0x14(%ebp),%edx
   102f5:	89 50 20             	mov    %edx,0x20(%eax)
  alloc->page_size = page_size;
   102f8:	8b 45 08             	mov    0x8(%ebp),%eax
   102fb:	8b 55 18             	mov    0x18(%ebp),%edx
   102fe:	89 50 24             	mov    %edx,0x24(%eax)
  bitmap_init(&alloc->bitmap, bits, alloc->size / alloc->page_size, 0);
   10301:	8b 45 08             	mov    0x8(%ebp),%eax
   10304:	8b 40 20             	mov    0x20(%eax),%eax
   10307:	8b 55 08             	mov    0x8(%ebp),%edx
   1030a:	8b 4a 24             	mov    0x24(%edx),%ecx
   1030d:	ba 00 00 00 00       	mov    $0x0,%edx
   10312:	f7 f1                	div    %ecx
   10314:	89 c2                	mov    %eax,%edx
   10316:	8b 45 08             	mov    0x8(%ebp),%eax
   10319:	83 c0 14             	add    $0x14,%eax
   1031c:	6a 00                	push   $0x0
   1031e:	52                   	push   %edx
   1031f:	ff 75 0c             	push   0xc(%ebp)
   10322:	50                   	push   %eax
   10323:	e8 ca 1e 00 00       	call   121f2 <bitmap_init>
   10328:	83 c4 10             	add    $0x10,%esp
}
   1032b:	90                   	nop
   1032c:	c9                   	leave  
   1032d:	c3                   	ret    

0001032e <addr_alloc_page>:
 *
 * @param alloc
 * @param page_count 申请页的数量
 * @return uint32_t 申请的第一个页的起始地址
 */
static uint32_t addr_alloc_page(addr_alloc_t *alloc, int page_count) {
   1032e:	55                   	push   %ebp
   1032f:	89 e5                	mov    %esp,%ebp
   10331:	83 ec 18             	sub    $0x18,%esp
  uint32_t addr = 0;  // 记录分配的页的起始地址
   10334:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  mutex_lock(&alloc->mutex);
   1033b:	8b 45 08             	mov    0x8(%ebp),%eax
   1033e:	83 ec 0c             	sub    $0xc,%esp
   10341:	50                   	push   %eax
   10342:	e8 97 17 00 00       	call   11ade <mutex_lock>
   10347:	83 c4 10             	add    $0x10,%esp

  // 在位图中取连续的page_count个页进行分配
  int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   1034a:	8b 45 08             	mov    0x8(%ebp),%eax
   1034d:	83 c0 14             	add    $0x14,%eax
   10350:	83 ec 04             	sub    $0x4,%esp
   10353:	ff 75 0c             	push   0xc(%ebp)
   10356:	6a 00                	push   $0x0
   10358:	50                   	push   %eax
   10359:	e8 c9 20 00 00       	call   12427 <bitmap_alloc_nbits>
   1035e:	83 c4 10             	add    $0x10,%esp
   10361:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (page_count >= 0) {
   10364:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10368:	78 17                	js     10381 <addr_alloc_page+0x53>
    // 计算出申请到的第一个页的起始地址
    addr = alloc->start + page_index * alloc->page_size;
   1036a:	8b 45 08             	mov    0x8(%ebp),%eax
   1036d:	8b 48 1c             	mov    0x1c(%eax),%ecx
   10370:	8b 45 08             	mov    0x8(%ebp),%eax
   10373:	8b 50 24             	mov    0x24(%eax),%edx
   10376:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10379:	0f af c2             	imul   %edx,%eax
   1037c:	01 c8                	add    %ecx,%eax
   1037e:	89 45 f4             	mov    %eax,-0xc(%ebp)
  }

  mutex_unlock(&alloc->mutex);
   10381:	8b 45 08             	mov    0x8(%ebp),%eax
   10384:	83 ec 0c             	sub    $0xc,%esp
   10387:	50                   	push   %eax
   10388:	e8 e2 17 00 00       	call   11b6f <mutex_unlock>
   1038d:	83 c4 10             	add    $0x10,%esp

  return addr;
   10390:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   10393:	c9                   	leave  
   10394:	c3                   	ret    

00010395 <addr_free_page>:
 *
 * @param alloc
 * @param addr 第一个内存页的起始地址
 * @param page_count 内存页的数量
 */
static void addr_free_page(addr_alloc_t *alloc, uint32_t addr, int page_count) {
   10395:	55                   	push   %ebp
   10396:	89 e5                	mov    %esp,%ebp
   10398:	53                   	push   %ebx
   10399:	83 ec 14             	sub    $0x14,%esp
  mutex_lock(&alloc->mutex);
   1039c:	8b 45 08             	mov    0x8(%ebp),%eax
   1039f:	83 ec 0c             	sub    $0xc,%esp
   103a2:	50                   	push   %eax
   103a3:	e8 36 17 00 00       	call   11ade <mutex_lock>
   103a8:	83 c4 10             	add    $0x10,%esp

  // 计算出第一个页在位图中的索引
  int page_index = (addr - alloc->start) / alloc->page_size;
   103ab:	8b 45 08             	mov    0x8(%ebp),%eax
   103ae:	8b 50 1c             	mov    0x1c(%eax),%edx
   103b1:	8b 45 0c             	mov    0xc(%ebp),%eax
   103b4:	29 d0                	sub    %edx,%eax
   103b6:	89 c1                	mov    %eax,%ecx
   103b8:	8b 45 08             	mov    0x8(%ebp),%eax
   103bb:	8b 58 24             	mov    0x24(%eax),%ebx
   103be:	89 c8                	mov    %ecx,%eax
   103c0:	ba 00 00 00 00       	mov    $0x0,%edx
   103c5:	f7 f3                	div    %ebx
   103c7:	89 45 f4             	mov    %eax,-0xc(%ebp)

  bitmap_set_bit(&alloc->bitmap, page_index, page_count, 0);
   103ca:	8b 45 08             	mov    0x8(%ebp),%eax
   103cd:	83 c0 14             	add    $0x14,%eax
   103d0:	6a 00                	push   $0x0
   103d2:	ff 75 10             	push   0x10(%ebp)
   103d5:	ff 75 f4             	push   -0xc(%ebp)
   103d8:	50                   	push   %eax
   103d9:	e8 20 1f 00 00       	call   122fe <bitmap_set_bit>
   103de:	83 c4 10             	add    $0x10,%esp

  mutex_unlock(&alloc->mutex);
   103e1:	8b 45 08             	mov    0x8(%ebp),%eax
   103e4:	83 ec 0c             	sub    $0xc,%esp
   103e7:	50                   	push   %eax
   103e8:	e8 82 17 00 00       	call   11b6f <mutex_unlock>
   103ed:	83 c4 10             	add    $0x10,%esp
}
   103f0:	90                   	nop
   103f1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   103f4:	c9                   	leave  
   103f5:	c3                   	ret    

000103f6 <show_mem_info>:
/**
 * @brief  打印1m以内内存的可用空间
 * 
 * @param boot_info 
 */
static void show_mem_info(boot_info_t *boot_info) {
   103f6:	55                   	push   %ebp
   103f7:	89 e5                	mov    %esp,%ebp
   103f9:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:");
   103fc:	83 ec 0c             	sub    $0xc,%esp
   103ff:	68 70 2f 01 00       	push   $0x12f70
   10404:	e8 6c 2a 00 00       	call   12e75 <log_printf>
   10409:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   1040c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10413:	eb 29                	jmp    1043e <show_mem_info+0x48>
        log_printf("[%d]: 0x%x - 0x%x", i, boot_info->ram_region_cfg[i].start, boot_info->ram_region_cfg[i].size);
   10415:	8b 45 08             	mov    0x8(%ebp),%eax
   10418:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1041b:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   1041f:	8b 45 08             	mov    0x8(%ebp),%eax
   10422:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   10425:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   10428:	52                   	push   %edx
   10429:	50                   	push   %eax
   1042a:	ff 75 f4             	push   -0xc(%ebp)
   1042d:	68 7c 2f 01 00       	push   $0x12f7c
   10432:	e8 3e 2a 00 00       	call   12e75 <log_printf>
   10437:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   1043a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1043e:	8b 45 08             	mov    0x8(%ebp),%eax
   10441:	8b 40 50             	mov    0x50(%eax),%eax
   10444:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   10447:	7c cc                	jl     10415 <show_mem_info+0x1f>
    }

    log_printf("");
   10449:	83 ec 0c             	sub    $0xc,%esp
   1044c:	68 8e 2f 01 00       	push   $0x12f8e
   10451:	e8 1f 2a 00 00       	call   12e75 <log_printf>
   10456:	83 c4 10             	add    $0x10,%esp
}
   10459:	90                   	nop
   1045a:	c9                   	leave  
   1045b:	c3                   	ret    

0001045c <total_mem_size>:
 * @brief  计算总的可用内存空间大小
 * 
 * @param boot_info 
 * @return uint32_t 
 */
static uint32_t total_mem_size(boot_info_t *boot_info) {
   1045c:	55                   	push   %ebp
   1045d:	89 e5                	mov    %esp,%ebp
   1045f:	83 ec 10             	sub    $0x10,%esp
    uint32_t mem_size = 0;
   10462:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   10469:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   10470:	eb 11                	jmp    10483 <total_mem_size+0x27>
        mem_size += boot_info->ram_region_cfg[i].size;
   10472:	8b 45 08             	mov    0x8(%ebp),%eax
   10475:	8b 55 f8             	mov    -0x8(%ebp),%edx
   10478:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
   1047c:	01 45 fc             	add    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   1047f:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   10483:	8b 45 08             	mov    0x8(%ebp),%eax
   10486:	8b 40 50             	mov    0x50(%eax),%eax
   10489:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   1048c:	7c e4                	jl     10472 <total_mem_size+0x16>
    }

    return mem_size;
   1048e:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10491:	c9                   	leave  
   10492:	c3                   	ret    

00010493 <create_kernal_table>:

//TODO:编写函数注释
void create_kernal_table(void) {
   10493:	55                   	push   %ebp
   10494:	89 e5                	mov    %esp,%ebp
   10496:	83 ec 20             	sub    $0x20,%esp
    {&s_text, &e_text, &s_text, 0},                 //只读段的映射关系(内核.text和.rodata段)
    {&s_data, (void*)MEM_EBDA_START, &s_data, 0}    //可读写段的映射关系，一直到bios的拓展数据区(内核.data与.bss段再加上剩余的可用数据区域)

  };

  for (int i = 0; i < sizeof(kernal_map) / sizeof(kernal_map[0]); ++i) {
   10499:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   104a0:	eb 4b                	jmp    104ed <create_kernal_table+0x5a>
    memory_map_t *map = kernal_map + i;
   104a2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   104a5:	c1 e0 04             	shl    $0x4,%eax
   104a8:	05 e0 3a 01 00       	add    $0x13ae0,%eax
   104ad:	89 45 f8             	mov    %eax,-0x8(%ebp)

    //将虚拟地址的起始地址按页大小4kb对齐，为了不丢失原有的虚拟地址空间，所以向下对齐vstart
    uint32_t vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   104b0:	8b 45 f8             	mov    -0x8(%ebp),%eax
   104b3:	8b 00                	mov    (%eax),%eax
   104b5:	68 00 10 00 00       	push   $0x1000
   104ba:	50                   	push   %eax
   104bb:	e8 ed fd ff ff       	call   102ad <down2>
   104c0:	83 c4 08             	add    $0x8,%esp
   104c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    //将虚拟地址的结束地址按页大小4kb对齐, 为了不丢失原有的虚拟地址空间，所以向上对齐vend
    uint32_t vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   104c6:	8b 45 f8             	mov    -0x8(%ebp),%eax
   104c9:	8b 40 04             	mov    0x4(%eax),%eax
   104cc:	68 00 10 00 00       	push   $0x1000
   104d1:	50                   	push   %eax
   104d2:	e8 e3 fd ff ff       	call   102ba <up2>
   104d7:	83 c4 08             	add    $0x8,%esp
   104da:	89 45 f0             	mov    %eax,-0x10(%ebp)
    //计算该虚拟空间需要的页数
    int page_count = (vend - vstart) / MEM_PAGE_SIZE;
   104dd:	8b 45 f0             	mov    -0x10(%ebp),%eax
   104e0:	2b 45 f4             	sub    -0xc(%ebp),%eax
   104e3:	c1 e8 0c             	shr    $0xc,%eax
   104e6:	89 45 ec             	mov    %eax,-0x14(%ebp)
  for (int i = 0; i < sizeof(kernal_map) / sizeof(kernal_map[0]); ++i) {
   104e9:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   104ed:	8b 45 fc             	mov    -0x4(%ebp),%eax
   104f0:	83 f8 02             	cmp    $0x2,%eax
   104f3:	76 ad                	jbe    104a2 <create_kernal_table+0xf>


  }
}
   104f5:	90                   	nop
   104f6:	90                   	nop
   104f7:	c9                   	leave  
   104f8:	c3                   	ret    

000104f9 <memory_init>:
/**
 * @brief  初始化化内存
 *
 * @param boot_info cpu在实模式下检测到的可用内存对象
 */
void memory_init(boot_info_t *boot_info) {
   104f9:	55                   	push   %ebp
   104fa:	89 e5                	mov    %esp,%ebp
   104fc:	83 ec 18             	sub    $0x18,%esp

  
    //声明紧邻在内核bss段后面的空间地址，用于存储位图，该变量定义在kernel.lds中
    extern char mem_free_start;

    log_printf("memory init");
   104ff:	83 ec 0c             	sub    $0xc,%esp
   10502:	68 8f 2f 01 00       	push   $0x12f8f
   10507:	e8 69 29 00 00       	call   12e75 <log_printf>
   1050c:	83 c4 10             	add    $0x10,%esp

    log_printf("mem_free_start: %d", mem_free_start);
   1050f:	0f b6 05 90 2d 03 00 	movzbl 0x32d90,%eax
   10516:	0f be c0             	movsbl %al,%eax
   10519:	83 ec 08             	sub    $0x8,%esp
   1051c:	50                   	push   %eax
   1051d:	68 9b 2f 01 00       	push   $0x12f9b
   10522:	e8 4e 29 00 00       	call   12e75 <log_printf>
   10527:	83 c4 10             	add    $0x10,%esp

    show_mem_info(boot_info);
   1052a:	83 ec 0c             	sub    $0xc,%esp
   1052d:	ff 75 08             	push   0x8(%ebp)
   10530:	e8 c1 fe ff ff       	call   103f6 <show_mem_info>
   10535:	83 c4 10             	add    $0x10,%esp
    
    //去除保护模式下1mb大小后可用的内存空间大小
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   10538:	83 ec 0c             	sub    $0xc,%esp
   1053b:	ff 75 08             	push   0x8(%ebp)
   1053e:	e8 19 ff ff ff       	call   1045c <total_mem_size>
   10543:	83 c4 10             	add    $0x10,%esp
   10546:	2d 00 00 10 00       	sub    $0x100000,%eax
   1054b:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将可用空间大小下调到页大小的整数倍
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);
   1054e:	83 ec 08             	sub    $0x8,%esp
   10551:	68 00 10 00 00       	push   $0x1000
   10556:	ff 75 f4             	push   -0xc(%ebp)
   10559:	e8 4f fd ff ff       	call   102ad <down2>
   1055e:	83 c4 10             	add    $0x10,%esp
   10561:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    log_printf("free memory: 0x%x, size: 0x%x", MEM_EXT_START, mem_up1MB_free);
   10564:	83 ec 04             	sub    $0x4,%esp
   10567:	ff 75 f4             	push   -0xc(%ebp)
   1056a:	68 00 00 10 00       	push   $0x100000
   1056f:	68 ae 2f 01 00       	push   $0x12fae
   10574:	e8 fc 28 00 00       	call   12e75 <log_printf>
   10579:	83 c4 10             	add    $0x10,%esp

    //mem_free_start被分配的地址在链接文件中定义，紧邻着内核的.bss段
    uint8_t *mem_free = (uint8_t*)&mem_free_start;
   1057c:	c7 45 f0 90 2d 03 00 	movl   $0x32d90,-0x10(%ebp)

    //用paddr_alloc，内存页分配对象管理1mb以上的所有空闲空间，页大小为MEM_PAGE_SIZE=4kb
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   10583:	83 ec 0c             	sub    $0xc,%esp
   10586:	68 00 10 00 00       	push   $0x1000
   1058b:	ff 75 f4             	push   -0xc(%ebp)
   1058e:	68 00 00 10 00       	push   $0x100000
   10593:	ff 75 f0             	push   -0x10(%ebp)
   10596:	68 00 40 01 00       	push   $0x14000
   1059b:	e8 31 fd ff ff       	call   102d1 <addr_alloc_init>
   105a0:	83 c4 20             	add    $0x20,%esp

    //跳过存储位图的内存区域, 位图的每一位表示一个页，计算位图所站的字节数即可跳过该区域
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);  
   105a3:	a1 20 40 01 00       	mov    0x14020,%eax
   105a8:	c1 e8 0c             	shr    $0xc,%eax
   105ab:	83 ec 0c             	sub    $0xc,%esp
   105ae:	50                   	push   %eax
   105af:	e8 28 1c 00 00       	call   121dc <bitmap_byte_count>
   105b4:	83 c4 10             	add    $0x10,%esp
   105b7:	01 45 f0             	add    %eax,-0x10(%ebp)

    //判断mem_free是否已越过可用数据区
    ASSERT(mem_free < (uint8_t*)MEM_EBDA_START);
   105ba:	81 7d f0 ff fb 09 00 	cmpl   $0x9fbff,-0x10(%ebp)
   105c1:	76 1c                	jbe    105df <memory_init+0xe6>
   105c3:	68 cc 2f 01 00       	push   $0x12fcc
   105c8:	68 28 30 01 00       	push   $0x13028
   105cd:	68 b3 00 00 00       	push   $0xb3
   105d2:	68 f0 2f 01 00       	push   $0x12ff0
   105d7:	e8 ca 1b 00 00       	call   121a6 <pannic>
   105dc:	83 c4 10             	add    $0x10,%esp
    
    //创建内核的页表映射
    create_kernal_table();
   105df:	e8 af fe ff ff       	call   10493 <create_kernal_table>
   105e4:	90                   	nop
   105e5:	c9                   	leave  
   105e6:	c3                   	ret    

000105e7 <list_node_init>:
    list_node_t * first;
    list_node_t * last;
    int size;
}list_t;

static inline void list_node_init(list_node_t *node) {
   105e7:	55                   	push   %ebp
   105e8:	89 e5                	mov    %esp,%ebp
   105ea:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   105ed:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   105f1:	75 19                	jne    1060c <list_node_init+0x25>
   105f3:	68 34 30 01 00       	push   $0x13034
   105f8:	68 08 31 01 00       	push   $0x13108
   105fd:	6a 20                	push   $0x20
   105ff:	68 4c 30 01 00       	push   $0x1304c
   10604:	e8 9d 1b 00 00       	call   121a6 <pannic>
   10609:	83 c4 10             	add    $0x10,%esp
    node->pre = node->next = (list_node_t*)0;
   1060c:	8b 45 08             	mov    0x8(%ebp),%eax
   1060f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   10616:	8b 45 08             	mov    0x8(%ebp),%eax
   10619:	8b 50 04             	mov    0x4(%eax),%edx
   1061c:	8b 45 08             	mov    0x8(%ebp),%eax
   1061f:	89 10                	mov    %edx,(%eax)
}
   10621:	90                   	nop
   10622:	c9                   	leave  
   10623:	c3                   	ret    

00010624 <list_node_next>:
    ASSERT(node != (list_node_t*)0);

    return node->pre;
}

static inline list_node_t *list_node_next(list_node_t *node) {
   10624:	55                   	push   %ebp
   10625:	89 e5                	mov    %esp,%ebp
   10627:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   1062a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1062e:	75 19                	jne    10649 <list_node_next+0x25>
   10630:	68 34 30 01 00       	push   $0x13034
   10635:	68 68 31 01 00       	push   $0x13168
   1063a:	6a 2b                	push   $0x2b
   1063c:	68 4c 30 01 00       	push   $0x1304c
   10641:	e8 60 1b 00 00       	call   121a6 <pannic>
   10646:	83 c4 10             	add    $0x10,%esp

    return node->next;
   10649:	8b 45 08             	mov    0x8(%ebp),%eax
   1064c:	8b 40 04             	mov    0x4(%eax),%eax
}
   1064f:	c9                   	leave  
   10650:	c3                   	ret    

00010651 <list_init>:

static inline void list_init(list_t *list) {
   10651:	55                   	push   %ebp
   10652:	89 e5                	mov    %esp,%ebp
   10654:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10657:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1065b:	75 19                	jne    10676 <list_init+0x25>
   1065d:	68 8a 30 01 00       	push   $0x1308a
   10662:	68 18 31 01 00       	push   $0x13118
   10667:	6a 31                	push   $0x31
   10669:	68 4c 30 01 00       	push   $0x1304c
   1066e:	e8 33 1b 00 00       	call   121a6 <pannic>
   10673:	83 c4 10             	add    $0x10,%esp

    list->first = list->last = (list_node_t*)0;
   10676:	8b 45 08             	mov    0x8(%ebp),%eax
   10679:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   10680:	8b 45 08             	mov    0x8(%ebp),%eax
   10683:	8b 50 04             	mov    0x4(%eax),%edx
   10686:	8b 45 08             	mov    0x8(%ebp),%eax
   10689:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   1068b:	8b 45 08             	mov    0x8(%ebp),%eax
   1068e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   10695:	90                   	nop
   10696:	c9                   	leave  
   10697:	c3                   	ret    

00010698 <list_is_empty>:

static inline int list_is_empty(list_t *list) {
   10698:	55                   	push   %ebp
   10699:	89 e5                	mov    %esp,%ebp
   1069b:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1069e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   106a2:	75 19                	jne    106bd <list_is_empty+0x25>
   106a4:	68 8a 30 01 00       	push   $0x1308a
   106a9:	68 78 31 01 00       	push   $0x13178
   106ae:	6a 38                	push   $0x38
   106b0:	68 4c 30 01 00       	push   $0x1304c
   106b5:	e8 ec 1a 00 00       	call   121a6 <pannic>
   106ba:	83 c4 10             	add    $0x10,%esp

    return list->size == 0;
   106bd:	8b 45 08             	mov    0x8(%ebp),%eax
   106c0:	8b 40 08             	mov    0x8(%eax),%eax
   106c3:	85 c0                	test   %eax,%eax
   106c5:	0f 94 c0             	sete   %al
   106c8:	0f b6 c0             	movzbl %al,%eax
}
   106cb:	c9                   	leave  
   106cc:	c3                   	ret    

000106cd <list_get_size>:

static inline int list_get_size(list_t *list) {
   106cd:	55                   	push   %ebp
   106ce:	89 e5                	mov    %esp,%ebp
   106d0:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   106d3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   106d7:	75 19                	jne    106f2 <list_get_size+0x25>
   106d9:	68 8a 30 01 00       	push   $0x1308a
   106de:	68 58 31 01 00       	push   $0x13158
   106e3:	6a 3e                	push   $0x3e
   106e5:	68 4c 30 01 00       	push   $0x1304c
   106ea:	e8 b7 1a 00 00       	call   121a6 <pannic>
   106ef:	83 c4 10             	add    $0x10,%esp

    return list->size;
   106f2:	8b 45 08             	mov    0x8(%ebp),%eax
   106f5:	8b 40 08             	mov    0x8(%eax),%eax
}
   106f8:	c9                   	leave  
   106f9:	c3                   	ret    

000106fa <list_get_first>:

static inline list_node_t *list_get_first(list_t *list) {
   106fa:	55                   	push   %ebp
   106fb:	89 e5                	mov    %esp,%ebp
   106fd:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   10700:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10704:	75 19                	jne    1071f <list_get_first+0x25>
   10706:	68 8a 30 01 00       	push   $0x1308a
   1070b:	68 48 31 01 00       	push   $0x13148
   10710:	6a 44                	push   $0x44
   10712:	68 4c 30 01 00       	push   $0x1304c
   10717:	e8 8a 1a 00 00       	call   121a6 <pannic>
   1071c:	83 c4 10             	add    $0x10,%esp

    return list->first;
   1071f:	8b 45 08             	mov    0x8(%ebp),%eax
   10722:	8b 00                	mov    (%eax),%eax
}
   10724:	c9                   	leave  
   10725:	c3                   	ret    

00010726 <hlt>:
/**
 * @brief  暂停cpu的运行,ip寄存器指向下一条指令
 *         此时cpu可以接收中断
 *
 */
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   10726:	55                   	push   %ebp
   10727:	89 e5                	mov    %esp,%ebp
   10729:	f4                   	hlt    
   1072a:	90                   	nop
   1072b:	5d                   	pop    %ebp
   1072c:	c3                   	ret    

0001072d <far_jump>:
 * @brief  远跳转，当跳转发生在TSS段之间时，cpu将会保存状态到当前TR寄存器指向的TSS段
 *
 * @param selector 选择子
 * @param offset 跳转的偏移量
 */
static inline void far_jump(uint32_t selector, uint32_t offset) {
   1072d:	55                   	push   %ebp
   1072e:	89 e5                	mov    %esp,%ebp
   10730:	83 ec 10             	sub    $0x10,%esp
  // 传入远跳转需要的参数, 即cs = selector, eip = offset 
  uint32_t addr[] = {offset, selector};  
   10733:	8b 45 0c             	mov    0xc(%ebp),%eax
   10736:	89 45 f8             	mov    %eax,-0x8(%ebp)
   10739:	8b 45 08             	mov    0x8(%ebp),%eax
   1073c:	89 45 fc             	mov    %eax,-0x4(%ebp)

  __asm__ __volatile__("ljmpl *(%[a])" : : [a] "r"(addr));
   1073f:	8d 45 f8             	lea    -0x8(%ebp),%eax
   10742:	ff 28                	ljmp   *(%eax)
}
   10744:	90                   	nop
   10745:	c9                   	leave  
   10746:	c3                   	ret    

00010747 <write_tr>:
 * @brief   写入当前任务的TSS段描述符的选择子到TR寄存器中，告诉cpu当前段的TSS位置
 *          以便在进行任务切换时，将状态保存到该TSS段中
 * 
 * @param tss_selector 准备运行的任务的TSS段的选择子
 */
static inline void write_tr(uint16_t tss_selector) {
   10747:	55                   	push   %ebp
   10748:	89 e5                	mov    %esp,%ebp
   1074a:	83 ec 04             	sub    $0x4,%esp
   1074d:	8b 45 08             	mov    0x8(%ebp),%eax
   10750:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  __asm__ __volatile__("ltr %[v]" : : [v]"r"(tss_selector));
   10754:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   10758:	0f 00 d8             	ltr    %ax
}
   1075b:	90                   	nop
   1075c:	c9                   	leave  
   1075d:	c3                   	ret    

0001075e <switch_to_tss>:

//定义全局唯一的任务管理器对象
static task_manager_t task_manager;


static void switch_to_tss(uint16_t tss_selector) {
   1075e:	55                   	push   %ebp
   1075f:	89 e5                	mov    %esp,%ebp
   10761:	83 ec 04             	sub    $0x4,%esp
   10764:	8b 45 08             	mov    0x8(%ebp),%eax
   10767:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    //进行远跳转，让cpu访问该tss段的描述符，cpu将重启到之前运行该tss对应的任务的状态继续运行该任务
    far_jump(tss_selector, 0);
   1076b:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   1076f:	6a 00                	push   $0x0
   10771:	50                   	push   %eax
   10772:	e8 b6 ff ff ff       	call   1072d <far_jump>
   10777:	83 c4 08             	add    $0x8,%esp
}
   1077a:	90                   	nop
   1077b:	c9                   	leave  
   1077c:	c3                   	ret    

0001077d <task_switch_from_to>:
 * @brief  将任务从from切换到to
 * 
 * @param from 切换前的任务
 * @param to 切换后的任务
 */
void task_switch_from_to(task_t *from, task_t *to) {
   1077d:	55                   	push   %ebp
   1077e:	89 e5                	mov    %esp,%ebp
    //跳转到对应的tss段读取并恢复cpu任务状态
    switch_to_tss(to->tss_selector);
   10780:	8b 45 0c             	mov    0xc(%ebp),%eax
   10783:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
   10789:	0f b7 c0             	movzwl %ax,%eax
   1078c:	50                   	push   %eax
   1078d:	e8 cc ff ff ff       	call   1075e <switch_to_tss>
   10792:	83 c4 04             	add    $0x4,%esp
}
   10795:	90                   	nop
   10796:	c9                   	leave  
   10797:	c3                   	ret    

00010798 <tss_init>:
 * 
 * @param task 需要初始化的任务对象
 * @param entry 任务入口地址
 * @param esp 任务所用的栈顶指针
 */
static void tss_init(task_t *task, uint32_t entry, uint32_t esp) {
   10798:	55                   	push   %ebp
   10799:	89 e5                	mov    %esp,%ebp
   1079b:	83 ec 18             	sub    $0x18,%esp

    //1.将tss段的值置空
    kernel_memset(&task->tss, 0, sizeof(task->tss));
   1079e:	8b 45 08             	mov    0x8(%ebp),%eax
   107a1:	83 c0 48             	add    $0x48,%eax
   107a4:	83 ec 04             	sub    $0x4,%esp
   107a7:	6a 68                	push   $0x68
   107a9:	6a 00                	push   $0x0
   107ab:	50                   	push   %eax
   107ac:	e8 f7 1e 00 00       	call   126a8 <kernel_memset>
   107b1:	83 c4 10             	add    $0x10,%esp

    //2.设置eip，即任务的起始地址
    task->tss.eip = entry;
   107b4:	8b 45 08             	mov    0x8(%ebp),%eax
   107b7:	8b 55 0c             	mov    0xc(%ebp),%edx
   107ba:	89 50 68             	mov    %edx,0x68(%eax)

    //3.根据任务的特权级设置任务所使用的栈空间
    task->tss.esp = task->tss.esp0 = esp;
   107bd:	8b 45 08             	mov    0x8(%ebp),%eax
   107c0:	8b 55 10             	mov    0x10(%ebp),%edx
   107c3:	89 50 4c             	mov    %edx,0x4c(%eax)
   107c6:	8b 45 08             	mov    0x8(%ebp),%eax
   107c9:	8b 50 4c             	mov    0x4c(%eax),%edx
   107cc:	8b 45 08             	mov    0x8(%ebp),%eax
   107cf:	89 90 80 00 00 00    	mov    %edx,0x80(%eax)

    //4.平坦模型，初始化栈空间段寄存器
    task->tss.ss = task->tss.ss0 = KERNEL_SELECTOR_DS;
   107d5:	8b 45 08             	mov    0x8(%ebp),%eax
   107d8:	c7 40 50 10 00 00 00 	movl   $0x10,0x50(%eax)
   107df:	8b 45 08             	mov    0x8(%ebp),%eax
   107e2:	8b 50 50             	mov    0x50(%eax),%edx
   107e5:	8b 45 08             	mov    0x8(%ebp),%eax
   107e8:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)

    //5. 平坦模型，初始其余化段寄存器
    task->tss.es = task->tss.fs = task->tss.gs = task->tss.ds = KERNEL_SELECTOR_DS;
   107ee:	8b 45 08             	mov    0x8(%ebp),%eax
   107f1:	c7 80 9c 00 00 00 10 	movl   $0x10,0x9c(%eax)
   107f8:	00 00 00 
   107fb:	8b 45 08             	mov    0x8(%ebp),%eax
   107fe:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
   10804:	8b 45 08             	mov    0x8(%ebp),%eax
   10807:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
   1080d:	8b 45 08             	mov    0x8(%ebp),%eax
   10810:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
   10816:	8b 45 08             	mov    0x8(%ebp),%eax
   10819:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
   1081f:	8b 45 08             	mov    0x8(%ebp),%eax
   10822:	8b 90 a0 00 00 00    	mov    0xa0(%eax),%edx
   10828:	8b 45 08             	mov    0x8(%ebp),%eax
   1082b:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)

    //6.平坦模型，初始化代码段寄存器
    task->tss.cs = KERNEL_SELECTOR_CS;
   10831:	8b 45 08             	mov    0x8(%ebp),%eax
   10834:	c7 80 94 00 00 00 08 	movl   $0x8,0x94(%eax)
   1083b:	00 00 00 

    //7.初始化eflags寄存器，使cpu中断保持开启
    task->tss.eflags = EFLAGS_DEFAULT_1 | EFLAGS_IF;
   1083e:	8b 45 08             	mov    0x8(%ebp),%eax
   10841:	c7 40 6c 02 02 00 00 	movl   $0x202,0x6c(%eax)

    //8.将该TSS段绑定到GDT中的某个段描述符
    uint32_t tss_selector = gdt_alloc_desc();
   10848:	e8 0f 07 00 00       	call   10f5c <gdt_alloc_desc>
   1084d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (tss_selector < 0) {
        log_printf("alloc tss failed!");
        return;
    }

    segment_desc_set(tss_selector, (uint32_t)&task->tss, sizeof(task->tss), 
   10850:	8b 45 08             	mov    0x8(%ebp),%eax
   10853:	83 c0 48             	add    $0x48,%eax
   10856:	89 c2                	mov    %eax,%edx
   10858:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1085b:	0f b7 c0             	movzwl %ax,%eax
   1085e:	68 89 00 00 00       	push   $0x89
   10863:	6a 68                	push   $0x68
   10865:	52                   	push   %edx
   10866:	50                   	push   %eax
   10867:	e8 9d 05 00 00       	call   10e09 <segment_desc_set>
   1086c:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_TYPE_TSS);


    //9.记录tss绑定到的描述符的选择子
    task->tss_selector = tss_selector;
   1086f:	8b 45 08             	mov    0x8(%ebp),%eax
   10872:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10875:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
}
   1087b:	c9                   	leave  
   1087c:	c3                   	ret    

0001087d <task_init>:
 * @param task 任务对象
 * @param entry 任务的入口地址
 * @param esp 任务指行时所用的栈顶指针
 * @return int 
 */
void task_init(task_t *task, const char* name, uint32_t entry, uint32_t esp) {
   1087d:	55                   	push   %ebp
   1087e:	89 e5                	mov    %esp,%ebp
   10880:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t*)0);
   10883:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10887:	75 19                	jne    108a2 <task_init+0x25>
   10889:	68 9d 30 01 00       	push   $0x1309d
   1088e:	68 fc 30 01 00       	push   $0x130fc
   10893:	6a 60                	push   $0x60
   10895:	68 b0 30 01 00       	push   $0x130b0
   1089a:	e8 07 19 00 00       	call   121a6 <pannic>
   1089f:	83 c4 10             	add    $0x10,%esp
    //1.初始化任务TSS段
    tss_init(task, entry, esp);
   108a2:	83 ec 04             	sub    $0x4,%esp
   108a5:	ff 75 14             	push   0x14(%ebp)
   108a8:	ff 75 10             	push   0x10(%ebp)
   108ab:	ff 75 08             	push   0x8(%ebp)
   108ae:	e8 e5 fe ff ff       	call   10798 <tss_init>
   108b3:	83 c4 10             	add    $0x10,%esp

    //2.初始化任务名称
    kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   108b6:	8b 45 08             	mov    0x8(%ebp),%eax
   108b9:	83 c0 10             	add    $0x10,%eax
   108bc:	83 ec 04             	sub    $0x4,%esp
   108bf:	6a 20                	push   $0x20
   108c1:	ff 75 0c             	push   0xc(%ebp)
   108c4:	50                   	push   %eax
   108c5:	e8 9f 1c 00 00       	call   12569 <kernel_strncpy>
   108ca:	83 c4 10             	add    $0x10,%esp

    //3.初始化任务队列节点及就绪队列节点
    list_node_init(&task->ready_node);
   108cd:	8b 45 08             	mov    0x8(%ebp),%eax
   108d0:	83 c0 30             	add    $0x30,%eax
   108d3:	83 ec 0c             	sub    $0xc,%esp
   108d6:	50                   	push   %eax
   108d7:	e8 0b fd ff ff       	call   105e7 <list_node_init>
   108dc:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->task_node);
   108df:	8b 45 08             	mov    0x8(%ebp),%eax
   108e2:	83 c0 38             	add    $0x38,%eax
   108e5:	83 ec 0c             	sub    $0xc,%esp
   108e8:	50                   	push   %eax
   108e9:	e8 f9 fc ff ff       	call   105e7 <list_node_init>
   108ee:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   108f1:	8b 45 08             	mov    0x8(%ebp),%eax
   108f4:	83 c0 40             	add    $0x40,%eax
   108f7:	83 ec 0c             	sub    $0xc,%esp
   108fa:	50                   	push   %eax
   108fb:	e8 e7 fc ff ff       	call   105e7 <list_node_init>
   10900:	83 c4 10             	add    $0x10,%esp

    //4.初始化最大时间片数与当前拥有时间片数,以及延时时间片数
    task->slice_max = task->slice_curr = TASK_TIME_SLICE_DEFAULT;
   10903:	8b 45 08             	mov    0x8(%ebp),%eax
   10906:	c7 40 08 0a 00 00 00 	movl   $0xa,0x8(%eax)
   1090d:	8b 45 08             	mov    0x8(%ebp),%eax
   10910:	8b 50 08             	mov    0x8(%eax),%edx
   10913:	8b 45 08             	mov    0x8(%ebp),%eax
   10916:	89 50 04             	mov    %edx,0x4(%eax)
    task->sleep = 0;
   10919:	8b 45 08             	mov    0x8(%ebp),%eax
   1091c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)

    
    idt_state_t state = idt_enter_protection();//TODO:加锁
   10923:	e8 bc 0e 00 00       	call   117e4 <idt_enter_protection>
   10928:	89 45 f4             	mov    %eax,-0xc(%ebp)
   
    //5.将任务加入任务队列
    list_insert_last(&task_manager.task_list, &task->task_node);
   1092b:	8b 45 08             	mov    0x8(%ebp),%eax
   1092e:	83 c0 38             	add    $0x38,%eax
   10931:	83 ec 08             	sub    $0x8,%esp
   10934:	50                   	push   %eax
   10935:	68 10 60 01 00       	push   $0x16010
   1093a:	e8 b2 21 00 00       	call   12af1 <list_insert_last>
   1093f:	83 c4 10             	add    $0x10,%esp

    //6.将任务设置为就绪态
    task_set_ready(task);
   10942:	83 ec 0c             	sub    $0xc,%esp
   10945:	ff 75 08             	push   0x8(%ebp)
   10948:	e8 eb 00 00 00       	call   10a38 <task_set_ready>
   1094d:	83 c4 10             	add    $0x10,%esp

    
    idt_leave_protection(state);//TODO:解锁
   10950:	83 ec 0c             	sub    $0xc,%esp
   10953:	ff 75 f4             	push   -0xc(%ebp)
   10956:	e8 a1 0e 00 00       	call   117fc <idt_leave_protection>
   1095b:	83 c4 10             	add    $0x10,%esp
}
   1095e:	90                   	nop
   1095f:	c9                   	leave  
   10960:	c3                   	ret    

00010961 <empty_task>:
static uint32_t empty_task_stack[EMPTY_TASK_STACK_SIZE];
/**
 * @brief  空闲进程，当所有进程都延时运行时，让cpu运行空闲进程
 * 
 */
static void empty_task(void) {
   10961:	55                   	push   %ebp
   10962:	89 e5                	mov    %esp,%ebp
    while(1) {
        //停止cpu运行，让cpu等待时间中断
        hlt();
   10964:	e8 bd fd ff ff       	call   10726 <hlt>
   10969:	eb f9                	jmp    10964 <empty_task+0x3>

0001096b <task_manager_init>:

/**
 * @brief  初始化任务管理器
 * 
 */
void task_manager_init(void) {
   1096b:	55                   	push   %ebp
   1096c:	89 e5                	mov    %esp,%ebp
   1096e:	83 ec 08             	sub    $0x8,%esp
    //1.初始化所有任务队列
    list_init(&task_manager.ready_list);
   10971:	83 ec 0c             	sub    $0xc,%esp
   10974:	68 04 60 01 00       	push   $0x16004
   10979:	e8 d3 fc ff ff       	call   10651 <list_init>
   1097e:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   10981:	83 ec 0c             	sub    $0xc,%esp
   10984:	68 10 60 01 00       	push   $0x16010
   10989:	e8 c3 fc ff ff       	call   10651 <list_init>
   1098e:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   10991:	83 ec 0c             	sub    $0xc,%esp
   10994:	68 1c 60 01 00       	push   $0x1601c
   10999:	e8 b3 fc ff ff       	call   10651 <list_init>
   1099e:	83 c4 10             	add    $0x10,%esp

    //2.将当前任务置零
    task_manager.curr_task = (task_t*)0;
   109a1:	c7 05 00 60 01 00 00 	movl   $0x0,0x16000
   109a8:	00 00 00 

    //3.初始化空闲进程
    task_init(  &task_manager.empty_task,
   109ab:	ba a0 63 01 00       	mov    $0x163a0,%edx
   109b0:	b8 61 09 01 00       	mov    $0x10961,%eax
   109b5:	52                   	push   %edx
   109b6:	50                   	push   %eax
   109b7:	68 e5 30 01 00       	push   $0x130e5
   109bc:	68 dc 60 01 00       	push   $0x160dc
   109c1:	e8 b7 fe ff ff       	call   1087d <task_init>
   109c6:	83 c4 10             	add    $0x10,%esp
                 (uint32_t)empty_task,
                 (uint32_t)&empty_task_stack[EMPTY_TASK_STACK_SIZE]);
                 

    //4.将空闲进程从就绪队列中取出
    task_set_unready(&task_manager.empty_task);
   109c9:	83 ec 0c             	sub    $0xc,%esp
   109cc:	68 dc 60 01 00       	push   $0x160dc
   109d1:	e8 ad 00 00 00       	call   10a83 <task_set_unready>
   109d6:	83 c4 10             	add    $0x10,%esp
    task_manager.empty_task.state = TASK_CREATED;
   109d9:	c7 05 dc 60 01 00 00 	movl   $0x0,0x160dc
   109e0:	00 00 00 
}
   109e3:	90                   	nop
   109e4:	c9                   	leave  
   109e5:	c3                   	ret    

000109e6 <task_first_init>:

/**
 * @brief  初始化第一个任务
 * 
 */
void task_first_init(void) {
   109e6:	55                   	push   %ebp
   109e7:	89 e5                	mov    %esp,%ebp
   109e9:	83 ec 08             	sub    $0x8,%esp
      //1.初始化任务，当前任务是在任务管理器启用前就执行的，
      //拥有自己的栈空间，所以入口地址直接和栈空间都置0即可
      //这一步只是为当前任务绑定一个TSS段并将其绑定到一个task对象
      task_init(&task_manager.first_task, "first task", 0, 0);
   109ec:	6a 00                	push   $0x0
   109ee:	6a 00                	push   $0x0
   109f0:	68 f0 30 01 00       	push   $0x130f0
   109f5:	68 28 60 01 00       	push   $0x16028
   109fa:	e8 7e fe ff ff       	call   1087d <task_init>
   109ff:	83 c4 10             	add    $0x10,%esp
      
      //2.将当前任务的TSS选择子告诉cpu，用来切换任务时保存状态
      write_tr(task_manager.first_task.tss_selector);
   10a02:	a1 d8 60 01 00       	mov    0x160d8,%eax
   10a07:	0f b7 c0             	movzwl %ax,%eax
   10a0a:	83 ec 0c             	sub    $0xc,%esp
   10a0d:	50                   	push   %eax
   10a0e:	e8 34 fd ff ff       	call   10747 <write_tr>
   10a13:	83 c4 10             	add    $0x10,%esp

      //3.将当前任务执行第一个任务
      task_manager.curr_task = &task_manager.first_task;
   10a16:	c7 05 00 60 01 00 28 	movl   $0x16028,0x16000
   10a1d:	60 01 00 

      //4.将当前任务状态设置为运行态
      task_manager.curr_task->state = TASK_RUNNING;
   10a20:	a1 00 60 01 00       	mov    0x16000,%eax
   10a25:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
}
   10a2b:	90                   	nop
   10a2c:	c9                   	leave  
   10a2d:	c3                   	ret    

00010a2e <task_first_task>:
/**
 * @brief  获取当前任务管理器的第一个任务
 * 
 * @return task_t* 
 */
task_t *task_first_task(void) {
   10a2e:	55                   	push   %ebp
   10a2f:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   10a31:	b8 28 60 01 00       	mov    $0x16028,%eax
}
   10a36:	5d                   	pop    %ebp
   10a37:	c3                   	ret    

00010a38 <task_set_ready>:
/**
 * @brief  将任务task加入就绪队列
 * 
 * @param task 需要加入就绪队列的任务
 */
void task_set_ready(task_t *task) {
   10a38:	55                   	push   %ebp
   10a39:	89 e5                	mov    %esp,%ebp
   10a3b:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   10a3e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10a42:	75 1c                	jne    10a60 <task_set_ready+0x28>
   10a44:	68 9d 30 01 00       	push   $0x1309d
   10a49:	68 24 31 01 00       	push   $0x13124
   10a4e:	68 c9 00 00 00       	push   $0xc9
   10a53:	68 b0 30 01 00       	push   $0x130b0
   10a58:	e8 49 17 00 00       	call   121a6 <pannic>
   10a5d:	83 c4 10             	add    $0x10,%esp
    //1.将任务插入到就绪队列的尾部
    list_insert_last(&task_manager.ready_list, &task->ready_node);
   10a60:	8b 45 08             	mov    0x8(%ebp),%eax
   10a63:	83 c0 30             	add    $0x30,%eax
   10a66:	83 ec 08             	sub    $0x8,%esp
   10a69:	50                   	push   %eax
   10a6a:	68 04 60 01 00       	push   $0x16004
   10a6f:	e8 7d 20 00 00       	call   12af1 <list_insert_last>
   10a74:	83 c4 10             	add    $0x10,%esp

    //2.将任务状态设置为就绪态
    task->state = TASK_READY;
   10a77:	8b 45 08             	mov    0x8(%ebp),%eax
   10a7a:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
}
   10a80:	90                   	nop
   10a81:	c9                   	leave  
   10a82:	c3                   	ret    

00010a83 <task_set_unready>:
/**
 * @brief  将任务task从就绪队列中取下
 * 
 * @param task 
 */
void task_set_unready(task_t *task) {
   10a83:	55                   	push   %ebp
   10a84:	89 e5                	mov    %esp,%ebp
   10a86:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   10a89:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10a8d:	75 1c                	jne    10aab <task_set_unready+0x28>
   10a8f:	68 9d 30 01 00       	push   $0x1309d
   10a94:	68 34 31 01 00       	push   $0x13134
   10a99:	68 d8 00 00 00       	push   $0xd8
   10a9e:	68 b0 30 01 00       	push   $0x130b0
   10aa3:	e8 fe 16 00 00       	call   121a6 <pannic>
   10aa8:	83 c4 10             	add    $0x10,%esp
    list_remove(&task_manager.ready_list, &task->ready_node);
   10aab:	8b 45 08             	mov    0x8(%ebp),%eax
   10aae:	83 c0 30             	add    $0x30,%eax
   10ab1:	83 ec 08             	sub    $0x8,%esp
   10ab4:	50                   	push   %eax
   10ab5:	68 04 60 01 00       	push   $0x16004
   10aba:	e8 27 22 00 00       	call   12ce6 <list_remove>
   10abf:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   10ac2:	8b 45 08             	mov    0x8(%ebp),%eax
   10ac5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   10acb:	90                   	nop
   10acc:	c9                   	leave  
   10acd:	c3                   	ret    

00010ace <task_ready_first>:

/**
 * @brief  获取就绪队列中的第一个任务
 * 
 */
task_t* task_ready_first(void) {
   10ace:	55                   	push   %ebp
   10acf:	89 e5                	mov    %esp,%ebp
   10ad1:	83 ec 18             	sub    $0x18,%esp
    list_node_t *ready_node = list_get_first(&task_manager.ready_list);
   10ad4:	83 ec 0c             	sub    $0xc,%esp
   10ad7:	68 04 60 01 00       	push   $0x16004
   10adc:	e8 19 fc ff ff       	call   106fa <list_get_first>
   10ae1:	83 c4 10             	add    $0x10,%esp
   10ae4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    return list_node_parent(ready_node, task_t, ready_node);
   10ae7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10aeb:	74 08                	je     10af5 <task_ready_first+0x27>
   10aed:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10af0:	83 e8 30             	sub    $0x30,%eax
   10af3:	eb 05                	jmp    10afa <task_ready_first+0x2c>
   10af5:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10afa:	c9                   	leave  
   10afb:	c3                   	ret    

00010afc <task_current>:
/**
 * @brief  获取当前正在运行的任务
 * 
 * @return task_t* 
 */
task_t *task_current(void) {
   10afc:	55                   	push   %ebp
   10afd:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   10aff:	a1 00 60 01 00       	mov    0x16000,%eax
}
   10b04:	5d                   	pop    %ebp
   10b05:	c3                   	ret    

00010b06 <task_switch>:

/**
 * @brief  任务管理器进行任务切换
 * 
 */
void task_switch(void) {
   10b06:	55                   	push   %ebp
   10b07:	89 e5                	mov    %esp,%ebp
   10b09:	83 ec 18             	sub    $0x18,%esp

    idt_state_t state = idt_enter_protection();//TODO:加锁
   10b0c:	e8 d3 0c 00 00       	call   117e4 <idt_enter_protection>
   10b11:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //1.获取就绪队列中的第一个任务
    task_t *to = task_ready_first();
   10b14:	e8 b5 ff ff ff       	call   10ace <task_ready_first>
   10b19:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.若获取到的任务不是当前任务就进行切换
    if (to != task_manager.curr_task) {
   10b1c:	a1 00 60 01 00       	mov    0x16000,%eax
   10b21:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   10b24:	74 37                	je     10b5d <task_switch+0x57>
        //3.获取当前任务
        task_t *from = task_manager.curr_task;
   10b26:	a1 00 60 01 00       	mov    0x16000,%eax
   10b2b:	89 45 ec             	mov    %eax,-0x14(%ebp)

        //4.目标任务若为空，则所有任务都在延时，让cpu运行空闲任务
        if (to == (task_t*)0) { 
   10b2e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10b32:	75 07                	jne    10b3b <task_switch+0x35>
            to = &task_manager.empty_task;
   10b34:	c7 45 f4 dc 60 01 00 	movl   $0x160dc,-0xc(%ebp)
        }
        //5.切换当前任务, 并将当前任务置为运行态
        to->state = TASK_RUNNING;
   10b3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b3e:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        task_manager.curr_task = to;
   10b44:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b47:	a3 00 60 01 00       	mov    %eax,0x16000
        

        //6.进行任务切换
        task_switch_from_to(from, to);
   10b4c:	83 ec 08             	sub    $0x8,%esp
   10b4f:	ff 75 f4             	push   -0xc(%ebp)
   10b52:	ff 75 ec             	push   -0x14(%ebp)
   10b55:	e8 23 fc ff ff       	call   1077d <task_switch_from_to>
   10b5a:	83 c4 10             	add    $0x10,%esp
    } 

    idt_leave_protection(state);//TODO:解锁
   10b5d:	83 ec 0c             	sub    $0xc,%esp
   10b60:	ff 75 f0             	push   -0x10(%ebp)
   10b63:	e8 94 0c 00 00       	call   117fc <idt_leave_protection>
   10b68:	83 c4 10             	add    $0x10,%esp
}
   10b6b:	90                   	nop
   10b6c:	c9                   	leave  
   10b6d:	c3                   	ret    

00010b6e <sys_yield>:
/**
 * @brief  使当前正在运行的任务主动让出cpu
 * 
 * @return int 
 */
int sys_yield(void) {
   10b6e:	55                   	push   %ebp
   10b6f:	89 e5                	mov    %esp,%ebp
   10b71:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   10b74:	e8 6b 0c 00 00       	call   117e4 <idt_enter_protection>
   10b79:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    //1.判断当前就绪队列中是否有多个任务
    if (list_get_size(&task_manager.ready_list) > 1) {
   10b7c:	83 ec 0c             	sub    $0xc,%esp
   10b7f:	68 04 60 01 00       	push   $0x16004
   10b84:	e8 44 fb ff ff       	call   106cd <list_get_size>
   10b89:	83 c4 10             	add    $0x10,%esp
   10b8c:	83 f8 01             	cmp    $0x1,%eax
   10b8f:	7e 29                	jle    10bba <sys_yield+0x4c>
        //2.获取当前任务  
        task_t *curr_task = task_current();
   10b91:	e8 66 ff ff ff       	call   10afc <task_current>
   10b96:	89 45 f0             	mov    %eax,-0x10(%ebp)
        
        //3.将当前任务从就绪队列中取下
        task_set_unready(curr_task);
   10b99:	83 ec 0c             	sub    $0xc,%esp
   10b9c:	ff 75 f0             	push   -0x10(%ebp)
   10b9f:	e8 df fe ff ff       	call   10a83 <task_set_unready>
   10ba4:	83 c4 10             	add    $0x10,%esp

        //4.将当前任务重新加入到就绪队列的队尾
        task_set_ready(curr_task);
   10ba7:	83 ec 0c             	sub    $0xc,%esp
   10baa:	ff 75 f0             	push   -0x10(%ebp)
   10bad:	e8 86 fe ff ff       	call   10a38 <task_set_ready>
   10bb2:	83 c4 10             	add    $0x10,%esp

        //5.任务管理器运行下一个任务，从而释放cpu使用权
        task_switch();
   10bb5:	e8 4c ff ff ff       	call   10b06 <task_switch>
    }
    
    idt_leave_protection(state);//TODO:解锁
   10bba:	83 ec 0c             	sub    $0xc,%esp
   10bbd:	ff 75 f4             	push   -0xc(%ebp)
   10bc0:	e8 37 0c 00 00       	call   117fc <idt_leave_protection>
   10bc5:	83 c4 10             	add    $0x10,%esp
    return 0;
   10bc8:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10bcd:	c9                   	leave  
   10bce:	c3                   	ret    

00010bcf <task_slice_end>:
/**
 * @brief  提供给时钟中断使用，每中断一次，当前任务的时间片使用完一次
 *         减少当前任务的时间片数，并判断是否还有剩余时间片，若没有就进行任务切换
 * 
 */
void task_slice_end(void) {
   10bcf:	55                   	push   %ebp
   10bd0:	89 e5                	mov    %esp,%ebp
   10bd2:	83 ec 18             	sub    $0x18,%esp

    //1.遍历当前延时队列，判断是否有可唤醒的任务
    list_node_t *curr_sleep_node = list_get_first(&task_manager.sleep_list);
   10bd5:	83 ec 0c             	sub    $0xc,%esp
   10bd8:	68 1c 60 01 00       	push   $0x1601c
   10bdd:	e8 18 fb ff ff       	call   106fa <list_get_first>
   10be2:	83 c4 10             	add    $0x10,%esp
   10be5:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.遍历并判断每一个任务执行完当前时间片是否可被唤醒，若可以则唤醒
    while (curr_sleep_node) {
   10be8:	eb 62                	jmp    10c4c <task_slice_end+0x7d>
        
        list_node_t *next_sleep_node = list_node_next(curr_sleep_node);
   10bea:	83 ec 0c             	sub    $0xc,%esp
   10bed:	ff 75 f4             	push   -0xc(%ebp)
   10bf0:	e8 2f fa ff ff       	call   10624 <list_node_next>
   10bf5:	83 c4 10             	add    $0x10,%esp
   10bf8:	89 45 ec             	mov    %eax,-0x14(%ebp)
        
        task_t *curr_sleep_task = list_node_parent(curr_sleep_node, task_t, ready_node);
   10bfb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10bff:	74 08                	je     10c09 <task_slice_end+0x3a>
   10c01:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10c04:	83 e8 30             	sub    $0x30,%eax
   10c07:	eb 05                	jmp    10c0e <task_slice_end+0x3f>
   10c09:	b8 00 00 00 00       	mov    $0x0,%eax
   10c0e:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (--curr_sleep_task->sleep == 0) {
   10c11:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10c14:	8b 40 0c             	mov    0xc(%eax),%eax
   10c17:	8d 50 ff             	lea    -0x1(%eax),%edx
   10c1a:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10c1d:	89 50 0c             	mov    %edx,0xc(%eax)
   10c20:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10c23:	8b 40 0c             	mov    0xc(%eax),%eax
   10c26:	85 c0                	test   %eax,%eax
   10c28:	75 1c                	jne    10c46 <task_slice_end+0x77>
            task_set_wakeup(curr_sleep_task);   //从延时队列中取下
   10c2a:	83 ec 0c             	sub    $0xc,%esp
   10c2d:	ff 75 e8             	push   -0x18(%ebp)
   10c30:	e8 01 01 00 00       	call   10d36 <task_set_wakeup>
   10c35:	83 c4 10             	add    $0x10,%esp
            task_set_ready(curr_sleep_task);    //加入就绪队列
   10c38:	83 ec 0c             	sub    $0xc,%esp
   10c3b:	ff 75 e8             	push   -0x18(%ebp)
   10c3e:	e8 f5 fd ff ff       	call   10a38 <task_set_ready>
   10c43:	83 c4 10             	add    $0x10,%esp
        }

        curr_sleep_node = next_sleep_node;
   10c46:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10c49:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr_sleep_node) {
   10c4c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10c50:	75 98                	jne    10bea <task_slice_end+0x1b>
    }

    // task_switch(); 没有必要立马进行任务切换，当前任务时间片用完后会自动切换
    //3.获取当前任务
    task_t *curr_task = task_current();
   10c52:	e8 a5 fe ff ff       	call   10afc <task_current>
   10c57:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //4.若当前任务为空闲任务，则判断就绪队列是否为空
    if (curr_task == &task_manager.empty_task) {
   10c5a:	81 7d f0 dc 60 01 00 	cmpl   $0x160dc,-0x10(%ebp)
   10c61:	75 23                	jne    10c86 <task_slice_end+0xb7>
        
        if (list_is_empty(&task_manager.ready_list)) return;
   10c63:	83 ec 0c             	sub    $0xc,%esp
   10c66:	68 04 60 01 00       	push   $0x16004
   10c6b:	e8 28 fa ff ff       	call   10698 <list_is_empty>
   10c70:	83 c4 10             	add    $0x10,%esp
   10c73:	85 c0                	test   %eax,%eax
   10c75:	75 60                	jne    10cd7 <task_slice_end+0x108>
        
        task_manager.empty_task.state = TASK_CREATED;
   10c77:	c7 05 dc 60 01 00 00 	movl   $0x0,0x160dc
   10c7e:	00 00 00 
        
        task_switch();//就绪队列有任务，则直接切换任务
   10c81:	e8 80 fe ff ff       	call   10b06 <task_switch>
    }

    //5.若当前任务为普通任务则，减小当前时间片数
    if (curr_task != &task_manager.empty_task && --curr_task->slice_curr == 0) {
   10c86:	81 7d f0 dc 60 01 00 	cmpl   $0x160dc,-0x10(%ebp)
   10c8d:	74 49                	je     10cd8 <task_slice_end+0x109>
   10c8f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10c92:	8b 40 08             	mov    0x8(%eax),%eax
   10c95:	8d 50 ff             	lea    -0x1(%eax),%edx
   10c98:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10c9b:	89 50 08             	mov    %edx,0x8(%eax)
   10c9e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10ca1:	8b 40 08             	mov    0x8(%eax),%eax
   10ca4:	85 c0                	test   %eax,%eax
   10ca6:	75 30                	jne    10cd8 <task_slice_end+0x109>
        //6.时间片数用完了，重置时间片并进行任务切换
        curr_task->slice_curr = curr_task->slice_max;
   10ca8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10cab:	8b 50 04             	mov    0x4(%eax),%edx
   10cae:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10cb1:	89 50 08             	mov    %edx,0x8(%eax)
        task_set_unready(curr_task);
   10cb4:	83 ec 0c             	sub    $0xc,%esp
   10cb7:	ff 75 f0             	push   -0x10(%ebp)
   10cba:	e8 c4 fd ff ff       	call   10a83 <task_set_unready>
   10cbf:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   10cc2:	83 ec 0c             	sub    $0xc,%esp
   10cc5:	ff 75 f0             	push   -0x10(%ebp)
   10cc8:	e8 6b fd ff ff       	call   10a38 <task_set_ready>
   10ccd:	83 c4 10             	add    $0x10,%esp
        task_switch();
   10cd0:	e8 31 fe ff ff       	call   10b06 <task_switch>
   10cd5:	eb 01                	jmp    10cd8 <task_slice_end+0x109>
        if (list_is_empty(&task_manager.ready_list)) return;
   10cd7:	90                   	nop
    }
}
   10cd8:	c9                   	leave  
   10cd9:	c3                   	ret    

00010cda <task_set_sleep>:
 * @brief  设置进程延时的时间片数
 * 
 * @param task 需要延时的进程
 * @param slice 延时的时间片数
 */
void task_set_sleep(task_t *task, uint32_t slice) {
   10cda:	55                   	push   %ebp
   10cdb:	89 e5                	mov    %esp,%ebp
   10cdd:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   10ce0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10ce4:	75 1c                	jne    10d02 <task_set_sleep+0x28>
   10ce6:	68 9d 30 01 00       	push   $0x1309d
   10ceb:	68 88 31 01 00       	push   $0x13188
   10cf0:	68 66 01 00 00       	push   $0x166
   10cf5:	68 b0 30 01 00       	push   $0x130b0
   10cfa:	e8 a7 14 00 00       	call   121a6 <pannic>
   10cff:	83 c4 10             	add    $0x10,%esp
    if (slice == 0) return;
   10d02:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10d06:	74 2b                	je     10d33 <task_set_sleep+0x59>

    task->sleep = slice;
   10d08:	8b 55 0c             	mov    0xc(%ebp),%edx
   10d0b:	8b 45 08             	mov    0x8(%ebp),%eax
   10d0e:	89 50 0c             	mov    %edx,0xc(%eax)
    task->state = TASK_SLEEP;
   10d11:	8b 45 08             	mov    0x8(%ebp),%eax
   10d14:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    list_insert_last(&task_manager.sleep_list, &task->ready_node);
   10d1a:	8b 45 08             	mov    0x8(%ebp),%eax
   10d1d:	83 c0 30             	add    $0x30,%eax
   10d20:	83 ec 08             	sub    $0x8,%esp
   10d23:	50                   	push   %eax
   10d24:	68 1c 60 01 00       	push   $0x1601c
   10d29:	e8 c3 1d 00 00       	call   12af1 <list_insert_last>
   10d2e:	83 c4 10             	add    $0x10,%esp
   10d31:	eb 01                	jmp    10d34 <task_set_sleep+0x5a>
    if (slice == 0) return;
   10d33:	90                   	nop
}
   10d34:	c9                   	leave  
   10d35:	c3                   	ret    

00010d36 <task_set_wakeup>:
/**
 * @brief  唤醒正在延时的进程
 * 
 * @param task 
 */
void task_set_wakeup(task_t *task) {
   10d36:	55                   	push   %ebp
   10d37:	89 e5                	mov    %esp,%ebp
   10d39:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t*)0);
   10d3c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10d40:	75 1c                	jne    10d5e <task_set_wakeup+0x28>
   10d42:	68 9d 30 01 00       	push   $0x1309d
   10d47:	68 98 31 01 00       	push   $0x13198
   10d4c:	68 74 01 00 00       	push   $0x174
   10d51:	68 b0 30 01 00       	push   $0x130b0
   10d56:	e8 4b 14 00 00       	call   121a6 <pannic>
   10d5b:	83 c4 10             	add    $0x10,%esp
    list_remove(&task_manager.sleep_list, &task->ready_node);
   10d5e:	8b 45 08             	mov    0x8(%ebp),%eax
   10d61:	83 c0 30             	add    $0x30,%eax
   10d64:	83 ec 08             	sub    $0x8,%esp
   10d67:	50                   	push   %eax
   10d68:	68 1c 60 01 00       	push   $0x1601c
   10d6d:	e8 74 1f 00 00       	call   12ce6 <list_remove>
   10d72:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   10d75:	8b 45 08             	mov    0x8(%ebp),%eax
   10d78:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   10d7e:	90                   	nop
   10d7f:	c9                   	leave  
   10d80:	c3                   	ret    

00010d81 <sys_sleep>:
/**
 * @brief  使进程进入延时状态
 * 
 * @param ms 延时的时间，以ms为单位
 */
void sys_sleep(uint32_t ms) {
   10d81:	55                   	push   %ebp
   10d82:	89 e5                	mov    %esp,%ebp
   10d84:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection(); //TODO:加锁
   10d87:	e8 58 0a 00 00       	call   117e4 <idt_enter_protection>
   10d8c:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //1.获取当前任务  
    task_t *curr_task = task_current();
   10d8f:	e8 68 fd ff ff       	call   10afc <task_current>
   10d94:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    //2.将当前任务离开就绪队列
    task_set_unready(curr_task);
   10d97:	83 ec 0c             	sub    $0xc,%esp
   10d9a:	ff 75 f0             	push   -0x10(%ebp)
   10d9d:	e8 e1 fc ff ff       	call   10a83 <task_set_unready>
   10da2:	83 c4 10             	add    $0x10,%esp

    //3.计算出需要延时的时间片数，对时间片数向上取整，保证进程至少能延时指定时间
    uint32_t slice = (ms + (OS_TICKS_MS - 1)) / OS_TICKS_MS;
   10da5:	8b 45 08             	mov    0x8(%ebp),%eax
   10da8:	83 c0 09             	add    $0x9,%eax
   10dab:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   10db0:	f7 e2                	mul    %edx
   10db2:	89 d0                	mov    %edx,%eax
   10db4:	c1 e8 03             	shr    $0x3,%eax
   10db7:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //4.将当前任务放入延时队列，并设置延时时间片数
    task_set_sleep(curr_task, slice);
   10dba:	83 ec 08             	sub    $0x8,%esp
   10dbd:	ff 75 ec             	push   -0x14(%ebp)
   10dc0:	ff 75 f0             	push   -0x10(%ebp)
   10dc3:	e8 12 ff ff ff       	call   10cda <task_set_sleep>
   10dc8:	83 c4 10             	add    $0x10,%esp

    //5.切换任务
    task_switch();
   10dcb:	e8 36 fd ff ff       	call   10b06 <task_switch>

    idt_leave_protection(state); //TODO:解锁
   10dd0:	83 ec 0c             	sub    $0xc,%esp
   10dd3:	ff 75 f4             	push   -0xc(%ebp)
   10dd6:	e8 21 0a 00 00       	call   117fc <idt_leave_protection>
   10ddb:	83 c4 10             	add    $0x10,%esp
   10dde:	90                   	nop
   10ddf:	c9                   	leave  
   10de0:	c3                   	ret    

00010de1 <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   10de1:	55                   	push   %ebp
   10de2:	89 e5                	mov    %esp,%ebp
   10de4:	83 ec 10             	sub    $0x10,%esp
  gdt.start31_16 = (start >> 16) & 0xffff;  // 初始化GDT地址的高16位
   10de7:	8b 45 08             	mov    0x8(%ebp),%eax
   10dea:	c1 e8 10             	shr    $0x10,%eax
   10ded:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  gdt.start15_0 = start & 0xffff;           // 初始化GDT地址的低16位
   10df1:	8b 45 08             	mov    0x8(%ebp),%eax
   10df4:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   10df8:	8b 45 0c             	mov    0xc(%ebp),%eax
   10dfb:	83 e8 01             	sub    $0x1,%eax
  gdt.limit =
   10dfe:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   10e02:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   10e06:	90                   	nop
   10e07:	c9                   	leave  
   10e08:	c3                   	ret    

00010e09 <segment_desc_set>:
 *                 即2的13次方个段，也就是8192
 * @param base 该段在内存中的真实段基址
 * @param limit 该段的段界限，是一个偏移量，表示段中最大的偏移界限
 * @param attr 该段的属性位
 */
void segment_desc_set(uint16_t selector,  uint32_t base, uint32_t limit, uint16_t attr) {
   10e09:	55                   	push   %ebp
   10e0a:	89 e5                	mov    %esp,%ebp
   10e0c:	83 ec 18             	sub    $0x18,%esp
   10e0f:	8b 55 08             	mov    0x8(%ebp),%edx
   10e12:	8b 45 14             	mov    0x14(%ebp),%eax
   10e15:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
   10e19:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    //1. 获取该段描述符在内存中的起始地址，selector >> 3 取出3~15位才是其在全局描述符中的下标
    segment_desc_t *desc = gdt_table + (selector >> 3);
   10e1d:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   10e21:	66 c1 e8 03          	shr    $0x3,%ax
   10e25:	0f b7 c0             	movzwl %ax,%eax
   10e28:	c1 e0 03             	shl    $0x3,%eax
   10e2b:	05 a0 63 01 00       	add    $0x163a0,%eax
   10e30:	89 45 fc             	mov    %eax,-0x4(%ebp)

    //2. 设置段基地址
    desc->base15_0 = (uint16_t)base;
   10e33:	8b 45 0c             	mov    0xc(%ebp),%eax
   10e36:	89 c2                	mov    %eax,%edx
   10e38:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10e3b:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (uint8_t)(base >> 16);
   10e3f:	8b 45 0c             	mov    0xc(%ebp),%eax
   10e42:	c1 e8 10             	shr    $0x10,%eax
   10e45:	89 c2                	mov    %eax,%edx
   10e47:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10e4a:	88 50 04             	mov    %dl,0x4(%eax)
    desc->base31_24 = (uint8_t)(base >> 24);
   10e4d:	8b 45 0c             	mov    0xc(%ebp),%eax
   10e50:	c1 e8 18             	shr    $0x18,%eax
   10e53:	89 c2                	mov    %eax,%edx
   10e55:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10e58:	88 50 07             	mov    %dl,0x7(%eax)

    //3. 设置段界限
    if (limit > 0xfffff) { //limit大于了20位能表示的最大值
   10e5b:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   10e62:	76 1d                	jbe    10e81 <segment_desc_set+0x78>
        //将limit的粒度设置为 4kb，即将属性位G置1
        desc->attr |= 0x8000;
   10e64:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10e67:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10e6b:	66 0d 00 80          	or     $0x8000,%ax
   10e6f:	89 c2                	mov    %eax,%edx
   10e71:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10e74:	66 89 50 05          	mov    %dx,0x5(%eax)

        //将limit改成以 4kb 为单位
        limit /= (4 * 1024);
   10e78:	8b 45 10             	mov    0x10(%ebp),%eax
   10e7b:	c1 e8 0c             	shr    $0xc,%eax
   10e7e:	89 45 10             	mov    %eax,0x10(%ebp)

    }
    desc->limit15_0 = (uint16_t)limit;
   10e81:	8b 45 10             	mov    0x10(%ebp),%eax
   10e84:	89 c2                	mov    %eax,%edx
   10e86:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10e89:	66 89 10             	mov    %dx,(%eax)
    desc->attr |= ((uint16_t)(limit >> 8) & 0x0f00); //将limit高4位赋值到attr的8~11位(段界限的高4位)
   10e8c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10e8f:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10e93:	89 c2                	mov    %eax,%edx
   10e95:	8b 45 10             	mov    0x10(%ebp),%eax
   10e98:	c1 e8 08             	shr    $0x8,%eax
   10e9b:	66 25 00 0f          	and    $0xf00,%ax
   10e9f:	09 d0                	or     %edx,%eax
   10ea1:	89 c2                	mov    %eax,%edx
   10ea3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10ea6:	66 89 50 05          	mov    %dx,0x5(%eax)

    //4.设置属性位
    desc->attr |= attr & 0xf0ff;
   10eaa:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10ead:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10eb1:	89 c2                	mov    %eax,%edx
   10eb3:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   10eb7:	80 e4 f0             	and    $0xf0,%ah
   10eba:	09 d0                	or     %edx,%eax
   10ebc:	89 c2                	mov    %eax,%edx
   10ebe:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10ec1:	66 89 50 05          	mov    %dx,0x5(%eax)


}
   10ec5:	90                   	nop
   10ec6:	c9                   	leave  
   10ec7:	c3                   	ret    

00010ec8 <gdt_init>:

/**
 * @brief  初始化GDT
 * 
 */
void gdt_init(void) {
   10ec8:	55                   	push   %ebp
   10ec9:	89 e5                	mov    %esp,%ebp
   10ecb:	83 ec 18             	sub    $0x18,%esp
    //TODO:暂时将所有段都初始化为0
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   10ece:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10ed5:	eb 1c                	jmp    10ef3 <gdt_init+0x2b>
        segment_desc_set(i << 3, 0, 0, 0);
   10ed7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10eda:	c1 e0 03             	shl    $0x3,%eax
   10edd:	0f b7 c0             	movzwl %ax,%eax
   10ee0:	6a 00                	push   $0x0
   10ee2:	6a 00                	push   $0x0
   10ee4:	6a 00                	push   $0x0
   10ee6:	50                   	push   %eax
   10ee7:	e8 1d ff ff ff       	call   10e09 <segment_desc_set>
   10eec:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   10eef:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10ef3:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   10efa:	7e db                	jle    10ed7 <gdt_init+0xf>
        is_alloc[i] == 0;
    }

    //使用平坦模型，即段基址为0, 段界限直接用最大值，界限粒度为4kb，即段大小为4GB
    //1.设置内核的数据段,并将其标记
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff,
   10efc:	68 92 40 00 00       	push   $0x4092
   10f01:	6a ff                	push   $0xffffffff
   10f03:	6a 00                	push   $0x0
   10f05:	6a 10                	push   $0x10
   10f07:	e8 fd fe ff ff       	call   10e09 <segment_desc_set>
   10f0c:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL | 
                    SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_DS >> 3] = 1;
   10f0f:	c7 05 a8 63 02 00 01 	movl   $0x1,0x263a8
   10f16:	00 00 00 

    //2.设置内核的代码段，并将其标记
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff,
   10f19:	68 9a 40 00 00       	push   $0x409a
   10f1e:	6a ff                	push   $0xffffffff
   10f20:	6a 00                	push   $0x0
   10f22:	6a 08                	push   $0x8
   10f24:	e8 e0 fe ff ff       	call   10e09 <segment_desc_set>
   10f29:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL |
                    SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_CS >> 3] = 1;
   10f2c:	c7 05 a4 63 02 00 01 	movl   $0x1,0x263a4
   10f33:	00 00 00 
    //3.加载新的GDT表
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   10f36:	b8 a0 63 01 00       	mov    $0x163a0,%eax
   10f3b:	68 00 00 01 00       	push   $0x10000
   10f40:	50                   	push   %eax
   10f41:	e8 9b fe ff ff       	call   10de1 <lgdt>
   10f46:	83 c4 08             	add    $0x8,%esp

    //4.初始化互斥锁
    mutex_init(&mutex);
   10f49:	83 ec 0c             	sub    $0xc,%esp
   10f4c:	68 a0 e3 02 00       	push   $0x2e3a0
   10f51:	e8 3b 0b 00 00       	call   11a91 <mutex_init>
   10f56:	83 c4 10             	add    $0x10,%esp
}
   10f59:	90                   	nop
   10f5a:	c9                   	leave  
   10f5b:	c3                   	ret    

00010f5c <gdt_alloc_desc>:
/**
 * @brief  寻找gdt中未赋值的段描述符空间
 * 
 * @return int 返回的找到的描述符的选择子
 */
int gdt_alloc_desc() {
   10f5c:	55                   	push   %ebp
   10f5d:	89 e5                	mov    %esp,%ebp
   10f5f:	83 ec 18             	sub    $0x18,%esp

    mutex_lock(&mutex);//TODO:加锁
   10f62:	83 ec 0c             	sub    $0xc,%esp
   10f65:	68 a0 e3 02 00       	push   $0x2e3a0
   10f6a:	e8 6f 0b 00 00       	call   11ade <mutex_lock>
   10f6f:	83 c4 10             	add    $0x10,%esp

    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   10f72:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   10f79:	eb 38                	jmp    10fb3 <gdt_alloc_desc+0x57>
        if (is_alloc[i] == 0)  {
   10f7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f7e:	8b 04 85 a0 63 02 00 	mov    0x263a0(,%eax,4),%eax
   10f85:	85 c0                	test   %eax,%eax
   10f87:	75 26                	jne    10faf <gdt_alloc_desc+0x53>
            is_alloc[i] = 1;
   10f89:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f8c:	c7 04 85 a0 63 02 00 	movl   $0x1,0x263a0(,%eax,4)
   10f93:	01 00 00 00 

            mutex_unlock(&mutex);//TODO:解锁
   10f97:	83 ec 0c             	sub    $0xc,%esp
   10f9a:	68 a0 e3 02 00       	push   $0x2e3a0
   10f9f:	e8 cb 0b 00 00       	call   11b6f <mutex_unlock>
   10fa4:	83 c4 10             	add    $0x10,%esp
            return (i << 3);
   10fa7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10faa:	c1 e0 03             	shl    $0x3,%eax
   10fad:	eb 22                	jmp    10fd1 <gdt_alloc_desc+0x75>
    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   10faf:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10fb3:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   10fba:	7e bf                	jle    10f7b <gdt_alloc_desc+0x1f>
        }
    }

    mutex_unlock(&mutex);//TODO:解锁
   10fbc:	83 ec 0c             	sub    $0xc,%esp
   10fbf:	68 a0 e3 02 00       	push   $0x2e3a0
   10fc4:	e8 a6 0b 00 00       	call   11b6f <mutex_unlock>
   10fc9:	83 c4 10             	add    $0x10,%esp
    return -1;
   10fcc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10fd1:	c9                   	leave  
   10fd2:	c3                   	ret    

00010fd3 <cli>:
static inline void cli(void) { __asm__ __volatile__("cli"); }
   10fd3:	55                   	push   %ebp
   10fd4:	89 e5                	mov    %esp,%ebp
   10fd6:	fa                   	cli    
   10fd7:	90                   	nop
   10fd8:	5d                   	pop    %ebp
   10fd9:	c3                   	ret    

00010fda <sti>:
static inline void sti(void) { __asm__ __volatile__("sti"); }
   10fda:	55                   	push   %ebp
   10fdb:	89 e5                	mov    %esp,%ebp
   10fdd:	fb                   	sti    
   10fde:	90                   	nop
   10fdf:	5d                   	pop    %ebp
   10fe0:	c3                   	ret    

00010fe1 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   10fe1:	55                   	push   %ebp
   10fe2:	89 e5                	mov    %esp,%ebp
   10fe4:	f4                   	hlt    
   10fe5:	90                   	nop
   10fe6:	5d                   	pop    %ebp
   10fe7:	c3                   	ret    

00010fe8 <inb>:
static inline uint8_t inb(uint16_t port) {
   10fe8:	55                   	push   %ebp
   10fe9:	89 e5                	mov    %esp,%ebp
   10feb:	83 ec 14             	sub    $0x14,%esp
   10fee:	8b 45 08             	mov    0x8(%ebp),%eax
   10ff1:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   10ff5:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   10ff9:	89 c2                	mov    %eax,%edx
   10ffb:	ec                   	in     (%dx),%al
   10ffc:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   10fff:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   11003:	c9                   	leave  
   11004:	c3                   	ret    

00011005 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   11005:	55                   	push   %ebp
   11006:	89 e5                	mov    %esp,%ebp
   11008:	83 ec 08             	sub    $0x8,%esp
   1100b:	8b 45 08             	mov    0x8(%ebp),%eax
   1100e:	8b 55 0c             	mov    0xc(%ebp),%edx
   11011:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   11015:	89 d0                	mov    %edx,%eax
   11017:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   1101a:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1101e:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11022:	ee                   	out    %al,(%dx)
}
   11023:	90                   	nop
   11024:	c9                   	leave  
   11025:	c3                   	ret    

00011026 <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   11026:	55                   	push   %ebp
   11027:	89 e5                	mov    %esp,%ebp
   11029:	83 ec 10             	sub    $0x10,%esp
  idt.start31_16 = (start >> 16) & 0xffff;  // 初始化IDT地址的高16位
   1102c:	8b 45 08             	mov    0x8(%ebp),%eax
   1102f:	c1 e8 10             	shr    $0x10,%eax
   11032:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  idt.start15_0 = start & 0xffff;           // 初始化IDT地址的低16位
   11036:	8b 45 08             	mov    0x8(%ebp),%eax
   11039:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   1103d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11040:	83 e8 01             	sub    $0x1,%eax
  idt.limit =
   11043:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   11047:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   1104b:	90                   	nop
   1104c:	c9                   	leave  
   1104d:	c3                   	ret    

0001104e <read_eflags>:
/**
 * @brief  读取当前cpu的eflags寄存器
 * 
 * @return uint32_t 放回eflags的值
 */
static inline uint32_t read_eflags(void) {
   1104e:	55                   	push   %ebp
   1104f:	89 e5                	mov    %esp,%ebp
   11051:	83 ec 10             	sub    $0x10,%esp
  uint32_t eflags;
  //pushf 压入eflags的值到栈中
  __asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   11054:	9c                   	pushf  
   11055:	58                   	pop    %eax
   11056:	89 45 fc             	mov    %eax,-0x4(%ebp)
  
  return eflags;
   11059:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1105c:	c9                   	leave  
   1105d:	c3                   	ret    

0001105e <write_eflags>:
/**
 * @brief  将状态state写入eflags寄存器
 * 
 * @param state 
 */
static inline void write_eflags(uint32_t state) {
   1105e:	55                   	push   %ebp
   1105f:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("push %%eax\n\tpopf"::"a"(state));
   11061:	8b 45 08             	mov    0x8(%ebp),%eax
   11064:	50                   	push   %eax
   11065:	9d                   	popf   
}
   11066:	90                   	nop
   11067:	5d                   	pop    %ebp
   11068:	c3                   	ret    

00011069 <print_exception_fram>:
/**
 * @brief  打印异常栈帧信息
 * 
 * @param frame 栈帧
 */
static void print_exception_fram(const exception_frame_t *frame) {
   11069:	55                   	push   %ebp
   1106a:	89 e5                	mov    %esp,%ebp
   1106c:	57                   	push   %edi
   1106d:	56                   	push   %esi
   1106e:	53                   	push   %ebx
   1106f:	83 ec 1c             	sub    $0x1c,%esp

  log_printf("------------------------stack frame info---------------------");
   11072:	83 ec 0c             	sub    $0xc,%esp
   11075:	68 a8 31 01 00       	push   $0x131a8
   1107a:	e8 f6 1d 00 00       	call   12e75 <log_printf>
   1107f:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ:\t\t%d\nerror code:\t%d", frame->num, frame->error_code);
   11082:	8b 45 08             	mov    0x8(%ebp),%eax
   11085:	8b 50 34             	mov    0x34(%eax),%edx
   11088:	8b 45 08             	mov    0x8(%ebp),%eax
   1108b:	8b 40 30             	mov    0x30(%eax),%eax
   1108e:	83 ec 04             	sub    $0x4,%esp
   11091:	52                   	push   %edx
   11092:	50                   	push   %eax
   11093:	68 e6 31 01 00       	push   $0x131e6
   11098:	e8 d8 1d 00 00       	call   12e75 <log_printf>
   1109d:	83 c4 10             	add    $0x10,%esp
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
    //TODO:SS暂时没法获取，先用ds替代，之后再进行获取
    frame->cs, frame->ds, frame->ds, frame->es, frame->fs, frame->gs
   110a0:	8b 45 08             	mov    0x8(%ebp),%eax
   110a3:	8b 38                	mov    (%eax),%edi
   110a5:	8b 45 08             	mov    0x8(%ebp),%eax
   110a8:	8b 70 04             	mov    0x4(%eax),%esi
   110ab:	8b 45 08             	mov    0x8(%ebp),%eax
   110ae:	8b 58 08             	mov    0x8(%eax),%ebx
   110b1:	8b 45 08             	mov    0x8(%ebp),%eax
   110b4:	8b 48 0c             	mov    0xc(%eax),%ecx
   110b7:	8b 45 08             	mov    0x8(%ebp),%eax
   110ba:	8b 50 0c             	mov    0xc(%eax),%edx
   110bd:	8b 45 08             	mov    0x8(%ebp),%eax
   110c0:	8b 40 3c             	mov    0x3c(%eax),%eax
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d", 
   110c3:	83 ec 04             	sub    $0x4,%esp
   110c6:	57                   	push   %edi
   110c7:	56                   	push   %esi
   110c8:	53                   	push   %ebx
   110c9:	51                   	push   %ecx
   110ca:	52                   	push   %edx
   110cb:	50                   	push   %eax
   110cc:	68 00 32 01 00       	push   $0x13200
   110d1:	e8 9f 1d 00 00       	call   12e75 <log_printf>
   110d6:	83 c4 20             	add    $0x20,%esp
              "ESI:\t\t0x%x\n"
              "EDI:\t\t0x%x\n"
              "EBP:\t\t0x%x\n"
              "ESP:\t\t0x%x", 
              frame->eax, frame->ebx, frame->ecx, frame->edx,
              frame->esi, frame->edi, frame->ebp, frame->esp 
   110d9:	8b 45 08             	mov    0x8(%ebp),%eax
   110dc:	8b 48 1c             	mov    0x1c(%eax),%ecx
   110df:	8b 45 08             	mov    0x8(%ebp),%eax
   110e2:	8b 40 18             	mov    0x18(%eax),%eax
   110e5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   110e8:	8b 45 08             	mov    0x8(%ebp),%eax
   110eb:	8b 58 10             	mov    0x10(%eax),%ebx
   110ee:	89 5d e0             	mov    %ebx,-0x20(%ebp)
   110f1:	8b 45 08             	mov    0x8(%ebp),%eax
   110f4:	8b 78 14             	mov    0x14(%eax),%edi
              frame->eax, frame->ebx, frame->ecx, frame->edx,
   110f7:	8b 45 08             	mov    0x8(%ebp),%eax
   110fa:	8b 70 24             	mov    0x24(%eax),%esi
   110fd:	8b 45 08             	mov    0x8(%ebp),%eax
   11100:	8b 58 28             	mov    0x28(%eax),%ebx
   11103:	8b 45 08             	mov    0x8(%ebp),%eax
   11106:	8b 50 20             	mov    0x20(%eax),%edx
   11109:	8b 45 08             	mov    0x8(%ebp),%eax
   1110c:	8b 40 2c             	mov    0x2c(%eax),%eax
  log_printf( 
   1110f:	83 ec 0c             	sub    $0xc,%esp
   11112:	51                   	push   %ecx
   11113:	ff 75 e4             	push   -0x1c(%ebp)
   11116:	ff 75 e0             	push   -0x20(%ebp)
   11119:	57                   	push   %edi
   1111a:	56                   	push   %esi
   1111b:	53                   	push   %ebx
   1111c:	52                   	push   %edx
   1111d:	50                   	push   %eax
   1111e:	68 30 32 01 00       	push   $0x13230
   11123:	e8 4d 1d 00 00       	call   12e75 <log_printf>
   11128:	83 c4 30             	add    $0x30,%esp
              );

  log_printf("EIP:\t\t0x%x\nEFLAGS:\t\t0x%x", frame->eip, frame->eflags);
   1112b:	8b 45 08             	mov    0x8(%ebp),%eax
   1112e:	8b 50 40             	mov    0x40(%eax),%edx
   11131:	8b 45 08             	mov    0x8(%ebp),%eax
   11134:	8b 40 38             	mov    0x38(%eax),%eax
   11137:	83 ec 04             	sub    $0x4,%esp
   1113a:	52                   	push   %edx
   1113b:	50                   	push   %eax
   1113c:	68 88 32 01 00       	push   $0x13288
   11141:	e8 2f 1d 00 00       	call   12e75 <log_printf>
   11146:	83 c4 10             	add    $0x10,%esp
}
   11149:	90                   	nop
   1114a:	8d 65 f4             	lea    -0xc(%ebp),%esp
   1114d:	5b                   	pop    %ebx
   1114e:	5e                   	pop    %esi
   1114f:	5f                   	pop    %edi
   11150:	5d                   	pop    %ebp
   11151:	c3                   	ret    

00011152 <do_default_handler>:
 *
 * @param message 异常信息
 * @param fram  异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
static void do_default_handler(const exception_frame_t *frame,
                               const char *message) {
   11152:	55                   	push   %ebp
   11153:	89 e5                	mov    %esp,%ebp
   11155:	83 ec 08             	sub    $0x8,%esp

  log_printf("---------------------------------------------------");
   11158:	83 ec 0c             	sub    $0xc,%esp
   1115b:	68 a4 32 01 00       	push   $0x132a4
   11160:	e8 10 1d 00 00       	call   12e75 <log_printf>
   11165:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ/Exception happend: %s", message);
   11168:	83 ec 08             	sub    $0x8,%esp
   1116b:	ff 75 0c             	push   0xc(%ebp)
   1116e:	68 d8 32 01 00       	push   $0x132d8
   11173:	e8 fd 1c 00 00       	call   12e75 <log_printf>
   11178:	83 c4 10             	add    $0x10,%esp
  print_exception_fram(frame);
   1117b:	83 ec 0c             	sub    $0xc,%esp
   1117e:	ff 75 08             	push   0x8(%ebp)
   11181:	e8 e3 fe ff ff       	call   11069 <print_exception_fram>
   11186:	83 c4 10             	add    $0x10,%esp
                              
  
  for (;;) {
    hlt();
   11189:	e8 53 fe ff ff       	call   10fe1 <hlt>
   1118e:	eb f9                	jmp    11189 <do_default_handler+0x37>

00011190 <do_handler_unknown>:

/**
 * @brief   对没有针对性处理程序的异常进行处理
 * @param frame 异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
void do_handler_unknown(const exception_frame_t *frame) {
   11190:	55                   	push   %ebp
   11191:	89 e5                	mov    %esp,%ebp
   11193:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "unknown exception");
   11196:	83 ec 08             	sub    $0x8,%esp
   11199:	68 f2 32 01 00       	push   $0x132f2
   1119e:	ff 75 08             	push   0x8(%ebp)
   111a1:	e8 ac ff ff ff       	call   11152 <do_default_handler>
   111a6:	83 c4 10             	add    $0x10,%esp
}
   111a9:	90                   	nop
   111aa:	c9                   	leave  
   111ab:	c3                   	ret    

000111ac <do_handler_divider>:
/**
 * @brief  除0异常
 *
 * @param frame 异常栈帧
 */
void do_handler_divider(const exception_frame_t *frame) {
   111ac:	55                   	push   %ebp
   111ad:	89 e5                	mov    %esp,%ebp
   111af:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "divider exception");
   111b2:	83 ec 08             	sub    $0x8,%esp
   111b5:	68 04 33 01 00       	push   $0x13304
   111ba:	ff 75 08             	push   0x8(%ebp)
   111bd:	e8 90 ff ff ff       	call   11152 <do_default_handler>
   111c2:	83 c4 10             	add    $0x10,%esp
}
   111c5:	90                   	nop
   111c6:	c9                   	leave  
   111c7:	c3                   	ret    

000111c8 <do_handler_debug>:

void do_handler_debug(const exception_frame_t *frame) {
   111c8:	55                   	push   %ebp
   111c9:	89 e5                	mov    %esp,%ebp
   111cb:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "debug exception");
   111ce:	83 ec 08             	sub    $0x8,%esp
   111d1:	68 16 33 01 00       	push   $0x13316
   111d6:	ff 75 08             	push   0x8(%ebp)
   111d9:	e8 74 ff ff ff       	call   11152 <do_default_handler>
   111de:	83 c4 10             	add    $0x10,%esp
}
   111e1:	90                   	nop
   111e2:	c9                   	leave  
   111e3:	c3                   	ret    

000111e4 <do_handler_nmi>:

void do_handler_nmi(const exception_frame_t *frame) {
   111e4:	55                   	push   %ebp
   111e5:	89 e5                	mov    %esp,%ebp
   111e7:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "nmi exception");
   111ea:	83 ec 08             	sub    $0x8,%esp
   111ed:	68 26 33 01 00       	push   $0x13326
   111f2:	ff 75 08             	push   0x8(%ebp)
   111f5:	e8 58 ff ff ff       	call   11152 <do_default_handler>
   111fa:	83 c4 10             	add    $0x10,%esp
}
   111fd:	90                   	nop
   111fe:	c9                   	leave  
   111ff:	c3                   	ret    

00011200 <do_handler_breakpoint>:
void do_handler_breakpoint(const exception_frame_t *frame) {
   11200:	55                   	push   %ebp
   11201:	89 e5                	mov    %esp,%ebp
   11203:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "breakpoint exception");
   11206:	83 ec 08             	sub    $0x8,%esp
   11209:	68 34 33 01 00       	push   $0x13334
   1120e:	ff 75 08             	push   0x8(%ebp)
   11211:	e8 3c ff ff ff       	call   11152 <do_default_handler>
   11216:	83 c4 10             	add    $0x10,%esp
}
   11219:	90                   	nop
   1121a:	c9                   	leave  
   1121b:	c3                   	ret    

0001121c <do_handler_overflow>:
void do_handler_overflow(const exception_frame_t *frame) {
   1121c:	55                   	push   %ebp
   1121d:	89 e5                	mov    %esp,%ebp
   1121f:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "overflow exception");
   11222:	83 ec 08             	sub    $0x8,%esp
   11225:	68 49 33 01 00       	push   $0x13349
   1122a:	ff 75 08             	push   0x8(%ebp)
   1122d:	e8 20 ff ff ff       	call   11152 <do_default_handler>
   11232:	83 c4 10             	add    $0x10,%esp
}
   11235:	90                   	nop
   11236:	c9                   	leave  
   11237:	c3                   	ret    

00011238 <do_handler_bound_range>:
void do_handler_bound_range(const exception_frame_t *frame) {
   11238:	55                   	push   %ebp
   11239:	89 e5                	mov    %esp,%ebp
   1123b:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "bound_range exception");
   1123e:	83 ec 08             	sub    $0x8,%esp
   11241:	68 5c 33 01 00       	push   $0x1335c
   11246:	ff 75 08             	push   0x8(%ebp)
   11249:	e8 04 ff ff ff       	call   11152 <do_default_handler>
   1124e:	83 c4 10             	add    $0x10,%esp
}
   11251:	90                   	nop
   11252:	c9                   	leave  
   11253:	c3                   	ret    

00011254 <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(const exception_frame_t *frame) {
   11254:	55                   	push   %ebp
   11255:	89 e5                	mov    %esp,%ebp
   11257:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_opcode exception");
   1125a:	83 ec 08             	sub    $0x8,%esp
   1125d:	68 72 33 01 00       	push   $0x13372
   11262:	ff 75 08             	push   0x8(%ebp)
   11265:	e8 e8 fe ff ff       	call   11152 <do_default_handler>
   1126a:	83 c4 10             	add    $0x10,%esp
}
   1126d:	90                   	nop
   1126e:	c9                   	leave  
   1126f:	c3                   	ret    

00011270 <do_handler_device_unavailable>:
void do_handler_device_unavailable(const exception_frame_t *frame) {
   11270:	55                   	push   %ebp
   11271:	89 e5                	mov    %esp,%ebp
   11273:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "device_unavailable exception");
   11276:	83 ec 08             	sub    $0x8,%esp
   11279:	68 8b 33 01 00       	push   $0x1338b
   1127e:	ff 75 08             	push   0x8(%ebp)
   11281:	e8 cc fe ff ff       	call   11152 <do_default_handler>
   11286:	83 c4 10             	add    $0x10,%esp
}
   11289:	90                   	nop
   1128a:	c9                   	leave  
   1128b:	c3                   	ret    

0001128c <do_handler_double_fault>:
void do_handler_double_fault(const exception_frame_t *frame) {
   1128c:	55                   	push   %ebp
   1128d:	89 e5                	mov    %esp,%ebp
   1128f:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "double_fault exception");
   11292:	83 ec 08             	sub    $0x8,%esp
   11295:	68 a8 33 01 00       	push   $0x133a8
   1129a:	ff 75 08             	push   0x8(%ebp)
   1129d:	e8 b0 fe ff ff       	call   11152 <do_default_handler>
   112a2:	83 c4 10             	add    $0x10,%esp
}
   112a5:	90                   	nop
   112a6:	c9                   	leave  
   112a7:	c3                   	ret    

000112a8 <do_handler_invalid_tss>:
void do_handler_invalid_tss(const exception_frame_t *frame) {
   112a8:	55                   	push   %ebp
   112a9:	89 e5                	mov    %esp,%ebp
   112ab:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_tss exception");
   112ae:	83 ec 08             	sub    $0x8,%esp
   112b1:	68 bf 33 01 00       	push   $0x133bf
   112b6:	ff 75 08             	push   0x8(%ebp)
   112b9:	e8 94 fe ff ff       	call   11152 <do_default_handler>
   112be:	83 c4 10             	add    $0x10,%esp
}
   112c1:	90                   	nop
   112c2:	c9                   	leave  
   112c3:	c3                   	ret    

000112c4 <do_handler_segment_not_present>:
void do_handler_segment_not_present(const exception_frame_t *frame) {
   112c4:	55                   	push   %ebp
   112c5:	89 e5                	mov    %esp,%ebp
   112c7:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "segment_not_present exception");
   112ca:	83 ec 08             	sub    $0x8,%esp
   112cd:	68 d5 33 01 00       	push   $0x133d5
   112d2:	ff 75 08             	push   0x8(%ebp)
   112d5:	e8 78 fe ff ff       	call   11152 <do_default_handler>
   112da:	83 c4 10             	add    $0x10,%esp
}
   112dd:	90                   	nop
   112de:	c9                   	leave  
   112df:	c3                   	ret    

000112e0 <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(const exception_frame_t *frame) {
   112e0:	55                   	push   %ebp
   112e1:	89 e5                	mov    %esp,%ebp
   112e3:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "stack_segment_fault exception");
   112e6:	83 ec 08             	sub    $0x8,%esp
   112e9:	68 f3 33 01 00       	push   $0x133f3
   112ee:	ff 75 08             	push   0x8(%ebp)
   112f1:	e8 5c fe ff ff       	call   11152 <do_default_handler>
   112f6:	83 c4 10             	add    $0x10,%esp
}
   112f9:	90                   	nop
   112fa:	c9                   	leave  
   112fb:	c3                   	ret    

000112fc <do_handler_general_protection>:
void do_handler_general_protection(const exception_frame_t *frame) {
   112fc:	55                   	push   %ebp
   112fd:	89 e5                	mov    %esp,%ebp
   112ff:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "general_protection exception");
   11302:	83 ec 08             	sub    $0x8,%esp
   11305:	68 11 34 01 00       	push   $0x13411
   1130a:	ff 75 08             	push   0x8(%ebp)
   1130d:	e8 40 fe ff ff       	call   11152 <do_default_handler>
   11312:	83 c4 10             	add    $0x10,%esp
}
   11315:	90                   	nop
   11316:	c9                   	leave  
   11317:	c3                   	ret    

00011318 <do_handler_page_fault>:
void do_handler_page_fault(const exception_frame_t *frame) {
   11318:	55                   	push   %ebp
   11319:	89 e5                	mov    %esp,%ebp
   1131b:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "page_fault exception");
   1131e:	83 ec 08             	sub    $0x8,%esp
   11321:	68 2e 34 01 00       	push   $0x1342e
   11326:	ff 75 08             	push   0x8(%ebp)
   11329:	e8 24 fe ff ff       	call   11152 <do_default_handler>
   1132e:	83 c4 10             	add    $0x10,%esp
}
   11331:	90                   	nop
   11332:	c9                   	leave  
   11333:	c3                   	ret    

00011334 <do_handler_fpu_error>:
void do_handler_fpu_error(const exception_frame_t *frame) {
   11334:	55                   	push   %ebp
   11335:	89 e5                	mov    %esp,%ebp
   11337:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "fpu_error exception");
   1133a:	83 ec 08             	sub    $0x8,%esp
   1133d:	68 43 34 01 00       	push   $0x13443
   11342:	ff 75 08             	push   0x8(%ebp)
   11345:	e8 08 fe ff ff       	call   11152 <do_default_handler>
   1134a:	83 c4 10             	add    $0x10,%esp
}
   1134d:	90                   	nop
   1134e:	c9                   	leave  
   1134f:	c3                   	ret    

00011350 <do_handler_alignment_check>:
void do_handler_alignment_check(const exception_frame_t *frame) {
   11350:	55                   	push   %ebp
   11351:	89 e5                	mov    %esp,%ebp
   11353:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "alignment_check exception");
   11356:	83 ec 08             	sub    $0x8,%esp
   11359:	68 57 34 01 00       	push   $0x13457
   1135e:	ff 75 08             	push   0x8(%ebp)
   11361:	e8 ec fd ff ff       	call   11152 <do_default_handler>
   11366:	83 c4 10             	add    $0x10,%esp
}
   11369:	90                   	nop
   1136a:	c9                   	leave  
   1136b:	c3                   	ret    

0001136c <do_handler_machine_check>:
void do_handler_machine_check(const exception_frame_t *frame) {
   1136c:	55                   	push   %ebp
   1136d:	89 e5                	mov    %esp,%ebp
   1136f:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "machine_check exception");
   11372:	83 ec 08             	sub    $0x8,%esp
   11375:	68 71 34 01 00       	push   $0x13471
   1137a:	ff 75 08             	push   0x8(%ebp)
   1137d:	e8 d0 fd ff ff       	call   11152 <do_default_handler>
   11382:	83 c4 10             	add    $0x10,%esp
}
   11385:	90                   	nop
   11386:	c9                   	leave  
   11387:	c3                   	ret    

00011388 <do_handler_smd_exception>:
void do_handler_smd_exception(const exception_frame_t *frame) {
   11388:	55                   	push   %ebp
   11389:	89 e5                	mov    %esp,%ebp
   1138b:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "smd_exception exception");
   1138e:	83 ec 08             	sub    $0x8,%esp
   11391:	68 89 34 01 00       	push   $0x13489
   11396:	ff 75 08             	push   0x8(%ebp)
   11399:	e8 b4 fd ff ff       	call   11152 <do_default_handler>
   1139e:	83 c4 10             	add    $0x10,%esp
}
   113a1:	90                   	nop
   113a2:	c9                   	leave  
   113a3:	c3                   	ret    

000113a4 <do_handler_virtual_exception>:
void do_handler_virtual_exception(const exception_frame_t *frame) {
   113a4:	55                   	push   %ebp
   113a5:	89 e5                	mov    %esp,%ebp
   113a7:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "virtual_exception exception");
   113aa:	83 ec 08             	sub    $0x8,%esp
   113ad:	68 a1 34 01 00       	push   $0x134a1
   113b2:	ff 75 08             	push   0x8(%ebp)
   113b5:	e8 98 fd ff ff       	call   11152 <do_default_handler>
   113ba:	83 c4 10             	add    $0x10,%esp
}
   113bd:	90                   	nop
   113be:	c9                   	leave  
   113bf:	c3                   	ret    

000113c0 <do_handler_control_exception>:
void do_handler_control_exception(const exception_frame_t *frame) {
   113c0:	55                   	push   %ebp
   113c1:	89 e5                	mov    %esp,%ebp
   113c3:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "control_exception exception");
   113c6:	83 ec 08             	sub    $0x8,%esp
   113c9:	68 bd 34 01 00       	push   $0x134bd
   113ce:	ff 75 08             	push   0x8(%ebp)
   113d1:	e8 7c fd ff ff       	call   11152 <do_default_handler>
   113d6:	83 c4 10             	add    $0x10,%esp
}
   113d9:	90                   	nop
   113da:	c9                   	leave  
   113db:	c3                   	ret    

000113dc <gate_desc_set>:
 * @param selector 中断门对应的处理程序所在的段的选择子
 * @param offset 中段门对应的处理程序相对于所在段的偏移量
 * @param attr 中段门的属性
 */
static void gate_desc_set(gate_desc_t *desc, const uint16_t selector, const uint32_t offset,
                          const uint16_t attr) {
   113dc:	55                   	push   %ebp
   113dd:	89 e5                	mov    %esp,%ebp
   113df:	83 ec 08             	sub    $0x8,%esp
   113e2:	8b 55 0c             	mov    0xc(%ebp),%edx
   113e5:	8b 45 14             	mov    0x14(%ebp),%eax
   113e8:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   113ec:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
  // 1.初始化偏移量
  desc->offset15_0 = offset & 0xffff;
   113f0:	8b 45 10             	mov    0x10(%ebp),%eax
   113f3:	89 c2                	mov    %eax,%edx
   113f5:	8b 45 08             	mov    0x8(%ebp),%eax
   113f8:	66 89 10             	mov    %dx,(%eax)
  desc->offset31_16 = (offset >> 16) & 0xffff;
   113fb:	8b 45 10             	mov    0x10(%ebp),%eax
   113fe:	c1 e8 10             	shr    $0x10,%eax
   11401:	89 c2                	mov    %eax,%edx
   11403:	8b 45 08             	mov    0x8(%ebp),%eax
   11406:	66 89 50 06          	mov    %dx,0x6(%eax)

  // 2.初始化选择子
  desc->selector = selector;
   1140a:	8b 45 08             	mov    0x8(%ebp),%eax
   1140d:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11411:	66 89 50 02          	mov    %dx,0x2(%eax)

  // 3.初始化属性位
  desc->attr = attr;
   11415:	8b 45 08             	mov    0x8(%ebp),%eax
   11418:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   1141c:	66 89 50 04          	mov    %dx,0x4(%eax)
}
   11420:	90                   	nop
   11421:	c9                   	leave  
   11422:	c3                   	ret    

00011423 <idt_install>:
 *
 * @param idt_num 异常的下标
 * @param handler 异常处理程序的偏移地址
 * @return int 成功返回 0 失败放回 -1
 */
int idt_install(const int idt_num, const idt_handler_t handler) {
   11423:	55                   	push   %ebp
   11424:	89 e5                	mov    %esp,%ebp
  // 1.判断IDT下标是否越界
  if (idt_num >= IDT_TABLE_SIZE || idt_num < 0) return -1;
   11426:	81 7d 08 ff 00 00 00 	cmpl   $0xff,0x8(%ebp)
   1142d:	7f 06                	jg     11435 <idt_install+0x12>
   1142f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11433:	79 07                	jns    1143c <idt_install+0x19>
   11435:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1143a:	eb 25                	jmp    11461 <idt_install+0x3e>

  // 2.在IDT表中设置下标为 idt_num 的中断门
  gate_desc_set(idt_table + idt_num, KERNEL_SELECTOR_CS, (uint32_t)handler,
   1143c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1143f:	8b 55 08             	mov    0x8(%ebp),%edx
   11442:	c1 e2 03             	shl    $0x3,%edx
   11445:	81 c2 c0 e3 02 00    	add    $0x2e3c0,%edx
   1144b:	68 00 8e 00 00       	push   $0x8e00
   11450:	50                   	push   %eax
   11451:	6a 08                	push   $0x8
   11453:	52                   	push   %edx
   11454:	e8 83 ff ff ff       	call   113dc <gate_desc_set>
   11459:	83 c4 10             	add    $0x10,%esp
                GATE_TYPE_INT | GATE_ATTR_P | GATE_ATTR_DPL_0);

  return 0;
   1145c:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11461:	c9                   	leave  
   11462:	c3                   	ret    

00011463 <init_pic>:

/**
 * @brief  初始化主从8259芯片
 * 
 */
static void init_pic(void) {
   11463:	55                   	push   %ebp
   11464:	89 e5                	mov    %esp,%ebp
  //1.对主片(8259A芯片)进行初始化, 写入时必须按照ICW1~4的顺序写入
  outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);  //ICW1:边缘触发，级联模式，需要ICW4
   11466:	6a 11                	push   $0x11
   11468:	6a 20                	push   $0x20
   1146a:	e8 96 fb ff ff       	call   11005 <outb>
   1146f:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW2, PIC_ICW2_IDT_START);                //ICW2:起始中断向量号为0x20
   11472:	6a 20                	push   $0x20
   11474:	6a 21                	push   $0x21
   11476:	e8 8a fb ff ff       	call   11005 <outb>
   1147b:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW3, PIC_ICW3_MASTER_CASCADE);           //ICW3:主片用IR2级联从片
   1147e:	6a 04                	push   $0x4
   11480:	6a 21                	push   $0x21
   11482:	e8 7e fb ff ff       	call   11005 <outb>
   11487:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW4, PIC_ICW4_8086);                     //ICW4:8086模式，正常EOI
   1148a:	6a 01                	push   $0x1
   1148c:	6a 21                	push   $0x21
   1148e:	e8 72 fb ff ff       	call   11005 <outb>
   11493:	83 c4 08             	add    $0x8,%esp

  //2.对从片(8259A芯片)进行初始化
  outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);
   11496:	6a 11                	push   $0x11
   11498:	68 a0 00 00 00       	push   $0xa0
   1149d:	e8 63 fb ff ff       	call   11005 <outb>
   114a2:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW2, PIC_ICW2_IDT_START + 8); //第一块芯片占用了8个中断，所以第二块芯片从第8个中断的下一个开始
   114a5:	6a 28                	push   $0x28
   114a7:	68 a1 00 00 00       	push   $0xa1
   114ac:	e8 54 fb ff ff       	call   11005 <outb>
   114b1:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW3, PIC_ICW3_SLAVE_CASCADE);
   114b4:	6a 02                	push   $0x2
   114b6:	68 a1 00 00 00       	push   $0xa1
   114bb:	e8 45 fb ff ff       	call   11005 <outb>
   114c0:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW4, PIC_ICW4_8086);
   114c3:	6a 01                	push   $0x1
   114c5:	68 a1 00 00 00       	push   $0xa1
   114ca:	e8 36 fb ff ff       	call   11005 <outb>
   114cf:	83 c4 08             	add    $0x8,%esp


  //3.初始化完两块8259芯片后，还需要为每一个中断设置处理程序
  //才可以去接收中断，所以现在要屏蔽中断，IMR位置1则屏蔽该中断请求，0则不屏蔽
  outb(PIC0_IMR, 0xfb); //屏蔽主片除 irq2(第3位) 以外的位传来的中断，(1111 1011)
   114d2:	68 fb 00 00 00       	push   $0xfb
   114d7:	6a 21                	push   $0x21
   114d9:	e8 27 fb ff ff       	call   11005 <outb>
   114de:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_IMR, 0xff); //屏蔽从片的所有中断
   114e1:	68 ff 00 00 00       	push   $0xff
   114e6:	68 a1 00 00 00       	push   $0xa1
   114eb:	e8 15 fb ff ff       	call   11005 <outb>
   114f0:	83 c4 08             	add    $0x8,%esp


}
   114f3:	90                   	nop
   114f4:	c9                   	leave  
   114f5:	c3                   	ret    

000114f6 <idt_init>:

/**
 * @brief  初始化中断向量表
 *
 */
void idt_init(void) {
   114f6:	55                   	push   %ebp
   114f7:	89 e5                	mov    %esp,%ebp
   114f9:	83 ec 10             	sub    $0x10,%esp
  // 1.初始化IDT中的各个中断门(未知异常类型)
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   114fc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   11503:	eb 14                	jmp    11519 <idt_init+0x23>
    idt_install(i, (idt_handler_t)exception_handler_unknown);
   11505:	68 2a 00 01 00       	push   $0x1002a
   1150a:	ff 75 fc             	push   -0x4(%ebp)
   1150d:	e8 11 ff ff ff       	call   11423 <idt_install>
   11512:	83 c4 08             	add    $0x8,%esp
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   11515:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   11519:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   11520:	7e e3                	jle    11505 <idt_init+0xf>
  }

  // 2.绑定异常中断向量表中对应下标的中断门的处理函数
  idt_install(IDT0_DE, (idt_handler_t)exception_handler_divider);
   11522:	68 47 00 01 00       	push   $0x10047
   11527:	6a 00                	push   $0x0
   11529:	e8 f5 fe ff ff       	call   11423 <idt_install>
   1152e:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT1_DB, (idt_handler_t)exception_handler_debug);
   11531:	68 64 00 01 00       	push   $0x10064
   11536:	6a 01                	push   $0x1
   11538:	e8 e6 fe ff ff       	call   11423 <idt_install>
   1153d:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT2_NMI, (idt_handler_t)exception_handler_nmi);
   11540:	68 81 00 01 00       	push   $0x10081
   11545:	6a 02                	push   $0x2
   11547:	e8 d7 fe ff ff       	call   11423 <idt_install>
   1154c:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT3_BP, (idt_handler_t)exception_handler_breakpoint);
   1154f:	68 9e 00 01 00       	push   $0x1009e
   11554:	6a 03                	push   $0x3
   11556:	e8 c8 fe ff ff       	call   11423 <idt_install>
   1155b:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT4_OF, (idt_handler_t)exception_handler_overflow);
   1155e:	68 bb 00 01 00       	push   $0x100bb
   11563:	6a 04                	push   $0x4
   11565:	e8 b9 fe ff ff       	call   11423 <idt_install>
   1156a:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT5_BR, (idt_handler_t)exception_handler_bound_range);
   1156d:	68 d8 00 01 00       	push   $0x100d8
   11572:	6a 05                	push   $0x5
   11574:	e8 aa fe ff ff       	call   11423 <idt_install>
   11579:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT6_UD, (idt_handler_t)exception_handler_invalid_opcode);
   1157c:	68 f5 00 01 00       	push   $0x100f5
   11581:	6a 06                	push   $0x6
   11583:	e8 9b fe ff ff       	call   11423 <idt_install>
   11588:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT7_NM, (idt_handler_t)exception_handler_device_unavailable);
   1158b:	68 12 01 01 00       	push   $0x10112
   11590:	6a 07                	push   $0x7
   11592:	e8 8c fe ff ff       	call   11423 <idt_install>
   11597:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT8_DF, (idt_handler_t)exception_handler_double_fault);
   1159a:	68 2f 01 01 00       	push   $0x1012f
   1159f:	6a 08                	push   $0x8
   115a1:	e8 7d fe ff ff       	call   11423 <idt_install>
   115a6:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT10_TS, (idt_handler_t)exception_handler_invalid_tss);
   115a9:	68 4a 01 01 00       	push   $0x1014a
   115ae:	6a 0a                	push   $0xa
   115b0:	e8 6e fe ff ff       	call   11423 <idt_install>
   115b5:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT11_NP, (idt_handler_t)exception_handler_segment_not_present);
   115b8:	68 65 01 01 00       	push   $0x10165
   115bd:	6a 0b                	push   $0xb
   115bf:	e8 5f fe ff ff       	call   11423 <idt_install>
   115c4:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT12_SS, (idt_handler_t)exception_handler_stack_segment_fault);
   115c7:	68 80 01 01 00       	push   $0x10180
   115cc:	6a 0c                	push   $0xc
   115ce:	e8 50 fe ff ff       	call   11423 <idt_install>
   115d3:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT13_GP, (idt_handler_t)exception_handler_general_protection);
   115d6:	68 9b 01 01 00       	push   $0x1019b
   115db:	6a 0d                	push   $0xd
   115dd:	e8 41 fe ff ff       	call   11423 <idt_install>
   115e2:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT14_PF, (idt_handler_t)exception_handler_page_fault);
   115e5:	68 b6 01 01 00       	push   $0x101b6
   115ea:	6a 0e                	push   $0xe
   115ec:	e8 32 fe ff ff       	call   11423 <idt_install>
   115f1:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT16_MF, (idt_handler_t)exception_handler_fpu_error);
   115f4:	68 d1 01 01 00       	push   $0x101d1
   115f9:	6a 10                	push   $0x10
   115fb:	e8 23 fe ff ff       	call   11423 <idt_install>
   11600:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT17_AC, (idt_handler_t)exception_handler_alignment_check);
   11603:	68 ee 01 01 00       	push   $0x101ee
   11608:	6a 11                	push   $0x11
   1160a:	e8 14 fe ff ff       	call   11423 <idt_install>
   1160f:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT18_MC, (idt_handler_t)exception_handler_machine_check);
   11612:	68 09 02 01 00       	push   $0x10209
   11617:	6a 12                	push   $0x12
   11619:	e8 05 fe ff ff       	call   11423 <idt_install>
   1161e:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT19_XM, (idt_handler_t)exception_handler_smd_exception);
   11621:	68 26 02 01 00       	push   $0x10226
   11626:	6a 13                	push   $0x13
   11628:	e8 f6 fd ff ff       	call   11423 <idt_install>
   1162d:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT20_VE, (idt_handler_t)exception_handler_virtual_exception);
   11630:	68 43 02 01 00       	push   $0x10243
   11635:	6a 14                	push   $0x14
   11637:	e8 e7 fd ff ff       	call   11423 <idt_install>
   1163c:	83 c4 08             	add    $0x8,%esp
  idt_install(IDT21_CP, (idt_handler_t)exception_handler_control_exception);
   1163f:	68 60 02 01 00       	push   $0x10260
   11644:	6a 15                	push   $0x15
   11646:	e8 d8 fd ff ff       	call   11423 <idt_install>
   1164b:	83 c4 08             	add    $0x8,%esp

  //3.加载IDT
  lidt((uint32_t)idt_table, sizeof(idt_table));
   1164e:	b8 c0 e3 02 00       	mov    $0x2e3c0,%eax
   11653:	68 00 08 00 00       	push   $0x800
   11658:	50                   	push   %eax
   11659:	e8 c8 f9 ff ff       	call   11026 <lidt>
   1165e:	83 c4 08             	add    $0x8,%esp

  //4.初始化8259设备中断芯片
  init_pic();
   11661:	e8 fd fd ff ff       	call   11463 <init_pic>
}
   11666:	90                   	nop
   11667:	c9                   	leave  
   11668:	c3                   	ret    

00011669 <idt_enable>:
/**
 * @brief  开启外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号,即IDT中的下标
 */
void idt_enable(uint8_t irq_num) {
   11669:	55                   	push   %ebp
   1166a:	89 e5                	mov    %esp,%ebp
   1166c:	53                   	push   %ebx
   1166d:	83 ec 14             	sub    $0x14,%esp
   11670:	8b 45 08             	mov    0x8(%ebp),%eax
   11673:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   11676:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   1167a:	76 7f                	jbe    116fb <idt_enable+0x92>
   1167c:	80 7d e8 2e          	cmpb   $0x2e,-0x18(%ebp)
   11680:	77 79                	ja     116fb <idt_enable+0x92>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   11682:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置0，即不屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   11686:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   1168a:	77 33                	ja     116bf <idt_enable+0x56>
    uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   1168c:	6a 21                	push   $0x21
   1168e:	e8 55 f9 ff ff       	call   10fe8 <inb>
   11693:	83 c4 04             	add    $0x4,%esp
   11696:	89 c3                	mov    %eax,%ebx
   11698:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   1169c:	ba 01 00 00 00       	mov    $0x1,%edx
   116a1:	89 c1                	mov    %eax,%ecx
   116a3:	d3 e2                	shl    %cl,%edx
   116a5:	89 d0                	mov    %edx,%eax
   116a7:	f7 d0                	not    %eax
   116a9:	21 d8                	and    %ebx,%eax
   116ab:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   116ae:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   116b2:	50                   	push   %eax
   116b3:	6a 21                	push   $0x21
   116b5:	e8 4b f9 ff ff       	call   11005 <outb>
   116ba:	83 c4 08             	add    $0x8,%esp
   116bd:	eb 3d                	jmp    116fc <idt_enable+0x93>
  } else {
    uint8_t mask = inb(PIC1_IMR) & ~(1 << (irq_num - 8));
   116bf:	68 a1 00 00 00       	push   $0xa1
   116c4:	e8 1f f9 ff ff       	call   10fe8 <inb>
   116c9:	83 c4 04             	add    $0x4,%esp
   116cc:	89 c3                	mov    %eax,%ebx
   116ce:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   116d2:	83 e8 08             	sub    $0x8,%eax
   116d5:	ba 01 00 00 00       	mov    $0x1,%edx
   116da:	89 c1                	mov    %eax,%ecx
   116dc:	d3 e2                	shl    %cl,%edx
   116de:	89 d0                	mov    %edx,%eax
   116e0:	f7 d0                	not    %eax
   116e2:	21 d8                	and    %ebx,%eax
   116e4:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   116e7:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   116eb:	50                   	push   %eax
   116ec:	68 a1 00 00 00       	push   $0xa1
   116f1:	e8 0f f9 ff ff       	call   11005 <outb>
   116f6:	83 c4 08             	add    $0x8,%esp
   116f9:	eb 01                	jmp    116fc <idt_enable+0x93>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   116fb:	90                   	nop
  }
  
}
   116fc:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   116ff:	c9                   	leave  
   11700:	c3                   	ret    

00011701 <idt_disable>:
/**
 * @brief  关闭外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号，即IDT中的下标
 */
void idt_disable(uint8_t irq_num) {
   11701:	55                   	push   %ebp
   11702:	89 e5                	mov    %esp,%ebp
   11704:	53                   	push   %ebx
   11705:	83 ec 14             	sub    $0x14,%esp
   11708:	8b 45 08             	mov    0x8(%ebp),%eax
   1170b:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   1170e:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   11712:	76 7b                	jbe    1178f <idt_disable+0x8e>
   11714:	80 7d e8 2f          	cmpb   $0x2f,-0x18(%ebp)
   11718:	77 75                	ja     1178f <idt_disable+0x8e>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   1171a:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置1，即屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   1171e:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   11722:	77 31                	ja     11755 <idt_disable+0x54>
    uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   11724:	6a 21                	push   $0x21
   11726:	e8 bd f8 ff ff       	call   10fe8 <inb>
   1172b:	83 c4 04             	add    $0x4,%esp
   1172e:	89 c3                	mov    %eax,%ebx
   11730:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   11734:	ba 01 00 00 00       	mov    $0x1,%edx
   11739:	89 c1                	mov    %eax,%ecx
   1173b:	d3 e2                	shl    %cl,%edx
   1173d:	89 d0                	mov    %edx,%eax
   1173f:	09 d8                	or     %ebx,%eax
   11741:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   11744:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11748:	50                   	push   %eax
   11749:	6a 21                	push   $0x21
   1174b:	e8 b5 f8 ff ff       	call   11005 <outb>
   11750:	83 c4 08             	add    $0x8,%esp
   11753:	eb 3b                	jmp    11790 <idt_disable+0x8f>
  } else {
    uint8_t mask = inb(PIC1_IMR) | (1 << (irq_num - 8));
   11755:	68 a1 00 00 00       	push   $0xa1
   1175a:	e8 89 f8 ff ff       	call   10fe8 <inb>
   1175f:	83 c4 04             	add    $0x4,%esp
   11762:	89 c3                	mov    %eax,%ebx
   11764:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   11768:	83 e8 08             	sub    $0x8,%eax
   1176b:	ba 01 00 00 00       	mov    $0x1,%edx
   11770:	89 c1                	mov    %eax,%ecx
   11772:	d3 e2                	shl    %cl,%edx
   11774:	89 d0                	mov    %edx,%eax
   11776:	09 d8                	or     %ebx,%eax
   11778:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   1177b:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   1177f:	50                   	push   %eax
   11780:	68 a1 00 00 00       	push   $0xa1
   11785:	e8 7b f8 ff ff       	call   11005 <outb>
   1178a:	83 c4 08             	add    $0x8,%esp
   1178d:	eb 01                	jmp    11790 <idt_disable+0x8f>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   1178f:	90                   	nop
  }
  
}
   11790:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11793:	c9                   	leave  
   11794:	c3                   	ret    

00011795 <idt_disable_global>:

/**
 * @brief  关闭全局中断
 * 
 */
void idt_disable_global(void) {
   11795:	55                   	push   %ebp
   11796:	89 e5                	mov    %esp,%ebp
  cli();
   11798:	e8 36 f8 ff ff       	call   10fd3 <cli>
}
   1179d:	90                   	nop
   1179e:	5d                   	pop    %ebp
   1179f:	c3                   	ret    

000117a0 <idt_enable_global>:

/**
 * @brief  开启全局中断
 * 
 */
void idt_enable_global(void) {
   117a0:	55                   	push   %ebp
   117a1:	89 e5                	mov    %esp,%ebp
  sti();
   117a3:	e8 32 f8 ff ff       	call   10fda <sti>
}
   117a8:	90                   	nop
   117a9:	5d                   	pop    %ebp
   117aa:	c3                   	ret    

000117ab <pic_send_eoi>:
 * @brief  将OCW2寄存器的7~5位置为 001，用普通的EOI结束方式
 *         向8259A发送EOI命令，8259A会将ISR中优先级最高的位置0
 *
 * @param irq_num 中断向量号，即IDT下标
 */
void pic_send_eoi(int irq_num) {
   117ab:	55                   	push   %ebp
   117ac:	89 e5                	mov    %esp,%ebp
  //1.获取该中断对应的IRQ标号
  irq_num -= PIC_ICW2_IDT_START;
   117ae:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
  //2.判断标号是否越界,若不越界则交给对应芯片处理
  if (irq_num < 0 || irq_num > 15) return;
   117b2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   117b6:	78 29                	js     117e1 <pic_send_eoi+0x36>
   117b8:	83 7d 08 0f          	cmpl   $0xf,0x8(%ebp)
   117bc:	7f 23                	jg     117e1 <pic_send_eoi+0x36>

  //3.若中断来自主片则只需向主片发送EOI
  outb(PIC0_OCW2, PIC_OCW2_EOI);
   117be:	6a 20                	push   $0x20
   117c0:	6a 20                	push   $0x20
   117c2:	e8 3e f8 ff ff       	call   11005 <outb>
   117c7:	83 c4 08             	add    $0x8,%esp

  //4.若中断来自从片则还需向从片发送EOI
  if (irq_num >= 8) { 
   117ca:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   117ce:	7e 12                	jle    117e2 <pic_send_eoi+0x37>
    outb(PIC1_OCW2, PIC_OCW2_EOI);
   117d0:	6a 20                	push   $0x20
   117d2:	68 a0 00 00 00       	push   $0xa0
   117d7:	e8 29 f8 ff ff       	call   11005 <outb>
   117dc:	83 c4 08             	add    $0x8,%esp
   117df:	eb 01                	jmp    117e2 <pic_send_eoi+0x37>
  if (irq_num < 0 || irq_num > 15) return;
   117e1:	90                   	nop
  }

}
   117e2:	c9                   	leave  
   117e3:	c3                   	ret    

000117e4 <idt_enter_protection>:

/**
 * @brief  
 * 
 */
idt_state_t idt_enter_protection(void) {
   117e4:	55                   	push   %ebp
   117e5:	89 e5                	mov    %esp,%ebp
   117e7:	83 ec 10             	sub    $0x10,%esp
  idt_state_t state = read_eflags();
   117ea:	e8 5f f8 ff ff       	call   1104e <read_eflags>
   117ef:	89 45 fc             	mov    %eax,-0x4(%ebp)
  idt_disable_global();
   117f2:	e8 9e ff ff ff       	call   11795 <idt_disable_global>
  return state;;
   117f7:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   117fa:	c9                   	leave  
   117fb:	c3                   	ret    

000117fc <idt_leave_protection>:
/**
 * @brief  
 * 
 * @return idt_state_t 
 */
idt_state_t idt_leave_protection(idt_state_t state){
   117fc:	55                   	push   %ebp
   117fd:	89 e5                	mov    %esp,%ebp
  write_eflags(state);
   117ff:	ff 75 08             	push   0x8(%ebp)
   11802:	e8 57 f8 ff ff       	call   1105e <write_eflags>
   11807:	83 c4 04             	add    $0x4,%esp
}
   1180a:	90                   	nop
   1180b:	c9                   	leave  
   1180c:	c3                   	ret    

0001180d <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   1180d:	55                   	push   %ebp
   1180e:	89 e5                	mov    %esp,%ebp
   11810:	83 ec 08             	sub    $0x8,%esp
   11813:	8b 45 08             	mov    0x8(%ebp),%eax
   11816:	8b 55 0c             	mov    0xc(%ebp),%edx
   11819:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   1181d:	89 d0                	mov    %edx,%eax
   1181f:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   11822:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11826:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1182a:	ee                   	out    %al,(%dx)
}
   1182b:	90                   	nop
   1182c:	c9                   	leave  
   1182d:	c3                   	ret    

0001182e <do_handler_time>:
/**
 * @brief  处理定时器中断的c函数
 * 
 * @param frame 异常栈帧
 */
void do_handler_time(const exception_frame_t *frame) {
   1182e:	55                   	push   %ebp
   1182f:	89 e5                	mov    %esp,%ebp
   11831:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   11834:	a1 c0 eb 02 00       	mov    0x2ebc0,%eax
   11839:	83 c0 01             	add    $0x1,%eax
   1183c:	a3 c0 eb 02 00       	mov    %eax,0x2ebc0

    //因为ICW4的EOI位为0，所以要手动发送EOI即中断结束信号
    pic_send_eoi(IRQ0_TIMER);
   11841:	83 ec 0c             	sub    $0xc,%esp
   11844:	6a 20                	push   $0x20
   11846:	e8 60 ff ff ff       	call   117ab <pic_send_eoi>
   1184b:	83 c4 10             	add    $0x10,%esp

    //运行完一个时间片，判断是否需要执行任务切换，若需要则执行
    //必须写在发送eoi之后，防止发生任务切换导致eoi没有发送，从而无法进行下一次中断
    task_slice_end();   
   1184e:	e8 7c f3 ff ff       	call   10bcf <task_slice_end>
}
   11853:	90                   	nop
   11854:	c9                   	leave  
   11855:	c3                   	ret    

00011856 <init_pit>:

/**
 * @brief  初始化可编程定时器
 * 
 */
static void init_pit(void) {
   11856:	55                   	push   %ebp
   11857:	89 e5                	mov    %esp,%ebp
   11859:	83 ec 18             	sub    $0x18,%esp
    //1.选择定时器的计算器，读取与加载初始值模式，以及工作模式
    outb(PIT_COMMAND_MODE_PORT, PIT_SELECT_COUNTER | PIT_READ_LOAD | PIT_MODE);
   1185c:	6a 36                	push   $0x36
   1185e:	6a 43                	push   $0x43
   11860:	e8 a8 ff ff ff       	call   1180d <outb>
   11865:	83 c4 08             	add    $0x8,%esp

    //2.写入16位初始值,即一个中断后期晶体的振荡次数，由确定的加载方式知，先写入低8位，再写入高8位
    uint16_t reload_count = (PIT_OSC_FREQ / 1000) * OS_TICKS_MS;   //确定晶体一个中断周期的震荡次数
   11868:	66 c7 45 f6 9a 2e    	movw   $0x2e9a,-0xa(%ebp)
    outb(PIT_CHANNEL_DATA_PORT, reload_count & 0xff);
   1186e:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   11872:	0f b6 c0             	movzbl %al,%eax
   11875:	50                   	push   %eax
   11876:	6a 40                	push   $0x40
   11878:	e8 90 ff ff ff       	call   1180d <outb>
   1187d:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL_DATA_PORT, (reload_count >> 8) & 0xff);
   11880:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   11884:	66 c1 e8 08          	shr    $0x8,%ax
   11888:	0f b6 c0             	movzbl %al,%eax
   1188b:	50                   	push   %eax
   1188c:	6a 40                	push   $0x40
   1188e:	e8 7a ff ff ff       	call   1180d <outb>
   11893:	83 c4 08             	add    $0x8,%esp

    //3.绑定定时器中断的异常处理程序,并开启该中断
    idt_install(IRQ0_TIMER, (idt_handler_t)exception_handler_time);
   11896:	83 ec 08             	sub    $0x8,%esp
   11899:	68 7b 02 01 00       	push   $0x1027b
   1189e:	6a 20                	push   $0x20
   118a0:	e8 7e fb ff ff       	call   11423 <idt_install>
   118a5:	83 c4 10             	add    $0x10,%esp
    idt_enable(IRQ0_TIMER);
   118a8:	83 ec 0c             	sub    $0xc,%esp
   118ab:	6a 20                	push   $0x20
   118ad:	e8 b7 fd ff ff       	call   11669 <idt_enable>
   118b2:	83 c4 10             	add    $0x10,%esp

}
   118b5:	90                   	nop
   118b6:	c9                   	leave  
   118b7:	c3                   	ret    

000118b8 <time_init>:

/**
 * @brief  初始化定时器
 * 
 */
void time_init(void) {
   118b8:	55                   	push   %ebp
   118b9:	89 e5                	mov    %esp,%ebp
   118bb:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   118be:	c7 05 c0 eb 02 00 00 	movl   $0x0,0x2ebc0
   118c5:	00 00 00 
    init_pit();
   118c8:	e8 89 ff ff ff       	call   11856 <init_pit>
   118cd:	90                   	nop
   118ce:	c9                   	leave  
   118cf:	c3                   	ret    

000118d0 <sti>:
static inline void sti(void) { __asm__ __volatile__("sti"); }
   118d0:	55                   	push   %ebp
   118d1:	89 e5                	mov    %esp,%ebp
   118d3:	fb                   	sti    
   118d4:	90                   	nop
   118d5:	5d                   	pop    %ebp
   118d6:	c3                   	ret    

000118d7 <kernel_init>:

/**
 * @brief  对内核进行初始化操作
 * 
 */
void kernel_init(boot_info_t* boot_info) {
   118d7:	55                   	push   %ebp
   118d8:	89 e5                	mov    %esp,%ebp
   118da:	83 ec 08             	sub    $0x8,%esp
    //1.判断是否检测到可用内存
    ASSERT(boot_info->ram_region_count != 0);
   118dd:	8b 45 08             	mov    0x8(%ebp),%eax
   118e0:	8b 40 50             	mov    0x50(%eax),%eax
   118e3:	85 c0                	test   %eax,%eax
   118e5:	75 19                	jne    11900 <kernel_init+0x29>
   118e7:	68 dc 34 01 00       	push   $0x134dc
   118ec:	68 a8 35 01 00       	push   $0x135a8
   118f1:	6a 22                	push   $0x22
   118f3:	68 00 35 01 00       	push   $0x13500
   118f8:	e8 a9 08 00 00       	call   121a6 <pannic>
   118fd:	83 c4 10             	add    $0x10,%esp
    
    //2.初始化日志程序,便于后期调用
    log_init();
   11900:	e8 e8 14 00 00       	call   12ded <log_init>

    //3.初始化内存管理
    memory_init(boot_info);  
   11905:	83 ec 0c             	sub    $0xc,%esp
   11908:	ff 75 08             	push   0x8(%ebp)
   1190b:	e8 e9 eb ff ff       	call   104f9 <memory_init>
   11910:	83 c4 10             	add    $0x10,%esp

    //4.初始化并重新加载GDT表
    gdt_init();
   11913:	e8 b0 f5 ff ff       	call   10ec8 <gdt_init>

    //5.初始化并加载中断描述符表IDT
    idt_init();
   11918:	e8 d9 fb ff ff       	call   114f6 <idt_init>

    //6.初始化定时器的中断处理
    time_init();
   1191d:	e8 96 ff ff ff       	call   118b8 <time_init>

    //7.初始化任务管理器
    task_manager_init();
   11922:	e8 44 f0 ff ff       	call   1096b <task_manager_init>
    //初始化完成后将在汇编里重新加载内核代码段与数据段的选择子，并为内核程序分配栈空间

}
   11927:	90                   	nop
   11928:	c9                   	leave  
   11929:	c3                   	ret    

0001192a <test_task_1>:
static uint32_t test_task_1_stack[1024]; 
static uint32_t test_task_2_stack[1024]; 
static sem_t sem;


void test_task_1(void) {
   1192a:	55                   	push   %ebp
   1192b:	89 e5                	mov    %esp,%ebp
   1192d:	83 ec 18             	sub    $0x18,%esp

    int count = 0;
   11930:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;) {
        // sem_wait(&sem);
        log_printf("task_1: %d", count++);
   11937:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1193a:	8d 50 01             	lea    0x1(%eax),%edx
   1193d:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11940:	83 ec 08             	sub    $0x8,%esp
   11943:	50                   	push   %eax
   11944:	68 35 35 01 00       	push   $0x13535
   11949:	e8 27 15 00 00       	call   12e75 <log_printf>
   1194e:	83 c4 10             	add    $0x10,%esp
   11951:	eb e4                	jmp    11937 <test_task_1+0xd>

00011953 <test_task_2>:
        // sem_notify(&sem);
        // sys_sleep(1000);
     }
}

void test_task_2(void) {
   11953:	55                   	push   %ebp
   11954:	89 e5                	mov    %esp,%ebp
   11956:	83 ec 18             	sub    $0x18,%esp

    int count = 0;
   11959:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;) {
        // sem_wait(&sem);
        log_printf("task_2: %d", count++);
   11960:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11963:	8d 50 01             	lea    0x1(%eax),%edx
   11966:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11969:	83 ec 08             	sub    $0x8,%esp
   1196c:	50                   	push   %eax
   1196d:	68 40 35 01 00       	push   $0x13540
   11972:	e8 fe 14 00 00       	call   12e75 <log_printf>
   11977:	83 c4 10             	add    $0x10,%esp
   1197a:	eb e4                	jmp    11960 <test_task_2+0xd>

0001197c <init_main>:
     }
}



void init_main(void) {
   1197c:	55                   	push   %ebp
   1197d:	89 e5                	mov    %esp,%ebp
   1197f:	83 ec 18             	sub    $0x18,%esp


    
    log_printf("Kernel is running......");
   11982:	83 ec 0c             	sub    $0xc,%esp
   11985:	68 4b 35 01 00       	push   $0x1354b
   1198a:	e8 e6 14 00 00       	call   12e75 <log_printf>
   1198f:	83 c4 10             	add    $0x10,%esp
    log_printf("Name: %s, Version: %s", "KbOS", OS_VERSION);
   11992:	83 ec 04             	sub    $0x4,%esp
   11995:	68 63 35 01 00       	push   $0x13563
   1199a:	68 69 35 01 00       	push   $0x13569
   1199f:	68 6e 35 01 00       	push   $0x1356e
   119a4:	e8 cc 14 00 00       	call   12e75 <log_printf>
   119a9:	83 c4 10             	add    $0x10,%esp

    //当前任务作为任务管理器启用时的第一个任务
    task_first_init();
   119ac:	e8 35 f0 ff ff       	call   109e6 <task_first_init>
    task_init(&task_test_task_1, "test_task_1", (uint32_t)test_task_1, (uint32_t)&test_task_1_stack[1024]);
   119b1:	ba 60 fd 02 00       	mov    $0x2fd60,%edx
   119b6:	b8 2a 19 01 00       	mov    $0x1192a,%eax
   119bb:	52                   	push   %edx
   119bc:	50                   	push   %eax
   119bd:	68 84 35 01 00       	push   $0x13584
   119c2:	68 e0 eb 02 00       	push   $0x2ebe0
   119c7:	e8 b1 ee ff ff       	call   1087d <task_init>
   119cc:	83 c4 10             	add    $0x10,%esp
    task_init(&task_test_task_2, "test_task_2", (uint32_t)test_task_2, (uint32_t)&test_task_2_stack[1024]);
   119cf:	ba 60 0d 03 00       	mov    $0x30d60,%edx
   119d4:	b8 53 19 01 00       	mov    $0x11953,%eax
   119d9:	52                   	push   %edx
   119da:	50                   	push   %eax
   119db:	68 90 35 01 00       	push   $0x13590
   119e0:	68 a0 ec 02 00       	push   $0x2eca0
   119e5:	e8 93 ee ff ff       	call   1087d <task_init>
   119ea:	83 c4 10             	add    $0x10,%esp


    // sem_init(&sem, 0);
    sti();
   119ed:	e8 de fe ff ff       	call   118d0 <sti>

    int count = 0;
   119f2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;) {
        log_printf("first: %d", count++);
   119f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   119fc:	8d 50 01             	lea    0x1(%eax),%edx
   119ff:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11a02:	83 ec 08             	sub    $0x8,%esp
   11a05:	50                   	push   %eax
   11a06:	68 9c 35 01 00       	push   $0x1359c
   11a0b:	e8 65 14 00 00       	call   12e75 <log_printf>
   11a10:	83 c4 10             	add    $0x10,%esp
   11a13:	eb e4                	jmp    119f9 <init_main+0x7d>

00011a15 <list_init>:
static inline void list_init(list_t *list) {
   11a15:	55                   	push   %ebp
   11a16:	89 e5                	mov    %esp,%ebp
   11a18:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11a1b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11a1f:	75 19                	jne    11a3a <list_init+0x25>
   11a21:	68 b4 35 01 00       	push   $0x135b4
   11a26:	68 60 36 01 00       	push   $0x13660
   11a2b:	6a 31                	push   $0x31
   11a2d:	68 c8 35 01 00       	push   $0x135c8
   11a32:	e8 6f 07 00 00       	call   121a6 <pannic>
   11a37:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   11a3a:	8b 45 08             	mov    0x8(%ebp),%eax
   11a3d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11a44:	8b 45 08             	mov    0x8(%ebp),%eax
   11a47:	8b 50 04             	mov    0x4(%eax),%edx
   11a4a:	8b 45 08             	mov    0x8(%ebp),%eax
   11a4d:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   11a4f:	8b 45 08             	mov    0x8(%ebp),%eax
   11a52:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   11a59:	90                   	nop
   11a5a:	c9                   	leave  
   11a5b:	c3                   	ret    

00011a5c <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   11a5c:	55                   	push   %ebp
   11a5d:	89 e5                	mov    %esp,%ebp
   11a5f:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11a62:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11a66:	75 19                	jne    11a81 <list_is_empty+0x25>
   11a68:	68 b4 35 01 00       	push   $0x135b4
   11a6d:	68 6c 36 01 00       	push   $0x1366c
   11a72:	6a 38                	push   $0x38
   11a74:	68 c8 35 01 00       	push   $0x135c8
   11a79:	e8 28 07 00 00       	call   121a6 <pannic>
   11a7e:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   11a81:	8b 45 08             	mov    0x8(%ebp),%eax
   11a84:	8b 40 08             	mov    0x8(%eax),%eax
   11a87:	85 c0                	test   %eax,%eax
   11a89:	0f 94 c0             	sete   %al
   11a8c:	0f b6 c0             	movzbl %al,%eax
}
   11a8f:	c9                   	leave  
   11a90:	c3                   	ret    

00011a91 <mutex_init>:
/**
 * @brief  初始化互斥锁
 *
 * @param mutex
 */
void mutex_init(mutex_t *mutex) {
   11a91:	55                   	push   %ebp
   11a92:	89 e5                	mov    %esp,%ebp
   11a94:	83 ec 08             	sub    $0x8,%esp
  ASSERT(mutex != (mutex_t *)0);
   11a97:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11a9b:	75 19                	jne    11ab6 <mutex_init+0x25>
   11a9d:	68 06 36 01 00       	push   $0x13606
   11aa2:	68 54 36 01 00       	push   $0x13654
   11aa7:	6a 15                	push   $0x15
   11aa9:	68 1c 36 01 00       	push   $0x1361c
   11aae:	e8 f3 06 00 00       	call   121a6 <pannic>
   11ab3:	83 c4 10             	add    $0x10,%esp

  mutex->locked_count = 0;
   11ab6:	8b 45 08             	mov    0x8(%ebp),%eax
   11ab9:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  mutex->owner = (task_t *)0;
   11ac0:	8b 45 08             	mov    0x8(%ebp),%eax
   11ac3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  list_init(&mutex->wait_list);
   11ac9:	8b 45 08             	mov    0x8(%ebp),%eax
   11acc:	83 c0 08             	add    $0x8,%eax
   11acf:	83 ec 0c             	sub    $0xc,%esp
   11ad2:	50                   	push   %eax
   11ad3:	e8 3d ff ff ff       	call   11a15 <list_init>
   11ad8:	83 c4 10             	add    $0x10,%esp
}
   11adb:	90                   	nop
   11adc:	c9                   	leave  
   11add:	c3                   	ret    

00011ade <mutex_lock>:
/**
 * @brief  加锁
 *
 * @param mutex
 */
void mutex_lock(mutex_t *mutex) {
   11ade:	55                   	push   %ebp
   11adf:	89 e5                	mov    %esp,%ebp
   11ae1:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   11ae4:	e8 fb fc ff ff       	call   117e4 <idt_enter_protection>
   11ae9:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 1. 获取当前任务
  task_t *curr = task_current();
   11aec:	e8 0b f0 ff ff       	call   10afc <task_current>
   11af1:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 2.判断该锁是否已被加锁
  if (mutex->locked_count == 0) {  
   11af4:	8b 45 08             	mov    0x8(%ebp),%eax
   11af7:	8b 40 04             	mov    0x4(%eax),%eax
   11afa:	85 c0                	test   %eax,%eax
   11afc:	75 19                	jne    11b17 <mutex_lock+0x39>
    //3.还未被加锁，则加锁并记录拥有该锁的任务
    mutex->locked_count++;
   11afe:	8b 45 08             	mov    0x8(%ebp),%eax
   11b01:	8b 40 04             	mov    0x4(%eax),%eax
   11b04:	8d 50 01             	lea    0x1(%eax),%edx
   11b07:	8b 45 08             	mov    0x8(%ebp),%eax
   11b0a:	89 50 04             	mov    %edx,0x4(%eax)
    mutex->owner = curr;
   11b0d:	8b 45 08             	mov    0x8(%ebp),%eax
   11b10:	8b 55 f0             	mov    -0x10(%ebp),%edx
   11b13:	89 10                	mov    %edx,(%eax)
   11b15:	eb 47                	jmp    11b5e <mutex_lock+0x80>
  } else if (mutex->owner == curr) {
   11b17:	8b 45 08             	mov    0x8(%ebp),%eax
   11b1a:	8b 00                	mov    (%eax),%eax
   11b1c:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11b1f:	75 11                	jne    11b32 <mutex_lock+0x54>
    //4.已被加锁，但当前加锁请求的任务为当前锁的拥有者，直接再加锁即可
    mutex->locked_count++;
   11b21:	8b 45 08             	mov    0x8(%ebp),%eax
   11b24:	8b 40 04             	mov    0x4(%eax),%eax
   11b27:	8d 50 01             	lea    0x1(%eax),%edx
   11b2a:	8b 45 08             	mov    0x8(%ebp),%eax
   11b2d:	89 50 04             	mov    %edx,0x4(%eax)
   11b30:	eb 2c                	jmp    11b5e <mutex_lock+0x80>
  } else {  
    //5.已被加锁，且当前任务不是锁的拥有者，则当前任务进入锁的等待队列，被阻塞住
    task_set_unready(curr);
   11b32:	83 ec 0c             	sub    $0xc,%esp
   11b35:	ff 75 f0             	push   -0x10(%ebp)
   11b38:	e8 46 ef ff ff       	call   10a83 <task_set_unready>
   11b3d:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&mutex->wait_list, &curr->wait_node);
   11b40:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11b43:	8d 50 40             	lea    0x40(%eax),%edx
   11b46:	8b 45 08             	mov    0x8(%ebp),%eax
   11b49:	83 c0 08             	add    $0x8,%eax
   11b4c:	83 ec 08             	sub    $0x8,%esp
   11b4f:	52                   	push   %edx
   11b50:	50                   	push   %eax
   11b51:	e8 9b 0f 00 00       	call   12af1 <list_insert_last>
   11b56:	83 c4 10             	add    $0x10,%esp
    task_switch();
   11b59:	e8 a8 ef ff ff       	call   10b06 <task_switch>
  }

  idt_leave_protection(state);  // TODO:解锁
   11b5e:	83 ec 0c             	sub    $0xc,%esp
   11b61:	ff 75 f4             	push   -0xc(%ebp)
   11b64:	e8 93 fc ff ff       	call   117fc <idt_leave_protection>
   11b69:	83 c4 10             	add    $0x10,%esp
}
   11b6c:	90                   	nop
   11b6d:	c9                   	leave  
   11b6e:	c3                   	ret    

00011b6f <mutex_unlock>:
/**
 * @brief  解锁
 *
 * @param mutex
 */
void mutex_unlock(mutex_t *mutex) {
   11b6f:	55                   	push   %ebp
   11b70:	89 e5                	mov    %esp,%ebp
   11b72:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   11b75:	e8 6a fc ff ff       	call   117e4 <idt_enter_protection>
   11b7a:	89 45 f4             	mov    %eax,-0xc(%ebp)

  task_t *curr = task_current();
   11b7d:	e8 7a ef ff ff       	call   10afc <task_current>
   11b82:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 1.判断当前任务是否是锁的拥有者
  if (mutex->owner == curr) {
   11b85:	8b 45 08             	mov    0x8(%ebp),%eax
   11b88:	8b 00                	mov    (%eax),%eax
   11b8a:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11b8d:	0f 85 83 00 00 00    	jne    11c16 <mutex_unlock+0xa7>
    //2.当前任务是锁的拥有者,对锁进行一次解锁，并判断是否已完全解锁
    if (--mutex->locked_count == 0) {
   11b93:	8b 45 08             	mov    0x8(%ebp),%eax
   11b96:	8b 40 04             	mov    0x4(%eax),%eax
   11b99:	8d 50 ff             	lea    -0x1(%eax),%edx
   11b9c:	8b 45 08             	mov    0x8(%ebp),%eax
   11b9f:	89 50 04             	mov    %edx,0x4(%eax)
   11ba2:	8b 45 08             	mov    0x8(%ebp),%eax
   11ba5:	8b 40 04             	mov    0x4(%eax),%eax
   11ba8:	85 c0                	test   %eax,%eax
   11baa:	75 6a                	jne    11c16 <mutex_unlock+0xa7>
      //3.锁已被完全解锁,将锁的所有者置空
      mutex->owner = (task_t*)0;
   11bac:	8b 45 08             	mov    0x8(%ebp),%eax
   11baf:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      //4.判断当前等待队列是否为空
      if (!list_is_empty(&mutex->wait_list)) { 
   11bb5:	8b 45 08             	mov    0x8(%ebp),%eax
   11bb8:	83 c0 08             	add    $0x8,%eax
   11bbb:	83 ec 0c             	sub    $0xc,%esp
   11bbe:	50                   	push   %eax
   11bbf:	e8 98 fe ff ff       	call   11a5c <list_is_empty>
   11bc4:	83 c4 10             	add    $0x10,%esp
   11bc7:	85 c0                	test   %eax,%eax
   11bc9:	75 4b                	jne    11c16 <mutex_unlock+0xa7>
        //5.当前等待队列不为空,对锁进行加锁，并交给等待队列的第一个任务
        list_node_t *node = list_remove_first(&mutex->wait_list);
   11bcb:	8b 45 08             	mov    0x8(%ebp),%eax
   11bce:	83 c0 08             	add    $0x8,%eax
   11bd1:	83 ec 0c             	sub    $0xc,%esp
   11bd4:	50                   	push   %eax
   11bd5:	e8 a6 0f 00 00       	call   12b80 <list_remove_first>
   11bda:	83 c4 10             	add    $0x10,%esp
   11bdd:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t *task_wait = list_node_parent(node, task_t, wait_node);
   11be0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11be4:	74 08                	je     11bee <mutex_unlock+0x7f>
   11be6:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11be9:	83 e8 40             	sub    $0x40,%eax
   11bec:	eb 05                	jmp    11bf3 <mutex_unlock+0x84>
   11bee:	b8 00 00 00 00       	mov    $0x0,%eax
   11bf3:	89 45 e8             	mov    %eax,-0x18(%ebp)
        mutex->locked_count = 1;
   11bf6:	8b 45 08             	mov    0x8(%ebp),%eax
   11bf9:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        mutex->owner = task_wait;
   11c00:	8b 45 08             	mov    0x8(%ebp),%eax
   11c03:	8b 55 e8             	mov    -0x18(%ebp),%edx
   11c06:	89 10                	mov    %edx,(%eax)
        //6.让该任务进入就绪队列
        task_set_ready(task_wait);
   11c08:	83 ec 0c             	sub    $0xc,%esp
   11c0b:	ff 75 e8             	push   -0x18(%ebp)
   11c0e:	e8 25 ee ff ff       	call   10a38 <task_set_ready>
   11c13:	83 c4 10             	add    $0x10,%esp
      }
    }
  }

  idt_leave_protection(state);  // TODO:解锁
   11c16:	83 ec 0c             	sub    $0xc,%esp
   11c19:	ff 75 f4             	push   -0xc(%ebp)
   11c1c:	e8 db fb ff ff       	call   117fc <idt_leave_protection>
   11c21:	83 c4 10             	add    $0x10,%esp
}
   11c24:	90                   	nop
   11c25:	c9                   	leave  
   11c26:	c3                   	ret    

00011c27 <list_init>:
static inline void list_init(list_t *list) {
   11c27:	55                   	push   %ebp
   11c28:	89 e5                	mov    %esp,%ebp
   11c2a:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11c2d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11c31:	75 19                	jne    11c4c <list_init+0x25>
   11c33:	68 7c 36 01 00       	push   $0x1367c
   11c38:	68 20 37 01 00       	push   $0x13720
   11c3d:	6a 31                	push   $0x31
   11c3f:	68 90 36 01 00       	push   $0x13690
   11c44:	e8 5d 05 00 00       	call   121a6 <pannic>
   11c49:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   11c4c:	8b 45 08             	mov    0x8(%ebp),%eax
   11c4f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11c56:	8b 45 08             	mov    0x8(%ebp),%eax
   11c59:	8b 50 04             	mov    0x4(%eax),%edx
   11c5c:	8b 45 08             	mov    0x8(%ebp),%eax
   11c5f:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   11c61:	8b 45 08             	mov    0x8(%ebp),%eax
   11c64:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   11c6b:	90                   	nop
   11c6c:	c9                   	leave  
   11c6d:	c3                   	ret    

00011c6e <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   11c6e:	55                   	push   %ebp
   11c6f:	89 e5                	mov    %esp,%ebp
   11c71:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11c74:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11c78:	75 19                	jne    11c93 <list_is_empty+0x25>
   11c7a:	68 7c 36 01 00       	push   $0x1367c
   11c7f:	68 2c 37 01 00       	push   $0x1372c
   11c84:	6a 38                	push   $0x38
   11c86:	68 90 36 01 00       	push   $0x13690
   11c8b:	e8 16 05 00 00       	call   121a6 <pannic>
   11c90:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   11c93:	8b 45 08             	mov    0x8(%ebp),%eax
   11c96:	8b 40 08             	mov    0x8(%eax),%eax
   11c99:	85 c0                	test   %eax,%eax
   11c9b:	0f 94 c0             	sete   %al
   11c9e:	0f b6 c0             	movzbl %al,%eax
}
   11ca1:	c9                   	leave  
   11ca2:	c3                   	ret    

00011ca3 <sem_init>:
 * @brief  初始化信号量对象
 * 
 * @param sem 信号量对象
 * @param init_count 初始化信号量数量 
 */
void sem_init(sem_t *sem, int init_count) {
   11ca3:	55                   	push   %ebp
   11ca4:	89 e5                	mov    %esp,%ebp
   11ca6:	83 ec 08             	sub    $0x8,%esp
    ASSERT(sem != (sem_t*)0);
   11ca9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11cad:	75 19                	jne    11cc8 <sem_init+0x25>
   11caf:	68 ce 36 01 00       	push   $0x136ce
   11cb4:	68 14 37 01 00       	push   $0x13714
   11cb9:	6a 18                	push   $0x18
   11cbb:	68 e0 36 01 00       	push   $0x136e0
   11cc0:	e8 e1 04 00 00       	call   121a6 <pannic>
   11cc5:	83 c4 10             	add    $0x10,%esp
    sem->count = 0;
   11cc8:	8b 45 08             	mov    0x8(%ebp),%eax
   11ccb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list_init(&sem->wait_list);
   11cd1:	8b 45 08             	mov    0x8(%ebp),%eax
   11cd4:	83 c0 04             	add    $0x4,%eax
   11cd7:	83 ec 0c             	sub    $0xc,%esp
   11cda:	50                   	push   %eax
   11cdb:	e8 47 ff ff ff       	call   11c27 <list_init>
   11ce0:	83 c4 10             	add    $0x10,%esp
}
   11ce3:	90                   	nop
   11ce4:	c9                   	leave  
   11ce5:	c3                   	ret    

00011ce6 <sem_wait>:
 *         信号量相当于入场券，获取信号量之后才有资格访问信号量保护的资源
 * 
 * @param sem 
 * @param init_count 
 */
void sem_wait(sem_t *sem) {
   11ce6:	55                   	push   %ebp
   11ce7:	89 e5                	mov    %esp,%ebp
   11ce9:	83 ec 18             	sub    $0x18,%esp
    
    idt_state_t state = idt_enter_protection();//TODO:加锁
   11cec:	e8 f3 fa ff ff       	call   117e4 <idt_enter_protection>
   11cf1:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //1.判断信号量是否还有剩余
    if(sem->count > 0) {//有剩余，直接使用，任务获取信号量继续执行
   11cf4:	8b 45 08             	mov    0x8(%ebp),%eax
   11cf7:	8b 00                	mov    (%eax),%eax
   11cf9:	85 c0                	test   %eax,%eax
   11cfb:	7e 0f                	jle    11d0c <sem_wait+0x26>
        --sem->count;   
   11cfd:	8b 45 08             	mov    0x8(%ebp),%eax
   11d00:	8b 00                	mov    (%eax),%eax
   11d02:	8d 50 ff             	lea    -0x1(%eax),%edx
   11d05:	8b 45 08             	mov    0x8(%ebp),%eax
   11d08:	89 10                	mov    %edx,(%eax)
   11d0a:	eb 34                	jmp    11d40 <sem_wait+0x5a>
    } else {//没有剩余，任务进入延时队列等待信号量
        task_t *curr = task_current();
   11d0c:	e8 eb ed ff ff       	call   10afc <task_current>
   11d11:	89 45 f0             	mov    %eax,-0x10(%ebp)
        //2.将当前任务从就绪队列中取下
        task_set_unready(curr); 
   11d14:	83 ec 0c             	sub    $0xc,%esp
   11d17:	ff 75 f0             	push   -0x10(%ebp)
   11d1a:	e8 64 ed ff ff       	call   10a83 <task_set_unready>
   11d1f:	83 c4 10             	add    $0x10,%esp
        //3.将当前任务加入到信号量等待队列
        list_insert_last(&sem->wait_list, &curr->wait_node); 
   11d22:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11d25:	8d 50 40             	lea    0x40(%eax),%edx
   11d28:	8b 45 08             	mov    0x8(%ebp),%eax
   11d2b:	83 c0 04             	add    $0x4,%eax
   11d2e:	83 ec 08             	sub    $0x8,%esp
   11d31:	52                   	push   %edx
   11d32:	50                   	push   %eax
   11d33:	e8 b9 0d 00 00       	call   12af1 <list_insert_last>
   11d38:	83 c4 10             	add    $0x10,%esp
        //4.切换任务
        task_switch();
   11d3b:	e8 c6 ed ff ff       	call   10b06 <task_switch>
    }

    idt_leave_protection(state);//TODO:解锁
   11d40:	83 ec 0c             	sub    $0xc,%esp
   11d43:	ff 75 f4             	push   -0xc(%ebp)
   11d46:	e8 b1 fa ff ff       	call   117fc <idt_leave_protection>
   11d4b:	83 c4 10             	add    $0x10,%esp
}
   11d4e:	90                   	nop
   11d4f:	c9                   	leave  
   11d50:	c3                   	ret    

00011d51 <sem_notify>:
 *        等待队列中若有任务则直接获取该信号量，继续执行即访问资源
 *         若没有任务，则信号量对象记录的信号量数量加1，预留给下一次获取
 * 
 * @param sem 
 */
void sem_notify(sem_t *sem) {
   11d51:	55                   	push   %ebp
   11d52:	89 e5                	mov    %esp,%ebp
   11d54:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   11d57:	e8 88 fa ff ff       	call   117e4 <idt_enter_protection>
   11d5c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if (!list_is_empty(&sem->wait_list)) {
   11d5f:	8b 45 08             	mov    0x8(%ebp),%eax
   11d62:	83 c0 04             	add    $0x4,%eax
   11d65:	83 ec 0c             	sub    $0xc,%esp
   11d68:	50                   	push   %eax
   11d69:	e8 00 ff ff ff       	call   11c6e <list_is_empty>
   11d6e:	83 c4 10             	add    $0x10,%esp
   11d71:	85 c0                	test   %eax,%eax
   11d73:	75 3b                	jne    11db0 <sem_notify+0x5f>
        list_node_t *node = list_remove_first(&sem->wait_list);
   11d75:	8b 45 08             	mov    0x8(%ebp),%eax
   11d78:	83 c0 04             	add    $0x4,%eax
   11d7b:	83 ec 0c             	sub    $0xc,%esp
   11d7e:	50                   	push   %eax
   11d7f:	e8 fc 0d 00 00       	call   12b80 <list_remove_first>
   11d84:	83 c4 10             	add    $0x10,%esp
   11d87:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t *task = list_node_parent(node, task_t, wait_node);
   11d8a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11d8e:	74 08                	je     11d98 <sem_notify+0x47>
   11d90:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11d93:	83 e8 40             	sub    $0x40,%eax
   11d96:	eb 05                	jmp    11d9d <sem_notify+0x4c>
   11d98:	b8 00 00 00 00       	mov    $0x0,%eax
   11d9d:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   11da0:	83 ec 0c             	sub    $0xc,%esp
   11da3:	ff 75 ec             	push   -0x14(%ebp)
   11da6:	e8 8d ec ff ff       	call   10a38 <task_set_ready>
   11dab:	83 c4 10             	add    $0x10,%esp
   11dae:	eb 0d                	jmp    11dbd <sem_notify+0x6c>
    } else {
        sem->count++;
   11db0:	8b 45 08             	mov    0x8(%ebp),%eax
   11db3:	8b 00                	mov    (%eax),%eax
   11db5:	8d 50 01             	lea    0x1(%eax),%edx
   11db8:	8b 45 08             	mov    0x8(%ebp),%eax
   11dbb:	89 10                	mov    %edx,(%eax)
    }

    idt_leave_protection(state);//TODO:解锁
   11dbd:	83 ec 0c             	sub    $0xc,%esp
   11dc0:	ff 75 f4             	push   -0xc(%ebp)
   11dc3:	e8 34 fa ff ff       	call   117fc <idt_leave_protection>
   11dc8:	83 c4 10             	add    $0x10,%esp

}
   11dcb:	90                   	nop
   11dcc:	c9                   	leave  
   11dcd:	c3                   	ret    

00011dce <sem_count>:

int sem_count(sem_t *sem) {
   11dce:	55                   	push   %ebp
   11dcf:	89 e5                	mov    %esp,%ebp
   11dd1:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   11dd4:	e8 0b fa ff ff       	call   117e4 <idt_enter_protection>
   11dd9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   11ddc:	8b 45 08             	mov    0x8(%ebp),%eax
   11ddf:	8b 00                	mov    (%eax),%eax
   11de1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    idt_leave_protection(state);//TODO:解锁
   11de4:	83 ec 0c             	sub    $0xc,%esp
   11de7:	ff 75 f4             	push   -0xc(%ebp)
   11dea:	e8 0d fa ff ff       	call   117fc <idt_leave_protection>
   11def:	83 c4 10             	add    $0x10,%esp

    return count;
   11df2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11df5:	c9                   	leave  
   11df6:	c3                   	ret    

00011df7 <list_init>:
static inline void list_init(list_t *list) {
   11df7:	55                   	push   %ebp
   11df8:	89 e5                	mov    %esp,%ebp
   11dfa:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11dfd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11e01:	75 19                	jne    11e1c <list_init+0x25>
   11e03:	68 3c 37 01 00       	push   $0x1373c
   11e08:	68 40 38 01 00       	push   $0x13840
   11e0d:	6a 31                	push   $0x31
   11e0f:	68 50 37 01 00       	push   $0x13750
   11e14:	e8 8d 03 00 00       	call   121a6 <pannic>
   11e19:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   11e1c:	8b 45 08             	mov    0x8(%ebp),%eax
   11e1f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11e26:	8b 45 08             	mov    0x8(%ebp),%eax
   11e29:	8b 50 04             	mov    0x4(%eax),%edx
   11e2c:	8b 45 08             	mov    0x8(%ebp),%eax
   11e2f:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   11e31:	8b 45 08             	mov    0x8(%ebp),%eax
   11e34:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   11e3b:	90                   	nop
   11e3c:	c9                   	leave  
   11e3d:	c3                   	ret    

00011e3e <list_get_size>:
static inline int list_get_size(list_t *list) {
   11e3e:	55                   	push   %ebp
   11e3f:	89 e5                	mov    %esp,%ebp
   11e41:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11e44:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11e48:	75 19                	jne    11e63 <list_get_size+0x25>
   11e4a:	68 3c 37 01 00       	push   $0x1373c
   11e4f:	68 4c 38 01 00       	push   $0x1384c
   11e54:	6a 3e                	push   $0x3e
   11e56:	68 50 37 01 00       	push   $0x13750
   11e5b:	e8 46 03 00 00       	call   121a6 <pannic>
   11e60:	83 c4 10             	add    $0x10,%esp
    return list->size;
   11e63:	8b 45 08             	mov    0x8(%ebp),%eax
   11e66:	8b 40 08             	mov    0x8(%eax),%eax
}
   11e69:	c9                   	leave  
   11e6a:	c3                   	ret    

00011e6b <list_get_first>:
static inline list_node_t *list_get_first(list_t *list) {
   11e6b:	55                   	push   %ebp
   11e6c:	89 e5                	mov    %esp,%ebp
   11e6e:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11e71:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11e75:	75 19                	jne    11e90 <list_get_first+0x25>
   11e77:	68 3c 37 01 00       	push   $0x1373c
   11e7c:	68 6c 38 01 00       	push   $0x1386c
   11e81:	6a 44                	push   $0x44
   11e83:	68 50 37 01 00       	push   $0x13750
   11e88:	e8 19 03 00 00       	call   121a6 <pannic>
   11e8d:	83 c4 10             	add    $0x10,%esp
    return list->first;
   11e90:	8b 45 08             	mov    0x8(%ebp),%eax
   11e93:	8b 00                	mov    (%eax),%eax
}
   11e95:	c9                   	leave  
   11e96:	c3                   	ret    

00011e97 <list_get_last>:

static inline list_node_t *list_get_last(list_t *list) {
   11e97:	55                   	push   %ebp
   11e98:	89 e5                	mov    %esp,%ebp
   11e9a:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11e9d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11ea1:	75 19                	jne    11ebc <list_get_last+0x25>
   11ea3:	68 3c 37 01 00       	push   $0x1373c
   11ea8:	68 5c 38 01 00       	push   $0x1385c
   11ead:	6a 4a                	push   $0x4a
   11eaf:	68 50 37 01 00       	push   $0x13750
   11eb4:	e8 ed 02 00 00       	call   121a6 <pannic>
   11eb9:	83 c4 10             	add    $0x10,%esp

    return list->last;
   11ebc:	8b 45 08             	mov    0x8(%ebp),%eax
   11ebf:	8b 40 04             	mov    0x4(%eax),%eax
}
   11ec2:	c9                   	leave  
   11ec3:	c3                   	ret    

00011ec4 <list_test>:

#include "tools/list.h"
#include "tools/log.h"
#include "common/types.h"

void list_test(void) {
   11ec4:	55                   	push   %ebp
   11ec5:	89 e5                	mov    %esp,%ebp
   11ec7:	56                   	push   %esi
   11ec8:	53                   	push   %ebx
   11ec9:	83 ec 70             	sub    $0x70,%esp
    list_t list;
    list_node_t nodes[5];

    list_init(&list);
   11ecc:	83 ec 0c             	sub    $0xc,%esp
   11ecf:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11ed2:	50                   	push   %eax
   11ed3:	e8 1f ff ff ff       	call   11df7 <list_init>
   11ed8:	83 c4 10             	add    $0x10,%esp
    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   11edb:	83 ec 0c             	sub    $0xc,%esp
   11ede:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11ee1:	50                   	push   %eax
   11ee2:	e8 57 ff ff ff       	call   11e3e <list_get_size>
   11ee7:	83 c4 10             	add    $0x10,%esp
   11eea:	89 c6                	mov    %eax,%esi
   11eec:	83 ec 0c             	sub    $0xc,%esp
   11eef:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11ef2:	50                   	push   %eax
   11ef3:	e8 9f ff ff ff       	call   11e97 <list_get_last>
   11ef8:	83 c4 10             	add    $0x10,%esp
   11efb:	89 c3                	mov    %eax,%ebx
   11efd:	83 ec 0c             	sub    $0xc,%esp
   11f00:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11f03:	50                   	push   %eax
   11f04:	e8 62 ff ff ff       	call   11e6b <list_get_first>
   11f09:	83 c4 10             	add    $0x10,%esp
   11f0c:	56                   	push   %esi
   11f0d:	53                   	push   %ebx
   11f0e:	50                   	push   %eax
   11f0f:	68 90 37 01 00       	push   $0x13790
   11f14:	e8 5c 0f 00 00       	call   12e75 <log_printf>
   11f19:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_insert_first
    for (int i = 0; i < 5; ++i) {
   11f1c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11f23:	eb 3f                	jmp    11f64 <list_test+0xa0>
        list_node_t *node = nodes + i;
   11f25:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11f28:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   11f2f:	8d 45 9c             	lea    -0x64(%ebp),%eax
   11f32:	01 d0                	add    %edx,%eax
   11f34:	89 45 d0             	mov    %eax,-0x30(%ebp)

        log_printf("insert first to list: %d, 0x%x", i, (uint32_t)node);
   11f37:	8b 45 d0             	mov    -0x30(%ebp),%eax
   11f3a:	83 ec 04             	sub    $0x4,%esp
   11f3d:	50                   	push   %eax
   11f3e:	ff 75 f4             	push   -0xc(%ebp)
   11f41:	68 b8 37 01 00       	push   $0x137b8
   11f46:	e8 2a 0f 00 00       	call   12e75 <log_printf>
   11f4b:	83 c4 10             	add    $0x10,%esp
        list_insert_first(&list, node);
   11f4e:	83 ec 08             	sub    $0x8,%esp
   11f51:	ff 75 d0             	push   -0x30(%ebp)
   11f54:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11f57:	50                   	push   %eax
   11f58:	e8 09 0b 00 00       	call   12a66 <list_insert_first>
   11f5d:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   11f60:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11f64:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   11f68:	7e bb                	jle    11f25 <list_test+0x61>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   11f6a:	83 ec 0c             	sub    $0xc,%esp
   11f6d:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11f70:	50                   	push   %eax
   11f71:	e8 c8 fe ff ff       	call   11e3e <list_get_size>
   11f76:	83 c4 10             	add    $0x10,%esp
   11f79:	89 c6                	mov    %eax,%esi
   11f7b:	83 ec 0c             	sub    $0xc,%esp
   11f7e:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11f81:	50                   	push   %eax
   11f82:	e8 10 ff ff ff       	call   11e97 <list_get_last>
   11f87:	83 c4 10             	add    $0x10,%esp
   11f8a:	89 c3                	mov    %eax,%ebx
   11f8c:	83 ec 0c             	sub    $0xc,%esp
   11f8f:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11f92:	50                   	push   %eax
   11f93:	e8 d3 fe ff ff       	call   11e6b <list_get_first>
   11f98:	83 c4 10             	add    $0x10,%esp
   11f9b:	56                   	push   %esi
   11f9c:	53                   	push   %ebx
   11f9d:	50                   	push   %eax
   11f9e:	68 90 37 01 00       	push   $0x13790
   11fa3:	e8 cd 0e 00 00       	call   12e75 <log_printf>
   11fa8:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

   
    //测试list_remove_first
    for (int i = 0; i < 5; ++i) {
   11fab:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11fb2:	eb 2d                	jmp    11fe1 <list_test+0x11d>
        list_node_t *node = list_remove_first(&list);
   11fb4:	83 ec 0c             	sub    $0xc,%esp
   11fb7:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11fba:	50                   	push   %eax
   11fbb:	e8 c0 0b 00 00       	call   12b80 <list_remove_first>
   11fc0:	83 c4 10             	add    $0x10,%esp
   11fc3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        log_printf("remove first: %d, 0x%x", i, (uint32_t)node);
   11fc6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   11fc9:	83 ec 04             	sub    $0x4,%esp
   11fcc:	50                   	push   %eax
   11fcd:	ff 75 f0             	push   -0x10(%ebp)
   11fd0:	68 d7 37 01 00       	push   $0x137d7
   11fd5:	e8 9b 0e 00 00       	call   12e75 <log_printf>
   11fda:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   11fdd:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   11fe1:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   11fe5:	7e cd                	jle    11fb4 <list_test+0xf0>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   11fe7:	83 ec 0c             	sub    $0xc,%esp
   11fea:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11fed:	50                   	push   %eax
   11fee:	e8 4b fe ff ff       	call   11e3e <list_get_size>
   11ff3:	83 c4 10             	add    $0x10,%esp
   11ff6:	89 c6                	mov    %eax,%esi
   11ff8:	83 ec 0c             	sub    $0xc,%esp
   11ffb:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11ffe:	50                   	push   %eax
   11fff:	e8 93 fe ff ff       	call   11e97 <list_get_last>
   12004:	83 c4 10             	add    $0x10,%esp
   12007:	89 c3                	mov    %eax,%ebx
   12009:	83 ec 0c             	sub    $0xc,%esp
   1200c:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1200f:	50                   	push   %eax
   12010:	e8 56 fe ff ff       	call   11e6b <list_get_first>
   12015:	83 c4 10             	add    $0x10,%esp
   12018:	56                   	push   %esi
   12019:	53                   	push   %ebx
   1201a:	50                   	push   %eax
   1201b:	68 90 37 01 00       	push   $0x13790
   12020:	e8 50 0e 00 00       	call   12e75 <log_printf>
   12025:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    

    //测试list_insert_last
    for (int i = 0; i < 5; ++i) {
   12028:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   1202f:	eb 3f                	jmp    12070 <list_test+0x1ac>
        list_node_t *node = nodes + i;
   12031:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12034:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   1203b:	8d 45 9c             	lea    -0x64(%ebp),%eax
   1203e:	01 d0                	add    %edx,%eax
   12040:	89 45 d8             	mov    %eax,-0x28(%ebp)

        log_printf("insert last to list: %d, 0x%x", i, (uint32_t)node);
   12043:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12046:	83 ec 04             	sub    $0x4,%esp
   12049:	50                   	push   %eax
   1204a:	ff 75 ec             	push   -0x14(%ebp)
   1204d:	68 ee 37 01 00       	push   $0x137ee
   12052:	e8 1e 0e 00 00       	call   12e75 <log_printf>
   12057:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&list, node);
   1205a:	83 ec 08             	sub    $0x8,%esp
   1205d:	ff 75 d8             	push   -0x28(%ebp)
   12060:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   12063:	50                   	push   %eax
   12064:	e8 88 0a 00 00       	call   12af1 <list_insert_last>
   12069:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   1206c:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   12070:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   12074:	7e bb                	jle    12031 <list_test+0x16d>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   12076:	83 ec 0c             	sub    $0xc,%esp
   12079:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1207c:	50                   	push   %eax
   1207d:	e8 bc fd ff ff       	call   11e3e <list_get_size>
   12082:	83 c4 10             	add    $0x10,%esp
   12085:	89 c6                	mov    %eax,%esi
   12087:	83 ec 0c             	sub    $0xc,%esp
   1208a:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1208d:	50                   	push   %eax
   1208e:	e8 04 fe ff ff       	call   11e97 <list_get_last>
   12093:	83 c4 10             	add    $0x10,%esp
   12096:	89 c3                	mov    %eax,%ebx
   12098:	83 ec 0c             	sub    $0xc,%esp
   1209b:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1209e:	50                   	push   %eax
   1209f:	e8 c7 fd ff ff       	call   11e6b <list_get_first>
   120a4:	83 c4 10             	add    $0x10,%esp
   120a7:	56                   	push   %esi
   120a8:	53                   	push   %ebx
   120a9:	50                   	push   %eax
   120aa:	68 90 37 01 00       	push   $0x13790
   120af:	e8 c1 0d 00 00       	call   12e75 <log_printf>
   120b4:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_remove_last
    for (int i = 0; i < 5; ++i) {
   120b7:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   120be:	eb 2d                	jmp    120ed <list_test+0x229>
        list_node_t *node = list_remove_last(&list);
   120c0:	83 ec 0c             	sub    $0xc,%esp
   120c3:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   120c6:	50                   	push   %eax
   120c7:	e8 65 0b 00 00       	call   12c31 <list_remove_last>
   120cc:	83 c4 10             	add    $0x10,%esp
   120cf:	89 45 dc             	mov    %eax,-0x24(%ebp)
        log_printf("remove last: %d, 0x%x", i, (uint32_t)node);
   120d2:	8b 45 dc             	mov    -0x24(%ebp),%eax
   120d5:	83 ec 04             	sub    $0x4,%esp
   120d8:	50                   	push   %eax
   120d9:	ff 75 e8             	push   -0x18(%ebp)
   120dc:	68 0c 38 01 00       	push   $0x1380c
   120e1:	e8 8f 0d 00 00       	call   12e75 <log_printf>
   120e6:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   120e9:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   120ed:	83 7d e8 04          	cmpl   $0x4,-0x18(%ebp)
   120f1:	7e cd                	jle    120c0 <list_test+0x1fc>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   120f3:	83 ec 0c             	sub    $0xc,%esp
   120f6:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   120f9:	50                   	push   %eax
   120fa:	e8 3f fd ff ff       	call   11e3e <list_get_size>
   120ff:	83 c4 10             	add    $0x10,%esp
   12102:	89 c6                	mov    %eax,%esi
   12104:	83 ec 0c             	sub    $0xc,%esp
   12107:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1210a:	50                   	push   %eax
   1210b:	e8 87 fd ff ff       	call   11e97 <list_get_last>
   12110:	83 c4 10             	add    $0x10,%esp
   12113:	89 c3                	mov    %eax,%ebx
   12115:	83 ec 0c             	sub    $0xc,%esp
   12118:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1211b:	50                   	push   %eax
   1211c:	e8 4a fd ff ff       	call   11e6b <list_get_first>
   12121:	83 c4 10             	add    $0x10,%esp
   12124:	56                   	push   %esi
   12125:	53                   	push   %ebx
   12126:	50                   	push   %eax
   12127:	68 90 37 01 00       	push   $0x13790
   1212c:	e8 44 0d 00 00       	call   12e75 <log_printf>
   12131:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    
    struct type_t {
        int i;
        list_node_t node;
    }v = {0x123456};
   12134:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
   1213b:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
   12142:	c7 45 98 00 00 00 00 	movl   $0x0,-0x68(%ebp)
   12149:	c7 45 90 56 34 12 00 	movl   $0x123456,-0x70(%ebp)

    list_node_t *v_node = &v.node;
   12150:	8d 45 90             	lea    -0x70(%ebp),%eax
   12153:	83 c0 04             	add    $0x4,%eax
   12156:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    struct type_t *p = list_node_parent(v_node, struct type_t, node);  
   12159:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   1215d:	74 08                	je     12167 <list_test+0x2a3>
   1215f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12162:	83 e8 04             	sub    $0x4,%eax
   12165:	eb 05                	jmp    1216c <list_test+0x2a8>
   12167:	b8 00 00 00 00       	mov    $0x0,%eax
   1216c:	89 45 e0             	mov    %eax,-0x20(%ebp)

    log_printf("v addr = 0x%x", (uint32_t)&v);
   1216f:	8d 45 90             	lea    -0x70(%ebp),%eax
   12172:	83 ec 08             	sub    $0x8,%esp
   12175:	50                   	push   %eax
   12176:	68 22 38 01 00       	push   $0x13822
   1217b:	e8 f5 0c 00 00       	call   12e75 <log_printf>
   12180:	83 c4 10             	add    $0x10,%esp
    log_printf("p addr = 0x%x", (uint32_t)p);  
   12183:	8b 45 e0             	mov    -0x20(%ebp),%eax
   12186:	83 ec 08             	sub    $0x8,%esp
   12189:	50                   	push   %eax
   1218a:	68 30 38 01 00       	push   $0x13830
   1218f:	e8 e1 0c 00 00       	call   12e75 <log_printf>
   12194:	83 c4 10             	add    $0x10,%esp

 }
   12197:	90                   	nop
   12198:	8d 65 f8             	lea    -0x8(%ebp),%esp
   1219b:	5b                   	pop    %ebx
   1219c:	5e                   	pop    %esi
   1219d:	5d                   	pop    %ebp
   1219e:	c3                   	ret    

0001219f <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   1219f:	55                   	push   %ebp
   121a0:	89 e5                	mov    %esp,%ebp
   121a2:	f4                   	hlt    
   121a3:	90                   	nop
   121a4:	5d                   	pop    %ebp
   121a5:	c3                   	ret    

000121a6 <pannic>:
 * @param file 异常所在文件绝对路径
 * @param line 异常所在行号
 * @param func 异常所在函数名 
 * @param reason 异常的原因
 */
void pannic(const char *file, int line, const char *func, const char *reason) {
   121a6:	55                   	push   %ebp
   121a7:	89 e5                	mov    %esp,%ebp
   121a9:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert faild! %s", reason);
   121ac:	83 ec 08             	sub    $0x8,%esp
   121af:	ff 75 14             	push   0x14(%ebp)
   121b2:	68 7b 38 01 00       	push   $0x1387b
   121b7:	e8 b9 0c 00 00       	call   12e75 <log_printf>
   121bc:	83 c4 10             	add    $0x10,%esp
    log_printf("file:\t%s\nline:\t%d\nfunc:\t%s", file, line, func);
   121bf:	ff 75 10             	push   0x10(%ebp)
   121c2:	ff 75 0c             	push   0xc(%ebp)
   121c5:	ff 75 08             	push   0x8(%ebp)
   121c8:	68 8c 38 01 00       	push   $0x1388c
   121cd:	e8 a3 0c 00 00       	call   12e75 <log_printf>
   121d2:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   121d5:	e8 c5 ff ff ff       	call   1219f <hlt>
   121da:	eb f9                	jmp    121d5 <pannic+0x2f>

000121dc <bitmap_byte_count>:
 * @brief  向上取整获取位图数组中有多少字节
 * 
 * @param bit_count  位图数组拥有的bit位数
 * @return int 向上取整得到的字节数
 */
int bitmap_byte_count(int bit_count) {
   121dc:	55                   	push   %ebp
   121dd:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8;
   121df:	8b 45 08             	mov    0x8(%ebp),%eax
   121e2:	83 c0 07             	add    $0x7,%eax
   121e5:	8d 50 07             	lea    0x7(%eax),%edx
   121e8:	85 c0                	test   %eax,%eax
   121ea:	0f 48 c2             	cmovs  %edx,%eax
   121ed:	c1 f8 03             	sar    $0x3,%eax
}
   121f0:	5d                   	pop    %ebp
   121f1:	c3                   	ret    

000121f2 <bitmap_init>:
 * @param bitmap 需要初始化的位图
 * @param bits 位图所包含的位图数组的起始地址
 * @param count 页的数量
 * @param init_bit 将位图数组的每一位设置为init_bit
 */
void bitmap_init(bitmap_t *bitmap, uint8_t *bits, int count, int init_bit) {
   121f2:	55                   	push   %ebp
   121f3:	89 e5                	mov    %esp,%ebp
   121f5:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   121f8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   121fc:	75 19                	jne    12217 <bitmap_init+0x25>
   121fe:	68 a8 38 01 00       	push   $0x138a8
   12203:	68 3c 39 01 00       	push   $0x1393c
   12208:	6a 24                	push   $0x24
   1220a:	68 c0 38 01 00       	push   $0x138c0
   1220f:	e8 92 ff ff ff       	call   121a6 <pannic>
   12214:	83 c4 10             	add    $0x10,%esp
    ASSERT(bits != (uint8_t*)0);
   12217:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1221b:	75 19                	jne    12236 <bitmap_init+0x44>
   1221d:	68 f8 38 01 00       	push   $0x138f8
   12222:	68 3c 39 01 00       	push   $0x1393c
   12227:	6a 25                	push   $0x25
   12229:	68 c0 38 01 00       	push   $0x138c0
   1222e:	e8 73 ff ff ff       	call   121a6 <pannic>
   12233:	83 c4 10             	add    $0x10,%esp

    bitmap->bit_count = count;
   12236:	8b 45 08             	mov    0x8(%ebp),%eax
   12239:	8b 55 10             	mov    0x10(%ebp),%edx
   1223c:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   1223e:	8b 45 08             	mov    0x8(%ebp),%eax
   12241:	8b 55 0c             	mov    0xc(%ebp),%edx
   12244:	89 50 04             	mov    %edx,0x4(%eax)

    //计算该位图需要多少字节
    int bytes = bitmap_byte_count(bitmap->bit_count);
   12247:	8b 45 08             	mov    0x8(%ebp),%eax
   1224a:	8b 00                	mov    (%eax),%eax
   1224c:	83 ec 0c             	sub    $0xc,%esp
   1224f:	50                   	push   %eax
   12250:	e8 87 ff ff ff       	call   121dc <bitmap_byte_count>
   12255:	83 c4 10             	add    $0x10,%esp
   12258:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    kernel_memset(bitmap->bits, init_bit ? 0xff : 0, bytes);
   1225b:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   1225f:	74 07                	je     12268 <bitmap_init+0x76>
   12261:	ba ff 00 00 00       	mov    $0xff,%edx
   12266:	eb 05                	jmp    1226d <bitmap_init+0x7b>
   12268:	ba 00 00 00 00       	mov    $0x0,%edx
   1226d:	8b 45 08             	mov    0x8(%ebp),%eax
   12270:	8b 40 04             	mov    0x4(%eax),%eax
   12273:	83 ec 04             	sub    $0x4,%esp
   12276:	ff 75 f4             	push   -0xc(%ebp)
   12279:	52                   	push   %edx
   1227a:	50                   	push   %eax
   1227b:	e8 28 04 00 00       	call   126a8 <kernel_memset>
   12280:	83 c4 10             	add    $0x10,%esp

}
   12283:	90                   	nop
   12284:	c9                   	leave  
   12285:	c3                   	ret    

00012286 <bitmap_get_bit>:
 * 
 * @param bitmap 
 * @param index 
 * @return uint8_t 
 */
uint8_t bitmap_get_bit(bitmap_t *bitmap, int index) {
   12286:	55                   	push   %ebp
   12287:	89 e5                	mov    %esp,%ebp
   12289:	53                   	push   %ebx
   1228a:	83 ec 04             	sub    $0x4,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   1228d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12291:	75 19                	jne    122ac <bitmap_get_bit+0x26>
   12293:	68 a8 38 01 00       	push   $0x138a8
   12298:	68 48 39 01 00       	push   $0x13948
   1229d:	6a 39                	push   $0x39
   1229f:	68 c0 38 01 00       	push   $0x138c0
   122a4:	e8 fd fe ff ff       	call   121a6 <pannic>
   122a9:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0);
   122ac:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   122b0:	79 19                	jns    122cb <bitmap_get_bit+0x45>
   122b2:	68 0c 39 01 00       	push   $0x1390c
   122b7:	68 48 39 01 00       	push   $0x13948
   122bc:	6a 3a                	push   $0x3a
   122be:	68 c0 38 01 00       	push   $0x138c0
   122c3:	e8 de fe ff ff       	call   121a6 <pannic>
   122c8:	83 c4 10             	add    $0x10,%esp

    return (bitmap->bits[index / 8] & (1 << (index % 8)));
   122cb:	8b 45 08             	mov    0x8(%ebp),%eax
   122ce:	8b 48 04             	mov    0x4(%eax),%ecx
   122d1:	8b 45 0c             	mov    0xc(%ebp),%eax
   122d4:	8d 50 07             	lea    0x7(%eax),%edx
   122d7:	85 c0                	test   %eax,%eax
   122d9:	0f 48 c2             	cmovs  %edx,%eax
   122dc:	c1 f8 03             	sar    $0x3,%eax
   122df:	01 c8                	add    %ecx,%eax
   122e1:	0f b6 00             	movzbl (%eax),%eax
   122e4:	89 c3                	mov    %eax,%ebx
   122e6:	8b 45 0c             	mov    0xc(%ebp),%eax
   122e9:	83 e0 07             	and    $0x7,%eax
   122ec:	ba 01 00 00 00       	mov    $0x1,%edx
   122f1:	89 c1                	mov    %eax,%ecx
   122f3:	d3 e2                	shl    %cl,%edx
   122f5:	89 d0                	mov    %edx,%eax
   122f7:	21 d8                	and    %ebx,%eax
}
   122f9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   122fc:	c9                   	leave  
   122fd:	c3                   	ret    

000122fe <bitmap_set_bit>:
 * @param bitmap 
 * @param index 
 * @param count 
 * @param bit 
 */
void bitmap_set_bit(bitmap_t *bitmap, int index, int count, int bit) {
   122fe:	55                   	push   %ebp
   122ff:	89 e5                	mov    %esp,%ebp
   12301:	56                   	push   %esi
   12302:	53                   	push   %ebx
   12303:	83 ec 10             	sub    $0x10,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   12306:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1230a:	75 19                	jne    12325 <bitmap_set_bit+0x27>
   1230c:	68 a8 38 01 00       	push   $0x138a8
   12311:	68 58 39 01 00       	push   $0x13958
   12316:	6a 48                	push   $0x48
   12318:	68 c0 38 01 00       	push   $0x138c0
   1231d:	e8 84 fe ff ff       	call   121a6 <pannic>
   12322:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0 && count >= 0);
   12325:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12329:	78 06                	js     12331 <bitmap_set_bit+0x33>
   1232b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1232f:	79 19                	jns    1234a <bitmap_set_bit+0x4c>
   12331:	68 17 39 01 00       	push   $0x13917
   12336:	68 58 39 01 00       	push   $0x13958
   1233b:	6a 49                	push   $0x49
   1233d:	68 c0 38 01 00       	push   $0x138c0
   12342:	e8 5f fe ff ff       	call   121a6 <pannic>
   12347:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   1234a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12351:	e9 92 00 00 00       	jmp    123e8 <bitmap_set_bit+0xea>
        if (bit) {
   12356:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   1235a:	74 42                	je     1239e <bitmap_set_bit+0xa0>
            bitmap->bits[index / 8] |= (1 << (index % 8));
   1235c:	8b 45 08             	mov    0x8(%ebp),%eax
   1235f:	8b 48 04             	mov    0x4(%eax),%ecx
   12362:	8b 45 0c             	mov    0xc(%ebp),%eax
   12365:	8d 50 07             	lea    0x7(%eax),%edx
   12368:	85 c0                	test   %eax,%eax
   1236a:	0f 48 c2             	cmovs  %edx,%eax
   1236d:	c1 f8 03             	sar    $0x3,%eax
   12370:	89 c2                	mov    %eax,%edx
   12372:	89 d0                	mov    %edx,%eax
   12374:	01 c8                	add    %ecx,%eax
   12376:	0f b6 00             	movzbl (%eax),%eax
   12379:	89 c6                	mov    %eax,%esi
   1237b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1237e:	83 e0 07             	and    $0x7,%eax
   12381:	bb 01 00 00 00       	mov    $0x1,%ebx
   12386:	89 c1                	mov    %eax,%ecx
   12388:	d3 e3                	shl    %cl,%ebx
   1238a:	89 d8                	mov    %ebx,%eax
   1238c:	89 f1                	mov    %esi,%ecx
   1238e:	09 c1                	or     %eax,%ecx
   12390:	8b 45 08             	mov    0x8(%ebp),%eax
   12393:	8b 40 04             	mov    0x4(%eax),%eax
   12396:	01 d0                	add    %edx,%eax
   12398:	89 ca                	mov    %ecx,%edx
   1239a:	88 10                	mov    %dl,(%eax)
   1239c:	eb 42                	jmp    123e0 <bitmap_set_bit+0xe2>
        } else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   1239e:	8b 45 08             	mov    0x8(%ebp),%eax
   123a1:	8b 48 04             	mov    0x4(%eax),%ecx
   123a4:	8b 45 0c             	mov    0xc(%ebp),%eax
   123a7:	8d 50 07             	lea    0x7(%eax),%edx
   123aa:	85 c0                	test   %eax,%eax
   123ac:	0f 48 c2             	cmovs  %edx,%eax
   123af:	c1 f8 03             	sar    $0x3,%eax
   123b2:	89 c2                	mov    %eax,%edx
   123b4:	89 d0                	mov    %edx,%eax
   123b6:	01 c8                	add    %ecx,%eax
   123b8:	0f b6 00             	movzbl (%eax),%eax
   123bb:	89 c6                	mov    %eax,%esi
   123bd:	8b 45 0c             	mov    0xc(%ebp),%eax
   123c0:	83 e0 07             	and    $0x7,%eax
   123c3:	bb 01 00 00 00       	mov    $0x1,%ebx
   123c8:	89 c1                	mov    %eax,%ecx
   123ca:	d3 e3                	shl    %cl,%ebx
   123cc:	89 d8                	mov    %ebx,%eax
   123ce:	f7 d0                	not    %eax
   123d0:	89 f1                	mov    %esi,%ecx
   123d2:	21 c1                	and    %eax,%ecx
   123d4:	8b 45 08             	mov    0x8(%ebp),%eax
   123d7:	8b 40 04             	mov    0x4(%eax),%eax
   123da:	01 d0                	add    %edx,%eax
   123dc:	89 ca                	mov    %ecx,%edx
   123de:	88 10                	mov    %dl,(%eax)
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   123e0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   123e4:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   123e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   123eb:	3b 45 10             	cmp    0x10(%ebp),%eax
   123ee:	7d 0e                	jge    123fe <bitmap_set_bit+0x100>
   123f0:	8b 45 08             	mov    0x8(%ebp),%eax
   123f3:	8b 00                	mov    (%eax),%eax
   123f5:	39 45 0c             	cmp    %eax,0xc(%ebp)
   123f8:	0f 8c 58 ff ff ff    	jl     12356 <bitmap_set_bit+0x58>
        }
    }
}
   123fe:	90                   	nop
   123ff:	8d 65 f8             	lea    -0x8(%ebp),%esp
   12402:	5b                   	pop    %ebx
   12403:	5e                   	pop    %esi
   12404:	5d                   	pop    %ebp
   12405:	c3                   	ret    

00012406 <bitmap_is_set>:
 * 
 * @param bitmap 
 * @param index 
 * @return int 
 */
int bitmap_is_set(bitmap_t *bitmap, int index) {
   12406:	55                   	push   %ebp
   12407:	89 e5                	mov    %esp,%ebp
   12409:	83 ec 08             	sub    $0x8,%esp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   1240c:	83 ec 08             	sub    $0x8,%esp
   1240f:	ff 75 0c             	push   0xc(%ebp)
   12412:	ff 75 08             	push   0x8(%ebp)
   12415:	e8 6c fe ff ff       	call   12286 <bitmap_get_bit>
   1241a:	83 c4 10             	add    $0x10,%esp
   1241d:	84 c0                	test   %al,%al
   1241f:	0f 95 c0             	setne  %al
   12422:	0f b6 c0             	movzbl %al,%eax
}
   12425:	c9                   	leave  
   12426:	c3                   	ret    

00012427 <bitmap_alloc_nbits>:
 * @param bitmap 
 * @param bit 当某一位的值为bit时表示该位空闲，可供分配
 * @param count 
 * @return int 
 */
int bitmap_alloc_nbits(bitmap_t *bitmap, int bit, int count) {
   12427:	55                   	push   %ebp
   12428:	89 e5                	mov    %esp,%ebp
   1242a:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   1242d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12431:	75 19                	jne    1244c <bitmap_alloc_nbits+0x25>
   12433:	68 a8 38 01 00       	push   $0x138a8
   12438:	68 68 39 01 00       	push   $0x13968
   1243d:	6a 68                	push   $0x68
   1243f:	68 c0 38 01 00       	push   $0x138c0
   12444:	e8 5d fd ff ff       	call   121a6 <pannic>
   12449:	83 c4 10             	add    $0x10,%esp
    ASSERT(count >= 0);
   1244c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12450:	79 19                	jns    1246b <bitmap_alloc_nbits+0x44>
   12452:	68 30 39 01 00       	push   $0x13930
   12457:	68 68 39 01 00       	push   $0x13968
   1245c:	6a 69                	push   $0x69
   1245e:	68 c0 38 01 00       	push   $0x138c0
   12463:	e8 3e fd ff ff       	call   121a6 <pannic>
   12468:	83 c4 10             	add    $0x10,%esp

    int search_index = 0;
   1246b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    int ok_index = -1;
   12472:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
    while (search_index < bitmap->bit_count) {
   12479:	e9 8f 00 00 00       	jmp    1250d <bitmap_alloc_nbits+0xe6>
        //确定可分配空间的起始索引
        if (bitmap_get_bit(bitmap, search_index) != bit) {
   1247e:	83 ec 08             	sub    $0x8,%esp
   12481:	ff 75 f4             	push   -0xc(%ebp)
   12484:	ff 75 08             	push   0x8(%ebp)
   12487:	e8 fa fd ff ff       	call   12286 <bitmap_get_bit>
   1248c:	83 c4 10             	add    $0x10,%esp
   1248f:	0f b6 c0             	movzbl %al,%eax
   12492:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12495:	74 06                	je     1249d <bitmap_alloc_nbits+0x76>
            search_index++;
   12497:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
            continue;
   1249b:	eb 70                	jmp    1250d <bitmap_alloc_nbits+0xe6>
        }

        //记录可分配空间的起始索引
        ok_index = search_index;
   1249d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   124a0:	89 45 f0             	mov    %eax,-0x10(%ebp)

        //判断该空间是否大小满足要求
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   124a3:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
   124aa:	eb 2d                	jmp    124d9 <bitmap_alloc_nbits+0xb2>
            //空间大小不满足要求, 分配失败
            if (bitmap_get_bit(bitmap, search_index++) != bit) {
   124ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
   124af:	8d 50 01             	lea    0x1(%eax),%edx
   124b2:	89 55 f4             	mov    %edx,-0xc(%ebp)
   124b5:	83 ec 08             	sub    $0x8,%esp
   124b8:	50                   	push   %eax
   124b9:	ff 75 08             	push   0x8(%ebp)
   124bc:	e8 c5 fd ff ff       	call   12286 <bitmap_get_bit>
   124c1:	83 c4 10             	add    $0x10,%esp
   124c4:	0f b6 c0             	movzbl %al,%eax
   124c7:	39 45 0c             	cmp    %eax,0xc(%ebp)
   124ca:	74 09                	je     124d5 <bitmap_alloc_nbits+0xae>
                ok_index = -1;
   124cc:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
                break;
   124d3:	eb 16                	jmp    124eb <bitmap_alloc_nbits+0xc4>
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   124d5:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   124d9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   124dc:	3b 45 10             	cmp    0x10(%ebp),%eax
   124df:	7d 0a                	jge    124eb <bitmap_alloc_nbits+0xc4>
   124e1:	8b 45 08             	mov    0x8(%ebp),%eax
   124e4:	8b 00                	mov    (%eax),%eax
   124e6:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   124e9:	7c c1                	jl     124ac <bitmap_alloc_nbits+0x85>
            }
        }

        if (ok_index != -1) {//分配成功
   124eb:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
   124ef:	74 1c                	je     1250d <bitmap_alloc_nbits+0xe6>
            //将该片空间标记为已分配状态, 并返回起始索引
            bitmap_set_bit(bitmap, ok_index, count, ~bit);
   124f1:	8b 45 0c             	mov    0xc(%ebp),%eax
   124f4:	f7 d0                	not    %eax
   124f6:	50                   	push   %eax
   124f7:	ff 75 10             	push   0x10(%ebp)
   124fa:	ff 75 f0             	push   -0x10(%ebp)
   124fd:	ff 75 08             	push   0x8(%ebp)
   12500:	e8 f9 fd ff ff       	call   122fe <bitmap_set_bit>
   12505:	83 c4 10             	add    $0x10,%esp
            return ok_index;
   12508:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1250b:	eb 13                	jmp    12520 <bitmap_alloc_nbits+0xf9>
    while (search_index < bitmap->bit_count) {
   1250d:	8b 45 08             	mov    0x8(%ebp),%eax
   12510:	8b 00                	mov    (%eax),%eax
   12512:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   12515:	0f 8c 63 ff ff ff    	jl     1247e <bitmap_alloc_nbits+0x57>
        }
    }
    
    //遍历完整个位图也没有满足要求的空间则返回-1
    return -1;
   1251b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

   12520:	c9                   	leave  
   12521:	c3                   	ret    

00012522 <kernel_strcpy>:
 * @brief  拷贝字符串
 * 
 * @param dest 目标字符串
 * @param src  源字符串
 */
void kernel_strcpy(char *dest, const char *src) {
   12522:	55                   	push   %ebp
   12523:	89 e5                	mov    %esp,%ebp
    //1.判断是否为NULL
    if (!dest || !src) return;
   12525:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12529:	74 3b                	je     12566 <kernel_strcpy+0x44>
   1252b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1252f:	74 35                	je     12566 <kernel_strcpy+0x44>

    //2.拷贝 src '\0' 以前的部分到 dest中
    //TODO:完成（访问未初始化的内存）的异常中断后就只判断src是否读到'\0'
    while (*dest && *src) {
   12531:	eb 17                	jmp    1254a <kernel_strcpy+0x28>
        *(dest++) = *(src++);
   12533:	8b 55 0c             	mov    0xc(%ebp),%edx
   12536:	8d 42 01             	lea    0x1(%edx),%eax
   12539:	89 45 0c             	mov    %eax,0xc(%ebp)
   1253c:	8b 45 08             	mov    0x8(%ebp),%eax
   1253f:	8d 48 01             	lea    0x1(%eax),%ecx
   12542:	89 4d 08             	mov    %ecx,0x8(%ebp)
   12545:	0f b6 12             	movzbl (%edx),%edx
   12548:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   1254a:	8b 45 08             	mov    0x8(%ebp),%eax
   1254d:	0f b6 00             	movzbl (%eax),%eax
   12550:	84 c0                	test   %al,%al
   12552:	74 0a                	je     1255e <kernel_strcpy+0x3c>
   12554:	8b 45 0c             	mov    0xc(%ebp),%eax
   12557:	0f b6 00             	movzbl (%eax),%eax
   1255a:	84 c0                	test   %al,%al
   1255c:	75 d5                	jne    12533 <kernel_strcpy+0x11>
    }

    //3.添加结束符
    *dest = '\0';
   1255e:	8b 45 08             	mov    0x8(%ebp),%eax
   12561:	c6 00 00             	movb   $0x0,(%eax)
   12564:	eb 01                	jmp    12567 <kernel_strcpy+0x45>
    if (!dest || !src) return;
   12566:	90                   	nop
    
}
   12567:	5d                   	pop    %ebp
   12568:	c3                   	ret    

00012569 <kernel_strncpy>:
 * 
 * @param dest 目的字符串
 * @param src 源字符串
 * @param size 拷贝字符串的长度，包含'\0'
 */
void kernel_strncpy(char* dest, const char *src, int size) {
   12569:	55                   	push   %ebp
   1256a:	89 e5                	mov    %esp,%ebp
    //1.判断是否需要拷贝
    if (!dest || !src || !size) return;
   1256c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12570:	74 45                	je     125b7 <kernel_strncpy+0x4e>
   12572:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12576:	74 3f                	je     125b7 <kernel_strncpy+0x4e>
   12578:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1257c:	74 39                	je     125b7 <kernel_strncpy+0x4e>

    //2.size的大小包含了'\0'，所以要预留一个空间给'\0'，只能拷贝 size - 1个字符
    while ((size-- > 1) && (*src)) {
   1257e:	eb 17                	jmp    12597 <kernel_strncpy+0x2e>
        *(dest++) = *(src++);
   12580:	8b 55 0c             	mov    0xc(%ebp),%edx
   12583:	8d 42 01             	lea    0x1(%edx),%eax
   12586:	89 45 0c             	mov    %eax,0xc(%ebp)
   12589:	8b 45 08             	mov    0x8(%ebp),%eax
   1258c:	8d 48 01             	lea    0x1(%eax),%ecx
   1258f:	89 4d 08             	mov    %ecx,0x8(%ebp)
   12592:	0f b6 12             	movzbl (%edx),%edx
   12595:	88 10                	mov    %dl,(%eax)
    while ((size-- > 1) && (*src)) {
   12597:	8b 45 10             	mov    0x10(%ebp),%eax
   1259a:	8d 50 ff             	lea    -0x1(%eax),%edx
   1259d:	89 55 10             	mov    %edx,0x10(%ebp)
   125a0:	83 f8 01             	cmp    $0x1,%eax
   125a3:	7e 0a                	jle    125af <kernel_strncpy+0x46>
   125a5:	8b 45 0c             	mov    0xc(%ebp),%eax
   125a8:	0f b6 00             	movzbl (%eax),%eax
   125ab:	84 c0                	test   %al,%al
   125ad:	75 d1                	jne    12580 <kernel_strncpy+0x17>
    }

    //3.添加结束符
    *dest = '\0';
   125af:	8b 45 08             	mov    0x8(%ebp),%eax
   125b2:	c6 00 00             	movb   $0x0,(%eax)
   125b5:	eb 01                	jmp    125b8 <kernel_strncpy+0x4f>
    if (!dest || !src || !size) return;
   125b7:	90                   	nop
}
   125b8:	5d                   	pop    %ebp
   125b9:	c3                   	ret    

000125ba <kernel_strncmp>:
 * @param s2 字符串2
 * @param size 比较前比较的子串长度，从下标0开始到(size - 1)
 * 
 * @return int ==: 0, > : 1, < : -1
 */
int kernel_strncmp(const char *s1, const char *s2, int size) {
   125ba:	55                   	push   %ebp
   125bb:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) return 0;
   125bd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   125c1:	74 06                	je     125c9 <kernel_strncmp+0xf>
   125c3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   125c7:	75 0f                	jne    125d8 <kernel_strncmp+0x1e>
   125c9:	b8 00 00 00 00       	mov    $0x0,%eax
   125ce:	eb 52                	jmp    12622 <kernel_strncmp+0x68>

    while (*s1 && *s2 && --size && *s1 == *s2 ) {
        ++s1;
   125d0:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        ++s2;        
   125d4:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && --size && *s1 == *s2 ) {
   125d8:	8b 45 08             	mov    0x8(%ebp),%eax
   125db:	0f b6 00             	movzbl (%eax),%eax
   125de:	84 c0                	test   %al,%al
   125e0:	74 24                	je     12606 <kernel_strncmp+0x4c>
   125e2:	8b 45 0c             	mov    0xc(%ebp),%eax
   125e5:	0f b6 00             	movzbl (%eax),%eax
   125e8:	84 c0                	test   %al,%al
   125ea:	74 1a                	je     12606 <kernel_strncmp+0x4c>
   125ec:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   125f0:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   125f4:	74 10                	je     12606 <kernel_strncmp+0x4c>
   125f6:	8b 45 08             	mov    0x8(%ebp),%eax
   125f9:	0f b6 10             	movzbl (%eax),%edx
   125fc:	8b 45 0c             	mov    0xc(%ebp),%eax
   125ff:	0f b6 00             	movzbl (%eax),%eax
   12602:	38 c2                	cmp    %al,%dl
   12604:	74 ca                	je     125d0 <kernel_strncmp+0x16>
    }

    if (*s1 > *s2) return 1;
   12606:	8b 45 08             	mov    0x8(%ebp),%eax
   12609:	0f b6 10             	movzbl (%eax),%edx
   1260c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1260f:	0f b6 00             	movzbl (%eax),%eax
   12612:	38 c2                	cmp    %al,%dl
   12614:	7e 07                	jle    1261d <kernel_strncmp+0x63>
   12616:	b8 01 00 00 00       	mov    $0x1,%eax
   1261b:	eb 05                	jmp    12622 <kernel_strncmp+0x68>
    else if (*s1 < *s1) return -1;
    else return 0;
   1261d:	b8 00 00 00 00       	mov    $0x0,%eax
    
}
   12622:	5d                   	pop    %ebp
   12623:	c3                   	ret    

00012624 <kernel_strlen>:
 * @brief  获取字符串str的长度
 * 
 * @param str 
 * @return int 
 */
int kernel_strlen(const char *str) {
   12624:	55                   	push   %ebp
   12625:	89 e5                	mov    %esp,%ebp
   12627:	83 ec 10             	sub    $0x10,%esp
    if (!str) return 0;
   1262a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1262e:	75 07                	jne    12637 <kernel_strlen+0x13>
   12630:	b8 00 00 00 00       	mov    $0x0,%eax
   12635:	eb 20                	jmp    12657 <kernel_strlen+0x33>

    int len = 0;
   12637:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*(str++)) len++;
   1263e:	eb 04                	jmp    12644 <kernel_strlen+0x20>
   12640:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   12644:	8b 45 08             	mov    0x8(%ebp),%eax
   12647:	8d 50 01             	lea    0x1(%eax),%edx
   1264a:	89 55 08             	mov    %edx,0x8(%ebp)
   1264d:	0f b6 00             	movzbl (%eax),%eax
   12650:	84 c0                	test   %al,%al
   12652:	75 ec                	jne    12640 <kernel_strlen+0x1c>

    return len;
   12654:	8b 45 fc             	mov    -0x4(%ebp),%eax
    
}
   12657:	c9                   	leave  
   12658:	c3                   	ret    

00012659 <kernel_memcpy>:
 * 
 * @param dest 目的内存的起始地址
 * @param src 原内存的起始地址
 * @param size 复制的内存字节大小
 */
void kernel_memcpy(void *dest, const void *src, int size) {
   12659:	55                   	push   %ebp
   1265a:	89 e5                	mov    %esp,%ebp
   1265c:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) return;
   1265f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12663:	74 40                	je     126a5 <kernel_memcpy+0x4c>
   12665:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12669:	74 3a                	je     126a5 <kernel_memcpy+0x4c>
   1266b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1266f:	74 34                	je     126a5 <kernel_memcpy+0x4c>

    uint8_t *d = (uint8_t*)dest;
   12671:	8b 45 08             	mov    0x8(%ebp),%eax
   12674:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *s = (uint8_t*)src;
   12677:	8b 45 0c             	mov    0xc(%ebp),%eax
   1267a:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (size--) {
   1267d:	eb 17                	jmp    12696 <kernel_memcpy+0x3d>
        *(d++) = *(s++);
   1267f:	8b 55 f8             	mov    -0x8(%ebp),%edx
   12682:	8d 42 01             	lea    0x1(%edx),%eax
   12685:	89 45 f8             	mov    %eax,-0x8(%ebp)
   12688:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1268b:	8d 48 01             	lea    0x1(%eax),%ecx
   1268e:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   12691:	0f b6 12             	movzbl (%edx),%edx
   12694:	88 10                	mov    %dl,(%eax)
    while (size--) {
   12696:	8b 45 10             	mov    0x10(%ebp),%eax
   12699:	8d 50 ff             	lea    -0x1(%eax),%edx
   1269c:	89 55 10             	mov    %edx,0x10(%ebp)
   1269f:	85 c0                	test   %eax,%eax
   126a1:	75 dc                	jne    1267f <kernel_memcpy+0x26>
   126a3:	eb 01                	jmp    126a6 <kernel_memcpy+0x4d>
    if (!dest || !src || !size) return;
   126a5:	90                   	nop
    }
    
}
   126a6:	c9                   	leave  
   126a7:	c3                   	ret    

000126a8 <kernel_memset>:
 * 
 * @param dest 区域起始地址
 * @param v 每个字节的值
 * @param size 赋值的内存的大小
 */
void kernel_memset(void *dest, uint8_t v, int size) {
   126a8:	55                   	push   %ebp
   126a9:	89 e5                	mov    %esp,%ebp
   126ab:	83 ec 14             	sub    $0x14,%esp
   126ae:	8b 45 0c             	mov    0xc(%ebp),%eax
   126b1:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size) return;
   126b4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   126b8:	74 2c                	je     126e6 <kernel_memset+0x3e>
   126ba:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   126be:	74 26                	je     126e6 <kernel_memset+0x3e>

    uint8_t *d = (uint8_t*)dest;
   126c0:	8b 45 08             	mov    0x8(%ebp),%eax
   126c3:	89 45 fc             	mov    %eax,-0x4(%ebp)
    
    while (size--) {
   126c6:	eb 0f                	jmp    126d7 <kernel_memset+0x2f>
        *(d++) = v;
   126c8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   126cb:	8d 50 01             	lea    0x1(%eax),%edx
   126ce:	89 55 fc             	mov    %edx,-0x4(%ebp)
   126d1:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   126d5:	88 10                	mov    %dl,(%eax)
    while (size--) {
   126d7:	8b 45 10             	mov    0x10(%ebp),%eax
   126da:	8d 50 ff             	lea    -0x1(%eax),%edx
   126dd:	89 55 10             	mov    %edx,0x10(%ebp)
   126e0:	85 c0                	test   %eax,%eax
   126e2:	75 e4                	jne    126c8 <kernel_memset+0x20>
   126e4:	eb 01                	jmp    126e7 <kernel_memset+0x3f>
    if (!dest || !size) return;
   126e6:	90                   	nop
    }
    
}
   126e7:	c9                   	leave  
   126e8:	c3                   	ret    

000126e9 <kernel_memcmp>:
 * @param d1 区域1的起始地址
 * @param d2 区域2的起始地址
 * @param size 比较的字节数量
 * @return int ==:0, >:1, <:-1
 */
int kernel_memcmp(const void *dest1, const void *dest2, int size) {
   126e9:	55                   	push   %ebp
   126ea:	89 e5                	mov    %esp,%ebp
   126ec:	83 ec 10             	sub    $0x10,%esp
    if (!dest1 || !dest2 || !size) return 0;
   126ef:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   126f3:	74 0c                	je     12701 <kernel_memcmp+0x18>
   126f5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   126f9:	74 06                	je     12701 <kernel_memcmp+0x18>
   126fb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   126ff:	75 07                	jne    12708 <kernel_memcmp+0x1f>
   12701:	b8 00 00 00 00       	mov    $0x0,%eax
   12706:	eb 63                	jmp    1276b <kernel_memcmp+0x82>

    uint8_t *d1 = (uint8_t*)dest1;
   12708:	8b 45 08             	mov    0x8(%ebp),%eax
   1270b:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d2 = (uint8_t*)dest2;
   1270e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12711:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (--size && *d1 == *d2) {
   12714:	eb 08                	jmp    1271e <kernel_memcmp+0x35>
        d1++;
   12716:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
        d2++;
   1271a:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (--size && *d1 == *d2) {
   1271e:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   12722:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12726:	74 10                	je     12738 <kernel_memcmp+0x4f>
   12728:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1272b:	0f b6 10             	movzbl (%eax),%edx
   1272e:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12731:	0f b6 00             	movzbl (%eax),%eax
   12734:	38 c2                	cmp    %al,%dl
   12736:	74 de                	je     12716 <kernel_memcmp+0x2d>
    }

    if (*d1 > *d2) return 1;
   12738:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1273b:	0f b6 10             	movzbl (%eax),%edx
   1273e:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12741:	0f b6 00             	movzbl (%eax),%eax
   12744:	38 c2                	cmp    %al,%dl
   12746:	76 07                	jbe    1274f <kernel_memcmp+0x66>
   12748:	b8 01 00 00 00       	mov    $0x1,%eax
   1274d:	eb 1c                	jmp    1276b <kernel_memcmp+0x82>
    else if (*d1 < *d2) return -1;
   1274f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12752:	0f b6 10             	movzbl (%eax),%edx
   12755:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12758:	0f b6 00             	movzbl (%eax),%eax
   1275b:	38 c2                	cmp    %al,%dl
   1275d:	73 07                	jae    12766 <kernel_memcmp+0x7d>
   1275f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12764:	eb 05                	jmp    1276b <kernel_memcmp+0x82>
    else return 0;
   12766:	b8 00 00 00 00       	mov    $0x0,%eax

}
   1276b:	c9                   	leave  
   1276c:	c3                   	ret    

0001276d <kernel_sprintf>:



void kernel_sprintf(char *buf, const char *formate, ...) {
   1276d:	55                   	push   %ebp
   1276e:	89 e5                	mov    %esp,%ebp
   12770:	83 ec 18             	sub    $0x18,%esp
    //获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   12773:	8d 45 10             	lea    0x10(%ebp),%eax
   12776:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_vsprintf(buf, formate, args);
   12779:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1277c:	83 ec 04             	sub    $0x4,%esp
   1277f:	50                   	push   %eax
   12780:	ff 75 0c             	push   0xc(%ebp)
   12783:	ff 75 08             	push   0x8(%ebp)
   12786:	e8 06 00 00 00       	call   12791 <kernel_vsprintf>
   1278b:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   1278e:	90                   	nop
   1278f:	c9                   	leave  
   12790:	c3                   	ret    

00012791 <kernel_vsprintf>:
 * 
 * @param buf 
 * @param formate 
 * @param args 
 */
void kernel_vsprintf(char *buf, const char *formate, va_list args) {
   12791:	55                   	push   %ebp
   12792:	89 e5                	mov    %esp,%ebp
   12794:	83 ec 28             	sub    $0x28,%esp
    //定义状态机，包含两种状态
    enum {NORMAL, READ_FMT} state = NORMAL;
   12797:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    
    char *curr = buf;
   1279e:	8b 45 08             	mov    0x8(%ebp),%eax
   127a1:	89 45 f0             	mov    %eax,-0x10(%ebp)

    char ch;

    while ((ch = *(formate++)) != '\0') {
   127a4:	e9 68 01 00 00       	jmp    12911 <kernel_vsprintf+0x180>
        switch (state) {
   127a9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   127ad:	74 0b                	je     127ba <kernel_vsprintf+0x29>
   127af:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   127b3:	74 2b                	je     127e0 <kernel_vsprintf+0x4f>
   127b5:	e9 56 01 00 00       	jmp    12910 <kernel_vsprintf+0x17f>
        case NORMAL: 
            if (ch == '%') state = READ_FMT;
   127ba:	80 7d e7 25          	cmpb   $0x25,-0x19(%ebp)
   127be:	75 0c                	jne    127cc <kernel_vsprintf+0x3b>
   127c0:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   127c7:	e9 45 01 00 00       	jmp    12911 <kernel_vsprintf+0x180>
            else *(curr++) = ch;
   127cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   127cf:	8d 50 01             	lea    0x1(%eax),%edx
   127d2:	89 55 f0             	mov    %edx,-0x10(%ebp)
   127d5:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   127d9:	88 10                	mov    %dl,(%eax)
            break;
   127db:	e9 31 01 00 00       	jmp    12911 <kernel_vsprintf+0x180>
        case READ_FMT:
            if (ch == 's') {
   127e0:	80 7d e7 73          	cmpb   $0x73,-0x19(%ebp)
   127e4:	75 47                	jne    1282d <kernel_vsprintf+0x9c>
                const char * str = va_arg(args, char *);
   127e6:	8b 45 10             	mov    0x10(%ebp),%eax
   127e9:	8d 50 04             	lea    0x4(%eax),%edx
   127ec:	89 55 10             	mov    %edx,0x10(%ebp)
   127ef:	8b 00                	mov    (%eax),%eax
   127f1:	89 45 ec             	mov    %eax,-0x14(%ebp)
                int len = kernel_strlen(str);
   127f4:	ff 75 ec             	push   -0x14(%ebp)
   127f7:	e8 28 fe ff ff       	call   12624 <kernel_strlen>
   127fc:	83 c4 04             	add    $0x4,%esp
   127ff:	89 45 e8             	mov    %eax,-0x18(%ebp)
                while (len--) {
   12802:	eb 17                	jmp    1281b <kernel_vsprintf+0x8a>
                    *(curr++) = *(str++);
   12804:	8b 55 ec             	mov    -0x14(%ebp),%edx
   12807:	8d 42 01             	lea    0x1(%edx),%eax
   1280a:	89 45 ec             	mov    %eax,-0x14(%ebp)
   1280d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12810:	8d 48 01             	lea    0x1(%eax),%ecx
   12813:	89 4d f0             	mov    %ecx,-0x10(%ebp)
   12816:	0f b6 12             	movzbl (%edx),%edx
   12819:	88 10                	mov    %dl,(%eax)
                while (len--) {
   1281b:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1281e:	8d 50 ff             	lea    -0x1(%eax),%edx
   12821:	89 55 e8             	mov    %edx,-0x18(%ebp)
   12824:	85 c0                	test   %eax,%eax
   12826:	75 dc                	jne    12804 <kernel_vsprintf+0x73>
   12828:	e9 da 00 00 00       	jmp    12907 <kernel_vsprintf+0x176>
                }
            } else if (ch == 'd') {
   1282d:	80 7d e7 64          	cmpb   $0x64,-0x19(%ebp)
   12831:	75 37                	jne    1286a <kernel_vsprintf+0xd9>
                const int num = va_arg(args, int);
   12833:	8b 45 10             	mov    0x10(%ebp),%eax
   12836:	8d 50 04             	lea    0x4(%eax),%edx
   12839:	89 55 10             	mov    %edx,0x10(%ebp)
   1283c:	8b 00                	mov    (%eax),%eax
   1283e:	89 45 d8             	mov    %eax,-0x28(%ebp)
                kernel_itoa(curr, num, 10);
   12841:	83 ec 04             	sub    $0x4,%esp
   12844:	6a 0a                	push   $0xa
   12846:	ff 75 d8             	push   -0x28(%ebp)
   12849:	ff 75 f0             	push   -0x10(%ebp)
   1284c:	e8 dd 00 00 00       	call   1292e <kernel_itoa>
   12851:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr);   
   12854:	83 ec 0c             	sub    $0xc,%esp
   12857:	ff 75 f0             	push   -0x10(%ebp)
   1285a:	e8 c5 fd ff ff       	call   12624 <kernel_strlen>
   1285f:	83 c4 10             	add    $0x10,%esp
   12862:	01 45 f0             	add    %eax,-0x10(%ebp)
   12865:	e9 9d 00 00 00       	jmp    12907 <kernel_vsprintf+0x176>
            } else if (ch == 'x' || ch == 'X') {
   1286a:	80 7d e7 78          	cmpb   $0x78,-0x19(%ebp)
   1286e:	74 06                	je     12876 <kernel_vsprintf+0xe5>
   12870:	80 7d e7 58          	cmpb   $0x58,-0x19(%ebp)
   12874:	75 34                	jne    128aa <kernel_vsprintf+0x119>
                const int num = va_arg(args, int);
   12876:	8b 45 10             	mov    0x10(%ebp),%eax
   12879:	8d 50 04             	lea    0x4(%eax),%edx
   1287c:	89 55 10             	mov    %edx,0x10(%ebp)
   1287f:	8b 00                	mov    (%eax),%eax
   12881:	89 45 dc             	mov    %eax,-0x24(%ebp)
                kernel_itoa(curr, num, 16);
   12884:	83 ec 04             	sub    $0x4,%esp
   12887:	6a 10                	push   $0x10
   12889:	ff 75 dc             	push   -0x24(%ebp)
   1288c:	ff 75 f0             	push   -0x10(%ebp)
   1288f:	e8 9a 00 00 00       	call   1292e <kernel_itoa>
   12894:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr); 
   12897:	83 ec 0c             	sub    $0xc,%esp
   1289a:	ff 75 f0             	push   -0x10(%ebp)
   1289d:	e8 82 fd ff ff       	call   12624 <kernel_strlen>
   128a2:	83 c4 10             	add    $0x10,%esp
   128a5:	01 45 f0             	add    %eax,-0x10(%ebp)
            } else if (ch == 'x' || ch == 'X') {
   128a8:	eb 5d                	jmp    12907 <kernel_vsprintf+0x176>
            } else if (ch == 'b') {
   128aa:	80 7d e7 62          	cmpb   $0x62,-0x19(%ebp)
   128ae:	75 34                	jne    128e4 <kernel_vsprintf+0x153>
                 const int num = va_arg(args, int);
   128b0:	8b 45 10             	mov    0x10(%ebp),%eax
   128b3:	8d 50 04             	lea    0x4(%eax),%edx
   128b6:	89 55 10             	mov    %edx,0x10(%ebp)
   128b9:	8b 00                	mov    (%eax),%eax
   128bb:	89 45 e0             	mov    %eax,-0x20(%ebp)
                kernel_itoa(curr, num, 2);
   128be:	83 ec 04             	sub    $0x4,%esp
   128c1:	6a 02                	push   $0x2
   128c3:	ff 75 e0             	push   -0x20(%ebp)
   128c6:	ff 75 f0             	push   -0x10(%ebp)
   128c9:	e8 60 00 00 00       	call   1292e <kernel_itoa>
   128ce:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr); 
   128d1:	83 ec 0c             	sub    $0xc,%esp
   128d4:	ff 75 f0             	push   -0x10(%ebp)
   128d7:	e8 48 fd ff ff       	call   12624 <kernel_strlen>
   128dc:	83 c4 10             	add    $0x10,%esp
   128df:	01 45 f0             	add    %eax,-0x10(%ebp)
   128e2:	eb 23                	jmp    12907 <kernel_vsprintf+0x176>
            } else if (ch == 'c') {
   128e4:	80 7d e7 63          	cmpb   $0x63,-0x19(%ebp)
   128e8:	75 1d                	jne    12907 <kernel_vsprintf+0x176>
                char c = va_arg(args, int);
   128ea:	8b 45 10             	mov    0x10(%ebp),%eax
   128ed:	8d 50 04             	lea    0x4(%eax),%edx
   128f0:	89 55 10             	mov    %edx,0x10(%ebp)
   128f3:	8b 00                	mov    (%eax),%eax
   128f5:	88 45 e6             	mov    %al,-0x1a(%ebp)
                *(curr++) = c;
   128f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   128fb:	8d 50 01             	lea    0x1(%eax),%edx
   128fe:	89 55 f0             	mov    %edx,-0x10(%ebp)
   12901:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   12905:	88 10                	mov    %dl,(%eax)
            }
            state = NORMAL;
   12907:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            break;
   1290e:	eb 01                	jmp    12911 <kernel_vsprintf+0x180>
        default:
            break;
   12910:	90                   	nop
    while ((ch = *(formate++)) != '\0') {
   12911:	8b 45 0c             	mov    0xc(%ebp),%eax
   12914:	8d 50 01             	lea    0x1(%eax),%edx
   12917:	89 55 0c             	mov    %edx,0xc(%ebp)
   1291a:	0f b6 00             	movzbl (%eax),%eax
   1291d:	88 45 e7             	mov    %al,-0x19(%ebp)
   12920:	80 7d e7 00          	cmpb   $0x0,-0x19(%ebp)
   12924:	0f 85 7f fe ff ff    	jne    127a9 <kernel_vsprintf+0x18>
        }
    }
    

}
   1292a:	90                   	nop
   1292b:	90                   	nop
   1292c:	c9                   	leave  
   1292d:	c3                   	ret    

0001292e <kernel_itoa>:
 * 
 * @param buf 缓冲区
 * @param num 整数
 * @param base 转换的进制规则
 */
void kernel_itoa(char *buf, int num, int base) {
   1292e:	55                   	push   %ebp
   1292f:	89 e5                	mov    %esp,%ebp
   12931:	81 ec 90 00 00 00    	sub    $0x90,%esp
    char * p = buf;
   12937:	8b 45 08             	mov    0x8(%ebp),%eax
   1293a:	89 45 fc             	mov    %eax,-0x4(%ebp)

    if (base != 2 && base != 8 && base != 10 && base != 16) {
   1293d:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   12941:	74 1d                	je     12960 <kernel_itoa+0x32>
   12943:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   12947:	74 17                	je     12960 <kernel_itoa+0x32>
   12949:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   1294d:	74 11                	je     12960 <kernel_itoa+0x32>
   1294f:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   12953:	74 0b                	je     12960 <kernel_itoa+0x32>
        *buf = '\0';
   12955:	8b 45 08             	mov    0x8(%ebp),%eax
   12958:	c6 00 00             	movb   $0x0,(%eax)
        return;
   1295b:	e9 a2 00 00 00       	jmp    12a02 <kernel_itoa+0xd4>
    }

    if(num < 0)  {
   12960:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12964:	79 11                	jns    12977 <kernel_itoa+0x49>
        *(p++) = '-';
   12966:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12969:	8d 50 01             	lea    0x1(%eax),%edx
   1296c:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1296f:	c6 00 2d             	movb   $0x2d,(%eax)
        num = -num;
   12972:	f7 5d 0c             	negl   0xc(%ebp)
   12975:	eb 1a                	jmp    12991 <kernel_itoa+0x63>
    } else if (num == 0) {
   12977:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1297b:	75 14                	jne    12991 <kernel_itoa+0x63>
        *(p++) = '0';
   1297d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12980:	8d 50 01             	lea    0x1(%eax),%edx
   12983:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12986:	c6 00 30             	movb   $0x30,(%eax)
        *p = '\0';
   12989:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1298c:	c6 00 00             	movb   $0x0,(%eax)
        return;
   1298f:	eb 71                	jmp    12a02 <kernel_itoa+0xd4>
    }
    

    static const char *num_to_char = {"0123456789abcdef"};
    char arr[128];
    int len = 0;
   12991:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (num > 0) {
   12998:	eb 2e                	jmp    129c8 <kernel_itoa+0x9a>
        arr[len++] = num_to_char[num % base];
   1299a:	8b 0d 10 3b 01 00    	mov    0x13b10,%ecx
   129a0:	8b 45 0c             	mov    0xc(%ebp),%eax
   129a3:	99                   	cltd   
   129a4:	f7 7d 10             	idivl  0x10(%ebp)
   129a7:	89 d0                	mov    %edx,%eax
   129a9:	01 c1                	add    %eax,%ecx
   129ab:	8b 45 f8             	mov    -0x8(%ebp),%eax
   129ae:	8d 50 01             	lea    0x1(%eax),%edx
   129b1:	89 55 f8             	mov    %edx,-0x8(%ebp)
   129b4:	0f b6 11             	movzbl (%ecx),%edx
   129b7:	88 94 05 74 ff ff ff 	mov    %dl,-0x8c(%ebp,%eax,1)
        num /= base;
   129be:	8b 45 0c             	mov    0xc(%ebp),%eax
   129c1:	99                   	cltd   
   129c2:	f7 7d 10             	idivl  0x10(%ebp)
   129c5:	89 45 0c             	mov    %eax,0xc(%ebp)
    while (num > 0) {
   129c8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   129cc:	7f cc                	jg     1299a <kernel_itoa+0x6c>
    }

    for (int i = len - 1; i >= 0; --i) {
   129ce:	8b 45 f8             	mov    -0x8(%ebp),%eax
   129d1:	83 e8 01             	sub    $0x1,%eax
   129d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
   129d7:	eb 1d                	jmp    129f6 <kernel_itoa+0xc8>
            *(p++) = arr[i];
   129d9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   129dc:	8d 50 01             	lea    0x1(%eax),%edx
   129df:	89 55 fc             	mov    %edx,-0x4(%ebp)
   129e2:	8d 8d 74 ff ff ff    	lea    -0x8c(%ebp),%ecx
   129e8:	8b 55 f4             	mov    -0xc(%ebp),%edx
   129eb:	01 ca                	add    %ecx,%edx
   129ed:	0f b6 12             	movzbl (%edx),%edx
   129f0:	88 10                	mov    %dl,(%eax)
    for (int i = len - 1; i >= 0; --i) {
   129f2:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
   129f6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   129fa:	79 dd                	jns    129d9 <kernel_itoa+0xab>
    }
    *p = '\0';
   129fc:	8b 45 fc             	mov    -0x4(%ebp),%eax
   129ff:	c6 00 00             	movb   $0x0,(%eax)
   12a02:	c9                   	leave  
   12a03:	c3                   	ret    

00012a04 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   12a04:	55                   	push   %ebp
   12a05:	89 e5                	mov    %esp,%ebp
   12a07:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   12a0a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12a0e:	75 19                	jne    12a29 <list_is_empty+0x25>
   12a10:	68 8c 39 01 00       	push   $0x1398c
   12a15:	68 70 3a 01 00       	push   $0x13a70
   12a1a:	6a 38                	push   $0x38
   12a1c:	68 a0 39 01 00       	push   $0x139a0
   12a21:	e8 80 f7 ff ff       	call   121a6 <pannic>
   12a26:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   12a29:	8b 45 08             	mov    0x8(%ebp),%eax
   12a2c:	8b 40 08             	mov    0x8(%eax),%eax
   12a2f:	85 c0                	test   %eax,%eax
   12a31:	0f 94 c0             	sete   %al
   12a34:	0f b6 c0             	movzbl %al,%eax
}
   12a37:	c9                   	leave  
   12a38:	c3                   	ret    

00012a39 <list_get_size>:
static inline int list_get_size(list_t *list) {
   12a39:	55                   	push   %ebp
   12a3a:	89 e5                	mov    %esp,%ebp
   12a3c:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   12a3f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12a43:	75 19                	jne    12a5e <list_get_size+0x25>
   12a45:	68 8c 39 01 00       	push   $0x1398c
   12a4a:	68 a8 3a 01 00       	push   $0x13aa8
   12a4f:	6a 3e                	push   $0x3e
   12a51:	68 a0 39 01 00       	push   $0x139a0
   12a56:	e8 4b f7 ff ff       	call   121a6 <pannic>
   12a5b:	83 c4 10             	add    $0x10,%esp
    return list->size;
   12a5e:	8b 45 08             	mov    0x8(%ebp),%eax
   12a61:	8b 40 08             	mov    0x8(%eax),%eax
}
   12a64:	c9                   	leave  
   12a65:	c3                   	ret    

00012a66 <list_insert_first>:
 * 
 */

#include "tools/list.h"

void list_insert_first(list_t *list, list_node_t *node) {
   12a66:	55                   	push   %ebp
   12a67:	89 e5                	mov    %esp,%ebp
   12a69:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   12a6c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12a70:	74 06                	je     12a78 <list_insert_first+0x12>
   12a72:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12a76:	75 19                	jne    12a91 <list_insert_first+0x2b>
   12a78:	68 e0 39 01 00       	push   $0x139e0
   12a7d:	68 5c 3a 01 00       	push   $0x13a5c
   12a82:	6a 0f                	push   $0xf
   12a84:	68 10 3a 01 00       	push   $0x13a10
   12a89:	e8 18 f7 ff ff       	call   121a6 <pannic>
   12a8e:	83 c4 10             	add    $0x10,%esp

    node->next = list->first;
   12a91:	8b 45 08             	mov    0x8(%ebp),%eax
   12a94:	8b 10                	mov    (%eax),%edx
   12a96:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a99:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   12a9c:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a9f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   12aa5:	83 ec 0c             	sub    $0xc,%esp
   12aa8:	ff 75 08             	push   0x8(%ebp)
   12aab:	e8 54 ff ff ff       	call   12a04 <list_is_empty>
   12ab0:	83 c4 10             	add    $0x10,%esp
   12ab3:	85 c0                	test   %eax,%eax
   12ab5:	74 16                	je     12acd <list_insert_first+0x67>
        list->first = list->last = node;
   12ab7:	8b 45 08             	mov    0x8(%ebp),%eax
   12aba:	8b 55 0c             	mov    0xc(%ebp),%edx
   12abd:	89 50 04             	mov    %edx,0x4(%eax)
   12ac0:	8b 45 08             	mov    0x8(%ebp),%eax
   12ac3:	8b 50 04             	mov    0x4(%eax),%edx
   12ac6:	8b 45 08             	mov    0x8(%ebp),%eax
   12ac9:	89 10                	mov    %edx,(%eax)
   12acb:	eb 12                	jmp    12adf <list_insert_first+0x79>
    } else {
        list->first->pre = node;
   12acd:	8b 45 08             	mov    0x8(%ebp),%eax
   12ad0:	8b 00                	mov    (%eax),%eax
   12ad2:	8b 55 0c             	mov    0xc(%ebp),%edx
   12ad5:	89 10                	mov    %edx,(%eax)
        list->first = node;
   12ad7:	8b 45 08             	mov    0x8(%ebp),%eax
   12ada:	8b 55 0c             	mov    0xc(%ebp),%edx
   12add:	89 10                	mov    %edx,(%eax)
    }

    list->size++;
   12adf:	8b 45 08             	mov    0x8(%ebp),%eax
   12ae2:	8b 40 08             	mov    0x8(%eax),%eax
   12ae5:	8d 50 01             	lea    0x1(%eax),%edx
   12ae8:	8b 45 08             	mov    0x8(%ebp),%eax
   12aeb:	89 50 08             	mov    %edx,0x8(%eax)
}
   12aee:	90                   	nop
   12aef:	c9                   	leave  
   12af0:	c3                   	ret    

00012af1 <list_insert_last>:

void list_insert_last(list_t *list, list_node_t *node) {
   12af1:	55                   	push   %ebp
   12af2:	89 e5                	mov    %esp,%ebp
   12af4:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   12af7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12afb:	74 06                	je     12b03 <list_insert_last+0x12>
   12afd:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12b01:	75 19                	jne    12b1c <list_insert_last+0x2b>
   12b03:	68 e0 39 01 00       	push   $0x139e0
   12b08:	68 80 3a 01 00       	push   $0x13a80
   12b0d:	6a 1f                	push   $0x1f
   12b0f:	68 10 3a 01 00       	push   $0x13a10
   12b14:	e8 8d f6 ff ff       	call   121a6 <pannic>
   12b19:	83 c4 10             	add    $0x10,%esp

    node->pre = list->last;
   12b1c:	8b 45 08             	mov    0x8(%ebp),%eax
   12b1f:	8b 50 04             	mov    0x4(%eax),%edx
   12b22:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b25:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   12b27:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b2a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)


    if (list_is_empty(list)) {
   12b31:	83 ec 0c             	sub    $0xc,%esp
   12b34:	ff 75 08             	push   0x8(%ebp)
   12b37:	e8 c8 fe ff ff       	call   12a04 <list_is_empty>
   12b3c:	83 c4 10             	add    $0x10,%esp
   12b3f:	85 c0                	test   %eax,%eax
   12b41:	74 16                	je     12b59 <list_insert_last+0x68>
        list->first = list->last = node;
   12b43:	8b 45 08             	mov    0x8(%ebp),%eax
   12b46:	8b 55 0c             	mov    0xc(%ebp),%edx
   12b49:	89 50 04             	mov    %edx,0x4(%eax)
   12b4c:	8b 45 08             	mov    0x8(%ebp),%eax
   12b4f:	8b 50 04             	mov    0x4(%eax),%edx
   12b52:	8b 45 08             	mov    0x8(%ebp),%eax
   12b55:	89 10                	mov    %edx,(%eax)
   12b57:	eb 15                	jmp    12b6e <list_insert_last+0x7d>
    } else {
        list->last->next = node;
   12b59:	8b 45 08             	mov    0x8(%ebp),%eax
   12b5c:	8b 40 04             	mov    0x4(%eax),%eax
   12b5f:	8b 55 0c             	mov    0xc(%ebp),%edx
   12b62:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   12b65:	8b 45 08             	mov    0x8(%ebp),%eax
   12b68:	8b 55 0c             	mov    0xc(%ebp),%edx
   12b6b:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->size++;
   12b6e:	8b 45 08             	mov    0x8(%ebp),%eax
   12b71:	8b 40 08             	mov    0x8(%eax),%eax
   12b74:	8d 50 01             	lea    0x1(%eax),%edx
   12b77:	8b 45 08             	mov    0x8(%ebp),%eax
   12b7a:	89 50 08             	mov    %edx,0x8(%eax)

}
   12b7d:	90                   	nop
   12b7e:	c9                   	leave  
   12b7f:	c3                   	ret    

00012b80 <list_remove_first>:

list_node_t* list_remove_first(list_t *list){
   12b80:	55                   	push   %ebp
   12b81:	89 e5                	mov    %esp,%ebp
   12b83:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   12b86:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12b8a:	75 19                	jne    12ba5 <list_remove_first+0x25>
   12b8c:	68 46 3a 01 00       	push   $0x13a46
   12b91:	68 94 3a 01 00       	push   $0x13a94
   12b96:	6a 31                	push   $0x31
   12b98:	68 10 3a 01 00       	push   $0x13a10
   12b9d:	e8 04 f6 ff ff       	call   121a6 <pannic>
   12ba2:	83 c4 10             	add    $0x10,%esp
    if (list_is_empty(list)) {
   12ba5:	83 ec 0c             	sub    $0xc,%esp
   12ba8:	ff 75 08             	push   0x8(%ebp)
   12bab:	e8 54 fe ff ff       	call   12a04 <list_is_empty>
   12bb0:	83 c4 10             	add    $0x10,%esp
   12bb3:	85 c0                	test   %eax,%eax
   12bb5:	74 07                	je     12bbe <list_remove_first+0x3e>
        return (list_node_t*)0;
   12bb7:	b8 00 00 00 00       	mov    $0x0,%eax
   12bbc:	eb 71                	jmp    12c2f <list_remove_first+0xaf>
    }

    list_node_t *ret = list->first;
   12bbe:	8b 45 08             	mov    0x8(%ebp),%eax
   12bc1:	8b 00                	mov    (%eax),%eax
   12bc3:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   12bc6:	83 ec 0c             	sub    $0xc,%esp
   12bc9:	ff 75 08             	push   0x8(%ebp)
   12bcc:	e8 68 fe ff ff       	call   12a39 <list_get_size>
   12bd1:	83 c4 10             	add    $0x10,%esp
   12bd4:	83 f8 01             	cmp    $0x1,%eax
   12bd7:	75 17                	jne    12bf0 <list_remove_first+0x70>
        list->first = list->last = (list_node_t*)0;
   12bd9:	8b 45 08             	mov    0x8(%ebp),%eax
   12bdc:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12be3:	8b 45 08             	mov    0x8(%ebp),%eax
   12be6:	8b 50 04             	mov    0x4(%eax),%edx
   12be9:	8b 45 08             	mov    0x8(%ebp),%eax
   12bec:	89 10                	mov    %edx,(%eax)
   12bee:	eb 18                	jmp    12c08 <list_remove_first+0x88>
    } else {
        list->first = list->first->next;
   12bf0:	8b 45 08             	mov    0x8(%ebp),%eax
   12bf3:	8b 00                	mov    (%eax),%eax
   12bf5:	8b 50 04             	mov    0x4(%eax),%edx
   12bf8:	8b 45 08             	mov    0x8(%ebp),%eax
   12bfb:	89 10                	mov    %edx,(%eax)
        list->first->pre = (list_node_t*)0;
   12bfd:	8b 45 08             	mov    0x8(%ebp),%eax
   12c00:	8b 00                	mov    (%eax),%eax
   12c02:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    list->size--;
   12c08:	8b 45 08             	mov    0x8(%ebp),%eax
   12c0b:	8b 40 08             	mov    0x8(%eax),%eax
   12c0e:	8d 50 ff             	lea    -0x1(%eax),%edx
   12c11:	8b 45 08             	mov    0x8(%ebp),%eax
   12c14:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   12c17:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12c1a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12c21:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12c24:	8b 50 04             	mov    0x4(%eax),%edx
   12c27:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12c2a:	89 10                	mov    %edx,(%eax)
    return ret;
   12c2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
 }
   12c2f:	c9                   	leave  
   12c30:	c3                   	ret    

00012c31 <list_remove_last>:

list_node_t* list_remove_last(list_t *list) {
   12c31:	55                   	push   %ebp
   12c32:	89 e5                	mov    %esp,%ebp
   12c34:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   12c37:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12c3b:	75 19                	jne    12c56 <list_remove_last+0x25>
   12c3d:	68 46 3a 01 00       	push   $0x13a46
   12c42:	68 b8 3a 01 00       	push   $0x13ab8
   12c47:	6a 46                	push   $0x46
   12c49:	68 10 3a 01 00       	push   $0x13a10
   12c4e:	e8 53 f5 ff ff       	call   121a6 <pannic>
   12c53:	83 c4 10             	add    $0x10,%esp
     if (list_is_empty(list)) {
   12c56:	83 ec 0c             	sub    $0xc,%esp
   12c59:	ff 75 08             	push   0x8(%ebp)
   12c5c:	e8 a3 fd ff ff       	call   12a04 <list_is_empty>
   12c61:	83 c4 10             	add    $0x10,%esp
   12c64:	85 c0                	test   %eax,%eax
   12c66:	74 07                	je     12c6f <list_remove_last+0x3e>
        return (list_node_t*)0;
   12c68:	b8 00 00 00 00       	mov    $0x0,%eax
   12c6d:	eb 75                	jmp    12ce4 <list_remove_last+0xb3>
    }

    list_node_t *ret = list->last;
   12c6f:	8b 45 08             	mov    0x8(%ebp),%eax
   12c72:	8b 40 04             	mov    0x4(%eax),%eax
   12c75:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   12c78:	83 ec 0c             	sub    $0xc,%esp
   12c7b:	ff 75 08             	push   0x8(%ebp)
   12c7e:	e8 b6 fd ff ff       	call   12a39 <list_get_size>
   12c83:	83 c4 10             	add    $0x10,%esp
   12c86:	83 f8 01             	cmp    $0x1,%eax
   12c89:	75 17                	jne    12ca2 <list_remove_last+0x71>
        list->first = list->last = (list_node_t*)0;
   12c8b:	8b 45 08             	mov    0x8(%ebp),%eax
   12c8e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12c95:	8b 45 08             	mov    0x8(%ebp),%eax
   12c98:	8b 50 04             	mov    0x4(%eax),%edx
   12c9b:	8b 45 08             	mov    0x8(%ebp),%eax
   12c9e:	89 10                	mov    %edx,(%eax)
   12ca0:	eb 1b                	jmp    12cbd <list_remove_last+0x8c>
    } else {
        list->last = list->last->pre;
   12ca2:	8b 45 08             	mov    0x8(%ebp),%eax
   12ca5:	8b 40 04             	mov    0x4(%eax),%eax
   12ca8:	8b 10                	mov    (%eax),%edx
   12caa:	8b 45 08             	mov    0x8(%ebp),%eax
   12cad:	89 50 04             	mov    %edx,0x4(%eax)
        list->last->next = (list_node_t*)0;
   12cb0:	8b 45 08             	mov    0x8(%ebp),%eax
   12cb3:	8b 40 04             	mov    0x4(%eax),%eax
   12cb6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    }

    list->size--;
   12cbd:	8b 45 08             	mov    0x8(%ebp),%eax
   12cc0:	8b 40 08             	mov    0x8(%eax),%eax
   12cc3:	8d 50 ff             	lea    -0x1(%eax),%edx
   12cc6:	8b 45 08             	mov    0x8(%ebp),%eax
   12cc9:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   12ccc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12ccf:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12cd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12cd9:	8b 50 04             	mov    0x4(%eax),%edx
   12cdc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12cdf:	89 10                	mov    %edx,(%eax)
    return ret;
   12ce1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   12ce4:	c9                   	leave  
   12ce5:	c3                   	ret    

00012ce6 <list_remove>:

list_node_t* list_remove(list_t *list, list_node_t *node) {
   12ce6:	55                   	push   %ebp
   12ce7:	89 e5                	mov    %esp,%ebp
   12ce9:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   12cec:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12cf0:	74 06                	je     12cf8 <list_remove+0x12>
   12cf2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12cf6:	75 19                	jne    12d11 <list_remove+0x2b>
   12cf8:	68 e0 39 01 00       	push   $0x139e0
   12cfd:	68 cc 3a 01 00       	push   $0x13acc
   12d02:	6a 5b                	push   $0x5b
   12d04:	68 10 3a 01 00       	push   $0x13a10
   12d09:	e8 98 f4 ff ff       	call   121a6 <pannic>
   12d0e:	83 c4 10             	add    $0x10,%esp

    if (list_is_empty(list)) {
   12d11:	83 ec 0c             	sub    $0xc,%esp
   12d14:	ff 75 08             	push   0x8(%ebp)
   12d17:	e8 e8 fc ff ff       	call   12a04 <list_is_empty>
   12d1c:	83 c4 10             	add    $0x10,%esp
   12d1f:	85 c0                	test   %eax,%eax
   12d21:	74 0a                	je     12d2d <list_remove+0x47>
        return (list_node_t*)0;
   12d23:	b8 00 00 00 00       	mov    $0x0,%eax
   12d28:	e9 80 00 00 00       	jmp    12dad <list_remove+0xc7>
    }

    if (node == list->first) list->first = node->next;
   12d2d:	8b 45 08             	mov    0x8(%ebp),%eax
   12d30:	8b 00                	mov    (%eax),%eax
   12d32:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12d35:	75 0b                	jne    12d42 <list_remove+0x5c>
   12d37:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d3a:	8b 50 04             	mov    0x4(%eax),%edx
   12d3d:	8b 45 08             	mov    0x8(%ebp),%eax
   12d40:	89 10                	mov    %edx,(%eax)
    if (node == list->last) list->last = node->pre;
   12d42:	8b 45 08             	mov    0x8(%ebp),%eax
   12d45:	8b 40 04             	mov    0x4(%eax),%eax
   12d48:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12d4b:	75 0b                	jne    12d58 <list_remove+0x72>
   12d4d:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d50:	8b 10                	mov    (%eax),%edx
   12d52:	8b 45 08             	mov    0x8(%ebp),%eax
   12d55:	89 50 04             	mov    %edx,0x4(%eax)

    if (node->pre) node->pre->next = node->next;
   12d58:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d5b:	8b 00                	mov    (%eax),%eax
   12d5d:	85 c0                	test   %eax,%eax
   12d5f:	74 0e                	je     12d6f <list_remove+0x89>
   12d61:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d64:	8b 00                	mov    (%eax),%eax
   12d66:	8b 55 0c             	mov    0xc(%ebp),%edx
   12d69:	8b 52 04             	mov    0x4(%edx),%edx
   12d6c:	89 50 04             	mov    %edx,0x4(%eax)
    if (node->next) node->next->pre = node->pre;
   12d6f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d72:	8b 40 04             	mov    0x4(%eax),%eax
   12d75:	85 c0                	test   %eax,%eax
   12d77:	74 0d                	je     12d86 <list_remove+0xa0>
   12d79:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d7c:	8b 40 04             	mov    0x4(%eax),%eax
   12d7f:	8b 55 0c             	mov    0xc(%ebp),%edx
   12d82:	8b 12                	mov    (%edx),%edx
   12d84:	89 10                	mov    %edx,(%eax)

    node->pre = node->next = (list_node_t*)0;
   12d86:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d89:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12d90:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d93:	8b 50 04             	mov    0x4(%eax),%edx
   12d96:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d99:	89 10                	mov    %edx,(%eax)
    list->size--;
   12d9b:	8b 45 08             	mov    0x8(%ebp),%eax
   12d9e:	8b 40 08             	mov    0x8(%eax),%eax
   12da1:	8d 50 ff             	lea    -0x1(%eax),%edx
   12da4:	8b 45 08             	mov    0x8(%ebp),%eax
   12da7:	89 50 08             	mov    %edx,0x8(%eax)

    return node;
   12daa:	8b 45 0c             	mov    0xc(%ebp),%eax
   12dad:	c9                   	leave  
   12dae:	c3                   	ret    

00012daf <inb>:
static inline uint8_t inb(uint16_t port) {
   12daf:	55                   	push   %ebp
   12db0:	89 e5                	mov    %esp,%ebp
   12db2:	83 ec 14             	sub    $0x14,%esp
   12db5:	8b 45 08             	mov    0x8(%ebp),%eax
   12db8:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   12dbc:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   12dc0:	89 c2                	mov    %eax,%edx
   12dc2:	ec                   	in     (%dx),%al
   12dc3:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   12dc6:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   12dca:	c9                   	leave  
   12dcb:	c3                   	ret    

00012dcc <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   12dcc:	55                   	push   %ebp
   12dcd:	89 e5                	mov    %esp,%ebp
   12dcf:	83 ec 08             	sub    $0x8,%esp
   12dd2:	8b 45 08             	mov    0x8(%ebp),%eax
   12dd5:	8b 55 0c             	mov    0xc(%ebp),%edx
   12dd8:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   12ddc:	89 d0                	mov    %edx,%eax
   12dde:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   12de1:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12de5:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   12de9:	ee                   	out    %al,(%dx)
}
   12dea:	90                   	nop
   12deb:	c9                   	leave  
   12dec:	c3                   	ret    

00012ded <log_init>:

/**
 * @brief  初始化串行端口寄存器COM1
 * 
 */
void log_init(void) {
   12ded:	55                   	push   %ebp
   12dee:	89 e5                	mov    %esp,%ebp
   12df0:	83 ec 08             	sub    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   12df3:	6a 00                	push   $0x0
   12df5:	68 f9 03 00 00       	push   $0x3f9
   12dfa:	e8 cd ff ff ff       	call   12dcc <outb>
   12dff:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   12e02:	68 80 00 00 00       	push   $0x80
   12e07:	68 fb 03 00 00       	push   $0x3fb
   12e0c:	e8 bb ff ff ff       	call   12dcc <outb>
   12e11:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   12e14:	6a 03                	push   $0x3
   12e16:	68 f8 03 00 00       	push   $0x3f8
   12e1b:	e8 ac ff ff ff       	call   12dcc <outb>
   12e20:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   12e23:	6a 00                	push   $0x0
   12e25:	68 f9 03 00 00       	push   $0x3f9
   12e2a:	e8 9d ff ff ff       	call   12dcc <outb>
   12e2f:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   12e32:	6a 03                	push   $0x3
   12e34:	68 fb 03 00 00       	push   $0x3fb
   12e39:	e8 8e ff ff ff       	call   12dcc <outb>
   12e3e:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0xc7);
   12e41:	68 c7 00 00 00       	push   $0xc7
   12e46:	68 fa 03 00 00       	push   $0x3fa
   12e4b:	e8 7c ff ff ff       	call   12dcc <outb>
   12e50:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0f);
   12e53:	6a 0f                	push   $0xf
   12e55:	68 fc 03 00 00       	push   $0x3fc
   12e5a:	e8 6d ff ff ff       	call   12dcc <outb>
   12e5f:	83 c4 08             	add    $0x8,%esp

    //初始化互斥锁
    mutex_init(&mutex);
   12e62:	83 ec 0c             	sub    $0xc,%esp
   12e65:	68 70 0d 03 00       	push   $0x30d70
   12e6a:	e8 22 ec ff ff       	call   11a91 <mutex_init>
   12e6f:	83 c4 10             	add    $0x10,%esp
}
   12e72:	90                   	nop
   12e73:	c9                   	leave  
   12e74:	c3                   	ret    

00012e75 <log_printf>:
 * @brief  格式化输出到串口
 * 
 * @param formate 
 * @param ... 
 */
void log_printf(const char *formate, ...) {
   12e75:	55                   	push   %ebp
   12e76:	89 e5                	mov    %esp,%ebp
   12e78:	81 ec 98 00 00 00    	sub    $0x98,%esp
    //1.设置字符缓冲区
    char str_buf[128];
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   12e7e:	83 ec 04             	sub    $0x4,%esp
   12e81:	68 80 00 00 00       	push   $0x80
   12e86:	6a 00                	push   $0x0
   12e88:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12e8e:	50                   	push   %eax
   12e8f:	e8 14 f8 ff ff       	call   126a8 <kernel_memset>
   12e94:	83 c4 10             	add    $0x10,%esp
    
    //2.获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   12e97:	8d 45 0c             	lea    0xc(%ebp),%eax
   12e9a:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, formate, args);
   12ea0:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   12ea6:	83 ec 04             	sub    $0x4,%esp
   12ea9:	50                   	push   %eax
   12eaa:	ff 75 08             	push   0x8(%ebp)
   12ead:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12eb3:	50                   	push   %eax
   12eb4:	e8 d8 f8 ff ff       	call   12791 <kernel_vsprintf>
   12eb9:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    const char *p = str_buf;
   12ebc:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12ec2:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将以下资源放入临界资源包含区，防止在运行时发生进程切换（cpu关中断）
    mutex_lock(&mutex); //TODO:加锁
   12ec5:	83 ec 0c             	sub    $0xc,%esp
   12ec8:	68 70 0d 03 00       	push   $0x30d70
   12ecd:	e8 0c ec ff ff       	call   11ade <mutex_lock>
   12ed2:	83 c4 10             	add    $0x10,%esp

    //3.将字符串输出到串口
    while (*p != '\0') {
   12ed5:	eb 57                	jmp    12f2e <log_printf+0xb9>
        //4.判断串口是否正在忙碌，是则阻塞等待
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0);
   12ed7:	90                   	nop
   12ed8:	83 ec 0c             	sub    $0xc,%esp
   12edb:	68 fd 03 00 00       	push   $0x3fd
   12ee0:	e8 ca fe ff ff       	call   12daf <inb>
   12ee5:	83 c4 10             	add    $0x10,%esp
   12ee8:	0f b6 c0             	movzbl %al,%eax
   12eeb:	83 e0 40             	and    $0x40,%eax
   12eee:	85 c0                	test   %eax,%eax
   12ef0:	74 e6                	je     12ed8 <log_printf+0x63>

        if (*p == '\n') outb(COM1_PORT, '\r');
   12ef2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12ef5:	0f b6 00             	movzbl (%eax),%eax
   12ef8:	3c 0a                	cmp    $0xa,%al
   12efa:	75 12                	jne    12f0e <log_printf+0x99>
   12efc:	83 ec 08             	sub    $0x8,%esp
   12eff:	6a 0d                	push   $0xd
   12f01:	68 f8 03 00 00       	push   $0x3f8
   12f06:	e8 c1 fe ff ff       	call   12dcc <outb>
   12f0b:	83 c4 10             	add    $0x10,%esp
        
        outb(COM1_PORT, *(p++));
   12f0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12f11:	8d 50 01             	lea    0x1(%eax),%edx
   12f14:	89 55 f4             	mov    %edx,-0xc(%ebp)
   12f17:	0f b6 00             	movzbl (%eax),%eax
   12f1a:	0f b6 c0             	movzbl %al,%eax
   12f1d:	83 ec 08             	sub    $0x8,%esp
   12f20:	50                   	push   %eax
   12f21:	68 f8 03 00 00       	push   $0x3f8
   12f26:	e8 a1 fe ff ff       	call   12dcc <outb>
   12f2b:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0') {
   12f2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12f31:	0f b6 00             	movzbl (%eax),%eax
   12f34:	84 c0                	test   %al,%al
   12f36:	75 9f                	jne    12ed7 <log_printf+0x62>
    }
    
    //5.换行
    outb(COM1_PORT, '\r');
   12f38:	83 ec 08             	sub    $0x8,%esp
   12f3b:	6a 0d                	push   $0xd
   12f3d:	68 f8 03 00 00       	push   $0x3f8
   12f42:	e8 85 fe ff ff       	call   12dcc <outb>
   12f47:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   12f4a:	83 ec 08             	sub    $0x8,%esp
   12f4d:	6a 0a                	push   $0xa
   12f4f:	68 f8 03 00 00       	push   $0x3f8
   12f54:	e8 73 fe ff ff       	call   12dcc <outb>
   12f59:	83 c4 10             	add    $0x10,%esp

    //执行完毕，将资源离开临界资源保护区，(cpu开中断)
    mutex_unlock(&mutex); //TODO:解锁
   12f5c:	83 ec 0c             	sub    $0xc,%esp
   12f5f:	68 70 0d 03 00       	push   $0x30d70
   12f64:	e8 06 ec ff ff       	call   11b6f <mutex_unlock>
   12f69:	83 c4 10             	add    $0x10,%esp
   12f6c:	90                   	nop
   12f6d:	c9                   	leave  
   12f6e:	c3                   	ret    
