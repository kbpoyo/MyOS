
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf:     file format elf32-i386
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x0000af5c memsz 0x0000af5c flags r-x
    LOAD off    0x0000c000 vaddr 0x0001b000 paddr 0x0001b000 align 2**12
         filesz 0x00000178 memsz 0x0005e020 flags rw-
    LOAD off    0x0000d000 vaddr 0x80000000 paddr 0x0007a000 align 2**12
         filesz 0x00000396 memsz 0x00000396 flags rwx
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009533  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00001a1c  00019540  00019540  0000a540  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000178  0001b000  0001b000  0000c000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0005d020  0001c000  0001c000  0000c178  2**12
                  ALLOC
  4 .first_task   00000396  80000000  0007a000  0000d000  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  5 .debug_line   00005083  00000000  00000000  0000d396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_line_str 00000bca  00000000  00000000  00012419  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   00011362  00000000  00000000  00012fe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 0000390c  00000000  00000000  00024345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_aranges 000003a0  00000000  00000000  00027c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    0000281e  00000000  00000000  00027ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_rnglists 0000009e  00000000  00000000  0002a816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .comment      0000002b  00000000  00000000  0002a8b4  2**0
                  CONTENTS, READONLY
 13 .debug_frame  00002d7c  00000000  00000000  0002a8e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010012 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
00010301 l     F .text	0000000d down2
0001030e l     F .text	00000017 up2
00010325 l     F .text	0000000c write_cr3
00010331 l     F .text	0000000b pde_index
0001033c l     F .text	00000010 pte_index
0001034c l     F .text	00000027 pde_to_pt_addr
00010373 l     F .text	00000027 pte_to_pg_addr
0001039a l     F .text	0000000f get_pte_privilege
000103a9 l     F .text	00000011 mmu_set_page_dir
0001c000 l     O .bss	00007e28 paddr_alloc
00024000 l     O .bss	00001000 kernel_page_dir
000103ba l     F .text	00000025 page_index
000103df l     F .text	00000056 page_ref_add
00010435 l     F .text	00000068 page_ref_sub
0001049d l     F .text	0000004e get_page_ref
000104eb l     F .text	00000051 clear_page_ref
0001053c l     F .text	00000087 addr_alloc_init
000105c3 l     F .text	00000067 addr_alloc_page
0001062a l     F .text	0000009c addr_free_page
000106c6 l     F .text	00000066 show_mem_info
0001072c l     F .text	00000037 total_mem_size
000196dc l     O .rodata	00000011 __func__.4
0001b000 l     O .data	00000050 kernal_map.3
000196f0 l     O .rodata	0000000c __func__.2
00010e49 l     F .text	00000010 curr_page_dir
000196fc l     O .rodata	00000011 __func__.1
00019710 l     O .rodata	00000009 __func__.0
00000000 l    df *ABS*	00000000 task.c
0001110e l     F .text	0000003d list_node_init
000198d8 l     O .rodata	0000000f __func__.11
0001114b l     F .text	0000002d list_node_next
00019938 l     O .rodata	0000000f __func__.5
00011178 l     F .text	00000047 list_init
000198e8 l     O .rodata	0000000a __func__.10
000111bf l     F .text	00000035 list_is_empty
00019948 l     O .rodata	0000000e __func__.4
000111f4 l     F .text	0000002d list_get_size
00019978 l     O .rodata	0000000e __func__.1
00011221 l     F .text	0000002c list_get_first
00019928 l     O .rodata	0000000f __func__.6
0001124d l     F .text	00000007 hlt
00011254 l     F .text	0000000c write_cr3
00011260 l     F .text	0000001a far_jump
0001127a l     F .text	00000017 write_tr
00011291 l     F .text	00000011 mmu_set_page_dir
000112a2 l     F .text	00000017 up2
00025000 l     O .bss	000005c0 task_manager
000255c0 l     O .bss	00016400 task_table
0003b9c0 l     O .bss	00000014 task_table_lock
00011364 l     F .text	0000001f switch_to_tss
0001139e l     F .text	00000175 tss_init
000198cc l     O .rodata	0000000a __func__.12
00011c50 l     F .text	00000033 free_task
0003b9e0 l     O .bss	00000200 empty_task_stack
00011708 l     F .text	0000000a empty_task
000198f4 l     O .rodata	00000010 __func__.9
00019904 l     O .rodata	0000000f __func__.8
00019914 l     O .rodata	00000011 __func__.7
00019958 l     O .rodata	0000000f __func__.3
00019968 l     O .rodata	00000010 __func__.2
00011be8 l     F .text	00000068 alloc_task
00011ce1 l     F .text	00000059 copy_opened_files
00011f3c l     F .text	00000114 load_phdr
00012050 l     F .text	00000213 load_elf_file
00012263 l     F .text	0000010b copy_args
00019988 l     O .rodata	0000000a __func__.0
00000000 l    df *ABS*	00000000 gate.c
00000000 l    df *ABS*	00000000 gdt.c
00012795 l     F .text	00000028 lgdt
0003bbe0 l     O .bss	00010000 gdt_table
0004bbe0 l     O .bss	00002000 is_alloc
0004dbe0 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 idt.c
000129cb l     F .text	00000007 cli
000129d2 l     F .text	00000007 sti
000129d9 l     F .text	00000007 hlt
000129e0 l     F .text	0000001d inb
000129fd l     F .text	00000021 outb
00012a1e l     F .text	00000028 lidt
00012a46 l     F .text	00000011 read_cr2
00012a57 l     F .text	00000010 read_eflags
00012a67 l     F .text	0000000b write_eflags
0004dc00 l     O .bss	00000800 idt_table
00012a72 l     F .text	0000010f print_exception_fram
00012b81 l     F .text	00000030 exit_excption_handler
00012bb1 l     F .text	00000048 do_default_handler
00012fed l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 mmu.c
00000000 l    df *ABS*	00000000 syscall.c
00019f80 l     O .rodata	00000100 sys_table
00000000 l    df *ABS*	00000000 console.c
00013482 l     F .text	0000001d inb
0001349f l     F .text	00000021 outb
0004e400 l     O .bss	00000340 console_table
0004e740 l     O .bss	00000004 curr_console_index
000134c0 l     F .text	00000074 read_cursor_pos
00013534 l     F .text	000000a6 update_cursor_pos
000135da l     F .text	0000006d erase_rows
00013647 l     F .text	00000094 scroll_up
000136db l     F .text	00000010 move_to_col0
000136eb l     F .text	00000038 move_to_next_line
00013723 l     F .text	00000077 move_forward
0001379a l     F .text	00000095 show_char
0001382f l     F .text	00000078 move_backword
000138a7 l     F .text	0000003a erase_backword
000138e1 l     F .text	00000087 clear_display
00013968 l     F .text	00000051 print_table
00013ac4 l     F .text	000000b2 write_normal
00013b76 l     F .text	0000001e save_cursor
00013b94 l     F .text	0000001e restore_cursor
00013bb2 l     F .text	00000029 clear_esc_param
00013bdb l     F .text	0000007e write_esc
00013c59 l     F .text	0000009a set_font_style
0001a120 l     O .rodata	00000020 color_table.0
00013cf3 l     F .text	0000004f erase_in_display
00013d42 l     F .text	00000022 move_cursor
00013d64 l     F .text	00000039 move_left
00013d9d l     F .text	00000045 move_right
00013de2 l     F .text	00000104 write_esc_square
00000000 l    df *ABS*	00000000 dev.c
0001b050 l     O .data	0000000c dev_des_table
0004e760 l     O .bss	00000c00 dev_table
000140c6 l     F .text	00000052 is_dev_exist
00000000 l    df *ABS*	00000000 disk.c
000143a8 l     F .text	0000001d inb
000143c5 l     F .text	00000021 outb
000143e6 l     F .text	00000021 outw
00014407 l     F .text	0000001f inw
0004f360 l     O .bss	00000250 disk_table
0004f5b0 l     O .bss	00000014 mutex
0004f5c4 l     O .bss	00000010 op_sem
0004f5d4 l     O .bss	00000001 task_on_op
00014426 l     F .text	00000130 disk_send_cmd
00014556 l     F .text	00000051 disk_read_data
000145a7 l     F .text	00000051 disk_write_data
000145f8 l     F .text	0000004f disk_wait_data
00014647 l     F .text	00000115 detect_part_info
0001475c l     F .text	00000129 identify_disk
00014885 l     F .text	000000c8 print_disk_info
00000000 l    df *ABS*	00000000 keyboard.c
00014dfd l     F .text	0000001d inb
0001a2a0 l     O .rodata	00000200 map_table
0004f5d8 l     O .bss	00000004 kbd_state
00014e1a l     F .text	0000001a is_make_code
00014e34 l     F .text	00000015 get_key
00014e49 l     F .text	00000043 do_fx_key
00014e8c l     F .text	0000023e do_normal_key
000150ca l     F .text	0000008e do_e0_key
0004f5dc l     O .bss	00000001 is_inited.1
0004f5e0 l     O .bss	00000004 recv_state.0
00000000 l    df *ABS*	00000000 time.c
00015270 l     F .text	00000021 outb
0004f5e4 l     O .bss	00000004 sys_tick
000152b9 l     F .text	00000062 init_pit
00000000 l    df *ABS*	00000000 tty.c
0004f600 l     O .bss	000022a0 tty_table
000518a0 l     O .bss	00000004 curr_tty_index
00015333 l     F .text	0000004f get_tty
00015382 l     F .text	00000037 tty_fifo_init
00000000 l    df *ABS*	00000000 devfs.c
0001b0e0 l     O .data	0000000c devfs_type_list
00000000 l    df *ABS*	00000000 fatfs.c
00015ac2 l     F .text	00000017 up2
00015ad9 l     F .text	00000087 to_sfn
00015b60 l     F .text	00000086 diritem_init
00015be6 l     F .text	00000029 cluster_is_valid
00015c0f l     F .text	0000005b fat_read_sector
00015c6a l     F .text	0000003e fat_write_sector
00015ca8 l     F .text	000000be cluster_get_next
00015d66 l     F .text	0000012f cluster_set_next
00015ef0 l     F .text	00000125 cluster_alloc_free
00016015 l     F .text	00000154 expand_file
00016169 l     F .text	000000c2 move_file_pos
00016288 l     F .text	00000063 read_from_diritem
000162eb l     F .text	000000b5 diritem_get_name
000163a0 l     F .text	00000036 diritem_name_match
000163d6 l     F .text	000000af write_dir_entry
00016485 l     F .text	00000085 read_dir_entry
00000000 l    df *ABS*	00000000 file.c
000518c0 l     O .bss	00024000 file_table
000758c0 l     O .bss	00000014 file_alloc_mutex
00000000 l    df *ABS*	00000000 fs.c
00017140 l     F .text	0000002d list_node_next
0001a948 l     O .rodata	0000000f __func__.3
0001716d l     F .text	00000047 list_init
0001a964 l     O .rodata	0000000a __func__.1
000171b4 l     F .text	0000002c list_get_first
0001a938 l     O .rodata	0000000f __func__.4
000758e0 l     O .bss	0000000c mounted_list
00075900 l     O .bss	000016f8 fs_table
00076ff8 l     O .bss	0000000c free_list
00077004 l     O .bss	00000004 root_fs
000171e0 l     F .text	0000001d is_fd_bad
000171fd l     F .text	00000021 is_path_valid
00017315 l     F .text	0000002b fs_protect
00017340 l     F .text	0000002b fs_unprotect
0001a958 l     O .rodata	0000000a __func__.2
00017bc1 l     F .text	00000063 mount_list_init
00017c24 l     F .text	00000026 get_fs_op
00017c4a l     F .text	000001b7 mount
0001a970 l     O .rodata	00000008 __func__.0
00000000 l    df *ABS*	00000000 init.c
0001aa14 l     O .rodata	0000000c __func__.1
0001aa20 l     O .rodata	00000013 __func__.0
00000000 l    df *ABS*	00000000 mutex.c
00017f85 l     F .text	00000047 list_init
0001aae0 l     O .rodata	0000000a __func__.1
00017fcc l     F .text	00000035 list_is_empty
0001aaec l     O .rodata	0000000e __func__.0
0001aad4 l     O .rodata	0000000b __func__.2
00000000 l    df *ABS*	00000000 sem.c
000181c4 l     F .text	00000047 list_init
0001aba0 l     O .rodata	0000000a __func__.1
0001820b l     F .text	00000035 list_is_empty
0001abac l     O .rodata	0000000e __func__.0
0001ab94 l     O .rodata	00000009 __func__.2
00000000 l    df *ABS*	00000000 test.c
000183ca l     F .text	00000047 list_init
0001acc0 l     O .rodata	0000000a __func__.3
00018411 l     F .text	0000002d list_get_size
0001accc l     O .rodata	0000000e __func__.2
0001843e l     F .text	0000002c list_get_first
0001acec l     O .rodata	0000000f __func__.0
0001846a l     F .text	0000002d list_get_last
0001acdc l     O .rodata	0000000e __func__.1
00000000 l    df *ABS*	00000000 assert.c
00018772 l     F .text	00000007 hlt
00000000 l    df *ABS*	00000000 bitmap.c
0001adc0 l     O .rodata	0000000c __func__.3
0001adcc l     O .rodata	0000000f __func__.2
0001addc l     O .rodata	0000000f __func__.1
0001adec l     O .rodata	00000013 __func__.0
00000000 l    df *ABS*	00000000 klib.c
0001b174 l     O .data	00000004 num_to_char.0
00000000 l    df *ABS*	00000000 list.c
000190bb l     F .text	00000035 list_is_empty
0001aef4 l     O .rodata	0000000e __func__.5
000190f0 l     F .text	0000002d list_get_size
0001af2c l     O .rodata	0000000e __func__.2
0001aee0 l     O .rodata	00000012 __func__.6
0001af04 l     O .rodata	00000011 __func__.4
0001af18 l     O .rodata	00000012 __func__.3
0001af3c l     O .rodata	00000011 __func__.1
0001af50 l     O .rodata	0000000c __func__.0
00000000 l    df *ABS*	00000000 log.c
00077008 l     O .bss	00000014 mutex
0007701c l     O .bss	00000004 log_dev_id
00000000 l    df *ABS*	00000000 first_task.c
00000000 l    df *ABS*	00000000 lib_syscall.c
0001622b g     F .text	0000005d diritem_get_type
00018859 g     F .text	00000078 bitmap_get_bit
00018c49 g     F .text	0000004f kernel_memcpy
0001771e g     F .text	000000f9 sys_close
00013235 g     F .text	00000098 idt_enable
000119b1 g     F .text	0000000a task_current
000172c5 g     F .text	00000050 path_begin_with
800001df g     F .first_task	0000001b yield
000191a8 g     F .text	0000008f list_insert_last
000112b9 g     F .text	00000030 task_file
00010298 g       .text	00000000 exception_handler_kbd
00010fe8 g     F .text	00000126 sys_sbrk
00011edb g     F .text	00000061 sys_yield
00012d2d g     F .text	0000001c do_handler_segment_not_present
000118ff g     F .text	00000042 task_set_ready
000189d9 g     F .text	00000021 bitmap_is_set
0001336c g     F .text	0000000b idt_enable_global
00018c98 g     F .text	00000041 kernel_memset
0001428d g     F .text	0000004c dev_write
00017689 g     F .text	00000095 sys_lseek
00015158 g     F .text	0000004e kbd_init
00010081 g       .text	00000000 exception_handler_nmi
00010243 g       .text	00000000 exception_handler_virtual_exception
00014df7 g     F .text	00000006 disk_close
000133f3 g     F .text	0000008f do_handler_syscall
00019048 g     F .text	0000002d strings_count
00019466 g     F .text	0000002f log_init
00016e3c g     F .text	000000dd fatfs_readdir
00011d3a g     F .text	000001a1 sys_fork
00017f4d g     F .text	00000038 init_main
000101ee g       .text	00000000 exception_handler_alignment_check
00014dbc g     F .text	0000000a disk_control
000133d9 g     F .text	0000001a sys_print_msg
0001b140 g     O .data	00000034 fatfs_op
00018afb g     F .text	00000047 kernel_strcpy
00013361 g     F .text	0000000b idt_disable_global
0001b000 g       .data	00000000 s_data
80000010 g     F .first_task	000000af first_main
00012faa g     F .text	00000043 idt_install
800001b2 g     F .first_task	0000002d execve
80000154 g     F .first_task	0000001b getpid
0001002a g       .text	00000000 exception_handler_unknown
0001009e g       .text	00000000 exception_handler_breakpoint
00012c85 g     F .text	0000001c do_handler_overflow
00012f1e g     F .text	0000001c do_handler_alignment_check
00017500 g     F .text	000000c5 sys_read
0001721e g     F .text	00000058 path_next_child
00016aa2 g     F .text	0000021d fatfs_write
00013ff6 g     F .text	000000d0 console_select
0001019b g       .text	00000000 exception_handler_general_protection
00012d65 g     F .text	000000bf do_handler_general_protection
00012f8e g     F .text	0000001c do_handler_control_exception
000183a1 g     F .text	00000029 sem_count
00012c15 g     F .text	0000001c do_handler_divider
000188d1 g     F .text	00000108 bitmap_set_bit
00012cf5 g     F .text	0000001c do_handler_double_fault
00016f19 g     F .text	0000000a fatfs_closedir
00012e24 g     F .text	000000de do_handler_page_fault
0001650a g     F .text	00000234 fatfs_mount
800002c9 g     F .first_task	00000021 isatty
000168fc g     F .text	000001a6 fatfs_read
0001012f g       .text	00000000 exception_handler_double_fault
00013377 g     F .text	00000039 pic_send_eoi
000192e8 g     F .text	000000b5 list_remove_last
000118f5 g     F .text	0000000a task_first_task
00010000 g       .text	00000000 s_text
00018282 g     F .text	00000080 sem_wait
00010e27 g     F .text	00000022 memory_alloc_page_for
00010180 g       .text	00000000 exception_handler_stack_segment_fault
80000000 g       .first_task	00000000 first_task_entry
00017817 g     F .text	000000b6 sys_fstat
00014241 g     F .text	0000004c dev_read
00016d40 g     F .text	000000df fatfs_seek
0001287c g     F .text	000000b3 gdt_init
00016cbf g     F .text	00000081 fatfs_close
00012f72 g     F .text	0000001c do_handler_virtual_exception
00015a97 g     F .text	0000000a devfs_stat
000100bb g       .text	00000000 exception_handler_overflow
000102d2 g       .text	00000000 simple_switch
0001673e g     F .text	0000003c fatfs_unmount
00014dc6 g     F .text	00000031 do_handler_primary_disk
8000029c g     F .first_task	0000002d lseek
0001027b g       .text	00000000 exception_handler_time
00012c31 g     F .text	0000001c do_handler_debug
00077020 g     O .bss	00002000 stack
00011c83 g     F .text	00000051 sys_sleep
0001494d g     F .text	000000f9 disk_init
00017e01 g     F .text	00000090 fs_init
00017108 g     F .text	00000038 file_inc_ref
00010e79 g     F .text	00000099 memory_free_page
00018497 g     F .text	000002db list_test
00010260 g       .text	00000000 exception_handler_control_exception
0007a000 g       *ABS*	00000000 s_first_task
0001133c g     F .text	00000028 task_remove_fd
000157d3 g     F .text	0000007a tty_control
000139b9 g     F .text	0000010b console_init
000156b7 g     F .text	0000011c tty_read
00011678 g     F .text	00000090 task_uninit
00010d6f g     F .text	000000b8 memory_alloc_for_page_dir
00015aa1 g     F .text	00000021 devfs_ioctl
00015451 g     F .text	0000008d tty_fifo_get
000100d8 g       .text	00000000 exception_handler_bound_range
00015853 g     F .text	00000066 tty_in
00013080 g     F .text	000001b5 idt_init
00018302 g     F .text	0000009f sem_notify
00010f65 g     F .text	00000083 memory_copy_uvm_data
000142d9 g     F .text	0000004c dev_control
000151a6 g     F .text	000000ca do_handler_kbd
000129a4 g     F .text	00000027 gdt_free
00012cbd g     F .text	0000001c do_handler_invalid_opcode
0001014a g       .text	00000000 exception_handler_invalid_tss
00017a29 g     F .text	00000053 sys_readdir
00012f02 g     F .text	0000001c do_handler_fpu_error
000117ef g     F .text	00000106 task_first_init
00012f3a g     F .text	0000001c do_handler_machine_check
8000024e g     F .first_task	0000002d write
0001736b g     F .text	00000195 sys_open
800002ea g     F .first_task	00000027 fstat
000178cd g     F .text	0000006b sys_isatty
0001911d g     F .text	0000008b list_insert_first
00014118 g     F .text	00000129 dev_open
00017276 g     F .text	0000004f path_to_num
00011b9d g     F .text	0000004b task_set_wakeup
00011983 g     F .text	0000002e task_ready_first
00010047 g       .text	00000000 exception_handler_divider
0001b060 g     O .data	00000028 dev_disk_desc
800000de g     F .first_task	0000004c sys_call
0001097d g     F .text	00000085 memory_creat_uvm
00018b42 g     F .text	00000051 kernel_strncpy
000175c5 g     F .text	000000c4 sys_write
80000375 g     F .first_task	00000021 wait
0007a396 g       *ABS*	00000000 mem_free_start
00017e91 g     F .text	00000058 kernel_init
00018240 g     F .text	00000042 sem_init
00010000 g       .text	00000000 _start
00018d81 g     F .text	0000019d kernel_vsprintf
00019075 g     F .text	00000046 get_file_name
00010112 g       .text	00000000 exception_handler_device_unavailable
000100f5 g       .text	00000000 exception_handler_invalid_opcode
00014325 g     F .text	00000083 dev_close
0007a000 g       .first_task	00000000 e_data
80000221 g     F .first_task	0000002d read
0001804e g     F .text	000000a6 mutex_lock
00017a7c g     F .text	00000050 sys_closedir
00016f23 g     F .text	000000e8 fatfs_unlink
000112e9 g     F .text	00000053 task_alloc_fd
00015a8d g     F .text	0000000a devfs_seek
00010209 g       .text	00000000 exception_handler_machine_check
000155c7 g     F .text	000000f0 tty_write
00012d11 g     F .text	0000001c do_handler_invalid_tss
000153b9 g     F .text	00000098 tty_fifo_put
000102b5 g       .text	00000000 exception_handler_primary_disk
000132cd g     F .text	00000094 idt_disable
0007a396 g       *ABS*	00000000 e_first_task
00011b41 g     F .text	0000005c task_set_sleep
00017938 g     F .text	0000009e sys_dup
00010813 g     F .text	000000b6 memory_creat_map
000158e2 g     F .text	0000001b devfs_mount
00012c4d g     F .text	0000001c do_handler_nmi
000154de g     F .text	000000e9 tty_open
80000197 g     F .first_task	0000001b fork
00018001 g     F .text	0000004d mutex_init
80000311 g     F .first_task	00000021 sbrk
0001b100 g     O .data	00000034 devfs_op
00015903 g     F .text	00000127 devfs_open
00010226 g       .text	00000000 exception_handler_smd_exception
00017acc g     F .text	000000a7 sys_ioctl
00010b8f g     F .text	000000e7 memory_destroy_uvm
000187af g     F .text	00000016 bitmap_byte_count
00012cd9 g     F .text	0000001c do_handler_device_unavailable
000133b0 g     F .text	00000018 idt_enter_protection
00017b73 g     F .text	0000004e sys_unlink
00016e29 g     F .text	00000013 fatfs_opendir
000108c9 g     F .text	000000b4 create_kernal_table
00011a36 g     F .text	0000010b task_slice_end
00010a02 g     F .text	0000018d memory_copy_uvm
0001584d g     F .text	00000006 tty_close
00015a4e g     F .text	00000024 devfs_write
00017ee9 g     F .text	00000064 move_to_first_task
00015a72 g     F .text	0000001b devfs_close
00013ee6 g     F .text	0000010a console_write
80000332 g     F .first_task	00000021 dup
00018cd9 g     F .text	00000084 kernel_memcmp
00012f56 g     F .text	0000001c do_handler_smd_exception
000101b6 g       .text	00000000 exception_handler_page_fault
00012bf9 g     F .text	0000001c do_handler_unknown
00010e59 g     F .text	00000020 memory_alloc_page
000101d1 g       .text	00000000 exception_handler_fpu_error
00011383 g     F .text	0000001b task_switch_from_to
000180f4 g     F .text	000000d0 mutex_unlock
0001700b g     F .text	00000030 file_table_init
000170c6 g     F .text	00000042 file_free
000119bb g     F .text	0000007b task_switch
8000016f g     F .first_task	00000028 print_msg
00018c14 g     F .text	00000035 kernel_strlen
00011941 g     F .text	00000042 task_set_unready
00010064 g       .text	00000000 exception_handler_debug
000127bd g     F .text	000000bf segment_desc_set
00012ca1 g     F .text	0000001c do_handler_bound_range
000102e7 g       .text	00000000 exception_handler_syscall
00014a46 g     F .text	000000ee disk_open
0001677a g     F .text	00000182 fatfs_open
00019237 g     F .text	000000b1 list_remove_first
0001af5c g       .rodata	00000000 e_text
00018b93 g     F .text	00000081 kernel_strncmp
000179d6 g     F .text	00000053 sys_opendir
000187c5 g     F .text	00000094 bitmap_init
00010165 g       .text	00000000 exception_handler_segment_not_present
00016e1f g     F .text	0000000a fatfs_stat
000189fa g     F .text	00000101 bitmap_alloc_nbits
0001703b g     F .text	0000008b file_alloc
00011712 g     F .text	000000dd task_manager_init
00011513 g     F .text	00000036 task_start
00010c76 g     F .text	000000f9 memory_init
0001236e g     F .text	000001af sys_execve
00014c78 g     F .text	00000144 disk_write
0001266c g     F .text	000000e2 sys_wait
0001251d g     F .text	0000014f sys_exit
00018779 g     F .text	00000036 pannic
000158b9 g     F .text	00000029 tty_select
00013ff0 g     F .text	00000006 console_close
00010f12 g     F .text	00000053 memory_get_paddr
00012d49 g     F .text	0000001c do_handler_stack_segment_fault
00012c69 g     F .text	0000001c do_handler_breakpoint
000158fd g     F .text	00000006 devfs_unmount
80000353 g     F .first_task	00000022 _exit
00015a2a g     F .text	00000024 devfs_read
00019495 g     F .text	0000009e log_printf
00011549 g     F .text	0000012f task_init
00014b34 g     F .text	00000144 disk_read
800001fa g     F .first_task	00000027 open
00015e95 g     F .text	0000005b cluster_free_chain
00018d5d g     F .text	00000024 kernel_sprintf
00011cd4 g     F .text	0000000d sys_getpid
0001292f g     F .text	00000075 gdt_alloc_desc
00018f1e g     F .text	0000012a kernel_itoa
0001939d g     F .text	000000c9 list_remove
0001274e g     F .text	00000047 gate_desc_set
8000012a g     F .first_task	0000002a msleep
000133c8 g     F .text	00000011 idt_leave_protection
8000027b g     F .first_task	00000021 close
00010763 g     F .text	000000b0 find_pte
00015291 g     F .text	00000028 do_handler_time
0001531b g     F .text	00000018 time_init
0001b0a0 g     O .data	00000028 dev_tty_desc



Disassembly of section .text:

00010000 <_start>:
*            [&boot_info]
*    esp ->  [返回地址]
*   所以要想访问到&boot_info，则只需从当前esp的位置偏移+4字节即可
*/
_start:
    mov %esp, %ebp      //栈空间最好只用ebp来进行偏移访问
   10000:	89 e5                	mov    %esp,%ebp
    mov 0x4(%ebp), %eax //将&boot_info的值存入eax中
   10002:	8b 45 04             	mov    0x4(%ebp),%eax

    push %eax           //外部函数将参数压入栈中，再进行函数调用
   10005:	50                   	push   %eax
    call kernel_init    //调用内核初始化函数
   10006:	e8 86 7e 00 00       	call   17e91 <kernel_init>

    //完成内核初始化后，进行直接跳转，以替换cs寄存器中临时的内核代码段的选择子为此时内存中真正的内核代码段选择子
    //cs:KERNEL_SELECTOR_CS, ip:gdt_reload
    jmp $KERNEL_SELECTOR_CS, $gdt_reload    
   1000b:	ea 12 00 01 00 08 00 	ljmp   $0x8,$0x10012

00010012 <gdt_reload>:

gdt_reload:
    //替换其他段寄存器中临时的内核数据段的选择子为此时内存中真正的内核数据段的选择子
    mov $KERNEL_SELECTOR_DS, %ax
   10012:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10016:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10018:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001a:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001c:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001e:	8e e8                	mov    %eax,%gs

    //重新指定栈空间位置，不再使用0~0x7c00这部分空间
    //stack段已在下面预留了KERNEL_STACK_SIZE的空间大小，直接将最高地址赋值给esp，esp便可使用这片空间
    mov $(stack + KERNEL_STACK_SIZE), %esp
   10020:	bc 20 90 07 00       	mov    $0x79020,%esp

    //继续初始化内核
    jmp init_main 
   10025:	e9 23 7f 00 00       	jmp    17f4d <init_main>

0001002a <exception_handler_unknown>:
//宏结束标志
.endm

//使用定义的异常宏 ,以下都是不可屏蔽中断，cpu必须处理该中断请求。
//                |异常类型|       |IDT索引| |错误码|
exception_handler unknown,              -1, 0    //未知异常
   1002a:	6a 00                	push   $0x0
   1002c:	6a ff                	push   $0xffffffff
   1002e:	60                   	pusha  
   1002f:	1e                   	push   %ds
   10030:	06                   	push   %es
   10031:	0f a0                	push   %fs
   10033:	0f a8                	push   %gs
   10035:	54                   	push   %esp
   10036:	e8 be 2b 00 00       	call   12bf9 <do_handler_unknown>
   1003b:	5c                   	pop    %esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider,              0,  0    //除0异常
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 bd 2b 00 00       	call   12c15 <do_handler_divider>
   10058:	5c                   	pop    %esp
   10059:	0f a9                	pop    %gs
   1005b:	0f a1                	pop    %fs
   1005d:	07                   	pop    %es
   1005e:	1f                   	pop    %ds
   1005f:	61                   	popa   
   10060:	83 c4 08             	add    $0x8,%esp
   10063:	cf                   	iret   

00010064 <exception_handler_debug>:
exception_handler debug,                1,  0    //debug异常
   10064:	6a 00                	push   $0x0
   10066:	6a 01                	push   $0x1
   10068:	60                   	pusha  
   10069:	1e                   	push   %ds
   1006a:	06                   	push   %es
   1006b:	0f a0                	push   %fs
   1006d:	0f a8                	push   %gs
   1006f:	54                   	push   %esp
   10070:	e8 bc 2b 00 00       	call   12c31 <do_handler_debug>
   10075:	5c                   	pop    %esp
   10076:	0f a9                	pop    %gs
   10078:	0f a1                	pop    %fs
   1007a:	07                   	pop    %es
   1007b:	1f                   	pop    %ds
   1007c:	61                   	popa   
   1007d:	83 c4 08             	add    $0x8,%esp
   10080:	cf                   	iret   

00010081 <exception_handler_nmi>:
exception_handler nmi,                  2,  0
   10081:	6a 00                	push   $0x0
   10083:	6a 02                	push   $0x2
   10085:	60                   	pusha  
   10086:	1e                   	push   %ds
   10087:	06                   	push   %es
   10088:	0f a0                	push   %fs
   1008a:	0f a8                	push   %gs
   1008c:	54                   	push   %esp
   1008d:	e8 bb 2b 00 00       	call   12c4d <do_handler_nmi>
   10092:	5c                   	pop    %esp
   10093:	0f a9                	pop    %gs
   10095:	0f a1                	pop    %fs
   10097:	07                   	pop    %es
   10098:	1f                   	pop    %ds
   10099:	61                   	popa   
   1009a:	83 c4 08             	add    $0x8,%esp
   1009d:	cf                   	iret   

0001009e <exception_handler_breakpoint>:
exception_handler breakpoint,           3,  0
   1009e:	6a 00                	push   $0x0
   100a0:	6a 03                	push   $0x3
   100a2:	60                   	pusha  
   100a3:	1e                   	push   %ds
   100a4:	06                   	push   %es
   100a5:	0f a0                	push   %fs
   100a7:	0f a8                	push   %gs
   100a9:	54                   	push   %esp
   100aa:	e8 ba 2b 00 00       	call   12c69 <do_handler_breakpoint>
   100af:	5c                   	pop    %esp
   100b0:	0f a9                	pop    %gs
   100b2:	0f a1                	pop    %fs
   100b4:	07                   	pop    %es
   100b5:	1f                   	pop    %ds
   100b6:	61                   	popa   
   100b7:	83 c4 08             	add    $0x8,%esp
   100ba:	cf                   	iret   

000100bb <exception_handler_overflow>:
exception_handler overflow,             4,  0
   100bb:	6a 00                	push   $0x0
   100bd:	6a 04                	push   $0x4
   100bf:	60                   	pusha  
   100c0:	1e                   	push   %ds
   100c1:	06                   	push   %es
   100c2:	0f a0                	push   %fs
   100c4:	0f a8                	push   %gs
   100c6:	54                   	push   %esp
   100c7:	e8 b9 2b 00 00       	call   12c85 <do_handler_overflow>
   100cc:	5c                   	pop    %esp
   100cd:	0f a9                	pop    %gs
   100cf:	0f a1                	pop    %fs
   100d1:	07                   	pop    %es
   100d2:	1f                   	pop    %ds
   100d3:	61                   	popa   
   100d4:	83 c4 08             	add    $0x8,%esp
   100d7:	cf                   	iret   

000100d8 <exception_handler_bound_range>:
exception_handler bound_range,          5,  0
   100d8:	6a 00                	push   $0x0
   100da:	6a 05                	push   $0x5
   100dc:	60                   	pusha  
   100dd:	1e                   	push   %ds
   100de:	06                   	push   %es
   100df:	0f a0                	push   %fs
   100e1:	0f a8                	push   %gs
   100e3:	54                   	push   %esp
   100e4:	e8 b8 2b 00 00       	call   12ca1 <do_handler_bound_range>
   100e9:	5c                   	pop    %esp
   100ea:	0f a9                	pop    %gs
   100ec:	0f a1                	pop    %fs
   100ee:	07                   	pop    %es
   100ef:	1f                   	pop    %ds
   100f0:	61                   	popa   
   100f1:	83 c4 08             	add    $0x8,%esp
   100f4:	cf                   	iret   

000100f5 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode,       6,  0
   100f5:	6a 00                	push   $0x0
   100f7:	6a 06                	push   $0x6
   100f9:	60                   	pusha  
   100fa:	1e                   	push   %ds
   100fb:	06                   	push   %es
   100fc:	0f a0                	push   %fs
   100fe:	0f a8                	push   %gs
   10100:	54                   	push   %esp
   10101:	e8 b7 2b 00 00       	call   12cbd <do_handler_invalid_opcode>
   10106:	5c                   	pop    %esp
   10107:	0f a9                	pop    %gs
   10109:	0f a1                	pop    %fs
   1010b:	07                   	pop    %es
   1010c:	1f                   	pop    %ds
   1010d:	61                   	popa   
   1010e:	83 c4 08             	add    $0x8,%esp
   10111:	cf                   	iret   

00010112 <exception_handler_device_unavailable>:
exception_handler device_unavailable,   7,  0
   10112:	6a 00                	push   $0x0
   10114:	6a 07                	push   $0x7
   10116:	60                   	pusha  
   10117:	1e                   	push   %ds
   10118:	06                   	push   %es
   10119:	0f a0                	push   %fs
   1011b:	0f a8                	push   %gs
   1011d:	54                   	push   %esp
   1011e:	e8 b6 2b 00 00       	call   12cd9 <do_handler_device_unavailable>
   10123:	5c                   	pop    %esp
   10124:	0f a9                	pop    %gs
   10126:	0f a1                	pop    %fs
   10128:	07                   	pop    %es
   10129:	1f                   	pop    %ds
   1012a:	61                   	popa   
   1012b:	83 c4 08             	add    $0x8,%esp
   1012e:	cf                   	iret   

0001012f <exception_handler_double_fault>:
exception_handler double_fault,         8,  1
   1012f:	6a 08                	push   $0x8
   10131:	60                   	pusha  
   10132:	1e                   	push   %ds
   10133:	06                   	push   %es
   10134:	0f a0                	push   %fs
   10136:	0f a8                	push   %gs
   10138:	54                   	push   %esp
   10139:	e8 b7 2b 00 00       	call   12cf5 <do_handler_double_fault>
   1013e:	5c                   	pop    %esp
   1013f:	0f a9                	pop    %gs
   10141:	0f a1                	pop    %fs
   10143:	07                   	pop    %es
   10144:	1f                   	pop    %ds
   10145:	61                   	popa   
   10146:	83 c4 08             	add    $0x8,%esp
   10149:	cf                   	iret   

0001014a <exception_handler_invalid_tss>:
exception_handler invalid_tss,          10, 1
   1014a:	6a 0a                	push   $0xa
   1014c:	60                   	pusha  
   1014d:	1e                   	push   %ds
   1014e:	06                   	push   %es
   1014f:	0f a0                	push   %fs
   10151:	0f a8                	push   %gs
   10153:	54                   	push   %esp
   10154:	e8 b8 2b 00 00       	call   12d11 <do_handler_invalid_tss>
   10159:	5c                   	pop    %esp
   1015a:	0f a9                	pop    %gs
   1015c:	0f a1                	pop    %fs
   1015e:	07                   	pop    %es
   1015f:	1f                   	pop    %ds
   10160:	61                   	popa   
   10161:	83 c4 08             	add    $0x8,%esp
   10164:	cf                   	iret   

00010165 <exception_handler_segment_not_present>:
exception_handler segment_not_present,  11, 1
   10165:	6a 0b                	push   $0xb
   10167:	60                   	pusha  
   10168:	1e                   	push   %ds
   10169:	06                   	push   %es
   1016a:	0f a0                	push   %fs
   1016c:	0f a8                	push   %gs
   1016e:	54                   	push   %esp
   1016f:	e8 b9 2b 00 00       	call   12d2d <do_handler_segment_not_present>
   10174:	5c                   	pop    %esp
   10175:	0f a9                	pop    %gs
   10177:	0f a1                	pop    %fs
   10179:	07                   	pop    %es
   1017a:	1f                   	pop    %ds
   1017b:	61                   	popa   
   1017c:	83 c4 08             	add    $0x8,%esp
   1017f:	cf                   	iret   

00010180 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,  12, 1
   10180:	6a 0c                	push   $0xc
   10182:	60                   	pusha  
   10183:	1e                   	push   %ds
   10184:	06                   	push   %es
   10185:	0f a0                	push   %fs
   10187:	0f a8                	push   %gs
   10189:	54                   	push   %esp
   1018a:	e8 ba 2b 00 00       	call   12d49 <do_handler_stack_segment_fault>
   1018f:	5c                   	pop    %esp
   10190:	0f a9                	pop    %gs
   10192:	0f a1                	pop    %fs
   10194:	07                   	pop    %es
   10195:	1f                   	pop    %ds
   10196:	61                   	popa   
   10197:	83 c4 08             	add    $0x8,%esp
   1019a:	cf                   	iret   

0001019b <exception_handler_general_protection>:
exception_handler general_protection,   13, 1
   1019b:	6a 0d                	push   $0xd
   1019d:	60                   	pusha  
   1019e:	1e                   	push   %ds
   1019f:	06                   	push   %es
   101a0:	0f a0                	push   %fs
   101a2:	0f a8                	push   %gs
   101a4:	54                   	push   %esp
   101a5:	e8 bb 2b 00 00       	call   12d65 <do_handler_general_protection>
   101aa:	5c                   	pop    %esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa   
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret   

000101b6 <exception_handler_page_fault>:
exception_handler page_fault,           14, 1
   101b6:	6a 0e                	push   $0xe
   101b8:	60                   	pusha  
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 5f 2c 00 00       	call   12e24 <do_handler_page_fault>
   101c5:	5c                   	pop    %esp
   101c6:	0f a9                	pop    %gs
   101c8:	0f a1                	pop    %fs
   101ca:	07                   	pop    %es
   101cb:	1f                   	pop    %ds
   101cc:	61                   	popa   
   101cd:	83 c4 08             	add    $0x8,%esp
   101d0:	cf                   	iret   

000101d1 <exception_handler_fpu_error>:
exception_handler fpu_error,            16, 0
   101d1:	6a 00                	push   $0x0
   101d3:	6a 10                	push   $0x10
   101d5:	60                   	pusha  
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 20 2d 00 00       	call   12f02 <do_handler_fpu_error>
   101e2:	5c                   	pop    %esp
   101e3:	0f a9                	pop    %gs
   101e5:	0f a1                	pop    %fs
   101e7:	07                   	pop    %es
   101e8:	1f                   	pop    %ds
   101e9:	61                   	popa   
   101ea:	83 c4 08             	add    $0x8,%esp
   101ed:	cf                   	iret   

000101ee <exception_handler_alignment_check>:
exception_handler alignment_check,      17, 1
   101ee:	6a 11                	push   $0x11
   101f0:	60                   	pusha  
   101f1:	1e                   	push   %ds
   101f2:	06                   	push   %es
   101f3:	0f a0                	push   %fs
   101f5:	0f a8                	push   %gs
   101f7:	54                   	push   %esp
   101f8:	e8 21 2d 00 00       	call   12f1e <do_handler_alignment_check>
   101fd:	5c                   	pop    %esp
   101fe:	0f a9                	pop    %gs
   10200:	0f a1                	pop    %fs
   10202:	07                   	pop    %es
   10203:	1f                   	pop    %ds
   10204:	61                   	popa   
   10205:	83 c4 08             	add    $0x8,%esp
   10208:	cf                   	iret   

00010209 <exception_handler_machine_check>:
exception_handler machine_check,        18, 0
   10209:	6a 00                	push   $0x0
   1020b:	6a 12                	push   $0x12
   1020d:	60                   	pusha  
   1020e:	1e                   	push   %ds
   1020f:	06                   	push   %es
   10210:	0f a0                	push   %fs
   10212:	0f a8                	push   %gs
   10214:	54                   	push   %esp
   10215:	e8 20 2d 00 00       	call   12f3a <do_handler_machine_check>
   1021a:	5c                   	pop    %esp
   1021b:	0f a9                	pop    %gs
   1021d:	0f a1                	pop    %fs
   1021f:	07                   	pop    %es
   10220:	1f                   	pop    %ds
   10221:	61                   	popa   
   10222:	83 c4 08             	add    $0x8,%esp
   10225:	cf                   	iret   

00010226 <exception_handler_smd_exception>:
exception_handler smd_exception,        19, 0
   10226:	6a 00                	push   $0x0
   10228:	6a 13                	push   $0x13
   1022a:	60                   	pusha  
   1022b:	1e                   	push   %ds
   1022c:	06                   	push   %es
   1022d:	0f a0                	push   %fs
   1022f:	0f a8                	push   %gs
   10231:	54                   	push   %esp
   10232:	e8 1f 2d 00 00       	call   12f56 <do_handler_smd_exception>
   10237:	5c                   	pop    %esp
   10238:	0f a9                	pop    %gs
   1023a:	0f a1                	pop    %fs
   1023c:	07                   	pop    %es
   1023d:	1f                   	pop    %ds
   1023e:	61                   	popa   
   1023f:	83 c4 08             	add    $0x8,%esp
   10242:	cf                   	iret   

00010243 <exception_handler_virtual_exception>:
exception_handler virtual_exception,    20, 0
   10243:	6a 00                	push   $0x0
   10245:	6a 14                	push   $0x14
   10247:	60                   	pusha  
   10248:	1e                   	push   %ds
   10249:	06                   	push   %es
   1024a:	0f a0                	push   %fs
   1024c:	0f a8                	push   %gs
   1024e:	54                   	push   %esp
   1024f:	e8 1e 2d 00 00       	call   12f72 <do_handler_virtual_exception>
   10254:	5c                   	pop    %esp
   10255:	0f a9                	pop    %gs
   10257:	0f a1                	pop    %fs
   10259:	07                   	pop    %es
   1025a:	1f                   	pop    %ds
   1025b:	61                   	popa   
   1025c:	83 c4 08             	add    $0x8,%esp
   1025f:	cf                   	iret   

00010260 <exception_handler_control_exception>:
exception_handler control_exception,    21, 1
   10260:	6a 15                	push   $0x15
   10262:	60                   	pusha  
   10263:	1e                   	push   %ds
   10264:	06                   	push   %es
   10265:	0f a0                	push   %fs
   10267:	0f a8                	push   %gs
   10269:	54                   	push   %esp
   1026a:	e8 1f 2d 00 00       	call   12f8e <do_handler_control_exception>
   1026f:	5c                   	pop    %esp
   10270:	0f a9                	pop    %gs
   10272:	0f a1                	pop    %fs
   10274:	07                   	pop    %es
   10275:	1f                   	pop    %ds
   10276:	61                   	popa   
   10277:	83 c4 08             	add    $0x8,%esp
   1027a:	cf                   	iret   

0001027b <exception_handler_time>:

//定时器的中断处理函数
exception_handler time,                 0x20, 0 
   1027b:	6a 00                	push   $0x0
   1027d:	6a 20                	push   $0x20
   1027f:	60                   	pusha  
   10280:	1e                   	push   %ds
   10281:	06                   	push   %es
   10282:	0f a0                	push   %fs
   10284:	0f a8                	push   %gs
   10286:	54                   	push   %esp
   10287:	e8 05 50 00 00       	call   15291 <do_handler_time>
   1028c:	5c                   	pop    %esp
   1028d:	0f a9                	pop    %gs
   1028f:	0f a1                	pop    %fs
   10291:	07                   	pop    %es
   10292:	1f                   	pop    %ds
   10293:	61                   	popa   
   10294:	83 c4 08             	add    $0x8,%esp
   10297:	cf                   	iret   

00010298 <exception_handler_kbd>:
//键盘的中断处理函数
exception_handler kbd,                  0x21, 0 
   10298:	6a 00                	push   $0x0
   1029a:	6a 21                	push   $0x21
   1029c:	60                   	pusha  
   1029d:	1e                   	push   %ds
   1029e:	06                   	push   %es
   1029f:	0f a0                	push   %fs
   102a1:	0f a8                	push   %gs
   102a3:	54                   	push   %esp
   102a4:	e8 fd 4e 00 00       	call   151a6 <do_handler_kbd>
   102a9:	5c                   	pop    %esp
   102aa:	0f a9                	pop    %gs
   102ac:	0f a1                	pop    %fs
   102ae:	07                   	pop    %es
   102af:	1f                   	pop    %ds
   102b0:	61                   	popa   
   102b1:	83 c4 08             	add    $0x8,%esp
   102b4:	cf                   	iret   

000102b5 <exception_handler_primary_disk>:
//磁盘的中断处理函数
exception_handler primary_disk          0x2E, 0
   102b5:	6a 00                	push   $0x0
   102b7:	6a 2e                	push   $0x2e
   102b9:	60                   	pusha  
   102ba:	1e                   	push   %ds
   102bb:	06                   	push   %es
   102bc:	0f a0                	push   %fs
   102be:	0f a8                	push   %gs
   102c0:	54                   	push   %esp
   102c1:	e8 00 4b 00 00       	call   14dc6 <do_handler_primary_disk>
   102c6:	5c                   	pop    %esp
   102c7:	0f a9                	pop    %gs
   102c9:	0f a1                	pop    %fs
   102cb:	07                   	pop    %es
   102cc:	1f                   	pop    %ds
   102cd:	61                   	popa   
   102ce:	83 c4 08             	add    $0x8,%esp
   102d1:	cf                   	iret   

000102d2 <simple_switch>:
//TODO:该部分为另一种任务切换时cpu上下文环境的保存方法，并未被调用
    .text
    .global simple_switch
simple_switch:  //simple_switch(from, to)
    //1.获取参数，跳过4字节的 eip
    mov 8(%esp), %edx   //获取 to, 地址(指针) --> 目标任务的栈空间对应的 esp 的值
   102d2:	8b 54 24 08          	mov    0x8(%esp),%edx
    mov 4(%esp), %eax   //获取 from, 地址(指针) --> 当前任务的栈空间对应的 esp 的值
   102d6:	8b 44 24 04          	mov    0x4(%esp),%eax


    //2.被调用者保存当前任务的 ebp, ebx, esi, edi 到当前任务的栈中
    //eax, ecx, edx, eip, eflags 已由调用者压入当前任务的栈中
    push %ebp
   102da:	55                   	push   %ebp
    push %ebx
   102db:	53                   	push   %ebx
    push %esi
   102dc:	56                   	push   %esi
    push %edi
   102dd:	57                   	push   %edi

    //3.更新当前任务栈空间的 esp
    mov %esp, (%eax)
   102de:	89 20                	mov    %esp,(%eax)

    //3.进行任务栈的切换
    mov (%edx), %esp
   102e0:	8b 22                	mov    (%edx),%esp


    //4.恢复切换后的任务状态，ebp, ebx, esi, edi 手动恢复
    //eax, ecx, edx, eip, eflags, 是在当前任务(c函数)调用simple_switch时已压入当前任务栈中，
    //调用 ret 后会自行弹出并恢复
    pop %edi
   102e2:	5f                   	pop    %edi
    pop %esi
   102e3:	5e                   	pop    %esi
    pop %ebx
   102e4:	5b                   	pop    %ebx
    pop %ebp
   102e5:	5d                   	pop    %ebp

    //5.恢复切换后的任务执行流，相当于此时 esp ->[eip]， 即 pop %eip
    ret 
   102e6:	c3                   	ret    

000102e7 <exception_handler_syscall>:

    //注意：cpu只自动保护了 cs eip ss esp寄存器，其它寄存器没有被维护，可能在调用门处理函数里被修改
    //所以需要手动压入，即保护cpu上下文环境，也为fork系统调用提供cpu上下文环境

    //1.用 pusha 指令压入8个通用寄存器
    pusha
   102e7:	60                   	pusha  

    //2.压入其他段寄存器
    push %ds
   102e8:	1e                   	push   %ds
    push %es
   102e9:	06                   	push   %es
    push %fs
   102ea:	0f a0                	push   %fs
    push %gs
   102ec:	0f a8                	push   %gs

    //3.压入eflags寄存器
    pushf
   102ee:	9c                   	pushf  

    //4.将当前 esp 的值压入栈中，当作调用门栈帧的起始地址
    push %esp
   102ef:	54                   	push   %esp

    //5.调用系统调用处理函数，按id进一步判断需要进行的系统调用并执行
    call do_handler_syscall
   102f0:	e8 fe 30 00 00       	call   133f3 <do_handler_syscall>


    //5.恢复现场
    pop %esp
   102f5:	5c                   	pop    %esp
    popf
   102f6:	9d                   	popf   
    pop %gs
   102f7:	0f a9                	pop    %gs
    pop %fs
   102f9:	0f a1                	pop    %fs
    pop %es
   102fb:	07                   	pop    %es
    pop %ds
   102fc:	1f                   	pop    %ds
    popa
   102fd:	61                   	popa   
    //如果要变换特权级，它会加载被调用者堆栈上的CS和EIP，并增加ESP跳过参数，
    //然后ESP将指向被保存过的调用者SS和ESP¹。
    //它还会对目标代码段特权级和目标栈段特权级做严格的检查，
    //要求代码段可执行特权级CPL (即DPL) == 栈段选择子请求特权级RPL == 栈段目标内存特权级DPL²。
    
    retf $(5*4) 
   102fe:	ca 14 00             	lret   $0x14

00010301 <down2>:
 * 
 * @param size 
 * @param bound 一般取2的n次方
 * @return uint32_t 
 */
static inline uint32_t down2(uint32_t size, uint32_t bound) {
   10301:	55                   	push   %ebp
   10302:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);  
   10304:	8b 45 0c             	mov    0xc(%ebp),%eax
   10307:	f7 d8                	neg    %eax
   10309:	23 45 08             	and    0x8(%ebp),%eax
}
   1030c:	5d                   	pop    %ebp
   1030d:	c3                   	ret    

0001030e <up2>:
 * 
 * @param size 
 * @param bound 一般取2的n次方
 * @return uint32_t 
 */
static inline uint32_t up2(uint32_t size, uint32_t bound) {
   1030e:	55                   	push   %ebp
   1030f:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   10311:	8b 55 08             	mov    0x8(%ebp),%edx
   10314:	8b 45 0c             	mov    0xc(%ebp),%eax
   10317:	01 d0                	add    %edx,%eax
   10319:	8d 50 ff             	lea    -0x1(%eax),%edx
   1031c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1031f:	f7 d8                	neg    %eax
   10321:	21 d0                	and    %edx,%eax
}
   10323:	5d                   	pop    %ebp
   10324:	c3                   	ret    

00010325 <write_cr3>:
 * 它含有存放页目录表页面的物理地址，
 * 因此 CR3 也被称为 PDBR（Page-Directory Base address Register）。
 *
 * @param data
 */
static inline void write_cr3(uint32_t data) {
   10325:	55                   	push   %ebp
   10326:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("mov %[v], %%cr3" : : [v] "r"(data));
   10328:	8b 45 08             	mov    0x8(%ebp),%eax
   1032b:	0f 22 d8             	mov    %eax,%cr3
}
   1032e:	90                   	nop
   1032f:	5d                   	pop    %ebp
   10330:	c3                   	ret    

00010331 <pde_index>:
 * @brief 获取虚拟地址的高10位，及对应的页目录项在页目录表中的索引
 * 
 * @param vstart 
 * @return uint32_t 
 */
static inline uint32_t pde_index(uint32_t vstart) {
   10331:	55                   	push   %ebp
   10332:	89 e5                	mov    %esp,%ebp
    return (vstart >> 22);
   10334:	8b 45 08             	mov    0x8(%ebp),%eax
   10337:	c1 e8 16             	shr    $0x16,%eax
}
   1033a:	5d                   	pop    %ebp
   1033b:	c3                   	ret    

0001033c <pte_index>:
 * @brief 获取虚拟地址的次10位，及对应的页表项在页表中的索引
 * 
 * @param vstart 
 * @return uint32_t 
 */
static inline uint32_t pte_index(uint32_t vstart) {
   1033c:	55                   	push   %ebp
   1033d:	89 e5                	mov    %esp,%ebp
    return (vstart >> 12) & 0x3ff;
   1033f:	8b 45 08             	mov    0x8(%ebp),%eax
   10342:	c1 e8 0c             	shr    $0xc,%eax
   10345:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   1034a:	5d                   	pop    %ebp
   1034b:	c3                   	ret    

0001034c <pde_to_pt_addr>:
 * @brief 获取页目录项中对应的页表的起始地址，及该页表第一个页表项的地址
 * 
 * @param pde 页目录项
 * @return uint32_t 返回的页表的地址
 */
static inline uint32_t pde_to_pt_addr(pde_t *pde) {
   1034c:	55                   	push   %ebp
   1034d:	89 e5                	mov    %esp,%ebp
    //高20位为页表的物理地址的有效位，将其左移12位，及按4kb对齐后才是该页的物理地址
    return pde->phy_pt_addr << 12;
   1034f:	8b 45 08             	mov    0x8(%ebp),%eax
   10352:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   10356:	c0 ea 04             	shr    $0x4,%dl
   10359:	0f b6 ca             	movzbl %dl,%ecx
   1035c:	0f b6 50 02          	movzbl 0x2(%eax),%edx
   10360:	c1 e2 04             	shl    $0x4,%edx
   10363:	09 ca                	or     %ecx,%edx
   10365:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   10369:	c1 e0 0c             	shl    $0xc,%eax
   1036c:	09 d0                	or     %edx,%eax
   1036e:	c1 e0 0c             	shl    $0xc,%eax
}
   10371:	5d                   	pop    %ebp
   10372:	c3                   	ret    

00010373 <pte_to_pg_addr>:
 * @brief 获取页表项中对应的页的起始地址
 * 
 * @param pte 页表项
 * @return uint32_t 返回的页的地址
 */
static inline uint32_t pte_to_pg_addr(pte_t *pte) {
   10373:	55                   	push   %ebp
   10374:	89 e5                	mov    %esp,%ebp
    //高20位为页的物理地址有效位，将其左移12位，及按4kb对齐后才是该页的物理地址
    return pte->phy_page_addr << 12;
   10376:	8b 45 08             	mov    0x8(%ebp),%eax
   10379:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   1037d:	c0 ea 04             	shr    $0x4,%dl
   10380:	0f b6 ca             	movzbl %dl,%ecx
   10383:	0f b6 50 02          	movzbl 0x2(%eax),%edx
   10387:	c1 e2 04             	shl    $0x4,%edx
   1038a:	09 ca                	or     %ecx,%edx
   1038c:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   10390:	c1 e0 0c             	shl    $0xc,%eax
   10393:	09 d0                	or     %edx,%eax
   10395:	c1 e0 0c             	shl    $0xc,%eax
}
   10398:	5d                   	pop    %ebp
   10399:	c3                   	ret    

0001039a <get_pte_privilege>:
 * @brief 获取页表项的权限
 * 
 * @param pte 
 * @return uint32_t 
 */
static inline uint32_t get_pte_privilege(pte_t *pte) {
   1039a:	55                   	push   %ebp
   1039b:	89 e5                	mov    %esp,%ebp
    return pte->v & 0x1ff;  //直接获取低9位即为所有权限
   1039d:	8b 45 08             	mov    0x8(%ebp),%eax
   103a0:	8b 00                	mov    (%eax),%eax
   103a2:	25 ff 01 00 00       	and    $0x1ff,%eax
}
   103a7:	5d                   	pop    %ebp
   103a8:	c3                   	ret    

000103a9 <mmu_set_page_dir>:
/**
 * @brief 设置页目录表的起始地址，将起始地址写入CR3寄存器
 * 
 * @param paddr 页目录表的物理起始地址
 */
static inline void mmu_set_page_dir(uint32_t paddr) {
   103a9:	55                   	push   %ebp
   103aa:	89 e5                	mov    %esp,%ebp

    //设置cr3寄存器的高20位为页目录表的地址，因为按4kb对齐，所以
    //页目录表的起始地址page_dir的高20位才为有效位，低12位为0，将cr3的低12位就设置为0
    write_cr3(paddr);
   103ac:	ff 75 08             	push   0x8(%ebp)
   103af:	e8 71 ff ff ff       	call   10325 <write_cr3>
   103b4:	83 c4 04             	add    $0x4,%esp
}
   103b7:	90                   	nop
   103b8:	c9                   	leave  
   103b9:	c3                   	ret    

000103ba <page_index>:
 * @brief 获取页的索引
 * 
 * @param alloc 
 * @param page_addr 
 */
static inline int page_index(addr_alloc_t *alloc, uint32_t page_addr) {
   103ba:	55                   	push   %ebp
   103bb:	89 e5                	mov    %esp,%ebp
   103bd:	53                   	push   %ebx
  return (page_addr - alloc->start) / alloc->page_size;
   103be:	8b 45 08             	mov    0x8(%ebp),%eax
   103c1:	8b 50 1c             	mov    0x1c(%eax),%edx
   103c4:	8b 45 0c             	mov    0xc(%ebp),%eax
   103c7:	29 d0                	sub    %edx,%eax
   103c9:	89 c1                	mov    %eax,%ecx
   103cb:	8b 45 08             	mov    0x8(%ebp),%eax
   103ce:	8b 58 24             	mov    0x24(%eax),%ebx
   103d1:	89 c8                	mov    %ecx,%eax
   103d3:	ba 00 00 00 00       	mov    $0x0,%edx
   103d8:	f7 f3                	div    %ebx
}
   103da:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   103dd:	c9                   	leave  
   103de:	c3                   	ret    

000103df <page_ref_add>:
 * @brief 为页的引用计数+1
 * 
 * @param alloc 
 * @param page_addr 页起始地址
 */
static inline void page_ref_add(addr_alloc_t *alloc, uint32_t page_addr) {
   103df:	55                   	push   %ebp
   103e0:	89 e5                	mov    %esp,%ebp
   103e2:	83 ec 18             	sub    $0x18,%esp
  //计算出页的索引
  int index = page_index(alloc, page_addr);
   103e5:	ff 75 0c             	push   0xc(%ebp)
   103e8:	ff 75 08             	push   0x8(%ebp)
   103eb:	e8 ca ff ff ff       	call   103ba <page_index>
   103f0:	83 c4 08             	add    $0x8,%esp
   103f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
  
  mutex_lock(&alloc->mutex);
   103f6:	8b 45 08             	mov    0x8(%ebp),%eax
   103f9:	83 ec 0c             	sub    $0xc,%esp
   103fc:	50                   	push   %eax
   103fd:	e8 4c 7c 00 00       	call   1804e <mutex_lock>
   10402:	83 c4 10             	add    $0x10,%esp
  //引用计数+1
  alloc->page_ref[index]++;
   10405:	8b 55 08             	mov    0x8(%ebp),%edx
   10408:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1040b:	01 d0                	add    %edx,%eax
   1040d:	83 c0 28             	add    $0x28,%eax
   10410:	0f b6 00             	movzbl (%eax),%eax
   10413:	8d 50 01             	lea    0x1(%eax),%edx
   10416:	8b 4d 08             	mov    0x8(%ebp),%ecx
   10419:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1041c:	01 c8                	add    %ecx,%eax
   1041e:	83 c0 28             	add    $0x28,%eax
   10421:	88 10                	mov    %dl,(%eax)

  mutex_unlock(&alloc->mutex);
   10423:	8b 45 08             	mov    0x8(%ebp),%eax
   10426:	83 ec 0c             	sub    $0xc,%esp
   10429:	50                   	push   %eax
   1042a:	e8 c5 7c 00 00       	call   180f4 <mutex_unlock>
   1042f:	83 c4 10             	add    $0x10,%esp
 }
   10432:	90                   	nop
   10433:	c9                   	leave  
   10434:	c3                   	ret    

00010435 <page_ref_sub>:
 * @brief 页的引用计数-1
 * 
 * @param alloc 
 * @param page_addr 
 */
static inline void page_ref_sub(addr_alloc_t *alloc, uint32_t page_addr) {
   10435:	55                   	push   %ebp
   10436:	89 e5                	mov    %esp,%ebp
   10438:	83 ec 18             	sub    $0x18,%esp
  //计算出页的索引
  int index = page_index(alloc, page_addr);
   1043b:	ff 75 0c             	push   0xc(%ebp)
   1043e:	ff 75 08             	push   0x8(%ebp)
   10441:	e8 74 ff ff ff       	call   103ba <page_index>
   10446:	83 c4 08             	add    $0x8,%esp
   10449:	89 45 f4             	mov    %eax,-0xc(%ebp)

  mutex_lock(&alloc->mutex);
   1044c:	8b 45 08             	mov    0x8(%ebp),%eax
   1044f:	83 ec 0c             	sub    $0xc,%esp
   10452:	50                   	push   %eax
   10453:	e8 f6 7b 00 00       	call   1804e <mutex_lock>
   10458:	83 c4 10             	add    $0x10,%esp
  //引用计数-1
  if (alloc->page_ref[index] > 0) 
   1045b:	8b 55 08             	mov    0x8(%ebp),%edx
   1045e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10461:	01 d0                	add    %edx,%eax
   10463:	83 c0 28             	add    $0x28,%eax
   10466:	0f b6 00             	movzbl (%eax),%eax
   10469:	84 c0                	test   %al,%al
   1046b:	74 1e                	je     1048b <page_ref_sub+0x56>
      alloc->page_ref[index]--;    
   1046d:	8b 55 08             	mov    0x8(%ebp),%edx
   10470:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10473:	01 d0                	add    %edx,%eax
   10475:	83 c0 28             	add    $0x28,%eax
   10478:	0f b6 00             	movzbl (%eax),%eax
   1047b:	8d 50 ff             	lea    -0x1(%eax),%edx
   1047e:	8b 4d 08             	mov    0x8(%ebp),%ecx
   10481:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10484:	01 c8                	add    %ecx,%eax
   10486:	83 c0 28             	add    $0x28,%eax
   10489:	88 10                	mov    %dl,(%eax)

  mutex_unlock(&alloc->mutex);
   1048b:	8b 45 08             	mov    0x8(%ebp),%eax
   1048e:	83 ec 0c             	sub    $0xc,%esp
   10491:	50                   	push   %eax
   10492:	e8 5d 7c 00 00       	call   180f4 <mutex_unlock>
   10497:	83 c4 10             	add    $0x10,%esp
 }
   1049a:	90                   	nop
   1049b:	c9                   	leave  
   1049c:	c3                   	ret    

0001049d <get_page_ref>:
 * @brief 获取页的引用计数
 * 
 * @param alloc 
 * @param page_addr 
 */
static inline int get_page_ref(addr_alloc_t *alloc, uint32_t page_addr) {
   1049d:	55                   	push   %ebp
   1049e:	89 e5                	mov    %esp,%ebp
   104a0:	83 ec 18             	sub    $0x18,%esp
    //计算出页的索引
  int index = page_index(alloc, page_addr);
   104a3:	ff 75 0c             	push   0xc(%ebp)
   104a6:	ff 75 08             	push   0x8(%ebp)
   104a9:	e8 0c ff ff ff       	call   103ba <page_index>
   104ae:	83 c4 08             	add    $0x8,%esp
   104b1:	89 45 f4             	mov    %eax,-0xc(%ebp)

  mutex_lock(&alloc->mutex);
   104b4:	8b 45 08             	mov    0x8(%ebp),%eax
   104b7:	83 ec 0c             	sub    $0xc,%esp
   104ba:	50                   	push   %eax
   104bb:	e8 8e 7b 00 00       	call   1804e <mutex_lock>
   104c0:	83 c4 10             	add    $0x10,%esp

  int ref = alloc->page_ref[index];
   104c3:	8b 55 08             	mov    0x8(%ebp),%edx
   104c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   104c9:	01 d0                	add    %edx,%eax
   104cb:	83 c0 28             	add    $0x28,%eax
   104ce:	0f b6 00             	movzbl (%eax),%eax
   104d1:	0f b6 c0             	movzbl %al,%eax
   104d4:	89 45 f0             	mov    %eax,-0x10(%ebp)

  mutex_unlock(&alloc->mutex);
   104d7:	8b 45 08             	mov    0x8(%ebp),%eax
   104da:	83 ec 0c             	sub    $0xc,%esp
   104dd:	50                   	push   %eax
   104de:	e8 11 7c 00 00       	call   180f4 <mutex_unlock>
   104e3:	83 c4 10             	add    $0x10,%esp

  return ref;
   104e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   104e9:	c9                   	leave  
   104ea:	c3                   	ret    

000104eb <clear_page_ref>:
 * @brief 清除所有页的引用
 * 
 * @param alloc 
 * @return int 
 */
static inline void clear_page_ref(addr_alloc_t *alloc) {
   104eb:	55                   	push   %ebp
   104ec:	89 e5                	mov    %esp,%ebp
   104ee:	83 ec 08             	sub    $0x8,%esp

  mutex_lock(&alloc->mutex);
   104f1:	8b 45 08             	mov    0x8(%ebp),%eax
   104f4:	83 ec 0c             	sub    $0xc,%esp
   104f7:	50                   	push   %eax
   104f8:	e8 51 7b 00 00       	call   1804e <mutex_lock>
   104fd:	83 c4 10             	add    $0x10,%esp

  kernel_memset(alloc->page_ref, 0, alloc->size / alloc->page_size);
   10500:	8b 45 08             	mov    0x8(%ebp),%eax
   10503:	8b 40 20             	mov    0x20(%eax),%eax
   10506:	8b 55 08             	mov    0x8(%ebp),%edx
   10509:	8b 4a 24             	mov    0x24(%edx),%ecx
   1050c:	ba 00 00 00 00       	mov    $0x0,%edx
   10511:	f7 f1                	div    %ecx
   10513:	89 c2                	mov    %eax,%edx
   10515:	8b 45 08             	mov    0x8(%ebp),%eax
   10518:	83 c0 28             	add    $0x28,%eax
   1051b:	83 ec 04             	sub    $0x4,%esp
   1051e:	52                   	push   %edx
   1051f:	6a 00                	push   $0x0
   10521:	50                   	push   %eax
   10522:	e8 71 87 00 00       	call   18c98 <kernel_memset>
   10527:	83 c4 10             	add    $0x10,%esp

  mutex_unlock(&alloc->mutex);
   1052a:	8b 45 08             	mov    0x8(%ebp),%eax
   1052d:	83 ec 0c             	sub    $0xc,%esp
   10530:	50                   	push   %eax
   10531:	e8 be 7b 00 00       	call   180f4 <mutex_unlock>
   10536:	83 c4 10             	add    $0x10,%esp
}
   10539:	90                   	nop
   1053a:	c9                   	leave  
   1053b:	c3                   	ret    

0001053c <addr_alloc_init>:
 * @param start 管理内存的起始地址
 * @param size 管理内存的大小
 * @param page_size 管理的内存页的大小
 */
static void addr_alloc_init(addr_alloc_t *alloc, uint8_t *bits, uint32_t start,
                            uint32_t size, uint32_t page_size) {
   1053c:	55                   	push   %ebp
   1053d:	89 e5                	mov    %esp,%ebp
   1053f:	83 ec 08             	sub    $0x8,%esp
  mutex_init(&alloc->mutex);
   10542:	8b 45 08             	mov    0x8(%ebp),%eax
   10545:	83 ec 0c             	sub    $0xc,%esp
   10548:	50                   	push   %eax
   10549:	e8 b3 7a 00 00       	call   18001 <mutex_init>
   1054e:	83 c4 10             	add    $0x10,%esp
  alloc->start = start;
   10551:	8b 45 08             	mov    0x8(%ebp),%eax
   10554:	8b 55 10             	mov    0x10(%ebp),%edx
   10557:	89 50 1c             	mov    %edx,0x1c(%eax)
  alloc->size = size;
   1055a:	8b 45 08             	mov    0x8(%ebp),%eax
   1055d:	8b 55 14             	mov    0x14(%ebp),%edx
   10560:	89 50 20             	mov    %edx,0x20(%eax)
  alloc->page_size = page_size;
   10563:	8b 45 08             	mov    0x8(%ebp),%eax
   10566:	8b 55 18             	mov    0x18(%ebp),%edx
   10569:	89 50 24             	mov    %edx,0x24(%eax)
  bitmap_init(&alloc->bitmap, bits, alloc->size / alloc->page_size, 0);
   1056c:	8b 45 08             	mov    0x8(%ebp),%eax
   1056f:	8b 40 20             	mov    0x20(%eax),%eax
   10572:	8b 55 08             	mov    0x8(%ebp),%edx
   10575:	8b 4a 24             	mov    0x24(%edx),%ecx
   10578:	ba 00 00 00 00       	mov    $0x0,%edx
   1057d:	f7 f1                	div    %ecx
   1057f:	89 c2                	mov    %eax,%edx
   10581:	8b 45 08             	mov    0x8(%ebp),%eax
   10584:	83 c0 14             	add    $0x14,%eax
   10587:	6a 00                	push   $0x0
   10589:	52                   	push   %edx
   1058a:	ff 75 0c             	push   0xc(%ebp)
   1058d:	50                   	push   %eax
   1058e:	e8 32 82 00 00       	call   187c5 <bitmap_init>
   10593:	83 c4 10             	add    $0x10,%esp
  //清空页的引用数组
  kernel_memset(alloc->page_ref, 0,  alloc->size / alloc->page_size);
   10596:	8b 45 08             	mov    0x8(%ebp),%eax
   10599:	8b 40 20             	mov    0x20(%eax),%eax
   1059c:	8b 55 08             	mov    0x8(%ebp),%edx
   1059f:	8b 4a 24             	mov    0x24(%edx),%ecx
   105a2:	ba 00 00 00 00       	mov    $0x0,%edx
   105a7:	f7 f1                	div    %ecx
   105a9:	89 c2                	mov    %eax,%edx
   105ab:	8b 45 08             	mov    0x8(%ebp),%eax
   105ae:	83 c0 28             	add    $0x28,%eax
   105b1:	83 ec 04             	sub    $0x4,%esp
   105b4:	52                   	push   %edx
   105b5:	6a 00                	push   $0x0
   105b7:	50                   	push   %eax
   105b8:	e8 db 86 00 00       	call   18c98 <kernel_memset>
   105bd:	83 c4 10             	add    $0x10,%esp
}
   105c0:	90                   	nop
   105c1:	c9                   	leave  
   105c2:	c3                   	ret    

000105c3 <addr_alloc_page>:
 *
 * @param alloc
 * @param page_count 申请页的数量
 * @return uint32_t 申请的第一个页的起始地址， 0：分配失败
 */
static uint32_t addr_alloc_page(addr_alloc_t *alloc, int page_count) {
   105c3:	55                   	push   %ebp
   105c4:	89 e5                	mov    %esp,%ebp
   105c6:	83 ec 18             	sub    $0x18,%esp
  uint32_t addr = 0;  // 记录分配的页的起始地址
   105c9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  //TODO：加锁
  mutex_lock(&alloc->mutex);
   105d0:	8b 45 08             	mov    0x8(%ebp),%eax
   105d3:	83 ec 0c             	sub    $0xc,%esp
   105d6:	50                   	push   %eax
   105d7:	e8 72 7a 00 00       	call   1804e <mutex_lock>
   105dc:	83 c4 10             	add    $0x10,%esp

  // 在位图中取连续的page_count个页进行分配
  int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   105df:	8b 45 08             	mov    0x8(%ebp),%eax
   105e2:	83 c0 14             	add    $0x14,%eax
   105e5:	83 ec 04             	sub    $0x4,%esp
   105e8:	ff 75 0c             	push   0xc(%ebp)
   105eb:	6a 00                	push   $0x0
   105ed:	50                   	push   %eax
   105ee:	e8 07 84 00 00       	call   189fa <bitmap_alloc_nbits>
   105f3:	83 c4 10             	add    $0x10,%esp
   105f6:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (page_count >= 0) {
   105f9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   105fd:	78 17                	js     10616 <addr_alloc_page+0x53>
    // 计算出申请到的第一个页的起始地址
    addr = alloc->start + page_index * alloc->page_size;
   105ff:	8b 45 08             	mov    0x8(%ebp),%eax
   10602:	8b 48 1c             	mov    0x1c(%eax),%ecx
   10605:	8b 45 08             	mov    0x8(%ebp),%eax
   10608:	8b 50 24             	mov    0x24(%eax),%edx
   1060b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1060e:	0f af c2             	imul   %edx,%eax
   10611:	01 c8                	add    %ecx,%eax
   10613:	89 45 f4             	mov    %eax,-0xc(%ebp)
  }


  //TODO：解锁
  mutex_unlock(&alloc->mutex);
   10616:	8b 45 08             	mov    0x8(%ebp),%eax
   10619:	83 ec 0c             	sub    $0xc,%esp
   1061c:	50                   	push   %eax
   1061d:	e8 d2 7a 00 00       	call   180f4 <mutex_unlock>
   10622:	83 c4 10             	add    $0x10,%esp

  return addr;
   10625:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   10628:	c9                   	leave  
   10629:	c3                   	ret    

0001062a <addr_free_page>:
 *
 * @param alloc
 * @param addr 第一个内存页的起始地址
 * @param page_count 内存页的数量
 */
static void addr_free_page(addr_alloc_t *alloc, uint32_t addr, int page_count) {
   1062a:	55                   	push   %ebp
   1062b:	89 e5                	mov    %esp,%ebp
   1062d:	83 ec 18             	sub    $0x18,%esp
  mutex_lock(&alloc->mutex);
   10630:	8b 45 08             	mov    0x8(%ebp),%eax
   10633:	83 ec 0c             	sub    $0xc,%esp
   10636:	50                   	push   %eax
   10637:	e8 12 7a 00 00       	call   1804e <mutex_lock>
   1063c:	83 c4 10             	add    $0x10,%esp

  //将所有页引用-1
  for (int i = 0; i < page_count; ++i) {
   1063f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10646:	eb 64                	jmp    106ac <addr_free_page+0x82>
    //获取当前页的地址
    uint32_t page_addr = addr + i * MEM_PAGE_SIZE;
   10648:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1064b:	c1 e0 0c             	shl    $0xc,%eax
   1064e:	89 c2                	mov    %eax,%edx
   10650:	8b 45 0c             	mov    0xc(%ebp),%eax
   10653:	01 d0                	add    %edx,%eax
   10655:	89 45 f0             	mov    %eax,-0x10(%ebp)
    //引用-1
    page_ref_sub(alloc, page_addr);
   10658:	83 ec 08             	sub    $0x8,%esp
   1065b:	ff 75 f0             	push   -0x10(%ebp)
   1065e:	ff 75 08             	push   0x8(%ebp)
   10661:	e8 cf fd ff ff       	call   10435 <page_ref_sub>
   10666:	83 c4 10             	add    $0x10,%esp
    //获取当前页引用
    int ref = get_page_ref(alloc, page_addr);
   10669:	83 ec 08             	sub    $0x8,%esp
   1066c:	ff 75 f0             	push   -0x10(%ebp)
   1066f:	ff 75 08             	push   0x8(%ebp)
   10672:	e8 26 fe ff ff       	call   1049d <get_page_ref>
   10677:	83 c4 10             	add    $0x10,%esp
   1067a:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (ref == 0)  {//引用为0，释放该页
   1067d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   10681:	75 25                	jne    106a8 <addr_free_page+0x7e>
        bitmap_set_bit(&alloc->bitmap, page_index(alloc, page_addr), 1, 0);
   10683:	83 ec 08             	sub    $0x8,%esp
   10686:	ff 75 f0             	push   -0x10(%ebp)
   10689:	ff 75 08             	push   0x8(%ebp)
   1068c:	e8 29 fd ff ff       	call   103ba <page_index>
   10691:	83 c4 10             	add    $0x10,%esp
   10694:	8b 55 08             	mov    0x8(%ebp),%edx
   10697:	83 c2 14             	add    $0x14,%edx
   1069a:	6a 00                	push   $0x0
   1069c:	6a 01                	push   $0x1
   1069e:	50                   	push   %eax
   1069f:	52                   	push   %edx
   106a0:	e8 2c 82 00 00       	call   188d1 <bitmap_set_bit>
   106a5:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < page_count; ++i) {
   106a8:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   106ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
   106af:	3b 45 10             	cmp    0x10(%ebp),%eax
   106b2:	7c 94                	jl     10648 <addr_free_page+0x1e>
    }

  }

  mutex_unlock(&alloc->mutex);
   106b4:	8b 45 08             	mov    0x8(%ebp),%eax
   106b7:	83 ec 0c             	sub    $0xc,%esp
   106ba:	50                   	push   %eax
   106bb:	e8 34 7a 00 00       	call   180f4 <mutex_unlock>
   106c0:	83 c4 10             	add    $0x10,%esp
}
   106c3:	90                   	nop
   106c4:	c9                   	leave  
   106c5:	c3                   	ret    

000106c6 <show_mem_info>:
/**
 * @brief  打印1m以内内存的可用空间
 * 
 * @param boot_info 
 */
static void show_mem_info(boot_info_t *boot_info) {
   106c6:	55                   	push   %ebp
   106c7:	89 e5                	mov    %esp,%ebp
   106c9:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:\n");
   106cc:	83 ec 0c             	sub    $0xc,%esp
   106cf:	68 40 95 01 00       	push   $0x19540
   106d4:	e8 bc 8d 00 00       	call   19495 <log_printf>
   106d9:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   106dc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   106e3:	eb 29                	jmp    1070e <show_mem_info+0x48>
        log_printf("[%d]: 0x%x - 0x%x\n", i, boot_info->ram_region_cfg[i].start, boot_info->ram_region_cfg[i].size);
   106e5:	8b 45 08             	mov    0x8(%ebp),%eax
   106e8:	8b 55 f4             	mov    -0xc(%ebp),%edx
   106eb:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   106ef:	8b 45 08             	mov    0x8(%ebp),%eax
   106f2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   106f5:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   106f8:	52                   	push   %edx
   106f9:	50                   	push   %eax
   106fa:	ff 75 f4             	push   -0xc(%ebp)
   106fd:	68 4d 95 01 00       	push   $0x1954d
   10702:	e8 8e 8d 00 00       	call   19495 <log_printf>
   10707:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   1070a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1070e:	8b 45 08             	mov    0x8(%ebp),%eax
   10711:	8b 40 50             	mov    0x50(%eax),%eax
   10714:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   10717:	7c cc                	jl     106e5 <show_mem_info+0x1f>
    }

    log_printf("\n");
   10719:	83 ec 0c             	sub    $0xc,%esp
   1071c:	68 60 95 01 00       	push   $0x19560
   10721:	e8 6f 8d 00 00       	call   19495 <log_printf>
   10726:	83 c4 10             	add    $0x10,%esp
}
   10729:	90                   	nop
   1072a:	c9                   	leave  
   1072b:	c3                   	ret    

0001072c <total_mem_size>:
 * @brief  计算总的可用内存空间大小
 * 
 * @param boot_info 
 * @return uint32_t 
 */
static uint32_t total_mem_size(boot_info_t *boot_info) {
   1072c:	55                   	push   %ebp
   1072d:	89 e5                	mov    %esp,%ebp
   1072f:	83 ec 10             	sub    $0x10,%esp
    uint32_t mem_size = 0;
   10732:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   10739:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   10740:	eb 11                	jmp    10753 <total_mem_size+0x27>
        mem_size += boot_info->ram_region_cfg[i].size;
   10742:	8b 45 08             	mov    0x8(%ebp),%eax
   10745:	8b 55 f8             	mov    -0x8(%ebp),%edx
   10748:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
   1074c:	01 45 fc             	add    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   1074f:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   10753:	8b 45 08             	mov    0x8(%ebp),%eax
   10756:	8b 40 50             	mov    0x50(%eax),%eax
   10759:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   1075c:	7c e4                	jl     10742 <total_mem_size+0x16>
    }

    return mem_size;
   1075e:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10761:	c9                   	leave  
   10762:	c3                   	ret    

00010763 <find_pte>:
 *                 1：表示创建一个新页目录项，并为其分配一个新页作为页表
 *                 0: 返回0
 *                
 * @return pte_t* 索引到的页表项
 */
pte_t* find_pte(pde_t* page_dir, uint32_t vstart, int is_alloc) {
   10763:	55                   	push   %ebp
   10764:	89 e5                	mov    %esp,%ebp
   10766:	83 ec 18             	sub    $0x18,%esp
  pte_t* page_table; //记录被索引的页表
  //1.通过虚拟地址高10位索引到对应的页目录项
  pde_t* pde = page_dir + pde_index(vstart);
   10769:	ff 75 0c             	push   0xc(%ebp)
   1076c:	e8 c0 fb ff ff       	call   10331 <pde_index>
   10771:	83 c4 04             	add    $0x4,%esp
   10774:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1077b:	8b 45 08             	mov    0x8(%ebp),%eax
   1077e:	01 d0                	add    %edx,%eax
   10780:	89 45 f0             	mov    %eax,-0x10(%ebp)

  //2.判断该页目录项是否已存在，及该页目录项是否已指向一个被分配的页表
  if (pde->present) { //该页目录项存在，及存在对应的页表，可以索引到对应的页表
   10783:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10786:	0f b6 00             	movzbl (%eax),%eax
   10789:	83 e0 01             	and    $0x1,%eax
   1078c:	84 c0                	test   %al,%al
   1078e:	74 10                	je     107a0 <find_pte+0x3d>
    page_table = (pte_t*)pde_to_pt_addr(pde);
   10790:	ff 75 f0             	push   -0x10(%ebp)
   10793:	e8 b4 fb ff ff       	call   1034c <pde_to_pt_addr>
   10798:	83 c4 04             	add    $0x4,%esp
   1079b:	89 45 f4             	mov    %eax,-0xc(%ebp)
   1079e:	eb 57                	jmp    107f7 <find_pte+0x94>
  } else {//该目录项不存在内存中，及对应的页表不存在
    if (is_alloc == 0) {  //不为该目录项创建对应的页表
   107a0:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   107a4:	75 07                	jne    107ad <find_pte+0x4a>
      return (pte_t*)0;
   107a6:	b8 00 00 00 00       	mov    $0x0,%eax
   107ab:	eb 64                	jmp    10811 <find_pte+0xae>
    }

    //为该目录项分配一页作为页表
    uint32_t pg_addr = addr_alloc_page(&paddr_alloc, 1);
   107ad:	83 ec 08             	sub    $0x8,%esp
   107b0:	6a 01                	push   $0x1
   107b2:	68 00 c0 01 00       	push   $0x1c000
   107b7:	e8 07 fe ff ff       	call   105c3 <addr_alloc_page>
   107bc:	83 c4 10             	add    $0x10,%esp
   107bf:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pg_addr == 0) { //分配失败
   107c2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   107c6:	75 07                	jne    107cf <find_pte+0x6c>
      return (pte_t*)0;
   107c8:	b8 00 00 00 00       	mov    $0x0,%eax
   107cd:	eb 42                	jmp    10811 <find_pte+0xae>
    }

    //分配成功, 索引对应的页表
    page_table = (pte_t*)pg_addr;
   107cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
   107d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_memset(page_table, 0, MEM_PAGE_SIZE);
   107d5:	83 ec 04             	sub    $0x4,%esp
   107d8:	68 00 10 00 00       	push   $0x1000
   107dd:	6a 00                	push   $0x0
   107df:	ff 75 f4             	push   -0xc(%ebp)
   107e2:	e8 b1 84 00 00       	call   18c98 <kernel_memset>
   107e7:	83 c4 10             	add    $0x10,%esp

    //将该页表的起始地址放入对应的页目录项中并放入页目录表中，方便后续索引到该页表
    //且权限都放宽，即普通用户可访问，对应的页表的所有页可读写，将具体的权限交给每一页来进一步限制
    pde->v = pg_addr | PDE_U | PDE_W | PDE_P;
   107ea:	8b 45 ec             	mov    -0x14(%ebp),%eax
   107ed:	83 c8 07             	or     $0x7,%eax
   107f0:	89 c2                	mov    %eax,%edx
   107f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   107f5:	89 10                	mov    %edx,(%eax)

  // log_printf("sizeof(pte_t) = %d", sizeof(pte_t));


  //3.返回在该页表中索引到的页表项
  return page_table + pte_index(vstart);
   107f7:	83 ec 0c             	sub    $0xc,%esp
   107fa:	ff 75 0c             	push   0xc(%ebp)
   107fd:	e8 3a fb ff ff       	call   1033c <pte_index>
   10802:	83 c4 10             	add    $0x10,%esp
   10805:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1080c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1080f:	01 d0                	add    %edx,%eax

}
   10811:	c9                   	leave  
   10812:	c3                   	ret    

00010813 <memory_creat_map>:
 * @param pstart 物理地址的起始地址
 * @param page_count 分页数量
 * @param privilege 该段虚拟地址的特权级
 * @return int -1:分配失败
 */
int  memory_creat_map(pde_t *page_dir, uint32_t vstart, uint32_t pstart, int page_count, uint32_t privilege) {
   10813:	55                   	push   %ebp
   10814:	89 e5                	mov    %esp,%ebp
   10816:	83 ec 18             	sub    $0x18,%esp
  //1.为每一页创建对应的页表项
  for (int i = 0; i < page_count; ++i) {
   10819:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10820:	e9 91 00 00 00       	jmp    108b6 <memory_creat_map+0xa3>
    // //打印调试信息
    // log_printf("creat map: v-0x%x, p-0x%x, privilege:0x%x", vstart, pstart, privilege);

    //2.通过虚拟地址在页目录表中获取对应的页目录项指向的页表,
    //且当没有该页目录项时，为其分配一个页作为页表并让一个目录项指向该页表
    pte_t *pte = find_pte(page_dir, vstart, 1);
   10825:	83 ec 04             	sub    $0x4,%esp
   10828:	6a 01                	push   $0x1
   1082a:	ff 75 0c             	push   0xc(%ebp)
   1082d:	ff 75 08             	push   0x8(%ebp)
   10830:	e8 2e ff ff ff       	call   10763 <find_pte>
   10835:	83 c4 10             	add    $0x10,%esp
   10838:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pte == (pte_t*)0) {//没有找到可用的页表项
   1083b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1083f:	75 17                	jne    10858 <memory_creat_map+0x45>
    log_printf("creat pte failed pte == 0\n");
   10841:	83 ec 0c             	sub    $0xc,%esp
   10844:	68 62 95 01 00       	push   $0x19562
   10849:	e8 47 8c 00 00       	call   19495 <log_printf>
   1084e:	83 c4 10             	add    $0x10,%esp
      return -1;
   10851:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10856:	eb 6f                	jmp    108c7 <memory_creat_map+0xb4>
    }

    // log_printf("pte addr : 0x%x", (uint32_t)pte);
    //3.确保该页并未已存在内存中
    ASSERT(pte->present == 0);
   10858:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1085b:	0f b6 00             	movzbl (%eax),%eax
   1085e:	83 e0 01             	and    $0x1,%eax
   10861:	84 c0                	test   %al,%al
   10863:	74 1c                	je     10881 <memory_creat_map+0x6e>
   10865:	68 7d 95 01 00       	push   $0x1957d
   1086a:	68 dc 96 01 00       	push   $0x196dc
   1086f:	68 20 01 00 00       	push   $0x120
   10874:	68 90 95 01 00       	push   $0x19590
   10879:	e8 fb 7e 00 00       	call   18779 <pannic>
   1087e:	83 c4 10             	add    $0x10,%esp

    //4.在页表项中创建对应的映射关系，并该页权限，页权限以当前权限为主，因为pde处已放宽权限
    pte->v = pstart | privilege | PTE_P;
   10881:	8b 45 10             	mov    0x10(%ebp),%eax
   10884:	0b 45 18             	or     0x18(%ebp),%eax
   10887:	83 c8 01             	or     $0x1,%eax
   1088a:	89 c2                	mov    %eax,%edx
   1088c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1088f:	89 10                	mov    %edx,(%eax)

    //5.将该页引用计数+1
    page_ref_add(&paddr_alloc, pstart);
   10891:	83 ec 08             	sub    $0x8,%esp
   10894:	ff 75 10             	push   0x10(%ebp)
   10897:	68 00 c0 01 00       	push   $0x1c000
   1089c:	e8 3e fb ff ff       	call   103df <page_ref_add>
   108a1:	83 c4 10             	add    $0x10,%esp

    //6.切换为下一页
    vstart += MEM_PAGE_SIZE;
   108a4:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    pstart += MEM_PAGE_SIZE;
   108ab:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
  for (int i = 0; i < page_count; ++i) {
   108b2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   108b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   108b9:	3b 45 14             	cmp    0x14(%ebp),%eax
   108bc:	0f 8c 63 ff ff ff    	jl     10825 <memory_creat_map+0x12>

  }

  return 1;
   108c2:	b8 01 00 00 00       	mov    $0x1,%eax
 }
   108c7:	c9                   	leave  
   108c8:	c3                   	ret    

000108c9 <create_kernal_table>:

/**
 * @brief 创建内核的虚拟页表
 * 
 */
void create_kernal_table(void) {
   108c9:	55                   	push   %ebp
   108ca:	89 e5                	mov    %esp,%ebp
   108cc:	83 ec 28             	sub    $0x28,%esp
    {(void*)CONSOLE_DISP_START_ADDR, (void*)CONSOLE_DISP_END_ADDR, (void*)CONSOLE_DISP_START_ADDR, PTE_W},//显存区域的映射关系
    {(void*)MEM_EXT_START, (void*)MEM_EXT_END, (void*)MEM_EXT_START, PTE_W}, //将1mb到127mb都映射给操作系统使用

  };

  for (int i = 0; i < sizeof(kernal_map) / sizeof(kernal_map[0]); ++i) {
   108cf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   108d6:	e9 92 00 00 00       	jmp    1096d <create_kernal_table+0xa4>
    memory_map_t *map = kernal_map + i;
   108db:	8b 45 f4             	mov    -0xc(%ebp),%eax
   108de:	c1 e0 04             	shl    $0x4,%eax
   108e1:	05 00 b0 01 00       	add    $0x1b000,%eax
   108e6:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //将虚拟地址的起始地址按页大小4kb对齐，为了不丢失原有的虚拟地址空间，所以向下对齐vstart
    //理论上虚拟地址是不需要上下边缘对齐的，这里主要是为了计算所需页数
    //因为虚拟地址的每一页都和页目录项以及页表项捆绑了，
    //只需用页目录项和页表项为该页映射一个物理页即可，所以物理页才必须上下边缘按4kb对齐
    uint32_t vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   108e9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   108ec:	8b 00                	mov    (%eax),%eax
   108ee:	68 00 10 00 00       	push   $0x1000
   108f3:	50                   	push   %eax
   108f4:	e8 08 fa ff ff       	call   10301 <down2>
   108f9:	83 c4 08             	add    $0x8,%esp
   108fc:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32_t pstart = down2((uint32_t)map->pstart, MEM_PAGE_SIZE);
   108ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10902:	8b 40 08             	mov    0x8(%eax),%eax
   10905:	68 00 10 00 00       	push   $0x1000
   1090a:	50                   	push   %eax
   1090b:	e8 f1 f9 ff ff       	call   10301 <down2>
   10910:	83 c4 08             	add    $0x8,%esp
   10913:	89 45 e8             	mov    %eax,-0x18(%ebp)
    //将虚拟地址的结束地址按页大小4kb对齐, 为了不丢失原有的虚拟地址空间，所以向上对齐vend
    uint32_t vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   10916:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10919:	8b 40 04             	mov    0x4(%eax),%eax
   1091c:	68 00 10 00 00       	push   $0x1000
   10921:	50                   	push   %eax
   10922:	e8 e7 f9 ff ff       	call   1030e <up2>
   10927:	83 c4 08             	add    $0x8,%esp
   1092a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    //计算该虚拟空间需要的页数
    int page_count = (vend - vstart) / MEM_PAGE_SIZE;
   1092d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10930:	2b 45 ec             	sub    -0x14(%ebp),%eax
   10933:	c1 e8 0c             	shr    $0xc,%eax
   10936:	89 45 e0             	mov    %eax,-0x20(%ebp)

    //创建内存映射关系
    memory_creat_map(kernel_page_dir, vstart, pstart, page_count, map->privilege);
   10939:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1093c:	8b 40 0c             	mov    0xc(%eax),%eax
   1093f:	83 ec 0c             	sub    $0xc,%esp
   10942:	50                   	push   %eax
   10943:	ff 75 e0             	push   -0x20(%ebp)
   10946:	ff 75 e8             	push   -0x18(%ebp)
   10949:	ff 75 ec             	push   -0x14(%ebp)
   1094c:	68 00 40 02 00       	push   $0x24000
   10951:	e8 bd fe ff ff       	call   10813 <memory_creat_map>
   10956:	83 c4 20             	add    $0x20,%esp
    //清空内核空间对页的引用
    clear_page_ref(&paddr_alloc);
   10959:	83 ec 0c             	sub    $0xc,%esp
   1095c:	68 00 c0 01 00       	push   $0x1c000
   10961:	e8 85 fb ff ff       	call   104eb <clear_page_ref>
   10966:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < sizeof(kernal_map) / sizeof(kernal_map[0]); ++i) {
   10969:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1096d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10970:	83 f8 04             	cmp    $0x4,%eax
   10973:	0f 86 62 ff ff ff    	jbe    108db <create_kernal_table+0x12>

  }
}
   10979:	90                   	nop
   1097a:	90                   	nop
   1097b:	c9                   	leave  
   1097c:	c3                   	ret    

0001097d <memory_creat_uvm>:
/**
 * @brief 创建用户进程的虚拟内存空间，即页目录表
 * 
 * @return uint32_t 
 */
uint32_t memory_creat_uvm() {
   1097d:	55                   	push   %ebp
   1097e:	89 e5                	mov    %esp,%ebp
   10980:	83 ec 18             	sub    $0x18,%esp
  //1.分配一页作为页目录表
  pde_t *page_dir = (pde_t *)addr_alloc_page(&paddr_alloc, 1);
   10983:	83 ec 08             	sub    $0x8,%esp
   10986:	6a 01                	push   $0x1
   10988:	68 00 c0 01 00       	push   $0x1c000
   1098d:	e8 31 fc ff ff       	call   105c3 <addr_alloc_page>
   10992:	83 c4 10             	add    $0x10,%esp
   10995:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (page_dir == 0) return 0;
   10998:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1099c:	75 07                	jne    109a5 <memory_creat_uvm+0x28>
   1099e:	b8 00 00 00 00       	mov    $0x0,%eax
   109a3:	eb 5b                	jmp    10a00 <memory_creat_uvm+0x83>
  //TODO:新分配的页并未做虚拟内存映射，会触发缺页异常，需要处理,这里先将1mb以上的所有空间都映射给内核进程

  //2.将该页的内容清空
  kernel_memset((void*)page_dir, 0, MEM_PAGE_SIZE);
   109a5:	83 ec 04             	sub    $0x4,%esp
   109a8:	68 00 10 00 00       	push   $0x1000
   109ad:	6a 00                	push   $0x0
   109af:	ff 75 f0             	push   -0x10(%ebp)
   109b2:	e8 e1 82 00 00       	call   18c98 <kernel_memset>
   109b7:	83 c4 10             	add    $0x10,%esp

  //3.获取用户进程空间的第一个页目录项索引, 用户进程空间的起始地址MEM_TASK_BASE = 0x800 00000
  uint32_t user_pde_start = pde_index(MEM_TASK_BASE);
   109ba:	83 ec 0c             	sub    $0xc,%esp
   109bd:	68 00 00 00 80       	push   $0x80000000
   109c2:	e8 6a f9 ff ff       	call   10331 <pde_index>
   109c7:	83 c4 10             	add    $0x10,%esp
   109ca:	89 45 ec             	mov    %eax,-0x14(%ebp)

  //4.将用户进程空间以下的空间映射给操作系统使用，即将0~user_pde_start的pde提供给操作系统作为页目录项
  for (int i = 0; i < user_pde_start; ++i) {
   109cd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   109d4:	eb 1f                	jmp    109f5 <memory_creat_uvm+0x78>
      page_dir[i].v = kernel_page_dir[i].v; //所有进程都共享操作系统的页表
   109d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109d9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   109e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   109e3:	01 c2                	add    %eax,%edx
   109e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109e8:	8b 04 85 00 40 02 00 	mov    0x24000(,%eax,4),%eax
   109ef:	89 02                	mov    %eax,(%edx)
  for (int i = 0; i < user_pde_start; ++i) {
   109f1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   109f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109f8:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   109fb:	77 d9                	ja     109d6 <memory_creat_uvm+0x59>
  }


  return (uint32_t)page_dir;
   109fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   10a00:	c9                   	leave  
   10a01:	c3                   	ret    

00010a02 <memory_copy_uvm>:
 * 
 * @param to_page_dir 拷贝到的目标页目录表地址
 * @param from_page_dir 被拷贝的源页目录表地址
 * @return uint32_t 
 */
int memory_copy_uvm(uint32_t to_page_dir, uint32_t from_page_dir) {
   10a02:	55                   	push   %ebp
   10a03:	89 e5                	mov    %esp,%ebp
   10a05:	83 ec 38             	sub    $0x38,%esp
  //1.获取用户程序虚拟地址的起始pde索引，即0x8000 0000 的pde索引值
  uint32_t user_pde_start = pde_index(MEM_TASK_BASE);
   10a08:	68 00 00 00 80       	push   $0x80000000
   10a0d:	e8 1f f9 ff ff       	call   10331 <pde_index>
   10a12:	83 c4 04             	add    $0x4,%esp
   10a15:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  pde_t *pde = (pde_t *)from_page_dir + user_pde_start;
   10a18:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10a1b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10a22:	8b 45 0c             	mov    0xc(%ebp),%eax
   10a25:	01 d0                	add    %edx,%eax
   10a27:	89 45 f4             	mov    %eax,-0xc(%ebp)

  //2.遍历源页目录表中的每一个页目录项，拷贝给目标目录
  for (int i = user_pde_start; i < PDE_CNT; ++i, ++pde) {
   10a2a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10a2d:	89 45 f0             	mov    %eax,-0x10(%ebp)
   10a30:	e9 2a 01 00 00       	jmp    10b5f <memory_copy_uvm+0x15d>
    if (!pde->present)  //当前页目录项不存在
   10a35:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10a38:	0f b6 00             	movzbl (%eax),%eax
   10a3b:	83 e0 01             	and    $0x1,%eax
   10a3e:	84 c0                	test   %al,%al
   10a40:	0f 84 10 01 00 00    	je     10b56 <memory_copy_uvm+0x154>
      continue;

    //3.获取页目录项指向的页表的起始地址
    pte_t *pte = (pte_t*)pde_to_pt_addr(pde);
   10a46:	ff 75 f4             	push   -0xc(%ebp)
   10a49:	e8 fe f8 ff ff       	call   1034c <pde_to_pt_addr>
   10a4e:	83 c4 04             	add    $0x4,%esp
   10a51:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //4.遍历页表的页表项，进行读共享写复制的映射操作
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   10a54:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   10a5b:	e9 e7 00 00 00       	jmp    10b47 <memory_copy_uvm+0x145>
      if (!pte->present)  //当前页表项不存在
   10a60:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10a63:	0f b6 00             	movzbl (%eax),%eax
   10a66:	83 e0 01             	and    $0x1,%eax
   10a69:	84 c0                	test   %al,%al
   10a6b:	0f 84 cd 00 00 00    	je     10b3e <memory_copy_uvm+0x13c>
        continue;
      
      //5.获取该页表项对应的虚拟地址
      uint32_t vaddr = (i << 22) | (j << 12);
   10a71:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10a74:	c1 e0 16             	shl    $0x16,%eax
   10a77:	89 c2                	mov    %eax,%edx
   10a79:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10a7c:	c1 e0 0c             	shl    $0xc,%eax
   10a7f:	09 d0                	or     %edx,%eax
   10a81:	89 45 e0             	mov    %eax,-0x20(%ebp)
      
      //6.判断当前页表项指向的页是否支持写操作
      if (pte->v & PTE_W) { //7当前页支持写操作，需进行复制操作
   10a84:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10a87:	8b 00                	mov    (%eax),%eax
   10a89:	83 e0 02             	and    $0x2,%eax
   10a8c:	85 c0                	test   %eax,%eax
   10a8e:	74 6c                	je     10afc <memory_copy_uvm+0xfa>
        //7.1分配一个新的页，进行拷贝
        uint32_t page = addr_alloc_page(&paddr_alloc, 1);
   10a90:	83 ec 08             	sub    $0x8,%esp
   10a93:	6a 01                	push   $0x1
   10a95:	68 00 c0 01 00       	push   $0x1c000
   10a9a:	e8 24 fb ff ff       	call   105c3 <addr_alloc_page>
   10a9f:	83 c4 10             	add    $0x10,%esp
   10aa2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        if (page == 0)  //分配失败
   10aa5:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   10aa9:	0f 84 c4 00 00 00    	je     10b73 <memory_copy_uvm+0x171>
          goto copy_uvm_failed;
        
        //7.2在目标进程空间中记录映射关系
        int err = memory_creat_map((pde_t*)to_page_dir, vaddr, page, 1, get_pte_privilege(pte));
   10aaf:	83 ec 0c             	sub    $0xc,%esp
   10ab2:	ff 75 ec             	push   -0x14(%ebp)
   10ab5:	e8 e0 f8 ff ff       	call   1039a <get_pte_privilege>
   10aba:	83 c4 10             	add    $0x10,%esp
   10abd:	8b 55 08             	mov    0x8(%ebp),%edx
   10ac0:	83 ec 0c             	sub    $0xc,%esp
   10ac3:	50                   	push   %eax
   10ac4:	6a 01                	push   $0x1
   10ac6:	ff 75 d4             	push   -0x2c(%ebp)
   10ac9:	ff 75 e0             	push   -0x20(%ebp)
   10acc:	52                   	push   %edx
   10acd:	e8 41 fd ff ff       	call   10813 <memory_creat_map>
   10ad2:	83 c4 20             	add    $0x20,%esp
   10ad5:	89 45 d0             	mov    %eax,-0x30(%ebp)
        if (err < 0)
   10ad8:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
   10adc:	0f 88 94 00 00 00    	js     10b76 <memory_copy_uvm+0x174>
          goto copy_uvm_failed;
        
        //7.3将该页内容拷贝到目标进程空间中
        kernel_memcpy((void*)page, (void*)vaddr, MEM_PAGE_SIZE);
   10ae2:	8b 55 e0             	mov    -0x20(%ebp),%edx
   10ae5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   10ae8:	83 ec 04             	sub    $0x4,%esp
   10aeb:	68 00 10 00 00       	push   $0x1000
   10af0:	52                   	push   %edx
   10af1:	50                   	push   %eax
   10af2:	e8 52 81 00 00       	call   18c49 <kernel_memcpy>
   10af7:	83 c4 10             	add    $0x10,%esp
   10afa:	eb 43                	jmp    10b3f <memory_copy_uvm+0x13d>

      } else {  //8.当前页为只读页，直接共享该页即可，即只复制页表项即可
        //8.1获取该页的物理地址
        uint32_t page = pte_to_pg_addr(pte);
   10afc:	83 ec 0c             	sub    $0xc,%esp
   10aff:	ff 75 ec             	push   -0x14(%ebp)
   10b02:	e8 6c f8 ff ff       	call   10373 <pte_to_pg_addr>
   10b07:	83 c4 10             	add    $0x10,%esp
   10b0a:	89 45 dc             	mov    %eax,-0x24(%ebp)
        //8.2直接在目标进程空间中记录映射关系
        int err = memory_creat_map((pde_t*)to_page_dir, vaddr, page, 1, get_pte_privilege(pte));
   10b0d:	83 ec 0c             	sub    $0xc,%esp
   10b10:	ff 75 ec             	push   -0x14(%ebp)
   10b13:	e8 82 f8 ff ff       	call   1039a <get_pte_privilege>
   10b18:	83 c4 10             	add    $0x10,%esp
   10b1b:	8b 55 08             	mov    0x8(%ebp),%edx
   10b1e:	83 ec 0c             	sub    $0xc,%esp
   10b21:	50                   	push   %eax
   10b22:	6a 01                	push   $0x1
   10b24:	ff 75 dc             	push   -0x24(%ebp)
   10b27:	ff 75 e0             	push   -0x20(%ebp)
   10b2a:	52                   	push   %edx
   10b2b:	e8 e3 fc ff ff       	call   10813 <memory_creat_map>
   10b30:	83 c4 20             	add    $0x20,%esp
   10b33:	89 45 d8             	mov    %eax,-0x28(%ebp)
        if (err < 0)
   10b36:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
   10b3a:	78 3d                	js     10b79 <memory_copy_uvm+0x177>
   10b3c:	eb 01                	jmp    10b3f <memory_copy_uvm+0x13d>
        continue;
   10b3e:	90                   	nop
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   10b3f:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   10b43:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   10b47:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   10b4e:	0f 8e 0c ff ff ff    	jle    10a60 <memory_copy_uvm+0x5e>
   10b54:	eb 01                	jmp    10b57 <memory_copy_uvm+0x155>
      continue;
   10b56:	90                   	nop
  for (int i = user_pde_start; i < PDE_CNT; ++i, ++pde) {
   10b57:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10b5b:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   10b5f:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   10b66:	0f 8e c9 fe ff ff    	jle    10a35 <memory_copy_uvm+0x33>
      }

    }
  }

  return 1;
   10b6c:	b8 01 00 00 00       	mov    $0x1,%eax
   10b71:	eb 1a                	jmp    10b8d <memory_copy_uvm+0x18b>
          goto copy_uvm_failed;
   10b73:	90                   	nop
   10b74:	eb 04                	jmp    10b7a <memory_copy_uvm+0x178>
          goto copy_uvm_failed;
   10b76:	90                   	nop
   10b77:	eb 01                	jmp    10b7a <memory_copy_uvm+0x178>
          goto copy_uvm_failed;
   10b79:	90                   	nop


copy_uvm_failed:
  memory_destroy_uvm(to_page_dir);
   10b7a:	83 ec 0c             	sub    $0xc,%esp
   10b7d:	ff 75 08             	push   0x8(%ebp)
   10b80:	e8 0a 00 00 00       	call   10b8f <memory_destroy_uvm>
   10b85:	83 c4 10             	add    $0x10,%esp
  return -1;
   10b88:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10b8d:	c9                   	leave  
   10b8e:	c3                   	ret    

00010b8f <memory_destroy_uvm>:
 * @brief 销毁该页目录表对应的所有虚拟空间资源，包括映射关系与内存空间
 * 
 * @param page_dir 页目录表的地址
 * @param is_read_share 是否开启了读共享策略，1开启，0未开启
 */
void memory_destroy_uvm(uint32_t page_dir) {
   10b8f:	55                   	push   %ebp
   10b90:	89 e5                	mov    %esp,%ebp
   10b92:	83 ec 28             	sub    $0x28,%esp
  //1.获取用户进程虚拟地址的起始地址对应的该页目录项
  uint32_t user_task_start  = pde_index(MEM_TASK_BASE);
   10b95:	68 00 00 00 80       	push   $0x80000000
   10b9a:	e8 92 f7 ff ff       	call   10331 <pde_index>
   10b9f:	83 c4 04             	add    $0x4,%esp
   10ba2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  pde_t *pde = (pde_t*) page_dir + user_task_start;
   10ba5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10ba8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10baf:	8b 45 08             	mov    0x8(%ebp),%eax
   10bb2:	01 d0                	add    %edx,%eax
   10bb4:	89 45 f4             	mov    %eax,-0xc(%ebp)

  //2.遍历每一个页目录项，清理对应资源
  for (int i = user_task_start; i < PDE_CNT; ++i, ++pde) {
   10bb7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10bba:	89 45 f0             	mov    %eax,-0x10(%ebp)
   10bbd:	e9 8f 00 00 00       	jmp    10c51 <memory_destroy_uvm+0xc2>
    if (!pde->present) 
   10bc2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10bc5:	0f b6 00             	movzbl (%eax),%eax
   10bc8:	83 e0 01             	and    $0x1,%eax
   10bcb:	84 c0                	test   %al,%al
   10bcd:	74 79                	je     10c48 <memory_destroy_uvm+0xb9>
        continue;

    //3.获取页目录项对应的页表的起始地址
    pte_t *pte = (pte_t*)pde_to_pt_addr(pde);
   10bcf:	ff 75 f4             	push   -0xc(%ebp)
   10bd2:	e8 75 f7 ff ff       	call   1034c <pde_to_pt_addr>
   10bd7:	83 c4 04             	add    $0x4,%esp
   10bda:	89 45 ec             	mov    %eax,-0x14(%ebp)
    
    //4.遍历所有页表项，清理对应资源
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   10bdd:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   10be4:	eb 36                	jmp    10c1c <memory_destroy_uvm+0x8d>
      if (!pte->present)
   10be6:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10be9:	0f b6 00             	movzbl (%eax),%eax
   10bec:	83 e0 01             	and    $0x1,%eax
   10bef:	84 c0                	test   %al,%al
   10bf1:	74 20                	je     10c13 <memory_destroy_uvm+0x84>
        continue;
      
      //5.释放该物理页
      addr_free_page(&paddr_alloc, pte_to_pg_addr(pte), 1);
   10bf3:	ff 75 ec             	push   -0x14(%ebp)
   10bf6:	e8 78 f7 ff ff       	call   10373 <pte_to_pg_addr>
   10bfb:	83 c4 04             	add    $0x4,%esp
   10bfe:	83 ec 04             	sub    $0x4,%esp
   10c01:	6a 01                	push   $0x1
   10c03:	50                   	push   %eax
   10c04:	68 00 c0 01 00       	push   $0x1c000
   10c09:	e8 1c fa ff ff       	call   1062a <addr_free_page>
   10c0e:	83 c4 10             	add    $0x10,%esp
   10c11:	eb 01                	jmp    10c14 <memory_destroy_uvm+0x85>
        continue;
   10c13:	90                   	nop
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   10c14:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   10c18:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   10c1c:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   10c23:	7e c1                	jle    10be6 <memory_destroy_uvm+0x57>
    }

    //6.释放存储该页表的物理页
    addr_free_page(&paddr_alloc, pde_to_pt_addr(pde), 1);
   10c25:	83 ec 0c             	sub    $0xc,%esp
   10c28:	ff 75 f4             	push   -0xc(%ebp)
   10c2b:	e8 1c f7 ff ff       	call   1034c <pde_to_pt_addr>
   10c30:	83 c4 10             	add    $0x10,%esp
   10c33:	83 ec 04             	sub    $0x4,%esp
   10c36:	6a 01                	push   $0x1
   10c38:	50                   	push   %eax
   10c39:	68 00 c0 01 00       	push   $0x1c000
   10c3e:	e8 e7 f9 ff ff       	call   1062a <addr_free_page>
   10c43:	83 c4 10             	add    $0x10,%esp
   10c46:	eb 01                	jmp    10c49 <memory_destroy_uvm+0xba>
        continue;
   10c48:	90                   	nop
  for (int i = user_task_start; i < PDE_CNT; ++i, ++pde) {
   10c49:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10c4d:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   10c51:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   10c58:	0f 8e 64 ff ff ff    	jle    10bc2 <memory_destroy_uvm+0x33>
  }


  //7.释放存储该页目录表的物理页
  addr_free_page(&paddr_alloc, page_dir, 1);
   10c5e:	83 ec 04             	sub    $0x4,%esp
   10c61:	6a 01                	push   $0x1
   10c63:	ff 75 08             	push   0x8(%ebp)
   10c66:	68 00 c0 01 00       	push   $0x1c000
   10c6b:	e8 ba f9 ff ff       	call   1062a <addr_free_page>
   10c70:	83 c4 10             	add    $0x10,%esp
}
   10c73:	90                   	nop
   10c74:	c9                   	leave  
   10c75:	c3                   	ret    

00010c76 <memory_init>:
/**
 * @brief  初始化化内存
 *
 * @param boot_info cpu在实模式下检测到的可用内存对象
 */
void memory_init(boot_info_t *boot_info) {
   10c76:	55                   	push   %ebp
   10c77:	89 e5                	mov    %esp,%ebp
   10c79:	83 ec 18             	sub    $0x18,%esp

  
    //声明紧邻内核first_task段后面的空间地址，用于存储位图，该变量定义在kernel.lds中
    extern char mem_free_start;

    log_printf("memory init\n");
   10c7c:	83 ec 0c             	sub    $0xc,%esp
   10c7f:	68 c7 95 01 00       	push   $0x195c7
   10c84:	e8 0c 88 00 00       	call   19495 <log_printf>
   10c89:	83 c4 10             	add    $0x10,%esp

    log_printf("mem_free_start: 0x%x\n", &mem_free_start);
   10c8c:	83 ec 08             	sub    $0x8,%esp
   10c8f:	68 96 a3 07 00       	push   $0x7a396
   10c94:	68 d4 95 01 00       	push   $0x195d4
   10c99:	e8 f7 87 00 00       	call   19495 <log_printf>
   10c9e:	83 c4 10             	add    $0x10,%esp

    show_mem_info(boot_info);
   10ca1:	83 ec 0c             	sub    $0xc,%esp
   10ca4:	ff 75 08             	push   0x8(%ebp)
   10ca7:	e8 1a fa ff ff       	call   106c6 <show_mem_info>
   10cac:	83 c4 10             	add    $0x10,%esp
    
    //去除保护模式下1mb大小后可用的内存空间大小
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   10caf:	83 ec 0c             	sub    $0xc,%esp
   10cb2:	ff 75 08             	push   0x8(%ebp)
   10cb5:	e8 72 fa ff ff       	call   1072c <total_mem_size>
   10cba:	83 c4 10             	add    $0x10,%esp
   10cbd:	2d 00 00 10 00       	sub    $0x100000,%eax
   10cc2:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将可用空间大小下调到页大小的整数倍
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);
   10cc5:	83 ec 08             	sub    $0x8,%esp
   10cc8:	68 00 10 00 00       	push   $0x1000
   10ccd:	ff 75 f4             	push   -0xc(%ebp)
   10cd0:	e8 2c f6 ff ff       	call   10301 <down2>
   10cd5:	83 c4 10             	add    $0x10,%esp
   10cd8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    log_printf("free memory: 0x%x, size: 0x%x\n", MEM_EXT_START, mem_up1MB_free);
   10cdb:	83 ec 04             	sub    $0x4,%esp
   10cde:	ff 75 f4             	push   -0xc(%ebp)
   10ce1:	68 00 00 10 00       	push   $0x100000
   10ce6:	68 ec 95 01 00       	push   $0x195ec
   10ceb:	e8 a5 87 00 00       	call   19495 <log_printf>
   10cf0:	83 c4 10             	add    $0x10,%esp

    //mem_free_start被分配的地址在链接文件中定义，紧邻着first_task段
    uint8_t *mem_free = (uint8_t*)&mem_free_start;
   10cf3:	c7 45 f0 96 a3 07 00 	movl   $0x7a396,-0x10(%ebp)

    //用paddr_alloc，内存页分配对象管理1mb以上的所有空闲空间，页大小为MEM_PAGE_SIZE=4kb
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   10cfa:	83 ec 0c             	sub    $0xc,%esp
   10cfd:	68 00 10 00 00       	push   $0x1000
   10d02:	ff 75 f4             	push   -0xc(%ebp)
   10d05:	68 00 00 10 00       	push   $0x100000
   10d0a:	ff 75 f0             	push   -0x10(%ebp)
   10d0d:	68 00 c0 01 00       	push   $0x1c000
   10d12:	e8 25 f8 ff ff       	call   1053c <addr_alloc_init>
   10d17:	83 c4 20             	add    $0x20,%esp

    //跳过存储位图的内存区域, 位图的每一位表示一个页，计算位图所站的字节数即可跳过该区域
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);  
   10d1a:	a1 20 c0 01 00       	mov    0x1c020,%eax
   10d1f:	c1 e8 0c             	shr    $0xc,%eax
   10d22:	83 ec 0c             	sub    $0xc,%esp
   10d25:	50                   	push   %eax
   10d26:	e8 84 7a 00 00       	call   187af <bitmap_byte_count>
   10d2b:	83 c4 10             	add    $0x10,%esp
   10d2e:	01 45 f0             	add    %eax,-0x10(%ebp)

    //判断mem_free是否已越过可用数据区
    ASSERT(mem_free < (uint8_t*)MEM_EBDA_START);
   10d31:	81 7d f0 ff fb 09 00 	cmpl   $0x9fbff,-0x10(%ebp)
   10d38:	76 1c                	jbe    10d56 <memory_init+0xe0>
   10d3a:	68 0c 96 01 00       	push   $0x1960c
   10d3f:	68 f0 96 01 00       	push   $0x196f0
   10d44:	68 fe 01 00 00       	push   $0x1fe
   10d49:	68 90 95 01 00       	push   $0x19590
   10d4e:	e8 26 7a 00 00       	call   18779 <pannic>
   10d53:	83 c4 10             	add    $0x10,%esp
    
    //创建内核的页表映射
    create_kernal_table();
   10d56:	e8 6e fb ff ff       	call   108c9 <create_kernal_table>

    //设置内核的页目录表到CR3寄存器，并开启分页机制
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   10d5b:	b8 00 40 02 00       	mov    $0x24000,%eax
   10d60:	83 ec 0c             	sub    $0xc,%esp
   10d63:	50                   	push   %eax
   10d64:	e8 40 f6 ff ff       	call   103a9 <mmu_set_page_dir>
   10d69:	83 c4 10             	add    $0x10,%esp
}
   10d6c:	90                   	nop
   10d6d:	c9                   	leave  
   10d6e:	c3                   	ret    

00010d6f <memory_alloc_for_page_dir>:
 * @param vaddr 进程各个代码段的起始虚拟地址
 * @param alloc_size 为进程分配的页空间大小
 * @param priority 进程页空间的权限
 * @return int 
 */
int memory_alloc_for_page_dir(uint32_t page_dir, uint32_t vaddr, uint32_t alloc_size, uint32_t privilege) {
   10d6f:	55                   	push   %ebp
   10d70:	89 e5                	mov    %esp,%ebp
   10d72:	83 ec 28             	sub    $0x28,%esp
  //1.记录当前分配的虚拟页的起始地址
  uint32_t curr_vaddr = vaddr;
   10d75:	8b 45 0c             	mov    0xc(%ebp),%eax
   10d78:	89 45 f4             	mov    %eax,-0xc(%ebp)
  //2.计算需要分配多少页
  int page_count = up2(alloc_size, MEM_PAGE_SIZE) / MEM_PAGE_SIZE;
   10d7b:	68 00 10 00 00       	push   $0x1000
   10d80:	ff 75 10             	push   0x10(%ebp)
   10d83:	e8 86 f5 ff ff       	call   1030e <up2>
   10d88:	83 c4 08             	add    $0x8,%esp
   10d8b:	c1 e8 0c             	shr    $0xc,%eax
   10d8e:	89 45 ec             	mov    %eax,-0x14(%ebp)

  //3.逐页进行映射
  for (int i = 0; i < page_count; ++i) {
   10d91:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   10d98:	eb 7a                	jmp    10e14 <memory_alloc_for_page_dir+0xa5>
    uint32_t paddr = addr_alloc_page(&paddr_alloc, 1);
   10d9a:	83 ec 08             	sub    $0x8,%esp
   10d9d:	6a 01                	push   $0x1
   10d9f:	68 00 c0 01 00       	push   $0x1c000
   10da4:	e8 1a f8 ff ff       	call   105c3 <addr_alloc_page>
   10da9:	83 c4 10             	add    $0x10,%esp
   10dac:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (paddr == 0) {//分配失败
   10daf:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10db3:	75 17                	jne    10dcc <memory_alloc_for_page_dir+0x5d>
      log_printf("mem alloc failed. no memory\n");
   10db5:	83 ec 0c             	sub    $0xc,%esp
   10db8:	68 30 96 01 00       	push   $0x19630
   10dbd:	e8 d3 86 00 00       	call   19495 <log_printf>
   10dc2:	83 c4 10             	add    $0x10,%esp
      //TODO:当分配失败时应该将之前分配的页全部归还，且将映射关系也全部解除
      return 0;
   10dc5:	b8 00 00 00 00       	mov    $0x0,%eax
   10dca:	eb 59                	jmp    10e25 <memory_alloc_for_page_dir+0xb6>
    }

    int err = memory_creat_map((pde_t*)page_dir, curr_vaddr, paddr, 1, privilege);
   10dcc:	8b 45 08             	mov    0x8(%ebp),%eax
   10dcf:	83 ec 0c             	sub    $0xc,%esp
   10dd2:	ff 75 14             	push   0x14(%ebp)
   10dd5:	6a 01                	push   $0x1
   10dd7:	ff 75 e8             	push   -0x18(%ebp)
   10dda:	ff 75 f4             	push   -0xc(%ebp)
   10ddd:	50                   	push   %eax
   10dde:	e8 30 fa ff ff       	call   10813 <memory_creat_map>
   10de3:	83 c4 20             	add    $0x20,%esp
   10de6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (err < 0) {//分配失败
   10de9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10ded:	79 1a                	jns    10e09 <memory_alloc_for_page_dir+0x9a>
      log_printf("create memory failed. err = %d\n", err);
   10def:	83 ec 08             	sub    $0x8,%esp
   10df2:	ff 75 e4             	push   -0x1c(%ebp)
   10df5:	68 50 96 01 00       	push   $0x19650
   10dfa:	e8 96 86 00 00       	call   19495 <log_printf>
   10dff:	83 c4 10             	add    $0x10,%esp
      //TODO:当分配失败时应该将之前分配的页全部归还，且将映射关系也全部解除
      return 0;
   10e02:	b8 00 00 00 00       	mov    $0x0,%eax
   10e07:	eb 1c                	jmp    10e25 <memory_alloc_for_page_dir+0xb6>
    }

    curr_vaddr += MEM_PAGE_SIZE;
   10e09:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
  for (int i = 0; i < page_count; ++i) {
   10e10:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10e14:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10e17:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   10e1a:	0f 8c 7a ff ff ff    	jl     10d9a <memory_alloc_for_page_dir+0x2b>
  }

  return 0;
   10e20:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10e25:	c9                   	leave  
   10e26:	c3                   	ret    

00010e27 <memory_alloc_page_for>:
 * @param vaddr 待分配空间的起始地址
 * @param alloc_size 为其分配的空间大小
 * @param privilege 对应页空间的权限
 * @return int 错误码
 */
int memory_alloc_page_for(uint32_t vaddr, uint32_t alloc_size, uint32_t privilege) {
   10e27:	55                   	push   %ebp
   10e28:	89 e5                	mov    %esp,%ebp
   10e2a:	83 ec 08             	sub    $0x8,%esp
  return memory_alloc_for_page_dir(task_current()->tss.cr3, vaddr, alloc_size, privilege);
   10e2d:	e8 7f 0b 00 00       	call   119b1 <task_current>
   10e32:	8b 40 78             	mov    0x78(%eax),%eax
   10e35:	ff 75 10             	push   0x10(%ebp)
   10e38:	ff 75 0c             	push   0xc(%ebp)
   10e3b:	ff 75 08             	push   0x8(%ebp)
   10e3e:	50                   	push   %eax
   10e3f:	e8 2b ff ff ff       	call   10d6f <memory_alloc_for_page_dir>
   10e44:	83 c4 10             	add    $0x10,%esp
}
   10e47:	c9                   	leave  
   10e48:	c3                   	ret    

00010e49 <curr_page_dir>:
/**
 * @brief 返回当前进程的页目录表的地址
 * 
 * @return pde_t* 
 */
static pde_t* curr_page_dir() {
   10e49:	55                   	push   %ebp
   10e4a:	89 e5                	mov    %esp,%ebp
   10e4c:	83 ec 08             	sub    $0x8,%esp
  return (pde_t*)(task_current()->tss.cr3);
   10e4f:	e8 5d 0b 00 00       	call   119b1 <task_current>
   10e54:	8b 40 78             	mov    0x78(%eax),%eax
}
   10e57:	c9                   	leave  
   10e58:	c3                   	ret    

00010e59 <memory_alloc_page>:
/**
 * @brief 为进程的内核空间分配一页内存，需特权级0访问
 * 
 * @return uint32_t 内存的起始地址
 */
uint32_t memory_alloc_page() {
   10e59:	55                   	push   %ebp
   10e5a:	89 e5                	mov    %esp,%ebp
   10e5c:	83 ec 18             	sub    $0x18,%esp
  //因为0x100000 ~ 0x8000 0000,即低 1mb~2gb都由操作系统内核使用，
  //操作系统内核已对整个内存空间进行了一一映射，而每个程序的2gb以下空间都使用操作系统的虚拟页表
  //所以直接返回该页物理地址，也就是该页在操作系统虚拟地址空间中的虚拟地址
  //需要注意的是后续访问该页需要0特权级，因为访问的是内核空间
  uint32_t addr = addr_alloc_page(&paddr_alloc, 1);
   10e5f:	83 ec 08             	sub    $0x8,%esp
   10e62:	6a 01                	push   $0x1
   10e64:	68 00 c0 01 00       	push   $0x1c000
   10e69:	e8 55 f7 ff ff       	call   105c3 <addr_alloc_page>
   10e6e:	83 c4 10             	add    $0x10,%esp
   10e71:	89 45 f4             	mov    %eax,-0xc(%ebp)
  return addr;
   10e74:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   10e77:	c9                   	leave  
   10e78:	c3                   	ret    

00010e79 <memory_free_page>:
/**
 * @brief 释放一页内存空间
 * 
 * @param addr 
 */
void memory_free_page(uint32_t addr) {
   10e79:	55                   	push   %ebp
   10e7a:	89 e5                	mov    %esp,%ebp
   10e7c:	83 ec 18             	sub    $0x18,%esp
  if (addr < MEM_TASK_BASE) { //释放内核空间的一页内存
   10e7f:	8b 45 08             	mov    0x8(%ebp),%eax
   10e82:	85 c0                	test   %eax,%eax
   10e84:	78 17                	js     10e9d <memory_free_page+0x24>
    addr_free_page(&paddr_alloc, addr, 1);  //因为内核空间为一一映射关系，虚拟地址即为物理地址,且不需要解除映射关系
   10e86:	83 ec 04             	sub    $0x4,%esp
   10e89:	6a 01                	push   $0x1
   10e8b:	ff 75 08             	push   0x8(%ebp)
   10e8e:	68 00 c0 01 00       	push   $0x1c000
   10e93:	e8 92 f7 ff ff       	call   1062a <addr_free_page>
   10e98:	83 c4 10             	add    $0x10,%esp

    //3.将页表项清空，解除映射关系
    pte->v = 0;
  }

}
   10e9b:	eb 72                	jmp    10f0f <memory_free_page+0x96>
    pte_t *pte = find_pte(curr_page_dir(), addr, 0);
   10e9d:	e8 a7 ff ff ff       	call   10e49 <curr_page_dir>
   10ea2:	83 ec 04             	sub    $0x4,%esp
   10ea5:	6a 00                	push   $0x0
   10ea7:	ff 75 08             	push   0x8(%ebp)
   10eaa:	50                   	push   %eax
   10eab:	e8 b3 f8 ff ff       	call   10763 <find_pte>
   10eb0:	83 c4 10             	add    $0x10,%esp
   10eb3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT(pte != (pte_t*)0 && pte->present);
   10eb6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10eba:	74 0d                	je     10ec9 <memory_free_page+0x50>
   10ebc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10ebf:	0f b6 00             	movzbl (%eax),%eax
   10ec2:	83 e0 01             	and    $0x1,%eax
   10ec5:	84 c0                	test   %al,%al
   10ec7:	75 1c                	jne    10ee5 <memory_free_page+0x6c>
   10ec9:	68 70 96 01 00       	push   $0x19670
   10ece:	68 fc 96 01 00       	push   $0x196fc
   10ed3:	68 5f 02 00 00       	push   $0x25f
   10ed8:	68 90 95 01 00       	push   $0x19590
   10edd:	e8 97 78 00 00       	call   18779 <pannic>
   10ee2:	83 c4 10             	add    $0x10,%esp
    addr_free_page(&paddr_alloc, pte_to_pg_addr(pte), 1);
   10ee5:	83 ec 0c             	sub    $0xc,%esp
   10ee8:	ff 75 f4             	push   -0xc(%ebp)
   10eeb:	e8 83 f4 ff ff       	call   10373 <pte_to_pg_addr>
   10ef0:	83 c4 10             	add    $0x10,%esp
   10ef3:	83 ec 04             	sub    $0x4,%esp
   10ef6:	6a 01                	push   $0x1
   10ef8:	50                   	push   %eax
   10ef9:	68 00 c0 01 00       	push   $0x1c000
   10efe:	e8 27 f7 ff ff       	call   1062a <addr_free_page>
   10f03:	83 c4 10             	add    $0x10,%esp
    pte->v = 0;
   10f06:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f09:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   10f0f:	90                   	nop
   10f10:	c9                   	leave  
   10f11:	c3                   	ret    

00010f12 <memory_get_paddr>:
 * 
 * @param page_dir 
 * @param vaddr 
 * @return uint32_t 
 */
uint32_t memory_get_paddr(uint32_t page_dir, uint32_t vaddr) {
   10f12:	55                   	push   %ebp
   10f13:	89 e5                	mov    %esp,%ebp
   10f15:	83 ec 18             	sub    $0x18,%esp
  //查找vaddr对应的页表项
  pte_t * pte = find_pte((pde_t*)page_dir, vaddr, 0);
   10f18:	8b 45 08             	mov    0x8(%ebp),%eax
   10f1b:	83 ec 04             	sub    $0x4,%esp
   10f1e:	6a 00                	push   $0x0
   10f20:	ff 75 0c             	push   0xc(%ebp)
   10f23:	50                   	push   %eax
   10f24:	e8 3a f8 ff ff       	call   10763 <find_pte>
   10f29:	83 c4 10             	add    $0x10,%esp
   10f2c:	89 45 f4             	mov    %eax,-0xc(%ebp)

  //若没有找到该页表项或该页表项还不存在，则返回0
  if (!pte || !pte->present) {
   10f2f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10f33:	74 0d                	je     10f42 <memory_get_paddr+0x30>
   10f35:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f38:	0f b6 00             	movzbl (%eax),%eax
   10f3b:	83 e0 01             	and    $0x1,%eax
   10f3e:	84 c0                	test   %al,%al
   10f40:	75 07                	jne    10f49 <memory_get_paddr+0x37>
    return 0;
   10f42:	b8 00 00 00 00       	mov    $0x0,%eax
   10f47:	eb 1a                	jmp    10f63 <memory_get_paddr+0x51>
  }

  //找到并存在该页表项，返回绑定的物理地址
  return pte_to_pg_addr(pte) | (vaddr & (MEM_PAGE_SIZE - 1));
   10f49:	83 ec 0c             	sub    $0xc,%esp
   10f4c:	ff 75 f4             	push   -0xc(%ebp)
   10f4f:	e8 1f f4 ff ff       	call   10373 <pte_to_pg_addr>
   10f54:	83 c4 10             	add    $0x10,%esp
   10f57:	89 c2                	mov    %eax,%edx
   10f59:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f5c:	25 ff 0f 00 00       	and    $0xfff,%eax
   10f61:	09 d0                	or     %edx,%eax

}
   10f63:	c9                   	leave  
   10f64:	c3                   	ret    

00010f65 <memory_copy_uvm_data>:
 * @param to_addr 目标虚拟空间的起始地址
 * @param to_page_dir 目标虚拟空间的页目录表
 * @param from_addr 当前虚拟空间中的源地址
 * @param size 拷贝的大小
 */
int memory_copy_uvm_data(uint32_t to_vaddr, uint32_t to_page_dir, uint32_t from_vaddr, uint32_t size) {
   10f65:	55                   	push   %ebp
   10f66:	89 e5                	mov    %esp,%ebp
   10f68:	83 ec 18             	sub    $0x18,%esp

  //由于虚拟地址空间是连续的而物理地址空间不一定，所以需要一页一页的单独拷贝
  while (size > 0) {
   10f6b:	eb 6e                	jmp    10fdb <memory_copy_uvm_data+0x76>
    //1.获取to_vaddr对应的物理地址
    uint32_t to_paddr = memory_get_paddr(to_page_dir, to_vaddr);
   10f6d:	83 ec 08             	sub    $0x8,%esp
   10f70:	ff 75 08             	push   0x8(%ebp)
   10f73:	ff 75 0c             	push   0xc(%ebp)
   10f76:	e8 97 ff ff ff       	call   10f12 <memory_get_paddr>
   10f7b:	83 c4 10             	add    $0x10,%esp
   10f7e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (to_paddr == 0) {
   10f81:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10f85:	75 07                	jne    10f8e <memory_copy_uvm_data+0x29>
      return -1;
   10f87:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10f8c:	eb 58                	jmp    10fe6 <memory_copy_uvm_data+0x81>
    }

    //2.获取to_paddr所在的物理页可以写入的空间大小
    //即从to_paddr到该页的末尾的空间大小
    uint32_t offset = (MEM_PAGE_SIZE - 1) & to_paddr;
   10f8e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10f91:	25 ff 0f 00 00       	and    $0xfff,%eax
   10f96:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32_t curr_size = MEM_PAGE_SIZE - offset;
   10f99:	b8 00 10 00 00       	mov    $0x1000,%eax
   10f9e:	2b 45 ec             	sub    -0x14(%ebp),%eax
   10fa1:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //3.判断size是否  < curr_size
    if (size < curr_size) { //size < curr_size则在当前物理页拷贝szie个字节即可
   10fa4:	8b 45 14             	mov    0x14(%ebp),%eax
   10fa7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
   10faa:	73 06                	jae    10fb2 <memory_copy_uvm_data+0x4d>
      curr_size = size;
   10fac:	8b 45 14             	mov    0x14(%ebp),%eax
   10faf:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    //4.拷贝内容并更新到下一个需要拷贝的地方
    kernel_memcpy((void*)to_paddr, (void*)from_vaddr, curr_size);
   10fb2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   10fb5:	8b 55 10             	mov    0x10(%ebp),%edx
   10fb8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10fbb:	83 ec 04             	sub    $0x4,%esp
   10fbe:	51                   	push   %ecx
   10fbf:	52                   	push   %edx
   10fc0:	50                   	push   %eax
   10fc1:	e8 83 7c 00 00       	call   18c49 <kernel_memcpy>
   10fc6:	83 c4 10             	add    $0x10,%esp
    size -= curr_size;
   10fc9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10fcc:	29 45 14             	sub    %eax,0x14(%ebp)
    to_vaddr += curr_size;
   10fcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10fd2:	01 45 08             	add    %eax,0x8(%ebp)
    from_vaddr += curr_size;
   10fd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10fd8:	01 45 10             	add    %eax,0x10(%ebp)
  while (size > 0) {
   10fdb:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   10fdf:	75 8c                	jne    10f6d <memory_copy_uvm_data+0x8>

  }
  
  return 0;
   10fe1:	b8 00 00 00 00       	mov    $0x0,%eax

}
   10fe6:	c9                   	leave  
   10fe7:	c3                   	ret    

00010fe8 <sys_sbrk>:
 * @brief 拓展堆区内存
 * 
 * @param incr 增长指定字节
 * @return char* 
 */
char *sys_sbrk(int incr) {
   10fe8:	55                   	push   %ebp
   10fe9:	89 e5                	mov    %esp,%ebp
   10feb:	83 ec 38             	sub    $0x38,%esp
  ASSERT(incr >= 0); //只处理堆区内存增加的情况
   10fee:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10ff2:	79 1c                	jns    11010 <sys_sbrk+0x28>
   10ff4:	68 91 96 01 00       	push   $0x19691
   10ff9:	68 10 97 01 00       	push   $0x19710
   10ffe:	68 ae 02 00 00       	push   $0x2ae
   11003:	68 90 95 01 00       	push   $0x19590
   11008:	e8 6c 77 00 00       	call   18779 <pannic>
   1100d:	83 c4 10             	add    $0x10,%esp
  task_t *task = task_current();
   11010:	e8 9c 09 00 00       	call   119b1 <task_current>
   11015:	89 45 f0             	mov    %eax,-0x10(%ebp)
  char * pre_heap_end = (char *)task->heap_end;
   11018:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1101b:	8b 40 14             	mov    0x14(%eax),%eax
   1101e:	89 45 ec             	mov    %eax,-0x14(%ebp)
  int pre_incr = incr;
   11021:	8b 45 08             	mov    0x8(%ebp),%eax
   11024:	89 45 e8             	mov    %eax,-0x18(%ebp)

  if (incr == 0) {
   11027:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1102b:	75 1b                	jne    11048 <sys_sbrk+0x60>
    log_printf("sbrk(0): end=0x%x\n", pre_heap_end);
   1102d:	83 ec 08             	sub    $0x8,%esp
   11030:	ff 75 ec             	push   -0x14(%ebp)
   11033:	68 9b 96 01 00       	push   $0x1969b
   11038:	e8 58 84 00 00       	call   19495 <log_printf>
   1103d:	83 c4 10             	add    $0x10,%esp
    return pre_heap_end;
   11040:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11043:	e9 c4 00 00 00       	jmp    1110c <sys_sbrk+0x124>
  }

  uint32_t start = task->heap_end;  //堆区原始末尾位置
   11048:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1104b:	8b 40 14             	mov    0x14(%eax),%eax
   1104e:	89 45 f4             	mov    %eax,-0xc(%ebp)
  uint32_t end = start + incr;  //需要拓展到的末尾位置
   11051:	8b 55 08             	mov    0x8(%ebp),%edx
   11054:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11057:	01 d0                	add    %edx,%eax
   11059:	89 45 e4             	mov    %eax,-0x1c(%ebp)

  uint32_t start_offset = start % MEM_PAGE_SIZE;  //获取末尾位置在当前页内的偏移量
   1105c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1105f:	25 ff 0f 00 00       	and    $0xfff,%eax
   11064:	89 45 e0             	mov    %eax,-0x20(%ebp)
  if (start_offset) { //先将当前页的剩余空间分配出去
   11067:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   1106b:	74 3b                	je     110a8 <sys_sbrk+0xc0>
    if (start_offset + incr <= MEM_PAGE_SIZE) { //当前页剩余内存可供分配
   1106d:	8b 55 08             	mov    0x8(%ebp),%edx
   11070:	8b 45 e0             	mov    -0x20(%ebp),%eax
   11073:	01 d0                	add    %edx,%eax
   11075:	3d 00 10 00 00       	cmp    $0x1000,%eax
   1107a:	77 12                	ja     1108e <sys_sbrk+0xa6>
      task->heap_end = end; 
   1107c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1107f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   11082:	89 50 14             	mov    %edx,0x14(%eax)
      incr = 0;
   11085:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
   1108c:	eb 1a                	jmp    110a8 <sys_sbrk+0xc0>
    } else {  //当前页剩余内存不够分配
      uint32_t curr_size = MEM_PAGE_SIZE - start_offset;  //获取当前页剩余大小
   1108e:	b8 00 10 00 00       	mov    $0x1000,%eax
   11093:	2b 45 e0             	sub    -0x20(%ebp),%eax
   11096:	89 45 dc             	mov    %eax,-0x24(%ebp)
      //将当前页剩余内存全部分配出
      start += curr_size;
   11099:	8b 45 dc             	mov    -0x24(%ebp),%eax
   1109c:	01 45 f4             	add    %eax,-0xc(%ebp)
      incr -= curr_size;
   1109f:	8b 45 08             	mov    0x8(%ebp),%eax
   110a2:	2b 45 dc             	sub    -0x24(%ebp),%eax
   110a5:	89 45 08             	mov    %eax,0x8(%ebp)
    }
  }

  if (incr) { //还需要继续拓展
   110a8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   110ac:	74 3c                	je     110ea <sys_sbrk+0x102>
    uint32_t curr_size = end - start; //还需拓展的大小
   110ae:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   110b1:	2b 45 f4             	sub    -0xc(%ebp),%eax
   110b4:	89 45 d8             	mov    %eax,-0x28(%ebp)
    int err = memory_alloc_page_for(start, curr_size, PTE_P | PTE_U |  PTE_W);  //为该部分内存创建映射关系
   110b7:	83 ec 04             	sub    $0x4,%esp
   110ba:	6a 07                	push   $0x7
   110bc:	ff 75 d8             	push   -0x28(%ebp)
   110bf:	ff 75 f4             	push   -0xc(%ebp)
   110c2:	e8 60 fd ff ff       	call   10e27 <memory_alloc_page_for>
   110c7:	83 c4 10             	add    $0x10,%esp
   110ca:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    if (err < 0) {
   110cd:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   110d1:	79 17                	jns    110ea <sys_sbrk+0x102>
      log_printf("sbrk: alloc mem failed.\n");
   110d3:	83 ec 0c             	sub    $0xc,%esp
   110d6:	68 ae 96 01 00       	push   $0x196ae
   110db:	e8 b5 83 00 00       	call   19495 <log_printf>
   110e0:	83 c4 10             	add    $0x10,%esp
      return (char*)-1;
   110e3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   110e8:	eb 22                	jmp    1110c <sys_sbrk+0x124>
    }

  }

  log_printf("sbrk(%d): end=0x%x\n", pre_incr, end);
   110ea:	83 ec 04             	sub    $0x4,%esp
   110ed:	ff 75 e4             	push   -0x1c(%ebp)
   110f0:	ff 75 e8             	push   -0x18(%ebp)
   110f3:	68 c7 96 01 00       	push   $0x196c7
   110f8:	e8 98 83 00 00       	call   19495 <log_printf>
   110fd:	83 c4 10             	add    $0x10,%esp
  task->heap_end = end;
   11100:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11103:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   11106:	89 50 14             	mov    %edx,0x14(%eax)

  return (char*)pre_heap_end;
   11109:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1110c:	c9                   	leave  
   1110d:	c3                   	ret    

0001110e <list_node_init>:
    list_node_t * first;
    list_node_t * last;
    int size;
}list_t;

static inline void list_node_init(list_node_t *node) {
   1110e:	55                   	push   %ebp
   1110f:	89 e5                	mov    %esp,%ebp
   11111:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   11114:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11118:	75 19                	jne    11133 <list_node_init+0x25>
   1111a:	68 1c 97 01 00       	push   $0x1971c
   1111f:	68 d8 98 01 00       	push   $0x198d8
   11124:	6a 20                	push   $0x20
   11126:	68 34 97 01 00       	push   $0x19734
   1112b:	e8 49 76 00 00       	call   18779 <pannic>
   11130:	83 c4 10             	add    $0x10,%esp
    node->pre = node->next = (list_node_t*)0;
   11133:	8b 45 08             	mov    0x8(%ebp),%eax
   11136:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1113d:	8b 45 08             	mov    0x8(%ebp),%eax
   11140:	8b 50 04             	mov    0x4(%eax),%edx
   11143:	8b 45 08             	mov    0x8(%ebp),%eax
   11146:	89 10                	mov    %edx,(%eax)
}
   11148:	90                   	nop
   11149:	c9                   	leave  
   1114a:	c3                   	ret    

0001114b <list_node_next>:
    ASSERT(node != (list_node_t*)0);

    return node->pre;
}

static inline list_node_t *list_node_next(list_node_t *node) {
   1114b:	55                   	push   %ebp
   1114c:	89 e5                	mov    %esp,%ebp
   1114e:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   11151:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11155:	75 19                	jne    11170 <list_node_next+0x25>
   11157:	68 1c 97 01 00       	push   $0x1971c
   1115c:	68 38 99 01 00       	push   $0x19938
   11161:	6a 2b                	push   $0x2b
   11163:	68 34 97 01 00       	push   $0x19734
   11168:	e8 0c 76 00 00       	call   18779 <pannic>
   1116d:	83 c4 10             	add    $0x10,%esp

    return node->next;
   11170:	8b 45 08             	mov    0x8(%ebp),%eax
   11173:	8b 40 04             	mov    0x4(%eax),%eax
}
   11176:	c9                   	leave  
   11177:	c3                   	ret    

00011178 <list_init>:

static inline void list_init(list_t *list) {
   11178:	55                   	push   %ebp
   11179:	89 e5                	mov    %esp,%ebp
   1117b:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1117e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11182:	75 19                	jne    1119d <list_init+0x25>
   11184:	68 72 97 01 00       	push   $0x19772
   11189:	68 e8 98 01 00       	push   $0x198e8
   1118e:	6a 31                	push   $0x31
   11190:	68 34 97 01 00       	push   $0x19734
   11195:	e8 df 75 00 00       	call   18779 <pannic>
   1119a:	83 c4 10             	add    $0x10,%esp

    list->first = list->last = (list_node_t*)0;
   1119d:	8b 45 08             	mov    0x8(%ebp),%eax
   111a0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   111a7:	8b 45 08             	mov    0x8(%ebp),%eax
   111aa:	8b 50 04             	mov    0x4(%eax),%edx
   111ad:	8b 45 08             	mov    0x8(%ebp),%eax
   111b0:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   111b2:	8b 45 08             	mov    0x8(%ebp),%eax
   111b5:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   111bc:	90                   	nop
   111bd:	c9                   	leave  
   111be:	c3                   	ret    

000111bf <list_is_empty>:

static inline int list_is_empty(list_t *list) {
   111bf:	55                   	push   %ebp
   111c0:	89 e5                	mov    %esp,%ebp
   111c2:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   111c5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   111c9:	75 19                	jne    111e4 <list_is_empty+0x25>
   111cb:	68 72 97 01 00       	push   $0x19772
   111d0:	68 48 99 01 00       	push   $0x19948
   111d5:	6a 38                	push   $0x38
   111d7:	68 34 97 01 00       	push   $0x19734
   111dc:	e8 98 75 00 00       	call   18779 <pannic>
   111e1:	83 c4 10             	add    $0x10,%esp

    return list->size == 0;
   111e4:	8b 45 08             	mov    0x8(%ebp),%eax
   111e7:	8b 40 08             	mov    0x8(%eax),%eax
   111ea:	85 c0                	test   %eax,%eax
   111ec:	0f 94 c0             	sete   %al
   111ef:	0f b6 c0             	movzbl %al,%eax
}
   111f2:	c9                   	leave  
   111f3:	c3                   	ret    

000111f4 <list_get_size>:

static inline int list_get_size(list_t *list) {
   111f4:	55                   	push   %ebp
   111f5:	89 e5                	mov    %esp,%ebp
   111f7:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   111fa:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   111fe:	75 19                	jne    11219 <list_get_size+0x25>
   11200:	68 72 97 01 00       	push   $0x19772
   11205:	68 78 99 01 00       	push   $0x19978
   1120a:	6a 3e                	push   $0x3e
   1120c:	68 34 97 01 00       	push   $0x19734
   11211:	e8 63 75 00 00       	call   18779 <pannic>
   11216:	83 c4 10             	add    $0x10,%esp

    return list->size;
   11219:	8b 45 08             	mov    0x8(%ebp),%eax
   1121c:	8b 40 08             	mov    0x8(%eax),%eax
}
   1121f:	c9                   	leave  
   11220:	c3                   	ret    

00011221 <list_get_first>:

static inline list_node_t *list_get_first(list_t *list) {
   11221:	55                   	push   %ebp
   11222:	89 e5                	mov    %esp,%ebp
   11224:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11227:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1122b:	75 19                	jne    11246 <list_get_first+0x25>
   1122d:	68 72 97 01 00       	push   $0x19772
   11232:	68 28 99 01 00       	push   $0x19928
   11237:	6a 44                	push   $0x44
   11239:	68 34 97 01 00       	push   $0x19734
   1123e:	e8 36 75 00 00       	call   18779 <pannic>
   11243:	83 c4 10             	add    $0x10,%esp

    return list->first;
   11246:	8b 45 08             	mov    0x8(%ebp),%eax
   11249:	8b 00                	mov    (%eax),%eax
}
   1124b:	c9                   	leave  
   1124c:	c3                   	ret    

0001124d <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   1124d:	55                   	push   %ebp
   1124e:	89 e5                	mov    %esp,%ebp
   11250:	f4                   	hlt    
   11251:	90                   	nop
   11252:	5d                   	pop    %ebp
   11253:	c3                   	ret    

00011254 <write_cr3>:
static inline void write_cr3(uint32_t data) {
   11254:	55                   	push   %ebp
   11255:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("mov %[v], %%cr3" : : [v] "r"(data));
   11257:	8b 45 08             	mov    0x8(%ebp),%eax
   1125a:	0f 22 d8             	mov    %eax,%cr3
}
   1125d:	90                   	nop
   1125e:	5d                   	pop    %ebp
   1125f:	c3                   	ret    

00011260 <far_jump>:
 * @brief  远跳转，当跳转发生在TSS段之间时，cpu将会保存状态到当前TR寄存器指向的TSS段
 *
 * @param selector 选择子
 * @param offset 跳转的偏移量
 */
static inline void far_jump(uint32_t selector, uint32_t offset) {
   11260:	55                   	push   %ebp
   11261:	89 e5                	mov    %esp,%ebp
   11263:	83 ec 10             	sub    $0x10,%esp
  // 传入远跳转需要的参数, 即cs = selector, eip = offset 
  uint32_t addr[] = {offset, selector};  
   11266:	8b 45 0c             	mov    0xc(%ebp),%eax
   11269:	89 45 f8             	mov    %eax,-0x8(%ebp)
   1126c:	8b 45 08             	mov    0x8(%ebp),%eax
   1126f:	89 45 fc             	mov    %eax,-0x4(%ebp)

  __asm__ __volatile__("ljmpl *(%[a])" : : [a] "r"(addr));
   11272:	8d 45 f8             	lea    -0x8(%ebp),%eax
   11275:	ff 28                	ljmp   *(%eax)
}
   11277:	90                   	nop
   11278:	c9                   	leave  
   11279:	c3                   	ret    

0001127a <write_tr>:
 * @brief   写入当前任务的TSS段描述符的选择子到TR寄存器中，告诉cpu当前段的TSS位置
 *          以便在进行任务切换时，将状态保存到该TSS段中
 * 
 * @param tss_selector 准备运行的任务的TSS段的选择子
 */
static inline void write_tr(uint16_t tss_selector) {
   1127a:	55                   	push   %ebp
   1127b:	89 e5                	mov    %esp,%ebp
   1127d:	83 ec 04             	sub    $0x4,%esp
   11280:	8b 45 08             	mov    0x8(%ebp),%eax
   11283:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  __asm__ __volatile__("ltr %[v]" : : [v]"r"(tss_selector));
   11287:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   1128b:	0f 00 d8             	ltr    %ax
}
   1128e:	90                   	nop
   1128f:	c9                   	leave  
   11290:	c3                   	ret    

00011291 <mmu_set_page_dir>:
static inline void mmu_set_page_dir(uint32_t paddr) {
   11291:	55                   	push   %ebp
   11292:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   11294:	ff 75 08             	push   0x8(%ebp)
   11297:	e8 b8 ff ff ff       	call   11254 <write_cr3>
   1129c:	83 c4 04             	add    $0x4,%esp
}
   1129f:	90                   	nop
   112a0:	c9                   	leave  
   112a1:	c3                   	ret    

000112a2 <up2>:
static inline uint32_t up2(uint32_t size, uint32_t bound) {
   112a2:	55                   	push   %ebp
   112a3:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   112a5:	8b 55 08             	mov    0x8(%ebp),%edx
   112a8:	8b 45 0c             	mov    0xc(%ebp),%eax
   112ab:	01 d0                	add    %edx,%eax
   112ad:	8d 50 ff             	lea    -0x1(%eax),%edx
   112b0:	8b 45 0c             	mov    0xc(%ebp),%eax
   112b3:	f7 d8                	neg    %eax
   112b5:	21 d0                	and    %edx,%eax
}
   112b7:	5d                   	pop    %ebp
   112b8:	c3                   	ret    

000112b9 <task_file>:
 * @brief 根据文件描述符从当前任务进程的打开文件表中返回对应的文件结构指针
 *
 * @param fd 文件描述符
 * @return file_t*
 */
file_t *task_file(int fd) {
   112b9:	55                   	push   %ebp
   112ba:	89 e5                	mov    %esp,%ebp
   112bc:	83 ec 18             	sub    $0x18,%esp
  file_t *file = (file_t *)0;
   112bf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  if (fd >= 0 && fd < TASK_OFILE_SIZE) {
   112c6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   112ca:	78 18                	js     112e4 <task_file+0x2b>
   112cc:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   112d0:	7f 12                	jg     112e4 <task_file+0x2b>
    file = task_current()->file_table[fd];
   112d2:	e8 da 06 00 00       	call   119b1 <task_current>
   112d7:	8b 55 08             	mov    0x8(%ebp),%edx
   112da:	83 c2 30             	add    $0x30,%edx
   112dd:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   112e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
  }

  return file;
   112e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   112e7:	c9                   	leave  
   112e8:	c3                   	ret    

000112e9 <task_alloc_fd>:
 * @brief 将已分配的文件结构指针放入当前进程的打开文件表中，并返回文件描述符
 *
 * @param file 已从系统file_table中分配的文件结构指针
 * @return int 文件描述符
 */
int task_alloc_fd(file_t *file) {
   112e9:	55                   	push   %ebp
   112ea:	89 e5                	mov    %esp,%ebp
   112ec:	83 ec 18             	sub    $0x18,%esp
  task_t *task = task_current();
   112ef:	e8 bd 06 00 00       	call   119b1 <task_current>
   112f4:	89 45 f0             	mov    %eax,-0x10(%ebp)
  for (int i = 0; i < TASK_OFILE_SIZE; ++i) {
   112f7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   112fe:	eb 2f                	jmp    1132f <task_alloc_fd+0x46>
    file_t *p = task->file_table[i];
   11300:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11303:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11306:	83 c2 30             	add    $0x30,%edx
   11309:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   1130d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (p == (file_t *)0) {  // 打开文件表中的第i项未分配，对其进行分配操作
   11310:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11314:	75 15                	jne    1132b <task_alloc_fd+0x42>
      task->file_table[i] = file;
   11316:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11319:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1131c:	8d 4a 30             	lea    0x30(%edx),%ecx
   1131f:	8b 55 08             	mov    0x8(%ebp),%edx
   11322:	89 54 88 08          	mov    %edx,0x8(%eax,%ecx,4)
      return i;
   11326:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11329:	eb 0f                	jmp    1133a <task_alloc_fd+0x51>
  for (int i = 0; i < TASK_OFILE_SIZE; ++i) {
   1132b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1132f:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   11333:	7e cb                	jle    11300 <task_alloc_fd+0x17>
    }
  }

  return -1;
   11335:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1133a:	c9                   	leave  
   1133b:	c3                   	ret    

0001133c <task_remove_fd>:
/**
 * @brief 从当前进程的打开文件表中移除文件描述符对应的文件结构指针
 *
 * @param fd
 */
void task_remove_fd(int fd) {
   1133c:	55                   	push   %ebp
   1133d:	89 e5                	mov    %esp,%ebp
   1133f:	83 ec 08             	sub    $0x8,%esp
  // 清空文件描述符对应的内存资源即可
  if (fd >= 0 && fd < TASK_OFILE_SIZE) {
   11342:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11346:	78 19                	js     11361 <task_remove_fd+0x25>
   11348:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   1134c:	7f 13                	jg     11361 <task_remove_fd+0x25>
    task_current()->file_table[fd] = (file_t *)0;
   1134e:	e8 5e 06 00 00       	call   119b1 <task_current>
   11353:	8b 55 08             	mov    0x8(%ebp),%edx
   11356:	83 c2 30             	add    $0x30,%edx
   11359:	c7 44 90 08 00 00 00 	movl   $0x0,0x8(%eax,%edx,4)
   11360:	00 
  }
}
   11361:	90                   	nop
   11362:	c9                   	leave  
   11363:	c3                   	ret    

00011364 <switch_to_tss>:

static void switch_to_tss(uint16_t tss_selector) {
   11364:	55                   	push   %ebp
   11365:	89 e5                	mov    %esp,%ebp
   11367:	83 ec 04             	sub    $0x4,%esp
   1136a:	8b 45 08             	mov    0x8(%ebp),%eax
   1136d:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  // 进行远跳转，让cpu访问该tss段的描述符，cpu将重启到之前运行该tss对应的任务的状态继续运行该任务
  far_jump(tss_selector, 0);
   11371:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   11375:	6a 00                	push   $0x0
   11377:	50                   	push   %eax
   11378:	e8 e3 fe ff ff       	call   11260 <far_jump>
   1137d:	83 c4 08             	add    $0x8,%esp
}
   11380:	90                   	nop
   11381:	c9                   	leave  
   11382:	c3                   	ret    

00011383 <task_switch_from_to>:
 * @brief  将任务从from切换到to
 *
 * @param from 切换前的任务
 * @param to 切换后的任务
 */
void task_switch_from_to(task_t *from, task_t *to) {
   11383:	55                   	push   %ebp
   11384:	89 e5                	mov    %esp,%ebp
  // 跳转到对应的tss段读取并恢复cpu任务状态
  switch_to_tss(to->tss_selector);
   11386:	8b 45 0c             	mov    0xc(%ebp),%eax
   11389:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
   1138f:	0f b7 c0             	movzwl %ax,%eax
   11392:	50                   	push   %eax
   11393:	e8 cc ff ff ff       	call   11364 <switch_to_tss>
   11398:	83 c4 04             	add    $0x4,%esp
}
   1139b:	90                   	nop
   1139c:	c9                   	leave  
   1139d:	c3                   	ret    

0001139e <tss_init>:
 * @param task 需要初始化的任务对象
 * @param entry 任务入口地址
 * @param esp 任务所用的栈顶指针
 * @param flag 任务属性标志位，如特权级
 */
static int tss_init(task_t *task, uint32_t entry, uint32_t esp, uint32_t flag) {
   1139e:	55                   	push   %ebp
   1139f:	89 e5                	mov    %esp,%ebp
   113a1:	83 ec 28             	sub    $0x28,%esp
  // 1.将该TSS段绑定到GDT中的某个段描述符
  uint32_t tss_selector = gdt_alloc_desc();
   113a4:	e8 86 15 00 00       	call   1292f <gdt_alloc_desc>
   113a9:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if (tss_selector < 0) {
    log_printf("alloc tss failed!\n");
    return -1;
  }
  segment_desc_set(tss_selector, (uint32_t)&task->tss, sizeof(task->tss),
   113ac:	8b 45 08             	mov    0x8(%ebp),%eax
   113af:	83 c0 5c             	add    $0x5c,%eax
   113b2:	89 c2                	mov    %eax,%edx
   113b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
   113b7:	0f b7 c0             	movzwl %ax,%eax
   113ba:	68 89 00 00 00       	push   $0x89
   113bf:	6a 68                	push   $0x68
   113c1:	52                   	push   %edx
   113c2:	50                   	push   %eax
   113c3:	e8 f5 13 00 00       	call   127bd <segment_desc_set>
   113c8:	83 c4 10             	add    $0x10,%esp
                   SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_TYPE_TSS);

  // 2.将tss段的值置空
  kernel_memset(&task->tss, 0, sizeof(task->tss));
   113cb:	8b 45 08             	mov    0x8(%ebp),%eax
   113ce:	83 c0 5c             	add    $0x5c,%eax
   113d1:	83 ec 04             	sub    $0x4,%esp
   113d4:	6a 68                	push   $0x68
   113d6:	6a 00                	push   $0x0
   113d8:	50                   	push   %eax
   113d9:	e8 ba 78 00 00       	call   18c98 <kernel_memset>
   113de:	83 c4 10             	add    $0x10,%esp

  // 3.记录tss绑定到的描述符的选择子
  task->tss_selector = tss_selector;
   113e1:	8b 45 08             	mov    0x8(%ebp),%eax
   113e4:	8b 55 ec             	mov    -0x14(%ebp),%edx
   113e7:	89 90 c4 00 00 00    	mov    %edx,0xc4(%eax)

  // 4.根据任务的特权级来设置对应选择子的cpl
  uint32_t code_selector, data_selector;
  if (flag & TASK_FLAGS_SYSTEM) {  // 内核特权级
   113ed:	8b 45 14             	mov    0x14(%ebp),%eax
   113f0:	83 e0 01             	and    $0x1,%eax
   113f3:	85 c0                	test   %eax,%eax
   113f5:	74 10                	je     11407 <tss_init+0x69>
    code_selector = KERNEL_SELECTOR_CS;
   113f7:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%ebp)
    data_selector = KERNEL_SELECTOR_DS;
   113fe:	c7 45 f0 10 00 00 00 	movl   $0x10,-0x10(%ebp)
   11405:	eb 16                	jmp    1141d <tss_init+0x7f>
  } else {  // 用户特权级
    // 获取任务的代码段选择子和数据段选择子，并初始化其CPL,因为是平台模型，所以基本不涉及到跨段访问，所以不需要RPL
    code_selector = task_manager.app_code_selector | SEG_CPL3;
   11407:	a1 b8 55 02 00       	mov    0x255b8,%eax
   1140c:	83 c8 03             	or     $0x3,%eax
   1140f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    data_selector = task_manager.app_data_selector | SEG_CPL3;
   11412:	a1 bc 55 02 00       	mov    0x255bc,%eax
   11417:	83 c8 03             	or     $0x3,%eax
   1141a:	89 45 f0             	mov    %eax,-0x10(%ebp)
  }

  // 5.设置eip，即任务的起始地址
  task->tss.eip = entry;
   1141d:	8b 45 08             	mov    0x8(%ebp),%eax
   11420:	8b 55 0c             	mov    0xc(%ebp),%edx
   11423:	89 50 7c             	mov    %edx,0x7c(%eax)

  // 6.根据任务的特权级设置任务所使用的栈空间
  task->tss.esp = esp;  // 特权级为3的栈空间
   11426:	8b 45 08             	mov    0x8(%ebp),%eax
   11429:	8b 55 10             	mov    0x10(%ebp),%edx
   1142c:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
  uint32_t kernel_stack =
      memory_alloc_page();  // 分配一页作为内核特权级0的栈空间
   11432:	e8 22 fa ff ff       	call   10e59 <memory_alloc_page>
   11437:	89 45 e8             	mov    %eax,-0x18(%ebp)
  if (kernel_stack == 0)    // 内核栈空间初始化失败
   1143a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   1143e:	0f 84 9e 00 00 00    	je     114e2 <tss_init+0x144>
    goto tss_init_failed;
  else
    task->tss.esp0 = kernel_stack + MEM_PAGE_SIZE;  // 特权级为0的栈空间
   11444:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11447:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edx
   1144d:	8b 45 08             	mov    0x8(%ebp),%eax
   11450:	89 50 60             	mov    %edx,0x60(%eax)

  // 7.平坦模型，初始化栈空间段寄存器
  task->tss.ss = data_selector;  // 特权级为3时使用的栈段
   11453:	8b 45 08             	mov    0x8(%ebp),%eax
   11456:	8b 55 f0             	mov    -0x10(%ebp),%edx
   11459:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
  task->tss.ss0 =
   1145f:	8b 45 08             	mov    0x8(%ebp),%eax
   11462:	c7 40 64 10 00 00 00 	movl   $0x10,0x64(%eax)
      KERNEL_SELECTOR_DS;  // 特权级为0时使用的栈段，
                           // 由于平坦模型，其实使用的是同一片空间，只是特权级发生了变化

  // 8. 平坦模型，初始其余化段寄存器
  task->tss.es = task->tss.fs = task->tss.gs = task->tss.ds = data_selector;
   11469:	8b 45 08             	mov    0x8(%ebp),%eax
   1146c:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1146f:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
   11475:	8b 45 08             	mov    0x8(%ebp),%eax
   11478:	8b 90 b0 00 00 00    	mov    0xb0(%eax),%edx
   1147e:	8b 45 08             	mov    0x8(%ebp),%eax
   11481:	89 90 b8 00 00 00    	mov    %edx,0xb8(%eax)
   11487:	8b 45 08             	mov    0x8(%ebp),%eax
   1148a:	8b 90 b8 00 00 00    	mov    0xb8(%eax),%edx
   11490:	8b 45 08             	mov    0x8(%ebp),%eax
   11493:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)
   11499:	8b 45 08             	mov    0x8(%ebp),%eax
   1149c:	8b 90 b4 00 00 00    	mov    0xb4(%eax),%edx
   114a2:	8b 45 08             	mov    0x8(%ebp),%eax
   114a5:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)

  // 9.平坦模型，初始化代码段寄存器
  task->tss.cs = code_selector;
   114ab:	8b 45 08             	mov    0x8(%ebp),%eax
   114ae:	8b 55 f4             	mov    -0xc(%ebp),%edx
   114b1:	89 90 a8 00 00 00    	mov    %edx,0xa8(%eax)

  // 10.初始化eflags寄存器，使cpu中断保持开启
  task->tss.eflags = EFLAGS_DEFAULT_1 | EFLAGS_IF;
   114b7:	8b 45 08             	mov    0x8(%ebp),%eax
   114ba:	c7 80 80 00 00 00 02 	movl   $0x202,0x80(%eax)
   114c1:	02 00 00 

  // 11.创建当前进程的虚拟页目录表，并设置cr3寄存器
  uint32_t page_dir = memory_creat_uvm();
   114c4:	e8 b4 f4 ff ff       	call   1097d <memory_creat_uvm>
   114c9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  if (page_dir == 0) goto tss_init_failed;
   114cc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   114d0:	74 13                	je     114e5 <tss_init+0x147>
  task->tss.cr3 = page_dir;
   114d2:	8b 45 08             	mov    0x8(%ebp),%eax
   114d5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   114d8:	89 50 78             	mov    %edx,0x78(%eax)

  return 0;
   114db:	b8 00 00 00 00       	mov    $0x0,%eax
   114e0:	eb 2f                	jmp    11511 <tss_init+0x173>
    goto tss_init_failed;
   114e2:	90                   	nop
   114e3:	eb 01                	jmp    114e6 <tss_init+0x148>
  if (page_dir == 0) goto tss_init_failed;
   114e5:	90                   	nop

// tss初始化失败
tss_init_failed:
  gdt_free(tss_selector);  // 释放选择子
   114e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
   114e9:	0f b7 c0             	movzwl %ax,%eax
   114ec:	83 ec 0c             	sub    $0xc,%esp
   114ef:	50                   	push   %eax
   114f0:	e8 af 14 00 00       	call   129a4 <gdt_free>
   114f5:	83 c4 10             	add    $0x10,%esp

  if (kernel_stack) {  // 内核栈空间分配有效，需要释放
   114f8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   114fc:	74 0e                	je     1150c <tss_init+0x16e>
    memory_free_page(kernel_stack);
   114fe:	83 ec 0c             	sub    $0xc,%esp
   11501:	ff 75 e8             	push   -0x18(%ebp)
   11504:	e8 70 f9 ff ff       	call   10e79 <memory_free_page>
   11509:	83 c4 10             	add    $0x10,%esp
  }
  return -1;
   1150c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11511:	c9                   	leave  
   11512:	c3                   	ret    

00011513 <task_start>:
/**
 * @brief 将任务插入任务链表中并设为就绪态，标志该任务可被调度
 *
 * @param task
 */
void task_start(task_t *task) {
   11513:	55                   	push   %ebp
   11514:	89 e5                	mov    %esp,%ebp
   11516:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   11519:	e8 92 1e 00 00       	call   133b0 <idt_enter_protection>
   1151e:	89 45 f4             	mov    %eax,-0xc(%ebp)

  //将任务设置为就绪态
  task_set_ready(task);
   11521:	83 ec 0c             	sub    $0xc,%esp
   11524:	ff 75 08             	push   0x8(%ebp)
   11527:	e8 d3 03 00 00       	call   118ff <task_set_ready>
   1152c:	83 c4 10             	add    $0x10,%esp
  task->state = TASK_READY;
   1152f:	8b 45 08             	mov    0x8(%ebp),%eax
   11532:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

  idt_leave_protection(state);  // TODO:解锁
   11538:	83 ec 0c             	sub    $0xc,%esp
   1153b:	ff 75 f4             	push   -0xc(%ebp)
   1153e:	e8 85 1e 00 00       	call   133c8 <idt_leave_protection>
   11543:	83 c4 10             	add    $0x10,%esp
}
   11546:	90                   	nop
   11547:	c9                   	leave  
   11548:	c3                   	ret    

00011549 <task_init>:
 * @param esp 任务指行时所用的栈顶指针
 * @param flag 任务属性标志位，如特权级
 * @return int
 */
int task_init(task_t *task, const char *name, uint32_t entry, uint32_t esp,
              uint32_t flag) {
   11549:	55                   	push   %ebp
   1154a:	89 e5                	mov    %esp,%ebp
   1154c:	83 ec 18             	sub    $0x18,%esp
  ASSERT(task != (task_t *)0);
   1154f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11553:	75 1c                	jne    11571 <task_init+0x28>
   11555:	68 85 97 01 00       	push   $0x19785
   1155a:	68 cc 98 01 00       	push   $0x198cc
   1155f:	68 ca 00 00 00       	push   $0xca
   11564:	68 9c 97 01 00       	push   $0x1979c
   11569:	e8 0b 72 00 00       	call   18779 <pannic>
   1156e:	83 c4 10             	add    $0x10,%esp
  // 1.初始化任务TSS段
  int err = tss_init(task, entry, esp, flag);
   11571:	ff 75 18             	push   0x18(%ebp)
   11574:	ff 75 14             	push   0x14(%ebp)
   11577:	ff 75 10             	push   0x10(%ebp)
   1157a:	ff 75 08             	push   0x8(%ebp)
   1157d:	e8 1c fe ff ff       	call   1139e <tss_init>
   11582:	83 c4 10             	add    $0x10,%esp
   11585:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (err == -1) return err;
   11588:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
   1158c:	75 08                	jne    11596 <task_init+0x4d>
   1158e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11591:	e9 e0 00 00 00       	jmp    11676 <task_init+0x12d>

  // 2.初始化任务名称
  kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   11596:	8b 45 08             	mov    0x8(%ebp),%eax
   11599:	83 c0 24             	add    $0x24,%eax
   1159c:	83 ec 04             	sub    $0x4,%esp
   1159f:	6a 20                	push   $0x20
   115a1:	ff 75 0c             	push   0xc(%ebp)
   115a4:	50                   	push   %eax
   115a5:	e8 98 75 00 00       	call   18b42 <kernel_strncpy>
   115aa:	83 c4 10             	add    $0x10,%esp

  // 3.初始化任务队列节点及就绪队列节点
  list_node_init(&task->ready_node);
   115ad:	8b 45 08             	mov    0x8(%ebp),%eax
   115b0:	83 c0 44             	add    $0x44,%eax
   115b3:	83 ec 0c             	sub    $0xc,%esp
   115b6:	50                   	push   %eax
   115b7:	e8 52 fb ff ff       	call   1110e <list_node_init>
   115bc:	83 c4 10             	add    $0x10,%esp
  list_node_init(&task->task_node);
   115bf:	8b 45 08             	mov    0x8(%ebp),%eax
   115c2:	83 c0 4c             	add    $0x4c,%eax
   115c5:	83 ec 0c             	sub    $0xc,%esp
   115c8:	50                   	push   %eax
   115c9:	e8 40 fb ff ff       	call   1110e <list_node_init>
   115ce:	83 c4 10             	add    $0x10,%esp
  list_node_init(&task->wait_node);
   115d1:	8b 45 08             	mov    0x8(%ebp),%eax
   115d4:	83 c0 54             	add    $0x54,%eax
   115d7:	83 ec 0c             	sub    $0xc,%esp
   115da:	50                   	push   %eax
   115db:	e8 2e fb ff ff       	call   1110e <list_node_init>
   115e0:	83 c4 10             	add    $0x10,%esp

  // 4.初始化最大时间片数与当前拥有时间片数,以及延时时间片数
  task->state = TASK_CREATED;
   115e3:	8b 45 08             	mov    0x8(%ebp),%eax
   115e6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  task->slice_max = task->slice_curr = TASK_TIME_SLICE_DEFAULT;
   115ec:	8b 45 08             	mov    0x8(%ebp),%eax
   115ef:	c7 40 1c 0a 00 00 00 	movl   $0xa,0x1c(%eax)
   115f6:	8b 45 08             	mov    0x8(%ebp),%eax
   115f9:	8b 50 1c             	mov    0x1c(%eax),%edx
   115fc:	8b 45 08             	mov    0x8(%ebp),%eax
   115ff:	89 50 18             	mov    %edx,0x18(%eax)
  task->sleep = 0;
   11602:	8b 45 08             	mov    0x8(%ebp),%eax
   11605:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
  task->pid = (uint32_t)task;
   1160c:	8b 55 08             	mov    0x8(%ebp),%edx
   1160f:	8b 45 08             	mov    0x8(%ebp),%eax
   11612:	89 50 08             	mov    %edx,0x8(%eax)
  task->parent = (task_t *)0;
   11615:	8b 45 08             	mov    0x8(%ebp),%eax
   11618:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  task->heap_start = task->heap_end = 0;
   1161f:	8b 45 08             	mov    0x8(%ebp),%eax
   11622:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
   11629:	8b 45 08             	mov    0x8(%ebp),%eax
   1162c:	8b 50 14             	mov    0x14(%eax),%edx
   1162f:	8b 45 08             	mov    0x8(%ebp),%eax
   11632:	89 50 10             	mov    %edx,0x10(%eax)
  task->status = 0;
   11635:	8b 45 08             	mov    0x8(%ebp),%eax
   11638:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)

  // 5.初始化文件表
  kernel_memset(&task->file_table, 0, sizeof(task->file_table));
   1163f:	8b 45 08             	mov    0x8(%ebp),%eax
   11642:	05 c8 00 00 00       	add    $0xc8,%eax
   11647:	83 ec 04             	sub    $0x4,%esp
   1164a:	68 00 02 00 00       	push   $0x200
   1164f:	6a 00                	push   $0x0
   11651:	50                   	push   %eax
   11652:	e8 41 76 00 00       	call   18c98 <kernel_memset>
   11657:	83 c4 10             	add    $0x10,%esp

  // 6.将任务加入任务队列
  list_insert_last(&task_manager.task_list, &task->task_node);
   1165a:	8b 45 08             	mov    0x8(%ebp),%eax
   1165d:	83 c0 4c             	add    $0x4c,%eax
   11660:	83 ec 08             	sub    $0x8,%esp
   11663:	50                   	push   %eax
   11664:	68 10 50 02 00       	push   $0x25010
   11669:	e8 3a 7b 00 00       	call   191a8 <list_insert_last>
   1166e:	83 c4 10             	add    $0x10,%esp

  return 1;
   11671:	b8 01 00 00 00       	mov    $0x1,%eax
}
   11676:	c9                   	leave  
   11677:	c3                   	ret    

00011678 <task_uninit>:
/**
 * @brief 反初始化任务对象，释放对应的资源
 *
 * @param task
 */
void task_uninit(task_t *task) {
   11678:	55                   	push   %ebp
   11679:	89 e5                	mov    %esp,%ebp
   1167b:	83 ec 08             	sub    $0x8,%esp
  //释放已分配的选择子
  if (task->tss_selector) {  
   1167e:	8b 45 08             	mov    0x8(%ebp),%eax
   11681:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
   11687:	85 c0                	test   %eax,%eax
   11689:	74 18                	je     116a3 <task_uninit+0x2b>
    gdt_free(task->tss_selector);
   1168b:	8b 45 08             	mov    0x8(%ebp),%eax
   1168e:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
   11694:	0f b7 c0             	movzwl %ax,%eax
   11697:	83 ec 0c             	sub    $0xc,%esp
   1169a:	50                   	push   %eax
   1169b:	e8 04 13 00 00       	call   129a4 <gdt_free>
   116a0:	83 c4 10             	add    $0x10,%esp
  }

  //释放已分配的内核栈空间
  if (task->tss.esp0) {  
   116a3:	8b 45 08             	mov    0x8(%ebp),%eax
   116a6:	8b 40 60             	mov    0x60(%eax),%eax
   116a9:	85 c0                	test   %eax,%eax
   116ab:	74 17                	je     116c4 <task_uninit+0x4c>
    memory_free_page((uint32_t)(task->tss.esp0 - MEM_PAGE_SIZE));
   116ad:	8b 45 08             	mov    0x8(%ebp),%eax
   116b0:	8b 40 60             	mov    0x60(%eax),%eax
   116b3:	2d 00 10 00 00       	sub    $0x1000,%eax
   116b8:	83 ec 0c             	sub    $0xc,%esp
   116bb:	50                   	push   %eax
   116bc:	e8 b8 f7 ff ff       	call   10e79 <memory_free_page>
   116c1:	83 c4 10             	add    $0x10,%esp
  }
  
  //释放为页目录分配的页空间及其映射关系
  if (task->tss.cr3) {  
   116c4:	8b 45 08             	mov    0x8(%ebp),%eax
   116c7:	8b 40 78             	mov    0x78(%eax),%eax
   116ca:	85 c0                	test   %eax,%eax
   116cc:	74 12                	je     116e0 <task_uninit+0x68>
    memory_destroy_uvm(task->tss.cr3);
   116ce:	8b 45 08             	mov    0x8(%ebp),%eax
   116d1:	8b 40 78             	mov    0x78(%eax),%eax
   116d4:	83 ec 0c             	sub    $0xc,%esp
   116d7:	50                   	push   %eax
   116d8:	e8 b2 f4 ff ff       	call   10b8f <memory_destroy_uvm>
   116dd:	83 c4 10             	add    $0x10,%esp
  }


  //将任务结构从任务管理器的任务队列中取下
  list_remove(&task_manager.task_list, &task->task_node);
   116e0:	8b 45 08             	mov    0x8(%ebp),%eax
   116e3:	83 c0 4c             	add    $0x4c,%eax
   116e6:	83 ec 08             	sub    $0x8,%esp
   116e9:	50                   	push   %eax
   116ea:	68 10 50 02 00       	push   $0x25010
   116ef:	e8 a9 7c 00 00       	call   1939d <list_remove>
   116f4:	83 c4 10             	add    $0x10,%esp
  
  //释放全局任务表中的task结构资源
  free_task(task);
   116f7:	83 ec 0c             	sub    $0xc,%esp
   116fa:	ff 75 08             	push   0x8(%ebp)
   116fd:	e8 4e 05 00 00       	call   11c50 <free_task>
   11702:	83 c4 10             	add    $0x10,%esp
}
   11705:	90                   	nop
   11706:	c9                   	leave  
   11707:	c3                   	ret    

00011708 <empty_task>:
static uint32_t empty_task_stack[EMPTY_TASK_STACK_SIZE];
/**
 * @brief  空闲进程，当所有进程都延时运行时，让cpu运行空闲进程
 *
 */
static void empty_task(void) {
   11708:	55                   	push   %ebp
   11709:	89 e5                	mov    %esp,%ebp
  while (1) {
    // 停止cpu运行，让cpu等待时间中断
    hlt();
   1170b:	e8 3d fb ff ff       	call   1124d <hlt>
   11710:	eb f9                	jmp    1170b <empty_task+0x3>

00011712 <task_manager_init>:

/**
 * @brief  初始化任务管理器
 *
 */
void task_manager_init(void) {
   11712:	55                   	push   %ebp
   11713:	89 e5                	mov    %esp,%ebp
   11715:	83 ec 18             	sub    $0x18,%esp
  // 1.初始化应用程序及所有任务的代码段选择子和数据段选择子，以区分和内核选择子的特权级
  // 应用程序运行在 DPL_3 下，
  // 内核运行在DPL_0下，配合分页机制中的us位，0为内核特权级，1为用户特权级
  // 就可做到特权级保护
  uint32_t data_selector = gdt_alloc_desc();
   11718:	e8 12 12 00 00       	call   1292f <gdt_alloc_desc>
   1171d:	89 45 f4             	mov    %eax,-0xc(%ebp)
  uint32_t code_selector = gdt_alloc_desc();
   11720:	e8 0a 12 00 00       	call   1292f <gdt_alloc_desc>
   11725:	89 45 f0             	mov    %eax,-0x10(%ebp)
  segment_desc_set(data_selector, 0, 0xffffffff,
   11728:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1172b:	0f b7 c0             	movzwl %ax,%eax
   1172e:	68 f2 40 00 00       	push   $0x40f2
   11733:	6a ff                	push   $0xffffffff
   11735:	6a 00                	push   $0x0
   11737:	50                   	push   %eax
   11738:	e8 80 10 00 00       	call   127bd <segment_desc_set>
   1173d:	83 c4 10             	add    $0x10,%esp
                   SEG_ATTR_P | SEG_ATTR_DPL_3 | SEG_ATTR_S_NORMAL |
                       SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);
  segment_desc_set(code_selector, 0, 0xffffffff,
   11740:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11743:	0f b7 c0             	movzwl %ax,%eax
   11746:	68 fa 40 00 00       	push   $0x40fa
   1174b:	6a ff                	push   $0xffffffff
   1174d:	6a 00                	push   $0x0
   1174f:	50                   	push   %eax
   11750:	e8 68 10 00 00       	call   127bd <segment_desc_set>
   11755:	83 c4 10             	add    $0x10,%esp
                   SEG_ATTR_P | SEG_ATTR_DPL_3 | SEG_ATTR_S_NORMAL |
                       SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);
  task_manager.app_code_selector = code_selector;
   11758:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1175b:	a3 b8 55 02 00       	mov    %eax,0x255b8
  task_manager.app_data_selector = data_selector;
   11760:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11763:	a3 bc 55 02 00       	mov    %eax,0x255bc

  // 2.初始化所有任务队列
  list_init(&task_manager.ready_list);
   11768:	83 ec 0c             	sub    $0xc,%esp
   1176b:	68 04 50 02 00       	push   $0x25004
   11770:	e8 03 fa ff ff       	call   11178 <list_init>
   11775:	83 c4 10             	add    $0x10,%esp
  list_init(&task_manager.task_list);
   11778:	83 ec 0c             	sub    $0xc,%esp
   1177b:	68 10 50 02 00       	push   $0x25010
   11780:	e8 f3 f9 ff ff       	call   11178 <list_init>
   11785:	83 c4 10             	add    $0x10,%esp
  list_init(&task_manager.sleep_list);
   11788:	83 ec 0c             	sub    $0xc,%esp
   1178b:	68 1c 50 02 00       	push   $0x2501c
   11790:	e8 e3 f9 ff ff       	call   11178 <list_init>
   11795:	83 c4 10             	add    $0x10,%esp

  // 3.将当前任务置零
  task_manager.curr_task = (task_t *)0;
   11798:	c7 05 00 50 02 00 00 	movl   $0x0,0x25000
   1179f:	00 00 00 

  // 4.初始化空闲进程
  task_init(&task_manager.empty_task, "empty_task", (uint32_t)empty_task,
   117a2:	ba e0 bb 03 00       	mov    $0x3bbe0,%edx
   117a7:	b8 08 17 01 00       	mov    $0x11708,%eax
   117ac:	83 ec 0c             	sub    $0xc,%esp
   117af:	6a 01                	push   $0x1
   117b1:	52                   	push   %edx
   117b2:	50                   	push   %eax
   117b3:	68 d1 97 01 00       	push   $0x197d1
   117b8:	68 f0 52 02 00       	push   $0x252f0
   117bd:	e8 87 fd ff ff       	call   11549 <task_init>
   117c2:	83 c4 20             	add    $0x20,%esp
            (uint32_t)&empty_task_stack[EMPTY_TASK_STACK_SIZE],
            TASK_FLAGS_SYSTEM);

  // 5.初始化静态任务表,及其互斥锁
  kernel_memset(task_table, 0, sizeof(task_table));
   117c5:	83 ec 04             	sub    $0x4,%esp
   117c8:	68 00 64 01 00       	push   $0x16400
   117cd:	6a 00                	push   $0x0
   117cf:	68 c0 55 02 00       	push   $0x255c0
   117d4:	e8 bf 74 00 00       	call   18c98 <kernel_memset>
   117d9:	83 c4 10             	add    $0x10,%esp
  mutex_init(&task_table_lock);
   117dc:	83 ec 0c             	sub    $0xc,%esp
   117df:	68 c0 b9 03 00       	push   $0x3b9c0
   117e4:	e8 18 68 00 00       	call   18001 <mutex_init>
   117e9:	83 c4 10             	add    $0x10,%esp
}
   117ec:	90                   	nop
   117ed:	c9                   	leave  
   117ee:	c3                   	ret    

000117ef <task_first_init>:
 *     页目录表 = 1页
 * ------------------
 * 内核0特权级栈 = 1页
 * ------------------
 */
void task_first_init(void) {
   117ef:	55                   	push   %ebp
   117f0:	89 e5                	mov    %esp,%ebp
   117f2:	83 ec 18             	sub    $0x18,%esp
  void first_task_entry(void);

  // 2.确定第一个任务进程需要的空间大小
  extern char s_first_task[], e_first_task[];
  uint32_t copy_size =
      (uint32_t)(e_first_task - s_first_task);  // 进程所需空间大小
   117f5:	b8 96 a3 07 00       	mov    $0x7a396,%eax
   117fa:	2d 00 a0 07 00       	sub    $0x7a000,%eax
  uint32_t copy_size =
   117ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
  uint32_t alloc_size =
      up2(copy_size, MEM_PAGE_SIZE) +
   11802:	68 00 10 00 00       	push   $0x1000
   11807:	ff 75 f4             	push   -0xc(%ebp)
   1180a:	e8 93 fa ff ff       	call   112a2 <up2>
   1180f:	83 c4 08             	add    $0x8,%esp
  uint32_t alloc_size =
   11812:	05 00 a0 00 00       	add    $0xa000,%eax
   11817:	89 45 f0             	mov    %eax,-0x10(%ebp)
      10 *
          MEM_PAGE_SIZE;  // 需要为进程分配的内存大小，按4kb对齐,并多拿五页当作栈空间
  ASSERT(copy_size < alloc_size);
   1181a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1181d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
   11820:	72 1c                	jb     1183e <task_first_init+0x4f>
   11822:	68 dc 97 01 00       	push   $0x197dc
   11827:	68 f4 98 01 00       	push   $0x198f4
   1182c:	68 6e 01 00 00       	push   $0x16e
   11831:	68 9c 97 01 00       	push   $0x1979c
   11836:	e8 3e 6f 00 00       	call   18779 <pannic>
   1183b:	83 c4 10             	add    $0x10,%esp

  uint32_t task_start_addr =
   1183e:	c7 45 ec 00 00 00 80 	movl   $0x80000000,-0x14(%ebp)
      (uint32_t)first_task_entry;  // 获取第一个任务的入口地址

  // 3.初始化第一个任务,因为当前为操作系统进程，esp初始值随意赋值都可，
  //  因为当前进程已开启，cpu会在切换的时候保留真实的状态，即真实的esp值
  task_init(&task_manager.first_task, "first task", task_start_addr,
   11845:	8b 55 ec             	mov    -0x14(%ebp),%edx
   11848:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1184b:	01 d0                	add    %edx,%eax
   1184d:	83 ec 0c             	sub    $0xc,%esp
   11850:	6a 00                	push   $0x0
   11852:	50                   	push   %eax
   11853:	ff 75 ec             	push   -0x14(%ebp)
   11856:	68 f3 97 01 00       	push   $0x197f3
   1185b:	68 28 50 02 00       	push   $0x25028
   11860:	e8 e4 fc ff ff       	call   11549 <task_init>
   11865:	83 c4 20             	add    $0x20,%esp
            task_start_addr + alloc_size, TASK_FLAGS_USER);

  // 4.初始化进程的起始堆空间
  task_manager.first_task.heap_start =
      (uint32_t)e_first_task;  // 堆起始地址紧靠程序bss段之后
   11868:	b8 96 a3 07 00       	mov    $0x7a396,%eax
  task_manager.first_task.heap_start =
   1186d:	a3 38 50 02 00       	mov    %eax,0x25038
  task_manager.first_task.heap_end = (uint32_t)e_first_task;  // 堆大小初始为0
   11872:	b8 96 a3 07 00       	mov    $0x7a396,%eax
   11877:	a3 3c 50 02 00       	mov    %eax,0x2503c

  // 5.将当前任务的TSS选择子告诉cpu，用来切换任务时保存状态
  write_tr(task_manager.first_task.tss_selector);
   1187c:	a1 ec 50 02 00       	mov    0x250ec,%eax
   11881:	0f b7 c0             	movzwl %ax,%eax
   11884:	83 ec 0c             	sub    $0xc,%esp
   11887:	50                   	push   %eax
   11888:	e8 ed f9 ff ff       	call   1127a <write_tr>
   1188d:	83 c4 10             	add    $0x10,%esp

  // 6.将当前任务执行第一个任务
  task_manager.curr_task = &task_manager.first_task;
   11890:	c7 05 00 50 02 00 28 	movl   $0x25028,0x25000
   11897:	50 02 00 

  // 7.将当前页表设置为第一个任务的页表
  mmu_set_page_dir(task_manager.first_task.tss.cr3);
   1189a:	a1 a0 50 02 00       	mov    0x250a0,%eax
   1189f:	83 ec 0c             	sub    $0xc,%esp
   118a2:	50                   	push   %eax
   118a3:	e8 e9 f9 ff ff       	call   11291 <mmu_set_page_dir>
   118a8:	83 c4 10             	add    $0x10,%esp

  // 8.将当前任务状态设置为运行态
  task_manager.curr_task->state = TASK_RUNNING;
   118ab:	a1 00 50 02 00       	mov    0x25000,%eax
   118b0:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

  // 9.进程的各个段还只是在虚拟地址中，所以要为各个段分配物理地址页空间，并进行映射
  memory_alloc_page_for(task_start_addr, alloc_size, PTE_P | PTE_W | PTE_U);
   118b6:	83 ec 04             	sub    $0x4,%esp
   118b9:	6a 07                	push   $0x7
   118bb:	ff 75 f0             	push   -0x10(%ebp)
   118be:	ff 75 ec             	push   -0x14(%ebp)
   118c1:	e8 61 f5 ff ff       	call   10e27 <memory_alloc_page_for>
   118c6:	83 c4 10             	add    $0x10,%esp

  // 10.将任务进程各个段从内核四个段之后的紧邻位置，拷贝到已分配好的且与虚拟地址对应的物理地址空间，实现代码隔离
  kernel_memcpy(first_task_entry, s_first_task, alloc_size);
   118c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   118cc:	83 ec 04             	sub    $0x4,%esp
   118cf:	50                   	push   %eax
   118d0:	68 00 a0 07 00       	push   $0x7a000
   118d5:	68 00 00 00 80       	push   $0x80000000
   118da:	e8 6a 73 00 00       	call   18c49 <kernel_memcpy>
   118df:	83 c4 10             	add    $0x10,%esp

  // 11.将任务设为可被调度
  task_start(&task_manager.first_task);
   118e2:	83 ec 0c             	sub    $0xc,%esp
   118e5:	68 28 50 02 00       	push   $0x25028
   118ea:	e8 24 fc ff ff       	call   11513 <task_start>
   118ef:	83 c4 10             	add    $0x10,%esp
}
   118f2:	90                   	nop
   118f3:	c9                   	leave  
   118f4:	c3                   	ret    

000118f5 <task_first_task>:
/**
 * @brief  获取当前任务管理器的第一个任务
 *
 * @return task_t*
 */
task_t *task_first_task(void) { return &task_manager.first_task; }
   118f5:	55                   	push   %ebp
   118f6:	89 e5                	mov    %esp,%ebp
   118f8:	b8 28 50 02 00       	mov    $0x25028,%eax
   118fd:	5d                   	pop    %ebp
   118fe:	c3                   	ret    

000118ff <task_set_ready>:
/**
 * @brief  将任务task加入就绪队列
 *
 * @param task 需要加入就绪队列的任务
 */
void task_set_ready(task_t *task) {
   118ff:	55                   	push   %ebp
   11900:	89 e5                	mov    %esp,%ebp
   11902:	83 ec 08             	sub    $0x8,%esp
  ASSERT(task != (task_t *)0);
   11905:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11909:	75 1c                	jne    11927 <task_set_ready+0x28>
   1190b:	68 85 97 01 00       	push   $0x19785
   11910:	68 04 99 01 00       	push   $0x19904
   11915:	68 a0 01 00 00       	push   $0x1a0
   1191a:	68 9c 97 01 00       	push   $0x1979c
   1191f:	e8 55 6e 00 00       	call   18779 <pannic>
   11924:	83 c4 10             	add    $0x10,%esp
  // if (task == (task_t*)0) return;
  // 1.将任务插入到就绪队列的尾部
  list_insert_last(&task_manager.ready_list, &task->ready_node);
   11927:	8b 45 08             	mov    0x8(%ebp),%eax
   1192a:	83 c0 44             	add    $0x44,%eax
   1192d:	83 ec 08             	sub    $0x8,%esp
   11930:	50                   	push   %eax
   11931:	68 04 50 02 00       	push   $0x25004
   11936:	e8 6d 78 00 00       	call   191a8 <list_insert_last>
   1193b:	83 c4 10             	add    $0x10,%esp

  // 2.将任务状态设置为就绪态
  // task->state = TASK_READY;
}
   1193e:	90                   	nop
   1193f:	c9                   	leave  
   11940:	c3                   	ret    

00011941 <task_set_unready>:
/**
 * @brief  将任务task从就绪队列中取下
 *
 * @param task
 */
void task_set_unready(task_t *task) {
   11941:	55                   	push   %ebp
   11942:	89 e5                	mov    %esp,%ebp
   11944:	83 ec 08             	sub    $0x8,%esp
  ASSERT(task != (task_t *)0);
   11947:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1194b:	75 1c                	jne    11969 <task_set_unready+0x28>
   1194d:	68 85 97 01 00       	push   $0x19785
   11952:	68 14 99 01 00       	push   $0x19914
   11957:	68 af 01 00 00       	push   $0x1af
   1195c:	68 9c 97 01 00       	push   $0x1979c
   11961:	e8 13 6e 00 00       	call   18779 <pannic>
   11966:	83 c4 10             	add    $0x10,%esp
  // if (task == (task_t*)0) return;
  list_remove(&task_manager.ready_list, &task->ready_node);
   11969:	8b 45 08             	mov    0x8(%ebp),%eax
   1196c:	83 c0 44             	add    $0x44,%eax
   1196f:	83 ec 08             	sub    $0x8,%esp
   11972:	50                   	push   %eax
   11973:	68 04 50 02 00       	push   $0x25004
   11978:	e8 20 7a 00 00       	call   1939d <list_remove>
   1197d:	83 c4 10             	add    $0x10,%esp
}
   11980:	90                   	nop
   11981:	c9                   	leave  
   11982:	c3                   	ret    

00011983 <task_ready_first>:

/**
 * @brief  获取就绪队列中的第一个任务
 *
 */
task_t *task_ready_first(void) {
   11983:	55                   	push   %ebp
   11984:	89 e5                	mov    %esp,%ebp
   11986:	83 ec 18             	sub    $0x18,%esp
  list_node_t *ready_node = list_get_first(&task_manager.ready_list);
   11989:	83 ec 0c             	sub    $0xc,%esp
   1198c:	68 04 50 02 00       	push   $0x25004
   11991:	e8 8b f8 ff ff       	call   11221 <list_get_first>
   11996:	83 c4 10             	add    $0x10,%esp
   11999:	89 45 f4             	mov    %eax,-0xc(%ebp)

  return list_node_parent(ready_node, task_t, ready_node);
   1199c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   119a0:	74 08                	je     119aa <task_ready_first+0x27>
   119a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   119a5:	83 e8 44             	sub    $0x44,%eax
   119a8:	eb 05                	jmp    119af <task_ready_first+0x2c>
   119aa:	b8 00 00 00 00       	mov    $0x0,%eax
}
   119af:	c9                   	leave  
   119b0:	c3                   	ret    

000119b1 <task_current>:
/**
 * @brief  获取当前正在运行的任务
 *
 * @return task_t*
 */
task_t *task_current(void) { return task_manager.curr_task; }
   119b1:	55                   	push   %ebp
   119b2:	89 e5                	mov    %esp,%ebp
   119b4:	a1 00 50 02 00       	mov    0x25000,%eax
   119b9:	5d                   	pop    %ebp
   119ba:	c3                   	ret    

000119bb <task_switch>:

/**
 * @brief  任务管理器进行任务切换
 *
 */
void task_switch(void) {
   119bb:	55                   	push   %ebp
   119bc:	89 e5                	mov    %esp,%ebp
   119be:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   119c1:	e8 ea 19 00 00       	call   133b0 <idt_enter_protection>
   119c6:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 1.获取就绪队列中的第一个任务
  task_t *to = task_ready_first();
   119c9:	e8 b5 ff ff ff       	call   11983 <task_ready_first>
   119ce:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 2.若获取到的任务不是当前任务就进行切换
  if (to != task_manager.curr_task) {
   119d1:	a1 00 50 02 00       	mov    0x25000,%eax
   119d6:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   119d9:	74 4a                	je     11a25 <task_switch+0x6a>
    // 3.获取当前任务
    task_t *from = task_manager.curr_task;
   119db:	a1 00 50 02 00       	mov    0x25000,%eax
   119e0:	89 45 ec             	mov    %eax,-0x14(%ebp)

    // 4.目标任务若为空，则所有任务都在延时，让cpu运行空闲任务
    if (to == (task_t *)0) {
   119e3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   119e7:	75 07                	jne    119f0 <task_switch+0x35>
      to = &task_manager.empty_task;
   119e9:	c7 45 f4 f0 52 02 00 	movl   $0x252f0,-0xc(%ebp)
    }
    // 5.切换当前任务, 并将当前任务置为运行态
    to->state = TASK_RUNNING;
   119f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   119f3:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    if (from->state == TASK_RUNNING) {
   119f9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   119fc:	8b 00                	mov    (%eax),%eax
   119fe:	83 f8 01             	cmp    $0x1,%eax
   11a01:	75 09                	jne    11a0c <task_switch+0x51>
      from->state = TASK_READY;
   11a03:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a06:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    } 
    task_manager.curr_task = to;
   11a0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11a0f:	a3 00 50 02 00       	mov    %eax,0x25000

    // 6.进行任务切换
    task_switch_from_to(from, to);
   11a14:	83 ec 08             	sub    $0x8,%esp
   11a17:	ff 75 f4             	push   -0xc(%ebp)
   11a1a:	ff 75 ec             	push   -0x14(%ebp)
   11a1d:	e8 61 f9 ff ff       	call   11383 <task_switch_from_to>
   11a22:	83 c4 10             	add    $0x10,%esp
  }

  idt_leave_protection(state);  // TODO:解锁
   11a25:	83 ec 0c             	sub    $0xc,%esp
   11a28:	ff 75 f0             	push   -0x10(%ebp)
   11a2b:	e8 98 19 00 00       	call   133c8 <idt_leave_protection>
   11a30:	83 c4 10             	add    $0x10,%esp
}
   11a33:	90                   	nop
   11a34:	c9                   	leave  
   11a35:	c3                   	ret    

00011a36 <task_slice_end>:
/**
 * @brief  提供给时钟中断使用，每中断一次，当前任务的时间片使用完一次
 *         减少当前任务的时间片数，并判断是否还有剩余时间片，若没有就进行任务切换
 *
 */
void task_slice_end(void) {
   11a36:	55                   	push   %ebp
   11a37:	89 e5                	mov    %esp,%ebp
   11a39:	83 ec 18             	sub    $0x18,%esp
  // 1.遍历当前延时队列，判断是否有可唤醒的任务
  list_node_t *curr_sleep_node = list_get_first(&task_manager.sleep_list);
   11a3c:	83 ec 0c             	sub    $0xc,%esp
   11a3f:	68 1c 50 02 00       	push   $0x2501c
   11a44:	e8 d8 f7 ff ff       	call   11221 <list_get_first>
   11a49:	83 c4 10             	add    $0x10,%esp
   11a4c:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 2.遍历并判断每一个任务执行完当前时间片是否可被唤醒，若可以则唤醒
  while (curr_sleep_node) {
   11a4f:	eb 62                	jmp    11ab3 <task_slice_end+0x7d>
    list_node_t *next_sleep_node = list_node_next(curr_sleep_node);
   11a51:	83 ec 0c             	sub    $0xc,%esp
   11a54:	ff 75 f4             	push   -0xc(%ebp)
   11a57:	e8 ef f6 ff ff       	call   1114b <list_node_next>
   11a5c:	83 c4 10             	add    $0x10,%esp
   11a5f:	89 45 ec             	mov    %eax,-0x14(%ebp)

    task_t *curr_sleep_task =
        list_node_parent(curr_sleep_node, task_t, ready_node);
   11a62:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11a66:	74 08                	je     11a70 <task_slice_end+0x3a>
   11a68:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11a6b:	83 e8 44             	sub    $0x44,%eax
   11a6e:	eb 05                	jmp    11a75 <task_slice_end+0x3f>
   11a70:	b8 00 00 00 00       	mov    $0x0,%eax
    task_t *curr_sleep_task =
   11a75:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (--curr_sleep_task->sleep == 0) {
   11a78:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11a7b:	8b 40 20             	mov    0x20(%eax),%eax
   11a7e:	8d 50 ff             	lea    -0x1(%eax),%edx
   11a81:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11a84:	89 50 20             	mov    %edx,0x20(%eax)
   11a87:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11a8a:	8b 40 20             	mov    0x20(%eax),%eax
   11a8d:	85 c0                	test   %eax,%eax
   11a8f:	75 1c                	jne    11aad <task_slice_end+0x77>
      task_set_wakeup(curr_sleep_task);  // 从延时队列中取下
   11a91:	83 ec 0c             	sub    $0xc,%esp
   11a94:	ff 75 e8             	push   -0x18(%ebp)
   11a97:	e8 01 01 00 00       	call   11b9d <task_set_wakeup>
   11a9c:	83 c4 10             	add    $0x10,%esp
      task_set_ready(curr_sleep_task);   // 加入就绪队列
   11a9f:	83 ec 0c             	sub    $0xc,%esp
   11aa2:	ff 75 e8             	push   -0x18(%ebp)
   11aa5:	e8 55 fe ff ff       	call   118ff <task_set_ready>
   11aaa:	83 c4 10             	add    $0x10,%esp
    }

    curr_sleep_node = next_sleep_node;
   11aad:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11ab0:	89 45 f4             	mov    %eax,-0xc(%ebp)
  while (curr_sleep_node) {
   11ab3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11ab7:	75 98                	jne    11a51 <task_slice_end+0x1b>
  }

  // task_switch(); 没有必要立马进行任务切换，当前任务时间片用完后会自动切换
  // 3.获取当前任务
  task_t *curr_task = task_current();
   11ab9:	e8 f3 fe ff ff       	call   119b1 <task_current>
   11abe:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 4.若当前任务为空闲任务，则判断就绪队列是否为空
  if (curr_task == &task_manager.empty_task) {
   11ac1:	81 7d f0 f0 52 02 00 	cmpl   $0x252f0,-0x10(%ebp)
   11ac8:	75 23                	jne    11aed <task_slice_end+0xb7>
    if (list_is_empty(&task_manager.ready_list)) return;
   11aca:	83 ec 0c             	sub    $0xc,%esp
   11acd:	68 04 50 02 00       	push   $0x25004
   11ad2:	e8 e8 f6 ff ff       	call   111bf <list_is_empty>
   11ad7:	83 c4 10             	add    $0x10,%esp
   11ada:	85 c0                	test   %eax,%eax
   11adc:	75 60                	jne    11b3e <task_slice_end+0x108>

    task_manager.empty_task.state = TASK_CREATED;
   11ade:	c7 05 f0 52 02 00 00 	movl   $0x0,0x252f0
   11ae5:	00 00 00 

    task_switch();  // 就绪队列有任务，则直接切换任务
   11ae8:	e8 ce fe ff ff       	call   119bb <task_switch>
  }

  // 5.若当前任务为普通任务则，减小当前时间片数
  if (curr_task != &task_manager.empty_task && --curr_task->slice_curr == 0) {
   11aed:	81 7d f0 f0 52 02 00 	cmpl   $0x252f0,-0x10(%ebp)
   11af4:	74 49                	je     11b3f <task_slice_end+0x109>
   11af6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11af9:	8b 40 1c             	mov    0x1c(%eax),%eax
   11afc:	8d 50 ff             	lea    -0x1(%eax),%edx
   11aff:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11b02:	89 50 1c             	mov    %edx,0x1c(%eax)
   11b05:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11b08:	8b 40 1c             	mov    0x1c(%eax),%eax
   11b0b:	85 c0                	test   %eax,%eax
   11b0d:	75 30                	jne    11b3f <task_slice_end+0x109>
    // 6.时间片数用完了，重置时间片并进行任务切换
    curr_task->slice_curr = curr_task->slice_max;
   11b0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11b12:	8b 50 18             	mov    0x18(%eax),%edx
   11b15:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11b18:	89 50 1c             	mov    %edx,0x1c(%eax)
    task_set_unready(curr_task);
   11b1b:	83 ec 0c             	sub    $0xc,%esp
   11b1e:	ff 75 f0             	push   -0x10(%ebp)
   11b21:	e8 1b fe ff ff       	call   11941 <task_set_unready>
   11b26:	83 c4 10             	add    $0x10,%esp
    task_set_ready(curr_task);
   11b29:	83 ec 0c             	sub    $0xc,%esp
   11b2c:	ff 75 f0             	push   -0x10(%ebp)
   11b2f:	e8 cb fd ff ff       	call   118ff <task_set_ready>
   11b34:	83 c4 10             	add    $0x10,%esp
    task_switch();
   11b37:	e8 7f fe ff ff       	call   119bb <task_switch>
   11b3c:	eb 01                	jmp    11b3f <task_slice_end+0x109>
    if (list_is_empty(&task_manager.ready_list)) return;
   11b3e:	90                   	nop
  }
}
   11b3f:	c9                   	leave  
   11b40:	c3                   	ret    

00011b41 <task_set_sleep>:
 * @brief  设置进程延时的时间片数
 *
 * @param task 需要延时的进程
 * @param slice 延时的时间片数
 */
void task_set_sleep(task_t *task, uint32_t slice) {
   11b41:	55                   	push   %ebp
   11b42:	89 e5                	mov    %esp,%ebp
   11b44:	83 ec 08             	sub    $0x8,%esp
  ASSERT(task != (task_t *)0);
   11b47:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11b4b:	75 1c                	jne    11b69 <task_set_sleep+0x28>
   11b4d:	68 85 97 01 00       	push   $0x19785
   11b52:	68 58 99 01 00       	push   $0x19958
   11b57:	68 1b 02 00 00       	push   $0x21b
   11b5c:	68 9c 97 01 00       	push   $0x1979c
   11b61:	e8 13 6c 00 00       	call   18779 <pannic>
   11b66:	83 c4 10             	add    $0x10,%esp
  if (slice == 0) return;
   11b69:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11b6d:	74 2b                	je     11b9a <task_set_sleep+0x59>

  task->sleep = slice;
   11b6f:	8b 55 0c             	mov    0xc(%ebp),%edx
   11b72:	8b 45 08             	mov    0x8(%ebp),%eax
   11b75:	89 50 20             	mov    %edx,0x20(%eax)
  task->state = TASK_SLEEP;
   11b78:	8b 45 08             	mov    0x8(%ebp),%eax
   11b7b:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
  list_insert_last(&task_manager.sleep_list, &task->ready_node);
   11b81:	8b 45 08             	mov    0x8(%ebp),%eax
   11b84:	83 c0 44             	add    $0x44,%eax
   11b87:	83 ec 08             	sub    $0x8,%esp
   11b8a:	50                   	push   %eax
   11b8b:	68 1c 50 02 00       	push   $0x2501c
   11b90:	e8 13 76 00 00       	call   191a8 <list_insert_last>
   11b95:	83 c4 10             	add    $0x10,%esp
   11b98:	eb 01                	jmp    11b9b <task_set_sleep+0x5a>
  if (slice == 0) return;
   11b9a:	90                   	nop
}
   11b9b:	c9                   	leave  
   11b9c:	c3                   	ret    

00011b9d <task_set_wakeup>:
/**
 * @brief  唤醒正在延时的进程
 *
 * @param task
 */
void task_set_wakeup(task_t *task) {
   11b9d:	55                   	push   %ebp
   11b9e:	89 e5                	mov    %esp,%ebp
   11ba0:	83 ec 08             	sub    $0x8,%esp
  ASSERT(task != (task_t *)0);
   11ba3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11ba7:	75 1c                	jne    11bc5 <task_set_wakeup+0x28>
   11ba9:	68 85 97 01 00       	push   $0x19785
   11bae:	68 68 99 01 00       	push   $0x19968
   11bb3:	68 29 02 00 00       	push   $0x229
   11bb8:	68 9c 97 01 00       	push   $0x1979c
   11bbd:	e8 b7 6b 00 00       	call   18779 <pannic>
   11bc2:	83 c4 10             	add    $0x10,%esp
  list_remove(&task_manager.sleep_list, &task->ready_node);
   11bc5:	8b 45 08             	mov    0x8(%ebp),%eax
   11bc8:	83 c0 44             	add    $0x44,%eax
   11bcb:	83 ec 08             	sub    $0x8,%esp
   11bce:	50                   	push   %eax
   11bcf:	68 1c 50 02 00       	push   $0x2501c
   11bd4:	e8 c4 77 00 00       	call   1939d <list_remove>
   11bd9:	83 c4 10             	add    $0x10,%esp
  task->state = TASK_CREATED;
   11bdc:	8b 45 08             	mov    0x8(%ebp),%eax
   11bdf:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   11be5:	90                   	nop
   11be6:	c9                   	leave  
   11be7:	c3                   	ret    

00011be8 <alloc_task>:
/**
 * @brief 从静态任务表中分配一个任务对象
 *
 * @return task_t*
 */
static task_t *alloc_task(void) {
   11be8:	55                   	push   %ebp
   11be9:	89 e5                	mov    %esp,%ebp
   11beb:	83 ec 18             	sub    $0x18,%esp
  task_t *task = 0;
   11bee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  //TODO:加锁
  mutex_lock(&task_table_lock);
   11bf5:	83 ec 0c             	sub    $0xc,%esp
   11bf8:	68 c0 b9 03 00       	push   $0x3b9c0
   11bfd:	e8 4c 64 00 00       	call   1804e <mutex_lock>
   11c02:	83 c4 10             	add    $0x10,%esp

  // 遍历静态任务表，取出未被分配的任务对象空间
  for (int i = 0; i < TASK_COUNT; ++i) {
   11c05:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11c0c:	eb 27                	jmp    11c35 <alloc_task+0x4d>
    task_t *curr = task_table + i;
   11c0e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11c11:	69 c0 c8 02 00 00    	imul   $0x2c8,%eax,%eax
   11c17:	05 c0 55 02 00       	add    $0x255c0,%eax
   11c1c:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (curr->pid == 0) {
   11c1f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11c22:	8b 40 08             	mov    0x8(%eax),%eax
   11c25:	85 c0                	test   %eax,%eax
   11c27:	75 08                	jne    11c31 <alloc_task+0x49>
      task = curr;
   11c29:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11c2c:	89 45 f4             	mov    %eax,-0xc(%ebp)
      break;
   11c2f:	eb 0a                	jmp    11c3b <alloc_task+0x53>
  for (int i = 0; i < TASK_COUNT; ++i) {
   11c31:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   11c35:	83 7d f0 7f          	cmpl   $0x7f,-0x10(%ebp)
   11c39:	7e d3                	jle    11c0e <alloc_task+0x26>
    }
  }

  //TODO:解锁
  mutex_unlock(&task_table_lock);
   11c3b:	83 ec 0c             	sub    $0xc,%esp
   11c3e:	68 c0 b9 03 00       	push   $0x3b9c0
   11c43:	e8 ac 64 00 00       	call   180f4 <mutex_unlock>
   11c48:	83 c4 10             	add    $0x10,%esp

  return task;
   11c4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   11c4e:	c9                   	leave  
   11c4f:	c3                   	ret    

00011c50 <free_task>:
/**
 * @brief 释放静态任务表的任务对象
 *
 * @param task
 */
static void free_task(task_t *task) {
   11c50:	55                   	push   %ebp
   11c51:	89 e5                	mov    %esp,%ebp
   11c53:	83 ec 08             	sub    $0x8,%esp
  //TODO:加锁
  mutex_lock(&task_table_lock);
   11c56:	83 ec 0c             	sub    $0xc,%esp
   11c59:	68 c0 b9 03 00       	push   $0x3b9c0
   11c5e:	e8 eb 63 00 00       	call   1804e <mutex_lock>
   11c63:	83 c4 10             	add    $0x10,%esp

  task->pid = 0;
   11c66:	8b 45 08             	mov    0x8(%ebp),%eax
   11c69:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)

  //TODO:解锁
  mutex_unlock(&task_table_lock);
   11c70:	83 ec 0c             	sub    $0xc,%esp
   11c73:	68 c0 b9 03 00       	push   $0x3b9c0
   11c78:	e8 77 64 00 00       	call   180f4 <mutex_unlock>
   11c7d:	83 c4 10             	add    $0x10,%esp
}
   11c80:	90                   	nop
   11c81:	c9                   	leave  
   11c82:	c3                   	ret    

00011c83 <sys_sleep>:
/**
 * @brief  使进程进入延时状态
 *
 * @param ms 延时的时间，以ms为单位
 */
void sys_sleep(uint32_t ms) {
   11c83:	55                   	push   %ebp
   11c84:	89 e5                	mov    %esp,%ebp
   11c86:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   11c89:	e8 22 17 00 00       	call   133b0 <idt_enter_protection>
   11c8e:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 1.获取当前任务
  task_t *curr_task = task_current();
   11c91:	e8 1b fd ff ff       	call   119b1 <task_current>
   11c96:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 2.将当前任务离开就绪队列
  task_set_unready(curr_task);
   11c99:	83 ec 0c             	sub    $0xc,%esp
   11c9c:	ff 75 f0             	push   -0x10(%ebp)
   11c9f:	e8 9d fc ff ff       	call   11941 <task_set_unready>
   11ca4:	83 c4 10             	add    $0x10,%esp

  // 3.计算出需要延时的时间片数，对时间片数向上取整，保证进程至少能延时指定时间
  uint32_t slice = (ms + (OS_TICKS_MS - 1)) / OS_TICKS_MS;
   11ca7:	8b 45 08             	mov    0x8(%ebp),%eax
   11caa:	89 45 ec             	mov    %eax,-0x14(%ebp)

  // 4.将当前任务放入延时队列，并设置延时时间片数
  task_set_sleep(curr_task, slice);
   11cad:	83 ec 08             	sub    $0x8,%esp
   11cb0:	ff 75 ec             	push   -0x14(%ebp)
   11cb3:	ff 75 f0             	push   -0x10(%ebp)
   11cb6:	e8 86 fe ff ff       	call   11b41 <task_set_sleep>
   11cbb:	83 c4 10             	add    $0x10,%esp

  // 5.切换任务
  task_switch();
   11cbe:	e8 f8 fc ff ff       	call   119bb <task_switch>

  idt_leave_protection(state);  // TODO:解锁
   11cc3:	83 ec 0c             	sub    $0xc,%esp
   11cc6:	ff 75 f4             	push   -0xc(%ebp)
   11cc9:	e8 fa 16 00 00       	call   133c8 <idt_leave_protection>
   11cce:	83 c4 10             	add    $0x10,%esp
}
   11cd1:	90                   	nop
   11cd2:	c9                   	leave  
   11cd3:	c3                   	ret    

00011cd4 <sys_getpid>:
/**
 * @brief 获取任务pid
 *
 * @return int pid
 */
int sys_getpid(void) { return task_current()->pid; }
   11cd4:	55                   	push   %ebp
   11cd5:	89 e5                	mov    %esp,%ebp
   11cd7:	e8 d5 fc ff ff       	call   119b1 <task_current>
   11cdc:	8b 40 08             	mov    0x8(%eax),%eax
   11cdf:	5d                   	pop    %ebp
   11ce0:	c3                   	ret    

00011ce1 <copy_opened_files>:
/**
 * @brief 将当前进程的打开文件表复制给传入进程
 * 
 * @param child_task 
 */
static void copy_opened_files(task_t *child_task) {
   11ce1:	55                   	push   %ebp
   11ce2:	89 e5                	mov    %esp,%ebp
   11ce4:	83 ec 18             	sub    $0x18,%esp
  task_t *parent = task_current();
   11ce7:	e8 c5 fc ff ff       	call   119b1 <task_current>
   11cec:	89 45 f0             	mov    %eax,-0x10(%ebp)
  for (int i = 0; i < TASK_OFILE_SIZE; ++i) {
   11cef:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11cf6:	eb 38                	jmp    11d30 <copy_opened_files+0x4f>
    file_t *file = parent->file_table[i];
   11cf8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11cfb:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11cfe:	83 c2 30             	add    $0x30,%edx
   11d01:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   11d05:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (file) {
   11d08:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11d0c:	74 1e                	je     11d2c <copy_opened_files+0x4b>
      file_inc_ref(file);
   11d0e:	83 ec 0c             	sub    $0xc,%esp
   11d11:	ff 75 ec             	push   -0x14(%ebp)
   11d14:	e8 ef 53 00 00       	call   17108 <file_inc_ref>
   11d19:	83 c4 10             	add    $0x10,%esp
      child_task->file_table[i] = file;
   11d1c:	8b 45 08             	mov    0x8(%ebp),%eax
   11d1f:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11d22:	8d 4a 30             	lea    0x30(%edx),%ecx
   11d25:	8b 55 ec             	mov    -0x14(%ebp),%edx
   11d28:	89 54 88 08          	mov    %edx,0x8(%eax,%ecx,4)
  for (int i = 0; i < TASK_OFILE_SIZE; ++i) {
   11d2c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11d30:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   11d34:	7e c2                	jle    11cf8 <copy_opened_files+0x17>
    }
  }
}
   11d36:	90                   	nop
   11d37:	90                   	nop
   11d38:	c9                   	leave  
   11d39:	c3                   	ret    

00011d3a <sys_fork>:
/**
 * @brief 创建子进程
 *
 * @return int 子进程的pid
 */
int sys_fork(void) {
   11d3a:	55                   	push   %ebp
   11d3b:	89 e5                	mov    %esp,%ebp
   11d3d:	83 ec 28             	sub    $0x28,%esp
  // 1.获取当前进程为fork进程的父进程
  task_t *parent_task = task_current();
   11d40:	e8 6c fc ff ff       	call   119b1 <task_current>
   11d45:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 2.分配子进程控制块
  task_t *child_task = alloc_task();
   11d48:	e8 9b fe ff ff       	call   11be8 <alloc_task>
   11d4d:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (child_task == (task_t *)0) goto fork_failed;
   11d50:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11d54:	0f 84 51 01 00 00    	je     11eab <sys_fork+0x171>

  // 3.获取系统调用的栈帧,因为每次通过调用门进入内核栈中都只会一帧该结构体的数据，
  // 所以用最高地址减去大小即可获得该帧的起始地址
  syscall_frame_t *frame =
      (syscall_frame_t *)(parent_task->tss.esp0 - sizeof(syscall_frame_t));
   11d5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11d5d:	8b 40 60             	mov    0x60(%eax),%eax
   11d60:	83 e8 58             	sub    $0x58,%eax
  syscall_frame_t *frame =
   11d63:	89 45 ec             	mov    %eax,-0x14(%ebp)

  // 4.初始子进程控制块，直接用父进程进入调用门的下一条指令地址作为子进程的入口地址
  int err = task_init(child_task, parent_task->name, frame->eip,
                      frame->esp + sizeof(uint32_t) * SYSCALL_PARAM_COUNT,
   11d66:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11d69:	8b 40 50             	mov    0x50(%eax),%eax
  int err = task_init(child_task, parent_task->name, frame->eip,
   11d6c:	8d 48 14             	lea    0x14(%eax),%ecx
   11d6f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11d72:	8b 40 34             	mov    0x34(%eax),%eax
   11d75:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11d78:	83 c2 24             	add    $0x24,%edx
   11d7b:	83 ec 0c             	sub    $0xc,%esp
   11d7e:	6a 00                	push   $0x0
   11d80:	51                   	push   %ecx
   11d81:	50                   	push   %eax
   11d82:	52                   	push   %edx
   11d83:	ff 75 f0             	push   -0x10(%ebp)
   11d86:	e8 be f7 ff ff       	call   11549 <task_init>
   11d8b:	83 c4 20             	add    $0x20,%esp
   11d8e:	89 45 e8             	mov    %eax,-0x18(%ebp)
                      TASK_FLAGS_USER);
  if (err < 0) goto fork_failed;
   11d91:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11d95:	0f 88 13 01 00 00    	js     11eae <sys_fork+0x174>

  //让子进程继承父进程的打开文件表
  copy_opened_files(child_task);
   11d9b:	83 ec 0c             	sub    $0xc,%esp
   11d9e:	ff 75 f0             	push   -0x10(%ebp)
   11da1:	e8 3b ff ff ff       	call   11ce1 <copy_opened_files>
   11da6:	83 c4 10             	add    $0x10,%esp


  // 5.恢复到父进程的上下文环境
  tss_t *tss = &(child_task->tss);
   11da9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11dac:	83 c0 5c             	add    $0x5c,%eax
   11daf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  // 子进程执行的第一条指令就是从eax中取出系统用的返回值，即进程id，子进程固定获取0
  tss->eax = 0;
   11db2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11db5:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
  tss->ebx = frame->ebx;
   11dbc:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11dbf:	8b 50 24             	mov    0x24(%eax),%edx
   11dc2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11dc5:	89 50 34             	mov    %edx,0x34(%eax)
  tss->ecx = frame->ecx;
   11dc8:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11dcb:	8b 50 2c             	mov    0x2c(%eax),%edx
   11dce:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11dd1:	89 50 2c             	mov    %edx,0x2c(%eax)
  tss->edx = frame->edx;
   11dd4:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11dd7:	8b 50 28             	mov    0x28(%eax),%edx
   11dda:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11ddd:	89 50 30             	mov    %edx,0x30(%eax)
  tss->edi = frame->edi;
   11de0:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11de3:	8b 50 14             	mov    0x14(%eax),%edx
   11de6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11de9:	89 50 44             	mov    %edx,0x44(%eax)
  tss->esi = frame->esi;
   11dec:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11def:	8b 50 18             	mov    0x18(%eax),%edx
   11df2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11df5:	89 50 40             	mov    %edx,0x40(%eax)
  tss->eflags = frame->eflags;
   11df8:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11dfb:	8b 10                	mov    (%eax),%edx
   11dfd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11e00:	89 50 24             	mov    %edx,0x24(%eax)
  tss->ebp = frame->ebp;
   11e03:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11e06:	8b 50 1c             	mov    0x1c(%eax),%edx
   11e09:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11e0c:	89 50 3c             	mov    %edx,0x3c(%eax)

  // 复用父进程的段寄存器
  tss->cs = frame->cs;
   11e0f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11e12:	8b 50 38             	mov    0x38(%eax),%edx
   11e15:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11e18:	89 50 4c             	mov    %edx,0x4c(%eax)
  tss->ds = frame->ds;
   11e1b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11e1e:	8b 50 10             	mov    0x10(%eax),%edx
   11e21:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11e24:	89 50 54             	mov    %edx,0x54(%eax)
  tss->es = frame->es;
   11e27:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11e2a:	8b 50 0c             	mov    0xc(%eax),%edx
   11e2d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11e30:	89 50 48             	mov    %edx,0x48(%eax)
  tss->fs = frame->fs;
   11e33:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11e36:	8b 50 08             	mov    0x8(%eax),%edx
   11e39:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11e3c:	89 50 58             	mov    %edx,0x58(%eax)
  tss->gs = frame->gs;
   11e3f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11e42:	8b 50 04             	mov    0x4(%eax),%edx
   11e45:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11e48:	89 50 5c             	mov    %edx,0x5c(%eax)
  tss->ss = frame->ss;
   11e4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11e4e:	8b 50 54             	mov    0x54(%eax),%edx
   11e51:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11e54:	89 50 50             	mov    %edx,0x50(%eax)

  // 记录父进程地址
  child_task->parent = parent_task;
   11e57:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11e5a:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11e5d:	89 50 04             	mov    %edx,0x4(%eax)

  //记录父进程堆空间
  child_task->heap_start = parent_task->heap_start;
   11e60:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11e63:	8b 50 10             	mov    0x10(%eax),%edx
   11e66:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11e69:	89 50 10             	mov    %edx,0x10(%eax)
  child_task->heap_end = parent_task->heap_end;
   11e6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11e6f:	8b 50 14             	mov    0x14(%eax),%edx
   11e72:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11e75:	89 50 14             	mov    %edx,0x14(%eax)

  // 7.拷贝进程虚拟页目录表和页表，即拷贝其映射关系
  if (memory_copy_uvm(tss->cr3, parent_task->tss.cr3) < 0) goto fork_failed;
   11e78:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11e7b:	8b 50 78             	mov    0x78(%eax),%edx
   11e7e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11e81:	8b 40 1c             	mov    0x1c(%eax),%eax
   11e84:	83 ec 08             	sub    $0x8,%esp
   11e87:	52                   	push   %edx
   11e88:	50                   	push   %eax
   11e89:	e8 74 eb ff ff       	call   10a02 <memory_copy_uvm>
   11e8e:	83 c4 10             	add    $0x10,%esp
   11e91:	85 c0                	test   %eax,%eax
   11e93:	78 1c                	js     11eb1 <sys_fork+0x177>

  // 8.子进程控制块初始化完毕，设为可被调度态
  task_start(child_task);
   11e95:	83 ec 0c             	sub    $0xc,%esp
   11e98:	ff 75 f0             	push   -0x10(%ebp)
   11e9b:	e8 73 f6 ff ff       	call   11513 <task_start>
   11ea0:	83 c4 10             	add    $0x10,%esp
  // 反回子进程id
  return child_task->pid;
   11ea3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ea6:	8b 40 08             	mov    0x8(%eax),%eax
   11ea9:	eb 2e                	jmp    11ed9 <sys_fork+0x19f>
  if (child_task == (task_t *)0) goto fork_failed;
   11eab:	90                   	nop
   11eac:	eb 04                	jmp    11eb2 <sys_fork+0x178>
  if (err < 0) goto fork_failed;
   11eae:	90                   	nop
   11eaf:	eb 01                	jmp    11eb2 <sys_fork+0x178>
  if (memory_copy_uvm(tss->cr3, parent_task->tss.cr3) < 0) goto fork_failed;
   11eb1:	90                   	nop

// fork失败，清理资源
fork_failed:
  if (child_task) {  // 初始化失败，释放对应资源
   11eb2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11eb6:	74 1c                	je     11ed4 <sys_fork+0x19a>
    task_uninit(child_task);
   11eb8:	83 ec 0c             	sub    $0xc,%esp
   11ebb:	ff 75 f0             	push   -0x10(%ebp)
   11ebe:	e8 b5 f7 ff ff       	call   11678 <task_uninit>
   11ec3:	83 c4 10             	add    $0x10,%esp
    free_task(child_task);
   11ec6:	83 ec 0c             	sub    $0xc,%esp
   11ec9:	ff 75 f0             	push   -0x10(%ebp)
   11ecc:	e8 7f fd ff ff       	call   11c50 <free_task>
   11ed1:	83 c4 10             	add    $0x10,%esp
  }

  return -1;
   11ed4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11ed9:	c9                   	leave  
   11eda:	c3                   	ret    

00011edb <sys_yield>:
/**
 * @brief  使当前正在运行的任务主动让出cpu
 *
 * @return int
 */
int sys_yield(void) {
   11edb:	55                   	push   %ebp
   11edc:	89 e5                	mov    %esp,%ebp
   11ede:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   11ee1:	e8 ca 14 00 00       	call   133b0 <idt_enter_protection>
   11ee6:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 1.判断当前就绪队列中是否有多个任务
  if (list_get_size(&task_manager.ready_list) > 1) {
   11ee9:	83 ec 0c             	sub    $0xc,%esp
   11eec:	68 04 50 02 00       	push   $0x25004
   11ef1:	e8 fe f2 ff ff       	call   111f4 <list_get_size>
   11ef6:	83 c4 10             	add    $0x10,%esp
   11ef9:	83 f8 01             	cmp    $0x1,%eax
   11efc:	7e 29                	jle    11f27 <sys_yield+0x4c>
    // 2.获取当前任务
    task_t *curr_task = task_current();
   11efe:	e8 ae fa ff ff       	call   119b1 <task_current>
   11f03:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // 3.将当前任务从就绪队列中取下
    task_set_unready(curr_task);
   11f06:	83 ec 0c             	sub    $0xc,%esp
   11f09:	ff 75 f0             	push   -0x10(%ebp)
   11f0c:	e8 30 fa ff ff       	call   11941 <task_set_unready>
   11f11:	83 c4 10             	add    $0x10,%esp

    // 4.将当前任务重新加入到就绪队列的队尾
    task_set_ready(curr_task);
   11f14:	83 ec 0c             	sub    $0xc,%esp
   11f17:	ff 75 f0             	push   -0x10(%ebp)
   11f1a:	e8 e0 f9 ff ff       	call   118ff <task_set_ready>
   11f1f:	83 c4 10             	add    $0x10,%esp

    // 5.任务管理器运行下一个任务，从而释放cpu使用权
    task_switch();
   11f22:	e8 94 fa ff ff       	call   119bb <task_switch>
  }

  idt_leave_protection(state);  // TODO:解锁
   11f27:	83 ec 0c             	sub    $0xc,%esp
   11f2a:	ff 75 f4             	push   -0xc(%ebp)
   11f2d:	e8 96 14 00 00       	call   133c8 <idt_leave_protection>
   11f32:	83 c4 10             	add    $0x10,%esp
  return 0;
   11f35:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11f3a:	c9                   	leave  
   11f3b:	c3                   	ret    

00011f3c <load_phdr>:
 * @param file elf文件描述符
 * @param elf_phdr  程序段表项
 * @param page_dir 需要加载到的目标空间的页目录表地址
 * @return int
 */
static int load_phdr(int file, Elf32_Phdr *elf_phdr, uint32_t page_dir) {
   11f3c:	55                   	push   %ebp
   11f3d:	89 e5                	mov    %esp,%ebp
   11f3f:	83 ec 28             	sub    $0x28,%esp
  // 获取该段的权限
  uint32_t privilege = PTE_P | PTE_U;
   11f42:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
  if (elf_phdr->p_flags & PT_W) {  // 该段具有写权限
   11f49:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f4c:	8b 40 18             	mov    0x18(%eax),%eax
   11f4f:	83 e0 02             	and    $0x2,%eax
   11f52:	85 c0                	test   %eax,%eax
   11f54:	74 04                	je     11f5a <load_phdr+0x1e>
    privilege |= PTE_W;
   11f56:	83 4d f4 02          	orl    $0x2,-0xc(%ebp)
  }

  // 为该段分配页空间并创建映射关系
  int err = memory_alloc_for_page_dir(page_dir, elf_phdr->p_vaddr,
   11f5a:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f5d:	8b 50 14             	mov    0x14(%eax),%edx
   11f60:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f63:	8b 40 08             	mov    0x8(%eax),%eax
   11f66:	ff 75 f4             	push   -0xc(%ebp)
   11f69:	52                   	push   %edx
   11f6a:	50                   	push   %eax
   11f6b:	ff 75 10             	push   0x10(%ebp)
   11f6e:	e8 fc ed ff ff       	call   10d6f <memory_alloc_for_page_dir>
   11f73:	83 c4 10             	add    $0x10,%esp
   11f76:	89 45 e8             	mov    %eax,-0x18(%ebp)
                                      elf_phdr->p_memsz, privilege);
  if (err < 0) {
   11f79:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11f7d:	79 1a                	jns    11f99 <load_phdr+0x5d>
    log_printf("no memory\n");
   11f7f:	83 ec 0c             	sub    $0xc,%esp
   11f82:	68 fe 97 01 00       	push   $0x197fe
   11f87:	e8 09 75 00 00       	call   19495 <log_printf>
   11f8c:	83 c4 10             	add    $0x10,%esp
    return -1;
   11f8f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11f94:	e9 b5 00 00 00       	jmp    1204e <load_phdr+0x112>
  }

  // 使文件的读取位置偏移到该程序段的起始位置
  if (sys_lseek(file, elf_phdr->p_offset, 0) < 0) {
   11f99:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f9c:	8b 40 04             	mov    0x4(%eax),%eax
   11f9f:	83 ec 04             	sub    $0x4,%esp
   11fa2:	6a 00                	push   $0x0
   11fa4:	50                   	push   %eax
   11fa5:	ff 75 08             	push   0x8(%ebp)
   11fa8:	e8 dc 56 00 00       	call   17689 <sys_lseek>
   11fad:	83 c4 10             	add    $0x10,%esp
   11fb0:	85 c0                	test   %eax,%eax
   11fb2:	79 1a                	jns    11fce <load_phdr+0x92>
    log_printf("lseek file failed\n");
   11fb4:	83 ec 0c             	sub    $0xc,%esp
   11fb7:	68 09 98 01 00       	push   $0x19809
   11fbc:	e8 d4 74 00 00       	call   19495 <log_printf>
   11fc1:	83 c4 10             	add    $0x10,%esp
    return -1;
   11fc4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11fc9:	e9 80 00 00 00       	jmp    1204e <load_phdr+0x112>
  }

  // 获取该程序段的起始虚拟地址和段在文件中的大小
  uint32_t vaddr = elf_phdr->p_vaddr;
   11fce:	8b 45 0c             	mov    0xc(%ebp),%eax
   11fd1:	8b 40 08             	mov    0x8(%eax),%eax
   11fd4:	89 45 f0             	mov    %eax,-0x10(%ebp)
  uint32_t size = elf_phdr->p_filesz;
   11fd7:	8b 45 0c             	mov    0xc(%ebp),%eax
   11fda:	8b 40 10             	mov    0x10(%eax),%eax
   11fdd:	89 45 ec             	mov    %eax,-0x14(%ebp)

  while (size > 0) {  // 按页读取并拷贝
   11fe0:	eb 61                	jmp    12043 <load_phdr+0x107>
    // 获取需要拷贝的空间大小
    int curr_size = (size > MEM_PAGE_SIZE) ? MEM_PAGE_SIZE : size;
   11fe2:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11fe5:	ba 00 10 00 00       	mov    $0x1000,%edx
   11fea:	39 d0                	cmp    %edx,%eax
   11fec:	0f 47 c2             	cmova  %edx,%eax
   11fef:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    // 获取vaddr在page_dir中关联的物理页的物理地址
    uint32_t paddr = memory_get_paddr(page_dir, vaddr);
   11ff2:	83 ec 08             	sub    $0x8,%esp
   11ff5:	ff 75 f0             	push   -0x10(%ebp)
   11ff8:	ff 75 10             	push   0x10(%ebp)
   11ffb:	e8 12 ef ff ff       	call   10f12 <memory_get_paddr>
   12000:	83 c4 10             	add    $0x10,%esp
   12003:	89 45 e0             	mov    %eax,-0x20(%ebp)

    // 拷贝curr_size大小的内容到paddr对应的页中
    if (sys_read(file, (char *)paddr, curr_size) < curr_size) {
   12006:	8b 45 e0             	mov    -0x20(%ebp),%eax
   12009:	83 ec 04             	sub    $0x4,%esp
   1200c:	ff 75 e4             	push   -0x1c(%ebp)
   1200f:	50                   	push   %eax
   12010:	ff 75 08             	push   0x8(%ebp)
   12013:	e8 e8 54 00 00       	call   17500 <sys_read>
   12018:	83 c4 10             	add    $0x10,%esp
   1201b:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
   1201e:	7e 17                	jle    12037 <load_phdr+0xfb>
      log_printf("read file failed\n");
   12020:	83 ec 0c             	sub    $0xc,%esp
   12023:	68 1c 98 01 00       	push   $0x1981c
   12028:	e8 68 74 00 00       	call   19495 <log_printf>
   1202d:	83 c4 10             	add    $0x10,%esp
      return -1;
   12030:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12035:	eb 17                	jmp    1204e <load_phdr+0x112>
    }

    size -= curr_size;
   12037:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1203a:	29 45 ec             	sub    %eax,-0x14(%ebp)
    vaddr += curr_size;
   1203d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12040:	01 45 f0             	add    %eax,-0x10(%ebp)
  while (size > 0) {  // 按页读取并拷贝
   12043:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   12047:	75 99                	jne    11fe2 <load_phdr+0xa6>
  }

  return 0;
   12049:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1204e:	c9                   	leave  
   1204f:	c3                   	ret    

00012050 <load_elf_file>:
 * @param name
 * @param page_dir
 * @return uint32_t
 */
static uint32_t load_elf_file(task_t *task, const char *name,
                              uint32_t page_dir) {
   12050:	55                   	push   %ebp
   12051:	89 e5                	mov    %esp,%ebp
   12053:	83 ec 78             	sub    $0x78,%esp
  // 1.定义elf文件头对象,和程序段表项对象
  Elf32_Ehdr elf_hdr;
  Elf32_Phdr elf_phdr;

  // 2.打开文件
  int file = sys_open(name, 0);
   12056:	83 ec 08             	sub    $0x8,%esp
   12059:	6a 00                	push   $0x0
   1205b:	ff 75 0c             	push   0xc(%ebp)
   1205e:	e8 08 53 00 00       	call   1736b <sys_open>
   12063:	83 c4 10             	add    $0x10,%esp
   12066:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if (file < 0) {
   12069:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1206d:	79 18                	jns    12087 <load_elf_file+0x37>
    log_printf("open failed %s\n", name);
   1206f:	83 ec 08             	sub    $0x8,%esp
   12072:	ff 75 0c             	push   0xc(%ebp)
   12075:	68 2e 98 01 00       	push   $0x1982e
   1207a:	e8 16 74 00 00       	call   19495 <log_printf>
   1207f:	83 c4 10             	add    $0x10,%esp
    goto load_failed;
   12082:	e9 c1 01 00 00       	jmp    12248 <load_elf_file+0x1f8>
  }

  // 3.读取elf文件的elf头部分
  int cnt = sys_read(file, (char *)&elf_hdr, sizeof(Elf32_Ehdr));
   12087:	83 ec 04             	sub    $0x4,%esp
   1208a:	6a 34                	push   $0x34
   1208c:	8d 45 b0             	lea    -0x50(%ebp),%eax
   1208f:	50                   	push   %eax
   12090:	ff 75 ec             	push   -0x14(%ebp)
   12093:	e8 68 54 00 00       	call   17500 <sys_read>
   12098:	83 c4 10             	add    $0x10,%esp
   1209b:	89 45 e8             	mov    %eax,-0x18(%ebp)
  if (cnt < sizeof(Elf32_Ehdr)) {
   1209e:	8b 45 e8             	mov    -0x18(%ebp),%eax
   120a1:	83 f8 33             	cmp    $0x33,%eax
   120a4:	77 18                	ja     120be <load_elf_file+0x6e>
    log_printf("elf hdr too small. size=%d\n", cnt);
   120a6:	83 ec 08             	sub    $0x8,%esp
   120a9:	ff 75 e8             	push   -0x18(%ebp)
   120ac:	68 3e 98 01 00       	push   $0x1983e
   120b1:	e8 df 73 00 00       	call   19495 <log_printf>
   120b6:	83 c4 10             	add    $0x10,%esp
    goto load_failed;
   120b9:	e9 8a 01 00 00       	jmp    12248 <load_elf_file+0x1f8>
  }

  // 4.判断是否为ELF文件
  if (elf_hdr.e_ident[0] != 0x7F || elf_hdr.e_ident[1] != 'E' ||
   120be:	0f b6 45 b0          	movzbl -0x50(%ebp),%eax
   120c2:	3c 7f                	cmp    $0x7f,%al
   120c4:	75 18                	jne    120de <load_elf_file+0x8e>
   120c6:	0f b6 45 b1          	movzbl -0x4f(%ebp),%eax
   120ca:	3c 45                	cmp    $0x45,%al
   120cc:	75 10                	jne    120de <load_elf_file+0x8e>
      elf_hdr.e_ident[2] != 'L' || elf_hdr.e_ident[3] != 'F') {
   120ce:	0f b6 45 b2          	movzbl -0x4e(%ebp),%eax
  if (elf_hdr.e_ident[0] != 0x7F || elf_hdr.e_ident[1] != 'E' ||
   120d2:	3c 4c                	cmp    $0x4c,%al
   120d4:	75 08                	jne    120de <load_elf_file+0x8e>
      elf_hdr.e_ident[2] != 'L' || elf_hdr.e_ident[3] != 'F') {
   120d6:	0f b6 45 b3          	movzbl -0x4d(%ebp),%eax
   120da:	3c 46                	cmp    $0x46,%al
   120dc:	74 15                	je     120f3 <load_elf_file+0xa3>
    log_printf("check elf ident failed.\n");
   120de:	83 ec 0c             	sub    $0xc,%esp
   120e1:	68 5a 98 01 00       	push   $0x1985a
   120e6:	e8 aa 73 00 00       	call   19495 <log_printf>
   120eb:	83 c4 10             	add    $0x10,%esp
    goto load_failed;
   120ee:	e9 55 01 00 00       	jmp    12248 <load_elf_file+0x1f8>
  }

  // 5.必须是可执行文件和针对386处理器的类型，且有入口
  if ((elf_hdr.e_type != ET_EXEC) || (elf_hdr.e_machine != EM_386) ||
   120f3:	0f b7 45 c0          	movzwl -0x40(%ebp),%eax
   120f7:	66 83 f8 02          	cmp    $0x2,%ax
   120fb:	75 11                	jne    1210e <load_elf_file+0xbe>
   120fd:	0f b7 45 c2          	movzwl -0x3e(%ebp),%eax
   12101:	66 83 f8 03          	cmp    $0x3,%ax
   12105:	75 07                	jne    1210e <load_elf_file+0xbe>
      (elf_hdr.e_entry == 0)) {
   12107:	8b 45 c8             	mov    -0x38(%ebp),%eax
  if ((elf_hdr.e_type != ET_EXEC) || (elf_hdr.e_machine != EM_386) ||
   1210a:	85 c0                	test   %eax,%eax
   1210c:	75 15                	jne    12123 <load_elf_file+0xd3>
    log_printf("check elf type or entry failed.\n");
   1210e:	83 ec 0c             	sub    $0xc,%esp
   12111:	68 74 98 01 00       	push   $0x19874
   12116:	e8 7a 73 00 00       	call   19495 <log_printf>
   1211b:	83 c4 10             	add    $0x10,%esp
    goto load_failed;
   1211e:	e9 25 01 00 00       	jmp    12248 <load_elf_file+0x1f8>
  }

  // 6.必须有程序头部
  if ((elf_hdr.e_phentsize == 0) || (elf_hdr.e_phoff == 0)) {
   12123:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
   12127:	66 85 c0             	test   %ax,%ax
   1212a:	74 07                	je     12133 <load_elf_file+0xe3>
   1212c:	8b 45 cc             	mov    -0x34(%ebp),%eax
   1212f:	85 c0                	test   %eax,%eax
   12131:	75 15                	jne    12148 <load_elf_file+0xf8>
    log_printf("none programe header\n");
   12133:	83 ec 0c             	sub    $0xc,%esp
   12136:	68 95 98 01 00       	push   $0x19895
   1213b:	e8 55 73 00 00       	call   19495 <log_printf>
   12140:	83 c4 10             	add    $0x10,%esp
    goto load_failed;
   12143:	e9 00 01 00 00       	jmp    12248 <load_elf_file+0x1f8>
  }

  // 7.遍历elf文件的程序段，加载可加载段到内存中对应位置
  uint32_t e_phoff = elf_hdr.e_phoff;  // 获取程序段表的偏移地址
   12148:	8b 45 cc             	mov    -0x34(%ebp),%eax
   1214b:	89 45 f4             	mov    %eax,-0xc(%ebp)
  for (int i = 0; i < elf_hdr.e_phnum; ++i, e_phoff += elf_hdr.e_phentsize) {
   1214e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   12155:	e9 cb 00 00 00       	jmp    12225 <load_elf_file+0x1d5>
    if (sys_lseek(file, e_phoff, 0) < 0) {
   1215a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1215d:	83 ec 04             	sub    $0x4,%esp
   12160:	6a 00                	push   $0x0
   12162:	50                   	push   %eax
   12163:	ff 75 ec             	push   -0x14(%ebp)
   12166:	e8 1e 55 00 00       	call   17689 <sys_lseek>
   1216b:	83 c4 10             	add    $0x10,%esp
   1216e:	85 c0                	test   %eax,%eax
   12170:	79 15                	jns    12187 <load_elf_file+0x137>
      log_printf("read file failed\n");
   12172:	83 ec 0c             	sub    $0xc,%esp
   12175:	68 1c 98 01 00       	push   $0x1981c
   1217a:	e8 16 73 00 00       	call   19495 <log_printf>
   1217f:	83 c4 10             	add    $0x10,%esp
      goto load_failed;
   12182:	e9 c1 00 00 00       	jmp    12248 <load_elf_file+0x1f8>
    }

    cnt = sys_read(file, (char *)&elf_phdr, sizeof(Elf32_Phdr));
   12187:	83 ec 04             	sub    $0x4,%esp
   1218a:	6a 20                	push   $0x20
   1218c:	8d 45 90             	lea    -0x70(%ebp),%eax
   1218f:	50                   	push   %eax
   12190:	ff 75 ec             	push   -0x14(%ebp)
   12193:	e8 68 53 00 00       	call   17500 <sys_read>
   12198:	83 c4 10             	add    $0x10,%esp
   1219b:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (cnt < sizeof(Elf32_Phdr)) {
   1219e:	8b 45 e8             	mov    -0x18(%ebp),%eax
   121a1:	83 f8 1f             	cmp    $0x1f,%eax
   121a4:	77 15                	ja     121bb <load_elf_file+0x16b>
      log_printf("read file failed\n");
   121a6:	83 ec 0c             	sub    $0xc,%esp
   121a9:	68 1c 98 01 00       	push   $0x1981c
   121ae:	e8 e2 72 00 00       	call   19495 <log_printf>
   121b3:	83 c4 10             	add    $0x10,%esp
      goto load_failed;
   121b6:	e9 8d 00 00 00       	jmp    12248 <load_elf_file+0x1f8>
    }

    // 若程序段不是可加载的或虚拟地址 < 用户程序的起始地址，则不可用
    if (elf_phdr.p_type != 1 || elf_phdr.p_vaddr < MEM_TASK_BASE) {
   121bb:	8b 45 90             	mov    -0x70(%ebp),%eax
   121be:	83 f8 01             	cmp    $0x1,%eax
   121c1:	75 53                	jne    12216 <load_elf_file+0x1c6>
   121c3:	8b 45 98             	mov    -0x68(%ebp),%eax
   121c6:	85 c0                	test   %eax,%eax
   121c8:	79 4c                	jns    12216 <load_elf_file+0x1c6>
      continue;
    }

    // 加载该程序段
    int err = load_phdr(file, &elf_phdr, page_dir);
   121ca:	83 ec 04             	sub    $0x4,%esp
   121cd:	ff 75 10             	push   0x10(%ebp)
   121d0:	8d 45 90             	lea    -0x70(%ebp),%eax
   121d3:	50                   	push   %eax
   121d4:	ff 75 ec             	push   -0x14(%ebp)
   121d7:	e8 60 fd ff ff       	call   11f3c <load_phdr>
   121dc:	83 c4 10             	add    $0x10,%esp
   121df:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (err < 0) {
   121e2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   121e6:	79 12                	jns    121fa <load_elf_file+0x1aa>
      log_printf("load program failed\n");
   121e8:	83 ec 0c             	sub    $0xc,%esp
   121eb:	68 ab 98 01 00       	push   $0x198ab
   121f0:	e8 a0 72 00 00       	call   19495 <log_printf>
   121f5:	83 c4 10             	add    $0x10,%esp
      goto load_failed;
   121f8:	eb 4e                	jmp    12248 <load_elf_file+0x1f8>
    }

    // 更新堆空间的位置，紧靠最后一个可加载段
    task->heap_start = elf_phdr.p_vaddr + elf_phdr.p_memsz;
   121fa:	8b 55 98             	mov    -0x68(%ebp),%edx
   121fd:	8b 45 a4             	mov    -0x5c(%ebp),%eax
   12200:	01 c2                	add    %eax,%edx
   12202:	8b 45 08             	mov    0x8(%ebp),%eax
   12205:	89 50 10             	mov    %edx,0x10(%eax)
    task->heap_end = task->heap_start;
   12208:	8b 45 08             	mov    0x8(%ebp),%eax
   1220b:	8b 50 10             	mov    0x10(%eax),%edx
   1220e:	8b 45 08             	mov    0x8(%ebp),%eax
   12211:	89 50 14             	mov    %edx,0x14(%eax)
   12214:	eb 01                	jmp    12217 <load_elf_file+0x1c7>
      continue;
   12216:	90                   	nop
  for (int i = 0; i < elf_hdr.e_phnum; ++i, e_phoff += elf_hdr.e_phentsize) {
   12217:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   1221b:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
   1221f:	0f b7 c0             	movzwl %ax,%eax
   12222:	01 45 f4             	add    %eax,-0xc(%ebp)
   12225:	0f b7 45 dc          	movzwl -0x24(%ebp),%eax
   12229:	0f b7 c0             	movzwl %ax,%eax
   1222c:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   1222f:	0f 8c 25 ff ff ff    	jl     1215a <load_elf_file+0x10a>
  }

  // 成功解析并加载完整个elf文件后关闭文件，并返回程序入口地址
  sys_close(file);
   12235:	83 ec 0c             	sub    $0xc,%esp
   12238:	ff 75 ec             	push   -0x14(%ebp)
   1223b:	e8 de 54 00 00       	call   1771e <sys_close>
   12240:	83 c4 10             	add    $0x10,%esp
  return elf_hdr.e_entry;
   12243:	8b 45 c8             	mov    -0x38(%ebp),%eax
   12246:	eb 19                	jmp    12261 <load_elf_file+0x211>

// 错误处理
load_failed:
  if (file >= 0) {  // 文件已被打开，则关闭该文件
   12248:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1224c:	78 0e                	js     1225c <load_elf_file+0x20c>
    sys_close(file);
   1224e:	83 ec 0c             	sub    $0xc,%esp
   12251:	ff 75 ec             	push   -0x14(%ebp)
   12254:	e8 c5 54 00 00       	call   1771e <sys_close>
   12259:	83 c4 10             	add    $0x10,%esp
  }
  return 0;
   1225c:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12261:	c9                   	leave  
   12262:	c3                   	ret    

00012263 <copy_args>:
 * @param argv 参数的字符串数组
 * @param argc 参数的个数
 * @return int
 */
static int copy_args(uint32_t to_page_dir, char *stack_top, char *const *argv,
                     int argc) {
   12263:	55                   	push   %ebp
   12264:	89 e5                	mov    %esp,%ebp
   12266:	83 ec 38             	sub    $0x38,%esp
  task_args_t task_args;
  task_args.argc = argc;
   12269:	8b 45 14             	mov    0x14(%ebp),%eax
   1226c:	89 45 d8             	mov    %eax,-0x28(%ebp)

  // 1.获取char*数组在目标虚拟空间中的的虚拟地址
  // char*数组将被拷贝到task_args的上方,所以直接让argv指向栈顶偏移task_args的大小个字节的空间即可
  // 即指向了该字符串数组第一个char*的地址
  task_args.argv = (char **)(stack_top + sizeof(task_args_t));
   1226f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12272:	83 c0 0c             	add    $0xc,%eax
   12275:	89 45 dc             	mov    %eax,-0x24(%ebp)

  // 2.获取char*数组对应的虚拟空间关联的物理地址
  char **dest_argv_tb =
      (char **)memory_get_paddr(to_page_dir, (uint32_t)task_args.argv);
   12278:	8b 45 dc             	mov    -0x24(%ebp),%eax
   1227b:	83 ec 08             	sub    $0x8,%esp
   1227e:	50                   	push   %eax
   1227f:	ff 75 08             	push   0x8(%ebp)
   12282:	e8 8b ec ff ff       	call   10f12 <memory_get_paddr>
   12287:	83 c4 10             	add    $0x10,%esp
  char **dest_argv_tb =
   1228a:	89 45 ec             	mov    %eax,-0x14(%ebp)

  // 3.获取参数的存储地址, 偏移量为 task_args 加上
  // argc个参数的字符串指针的大小
  //TODO:多给一个空指针位置，不然在解析参数的时候没有结束标志可能会访问异常
  char *dest_arg = stack_top + sizeof(task_args_t) + sizeof(char *) * (argc + 1);
   1228d:	8b 45 14             	mov    0x14(%ebp),%eax
   12290:	83 c0 04             	add    $0x4,%eax
   12293:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1229a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1229d:	01 d0                	add    %edx,%eax
   1229f:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 3.将参数拷贝到dest_arg处，并将每个参数的地址记录到task.argv指向的char*数组中
  for (int i = 0; i < argc; ++i) {
   122a2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   122a9:	e9 82 00 00 00       	jmp    12330 <copy_args+0xcd>
    char *from = argv[i];
   122ae:	8b 45 f0             	mov    -0x10(%ebp),%eax
   122b1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   122b8:	8b 45 10             	mov    0x10(%ebp),%eax
   122bb:	01 d0                	add    %edx,%eax
   122bd:	8b 00                	mov    (%eax),%eax
   122bf:	89 45 e8             	mov    %eax,-0x18(%ebp)
    int len = kernel_strlen(from) + 1;
   122c2:	83 ec 0c             	sub    $0xc,%esp
   122c5:	ff 75 e8             	push   -0x18(%ebp)
   122c8:	e8 47 69 00 00       	call   18c14 <kernel_strlen>
   122cd:	83 c4 10             	add    $0x10,%esp
   122d0:	83 c0 01             	add    $0x1,%eax
   122d3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    //将每个字符串的内容陆续拷贝到dest_arg处，即task_arg以及指针数组的紧邻上方
    int err = memory_copy_uvm_data((uint32_t)dest_arg, to_page_dir,
   122d6:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
   122d9:	8b 55 e8             	mov    -0x18(%ebp),%edx
   122dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   122df:	51                   	push   %ecx
   122e0:	52                   	push   %edx
   122e1:	ff 75 08             	push   0x8(%ebp)
   122e4:	50                   	push   %eax
   122e5:	e8 7b ec ff ff       	call   10f65 <memory_copy_uvm_data>
   122ea:	83 c4 10             	add    $0x10,%esp
   122ed:	89 45 e0             	mov    %eax,-0x20(%ebp)
                                   (uint32_t)from, len);
    ASSERT(err >= 0);
   122f0:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   122f4:	79 1c                	jns    12312 <copy_args+0xaf>
   122f6:	68 c0 98 01 00       	push   $0x198c0
   122fb:	68 88 99 01 00       	push   $0x19988
   12300:	68 9f 03 00 00       	push   $0x39f
   12305:	68 9c 97 01 00       	push   $0x1979c
   1230a:	e8 6a 64 00 00       	call   18779 <pannic>
   1230f:	83 c4 10             	add    $0x10,%esp
    dest_argv_tb[i] = dest_arg;
   12312:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12315:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1231c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1231f:	01 c2                	add    %eax,%edx
   12321:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12324:	89 02                	mov    %eax,(%edx)
    dest_arg += len;
   12326:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12329:	01 45 f4             	add    %eax,-0xc(%ebp)
  for (int i = 0; i < argc; ++i) {
   1232c:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   12330:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12333:	3b 45 14             	cmp    0x14(%ebp),%eax
   12336:	0f 8c 72 ff ff ff    	jl     122ae <copy_args+0x4b>
  }

  //将字符串指针数组的最后一项
  if (argc) {
   1233c:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   12340:	74 15                	je     12357 <copy_args+0xf4>
    dest_argv_tb[argc] = (char *)0; 
   12342:	8b 45 14             	mov    0x14(%ebp),%eax
   12345:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1234c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1234f:	01 d0                	add    %edx,%eax
   12351:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  }

  // 4.将task_args拷贝到用户虚拟空间中,紧邻栈顶上方，作为入口函数的参数
  return memory_copy_uvm_data((uint32_t)stack_top, to_page_dir, (uint32_t)&task_args,
   12357:	8d 55 d4             	lea    -0x2c(%ebp),%edx
   1235a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1235d:	6a 0c                	push   $0xc
   1235f:	52                   	push   %edx
   12360:	ff 75 08             	push   0x8(%ebp)
   12363:	50                   	push   %eax
   12364:	e8 fc eb ff ff       	call   10f65 <memory_copy_uvm_data>
   12369:	83 c4 10             	add    $0x10,%esp
                       sizeof(task_args_t));
}
   1236c:	c9                   	leave  
   1236d:	c3                   	ret    

0001236e <sys_execve>:
 * @param name 程序名
 * @param argv 命令行参数数组
 * @param env 程序继承的环境变量数组
 * @return int
 */
int sys_execve(char *name, char *const *argv, char *const *env) {
   1236e:	55                   	push   %ebp
   1236f:	89 e5                	mov    %esp,%ebp
   12371:	83 ec 28             	sub    $0x28,%esp
  // 1.获取当前任务进程
  task_t *task = task_current();
   12374:	e8 38 f6 ff ff       	call   119b1 <task_current>
   12379:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 2.获取当前任务的页目录表
  uint32_t old_page_dir = task->tss.cr3;
   1237c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1237f:	8b 40 78             	mov    0x78(%eax),%eax
   12382:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 3.创建一个新的页目录表
  uint32_t new_page_dir = memory_creat_uvm();
   12385:	e8 f3 e5 ff ff       	call   1097d <memory_creat_uvm>
   1238a:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if (new_page_dir == 0)  // 创建失败
   1238d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   12391:	0f 84 4a 01 00 00    	je     124e1 <sys_execve+0x173>
    goto exec_failed;

  // 4.加载elf文件，替换当前任务
  uint32_t entry = load_elf_file(task, name, new_page_dir);
   12397:	83 ec 04             	sub    $0x4,%esp
   1239a:	ff 75 ec             	push   -0x14(%ebp)
   1239d:	ff 75 08             	push   0x8(%ebp)
   123a0:	ff 75 f4             	push   -0xc(%ebp)
   123a3:	e8 a8 fc ff ff       	call   12050 <load_elf_file>
   123a8:	83 c4 10             	add    $0x10,%esp
   123ab:	89 45 e8             	mov    %eax,-0x18(%ebp)
  if (entry == 0) goto exec_failed;
   123ae:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   123b2:	0f 84 2c 01 00 00    	je     124e4 <sys_execve+0x176>

  // 5.为新进程分配用户栈空间
  uint32_t stack_top = MEM_TASK_STACK_TOP - MEM_TASK_ARG_SIZE;
   123b8:	c7 45 e4 00 c0 ff df 	movl   $0xdfffc000,-0x1c(%ebp)
  int err = memory_alloc_for_page_dir(
   123bf:	6a 07                	push   $0x7
   123c1:	68 00 20 03 00       	push   $0x32000
   123c6:	68 00 e0 fc df       	push   $0xdffce000
   123cb:	ff 75 ec             	push   -0x14(%ebp)
   123ce:	e8 9c e9 ff ff       	call   10d6f <memory_alloc_for_page_dir>
   123d3:	83 c4 10             	add    $0x10,%esp
   123d6:	89 45 e0             	mov    %eax,-0x20(%ebp)
      new_page_dir, MEM_TASK_STACK_TOP - MEM_TASK_STACK_SIZE,
      MEM_TASK_STACK_SIZE, PTE_P | PTE_U | PTE_W);

  if (err < 0) goto exec_failed;
   123d9:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   123dd:	0f 88 04 01 00 00    	js     124e7 <sys_execve+0x179>

  // 6.将被执行任务的入口参数拷贝到栈上方对应内存空间
  int argc = strings_count(argv);
   123e3:	83 ec 0c             	sub    $0xc,%esp
   123e6:	ff 75 0c             	push   0xc(%ebp)
   123e9:	e8 5a 6c 00 00       	call   19048 <strings_count>
   123ee:	83 c4 10             	add    $0x10,%esp
   123f1:	89 45 dc             	mov    %eax,-0x24(%ebp)
  err = copy_args(new_page_dir, (char *)stack_top, argv, argc);
   123f4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   123f7:	ff 75 dc             	push   -0x24(%ebp)
   123fa:	ff 75 0c             	push   0xc(%ebp)
   123fd:	50                   	push   %eax
   123fe:	ff 75 ec             	push   -0x14(%ebp)
   12401:	e8 5d fe ff ff       	call   12263 <copy_args>
   12406:	83 c4 10             	add    $0x10,%esp
   12409:	89 45 e0             	mov    %eax,-0x20(%ebp)
  if (err < 0) goto exec_failed;
   1240c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   12410:	0f 88 d4 00 00 00    	js     124ea <sys_execve+0x17c>

  // 7.获取系统调用的栈帧,因为每次通过调用门进入内核栈中都只会一帧该结构体的数据，
  // 所以用最高地址减去大小即可获得该帧的起始地址
  syscall_frame_t *frame =
      (syscall_frame_t *)(task_current()->tss.esp0 - sizeof(syscall_frame_t));
   12416:	e8 96 f5 ff ff       	call   119b1 <task_current>
   1241b:	8b 40 60             	mov    0x60(%eax),%eax
   1241e:	83 e8 58             	sub    $0x58,%eax
  syscall_frame_t *frame =
   12421:	89 45 d8             	mov    %eax,-0x28(%ebp)

  // 8.更改进程用户栈的位置，并更改调用门返回后执行的指令地址为程序入口地址
  frame->esp = stack_top - 5 * 4;
   12424:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12427:	8d 50 ec             	lea    -0x14(%eax),%edx
   1242a:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1242d:	89 50 50             	mov    %edx,0x50(%eax)
  frame->eip = entry;
   12430:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12433:	8b 55 e8             	mov    -0x18(%ebp),%edx
   12436:	89 50 34             	mov    %edx,0x34(%eax)

  // 9.让进程更清爽的运行，清空通用寄存器的值
  frame->eax = frame->ebx = frame->ecx = frame->edx = 0;
   12439:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1243c:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
   12443:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12446:	8b 50 28             	mov    0x28(%eax),%edx
   12449:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1244c:	89 50 2c             	mov    %edx,0x2c(%eax)
   1244f:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12452:	8b 50 2c             	mov    0x2c(%eax),%edx
   12455:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12458:	89 50 24             	mov    %edx,0x24(%eax)
   1245b:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1245e:	8b 50 24             	mov    0x24(%eax),%edx
   12461:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12464:	89 50 30             	mov    %edx,0x30(%eax)
  frame->esi = frame->edi = frame->ebp = 0;
   12467:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1246a:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
   12471:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12474:	8b 50 1c             	mov    0x1c(%eax),%edx
   12477:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1247a:	89 50 14             	mov    %edx,0x14(%eax)
   1247d:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12480:	8b 50 14             	mov    0x14(%eax),%edx
   12483:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12486:	89 50 18             	mov    %edx,0x18(%eax)
  frame->eflags = EFLAGS_IF | EFLAGS_DEFAULT_1;
   12489:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1248c:	c7 00 02 02 00 00    	movl   $0x202,(%eax)

  // 10.修改当前任务名为被执行任务名
  kernel_strncpy(task->name, get_file_name(name), TASK_NAME_SIZE);
   12492:	83 ec 0c             	sub    $0xc,%esp
   12495:	ff 75 08             	push   0x8(%ebp)
   12498:	e8 d8 6b 00 00       	call   19075 <get_file_name>
   1249d:	83 c4 10             	add    $0x10,%esp
   124a0:	8b 55 f4             	mov    -0xc(%ebp),%edx
   124a3:	83 c2 24             	add    $0x24,%edx
   124a6:	83 ec 04             	sub    $0x4,%esp
   124a9:	6a 20                	push   $0x20
   124ab:	50                   	push   %eax
   124ac:	52                   	push   %edx
   124ad:	e8 90 66 00 00       	call   18b42 <kernel_strncpy>
   124b2:	83 c4 10             	add    $0x10,%esp

  // 11.记录并设置新页目录表，并销毁原页目录表的虚拟映射关系
  task->tss.cr3 = new_page_dir;
   124b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   124b8:	8b 55 ec             	mov    -0x14(%ebp),%edx
   124bb:	89 50 78             	mov    %edx,0x78(%eax)
  mmu_set_page_dir(new_page_dir);
   124be:	83 ec 0c             	sub    $0xc,%esp
   124c1:	ff 75 ec             	push   -0x14(%ebp)
   124c4:	e8 c8 ed ff ff       	call   11291 <mmu_set_page_dir>
   124c9:	83 c4 10             	add    $0x10,%esp
  memory_destroy_uvm(old_page_dir);
   124cc:	83 ec 0c             	sub    $0xc,%esp
   124cf:	ff 75 f0             	push   -0x10(%ebp)
   124d2:	e8 b8 e6 ff ff       	call   10b8f <memory_destroy_uvm>
   124d7:	83 c4 10             	add    $0x10,%esp
  return 0;
   124da:	b8 00 00 00 00       	mov    $0x0,%eax
   124df:	eb 3a                	jmp    1251b <sys_execve+0x1ad>
    goto exec_failed;
   124e1:	90                   	nop
   124e2:	eb 07                	jmp    124eb <sys_execve+0x17d>
  if (entry == 0) goto exec_failed;
   124e4:	90                   	nop
   124e5:	eb 04                	jmp    124eb <sys_execve+0x17d>
  if (err < 0) goto exec_failed;
   124e7:	90                   	nop
   124e8:	eb 01                	jmp    124eb <sys_execve+0x17d>
  if (err < 0) goto exec_failed;
   124ea:	90                   	nop

exec_failed:
  // 执行失败，释放资源并恢复到原进程状态
  if (new_page_dir) {
   124eb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   124ef:	74 25                	je     12516 <sys_execve+0x1a8>
    task->tss.cr3 = old_page_dir;
   124f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   124f4:	8b 55 f0             	mov    -0x10(%ebp),%edx
   124f7:	89 50 78             	mov    %edx,0x78(%eax)
    mmu_set_page_dir(old_page_dir);
   124fa:	83 ec 0c             	sub    $0xc,%esp
   124fd:	ff 75 f0             	push   -0x10(%ebp)
   12500:	e8 8c ed ff ff       	call   11291 <mmu_set_page_dir>
   12505:	83 c4 10             	add    $0x10,%esp
    memory_destroy_uvm(new_page_dir);
   12508:	83 ec 0c             	sub    $0xc,%esp
   1250b:	ff 75 ec             	push   -0x14(%ebp)
   1250e:	e8 7c e6 ff ff       	call   10b8f <memory_destroy_uvm>
   12513:	83 c4 10             	add    $0x10,%esp
  }
  return -1;
   12516:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1251b:	c9                   	leave  
   1251c:	c3                   	ret    

0001251d <sys_exit>:

/**
 * @brief 任务进程主动退出
 *
 */
void sys_exit(int status) {
   1251d:	55                   	push   %ebp
   1251e:	89 e5                	mov    %esp,%ebp
   12520:	83 ec 28             	sub    $0x28,%esp
  // 1.获取当前任务
  task_t *curr_task = task_current();
   12523:	e8 89 f4 ff ff       	call   119b1 <task_current>
   12528:	89 45 e8             	mov    %eax,-0x18(%ebp)

  // 2.关闭当前任务打开的文件
  for (int fd = 0; fd < TASK_OFILE_SIZE; ++fd) {
   1252b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12532:	eb 39                	jmp    1256d <sys_exit+0x50>
    file_t *file = curr_task->file_table[fd];
   12534:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12537:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1253a:	83 c2 30             	add    $0x30,%edx
   1253d:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   12541:	89 45 d8             	mov    %eax,-0x28(%ebp)
    if (file) {
   12544:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
   12548:	74 1f                	je     12569 <sys_exit+0x4c>
      sys_close(fd);
   1254a:	83 ec 0c             	sub    $0xc,%esp
   1254d:	ff 75 f4             	push   -0xc(%ebp)
   12550:	e8 c9 51 00 00       	call   1771e <sys_close>
   12555:	83 c4 10             	add    $0x10,%esp
      curr_task->file_table[fd] = (file_t *)0;
   12558:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1255b:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1255e:	83 c2 30             	add    $0x30,%edx
   12561:	c7 44 90 08 00 00 00 	movl   $0x0,0x8(%eax,%edx,4)
   12568:	00 
  for (int fd = 0; fd < TASK_OFILE_SIZE; ++fd) {
   12569:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1256d:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   12571:	7e c1                	jle    12534 <sys_exit+0x17>
    }
  }

  //3.将该进程的子进程的父进程设为first_task，由其进行统一回收
  int move_child = 0; //标志位，判断是否当前进程已有子进程进入僵尸态
   12573:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  //TODO:加锁
  mutex_lock(&task_table_lock);
   1257a:	83 ec 0c             	sub    $0xc,%esp
   1257d:	68 c0 b9 03 00       	push   $0x3b9c0
   12582:	e8 c7 5a 00 00       	call   1804e <mutex_lock>
   12587:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < TASK_COUNT; ++i) {
   1258a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   12591:	eb 3b                	jmp    125ce <sys_exit+0xb1>
    task_t *task = task_table + i;
   12593:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12596:	69 c0 c8 02 00 00    	imul   $0x2c8,%eax,%eax
   1259c:	05 c0 55 02 00       	add    $0x255c0,%eax
   125a1:	89 45 dc             	mov    %eax,-0x24(%ebp)
    if (task->parent == curr_task) {
   125a4:	8b 45 dc             	mov    -0x24(%ebp),%eax
   125a7:	8b 40 04             	mov    0x4(%eax),%eax
   125aa:	39 45 e8             	cmp    %eax,-0x18(%ebp)
   125ad:	75 1b                	jne    125ca <sys_exit+0xad>
      task->parent = &task_manager.first_task;
   125af:	8b 45 dc             	mov    -0x24(%ebp),%eax
   125b2:	c7 40 04 28 50 02 00 	movl   $0x25028,0x4(%eax)
      if (task->state == TASK_ZOMBIE) { //已有子进程提前退出进入僵尸态，则设置标志位
   125b9:	8b 45 dc             	mov    -0x24(%ebp),%eax
   125bc:	8b 00                	mov    (%eax),%eax
   125be:	83 f8 06             	cmp    $0x6,%eax
   125c1:	75 07                	jne    125ca <sys_exit+0xad>
        move_child = 1;
   125c3:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
  for (int i = 0; i < TASK_COUNT; ++i) {
   125ca:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   125ce:	83 7d ec 7f          	cmpl   $0x7f,-0x14(%ebp)
   125d2:	7e bf                	jle    12593 <sys_exit+0x76>
      }
    }
  }
  //TODO:解锁
  mutex_unlock(&task_table_lock);
   125d4:	83 ec 0c             	sub    $0xc,%esp
   125d7:	68 c0 b9 03 00       	push   $0x3b9c0
   125dc:	e8 13 5b 00 00       	call   180f4 <mutex_unlock>
   125e1:	83 c4 10             	add    $0x10,%esp
 

  // TODO:加锁
  idt_state_t state = idt_enter_protection();
   125e4:	e8 c7 0d 00 00       	call   133b0 <idt_enter_protection>
   125e9:	89 45 e4             	mov    %eax,-0x1c(%ebp)


  // 4.获取父进程，判断父进程是否在等待回收子进程资源
  task_t *parent = (task_t *)curr_task->parent;
   125ec:	8b 45 e8             	mov    -0x18(%ebp),%eax
   125ef:	8b 40 04             	mov    0x4(%eax),%eax
   125f2:	89 45 e0             	mov    %eax,-0x20(%ebp)
  
  if (move_child && (parent != &task_manager.first_task)) {  
   125f5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   125f9:	74 23                	je     1261e <sys_exit+0x101>
   125fb:	81 7d e0 28 50 02 00 	cmpl   $0x25028,-0x20(%ebp)
   12602:	74 1a                	je     1261e <sys_exit+0x101>
    //当前进程的父进程不是first_task,
    //需要对first_task进行唤醒，以使first_task
    //对当前进程的提前死亡的子进程进行资源回收
    if (task_manager.first_task.state == TASK_WAITTING) {
   12604:	a1 28 50 02 00       	mov    0x25028,%eax
   12609:	83 f8 04             	cmp    $0x4,%eax
   1260c:	75 10                	jne    1261e <sys_exit+0x101>
      task_set_ready(&task_manager.first_task);
   1260e:	83 ec 0c             	sub    $0xc,%esp
   12611:	68 28 50 02 00       	push   $0x25028
   12616:	e8 e4 f2 ff ff       	call   118ff <task_set_ready>
   1261b:	83 c4 10             	add    $0x10,%esp
    }

  }
  

  if (parent->state ==
   1261e:	8b 45 e0             	mov    -0x20(%ebp),%eax
   12621:	8b 00                	mov    (%eax),%eax
   12623:	83 f8 04             	cmp    $0x4,%eax
   12626:	75 0e                	jne    12636 <sys_exit+0x119>
      TASK_WAITTING) {  // 父进程处于阻塞并等待回收子进程资源的状态，需要唤醒父进程
    task_set_ready(parent);
   12628:	83 ec 0c             	sub    $0xc,%esp
   1262b:	ff 75 e0             	push   -0x20(%ebp)
   1262e:	e8 cc f2 ff ff       	call   118ff <task_set_ready>
   12633:	83 c4 10             	add    $0x10,%esp
  }

  // 3.设置进程状态标志为僵尸态并保存状态值
  curr_task->state = TASK_ZOMBIE;
   12636:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12639:	c7 00 06 00 00 00    	movl   $0x6,(%eax)
  curr_task->status = status;
   1263f:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12642:	8b 55 08             	mov    0x8(%ebp),%edx
   12645:	89 50 0c             	mov    %edx,0xc(%eax)

  // 5.将任务进程从就绪队列中取下
  task_set_unready(curr_task);
   12648:	83 ec 0c             	sub    $0xc,%esp
   1264b:	ff 75 e8             	push   -0x18(%ebp)
   1264e:	e8 ee f2 ff ff       	call   11941 <task_set_unready>
   12653:	83 c4 10             	add    $0x10,%esp

  // 6.切换任务进程
  task_switch();
   12656:	e8 60 f3 ff ff       	call   119bb <task_switch>

  // TODO:解锁
  idt_leave_protection(state);
   1265b:	83 ec 0c             	sub    $0xc,%esp
   1265e:	ff 75 e4             	push   -0x1c(%ebp)
   12661:	e8 62 0d 00 00       	call   133c8 <idt_leave_protection>
   12666:	83 c4 10             	add    $0x10,%esp
}
   12669:	90                   	nop
   1266a:	c9                   	leave  
   1266b:	c3                   	ret    

0001266c <sys_wait>:
 * @brief 回收进程资源
 *
 * @param status 传入参数，记录被回收的进程状态值
 * @return int  被回收的进程的pid
 */
int sys_wait(int *status) {
   1266c:	55                   	push   %ebp
   1266d:	89 e5                	mov    %esp,%ebp
   1266f:	83 ec 28             	sub    $0x28,%esp
  // 1.获取当前进程
  task_t *curr_task = task_current();
   12672:	e8 3a f3 ff ff       	call   119b1 <task_current>
   12677:	89 45 f0             	mov    %eax,-0x10(%ebp)

  for (;;) {
    // TODO:加锁
    mutex_lock(&task_table_lock);
   1267a:	83 ec 0c             	sub    $0xc,%esp
   1267d:	68 c0 b9 03 00       	push   $0x3b9c0
   12682:	e8 c7 59 00 00       	call   1804e <mutex_lock>
   12687:	83 c4 10             	add    $0x10,%esp

    // 2.遍历任务表,寻找子进程
    for (int i = 0; i < TASK_COUNT; ++i) {
   1268a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12691:	eb 6c                	jmp    126ff <sys_wait+0x93>
      task_t *task = task_table + i;
   12693:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12696:	69 c0 c8 02 00 00    	imul   $0x2c8,%eax,%eax
   1269c:	05 c0 55 02 00       	add    $0x255c0,%eax
   126a1:	89 45 e8             	mov    %eax,-0x18(%ebp)
      if (task->pid != 0 && task->parent != curr_task) {
   126a4:	8b 45 e8             	mov    -0x18(%ebp),%eax
   126a7:	8b 40 08             	mov    0x8(%eax),%eax
   126aa:	85 c0                	test   %eax,%eax
   126ac:	74 0b                	je     126b9 <sys_wait+0x4d>
   126ae:	8b 45 e8             	mov    -0x18(%ebp),%eax
   126b1:	8b 40 04             	mov    0x4(%eax),%eax
   126b4:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   126b7:	75 41                	jne    126fa <sys_wait+0x8e>
        continue;
      }
      // 3.找到一个子进程，判断是否为僵尸态
      if (task->state == TASK_ZOMBIE) {  // 僵尸态，进行资源回收
   126b9:	8b 45 e8             	mov    -0x18(%ebp),%eax
   126bc:	8b 00                	mov    (%eax),%eax
   126be:	83 f8 06             	cmp    $0x6,%eax
   126c1:	75 38                	jne    126fb <sys_wait+0x8f>
        int pid = task->pid;
   126c3:	8b 45 e8             	mov    -0x18(%ebp),%eax
   126c6:	8b 40 08             	mov    0x8(%eax),%eax
   126c9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        *status = task->status;
   126cc:	8b 45 e8             	mov    -0x18(%ebp),%eax
   126cf:	8b 50 0c             	mov    0xc(%eax),%edx
   126d2:	8b 45 08             	mov    0x8(%ebp),%eax
   126d5:	89 10                	mov    %edx,(%eax)

        //释放任务
        task_uninit(task);
   126d7:	83 ec 0c             	sub    $0xc,%esp
   126da:	ff 75 e8             	push   -0x18(%ebp)
   126dd:	e8 96 ef ff ff       	call   11678 <task_uninit>
   126e2:	83 c4 10             	add    $0x10,%esp

        // TODO:解锁
        mutex_unlock(&task_table_lock);
   126e5:	83 ec 0c             	sub    $0xc,%esp
   126e8:	68 c0 b9 03 00       	push   $0x3b9c0
   126ed:	e8 02 5a 00 00       	call   180f4 <mutex_unlock>
   126f2:	83 c4 10             	add    $0x10,%esp

        // 3.4返回该进程的pid
        return pid;
   126f5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   126f8:	eb 52                	jmp    1274c <sys_wait+0xe0>
        continue;
   126fa:	90                   	nop
    for (int i = 0; i < TASK_COUNT; ++i) {
   126fb:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   126ff:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   12703:	7e 8e                	jle    12693 <sys_wait+0x27>
      }
    }

    // TODO:解锁
    mutex_unlock(&task_table_lock);
   12705:	83 ec 0c             	sub    $0xc,%esp
   12708:	68 c0 b9 03 00       	push   $0x3b9c0
   1270d:	e8 e2 59 00 00       	call   180f4 <mutex_unlock>
   12712:	83 c4 10             	add    $0x10,%esp

    // 4.未找到僵尸态的子进程，则当前进程进入阻塞状态
    // TODO:加锁
    idt_state_t state = idt_enter_protection();
   12715:	e8 96 0c 00 00       	call   133b0 <idt_enter_protection>
   1271a:	89 45 ec             	mov    %eax,-0x14(%ebp)

    task_set_unready(curr_task);
   1271d:	83 ec 0c             	sub    $0xc,%esp
   12720:	ff 75 f0             	push   -0x10(%ebp)
   12723:	e8 19 f2 ff ff       	call   11941 <task_set_unready>
   12728:	83 c4 10             	add    $0x10,%esp
    curr_task->state = TASK_WAITTING;
   1272b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1272e:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
    task_switch();
   12734:	e8 82 f2 ff ff       	call   119bb <task_switch>

    // TODO:解锁
    idt_leave_protection(state);
   12739:	83 ec 0c             	sub    $0xc,%esp
   1273c:	ff 75 ec             	push   -0x14(%ebp)
   1273f:	e8 84 0c 00 00       	call   133c8 <idt_leave_protection>
   12744:	83 c4 10             	add    $0x10,%esp
  for (;;) {
   12747:	e9 2e ff ff ff       	jmp    1267a <sys_wait+0xe>
  }
  return 0;
   1274c:	c9                   	leave  
   1274d:	c3                   	ret    

0001274e <gate_desc_set>:
 * @param selector 门描述符对应的处理程序所在的段的选择子
 * @param offset 门描述符对应的处理程序相对于所在段的偏移量
 * @param attr 门描述符的属性
 */
void gate_desc_set(gate_desc_t *desc, const uint16_t selector, const uint32_t offset,
                          const uint16_t attr) {
   1274e:	55                   	push   %ebp
   1274f:	89 e5                	mov    %esp,%ebp
   12751:	83 ec 08             	sub    $0x8,%esp
   12754:	8b 55 0c             	mov    0xc(%ebp),%edx
   12757:	8b 45 14             	mov    0x14(%ebp),%eax
   1275a:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   1275e:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
  // 1.初始化偏移量
  desc->offset15_0 = offset & 0xffff;
   12762:	8b 45 10             	mov    0x10(%ebp),%eax
   12765:	89 c2                	mov    %eax,%edx
   12767:	8b 45 08             	mov    0x8(%ebp),%eax
   1276a:	66 89 10             	mov    %dx,(%eax)
  desc->offset31_16 = (offset >> 16) & 0xffff;
   1276d:	8b 45 10             	mov    0x10(%ebp),%eax
   12770:	c1 e8 10             	shr    $0x10,%eax
   12773:	89 c2                	mov    %eax,%edx
   12775:	8b 45 08             	mov    0x8(%ebp),%eax
   12778:	66 89 50 06          	mov    %dx,0x6(%eax)

  // 2.初始化选择子
  desc->selector = selector;
   1277c:	8b 45 08             	mov    0x8(%ebp),%eax
   1277f:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12783:	66 89 50 02          	mov    %dx,0x2(%eax)

  // 3.初始化属性位
  desc->attr = attr;
   12787:	8b 45 08             	mov    0x8(%ebp),%eax
   1278a:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   1278e:	66 89 50 04          	mov    %dx,0x4(%eax)
   12792:	90                   	nop
   12793:	c9                   	leave  
   12794:	c3                   	ret    

00012795 <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   12795:	55                   	push   %ebp
   12796:	89 e5                	mov    %esp,%ebp
   12798:	83 ec 10             	sub    $0x10,%esp
  gdt.start31_16 = (start >> 16) & 0xffff;  // 初始化GDT地址的高16位
   1279b:	8b 45 08             	mov    0x8(%ebp),%eax
   1279e:	c1 e8 10             	shr    $0x10,%eax
   127a1:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  gdt.start15_0 = start & 0xffff;           // 初始化GDT地址的低16位
   127a5:	8b 45 08             	mov    0x8(%ebp),%eax
   127a8:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   127ac:	8b 45 0c             	mov    0xc(%ebp),%eax
   127af:	83 e8 01             	sub    $0x1,%eax
  gdt.limit =
   127b2:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   127b6:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   127ba:	90                   	nop
   127bb:	c9                   	leave  
   127bc:	c3                   	ret    

000127bd <segment_desc_set>:
 *                 即2的13次方个段，也就是8192
 * @param base 该段在内存中的真实段基址
 * @param limit 该段的段界限，是一个偏移量，表示段中最大的偏移界限
 * @param attr 该段的属性位
 */
void segment_desc_set(uint16_t selector,  uint32_t base, uint32_t limit, uint16_t attr) {
   127bd:	55                   	push   %ebp
   127be:	89 e5                	mov    %esp,%ebp
   127c0:	83 ec 18             	sub    $0x18,%esp
   127c3:	8b 55 08             	mov    0x8(%ebp),%edx
   127c6:	8b 45 14             	mov    0x14(%ebp),%eax
   127c9:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
   127cd:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    //1. 获取该段描述符在内存中的起始地址，selector >> 3 取出3~15位才是其在全局描述符中的下标
    segment_desc_t *desc = gdt_table + (selector >> 3);
   127d1:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   127d5:	66 c1 e8 03          	shr    $0x3,%ax
   127d9:	0f b7 c0             	movzwl %ax,%eax
   127dc:	c1 e0 03             	shl    $0x3,%eax
   127df:	05 e0 bb 03 00       	add    $0x3bbe0,%eax
   127e4:	89 45 fc             	mov    %eax,-0x4(%ebp)

    //2. 设置段基地址
    desc->base15_0 = (uint16_t)base;
   127e7:	8b 45 0c             	mov    0xc(%ebp),%eax
   127ea:	89 c2                	mov    %eax,%edx
   127ec:	8b 45 fc             	mov    -0x4(%ebp),%eax
   127ef:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (uint8_t)(base >> 16);
   127f3:	8b 45 0c             	mov    0xc(%ebp),%eax
   127f6:	c1 e8 10             	shr    $0x10,%eax
   127f9:	89 c2                	mov    %eax,%edx
   127fb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   127fe:	88 50 04             	mov    %dl,0x4(%eax)
    desc->base31_24 = (uint8_t)(base >> 24);
   12801:	8b 45 0c             	mov    0xc(%ebp),%eax
   12804:	c1 e8 18             	shr    $0x18,%eax
   12807:	89 c2                	mov    %eax,%edx
   12809:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1280c:	88 50 07             	mov    %dl,0x7(%eax)

    //3. 设置段界限
    if (limit > 0xfffff) { //limit大于了20位能表示的最大值
   1280f:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   12816:	76 1d                	jbe    12835 <segment_desc_set+0x78>
        //将limit的粒度设置为 4kb，即将属性位G置1
        desc->attr |= 0x8000;
   12818:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1281b:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   1281f:	66 0d 00 80          	or     $0x8000,%ax
   12823:	89 c2                	mov    %eax,%edx
   12825:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12828:	66 89 50 05          	mov    %dx,0x5(%eax)

        //将limit改成以 4kb 为单位
        limit /= (4 * 1024);
   1282c:	8b 45 10             	mov    0x10(%ebp),%eax
   1282f:	c1 e8 0c             	shr    $0xc,%eax
   12832:	89 45 10             	mov    %eax,0x10(%ebp)

    }
    desc->limit15_0 = (uint16_t)limit;
   12835:	8b 45 10             	mov    0x10(%ebp),%eax
   12838:	89 c2                	mov    %eax,%edx
   1283a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1283d:	66 89 10             	mov    %dx,(%eax)
    desc->attr |= ((uint16_t)(limit >> 8) & 0x0f00); //将limit高4位赋值到attr的8~11位(段界限的高4位)
   12840:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12843:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   12847:	89 c2                	mov    %eax,%edx
   12849:	8b 45 10             	mov    0x10(%ebp),%eax
   1284c:	c1 e8 08             	shr    $0x8,%eax
   1284f:	66 25 00 0f          	and    $0xf00,%ax
   12853:	09 d0                	or     %edx,%eax
   12855:	89 c2                	mov    %eax,%edx
   12857:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1285a:	66 89 50 05          	mov    %dx,0x5(%eax)

    //4.设置属性位
    desc->attr |= attr & 0xf0ff;
   1285e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12861:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   12865:	89 c2                	mov    %eax,%edx
   12867:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   1286b:	80 e4 f0             	and    $0xf0,%ah
   1286e:	09 d0                	or     %edx,%eax
   12870:	89 c2                	mov    %eax,%edx
   12872:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12875:	66 89 50 05          	mov    %dx,0x5(%eax)


}
   12879:	90                   	nop
   1287a:	c9                   	leave  
   1287b:	c3                   	ret    

0001287c <gdt_init>:

/**
 * @brief  初始化GDT
 * 
 */
void gdt_init(void) {
   1287c:	55                   	push   %ebp
   1287d:	89 e5                	mov    %esp,%ebp
   1287f:	83 ec 18             	sub    $0x18,%esp
    //TODO:暂时将所有段都初始化为0
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   12882:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12889:	eb 1c                	jmp    128a7 <gdt_init+0x2b>
        segment_desc_set(i << 3, 0, 0, 0);
   1288b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1288e:	c1 e0 03             	shl    $0x3,%eax
   12891:	0f b7 c0             	movzwl %ax,%eax
   12894:	6a 00                	push   $0x0
   12896:	6a 00                	push   $0x0
   12898:	6a 00                	push   $0x0
   1289a:	50                   	push   %eax
   1289b:	e8 1d ff ff ff       	call   127bd <segment_desc_set>
   128a0:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   128a3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   128a7:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   128ae:	7e db                	jle    1288b <gdt_init+0xf>
        is_alloc[i] == 0;
    }

    //使用平坦模型，即段基址为0, 段界限直接用最大值，界限粒度为4kb，即段大小为4GB
    //1.设置内核的数据段,并将其标记
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff,
   128b0:	68 92 40 00 00       	push   $0x4092
   128b5:	6a ff                	push   $0xffffffff
   128b7:	6a 00                	push   $0x0
   128b9:	6a 10                	push   $0x10
   128bb:	e8 fd fe ff ff       	call   127bd <segment_desc_set>
   128c0:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL | 
                    SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_DS >> 3] = 1;
   128c3:	c6 05 e2 bb 04 00 01 	movb   $0x1,0x4bbe2

    //2.设置内核的代码段，并将其标记
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff,
   128ca:	68 9a 40 00 00       	push   $0x409a
   128cf:	6a ff                	push   $0xffffffff
   128d1:	6a 00                	push   $0x0
   128d3:	6a 08                	push   $0x8
   128d5:	e8 e3 fe ff ff       	call   127bd <segment_desc_set>
   128da:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL |
                    SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_CS >> 3] = 1;
   128dd:	c6 05 e1 bb 04 00 01 	movb   $0x1,0x4bbe1

    //3.初始化调用门描述符，调用门的 DPL >= CPL = 3 && DPL >= RPL = 0, 若目标代码段的特权级更高则发生特权级转换
    gate_desc_set((gate_desc_t*)(gdt_table + (SYSCALL_SELECTOR >> 3)), 
   128e4:	ba e7 02 01 00       	mov    $0x102e7,%edx
   128e9:	b8 f8 bb 03 00       	mov    $0x3bbf8,%eax
   128ee:	68 05 ec 00 00       	push   $0xec05
   128f3:	52                   	push   %edx
   128f4:	6a 08                	push   $0x8
   128f6:	50                   	push   %eax
   128f7:	e8 52 fe ff ff       	call   1274e <gate_desc_set>
   128fc:	83 c4 10             	add    $0x10,%esp
        KERNEL_SELECTOR_CS, (uint32_t)exception_handler_syscall, 
        GATE_ATTR_P | GATE_ATTR_DPL_3 | GATE_TYPE_SYSCALL | SYSCALL_PARAM_COUNT);
    
    is_alloc[SYSCALL_SELECTOR >> 3] = 1;
   128ff:	c6 05 e3 bb 04 00 01 	movb   $0x1,0x4bbe3


    //4.加载新的GDT表
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   12906:	b8 e0 bb 03 00       	mov    $0x3bbe0,%eax
   1290b:	83 ec 08             	sub    $0x8,%esp
   1290e:	68 00 00 01 00       	push   $0x10000
   12913:	50                   	push   %eax
   12914:	e8 7c fe ff ff       	call   12795 <lgdt>
   12919:	83 c4 10             	add    $0x10,%esp

    //4.初始化互斥锁
    mutex_init(&mutex);
   1291c:	83 ec 0c             	sub    $0xc,%esp
   1291f:	68 e0 db 04 00       	push   $0x4dbe0
   12924:	e8 d8 56 00 00       	call   18001 <mutex_init>
   12929:	83 c4 10             	add    $0x10,%esp
}
   1292c:	90                   	nop
   1292d:	c9                   	leave  
   1292e:	c3                   	ret    

0001292f <gdt_alloc_desc>:
/**
 * @brief  寻找gdt中未赋值的段描述符空间
 * 
 * @return int 返回的找到的描述符的选择子
 */
int gdt_alloc_desc() {
   1292f:	55                   	push   %ebp
   12930:	89 e5                	mov    %esp,%ebp
   12932:	83 ec 18             	sub    $0x18,%esp

    mutex_lock(&mutex);//TODO:加锁
   12935:	83 ec 0c             	sub    $0xc,%esp
   12938:	68 e0 db 04 00       	push   $0x4dbe0
   1293d:	e8 0c 57 00 00       	call   1804e <mutex_lock>
   12942:	83 c4 10             	add    $0x10,%esp

    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   12945:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   1294c:	eb 36                	jmp    12984 <gdt_alloc_desc+0x55>
        if (is_alloc[i] == 0)  {
   1294e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12951:	05 e0 bb 04 00       	add    $0x4bbe0,%eax
   12956:	0f b6 00             	movzbl (%eax),%eax
   12959:	84 c0                	test   %al,%al
   1295b:	75 23                	jne    12980 <gdt_alloc_desc+0x51>
            is_alloc[i] = 1;
   1295d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12960:	05 e0 bb 04 00       	add    $0x4bbe0,%eax
   12965:	c6 00 01             	movb   $0x1,(%eax)

            mutex_unlock(&mutex);//TODO:解锁
   12968:	83 ec 0c             	sub    $0xc,%esp
   1296b:	68 e0 db 04 00       	push   $0x4dbe0
   12970:	e8 7f 57 00 00       	call   180f4 <mutex_unlock>
   12975:	83 c4 10             	add    $0x10,%esp
            return (i << 3);
   12978:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1297b:	c1 e0 03             	shl    $0x3,%eax
   1297e:	eb 22                	jmp    129a2 <gdt_alloc_desc+0x73>
    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   12980:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12984:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   1298b:	7e c1                	jle    1294e <gdt_alloc_desc+0x1f>
        }
    }

    mutex_unlock(&mutex);//TODO:解锁
   1298d:	83 ec 0c             	sub    $0xc,%esp
   12990:	68 e0 db 04 00       	push   $0x4dbe0
   12995:	e8 5a 57 00 00       	call   180f4 <mutex_unlock>
   1299a:	83 c4 10             	add    $0x10,%esp
    return -1;
   1299d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   129a2:	c9                   	leave  
   129a3:	c3                   	ret    

000129a4 <gdt_free>:
/**
 * @brief 释放gdt表项
 * 
 * @param selector 需要释放的表项对应的选择子
 */
void gdt_free(uint16_t selector) {
   129a4:	55                   	push   %ebp
   129a5:	89 e5                	mov    %esp,%ebp
   129a7:	83 ec 14             	sub    $0x14,%esp
   129aa:	8b 45 08             	mov    0x8(%ebp),%eax
   129ad:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    uint16_t index = selector >> 3;
   129b1:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   129b5:	66 c1 e8 03          	shr    $0x3,%ax
   129b9:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    is_alloc[index] = 0;
   129bd:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
   129c1:	c6 80 e0 bb 04 00 00 	movb   $0x0,0x4bbe0(%eax)
}
   129c8:	90                   	nop
   129c9:	c9                   	leave  
   129ca:	c3                   	ret    

000129cb <cli>:
static inline void cli(void) { __asm__ __volatile__("cli"); }
   129cb:	55                   	push   %ebp
   129cc:	89 e5                	mov    %esp,%ebp
   129ce:	fa                   	cli    
   129cf:	90                   	nop
   129d0:	5d                   	pop    %ebp
   129d1:	c3                   	ret    

000129d2 <sti>:
static inline void sti(void) { __asm__ __volatile__("sti"); }
   129d2:	55                   	push   %ebp
   129d3:	89 e5                	mov    %esp,%ebp
   129d5:	fb                   	sti    
   129d6:	90                   	nop
   129d7:	5d                   	pop    %ebp
   129d8:	c3                   	ret    

000129d9 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   129d9:	55                   	push   %ebp
   129da:	89 e5                	mov    %esp,%ebp
   129dc:	f4                   	hlt    
   129dd:	90                   	nop
   129de:	5d                   	pop    %ebp
   129df:	c3                   	ret    

000129e0 <inb>:
static inline uint8_t inb(uint16_t port) {
   129e0:	55                   	push   %ebp
   129e1:	89 e5                	mov    %esp,%ebp
   129e3:	83 ec 14             	sub    $0x14,%esp
   129e6:	8b 45 08             	mov    0x8(%ebp),%eax
   129e9:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   129ed:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   129f1:	89 c2                	mov    %eax,%edx
   129f3:	ec                   	in     (%dx),%al
   129f4:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   129f7:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   129fb:	c9                   	leave  
   129fc:	c3                   	ret    

000129fd <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   129fd:	55                   	push   %ebp
   129fe:	89 e5                	mov    %esp,%ebp
   12a00:	83 ec 08             	sub    $0x8,%esp
   12a03:	8b 45 08             	mov    0x8(%ebp),%eax
   12a06:	8b 55 0c             	mov    0xc(%ebp),%edx
   12a09:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   12a0d:	89 d0                	mov    %edx,%eax
   12a0f:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   12a12:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12a16:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   12a1a:	ee                   	out    %al,(%dx)
}
   12a1b:	90                   	nop
   12a1c:	c9                   	leave  
   12a1d:	c3                   	ret    

00012a1e <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   12a1e:	55                   	push   %ebp
   12a1f:	89 e5                	mov    %esp,%ebp
   12a21:	83 ec 10             	sub    $0x10,%esp
  idt.start31_16 = (start >> 16) & 0xffff;  // 初始化IDT地址的高16位
   12a24:	8b 45 08             	mov    0x8(%ebp),%eax
   12a27:	c1 e8 10             	shr    $0x10,%eax
   12a2a:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  idt.start15_0 = start & 0xffff;           // 初始化IDT地址的低16位
   12a2e:	8b 45 08             	mov    0x8(%ebp),%eax
   12a31:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   12a35:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a38:	83 e8 01             	sub    $0x1,%eax
  idt.limit =
   12a3b:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   12a3f:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   12a43:	90                   	nop
   12a44:	c9                   	leave  
   12a45:	c3                   	ret    

00012a46 <read_cr2>:
static inline uint32_t read_cr2(void) {
   12a46:	55                   	push   %ebp
   12a47:	89 e5                	mov    %esp,%ebp
   12a49:	83 ec 10             	sub    $0x10,%esp
  __asm__ __volatile__("mov %%cr2, %[v]" : [v] "=r"(cr2));
   12a4c:	0f 20 d0             	mov    %cr2,%eax
   12a4f:	89 45 fc             	mov    %eax,-0x4(%ebp)
  return cr2;
   12a52:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12a55:	c9                   	leave  
   12a56:	c3                   	ret    

00012a57 <read_eflags>:
/**
 * @brief  读取当前cpu的eflags寄存器
 * 
 * @return uint32_t 放回eflags的值
 */
static inline uint32_t read_eflags(void) {
   12a57:	55                   	push   %ebp
   12a58:	89 e5                	mov    %esp,%ebp
   12a5a:	83 ec 10             	sub    $0x10,%esp
  uint32_t eflags;
  //pushf 压入eflags的值到栈中
  __asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   12a5d:	9c                   	pushf  
   12a5e:	58                   	pop    %eax
   12a5f:	89 45 fc             	mov    %eax,-0x4(%ebp)
  
  return eflags;
   12a62:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12a65:	c9                   	leave  
   12a66:	c3                   	ret    

00012a67 <write_eflags>:
/**
 * @brief  将状态state写入eflags寄存器
 * 
 * @param state 
 */
static inline void write_eflags(uint32_t state) {
   12a67:	55                   	push   %ebp
   12a68:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("push %%eax\n\tpopf"::"a"(state));
   12a6a:	8b 45 08             	mov    0x8(%ebp),%eax
   12a6d:	50                   	push   %eax
   12a6e:	9d                   	popf   
}
   12a6f:	90                   	nop
   12a70:	5d                   	pop    %ebp
   12a71:	c3                   	ret    

00012a72 <print_exception_fram>:
/**
 * @brief  打印异常栈帧信息
 * 
 * @param frame 栈帧
 */
static void print_exception_fram(const exception_frame_t *frame) {
   12a72:	55                   	push   %ebp
   12a73:	89 e5                	mov    %esp,%ebp
   12a75:	57                   	push   %edi
   12a76:	56                   	push   %esi
   12a77:	53                   	push   %ebx
   12a78:	83 ec 2c             	sub    $0x2c,%esp
  uint32_t ss, esp;
  if (frame->cs & 0x3) {  //cpl不为0，因为只设置了两种特权级，所以当前cpl为3，即用户程序异常
   12a7b:	8b 45 08             	mov    0x8(%ebp),%eax
   12a7e:	8b 40 3c             	mov    0x3c(%eax),%eax
   12a81:	83 e0 03             	and    $0x3,%eax
   12a84:	85 c0                	test   %eax,%eax
   12a86:	74 14                	je     12a9c <print_exception_fram+0x2a>
    ss = frame->ss3;
   12a88:	8b 45 08             	mov    0x8(%ebp),%eax
   12a8b:	8b 40 48             	mov    0x48(%eax),%eax
   12a8e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    esp = frame->esp3;
   12a91:	8b 45 08             	mov    0x8(%ebp),%eax
   12a94:	8b 40 44             	mov    0x44(%eax),%eax
   12a97:	89 45 e0             	mov    %eax,-0x20(%ebp)
   12a9a:	eb 12                	jmp    12aae <print_exception_fram+0x3c>
  } else {  //cpl为0，即内核异常
    ss = frame->ds; //内核ss与ds相同
   12a9c:	8b 45 08             	mov    0x8(%ebp),%eax
   12a9f:	8b 40 0c             	mov    0xc(%eax),%eax
   12aa2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    esp = frame->esp;
   12aa5:	8b 45 08             	mov    0x8(%ebp),%eax
   12aa8:	8b 40 1c             	mov    0x1c(%eax),%eax
   12aab:	89 45 e0             	mov    %eax,-0x20(%ebp)
  }

  log_printf("------------------------stack frame info---------------------\n");
   12aae:	83 ec 0c             	sub    $0xc,%esp
   12ab1:	68 94 99 01 00       	push   $0x19994
   12ab6:	e8 da 69 00 00       	call   19495 <log_printf>
   12abb:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ:\t\t%d\nerror code:\t%d\n", frame->num, frame->error_code);
   12abe:	8b 45 08             	mov    0x8(%ebp),%eax
   12ac1:	8b 50 34             	mov    0x34(%eax),%edx
   12ac4:	8b 45 08             	mov    0x8(%ebp),%eax
   12ac7:	8b 40 30             	mov    0x30(%eax),%eax
   12aca:	83 ec 04             	sub    $0x4,%esp
   12acd:	52                   	push   %edx
   12ace:	50                   	push   %eax
   12acf:	68 d3 99 01 00       	push   $0x199d3
   12ad4:	e8 bc 69 00 00       	call   19495 <log_printf>
   12ad9:	83 c4 10             	add    $0x10,%esp
  log_printf("CS:\t\t\t%d\nDS:\t\t\t%d\nSS:\t\t\t%d\nES:\t\t\t%d\nFS:\t\t\t%d\nGS:\t\t\t%d\n", 
    //TODO:SS暂时没法获取，先用ds替代，之后再进行获取
    frame->cs, frame->ds, ss, frame->es, frame->fs, frame->gs
   12adc:	8b 45 08             	mov    0x8(%ebp),%eax
   12adf:	8b 30                	mov    (%eax),%esi
   12ae1:	8b 45 08             	mov    0x8(%ebp),%eax
   12ae4:	8b 58 04             	mov    0x4(%eax),%ebx
   12ae7:	8b 45 08             	mov    0x8(%ebp),%eax
   12aea:	8b 48 08             	mov    0x8(%eax),%ecx
   12aed:	8b 45 08             	mov    0x8(%ebp),%eax
   12af0:	8b 50 0c             	mov    0xc(%eax),%edx
   12af3:	8b 45 08             	mov    0x8(%ebp),%eax
   12af6:	8b 40 3c             	mov    0x3c(%eax),%eax
  log_printf("CS:\t\t\t%d\nDS:\t\t\t%d\nSS:\t\t\t%d\nES:\t\t\t%d\nFS:\t\t\t%d\nGS:\t\t\t%d\n", 
   12af9:	83 ec 04             	sub    $0x4,%esp
   12afc:	56                   	push   %esi
   12afd:	53                   	push   %ebx
   12afe:	51                   	push   %ecx
   12aff:	ff 75 e4             	push   -0x1c(%ebp)
   12b02:	52                   	push   %edx
   12b03:	50                   	push   %eax
   12b04:	68 ec 99 01 00       	push   $0x199ec
   12b09:	e8 87 69 00 00       	call   19495 <log_printf>
   12b0e:	83 c4 20             	add    $0x20,%esp
              "ESI:\t\t0x%x\n"
              "EDI:\t\t0x%x\n"
              "EBP:\t\t0x%x\n"
              "ESP:\t\t0x%x\n", 
              frame->eax, frame->ebx, frame->ecx, frame->edx,
              frame->esi, frame->edi, frame->ebp, esp 
   12b11:	8b 45 08             	mov    0x8(%ebp),%eax
   12b14:	8b 40 18             	mov    0x18(%eax),%eax
   12b17:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   12b1a:	8b 45 08             	mov    0x8(%ebp),%eax
   12b1d:	8b 78 10             	mov    0x10(%eax),%edi
   12b20:	8b 45 08             	mov    0x8(%ebp),%eax
   12b23:	8b 70 14             	mov    0x14(%eax),%esi
              frame->eax, frame->ebx, frame->ecx, frame->edx,
   12b26:	8b 45 08             	mov    0x8(%ebp),%eax
   12b29:	8b 58 24             	mov    0x24(%eax),%ebx
   12b2c:	8b 45 08             	mov    0x8(%ebp),%eax
   12b2f:	8b 48 28             	mov    0x28(%eax),%ecx
   12b32:	8b 45 08             	mov    0x8(%ebp),%eax
   12b35:	8b 50 20             	mov    0x20(%eax),%edx
   12b38:	8b 45 08             	mov    0x8(%ebp),%eax
   12b3b:	8b 40 2c             	mov    0x2c(%eax),%eax
  log_printf( 
   12b3e:	83 ec 0c             	sub    $0xc,%esp
   12b41:	ff 75 e0             	push   -0x20(%ebp)
   12b44:	ff 75 d4             	push   -0x2c(%ebp)
   12b47:	57                   	push   %edi
   12b48:	56                   	push   %esi
   12b49:	53                   	push   %ebx
   12b4a:	51                   	push   %ecx
   12b4b:	52                   	push   %edx
   12b4c:	50                   	push   %eax
   12b4d:	68 24 9a 01 00       	push   $0x19a24
   12b52:	e8 3e 69 00 00       	call   19495 <log_printf>
   12b57:	83 c4 30             	add    $0x30,%esp
              );

  log_printf("EIP:\t\t0x%x\nEFLAGS:\t\t0x%x\n", frame->eip, frame->eflags);
   12b5a:	8b 45 08             	mov    0x8(%ebp),%eax
   12b5d:	8b 50 40             	mov    0x40(%eax),%edx
   12b60:	8b 45 08             	mov    0x8(%ebp),%eax
   12b63:	8b 40 38             	mov    0x38(%eax),%eax
   12b66:	83 ec 04             	sub    $0x4,%esp
   12b69:	52                   	push   %edx
   12b6a:	50                   	push   %eax
   12b6b:	68 7d 9a 01 00       	push   $0x19a7d
   12b70:	e8 20 69 00 00       	call   19495 <log_printf>
   12b75:	83 c4 10             	add    $0x10,%esp
}
   12b78:	90                   	nop
   12b79:	8d 65 f4             	lea    -0xc(%ebp),%esp
   12b7c:	5b                   	pop    %ebx
   12b7d:	5e                   	pop    %esi
   12b7e:	5f                   	pop    %edi
   12b7f:	5d                   	pop    %ebp
   12b80:	c3                   	ret    

00012b81 <exit_excption_handler>:
/**
 * @brief 进程退出异常处理
 * 
 * @param frame 
 */
static void exit_excption_handler(const exception_frame_t *frame) {
   12b81:	55                   	push   %ebp
   12b82:	89 e5                	mov    %esp,%ebp
   12b84:	83 ec 08             	sub    $0x8,%esp
  if (frame->cs & 0x3) {  //用户进程异常，直接退出用户进程
   12b87:	8b 45 08             	mov    0x8(%ebp),%eax
   12b8a:	8b 40 3c             	mov    0x3c(%eax),%eax
   12b8d:	83 e0 03             	and    $0x3,%eax
   12b90:	85 c0                	test   %eax,%eax
   12b92:	74 14                	je     12ba8 <exit_excption_handler+0x27>
        sys_exit(frame->error_code);
   12b94:	8b 45 08             	mov    0x8(%ebp),%eax
   12b97:	8b 40 34             	mov    0x34(%eax),%eax
   12b9a:	83 ec 0c             	sub    $0xc,%esp
   12b9d:	50                   	push   %eax
   12b9e:	e8 7a f9 ff ff       	call   1251d <sys_exit>
   12ba3:	83 c4 10             	add    $0x10,%esp
  } else {  //内核异常直接死机
      for (;;) {
          hlt();
      }
  }
}
   12ba6:	eb 07                	jmp    12baf <exit_excption_handler+0x2e>
          hlt();
   12ba8:	e8 2c fe ff ff       	call   129d9 <hlt>
   12bad:	eb f9                	jmp    12ba8 <exit_excption_handler+0x27>
}
   12baf:	c9                   	leave  
   12bb0:	c3                   	ret    

00012bb1 <do_default_handler>:
 *
 * @param message 异常信息
 * @param fram  异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
static void do_default_handler(const exception_frame_t *frame,
                               const char *message) {
   12bb1:	55                   	push   %ebp
   12bb2:	89 e5                	mov    %esp,%ebp
   12bb4:	83 ec 08             	sub    $0x8,%esp

  log_printf("---------------------------------------------------\n");
   12bb7:	83 ec 0c             	sub    $0xc,%esp
   12bba:	68 98 9a 01 00       	push   $0x19a98
   12bbf:	e8 d1 68 00 00       	call   19495 <log_printf>
   12bc4:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ/Exception happend: %s\n", message);
   12bc7:	83 ec 08             	sub    $0x8,%esp
   12bca:	ff 75 0c             	push   0xc(%ebp)
   12bcd:	68 cd 9a 01 00       	push   $0x19acd
   12bd2:	e8 be 68 00 00       	call   19495 <log_printf>
   12bd7:	83 c4 10             	add    $0x10,%esp
  print_exception_fram(frame);
   12bda:	83 ec 0c             	sub    $0xc,%esp
   12bdd:	ff 75 08             	push   0x8(%ebp)
   12be0:	e8 8d fe ff ff       	call   12a72 <print_exception_fram>
   12be5:	83 c4 10             	add    $0x10,%esp
                              
  
  exit_excption_handler(frame);
   12be8:	83 ec 0c             	sub    $0xc,%esp
   12beb:	ff 75 08             	push   0x8(%ebp)
   12bee:	e8 8e ff ff ff       	call   12b81 <exit_excption_handler>
   12bf3:	83 c4 10             	add    $0x10,%esp
}
   12bf6:	90                   	nop
   12bf7:	c9                   	leave  
   12bf8:	c3                   	ret    

00012bf9 <do_handler_unknown>:

/**
 * @brief   对没有针对性处理程序的异常进行处理
 * @param frame 异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
void do_handler_unknown(const exception_frame_t *frame) {
   12bf9:	55                   	push   %ebp
   12bfa:	89 e5                	mov    %esp,%ebp
   12bfc:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "unknown exception");
   12bff:	83 ec 08             	sub    $0x8,%esp
   12c02:	68 e8 9a 01 00       	push   $0x19ae8
   12c07:	ff 75 08             	push   0x8(%ebp)
   12c0a:	e8 a2 ff ff ff       	call   12bb1 <do_default_handler>
   12c0f:	83 c4 10             	add    $0x10,%esp
}
   12c12:	90                   	nop
   12c13:	c9                   	leave  
   12c14:	c3                   	ret    

00012c15 <do_handler_divider>:
/**
 * @brief  除0异常
 *
 * @param frame 异常栈帧
 */
void do_handler_divider(const exception_frame_t *frame) {
   12c15:	55                   	push   %ebp
   12c16:	89 e5                	mov    %esp,%ebp
   12c18:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "divider exception");
   12c1b:	83 ec 08             	sub    $0x8,%esp
   12c1e:	68 fa 9a 01 00       	push   $0x19afa
   12c23:	ff 75 08             	push   0x8(%ebp)
   12c26:	e8 86 ff ff ff       	call   12bb1 <do_default_handler>
   12c2b:	83 c4 10             	add    $0x10,%esp
}
   12c2e:	90                   	nop
   12c2f:	c9                   	leave  
   12c30:	c3                   	ret    

00012c31 <do_handler_debug>:

void do_handler_debug(const exception_frame_t *frame) {
   12c31:	55                   	push   %ebp
   12c32:	89 e5                	mov    %esp,%ebp
   12c34:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "debug exception");
   12c37:	83 ec 08             	sub    $0x8,%esp
   12c3a:	68 0c 9b 01 00       	push   $0x19b0c
   12c3f:	ff 75 08             	push   0x8(%ebp)
   12c42:	e8 6a ff ff ff       	call   12bb1 <do_default_handler>
   12c47:	83 c4 10             	add    $0x10,%esp
}
   12c4a:	90                   	nop
   12c4b:	c9                   	leave  
   12c4c:	c3                   	ret    

00012c4d <do_handler_nmi>:

void do_handler_nmi(const exception_frame_t *frame) {
   12c4d:	55                   	push   %ebp
   12c4e:	89 e5                	mov    %esp,%ebp
   12c50:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "nmi exception");
   12c53:	83 ec 08             	sub    $0x8,%esp
   12c56:	68 1c 9b 01 00       	push   $0x19b1c
   12c5b:	ff 75 08             	push   0x8(%ebp)
   12c5e:	e8 4e ff ff ff       	call   12bb1 <do_default_handler>
   12c63:	83 c4 10             	add    $0x10,%esp
}
   12c66:	90                   	nop
   12c67:	c9                   	leave  
   12c68:	c3                   	ret    

00012c69 <do_handler_breakpoint>:
void do_handler_breakpoint(const exception_frame_t *frame) {
   12c69:	55                   	push   %ebp
   12c6a:	89 e5                	mov    %esp,%ebp
   12c6c:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "breakpoint exception");
   12c6f:	83 ec 08             	sub    $0x8,%esp
   12c72:	68 2a 9b 01 00       	push   $0x19b2a
   12c77:	ff 75 08             	push   0x8(%ebp)
   12c7a:	e8 32 ff ff ff       	call   12bb1 <do_default_handler>
   12c7f:	83 c4 10             	add    $0x10,%esp
}
   12c82:	90                   	nop
   12c83:	c9                   	leave  
   12c84:	c3                   	ret    

00012c85 <do_handler_overflow>:
void do_handler_overflow(const exception_frame_t *frame) {
   12c85:	55                   	push   %ebp
   12c86:	89 e5                	mov    %esp,%ebp
   12c88:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "overflow exception");
   12c8b:	83 ec 08             	sub    $0x8,%esp
   12c8e:	68 3f 9b 01 00       	push   $0x19b3f
   12c93:	ff 75 08             	push   0x8(%ebp)
   12c96:	e8 16 ff ff ff       	call   12bb1 <do_default_handler>
   12c9b:	83 c4 10             	add    $0x10,%esp
}
   12c9e:	90                   	nop
   12c9f:	c9                   	leave  
   12ca0:	c3                   	ret    

00012ca1 <do_handler_bound_range>:
void do_handler_bound_range(const exception_frame_t *frame) {
   12ca1:	55                   	push   %ebp
   12ca2:	89 e5                	mov    %esp,%ebp
   12ca4:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "bound_range exception");
   12ca7:	83 ec 08             	sub    $0x8,%esp
   12caa:	68 52 9b 01 00       	push   $0x19b52
   12caf:	ff 75 08             	push   0x8(%ebp)
   12cb2:	e8 fa fe ff ff       	call   12bb1 <do_default_handler>
   12cb7:	83 c4 10             	add    $0x10,%esp
}
   12cba:	90                   	nop
   12cbb:	c9                   	leave  
   12cbc:	c3                   	ret    

00012cbd <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(const exception_frame_t *frame) {
   12cbd:	55                   	push   %ebp
   12cbe:	89 e5                	mov    %esp,%ebp
   12cc0:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_opcode exception");
   12cc3:	83 ec 08             	sub    $0x8,%esp
   12cc6:	68 68 9b 01 00       	push   $0x19b68
   12ccb:	ff 75 08             	push   0x8(%ebp)
   12cce:	e8 de fe ff ff       	call   12bb1 <do_default_handler>
   12cd3:	83 c4 10             	add    $0x10,%esp
}
   12cd6:	90                   	nop
   12cd7:	c9                   	leave  
   12cd8:	c3                   	ret    

00012cd9 <do_handler_device_unavailable>:
void do_handler_device_unavailable(const exception_frame_t *frame) {
   12cd9:	55                   	push   %ebp
   12cda:	89 e5                	mov    %esp,%ebp
   12cdc:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "device_unavailable exception");
   12cdf:	83 ec 08             	sub    $0x8,%esp
   12ce2:	68 81 9b 01 00       	push   $0x19b81
   12ce7:	ff 75 08             	push   0x8(%ebp)
   12cea:	e8 c2 fe ff ff       	call   12bb1 <do_default_handler>
   12cef:	83 c4 10             	add    $0x10,%esp
}
   12cf2:	90                   	nop
   12cf3:	c9                   	leave  
   12cf4:	c3                   	ret    

00012cf5 <do_handler_double_fault>:
void do_handler_double_fault(const exception_frame_t *frame) {
   12cf5:	55                   	push   %ebp
   12cf6:	89 e5                	mov    %esp,%ebp
   12cf8:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "double_fault exception");
   12cfb:	83 ec 08             	sub    $0x8,%esp
   12cfe:	68 9e 9b 01 00       	push   $0x19b9e
   12d03:	ff 75 08             	push   0x8(%ebp)
   12d06:	e8 a6 fe ff ff       	call   12bb1 <do_default_handler>
   12d0b:	83 c4 10             	add    $0x10,%esp
}
   12d0e:	90                   	nop
   12d0f:	c9                   	leave  
   12d10:	c3                   	ret    

00012d11 <do_handler_invalid_tss>:
void do_handler_invalid_tss(const exception_frame_t *frame) {
   12d11:	55                   	push   %ebp
   12d12:	89 e5                	mov    %esp,%ebp
   12d14:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_tss exception");
   12d17:	83 ec 08             	sub    $0x8,%esp
   12d1a:	68 b5 9b 01 00       	push   $0x19bb5
   12d1f:	ff 75 08             	push   0x8(%ebp)
   12d22:	e8 8a fe ff ff       	call   12bb1 <do_default_handler>
   12d27:	83 c4 10             	add    $0x10,%esp
}
   12d2a:	90                   	nop
   12d2b:	c9                   	leave  
   12d2c:	c3                   	ret    

00012d2d <do_handler_segment_not_present>:
void do_handler_segment_not_present(const exception_frame_t *frame) {
   12d2d:	55                   	push   %ebp
   12d2e:	89 e5                	mov    %esp,%ebp
   12d30:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "segment_not_present exception");
   12d33:	83 ec 08             	sub    $0x8,%esp
   12d36:	68 cb 9b 01 00       	push   $0x19bcb
   12d3b:	ff 75 08             	push   0x8(%ebp)
   12d3e:	e8 6e fe ff ff       	call   12bb1 <do_default_handler>
   12d43:	83 c4 10             	add    $0x10,%esp
}
   12d46:	90                   	nop
   12d47:	c9                   	leave  
   12d48:	c3                   	ret    

00012d49 <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(const exception_frame_t *frame) {
   12d49:	55                   	push   %ebp
   12d4a:	89 e5                	mov    %esp,%ebp
   12d4c:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "stack_segment_fault exception");
   12d4f:	83 ec 08             	sub    $0x8,%esp
   12d52:	68 e9 9b 01 00       	push   $0x19be9
   12d57:	ff 75 08             	push   0x8(%ebp)
   12d5a:	e8 52 fe ff ff       	call   12bb1 <do_default_handler>
   12d5f:	83 c4 10             	add    $0x10,%esp
}
   12d62:	90                   	nop
   12d63:	c9                   	leave  
   12d64:	c3                   	ret    

00012d65 <do_handler_general_protection>:
void do_handler_general_protection(const exception_frame_t *frame) {
   12d65:	55                   	push   %ebp
   12d66:	89 e5                	mov    %esp,%ebp
   12d68:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------\n");
   12d6b:	83 ec 0c             	sub    $0xc,%esp
   12d6e:	68 08 9c 01 00       	push   $0x19c08
   12d73:	e8 1d 67 00 00       	call   19495 <log_printf>
   12d78:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: General Protection.\n");
   12d7b:	83 ec 0c             	sub    $0xc,%esp
   12d7e:	68 2c 9c 01 00       	push   $0x19c2c
   12d83:	e8 0d 67 00 00       	call   19495 <log_printf>
   12d88:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_EXT) {
   12d8b:	8b 45 08             	mov    0x8(%ebp),%eax
   12d8e:	8b 40 34             	mov    0x34(%eax),%eax
   12d91:	83 e0 01             	and    $0x1,%eax
   12d94:	85 c0                	test   %eax,%eax
   12d96:	74 12                	je     12daa <do_handler_general_protection+0x45>
        log_printf("the exception occurred during delivery of an "
   12d98:	83 ec 0c             	sub    $0xc,%esp
   12d9b:	68 58 9c 01 00       	push   $0x19c58
   12da0:	e8 f0 66 00 00       	call   19495 <log_printf>
   12da5:	83 c4 10             	add    $0x10,%esp
   12da8:	eb 10                	jmp    12dba <do_handler_general_protection+0x55>
                "event external to the program, such as an interrupt"
                "or an earlier exception.\n");
    } else {
        log_printf("the exception occurred during delivery of a"
   12daa:	83 ec 0c             	sub    $0xc,%esp
   12dad:	68 d4 9c 01 00       	push   $0x19cd4
   12db2:	e8 de 66 00 00       	call   19495 <log_printf>
   12db7:	83 c4 10             	add    $0x10,%esp
                    "software interrupt (INT n, INT3, or INTO).\n");
    }
    
    if (frame->error_code & ERR_IDT) {
   12dba:	8b 45 08             	mov    0x8(%ebp),%eax
   12dbd:	8b 40 34             	mov    0x34(%eax),%eax
   12dc0:	83 e0 02             	and    $0x2,%eax
   12dc3:	85 c0                	test   %eax,%eax
   12dc5:	74 12                	je     12dd9 <do_handler_general_protection+0x74>
        log_printf("the index portion of the error code refers "
   12dc7:	83 ec 0c             	sub    $0xc,%esp
   12dca:	68 2c 9d 01 00       	push   $0x19d2c
   12dcf:	e8 c1 66 00 00       	call   19495 <log_printf>
   12dd4:	83 c4 10             	add    $0x10,%esp
   12dd7:	eb 10                	jmp    12de9 <do_handler_general_protection+0x84>
                    "to a gate descriptor in the IDT\n");
    } else {
        log_printf("the index refers to a descriptor in the GDT\n");
   12dd9:	83 ec 0c             	sub    $0xc,%esp
   12ddc:	68 78 9d 01 00       	push   $0x19d78
   12de1:	e8 af 66 00 00       	call   19495 <log_printf>
   12de6:	83 c4 10             	add    $0x10,%esp
    }
    
    log_printf("segment index: %d\n", frame->error_code & 0xFFF8);
   12de9:	8b 45 08             	mov    0x8(%ebp),%eax
   12dec:	8b 40 34             	mov    0x34(%eax),%eax
   12def:	25 f8 ff 00 00       	and    $0xfff8,%eax
   12df4:	83 ec 08             	sub    $0x8,%esp
   12df7:	50                   	push   %eax
   12df8:	68 a5 9d 01 00       	push   $0x19da5
   12dfd:	e8 93 66 00 00       	call   19495 <log_printf>
   12e02:	83 c4 10             	add    $0x10,%esp
    print_exception_fram(frame);
   12e05:	83 ec 0c             	sub    $0xc,%esp
   12e08:	ff 75 08             	push   0x8(%ebp)
   12e0b:	e8 62 fc ff ff       	call   12a72 <print_exception_fram>
   12e10:	83 c4 10             	add    $0x10,%esp

    //进程退出异常
    exit_excption_handler(frame);
   12e13:	83 ec 0c             	sub    $0xc,%esp
   12e16:	ff 75 08             	push   0x8(%ebp)
   12e19:	e8 63 fd ff ff       	call   12b81 <exit_excption_handler>
   12e1e:	83 c4 10             	add    $0x10,%esp
}
   12e21:	90                   	nop
   12e22:	c9                   	leave  
   12e23:	c3                   	ret    

00012e24 <do_handler_page_fault>:
/**
 * @brief page_fault异常处理函数
 * 
 * @param frame 
 */
void do_handler_page_fault(const exception_frame_t *frame) {
   12e24:	55                   	push   %ebp
   12e25:	89 e5                	mov    %esp,%ebp
   12e27:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------\n");
   12e2a:	83 ec 0c             	sub    $0xc,%esp
   12e2d:	68 08 9c 01 00       	push   $0x19c08
   12e32:	e8 5e 66 00 00       	call   19495 <log_printf>
   12e37:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: Page fault.\n");
   12e3a:	83 ec 0c             	sub    $0xc,%esp
   12e3d:	68 b8 9d 01 00       	push   $0x19db8
   12e42:	e8 4e 66 00 00       	call   19495 <log_printf>
   12e47:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_PAGE_P) {
   12e4a:	8b 45 08             	mov    0x8(%ebp),%eax
   12e4d:	8b 40 34             	mov    0x34(%eax),%eax
   12e50:	83 e0 01             	and    $0x1,%eax
   12e53:	85 c0                	test   %eax,%eax
   12e55:	74 18                	je     12e6f <do_handler_page_fault+0x4b>
        log_printf("page-level protection violation: 0x%x.\n", read_cr2());
   12e57:	e8 ea fb ff ff       	call   12a46 <read_cr2>
   12e5c:	83 ec 08             	sub    $0x8,%esp
   12e5f:	50                   	push   %eax
   12e60:	68 dc 9d 01 00       	push   $0x19ddc
   12e65:	e8 2b 66 00 00       	call   19495 <log_printf>
   12e6a:	83 c4 10             	add    $0x10,%esp
   12e6d:	eb 16                	jmp    12e85 <do_handler_page_fault+0x61>
    } else {
        log_printf("Page doesn't present 0x%x\n", read_cr2());
   12e6f:	e8 d2 fb ff ff       	call   12a46 <read_cr2>
   12e74:	83 ec 08             	sub    $0x8,%esp
   12e77:	50                   	push   %eax
   12e78:	68 04 9e 01 00       	push   $0x19e04
   12e7d:	e8 13 66 00 00       	call   19495 <log_printf>
   12e82:	83 c4 10             	add    $0x10,%esp
   }
    
    if (frame->error_code & ERR_PAGE_WR) {
   12e85:	8b 45 08             	mov    0x8(%ebp),%eax
   12e88:	8b 40 34             	mov    0x34(%eax),%eax
   12e8b:	83 e0 02             	and    $0x2,%eax
   12e8e:	85 c0                	test   %eax,%eax
   12e90:	74 12                	je     12ea4 <do_handler_page_fault+0x80>
        log_printf("The access causing the fault was a write.\n");
   12e92:	83 ec 0c             	sub    $0xc,%esp
   12e95:	68 20 9e 01 00       	push   $0x19e20
   12e9a:	e8 f6 65 00 00       	call   19495 <log_printf>
   12e9f:	83 c4 10             	add    $0x10,%esp
   12ea2:	eb 10                	jmp    12eb4 <do_handler_page_fault+0x90>
    } else {
        log_printf("The access causing the fault was a read.\n");
   12ea4:	83 ec 0c             	sub    $0xc,%esp
   12ea7:	68 4c 9e 01 00       	push   $0x19e4c
   12eac:	e8 e4 65 00 00       	call   19495 <log_printf>
   12eb1:	83 c4 10             	add    $0x10,%esp
    }
    
    if (frame->error_code & ERR_PAGE_US) {
   12eb4:	8b 45 08             	mov    0x8(%ebp),%eax
   12eb7:	8b 40 34             	mov    0x34(%eax),%eax
   12eba:	83 e0 04             	and    $0x4,%eax
   12ebd:	85 c0                	test   %eax,%eax
   12ebf:	74 12                	je     12ed3 <do_handler_page_fault+0xaf>
        log_printf("A user-mode access caused the fault.\n");
   12ec1:	83 ec 0c             	sub    $0xc,%esp
   12ec4:	68 78 9e 01 00       	push   $0x19e78
   12ec9:	e8 c7 65 00 00       	call   19495 <log_printf>
   12ece:	83 c4 10             	add    $0x10,%esp
   12ed1:	eb 10                	jmp    12ee3 <do_handler_page_fault+0xbf>
    } else {
        log_printf("A supervisor-mode access caused the fault.\n");
   12ed3:	83 ec 0c             	sub    $0xc,%esp
   12ed6:	68 a0 9e 01 00       	push   $0x19ea0
   12edb:	e8 b5 65 00 00       	call   19495 <log_printf>
   12ee0:	83 c4 10             	add    $0x10,%esp
    }

   print_exception_fram(frame);
   12ee3:	83 ec 0c             	sub    $0xc,%esp
   12ee6:	ff 75 08             	push   0x8(%ebp)
   12ee9:	e8 84 fb ff ff       	call   12a72 <print_exception_fram>
   12eee:	83 c4 10             	add    $0x10,%esp
  
    //进程退出异常
    exit_excption_handler(frame);
   12ef1:	83 ec 0c             	sub    $0xc,%esp
   12ef4:	ff 75 08             	push   0x8(%ebp)
   12ef7:	e8 85 fc ff ff       	call   12b81 <exit_excption_handler>
   12efc:	83 c4 10             	add    $0x10,%esp
}
   12eff:	90                   	nop
   12f00:	c9                   	leave  
   12f01:	c3                   	ret    

00012f02 <do_handler_fpu_error>:

void do_handler_fpu_error(const exception_frame_t *frame) {
   12f02:	55                   	push   %ebp
   12f03:	89 e5                	mov    %esp,%ebp
   12f05:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "fpu_error exception\n");
   12f08:	83 ec 08             	sub    $0x8,%esp
   12f0b:	68 cc 9e 01 00       	push   $0x19ecc
   12f10:	ff 75 08             	push   0x8(%ebp)
   12f13:	e8 99 fc ff ff       	call   12bb1 <do_default_handler>
   12f18:	83 c4 10             	add    $0x10,%esp
}
   12f1b:	90                   	nop
   12f1c:	c9                   	leave  
   12f1d:	c3                   	ret    

00012f1e <do_handler_alignment_check>:
void do_handler_alignment_check(const exception_frame_t *frame) {
   12f1e:	55                   	push   %ebp
   12f1f:	89 e5                	mov    %esp,%ebp
   12f21:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "alignment_check exception\n");
   12f24:	83 ec 08             	sub    $0x8,%esp
   12f27:	68 e1 9e 01 00       	push   $0x19ee1
   12f2c:	ff 75 08             	push   0x8(%ebp)
   12f2f:	e8 7d fc ff ff       	call   12bb1 <do_default_handler>
   12f34:	83 c4 10             	add    $0x10,%esp
}
   12f37:	90                   	nop
   12f38:	c9                   	leave  
   12f39:	c3                   	ret    

00012f3a <do_handler_machine_check>:
void do_handler_machine_check(const exception_frame_t *frame) {
   12f3a:	55                   	push   %ebp
   12f3b:	89 e5                	mov    %esp,%ebp
   12f3d:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "machine_check exception\n");
   12f40:	83 ec 08             	sub    $0x8,%esp
   12f43:	68 fc 9e 01 00       	push   $0x19efc
   12f48:	ff 75 08             	push   0x8(%ebp)
   12f4b:	e8 61 fc ff ff       	call   12bb1 <do_default_handler>
   12f50:	83 c4 10             	add    $0x10,%esp
}
   12f53:	90                   	nop
   12f54:	c9                   	leave  
   12f55:	c3                   	ret    

00012f56 <do_handler_smd_exception>:
void do_handler_smd_exception(const exception_frame_t *frame) {
   12f56:	55                   	push   %ebp
   12f57:	89 e5                	mov    %esp,%ebp
   12f59:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "smd_exception exception\n");
   12f5c:	83 ec 08             	sub    $0x8,%esp
   12f5f:	68 15 9f 01 00       	push   $0x19f15
   12f64:	ff 75 08             	push   0x8(%ebp)
   12f67:	e8 45 fc ff ff       	call   12bb1 <do_default_handler>
   12f6c:	83 c4 10             	add    $0x10,%esp
}
   12f6f:	90                   	nop
   12f70:	c9                   	leave  
   12f71:	c3                   	ret    

00012f72 <do_handler_virtual_exception>:
void do_handler_virtual_exception(const exception_frame_t *frame) {
   12f72:	55                   	push   %ebp
   12f73:	89 e5                	mov    %esp,%ebp
   12f75:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "virtual_exception exception\n");
   12f78:	83 ec 08             	sub    $0x8,%esp
   12f7b:	68 2e 9f 01 00       	push   $0x19f2e
   12f80:	ff 75 08             	push   0x8(%ebp)
   12f83:	e8 29 fc ff ff       	call   12bb1 <do_default_handler>
   12f88:	83 c4 10             	add    $0x10,%esp
}
   12f8b:	90                   	nop
   12f8c:	c9                   	leave  
   12f8d:	c3                   	ret    

00012f8e <do_handler_control_exception>:
void do_handler_control_exception(const exception_frame_t *frame) {
   12f8e:	55                   	push   %ebp
   12f8f:	89 e5                	mov    %esp,%ebp
   12f91:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "control_exception exception\n");
   12f94:	83 ec 08             	sub    $0x8,%esp
   12f97:	68 4b 9f 01 00       	push   $0x19f4b
   12f9c:	ff 75 08             	push   0x8(%ebp)
   12f9f:	e8 0d fc ff ff       	call   12bb1 <do_default_handler>
   12fa4:	83 c4 10             	add    $0x10,%esp
}
   12fa7:	90                   	nop
   12fa8:	c9                   	leave  
   12fa9:	c3                   	ret    

00012faa <idt_install>:
 *
 * @param idt_num 异常的下标
 * @param handler 异常处理程序的偏移地址
 * @return int 成功返回 0 失败放回 -1
 */
int idt_install(const int idt_num, const idt_handler_t handler) {
   12faa:	55                   	push   %ebp
   12fab:	89 e5                	mov    %esp,%ebp
   12fad:	83 ec 08             	sub    $0x8,%esp
  // 1.判断IDT下标是否越界
  if (idt_num >= IDT_TABLE_SIZE || idt_num < 0) return -1;
   12fb0:	81 7d 08 ff 00 00 00 	cmpl   $0xff,0x8(%ebp)
   12fb7:	7f 06                	jg     12fbf <idt_install+0x15>
   12fb9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12fbd:	79 07                	jns    12fc6 <idt_install+0x1c>
   12fbf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12fc4:	eb 25                	jmp    12feb <idt_install+0x41>
  // 2.在IDT表中设置下标为 idt_num 的中断门,中断门描述符的 DPL <= CPL, 
  //因为中断门是cpu自己从中断描述符表中索引，也可以用 int $中断号主动触发，
  //int $ 主动触发需要中断门描述符的DPL >= CPL，即只能在内核态触发
  //所以没有请求选择子即RPL不用检查，因为没有
  //若目标代码段的特权级更高则发生特权级转换
  gate_desc_set(idt_table + idt_num, KERNEL_SELECTOR_CS, (uint32_t)handler,
   12fc6:	8b 45 0c             	mov    0xc(%ebp),%eax
   12fc9:	8b 55 08             	mov    0x8(%ebp),%edx
   12fcc:	c1 e2 03             	shl    $0x3,%edx
   12fcf:	81 c2 00 dc 04 00    	add    $0x4dc00,%edx
   12fd5:	68 00 8e 00 00       	push   $0x8e00
   12fda:	50                   	push   %eax
   12fdb:	6a 08                	push   $0x8
   12fdd:	52                   	push   %edx
   12fde:	e8 6b f7 ff ff       	call   1274e <gate_desc_set>
   12fe3:	83 c4 10             	add    $0x10,%esp
                GATE_TYPE_INT | GATE_ATTR_P | GATE_ATTR_DPL_0);

  return 0;
   12fe6:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12feb:	c9                   	leave  
   12fec:	c3                   	ret    

00012fed <init_pic>:

/**
 * @brief  初始化主从8259芯片
 * 
 */
static void init_pic(void) {
   12fed:	55                   	push   %ebp
   12fee:	89 e5                	mov    %esp,%ebp
  //1.对主片(8259A芯片)进行初始化, 写入时必须按照ICW1~4的顺序写入
  outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);  //ICW1:边缘触发，级联模式，需要ICW4
   12ff0:	6a 11                	push   $0x11
   12ff2:	6a 20                	push   $0x20
   12ff4:	e8 04 fa ff ff       	call   129fd <outb>
   12ff9:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW2, PIC_ICW2_IDT_START);                //ICW2:起始中断向量号为0x20
   12ffc:	6a 20                	push   $0x20
   12ffe:	6a 21                	push   $0x21
   13000:	e8 f8 f9 ff ff       	call   129fd <outb>
   13005:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW3, PIC_ICW3_MASTER_CASCADE);           //ICW3:主片用IR2级联从片
   13008:	6a 04                	push   $0x4
   1300a:	6a 21                	push   $0x21
   1300c:	e8 ec f9 ff ff       	call   129fd <outb>
   13011:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW4, PIC_ICW4_8086);                     //ICW4:8086模式，正常EOI
   13014:	6a 01                	push   $0x1
   13016:	6a 21                	push   $0x21
   13018:	e8 e0 f9 ff ff       	call   129fd <outb>
   1301d:	83 c4 08             	add    $0x8,%esp

  //2.对从片(8259A芯片)进行初始化
  outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);
   13020:	6a 11                	push   $0x11
   13022:	68 a0 00 00 00       	push   $0xa0
   13027:	e8 d1 f9 ff ff       	call   129fd <outb>
   1302c:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW2, PIC_ICW2_IDT_START + 8); //第一块芯片占用了8个中断，所以第二块芯片从第8个中断的下一个开始
   1302f:	6a 28                	push   $0x28
   13031:	68 a1 00 00 00       	push   $0xa1
   13036:	e8 c2 f9 ff ff       	call   129fd <outb>
   1303b:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW3, PIC_ICW3_SLAVE_CASCADE);
   1303e:	6a 02                	push   $0x2
   13040:	68 a1 00 00 00       	push   $0xa1
   13045:	e8 b3 f9 ff ff       	call   129fd <outb>
   1304a:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW4, PIC_ICW4_8086);
   1304d:	6a 01                	push   $0x1
   1304f:	68 a1 00 00 00       	push   $0xa1
   13054:	e8 a4 f9 ff ff       	call   129fd <outb>
   13059:	83 c4 08             	add    $0x8,%esp


  //3.初始化完两块8259芯片后，还需要为每一个中断设置处理程序
  //才可以去接收中断，所以现在要屏蔽中断，IMR位置1则屏蔽该中断请求，0则不屏蔽
  outb(PIC0_IMR, 0xfb); //屏蔽主片除 irq2(第3位) 以外的位传来的中断，(1111 1011)
   1305c:	68 fb 00 00 00       	push   $0xfb
   13061:	6a 21                	push   $0x21
   13063:	e8 95 f9 ff ff       	call   129fd <outb>
   13068:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_IMR, 0xff); //屏蔽从片的所有中断
   1306b:	68 ff 00 00 00       	push   $0xff
   13070:	68 a1 00 00 00       	push   $0xa1
   13075:	e8 83 f9 ff ff       	call   129fd <outb>
   1307a:	83 c4 08             	add    $0x8,%esp


}
   1307d:	90                   	nop
   1307e:	c9                   	leave  
   1307f:	c3                   	ret    

00013080 <idt_init>:

/**
 * @brief  初始化中断向量表
 *
 */
void idt_init(void) {
   13080:	55                   	push   %ebp
   13081:	89 e5                	mov    %esp,%ebp
   13083:	83 ec 18             	sub    $0x18,%esp
  // 1.初始化IDT中的各个中断门(未知异常类型)
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   13086:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1308d:	eb 17                	jmp    130a6 <idt_init+0x26>
    idt_install(i, (idt_handler_t)exception_handler_unknown);
   1308f:	83 ec 08             	sub    $0x8,%esp
   13092:	68 2a 00 01 00       	push   $0x1002a
   13097:	ff 75 f4             	push   -0xc(%ebp)
   1309a:	e8 0b ff ff ff       	call   12faa <idt_install>
   1309f:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   130a2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   130a6:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   130ad:	7e e0                	jle    1308f <idt_init+0xf>
  }

  // 2.绑定异常中断向量表中对应下标的中断门的处理函数
  idt_install(IDT0_DE, (idt_handler_t)exception_handler_divider);
   130af:	83 ec 08             	sub    $0x8,%esp
   130b2:	68 47 00 01 00       	push   $0x10047
   130b7:	6a 00                	push   $0x0
   130b9:	e8 ec fe ff ff       	call   12faa <idt_install>
   130be:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT1_DB, (idt_handler_t)exception_handler_debug);
   130c1:	83 ec 08             	sub    $0x8,%esp
   130c4:	68 64 00 01 00       	push   $0x10064
   130c9:	6a 01                	push   $0x1
   130cb:	e8 da fe ff ff       	call   12faa <idt_install>
   130d0:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT2_NMI, (idt_handler_t)exception_handler_nmi);
   130d3:	83 ec 08             	sub    $0x8,%esp
   130d6:	68 81 00 01 00       	push   $0x10081
   130db:	6a 02                	push   $0x2
   130dd:	e8 c8 fe ff ff       	call   12faa <idt_install>
   130e2:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT3_BP, (idt_handler_t)exception_handler_breakpoint);
   130e5:	83 ec 08             	sub    $0x8,%esp
   130e8:	68 9e 00 01 00       	push   $0x1009e
   130ed:	6a 03                	push   $0x3
   130ef:	e8 b6 fe ff ff       	call   12faa <idt_install>
   130f4:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT4_OF, (idt_handler_t)exception_handler_overflow);
   130f7:	83 ec 08             	sub    $0x8,%esp
   130fa:	68 bb 00 01 00       	push   $0x100bb
   130ff:	6a 04                	push   $0x4
   13101:	e8 a4 fe ff ff       	call   12faa <idt_install>
   13106:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT5_BR, (idt_handler_t)exception_handler_bound_range);
   13109:	83 ec 08             	sub    $0x8,%esp
   1310c:	68 d8 00 01 00       	push   $0x100d8
   13111:	6a 05                	push   $0x5
   13113:	e8 92 fe ff ff       	call   12faa <idt_install>
   13118:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT6_UD, (idt_handler_t)exception_handler_invalid_opcode);
   1311b:	83 ec 08             	sub    $0x8,%esp
   1311e:	68 f5 00 01 00       	push   $0x100f5
   13123:	6a 06                	push   $0x6
   13125:	e8 80 fe ff ff       	call   12faa <idt_install>
   1312a:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT7_NM, (idt_handler_t)exception_handler_device_unavailable);
   1312d:	83 ec 08             	sub    $0x8,%esp
   13130:	68 12 01 01 00       	push   $0x10112
   13135:	6a 07                	push   $0x7
   13137:	e8 6e fe ff ff       	call   12faa <idt_install>
   1313c:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT8_DF, (idt_handler_t)exception_handler_double_fault);
   1313f:	83 ec 08             	sub    $0x8,%esp
   13142:	68 2f 01 01 00       	push   $0x1012f
   13147:	6a 08                	push   $0x8
   13149:	e8 5c fe ff ff       	call   12faa <idt_install>
   1314e:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT10_TS, (idt_handler_t)exception_handler_invalid_tss);
   13151:	83 ec 08             	sub    $0x8,%esp
   13154:	68 4a 01 01 00       	push   $0x1014a
   13159:	6a 0a                	push   $0xa
   1315b:	e8 4a fe ff ff       	call   12faa <idt_install>
   13160:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT11_NP, (idt_handler_t)exception_handler_segment_not_present);
   13163:	83 ec 08             	sub    $0x8,%esp
   13166:	68 65 01 01 00       	push   $0x10165
   1316b:	6a 0b                	push   $0xb
   1316d:	e8 38 fe ff ff       	call   12faa <idt_install>
   13172:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT12_SS, (idt_handler_t)exception_handler_stack_segment_fault);
   13175:	83 ec 08             	sub    $0x8,%esp
   13178:	68 80 01 01 00       	push   $0x10180
   1317d:	6a 0c                	push   $0xc
   1317f:	e8 26 fe ff ff       	call   12faa <idt_install>
   13184:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT13_GP, (idt_handler_t)exception_handler_general_protection);
   13187:	83 ec 08             	sub    $0x8,%esp
   1318a:	68 9b 01 01 00       	push   $0x1019b
   1318f:	6a 0d                	push   $0xd
   13191:	e8 14 fe ff ff       	call   12faa <idt_install>
   13196:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT14_PF, (idt_handler_t)exception_handler_page_fault);
   13199:	83 ec 08             	sub    $0x8,%esp
   1319c:	68 b6 01 01 00       	push   $0x101b6
   131a1:	6a 0e                	push   $0xe
   131a3:	e8 02 fe ff ff       	call   12faa <idt_install>
   131a8:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT16_MF, (idt_handler_t)exception_handler_fpu_error);
   131ab:	83 ec 08             	sub    $0x8,%esp
   131ae:	68 d1 01 01 00       	push   $0x101d1
   131b3:	6a 10                	push   $0x10
   131b5:	e8 f0 fd ff ff       	call   12faa <idt_install>
   131ba:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT17_AC, (idt_handler_t)exception_handler_alignment_check);
   131bd:	83 ec 08             	sub    $0x8,%esp
   131c0:	68 ee 01 01 00       	push   $0x101ee
   131c5:	6a 11                	push   $0x11
   131c7:	e8 de fd ff ff       	call   12faa <idt_install>
   131cc:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT18_MC, (idt_handler_t)exception_handler_machine_check);
   131cf:	83 ec 08             	sub    $0x8,%esp
   131d2:	68 09 02 01 00       	push   $0x10209
   131d7:	6a 12                	push   $0x12
   131d9:	e8 cc fd ff ff       	call   12faa <idt_install>
   131de:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT19_XM, (idt_handler_t)exception_handler_smd_exception);
   131e1:	83 ec 08             	sub    $0x8,%esp
   131e4:	68 26 02 01 00       	push   $0x10226
   131e9:	6a 13                	push   $0x13
   131eb:	e8 ba fd ff ff       	call   12faa <idt_install>
   131f0:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT20_VE, (idt_handler_t)exception_handler_virtual_exception);
   131f3:	83 ec 08             	sub    $0x8,%esp
   131f6:	68 43 02 01 00       	push   $0x10243
   131fb:	6a 14                	push   $0x14
   131fd:	e8 a8 fd ff ff       	call   12faa <idt_install>
   13202:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT21_CP, (idt_handler_t)exception_handler_control_exception);
   13205:	83 ec 08             	sub    $0x8,%esp
   13208:	68 60 02 01 00       	push   $0x10260
   1320d:	6a 15                	push   $0x15
   1320f:	e8 96 fd ff ff       	call   12faa <idt_install>
   13214:	83 c4 10             	add    $0x10,%esp

  //3.加载IDT
  lidt((uint32_t)idt_table, sizeof(idt_table));
   13217:	b8 00 dc 04 00       	mov    $0x4dc00,%eax
   1321c:	83 ec 08             	sub    $0x8,%esp
   1321f:	68 00 08 00 00       	push   $0x800
   13224:	50                   	push   %eax
   13225:	e8 f4 f7 ff ff       	call   12a1e <lidt>
   1322a:	83 c4 10             	add    $0x10,%esp

  //4.初始化8259设备中断芯片
  init_pic();
   1322d:	e8 bb fd ff ff       	call   12fed <init_pic>
}
   13232:	90                   	nop
   13233:	c9                   	leave  
   13234:	c3                   	ret    

00013235 <idt_enable>:
/**
 * @brief  开启外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号,即IDT中的下标
 */
void idt_enable(uint8_t irq_num) {
   13235:	55                   	push   %ebp
   13236:	89 e5                	mov    %esp,%ebp
   13238:	53                   	push   %ebx
   13239:	83 ec 14             	sub    $0x14,%esp
   1323c:	8b 45 08             	mov    0x8(%ebp),%eax
   1323f:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   13242:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   13246:	76 7f                	jbe    132c7 <idt_enable+0x92>
   13248:	80 7d e8 2e          	cmpb   $0x2e,-0x18(%ebp)
   1324c:	77 79                	ja     132c7 <idt_enable+0x92>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   1324e:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置0，即不屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   13252:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   13256:	77 33                	ja     1328b <idt_enable+0x56>
    uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   13258:	6a 21                	push   $0x21
   1325a:	e8 81 f7 ff ff       	call   129e0 <inb>
   1325f:	83 c4 04             	add    $0x4,%esp
   13262:	89 c3                	mov    %eax,%ebx
   13264:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   13268:	ba 01 00 00 00       	mov    $0x1,%edx
   1326d:	89 c1                	mov    %eax,%ecx
   1326f:	d3 e2                	shl    %cl,%edx
   13271:	89 d0                	mov    %edx,%eax
   13273:	f7 d0                	not    %eax
   13275:	21 d8                	and    %ebx,%eax
   13277:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   1327a:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   1327e:	50                   	push   %eax
   1327f:	6a 21                	push   $0x21
   13281:	e8 77 f7 ff ff       	call   129fd <outb>
   13286:	83 c4 08             	add    $0x8,%esp
   13289:	eb 3d                	jmp    132c8 <idt_enable+0x93>
  } else {
    uint8_t mask = inb(PIC1_IMR) & ~(1 << (irq_num - 8));
   1328b:	68 a1 00 00 00       	push   $0xa1
   13290:	e8 4b f7 ff ff       	call   129e0 <inb>
   13295:	83 c4 04             	add    $0x4,%esp
   13298:	89 c3                	mov    %eax,%ebx
   1329a:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   1329e:	83 e8 08             	sub    $0x8,%eax
   132a1:	ba 01 00 00 00       	mov    $0x1,%edx
   132a6:	89 c1                	mov    %eax,%ecx
   132a8:	d3 e2                	shl    %cl,%edx
   132aa:	89 d0                	mov    %edx,%eax
   132ac:	f7 d0                	not    %eax
   132ae:	21 d8                	and    %ebx,%eax
   132b0:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   132b3:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   132b7:	50                   	push   %eax
   132b8:	68 a1 00 00 00       	push   $0xa1
   132bd:	e8 3b f7 ff ff       	call   129fd <outb>
   132c2:	83 c4 08             	add    $0x8,%esp
   132c5:	eb 01                	jmp    132c8 <idt_enable+0x93>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   132c7:	90                   	nop
  }
  
}
   132c8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   132cb:	c9                   	leave  
   132cc:	c3                   	ret    

000132cd <idt_disable>:
/**
 * @brief  关闭外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号，即IDT中的下标
 */
void idt_disable(uint8_t irq_num) {
   132cd:	55                   	push   %ebp
   132ce:	89 e5                	mov    %esp,%ebp
   132d0:	53                   	push   %ebx
   132d1:	83 ec 14             	sub    $0x14,%esp
   132d4:	8b 45 08             	mov    0x8(%ebp),%eax
   132d7:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   132da:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   132de:	76 7b                	jbe    1335b <idt_disable+0x8e>
   132e0:	80 7d e8 2f          	cmpb   $0x2f,-0x18(%ebp)
   132e4:	77 75                	ja     1335b <idt_disable+0x8e>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   132e6:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置1，即屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   132ea:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   132ee:	77 31                	ja     13321 <idt_disable+0x54>
    uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   132f0:	6a 21                	push   $0x21
   132f2:	e8 e9 f6 ff ff       	call   129e0 <inb>
   132f7:	83 c4 04             	add    $0x4,%esp
   132fa:	89 c3                	mov    %eax,%ebx
   132fc:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   13300:	ba 01 00 00 00       	mov    $0x1,%edx
   13305:	89 c1                	mov    %eax,%ecx
   13307:	d3 e2                	shl    %cl,%edx
   13309:	89 d0                	mov    %edx,%eax
   1330b:	09 d8                	or     %ebx,%eax
   1330d:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   13310:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   13314:	50                   	push   %eax
   13315:	6a 21                	push   $0x21
   13317:	e8 e1 f6 ff ff       	call   129fd <outb>
   1331c:	83 c4 08             	add    $0x8,%esp
   1331f:	eb 3b                	jmp    1335c <idt_disable+0x8f>
  } else {
    uint8_t mask = inb(PIC1_IMR) | (1 << (irq_num - 8));
   13321:	68 a1 00 00 00       	push   $0xa1
   13326:	e8 b5 f6 ff ff       	call   129e0 <inb>
   1332b:	83 c4 04             	add    $0x4,%esp
   1332e:	89 c3                	mov    %eax,%ebx
   13330:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   13334:	83 e8 08             	sub    $0x8,%eax
   13337:	ba 01 00 00 00       	mov    $0x1,%edx
   1333c:	89 c1                	mov    %eax,%ecx
   1333e:	d3 e2                	shl    %cl,%edx
   13340:	89 d0                	mov    %edx,%eax
   13342:	09 d8                	or     %ebx,%eax
   13344:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   13347:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   1334b:	50                   	push   %eax
   1334c:	68 a1 00 00 00       	push   $0xa1
   13351:	e8 a7 f6 ff ff       	call   129fd <outb>
   13356:	83 c4 08             	add    $0x8,%esp
   13359:	eb 01                	jmp    1335c <idt_disable+0x8f>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   1335b:	90                   	nop
  }
  
}
   1335c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1335f:	c9                   	leave  
   13360:	c3                   	ret    

00013361 <idt_disable_global>:

/**
 * @brief  关闭全局中断
 * 
 */
void idt_disable_global(void) {
   13361:	55                   	push   %ebp
   13362:	89 e5                	mov    %esp,%ebp
  cli();
   13364:	e8 62 f6 ff ff       	call   129cb <cli>
}
   13369:	90                   	nop
   1336a:	5d                   	pop    %ebp
   1336b:	c3                   	ret    

0001336c <idt_enable_global>:

/**
 * @brief  开启全局中断
 * 
 */
void idt_enable_global(void) {
   1336c:	55                   	push   %ebp
   1336d:	89 e5                	mov    %esp,%ebp
  sti();
   1336f:	e8 5e f6 ff ff       	call   129d2 <sti>
}
   13374:	90                   	nop
   13375:	5d                   	pop    %ebp
   13376:	c3                   	ret    

00013377 <pic_send_eoi>:
 * @brief  将OCW2寄存器的7~5位置为 001，用普通的EOI结束方式
 *         向8259A发送EOI命令，8259A会将ISR中优先级最高的位置0
 *
 * @param irq_num 中断向量号，即IDT下标
 */
void pic_send_eoi(int irq_num) {
   13377:	55                   	push   %ebp
   13378:	89 e5                	mov    %esp,%ebp
  //1.获取该中断对应的IRQ标号
  irq_num -= PIC_ICW2_IDT_START;
   1337a:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
  //2.判断标号是否越界,若不越界则交给对应芯片处理
  if (irq_num < 0 || irq_num > 15) return;
   1337e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13382:	78 29                	js     133ad <pic_send_eoi+0x36>
   13384:	83 7d 08 0f          	cmpl   $0xf,0x8(%ebp)
   13388:	7f 23                	jg     133ad <pic_send_eoi+0x36>

  //3.若中断来自主片则只需向主片发送EOI
  outb(PIC0_OCW2, PIC_OCW2_EOI);
   1338a:	6a 20                	push   $0x20
   1338c:	6a 20                	push   $0x20
   1338e:	e8 6a f6 ff ff       	call   129fd <outb>
   13393:	83 c4 08             	add    $0x8,%esp

  //4.若中断来自从片则还需向从片发送EOI
  if (irq_num >= 8) { 
   13396:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   1339a:	7e 12                	jle    133ae <pic_send_eoi+0x37>
    outb(PIC1_OCW2, PIC_OCW2_EOI);
   1339c:	6a 20                	push   $0x20
   1339e:	68 a0 00 00 00       	push   $0xa0
   133a3:	e8 55 f6 ff ff       	call   129fd <outb>
   133a8:	83 c4 08             	add    $0x8,%esp
   133ab:	eb 01                	jmp    133ae <pic_send_eoi+0x37>
  if (irq_num < 0 || irq_num > 15) return;
   133ad:	90                   	nop
  }

}
   133ae:	c9                   	leave  
   133af:	c3                   	ret    

000133b0 <idt_enter_protection>:

/**
 * @brief  
 * 
 */
idt_state_t idt_enter_protection(void) {
   133b0:	55                   	push   %ebp
   133b1:	89 e5                	mov    %esp,%ebp
   133b3:	83 ec 10             	sub    $0x10,%esp
  idt_state_t state = read_eflags();
   133b6:	e8 9c f6 ff ff       	call   12a57 <read_eflags>
   133bb:	89 45 fc             	mov    %eax,-0x4(%ebp)
  idt_disable_global();
   133be:	e8 9e ff ff ff       	call   13361 <idt_disable_global>
  return state;;
   133c3:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   133c6:	c9                   	leave  
   133c7:	c3                   	ret    

000133c8 <idt_leave_protection>:
/**
 * @brief  
 * 
 * @return idt_state_t 
 */
void idt_leave_protection(idt_state_t state){
   133c8:	55                   	push   %ebp
   133c9:	89 e5                	mov    %esp,%ebp
  write_eflags(state);
   133cb:	ff 75 08             	push   0x8(%ebp)
   133ce:	e8 94 f6 ff ff       	call   12a67 <write_eflags>
   133d3:	83 c4 04             	add    $0x4,%esp
}
   133d6:	90                   	nop
   133d7:	c9                   	leave  
   133d8:	c3                   	ret    

000133d9 <sys_print_msg>:
 * @brief 临时的格式化输出系统调用
 * 
 * @param fmt 
 * @param arg 
 */
void sys_print_msg(const char *fmt, int arg) {
   133d9:	55                   	push   %ebp
   133da:	89 e5                	mov    %esp,%ebp
   133dc:	83 ec 08             	sub    $0x8,%esp
    log_printf(fmt, arg);
   133df:	83 ec 08             	sub    $0x8,%esp
   133e2:	ff 75 0c             	push   0xc(%ebp)
   133e5:	ff 75 08             	push   0x8(%ebp)
   133e8:	e8 a8 60 00 00       	call   19495 <log_printf>
   133ed:	83 c4 10             	add    $0x10,%esp
}
   133f0:	90                   	nop
   133f1:	c9                   	leave  
   133f2:	c3                   	ret    

000133f3 <do_handler_syscall>:
/**
 * @brief 门调用处理函数，通过定义的系统调用id，将该调用分发到正确的系统调用上
 * 
 * @param frame 
 */
void do_handler_syscall(syscall_frame_t* frame) {
   133f3:	55                   	push   %ebp
   133f4:	89 e5                	mov    %esp,%ebp
   133f6:	53                   	push   %ebx
   133f7:	83 ec 14             	sub    $0x14,%esp
    if (frame->function_id < sizeof(sys_table) / sizeof(sys_table[0])) {    //当前系统调用存在
   133fa:	8b 45 08             	mov    0x8(%ebp),%eax
   133fd:	8b 40 3c             	mov    0x3c(%eax),%eax
   13400:	83 f8 3f             	cmp    $0x3f,%eax
   13403:	77 48                	ja     1344d <do_handler_syscall+0x5a>
        sys_handler_t handler = sys_table[frame->function_id];
   13405:	8b 45 08             	mov    0x8(%ebp),%eax
   13408:	8b 40 3c             	mov    0x3c(%eax),%eax
   1340b:	8b 04 85 80 9f 01 00 	mov    0x19f80(,%eax,4),%eax
   13412:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (handler) {
   13415:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   13419:	74 32                	je     1344d <do_handler_syscall+0x5a>
            //直接将4个参数全部传入即可，
            //因为是按从右到左的顺序将参数压栈，所以原始的参数只要是从arg0开始赋值的即可，
            //多余的参数在高地址处，不影响handler对应的真正的系统调用
            int ret = handler(frame->arg0, frame->arg1, frame->arg2, frame->arg3);
   1341b:	8b 45 08             	mov    0x8(%ebp),%eax
   1341e:	8b 58 4c             	mov    0x4c(%eax),%ebx
   13421:	8b 45 08             	mov    0x8(%ebp),%eax
   13424:	8b 48 48             	mov    0x48(%eax),%ecx
   13427:	8b 45 08             	mov    0x8(%ebp),%eax
   1342a:	8b 50 44             	mov    0x44(%eax),%edx
   1342d:	8b 45 08             	mov    0x8(%ebp),%eax
   13430:	8b 40 40             	mov    0x40(%eax),%eax
   13433:	53                   	push   %ebx
   13434:	51                   	push   %ecx
   13435:	52                   	push   %edx
   13436:	50                   	push   %eax
   13437:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1343a:	ff d0                	call   *%eax
   1343c:	83 c4 10             	add    $0x10,%esp
   1343f:	89 45 f0             	mov    %eax,-0x10(%ebp)
            //正常函数返回后会将返回值先存放到eax寄存器中，再eax中的值放入对应接收返回值的内存中
            //此处用eax先接收ret，在调用门返回后再从eax中取处该值
            frame->eax = ret;
   13442:	8b 55 f0             	mov    -0x10(%ebp),%edx
   13445:	8b 45 08             	mov    0x8(%ebp),%eax
   13448:	89 50 30             	mov    %edx,0x30(%eax)
            return;
   1344b:	eb 30                	jmp    1347d <do_handler_syscall+0x8a>
        }
    }
    
    //打印系统调用失败的异常日志
    task_t *task = task_current();
   1344d:	e8 5f e5 ff ff       	call   119b1 <task_current>
   13452:	89 45 ec             	mov    %eax,-0x14(%ebp)
    log_printf("task: %s, Unknown syscall_id: %d\n", task->name, frame->function_id);
   13455:	8b 45 08             	mov    0x8(%ebp),%eax
   13458:	8b 40 3c             	mov    0x3c(%eax),%eax
   1345b:	8b 55 ec             	mov    -0x14(%ebp),%edx
   1345e:	83 c2 24             	add    $0x24,%edx
   13461:	83 ec 04             	sub    $0x4,%esp
   13464:	50                   	push   %eax
   13465:	52                   	push   %edx
   13466:	68 80 a0 01 00       	push   $0x1a080
   1346b:	e8 25 60 00 00       	call   19495 <log_printf>
   13470:	83 c4 10             	add    $0x10,%esp
    frame->eax = -1;
   13473:	8b 45 08             	mov    0x8(%ebp),%eax
   13476:	c7 40 30 ff ff ff ff 	movl   $0xffffffff,0x30(%eax)

   1347d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   13480:	c9                   	leave  
   13481:	c3                   	ret    

00013482 <inb>:
static inline uint8_t inb(uint16_t port) {
   13482:	55                   	push   %ebp
   13483:	89 e5                	mov    %esp,%ebp
   13485:	83 ec 14             	sub    $0x14,%esp
   13488:	8b 45 08             	mov    0x8(%ebp),%eax
   1348b:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   1348f:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   13493:	89 c2                	mov    %eax,%edx
   13495:	ec                   	in     (%dx),%al
   13496:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   13499:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   1349d:	c9                   	leave  
   1349e:	c3                   	ret    

0001349f <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   1349f:	55                   	push   %ebp
   134a0:	89 e5                	mov    %esp,%ebp
   134a2:	83 ec 08             	sub    $0x8,%esp
   134a5:	8b 45 08             	mov    0x8(%ebp),%eax
   134a8:	8b 55 0c             	mov    0xc(%ebp),%edx
   134ab:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   134af:	89 d0                	mov    %edx,%eax
   134b1:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   134b4:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   134b8:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   134bc:	ee                   	out    %al,(%dx)
}
   134bd:	90                   	nop
   134be:	c9                   	leave  
   134bf:	c3                   	ret    

000134c0 <read_cursor_pos>:
/**
 * @brief 获取光标位置
 *
 * @return int
 */
static inline int read_cursor_pos(void) {
   134c0:	55                   	push   %ebp
   134c1:	89 e5                	mov    %esp,%ebp
   134c3:	83 ec 18             	sub    $0x18,%esp
  //TODO:加锁
  idt_state_t state = idt_enter_protection();
   134c6:	e8 e5 fe ff ff       	call   133b0 <idt_enter_protection>
   134cb:	89 45 f4             	mov    %eax,-0xc(%ebp)

  int pos;
  // 光标位置由两个字节组成
  outb(0x3d4, 0xf);  // 访问低8位
   134ce:	83 ec 08             	sub    $0x8,%esp
   134d1:	6a 0f                	push   $0xf
   134d3:	68 d4 03 00 00       	push   $0x3d4
   134d8:	e8 c2 ff ff ff       	call   1349f <outb>
   134dd:	83 c4 10             	add    $0x10,%esp
  pos = inb(0x3d5);
   134e0:	83 ec 0c             	sub    $0xc,%esp
   134e3:	68 d5 03 00 00       	push   $0x3d5
   134e8:	e8 95 ff ff ff       	call   13482 <inb>
   134ed:	83 c4 10             	add    $0x10,%esp
   134f0:	0f b6 c0             	movzbl %al,%eax
   134f3:	89 45 f0             	mov    %eax,-0x10(%ebp)

  outb(0x3d4, 0xe);  // 访问高8位
   134f6:	83 ec 08             	sub    $0x8,%esp
   134f9:	6a 0e                	push   $0xe
   134fb:	68 d4 03 00 00       	push   $0x3d4
   13500:	e8 9a ff ff ff       	call   1349f <outb>
   13505:	83 c4 10             	add    $0x10,%esp
  pos |= inb(0x3d5) << 8;
   13508:	83 ec 0c             	sub    $0xc,%esp
   1350b:	68 d5 03 00 00       	push   $0x3d5
   13510:	e8 6d ff ff ff       	call   13482 <inb>
   13515:	83 c4 10             	add    $0x10,%esp
   13518:	0f b6 c0             	movzbl %al,%eax
   1351b:	c1 e0 08             	shl    $0x8,%eax
   1351e:	09 45 f0             	or     %eax,-0x10(%ebp)

  //TODO:解锁
  idt_leave_protection(state);
   13521:	83 ec 0c             	sub    $0xc,%esp
   13524:	ff 75 f4             	push   -0xc(%ebp)
   13527:	e8 9c fe ff ff       	call   133c8 <idt_leave_protection>
   1352c:	83 c4 10             	add    $0x10,%esp
  return pos;
   1352f:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   13532:	c9                   	leave  
   13533:	c3                   	ret    

00013534 <update_cursor_pos>:
 * @brief 更新光标的位置
 *
 * @param console
 * @return int
 */
static inline int update_cursor_pos(console_t *console) {
   13534:	55                   	push   %ebp
   13535:	89 e5                	mov    %esp,%ebp
   13537:	83 ec 18             	sub    $0x18,%esp
  //TODO:加锁
  idt_state_t state = idt_enter_protection();
   1353a:	e8 71 fe ff ff       	call   133b0 <idt_enter_protection>
   1353f:	89 45 f4             	mov    %eax,-0xc(%ebp)

  //计算以当前控制台为屏幕显示区域时的光标位置
  uint16_t pos = console->cursor_row * console->display_cols +
   13542:	8b 45 08             	mov    0x8(%ebp),%eax
   13545:	8b 40 10             	mov    0x10(%eax),%eax
   13548:	89 c2                	mov    %eax,%edx
   1354a:	8b 45 08             	mov    0x8(%ebp),%eax
   1354d:	8b 40 0c             	mov    0xc(%eax),%eax
   13550:	0f af d0             	imul   %eax,%edx
                 console->cursor_col +
   13553:	8b 45 08             	mov    0x8(%ebp),%eax
   13556:	8b 40 14             	mov    0x14(%eax),%eax
  uint16_t pos = console->cursor_row * console->display_cols +
   13559:	01 c2                	add    %eax,%edx
                 ((uint32_t)console->disp_base - CONSOLE_DISP_START_ADDR) /
   1355b:	8b 45 08             	mov    0x8(%ebp),%eax
   1355e:	8b 40 04             	mov    0x4(%eax),%eax
   13561:	2d 00 80 0b 00       	sub    $0xb8000,%eax
   13566:	d1 e8                	shr    %eax
  uint16_t pos = console->cursor_row * console->display_cols +
   13568:	01 d0                	add    %edx,%eax
   1356a:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
                     sizeof(disp_char_t);

  // 光标位置由两个字节组成
  outb(0x3d4, 0xf);  // 访问低8位
   1356e:	83 ec 08             	sub    $0x8,%esp
   13571:	6a 0f                	push   $0xf
   13573:	68 d4 03 00 00       	push   $0x3d4
   13578:	e8 22 ff ff ff       	call   1349f <outb>
   1357d:	83 c4 10             	add    $0x10,%esp
  outb(0x3d5, (uint8_t)(pos & 0xff));
   13580:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   13584:	0f b6 c0             	movzbl %al,%eax
   13587:	83 ec 08             	sub    $0x8,%esp
   1358a:	50                   	push   %eax
   1358b:	68 d5 03 00 00       	push   $0x3d5
   13590:	e8 0a ff ff ff       	call   1349f <outb>
   13595:	83 c4 10             	add    $0x10,%esp

  outb(0x3d4, 0xe);  // 访问高8位
   13598:	83 ec 08             	sub    $0x8,%esp
   1359b:	6a 0e                	push   $0xe
   1359d:	68 d4 03 00 00       	push   $0x3d4
   135a2:	e8 f8 fe ff ff       	call   1349f <outb>
   135a7:	83 c4 10             	add    $0x10,%esp
  outb(0x3d5, (uint8_t)((pos >> 8) & 0xff));
   135aa:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   135ae:	66 c1 e8 08          	shr    $0x8,%ax
   135b2:	0f b6 c0             	movzbl %al,%eax
   135b5:	83 ec 08             	sub    $0x8,%esp
   135b8:	50                   	push   %eax
   135b9:	68 d5 03 00 00       	push   $0x3d5
   135be:	e8 dc fe ff ff       	call   1349f <outb>
   135c3:	83 c4 10             	add    $0x10,%esp

  //TODO:解锁
  idt_leave_protection(state);
   135c6:	83 ec 0c             	sub    $0xc,%esp
   135c9:	ff 75 f4             	push   -0xc(%ebp)
   135cc:	e8 f7 fd ff ff       	call   133c8 <idt_leave_protection>
   135d1:	83 c4 10             	add    $0x10,%esp
  return pos;
   135d4:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
}
   135d8:	c9                   	leave  
   135d9:	c3                   	ret    

000135da <erase_rows>:
 *
 * @param console
 * @param start
 * @param end
 */
static inline void erase_rows(console_t *console, int start, int end) {
   135da:	55                   	push   %ebp
   135db:	89 e5                	mov    %esp,%ebp
   135dd:	83 ec 10             	sub    $0x10,%esp
  disp_char_t *disp_start = console->disp_base + console->display_cols * start;
   135e0:	8b 45 08             	mov    0x8(%ebp),%eax
   135e3:	8b 48 04             	mov    0x4(%eax),%ecx
   135e6:	8b 45 08             	mov    0x8(%ebp),%eax
   135e9:	8b 50 0c             	mov    0xc(%eax),%edx
   135ec:	8b 45 0c             	mov    0xc(%ebp),%eax
   135ef:	0f af c2             	imul   %edx,%eax
   135f2:	01 c0                	add    %eax,%eax
   135f4:	01 c8                	add    %ecx,%eax
   135f6:	89 45 fc             	mov    %eax,-0x4(%ebp)
  disp_char_t *disp_end =
      console->disp_base + console->display_cols * (end + 1);
   135f9:	8b 45 08             	mov    0x8(%ebp),%eax
   135fc:	8b 48 04             	mov    0x4(%eax),%ecx
   135ff:	8b 45 08             	mov    0x8(%ebp),%eax
   13602:	8b 40 0c             	mov    0xc(%eax),%eax
   13605:	8b 55 10             	mov    0x10(%ebp),%edx
   13608:	83 c2 01             	add    $0x1,%edx
   1360b:	0f af c2             	imul   %edx,%eax
   1360e:	01 c0                	add    %eax,%eax
  disp_char_t *disp_end =
   13610:	01 c8                	add    %ecx,%eax
   13612:	89 45 f8             	mov    %eax,-0x8(%ebp)

  while (disp_start < disp_end) {
   13615:	eb 24                	jmp    1363b <erase_rows+0x61>
    disp_start->c = ' ';
   13617:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1361a:	c6 00 20             	movb   $0x20,(%eax)
    disp_start->foreground = COLOR_White;
   1361d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13620:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   13624:	83 ca 0f             	or     $0xf,%edx
   13627:	88 50 01             	mov    %dl,0x1(%eax)
    disp_start->background = COLOR_Black;
   1362a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1362d:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   13631:	83 e2 8f             	and    $0xffffff8f,%edx
   13634:	88 50 01             	mov    %dl,0x1(%eax)

    disp_start++;
   13637:	83 45 fc 02          	addl   $0x2,-0x4(%ebp)
  while (disp_start < disp_end) {
   1363b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1363e:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   13641:	72 d4                	jb     13617 <erase_rows+0x3d>
  }
}
   13643:	90                   	nop
   13644:	90                   	nop
   13645:	c9                   	leave  
   13646:	c3                   	ret    

00013647 <scroll_up>:
 * @brief 控制台console上滚lines行
 *
 * @param console
 * @param lines
 */
static inline void scroll_up(console_t *console, int lines) {
   13647:	55                   	push   %ebp
   13648:	89 e5                	mov    %esp,%ebp
   1364a:	83 ec 18             	sub    $0x18,%esp
  // 获取拷贝的目标位置
  disp_char_t *dest = console->disp_base;
   1364d:	8b 45 08             	mov    0x8(%ebp),%eax
   13650:	8b 40 04             	mov    0x4(%eax),%eax
   13653:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 获取拷贝的源位置
  disp_char_t *src = console->disp_base + console->display_cols * lines;
   13656:	8b 45 08             	mov    0x8(%ebp),%eax
   13659:	8b 48 04             	mov    0x4(%eax),%ecx
   1365c:	8b 45 08             	mov    0x8(%ebp),%eax
   1365f:	8b 50 0c             	mov    0xc(%eax),%edx
   13662:	8b 45 0c             	mov    0xc(%ebp),%eax
   13665:	0f af c2             	imul   %edx,%eax
   13668:	01 c0                	add    %eax,%eax
   1366a:	01 c8                	add    %ecx,%eax
   1366c:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 获取拷贝的字节量
  uint32_t size = (console->display_rows - lines) * console->display_cols *
   1366f:	8b 45 08             	mov    0x8(%ebp),%eax
   13672:	8b 40 08             	mov    0x8(%eax),%eax
   13675:	8b 4d 0c             	mov    0xc(%ebp),%ecx
   13678:	29 c8                	sub    %ecx,%eax
   1367a:	89 c2                	mov    %eax,%edx
   1367c:	8b 45 08             	mov    0x8(%ebp),%eax
   1367f:	8b 40 0c             	mov    0xc(%eax),%eax
   13682:	0f af c2             	imul   %edx,%eax
   13685:	01 c0                	add    %eax,%eax
   13687:	89 45 ec             	mov    %eax,-0x14(%ebp)
                  sizeof(disp_char_t);

  // 拷贝
  kernel_memcpy(dest, src, size);
   1368a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1368d:	83 ec 04             	sub    $0x4,%esp
   13690:	50                   	push   %eax
   13691:	ff 75 f0             	push   -0x10(%ebp)
   13694:	ff 75 f4             	push   -0xc(%ebp)
   13697:	e8 ad 55 00 00       	call   18c49 <kernel_memcpy>
   1369c:	83 c4 10             	add    $0x10,%esp

  // 清除底部重复行
  erase_rows(console, console->display_rows - lines, console->display_rows - 1);
   1369f:	8b 45 08             	mov    0x8(%ebp),%eax
   136a2:	8b 40 08             	mov    0x8(%eax),%eax
   136a5:	83 e8 01             	sub    $0x1,%eax
   136a8:	89 c2                	mov    %eax,%edx
   136aa:	8b 45 08             	mov    0x8(%ebp),%eax
   136ad:	8b 40 08             	mov    0x8(%eax),%eax
   136b0:	8b 4d 0c             	mov    0xc(%ebp),%ecx
   136b3:	29 c8                	sub    %ecx,%eax
   136b5:	83 ec 04             	sub    $0x4,%esp
   136b8:	52                   	push   %edx
   136b9:	50                   	push   %eax
   136ba:	ff 75 08             	push   0x8(%ebp)
   136bd:	e8 18 ff ff ff       	call   135da <erase_rows>
   136c2:	83 c4 10             	add    $0x10,%esp

  // 光标回退到之前的最后一行的下一行
  console->cursor_row -= lines;
   136c5:	8b 45 08             	mov    0x8(%ebp),%eax
   136c8:	8b 40 10             	mov    0x10(%eax),%eax
   136cb:	8b 4d 0c             	mov    0xc(%ebp),%ecx
   136ce:	29 c8                	sub    %ecx,%eax
   136d0:	89 c2                	mov    %eax,%edx
   136d2:	8b 45 08             	mov    0x8(%ebp),%eax
   136d5:	89 50 10             	mov    %edx,0x10(%eax)
}
   136d8:	90                   	nop
   136d9:	c9                   	leave  
   136da:	c3                   	ret    

000136db <move_to_col0>:
/**
 * @brief 将控制台光标移动到第0列
 *
 * @param console
 */
static inline void move_to_col0(console_t *console) { console->cursor_col = 0; }
   136db:	55                   	push   %ebp
   136dc:	89 e5                	mov    %esp,%ebp
   136de:	8b 45 08             	mov    0x8(%ebp),%eax
   136e1:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
   136e8:	90                   	nop
   136e9:	5d                   	pop    %ebp
   136ea:	c3                   	ret    

000136eb <move_to_next_line>:
/**
 * @brief 将控制台光标移动到下一行
 *
 * @param console
 */
static inline void move_to_next_line(console_t *console) {
   136eb:	55                   	push   %ebp
   136ec:	89 e5                	mov    %esp,%ebp
   136ee:	83 ec 08             	sub    $0x8,%esp
  console->cursor_row++;
   136f1:	8b 45 08             	mov    0x8(%ebp),%eax
   136f4:	8b 40 10             	mov    0x10(%eax),%eax
   136f7:	8d 50 01             	lea    0x1(%eax),%edx
   136fa:	8b 45 08             	mov    0x8(%ebp),%eax
   136fd:	89 50 10             	mov    %edx,0x10(%eax)
  // 当前行已经大于最大显示行数，屏幕需要进行上滚1行
  if (console->cursor_row >= console->display_rows) {
   13700:	8b 45 08             	mov    0x8(%ebp),%eax
   13703:	8b 50 10             	mov    0x10(%eax),%edx
   13706:	8b 45 08             	mov    0x8(%ebp),%eax
   13709:	8b 40 08             	mov    0x8(%eax),%eax
   1370c:	39 c2                	cmp    %eax,%edx
   1370e:	72 10                	jb     13720 <move_to_next_line+0x35>
    scroll_up(console, 1);
   13710:	83 ec 08             	sub    $0x8,%esp
   13713:	6a 01                	push   $0x1
   13715:	ff 75 08             	push   0x8(%ebp)
   13718:	e8 2a ff ff ff       	call   13647 <scroll_up>
   1371d:	83 c4 10             	add    $0x10,%esp
  }
}
   13720:	90                   	nop
   13721:	c9                   	leave  
   13722:	c3                   	ret    

00013723 <move_forward>:
 * @brief 将控制台console的光标迁移n个位置
 *
 * @param console
 * @param n
 */
static inline void move_forward(console_t *console, int n) {
   13723:	55                   	push   %ebp
   13724:	89 e5                	mov    %esp,%ebp
   13726:	83 ec 18             	sub    $0x18,%esp
  for (int i = 0; i < n; ++i) {
   13729:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   13730:	eb 5c                	jmp    1378e <move_forward+0x6b>
    if (++(console->cursor_col) >=
   13732:	8b 45 08             	mov    0x8(%ebp),%eax
   13735:	8b 40 14             	mov    0x14(%eax),%eax
   13738:	8d 50 01             	lea    0x1(%eax),%edx
   1373b:	8b 45 08             	mov    0x8(%ebp),%eax
   1373e:	89 50 14             	mov    %edx,0x14(%eax)
   13741:	8b 45 08             	mov    0x8(%ebp),%eax
   13744:	8b 50 14             	mov    0x14(%eax),%edx
        console->display_cols) {  // 光标达到最大列数，进行换行
   13747:	8b 45 08             	mov    0x8(%ebp),%eax
   1374a:	8b 40 0c             	mov    0xc(%eax),%eax
    if (++(console->cursor_col) >=
   1374d:	39 c2                	cmp    %eax,%edx
   1374f:	72 39                	jb     1378a <move_forward+0x67>
      console->cursor_row++;
   13751:	8b 45 08             	mov    0x8(%ebp),%eax
   13754:	8b 40 10             	mov    0x10(%eax),%eax
   13757:	8d 50 01             	lea    0x1(%eax),%edx
   1375a:	8b 45 08             	mov    0x8(%ebp),%eax
   1375d:	89 50 10             	mov    %edx,0x10(%eax)
      console->cursor_col = 0;
   13760:	8b 45 08             	mov    0x8(%ebp),%eax
   13763:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
      // 当前行已经大于最大显示行数，屏幕需要进行上滚1行
      if (console->cursor_row >= console->display_rows) {
   1376a:	8b 45 08             	mov    0x8(%ebp),%eax
   1376d:	8b 50 10             	mov    0x10(%eax),%edx
   13770:	8b 45 08             	mov    0x8(%ebp),%eax
   13773:	8b 40 08             	mov    0x8(%eax),%eax
   13776:	39 c2                	cmp    %eax,%edx
   13778:	72 10                	jb     1378a <move_forward+0x67>
        scroll_up(console, 1);
   1377a:	83 ec 08             	sub    $0x8,%esp
   1377d:	6a 01                	push   $0x1
   1377f:	ff 75 08             	push   0x8(%ebp)
   13782:	e8 c0 fe ff ff       	call   13647 <scroll_up>
   13787:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < n; ++i) {
   1378a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1378e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13791:	3b 45 0c             	cmp    0xc(%ebp),%eax
   13794:	7c 9c                	jl     13732 <move_forward+0xf>
      }
    }
  }
}
   13796:	90                   	nop
   13797:	90                   	nop
   13798:	c9                   	leave  
   13799:	c3                   	ret    

0001379a <show_char>:
 * @brief 将字符c显示到控制台console上
 *
 * @param console
 * @param c
 */
static inline void show_char(console_t *console, char c) {
   1379a:	55                   	push   %ebp
   1379b:	89 e5                	mov    %esp,%ebp
   1379d:	83 ec 28             	sub    $0x28,%esp
   137a0:	8b 45 0c             	mov    0xc(%ebp),%eax
   137a3:	88 45 e4             	mov    %al,-0x1c(%ebp)
  // 计算当前光标对应控制台在现存位置中的偏移量
  int offset =
      console->cursor_col + console->cursor_row * console->display_cols;
   137a6:	8b 45 08             	mov    0x8(%ebp),%eax
   137a9:	8b 48 14             	mov    0x14(%eax),%ecx
   137ac:	8b 45 08             	mov    0x8(%ebp),%eax
   137af:	8b 50 10             	mov    0x10(%eax),%edx
   137b2:	8b 45 08             	mov    0x8(%ebp),%eax
   137b5:	8b 40 0c             	mov    0xc(%eax),%eax
   137b8:	0f af c2             	imul   %edx,%eax
   137bb:	01 c8                	add    %ecx,%eax
  int offset =
   137bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
  disp_char_t *p = console->disp_base + offset;
   137c0:	8b 45 08             	mov    0x8(%ebp),%eax
   137c3:	8b 50 04             	mov    0x4(%eax),%edx
   137c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   137c9:	01 c0                	add    %eax,%eax
   137cb:	01 d0                	add    %edx,%eax
   137cd:	89 45 f0             	mov    %eax,-0x10(%ebp)
  p->c = c;
   137d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   137d3:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
   137d7:	88 10                	mov    %dl,(%eax)
  p->foreground = console->foreground;
   137d9:	8b 45 08             	mov    0x8(%ebp),%eax
   137dc:	8b 40 18             	mov    0x18(%eax),%eax
   137df:	c1 e0 04             	shl    $0x4,%eax
   137e2:	c0 f8 04             	sar    $0x4,%al
   137e5:	8b 55 f0             	mov    -0x10(%ebp),%edx
   137e8:	83 e0 0f             	and    $0xf,%eax
   137eb:	89 c1                	mov    %eax,%ecx
   137ed:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   137f1:	83 e0 f0             	and    $0xfffffff0,%eax
   137f4:	09 c8                	or     %ecx,%eax
   137f6:	88 42 01             	mov    %al,0x1(%edx)
  p->background = console->background;
   137f9:	8b 45 08             	mov    0x8(%ebp),%eax
   137fc:	8b 40 1c             	mov    0x1c(%eax),%eax
   137ff:	c1 e0 05             	shl    $0x5,%eax
   13802:	c0 f8 05             	sar    $0x5,%al
   13805:	8b 55 f0             	mov    -0x10(%ebp),%edx
   13808:	83 e0 07             	and    $0x7,%eax
   1380b:	c1 e0 04             	shl    $0x4,%eax
   1380e:	89 c1                	mov    %eax,%ecx
   13810:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   13814:	83 e0 8f             	and    $0xffffff8f,%eax
   13817:	09 c8                	or     %ecx,%eax
   13819:	88 42 01             	mov    %al,0x1(%edx)
  move_forward(console, 1);
   1381c:	83 ec 08             	sub    $0x8,%esp
   1381f:	6a 01                	push   $0x1
   13821:	ff 75 08             	push   0x8(%ebp)
   13824:	e8 fa fe ff ff       	call   13723 <move_forward>
   13829:	83 c4 10             	add    $0x10,%esp
}
   1382c:	90                   	nop
   1382d:	c9                   	leave  
   1382e:	c3                   	ret    

0001382f <move_backword>:
 *
 * @param console
 * @param n
 * @return int
 */
static inline int move_backword(console_t *console, int n) {
   1382f:	55                   	push   %ebp
   13830:	89 e5                	mov    %esp,%ebp
   13832:	83 ec 10             	sub    $0x10,%esp
  int status = -1;
   13835:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%ebp)
  for (int i = 0; i < n; ++i) {
   1383c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   13843:	eb 55                	jmp    1389a <move_backword+0x6b>
    if (console->cursor_col > 0) {  // 当前光标在行中，直接左移
   13845:	8b 45 08             	mov    0x8(%ebp),%eax
   13848:	8b 40 14             	mov    0x14(%eax),%eax
   1384b:	85 c0                	test   %eax,%eax
   1384d:	74 18                	je     13867 <move_backword+0x38>
      console->cursor_col--;
   1384f:	8b 45 08             	mov    0x8(%ebp),%eax
   13852:	8b 40 14             	mov    0x14(%eax),%eax
   13855:	8d 50 ff             	lea    -0x1(%eax),%edx
   13858:	8b 45 08             	mov    0x8(%ebp),%eax
   1385b:	89 50 14             	mov    %edx,0x14(%eax)
      status = 0;
   1385e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   13865:	eb 2f                	jmp    13896 <move_backword+0x67>
    } else if (console->cursor_row >
   13867:	8b 45 08             	mov    0x8(%ebp),%eax
   1386a:	8b 40 10             	mov    0x10(%eax),%eax
   1386d:	85 c0                	test   %eax,%eax
   1386f:	74 25                	je     13896 <move_backword+0x67>
               0) {  // 当前光标在行开头，若当前行不为第一行则可移动到上一行末尾
      console->cursor_row--;
   13871:	8b 45 08             	mov    0x8(%ebp),%eax
   13874:	8b 40 10             	mov    0x10(%eax),%eax
   13877:	8d 50 ff             	lea    -0x1(%eax),%edx
   1387a:	8b 45 08             	mov    0x8(%ebp),%eax
   1387d:	89 50 10             	mov    %edx,0x10(%eax)
      console->cursor_col = console->display_cols - 1;
   13880:	8b 45 08             	mov    0x8(%ebp),%eax
   13883:	8b 40 0c             	mov    0xc(%eax),%eax
   13886:	8d 50 ff             	lea    -0x1(%eax),%edx
   13889:	8b 45 08             	mov    0x8(%ebp),%eax
   1388c:	89 50 14             	mov    %edx,0x14(%eax)
      status = 0;
   1388f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  for (int i = 0; i < n; ++i) {
   13896:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   1389a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1389d:	3b 45 0c             	cmp    0xc(%ebp),%eax
   138a0:	7c a3                	jl     13845 <move_backword+0x16>
    }
  }

  return status;
   138a2:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   138a5:	c9                   	leave  
   138a6:	c3                   	ret    

000138a7 <erase_backword>:
/**
 * @brief 往左擦除一个字符
 *
 * @param console
 */
static inline void erase_backword(console_t *console) {
   138a7:	55                   	push   %ebp
   138a8:	89 e5                	mov    %esp,%ebp
   138aa:	83 ec 08             	sub    $0x8,%esp
  if (move_backword(console, 1) == 0) {  // 左移成功
   138ad:	6a 01                	push   $0x1
   138af:	ff 75 08             	push   0x8(%ebp)
   138b2:	e8 78 ff ff ff       	call   1382f <move_backword>
   138b7:	83 c4 08             	add    $0x8,%esp
   138ba:	85 c0                	test   %eax,%eax
   138bc:	75 20                	jne    138de <erase_backword+0x37>
    show_char(console, ' ');             // 用空格覆盖需要擦除的字符
   138be:	83 ec 08             	sub    $0x8,%esp
   138c1:	6a 20                	push   $0x20
   138c3:	ff 75 08             	push   0x8(%ebp)
   138c6:	e8 cf fe ff ff       	call   1379a <show_char>
   138cb:	83 c4 10             	add    $0x10,%esp
    move_backword(console, 1);           // 再左移一位实现擦除
   138ce:	83 ec 08             	sub    $0x8,%esp
   138d1:	6a 01                	push   $0x1
   138d3:	ff 75 08             	push   0x8(%ebp)
   138d6:	e8 54 ff ff ff       	call   1382f <move_backword>
   138db:	83 c4 10             	add    $0x10,%esp
  }
}
   138de:	90                   	nop
   138df:	c9                   	leave  
   138e0:	c3                   	ret    

000138e1 <clear_display>:
/**
 * @brief 清空屏幕
 *
 * @param console
 */
static inline void clear_display(console_t *console) {
   138e1:	55                   	push   %ebp
   138e2:	89 e5                	mov    %esp,%ebp
   138e4:	83 ec 10             	sub    $0x10,%esp
  int size = console->display_cols * console->display_rows;
   138e7:	8b 45 08             	mov    0x8(%ebp),%eax
   138ea:	8b 50 0c             	mov    0xc(%eax),%edx
   138ed:	8b 45 08             	mov    0x8(%ebp),%eax
   138f0:	8b 40 08             	mov    0x8(%eax),%eax
   138f3:	0f af c2             	imul   %edx,%eax
   138f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
  disp_char_t *start = console->disp_base;
   138f9:	8b 45 08             	mov    0x8(%ebp),%eax
   138fc:	8b 40 04             	mov    0x4(%eax),%eax
   138ff:	89 45 fc             	mov    %eax,-0x4(%ebp)
  for (int i = 0; i < size; ++i, ++start) {
   13902:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   13909:	eb 51                	jmp    1395c <clear_display+0x7b>
    start->c = ' ';
   1390b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1390e:	c6 00 20             	movb   $0x20,(%eax)
    start->foreground = console->foreground;
   13911:	8b 45 08             	mov    0x8(%ebp),%eax
   13914:	8b 40 18             	mov    0x18(%eax),%eax
   13917:	c1 e0 04             	shl    $0x4,%eax
   1391a:	c0 f8 04             	sar    $0x4,%al
   1391d:	8b 55 fc             	mov    -0x4(%ebp),%edx
   13920:	83 e0 0f             	and    $0xf,%eax
   13923:	89 c1                	mov    %eax,%ecx
   13925:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   13929:	83 e0 f0             	and    $0xfffffff0,%eax
   1392c:	09 c8                	or     %ecx,%eax
   1392e:	88 42 01             	mov    %al,0x1(%edx)
    start->background = console->background;
   13931:	8b 45 08             	mov    0x8(%ebp),%eax
   13934:	8b 40 1c             	mov    0x1c(%eax),%eax
   13937:	c1 e0 05             	shl    $0x5,%eax
   1393a:	c0 f8 05             	sar    $0x5,%al
   1393d:	8b 55 fc             	mov    -0x4(%ebp),%edx
   13940:	83 e0 07             	and    $0x7,%eax
   13943:	c1 e0 04             	shl    $0x4,%eax
   13946:	89 c1                	mov    %eax,%ecx
   13948:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   1394c:	83 e0 8f             	and    $0xffffff8f,%eax
   1394f:	09 c8                	or     %ecx,%eax
   13951:	88 42 01             	mov    %al,0x1(%edx)
  for (int i = 0; i < size; ++i, ++start) {
   13954:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   13958:	83 45 fc 02          	addl   $0x2,-0x4(%ebp)
   1395c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1395f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
   13962:	7c a7                	jl     1390b <clear_display+0x2a>
  }
}
   13964:	90                   	nop
   13965:	90                   	nop
   13966:	c9                   	leave  
   13967:	c3                   	ret    

00013968 <print_table>:

/**
 * @brief 打印一个制表符\t
 * 
 */
static void print_table(console_t *console) {
   13968:	55                   	push   %ebp
   13969:	89 e5                	mov    %esp,%ebp
   1396b:	83 ec 18             	sub    $0x18,%esp

  int supplement_col = 4 - console->cursor_col % 4;
   1396e:	8b 45 08             	mov    0x8(%ebp),%eax
   13971:	8b 40 14             	mov    0x14(%eax),%eax
   13974:	83 e0 03             	and    $0x3,%eax
   13977:	89 c2                	mov    %eax,%edx
   13979:	b8 04 00 00 00       	mov    $0x4,%eax
   1397e:	29 d0                	sub    %edx,%eax
   13980:	89 45 f0             	mov    %eax,-0x10(%ebp)

  for (int i = 0; i < supplement_col; ++i) {
   13983:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1398a:	eb 14                	jmp    139a0 <print_table+0x38>
    show_char(console, ' ');
   1398c:	83 ec 08             	sub    $0x8,%esp
   1398f:	6a 20                	push   $0x20
   13991:	ff 75 08             	push   0x8(%ebp)
   13994:	e8 01 fe ff ff       	call   1379a <show_char>
   13999:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < supplement_col; ++i) {
   1399c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   139a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   139a3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
   139a6:	7c e4                	jl     1398c <print_table+0x24>
  }

  update_cursor_pos(console);
   139a8:	83 ec 0c             	sub    $0xc,%esp
   139ab:	ff 75 08             	push   0x8(%ebp)
   139ae:	e8 81 fb ff ff       	call   13534 <update_cursor_pos>
   139b3:	83 c4 10             	add    $0x10,%esp
}
   139b6:	90                   	nop
   139b7:	c9                   	leave  
   139b8:	c3                   	ret    

000139b9 <console_init>:
/**
 * @brief 初始化控制台
 *
 * @return int
 */
int console_init(int index) {
   139b9:	55                   	push   %ebp
   139ba:	89 e5                	mov    %esp,%ebp
   139bc:	83 ec 18             	sub    $0x18,%esp
  // 获取对应console，并进行初始化
  console_t *console = console_table + index;
   139bf:	8b 45 08             	mov    0x8(%ebp),%eax
   139c2:	6b c0 68             	imul   $0x68,%eax,%eax
   139c5:	05 00 e4 04 00       	add    $0x4e400,%eax
   139ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
  console->display_rows = CONSOLE_ROW_MAX;
   139cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   139d0:	c7 40 08 19 00 00 00 	movl   $0x19,0x8(%eax)
  console->display_cols = CONSOLE_CLO_MAX;
   139d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   139da:	c7 40 0c 50 00 00 00 	movl   $0x50,0xc(%eax)
  console->foreground = COLOR_White;
   139e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   139e4:	c7 40 18 0f 00 00 00 	movl   $0xf,0x18(%eax)
  console->background = COLOR_Black;
   139eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   139ee:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)

  // 初始化光标位置
  if (index == 0) {  // 保留bios在第一个console的输出信息
   139f5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   139f9:	75 38                	jne    13a33 <console_init+0x7a>
    int cursor_pos = read_cursor_pos();
   139fb:	e8 c0 fa ff ff       	call   134c0 <read_cursor_pos>
   13a00:	89 45 f0             	mov    %eax,-0x10(%ebp)
    console->cursor_row = cursor_pos / console->display_cols;
   13a03:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13a06:	8b 55 f4             	mov    -0xc(%ebp),%edx
   13a09:	8b 4a 0c             	mov    0xc(%edx),%ecx
   13a0c:	ba 00 00 00 00       	mov    $0x0,%edx
   13a11:	f7 f1                	div    %ecx
   13a13:	89 c2                	mov    %eax,%edx
   13a15:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13a18:	89 50 10             	mov    %edx,0x10(%eax)
    console->cursor_col = cursor_pos % console->display_cols;
   13a1b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13a1e:	8b 55 f4             	mov    -0xc(%ebp),%edx
   13a21:	8b 4a 0c             	mov    0xc(%edx),%ecx
   13a24:	ba 00 00 00 00       	mov    $0x0,%edx
   13a29:	f7 f1                	div    %ecx
   13a2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13a2e:	89 50 14             	mov    %edx,0x14(%eax)
   13a31:	eb 22                	jmp    13a55 <console_init+0x9c>
  } else {  // 清空其它console，并将光标放在起始位置
    console->cursor_col = 0;
   13a33:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13a36:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    console->cursor_row = 0;
   13a3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13a40:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    clear_display(console);
   13a47:	83 ec 0c             	sub    $0xc,%esp
   13a4a:	ff 75 f4             	push   -0xc(%ebp)
   13a4d:	e8 8f fe ff ff       	call   138e1 <clear_display>
   13a52:	83 c4 10             	add    $0x10,%esp
  }

  // 初始化上一次光标位置
  console->old_cursor_col = console->cursor_col;
   13a55:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13a58:	8b 50 14             	mov    0x14(%eax),%edx
   13a5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13a5e:	89 50 20             	mov    %edx,0x20(%eax)
  console->old_cursor_row = console->cursor_row;
   13a61:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13a64:	8b 50 10             	mov    0x10(%eax),%edx
   13a67:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13a6a:	89 50 24             	mov    %edx,0x24(%eax)

  // 初始化esc序列的参数数组
  kernel_memset(console->esc_param, 0, sizeof(console->esc_param[0]) * ESC_PARAM_MAX);
   13a6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13a70:	83 c0 28             	add    $0x28,%eax
   13a73:	83 ec 04             	sub    $0x4,%esp
   13a76:	6a 28                	push   $0x28
   13a78:	6a 00                	push   $0x0
   13a7a:	50                   	push   %eax
   13a7b:	e8 18 52 00 00       	call   18c98 <kernel_memset>
   13a80:	83 c4 10             	add    $0x10,%esp
  console->curr_param_index = 0;
   13a83:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13a86:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)

  // 初始化终端写入的状态
  console->write_state = CONSOLE_WRITE_NORMAL;
   13a8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13a90:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

  // 计算每个终端在现存中的起始地址
  console->disp_base = (disp_char_t *)CONSOLE_DISP_START_ADDR +
   13a96:	8b 45 08             	mov    0x8(%ebp),%eax
   13a99:	69 c0 a0 0f 00 00    	imul   $0xfa0,%eax,%eax
   13a9f:	8d 90 00 80 0b 00    	lea    0xb8000(%eax),%edx
   13aa5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13aa8:	89 50 04             	mov    %edx,0x4(%eax)
                       (index * CONSOLE_CLO_MAX * CONSOLE_ROW_MAX);

  //初始化终端互斥锁
  mutex_init(&console->mutex);
   13aab:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13aae:	83 c0 54             	add    $0x54,%eax
   13ab1:	83 ec 0c             	sub    $0xc,%esp
   13ab4:	50                   	push   %eax
   13ab5:	e8 47 45 00 00       	call   18001 <mutex_init>
   13aba:	83 c4 10             	add    $0x10,%esp
  return 0;
   13abd:	b8 00 00 00 00       	mov    $0x0,%eax
}
   13ac2:	c9                   	leave  
   13ac3:	c3                   	ret    

00013ac4 <write_normal>:
 * @brief 终端写普通字符的策略
 *
 * @param console
 * @param c
 */
static inline void write_normal(console_t *console, char c) {
   13ac4:	55                   	push   %ebp
   13ac5:	89 e5                	mov    %esp,%ebp
   13ac7:	83 ec 18             	sub    $0x18,%esp
   13aca:	8b 45 0c             	mov    0xc(%ebp),%eax
   13acd:	88 45 f4             	mov    %al,-0xc(%ebp)
  switch (c) {
   13ad0:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
   13ad4:	83 f8 1b             	cmp    $0x1b,%eax
   13ad7:	7f 16                	jg     13aef <write_normal+0x2b>
   13ad9:	83 f8 08             	cmp    $0x8,%eax
   13adc:	7c 75                	jl     13b53 <write_normal+0x8f>
   13ade:	83 e8 08             	sub    $0x8,%eax
   13ae1:	83 f8 13             	cmp    $0x13,%eax
   13ae4:	77 6d                	ja     13b53 <write_normal+0x8f>
   13ae6:	8b 04 85 c0 a0 01 00 	mov    0x1a0c0(,%eax,4),%eax
   13aed:	ff e0                	jmp    *%eax
   13aef:	83 f8 7f             	cmp    $0x7f,%eax
   13af2:	74 0d                	je     13b01 <write_normal+0x3d>
   13af4:	eb 5d                	jmp    13b53 <write_normal+0x8f>
    case ASCII_ESC:
      console->write_state = CONSOLE_WRITE_ESC;
   13af6:	8b 45 08             	mov    0x8(%ebp),%eax
   13af9:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
      break;
   13aff:	eb 72                	jmp    13b73 <write_normal+0xaf>
    case 0x7f:  // 退格
      erase_backword(console);
   13b01:	83 ec 0c             	sub    $0xc,%esp
   13b04:	ff 75 08             	push   0x8(%ebp)
   13b07:	e8 9b fd ff ff       	call   138a7 <erase_backword>
   13b0c:	83 c4 10             	add    $0x10,%esp
      break;
   13b0f:	eb 62                	jmp    13b73 <write_normal+0xaf>
    case '\b':  // 光标左移一位
      move_backword(console, 1);
   13b11:	83 ec 08             	sub    $0x8,%esp
   13b14:	6a 01                	push   $0x1
   13b16:	ff 75 08             	push   0x8(%ebp)
   13b19:	e8 11 fd ff ff       	call   1382f <move_backword>
   13b1e:	83 c4 10             	add    $0x10,%esp
      break;
   13b21:	eb 50                	jmp    13b73 <write_normal+0xaf>
    case '\t':  //制表符，4个空格大小
      print_table(console);
   13b23:	83 ec 0c             	sub    $0xc,%esp
   13b26:	ff 75 08             	push   0x8(%ebp)
   13b29:	e8 3a fe ff ff       	call   13968 <print_table>
   13b2e:	83 c4 10             	add    $0x10,%esp
      break;
   13b31:	eb 40                	jmp    13b73 <write_normal+0xaf>
    case '\r':  // 回车
      move_to_col0(console);
   13b33:	83 ec 0c             	sub    $0xc,%esp
   13b36:	ff 75 08             	push   0x8(%ebp)
   13b39:	e8 9d fb ff ff       	call   136db <move_to_col0>
   13b3e:	83 c4 10             	add    $0x10,%esp
      break;
   13b41:	eb 30                	jmp    13b73 <write_normal+0xaf>
    case '\n':  // 换行
      // move_to_col0(console);
      move_to_next_line(console);
   13b43:	83 ec 0c             	sub    $0xc,%esp
   13b46:	ff 75 08             	push   0x8(%ebp)
   13b49:	e8 9d fb ff ff       	call   136eb <move_to_next_line>
   13b4e:	83 c4 10             	add    $0x10,%esp
      break;
   13b51:	eb 20                	jmp    13b73 <write_normal+0xaf>
    default:
      if (c >= ' ' && c <= '~') {  // 可显示字符的范围
   13b53:	80 7d f4 1f          	cmpb   $0x1f,-0xc(%ebp)
   13b57:	7e 19                	jle    13b72 <write_normal+0xae>
   13b59:	80 7d f4 7f          	cmpb   $0x7f,-0xc(%ebp)
   13b5d:	74 13                	je     13b72 <write_normal+0xae>
        show_char(console, c);
   13b5f:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
   13b63:	83 ec 08             	sub    $0x8,%esp
   13b66:	50                   	push   %eax
   13b67:	ff 75 08             	push   0x8(%ebp)
   13b6a:	e8 2b fc ff ff       	call   1379a <show_char>
   13b6f:	83 c4 10             	add    $0x10,%esp
      }
      break;
   13b72:	90                   	nop
  }
}
   13b73:	90                   	nop
   13b74:	c9                   	leave  
   13b75:	c3                   	ret    

00013b76 <save_cursor>:
/**
 * @brief 保存光标当前位置
 *
 * @param console
 */
static inline void save_cursor(console_t *console) {
   13b76:	55                   	push   %ebp
   13b77:	89 e5                	mov    %esp,%ebp
  console->old_cursor_col = console->cursor_col;
   13b79:	8b 45 08             	mov    0x8(%ebp),%eax
   13b7c:	8b 50 14             	mov    0x14(%eax),%edx
   13b7f:	8b 45 08             	mov    0x8(%ebp),%eax
   13b82:	89 50 20             	mov    %edx,0x20(%eax)
  console->old_cursor_row = console->cursor_row;
   13b85:	8b 45 08             	mov    0x8(%ebp),%eax
   13b88:	8b 50 10             	mov    0x10(%eax),%edx
   13b8b:	8b 45 08             	mov    0x8(%ebp),%eax
   13b8e:	89 50 24             	mov    %edx,0x24(%eax)
}
   13b91:	90                   	nop
   13b92:	5d                   	pop    %ebp
   13b93:	c3                   	ret    

00013b94 <restore_cursor>:
/**
 * @brief 恢复光标位置
 *
 * @param console
 */
static inline void restore_cursor(console_t *console) {
   13b94:	55                   	push   %ebp
   13b95:	89 e5                	mov    %esp,%ebp
  console->cursor_col = console->old_cursor_col;
   13b97:	8b 45 08             	mov    0x8(%ebp),%eax
   13b9a:	8b 50 20             	mov    0x20(%eax),%edx
   13b9d:	8b 45 08             	mov    0x8(%ebp),%eax
   13ba0:	89 50 14             	mov    %edx,0x14(%eax)
  console->cursor_row = console->old_cursor_row;
   13ba3:	8b 45 08             	mov    0x8(%ebp),%eax
   13ba6:	8b 50 24             	mov    0x24(%eax),%edx
   13ba9:	8b 45 08             	mov    0x8(%ebp),%eax
   13bac:	89 50 10             	mov    %edx,0x10(%eax)
}
   13baf:	90                   	nop
   13bb0:	5d                   	pop    %ebp
   13bb1:	c3                   	ret    

00013bb2 <clear_esc_param>:
/**
 * @brief 清空esc参数缓冲数组
 *
 * @param console
 */
static inline void clear_esc_param(console_t *console) {
   13bb2:	55                   	push   %ebp
   13bb3:	89 e5                	mov    %esp,%ebp
   13bb5:	83 ec 08             	sub    $0x8,%esp
  kernel_memset(console->esc_param, 0, sizeof(int) * ESC_PARAM_MAX);
   13bb8:	8b 45 08             	mov    0x8(%ebp),%eax
   13bbb:	83 c0 28             	add    $0x28,%eax
   13bbe:	83 ec 04             	sub    $0x4,%esp
   13bc1:	6a 28                	push   $0x28
   13bc3:	6a 00                	push   $0x0
   13bc5:	50                   	push   %eax
   13bc6:	e8 cd 50 00 00       	call   18c98 <kernel_memset>
   13bcb:	83 c4 10             	add    $0x10,%esp
  console->curr_param_index = 0;
   13bce:	8b 45 08             	mov    0x8(%ebp),%eax
   13bd1:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
}
   13bd8:	90                   	nop
   13bd9:	c9                   	leave  
   13bda:	c3                   	ret    

00013bdb <write_esc>:
 * @brief 终端写ESC字符的策略
 *
 * @param console
 * @param c
 */
static inline void write_esc(console_t *console, char c) {
   13bdb:	55                   	push   %ebp
   13bdc:	89 e5                	mov    %esp,%ebp
   13bde:	83 ec 18             	sub    $0x18,%esp
   13be1:	8b 45 0c             	mov    0xc(%ebp),%eax
   13be4:	88 45 f4             	mov    %al,-0xc(%ebp)
  switch (c) {
   13be7:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
   13beb:	83 f8 5b             	cmp    $0x5b,%eax
   13bee:	74 11                	je     13c01 <write_esc+0x26>
   13bf0:	83 f8 5b             	cmp    $0x5b,%eax
   13bf3:	7f 57                	jg     13c4c <write_esc+0x71>
   13bf5:	83 f8 37             	cmp    $0x37,%eax
   13bf8:	74 20                	je     13c1a <write_esc+0x3f>
   13bfa:	83 f8 38             	cmp    $0x38,%eax
   13bfd:	74 34                	je     13c33 <write_esc+0x58>
   13bff:	eb 4b                	jmp    13c4c <write_esc+0x71>
    case '[':
      clear_esc_param(console);
   13c01:	83 ec 0c             	sub    $0xc,%esp
   13c04:	ff 75 08             	push   0x8(%ebp)
   13c07:	e8 a6 ff ff ff       	call   13bb2 <clear_esc_param>
   13c0c:	83 c4 10             	add    $0x10,%esp
      console->write_state = CONSOLE_WRITE_ESC_SQUARE;
   13c0f:	8b 45 08             	mov    0x8(%ebp),%eax
   13c12:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
      break;
   13c18:	eb 3c                	jmp    13c56 <write_esc+0x7b>
    case '7':
      save_cursor(console);
   13c1a:	83 ec 0c             	sub    $0xc,%esp
   13c1d:	ff 75 08             	push   0x8(%ebp)
   13c20:	e8 51 ff ff ff       	call   13b76 <save_cursor>
   13c25:	83 c4 10             	add    $0x10,%esp
      console->write_state = CONSOLE_WRITE_NORMAL;
   13c28:	8b 45 08             	mov    0x8(%ebp),%eax
   13c2b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      break;
   13c31:	eb 23                	jmp    13c56 <write_esc+0x7b>
    case '8':
      restore_cursor(console);
   13c33:	83 ec 0c             	sub    $0xc,%esp
   13c36:	ff 75 08             	push   0x8(%ebp)
   13c39:	e8 56 ff ff ff       	call   13b94 <restore_cursor>
   13c3e:	83 c4 10             	add    $0x10,%esp
      console->write_state = CONSOLE_WRITE_NORMAL;
   13c41:	8b 45 08             	mov    0x8(%ebp),%eax
   13c44:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      break;
   13c4a:	eb 0a                	jmp    13c56 <write_esc+0x7b>
    default:
      console->write_state = CONSOLE_WRITE_NORMAL;
   13c4c:	8b 45 08             	mov    0x8(%ebp),%eax
   13c4f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      break;
   13c55:	90                   	nop
  }
}
   13c56:	90                   	nop
   13c57:	c9                   	leave  
   13c58:	c3                   	ret    

00013c59 <set_font_style>:
/**
 * @brief 根据esc参数设置字符的风格
 *
 * @param console
 */
static inline void set_font_style(console_t *console) {
   13c59:	55                   	push   %ebp
   13c5a:	89 e5                	mov    %esp,%ebp
   13c5c:	83 ec 10             	sub    $0x10,%esp
  static const color_t color_table[] = {COLOR_Black,  COLOR_Red,  COLOR_Green,
                                        COLOR_Yellow, COLOR_Blue, COLOR_Magenta,
                                        COLOR_Cyan,   COLOR_White};
  for (int i = 0; i <= console->curr_param_index; ++i) {
   13c5f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   13c66:	eb 78                	jmp    13ce0 <set_font_style+0x87>
    int param = console->esc_param[i];
   13c68:	8b 45 08             	mov    0x8(%ebp),%eax
   13c6b:	8b 55 fc             	mov    -0x4(%ebp),%edx
   13c6e:	83 c2 08             	add    $0x8,%edx
   13c71:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   13c75:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if (param >= 30 && param <= 37) {
   13c78:	83 7d f8 1d          	cmpl   $0x1d,-0x8(%ebp)
   13c7c:	7e 1b                	jle    13c99 <set_font_style+0x40>
   13c7e:	83 7d f8 25          	cmpl   $0x25,-0x8(%ebp)
   13c82:	7f 15                	jg     13c99 <set_font_style+0x40>
      console->foreground = color_table[param - 30];
   13c84:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13c87:	83 e8 1e             	sub    $0x1e,%eax
   13c8a:	8b 14 85 20 a1 01 00 	mov    0x1a120(,%eax,4),%edx
   13c91:	8b 45 08             	mov    0x8(%ebp),%eax
   13c94:	89 50 18             	mov    %edx,0x18(%eax)
   13c97:	eb 43                	jmp    13cdc <set_font_style+0x83>
    } else if (param >= 40 && param <= 47) {
   13c99:	83 7d f8 27          	cmpl   $0x27,-0x8(%ebp)
   13c9d:	7e 1b                	jle    13cba <set_font_style+0x61>
   13c9f:	83 7d f8 2f          	cmpl   $0x2f,-0x8(%ebp)
   13ca3:	7f 15                	jg     13cba <set_font_style+0x61>
      console->background = color_table[param - 40];
   13ca5:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13ca8:	83 e8 28             	sub    $0x28,%eax
   13cab:	8b 14 85 20 a1 01 00 	mov    0x1a120(,%eax,4),%edx
   13cb2:	8b 45 08             	mov    0x8(%ebp),%eax
   13cb5:	89 50 1c             	mov    %edx,0x1c(%eax)
   13cb8:	eb 22                	jmp    13cdc <set_font_style+0x83>
    } else if (param == 39) {
   13cba:	83 7d f8 27          	cmpl   $0x27,-0x8(%ebp)
   13cbe:	75 0c                	jne    13ccc <set_font_style+0x73>
      console->foreground = COLOR_White;
   13cc0:	8b 45 08             	mov    0x8(%ebp),%eax
   13cc3:	c7 40 18 0f 00 00 00 	movl   $0xf,0x18(%eax)
   13cca:	eb 10                	jmp    13cdc <set_font_style+0x83>
    } else if (param == 49) {
   13ccc:	83 7d f8 31          	cmpl   $0x31,-0x8(%ebp)
   13cd0:	75 0a                	jne    13cdc <set_font_style+0x83>
      console->background = COLOR_Black;
   13cd2:	8b 45 08             	mov    0x8(%ebp),%eax
   13cd5:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
  for (int i = 0; i <= console->curr_param_index; ++i) {
   13cdc:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   13ce0:	8b 45 08             	mov    0x8(%ebp),%eax
   13ce3:	8b 40 50             	mov    0x50(%eax),%eax
   13ce6:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   13ce9:	0f 8e 79 ff ff ff    	jle    13c68 <set_font_style+0xf>
    }
  }
}
   13cef:	90                   	nop
   13cf0:	90                   	nop
   13cf1:	c9                   	leave  
   13cf2:	c3                   	ret    

00013cf3 <erase_in_display>:
/**
 * @brief 擦除屏幕指定区域
 *
 * @param console
 */
static inline void erase_in_display(console_t *console) {
   13cf3:	55                   	push   %ebp
   13cf4:	89 e5                	mov    %esp,%ebp
   13cf6:	83 ec 10             	sub    $0x10,%esp
  if (console->curr_param_index < 0) {
   13cf9:	8b 45 08             	mov    0x8(%ebp),%eax
   13cfc:	8b 40 50             	mov    0x50(%eax),%eax
   13cff:	85 c0                	test   %eax,%eax
   13d01:	78 3c                	js     13d3f <erase_in_display+0x4c>
    return;
  }

  int param = console->esc_param[0];
   13d03:	8b 45 08             	mov    0x8(%ebp),%eax
   13d06:	8b 40 28             	mov    0x28(%eax),%eax
   13d09:	89 45 fc             	mov    %eax,-0x4(%ebp)
  if (param == 2) {  // 擦除整个屏幕
   13d0c:	83 7d fc 02          	cmpl   $0x2,-0x4(%ebp)
   13d10:	75 2e                	jne    13d40 <erase_in_display+0x4d>
    erase_rows(console, 0, console->display_rows - 1);
   13d12:	8b 45 08             	mov    0x8(%ebp),%eax
   13d15:	8b 40 08             	mov    0x8(%eax),%eax
   13d18:	83 e8 01             	sub    $0x1,%eax
   13d1b:	50                   	push   %eax
   13d1c:	6a 00                	push   $0x0
   13d1e:	ff 75 08             	push   0x8(%ebp)
   13d21:	e8 b4 f8 ff ff       	call   135da <erase_rows>
   13d26:	83 c4 0c             	add    $0xc,%esp
    console->cursor_col = 0;
   13d29:	8b 45 08             	mov    0x8(%ebp),%eax
   13d2c:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    console->cursor_row = 0;
   13d33:	8b 45 08             	mov    0x8(%ebp),%eax
   13d36:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
   13d3d:	eb 01                	jmp    13d40 <erase_in_display+0x4d>
    return;
   13d3f:	90                   	nop
  }
}
   13d40:	c9                   	leave  
   13d41:	c3                   	ret    

00013d42 <move_cursor>:
/**
 * @brief 移动光标到指定位置
 *
 * @param console
 */
static inline void move_cursor(console_t *console) {
   13d42:	55                   	push   %ebp
   13d43:	89 e5                	mov    %esp,%ebp
  console->cursor_row = console->esc_param[0];
   13d45:	8b 45 08             	mov    0x8(%ebp),%eax
   13d48:	8b 40 28             	mov    0x28(%eax),%eax
   13d4b:	89 c2                	mov    %eax,%edx
   13d4d:	8b 45 08             	mov    0x8(%ebp),%eax
   13d50:	89 50 10             	mov    %edx,0x10(%eax)
  console->cursor_col = console->esc_param[1];
   13d53:	8b 45 08             	mov    0x8(%ebp),%eax
   13d56:	8b 40 2c             	mov    0x2c(%eax),%eax
   13d59:	89 c2                	mov    %eax,%edx
   13d5b:	8b 45 08             	mov    0x8(%ebp),%eax
   13d5e:	89 50 14             	mov    %edx,0x14(%eax)
}
   13d61:	90                   	nop
   13d62:	5d                   	pop    %ebp
   13d63:	c3                   	ret    

00013d64 <move_left>:
 * @brief 将光标左移n位
 *
 * @param console
 * @param n
 */
static inline void move_left(console_t *console, int n) {
   13d64:	55                   	push   %ebp
   13d65:	89 e5                	mov    %esp,%ebp
   13d67:	83 ec 10             	sub    $0x10,%esp
  if (n == 0) {  // 默认至少移动一位
   13d6a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13d6e:	75 07                	jne    13d77 <move_left+0x13>
    n = 1;
   13d70:	c7 45 0c 01 00 00 00 	movl   $0x1,0xc(%ebp)
  }

  int col = console->cursor_col - n;
   13d77:	8b 45 08             	mov    0x8(%ebp),%eax
   13d7a:	8b 40 14             	mov    0x14(%eax),%eax
   13d7d:	8b 55 0c             	mov    0xc(%ebp),%edx
   13d80:	29 d0                	sub    %edx,%eax
   13d82:	89 45 fc             	mov    %eax,-0x4(%ebp)
  console->cursor_col = (col > 0) ? col : 0;
   13d85:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13d88:	ba 00 00 00 00       	mov    $0x0,%edx
   13d8d:	85 c0                	test   %eax,%eax
   13d8f:	0f 48 c2             	cmovs  %edx,%eax
   13d92:	89 c2                	mov    %eax,%edx
   13d94:	8b 45 08             	mov    0x8(%ebp),%eax
   13d97:	89 50 14             	mov    %edx,0x14(%eax)
}
   13d9a:	90                   	nop
   13d9b:	c9                   	leave  
   13d9c:	c3                   	ret    

00013d9d <move_right>:
 * @brief 将光标右移n位
 *
 * @param console
 * @param n
 */
static inline void move_right(console_t *console, int n) {
   13d9d:	55                   	push   %ebp
   13d9e:	89 e5                	mov    %esp,%ebp
   13da0:	83 ec 10             	sub    $0x10,%esp
  if (n == 0) {  // 默认至少移动一位
   13da3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13da7:	75 07                	jne    13db0 <move_right+0x13>
    n = 1;
   13da9:	c7 45 0c 01 00 00 00 	movl   $0x1,0xc(%ebp)
  }

  int col = console->cursor_col + n;
   13db0:	8b 45 08             	mov    0x8(%ebp),%eax
   13db3:	8b 50 14             	mov    0x14(%eax),%edx
   13db6:	8b 45 0c             	mov    0xc(%ebp),%eax
   13db9:	01 d0                	add    %edx,%eax
   13dbb:	89 45 fc             	mov    %eax,-0x4(%ebp)
  console->cursor_col =
      (col >= console->display_cols) ? console->display_cols - 1 : col;
   13dbe:	8b 45 08             	mov    0x8(%ebp),%eax
   13dc1:	8b 50 0c             	mov    0xc(%eax),%edx
   13dc4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13dc7:	39 c2                	cmp    %eax,%edx
   13dc9:	77 0b                	ja     13dd6 <move_right+0x39>
   13dcb:	8b 45 08             	mov    0x8(%ebp),%eax
   13dce:	8b 40 0c             	mov    0xc(%eax),%eax
   13dd1:	83 e8 01             	sub    $0x1,%eax
   13dd4:	eb 03                	jmp    13dd9 <move_right+0x3c>
   13dd6:	8b 45 fc             	mov    -0x4(%ebp),%eax
  console->cursor_col =
   13dd9:	8b 55 08             	mov    0x8(%ebp),%edx
   13ddc:	89 42 14             	mov    %eax,0x14(%edx)
}
   13ddf:	90                   	nop
   13de0:	c9                   	leave  
   13de1:	c3                   	ret    

00013de2 <write_esc_square>:
 * @brief 在终端console中写入esc序列
 *
 * @param console
 * @param c
 */
static inline void write_esc_square(console_t *console, char c) {
   13de2:	55                   	push   %ebp
   13de3:	89 e5                	mov    %esp,%ebp
   13de5:	83 ec 14             	sub    $0x14,%esp
   13de8:	8b 45 0c             	mov    0xc(%ebp),%eax
   13deb:	88 45 ec             	mov    %al,-0x14(%ebp)
  if (c >= '0' && c <= '9') {  // 解析出序列的参数
   13dee:	80 7d ec 2f          	cmpb   $0x2f,-0x14(%ebp)
   13df2:	7e 44                	jle    13e38 <write_esc_square+0x56>
   13df4:	80 7d ec 39          	cmpb   $0x39,-0x14(%ebp)
   13df8:	7f 3e                	jg     13e38 <write_esc_square+0x56>
    int *param = &console->esc_param[console->curr_param_index];
   13dfa:	8b 45 08             	mov    0x8(%ebp),%eax
   13dfd:	8b 40 50             	mov    0x50(%eax),%eax
   13e00:	83 c0 08             	add    $0x8,%eax
   13e03:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   13e0a:	8b 45 08             	mov    0x8(%ebp),%eax
   13e0d:	01 d0                	add    %edx,%eax
   13e0f:	83 c0 08             	add    $0x8,%eax
   13e12:	89 45 fc             	mov    %eax,-0x4(%ebp)
    *param = (*param) * 10 + c - '0';
   13e15:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13e18:	8b 10                	mov    (%eax),%edx
   13e1a:	89 d0                	mov    %edx,%eax
   13e1c:	c1 e0 02             	shl    $0x2,%eax
   13e1f:	01 d0                	add    %edx,%eax
   13e21:	01 c0                	add    %eax,%eax
   13e23:	89 c2                	mov    %eax,%edx
   13e25:	0f be 45 ec          	movsbl -0x14(%ebp),%eax
   13e29:	01 d0                	add    %edx,%eax
   13e2b:	8d 50 d0             	lea    -0x30(%eax),%edx
   13e2e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13e31:	89 10                	mov    %edx,(%eax)
  if (c >= '0' && c <= '9') {  // 解析出序列的参数
   13e33:	e9 ab 00 00 00       	jmp    13ee3 <write_esc_square+0x101>
  } else if (c == ';' && console->curr_param_index <
   13e38:	80 7d ec 3b          	cmpb   $0x3b,-0x14(%ebp)
   13e3c:	75 1f                	jne    13e5d <write_esc_square+0x7b>
   13e3e:	8b 45 08             	mov    0x8(%ebp),%eax
   13e41:	8b 40 50             	mov    0x50(%eax),%eax
   13e44:	83 f8 09             	cmp    $0x9,%eax
   13e47:	7f 14                	jg     13e5d <write_esc_square+0x7b>
                             ESC_PARAM_MAX) {  // 解析完一个参数，索引加1
    console->curr_param_index++;
   13e49:	8b 45 08             	mov    0x8(%ebp),%eax
   13e4c:	8b 40 50             	mov    0x50(%eax),%eax
   13e4f:	8d 50 01             	lea    0x1(%eax),%edx
   13e52:	8b 45 08             	mov    0x8(%ebp),%eax
   13e55:	89 50 50             	mov    %edx,0x50(%eax)
   13e58:	e9 86 00 00 00       	jmp    13ee3 <write_esc_square+0x101>
  } else {  // 用序列结束符判断需要进行的操作
    switch (c) {
   13e5d:	0f be 45 ec          	movsbl -0x14(%ebp),%eax
   13e61:	83 f8 6d             	cmp    $0x6d,%eax
   13e64:	74 25                	je     13e8b <write_esc_square+0xa9>
   13e66:	83 f8 6d             	cmp    $0x6d,%eax
   13e69:	7f 6d                	jg     13ed8 <write_esc_square+0xf6>
   13e6b:	83 f8 4a             	cmp    $0x4a,%eax
   13e6e:	74 5d                	je     13ecd <write_esc_square+0xeb>
   13e70:	83 f8 4a             	cmp    $0x4a,%eax
   13e73:	7f 63                	jg     13ed8 <write_esc_square+0xf6>
   13e75:	83 f8 48             	cmp    $0x48,%eax
   13e78:	74 46                	je     13ec0 <write_esc_square+0xde>
   13e7a:	83 f8 48             	cmp    $0x48,%eax
   13e7d:	7f 59                	jg     13ed8 <write_esc_square+0xf6>
   13e7f:	83 f8 43             	cmp    $0x43,%eax
   13e82:	74 28                	je     13eac <write_esc_square+0xca>
   13e84:	83 f8 44             	cmp    $0x44,%eax
   13e87:	74 0f                	je     13e98 <write_esc_square+0xb6>
        move_cursor(console);
        break;
      case 'J':  // 擦除屏幕指定区域
        erase_in_display(console);
      default:
        break;
   13e89:	eb 4d                	jmp    13ed8 <write_esc_square+0xf6>
        set_font_style(console);
   13e8b:	ff 75 08             	push   0x8(%ebp)
   13e8e:	e8 c6 fd ff ff       	call   13c59 <set_font_style>
   13e93:	83 c4 04             	add    $0x4,%esp
        break;
   13e96:	eb 41                	jmp    13ed9 <write_esc_square+0xf7>
        move_left(console, console->esc_param[0]);
   13e98:	8b 45 08             	mov    0x8(%ebp),%eax
   13e9b:	8b 40 28             	mov    0x28(%eax),%eax
   13e9e:	50                   	push   %eax
   13e9f:	ff 75 08             	push   0x8(%ebp)
   13ea2:	e8 bd fe ff ff       	call   13d64 <move_left>
   13ea7:	83 c4 08             	add    $0x8,%esp
        break;
   13eaa:	eb 2d                	jmp    13ed9 <write_esc_square+0xf7>
        move_right(console, console->esc_param[0]);
   13eac:	8b 45 08             	mov    0x8(%ebp),%eax
   13eaf:	8b 40 28             	mov    0x28(%eax),%eax
   13eb2:	50                   	push   %eax
   13eb3:	ff 75 08             	push   0x8(%ebp)
   13eb6:	e8 e2 fe ff ff       	call   13d9d <move_right>
   13ebb:	83 c4 08             	add    $0x8,%esp
        break;
   13ebe:	eb 19                	jmp    13ed9 <write_esc_square+0xf7>
        move_cursor(console);
   13ec0:	ff 75 08             	push   0x8(%ebp)
   13ec3:	e8 7a fe ff ff       	call   13d42 <move_cursor>
   13ec8:	83 c4 04             	add    $0x4,%esp
        break;
   13ecb:	eb 0c                	jmp    13ed9 <write_esc_square+0xf7>
        erase_in_display(console);
   13ecd:	ff 75 08             	push   0x8(%ebp)
   13ed0:	e8 1e fe ff ff       	call   13cf3 <erase_in_display>
   13ed5:	83 c4 04             	add    $0x4,%esp
        break;
   13ed8:	90                   	nop
    }

    // 执行完操作，将状态机切换回写普通字符模式
    console->write_state = CONSOLE_WRITE_NORMAL;
   13ed9:	8b 45 08             	mov    0x8(%ebp),%eax
   13edc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  }
}
   13ee2:	90                   	nop
   13ee3:	90                   	nop
   13ee4:	c9                   	leave  
   13ee5:	c3                   	ret    

00013ee6 <console_write>:
 * @param console 第几个控制台
 * @param data 写入的字符串
 * @param size 字符串大小
 * @return int
 */
int console_write(tty_t *tty) {
   13ee6:	55                   	push   %ebp
   13ee7:	89 e5                	mov    %esp,%ebp
   13ee9:	83 ec 18             	sub    $0x18,%esp
  // 获取需要需要写入的终端
  console_t *console = console_table + tty->console_index;
   13eec:	8b 45 08             	mov    0x8(%ebp),%eax
   13eef:	8b 40 08             	mov    0x8(%eax),%eax
   13ef2:	6b c0 68             	imul   $0x68,%eax,%eax
   13ef5:	05 00 e4 04 00       	add    $0x4e400,%eax
   13efa:	89 45 f0             	mov    %eax,-0x10(%ebp)
  int len = 0;
   13efd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  //TODO:加锁
  mutex_lock(&console->mutex);
   13f04:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13f07:	83 c0 54             	add    $0x54,%eax
   13f0a:	83 ec 0c             	sub    $0xc,%esp
   13f0d:	50                   	push   %eax
   13f0e:	e8 3b 41 00 00       	call   1804e <mutex_lock>
   13f13:	83 c4 10             	add    $0x10,%esp

  //在tty的缓冲队列中读取一个字符写入终端
  do {
    char c;
    int err = tty_fifo_get(&tty->out_fifo, &c);
   13f16:	8b 45 08             	mov    0x8(%ebp),%eax
   13f19:	8d 50 0c             	lea    0xc(%eax),%edx
   13f1c:	83 ec 08             	sub    $0x8,%esp
   13f1f:	8d 45 eb             	lea    -0x15(%ebp),%eax
   13f22:	50                   	push   %eax
   13f23:	52                   	push   %edx
   13f24:	e8 28 15 00 00       	call   15451 <tty_fifo_get>
   13f29:	83 c4 10             	add    $0x10,%esp
   13f2c:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (err < 0) {
   13f2f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   13f33:	79 2a                	jns    13f5f <console_write+0x79>
    len++;
  } while (1);


  //TODO:解锁
  mutex_unlock(&console->mutex);
   13f35:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13f38:	83 c0 54             	add    $0x54,%eax
   13f3b:	83 ec 0c             	sub    $0xc,%esp
   13f3e:	50                   	push   %eax
   13f3f:	e8 b0 41 00 00       	call   180f4 <mutex_unlock>
   13f44:	83 c4 10             	add    $0x10,%esp

  // 更新光标的位置
  if (tty->console_index == curr_console_index) {
   13f47:	8b 45 08             	mov    0x8(%ebp),%eax
   13f4a:	8b 50 08             	mov    0x8(%eax),%edx
   13f4d:	a1 40 e7 04 00       	mov    0x4e740,%eax
   13f52:	39 c2                	cmp    %eax,%edx
   13f54:	0f 84 83 00 00 00    	je     13fdd <console_write+0xf7>
   13f5a:	e9 8c 00 00 00       	jmp    13feb <console_write+0x105>
    sem_notify(&tty->out_sem);
   13f5f:	8b 45 08             	mov    0x8(%ebp),%eax
   13f62:	83 c0 34             	add    $0x34,%eax
   13f65:	83 ec 0c             	sub    $0xc,%esp
   13f68:	50                   	push   %eax
   13f69:	e8 94 43 00 00       	call   18302 <sem_notify>
   13f6e:	83 c4 10             	add    $0x10,%esp
    switch (console->write_state) {
   13f71:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13f74:	8b 00                	mov    (%eax),%eax
   13f76:	83 f8 02             	cmp    $0x2,%eax
   13f79:	74 40                	je     13fbb <console_write+0xd5>
   13f7b:	83 f8 02             	cmp    $0x2,%eax
   13f7e:	77 53                	ja     13fd3 <console_write+0xed>
   13f80:	85 c0                	test   %eax,%eax
   13f82:	74 07                	je     13f8b <console_write+0xa5>
   13f84:	83 f8 01             	cmp    $0x1,%eax
   13f87:	74 1a                	je     13fa3 <console_write+0xbd>
        break;
   13f89:	eb 48                	jmp    13fd3 <console_write+0xed>
        write_normal(console, c);
   13f8b:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   13f8f:	0f be c0             	movsbl %al,%eax
   13f92:	83 ec 08             	sub    $0x8,%esp
   13f95:	50                   	push   %eax
   13f96:	ff 75 f0             	push   -0x10(%ebp)
   13f99:	e8 26 fb ff ff       	call   13ac4 <write_normal>
   13f9e:	83 c4 10             	add    $0x10,%esp
        break;
   13fa1:	eb 31                	jmp    13fd4 <console_write+0xee>
        write_esc(console, c);
   13fa3:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   13fa7:	0f be c0             	movsbl %al,%eax
   13faa:	83 ec 08             	sub    $0x8,%esp
   13fad:	50                   	push   %eax
   13fae:	ff 75 f0             	push   -0x10(%ebp)
   13fb1:	e8 25 fc ff ff       	call   13bdb <write_esc>
   13fb6:	83 c4 10             	add    $0x10,%esp
        break;
   13fb9:	eb 19                	jmp    13fd4 <console_write+0xee>
        write_esc_square(console, c);
   13fbb:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   13fbf:	0f be c0             	movsbl %al,%eax
   13fc2:	83 ec 08             	sub    $0x8,%esp
   13fc5:	50                   	push   %eax
   13fc6:	ff 75 f0             	push   -0x10(%ebp)
   13fc9:	e8 14 fe ff ff       	call   13de2 <write_esc_square>
   13fce:	83 c4 10             	add    $0x10,%esp
        break;
   13fd1:	eb 01                	jmp    13fd4 <console_write+0xee>
        break;
   13fd3:	90                   	nop
    len++;
   13fd4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  do {
   13fd8:	e9 39 ff ff ff       	jmp    13f16 <console_write+0x30>
    //若当前tty设备是正在显示的设备，则更新对应的光标位置
    update_cursor_pos(console);
   13fdd:	83 ec 0c             	sub    $0xc,%esp
   13fe0:	ff 75 f0             	push   -0x10(%ebp)
   13fe3:	e8 4c f5 ff ff       	call   13534 <update_cursor_pos>
   13fe8:	83 c4 10             	add    $0x10,%esp
  }


  return len;
   13feb:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   13fee:	c9                   	leave  
   13fef:	c3                   	ret    

00013ff0 <console_close>:
 * @brief 关闭控制台
 *
 * @param console
 * @return int
 */
void console_close(int console) {}
   13ff0:	55                   	push   %ebp
   13ff1:	89 e5                	mov    %esp,%ebp
   13ff3:	90                   	nop
   13ff4:	5d                   	pop    %ebp
   13ff5:	c3                   	ret    

00013ff6 <console_select>:
/**
 * @brief 通过索引号更改当前系统使用的终端
 * 
 * @param console 
 */
void console_select(int console_index) {
   13ff6:	55                   	push   %ebp
   13ff7:	89 e5                	mov    %esp,%ebp
   13ff9:	83 ec 18             	sub    $0x18,%esp
    console_t *console = console_table + console_index;
   13ffc:	8b 45 08             	mov    0x8(%ebp),%eax
   13fff:	6b c0 68             	imul   $0x68,%eax,%eax
   14002:	05 00 e4 04 00       	add    $0x4e400,%eax
   14007:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (console->disp_base == 0) {  //当前控制台还未被初始化，进行初始化操作
   1400a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1400d:	8b 40 04             	mov    0x4(%eax),%eax
   14010:	85 c0                	test   %eax,%eax
   14012:	75 0e                	jne    14022 <console_select+0x2c>
      console_init(console_index);
   14014:	83 ec 0c             	sub    $0xc,%esp
   14017:	ff 75 08             	push   0x8(%ebp)
   1401a:	e8 9a f9 ff ff       	call   139b9 <console_init>
   1401f:	83 c4 10             	add    $0x10,%esp
    }

    //计算屏幕显示的起始位置
    uint16_t pos = console_index * console->display_rows * console->display_cols;
   14022:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14025:	8b 40 08             	mov    0x8(%eax),%eax
   14028:	89 c2                	mov    %eax,%edx
   1402a:	8b 45 08             	mov    0x8(%ebp),%eax
   1402d:	0f af d0             	imul   %eax,%edx
   14030:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14033:	8b 40 0c             	mov    0xc(%eax),%eax
   14036:	0f af c2             	imul   %edx,%eax
   14039:	66 89 45 f2          	mov    %ax,-0xe(%ebp)

    //向端口写入起始位置
    outb(0x3d4, 0xc); //告诉端口要写屏幕起始索引的高8位
   1403d:	83 ec 08             	sub    $0x8,%esp
   14040:	6a 0c                	push   $0xc
   14042:	68 d4 03 00 00       	push   $0x3d4
   14047:	e8 53 f4 ff ff       	call   1349f <outb>
   1404c:	83 c4 10             	add    $0x10,%esp
    outb(0x3d5, (uint8_t)((pos >> 8) & 0xff));  
   1404f:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   14053:	66 c1 e8 08          	shr    $0x8,%ax
   14057:	0f b6 c0             	movzbl %al,%eax
   1405a:	83 ec 08             	sub    $0x8,%esp
   1405d:	50                   	push   %eax
   1405e:	68 d5 03 00 00       	push   $0x3d5
   14063:	e8 37 f4 ff ff       	call   1349f <outb>
   14068:	83 c4 10             	add    $0x10,%esp
    outb(0x3d4, 0xd);//告诉端口要写屏幕起始索引的低8位
   1406b:	83 ec 08             	sub    $0x8,%esp
   1406e:	6a 0d                	push   $0xd
   14070:	68 d4 03 00 00       	push   $0x3d4
   14075:	e8 25 f4 ff ff       	call   1349f <outb>
   1407a:	83 c4 10             	add    $0x10,%esp
    outb(0x3d5, (uint8_t)(pos & 0xff));  
   1407d:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   14081:	0f b6 c0             	movzbl %al,%eax
   14084:	83 ec 08             	sub    $0x8,%esp
   14087:	50                   	push   %eax
   14088:	68 d5 03 00 00       	push   $0x3d5
   1408d:	e8 0d f4 ff ff       	call   1349f <outb>
   14092:	83 c4 10             	add    $0x10,%esp

    //更新当前使用控制台
    curr_console_index = console_index;
   14095:	8b 45 08             	mov    0x8(%ebp),%eax
   14098:	a3 40 e7 04 00       	mov    %eax,0x4e740

    //在控制台显示终端设备号
    show_char(console, console_index + '0');
   1409d:	8b 45 08             	mov    0x8(%ebp),%eax
   140a0:	83 c0 30             	add    $0x30,%eax
   140a3:	0f be c0             	movsbl %al,%eax
   140a6:	83 ec 08             	sub    $0x8,%esp
   140a9:	50                   	push   %eax
   140aa:	ff 75 f4             	push   -0xc(%ebp)
   140ad:	e8 e8 f6 ff ff       	call   1379a <show_char>
   140b2:	83 c4 10             	add    $0x10,%esp

    //更新光标位置
    update_cursor_pos(console);
   140b5:	83 ec 0c             	sub    $0xc,%esp
   140b8:	ff 75 f4             	push   -0xc(%ebp)
   140bb:	e8 74 f4 ff ff       	call   13534 <update_cursor_pos>
   140c0:	83 c4 10             	add    $0x10,%esp

   

   140c3:	90                   	nop
   140c4:	c9                   	leave  
   140c5:	c3                   	ret    

000140c6 <is_dev_exist>:
 * @brief 根据设备id判断设备是否存在
 * 
 * @param dev_id 
 * @return int 
 */
static int is_dev_exist(int dev_id) {
   140c6:	55                   	push   %ebp
   140c7:	89 e5                	mov    %esp,%ebp
    //dev_id越界，设备不存在
    if (dev_id < 0 || dev_id >= DEV_TABLE_SIZE) {
   140c9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   140cd:	78 06                	js     140d5 <is_dev_exist+0xf>
   140cf:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   140d3:	7e 07                	jle    140dc <is_dev_exist+0x16>
        return 0;
   140d5:	b8 00 00 00 00       	mov    $0x0,%eax
   140da:	eb 3a                	jmp    14116 <is_dev_exist+0x50>
    }
    
    //设备空间未初始化，设备不存在
    if (dev_table[dev_id].open_count == 0 || dev_table[dev_id].desc == (dev_desc_t*)0) {
   140dc:	8b 55 08             	mov    0x8(%ebp),%edx
   140df:	89 d0                	mov    %edx,%eax
   140e1:	01 c0                	add    %eax,%eax
   140e3:	01 d0                	add    %edx,%eax
   140e5:	c1 e0 03             	shl    $0x3,%eax
   140e8:	05 70 e7 04 00       	add    $0x4e770,%eax
   140ed:	8b 00                	mov    (%eax),%eax
   140ef:	85 c0                	test   %eax,%eax
   140f1:	74 17                	je     1410a <is_dev_exist+0x44>
   140f3:	8b 55 08             	mov    0x8(%ebp),%edx
   140f6:	89 d0                	mov    %edx,%eax
   140f8:	01 c0                	add    %eax,%eax
   140fa:	01 d0                	add    %edx,%eax
   140fc:	c1 e0 03             	shl    $0x3,%eax
   140ff:	05 74 e7 04 00       	add    $0x4e774,%eax
   14104:	8b 00                	mov    (%eax),%eax
   14106:	85 c0                	test   %eax,%eax
   14108:	75 07                	jne    14111 <is_dev_exist+0x4b>
        return 0;
   1410a:	b8 00 00 00 00       	mov    $0x0,%eax
   1410f:	eb 05                	jmp    14116 <is_dev_exist+0x50>
    }

    return 1;
   14111:	b8 01 00 00 00       	mov    $0x1,%eax
}
   14116:	5d                   	pop    %ebp
   14117:	c3                   	ret    

00014118 <dev_open>:
 * @param dev_type 打开的设备类型
 * @param dev_index 打开的对应类型设备中的具体设备号
 * @param data 设备需要的参数数据
 * @return int 返回dev_id，该设备的描述符
 */
int dev_open(int dev_type, int dev_index, void *data) {
   14118:	55                   	push   %ebp
   14119:	89 e5                	mov    %esp,%ebp
   1411b:	83 ec 28             	sub    $0x28,%esp
    //TODO:加锁 1.关中断，确保线程成功获取到设备描述符
    idt_state_t state = idt_enter_protection();
   1411e:	e8 8d f2 ff ff       	call   133b0 <idt_enter_protection>
   14123:	89 45 ec             	mov    %eax,-0x14(%ebp)
    
    //2.遍历dev_table，若该设备打开过则记录打开次数再返回描述符
    //若未打开过则在dev_table分配空间给该设备，并打开该设备
    device_t *free_dev = (device_t*)0;
   14126:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (int i = 0; i < sizeof(dev_table) / sizeof(dev_table[0]); ++i) {
   1412d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   14134:	eb 64                	jmp    1419a <dev_open+0x82>
        device_t *dev = dev_table + i;
   14136:	8b 55 f0             	mov    -0x10(%ebp),%edx
   14139:	89 d0                	mov    %edx,%eax
   1413b:	01 c0                	add    %eax,%eax
   1413d:	01 d0                	add    %edx,%eax
   1413f:	c1 e0 03             	shl    $0x3,%eax
   14142:	05 60 e7 04 00       	add    $0x4e760,%eax
   14147:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (dev->open_count == 0) { 
   1414a:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1414d:	8b 40 10             	mov    0x10(%eax),%eax
   14150:	85 c0                	test   %eax,%eax
   14152:	75 08                	jne    1415c <dev_open+0x44>
            //需要打开的设备未打开过，为该设备分配空间
            free_dev = dev;
   14154:	8b 45 e8             	mov    -0x18(%ebp),%eax
   14157:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   1415a:	eb 46                	jmp    141a2 <dev_open+0x8a>
        } else if (dev->dev_type == dev_type && dev->dev_index == dev_index) {
   1415c:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1415f:	8b 00                	mov    (%eax),%eax
   14161:	39 45 08             	cmp    %eax,0x8(%ebp)
   14164:	75 30                	jne    14196 <dev_open+0x7e>
   14166:	8b 45 e8             	mov    -0x18(%ebp),%eax
   14169:	8b 40 08             	mov    0x8(%eax),%eax
   1416c:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1416f:	75 25                	jne    14196 <dev_open+0x7e>
            //设备已打开过,增加打开次数
            dev->open_count++;
   14171:	8b 45 e8             	mov    -0x18(%ebp),%eax
   14174:	8b 40 10             	mov    0x10(%eax),%eax
   14177:	8d 50 01             	lea    0x1(%eax),%edx
   1417a:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1417d:	89 50 10             	mov    %edx,0x10(%eax)
            //TODO:解锁
            idt_leave_protection(state);
   14180:	83 ec 0c             	sub    $0xc,%esp
   14183:	ff 75 ec             	push   -0x14(%ebp)
   14186:	e8 3d f2 ff ff       	call   133c8 <idt_leave_protection>
   1418b:	83 c4 10             	add    $0x10,%esp
            //返回设备描述符
            return i;
   1418e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14191:	e9 a9 00 00 00       	jmp    1423f <dev_open+0x127>
    for (int i = 0; i < sizeof(dev_table) / sizeof(dev_table[0]); ++i) {
   14196:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   1419a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1419d:	83 f8 7f             	cmp    $0x7f,%eax
   141a0:	76 94                	jbe    14136 <dev_open+0x1e>
        }
    }

    //3.设备描述结构存在，设备空间分配成功，进行设备的初始化
    if (free_dev && dev_type > DEV_UNKNOWN && dev_type < sizeof(dev_des_table) / sizeof(dev_des_table[0])) {
   141a2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   141a6:	0f 84 80 00 00 00    	je     1422c <dev_open+0x114>
   141ac:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   141b0:	7e 7a                	jle    1422c <dev_open+0x114>
   141b2:	8b 45 08             	mov    0x8(%ebp),%eax
   141b5:	83 f8 02             	cmp    $0x2,%eax
   141b8:	77 72                	ja     1422c <dev_open+0x114>
        free_dev->dev_type = dev_type;
   141ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
   141bd:	8b 55 08             	mov    0x8(%ebp),%edx
   141c0:	89 10                	mov    %edx,(%eax)
        free_dev->desc = dev_des_table[dev_type];
   141c2:	8b 45 08             	mov    0x8(%ebp),%eax
   141c5:	8b 14 85 50 b0 01 00 	mov    0x1b050(,%eax,4),%edx
   141cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   141cf:	89 50 14             	mov    %edx,0x14(%eax)
        free_dev->data = data;
   141d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   141d5:	8b 55 10             	mov    0x10(%ebp),%edx
   141d8:	89 50 0c             	mov    %edx,0xc(%eax)
        free_dev->dev_index = dev_index;
   141db:	8b 45 f4             	mov    -0xc(%ebp),%eax
   141de:	8b 55 0c             	mov    0xc(%ebp),%edx
   141e1:	89 50 08             	mov    %edx,0x8(%eax)

        //用该设备描述结构打开该设备
        int err = free_dev->desc->open(free_dev);
   141e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   141e7:	8b 40 14             	mov    0x14(%eax),%eax
   141ea:	8b 40 14             	mov    0x14(%eax),%eax
   141ed:	83 ec 0c             	sub    $0xc,%esp
   141f0:	ff 75 f4             	push   -0xc(%ebp)
   141f3:	ff d0                	call   *%eax
   141f5:	83 c4 10             	add    $0x10,%esp
   141f8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err == 0) { //打开成功
   141fb:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   141ff:	75 2b                	jne    1422c <dev_open+0x114>
            free_dev->open_count = 1;
   14201:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14204:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
            //TODO:解锁
            idt_leave_protection(state);
   1420b:	83 ec 0c             	sub    $0xc,%esp
   1420e:	ff 75 ec             	push   -0x14(%ebp)
   14211:	e8 b2 f1 ff ff       	call   133c8 <idt_leave_protection>
   14216:	83 c4 10             	add    $0x10,%esp
            //返回设备描述符
            return free_dev - dev_table;
   14219:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1421c:	2d 60 e7 04 00       	sub    $0x4e760,%eax
   14221:	c1 f8 03             	sar    $0x3,%eax
   14224:	69 c0 ab aa aa aa    	imul   $0xaaaaaaab,%eax,%eax
   1422a:	eb 13                	jmp    1423f <dev_open+0x127>

        }
    }
  
    //TODO:解锁
    idt_leave_protection(state);
   1422c:	83 ec 0c             	sub    $0xc,%esp
   1422f:	ff 75 ec             	push   -0x14(%ebp)
   14232:	e8 91 f1 ff ff       	call   133c8 <idt_leave_protection>
   14237:	83 c4 10             	add    $0x10,%esp
    return -1;
   1423a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1423f:	c9                   	leave  
   14240:	c3                   	ret    

00014241 <dev_read>:
 * @param addr 读取地址
 * @param buf 读取数据缓冲区
 * @param size 读取字节大小
 * @return int 成功读取大小
 */
int dev_read(int dev_id, int addr, char *buf, int size) {
   14241:	55                   	push   %ebp
   14242:	89 e5                	mov    %esp,%ebp
   14244:	83 ec 18             	sub    $0x18,%esp
    //设备不存在，直接返回-1
    if (!is_dev_exist(dev_id)) {
   14247:	ff 75 08             	push   0x8(%ebp)
   1424a:	e8 77 fe ff ff       	call   140c6 <is_dev_exist>
   1424f:	83 c4 04             	add    $0x4,%esp
   14252:	85 c0                	test   %eax,%eax
   14254:	75 07                	jne    1425d <dev_read+0x1c>
        return -1;
   14256:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1425b:	eb 2e                	jmp    1428b <dev_read+0x4a>
    }

    //获取设备，并通过其描述结构的操作接口进行真正的读操作
    device_t *dev = dev_table + dev_id;
   1425d:	8b 55 08             	mov    0x8(%ebp),%edx
   14260:	89 d0                	mov    %edx,%eax
   14262:	01 c0                	add    %eax,%eax
   14264:	01 d0                	add    %edx,%eax
   14266:	c1 e0 03             	shl    $0x3,%eax
   14269:	05 60 e7 04 00       	add    $0x4e760,%eax
   1426e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dev->desc->read(dev, addr, buf, size);
   14271:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14274:	8b 40 14             	mov    0x14(%eax),%eax
   14277:	8b 40 18             	mov    0x18(%eax),%eax
   1427a:	ff 75 14             	push   0x14(%ebp)
   1427d:	ff 75 10             	push   0x10(%ebp)
   14280:	ff 75 0c             	push   0xc(%ebp)
   14283:	ff 75 f4             	push   -0xc(%ebp)
   14286:	ff d0                	call   *%eax
   14288:	83 c4 10             	add    $0x10,%esp
}
   1428b:	c9                   	leave  
   1428c:	c3                   	ret    

0001428d <dev_write>:
 * @param addr 写入地址
 * @param buf 写入数据缓冲区
 * @param size 写入字节大小
 * @return int 成功写入大小
 */
int dev_write(int dev_id, int addr, char *buf, int size)  {
   1428d:	55                   	push   %ebp
   1428e:	89 e5                	mov    %esp,%ebp
   14290:	83 ec 18             	sub    $0x18,%esp
    //设备不存在，直接返回-1
    if (!is_dev_exist(dev_id)) {
   14293:	ff 75 08             	push   0x8(%ebp)
   14296:	e8 2b fe ff ff       	call   140c6 <is_dev_exist>
   1429b:	83 c4 04             	add    $0x4,%esp
   1429e:	85 c0                	test   %eax,%eax
   142a0:	75 07                	jne    142a9 <dev_write+0x1c>
        return -1;
   142a2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   142a7:	eb 2e                	jmp    142d7 <dev_write+0x4a>
    }

    //获取设备，并通过其描述结构的操作接口进行真正的写操作
    device_t *dev = dev_table + dev_id;
   142a9:	8b 55 08             	mov    0x8(%ebp),%edx
   142ac:	89 d0                	mov    %edx,%eax
   142ae:	01 c0                	add    %eax,%eax
   142b0:	01 d0                	add    %edx,%eax
   142b2:	c1 e0 03             	shl    $0x3,%eax
   142b5:	05 60 e7 04 00       	add    $0x4e760,%eax
   142ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dev->desc->write(dev, addr, buf, size);
   142bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   142c0:	8b 40 14             	mov    0x14(%eax),%eax
   142c3:	8b 40 1c             	mov    0x1c(%eax),%eax
   142c6:	ff 75 14             	push   0x14(%ebp)
   142c9:	ff 75 10             	push   0x10(%ebp)
   142cc:	ff 75 0c             	push   0xc(%ebp)
   142cf:	ff 75 f4             	push   -0xc(%ebp)
   142d2:	ff d0                	call   *%eax
   142d4:	83 c4 10             	add    $0x10,%esp
}
   142d7:	c9                   	leave  
   142d8:	c3                   	ret    

000142d9 <dev_control>:
 * @param cmd 控制指令
 * @param arg0 指令参数
 * @param arg1 指令参数
 * @return int 
 */
int dev_control(int dev_id, int cmd, int arg0, int arg1) {
   142d9:	55                   	push   %ebp
   142da:	89 e5                	mov    %esp,%ebp
   142dc:	83 ec 18             	sub    $0x18,%esp
    //设备不存在，直接返回-1
    if (!is_dev_exist(dev_id)) {
   142df:	ff 75 08             	push   0x8(%ebp)
   142e2:	e8 df fd ff ff       	call   140c6 <is_dev_exist>
   142e7:	83 c4 04             	add    $0x4,%esp
   142ea:	85 c0                	test   %eax,%eax
   142ec:	75 07                	jne    142f5 <dev_control+0x1c>
        return -1;
   142ee:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   142f3:	eb 2e                	jmp    14323 <dev_control+0x4a>
    }

    //获取设备，并通过其描述结构的操作接口进行真正的控制操作
    device_t *dev = dev_table + dev_id;
   142f5:	8b 55 08             	mov    0x8(%ebp),%edx
   142f8:	89 d0                	mov    %edx,%eax
   142fa:	01 c0                	add    %eax,%eax
   142fc:	01 d0                	add    %edx,%eax
   142fe:	c1 e0 03             	shl    $0x3,%eax
   14301:	05 60 e7 04 00       	add    $0x4e760,%eax
   14306:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dev->desc->control(dev, cmd, arg0, arg1);
   14309:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1430c:	8b 40 14             	mov    0x14(%eax),%eax
   1430f:	8b 40 20             	mov    0x20(%eax),%eax
   14312:	ff 75 14             	push   0x14(%ebp)
   14315:	ff 75 10             	push   0x10(%ebp)
   14318:	ff 75 0c             	push   0xc(%ebp)
   1431b:	ff 75 f4             	push   -0xc(%ebp)
   1431e:	ff d0                	call   *%eax
   14320:	83 c4 10             	add    $0x10,%esp
}
   14323:	c9                   	leave  
   14324:	c3                   	ret    

00014325 <dev_close>:
/**
 * @brief 关闭设备
 * 
 * @param dev_id 设备描述符
 */
void dev_close(int dev_id) {
   14325:	55                   	push   %ebp
   14326:	89 e5                	mov    %esp,%ebp
   14328:	83 ec 18             	sub    $0x18,%esp
    //设备不存在，直接返回-1
    if (!is_dev_exist(dev_id)) {
   1432b:	ff 75 08             	push   0x8(%ebp)
   1432e:	e8 93 fd ff ff       	call   140c6 <is_dev_exist>
   14333:	83 c4 04             	add    $0x4,%esp
   14336:	85 c0                	test   %eax,%eax
   14338:	74 6b                	je     143a5 <dev_close+0x80>
        return;
    }

    //获取设备，并通过其描述结构的操作接口进行真正的关闭操作
    device_t *dev = dev_table + dev_id;
   1433a:	8b 55 08             	mov    0x8(%ebp),%edx
   1433d:	89 d0                	mov    %edx,%eax
   1433f:	01 c0                	add    %eax,%eax
   14341:	01 d0                	add    %edx,%eax
   14343:	c1 e0 03             	shl    $0x3,%eax
   14346:	05 60 e7 04 00       	add    $0x4e760,%eax
   1434b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    //释放资源
    idt_state_t state = idt_enter_protection();
   1434e:	e8 5d f0 ff ff       	call   133b0 <idt_enter_protection>
   14353:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (--dev->open_count == 0) {   //该设备已不被操作系统引用，可以关闭
   14356:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14359:	8b 40 10             	mov    0x10(%eax),%eax
   1435c:	8d 50 ff             	lea    -0x1(%eax),%edx
   1435f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14362:	89 50 10             	mov    %edx,0x10(%eax)
   14365:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14368:	8b 40 10             	mov    0x10(%eax),%eax
   1436b:	85 c0                	test   %eax,%eax
   1436d:	75 26                	jne    14395 <dev_close+0x70>
        //关闭设备
        dev->desc->close(dev);
   1436f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14372:	8b 40 14             	mov    0x14(%eax),%eax
   14375:	8b 40 24             	mov    0x24(%eax),%eax
   14378:	83 ec 0c             	sub    $0xc,%esp
   1437b:	ff 75 f4             	push   -0xc(%ebp)
   1437e:	ff d0                	call   *%eax
   14380:	83 c4 10             	add    $0x10,%esp
        //释放设备空间资源
        kernel_memset(dev, 0, sizeof(device_t));
   14383:	83 ec 04             	sub    $0x4,%esp
   14386:	6a 18                	push   $0x18
   14388:	6a 00                	push   $0x0
   1438a:	ff 75 f4             	push   -0xc(%ebp)
   1438d:	e8 06 49 00 00       	call   18c98 <kernel_memset>
   14392:	83 c4 10             	add    $0x10,%esp
    }

    idt_leave_protection(state);
   14395:	83 ec 0c             	sub    $0xc,%esp
   14398:	ff 75 f0             	push   -0x10(%ebp)
   1439b:	e8 28 f0 ff ff       	call   133c8 <idt_leave_protection>
   143a0:	83 c4 10             	add    $0x10,%esp
   143a3:	eb 01                	jmp    143a6 <dev_close+0x81>
        return;
   143a5:	90                   	nop
}
   143a6:	c9                   	leave  
   143a7:	c3                   	ret    

000143a8 <inb>:
static inline uint8_t inb(uint16_t port) {
   143a8:	55                   	push   %ebp
   143a9:	89 e5                	mov    %esp,%ebp
   143ab:	83 ec 14             	sub    $0x14,%esp
   143ae:	8b 45 08             	mov    0x8(%ebp),%eax
   143b1:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   143b5:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   143b9:	89 c2                	mov    %eax,%edx
   143bb:	ec                   	in     (%dx),%al
   143bc:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   143bf:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   143c3:	c9                   	leave  
   143c4:	c3                   	ret    

000143c5 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   143c5:	55                   	push   %ebp
   143c6:	89 e5                	mov    %esp,%ebp
   143c8:	83 ec 08             	sub    $0x8,%esp
   143cb:	8b 45 08             	mov    0x8(%ebp),%eax
   143ce:	8b 55 0c             	mov    0xc(%ebp),%edx
   143d1:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   143d5:	89 d0                	mov    %edx,%eax
   143d7:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   143da:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   143de:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   143e2:	ee                   	out    %al,(%dx)
}
   143e3:	90                   	nop
   143e4:	c9                   	leave  
   143e5:	c3                   	ret    

000143e6 <outw>:
static inline void outw(uint16_t port, uint16_t data) {
   143e6:	55                   	push   %ebp
   143e7:	89 e5                	mov    %esp,%ebp
   143e9:	83 ec 08             	sub    $0x8,%esp
   143ec:	8b 55 08             	mov    0x8(%ebp),%edx
   143ef:	8b 45 0c             	mov    0xc(%ebp),%eax
   143f2:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   143f6:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
  __asm__ __volatile__(
   143fa:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   143fe:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
   14402:	66 ef                	out    %ax,(%dx)
}
   14404:	90                   	nop
   14405:	c9                   	leave  
   14406:	c3                   	ret    

00014407 <inw>:
static inline uint16_t inw(uint16_t port) {
   14407:	55                   	push   %ebp
   14408:	89 e5                	mov    %esp,%ebp
   1440a:	83 ec 14             	sub    $0x14,%esp
   1440d:	8b 45 08             	mov    0x8(%ebp),%eax
   14410:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__("in %[p], %[v]"  // in默认就是inw, 读取一个字即16位
   14414:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   14418:	89 c2                	mov    %eax,%edx
   1441a:	66 ed                	in     (%dx),%ax
   1441c:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  return rv;
   14420:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
}
   14424:	c9                   	leave  
   14425:	c3                   	ret    

00014426 <disk_send_cmd>:
 * @param start_sector
 * @param sector_count
 * @param cmd
 */
static void disk_send_cmd(disk_t *disk, uint32_t start_sector,
                          uint32_t sector_count, int cmd) {
   14426:	55                   	push   %ebp
   14427:	89 e5                	mov    %esp,%ebp
  // 1.LBA模式下指定磁盘的驱动器号，即master或者slave
  // 将drive寄存器的对应位置为即可
  outb(DISK_DRIVE(disk), DISK_DRIVE_BASE | disk->drive);
   14429:	8b 45 08             	mov    0x8(%ebp),%eax
   1442c:	8b 40 20             	mov    0x20(%eax),%eax
   1442f:	83 c8 e0             	or     $0xffffffe0,%eax
   14432:	0f b6 d0             	movzbl %al,%edx
   14435:	8b 45 08             	mov    0x8(%ebp),%eax
   14438:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   1443c:	83 c0 06             	add    $0x6,%eax
   1443f:	0f b7 c0             	movzwl %ax,%eax
   14442:	52                   	push   %edx
   14443:	50                   	push   %eax
   14444:	e8 7c ff ff ff       	call   143c5 <outb>
   14449:	83 c4 08             	add    $0x8,%esp

  // 2.指定扇区数的高八位和起始扇区即LBA值的高24位
  outb(DISK_SECTOR_COUNT(disk), (uint8_t)(sector_count >> 8));
   1444c:	8b 45 10             	mov    0x10(%ebp),%eax
   1444f:	c1 e8 08             	shr    $0x8,%eax
   14452:	0f b6 d0             	movzbl %al,%edx
   14455:	8b 45 08             	mov    0x8(%ebp),%eax
   14458:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   1445c:	83 c0 02             	add    $0x2,%eax
   1445f:	0f b7 c0             	movzwl %ax,%eax
   14462:	52                   	push   %edx
   14463:	50                   	push   %eax
   14464:	e8 5c ff ff ff       	call   143c5 <outb>
   14469:	83 c4 08             	add    $0x8,%esp
  // 6字节LBA值，先初始化第456个字节
  // 暂时只用到了4个字节的LBA值, 所以第5, 6个字节置0即可
  outb(DISK_LBA_LO(disk), (uint8_t)(start_sector >> 24));  // LBA4
   1446c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1446f:	c1 e8 18             	shr    $0x18,%eax
   14472:	0f b6 d0             	movzbl %al,%edx
   14475:	8b 45 08             	mov    0x8(%ebp),%eax
   14478:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   1447c:	83 c0 03             	add    $0x3,%eax
   1447f:	0f b7 c0             	movzwl %ax,%eax
   14482:	52                   	push   %edx
   14483:	50                   	push   %eax
   14484:	e8 3c ff ff ff       	call   143c5 <outb>
   14489:	83 c4 08             	add    $0x8,%esp
  outb(DISK_LBA_MID(disk), 0x00);                          // LBA5
   1448c:	8b 45 08             	mov    0x8(%ebp),%eax
   1448f:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14493:	83 c0 04             	add    $0x4,%eax
   14496:	0f b7 c0             	movzwl %ax,%eax
   14499:	6a 00                	push   $0x0
   1449b:	50                   	push   %eax
   1449c:	e8 24 ff ff ff       	call   143c5 <outb>
   144a1:	83 c4 08             	add    $0x8,%esp
  outb(DISK_LBA_HI(disk), 0x00);                           // LBA6
   144a4:	8b 45 08             	mov    0x8(%ebp),%eax
   144a7:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   144ab:	83 c0 05             	add    $0x5,%eax
   144ae:	0f b7 c0             	movzwl %ax,%eax
   144b1:	6a 00                	push   $0x0
   144b3:	50                   	push   %eax
   144b4:	e8 0c ff ff ff       	call   143c5 <outb>
   144b9:	83 c4 08             	add    $0x8,%esp

  // 3.指定读取扇区的低8位和起始扇区即LBA值的低24位
  outb(DISK_SECTOR_COUNT(disk), (uint8_t)(sector_count >> 0));
   144bc:	8b 45 10             	mov    0x10(%ebp),%eax
   144bf:	0f b6 d0             	movzbl %al,%edx
   144c2:	8b 45 08             	mov    0x8(%ebp),%eax
   144c5:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   144c9:	83 c0 02             	add    $0x2,%eax
   144cc:	0f b7 c0             	movzwl %ax,%eax
   144cf:	52                   	push   %edx
   144d0:	50                   	push   %eax
   144d1:	e8 ef fe ff ff       	call   143c5 <outb>
   144d6:	83 c4 08             	add    $0x8,%esp
  outb(DISK_LBA_LO(disk), (uint8_t)(start_sector >> 0));   // LBA1
   144d9:	8b 45 0c             	mov    0xc(%ebp),%eax
   144dc:	0f b6 d0             	movzbl %al,%edx
   144df:	8b 45 08             	mov    0x8(%ebp),%eax
   144e2:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   144e6:	83 c0 03             	add    $0x3,%eax
   144e9:	0f b7 c0             	movzwl %ax,%eax
   144ec:	52                   	push   %edx
   144ed:	50                   	push   %eax
   144ee:	e8 d2 fe ff ff       	call   143c5 <outb>
   144f3:	83 c4 08             	add    $0x8,%esp
  outb(DISK_LBA_MID(disk), (uint8_t)(start_sector >> 8));  // LBA2
   144f6:	8b 45 0c             	mov    0xc(%ebp),%eax
   144f9:	c1 e8 08             	shr    $0x8,%eax
   144fc:	0f b6 d0             	movzbl %al,%edx
   144ff:	8b 45 08             	mov    0x8(%ebp),%eax
   14502:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14506:	83 c0 04             	add    $0x4,%eax
   14509:	0f b7 c0             	movzwl %ax,%eax
   1450c:	52                   	push   %edx
   1450d:	50                   	push   %eax
   1450e:	e8 b2 fe ff ff       	call   143c5 <outb>
   14513:	83 c4 08             	add    $0x8,%esp
  outb(DISK_LBA_HI(disk), (uint8_t)(start_sector >> 16));  // LBA3
   14516:	8b 45 0c             	mov    0xc(%ebp),%eax
   14519:	c1 e8 10             	shr    $0x10,%eax
   1451c:	0f b6 d0             	movzbl %al,%edx
   1451f:	8b 45 08             	mov    0x8(%ebp),%eax
   14522:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14526:	83 c0 05             	add    $0x5,%eax
   14529:	0f b7 c0             	movzwl %ax,%eax
   1452c:	52                   	push   %edx
   1452d:	50                   	push   %eax
   1452e:	e8 92 fe ff ff       	call   143c5 <outb>
   14533:	83 c4 08             	add    $0x8,%esp

  // 4.对指定的区域执行cmd指令操作
  outb(DISK_CMD(disk), (uint8_t)cmd);
   14536:	8b 45 14             	mov    0x14(%ebp),%eax
   14539:	0f b6 d0             	movzbl %al,%edx
   1453c:	8b 45 08             	mov    0x8(%ebp),%eax
   1453f:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14543:	83 c0 07             	add    $0x7,%eax
   14546:	0f b7 c0             	movzwl %ax,%eax
   14549:	52                   	push   %edx
   1454a:	50                   	push   %eax
   1454b:	e8 75 fe ff ff       	call   143c5 <outb>
   14550:	83 c4 08             	add    $0x8,%esp
}
   14553:	90                   	nop
   14554:	c9                   	leave  
   14555:	c3                   	ret    

00014556 <disk_read_data>:
 *
 * @param disk
 * @param buf
 * @param size
 */
static void disk_read_data(disk_t *disk, void *buf, int size) {
   14556:	55                   	push   %ebp
   14557:	89 e5                	mov    %esp,%ebp
   14559:	53                   	push   %ebx
   1455a:	83 ec 10             	sub    $0x10,%esp
  uint16_t *c = (uint16_t *)buf;
   1455d:	8b 45 0c             	mov    0xc(%ebp),%eax
   14560:	89 45 f8             	mov    %eax,-0x8(%ebp)

  for (int i = 0; i < size / 2; ++i) {
   14563:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1456a:	eb 23                	jmp    1458f <disk_read_data+0x39>
    *(c++) = inw(DISK_DATA(disk));
   1456c:	8b 45 08             	mov    0x8(%ebp),%eax
   1456f:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14573:	0f b7 c0             	movzwl %ax,%eax
   14576:	8b 5d f8             	mov    -0x8(%ebp),%ebx
   14579:	8d 53 02             	lea    0x2(%ebx),%edx
   1457c:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1457f:	50                   	push   %eax
   14580:	e8 82 fe ff ff       	call   14407 <inw>
   14585:	83 c4 04             	add    $0x4,%esp
   14588:	66 89 03             	mov    %ax,(%ebx)
  for (int i = 0; i < size / 2; ++i) {
   1458b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1458f:	8b 45 10             	mov    0x10(%ebp),%eax
   14592:	89 c2                	mov    %eax,%edx
   14594:	c1 ea 1f             	shr    $0x1f,%edx
   14597:	01 d0                	add    %edx,%eax
   14599:	d1 f8                	sar    %eax
   1459b:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   1459e:	7c cc                	jl     1456c <disk_read_data+0x16>
  }
}
   145a0:	90                   	nop
   145a1:	90                   	nop
   145a2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   145a5:	c9                   	leave  
   145a6:	c3                   	ret    

000145a7 <disk_write_data>:
 *
 * @param disk
 * @param buf
 * @param size
 */
static void disk_write_data(disk_t *disk, void *buf, int size) {
   145a7:	55                   	push   %ebp
   145a8:	89 e5                	mov    %esp,%ebp
   145aa:	83 ec 10             	sub    $0x10,%esp
  uint16_t *c = (uint16_t *)buf;
   145ad:	8b 45 0c             	mov    0xc(%ebp),%eax
   145b0:	89 45 fc             	mov    %eax,-0x4(%ebp)

  for (int i = 0; i < size / 2; ++i) {
   145b3:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   145ba:	eb 27                	jmp    145e3 <disk_write_data+0x3c>
    outw(DISK_DATA(disk), *(c++));
   145bc:	8b 45 fc             	mov    -0x4(%ebp),%eax
   145bf:	8d 50 02             	lea    0x2(%eax),%edx
   145c2:	89 55 fc             	mov    %edx,-0x4(%ebp)
   145c5:	0f b7 00             	movzwl (%eax),%eax
   145c8:	0f b7 d0             	movzwl %ax,%edx
   145cb:	8b 45 08             	mov    0x8(%ebp),%eax
   145ce:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   145d2:	0f b7 c0             	movzwl %ax,%eax
   145d5:	52                   	push   %edx
   145d6:	50                   	push   %eax
   145d7:	e8 0a fe ff ff       	call   143e6 <outw>
   145dc:	83 c4 08             	add    $0x8,%esp
  for (int i = 0; i < size / 2; ++i) {
   145df:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   145e3:	8b 45 10             	mov    0x10(%ebp),%eax
   145e6:	89 c2                	mov    %eax,%edx
   145e8:	c1 ea 1f             	shr    $0x1f,%edx
   145eb:	01 d0                	add    %edx,%eax
   145ed:	d1 f8                	sar    %eax
   145ef:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   145f2:	7c c8                	jl     145bc <disk_write_data+0x15>
  }
}
   145f4:	90                   	nop
   145f5:	90                   	nop
   145f6:	c9                   	leave  
   145f7:	c3                   	ret    

000145f8 <disk_wait_data>:
 *        并检测磁盘是否发生错误
 * 
 * @param disk 
 * @return int 
 */
static int disk_wait_data(disk_t *disk) {
   145f8:	55                   	push   %ebp
   145f9:	89 e5                	mov    %esp,%ebp
   145fb:	83 ec 10             	sub    $0x10,%esp
  uint8_t status = 0;
   145fe:	c6 45 ff 00          	movb   $0x0,-0x1(%ebp)
  do {

    //轮询状态寄存器
    //若磁盘空闲则进行下一步操作
    //若磁盘忙碌 但有数据就绪又或者有错误发生，则进行下一步操作
    status = inb(DISK_STATUS(disk));
   14602:	8b 45 08             	mov    0x8(%ebp),%eax
   14605:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14609:	83 c0 07             	add    $0x7,%eax
   1460c:	0f b7 c0             	movzwl %ax,%eax
   1460f:	50                   	push   %eax
   14610:	e8 93 fd ff ff       	call   143a8 <inb>
   14615:	83 c4 04             	add    $0x4,%esp
   14618:	88 45 ff             	mov    %al,-0x1(%ebp)
    if ((status & ( DISK_STATUS_BUSY 
   1461b:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
   1461f:	25 89 00 00 00       	and    $0x89,%eax
   14624:	3d 80 00 00 00       	cmp    $0x80,%eax
   14629:	75 02                	jne    1462d <disk_wait_data+0x35>
    status = inb(DISK_STATUS(disk));
   1462b:	eb d5                	jmp    14602 <disk_wait_data+0xa>
                    | DISK_STATUS_DRQ 
                    | DISK_STATUS_ERR)) 
                    != DISK_STATUS_BUSY) {

        break;
   1462d:	90                   	nop
    }
  } while (1);


  return (status & DISK_STATUS_ERR) ? -1 : 0;
   1462e:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
   14632:	83 e0 01             	and    $0x1,%eax
   14635:	85 c0                	test   %eax,%eax
   14637:	74 07                	je     14640 <disk_wait_data+0x48>
   14639:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1463e:	eb 05                	jmp    14645 <disk_wait_data+0x4d>
   14640:	b8 00 00 00 00       	mov    $0x0,%eax
  
}
   14645:	c9                   	leave  
   14646:	c3                   	ret    

00014647 <detect_part_info>:
 * @brief 检测磁盘disk的分区表信息
 * 
 * @param disk 
 * @return int 
 */
static int detect_part_info(disk_t *disk) {
   14647:	55                   	push   %ebp
   14648:	89 e5                	mov    %esp,%ebp
   1464a:	81 ec 18 02 00 00    	sub    $0x218,%esp
  mbr_t mbr;
  //1.发送读取指令
  disk_send_cmd(disk, 0, 1, DISK_CMD_READ);
   14650:	6a 24                	push   $0x24
   14652:	6a 01                	push   $0x1
   14654:	6a 00                	push   $0x0
   14656:	ff 75 08             	push   0x8(%ebp)
   14659:	e8 c8 fd ff ff       	call   14426 <disk_send_cmd>
   1465e:	83 c4 10             	add    $0x10,%esp
  //2.等待磁盘数据就绪
  int err = disk_wait_data(disk);
   14661:	ff 75 08             	push   0x8(%ebp)
   14664:	e8 8f ff ff ff       	call   145f8 <disk_wait_data>
   14669:	83 c4 04             	add    $0x4,%esp
   1466c:	89 45 e8             	mov    %eax,-0x18(%ebp)
  if (err < 0) {
   1466f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   14673:	79 18                	jns    1468d <detect_part_info+0x46>
    log_printf("read mbr failed!\n");
   14675:	83 ec 0c             	sub    $0xc,%esp
   14678:	68 40 a1 01 00       	push   $0x1a140
   1467d:	e8 13 4e 00 00       	call   19495 <log_printf>
   14682:	83 c4 10             	add    $0x10,%esp
    return err;
   14685:	8b 45 e8             	mov    -0x18(%ebp),%eax
   14688:	e9 cd 00 00 00       	jmp    1475a <detect_part_info+0x113>
  }

  //3.读取0扇区的mbr,并将由bios检测并填充的分区表信息
  //读取到disk的partinfo结构中
  disk_read_data(disk, &mbr, sizeof(mbr));
   1468d:	83 ec 04             	sub    $0x4,%esp
   14690:	68 00 02 00 00       	push   $0x200
   14695:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
   1469b:	50                   	push   %eax
   1469c:	ff 75 08             	push   0x8(%ebp)
   1469f:	e8 b2 fe ff ff       	call   14556 <disk_read_data>
   146a4:	83 c4 10             	add    $0x10,%esp
  part_item_t *item = mbr.part_item;
   146a7:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
   146ad:	05 be 01 00 00       	add    $0x1be,%eax
   146b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
  partinfo_t *part_info = disk->partinfo + 1;
   146b5:	8b 45 08             	mov    0x8(%ebp),%eax
   146b8:	83 c0 30             	add    $0x30,%eax
   146bb:	83 c0 30             	add    $0x30,%eax
   146be:	89 45 f0             	mov    %eax,-0x10(%ebp)
  for (int i = 0; i < MBR_PRIMARY_PART_NR; ++i, ++item, ++part_info) {
   146c1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   146c8:	e9 83 00 00 00       	jmp    14750 <detect_part_info+0x109>
    part_info->type = item->system_id;
   146cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   146d0:	0f b6 40 04          	movzbl 0x4(%eax),%eax
   146d4:	0f b6 d0             	movzbl %al,%edx
   146d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   146da:	89 50 24             	mov    %edx,0x24(%eax)
    if (part_info->type == FS_INVALID) {  //无效分区，不使用
   146dd:	8b 45 f0             	mov    -0x10(%ebp),%eax
   146e0:	8b 40 24             	mov    0x24(%eax),%eax
   146e3:	85 c0                	test   %eax,%eax
   146e5:	75 20                	jne    14707 <detect_part_info+0xc0>
      part_info->total_sectors = 0;
   146e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   146ea:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
      part_info->start_sector = 0;
   146f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   146f4:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
      part_info->disk = (disk_t *)0;
   146fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   146fe:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
   14705:	eb 3d                	jmp    14744 <detect_part_info+0xfd>
    } else {  //分区有效，记录分区信息
      kernel_sprintf(part_info->name, "%s%d", disk->name, i);
   14707:	8b 55 08             	mov    0x8(%ebp),%edx
   1470a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1470d:	ff 75 ec             	push   -0x14(%ebp)
   14710:	52                   	push   %edx
   14711:	68 52 a1 01 00       	push   $0x1a152
   14716:	50                   	push   %eax
   14717:	e8 41 46 00 00       	call   18d5d <kernel_sprintf>
   1471c:	83 c4 10             	add    $0x10,%esp
      part_info->disk = disk;
   1471f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14722:	8b 55 08             	mov    0x8(%ebp),%edx
   14725:	89 50 20             	mov    %edx,0x20(%eax)
      part_info->start_sector = item->relative_sector;
   14728:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1472b:	8b 40 08             	mov    0x8(%eax),%eax
   1472e:	89 c2                	mov    %eax,%edx
   14730:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14733:	89 50 28             	mov    %edx,0x28(%eax)
      part_info->total_sectors = item->total_sectors;
   14736:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14739:	8b 40 0c             	mov    0xc(%eax),%eax
   1473c:	89 c2                	mov    %eax,%edx
   1473e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14741:	89 50 2c             	mov    %edx,0x2c(%eax)
  for (int i = 0; i < MBR_PRIMARY_PART_NR; ++i, ++item, ++part_info) {
   14744:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   14748:	83 45 f4 10          	addl   $0x10,-0xc(%ebp)
   1474c:	83 45 f0 30          	addl   $0x30,-0x10(%ebp)
   14750:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
   14754:	0f 8e 73 ff ff ff    	jle    146cd <detect_part_info+0x86>
    }
  }
}
   1475a:	c9                   	leave  
   1475b:	c3                   	ret    

0001475c <identify_disk>:
 * @brief 检测磁盘
 * 
 * @param disk 
 * @return int 
 */
static int identify_disk(disk_t *disk) {
   1475c:	55                   	push   %ebp
   1475d:	89 e5                	mov    %esp,%ebp
   1475f:	81 ec 18 02 00 00    	sub    $0x218,%esp
    //将扇区数量和起始扇区即LBA lo,mid,hi 寄存器都设为0，并发送检测指令
    disk_send_cmd(disk, 0, 0, DISK_CMD_IDENTIFY);
   14765:	68 ec 00 00 00       	push   $0xec
   1476a:	6a 00                	push   $0x0
   1476c:	6a 00                	push   $0x0
   1476e:	ff 75 08             	push   0x8(%ebp)
   14771:	e8 b0 fc ff ff       	call   14426 <disk_send_cmd>
   14776:	83 c4 10             	add    $0x10,%esp

    //读取状态寄存器判断是否出错，不出错则存在磁盘
    int err = inb(DISK_STATUS(disk));
   14779:	8b 45 08             	mov    0x8(%ebp),%eax
   1477c:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14780:	83 c0 07             	add    $0x7,%eax
   14783:	0f b7 c0             	movzwl %ax,%eax
   14786:	50                   	push   %eax
   14787:	e8 1c fc ff ff       	call   143a8 <inb>
   1478c:	83 c4 04             	add    $0x4,%esp
   1478f:	0f b6 c0             	movzbl %al,%eax
   14792:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (err == 0) {
   14795:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   14799:	75 1e                	jne    147b9 <identify_disk+0x5d>
        log_printf("%s doesn't exist", disk->name);
   1479b:	8b 45 08             	mov    0x8(%ebp),%eax
   1479e:	83 ec 08             	sub    $0x8,%esp
   147a1:	50                   	push   %eax
   147a2:	68 57 a1 01 00       	push   $0x1a157
   147a7:	e8 e9 4c 00 00       	call   19495 <log_printf>
   147ac:	83 c4 10             	add    $0x10,%esp
        return -1;
   147af:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   147b4:	e9 ca 00 00 00       	jmp    14883 <identify_disk+0x127>
    }

    //等待磁盘数据就绪
    err = disk_wait_data(disk);
   147b9:	83 ec 0c             	sub    $0xc,%esp
   147bc:	ff 75 08             	push   0x8(%ebp)
   147bf:	e8 34 fe ff ff       	call   145f8 <disk_wait_data>
   147c4:	83 c4 10             	add    $0x10,%esp
   147c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (err < 0) {
   147ca:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   147ce:	79 1e                	jns    147ee <identify_disk+0x92>
        log_printf("disk[%s]: read failed", disk->name);
   147d0:	8b 45 08             	mov    0x8(%ebp),%eax
   147d3:	83 ec 08             	sub    $0x8,%esp
   147d6:	50                   	push   %eax
   147d7:	68 68 a1 01 00       	push   $0x1a168
   147dc:	e8 b4 4c 00 00       	call   19495 <log_printf>
   147e1:	83 c4 10             	add    $0x10,%esp
        return -1;
   147e4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   147e9:	e9 95 00 00 00       	jmp    14883 <identify_disk+0x127>
    }

    //磁盘已准备好256个2字节的数据，其中包含了该磁盘的信息
    //用来响应 DISK_CMD_IDENTIFY 指令
    uint16_t buf[256];
    disk_read_data(disk, buf, sizeof(buf));
   147ee:	83 ec 04             	sub    $0x4,%esp
   147f1:	68 00 02 00 00       	push   $0x200
   147f6:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
   147fc:	50                   	push   %eax
   147fd:	ff 75 08             	push   0x8(%ebp)
   14800:	e8 51 fd ff ff       	call   14556 <disk_read_data>
   14805:	83 c4 10             	add    $0x10,%esp

    //第100 到 103个数据，一共64位，保存了该磁盘的扇区总数量
    disk->sector_count = *(uint32_t *)(buf + 100);
   14808:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
   1480e:	05 c8 00 00 00       	add    $0xc8,%eax
   14813:	8b 00                	mov    (%eax),%eax
   14815:	89 c2                	mov    %eax,%edx
   14817:	8b 45 08             	mov    0x8(%ebp),%eax
   1481a:	89 50 2c             	mov    %edx,0x2c(%eax)
    disk->sector_size = SECTOR_SIZE;
   1481d:	8b 45 08             	mov    0x8(%ebp),%eax
   14820:	c7 40 28 00 02 00 00 	movl   $0x200,0x28(%eax)

    //初始化磁盘分区信息
    //用partinfo将整个磁盘视为一个大分区
    partinfo_t *part_info = disk->partinfo + 0;
   14827:	8b 45 08             	mov    0x8(%ebp),%eax
   1482a:	83 c0 30             	add    $0x30,%eax
   1482d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    part_info->disk = disk;
   14830:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14833:	8b 55 08             	mov    0x8(%ebp),%edx
   14836:	89 50 20             	mov    %edx,0x20(%eax)
    kernel_sprintf(part_info->name, "%s%d", disk->name, 0);
   14839:	8b 55 08             	mov    0x8(%ebp),%edx
   1483c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1483f:	6a 00                	push   $0x0
   14841:	52                   	push   %edx
   14842:	68 52 a1 01 00       	push   $0x1a152
   14847:	50                   	push   %eax
   14848:	e8 10 45 00 00       	call   18d5d <kernel_sprintf>
   1484d:	83 c4 10             	add    $0x10,%esp
    part_info->start_sector = 0;
   14850:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14853:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    part_info->total_sectors = disk->sector_count;
   1485a:	8b 45 08             	mov    0x8(%ebp),%eax
   1485d:	8b 50 2c             	mov    0x2c(%eax),%edx
   14860:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14863:	89 50 2c             	mov    %edx,0x2c(%eax)
    part_info->type = FS_INVALID;
   14866:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14869:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)

    //读取并检测磁盘的分区表信息
    detect_part_info(disk);
   14870:	83 ec 0c             	sub    $0xc,%esp
   14873:	ff 75 08             	push   0x8(%ebp)
   14876:	e8 cc fd ff ff       	call   14647 <detect_part_info>
   1487b:	83 c4 10             	add    $0x10,%esp

    return 0;
   1487e:	b8 00 00 00 00       	mov    $0x0,%eax
}
   14883:	c9                   	leave  
   14884:	c3                   	ret    

00014885 <print_disk_info>:
/**
 * @brief 打印磁盘相关信息
 * 
 * @param disk 
 */
static void print_disk_info(disk_t *disk) {
   14885:	55                   	push   %ebp
   14886:	89 e5                	mov    %esp,%ebp
   14888:	53                   	push   %ebx
   14889:	83 ec 14             	sub    $0x14,%esp
    log_printf("%s\n", disk->name);
   1488c:	8b 45 08             	mov    0x8(%ebp),%eax
   1488f:	83 ec 08             	sub    $0x8,%esp
   14892:	50                   	push   %eax
   14893:	68 7e a1 01 00       	push   $0x1a17e
   14898:	e8 f8 4b 00 00       	call   19495 <log_printf>
   1489d:	83 c4 10             	add    $0x10,%esp
    log_printf("\tport base: %x\n", disk->port_base);
   148a0:	8b 45 08             	mov    0x8(%ebp),%eax
   148a3:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   148a7:	0f b7 c0             	movzwl %ax,%eax
   148aa:	83 ec 08             	sub    $0x8,%esp
   148ad:	50                   	push   %eax
   148ae:	68 82 a1 01 00       	push   $0x1a182
   148b3:	e8 dd 4b 00 00       	call   19495 <log_printf>
   148b8:	83 c4 10             	add    $0x10,%esp
    log_printf("\ttotal size: %d m\n", disk->sector_count * disk->sector_size / (1024*1024));
   148bb:	8b 45 08             	mov    0x8(%ebp),%eax
   148be:	8b 50 2c             	mov    0x2c(%eax),%edx
   148c1:	8b 45 08             	mov    0x8(%ebp),%eax
   148c4:	8b 40 28             	mov    0x28(%eax),%eax
   148c7:	0f af c2             	imul   %edx,%eax
   148ca:	8d 90 ff ff 0f 00    	lea    0xfffff(%eax),%edx
   148d0:	85 c0                	test   %eax,%eax
   148d2:	0f 48 c2             	cmovs  %edx,%eax
   148d5:	c1 f8 14             	sar    $0x14,%eax
   148d8:	83 ec 08             	sub    $0x8,%esp
   148db:	50                   	push   %eax
   148dc:	68 92 a1 01 00       	push   $0x1a192
   148e1:	e8 af 4b 00 00       	call   19495 <log_printf>
   148e6:	83 c4 10             	add    $0x10,%esp

    for (int i = 0; i < DISK_PRIMARY_PART_CNT; ++i) {
   148e9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   148f0:	eb 4e                	jmp    14940 <print_disk_info+0xbb>
      partinfo_t *part_info = disk->partinfo + i;
   148f2:	8b 45 08             	mov    0x8(%ebp),%eax
   148f5:	8d 48 30             	lea    0x30(%eax),%ecx
   148f8:	8b 55 f4             	mov    -0xc(%ebp),%edx
   148fb:	89 d0                	mov    %edx,%eax
   148fd:	01 c0                	add    %eax,%eax
   148ff:	01 d0                	add    %edx,%eax
   14901:	c1 e0 04             	shl    $0x4,%eax
   14904:	01 c8                	add    %ecx,%eax
   14906:	89 45 f0             	mov    %eax,-0x10(%ebp)
      if (part_info->type != FS_INVALID) {
   14909:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1490c:	8b 40 24             	mov    0x24(%eax),%eax
   1490f:	85 c0                	test   %eax,%eax
   14911:	74 29                	je     1493c <print_disk_info+0xb7>
        log_printf("\t%s: type: %x, start sector: %d, sector count: %d\n",
   14913:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14916:	8b 58 2c             	mov    0x2c(%eax),%ebx
   14919:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1491c:	8b 48 28             	mov    0x28(%eax),%ecx
            part_info->name, part_info->type, part_info->start_sector, 
   1491f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14922:	8b 50 24             	mov    0x24(%eax),%edx
   14925:	8b 45 f0             	mov    -0x10(%ebp),%eax
        log_printf("\t%s: type: %x, start sector: %d, sector count: %d\n",
   14928:	83 ec 0c             	sub    $0xc,%esp
   1492b:	53                   	push   %ebx
   1492c:	51                   	push   %ecx
   1492d:	52                   	push   %edx
   1492e:	50                   	push   %eax
   1492f:	68 a8 a1 01 00       	push   $0x1a1a8
   14934:	e8 5c 4b 00 00       	call   19495 <log_printf>
   14939:	83 c4 20             	add    $0x20,%esp
    for (int i = 0; i < DISK_PRIMARY_PART_CNT; ++i) {
   1493c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   14940:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   14944:	7e ac                	jle    148f2 <print_disk_info+0x6d>
            part_info->total_sectors);
      }
    }
}
   14946:	90                   	nop
   14947:	90                   	nop
   14948:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1494b:	c9                   	leave  
   1494c:	c3                   	ret    

0001494d <disk_init>:

/**
 * @brief 初始化系统磁盘信息
 *
 */
void disk_init(void) {
   1494d:	55                   	push   %ebp
   1494e:	89 e5                	mov    %esp,%ebp
   14950:	83 ec 18             	sub    $0x18,%esp
  log_printf("Check disk...\n");
   14953:	83 ec 0c             	sub    $0xc,%esp
   14956:	68 db a1 01 00       	push   $0x1a1db
   1495b:	e8 35 4b 00 00       	call   19495 <log_printf>
   14960:	83 c4 10             	add    $0x10,%esp

  kernel_memset(disk_table, 0, sizeof(disk_table));
   14963:	83 ec 04             	sub    $0x4,%esp
   14966:	68 50 02 00 00       	push   $0x250
   1496b:	6a 00                	push   $0x0
   1496d:	68 60 f3 04 00       	push   $0x4f360
   14972:	e8 21 43 00 00       	call   18c98 <kernel_memset>
   14977:	83 c4 10             	add    $0x10,%esp

  //初始化磁盘锁与操作信号量
  mutex_init(&mutex);
   1497a:	83 ec 0c             	sub    $0xc,%esp
   1497d:	68 b0 f5 04 00       	push   $0x4f5b0
   14982:	e8 7a 36 00 00       	call   18001 <mutex_init>
   14987:	83 c4 10             	add    $0x10,%esp
  sem_init(&op_sem, 0);
   1498a:	83 ec 08             	sub    $0x8,%esp
   1498d:	6a 00                	push   $0x0
   1498f:	68 c4 f5 04 00       	push   $0x4f5c4
   14994:	e8 a7 38 00 00       	call   18240 <sem_init>
   14999:	83 c4 10             	add    $0x10,%esp

  // 遍历并初始化化primary信道上的磁盘信息
  for (int i = 0; i < DISK_PER_CHANNEL; ++i) {
   1499c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   149a3:	e9 90 00 00 00       	jmp    14a38 <disk_init+0xeb>
    disk_t *disk = disk_table + i;
   149a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   149ab:	69 c0 28 01 00 00    	imul   $0x128,%eax,%eax
   149b1:	05 60 f3 04 00       	add    $0x4f360,%eax
   149b6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    kernel_sprintf(disk->name, "sd%c", i + 'a');
   149b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   149bc:	8d 50 61             	lea    0x61(%eax),%edx
   149bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
   149c2:	83 ec 04             	sub    $0x4,%esp
   149c5:	52                   	push   %edx
   149c6:	68 ea a1 01 00       	push   $0x1a1ea
   149cb:	50                   	push   %eax
   149cc:	e8 8c 43 00 00       	call   18d5d <kernel_sprintf>
   149d1:	83 c4 10             	add    $0x10,%esp
    disk->drive = i == 0 ? DISK_MASTER : DISK_SLAVE;
   149d4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   149d8:	75 07                	jne    149e1 <disk_init+0x94>
   149da:	ba 00 00 00 00       	mov    $0x0,%edx
   149df:	eb 05                	jmp    149e6 <disk_init+0x99>
   149e1:	ba 10 00 00 00       	mov    $0x10,%edx
   149e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   149e9:	89 50 20             	mov    %edx,0x20(%eax)
    disk->port_base = IOBASE_PRIMARY;
   149ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
   149ef:	66 c7 40 24 f0 01    	movw   $0x1f0,0x24(%eax)
    disk->mutex = &mutex;
   149f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   149f8:	c7 80 20 01 00 00 b0 	movl   $0x4f5b0,0x120(%eax)
   149ff:	f5 04 00 
    disk->op_sem = &op_sem;
   14a02:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14a05:	c7 80 24 01 00 00 c4 	movl   $0x4f5c4,0x124(%eax)
   14a0c:	f5 04 00 

    int err = identify_disk(disk);
   14a0f:	83 ec 0c             	sub    $0xc,%esp
   14a12:	ff 75 f0             	push   -0x10(%ebp)
   14a15:	e8 42 fd ff ff       	call   1475c <identify_disk>
   14a1a:	83 c4 10             	add    $0x10,%esp
   14a1d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (err == 0) {
   14a20:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   14a24:	75 0e                	jne    14a34 <disk_init+0xe7>
      print_disk_info(disk);
   14a26:	83 ec 0c             	sub    $0xc,%esp
   14a29:	ff 75 f0             	push   -0x10(%ebp)
   14a2c:	e8 54 fe ff ff       	call   14885 <print_disk_info>
   14a31:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < DISK_PER_CHANNEL; ++i) {
   14a34:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   14a38:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   14a3c:	0f 8e 66 ff ff ff    	jle    149a8 <disk_init+0x5b>
    }
  }
}
   14a42:	90                   	nop
   14a43:	90                   	nop
   14a44:	c9                   	leave  
   14a45:	c3                   	ret    

00014a46 <disk_open>:
 * @brief 打开磁盘设备
 * 
 * @param dev 
 * @return int 
 */
int disk_open (device_t *dev) {
   14a46:	55                   	push   %ebp
   14a47:	89 e5                	mov    %esp,%ebp
   14a49:	83 ec 18             	sub    $0x18,%esp
  //对磁盘的编号为 a , b
  //对扇区的编号为0, 1, 2, 3, 4, 0分区包含整个磁盘
  //设备索引编号0xa0表示 a磁盘上的0分区

  //获取磁盘在系统磁盘表中的索引
  int disk_index = (dev->dev_index >> 4) - 0xa;   
   14a4c:	8b 45 08             	mov    0x8(%ebp),%eax
   14a4f:	8b 40 08             	mov    0x8(%eax),%eax
   14a52:	c1 f8 04             	sar    $0x4,%eax
   14a55:	83 e8 0a             	sub    $0xa,%eax
   14a58:	89 45 f4             	mov    %eax,-0xc(%ebp)
  //获取分区的索引
  int part_index = dev->dev_index & 0xf;
   14a5b:	8b 45 08             	mov    0x8(%ebp),%eax
   14a5e:	8b 40 08             	mov    0x8(%eax),%eax
   14a61:	83 e0 0f             	and    $0xf,%eax
   14a64:	89 45 f0             	mov    %eax,-0x10(%ebp)

  if (disk_index >= DISK_CNT || part_index >= DISK_PRIMARY_PART_CNT) {
   14a67:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   14a6b:	7f 06                	jg     14a73 <disk_open+0x2d>
   14a6d:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   14a71:	7e 21                	jle    14a94 <disk_open+0x4e>
      log_printf("device index error: %d\n", dev->dev_index);
   14a73:	8b 45 08             	mov    0x8(%ebp),%eax
   14a76:	8b 40 08             	mov    0x8(%eax),%eax
   14a79:	83 ec 08             	sub    $0x8,%esp
   14a7c:	50                   	push   %eax
   14a7d:	68 ef a1 01 00       	push   $0x1a1ef
   14a82:	e8 0e 4a 00 00       	call   19495 <log_printf>
   14a87:	83 c4 10             	add    $0x10,%esp
      return -1;
   14a8a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14a8f:	e9 9e 00 00 00       	jmp    14b32 <disk_open+0xec>
  }

  //获取磁盘对象
  disk_t *disk = disk_table + disk_index;
   14a94:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14a97:	69 c0 28 01 00 00    	imul   $0x128,%eax,%eax
   14a9d:	05 60 f3 04 00       	add    $0x4f360,%eax
   14aa2:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if (disk->sector_count == 0) {
   14aa5:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14aa8:	8b 40 2c             	mov    0x2c(%eax),%eax
   14aab:	85 c0                	test   %eax,%eax
   14aad:	75 1e                	jne    14acd <disk_open+0x87>
    log_printf("disk not exist, device: sd%d", dev->dev_index);
   14aaf:	8b 45 08             	mov    0x8(%ebp),%eax
   14ab2:	8b 40 08             	mov    0x8(%eax),%eax
   14ab5:	83 ec 08             	sub    $0x8,%esp
   14ab8:	50                   	push   %eax
   14ab9:	68 07 a2 01 00       	push   $0x1a207
   14abe:	e8 d2 49 00 00       	call   19495 <log_printf>
   14ac3:	83 c4 10             	add    $0x10,%esp
    return -1;
   14ac6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14acb:	eb 65                	jmp    14b32 <disk_open+0xec>
  }

  //获取分区对象
  partinfo_t *part_info = disk->partinfo + part_index;
   14acd:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14ad0:	8d 48 30             	lea    0x30(%eax),%ecx
   14ad3:	8b 55 f0             	mov    -0x10(%ebp),%edx
   14ad6:	89 d0                	mov    %edx,%eax
   14ad8:	01 c0                	add    %eax,%eax
   14ada:	01 d0                	add    %edx,%eax
   14adc:	c1 e0 04             	shl    $0x4,%eax
   14adf:	01 c8                	add    %ecx,%eax
   14ae1:	89 45 e8             	mov    %eax,-0x18(%ebp)
  if (part_info->total_sectors == 0) {
   14ae4:	8b 45 e8             	mov    -0x18(%ebp),%eax
   14ae7:	8b 40 2c             	mov    0x2c(%eax),%eax
   14aea:	85 c0                	test   %eax,%eax
   14aec:	75 17                	jne    14b05 <disk_open+0xbf>
    log_printf("part not exist\n");
   14aee:	83 ec 0c             	sub    $0xc,%esp
   14af1:	68 24 a2 01 00       	push   $0x1a224
   14af6:	e8 9a 49 00 00       	call   19495 <log_printf>
   14afb:	83 c4 10             	add    $0x10,%esp
    return -1;
   14afe:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14b03:	eb 2d                	jmp    14b32 <disk_open+0xec>
  }

  //记录分区信息
  dev->data = (void *)part_info;
   14b05:	8b 45 08             	mov    0x8(%ebp),%eax
   14b08:	8b 55 e8             	mov    -0x18(%ebp),%edx
   14b0b:	89 50 0c             	mov    %edx,0xc(%eax)

  //注册中断处理程序,并开启中断
  idt_install(IRQ14_HARDDISK_PRIMARY, (idt_handler_t)exception_handler_primary_disk);
   14b0e:	83 ec 08             	sub    $0x8,%esp
   14b11:	68 b5 02 01 00       	push   $0x102b5
   14b16:	6a 2e                	push   $0x2e
   14b18:	e8 8d e4 ff ff       	call   12faa <idt_install>
   14b1d:	83 c4 10             	add    $0x10,%esp
  idt_enable(IRQ14_HARDDISK_PRIMARY);
   14b20:	83 ec 0c             	sub    $0xc,%esp
   14b23:	6a 2e                	push   $0x2e
   14b25:	e8 0b e7 ff ff       	call   13235 <idt_enable>
   14b2a:	83 c4 10             	add    $0x10,%esp

  return 0;
   14b2d:	b8 00 00 00 00       	mov    $0x0,%eax
}
   14b32:	c9                   	leave  
   14b33:	c3                   	ret    

00014b34 <disk_read>:
 * @param addr 读取的起始扇区相对于dev指定分区的偏移量
 * @param buf 读取缓冲区
 * @param size 读取扇区数
 * @return * int 
 */
int disk_read(device_t *dev, int addr, char *buf, int size) {
   14b34:	55                   	push   %ebp
   14b35:	89 e5                	mov    %esp,%ebp
   14b37:	83 ec 18             	sub    $0x18,%esp

  //获取要读取的分区信息
  partinfo_t *part_info = (partinfo_t*)dev->data;
   14b3a:	8b 45 08             	mov    0x8(%ebp),%eax
   14b3d:	8b 40 0c             	mov    0xc(%eax),%eax
   14b40:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (!part_info) {
   14b43:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14b47:	75 21                	jne    14b6a <disk_read+0x36>
    log_printf("Get part info failed. devce: %d\n", dev->dev_index);
   14b49:	8b 45 08             	mov    0x8(%ebp),%eax
   14b4c:	8b 40 08             	mov    0x8(%eax),%eax
   14b4f:	83 ec 08             	sub    $0x8,%esp
   14b52:	50                   	push   %eax
   14b53:	68 34 a2 01 00       	push   $0x1a234
   14b58:	e8 38 49 00 00       	call   19495 <log_printf>
   14b5d:	83 c4 10             	add    $0x10,%esp
    return -1;
   14b60:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14b65:	e9 0c 01 00 00       	jmp    14c76 <disk_read+0x142>
  }

  //获取磁盘对象
  disk_t *disk = part_info->disk;
   14b6a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14b6d:	8b 40 20             	mov    0x20(%eax),%eax
   14b70:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if (disk == (disk_t *)0) {
   14b73:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   14b77:	75 21                	jne    14b9a <disk_read+0x66>
    log_printf("No disk, device: %d\n", dev->dev_index);
   14b79:	8b 45 08             	mov    0x8(%ebp),%eax
   14b7c:	8b 40 08             	mov    0x8(%eax),%eax
   14b7f:	83 ec 08             	sub    $0x8,%esp
   14b82:	50                   	push   %eax
   14b83:	68 55 a2 01 00       	push   $0x1a255
   14b88:	e8 08 49 00 00       	call   19495 <log_printf>
   14b8d:	83 c4 10             	add    $0x10,%esp
    return -1;
   14b90:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14b95:	e9 dc 00 00 00       	jmp    14c76 <disk_read+0x142>
  }

  //TODO:加锁
  mutex_lock(disk->mutex);  //确保磁盘io操作的原子性
   14b9a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14b9d:	8b 80 20 01 00 00    	mov    0x120(%eax),%eax
   14ba3:	83 ec 0c             	sub    $0xc,%esp
   14ba6:	50                   	push   %eax
   14ba7:	e8 a2 34 00 00       	call   1804e <mutex_lock>
   14bac:	83 c4 10             	add    $0x10,%esp
  if (task_current()) {
   14baf:	e8 fd cd ff ff       	call   119b1 <task_current>
   14bb4:	85 c0                	test   %eax,%eax
   14bb6:	74 07                	je     14bbf <disk_read+0x8b>
    task_on_op = 1; //将标志位置1，表示用户在执行磁盘操作
   14bb8:	c6 05 d4 f5 04 00 01 	movb   $0x1,0x4f5d4
  }

  //发送读取指令
  disk_send_cmd(disk, part_info->start_sector + addr, size, DISK_CMD_READ);
   14bbf:	8b 45 14             	mov    0x14(%ebp),%eax
   14bc2:	8b 55 f0             	mov    -0x10(%ebp),%edx
   14bc5:	8b 4a 28             	mov    0x28(%edx),%ecx
   14bc8:	8b 55 0c             	mov    0xc(%ebp),%edx
   14bcb:	01 ca                	add    %ecx,%edx
   14bcd:	6a 24                	push   $0x24
   14bcf:	50                   	push   %eax
   14bd0:	52                   	push   %edx
   14bd1:	ff 75 ec             	push   -0x14(%ebp)
   14bd4:	e8 4d f8 ff ff       	call   14426 <disk_send_cmd>
   14bd9:	83 c4 10             	add    $0x10,%esp

  //
  int cnt;
  for (cnt = 0; cnt < size; ++cnt, buf += disk->sector_size) {
   14bdc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   14be3:	eb 71                	jmp    14c56 <disk_read+0x122>
    //等待磁盘的中断，代表准备就绪
    sem_wait(disk->op_sem);
   14be5:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14be8:	8b 80 24 01 00 00    	mov    0x124(%eax),%eax
   14bee:	83 ec 0c             	sub    $0xc,%esp
   14bf1:	50                   	push   %eax
   14bf2:	e8 8b 36 00 00       	call   18282 <sem_wait>
   14bf7:	83 c4 10             	add    $0x10,%esp

    //因为信号量已经让进程等待了，所以此处只是检测是否发生错误
    int err = disk_wait_data(disk);
   14bfa:	83 ec 0c             	sub    $0xc,%esp
   14bfd:	ff 75 ec             	push   -0x14(%ebp)
   14c00:	e8 f3 f9 ff ff       	call   145f8 <disk_wait_data>
   14c05:	83 c4 10             	add    $0x10,%esp
   14c08:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (err < 0) {
   14c0b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   14c0f:	79 20                	jns    14c31 <disk_read+0xfd>
      log_printf("disk[%s] read error: start sector %d, count: %d",
          disk->name, addr, size);
   14c11:	8b 45 ec             	mov    -0x14(%ebp),%eax
      log_printf("disk[%s] read error: start sector %d, count: %d",
   14c14:	ff 75 14             	push   0x14(%ebp)
   14c17:	ff 75 0c             	push   0xc(%ebp)
   14c1a:	50                   	push   %eax
   14c1b:	68 6c a2 01 00       	push   $0x1a26c
   14c20:	e8 70 48 00 00       	call   19495 <log_printf>
   14c25:	83 c4 10             	add    $0x10,%esp
          cnt = -1;
   14c28:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
          break;
   14c2f:	eb 2d                	jmp    14c5e <disk_read+0x12a>
    }

    //磁盘每次读取都是按一个扇区的大小进行读取
    disk_read_data(disk, buf, disk->sector_size);
   14c31:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14c34:	8b 40 28             	mov    0x28(%eax),%eax
   14c37:	83 ec 04             	sub    $0x4,%esp
   14c3a:	50                   	push   %eax
   14c3b:	ff 75 10             	push   0x10(%ebp)
   14c3e:	ff 75 ec             	push   -0x14(%ebp)
   14c41:	e8 10 f9 ff ff       	call   14556 <disk_read_data>
   14c46:	83 c4 10             	add    $0x10,%esp
  for (cnt = 0; cnt < size; ++cnt, buf += disk->sector_size) {
   14c49:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   14c4d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14c50:	8b 40 28             	mov    0x28(%eax),%eax
   14c53:	01 45 10             	add    %eax,0x10(%ebp)
   14c56:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14c59:	3b 45 14             	cmp    0x14(%ebp),%eax
   14c5c:	7c 87                	jl     14be5 <disk_read+0xb1>
  }

  //TODO:解锁
  mutex_unlock(disk->mutex);
   14c5e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14c61:	8b 80 20 01 00 00    	mov    0x120(%eax),%eax
   14c67:	83 ec 0c             	sub    $0xc,%esp
   14c6a:	50                   	push   %eax
   14c6b:	e8 84 34 00 00       	call   180f4 <mutex_unlock>
   14c70:	83 c4 10             	add    $0x10,%esp

  return cnt;
   14c73:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   14c76:	c9                   	leave  
   14c77:	c3                   	ret    

00014c78 <disk_write>:
 * @param addr 
 * @param buf 
 * @param size 
 * @return int 
 */
int disk_write(device_t *dev, int addr, char *buf, int size) {
   14c78:	55                   	push   %ebp
   14c79:	89 e5                	mov    %esp,%ebp
   14c7b:	83 ec 18             	sub    $0x18,%esp

   //获取要读取的分区信息
  partinfo_t *part_info = (partinfo_t*)dev->data;
   14c7e:	8b 45 08             	mov    0x8(%ebp),%eax
   14c81:	8b 40 0c             	mov    0xc(%eax),%eax
   14c84:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (!part_info) {
   14c87:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14c8b:	75 21                	jne    14cae <disk_write+0x36>
    log_printf("Get part info failed. devce: %d\n", dev->dev_index);
   14c8d:	8b 45 08             	mov    0x8(%ebp),%eax
   14c90:	8b 40 08             	mov    0x8(%eax),%eax
   14c93:	83 ec 08             	sub    $0x8,%esp
   14c96:	50                   	push   %eax
   14c97:	68 34 a2 01 00       	push   $0x1a234
   14c9c:	e8 f4 47 00 00       	call   19495 <log_printf>
   14ca1:	83 c4 10             	add    $0x10,%esp
    return -1;
   14ca4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14ca9:	e9 0c 01 00 00       	jmp    14dba <disk_write+0x142>
  }

  //获取磁盘对象
  disk_t *disk = part_info->disk;
   14cae:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14cb1:	8b 40 20             	mov    0x20(%eax),%eax
   14cb4:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if (disk == (disk_t *)0) {
   14cb7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   14cbb:	75 21                	jne    14cde <disk_write+0x66>
    log_printf("No disk, device: %d\n", dev->dev_index);
   14cbd:	8b 45 08             	mov    0x8(%ebp),%eax
   14cc0:	8b 40 08             	mov    0x8(%eax),%eax
   14cc3:	83 ec 08             	sub    $0x8,%esp
   14cc6:	50                   	push   %eax
   14cc7:	68 55 a2 01 00       	push   $0x1a255
   14ccc:	e8 c4 47 00 00       	call   19495 <log_printf>
   14cd1:	83 c4 10             	add    $0x10,%esp
    return -1;
   14cd4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14cd9:	e9 dc 00 00 00       	jmp    14dba <disk_write+0x142>
  }

  //TODO:加锁
  mutex_lock(disk->mutex);  //确保磁盘io操作的原子性
   14cde:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14ce1:	8b 80 20 01 00 00    	mov    0x120(%eax),%eax
   14ce7:	83 ec 0c             	sub    $0xc,%esp
   14cea:	50                   	push   %eax
   14ceb:	e8 5e 33 00 00       	call   1804e <mutex_lock>
   14cf0:	83 c4 10             	add    $0x10,%esp
  if (task_current()) {
   14cf3:	e8 b9 cc ff ff       	call   119b1 <task_current>
   14cf8:	85 c0                	test   %eax,%eax
   14cfa:	74 07                	je     14d03 <disk_write+0x8b>
    task_on_op = 1; //将标志位置1，表示用户进程在执行磁盘操作
   14cfc:	c6 05 d4 f5 04 00 01 	movb   $0x1,0x4f5d4
  }

  //发送写入指令
  disk_send_cmd(disk, part_info->start_sector + addr, size, DISK_CMD_WRITE);
   14d03:	8b 45 14             	mov    0x14(%ebp),%eax
   14d06:	8b 55 f0             	mov    -0x10(%ebp),%edx
   14d09:	8b 4a 28             	mov    0x28(%edx),%ecx
   14d0c:	8b 55 0c             	mov    0xc(%ebp),%edx
   14d0f:	01 ca                	add    %ecx,%edx
   14d11:	6a 34                	push   $0x34
   14d13:	50                   	push   %eax
   14d14:	52                   	push   %edx
   14d15:	ff 75 ec             	push   -0x14(%ebp)
   14d18:	e8 09 f7 ff ff       	call   14426 <disk_send_cmd>
   14d1d:	83 c4 10             	add    $0x10,%esp

  //
  int cnt;
  for (cnt = 0; cnt < size; ++cnt, buf += disk->sector_size) {
   14d20:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   14d27:	eb 71                	jmp    14d9a <disk_write+0x122>
    //磁盘每次写入都是按一个扇区的大小进行写入
    disk_write_data(disk, buf, disk->sector_size);
   14d29:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14d2c:	8b 40 28             	mov    0x28(%eax),%eax
   14d2f:	83 ec 04             	sub    $0x4,%esp
   14d32:	50                   	push   %eax
   14d33:	ff 75 10             	push   0x10(%ebp)
   14d36:	ff 75 ec             	push   -0x14(%ebp)
   14d39:	e8 69 f8 ff ff       	call   145a7 <disk_write_data>
   14d3e:	83 c4 10             	add    $0x10,%esp
    //等待磁盘的中断，代表写入完成
    sem_wait(disk->op_sem);
   14d41:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14d44:	8b 80 24 01 00 00    	mov    0x124(%eax),%eax
   14d4a:	83 ec 0c             	sub    $0xc,%esp
   14d4d:	50                   	push   %eax
   14d4e:	e8 2f 35 00 00       	call   18282 <sem_wait>
   14d53:	83 c4 10             	add    $0x10,%esp
    

    //检测是否发生错误
    int err = disk_wait_data(disk);
   14d56:	83 ec 0c             	sub    $0xc,%esp
   14d59:	ff 75 ec             	push   -0x14(%ebp)
   14d5c:	e8 97 f8 ff ff       	call   145f8 <disk_wait_data>
   14d61:	83 c4 10             	add    $0x10,%esp
   14d64:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (err < 0) {
   14d67:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   14d6b:	79 20                	jns    14d8d <disk_write+0x115>
      log_printf("disk[%s] read error: start sector %d, count: %d",
          disk->name, addr, size);
   14d6d:	8b 45 ec             	mov    -0x14(%ebp),%eax
      log_printf("disk[%s] read error: start sector %d, count: %d",
   14d70:	ff 75 14             	push   0x14(%ebp)
   14d73:	ff 75 0c             	push   0xc(%ebp)
   14d76:	50                   	push   %eax
   14d77:	68 6c a2 01 00       	push   $0x1a26c
   14d7c:	e8 14 47 00 00       	call   19495 <log_printf>
   14d81:	83 c4 10             	add    $0x10,%esp
          cnt = -1;
   14d84:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
          break;
   14d8b:	eb 15                	jmp    14da2 <disk_write+0x12a>
  for (cnt = 0; cnt < size; ++cnt, buf += disk->sector_size) {
   14d8d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   14d91:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14d94:	8b 40 28             	mov    0x28(%eax),%eax
   14d97:	01 45 10             	add    %eax,0x10(%ebp)
   14d9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14d9d:	3b 45 14             	cmp    0x14(%ebp),%eax
   14da0:	7c 87                	jl     14d29 <disk_write+0xb1>
    } 
  }

  //TODO:解锁
  mutex_unlock(disk->mutex);
   14da2:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14da5:	8b 80 20 01 00 00    	mov    0x120(%eax),%eax
   14dab:	83 ec 0c             	sub    $0xc,%esp
   14dae:	50                   	push   %eax
   14daf:	e8 40 33 00 00       	call   180f4 <mutex_unlock>
   14db4:	83 c4 10             	add    $0x10,%esp

  return cnt;
   14db7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   14dba:	c9                   	leave  
   14dbb:	c3                   	ret    

00014dbc <disk_control>:
 * @param cmd 
 * @param arg0 
 * @param arg1 
 * @return int 
 */
int disk_control(device_t *dev, int cmd, int arg0, int arg1) {
   14dbc:	55                   	push   %ebp
   14dbd:	89 e5                	mov    %esp,%ebp

  return -1;
   14dbf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   14dc4:	5d                   	pop    %ebp
   14dc5:	c3                   	ret    

00014dc6 <do_handler_primary_disk>:
 * @brief 磁盘的中断处理函数
 *        磁盘执行完读操作或写操作后会触发中断
 * 
 * @param frame 
 */
void do_handler_primary_disk(exception_frame_t *frame) {
   14dc6:	55                   	push   %ebp
   14dc7:	89 e5                	mov    %esp,%ebp
   14dc9:	83 ec 08             	sub    $0x8,%esp
  //中断抢占成功，发送eoi信号，清除中断请求
  pic_send_eoi(IRQ14_HARDDISK_PRIMARY);
   14dcc:	83 ec 0c             	sub    $0xc,%esp
   14dcf:	6a 2e                	push   $0x2e
   14dd1:	e8 a1 e5 ff ff       	call   13377 <pic_send_eoi>
   14dd6:	83 c4 10             	add    $0x10,%esp

  //当用户程序触发磁盘中断时，唤醒等待进程
  if (task_on_op) {
   14dd9:	0f b6 05 d4 f5 04 00 	movzbl 0x4f5d4,%eax
   14de0:	84 c0                	test   %al,%al
   14de2:	74 10                	je     14df4 <do_handler_primary_disk+0x2e>
    //磁盘数据准备就绪或磁盘写入完成，唤醒等待进程
    sem_notify(&op_sem);
   14de4:	83 ec 0c             	sub    $0xc,%esp
   14de7:	68 c4 f5 04 00       	push   $0x4f5c4
   14dec:	e8 11 35 00 00       	call   18302 <sem_notify>
   14df1:	83 c4 10             	add    $0x10,%esp
  }
}
   14df4:	90                   	nop
   14df5:	c9                   	leave  
   14df6:	c3                   	ret    

00014df7 <disk_close>:
/**
 * @brief 关闭磁盘
 * 
 * @param dev 
 */
void disk_close(device_t *dev) {
   14df7:	55                   	push   %ebp
   14df8:	89 e5                	mov    %esp,%ebp

}
   14dfa:	90                   	nop
   14dfb:	5d                   	pop    %ebp
   14dfc:	c3                   	ret    

00014dfd <inb>:
static inline uint8_t inb(uint16_t port) {
   14dfd:	55                   	push   %ebp
   14dfe:	89 e5                	mov    %esp,%ebp
   14e00:	83 ec 14             	sub    $0x14,%esp
   14e03:	8b 45 08             	mov    0x8(%ebp),%eax
   14e06:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   14e0a:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   14e0e:	89 c2                	mov    %eax,%edx
   14e10:	ec                   	in     (%dx),%al
   14e11:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   14e14:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   14e18:	c9                   	leave  
   14e19:	c3                   	ret    

00014e1a <is_make_code>:
 * @brief 判断按键是按下还是弹起
 * 
 * @param key_code 
 * @return int 
 */
static inline int is_make_code(uint8_t key_code) {
   14e1a:	55                   	push   %ebp
   14e1b:	89 e5                	mov    %esp,%ebp
   14e1d:	83 ec 04             	sub    $0x4,%esp
   14e20:	8b 45 08             	mov    0x8(%ebp),%eax
   14e23:	88 45 fc             	mov    %al,-0x4(%ebp)
    return !(key_code & 0x80);  //key_code的第7位为1则为按下，为0则为弹起
   14e26:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
   14e2a:	f7 d0                	not    %eax
   14e2c:	c0 e8 07             	shr    $0x7,%al
   14e2f:	0f b6 c0             	movzbl %al,%eax
}
   14e32:	c9                   	leave  
   14e33:	c3                   	ret    

00014e34 <get_key>:
 * @brief 获取真正的键值码，用来映射键值
 * 
 * @param key_code 
 * @return int 
 */
static inline int get_key(uint8_t key_code) {
   14e34:	55                   	push   %ebp
   14e35:	89 e5                	mov    %esp,%ebp
   14e37:	83 ec 04             	sub    $0x4,%esp
   14e3a:	8b 45 08             	mov    0x8(%ebp),%eax
   14e3d:	88 45 fc             	mov    %al,-0x4(%ebp)
    return key_code & 0x7f; //key_code的低7位为键值码
   14e40:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
   14e44:	83 e0 7f             	and    $0x7f,%eax
}
   14e47:	c9                   	leave  
   14e48:	c3                   	ret    

00014e49 <do_fx_key>:
/**
 * @brief 对F1~F8功能键进行处理
 * 
 * @param key 
 */
static void do_fx_key(char key) {
   14e49:	55                   	push   %ebp
   14e4a:	89 e5                	mov    %esp,%ebp
   14e4c:	83 ec 28             	sub    $0x28,%esp
   14e4f:	8b 45 08             	mov    0x8(%ebp),%eax
   14e52:	88 45 e4             	mov    %al,-0x1c(%ebp)
    int index = key - KEY_F1;
   14e55:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
   14e59:	83 e8 3b             	sub    $0x3b,%eax
   14e5c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    //在ctr键按下的情况下才进行处理
    if (kbd_state.lctrl_press || kbd_state.rctrl_press) {
   14e5f:	0f b6 05 d8 f5 04 00 	movzbl 0x4f5d8,%eax
   14e66:	83 e0 20             	and    $0x20,%eax
   14e69:	84 c0                	test   %al,%al
   14e6b:	75 0e                	jne    14e7b <do_fx_key+0x32>
   14e6d:	0f b6 05 d8 f5 04 00 	movzbl 0x4f5d8,%eax
   14e74:	83 e0 40             	and    $0x40,%eax
   14e77:	84 c0                	test   %al,%al
   14e79:	74 0e                	je     14e89 <do_fx_key+0x40>
        tty_select(index);
   14e7b:	83 ec 0c             	sub    $0xc,%esp
   14e7e:	ff 75 f4             	push   -0xc(%ebp)
   14e81:	e8 33 0a 00 00       	call   158b9 <tty_select>
   14e86:	83 c4 10             	add    $0x10,%esp
    }
}
   14e89:	90                   	nop
   14e8a:	c9                   	leave  
   14e8b:	c3                   	ret    

00014e8c <do_normal_key>:
/**
 * @brief 处理键盘按键按下时得到的原码
 *  
 * @param key_code 键按下时得到的原码
 */
static void do_normal_key(uint8_t key_code) {
   14e8c:	55                   	push   %ebp
   14e8d:	89 e5                	mov    %esp,%ebp
   14e8f:	83 ec 28             	sub    $0x28,%esp
   14e92:	8b 45 08             	mov    0x8(%ebp),%eax
   14e95:	88 45 e4             	mov    %al,-0x1c(%ebp)
    char key = get_key(key_code);
   14e98:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
   14e9c:	50                   	push   %eax
   14e9d:	e8 92 ff ff ff       	call   14e34 <get_key>
   14ea2:	83 c4 04             	add    $0x4,%esp
   14ea5:	88 45 f7             	mov    %al,-0x9(%ebp)
    int is_make = is_make_code(key_code);
   14ea8:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
   14eac:	50                   	push   %eax
   14ead:	e8 68 ff ff ff       	call   14e1a <is_make_code>
   14eb2:	83 c4 04             	add    $0x4,%esp
   14eb5:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //处理对应按键
    switch (key) {
   14eb8:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14ebc:	83 e8 1d             	sub    $0x1d,%eax
   14ebf:	83 f8 3b             	cmp    $0x3b,%eax
   14ec2:	0f 87 06 01 00 00    	ja     14fce <do_normal_key+0x142>
   14ec8:	8b 04 85 ac a4 01 00 	mov    0x1a4ac(,%eax,4),%eax
   14ecf:	ff e0                	jmp    *%eax
        case KEY_RSHIFT:
            kbd_state.rshift_press = is_make ? 1 : 0;
   14ed1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14ed5:	0f 95 c0             	setne  %al
   14ed8:	c1 e0 07             	shl    $0x7,%eax
   14edb:	c0 f8 07             	sar    $0x7,%al
   14ede:	83 e0 01             	and    $0x1,%eax
   14ee1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   14ee8:	0f b6 05 d8 f5 04 00 	movzbl 0x4f5d8,%eax
   14eef:	83 e0 fb             	and    $0xfffffffb,%eax
   14ef2:	09 d0                	or     %edx,%eax
   14ef4:	a2 d8 f5 04 00       	mov    %al,0x4f5d8
            break;
   14ef9:	e9 ca 01 00 00       	jmp    150c8 <do_normal_key+0x23c>
        
        case KEY_LSHIFT:
            kbd_state.lshift_press = is_make ? 1 : 0;
   14efe:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14f02:	0f 95 c0             	setne  %al
   14f05:	c1 e0 07             	shl    $0x7,%eax
   14f08:	c0 f8 07             	sar    $0x7,%al
   14f0b:	83 e0 01             	and    $0x1,%eax
   14f0e:	8d 14 00             	lea    (%eax,%eax,1),%edx
   14f11:	0f b6 05 d8 f5 04 00 	movzbl 0x4f5d8,%eax
   14f18:	83 e0 fd             	and    $0xfffffffd,%eax
   14f1b:	09 d0                	or     %edx,%eax
   14f1d:	a2 d8 f5 04 00       	mov    %al,0x4f5d8
            break;  
   14f22:	e9 a1 01 00 00       	jmp    150c8 <do_normal_key+0x23c>
        case KEY_CAPS:
            if (is_make) {
   14f27:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14f2b:	0f 84 90 01 00 00    	je     150c1 <do_normal_key+0x235>
                kbd_state.caps_lock = ~kbd_state.caps_lock;
   14f31:	0f b6 05 d8 f5 04 00 	movzbl 0x4f5d8,%eax
   14f38:	c1 e0 07             	shl    $0x7,%eax
   14f3b:	c0 f8 07             	sar    $0x7,%al
   14f3e:	f7 d0                	not    %eax
   14f40:	c1 e0 07             	shl    $0x7,%eax
   14f43:	c0 f8 07             	sar    $0x7,%al
   14f46:	83 e0 01             	and    $0x1,%eax
   14f49:	89 c2                	mov    %eax,%edx
   14f4b:	0f b6 05 d8 f5 04 00 	movzbl 0x4f5d8,%eax
   14f52:	83 e0 fe             	and    $0xfffffffe,%eax
   14f55:	09 d0                	or     %edx,%eax
   14f57:	a2 d8 f5 04 00       	mov    %al,0x4f5d8
            }
            break;
   14f5c:	e9 60 01 00 00       	jmp    150c1 <do_normal_key+0x235>
        
        case KEY_ALT:
            kbd_state.lalt_press = is_make ? 1 : 0;
   14f61:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14f65:	0f 95 c0             	setne  %al
   14f68:	c1 e0 07             	shl    $0x7,%eax
   14f6b:	c0 f8 07             	sar    $0x7,%al
   14f6e:	83 e0 01             	and    $0x1,%eax
   14f71:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   14f78:	0f b6 05 d8 f5 04 00 	movzbl 0x4f5d8,%eax
   14f7f:	83 e0 f7             	and    $0xfffffff7,%eax
   14f82:	09 d0                	or     %edx,%eax
   14f84:	a2 d8 f5 04 00       	mov    %al,0x4f5d8
            break;
   14f89:	e9 3a 01 00 00       	jmp    150c8 <do_normal_key+0x23c>
        case KEY_CTRL:
            kbd_state.lctrl_press = is_make ? 1 : 0;
   14f8e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14f92:	0f 95 c0             	setne  %al
   14f95:	c1 e0 07             	shl    $0x7,%eax
   14f98:	c0 f8 07             	sar    $0x7,%al
   14f9b:	83 e0 01             	and    $0x1,%eax
   14f9e:	c1 e0 05             	shl    $0x5,%eax
   14fa1:	89 c2                	mov    %eax,%edx
   14fa3:	0f b6 05 d8 f5 04 00 	movzbl 0x4f5d8,%eax
   14faa:	83 e0 df             	and    $0xffffffdf,%eax
   14fad:	09 d0                	or     %edx,%eax
   14faf:	a2 d8 f5 04 00       	mov    %al,0x4f5d8
            break;
   14fb4:	e9 0f 01 00 00       	jmp    150c8 <do_normal_key+0x23c>
        case KEY_F4:
        case KEY_F5:
        case KEY_F6:
        case KEY_F7:
        case KEY_F8:
            do_fx_key(key);
   14fb9:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14fbd:	83 ec 0c             	sub    $0xc,%esp
   14fc0:	50                   	push   %eax
   14fc1:	e8 83 fe ff ff       	call   14e49 <do_fx_key>
   14fc6:	83 c4 10             	add    $0x10,%esp
            break;
   14fc9:	e9 fa 00 00 00       	jmp    150c8 <do_normal_key+0x23c>
            break;
        case KEY_F12:
            break;

        default:    //处理可被映射的非功能键
            if (is_make) {
   14fce:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14fd2:	0f 84 ec 00 00 00    	je     150c4 <do_normal_key+0x238>
                    if (kbd_state.rshift_press || kbd_state.lshift_press) {
   14fd8:	0f b6 05 d8 f5 04 00 	movzbl 0x4f5d8,%eax
   14fdf:	83 e0 04             	and    $0x4,%eax
   14fe2:	84 c0                	test   %al,%al
   14fe4:	75 0e                	jne    14ff4 <do_normal_key+0x168>
   14fe6:	0f b6 05 d8 f5 04 00 	movzbl 0x4f5d8,%eax
   14fed:	83 e0 02             	and    $0x2,%eax
   14ff0:	84 c0                	test   %al,%al
   14ff2:	74 11                	je     15005 <do_normal_key+0x179>
                        //shift功能键已被按下，获取该键的对应值
                        key = map_table[key].func;
   14ff4:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14ff8:	0f b6 84 00 a1 a2 01 	movzbl 0x1a2a1(%eax,%eax,1),%eax
   14fff:	00 
   15000:	88 45 f7             	mov    %al,-0x9(%ebp)
   15003:	eb 0f                	jmp    15014 <do_normal_key+0x188>
                    } else {
                        key = map_table[key].normal;
   15005:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   15009:	0f b6 84 00 a0 a2 01 	movzbl 0x1a2a0(%eax,%eax,1),%eax
   15010:	00 
   15011:	88 45 f7             	mov    %al,-0x9(%ebp)
                    }


                    //判断是否是进程退出指令
                    if (kbd_state.lctrl_press) {
   15014:	0f b6 05 d8 f5 04 00 	movzbl 0x4f5d8,%eax
   1501b:	83 e0 20             	and    $0x20,%eax
   1501e:	84 c0                	test   %al,%al
   15020:	74 4e                	je     15070 <do_normal_key+0x1e4>
                        if (key == 'c' || key == 'z') {
   15022:	80 7d f7 63          	cmpb   $0x63,-0x9(%ebp)
   15026:	74 06                	je     1502e <do_normal_key+0x1a2>
   15028:	80 7d f7 7a          	cmpb   $0x7a,-0x9(%ebp)
   1502c:	75 42                	jne    15070 <do_normal_key+0x1e4>
                            task_t *curr = task_current();
   1502e:	e8 7e c9 ff ff       	call   119b1 <task_current>
   15033:	89 45 ec             	mov    %eax,-0x14(%ebp)
                            if (curr->state == TASK_RUNNING 
   15036:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15039:	8b 00                	mov    (%eax),%eax
   1503b:	83 f8 01             	cmp    $0x1,%eax
   1503e:	0f 85 83 00 00 00    	jne    150c7 <do_normal_key+0x23b>
                                && kernel_strncmp(curr->name, "empty_task", 10) != 0) {
   15044:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15047:	83 c0 24             	add    $0x24,%eax
   1504a:	83 ec 04             	sub    $0x4,%esp
   1504d:	6a 0a                	push   $0xa
   1504f:	68 a0 a4 01 00       	push   $0x1a4a0
   15054:	50                   	push   %eax
   15055:	e8 39 3b 00 00       	call   18b93 <kernel_strncmp>
   1505a:	83 c4 10             	add    $0x10,%esp
   1505d:	85 c0                	test   %eax,%eax
   1505f:	74 66                	je     150c7 <do_normal_key+0x23b>
                                sys_exit(-9);
   15061:	83 ec 0c             	sub    $0xc,%esp
   15064:	6a f7                	push   $0xfffffff7
   15066:	e8 b2 d4 ff ff       	call   1251d <sys_exit>
   1506b:	83 c4 10             	add    $0x10,%esp
                            }
                            return;
   1506e:	eb 57                	jmp    150c7 <do_normal_key+0x23b>
                        }
                    }

                    if (kbd_state.caps_lock) {  //当前状态下大写锁定已开启
   15070:	0f b6 05 d8 f5 04 00 	movzbl 0x4f5d8,%eax
   15077:	83 e0 01             	and    $0x1,%eax
   1507a:	84 c0                	test   %al,%al
   1507c:	74 2e                	je     150ac <do_normal_key+0x220>
                        if ((key >= 'A' && key <= 'Z')) {
   1507e:	80 7d f7 40          	cmpb   $0x40,-0x9(%ebp)
   15082:	7e 12                	jle    15096 <do_normal_key+0x20a>
   15084:	80 7d f7 5a          	cmpb   $0x5a,-0x9(%ebp)
   15088:	7f 0c                	jg     15096 <do_normal_key+0x20a>
                            key = key - 'A' + 'a';
   1508a:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
   1508e:	83 c0 20             	add    $0x20,%eax
   15091:	88 45 f7             	mov    %al,-0x9(%ebp)
   15094:	eb 16                	jmp    150ac <do_normal_key+0x220>
                        } else if (key >= 'a' && key <= 'z') {
   15096:	80 7d f7 60          	cmpb   $0x60,-0x9(%ebp)
   1509a:	7e 10                	jle    150ac <do_normal_key+0x220>
   1509c:	80 7d f7 7a          	cmpb   $0x7a,-0x9(%ebp)
   150a0:	7f 0a                	jg     150ac <do_normal_key+0x220>
                            key = key -'a' + 'A';
   150a2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
   150a6:	83 e8 20             	sub    $0x20,%eax
   150a9:	88 45 f7             	mov    %al,-0x9(%ebp)
                        }
                    }

        
                tty_in(key);
   150ac:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   150b0:	83 ec 0c             	sub    $0xc,%esp
   150b3:	50                   	push   %eax
   150b4:	e8 9a 07 00 00       	call   15853 <tty_in>
   150b9:	83 c4 10             	add    $0x10,%esp
            }
            break;
   150bc:	eb 06                	jmp    150c4 <do_normal_key+0x238>
            break;
   150be:	90                   	nop
   150bf:	eb 07                	jmp    150c8 <do_normal_key+0x23c>
            break;
   150c1:	90                   	nop
   150c2:	eb 04                	jmp    150c8 <do_normal_key+0x23c>
            break;
   150c4:	90                   	nop
   150c5:	eb 01                	jmp    150c8 <do_normal_key+0x23c>
                            return;
   150c7:	90                   	nop
    }
}
   150c8:	c9                   	leave  
   150c9:	c3                   	ret    

000150ca <do_e0_key>:
/**
 * @brief 处理0xE0开头的键值码，即EBGIN_E0状态下接收到的键值码
 * 
 * @param key_code 
 */
static void do_e0_key(uint8_t key_code) {
   150ca:	55                   	push   %ebp
   150cb:	89 e5                	mov    %esp,%ebp
   150cd:	83 ec 14             	sub    $0x14,%esp
   150d0:	8b 45 08             	mov    0x8(%ebp),%eax
   150d3:	88 45 ec             	mov    %al,-0x14(%ebp)
    char key = get_key(key_code);
   150d6:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
   150da:	50                   	push   %eax
   150db:	e8 54 fd ff ff       	call   14e34 <get_key>
   150e0:	83 c4 04             	add    $0x4,%esp
   150e3:	88 45 ff             	mov    %al,-0x1(%ebp)
    int is_make = is_make_code(key_code);
   150e6:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
   150ea:	50                   	push   %eax
   150eb:	e8 2a fd ff ff       	call   14e1a <is_make_code>
   150f0:	83 c4 04             	add    $0x4,%esp
   150f3:	89 45 f8             	mov    %eax,-0x8(%ebp)

    switch (key) {
   150f6:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
   150fa:	83 f8 1d             	cmp    $0x1d,%eax
   150fd:	74 07                	je     15106 <do_e0_key+0x3c>
   150ff:	83 f8 38             	cmp    $0x38,%eax
   15102:	74 2a                	je     1512e <do_e0_key+0x64>
        break;
    case KEY_ALT:
        kbd_state.ralt_press = is_make ? 1 : 0;
        break;
    default:
        break;
   15104:	eb 4f                	jmp    15155 <do_e0_key+0x8b>
        kbd_state.rctrl_press = is_make ? 1 : 0;
   15106:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
   1510a:	0f 95 c0             	setne  %al
   1510d:	c1 e0 07             	shl    $0x7,%eax
   15110:	c0 f8 07             	sar    $0x7,%al
   15113:	83 e0 01             	and    $0x1,%eax
   15116:	c1 e0 06             	shl    $0x6,%eax
   15119:	89 c2                	mov    %eax,%edx
   1511b:	0f b6 05 d8 f5 04 00 	movzbl 0x4f5d8,%eax
   15122:	83 e0 bf             	and    $0xffffffbf,%eax
   15125:	09 d0                	or     %edx,%eax
   15127:	a2 d8 f5 04 00       	mov    %al,0x4f5d8
        break;
   1512c:	eb 27                	jmp    15155 <do_e0_key+0x8b>
        kbd_state.ralt_press = is_make ? 1 : 0;
   1512e:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
   15132:	0f 95 c0             	setne  %al
   15135:	c1 e0 07             	shl    $0x7,%eax
   15138:	c0 f8 07             	sar    $0x7,%al
   1513b:	83 e0 01             	and    $0x1,%eax
   1513e:	c1 e0 04             	shl    $0x4,%eax
   15141:	89 c2                	mov    %eax,%edx
   15143:	0f b6 05 d8 f5 04 00 	movzbl 0x4f5d8,%eax
   1514a:	83 e0 ef             	and    $0xffffffef,%eax
   1514d:	09 d0                	or     %edx,%eax
   1514f:	a2 d8 f5 04 00       	mov    %al,0x4f5d8
        break;
   15154:	90                   	nop
    }
}
   15155:	90                   	nop
   15156:	c9                   	leave  
   15157:	c3                   	ret    

00015158 <kbd_init>:

/**
 * @brief 键盘初始化
 * 
 */
void kbd_init(void) {
   15158:	55                   	push   %ebp
   15159:	89 e5                	mov    %esp,%ebp
   1515b:	83 ec 08             	sub    $0x8,%esp
    static uint8_t is_inited = 0;
    if (!is_inited)  {
   1515e:	0f b6 05 dc f5 04 00 	movzbl 0x4f5dc,%eax
   15165:	84 c0                	test   %al,%al
   15167:	75 3a                	jne    151a3 <kbd_init+0x4b>
        idt_install(IRQ1_KEYBOARD, (idt_handler_t)exception_handler_kbd);
   15169:	83 ec 08             	sub    $0x8,%esp
   1516c:	68 98 02 01 00       	push   $0x10298
   15171:	6a 21                	push   $0x21
   15173:	e8 32 de ff ff       	call   12faa <idt_install>
   15178:	83 c4 10             	add    $0x10,%esp
        idt_enable(IRQ1_KEYBOARD);
   1517b:	83 ec 0c             	sub    $0xc,%esp
   1517e:	6a 21                	push   $0x21
   15180:	e8 b0 e0 ff ff       	call   13235 <idt_enable>
   15185:	83 c4 10             	add    $0x10,%esp
        kernel_memset(&kbd_state, 0, sizeof(kbd_state));
   15188:	83 ec 04             	sub    $0x4,%esp
   1518b:	6a 04                	push   $0x4
   1518d:	6a 00                	push   $0x0
   1518f:	68 d8 f5 04 00       	push   $0x4f5d8
   15194:	e8 ff 3a 00 00       	call   18c98 <kernel_memset>
   15199:	83 c4 10             	add    $0x10,%esp
        is_inited = 1;
   1519c:	c6 05 dc f5 04 00 01 	movb   $0x1,0x4f5dc
    }
}
   151a3:	90                   	nop
   151a4:	c9                   	leave  
   151a5:	c3                   	ret    

000151a6 <do_handler_kbd>:

/**
 * @brief 键盘中断处理程序
 * 
 */
void do_handler_kbd(exception_frame_t *frame) {
   151a6:	55                   	push   %ebp
   151a7:	89 e5                	mov    %esp,%ebp
   151a9:	83 ec 18             	sub    $0x18,%esp
        BEGIN_E0, //E0开始的键值码，占2个或4个字节
        BEGIN_E1, //E1开始的键值码，占6个字节
    }recv_state = NORMAL;

    //1.获取键盘的读取状态
    uint32_t status = inb(KBD_PORT_STAT);
   151ac:	6a 64                	push   $0x64
   151ae:	e8 4a fc ff ff       	call   14dfd <inb>
   151b3:	83 c4 04             	add    $0x4,%esp
   151b6:	0f b6 c0             	movzbl %al,%eax
   151b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!(status & KBD_STAT_RECV_READY)) {  //端口没有准备好的数据，直接结束中断
   151bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   151bf:	83 e0 01             	and    $0x1,%eax
   151c2:	85 c0                	test   %eax,%eax
   151c4:	75 12                	jne    151d8 <do_handler_kbd+0x32>
        pic_send_eoi(IRQ1_KEYBOARD);
   151c6:	83 ec 0c             	sub    $0xc,%esp
   151c9:	6a 21                	push   $0x21
   151cb:	e8 a7 e1 ff ff       	call   13377 <pic_send_eoi>
   151d0:	83 c4 10             	add    $0x10,%esp
        return;
   151d3:	e9 96 00 00 00       	jmp    1526e <do_handler_kbd+0xc8>
    }

    //2.端口数据已准备好，读取数据端口
    uint8_t key_code = inb(KBD_PORT_DATA);
   151d8:	83 ec 0c             	sub    $0xc,%esp
   151db:	6a 60                	push   $0x60
   151dd:	e8 1b fc ff ff       	call   14dfd <inb>
   151e2:	83 c4 10             	add    $0x10,%esp
   151e5:	88 45 f3             	mov    %al,-0xd(%ebp)

    //3.因为ICW4的EOI位为0，所以要手动发送EOI即中断结束信号
    pic_send_eoi(IRQ1_KEYBOARD);
   151e8:	83 ec 0c             	sub    $0xc,%esp
   151eb:	6a 21                	push   $0x21
   151ed:	e8 85 e1 ff ff       	call   13377 <pic_send_eoi>
   151f2:	83 c4 10             	add    $0x10,%esp

    //4.根据接受的键值原码的第一个字节，判断当前接收的原码的状态
    if (key_code == KEY_E0) {   //第一个字节为0xE0,代表还有后续字节
   151f5:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
   151f9:	75 0c                	jne    15207 <do_handler_kbd+0x61>
        recv_state = BEGIN_E0;
   151fb:	c7 05 e0 f5 04 00 01 	movl   $0x1,0x4f5e0
   15202:	00 00 00 
   15205:	eb 67                	jmp    1526e <do_handler_kbd+0xc8>
    } else if (key_code == KEY_E1) {    //第一个字节为0xE1，代表还有后续字节
   15207:	80 7d f3 e1          	cmpb   $0xe1,-0xd(%ebp)
   1520b:	75 0c                	jne    15219 <do_handler_kbd+0x73>
        recv_state = BEGIN_E1;
   1520d:	c7 05 e0 f5 04 00 02 	movl   $0x2,0x4f5e0
   15214:	00 00 00 
   15217:	eb 55                	jmp    1526e <do_handler_kbd+0xc8>
    } else {
        switch (recv_state) {
   15219:	a1 e0 f5 04 00       	mov    0x4f5e0,%eax
   1521e:	83 f8 02             	cmp    $0x2,%eax
   15221:	74 3e                	je     15261 <do_handler_kbd+0xbb>
   15223:	83 f8 02             	cmp    $0x2,%eax
   15226:	77 45                	ja     1526d <do_handler_kbd+0xc7>
   15228:	85 c0                	test   %eax,%eax
   1522a:	74 07                	je     15233 <do_handler_kbd+0x8d>
   1522c:	83 f8 01             	cmp    $0x1,%eax
   1522f:	74 14                	je     15245 <do_handler_kbd+0x9f>
                break;
            case BEGIN_E1://TODO: 读取的6字节原码, pause 键，暂不处理
                recv_state = NORMAL;
                break;
            default :   
                break;
   15231:	eb 3a                	jmp    1526d <do_handler_kbd+0xc7>
                do_normal_key(key_code);
   15233:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
   15237:	83 ec 0c             	sub    $0xc,%esp
   1523a:	50                   	push   %eax
   1523b:	e8 4c fc ff ff       	call   14e8c <do_normal_key>
   15240:	83 c4 10             	add    $0x10,%esp
                break;
   15243:	eb 29                	jmp    1526e <do_handler_kbd+0xc8>
                do_e0_key(key_code);
   15245:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
   15249:	83 ec 0c             	sub    $0xc,%esp
   1524c:	50                   	push   %eax
   1524d:	e8 78 fe ff ff       	call   150ca <do_e0_key>
   15252:	83 c4 10             	add    $0x10,%esp
                recv_state = NORMAL;
   15255:	c7 05 e0 f5 04 00 00 	movl   $0x0,0x4f5e0
   1525c:	00 00 00 
                break;
   1525f:	eb 0d                	jmp    1526e <do_handler_kbd+0xc8>
                recv_state = NORMAL;
   15261:	c7 05 e0 f5 04 00 00 	movl   $0x0,0x4f5e0
   15268:	00 00 00 
                break;
   1526b:	eb 01                	jmp    1526e <do_handler_kbd+0xc8>
                break;
   1526d:	90                   	nop
        }
    }

   1526e:	c9                   	leave  
   1526f:	c3                   	ret    

00015270 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   15270:	55                   	push   %ebp
   15271:	89 e5                	mov    %esp,%ebp
   15273:	83 ec 08             	sub    $0x8,%esp
   15276:	8b 45 08             	mov    0x8(%ebp),%eax
   15279:	8b 55 0c             	mov    0xc(%ebp),%edx
   1527c:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   15280:	89 d0                	mov    %edx,%eax
   15282:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   15285:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   15289:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1528d:	ee                   	out    %al,(%dx)
}
   1528e:	90                   	nop
   1528f:	c9                   	leave  
   15290:	c3                   	ret    

00015291 <do_handler_time>:
/**
 * @brief  处理定时器中断的c函数
 * 
 * @param frame 异常栈帧
 */
void do_handler_time(const exception_frame_t *frame) {
   15291:	55                   	push   %ebp
   15292:	89 e5                	mov    %esp,%ebp
   15294:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   15297:	a1 e4 f5 04 00       	mov    0x4f5e4,%eax
   1529c:	83 c0 01             	add    $0x1,%eax
   1529f:	a3 e4 f5 04 00       	mov    %eax,0x4f5e4

    //因为ICW4的EOI位为0，所以要手动发送EOI即中断结束信号
    pic_send_eoi(IRQ0_TIMER);
   152a4:	83 ec 0c             	sub    $0xc,%esp
   152a7:	6a 20                	push   $0x20
   152a9:	e8 c9 e0 ff ff       	call   13377 <pic_send_eoi>
   152ae:	83 c4 10             	add    $0x10,%esp

    //运行完一个时间片，判断是否需要执行任务切换，若需要则执行
    //必须写在发送eoi之后，防止发生任务切换导致eoi没有发送，从而无法进行下一次中断
    task_slice_end();   
   152b1:	e8 80 c7 ff ff       	call   11a36 <task_slice_end>
}
   152b6:	90                   	nop
   152b7:	c9                   	leave  
   152b8:	c3                   	ret    

000152b9 <init_pit>:

/**
 * @brief  初始化可编程定时器
 * 
 */
static void init_pit(void) {
   152b9:	55                   	push   %ebp
   152ba:	89 e5                	mov    %esp,%ebp
   152bc:	83 ec 18             	sub    $0x18,%esp
    //1.选择定时器的计算器，读取与加载初始值模式，以及工作模式
    outb(PIT_COMMAND_MODE_PORT, PIT_SELECT_COUNTER | PIT_READ_LOAD | PIT_MODE);
   152bf:	6a 36                	push   $0x36
   152c1:	6a 43                	push   $0x43
   152c3:	e8 a8 ff ff ff       	call   15270 <outb>
   152c8:	83 c4 08             	add    $0x8,%esp

    //2.写入16位初始值,即一个中断后期晶体的振荡次数，由确定的加载方式知，先写入低8位，再写入高8位
    uint16_t reload_count = (PIT_OSC_FREQ / 1000) * OS_TICKS_MS;   //确定晶体一个中断周期的震荡次数
   152cb:	66 c7 45 f6 a9 04    	movw   $0x4a9,-0xa(%ebp)
    outb(PIT_CHANNEL_DATA_PORT, reload_count & 0xff);
   152d1:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   152d5:	0f b6 c0             	movzbl %al,%eax
   152d8:	50                   	push   %eax
   152d9:	6a 40                	push   $0x40
   152db:	e8 90 ff ff ff       	call   15270 <outb>
   152e0:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL_DATA_PORT, (reload_count >> 8) & 0xff);
   152e3:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   152e7:	66 c1 e8 08          	shr    $0x8,%ax
   152eb:	0f b6 c0             	movzbl %al,%eax
   152ee:	50                   	push   %eax
   152ef:	6a 40                	push   $0x40
   152f1:	e8 7a ff ff ff       	call   15270 <outb>
   152f6:	83 c4 08             	add    $0x8,%esp

    //3.绑定定时器中断的异常处理程序,并开启该中断
    idt_install(IRQ0_TIMER, (idt_handler_t)exception_handler_time);
   152f9:	83 ec 08             	sub    $0x8,%esp
   152fc:	68 7b 02 01 00       	push   $0x1027b
   15301:	6a 20                	push   $0x20
   15303:	e8 a2 dc ff ff       	call   12faa <idt_install>
   15308:	83 c4 10             	add    $0x10,%esp
    idt_enable(IRQ0_TIMER);
   1530b:	83 ec 0c             	sub    $0xc,%esp
   1530e:	6a 20                	push   $0x20
   15310:	e8 20 df ff ff       	call   13235 <idt_enable>
   15315:	83 c4 10             	add    $0x10,%esp

}
   15318:	90                   	nop
   15319:	c9                   	leave  
   1531a:	c3                   	ret    

0001531b <time_init>:

/**
 * @brief  初始化定时器
 * 
 */
void time_init(void) {
   1531b:	55                   	push   %ebp
   1531c:	89 e5                	mov    %esp,%ebp
   1531e:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   15321:	c7 05 e4 f5 04 00 00 	movl   $0x0,0x4f5e4
   15328:	00 00 00 
    init_pit();
   1532b:	e8 89 ff ff ff       	call   152b9 <init_pit>
   15330:	90                   	nop
   15331:	c9                   	leave  
   15332:	c3                   	ret    

00015333 <get_tty>:
 * @brief 根据dev结构获取到对应的tty设备结构
 * 
 * @param dev 
 * @return tty_t* 
 */
static tty_t* get_tty(device_t *dev) {
   15333:	55                   	push   %ebp
   15334:	89 e5                	mov    %esp,%ebp
   15336:	83 ec 18             	sub    $0x18,%esp
    int tty_index = dev->dev_index;
   15339:	8b 45 08             	mov    0x8(%ebp),%eax
   1533c:	8b 40 08             	mov    0x8(%eax),%eax
   1533f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (tty_index < 0 || tty_index >= TTY_TABLE_SIZE || !dev->open_count) {
   15342:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   15346:	78 10                	js     15358 <get_tty+0x25>
   15348:	83 7d f4 07          	cmpl   $0x7,-0xc(%ebp)
   1534c:	7f 0a                	jg     15358 <get_tty+0x25>
   1534e:	8b 45 08             	mov    0x8(%ebp),%eax
   15351:	8b 40 10             	mov    0x10(%eax),%eax
   15354:	85 c0                	test   %eax,%eax
   15356:	75 1a                	jne    15372 <get_tty+0x3f>
        log_printf("tty is not opened. tty = %d\n", tty_index);
   15358:	83 ec 08             	sub    $0x8,%esp
   1535b:	ff 75 f4             	push   -0xc(%ebp)
   1535e:	68 9c a5 01 00       	push   $0x1a59c
   15363:	e8 2d 41 00 00       	call   19495 <log_printf>
   15368:	83 c4 10             	add    $0x10,%esp
        return (tty_t*)0;
   1536b:	b8 00 00 00 00       	mov    $0x0,%eax
   15370:	eb 0e                	jmp    15380 <get_tty+0x4d>
    }

    return tty_table + tty_index;
   15372:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15375:	69 c0 54 04 00 00    	imul   $0x454,%eax,%eax
   1537b:	05 00 f6 04 00       	add    $0x4f600,%eax
}
   15380:	c9                   	leave  
   15381:	c3                   	ret    

00015382 <tty_fifo_init>:
 * 
 * @param fifo 
 * @param buf 
 * @param size 
 */
static void tty_fifo_init(tty_fifo_t *fifo, char *buf, int size) {
   15382:	55                   	push   %ebp
   15383:	89 e5                	mov    %esp,%ebp
    fifo->buf = buf;
   15385:	8b 45 08             	mov    0x8(%ebp),%eax
   15388:	8b 55 0c             	mov    0xc(%ebp),%edx
   1538b:	89 10                	mov    %edx,(%eax)
    fifo->count = 0;
   1538d:	8b 45 08             	mov    0x8(%ebp),%eax
   15390:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    fifo->size = size;
   15397:	8b 45 08             	mov    0x8(%ebp),%eax
   1539a:	8b 55 10             	mov    0x10(%ebp),%edx
   1539d:	89 50 04             	mov    %edx,0x4(%eax)
    fifo->read = fifo->write = 0;
   153a0:	8b 45 08             	mov    0x8(%ebp),%eax
   153a3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
   153aa:	8b 45 08             	mov    0x8(%ebp),%eax
   153ad:	8b 50 0c             	mov    0xc(%eax),%edx
   153b0:	8b 45 08             	mov    0x8(%ebp),%eax
   153b3:	89 50 08             	mov    %edx,0x8(%eax)
}
   153b6:	90                   	nop
   153b7:	5d                   	pop    %ebp
   153b8:	c3                   	ret    

000153b9 <tty_fifo_put>:
 * 
 * @param fifo 
 * @param c 
 * @return int 
 */
int tty_fifo_put(tty_fifo_t *fifo, char c) {
   153b9:	55                   	push   %ebp
   153ba:	89 e5                	mov    %esp,%ebp
   153bc:	53                   	push   %ebx
   153bd:	83 ec 24             	sub    $0x24,%esp
   153c0:	8b 45 0c             	mov    0xc(%ebp),%eax
   153c3:	88 45 e4             	mov    %al,-0x1c(%ebp)
    //TODO:加锁
    idt_state_t state = idt_enter_protection();
   153c6:	e8 e5 df ff ff       	call   133b0 <idt_enter_protection>
   153cb:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //fifo已满，不能再写入
    if (fifo->count >= fifo->size) {
   153ce:	8b 45 08             	mov    0x8(%ebp),%eax
   153d1:	8b 50 10             	mov    0x10(%eax),%edx
   153d4:	8b 45 08             	mov    0x8(%ebp),%eax
   153d7:	8b 40 04             	mov    0x4(%eax),%eax
   153da:	39 c2                	cmp    %eax,%edx
   153dc:	7c 15                	jl     153f3 <tty_fifo_put+0x3a>
    //TODO:解锁
        idt_leave_protection(state);
   153de:	83 ec 0c             	sub    $0xc,%esp
   153e1:	ff 75 f4             	push   -0xc(%ebp)
   153e4:	e8 df df ff ff       	call   133c8 <idt_leave_protection>
   153e9:	83 c4 10             	add    $0x10,%esp
        return -1;
   153ec:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   153f1:	eb 59                	jmp    1544c <tty_fifo_put+0x93>
    }

    fifo->buf[fifo->write++] = c;   //写入一个字符
   153f3:	8b 45 08             	mov    0x8(%ebp),%eax
   153f6:	8b 18                	mov    (%eax),%ebx
   153f8:	8b 45 08             	mov    0x8(%ebp),%eax
   153fb:	8b 40 0c             	mov    0xc(%eax),%eax
   153fe:	8d 48 01             	lea    0x1(%eax),%ecx
   15401:	8b 55 08             	mov    0x8(%ebp),%edx
   15404:	89 4a 0c             	mov    %ecx,0xc(%edx)
   15407:	8d 14 03             	lea    (%ebx,%eax,1),%edx
   1540a:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
   1540e:	88 02                	mov    %al,(%edx)
    if (fifo->write >= fifo->size) { //循环队列的方式写入
   15410:	8b 45 08             	mov    0x8(%ebp),%eax
   15413:	8b 50 0c             	mov    0xc(%eax),%edx
   15416:	8b 45 08             	mov    0x8(%ebp),%eax
   15419:	8b 40 04             	mov    0x4(%eax),%eax
   1541c:	39 c2                	cmp    %eax,%edx
   1541e:	7c 0a                	jl     1542a <tty_fifo_put+0x71>
        fifo->write = 0;
   15420:	8b 45 08             	mov    0x8(%ebp),%eax
   15423:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    }

    fifo->count++;
   1542a:	8b 45 08             	mov    0x8(%ebp),%eax
   1542d:	8b 40 10             	mov    0x10(%eax),%eax
   15430:	8d 50 01             	lea    0x1(%eax),%edx
   15433:	8b 45 08             	mov    0x8(%ebp),%eax
   15436:	89 50 10             	mov    %edx,0x10(%eax)
    
    //开中断取消资源保护
    //TODO:解锁
    idt_leave_protection(state);
   15439:	83 ec 0c             	sub    $0xc,%esp
   1543c:	ff 75 f4             	push   -0xc(%ebp)
   1543f:	e8 84 df ff ff       	call   133c8 <idt_leave_protection>
   15444:	83 c4 10             	add    $0x10,%esp
    return 0;
   15447:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1544c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1544f:	c9                   	leave  
   15450:	c3                   	ret    

00015451 <tty_fifo_get>:
 * 
 * @param fifo 
 * @param c 
 * @return int 
 */
int tty_fifo_get(tty_fifo_t *fifo, char *c) {
   15451:	55                   	push   %ebp
   15452:	89 e5                	mov    %esp,%ebp
   15454:	53                   	push   %ebx
   15455:	83 ec 14             	sub    $0x14,%esp
    //TODO:加锁关中断进行资源保护
    idt_state_t state = idt_enter_protection();
   15458:	e8 53 df ff ff       	call   133b0 <idt_enter_protection>
   1545d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if (fifo->count <= 0) {
   15460:	8b 45 08             	mov    0x8(%ebp),%eax
   15463:	8b 40 10             	mov    0x10(%eax),%eax
   15466:	85 c0                	test   %eax,%eax
   15468:	7f 15                	jg     1547f <tty_fifo_get+0x2e>
    //TODO:解锁
        idt_leave_protection(state);
   1546a:	83 ec 0c             	sub    $0xc,%esp
   1546d:	ff 75 f4             	push   -0xc(%ebp)
   15470:	e8 53 df ff ff       	call   133c8 <idt_leave_protection>
   15475:	83 c4 10             	add    $0x10,%esp
        return -1;
   15478:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1547d:	eb 5a                	jmp    154d9 <tty_fifo_get+0x88>
    }

    *c = fifo->buf[fifo->read++];   //读取一个字符
   1547f:	8b 45 08             	mov    0x8(%ebp),%eax
   15482:	8b 18                	mov    (%eax),%ebx
   15484:	8b 45 08             	mov    0x8(%ebp),%eax
   15487:	8b 40 08             	mov    0x8(%eax),%eax
   1548a:	8d 48 01             	lea    0x1(%eax),%ecx
   1548d:	8b 55 08             	mov    0x8(%ebp),%edx
   15490:	89 4a 08             	mov    %ecx,0x8(%edx)
   15493:	01 d8                	add    %ebx,%eax
   15495:	0f b6 10             	movzbl (%eax),%edx
   15498:	8b 45 0c             	mov    0xc(%ebp),%eax
   1549b:	88 10                	mov    %dl,(%eax)
    if (fifo->read >= fifo->size) { //循环队列的方式读取
   1549d:	8b 45 08             	mov    0x8(%ebp),%eax
   154a0:	8b 50 08             	mov    0x8(%eax),%edx
   154a3:	8b 45 08             	mov    0x8(%ebp),%eax
   154a6:	8b 40 04             	mov    0x4(%eax),%eax
   154a9:	39 c2                	cmp    %eax,%edx
   154ab:	7c 0a                	jl     154b7 <tty_fifo_get+0x66>
        fifo->read = 0;
   154ad:	8b 45 08             	mov    0x8(%ebp),%eax
   154b0:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    }

    fifo->count--;
   154b7:	8b 45 08             	mov    0x8(%ebp),%eax
   154ba:	8b 40 10             	mov    0x10(%eax),%eax
   154bd:	8d 50 ff             	lea    -0x1(%eax),%edx
   154c0:	8b 45 08             	mov    0x8(%ebp),%eax
   154c3:	89 50 10             	mov    %edx,0x10(%eax)

    //TODO:解锁
    idt_leave_protection(state);
   154c6:	83 ec 0c             	sub    $0xc,%esp
   154c9:	ff 75 f4             	push   -0xc(%ebp)
   154cc:	e8 f7 de ff ff       	call   133c8 <idt_leave_protection>
   154d1:	83 c4 10             	add    $0x10,%esp
    return 0;
   154d4:	b8 00 00 00 00       	mov    $0x0,%eax
}
   154d9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   154dc:	c9                   	leave  
   154dd:	c3                   	ret    

000154de <tty_open>:

/**
 * @brief 打开tty设备
 * 
 */
int tty_open(device_t *dev) {
   154de:	55                   	push   %ebp
   154df:	89 e5                	mov    %esp,%ebp
   154e1:	83 ec 18             	sub    $0x18,%esp
    int index = dev->dev_index;
   154e4:	8b 45 08             	mov    0x8(%ebp),%eax
   154e7:	8b 40 08             	mov    0x8(%eax),%eax
   154ea:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (index < 0 || index >= TTY_TABLE_SIZE) {
   154ed:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   154f1:	78 06                	js     154f9 <tty_open+0x1b>
   154f3:	83 7d f4 07          	cmpl   $0x7,-0xc(%ebp)
   154f7:	7e 1d                	jle    15516 <tty_open+0x38>
        log_printf("open tty failed. incorrect tty num = %d\n", index);
   154f9:	83 ec 08             	sub    $0x8,%esp
   154fc:	ff 75 f4             	push   -0xc(%ebp)
   154ff:	68 bc a5 01 00       	push   $0x1a5bc
   15504:	e8 8c 3f 00 00       	call   19495 <log_printf>
   15509:	83 c4 10             	add    $0x10,%esp
        return -1;
   1550c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15511:	e9 af 00 00 00       	jmp    155c5 <tty_open+0xe7>
    }

    tty_t *tty = tty_table + index;
   15516:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15519:	69 c0 54 04 00 00    	imul   $0x454,%eax,%eax
   1551f:	05 00 f6 04 00       	add    $0x4f600,%eax
   15524:	89 45 f0             	mov    %eax,-0x10(%ebp)
    //初始化输入输出缓冲队列
    tty_fifo_init(&tty->out_fifo, tty->out_buf, TTY_OBUF_SIZE);
   15527:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1552a:	8d 50 54             	lea    0x54(%eax),%edx
   1552d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15530:	83 c0 0c             	add    $0xc,%eax
   15533:	83 ec 04             	sub    $0x4,%esp
   15536:	68 00 02 00 00       	push   $0x200
   1553b:	52                   	push   %edx
   1553c:	50                   	push   %eax
   1553d:	e8 40 fe ff ff       	call   15382 <tty_fifo_init>
   15542:	83 c4 10             	add    $0x10,%esp
    tty_fifo_init(&tty->in_fifo, tty->in_buf, TTY_IBUF_SIZE);
   15545:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15548:	8d 90 54 02 00 00    	lea    0x254(%eax),%edx
   1554e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15551:	83 c0 20             	add    $0x20,%eax
   15554:	83 ec 04             	sub    $0x4,%esp
   15557:	68 00 02 00 00       	push   $0x200
   1555c:	52                   	push   %edx
   1555d:	50                   	push   %eax
   1555e:	e8 1f fe ff ff       	call   15382 <tty_fifo_init>
   15563:	83 c4 10             	add    $0x10,%esp

    //初始化缓冲区的信号量, 缓冲区的每一个字节都视为资源
    sem_init(&tty->out_sem, TTY_OBUF_SIZE); //输出缓冲区一开始有TTY_OBUF_SIZE大小的资源可写
   15566:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15569:	83 c0 34             	add    $0x34,%eax
   1556c:	83 ec 08             	sub    $0x8,%esp
   1556f:	68 00 02 00 00       	push   $0x200
   15574:	50                   	push   %eax
   15575:	e8 c6 2c 00 00       	call   18240 <sem_init>
   1557a:	83 c4 10             	add    $0x10,%esp
    sem_init(&tty->in_sem, 0);  //输入缓冲区一开始无资源可读
   1557d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15580:	83 c0 44             	add    $0x44,%eax
   15583:	83 ec 08             	sub    $0x8,%esp
   15586:	6a 00                	push   $0x0
   15588:	50                   	push   %eax
   15589:	e8 b2 2c 00 00       	call   18240 <sem_init>
   1558e:	83 c4 10             	add    $0x10,%esp

    //为tty设备绑定输出终端
    tty->console_index = index;
   15591:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15594:	8b 55 f4             	mov    -0xc(%ebp),%edx
   15597:	89 50 08             	mov    %edx,0x8(%eax)
    tty->oflags = TTY_OCRLF;    //默认开启输出模式下'\n'转换为'\r\n'的模式
   1559a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1559d:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    tty->iflags = TTY_INCLR | TTY_IECHO; //默认开启输入模式下的换行转换和字符回显
   155a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   155a6:	c7 40 04 03 00 00 00 	movl   $0x3,0x4(%eax)

    //初始化tty设备需要的键盘与终端
    kbd_init();
   155ad:	e8 a6 fb ff ff       	call   15158 <kbd_init>
    console_init(index);
   155b2:	83 ec 0c             	sub    $0xc,%esp
   155b5:	ff 75 f4             	push   -0xc(%ebp)
   155b8:	e8 fc e3 ff ff       	call   139b9 <console_init>
   155bd:	83 c4 10             	add    $0x10,%esp
    
    
    return 0;
   155c0:	b8 00 00 00 00       	mov    $0x0,%eax
}
   155c5:	c9                   	leave  
   155c6:	c3                   	ret    

000155c7 <tty_write>:

/**
 * @brief 写入tty设备
 * 
 */
int tty_write(device_t *dev, int addr, char *buf, int size) {
   155c7:	55                   	push   %ebp
   155c8:	89 e5                	mov    %esp,%ebp
   155ca:	83 ec 28             	sub    $0x28,%esp
    if (size < 0) {
   155cd:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   155d1:	79 0a                	jns    155dd <tty_write+0x16>
        return -1;
   155d3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   155d8:	e9 d8 00 00 00       	jmp    156b5 <tty_write+0xee>
    }

    //根据dev结构获取到对应的tty设备结构
    tty_t *tty = get_tty(dev);
   155dd:	83 ec 0c             	sub    $0xc,%esp
   155e0:	ff 75 08             	push   0x8(%ebp)
   155e3:	e8 4b fd ff ff       	call   15333 <get_tty>
   155e8:	83 c4 10             	add    $0x10,%esp
   155eb:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!tty) {
   155ee:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   155f2:	75 0a                	jne    155fe <tty_write+0x37>
        return -1;
   155f4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   155f9:	e9 b7 00 00 00       	jmp    156b5 <tty_write+0xee>
    }

    int len = 0;
   155fe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (size) {
   15605:	e9 98 00 00 00       	jmp    156a2 <tty_write+0xdb>

        //获取待写入字符
        char c = *(buf++);
   1560a:	8b 45 10             	mov    0x10(%ebp),%eax
   1560d:	8d 50 01             	lea    0x1(%eax),%edx
   15610:	89 55 10             	mov    %edx,0x10(%ebp)
   15613:	0f b6 00             	movzbl (%eax),%eax
   15616:	88 45 ef             	mov    %al,-0x11(%ebp)

        //当前输出为"\r\n"换行模式，
        if (c == '\n' && (tty->oflags & TTY_OCRLF)) {
   15619:	80 7d ef 0a          	cmpb   $0xa,-0x11(%ebp)
   1561d:	75 3b                	jne    1565a <tty_write+0x93>
   1561f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15622:	8b 00                	mov    (%eax),%eax
   15624:	83 e0 01             	and    $0x1,%eax
   15627:	85 c0                	test   %eax,%eax
   15629:	74 2f                	je     1565a <tty_write+0x93>
            sem_wait(&tty->out_sem);
   1562b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1562e:	83 c0 34             	add    $0x34,%eax
   15631:	83 ec 0c             	sub    $0xc,%esp
   15634:	50                   	push   %eax
   15635:	e8 48 2c 00 00       	call   18282 <sem_wait>
   1563a:	83 c4 10             	add    $0x10,%esp
            int err = tty_fifo_put(&tty->out_fifo, '\r');
   1563d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15640:	83 c0 0c             	add    $0xc,%eax
   15643:	83 ec 08             	sub    $0x8,%esp
   15646:	6a 0d                	push   $0xd
   15648:	50                   	push   %eax
   15649:	e8 6b fd ff ff       	call   153b9 <tty_fifo_put>
   1564e:	83 c4 10             	add    $0x10,%esp
   15651:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (err < 0) {
   15654:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   15658:	78 54                	js     156ae <tty_write+0xe7>
            }
        }

        //先获取到访问缓冲区一个字节资源的资格
        //若缓冲区写满就阻塞住，等待中断程序将缓冲区消耗掉再写
        sem_wait(&tty->out_sem);
   1565a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1565d:	83 c0 34             	add    $0x34,%eax
   15660:	83 ec 0c             	sub    $0xc,%esp
   15663:	50                   	push   %eax
   15664:	e8 19 2c 00 00       	call   18282 <sem_wait>
   15669:	83 c4 10             	add    $0x10,%esp

        int err = tty_fifo_put(&tty->out_fifo, c);
   1566c:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
   15670:	8b 55 f0             	mov    -0x10(%ebp),%edx
   15673:	83 c2 0c             	add    $0xc,%edx
   15676:	83 ec 08             	sub    $0x8,%esp
   15679:	50                   	push   %eax
   1567a:	52                   	push   %edx
   1567b:	e8 39 fd ff ff       	call   153b9 <tty_fifo_put>
   15680:	83 c4 10             	add    $0x10,%esp
   15683:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0) {
   15686:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   1568a:	78 25                	js     156b1 <tty_write+0xea>
            break;
        }

        len++;
   1568c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
        size--;
   15690:	83 6d 14 01          	subl   $0x1,0x14(%ebp)

        //显示器直接写显存，不需要写io端口
        //所以不需要交给中断处理程序，即当前进程自己往缓冲区写入并读取
        //此处是为了模仿当前进程对缓冲区写入的同时中断处理程序读取缓冲区
        //此处肯定不会阻塞在信号量中，但利用中断处理程序就会阻塞
        console_write(tty);
   15694:	83 ec 0c             	sub    $0xc,%esp
   15697:	ff 75 f0             	push   -0x10(%ebp)
   1569a:	e8 47 e8 ff ff       	call   13ee6 <console_write>
   1569f:	83 c4 10             	add    $0x10,%esp
    while (size) {
   156a2:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   156a6:	0f 85 5e ff ff ff    	jne    1560a <tty_write+0x43>
   156ac:	eb 04                	jmp    156b2 <tty_write+0xeb>
                break;
   156ae:	90                   	nop
   156af:	eb 01                	jmp    156b2 <tty_write+0xeb>
            break;
   156b1:	90                   	nop
    }
    


    return len;
   156b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
} 
   156b5:	c9                   	leave  
   156b6:	c3                   	ret    

000156b7 <tty_read>:

/**
 * @brief 读取读取设备
 * 
 */
int tty_read(device_t *dev, int addr, char *buf, int size) {
   156b7:	55                   	push   %ebp
   156b8:	89 e5                	mov    %esp,%ebp
   156ba:	83 ec 18             	sub    $0x18,%esp
    if (size < 0) {
   156bd:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   156c1:	79 0a                	jns    156cd <tty_read+0x16>
        return -1;
   156c3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   156c8:	e9 04 01 00 00       	jmp    157d1 <tty_read+0x11a>
    }

    //1.获取操作的tty设备
    tty_t *tty = get_tty(dev);
   156cd:	83 ec 0c             	sub    $0xc,%esp
   156d0:	ff 75 08             	push   0x8(%ebp)
   156d3:	e8 5b fc ff ff       	call   15333 <get_tty>
   156d8:	83 c4 10             	add    $0x10,%esp
   156db:	89 45 ec             	mov    %eax,-0x14(%ebp)
    
    char *pbuf = buf;
   156de:	8b 45 10             	mov    0x10(%ebp),%eax
   156e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int len = 0;
   156e4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    
    //2.从输入缓冲队列中读取字符到缓冲区buf中
    while (len < size) {
   156eb:	e9 d2 00 00 00       	jmp    157c2 <tty_read+0x10b>
        //2.1等待资源就绪
        sem_wait(&tty->in_sem);
   156f0:	8b 45 ec             	mov    -0x14(%ebp),%eax
   156f3:	83 c0 44             	add    $0x44,%eax
   156f6:	83 ec 0c             	sub    $0xc,%esp
   156f9:	50                   	push   %eax
   156fa:	e8 83 2b 00 00       	call   18282 <sem_wait>
   156ff:	83 c4 10             	add    $0x10,%esp

        //2.2资源已就绪，读取一个字符
        char ch;
        tty_fifo_get(&tty->in_fifo, &ch);
   15702:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15705:	8d 50 20             	lea    0x20(%eax),%edx
   15708:	83 ec 08             	sub    $0x8,%esp
   1570b:	8d 45 eb             	lea    -0x15(%ebp),%eax
   1570e:	50                   	push   %eax
   1570f:	52                   	push   %edx
   15710:	e8 3c fd ff ff       	call   15451 <tty_fifo_get>
   15715:	83 c4 10             	add    $0x10,%esp
        switch (ch) {
   15718:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   1571c:	0f be c0             	movsbl %al,%eax
   1571f:	83 f8 0a             	cmp    $0xa,%eax
   15722:	74 20                	je     15744 <tty_read+0x8d>
   15724:	83 f8 7f             	cmp    $0x7f,%eax
   15727:	75 55                	jne    1577e <tty_read+0xc7>
        case 0x7f:  //退格键不读取并删除buf中上一个读取到的字符
            if (len == 0) {
   15729:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1572d:	75 05                	jne    15734 <tty_read+0x7d>
   1572f:	e9 8e 00 00 00       	jmp    157c2 <tty_read+0x10b>
                continue;
            } else {
                len--;
   15734:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
                *(--pbuf) = '\0';
   15738:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
   1573c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1573f:	c6 00 00             	movb   $0x0,(%eax)
            }
            break;
   15742:	eb 4e                	jmp    15792 <tty_read+0xdb>
        case '\n':
            if ((tty->iflags & TTY_INCLR) && len < size - 1) {
   15744:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15747:	8b 40 04             	mov    0x4(%eax),%eax
   1574a:	83 e0 01             	and    $0x1,%eax
   1574d:	85 c0                	test   %eax,%eax
   1574f:	74 1b                	je     1576c <tty_read+0xb5>
   15751:	8b 45 14             	mov    0x14(%ebp),%eax
   15754:	83 e8 01             	sub    $0x1,%eax
   15757:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   1575a:	7d 10                	jge    1576c <tty_read+0xb5>
                //开启了换行转换
                *(pbuf++) = '\r';
   1575c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1575f:	8d 50 01             	lea    0x1(%eax),%edx
   15762:	89 55 f4             	mov    %edx,-0xc(%ebp)
   15765:	c6 00 0d             	movb   $0xd,(%eax)
                len++;
   15768:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
            }
            *(pbuf++) = '\n';
   1576c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1576f:	8d 50 01             	lea    0x1(%eax),%edx
   15772:	89 55 f4             	mov    %edx,-0xc(%ebp)
   15775:	c6 00 0a             	movb   $0xa,(%eax)
            len++;
   15778:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
            break;
   1577c:	eb 14                	jmp    15792 <tty_read+0xdb>
        default:
            *(pbuf++) = ch;
   1577e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15781:	8d 50 01             	lea    0x1(%eax),%edx
   15784:	89 55 f4             	mov    %edx,-0xc(%ebp)
   15787:	0f b6 55 eb          	movzbl -0x15(%ebp),%edx
   1578b:	88 10                	mov    %dl,(%eax)
            len++;
   1578d:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
            break;
   15791:	90                   	nop
        }

        //若tty设备开启了回显模式，则将输入回显到设备上
        if (tty->iflags & TTY_IECHO) {
   15792:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15795:	8b 40 04             	mov    0x4(%eax),%eax
   15798:	83 e0 02             	and    $0x2,%eax
   1579b:	85 c0                	test   %eax,%eax
   1579d:	74 13                	je     157b2 <tty_read+0xfb>
            tty_write(dev, 0, &ch, 1);
   1579f:	6a 01                	push   $0x1
   157a1:	8d 45 eb             	lea    -0x15(%ebp),%eax
   157a4:	50                   	push   %eax
   157a5:	6a 00                	push   $0x0
   157a7:	ff 75 08             	push   0x8(%ebp)
   157aa:	e8 18 fe ff ff       	call   155c7 <tty_write>
   157af:	83 c4 10             	add    $0x10,%esp
        }

        //若输入回车或者换行则直接停止读取
        if (ch == '\n' || ch == '\r') {
   157b2:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   157b6:	3c 0a                	cmp    $0xa,%al
   157b8:	74 14                	je     157ce <tty_read+0x117>
   157ba:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   157be:	3c 0d                	cmp    $0xd,%al
   157c0:	74 0c                	je     157ce <tty_read+0x117>
    while (len < size) {
   157c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   157c5:	3b 45 14             	cmp    0x14(%ebp),%eax
   157c8:	0f 8c 22 ff ff ff    	jl     156f0 <tty_read+0x39>
            break;
        }

    }

    return len;
   157ce:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   157d1:	c9                   	leave  
   157d2:	c3                   	ret    

000157d3 <tty_control>:

/**
 * @brief 向tty设备发送控制指令
 * 
 */
int tty_control(device_t *dev, int cmd, int arg0, int arg1) {
   157d3:	55                   	push   %ebp
   157d4:	89 e5                	mov    %esp,%ebp
   157d6:	53                   	push   %ebx
   157d7:	83 ec 14             	sub    $0x14,%esp
    tty_t *tty = get_tty(dev);
   157da:	83 ec 0c             	sub    $0xc,%esp
   157dd:	ff 75 08             	push   0x8(%ebp)
   157e0:	e8 4e fb ff ff       	call   15333 <get_tty>
   157e5:	83 c4 10             	add    $0x10,%esp
   157e8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    switch (cmd) {
   157eb:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
   157ef:	74 08                	je     157f9 <tty_control+0x26>
   157f1:	83 7d 0c 02          	cmpl   $0x2,0xc(%ebp)
   157f5:	74 2e                	je     15825 <tty_control+0x52>
		    if (arg0) {
			    *(int *)arg0 = sem_count(&tty->in_sem); 
		    }
		    break;
        default :
            break;
   157f7:	eb 4a                	jmp    15843 <tty_control+0x70>
            if (arg0) {
   157f9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   157fd:	74 13                	je     15812 <tty_control+0x3f>
                tty->iflags |= TTY_IECHO;
   157ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15802:	8b 40 04             	mov    0x4(%eax),%eax
   15805:	83 c8 02             	or     $0x2,%eax
   15808:	89 c2                	mov    %eax,%edx
   1580a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1580d:	89 50 04             	mov    %edx,0x4(%eax)
            break;
   15810:	eb 31                	jmp    15843 <tty_control+0x70>
                tty->iflags &= ~TTY_IECHO;
   15812:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15815:	8b 40 04             	mov    0x4(%eax),%eax
   15818:	83 e0 fd             	and    $0xfffffffd,%eax
   1581b:	89 c2                	mov    %eax,%edx
   1581d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15820:	89 50 04             	mov    %edx,0x4(%eax)
            break;
   15823:	eb 1e                	jmp    15843 <tty_control+0x70>
		    if (arg0) {
   15825:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   15829:	74 17                	je     15842 <tty_control+0x6f>
			    *(int *)arg0 = sem_count(&tty->in_sem); 
   1582b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1582e:	83 c0 44             	add    $0x44,%eax
   15831:	8b 5d 10             	mov    0x10(%ebp),%ebx
   15834:	83 ec 0c             	sub    $0xc,%esp
   15837:	50                   	push   %eax
   15838:	e8 64 2b 00 00       	call   183a1 <sem_count>
   1583d:	83 c4 10             	add    $0x10,%esp
   15840:	89 03                	mov    %eax,(%ebx)
		    break;
   15842:	90                   	nop
    }
    return 0;
   15843:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15848:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1584b:	c9                   	leave  
   1584c:	c3                   	ret    

0001584d <tty_close>:

/**
 * @brief 关闭tty设备
 * 
 */
void tty_close(device_t *dev) {
   1584d:	55                   	push   %ebp
   1584e:	89 e5                	mov    %esp,%ebp

}
   15850:	90                   	nop
   15851:	5d                   	pop    %ebp
   15852:	c3                   	ret    

00015853 <tty_in>:
 * @brief 将字符放入对应索引的tty设备的输入缓冲队列中
 * 
 * @param dev_index 
 * @param ch 
 */
void tty_in(char ch) {
   15853:	55                   	push   %ebp
   15854:	89 e5                	mov    %esp,%ebp
   15856:	83 ec 28             	sub    $0x28,%esp
   15859:	8b 45 08             	mov    0x8(%ebp),%eax
   1585c:	88 45 e4             	mov    %al,-0x1c(%ebp)
    //1.获取tty设备
    tty_t *tty = tty_table + curr_tty_index;
   1585f:	a1 a0 18 05 00       	mov    0x518a0,%eax
   15864:	69 c0 54 04 00 00    	imul   $0x454,%eax,%eax
   1586a:	05 00 f6 04 00       	add    $0x4f600,%eax
   1586f:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.判断输入缓冲区资源是否已准备满
    if (sem_count(&tty->in_sem) >= TTY_IBUF_SIZE) {
   15872:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15875:	83 c0 44             	add    $0x44,%eax
   15878:	83 ec 0c             	sub    $0xc,%esp
   1587b:	50                   	push   %eax
   1587c:	e8 20 2b 00 00       	call   183a1 <sem_count>
   15881:	83 c4 10             	add    $0x10,%esp
   15884:	3d ff 01 00 00       	cmp    $0x1ff,%eax
   15889:	7f 2b                	jg     158b6 <tty_in+0x63>
        //输入缓冲区已写满，放弃写入
        return;
    }

    //3.将字符写入输入缓冲队列
    tty_fifo_put(&tty->in_fifo, ch);
   1588b:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
   1588f:	8b 55 f4             	mov    -0xc(%ebp),%edx
   15892:	83 c2 20             	add    $0x20,%edx
   15895:	83 ec 08             	sub    $0x8,%esp
   15898:	50                   	push   %eax
   15899:	52                   	push   %edx
   1589a:	e8 1a fb ff ff       	call   153b9 <tty_fifo_put>
   1589f:	83 c4 10             	add    $0x10,%esp
    
    //4.准备好一份可读资源，唤醒等待的进程或添加可获取资源
    sem_notify(&tty->in_sem);
   158a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   158a5:	83 c0 44             	add    $0x44,%eax
   158a8:	83 ec 0c             	sub    $0xc,%esp
   158ab:	50                   	push   %eax
   158ac:	e8 51 2a 00 00       	call   18302 <sem_notify>
   158b1:	83 c4 10             	add    $0x10,%esp
   158b4:	eb 01                	jmp    158b7 <tty_in+0x64>
        return;
   158b6:	90                   	nop
}
   158b7:	c9                   	leave  
   158b8:	c3                   	ret    

000158b9 <tty_select>:
/**
 * @brief 通过索引号更改当前系统使用的tty设备
 * 
 * @param tty_index 
 */
void tty_select(int tty_index) {
   158b9:	55                   	push   %ebp
   158ba:	89 e5                	mov    %esp,%ebp
   158bc:	83 ec 08             	sub    $0x8,%esp
    if (tty_index != curr_tty_index) {
   158bf:	a1 a0 18 05 00       	mov    0x518a0,%eax
   158c4:	39 45 08             	cmp    %eax,0x8(%ebp)
   158c7:	74 16                	je     158df <tty_select+0x26>
        //选择对应的终端设备
       console_select(tty_index);
   158c9:	83 ec 0c             	sub    $0xc,%esp
   158cc:	ff 75 08             	push   0x8(%ebp)
   158cf:	e8 22 e7 ff ff       	call   13ff6 <console_select>
   158d4:	83 c4 10             	add    $0x10,%esp
       curr_tty_index = tty_index; 
   158d7:	8b 45 08             	mov    0x8(%ebp),%eax
   158da:	a3 a0 18 05 00       	mov    %eax,0x518a0
    }
}
   158df:	90                   	nop
   158e0:	c9                   	leave  
   158e1:	c3                   	ret    

000158e2 <devfs_mount>:
 * @param fs 
 * @param major 
 * @param minor 
 * @return int 
 */
int devfs_mount(struct _fs_t *fs, int major, int minor) {
   158e2:	55                   	push   %ebp
   158e3:	89 e5                	mov    %esp,%ebp
    fs->type = FS_DEVFS;
   158e5:	8b 45 08             	mov    0x8(%ebp),%eax
   158e8:	c7 80 00 02 00 00 00 	movl   $0x0,0x200(%eax)
   158ef:	00 00 00 
    return fs->type;
   158f2:	8b 45 08             	mov    0x8(%ebp),%eax
   158f5:	8b 80 00 02 00 00    	mov    0x200(%eax),%eax
}
   158fb:	5d                   	pop    %ebp
   158fc:	c3                   	ret    

000158fd <devfs_unmount>:
/**
 * @brief 卸载设备文件系统
 * 
 * @param fs 
 */
void devfs_unmount(struct _fs_t *fs) {
   158fd:	55                   	push   %ebp
   158fe:	89 e5                	mov    %esp,%ebp
} 
   15900:	90                   	nop
   15901:	5d                   	pop    %ebp
   15902:	c3                   	ret    

00015903 <devfs_open>:
 * @param fs 
 * @param path 
 * @param file 
 * @return int 
 */
int devfs_open(struct _fs_t *fs, const char *path, file_t *file) {
   15903:	55                   	push   %ebp
   15904:	89 e5                	mov    %esp,%ebp
   15906:	83 ec 28             	sub    $0x28,%esp
    //遍历设备类型表，获取需要打开的设备的信息
    for (int i = 0; i < sizeof(devfs_type_list) / sizeof(devfs_type_list[0]); ++i) {
   15909:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   15910:	e9 04 01 00 00       	jmp    15a19 <devfs_open+0x116>
        devfs_type_t *type = devfs_type_list + i;
   15915:	8b 55 f4             	mov    -0xc(%ebp),%edx
   15918:	89 d0                	mov    %edx,%eax
   1591a:	01 c0                	add    %eax,%eax
   1591c:	01 d0                	add    %edx,%eax
   1591e:	c1 e0 02             	shl    $0x2,%eax
   15921:	05 e0 b0 01 00       	add    $0x1b0e0,%eax
   15926:	89 45 f0             	mov    %eax,-0x10(%ebp)

        int type_name_len = kernel_strlen(type->name);
   15929:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1592c:	8b 00                	mov    (%eax),%eax
   1592e:	83 ec 0c             	sub    $0xc,%esp
   15931:	50                   	push   %eax
   15932:	e8 dd 32 00 00       	call   18c14 <kernel_strlen>
   15937:	83 c4 10             	add    $0x10,%esp
   1593a:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (kernel_strncmp(path, type->name, type_name_len) == 0) {
   1593d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15940:	8b 00                	mov    (%eax),%eax
   15942:	83 ec 04             	sub    $0x4,%esp
   15945:	ff 75 ec             	push   -0x14(%ebp)
   15948:	50                   	push   %eax
   15949:	ff 75 0c             	push   0xc(%ebp)
   1594c:	e8 42 32 00 00       	call   18b93 <kernel_strncmp>
   15951:	83 c4 10             	add    $0x10,%esp
   15954:	85 c0                	test   %eax,%eax
   15956:	0f 85 b9 00 00 00    	jne    15a15 <devfs_open+0x112>
            int minor;
            //判断路径是否正确并读取路径中的设备号
            if (kernel_strlen(path) > type_name_len && path_to_num(path + type_name_len, &minor) < 0) {
   1595c:	83 ec 0c             	sub    $0xc,%esp
   1595f:	ff 75 0c             	push   0xc(%ebp)
   15962:	e8 ad 32 00 00       	call   18c14 <kernel_strlen>
   15967:	83 c4 10             	add    $0x10,%esp
   1596a:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   1596d:	7d 34                	jge    159a3 <devfs_open+0xa0>
   1596f:	8b 55 ec             	mov    -0x14(%ebp),%edx
   15972:	8b 45 0c             	mov    0xc(%ebp),%eax
   15975:	01 c2                	add    %eax,%edx
   15977:	83 ec 08             	sub    $0x8,%esp
   1597a:	8d 45 e4             	lea    -0x1c(%ebp),%eax
   1597d:	50                   	push   %eax
   1597e:	52                   	push   %edx
   1597f:	e8 f2 18 00 00       	call   17276 <path_to_num>
   15984:	83 c4 10             	add    $0x10,%esp
   15987:	85 c0                	test   %eax,%eax
   15989:	79 18                	jns    159a3 <devfs_open+0xa0>
                log_printf("Get device num failed. %s", path);
   1598b:	83 ec 08             	sub    $0x8,%esp
   1598e:	ff 75 0c             	push   0xc(%ebp)
   15991:	68 e9 a5 01 00       	push   $0x1a5e9
   15996:	e8 fa 3a 00 00       	call   19495 <log_printf>
   1599b:	83 c4 10             	add    $0x10,%esp
                break;
   1599e:	e9 80 00 00 00       	jmp    15a23 <devfs_open+0x120>
            }

            //打开设备
            int dev_id = dev_open(type->dev_type, minor, (void*)0);
   159a3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   159a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   159a9:	8b 40 04             	mov    0x4(%eax),%eax
   159ac:	83 ec 04             	sub    $0x4,%esp
   159af:	6a 00                	push   $0x0
   159b1:	52                   	push   %edx
   159b2:	50                   	push   %eax
   159b3:	e8 60 e7 ff ff       	call   14118 <dev_open>
   159b8:	83 c4 10             	add    $0x10,%esp
   159bb:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (dev_id < 0) {
   159be:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   159c2:	79 15                	jns    159d9 <devfs_open+0xd6>
                log_printf("open device failed: %s", path);
   159c4:	83 ec 08             	sub    $0x8,%esp
   159c7:	ff 75 0c             	push   0xc(%ebp)
   159ca:	68 03 a6 01 00       	push   $0x1a603
   159cf:	e8 c1 3a 00 00       	call   19495 <log_printf>
   159d4:	83 c4 10             	add    $0x10,%esp
                break;
   159d7:	eb 4a                	jmp    15a23 <devfs_open+0x120>
            }

            //打开成功，初始化file结构，用file记录文件信息
            file->dev_id = dev_id;
   159d9:	8b 45 10             	mov    0x10(%ebp),%eax
   159dc:	8b 55 e8             	mov    -0x18(%ebp),%edx
   159df:	89 50 2c             	mov    %edx,0x2c(%eax)
            file->pos = 0;
   159e2:	8b 45 10             	mov    0x10(%ebp),%eax
   159e5:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
            file->size = 0;
   159ec:	8b 45 10             	mov    0x10(%ebp),%eax
   159ef:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
            file->type = type->file_type;
   159f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   159f9:	8b 40 08             	mov    0x8(%eax),%eax
   159fc:	89 c2                	mov    %eax,%edx
   159fe:	8b 45 10             	mov    0x10(%ebp),%eax
   15a01:	89 50 20             	mov    %edx,0x20(%eax)
            file->ref = 1;
   15a04:	8b 45 10             	mov    0x10(%ebp),%eax
   15a07:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)

            return 0;
   15a0e:	b8 00 00 00 00       	mov    $0x0,%eax
   15a13:	eb 13                	jmp    15a28 <devfs_open+0x125>
    for (int i = 0; i < sizeof(devfs_type_list) / sizeof(devfs_type_list[0]); ++i) {
   15a15:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   15a19:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   15a1d:	0f 84 f2 fe ff ff    	je     15915 <devfs_open+0x12>
        }
    }

    return -1;
   15a23:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
};
   15a28:	c9                   	leave  
   15a29:	c3                   	ret    

00015a2a <devfs_read>:
 * @param buf 
 * @param size 
 * @param file 
 * @return int 
 */
int devfs_read(char *buf, int size, file_t *file) {
   15a2a:	55                   	push   %ebp
   15a2b:	89 e5                	mov    %esp,%ebp
   15a2d:	83 ec 08             	sub    $0x8,%esp
    return dev_read(file->dev_id, file->pos, buf, size);
   15a30:	8b 45 10             	mov    0x10(%ebp),%eax
   15a33:	8b 50 30             	mov    0x30(%eax),%edx
   15a36:	8b 45 10             	mov    0x10(%ebp),%eax
   15a39:	8b 40 2c             	mov    0x2c(%eax),%eax
   15a3c:	ff 75 0c             	push   0xc(%ebp)
   15a3f:	ff 75 08             	push   0x8(%ebp)
   15a42:	52                   	push   %edx
   15a43:	50                   	push   %eax
   15a44:	e8 f8 e7 ff ff       	call   14241 <dev_read>
   15a49:	83 c4 10             	add    $0x10,%esp
}
   15a4c:	c9                   	leave  
   15a4d:	c3                   	ret    

00015a4e <devfs_write>:
 * @param buf 
 * @param size 
 * @param file 
 * @return int 
 */
int devfs_write(char *buf, int size, file_t *file) {
   15a4e:	55                   	push   %ebp
   15a4f:	89 e5                	mov    %esp,%ebp
   15a51:	83 ec 08             	sub    $0x8,%esp
    return dev_write(file->dev_id, file->pos, buf, size);
   15a54:	8b 45 10             	mov    0x10(%ebp),%eax
   15a57:	8b 50 30             	mov    0x30(%eax),%edx
   15a5a:	8b 45 10             	mov    0x10(%ebp),%eax
   15a5d:	8b 40 2c             	mov    0x2c(%eax),%eax
   15a60:	ff 75 0c             	push   0xc(%ebp)
   15a63:	ff 75 08             	push   0x8(%ebp)
   15a66:	52                   	push   %edx
   15a67:	50                   	push   %eax
   15a68:	e8 20 e8 ff ff       	call   1428d <dev_write>
   15a6d:	83 c4 10             	add    $0x10,%esp
}
   15a70:	c9                   	leave  
   15a71:	c3                   	ret    

00015a72 <devfs_close>:
/**
 * @brief 关闭设备文件系统
 * 
 * @param file 
 */
void devfs_close(file_t *file) {
   15a72:	55                   	push   %ebp
   15a73:	89 e5                	mov    %esp,%ebp
   15a75:	83 ec 08             	sub    $0x8,%esp
    dev_close(file->dev_id);
   15a78:	8b 45 08             	mov    0x8(%ebp),%eax
   15a7b:	8b 40 2c             	mov    0x2c(%eax),%eax
   15a7e:	83 ec 0c             	sub    $0xc,%esp
   15a81:	50                   	push   %eax
   15a82:	e8 9e e8 ff ff       	call   14325 <dev_close>
   15a87:	83 c4 10             	add    $0x10,%esp
}
   15a8a:	90                   	nop
   15a8b:	c9                   	leave  
   15a8c:	c3                   	ret    

00015a8d <devfs_seek>:
 * @param file 
 * @param offset 
 * @param dir 
 * @return int 
 */
int devfs_seek(file_t *file, uint32_t offset, int dir) {
   15a8d:	55                   	push   %ebp
   15a8e:	89 e5                	mov    %esp,%ebp
    //设备文件系统不支持偏移调用，直接返回-1;
    return -1;
   15a90:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   15a95:	5d                   	pop    %ebp
   15a96:	c3                   	ret    

00015a97 <devfs_stat>:
 * 
 * @param file 
 * @param st 
 * @return int 
 */
int devfs_stat(file_t *file, struct stat *st) {
   15a97:	55                   	push   %ebp
   15a98:	89 e5                	mov    %esp,%ebp
    //设备文件系统不支持该调用
    return -1;
   15a9a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   15a9f:	5d                   	pop    %ebp
   15aa0:	c3                   	ret    

00015aa1 <devfs_ioctl>:
 * @param cmd 
 * @param arg0 
 * @param arg1 
 * @return int 
 */
int devfs_ioctl(file_t *file, int cmd, int arg0, int arg1) {
   15aa1:	55                   	push   %ebp
   15aa2:	89 e5                	mov    %esp,%ebp
   15aa4:	83 ec 08             	sub    $0x8,%esp
    dev_control(file->dev_id, cmd, arg0, arg1);
   15aa7:	8b 45 08             	mov    0x8(%ebp),%eax
   15aaa:	8b 40 2c             	mov    0x2c(%eax),%eax
   15aad:	ff 75 14             	push   0x14(%ebp)
   15ab0:	ff 75 10             	push   0x10(%ebp)
   15ab3:	ff 75 0c             	push   0xc(%ebp)
   15ab6:	50                   	push   %eax
   15ab7:	e8 1d e8 ff ff       	call   142d9 <dev_control>
   15abc:	83 c4 10             	add    $0x10,%esp
}
   15abf:	90                   	nop
   15ac0:	c9                   	leave  
   15ac1:	c3                   	ret    

00015ac2 <up2>:
static inline uint32_t up2(uint32_t size, uint32_t bound) {
   15ac2:	55                   	push   %ebp
   15ac3:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   15ac5:	8b 55 08             	mov    0x8(%ebp),%edx
   15ac8:	8b 45 0c             	mov    0xc(%ebp),%eax
   15acb:	01 d0                	add    %edx,%eax
   15acd:	8d 50 ff             	lea    -0x1(%eax),%edx
   15ad0:	8b 45 0c             	mov    0xc(%ebp),%eax
   15ad3:	f7 d8                	neg    %eax
   15ad5:	21 d0                	and    %edx,%eax
}
   15ad7:	5d                   	pop    %ebp
   15ad8:	c3                   	ret    

00015ad9 <to_sfn>:
 *         拓展名不为空，则8个字节的最后一个字节为'.'
 * 
 * @param dest 
 * @param src 
 */
static void to_sfn(char* dest, const char* src) {
   15ad9:	55                   	push   %ebp
   15ada:	89 e5                	mov    %esp,%ebp
   15adc:	83 ec 18             	sub    $0x18,%esp
    kernel_memset(dest, ' ', SFN_LEN);
   15adf:	83 ec 04             	sub    $0x4,%esp
   15ae2:	6a 0b                	push   $0xb
   15ae4:	6a 20                	push   $0x20
   15ae6:	ff 75 08             	push   0x8(%ebp)
   15ae9:	e8 aa 31 00 00       	call   18c98 <kernel_memset>
   15aee:	83 c4 10             	add    $0x10,%esp

    // 不断生成直到遇到分隔符和写完缓存
    char * curr = dest;
   15af1:	8b 45 08             	mov    0x8(%ebp),%eax
   15af4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char * end = dest + SFN_LEN;
   15af7:	8b 45 08             	mov    0x8(%ebp),%eax
   15afa:	83 c0 0b             	add    $0xb,%eax
   15afd:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (*src && (curr < end)) {
   15b00:	eb 49                	jmp    15b4b <to_sfn+0x72>
        char c = *src++;
   15b02:	8b 45 0c             	mov    0xc(%ebp),%eax
   15b05:	8d 50 01             	lea    0x1(%eax),%edx
   15b08:	89 55 0c             	mov    %edx,0xc(%ebp)
   15b0b:	0f b6 00             	movzbl (%eax),%eax
   15b0e:	88 45 f3             	mov    %al,-0xd(%ebp)

        switch (c) {
   15b11:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
   15b15:	83 f8 2e             	cmp    $0x2e,%eax
   15b18:	75 0b                	jne    15b25 <to_sfn+0x4c>
        case '.':       // 隔附，跳到扩展名区，不写字符
            curr = dest + 8;
   15b1a:	8b 45 08             	mov    0x8(%ebp),%eax
   15b1d:	83 c0 08             	add    $0x8,%eax
   15b20:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   15b23:	eb 26                	jmp    15b4b <to_sfn+0x72>
        default:
            if ((c >= 'a') && (c <= 'z')) {
   15b25:	80 7d f3 60          	cmpb   $0x60,-0xd(%ebp)
   15b29:	7e 10                	jle    15b3b <to_sfn+0x62>
   15b2b:	80 7d f3 7a          	cmpb   $0x7a,-0xd(%ebp)
   15b2f:	7f 0a                	jg     15b3b <to_sfn+0x62>
                c = c - 'a' + 'A';
   15b31:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
   15b35:	83 e8 20             	sub    $0x20,%eax
   15b38:	88 45 f3             	mov    %al,-0xd(%ebp)
            }
            *curr++ = c;
   15b3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15b3e:	8d 50 01             	lea    0x1(%eax),%edx
   15b41:	89 55 f4             	mov    %edx,-0xc(%ebp)
   15b44:	0f b6 55 f3          	movzbl -0xd(%ebp),%edx
   15b48:	88 10                	mov    %dl,(%eax)
            break;
   15b4a:	90                   	nop
    while (*src && (curr < end)) {
   15b4b:	8b 45 0c             	mov    0xc(%ebp),%eax
   15b4e:	0f b6 00             	movzbl (%eax),%eax
   15b51:	84 c0                	test   %al,%al
   15b53:	74 08                	je     15b5d <to_sfn+0x84>
   15b55:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15b58:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   15b5b:	72 a5                	jb     15b02 <to_sfn+0x29>
        }
    }
}
   15b5d:	90                   	nop
   15b5e:	c9                   	leave  
   15b5f:	c3                   	ret    

00015b60 <diritem_init>:
 * @param item 
 * @param attr 
 * @param path 
 * @return int 
 */
static int diritem_init(diritem_t *item, uint8_t attr, const char *name) {
   15b60:	55                   	push   %ebp
   15b61:	89 e5                	mov    %esp,%ebp
   15b63:	83 ec 18             	sub    $0x18,%esp
   15b66:	8b 45 0c             	mov    0xc(%ebp),%eax
   15b69:	88 45 f4             	mov    %al,-0xc(%ebp)
    to_sfn((char *)item->DIR_Name, name);
   15b6c:	8b 45 08             	mov    0x8(%ebp),%eax
   15b6f:	83 ec 08             	sub    $0x8,%esp
   15b72:	ff 75 10             	push   0x10(%ebp)
   15b75:	50                   	push   %eax
   15b76:	e8 5e ff ff ff       	call   15ad9 <to_sfn>
   15b7b:	83 c4 10             	add    $0x10,%esp
    item->DIR_FstClusHI = (uint16_t)(FAT_CLUSTER_INVALID >> 16);
   15b7e:	8b 45 08             	mov    0x8(%ebp),%eax
   15b81:	66 c7 40 14 00 00    	movw   $0x0,0x14(%eax)
    item->DIR_FstClusLo = (uint16_t)(FAT_CLUSTER_INVALID & 0xffff);
   15b87:	8b 45 08             	mov    0x8(%ebp),%eax
   15b8a:	66 c7 40 1a f8 ff    	movw   $0xfff8,0x1a(%eax)
    item->DIR_FileSize = 0;
   15b90:	8b 45 08             	mov    0x8(%ebp),%eax
   15b93:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    item->DIR_Attr = attr;
   15b9a:	8b 45 08             	mov    0x8(%ebp),%eax
   15b9d:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
   15ba1:	88 50 0b             	mov    %dl,0xb(%eax)

    //以下数据本系统直接忽略
    //由kbos完成当天在windows磁盘管理器
    //创建的文件得到
    item->DIR_NTRes = 0x18;
   15ba4:	8b 45 08             	mov    0x8(%ebp),%eax
   15ba7:	c6 40 0c 18          	movb   $0x18,0xc(%eax)
    item->DIR_CrtDate = 0x570f;
   15bab:	8b 45 08             	mov    0x8(%ebp),%eax
   15bae:	66 c7 40 10 0f 57    	movw   $0x570f,0x10(%eax)
    item->DIR_CrtTime = 0x86d8;
   15bb4:	8b 45 08             	mov    0x8(%ebp),%eax
   15bb7:	66 c7 40 0e d8 86    	movw   $0x86d8,0xe(%eax)
    item->DIR_WrtDate = 0x570f;
   15bbd:	8b 45 08             	mov    0x8(%ebp),%eax
   15bc0:	66 c7 40 18 0f 57    	movw   $0x570f,0x18(%eax)
    item->DIR_WrtTime = 0x86e9;
   15bc6:	8b 45 08             	mov    0x8(%ebp),%eax
   15bc9:	66 c7 40 16 e9 86    	movw   $0x86e9,0x16(%eax)
    item->DIR_LastAccDate = 0x570f;
   15bcf:	8b 45 08             	mov    0x8(%ebp),%eax
   15bd2:	66 c7 40 12 0f 57    	movw   $0x570f,0x12(%eax)
    item->DIR_CrtTimeTeenth = 0x51;
   15bd8:	8b 45 08             	mov    0x8(%ebp),%eax
   15bdb:	c6 40 0d 51          	movb   $0x51,0xd(%eax)

    return 0;
   15bdf:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15be4:	c9                   	leave  
   15be5:	c3                   	ret    

00015be6 <cluster_is_valid>:
 * @brief 判断簇号是否有效
 * 
 * @param cluster 
 * @return int 
 */
static int cluster_is_valid(cluster_t cluster) {
   15be6:	55                   	push   %ebp
   15be7:	89 e5                	mov    %esp,%ebp
   15be9:	83 ec 04             	sub    $0x4,%esp
   15bec:	8b 45 08             	mov    0x8(%ebp),%eax
   15bef:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return (cluster < FAT_CLUSTER_INVALID) && (cluster >= 0x2);
   15bf3:	66 83 7d fc f7       	cmpw   $0xfff7,-0x4(%ebp)
   15bf8:	77 0e                	ja     15c08 <cluster_is_valid+0x22>
   15bfa:	66 83 7d fc 01       	cmpw   $0x1,-0x4(%ebp)
   15bff:	76 07                	jbe    15c08 <cluster_is_valid+0x22>
   15c01:	b8 01 00 00 00       	mov    $0x1,%eax
   15c06:	eb 05                	jmp    15c0d <cluster_is_valid+0x27>
   15c08:	b8 00 00 00 00       	mov    $0x0,%eax
} 
   15c0d:	c9                   	leave  
   15c0e:	c3                   	ret    

00015c0f <fat_read_sector>:
 * 
 * @param fat 
 * @param sector 
 * @return int 
 */
static int fat_read_sector(fat_t *fat, int sector) {
   15c0f:	55                   	push   %ebp
   15c10:	89 e5                	mov    %esp,%ebp
   15c12:	83 ec 18             	sub    $0x18,%esp
    //要读扇区已被缓存，直接返回即可
    if (sector == fat->curr_sector) {
   15c15:	8b 45 08             	mov    0x8(%ebp),%eax
   15c18:	8b 50 24             	mov    0x24(%eax),%edx
   15c1b:	8b 45 0c             	mov    0xc(%ebp),%eax
   15c1e:	39 c2                	cmp    %eax,%edx
   15c20:	75 07                	jne    15c29 <fat_read_sector+0x1a>
        return 0;
   15c22:	b8 00 00 00 00       	mov    $0x0,%eax
   15c27:	eb 3f                	jmp    15c68 <fat_read_sector+0x59>
    }

    //读取信的扇区，并记录扇区号
    int cnt = dev_read(fat->fs->dev_id, sector, fat->fat_buffer, 1);
   15c29:	8b 45 08             	mov    0x8(%ebp),%eax
   15c2c:	8b 50 28             	mov    0x28(%eax),%edx
   15c2f:	8b 45 08             	mov    0x8(%ebp),%eax
   15c32:	8b 40 2c             	mov    0x2c(%eax),%eax
   15c35:	8b 80 18 02 00 00    	mov    0x218(%eax),%eax
   15c3b:	6a 01                	push   $0x1
   15c3d:	52                   	push   %edx
   15c3e:	ff 75 0c             	push   0xc(%ebp)
   15c41:	50                   	push   %eax
   15c42:	e8 fa e5 ff ff       	call   14241 <dev_read>
   15c47:	83 c4 10             	add    $0x10,%esp
   15c4a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (cnt == 1) {
   15c4d:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   15c51:	75 10                	jne    15c63 <fat_read_sector+0x54>
        fat->curr_sector = sector;
   15c53:	8b 55 0c             	mov    0xc(%ebp),%edx
   15c56:	8b 45 08             	mov    0x8(%ebp),%eax
   15c59:	89 50 24             	mov    %edx,0x24(%eax)
        return 0;
   15c5c:	b8 00 00 00 00       	mov    $0x0,%eax
   15c61:	eb 05                	jmp    15c68 <fat_read_sector+0x59>
    }

    return -1;
   15c63:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   15c68:	c9                   	leave  
   15c69:	c3                   	ret    

00015c6a <fat_write_sector>:
 * 
 * @param fat 
 * @param sector 
 * @return int 
 */
static int fat_write_sector(fat_t *fat, int sector) {
   15c6a:	55                   	push   %ebp
   15c6b:	89 e5                	mov    %esp,%ebp
   15c6d:	83 ec 18             	sub    $0x18,%esp
    int cnt = dev_write(fat->fs->dev_id, sector, fat->fat_buffer, 1);
   15c70:	8b 45 08             	mov    0x8(%ebp),%eax
   15c73:	8b 50 28             	mov    0x28(%eax),%edx
   15c76:	8b 45 08             	mov    0x8(%ebp),%eax
   15c79:	8b 40 2c             	mov    0x2c(%eax),%eax
   15c7c:	8b 80 18 02 00 00    	mov    0x218(%eax),%eax
   15c82:	6a 01                	push   $0x1
   15c84:	52                   	push   %edx
   15c85:	ff 75 0c             	push   0xc(%ebp)
   15c88:	50                   	push   %eax
   15c89:	e8 ff e5 ff ff       	call   1428d <dev_write>
   15c8e:	83 c4 10             	add    $0x10,%esp
   15c91:	89 45 f4             	mov    %eax,-0xc(%ebp)

    return (cnt == 1) ? 0 : -1;
   15c94:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   15c98:	75 07                	jne    15ca1 <fat_write_sector+0x37>
   15c9a:	b8 00 00 00 00       	mov    $0x0,%eax
   15c9f:	eb 05                	jmp    15ca6 <fat_write_sector+0x3c>
   15ca1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   15ca6:	c9                   	leave  
   15ca7:	c3                   	ret    

00015ca8 <cluster_get_next>:
 * 
 * @param fat 
 * @param cblk 
 * @return int 
 */
static int cluster_get_next(fat_t *fat, cluster_t cblk) {
   15ca8:	55                   	push   %ebp
   15ca9:	89 e5                	mov    %esp,%ebp
   15cab:	83 ec 28             	sub    $0x28,%esp
   15cae:	8b 45 0c             	mov    0xc(%ebp),%eax
   15cb1:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
    //簇号无效
    if (!cluster_is_valid(cblk)) {
   15cb5:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
   15cb9:	50                   	push   %eax
   15cba:	e8 27 ff ff ff       	call   15be6 <cluster_is_valid>
   15cbf:	83 c4 04             	add    $0x4,%esp
   15cc2:	85 c0                	test   %eax,%eax
   15cc4:	75 0a                	jne    15cd0 <cluster_get_next+0x28>
        return FAT_CLUSTER_INVALID;
   15cc6:	b8 f8 ff 00 00       	mov    $0xfff8,%eax
   15ccb:	e9 94 00 00 00       	jmp    15d64 <cluster_get_next+0xbc>
    }

    //计算当前簇cblk在对应分区中的扇区号
    //fat表保存了簇链关系，
    int offset = cblk * sizeof(cluster_t);
   15cd0:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
   15cd4:	01 c0                	add    %eax,%eax
   15cd6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int sector = offset / fat->bytes_per_sector;
   15cd9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15cdc:	8b 55 08             	mov    0x8(%ebp),%edx
   15cdf:	8b 4a 0c             	mov    0xc(%edx),%ecx
   15ce2:	ba 00 00 00 00       	mov    $0x0,%edx
   15ce7:	f7 f1                	div    %ecx
   15ce9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    //计算该簇在扇区中的偏移量
    int off_in_sector = offset % fat->bytes_per_sector;
   15cec:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15cef:	8b 55 08             	mov    0x8(%ebp),%edx
   15cf2:	8b 4a 0c             	mov    0xc(%edx),%ecx
   15cf5:	ba 00 00 00 00       	mov    $0x0,%edx
   15cfa:	f7 f1                	div    %ecx
   15cfc:	89 d0                	mov    %edx,%eax
   15cfe:	89 45 ec             	mov    %eax,-0x14(%ebp)

    if (sector >= fat->tbl_sectors) {
   15d01:	8b 45 08             	mov    0x8(%ebp),%eax
   15d04:	8b 50 08             	mov    0x8(%eax),%edx
   15d07:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15d0a:	39 c2                	cmp    %eax,%edx
   15d0c:	77 1c                	ja     15d2a <cluster_get_next+0x82>
        log_printf("cluster too big: %d\n", cblk);
   15d0e:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
   15d12:	83 ec 08             	sub    $0x8,%esp
   15d15:	50                   	push   %eax
   15d16:	68 1c a6 01 00       	push   $0x1a61c
   15d1b:	e8 75 37 00 00       	call   19495 <log_printf>
   15d20:	83 c4 10             	add    $0x10,%esp
        return FAT_CLUSTER_INVALID;
   15d23:	b8 f8 ff 00 00       	mov    $0xfff8,%eax
   15d28:	eb 3a                	jmp    15d64 <cluster_get_next+0xbc>
    }

    int err = fat_read_sector(fat, fat->tbl_start_sector + sector);
   15d2a:	8b 45 08             	mov    0x8(%ebp),%eax
   15d2d:	8b 10                	mov    (%eax),%edx
   15d2f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15d32:	01 d0                	add    %edx,%eax
   15d34:	83 ec 08             	sub    $0x8,%esp
   15d37:	50                   	push   %eax
   15d38:	ff 75 08             	push   0x8(%ebp)
   15d3b:	e8 cf fe ff ff       	call   15c0f <fat_read_sector>
   15d40:	83 c4 10             	add    $0x10,%esp
   15d43:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (err < 0) {
   15d46:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   15d4a:	79 07                	jns    15d53 <cluster_get_next+0xab>
        return FAT_CLUSTER_INVALID;
   15d4c:	b8 f8 ff 00 00       	mov    $0xfff8,%eax
   15d51:	eb 11                	jmp    15d64 <cluster_get_next+0xbc>
    }

    return *(cluster_t *)(fat->fat_buffer + off_in_sector);
   15d53:	8b 45 08             	mov    0x8(%ebp),%eax
   15d56:	8b 50 28             	mov    0x28(%eax),%edx
   15d59:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15d5c:	01 d0                	add    %edx,%eax
   15d5e:	0f b7 00             	movzwl (%eax),%eax
   15d61:	0f b7 c0             	movzwl %ax,%eax
}
   15d64:	c9                   	leave  
   15d65:	c3                   	ret    

00015d66 <cluster_set_next>:
 * 
 * @param fat 
 * @param start 
 * @param next 
 */
static int cluster_set_next(fat_t *fat, cluster_t start, cluster_t next) {
   15d66:	55                   	push   %ebp
   15d67:	89 e5                	mov    %esp,%ebp
   15d69:	83 ec 38             	sub    $0x38,%esp
   15d6c:	8b 55 0c             	mov    0xc(%ebp),%edx
   15d6f:	8b 45 10             	mov    0x10(%ebp),%eax
   15d72:	66 89 55 d4          	mov    %dx,-0x2c(%ebp)
   15d76:	66 89 45 d0          	mov    %ax,-0x30(%ebp)
     //簇号无效
    if (!cluster_is_valid(start)) {
   15d7a:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
   15d7e:	50                   	push   %eax
   15d7f:	e8 62 fe ff ff       	call   15be6 <cluster_is_valid>
   15d84:	83 c4 04             	add    $0x4,%esp
   15d87:	85 c0                	test   %eax,%eax
   15d89:	75 0a                	jne    15d95 <cluster_set_next+0x2f>
        return FAT_CLUSTER_INVALID;
   15d8b:	b8 f8 ff 00 00       	mov    $0xfff8,%eax
   15d90:	e9 fe 00 00 00       	jmp    15e93 <cluster_set_next+0x12d>
    }

    //计算当前簇cblk在对应分区中的扇区号
    //fat表保存了簇链关系，
    int offset = start * sizeof(cluster_t);
   15d95:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
   15d99:	01 c0                	add    %eax,%eax
   15d9b:	89 45 ec             	mov    %eax,-0x14(%ebp)
    int sector = offset / fat->bytes_per_sector;
   15d9e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15da1:	8b 55 08             	mov    0x8(%ebp),%edx
   15da4:	8b 4a 0c             	mov    0xc(%edx),%ecx
   15da7:	ba 00 00 00 00       	mov    $0x0,%edx
   15dac:	f7 f1                	div    %ecx
   15dae:	89 45 f4             	mov    %eax,-0xc(%ebp)
    //计算该簇在扇区中的偏移量
    int off_in_sector = offset % fat->bytes_per_sector;
   15db1:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15db4:	8b 55 08             	mov    0x8(%ebp),%edx
   15db7:	8b 4a 0c             	mov    0xc(%edx),%ecx
   15dba:	ba 00 00 00 00       	mov    $0x0,%edx
   15dbf:	f7 f1                	div    %ecx
   15dc1:	89 d0                	mov    %edx,%eax
   15dc3:	89 45 e8             	mov    %eax,-0x18(%ebp)

    if (sector >= fat->tbl_sectors) {
   15dc6:	8b 45 08             	mov    0x8(%ebp),%eax
   15dc9:	8b 50 08             	mov    0x8(%eax),%edx
   15dcc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15dcf:	39 c2                	cmp    %eax,%edx
   15dd1:	77 1f                	ja     15df2 <cluster_set_next+0x8c>
        log_printf("cluster too big: %d\n", start);
   15dd3:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
   15dd7:	83 ec 08             	sub    $0x8,%esp
   15dda:	50                   	push   %eax
   15ddb:	68 1c a6 01 00       	push   $0x1a61c
   15de0:	e8 b0 36 00 00       	call   19495 <log_printf>
   15de5:	83 c4 10             	add    $0x10,%esp
        return FAT_CLUSTER_INVALID;
   15de8:	b8 f8 ff 00 00       	mov    $0xfff8,%eax
   15ded:	e9 a1 00 00 00       	jmp    15e93 <cluster_set_next+0x12d>
    }

    //将该簇号所在的扇区读到缓冲区fat_buffer中
    int err = fat_read_sector(fat, fat->tbl_start_sector + sector);
   15df2:	8b 45 08             	mov    0x8(%ebp),%eax
   15df5:	8b 10                	mov    (%eax),%edx
   15df7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15dfa:	01 d0                	add    %edx,%eax
   15dfc:	83 ec 08             	sub    $0x8,%esp
   15dff:	50                   	push   %eax
   15e00:	ff 75 08             	push   0x8(%ebp)
   15e03:	e8 07 fe ff ff       	call   15c0f <fat_read_sector>
   15e08:	83 c4 10             	add    $0x10,%esp
   15e0b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (err < 0) {
   15e0e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   15e12:	79 07                	jns    15e1b <cluster_set_next+0xb5>
        return FAT_CLUSTER_INVALID;
   15e14:	b8 f8 ff 00 00       	mov    $0xfff8,%eax
   15e19:	eb 78                	jmp    15e93 <cluster_set_next+0x12d>
    }

    //将缓冲区中该表项的值设未next
    *(cluster_t *)(fat->fat_buffer + off_in_sector) = next;
   15e1b:	8b 45 08             	mov    0x8(%ebp),%eax
   15e1e:	8b 50 28             	mov    0x28(%eax),%edx
   15e21:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15e24:	01 c2                	add    %eax,%edx
   15e26:	0f b7 45 d0          	movzwl -0x30(%ebp),%eax
   15e2a:	66 89 02             	mov    %ax,(%edx)
    //再将缓冲区覆盖到磁盘对应区域
    for (int i = 0; i < fat->tbl_cnt; ++i) {
   15e2d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   15e34:	eb 4b                	jmp    15e81 <cluster_set_next+0x11b>
        err = fat_write_sector(fat, fat->tbl_start_sector + sector);
   15e36:	8b 45 08             	mov    0x8(%ebp),%eax
   15e39:	8b 10                	mov    (%eax),%edx
   15e3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15e3e:	01 d0                	add    %edx,%eax
   15e40:	83 ec 08             	sub    $0x8,%esp
   15e43:	50                   	push   %eax
   15e44:	ff 75 08             	push   0x8(%ebp)
   15e47:	e8 1e fe ff ff       	call   15c6a <fat_write_sector>
   15e4c:	83 c4 10             	add    $0x10,%esp
   15e4f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0) {
   15e52:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   15e56:	79 17                	jns    15e6f <cluster_set_next+0x109>
            log_printf("write cluster failed.\n");
   15e58:	83 ec 0c             	sub    $0xc,%esp
   15e5b:	68 31 a6 01 00       	push   $0x1a631
   15e60:	e8 30 36 00 00       	call   19495 <log_printf>
   15e65:	83 c4 10             	add    $0x10,%esp
            return -1;
   15e68:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15e6d:	eb 24                	jmp    15e93 <cluster_set_next+0x12d>
        }

        //偏移一个fat表的大小，将相邻的第二个fat表的对应位置也清空
        sector += fat->tbl_sectors;
   15e6f:	8b 45 08             	mov    0x8(%ebp),%eax
   15e72:	8b 50 08             	mov    0x8(%eax),%edx
   15e75:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15e78:	01 d0                	add    %edx,%eax
   15e7a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (int i = 0; i < fat->tbl_cnt; ++i) {
   15e7d:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   15e81:	8b 45 08             	mov    0x8(%ebp),%eax
   15e84:	8b 50 04             	mov    0x4(%eax),%edx
   15e87:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15e8a:	39 c2                	cmp    %eax,%edx
   15e8c:	77 a8                	ja     15e36 <cluster_set_next+0xd0>
    }

    return 0;
   15e8e:	b8 00 00 00 00       	mov    $0x0,%eax

}
   15e93:	c9                   	leave  
   15e94:	c3                   	ret    

00015e95 <cluster_free_chain>:
 * @brief 清除fat表中的簇链关系
 * 
 * @param fat 
 * @param start 
 */
void cluster_free_chain(fat_t *fat, cluster_t start) {
   15e95:	55                   	push   %ebp
   15e96:	89 e5                	mov    %esp,%ebp
   15e98:	83 ec 28             	sub    $0x28,%esp
   15e9b:	8b 45 0c             	mov    0xc(%ebp),%eax
   15e9e:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
    //链式清空
    while (cluster_is_valid(start)) {
   15ea2:	eb 34                	jmp    15ed8 <cluster_free_chain+0x43>
        cluster_t next = cluster_get_next(fat, start);
   15ea4:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
   15ea8:	83 ec 08             	sub    $0x8,%esp
   15eab:	50                   	push   %eax
   15eac:	ff 75 08             	push   0x8(%ebp)
   15eaf:	e8 f4 fd ff ff       	call   15ca8 <cluster_get_next>
   15eb4:	83 c4 10             	add    $0x10,%esp
   15eb7:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
        cluster_set_next(fat, start, CLUSTER_FAT_FREE);
   15ebb:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
   15ebf:	83 ec 04             	sub    $0x4,%esp
   15ec2:	6a 00                	push   $0x0
   15ec4:	50                   	push   %eax
   15ec5:	ff 75 08             	push   0x8(%ebp)
   15ec8:	e8 99 fe ff ff       	call   15d66 <cluster_set_next>
   15ecd:	83 c4 10             	add    $0x10,%esp
        start = next;
   15ed0:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   15ed4:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
    while (cluster_is_valid(start)) {
   15ed8:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
   15edc:	83 ec 0c             	sub    $0xc,%esp
   15edf:	50                   	push   %eax
   15ee0:	e8 01 fd ff ff       	call   15be6 <cluster_is_valid>
   15ee5:	83 c4 10             	add    $0x10,%esp
   15ee8:	85 c0                	test   %eax,%eax
   15eea:	75 b8                	jne    15ea4 <cluster_free_chain+0xf>
    }
}
   15eec:	90                   	nop
   15eed:	90                   	nop
   15eee:	c9                   	leave  
   15eef:	c3                   	ret    

00015ef0 <cluster_alloc_free>:
 * 
 * @param fat 
 * @param cnt 
 * @return cluster_t 
 */
static cluster_t cluster_alloc_free(fat_t *fat, int cnt) {
   15ef0:	55                   	push   %ebp
   15ef1:	89 e5                	mov    %esp,%ebp
   15ef3:	83 ec 28             	sub    $0x28,%esp
    cluster_t start = FAT_CLUSTER_INVALID;
   15ef6:	66 c7 45 f6 f8 ff    	movw   $0xfff8,-0xa(%ebp)
    cluster_t pre = FAT_CLUSTER_INVALID;
   15efc:	66 c7 45 f4 f8 ff    	movw   $0xfff8,-0xc(%ebp)
    cluster_t curr;
    
    //计算一个fat表中有多少个簇号
    int c_total = fat->tbl_sectors * fat->bytes_per_sector / sizeof(cluster_t);
   15f02:	8b 45 08             	mov    0x8(%ebp),%eax
   15f05:	8b 50 08             	mov    0x8(%eax),%edx
   15f08:	8b 45 08             	mov    0x8(%ebp),%eax
   15f0b:	8b 40 0c             	mov    0xc(%eax),%eax
   15f0e:	0f af c2             	imul   %edx,%eax
   15f11:	d1 e8                	shr    %eax
   15f13:	89 45 ec             	mov    %eax,-0x14(%ebp)
    //0,1簇号未使用
    for (curr = 2; cnt && (curr < c_total); ++curr) {
   15f16:	66 c7 45 f2 02 00    	movw   $0x2,-0xe(%ebp)
   15f1c:	e9 9a 00 00 00       	jmp    15fbb <cluster_alloc_free+0xcb>
        cluster_t free = cluster_get_next(fat, curr);
   15f21:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   15f25:	83 ec 08             	sub    $0x8,%esp
   15f28:	50                   	push   %eax
   15f29:	ff 75 08             	push   0x8(%ebp)
   15f2c:	e8 77 fd ff ff       	call   15ca8 <cluster_get_next>
   15f31:	83 c4 10             	add    $0x10,%esp
   15f34:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
        //当前簇curr没有链接关系，可供分配
        if (free == CLUSTER_FAT_FREE) {
   15f38:	66 83 7d ea 00       	cmpw   $0x0,-0x16(%ebp)
   15f3d:	75 77                	jne    15fb6 <cluster_alloc_free+0xc6>
            if (!cluster_is_valid(start)) {
   15f3f:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   15f43:	83 ec 0c             	sub    $0xc,%esp
   15f46:	50                   	push   %eax
   15f47:	e8 9a fc ff ff       	call   15be6 <cluster_is_valid>
   15f4c:	83 c4 10             	add    $0x10,%esp
   15f4f:	85 c0                	test   %eax,%eax
   15f51:	75 08                	jne    15f5b <cluster_alloc_free+0x6b>
                //链头还未分配，先分配链头
                start = curr;
   15f53:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   15f57:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
            }

            if (cluster_is_valid(pre)) {
   15f5b:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
   15f5f:	83 ec 0c             	sub    $0xc,%esp
   15f62:	50                   	push   %eax
   15f63:	e8 7e fc ff ff       	call   15be6 <cluster_is_valid>
   15f68:	83 c4 10             	add    $0x10,%esp
   15f6b:	85 c0                	test   %eax,%eax
   15f6d:	74 3b                	je     15faa <cluster_alloc_free+0xba>
                //前驱簇号有效且刚分配，则设置curr为pre的后继
                int err = cluster_set_next(fat, pre, curr);
   15f6f:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
   15f73:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
   15f77:	83 ec 04             	sub    $0x4,%esp
   15f7a:	52                   	push   %edx
   15f7b:	50                   	push   %eax
   15f7c:	ff 75 08             	push   0x8(%ebp)
   15f7f:	e8 e2 fd ff ff       	call   15d66 <cluster_set_next>
   15f84:	83 c4 10             	add    $0x10,%esp
   15f87:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                if (err < 0) {
   15f8a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   15f8e:	79 1a                	jns    15faa <cluster_alloc_free+0xba>
                    cluster_free_chain(fat, start);
   15f90:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   15f94:	83 ec 08             	sub    $0x8,%esp
   15f97:	50                   	push   %eax
   15f98:	ff 75 08             	push   0x8(%ebp)
   15f9b:	e8 f5 fe ff ff       	call   15e95 <cluster_free_chain>
   15fa0:	83 c4 10             	add    $0x10,%esp
                    return FAT_CLUSTER_INVALID;
   15fa3:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
   15fa8:	eb 69                	jmp    16013 <cluster_alloc_free+0x123>
                }
            }
            
            //分配成功一个簇，更新pre和cnt
            pre = curr;
   15faa:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   15fae:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
            cnt--;
   15fb2:	83 6d 0c 01          	subl   $0x1,0xc(%ebp)
    for (curr = 2; cnt && (curr < c_total); ++curr) {
   15fb6:	66 83 45 f2 01       	addw   $0x1,-0xe(%ebp)
   15fbb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   15fbf:	74 0d                	je     15fce <cluster_alloc_free+0xde>
   15fc1:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   15fc5:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   15fc8:	0f 8f 53 ff ff ff    	jg     15f21 <cluster_alloc_free+0x31>
        }
    }

    //设置最后一个簇的后继为无效簇标志
    if (cnt == 0) {
   15fce:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   15fd2:	75 3b                	jne    1600f <cluster_alloc_free+0x11f>
        int err = cluster_set_next(fat, pre, FAT_CLUSTER_INVALID);
   15fd4:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
   15fd8:	83 ec 04             	sub    $0x4,%esp
   15fdb:	68 f8 ff 00 00       	push   $0xfff8
   15fe0:	50                   	push   %eax
   15fe1:	ff 75 08             	push   0x8(%ebp)
   15fe4:	e8 7d fd ff ff       	call   15d66 <cluster_set_next>
   15fe9:	83 c4 10             	add    $0x10,%esp
   15fec:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (err < 0) {
   15fef:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   15ff3:	79 1a                	jns    1600f <cluster_alloc_free+0x11f>
            cluster_free_chain(fat, start);
   15ff5:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   15ff9:	83 ec 08             	sub    $0x8,%esp
   15ffc:	50                   	push   %eax
   15ffd:	ff 75 08             	push   0x8(%ebp)
   16000:	e8 90 fe ff ff       	call   15e95 <cluster_free_chain>
   16005:	83 c4 10             	add    $0x10,%esp
            return FAT_CLUSTER_INVALID;
   16008:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
   1600d:	eb 04                	jmp    16013 <cluster_alloc_free+0x123>
        }
    }

    return start;
   1600f:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
}
   16013:	c9                   	leave  
   16014:	c3                   	ret    

00016015 <expand_file>:
 * 
 * @param file 
 * @param inc_size 
 * @return int 
 */
static int expand_file(file_t *file, int inc_bytes) {
   16015:	55                   	push   %ebp
   16016:	89 e5                	mov    %esp,%ebp
   16018:	53                   	push   %ebx
   16019:	83 ec 24             	sub    $0x24,%esp
    fat_t *fat = (fat_t*)file->fs->data;
   1601c:	8b 45 08             	mov    0x8(%ebp),%eax
   1601f:	8b 40 28             	mov    0x28(%eax),%eax
   16022:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   16028:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    //计算文件需要拓展多少个簇
    int  cluster_cnt;
    if (file->size % fat->cluster_bytes_size == 0) {
   1602b:	8b 45 08             	mov    0x8(%ebp),%eax
   1602e:	8b 40 38             	mov    0x38(%eax),%eax
   16031:	8b 55 f0             	mov    -0x10(%ebp),%edx
   16034:	8b 4a 20             	mov    0x20(%edx),%ecx
   16037:	ba 00 00 00 00       	mov    $0x0,%edx
   1603c:	f7 f1                	div    %ecx
   1603e:	89 d0                	mov    %edx,%eax
   16040:	85 c0                	test   %eax,%eax
   16042:	75 25                	jne    16069 <expand_file+0x54>
        //文件原始大小刚好装满已分配的最后一簇
        //以簇为单位，计算需要拓展的簇的数量
        cluster_cnt = up2(inc_bytes, fat->cluster_bytes_size) / fat->cluster_bytes_size;
   16044:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16047:	8b 50 20             	mov    0x20(%eax),%edx
   1604a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1604d:	52                   	push   %edx
   1604e:	50                   	push   %eax
   1604f:	e8 6e fa ff ff       	call   15ac2 <up2>
   16054:	83 c4 08             	add    $0x8,%esp
   16057:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1605a:	8b 5a 20             	mov    0x20(%edx),%ebx
   1605d:	ba 00 00 00 00       	mov    $0x0,%edx
   16062:	f7 f3                	div    %ebx
   16064:	89 45 f4             	mov    %eax,-0xc(%ebp)
   16067:	eb 58                	jmp    160c1 <expand_file+0xac>
    } else {
        //文件原始分配的最后一个簇空间还未装满
        //计算最后一个簇的空间余量
        int cluster_free = fat->cluster_bytes_size - (file->size % fat->cluster_bytes_size);
   16069:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1606c:	8b 48 20             	mov    0x20(%eax),%ecx
   1606f:	8b 45 08             	mov    0x8(%ebp),%eax
   16072:	8b 40 38             	mov    0x38(%eax),%eax
   16075:	8b 55 f0             	mov    -0x10(%ebp),%edx
   16078:	8b 5a 20             	mov    0x20(%edx),%ebx
   1607b:	ba 00 00 00 00       	mov    $0x0,%edx
   16080:	f7 f3                	div    %ebx
   16082:	89 c8                	mov    %ecx,%eax
   16084:	29 d0                	sub    %edx,%eax
   16086:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (cluster_free >= inc_bytes) {
   16089:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1608c:	3b 45 0c             	cmp    0xc(%ebp),%eax
   1608f:	7c 0a                	jl     1609b <expand_file+0x86>
            //余量足够支持需要拓展的字节量，则不需要分配新簇
            return 0;
   16091:	b8 00 00 00 00       	mov    $0x0,%eax
   16096:	e9 c9 00 00 00       	jmp    16164 <expand_file+0x14f>
        }

        //余量不足以支持拓展字节量，需要分配新簇
        cluster_cnt = up2(inc_bytes - cluster_free, fat->cluster_bytes_size) / fat->cluster_bytes_size;
   1609b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1609e:	8b 40 20             	mov    0x20(%eax),%eax
   160a1:	8b 55 0c             	mov    0xc(%ebp),%edx
   160a4:	2b 55 ec             	sub    -0x14(%ebp),%edx
   160a7:	50                   	push   %eax
   160a8:	52                   	push   %edx
   160a9:	e8 14 fa ff ff       	call   15ac2 <up2>
   160ae:	83 c4 08             	add    $0x8,%esp
   160b1:	8b 55 f0             	mov    -0x10(%ebp),%edx
   160b4:	8b 4a 20             	mov    0x20(%edx),%ecx
   160b7:	ba 00 00 00 00       	mov    $0x0,%edx
   160bc:	f7 f1                	div    %ecx
   160be:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    //分配空闲簇，即在fat表中建立簇链关系
    cluster_t start = cluster_alloc_free(fat, cluster_cnt);
   160c1:	83 ec 08             	sub    $0x8,%esp
   160c4:	ff 75 f4             	push   -0xc(%ebp)
   160c7:	ff 75 f0             	push   -0x10(%ebp)
   160ca:	e8 21 fe ff ff       	call   15ef0 <cluster_alloc_free>
   160cf:	83 c4 10             	add    $0x10,%esp
   160d2:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
    if (!cluster_is_valid(start)) {
   160d6:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
   160da:	83 ec 0c             	sub    $0xc,%esp
   160dd:	50                   	push   %eax
   160de:	e8 03 fb ff ff       	call   15be6 <cluster_is_valid>
   160e3:	83 c4 10             	add    $0x10,%esp
   160e6:	85 c0                	test   %eax,%eax
   160e8:	75 17                	jne    16101 <expand_file+0xec>
        log_printf("no cluster for file write.\n");
   160ea:	83 ec 0c             	sub    $0xc,%esp
   160ed:	68 48 a6 01 00       	push   $0x1a648
   160f2:	e8 9e 33 00 00       	call   19495 <log_printf>
   160f7:	83 c4 10             	add    $0x10,%esp
        return -1;
   160fa:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   160ff:	eb 63                	jmp    16164 <expand_file+0x14f>
    }

    //文件还没有原始数据，则直接用分配的簇链初始化文件
    if (!cluster_is_valid(file->sblk)) {
   16101:	8b 45 08             	mov    0x8(%ebp),%eax
   16104:	8b 40 3c             	mov    0x3c(%eax),%eax
   16107:	0f b7 c0             	movzwl %ax,%eax
   1610a:	83 ec 0c             	sub    $0xc,%esp
   1610d:	50                   	push   %eax
   1610e:	e8 d3 fa ff ff       	call   15be6 <cluster_is_valid>
   16113:	83 c4 10             	add    $0x10,%esp
   16116:	85 c0                	test   %eax,%eax
   16118:	75 18                	jne    16132 <expand_file+0x11d>
        file->sblk = file->cblk = start;
   1611a:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
   1611e:	8b 45 08             	mov    0x8(%ebp),%eax
   16121:	89 50 40             	mov    %edx,0x40(%eax)
   16124:	8b 45 08             	mov    0x8(%ebp),%eax
   16127:	8b 50 40             	mov    0x40(%eax),%edx
   1612a:	8b 45 08             	mov    0x8(%ebp),%eax
   1612d:	89 50 3c             	mov    %edx,0x3c(%eax)
   16130:	eb 2d                	jmp    1615f <expand_file+0x14a>
    } else {
        //文件已有原始数据，将新分配的簇链开头设为文件当前簇cblk的下一个簇
        int err = cluster_set_next(fat, file->cblk, start);
   16132:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
   16136:	8b 45 08             	mov    0x8(%ebp),%eax
   16139:	8b 40 40             	mov    0x40(%eax),%eax
   1613c:	0f b7 c0             	movzwl %ax,%eax
   1613f:	83 ec 04             	sub    $0x4,%esp
   16142:	52                   	push   %edx
   16143:	50                   	push   %eax
   16144:	ff 75 f0             	push   -0x10(%ebp)
   16147:	e8 1a fc ff ff       	call   15d66 <cluster_set_next>
   1614c:	83 c4 10             	add    $0x10,%esp
   1614f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0) {
   16152:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   16156:	79 07                	jns    1615f <expand_file+0x14a>
            return -1;
   16158:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1615d:	eb 05                	jmp    16164 <expand_file+0x14f>
        }
    }

    return 0;
   1615f:	b8 00 00 00 00       	mov    $0x0,%eax

}
   16164:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   16167:	c9                   	leave  
   16168:	c3                   	ret    

00016169 <move_file_pos>:
 * @param move_bytes 
 * @param expand 
 * @return int 
 */
static int move_file_pos(file_t *file, 
    fat_t *fat, uint32_t move_bytes, int expand) {
   16169:	55                   	push   %ebp
   1616a:	89 e5                	mov    %esp,%ebp
   1616c:	83 ec 18             	sub    $0x18,%esp
        //判断移动pos后是否当前读取簇号是否需要更改
        uint32_t c_offset = file->pos % fat->cluster_bytes_size;
   1616f:	8b 45 08             	mov    0x8(%ebp),%eax
   16172:	8b 40 30             	mov    0x30(%eax),%eax
   16175:	89 c2                	mov    %eax,%edx
   16177:	8b 45 0c             	mov    0xc(%ebp),%eax
   1617a:	8b 48 20             	mov    0x20(%eax),%ecx
   1617d:	89 d0                	mov    %edx,%eax
   1617f:	ba 00 00 00 00       	mov    $0x0,%edx
   16184:	f7 f1                	div    %ecx
   16186:	89 55 f0             	mov    %edx,-0x10(%ebp)
        if (c_offset + move_bytes >= fat->cluster_bytes_size) {
   16189:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1618c:	8b 45 10             	mov    0x10(%ebp),%eax
   1618f:	01 c2                	add    %eax,%edx
   16191:	8b 45 0c             	mov    0xc(%ebp),%eax
   16194:	8b 40 20             	mov    0x20(%eax),%eax
   16197:	39 c2                	cmp    %eax,%edx
   16199:	72 74                	jb     1620f <move_file_pos+0xa6>
            //当前簇已读取完毕需更改当前簇号
            //通过fat的簇链获取当前簇的下一个簇
            cluster_t next = cluster_get_next(fat, file->cblk);
   1619b:	8b 45 08             	mov    0x8(%ebp),%eax
   1619e:	8b 40 40             	mov    0x40(%eax),%eax
   161a1:	0f b7 c0             	movzwl %ax,%eax
   161a4:	83 ec 08             	sub    $0x8,%esp
   161a7:	50                   	push   %eax
   161a8:	ff 75 0c             	push   0xc(%ebp)
   161ab:	e8 f8 fa ff ff       	call   15ca8 <cluster_get_next>
   161b0:	83 c4 10             	add    $0x10,%esp
   161b3:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
            if (next == FAT_CLUSTER_INVALID && expand) {  
   161b7:	66 83 7d f6 f8       	cmpw   $0xfff8,-0xa(%ebp)
   161bc:	75 47                	jne    16205 <move_file_pos+0x9c>
   161be:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   161c2:	74 41                	je     16205 <move_file_pos+0x9c>
                //当前簇cblk为簇链的最后一个簇，需要分配一个新簇再移动pos
                int err = expand_file(file, fat->cluster_bytes_size);
   161c4:	8b 45 0c             	mov    0xc(%ebp),%eax
   161c7:	8b 40 20             	mov    0x20(%eax),%eax
   161ca:	83 ec 08             	sub    $0x8,%esp
   161cd:	50                   	push   %eax
   161ce:	ff 75 08             	push   0x8(%ebp)
   161d1:	e8 3f fe ff ff       	call   16015 <expand_file>
   161d6:	83 c4 10             	add    $0x10,%esp
   161d9:	89 45 ec             	mov    %eax,-0x14(%ebp)
                if (err < 0) {
   161dc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   161e0:	79 07                	jns    161e9 <move_file_pos+0x80>
                    return -1;
   161e2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   161e7:	eb 40                	jmp    16229 <move_file_pos+0xc0>
                }
                //获取新分配的链尾簇
                next = cluster_get_next(fat, file->cblk);
   161e9:	8b 45 08             	mov    0x8(%ebp),%eax
   161ec:	8b 40 40             	mov    0x40(%eax),%eax
   161ef:	0f b7 c0             	movzwl %ax,%eax
   161f2:	83 ec 08             	sub    $0x8,%esp
   161f5:	50                   	push   %eax
   161f6:	ff 75 0c             	push   0xc(%ebp)
   161f9:	e8 aa fa ff ff       	call   15ca8 <cluster_get_next>
   161fe:	83 c4 10             	add    $0x10,%esp
   16201:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
            }

            file->cblk = next;
   16205:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
   16209:	8b 45 08             	mov    0x8(%ebp),%eax
   1620c:	89 50 40             	mov    %edx,0x40(%eax)
        }

        file->pos += move_bytes;
   1620f:	8b 45 08             	mov    0x8(%ebp),%eax
   16212:	8b 40 30             	mov    0x30(%eax),%eax
   16215:	89 c2                	mov    %eax,%edx
   16217:	8b 45 10             	mov    0x10(%ebp),%eax
   1621a:	01 d0                	add    %edx,%eax
   1621c:	89 c2                	mov    %eax,%edx
   1621e:	8b 45 08             	mov    0x8(%ebp),%eax
   16221:	89 50 30             	mov    %edx,0x30(%eax)
        return 0;
   16224:	b8 00 00 00 00       	mov    $0x0,%eax
}
   16229:	c9                   	leave  
   1622a:	c3                   	ret    

0001622b <diritem_get_type>:
 * @brief 从根目录项中获取该项的文件类型
 * 
 * @param diritem 
 * @return file_type_t 
 */
file_type_t diritem_get_type(diritem_t *diritem) {
   1622b:	55                   	push   %ebp
   1622c:	89 e5                	mov    %esp,%ebp
   1622e:	83 ec 10             	sub    $0x10,%esp
    file_type_t type = FILE_UNKNOWN;
   16231:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    if (diritem->DIR_Attr & 
   16238:	8b 45 08             	mov    0x8(%ebp),%eax
   1623b:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
   1623f:	0f b6 c0             	movzbl %al,%eax
   16242:	83 e0 0e             	and    $0xe,%eax
   16245:	85 c0                	test   %eax,%eax
   16247:	74 07                	je     16250 <diritem_get_type+0x25>
    (DIRITEM_ATTR_VOLUME_ID 
    | DIRITEM_ATTR_SYSTEM 
    | DIRITEM_ATTR_HIDDEN)) {   //该项是卷标，隐藏或系统文件时直接跳过
        return FILE_UNKNOWN;
   16249:	b8 00 00 00 00       	mov    $0x0,%eax
   1624e:	eb 36                	jmp    16286 <diritem_get_type+0x5b>
    }

    //该项为LONG_NAME项时也跳过
    if ((diritem->DIR_Attr & DIRITEM_ATTR_LONG_NAME) == DIRITEM_ATTR_LONG_NAME) {
   16250:	8b 45 08             	mov    0x8(%ebp),%eax
   16253:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
   16257:	0f b6 c0             	movzbl %al,%eax
   1625a:	83 e0 0f             	and    $0xf,%eax
   1625d:	83 f8 0f             	cmp    $0xf,%eax
   16260:	75 07                	jne    16269 <diritem_get_type+0x3e>
        return FILE_UNKNOWN;
   16262:	b8 00 00 00 00       	mov    $0x0,%eax
   16267:	eb 1d                	jmp    16286 <diritem_get_type+0x5b>

    }


    return diritem->DIR_Attr & DIRITEM_ATTR_DIRECTORY ? FILE_DIR : FILE_NORMAL;
   16269:	8b 45 08             	mov    0x8(%ebp),%eax
   1626c:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
   16270:	0f b6 c0             	movzbl %al,%eax
   16273:	83 e0 10             	and    $0x10,%eax
   16276:	85 c0                	test   %eax,%eax
   16278:	74 07                	je     16281 <diritem_get_type+0x56>
   1627a:	b8 02 00 00 00       	mov    $0x2,%eax
   1627f:	eb 05                	jmp    16286 <diritem_get_type+0x5b>
   16281:	b8 03 00 00 00       	mov    $0x3,%eax
}
   16286:	c9                   	leave  
   16287:	c3                   	ret    

00016288 <read_from_diritem>:
 * @param file
 * @param file_item 
 * @param p_index 
 */
static void read_from_diritem(fat_t *fat, 
    file_t *file, diritem_t *item, int index) {
   16288:	55                   	push   %ebp
   16289:	89 e5                	mov    %esp,%ebp
        file->type = diritem_get_type(item);
   1628b:	ff 75 10             	push   0x10(%ebp)
   1628e:	e8 98 ff ff ff       	call   1622b <diritem_get_type>
   16293:	83 c4 04             	add    $0x4,%esp
   16296:	8b 55 0c             	mov    0xc(%ebp),%edx
   16299:	89 42 20             	mov    %eax,0x20(%edx)
        file->size = item->DIR_FileSize;
   1629c:	8b 45 10             	mov    0x10(%ebp),%eax
   1629f:	8b 50 1c             	mov    0x1c(%eax),%edx
   162a2:	8b 45 0c             	mov    0xc(%ebp),%eax
   162a5:	89 50 38             	mov    %edx,0x38(%eax)
        file->pos = 0;
   162a8:	8b 45 0c             	mov    0xc(%ebp),%eax
   162ab:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
        file->p_index = index;
   162b2:	8b 45 0c             	mov    0xc(%ebp),%eax
   162b5:	8b 55 14             	mov    0x14(%ebp),%edx
   162b8:	89 50 44             	mov    %edx,0x44(%eax)
        file->sblk = (item->DIR_FstClusHI << 16) | item->DIR_FstClusLo;
   162bb:	8b 45 10             	mov    0x10(%ebp),%eax
   162be:	0f b7 40 14          	movzwl 0x14(%eax),%eax
   162c2:	0f b7 c0             	movzwl %ax,%eax
   162c5:	c1 e0 10             	shl    $0x10,%eax
   162c8:	89 c2                	mov    %eax,%edx
   162ca:	8b 45 10             	mov    0x10(%ebp),%eax
   162cd:	0f b7 40 1a          	movzwl 0x1a(%eax),%eax
   162d1:	0f b7 c0             	movzwl %ax,%eax
   162d4:	09 c2                	or     %eax,%edx
   162d6:	8b 45 0c             	mov    0xc(%ebp),%eax
   162d9:	89 50 3c             	mov    %edx,0x3c(%eax)
        file->cblk = file->sblk;
   162dc:	8b 45 0c             	mov    0xc(%ebp),%eax
   162df:	8b 50 3c             	mov    0x3c(%eax),%edx
   162e2:	8b 45 0c             	mov    0xc(%ebp),%eax
   162e5:	89 50 40             	mov    %edx,0x40(%eax)
}
   162e8:	90                   	nop
   162e9:	c9                   	leave  
   162ea:	c3                   	ret    

000162eb <diritem_get_name>:
 * @brief 从当前目录项中获取文件名到dest中
 * 
 * @param diritem 
 * @param dest
 */
static void diritem_get_name(diritem_t *diritem, char *dest) {
   162eb:	55                   	push   %ebp
   162ec:	89 e5                	mov    %esp,%ebp
   162ee:	83 ec 18             	sub    $0x18,%esp
    //file.c 存储在目录项中的形式为 "FILE    C  "
    //8字节的文件名，三字节的拓展名
    char *c = dest;
   162f1:	8b 45 0c             	mov    0xc(%ebp),%eax
   162f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char *ext = (char*)0;
   162f7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

    //8字节文件名 + '.' + 3字节拓展名，一共最大12字节空间
    kernel_memset(dest, 0, 12);
   162fe:	83 ec 04             	sub    $0x4,%esp
   16301:	6a 0c                	push   $0xc
   16303:	6a 00                	push   $0x0
   16305:	ff 75 0c             	push   0xc(%ebp)
   16308:	e8 8b 29 00 00       	call   18c98 <kernel_memset>
   1630d:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 11; ++i) {
   16310:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   16317:	eb 65                	jmp    1637e <diritem_get_name+0x93>
        if (diritem->DIR_Name[i] != ' ') {
   16319:	8b 55 08             	mov    0x8(%ebp),%edx
   1631c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1631f:	01 d0                	add    %edx,%eax
   16321:	0f b6 00             	movzbl (%eax),%eax
   16324:	3c 20                	cmp    $0x20,%al
   16326:	74 3a                	je     16362 <diritem_get_name+0x77>
            *c = diritem->DIR_Name[i];
   16328:	8b 55 08             	mov    0x8(%ebp),%edx
   1632b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1632e:	01 d0                	add    %edx,%eax
   16330:	0f b6 00             	movzbl (%eax),%eax
   16333:	89 c2                	mov    %eax,%edx
   16335:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16338:	88 10                	mov    %dl,(%eax)
            if (*c >= 'A' && *c <= 'Z') {
   1633a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1633d:	0f b6 00             	movzbl (%eax),%eax
   16340:	3c 40                	cmp    $0x40,%al
   16342:	7e 1a                	jle    1635e <diritem_get_name+0x73>
   16344:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16347:	0f b6 00             	movzbl (%eax),%eax
   1634a:	3c 5a                	cmp    $0x5a,%al
   1634c:	7f 10                	jg     1635e <diritem_get_name+0x73>
                *c -= ('A' - 'a');
   1634e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16351:	0f b6 00             	movzbl (%eax),%eax
   16354:	83 c0 20             	add    $0x20,%eax
   16357:	89 c2                	mov    %eax,%edx
   16359:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1635c:	88 10                	mov    %dl,(%eax)
            }
            c++;
   1635e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
        }

        //读完8字节的文件名，用ext记录".拓展名""
        if (i == 7) {
   16362:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
   16366:	75 12                	jne    1637a <diritem_get_name+0x8f>
            ext = c;
   16368:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1636b:	89 45 f0             	mov    %eax,-0x10(%ebp)
            *(c++) = '.';
   1636e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16371:	8d 50 01             	lea    0x1(%eax),%edx
   16374:	89 55 f4             	mov    %edx,-0xc(%ebp)
   16377:	c6 00 2e             	movb   $0x2e,(%eax)
    for (int i = 0; i < 11; ++i) {
   1637a:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   1637e:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
   16382:	7e 95                	jle    16319 <diritem_get_name+0x2e>
        }
    }

    //文件无拓展名，将之前写入的'.'设置为'\0'
    if (ext && (ext[1] == '\0')) {
   16384:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   16388:	74 13                	je     1639d <diritem_get_name+0xb2>
   1638a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1638d:	83 c0 01             	add    $0x1,%eax
   16390:	0f b6 00             	movzbl (%eax),%eax
   16393:	84 c0                	test   %al,%al
   16395:	75 06                	jne    1639d <diritem_get_name+0xb2>
        ext[0] = '\0';
   16397:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1639a:	c6 00 00             	movb   $0x0,(%eax)
    }

}
   1639d:	90                   	nop
   1639e:	c9                   	leave  
   1639f:	c3                   	ret    

000163a0 <diritem_name_match>:
 * 
 * @param item 
 * @param dest 
 * @return int 
 */
static int diritem_name_match(diritem_t *item, const char *dest) {
   163a0:	55                   	push   %ebp
   163a1:	89 e5                	mov    %esp,%ebp
   163a3:	83 ec 18             	sub    $0x18,%esp
    char buf[12];
    diritem_get_name(item, buf);
   163a6:	83 ec 08             	sub    $0x8,%esp
   163a9:	8d 45 ec             	lea    -0x14(%ebp),%eax
   163ac:	50                   	push   %eax
   163ad:	ff 75 08             	push   0x8(%ebp)
   163b0:	e8 36 ff ff ff       	call   162eb <diritem_get_name>
   163b5:	83 c4 10             	add    $0x10,%esp
    return kernel_strncmp(buf, dest, 11) == 0;
   163b8:	83 ec 04             	sub    $0x4,%esp
   163bb:	6a 0b                	push   $0xb
   163bd:	ff 75 0c             	push   0xc(%ebp)
   163c0:	8d 45 ec             	lea    -0x14(%ebp),%eax
   163c3:	50                   	push   %eax
   163c4:	e8 ca 27 00 00       	call   18b93 <kernel_strncmp>
   163c9:	83 c4 10             	add    $0x10,%esp
   163cc:	85 c0                	test   %eax,%eax
   163ce:	0f 94 c0             	sete   %al
   163d1:	0f b6 c0             	movzbl %al,%eax
}
   163d4:	c9                   	leave  
   163d5:	c3                   	ret    

000163d6 <write_dir_entry>:
 * 
 * @param fat 
 * @param dir_index 
 * @return diritem_t* 
 */
static int write_dir_entry(fat_t *fat, diritem_t *item, int dir_index) {
   163d6:	55                   	push   %ebp
   163d7:	89 e5                	mov    %esp,%ebp
   163d9:	53                   	push   %ebx
   163da:	83 ec 14             	sub    $0x14,%esp
    if (dir_index < 0 || dir_index >= fat->root_ent_cnt) {
   163dd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   163e1:	78 0d                	js     163f0 <write_dir_entry+0x1a>
   163e3:	8b 45 08             	mov    0x8(%ebp),%eax
   163e6:	8b 50 18             	mov    0x18(%eax),%edx
   163e9:	8b 45 10             	mov    0x10(%ebp),%eax
   163ec:	39 c2                	cmp    %eax,%edx
   163ee:	77 0a                	ja     163fa <write_dir_entry+0x24>
        return -1;
   163f0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   163f5:	e9 86 00 00 00       	jmp    16480 <write_dir_entry+0xaa>
    }

    //计算该目录项所在根目录区的扇区的扇区号
    int offset = dir_index * sizeof(diritem_t);
   163fa:	8b 45 10             	mov    0x10(%ebp),%eax
   163fd:	c1 e0 05             	shl    $0x5,%eax
   16400:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int sector = fat->root_start_sector + offset / fat->bytes_per_sector;
   16403:	8b 45 08             	mov    0x8(%ebp),%eax
   16406:	8b 48 14             	mov    0x14(%eax),%ecx
   16409:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1640c:	8b 55 08             	mov    0x8(%ebp),%edx
   1640f:	8b 5a 0c             	mov    0xc(%edx),%ebx
   16412:	ba 00 00 00 00       	mov    $0x0,%edx
   16417:	f7 f3                	div    %ebx
   16419:	01 c8                	add    %ecx,%eax
   1641b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int err = fat_read_sector(fat, sector);
   1641e:	83 ec 08             	sub    $0x8,%esp
   16421:	ff 75 f0             	push   -0x10(%ebp)
   16424:	ff 75 08             	push   0x8(%ebp)
   16427:	e8 e3 f7 ff ff       	call   15c0f <fat_read_sector>
   1642c:	83 c4 10             	add    $0x10,%esp
   1642f:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (err < 0) {
   16432:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   16436:	79 07                	jns    1643f <write_dir_entry+0x69>
        return -1;
   16438:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1643d:	eb 41                	jmp    16480 <write_dir_entry+0xaa>
    }

    //将该目录项拷贝到扇区缓存的指定对应位置
    kernel_memcpy(fat->fat_buffer + offset % fat->bytes_per_sector, item, sizeof(diritem_t));
   1643f:	8b 45 08             	mov    0x8(%ebp),%eax
   16442:	8b 58 28             	mov    0x28(%eax),%ebx
   16445:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16448:	8b 55 08             	mov    0x8(%ebp),%edx
   1644b:	8b 4a 0c             	mov    0xc(%edx),%ecx
   1644e:	ba 00 00 00 00       	mov    $0x0,%edx
   16453:	f7 f1                	div    %ecx
   16455:	89 d0                	mov    %edx,%eax
   16457:	01 d8                	add    %ebx,%eax
   16459:	83 ec 04             	sub    $0x4,%esp
   1645c:	6a 20                	push   $0x20
   1645e:	ff 75 0c             	push   0xc(%ebp)
   16461:	50                   	push   %eax
   16462:	e8 e2 27 00 00       	call   18c49 <kernel_memcpy>
   16467:	83 c4 10             	add    $0x10,%esp

    //将扇区重新覆盖到磁盘上
    fat_write_sector(fat, sector);
   1646a:	83 ec 08             	sub    $0x8,%esp
   1646d:	ff 75 f0             	push   -0x10(%ebp)
   16470:	ff 75 08             	push   0x8(%ebp)
   16473:	e8 f2 f7 ff ff       	call   15c6a <fat_write_sector>
   16478:	83 c4 10             	add    $0x10,%esp
    
    return 0;
   1647b:	b8 00 00 00 00       	mov    $0x0,%eax
}
   16480:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   16483:	c9                   	leave  
   16484:	c3                   	ret    

00016485 <read_dir_entry>:
 * 
 * @param fat 
 * @param dir_index 
 * @return diritem_t* 
 */
static diritem_t * read_dir_entry(fat_t *fat, int dir_index) {
   16485:	55                   	push   %ebp
   16486:	89 e5                	mov    %esp,%ebp
   16488:	53                   	push   %ebx
   16489:	83 ec 14             	sub    $0x14,%esp
    if (dir_index < 0 || dir_index >= fat->root_ent_cnt) {
   1648c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   16490:	78 0d                	js     1649f <read_dir_entry+0x1a>
   16492:	8b 45 08             	mov    0x8(%ebp),%eax
   16495:	8b 50 18             	mov    0x18(%eax),%edx
   16498:	8b 45 0c             	mov    0xc(%ebp),%eax
   1649b:	39 c2                	cmp    %eax,%edx
   1649d:	77 07                	ja     164a6 <read_dir_entry+0x21>
        return (diritem_t*)0;
   1649f:	b8 00 00 00 00       	mov    $0x0,%eax
   164a4:	eb 5f                	jmp    16505 <read_dir_entry+0x80>
    }

    //计算该目录项所在根目录区的扇区的扇区号
    int offset = dir_index * sizeof(diritem_t);
   164a6:	8b 45 0c             	mov    0xc(%ebp),%eax
   164a9:	c1 e0 05             	shl    $0x5,%eax
   164ac:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int sector = fat->root_start_sector + offset / fat->bytes_per_sector;
   164af:	8b 45 08             	mov    0x8(%ebp),%eax
   164b2:	8b 48 14             	mov    0x14(%eax),%ecx
   164b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   164b8:	8b 55 08             	mov    0x8(%ebp),%edx
   164bb:	8b 5a 0c             	mov    0xc(%edx),%ebx
   164be:	ba 00 00 00 00       	mov    $0x0,%edx
   164c3:	f7 f3                	div    %ebx
   164c5:	01 c8                	add    %ecx,%eax
   164c7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int err = fat_read_sector(fat, sector);
   164ca:	83 ec 08             	sub    $0x8,%esp
   164cd:	ff 75 f0             	push   -0x10(%ebp)
   164d0:	ff 75 08             	push   0x8(%ebp)
   164d3:	e8 37 f7 ff ff       	call   15c0f <fat_read_sector>
   164d8:	83 c4 10             	add    $0x10,%esp
   164db:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (err < 0) {
   164de:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   164e2:	79 07                	jns    164eb <read_dir_entry+0x66>
        return (diritem_t*)0;
   164e4:	b8 00 00 00 00       	mov    $0x0,%eax
   164e9:	eb 1a                	jmp    16505 <read_dir_entry+0x80>
    }

    //计算出该目录项的起始地址并返回
    return (diritem_t*)(fat->fat_buffer + offset % fat->bytes_per_sector);
   164eb:	8b 45 08             	mov    0x8(%ebp),%eax
   164ee:	8b 58 28             	mov    0x28(%eax),%ebx
   164f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   164f4:	8b 55 08             	mov    0x8(%ebp),%edx
   164f7:	8b 4a 0c             	mov    0xc(%edx),%ecx
   164fa:	ba 00 00 00 00       	mov    $0x0,%edx
   164ff:	f7 f1                	div    %ecx
   16501:	89 d0                	mov    %edx,%eax
   16503:	01 d8                	add    %ebx,%eax
}
   16505:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   16508:	c9                   	leave  
   16509:	c3                   	ret    

0001650a <fatfs_mount>:
 * @param fs 
 * @param major 
 * @param minor 
 * @return int 
 */
int fatfs_mount(struct _fs_t *fs, int major, int minor) {
   1650a:	55                   	push   %ebp
   1650b:	89 e5                	mov    %esp,%ebp
   1650d:	56                   	push   %esi
   1650e:	53                   	push   %ebx
   1650f:	83 ec 10             	sub    $0x10,%esp

    //打开对应设备 即对应磁盘的对应分区
    int dev_id = dev_open(major, minor, (void *)0);
   16512:	83 ec 04             	sub    $0x4,%esp
   16515:	6a 00                	push   $0x0
   16517:	ff 75 10             	push   0x10(%ebp)
   1651a:	ff 75 0c             	push   0xc(%ebp)
   1651d:	e8 f6 db ff ff       	call   14118 <dev_open>
   16522:	83 c4 10             	add    $0x10,%esp
   16525:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (dev_id < 0) {
   16528:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1652c:	79 1b                	jns    16549 <fatfs_mount+0x3f>
        log_printf("open disk failed, major: %x, minor: %x\n", major, minor);
   1652e:	83 ec 04             	sub    $0x4,%esp
   16531:	ff 75 10             	push   0x10(%ebp)
   16534:	ff 75 0c             	push   0xc(%ebp)
   16537:	68 64 a6 01 00       	push   $0x1a664
   1653c:	e8 54 2f 00 00       	call   19495 <log_printf>
   16541:	83 c4 10             	add    $0x10,%esp
        goto mount_failed;
   16544:	e9 c6 01 00 00       	jmp    1670f <fatfs_mount+0x205>
    }

    //分配一页来作为dbr区域的缓冲区
    dbr_t *dbr = (dbr_t *)memory_alloc_page();
   16549:	e8 0b a9 ff ff       	call   10e59 <memory_alloc_page>
   1654e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!dbr) {
   16551:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   16555:	75 15                	jne    1656c <fatfs_mount+0x62>
        log_printf("mount failed: can't alloc buf\n");
   16557:	83 ec 0c             	sub    $0xc,%esp
   1655a:	68 8c a6 01 00       	push   $0x1a68c
   1655f:	e8 31 2f 00 00       	call   19495 <log_printf>
   16564:	83 c4 10             	add    $0x10,%esp
        goto mount_failed;
   16567:	e9 a3 01 00 00       	jmp    1670f <fatfs_mount+0x205>
    }


    //读取该分区的0号扇区，获取dbr的信息
    int cnt = dev_read(dev_id, 0, (char *)dbr, 1);
   1656c:	6a 01                	push   $0x1
   1656e:	ff 75 f4             	push   -0xc(%ebp)
   16571:	6a 00                	push   $0x0
   16573:	ff 75 f0             	push   -0x10(%ebp)
   16576:	e8 c6 dc ff ff       	call   14241 <dev_read>
   1657b:	83 c4 10             	add    $0x10,%esp
   1657e:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (cnt < 1) {
   16581:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   16585:	7f 15                	jg     1659c <fatfs_mount+0x92>
        log_printf("read dbr failed\n");
   16587:	83 ec 0c             	sub    $0xc,%esp
   1658a:	68 ab a6 01 00       	push   $0x1a6ab
   1658f:	e8 01 2f 00 00       	call   19495 <log_printf>
   16594:	83 c4 10             	add    $0x10,%esp
        goto mount_failed;
   16597:	e9 73 01 00 00       	jmp    1670f <fatfs_mount+0x205>
    }

    //解析fat表的信息到文件系统中
    fat_t *fat = &fs->fat_data;
   1659c:	8b 45 08             	mov    0x8(%ebp),%eax
   1659f:	05 1c 02 00 00       	add    $0x21c,%eax
   165a4:	89 45 e8             	mov    %eax,-0x18(%ebp)
    fat->bytes_per_sector = dbr->BPB_BytsPerSec;
   165a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   165aa:	0f b7 40 0b          	movzwl 0xb(%eax),%eax
   165ae:	0f b7 d0             	movzwl %ax,%edx
   165b1:	8b 45 e8             	mov    -0x18(%ebp),%eax
   165b4:	89 50 0c             	mov    %edx,0xc(%eax)
    //因为保留区dbr从0扇区开始，且fat表紧邻dbr区
    //所以fat表的起始扇区，也就是保留区dbr的扇区总数
    fat->tbl_start_sector = dbr->BPB_RsvdSecCnt;
   165b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   165ba:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   165be:	0f b7 d0             	movzwl %ax,%edx
   165c1:	8b 45 e8             	mov    -0x18(%ebp),%eax
   165c4:	89 10                	mov    %edx,(%eax)
    fat->tbl_sectors = dbr->BPB_FATSz16;
   165c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   165c9:	0f b7 40 16          	movzwl 0x16(%eax),%eax
   165cd:	0f b7 d0             	movzwl %ax,%edx
   165d0:	8b 45 e8             	mov    -0x18(%ebp),%eax
   165d3:	89 50 08             	mov    %edx,0x8(%eax)
    fat->tbl_cnt = dbr->BPB_NumFATs;
   165d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   165d9:	0f b6 40 10          	movzbl 0x10(%eax),%eax
   165dd:	0f b6 d0             	movzbl %al,%edx
   165e0:	8b 45 e8             	mov    -0x18(%ebp),%eax
   165e3:	89 50 04             	mov    %edx,0x4(%eax)
    fat->sec_per_cluster = dbr->BPB_SecPerClus;
   165e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   165e9:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   165ed:	0f b6 d0             	movzbl %al,%edx
   165f0:	8b 45 e8             	mov    -0x18(%ebp),%eax
   165f3:	89 50 10             	mov    %edx,0x10(%eax)
    fat->root_ent_cnt = dbr->BPB_RootEntCnt;
   165f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   165f9:	0f b7 40 11          	movzwl 0x11(%eax),%eax
   165fd:	0f b7 d0             	movzwl %ax,%edx
   16600:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16603:	89 50 18             	mov    %edx,0x18(%eax)
    fat->root_start_sector = fat->tbl_start_sector + fat->tbl_sectors * fat->tbl_cnt;
   16606:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16609:	8b 08                	mov    (%eax),%ecx
   1660b:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1660e:	8b 50 08             	mov    0x8(%eax),%edx
   16611:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16614:	8b 40 04             	mov    0x4(%eax),%eax
   16617:	0f af c2             	imul   %edx,%eax
   1661a:	8d 14 01             	lea    (%ecx,%eax,1),%edx
   1661d:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16620:	89 50 14             	mov    %edx,0x14(%eax)
    fat->data_start_sector = fat->root_start_sector + fat->root_ent_cnt * 32 / dbr->BPB_BytsPerSec;
   16623:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16626:	8b 58 14             	mov    0x14(%eax),%ebx
   16629:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1662c:	8b 40 18             	mov    0x18(%eax),%eax
   1662f:	c1 e0 05             	shl    $0x5,%eax
   16632:	89 c1                	mov    %eax,%ecx
   16634:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16637:	0f b7 40 0b          	movzwl 0xb(%eax),%eax
   1663b:	0f b7 f0             	movzwl %ax,%esi
   1663e:	89 c8                	mov    %ecx,%eax
   16640:	ba 00 00 00 00       	mov    $0x0,%edx
   16645:	f7 f6                	div    %esi
   16647:	8d 14 03             	lea    (%ebx,%eax,1),%edx
   1664a:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1664d:	89 50 1c             	mov    %edx,0x1c(%eax)
    fat->cluster_bytes_size = fat->sec_per_cluster * dbr->BPB_BytsPerSec;
   16650:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16653:	8b 50 10             	mov    0x10(%eax),%edx
   16656:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16659:	0f b7 40 0b          	movzwl 0xb(%eax),%eax
   1665d:	0f b7 c0             	movzwl %ax,%eax
   16660:	0f af d0             	imul   %eax,%edx
   16663:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16666:	89 50 20             	mov    %edx,0x20(%eax)
    fat->fat_buffer = (uint8_t*)dbr;
   16669:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1666c:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1666f:	89 50 28             	mov    %edx,0x28(%eax)
    fat->fs = fs;
   16672:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16675:	8b 55 08             	mov    0x8(%ebp),%edx
   16678:	89 50 2c             	mov    %edx,0x2c(%eax)
    fat->curr_sector = -1;
   1667b:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1667e:	c7 40 24 ff ff ff ff 	movl   $0xffffffff,0x24(%eax)

    if (fat->tbl_cnt != 2) {    //fat表数量一般为2， 不为2则出错
   16685:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16688:	8b 40 04             	mov    0x4(%eax),%eax
   1668b:	83 f8 02             	cmp    $0x2,%eax
   1668e:	74 18                	je     166a8 <fatfs_mount+0x19e>
        log_printf("%s: fat table error: major: %x, minor: %x\n", major, minor);
   16690:	83 ec 04             	sub    $0x4,%esp
   16693:	ff 75 10             	push   0x10(%ebp)
   16696:	ff 75 0c             	push   0xc(%ebp)
   16699:	68 bc a6 01 00       	push   $0x1a6bc
   1669e:	e8 f2 2d 00 00       	call   19495 <log_printf>
   166a3:	83 c4 10             	add    $0x10,%esp
        goto mount_failed;
   166a6:	eb 67                	jmp    1670f <fatfs_mount+0x205>
    }

    if (kernel_strncmp((char*)(dbr->BS_FilSysType), "FAT16", 5) != 0) { //不是FAT16文件系统，出错
   166a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   166ab:	83 c0 36             	add    $0x36,%eax
   166ae:	83 ec 04             	sub    $0x4,%esp
   166b1:	6a 05                	push   $0x5
   166b3:	68 e7 a6 01 00       	push   $0x1a6e7
   166b8:	50                   	push   %eax
   166b9:	e8 d5 24 00 00       	call   18b93 <kernel_strncmp>
   166be:	83 c4 10             	add    $0x10,%esp
   166c1:	85 c0                	test   %eax,%eax
   166c3:	74 18                	je     166dd <fatfs_mount+0x1d3>
        log_printf("not a fat filesystem: major: %x, minor: %x\n", major, minor);
   166c5:	83 ec 04             	sub    $0x4,%esp
   166c8:	ff 75 10             	push   0x10(%ebp)
   166cb:	ff 75 0c             	push   0xc(%ebp)
   166ce:	68 f0 a6 01 00       	push   $0x1a6f0
   166d3:	e8 bd 2d 00 00       	call   19495 <log_printf>
   166d8:	83 c4 10             	add    $0x10,%esp
        goto mount_failed;
   166db:	eb 32                	jmp    1670f <fatfs_mount+0x205>

    }

    fs->type = FS_FAT16;
   166dd:	8b 45 08             	mov    0x8(%ebp),%eax
   166e0:	c7 80 00 02 00 00 01 	movl   $0x1,0x200(%eax)
   166e7:	00 00 00 
    fs->data = &fs->fat_data;
   166ea:	8b 45 08             	mov    0x8(%ebp),%eax
   166ed:	8d 90 1c 02 00 00    	lea    0x21c(%eax),%edx
   166f3:	8b 45 08             	mov    0x8(%ebp),%eax
   166f6:	89 90 08 02 00 00    	mov    %edx,0x208(%eax)
    fs->dev_id = dev_id;
   166fc:	8b 45 08             	mov    0x8(%ebp),%eax
   166ff:	8b 55 f0             	mov    -0x10(%ebp),%edx
   16702:	89 90 18 02 00 00    	mov    %edx,0x218(%eax)

    return 0;
   16708:	b8 00 00 00 00       	mov    $0x0,%eax
   1670d:	eb 28                	jmp    16737 <fatfs_mount+0x22d>

mount_failed:
    if (dbr) {
   1670f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   16713:	74 0f                	je     16724 <fatfs_mount+0x21a>
        memory_free_page((uint32_t)dbr);
   16715:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16718:	83 ec 0c             	sub    $0xc,%esp
   1671b:	50                   	push   %eax
   1671c:	e8 58 a7 ff ff       	call   10e79 <memory_free_page>
   16721:	83 c4 10             	add    $0x10,%esp
    }

    dev_close(dev_id);
   16724:	83 ec 0c             	sub    $0xc,%esp
   16727:	ff 75 f0             	push   -0x10(%ebp)
   1672a:	e8 f6 db ff ff       	call   14325 <dev_close>
   1672f:	83 c4 10             	add    $0x10,%esp

    return -1;
   16732:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

} 
   16737:	8d 65 f8             	lea    -0x8(%ebp),%esp
   1673a:	5b                   	pop    %ebx
   1673b:	5e                   	pop    %esi
   1673c:	5d                   	pop    %ebp
   1673d:	c3                   	ret    

0001673e <fatfs_unmount>:
/**
 * @brief 卸载fat文件系统
 * 
 * @param fs 
 */
void fatfs_unmount(struct _fs_t *fs) {
   1673e:	55                   	push   %ebp
   1673f:	89 e5                	mov    %esp,%ebp
   16741:	83 ec 18             	sub    $0x18,%esp
    fat_t * fat = (fat_t *)fs->data;
   16744:	8b 45 08             	mov    0x8(%ebp),%eax
   16747:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   1674d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    dev_close(fs->dev_id);
   16750:	8b 45 08             	mov    0x8(%ebp),%eax
   16753:	8b 80 18 02 00 00    	mov    0x218(%eax),%eax
   16759:	83 ec 0c             	sub    $0xc,%esp
   1675c:	50                   	push   %eax
   1675d:	e8 c3 db ff ff       	call   14325 <dev_close>
   16762:	83 c4 10             	add    $0x10,%esp

    memory_free_page((uint32_t)fat->fat_buffer);
   16765:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16768:	8b 40 28             	mov    0x28(%eax),%eax
   1676b:	83 ec 0c             	sub    $0xc,%esp
   1676e:	50                   	push   %eax
   1676f:	e8 05 a7 ff ff       	call   10e79 <memory_free_page>
   16774:	83 c4 10             	add    $0x10,%esp
}
   16777:	90                   	nop
   16778:	c9                   	leave  
   16779:	c3                   	ret    

0001677a <fatfs_open>:
 * @param fs 
 * @param path 
 * @param file 
 * @return int 
 */
int fatfs_open(struct _fs_t *fs, const char *path, file_t *file) {
   1677a:	55                   	push   %ebp
   1677b:	89 e5                	mov    %esp,%ebp
   1677d:	83 ec 48             	sub    $0x48,%esp
    //获取fat表信息
    fat_t *fat = (fat_t*)fs->data;
   16780:	8b 45 08             	mov    0x8(%ebp),%eax
   16783:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   16789:	89 45 e8             	mov    %eax,-0x18(%ebp)

    //遍历读取根目录区的目录项,按路径path匹配对应目录项
    diritem_t *file_item = (diritem_t*)0;
   1678c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    int p_index = -1;   //记录匹配到的目录项的索引
   16793:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
    for (int i = 0; i < fat->root_ent_cnt; ++i) {
   1679a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   167a1:	eb 63                	jmp    16806 <fatfs_open+0x8c>
        diritem_t * item = read_dir_entry(fat, i);
   167a3:	83 ec 08             	sub    $0x8,%esp
   167a6:	ff 75 ec             	push   -0x14(%ebp)
   167a9:	ff 75 e8             	push   -0x18(%ebp)
   167ac:	e8 d4 fc ff ff       	call   16485 <read_dir_entry>
   167b1:	83 c4 10             	add    $0x10,%esp
   167b4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (item == (diritem_t *)0) {
   167b7:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   167bb:	75 0a                	jne    167c7 <fatfs_open+0x4d>
            return -1;
   167bd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   167c2:	e9 33 01 00 00       	jmp    168fa <fatfs_open+0x180>
        }

        //记录所遍历到的目录项的索引
        p_index = i;
   167c7:	8b 45 ec             	mov    -0x14(%ebp),%eax
   167ca:	89 45 f0             	mov    %eax,-0x10(%ebp)

        if (item->DIR_Name[0] == DIRITEM_NAME_END) {
   167cd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   167d0:	0f b6 00             	movzbl (%eax),%eax
   167d3:	84 c0                	test   %al,%al
   167d5:	74 27                	je     167fe <fatfs_open+0x84>
            continue;
        }

        if (item->DIR_Name[0] == DIRITEM_NAEM_FREE) {
   167d7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   167da:	0f b6 00             	movzbl (%eax),%eax
   167dd:	3c e5                	cmp    $0xe5,%al
   167df:	74 20                	je     16801 <fatfs_open+0x87>
            continue;
        }

        //进行路径匹配
        if (diritem_name_match(item, path)) {
   167e1:	83 ec 08             	sub    $0x8,%esp
   167e4:	ff 75 0c             	push   0xc(%ebp)
   167e7:	ff 75 e4             	push   -0x1c(%ebp)
   167ea:	e8 b1 fb ff ff       	call   163a0 <diritem_name_match>
   167ef:	83 c4 10             	add    $0x10,%esp
   167f2:	85 c0                	test   %eax,%eax
   167f4:	74 0c                	je     16802 <fatfs_open+0x88>
            file_item = item;
   167f6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   167f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   167fc:	eb 15                	jmp    16813 <fatfs_open+0x99>
            continue;
   167fe:	90                   	nop
   167ff:	eb 01                	jmp    16802 <fatfs_open+0x88>
            continue;
   16801:	90                   	nop
    for (int i = 0; i < fat->root_ent_cnt; ++i) {
   16802:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   16806:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16809:	8b 50 18             	mov    0x18(%eax),%edx
   1680c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1680f:	39 c2                	cmp    %eax,%edx
   16811:	77 90                	ja     167a3 <fatfs_open+0x29>
        }
    }

    
    if (file_item) {//从目录项中读取文件信息到file结构中
   16813:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   16817:	74 62                	je     1687b <fatfs_open+0x101>
        read_from_diritem(fat, file, file_item, p_index);
   16819:	ff 75 f0             	push   -0x10(%ebp)
   1681c:	ff 75 f4             	push   -0xc(%ebp)
   1681f:	ff 75 10             	push   0x10(%ebp)
   16822:	ff 75 e8             	push   -0x18(%ebp)
   16825:	e8 5e fa ff ff       	call   16288 <read_from_diritem>
   1682a:	83 c4 10             	add    $0x10,%esp

        if (file->mode & O_TRUNC) { //以截断模式打开文件，需清空文件
   1682d:	8b 45 10             	mov    0x10(%ebp),%eax
   16830:	8b 40 34             	mov    0x34(%eax),%eax
   16833:	25 00 04 00 00       	and    $0x400,%eax
   16838:	85 c0                	test   %eax,%eax
   1683a:	74 38                	je     16874 <fatfs_open+0xfa>
            cluster_free_chain(fat, file->sblk);
   1683c:	8b 45 10             	mov    0x10(%ebp),%eax
   1683f:	8b 40 3c             	mov    0x3c(%eax),%eax
   16842:	0f b7 c0             	movzwl %ax,%eax
   16845:	83 ec 08             	sub    $0x8,%esp
   16848:	50                   	push   %eax
   16849:	ff 75 e8             	push   -0x18(%ebp)
   1684c:	e8 44 f6 ff ff       	call   15e95 <cluster_free_chain>
   16851:	83 c4 10             	add    $0x10,%esp
            file->cblk = file->sblk = FAT_CLUSTER_INVALID;
   16854:	8b 45 10             	mov    0x10(%ebp),%eax
   16857:	c7 40 3c f8 ff 00 00 	movl   $0xfff8,0x3c(%eax)
   1685e:	8b 45 10             	mov    0x10(%ebp),%eax
   16861:	8b 50 3c             	mov    0x3c(%eax),%edx
   16864:	8b 45 10             	mov    0x10(%ebp),%eax
   16867:	89 50 40             	mov    %edx,0x40(%eax)
            file->size = 0;
   1686a:	8b 45 10             	mov    0x10(%ebp),%eax
   1686d:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
        }
        return 0;
   16874:	b8 00 00 00 00       	mov    $0x0,%eax
   16879:	eb 7f                	jmp    168fa <fatfs_open+0x180>
    } else if ((file->mode & O_CREAT) && p_index >= 0){//创建文件模式下未找到对应的目录项，创建新一个文件
   1687b:	8b 45 10             	mov    0x10(%ebp),%eax
   1687e:	8b 40 34             	mov    0x34(%eax),%eax
   16881:	25 00 02 00 00       	and    $0x200,%eax
   16886:	85 c0                	test   %eax,%eax
   16888:	74 6b                	je     168f5 <fatfs_open+0x17b>
   1688a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1688e:	78 65                	js     168f5 <fatfs_open+0x17b>
        //初始化一个目录项信息
        diritem_t item;
        diritem_init(&item, DIRITEM_ATTR_ARCHIVE, path);
   16890:	83 ec 04             	sub    $0x4,%esp
   16893:	ff 75 0c             	push   0xc(%ebp)
   16896:	6a 20                	push   $0x20
   16898:	8d 45 c0             	lea    -0x40(%ebp),%eax
   1689b:	50                   	push   %eax
   1689c:	e8 bf f2 ff ff       	call   15b60 <diritem_init>
   168a1:	83 c4 10             	add    $0x10,%esp

        //将目录项信息写入到根目录区
        int err = write_dir_entry(fat, &item, p_index);
   168a4:	83 ec 04             	sub    $0x4,%esp
   168a7:	ff 75 f0             	push   -0x10(%ebp)
   168aa:	8d 45 c0             	lea    -0x40(%ebp),%eax
   168ad:	50                   	push   %eax
   168ae:	ff 75 e8             	push   -0x18(%ebp)
   168b1:	e8 20 fb ff ff       	call   163d6 <write_dir_entry>
   168b6:	83 c4 10             	add    $0x10,%esp
   168b9:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (err < 0) {
   168bc:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   168c0:	79 17                	jns    168d9 <fatfs_open+0x15f>
            log_printf("create file failed\n");
   168c2:	83 ec 0c             	sub    $0xc,%esp
   168c5:	68 1c a7 01 00       	push   $0x1a71c
   168ca:	e8 c6 2b 00 00       	call   19495 <log_printf>
   168cf:	83 c4 10             	add    $0x10,%esp
            return -1;
   168d2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   168d7:	eb 21                	jmp    168fa <fatfs_open+0x180>
        }

        //将目录项信息读到file结构中
        read_from_diritem(fat, file, &item, p_index);
   168d9:	ff 75 f0             	push   -0x10(%ebp)
   168dc:	8d 45 c0             	lea    -0x40(%ebp),%eax
   168df:	50                   	push   %eax
   168e0:	ff 75 10             	push   0x10(%ebp)
   168e3:	ff 75 e8             	push   -0x18(%ebp)
   168e6:	e8 9d f9 ff ff       	call   16288 <read_from_diritem>
   168eb:	83 c4 10             	add    $0x10,%esp
        return 0;
   168ee:	b8 00 00 00 00       	mov    $0x0,%eax
   168f3:	eb 05                	jmp    168fa <fatfs_open+0x180>

    }

    return -1;
   168f5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   168fa:	c9                   	leave  
   168fb:	c3                   	ret    

000168fc <fatfs_read>:
 * @param buf 
 * @param size 
 * @param file 
 * @return int 
 */
int fatfs_read(char *buf, int size, file_t *file) {
   168fc:	55                   	push   %ebp
   168fd:	89 e5                	mov    %esp,%ebp
   168ff:	53                   	push   %ebx
   16900:	83 ec 34             	sub    $0x34,%esp
    fat_t *fat = (fat_t*)file->fs->data;
   16903:	8b 45 10             	mov    0x10(%ebp),%eax
   16906:	8b 40 28             	mov    0x28(%eax),%eax
   16909:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   1690f:	89 45 e8             	mov    %eax,-0x18(%ebp)

    //修正读取字节数
    uint32_t nbytes = size;
   16912:	8b 45 0c             	mov    0xc(%ebp),%eax
   16915:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (file->pos + nbytes > file->size) {
   16918:	8b 45 10             	mov    0x10(%ebp),%eax
   1691b:	8b 40 30             	mov    0x30(%eax),%eax
   1691e:	89 c2                	mov    %eax,%edx
   16920:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16923:	01 c2                	add    %eax,%edx
   16925:	8b 45 10             	mov    0x10(%ebp),%eax
   16928:	8b 40 38             	mov    0x38(%eax),%eax
   1692b:	39 c2                	cmp    %eax,%edx
   1692d:	76 15                	jbe    16944 <fatfs_read+0x48>
        nbytes = file->size - file->pos;
   1692f:	8b 45 10             	mov    0x10(%ebp),%eax
   16932:	8b 50 38             	mov    0x38(%eax),%edx
   16935:	8b 45 10             	mov    0x10(%ebp),%eax
   16938:	8b 40 30             	mov    0x30(%eax),%eax
   1693b:	89 c1                	mov    %eax,%ecx
   1693d:	89 d0                	mov    %edx,%eax
   1693f:	29 c8                	sub    %ecx,%eax
   16941:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    uint32_t total_read = 0;
   16944:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  
    //读取nbytes个字节到buf中
    while (nbytes > 0) {
   1694b:	e9 40 01 00 00       	jmp    16a90 <fatfs_read+0x194>
        //记录每次循环读取的字节数
        uint32_t curr_read = nbytes;
   16950:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16953:	89 45 ec             	mov    %eax,-0x14(%ebp)
        //计算当前读取位置pos在当前读取的簇中的偏移量
        uint32_t cluster_offset = file->pos % fat->cluster_bytes_size;
   16956:	8b 45 10             	mov    0x10(%ebp),%eax
   16959:	8b 40 30             	mov    0x30(%eax),%eax
   1695c:	89 c2                	mov    %eax,%edx
   1695e:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16961:	8b 48 20             	mov    0x20(%eax),%ecx
   16964:	89 d0                	mov    %edx,%eax
   16966:	ba 00 00 00 00       	mov    $0x0,%edx
   1696b:	f7 f1                	div    %ecx
   1696d:	89 55 e4             	mov    %edx,-0x1c(%ebp)
        //计算文件在该分区中的起始扇区号
        //fat文件系统中，在分区的文件数据区中，簇号从2开始编号
        //[2],[3],[4]
        uint32_t start_sector = fat->data_start_sector + (file->cblk - 2) * fat->sec_per_cluster;
   16970:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16973:	8b 50 1c             	mov    0x1c(%eax),%edx
   16976:	8b 45 10             	mov    0x10(%ebp),%eax
   16979:	8b 40 40             	mov    0x40(%eax),%eax
   1697c:	83 e8 02             	sub    $0x2,%eax
   1697f:	89 c1                	mov    %eax,%ecx
   16981:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16984:	8b 40 10             	mov    0x10(%eax),%eax
   16987:	0f af c1             	imul   %ecx,%eax
   1698a:	01 d0                	add    %edx,%eax
   1698c:	89 45 e0             	mov    %eax,-0x20(%ebp)

        //当前读取位置刚好在簇的开头，且读取大小为一个簇，直接进行整簇读取即可
        if (cluster_offset == 0 && nbytes == fat->cluster_bytes_size) {
   1698f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   16993:	75 4c                	jne    169e1 <fatfs_read+0xe5>
   16995:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16998:	8b 40 20             	mov    0x20(%eax),%eax
   1699b:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   1699e:	75 41                	jne    169e1 <fatfs_read+0xe5>
            int err = dev_read(fat->fs->dev_id, start_sector, buf, fat->sec_per_cluster);
   169a0:	8b 45 e8             	mov    -0x18(%ebp),%eax
   169a3:	8b 40 10             	mov    0x10(%eax),%eax
   169a6:	89 c1                	mov    %eax,%ecx
   169a8:	8b 55 e0             	mov    -0x20(%ebp),%edx
   169ab:	8b 45 e8             	mov    -0x18(%ebp),%eax
   169ae:	8b 40 2c             	mov    0x2c(%eax),%eax
   169b1:	8b 80 18 02 00 00    	mov    0x218(%eax),%eax
   169b7:	51                   	push   %ecx
   169b8:	ff 75 08             	push   0x8(%ebp)
   169bb:	52                   	push   %edx
   169bc:	50                   	push   %eax
   169bd:	e8 7f d8 ff ff       	call   14241 <dev_read>
   169c2:	83 c4 10             	add    $0x10,%esp
   169c5:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (err < 0) {
   169c8:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
   169cc:	79 08                	jns    169d6 <fatfs_read+0xda>
                return total_read;
   169ce:	8b 45 f0             	mov    -0x10(%ebp),%eax
   169d1:	e9 c7 00 00 00       	jmp    16a9d <fatfs_read+0x1a1>
            }

            curr_read = fat->cluster_bytes_size;
   169d6:	8b 45 e8             	mov    -0x18(%ebp),%eax
   169d9:	8b 40 20             	mov    0x20(%eax),%eax
   169dc:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (cluster_offset == 0 && nbytes == fat->cluster_bytes_size) {
   169df:	eb 7c                	jmp    16a5d <fatfs_read+0x161>
        } else {//当前读取内容需要进行跨簇读取
            if (cluster_offset + curr_read > fat->cluster_bytes_size) {
   169e1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   169e4:	8b 45 ec             	mov    -0x14(%ebp),%eax
   169e7:	01 c2                	add    %eax,%edx
   169e9:	8b 45 e8             	mov    -0x18(%ebp),%eax
   169ec:	8b 40 20             	mov    0x20(%eax),%eax
   169ef:	39 c2                	cmp    %eax,%edx
   169f1:	76 0c                	jbe    169ff <fatfs_read+0x103>
                curr_read = fat->cluster_bytes_size - cluster_offset;
   169f3:	8b 45 e8             	mov    -0x18(%ebp),%eax
   169f6:	8b 40 20             	mov    0x20(%eax),%eax
   169f9:	2b 45 e4             	sub    -0x1c(%ebp),%eax
   169fc:	89 45 ec             	mov    %eax,-0x14(%ebp)
            }

            //先将当前簇中的内容读取到fat_buffer中
            fat->curr_sector = start_sector;
   169ff:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16a02:	8b 55 e0             	mov    -0x20(%ebp),%edx
   16a05:	89 50 24             	mov    %edx,0x24(%eax)
            int err = dev_read(fat->fs->dev_id, start_sector, fat->fat_buffer, fat->sec_per_cluster);
   16a08:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16a0b:	8b 40 10             	mov    0x10(%eax),%eax
   16a0e:	89 c3                	mov    %eax,%ebx
   16a10:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16a13:	8b 48 28             	mov    0x28(%eax),%ecx
   16a16:	8b 55 e0             	mov    -0x20(%ebp),%edx
   16a19:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16a1c:	8b 40 2c             	mov    0x2c(%eax),%eax
   16a1f:	8b 80 18 02 00 00    	mov    0x218(%eax),%eax
   16a25:	53                   	push   %ebx
   16a26:	51                   	push   %ecx
   16a27:	52                   	push   %edx
   16a28:	50                   	push   %eax
   16a29:	e8 13 d8 ff ff       	call   14241 <dev_read>
   16a2e:	83 c4 10             	add    $0x10,%esp
   16a31:	89 45 d8             	mov    %eax,-0x28(%ebp)
            if (err < 0) {
   16a34:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
   16a38:	79 05                	jns    16a3f <fatfs_read+0x143>
                return total_read;
   16a3a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16a3d:	eb 5e                	jmp    16a9d <fatfs_read+0x1a1>
            }
            //再从fat_buffer中读取文件相关部分到buf中
            kernel_memcpy(buf, fat->fat_buffer + cluster_offset, curr_read);
   16a3f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16a42:	8b 55 e8             	mov    -0x18(%ebp),%edx
   16a45:	8b 4a 28             	mov    0x28(%edx),%ecx
   16a48:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   16a4b:	01 ca                	add    %ecx,%edx
   16a4d:	83 ec 04             	sub    $0x4,%esp
   16a50:	50                   	push   %eax
   16a51:	52                   	push   %edx
   16a52:	ff 75 08             	push   0x8(%ebp)
   16a55:	e8 ef 21 00 00       	call   18c49 <kernel_memcpy>
   16a5a:	83 c4 10             	add    $0x10,%esp
        }
        buf += curr_read;
   16a5d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16a60:	01 45 08             	add    %eax,0x8(%ebp)
        nbytes -= curr_read;
   16a63:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16a66:	29 45 f4             	sub    %eax,-0xc(%ebp)
        total_read += curr_read;
   16a69:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16a6c:	01 45 f0             	add    %eax,-0x10(%ebp)

        //移动文件的读取位置file->pos
        int err = move_file_pos(file, fat, curr_read, 0);
   16a6f:	6a 00                	push   $0x0
   16a71:	ff 75 ec             	push   -0x14(%ebp)
   16a74:	ff 75 e8             	push   -0x18(%ebp)
   16a77:	ff 75 10             	push   0x10(%ebp)
   16a7a:	e8 ea f6 ff ff       	call   16169 <move_file_pos>
   16a7f:	83 c4 10             	add    $0x10,%esp
   16a82:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        if (err < 0) {
   16a85:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   16a89:	79 05                	jns    16a90 <fatfs_read+0x194>
            return total_read;
   16a8b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16a8e:	eb 0d                	jmp    16a9d <fatfs_read+0x1a1>
    while (nbytes > 0) {
   16a90:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   16a94:	0f 85 b6 fe ff ff    	jne    16950 <fatfs_read+0x54>
        }
    
    }
    return total_read;
   16a9a:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   16a9d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   16aa0:	c9                   	leave  
   16aa1:	c3                   	ret    

00016aa2 <fatfs_write>:
 * @param buf 
 * @param size 
 * @param file 
 * @return int 
 */
int fatfs_write(char *buf, int size, file_t *file) {
   16aa2:	55                   	push   %ebp
   16aa3:	89 e5                	mov    %esp,%ebp
   16aa5:	53                   	push   %ebx
   16aa6:	83 ec 34             	sub    $0x34,%esp

    fat_t *fat = (fat_t*)file->fs->data;
   16aa9:	8b 45 10             	mov    0x10(%ebp),%eax
   16aac:	8b 40 28             	mov    0x28(%eax),%eax
   16aaf:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   16ab5:	89 45 e8             	mov    %eax,-0x18(%ebp)

    //文件空间大小不足以写入，需要拓展空间
    if (file->pos + size > file->size) {
   16ab8:	8b 45 10             	mov    0x10(%ebp),%eax
   16abb:	8b 50 30             	mov    0x30(%eax),%edx
   16abe:	8b 45 0c             	mov    0xc(%ebp),%eax
   16ac1:	01 d0                	add    %edx,%eax
   16ac3:	89 c2                	mov    %eax,%edx
   16ac5:	8b 45 10             	mov    0x10(%ebp),%eax
   16ac8:	8b 40 38             	mov    0x38(%eax),%eax
   16acb:	39 c2                	cmp    %eax,%edx
   16acd:	76 3e                	jbe    16b0d <fatfs_write+0x6b>
        //计算文件当前空间大小与待写入的大小的差值
        int inc_size = file->pos + size - file->size;
   16acf:	8b 45 10             	mov    0x10(%ebp),%eax
   16ad2:	8b 50 30             	mov    0x30(%eax),%edx
   16ad5:	8b 45 0c             	mov    0xc(%ebp),%eax
   16ad8:	01 d0                	add    %edx,%eax
   16ada:	89 c1                	mov    %eax,%ecx
   16adc:	8b 45 10             	mov    0x10(%ebp),%eax
   16adf:	8b 50 38             	mov    0x38(%eax),%edx
   16ae2:	89 c8                	mov    %ecx,%eax
   16ae4:	29 d0                	sub    %edx,%eax
   16ae6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        //拓展文件大小
        int err = expand_file(file, inc_size);
   16ae9:	83 ec 08             	sub    $0x8,%esp
   16aec:	ff 75 e4             	push   -0x1c(%ebp)
   16aef:	ff 75 10             	push   0x10(%ebp)
   16af2:	e8 1e f5 ff ff       	call   16015 <expand_file>
   16af7:	83 c4 10             	add    $0x10,%esp
   16afa:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (err < 0) {
   16afd:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   16b01:	79 0a                	jns    16b0d <fatfs_write+0x6b>
            return 0;
   16b03:	b8 00 00 00 00       	mov    $0x0,%eax
   16b08:	e9 ad 01 00 00       	jmp    16cba <fatfs_write+0x218>
        }
    }

    uint32_t nbytes = size;
   16b0d:	8b 45 0c             	mov    0xc(%ebp),%eax
   16b10:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t total_write = 0;
   16b13:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    while (nbytes > 0) {
   16b1a:	e9 8e 01 00 00       	jmp    16cad <fatfs_write+0x20b>
        //记录每次循环读取的字节数
        uint32_t curr_write = nbytes;
   16b1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16b22:	89 45 ec             	mov    %eax,-0x14(%ebp)
        //计算当前读取位置pos在当前写入的簇中的偏移量
        uint32_t cluster_offset = file->pos % fat->cluster_bytes_size;
   16b25:	8b 45 10             	mov    0x10(%ebp),%eax
   16b28:	8b 40 30             	mov    0x30(%eax),%eax
   16b2b:	89 c2                	mov    %eax,%edx
   16b2d:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16b30:	8b 48 20             	mov    0x20(%eax),%ecx
   16b33:	89 d0                	mov    %edx,%eax
   16b35:	ba 00 00 00 00       	mov    $0x0,%edx
   16b3a:	f7 f1                	div    %ecx
   16b3c:	89 55 dc             	mov    %edx,-0x24(%ebp)
        //计算文件在该分区中的起始扇区号
        //fat文件系统中，在分区的文件数据区中，簇号从2开始编号
        //[2],[3],[4]
        uint32_t start_sector = fat->data_start_sector + (file->cblk - 2) * fat->sec_per_cluster;
   16b3f:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16b42:	8b 50 1c             	mov    0x1c(%eax),%edx
   16b45:	8b 45 10             	mov    0x10(%ebp),%eax
   16b48:	8b 40 40             	mov    0x40(%eax),%eax
   16b4b:	83 e8 02             	sub    $0x2,%eax
   16b4e:	89 c1                	mov    %eax,%ecx
   16b50:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16b53:	8b 40 10             	mov    0x10(%eax),%eax
   16b56:	0f af c1             	imul   %ecx,%eax
   16b59:	01 d0                	add    %edx,%eax
   16b5b:	89 45 d8             	mov    %eax,-0x28(%ebp)

        //当前写入位置刚好在簇的开头，且大小为一个簇，直接进行整簇写入即可
        if (cluster_offset == 0 && nbytes == fat->cluster_bytes_size) {
   16b5e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
   16b62:	75 4f                	jne    16bb3 <fatfs_write+0x111>
   16b64:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16b67:	8b 40 20             	mov    0x20(%eax),%eax
   16b6a:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   16b6d:	75 44                	jne    16bb3 <fatfs_write+0x111>
            int err = dev_write(fat->fs->dev_id, start_sector, buf, fat->sec_per_cluster);
   16b6f:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16b72:	8b 40 10             	mov    0x10(%eax),%eax
   16b75:	89 c1                	mov    %eax,%ecx
   16b77:	8b 55 d8             	mov    -0x28(%ebp),%edx
   16b7a:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16b7d:	8b 40 2c             	mov    0x2c(%eax),%eax
   16b80:	8b 80 18 02 00 00    	mov    0x218(%eax),%eax
   16b86:	51                   	push   %ecx
   16b87:	ff 75 08             	push   0x8(%ebp)
   16b8a:	52                   	push   %edx
   16b8b:	50                   	push   %eax
   16b8c:	e8 fc d6 ff ff       	call   1428d <dev_write>
   16b91:	83 c4 10             	add    $0x10,%esp
   16b94:	89 45 d4             	mov    %eax,-0x2c(%ebp)
            if (err < 0) {
   16b97:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   16b9b:	79 08                	jns    16ba5 <fatfs_write+0x103>
                return total_write;
   16b9d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16ba0:	e9 15 01 00 00       	jmp    16cba <fatfs_write+0x218>
            }

            curr_write = fat->cluster_bytes_size;
   16ba5:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16ba8:	8b 40 20             	mov    0x20(%eax),%eax
   16bab:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (cluster_offset == 0 && nbytes == fat->cluster_bytes_size) {
   16bae:	e9 b6 00 00 00       	jmp    16c69 <fatfs_write+0x1c7>
        } else {//当前写入内容需要进行跨簇写入
            if (cluster_offset + curr_write > fat->cluster_bytes_size) {
   16bb3:	8b 55 dc             	mov    -0x24(%ebp),%edx
   16bb6:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16bb9:	01 c2                	add    %eax,%edx
   16bbb:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16bbe:	8b 40 20             	mov    0x20(%eax),%eax
   16bc1:	39 c2                	cmp    %eax,%edx
   16bc3:	76 0c                	jbe    16bd1 <fatfs_write+0x12f>
                curr_write = fat->cluster_bytes_size - cluster_offset;
   16bc5:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16bc8:	8b 40 20             	mov    0x20(%eax),%eax
   16bcb:	2b 45 dc             	sub    -0x24(%ebp),%eax
   16bce:	89 45 ec             	mov    %eax,-0x14(%ebp)
            }

            //先将当前簇中的内容读取到fat_buffer中
            fat->curr_sector = start_sector;
   16bd1:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16bd4:	8b 55 d8             	mov    -0x28(%ebp),%edx
   16bd7:	89 50 24             	mov    %edx,0x24(%eax)
            int err = dev_read(fat->fs->dev_id, start_sector, fat->fat_buffer, fat->sec_per_cluster);
   16bda:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16bdd:	8b 40 10             	mov    0x10(%eax),%eax
   16be0:	89 c3                	mov    %eax,%ebx
   16be2:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16be5:	8b 48 28             	mov    0x28(%eax),%ecx
   16be8:	8b 55 d8             	mov    -0x28(%ebp),%edx
   16beb:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16bee:	8b 40 2c             	mov    0x2c(%eax),%eax
   16bf1:	8b 80 18 02 00 00    	mov    0x218(%eax),%eax
   16bf7:	53                   	push   %ebx
   16bf8:	51                   	push   %ecx
   16bf9:	52                   	push   %edx
   16bfa:	50                   	push   %eax
   16bfb:	e8 41 d6 ff ff       	call   14241 <dev_read>
   16c00:	83 c4 10             	add    $0x10,%esp
   16c03:	89 45 d0             	mov    %eax,-0x30(%ebp)
            if (err < 0) {
   16c06:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
   16c0a:	79 08                	jns    16c14 <fatfs_write+0x172>
                return total_write;
   16c0c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16c0f:	e9 a6 00 00 00       	jmp    16cba <fatfs_write+0x218>
            }
            //再将需要写入的内容写入fat_buffer中对应位置
            kernel_memcpy(fat->fat_buffer + cluster_offset, buf, curr_write);
   16c14:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16c17:	8b 55 e8             	mov    -0x18(%ebp),%edx
   16c1a:	8b 4a 28             	mov    0x28(%edx),%ecx
   16c1d:	8b 55 dc             	mov    -0x24(%ebp),%edx
   16c20:	01 ca                	add    %ecx,%edx
   16c22:	83 ec 04             	sub    $0x4,%esp
   16c25:	50                   	push   %eax
   16c26:	ff 75 08             	push   0x8(%ebp)
   16c29:	52                   	push   %edx
   16c2a:	e8 1a 20 00 00       	call   18c49 <kernel_memcpy>
   16c2f:	83 c4 10             	add    $0x10,%esp

            //再将fat_buffer覆盖回磁盘
            err = dev_write(fat->fs->dev_id, start_sector, fat->fat_buffer, fat->sec_per_cluster);
   16c32:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16c35:	8b 40 10             	mov    0x10(%eax),%eax
   16c38:	89 c3                	mov    %eax,%ebx
   16c3a:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16c3d:	8b 48 28             	mov    0x28(%eax),%ecx
   16c40:	8b 55 d8             	mov    -0x28(%ebp),%edx
   16c43:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16c46:	8b 40 2c             	mov    0x2c(%eax),%eax
   16c49:	8b 80 18 02 00 00    	mov    0x218(%eax),%eax
   16c4f:	53                   	push   %ebx
   16c50:	51                   	push   %ecx
   16c51:	52                   	push   %edx
   16c52:	50                   	push   %eax
   16c53:	e8 35 d6 ff ff       	call   1428d <dev_write>
   16c58:	83 c4 10             	add    $0x10,%esp
   16c5b:	89 45 d0             	mov    %eax,-0x30(%ebp)
            if (err < 0) {
   16c5e:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
   16c62:	79 05                	jns    16c69 <fatfs_write+0x1c7>
                return total_write;
   16c64:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16c67:	eb 51                	jmp    16cba <fatfs_write+0x218>
            }
        }
        buf += curr_write;
   16c69:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16c6c:	01 45 08             	add    %eax,0x8(%ebp)
        nbytes -= curr_write;
   16c6f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16c72:	29 45 f4             	sub    %eax,-0xc(%ebp)
        total_write += curr_write;
   16c75:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16c78:	01 45 f0             	add    %eax,-0x10(%ebp)
        file->size += curr_write;
   16c7b:	8b 45 10             	mov    0x10(%ebp),%eax
   16c7e:	8b 50 38             	mov    0x38(%eax),%edx
   16c81:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16c84:	01 c2                	add    %eax,%edx
   16c86:	8b 45 10             	mov    0x10(%ebp),%eax
   16c89:	89 50 38             	mov    %edx,0x38(%eax)

        //移动文件的读取位置file->pos
        int err = move_file_pos(file, fat, curr_write, 1);
   16c8c:	6a 01                	push   $0x1
   16c8e:	ff 75 ec             	push   -0x14(%ebp)
   16c91:	ff 75 e8             	push   -0x18(%ebp)
   16c94:	ff 75 10             	push   0x10(%ebp)
   16c97:	e8 cd f4 ff ff       	call   16169 <move_file_pos>
   16c9c:	83 c4 10             	add    $0x10,%esp
   16c9f:	89 45 cc             	mov    %eax,-0x34(%ebp)
        if (err < 0) {
   16ca2:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
   16ca6:	79 05                	jns    16cad <fatfs_write+0x20b>
            return total_write;
   16ca8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16cab:	eb 0d                	jmp    16cba <fatfs_write+0x218>
    while (nbytes > 0) {
   16cad:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   16cb1:	0f 85 68 fe ff ff    	jne    16b1f <fatfs_write+0x7d>
        }
    }

    return total_write;
   16cb7:	8b 45 f0             	mov    -0x10(%ebp),%eax

}
   16cba:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   16cbd:	c9                   	leave  
   16cbe:	c3                   	ret    

00016cbf <fatfs_close>:
/**
 * @brief fat文件系统关闭文件
 * 
 * @param file 
 */
void fatfs_close(file_t *file) {
   16cbf:	55                   	push   %ebp
   16cc0:	89 e5                	mov    %esp,%ebp
   16cc2:	83 ec 18             	sub    $0x18,%esp
    if (file->mode == O_RDONLY) {
   16cc5:	8b 45 08             	mov    0x8(%ebp),%eax
   16cc8:	8b 40 34             	mov    0x34(%eax),%eax
   16ccb:	85 c0                	test   %eax,%eax
   16ccd:	74 6b                	je     16d3a <fatfs_close+0x7b>
        //文件只进行读操作，不需要回写到磁盘上
        return;
    }

    fat_t *fat = (fat_t*)file->fs->data;
   16ccf:	8b 45 08             	mov    0x8(%ebp),%eax
   16cd2:	8b 40 28             	mov    0x28(%eax),%eax
   16cd5:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   16cdb:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //读取文件所属的根目录区的目录项
    diritem_t *item = read_dir_entry(fat, file->p_index);
   16cde:	8b 45 08             	mov    0x8(%ebp),%eax
   16ce1:	8b 40 44             	mov    0x44(%eax),%eax
   16ce4:	83 ec 08             	sub    $0x8,%esp
   16ce7:	50                   	push   %eax
   16ce8:	ff 75 f4             	push   -0xc(%ebp)
   16ceb:	e8 95 f7 ff ff       	call   16485 <read_dir_entry>
   16cf0:	83 c4 10             	add    $0x10,%esp
   16cf3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (item == (diritem_t *)0) {
   16cf6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   16cfa:	74 41                	je     16d3d <fatfs_close+0x7e>
        return;
    }

    //更新目录项信息,并回写到磁盘上
    item->DIR_FileSize = file->size;
   16cfc:	8b 45 08             	mov    0x8(%ebp),%eax
   16cff:	8b 50 38             	mov    0x38(%eax),%edx
   16d02:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16d05:	89 50 1c             	mov    %edx,0x1c(%eax)
    item->DIR_FstClusHI = (uint16_t)(file->sblk << 16);
   16d08:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16d0b:	66 c7 40 14 00 00    	movw   $0x0,0x14(%eax)
    item->DIR_FstClusLo = (uint16_t)(file->sblk & 0xffff);
   16d11:	8b 45 08             	mov    0x8(%ebp),%eax
   16d14:	8b 40 3c             	mov    0x3c(%eax),%eax
   16d17:	89 c2                	mov    %eax,%edx
   16d19:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16d1c:	66 89 50 1a          	mov    %dx,0x1a(%eax)
    write_dir_entry(fat, item, file->p_index);
   16d20:	8b 45 08             	mov    0x8(%ebp),%eax
   16d23:	8b 40 44             	mov    0x44(%eax),%eax
   16d26:	83 ec 04             	sub    $0x4,%esp
   16d29:	50                   	push   %eax
   16d2a:	ff 75 f0             	push   -0x10(%ebp)
   16d2d:	ff 75 f4             	push   -0xc(%ebp)
   16d30:	e8 a1 f6 ff ff       	call   163d6 <write_dir_entry>
   16d35:	83 c4 10             	add    $0x10,%esp
   16d38:	eb 04                	jmp    16d3e <fatfs_close+0x7f>
        return;
   16d3a:	90                   	nop
   16d3b:	eb 01                	jmp    16d3e <fatfs_close+0x7f>
        return;
   16d3d:	90                   	nop
}
   16d3e:	c9                   	leave  
   16d3f:	c3                   	ret    

00016d40 <fatfs_seek>:
 * @param file 
 * @param offset 
 * @param dir 
 * @return int 
 */
int fatfs_seek(file_t *file, uint32_t offset, int dir) {
   16d40:	55                   	push   %ebp
   16d41:	89 e5                	mov    %esp,%ebp
   16d43:	83 ec 28             	sub    $0x28,%esp
    if (dir != 0) {
   16d46:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   16d4a:	74 0a                	je     16d56 <fatfs_seek+0x16>
        return -1;
   16d4c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16d51:	e9 c7 00 00 00       	jmp    16e1d <fatfs_seek+0xdd>
    }

    fat_t *fat = (fat_t *)file->fs->data;
   16d56:	8b 45 08             	mov    0x8(%ebp),%eax
   16d59:	8b 40 28             	mov    0x28(%eax),%eax
   16d5c:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   16d62:	89 45 e8             	mov    %eax,-0x18(%ebp)
    cluster_t current_cluster = file->cblk;
   16d65:	8b 45 08             	mov    0x8(%ebp),%eax
   16d68:	8b 40 40             	mov    0x40(%eax),%eax
   16d6b:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
    uint32_t curr_pos = 0;
   16d6f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    uint32_t offset_to_move = offset;
   16d76:	8b 45 0c             	mov    0xc(%ebp),%eax
   16d79:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //进行偏移处理
    while (offset_to_move) {
   16d7c:	eb 7d                	jmp    16dfb <fatfs_seek+0xbb>
        //计算文件pos在当前簇中的偏移量
        uint32_t c_offset = curr_pos % fat->cluster_bytes_size;
   16d7e:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16d81:	8b 48 20             	mov    0x20(%eax),%ecx
   16d84:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16d87:	ba 00 00 00 00       	mov    $0x0,%edx
   16d8c:	f7 f1                	div    %ecx
   16d8e:	89 55 e4             	mov    %edx,-0x1c(%ebp)
        //初始化此次循环预备移动的字节量
        uint32_t curr_move = offset_to_move;
   16d91:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16d94:	89 45 e0             	mov    %eax,-0x20(%ebp)

        if (c_offset + curr_move < fat->cluster_bytes_size) {
   16d97:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   16d9a:	8b 45 e0             	mov    -0x20(%ebp),%eax
   16d9d:	01 c2                	add    %eax,%edx
   16d9f:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16da2:	8b 40 20             	mov    0x20(%eax),%eax
   16da5:	39 c2                	cmp    %eax,%edx
   16da7:	73 08                	jae    16db1 <fatfs_seek+0x71>
            //此处循环移动后，pos还在当前簇中
            curr_pos += curr_move;
   16da9:	8b 45 e0             	mov    -0x20(%ebp),%eax
   16dac:	01 45 f0             	add    %eax,-0x10(%ebp)
            break;
   16daf:	eb 54                	jmp    16e05 <fatfs_seek+0xc5>
        }

        //此次循环移动后pos将移动到下一个簇
        //所以先将本簇中的剩余字节量偏移
        curr_move = fat->cluster_bytes_size - c_offset;
   16db1:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16db4:	8b 40 20             	mov    0x20(%eax),%eax
   16db7:	2b 45 e4             	sub    -0x1c(%ebp),%eax
   16dba:	89 45 e0             	mov    %eax,-0x20(%ebp)
        curr_pos += curr_move;
   16dbd:	8b 45 e0             	mov    -0x20(%ebp),%eax
   16dc0:	01 45 f0             	add    %eax,-0x10(%ebp)
        offset_to_move -= curr_move;
   16dc3:	8b 45 e0             	mov    -0x20(%ebp),%eax
   16dc6:	29 45 ec             	sub    %eax,-0x14(%ebp)

        //获取下一个簇号
        current_cluster = cluster_get_next(fat, current_cluster);
   16dc9:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   16dcd:	83 ec 08             	sub    $0x8,%esp
   16dd0:	50                   	push   %eax
   16dd1:	ff 75 e8             	push   -0x18(%ebp)
   16dd4:	e8 cf ee ff ff       	call   15ca8 <cluster_get_next>
   16dd9:	83 c4 10             	add    $0x10,%esp
   16ddc:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
        if (!cluster_is_valid(current_cluster)) {
   16de0:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   16de4:	83 ec 0c             	sub    $0xc,%esp
   16de7:	50                   	push   %eax
   16de8:	e8 f9 ed ff ff       	call   15be6 <cluster_is_valid>
   16ded:	83 c4 10             	add    $0x10,%esp
   16df0:	85 c0                	test   %eax,%eax
   16df2:	75 07                	jne    16dfb <fatfs_seek+0xbb>
            return -1;
   16df4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16df9:	eb 22                	jmp    16e1d <fatfs_seek+0xdd>
    while (offset_to_move) {
   16dfb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   16dff:	0f 85 79 ff ff ff    	jne    16d7e <fatfs_seek+0x3e>
        }

    }

    file->cblk = current_cluster;
   16e05:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
   16e09:	8b 45 08             	mov    0x8(%ebp),%eax
   16e0c:	89 50 40             	mov    %edx,0x40(%eax)
    file->pos = curr_pos;
   16e0f:	8b 55 f0             	mov    -0x10(%ebp),%edx
   16e12:	8b 45 08             	mov    0x8(%ebp),%eax
   16e15:	89 50 30             	mov    %edx,0x30(%eax)
    
    return 0;
   16e18:	b8 00 00 00 00       	mov    $0x0,%eax

}
   16e1d:	c9                   	leave  
   16e1e:	c3                   	ret    

00016e1f <fatfs_stat>:
int fatfs_stat(file_t *file, struct stat *st) {
   16e1f:	55                   	push   %ebp
   16e20:	89 e5                	mov    %esp,%ebp
    return 0;
   16e22:	b8 00 00 00 00       	mov    $0x0,%eax

}
   16e27:	5d                   	pop    %ebp
   16e28:	c3                   	ret    

00016e29 <fatfs_opendir>:
 * @param fs 
 * @param name 
 * @param dir 
 * @return int 
 */
int fatfs_opendir(struct _fs_t *fs, const char *name, DIR *dir) {
   16e29:	55                   	push   %ebp
   16e2a:	89 e5                	mov    %esp,%ebp
    dir->index = 0;
   16e2c:	8b 45 10             	mov    0x10(%ebp),%eax
   16e2f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    return 0;
   16e35:	b8 00 00 00 00       	mov    $0x0,%eax
}
   16e3a:	5d                   	pop    %ebp
   16e3b:	c3                   	ret    

00016e3c <fatfs_readdir>:
 * @param fs 
 * @param dir 
 * @param dirent 
 * @return int 
 */
int fatfs_readdir(struct _fs_t *fs, DIR *dir, struct dirent *dirent) {
   16e3c:	55                   	push   %ebp
   16e3d:	89 e5                	mov    %esp,%ebp
   16e3f:	83 ec 18             	sub    $0x18,%esp
    //获取当前fat文件系统的fat表信息
    fat_t *fat = (fat_t*)fs->data;
   16e42:	8b 45 08             	mov    0x8(%ebp),%eax
   16e45:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   16e4b:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while (dir->index < fat->root_ent_cnt) {
   16e4e:	e9 aa 00 00 00       	jmp    16efd <fatfs_readdir+0xc1>
        diritem_t *item = read_dir_entry(fat, dir->index);
   16e53:	8b 45 0c             	mov    0xc(%ebp),%eax
   16e56:	8b 00                	mov    (%eax),%eax
   16e58:	83 ec 08             	sub    $0x8,%esp
   16e5b:	50                   	push   %eax
   16e5c:	ff 75 f4             	push   -0xc(%ebp)
   16e5f:	e8 21 f6 ff ff       	call   16485 <read_dir_entry>
   16e64:	83 c4 10             	add    $0x10,%esp
   16e67:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (item == (diritem_t *)0) {
   16e6a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   16e6e:	75 0a                	jne    16e7a <fatfs_readdir+0x3e>
            return -1;
   16e70:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16e75:	e9 9d 00 00 00       	jmp    16f17 <fatfs_readdir+0xdb>
        }


        //该目录项有效,获取目录项信息到dirent中
        if (item->DIR_Name[0] != DIRITEM_NAEM_FREE && item->DIR_Name[0] != DIRITEM_NAME_END) {
   16e7a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16e7d:	0f b6 00             	movzbl (%eax),%eax
   16e80:	3c e5                	cmp    $0xe5,%al
   16e82:	74 6c                	je     16ef0 <fatfs_readdir+0xb4>
   16e84:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16e87:	0f b6 00             	movzbl (%eax),%eax
   16e8a:	84 c0                	test   %al,%al
   16e8c:	74 62                	je     16ef0 <fatfs_readdir+0xb4>
            file_type_t type = diritem_get_type(item);
   16e8e:	83 ec 0c             	sub    $0xc,%esp
   16e91:	ff 75 f0             	push   -0x10(%ebp)
   16e94:	e8 92 f3 ff ff       	call   1622b <diritem_get_type>
   16e99:	83 c4 10             	add    $0x10,%esp
   16e9c:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if ((type == FILE_NORMAL) || (type == FILE_DIR)) {
   16e9f:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
   16ea3:	74 06                	je     16eab <fatfs_readdir+0x6f>
   16ea5:	83 7d ec 02          	cmpl   $0x2,-0x14(%ebp)
   16ea9:	75 45                	jne    16ef0 <fatfs_readdir+0xb4>
                dirent->size = item->DIR_FileSize;
   16eab:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16eae:	8b 40 1c             	mov    0x1c(%eax),%eax
   16eb1:	89 c2                	mov    %eax,%edx
   16eb3:	8b 45 10             	mov    0x10(%ebp),%eax
   16eb6:	89 50 18             	mov    %edx,0x18(%eax)
                dirent->type = type;
   16eb9:	8b 55 ec             	mov    -0x14(%ebp),%edx
   16ebc:	8b 45 10             	mov    0x10(%ebp),%eax
   16ebf:	89 50 04             	mov    %edx,0x4(%eax)
                diritem_get_name(item, dirent->name);
   16ec2:	8b 45 10             	mov    0x10(%ebp),%eax
   16ec5:	83 c0 08             	add    $0x8,%eax
   16ec8:	83 ec 08             	sub    $0x8,%esp
   16ecb:	50                   	push   %eax
   16ecc:	ff 75 f0             	push   -0x10(%ebp)
   16ecf:	e8 17 f4 ff ff       	call   162eb <diritem_get_name>
   16ed4:	83 c4 10             	add    $0x10,%esp

                //记录目录项在该目录中的索引
                dirent->index = dir->index++;
   16ed7:	8b 45 0c             	mov    0xc(%ebp),%eax
   16eda:	8b 00                	mov    (%eax),%eax
   16edc:	8d 48 01             	lea    0x1(%eax),%ecx
   16edf:	8b 55 0c             	mov    0xc(%ebp),%edx
   16ee2:	89 0a                	mov    %ecx,(%edx)
   16ee4:	8b 55 10             	mov    0x10(%ebp),%edx
   16ee7:	89 02                	mov    %eax,(%edx)
                return 0;
   16ee9:	b8 00 00 00 00       	mov    $0x0,%eax
   16eee:	eb 27                	jmp    16f17 <fatfs_readdir+0xdb>
            }
        }

        //该目录项无效，继续获取下一个目录项
        dir->index++;
   16ef0:	8b 45 0c             	mov    0xc(%ebp),%eax
   16ef3:	8b 00                	mov    (%eax),%eax
   16ef5:	8d 50 01             	lea    0x1(%eax),%edx
   16ef8:	8b 45 0c             	mov    0xc(%ebp),%eax
   16efb:	89 10                	mov    %edx,(%eax)
    while (dir->index < fat->root_ent_cnt) {
   16efd:	8b 45 0c             	mov    0xc(%ebp),%eax
   16f00:	8b 00                	mov    (%eax),%eax
   16f02:	89 c2                	mov    %eax,%edx
   16f04:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16f07:	8b 40 18             	mov    0x18(%eax),%eax
   16f0a:	39 c2                	cmp    %eax,%edx
   16f0c:	0f 82 41 ff ff ff    	jb     16e53 <fatfs_readdir+0x17>
    }


    return -1;
   16f12:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   16f17:	c9                   	leave  
   16f18:	c3                   	ret    

00016f19 <fatfs_closedir>:
 * 
 * @param fs 
 * @param dir 
 * @return int 
 */
int fatfs_closedir(struct _fs_t *fs, DIR *dir) {
   16f19:	55                   	push   %ebp
   16f1a:	89 e5                	mov    %esp,%ebp
 return 0;
   16f1c:	b8 00 00 00 00       	mov    $0x0,%eax
}
   16f21:	5d                   	pop    %ebp
   16f22:	c3                   	ret    

00016f23 <fatfs_unlink>:
 * 
 * @param fs 
 * @param path 
 * @return int 
 */
int fatfs_unlink(struct _fs_t *fs, const char *path) {
   16f23:	55                   	push   %ebp
   16f24:	89 e5                	mov    %esp,%ebp
   16f26:	83 ec 38             	sub    $0x38,%esp
     //获取fat表信息
    fat_t *fat = (fat_t*)fs->data;
   16f29:	8b 45 08             	mov    0x8(%ebp),%eax
   16f2c:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   16f32:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (int i = 0; i < fat->root_ent_cnt; ++i) {
   16f35:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   16f3c:	e9 b2 00 00 00       	jmp    16ff3 <fatfs_unlink+0xd0>
        diritem_t * item = read_dir_entry(fat, i);
   16f41:	83 ec 08             	sub    $0x8,%esp
   16f44:	ff 75 f4             	push   -0xc(%ebp)
   16f47:	ff 75 f0             	push   -0x10(%ebp)
   16f4a:	e8 36 f5 ff ff       	call   16485 <read_dir_entry>
   16f4f:	83 c4 10             	add    $0x10,%esp
   16f52:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (item == (diritem_t *)0) {
   16f55:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   16f59:	75 0a                	jne    16f65 <fatfs_unlink+0x42>
            return -1;
   16f5b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16f60:	e9 a4 00 00 00       	jmp    17009 <fatfs_unlink+0xe6>
        }

        if (item->DIR_Name[0] == DIRITEM_NAME_END) {
   16f65:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16f68:	0f b6 00             	movzbl (%eax),%eax
   16f6b:	84 c0                	test   %al,%al
   16f6d:	74 7c                	je     16feb <fatfs_unlink+0xc8>
            continue;
        }

        if (item->DIR_Name[0] == DIRITEM_NAEM_FREE) {
   16f6f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16f72:	0f b6 00             	movzbl (%eax),%eax
   16f75:	3c e5                	cmp    $0xe5,%al
   16f77:	74 75                	je     16fee <fatfs_unlink+0xcb>
            continue;
        }

        //进行路径匹配
        if (diritem_name_match(item, path)) {
   16f79:	83 ec 08             	sub    $0x8,%esp
   16f7c:	ff 75 0c             	push   0xc(%ebp)
   16f7f:	ff 75 ec             	push   -0x14(%ebp)
   16f82:	e8 19 f4 ff ff       	call   163a0 <diritem_name_match>
   16f87:	83 c4 10             	add    $0x10,%esp
   16f8a:	85 c0                	test   %eax,%eax
   16f8c:	74 61                	je     16fef <fatfs_unlink+0xcc>
            //找到文件，进行删除操作
            //获取文件的起始簇号，并清除fat表中的簇链关系
            int cluster = (item->DIR_FstClusHI << 16) | item->DIR_FstClusLo;
   16f8e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16f91:	0f b7 40 14          	movzwl 0x14(%eax),%eax
   16f95:	0f b7 c0             	movzwl %ax,%eax
   16f98:	c1 e0 10             	shl    $0x10,%eax
   16f9b:	89 c2                	mov    %eax,%edx
   16f9d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16fa0:	0f b7 40 1a          	movzwl 0x1a(%eax),%eax
   16fa4:	0f b7 c0             	movzwl %ax,%eax
   16fa7:	09 d0                	or     %edx,%eax
   16fa9:	89 45 e8             	mov    %eax,-0x18(%ebp)
            cluster_free_chain(fat, cluster);
   16fac:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16faf:	0f b7 c0             	movzwl %ax,%eax
   16fb2:	83 ec 08             	sub    $0x8,%esp
   16fb5:	50                   	push   %eax
   16fb6:	ff 75 f0             	push   -0x10(%ebp)
   16fb9:	e8 d7 ee ff ff       	call   15e95 <cluster_free_chain>
   16fbe:	83 c4 10             	add    $0x10,%esp

            //将磁盘上该目录项的位置清空
            diritem_t file_item;
            kernel_memset(&file_item, 0, sizeof(diritem_t));
   16fc1:	83 ec 04             	sub    $0x4,%esp
   16fc4:	6a 20                	push   $0x20
   16fc6:	6a 00                	push   $0x0
   16fc8:	8d 45 c8             	lea    -0x38(%ebp),%eax
   16fcb:	50                   	push   %eax
   16fcc:	e8 c7 1c 00 00       	call   18c98 <kernel_memset>
   16fd1:	83 c4 10             	add    $0x10,%esp
            return write_dir_entry(fat, &file_item, i);
   16fd4:	83 ec 04             	sub    $0x4,%esp
   16fd7:	ff 75 f4             	push   -0xc(%ebp)
   16fda:	8d 45 c8             	lea    -0x38(%ebp),%eax
   16fdd:	50                   	push   %eax
   16fde:	ff 75 f0             	push   -0x10(%ebp)
   16fe1:	e8 f0 f3 ff ff       	call   163d6 <write_dir_entry>
   16fe6:	83 c4 10             	add    $0x10,%esp
   16fe9:	eb 1e                	jmp    17009 <fatfs_unlink+0xe6>
            continue;
   16feb:	90                   	nop
   16fec:	eb 01                	jmp    16fef <fatfs_unlink+0xcc>
            continue;
   16fee:	90                   	nop
    for (int i = 0; i < fat->root_ent_cnt; ++i) {
   16fef:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   16ff3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16ff6:	8b 50 18             	mov    0x18(%eax),%edx
   16ff9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16ffc:	39 c2                	cmp    %eax,%edx
   16ffe:	0f 87 3d ff ff ff    	ja     16f41 <fatfs_unlink+0x1e>
        }
    }

    return -1;
   17004:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   17009:	c9                   	leave  
   1700a:	c3                   	ret    

0001700b <file_table_init>:

/**
 * @brief 初始化file_table
 * 
 */
void file_table_init(void) {
   1700b:	55                   	push   %ebp
   1700c:	89 e5                	mov    %esp,%ebp
   1700e:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&file_alloc_mutex);
   17011:	83 ec 0c             	sub    $0xc,%esp
   17014:	68 c0 58 07 00       	push   $0x758c0
   17019:	e8 e3 0f 00 00       	call   18001 <mutex_init>
   1701e:	83 c4 10             	add    $0x10,%esp
    kernel_memset(file_table, 0, sizeof(file_table));
   17021:	83 ec 04             	sub    $0x4,%esp
   17024:	68 00 40 02 00       	push   $0x24000
   17029:	6a 00                	push   $0x0
   1702b:	68 c0 18 05 00       	push   $0x518c0
   17030:	e8 63 1c 00 00       	call   18c98 <kernel_memset>
   17035:	83 c4 10             	add    $0x10,%esp
}
   17038:	90                   	nop
   17039:	c9                   	leave  
   1703a:	c3                   	ret    

0001703b <file_alloc>:
/**
 * @brief 从file_table中分配一个file结构
 * 
 * @return file_t* 
 */
file_t *file_alloc(void) {
   1703b:	55                   	push   %ebp
   1703c:	89 e5                	mov    %esp,%ebp
   1703e:	83 ec 18             	sub    $0x18,%esp
    file_t *file = (file_t*)0;
   17041:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    //TODO:加锁
    mutex_lock(&file_alloc_mutex);
   17048:	83 ec 0c             	sub    $0xc,%esp
   1704b:	68 c0 58 07 00       	push   $0x758c0
   17050:	e8 f9 0f 00 00       	call   1804e <mutex_lock>
   17055:	83 c4 10             	add    $0x10,%esp

    //在file_table中获取分配一个资源
    for (int i = 0; i < FILE_TABLE_SIZE; ++i) {
   17058:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   1705f:	eb 47                	jmp    170a8 <file_alloc+0x6d>
        file_t * p_file = file_table + i;
   17061:	8b 55 f0             	mov    -0x10(%ebp),%edx
   17064:	89 d0                	mov    %edx,%eax
   17066:	c1 e0 03             	shl    $0x3,%eax
   17069:	01 d0                	add    %edx,%eax
   1706b:	c1 e0 03             	shl    $0x3,%eax
   1706e:	05 c0 18 05 00       	add    $0x518c0,%eax
   17073:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (p_file->ref == 0) { //当前资源未被分配
   17076:	8b 45 ec             	mov    -0x14(%ebp),%eax
   17079:	8b 40 24             	mov    0x24(%eax),%eax
   1707c:	85 c0                	test   %eax,%eax
   1707e:	75 24                	jne    170a4 <file_alloc+0x69>
            kernel_memset(p_file, 0, sizeof(file_t));
   17080:	83 ec 04             	sub    $0x4,%esp
   17083:	6a 48                	push   $0x48
   17085:	6a 00                	push   $0x0
   17087:	ff 75 ec             	push   -0x14(%ebp)
   1708a:	e8 09 1c 00 00       	call   18c98 <kernel_memset>
   1708f:	83 c4 10             	add    $0x10,%esp
            p_file->ref = 1;    //记录被外部引用
   17092:	8b 45 ec             	mov    -0x14(%ebp),%eax
   17095:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
            file = p_file;
   1709c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1709f:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   170a2:	eb 0d                	jmp    170b1 <file_alloc+0x76>
    for (int i = 0; i < FILE_TABLE_SIZE; ++i) {
   170a4:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   170a8:	81 7d f0 ff 07 00 00 	cmpl   $0x7ff,-0x10(%ebp)
   170af:	7e b0                	jle    17061 <file_alloc+0x26>
        }
    }

    //TODO:解锁
    mutex_unlock(&file_alloc_mutex);
   170b1:	83 ec 0c             	sub    $0xc,%esp
   170b4:	68 c0 58 07 00       	push   $0x758c0
   170b9:	e8 36 10 00 00       	call   180f4 <mutex_unlock>
   170be:	83 c4 10             	add    $0x10,%esp
    return file;
   170c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   170c4:	c9                   	leave  
   170c5:	c3                   	ret    

000170c6 <file_free>:
/**
 * @brief 释放一个文件结构资源
 * 
 * @param file 
 */
void file_free(file_t *file) {
   170c6:	55                   	push   %ebp
   170c7:	89 e5                	mov    %esp,%ebp
   170c9:	83 ec 08             	sub    $0x8,%esp

    //TODO:加锁
    mutex_lock(&file_alloc_mutex);
   170cc:	83 ec 0c             	sub    $0xc,%esp
   170cf:	68 c0 58 07 00       	push   $0x758c0
   170d4:	e8 75 0f 00 00       	call   1804e <mutex_lock>
   170d9:	83 c4 10             	add    $0x10,%esp
    
    if (file->ref > 0) {    //引用计数减1
   170dc:	8b 45 08             	mov    0x8(%ebp),%eax
   170df:	8b 40 24             	mov    0x24(%eax),%eax
   170e2:	85 c0                	test   %eax,%eax
   170e4:	7e 0f                	jle    170f5 <file_free+0x2f>
        file->ref--;
   170e6:	8b 45 08             	mov    0x8(%ebp),%eax
   170e9:	8b 40 24             	mov    0x24(%eax),%eax
   170ec:	8d 50 ff             	lea    -0x1(%eax),%edx
   170ef:	8b 45 08             	mov    0x8(%ebp),%eax
   170f2:	89 50 24             	mov    %edx,0x24(%eax)
    }

    //TODO:解锁
    mutex_unlock(&file_alloc_mutex);
   170f5:	83 ec 0c             	sub    $0xc,%esp
   170f8:	68 c0 58 07 00       	push   $0x758c0
   170fd:	e8 f2 0f 00 00       	call   180f4 <mutex_unlock>
   17102:	83 c4 10             	add    $0x10,%esp
}
   17105:	90                   	nop
   17106:	c9                   	leave  
   17107:	c3                   	ret    

00017108 <file_inc_ref>:
/**
 * @brief 增加文件file的引用计数
 * 
 * @param file 
 */
void file_inc_ref(file_t *file) {
   17108:	55                   	push   %ebp
   17109:	89 e5                	mov    %esp,%ebp
   1710b:	83 ec 08             	sub    $0x8,%esp

    //TODO:加锁
    mutex_lock(&file_alloc_mutex);
   1710e:	83 ec 0c             	sub    $0xc,%esp
   17111:	68 c0 58 07 00       	push   $0x758c0
   17116:	e8 33 0f 00 00       	call   1804e <mutex_lock>
   1711b:	83 c4 10             	add    $0x10,%esp
    
    file->ref++;
   1711e:	8b 45 08             	mov    0x8(%ebp),%eax
   17121:	8b 40 24             	mov    0x24(%eax),%eax
   17124:	8d 50 01             	lea    0x1(%eax),%edx
   17127:	8b 45 08             	mov    0x8(%ebp),%eax
   1712a:	89 50 24             	mov    %edx,0x24(%eax)

    //TODO:解锁
    mutex_unlock(&file_alloc_mutex);
   1712d:	83 ec 0c             	sub    $0xc,%esp
   17130:	68 c0 58 07 00       	push   $0x758c0
   17135:	e8 ba 0f 00 00       	call   180f4 <mutex_unlock>
   1713a:	83 c4 10             	add    $0x10,%esp
   1713d:	90                   	nop
   1713e:	c9                   	leave  
   1713f:	c3                   	ret    

00017140 <list_node_next>:
static inline list_node_t *list_node_next(list_node_t *node) {
   17140:	55                   	push   %ebp
   17141:	89 e5                	mov    %esp,%ebp
   17143:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   17146:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1714a:	75 19                	jne    17165 <list_node_next+0x25>
   1714c:	68 30 a7 01 00       	push   $0x1a730
   17151:	68 48 a9 01 00       	push   $0x1a948
   17156:	6a 2b                	push   $0x2b
   17158:	68 48 a7 01 00       	push   $0x1a748
   1715d:	e8 17 16 00 00       	call   18779 <pannic>
   17162:	83 c4 10             	add    $0x10,%esp
    return node->next;
   17165:	8b 45 08             	mov    0x8(%ebp),%eax
   17168:	8b 40 04             	mov    0x4(%eax),%eax
}
   1716b:	c9                   	leave  
   1716c:	c3                   	ret    

0001716d <list_init>:
static inline void list_init(list_t *list) {
   1716d:	55                   	push   %ebp
   1716e:	89 e5                	mov    %esp,%ebp
   17170:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   17173:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   17177:	75 19                	jne    17192 <list_init+0x25>
   17179:	68 86 a7 01 00       	push   $0x1a786
   1717e:	68 64 a9 01 00       	push   $0x1a964
   17183:	6a 31                	push   $0x31
   17185:	68 48 a7 01 00       	push   $0x1a748
   1718a:	e8 ea 15 00 00       	call   18779 <pannic>
   1718f:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   17192:	8b 45 08             	mov    0x8(%ebp),%eax
   17195:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1719c:	8b 45 08             	mov    0x8(%ebp),%eax
   1719f:	8b 50 04             	mov    0x4(%eax),%edx
   171a2:	8b 45 08             	mov    0x8(%ebp),%eax
   171a5:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   171a7:	8b 45 08             	mov    0x8(%ebp),%eax
   171aa:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   171b1:	90                   	nop
   171b2:	c9                   	leave  
   171b3:	c3                   	ret    

000171b4 <list_get_first>:
static inline list_node_t *list_get_first(list_t *list) {
   171b4:	55                   	push   %ebp
   171b5:	89 e5                	mov    %esp,%ebp
   171b7:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   171ba:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   171be:	75 19                	jne    171d9 <list_get_first+0x25>
   171c0:	68 86 a7 01 00       	push   $0x1a786
   171c5:	68 38 a9 01 00       	push   $0x1a938
   171ca:	6a 44                	push   $0x44
   171cc:	68 48 a7 01 00       	push   $0x1a748
   171d1:	e8 a3 15 00 00       	call   18779 <pannic>
   171d6:	83 c4 10             	add    $0x10,%esp
    return list->first;
   171d9:	8b 45 08             	mov    0x8(%ebp),%eax
   171dc:	8b 00                	mov    (%eax),%eax
}
   171de:	c9                   	leave  
   171df:	c3                   	ret    

000171e0 <is_fd_bad>:
 * @brief 检验文件描述符fd是否有效
 *
 * @param fd
 * @return int
 */
static int is_fd_bad(int fd) {
   171e0:	55                   	push   %ebp
   171e1:	89 e5                	mov    %esp,%ebp
  if (fd < 0 && fd >= TASK_OFILE_SIZE) {
   171e3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   171e7:	79 0d                	jns    171f6 <is_fd_bad+0x16>
   171e9:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   171ed:	7e 07                	jle    171f6 <is_fd_bad+0x16>
    return 1;
   171ef:	b8 01 00 00 00       	mov    $0x1,%eax
   171f4:	eb 05                	jmp    171fb <is_fd_bad+0x1b>
  }

  return 0;
   171f6:	b8 00 00 00 00       	mov    $0x0,%eax
}
   171fb:	5d                   	pop    %ebp
   171fc:	c3                   	ret    

000171fd <is_path_valid>:
 * @brief 判断文件路径是否有效
 *
 * @param path
 * @return int
 */
static int is_path_valid(const char *path) {
   171fd:	55                   	push   %ebp
   171fe:	89 e5                	mov    %esp,%ebp
  if (path == (const char *)0 || path[0] == '\0') {  // 路径无效
   17200:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   17204:	74 0a                	je     17210 <is_path_valid+0x13>
   17206:	8b 45 08             	mov    0x8(%ebp),%eax
   17209:	0f b6 00             	movzbl (%eax),%eax
   1720c:	84 c0                	test   %al,%al
   1720e:	75 07                	jne    17217 <is_path_valid+0x1a>
    return 0;
   17210:	b8 00 00 00 00       	mov    $0x0,%eax
   17215:	eb 05                	jmp    1721c <is_path_valid+0x1f>
  }

  return 1;
   17217:	b8 01 00 00 00       	mov    $0x1,%eax
}
   1721c:	5d                   	pop    %ebp
   1721d:	c3                   	ret    

0001721e <path_next_child>:
 * @brief 获取路径path下一级路径
 *
 * @param path
 * @return const char*
 */
const char *path_next_child(const char *path) {
   1721e:	55                   	push   %ebp
   1721f:	89 e5                	mov    %esp,%ebp
   17221:	83 ec 10             	sub    $0x10,%esp
  const char *c = path;
   17224:	8b 45 08             	mov    0x8(%ebp),%eax
   17227:	89 45 fc             	mov    %eax,-0x4(%ebp)
  while (*c && (*(c++) == '/')) {
   1722a:	90                   	nop
   1722b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1722e:	0f b6 00             	movzbl (%eax),%eax
   17231:	84 c0                	test   %al,%al
   17233:	74 10                	je     17245 <path_next_child+0x27>
   17235:	8b 45 fc             	mov    -0x4(%ebp),%eax
   17238:	8d 50 01             	lea    0x1(%eax),%edx
   1723b:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1723e:	0f b6 00             	movzbl (%eax),%eax
   17241:	3c 2f                	cmp    $0x2f,%al
   17243:	74 e6                	je     1722b <path_next_child+0xd>
  };  // 跳过第一个'/'
  while (*c && (*(c++) != '/')) {
   17245:	90                   	nop
   17246:	8b 45 fc             	mov    -0x4(%ebp),%eax
   17249:	0f b6 00             	movzbl (%eax),%eax
   1724c:	84 c0                	test   %al,%al
   1724e:	74 10                	je     17260 <path_next_child+0x42>
   17250:	8b 45 fc             	mov    -0x4(%ebp),%eax
   17253:	8d 50 01             	lea    0x1(%eax),%edx
   17256:	89 55 fc             	mov    %edx,-0x4(%ebp)
   17259:	0f b6 00             	movzbl (%eax),%eax
   1725c:	3c 2f                	cmp    $0x2f,%al
   1725e:	75 e6                	jne    17246 <path_next_child+0x28>
  };  // 跳过一级目录到下一个'/'

  return *c ? c : (const char *)0;  // 返回第二个'/'后的部分
   17260:	8b 45 fc             	mov    -0x4(%ebp),%eax
   17263:	0f b6 00             	movzbl (%eax),%eax
   17266:	84 c0                	test   %al,%al
   17268:	74 05                	je     1726f <path_next_child+0x51>
   1726a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1726d:	eb 05                	jmp    17274 <path_next_child+0x56>
   1726f:	b8 00 00 00 00       	mov    $0x0,%eax
}
   17274:	c9                   	leave  
   17275:	c3                   	ret    

00017276 <path_to_num>:
 *
 * @param path
 * @param num
 * @return int
 */
int path_to_num(const char *path, int *num) {
   17276:	55                   	push   %ebp
   17277:	89 e5                	mov    %esp,%ebp
   17279:	83 ec 10             	sub    $0x10,%esp
  int n = 0;
   1727c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  const char *c = path;
   17283:	8b 45 08             	mov    0x8(%ebp),%eax
   17286:	89 45 f8             	mov    %eax,-0x8(%ebp)

  while (*c) {
   17289:	eb 23                	jmp    172ae <path_to_num+0x38>
    n = n * 10 + *c - '0';
   1728b:	8b 55 fc             	mov    -0x4(%ebp),%edx
   1728e:	89 d0                	mov    %edx,%eax
   17290:	c1 e0 02             	shl    $0x2,%eax
   17293:	01 d0                	add    %edx,%eax
   17295:	01 c0                	add    %eax,%eax
   17297:	89 c2                	mov    %eax,%edx
   17299:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1729c:	0f b6 00             	movzbl (%eax),%eax
   1729f:	0f be c0             	movsbl %al,%eax
   172a2:	01 d0                	add    %edx,%eax
   172a4:	83 e8 30             	sub    $0x30,%eax
   172a7:	89 45 fc             	mov    %eax,-0x4(%ebp)
    c++;
   172aa:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  while (*c) {
   172ae:	8b 45 f8             	mov    -0x8(%ebp),%eax
   172b1:	0f b6 00             	movzbl (%eax),%eax
   172b4:	84 c0                	test   %al,%al
   172b6:	75 d3                	jne    1728b <path_to_num+0x15>
  }

  *num = n;
   172b8:	8b 45 0c             	mov    0xc(%ebp),%eax
   172bb:	8b 55 fc             	mov    -0x4(%ebp),%edx
   172be:	89 10                	mov    %edx,(%eax)

  return n;
   172c0:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   172c3:	c9                   	leave  
   172c4:	c3                   	ret    

000172c5 <path_begin_with>:
 *
 * @param path
 * @param str
 * @return int
 */
int path_begin_with(const char *path, const char *str) {
   172c5:	55                   	push   %ebp
   172c6:	89 e5                	mov    %esp,%ebp
   172c8:	83 ec 10             	sub    $0x10,%esp
  const char *s1 = path, *s2 = str;
   172cb:	8b 45 08             	mov    0x8(%ebp),%eax
   172ce:	89 45 fc             	mov    %eax,-0x4(%ebp)
   172d1:	8b 45 0c             	mov    0xc(%ebp),%eax
   172d4:	89 45 f8             	mov    %eax,-0x8(%ebp)
  while (*s1 && *s2 && (*s1 == *s2)) {
   172d7:	eb 08                	jmp    172e1 <path_begin_with+0x1c>
    s1++;
   172d9:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    s2++;
   172dd:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  while (*s1 && *s2 && (*s1 == *s2)) {
   172e1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   172e4:	0f b6 00             	movzbl (%eax),%eax
   172e7:	84 c0                	test   %al,%al
   172e9:	74 1a                	je     17305 <path_begin_with+0x40>
   172eb:	8b 45 f8             	mov    -0x8(%ebp),%eax
   172ee:	0f b6 00             	movzbl (%eax),%eax
   172f1:	84 c0                	test   %al,%al
   172f3:	74 10                	je     17305 <path_begin_with+0x40>
   172f5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   172f8:	0f b6 10             	movzbl (%eax),%edx
   172fb:	8b 45 f8             	mov    -0x8(%ebp),%eax
   172fe:	0f b6 00             	movzbl (%eax),%eax
   17301:	38 c2                	cmp    %al,%dl
   17303:	74 d4                	je     172d9 <path_begin_with+0x14>
  }

  return *s2 == '\0';
   17305:	8b 45 f8             	mov    -0x8(%ebp),%eax
   17308:	0f b6 00             	movzbl (%eax),%eax
   1730b:	84 c0                	test   %al,%al
   1730d:	0f 94 c0             	sete   %al
   17310:	0f b6 c0             	movzbl %al,%eax
}
   17313:	c9                   	leave  
   17314:	c3                   	ret    

00017315 <fs_protect>:
/**
 * @brief 对文件系统的操作进行保护
 *
 * @param fs
 */
static void fs_protect(fs_t *fs) {
   17315:	55                   	push   %ebp
   17316:	89 e5                	mov    %esp,%ebp
   17318:	83 ec 08             	sub    $0x8,%esp
  if (fs->mutex) {
   1731b:	8b 45 08             	mov    0x8(%ebp),%eax
   1731e:	8b 80 14 02 00 00    	mov    0x214(%eax),%eax
   17324:	85 c0                	test   %eax,%eax
   17326:	74 15                	je     1733d <fs_protect+0x28>
    mutex_lock(fs->mutex);
   17328:	8b 45 08             	mov    0x8(%ebp),%eax
   1732b:	8b 80 14 02 00 00    	mov    0x214(%eax),%eax
   17331:	83 ec 0c             	sub    $0xc,%esp
   17334:	50                   	push   %eax
   17335:	e8 14 0d 00 00       	call   1804e <mutex_lock>
   1733a:	83 c4 10             	add    $0x10,%esp
  }
}
   1733d:	90                   	nop
   1733e:	c9                   	leave  
   1733f:	c3                   	ret    

00017340 <fs_unprotect>:
/**
 * @brief 对文件系统的操作进行保护
 *
 * @param fs
 */
static void fs_unprotect(fs_t *fs) {
   17340:	55                   	push   %ebp
   17341:	89 e5                	mov    %esp,%ebp
   17343:	83 ec 08             	sub    $0x8,%esp
  if (fs->mutex) {
   17346:	8b 45 08             	mov    0x8(%ebp),%eax
   17349:	8b 80 14 02 00 00    	mov    0x214(%eax),%eax
   1734f:	85 c0                	test   %eax,%eax
   17351:	74 15                	je     17368 <fs_unprotect+0x28>
    mutex_unlock(fs->mutex);
   17353:	8b 45 08             	mov    0x8(%ebp),%eax
   17356:	8b 80 14 02 00 00    	mov    0x214(%eax),%eax
   1735c:	83 ec 0c             	sub    $0xc,%esp
   1735f:	50                   	push   %eax
   17360:	e8 8f 0d 00 00       	call   180f4 <mutex_unlock>
   17365:	83 c4 10             	add    $0x10,%esp
  }
}
   17368:	90                   	nop
   17369:	c9                   	leave  
   1736a:	c3                   	ret    

0001736b <sys_open>:
 * @param name 文件路径
 * @param flags 打开方式的标志
 * @param ...
 * @return int 文件描述符
 */
int sys_open(const char *name, int flags, ...) {
   1736b:	55                   	push   %ebp
   1736c:	89 e5                	mov    %esp,%ebp
   1736e:	83 ec 28             	sub    $0x28,%esp
  // 1.判断路径是否有效
  if (!is_path_valid(name)) {  // 文件路径无效
   17371:	ff 75 08             	push   0x8(%ebp)
   17374:	e8 84 fe ff ff       	call   171fd <is_path_valid>
   17379:	83 c4 04             	add    $0x4,%esp
   1737c:	85 c0                	test   %eax,%eax
   1737e:	75 1a                	jne    1739a <sys_open+0x2f>
    log_printf("path is not valid\n");
   17380:	83 ec 0c             	sub    $0xc,%esp
   17383:	68 99 a7 01 00       	push   $0x1a799
   17388:	e8 08 21 00 00       	call   19495 <log_printf>
   1738d:	83 c4 10             	add    $0x10,%esp
    return -1;
   17390:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17395:	e9 64 01 00 00       	jmp    174fe <sys_open+0x193>
  }

  // 2.从系统file_table中分配一个文件结构
  file_t *file = file_alloc();
   1739a:	e8 9c fc ff ff       	call   1703b <file_alloc>
   1739f:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if (!file) {
   173a2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   173a6:	75 0a                	jne    173b2 <sys_open+0x47>
    return -1;
   173a8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   173ad:	e9 4c 01 00 00       	jmp    174fe <sys_open+0x193>
  }
  // 3.将文件结构放入当前进程的打开文件表中并得到文件描述符
  int fd = task_alloc_fd(file);
   173b2:	83 ec 0c             	sub    $0xc,%esp
   173b5:	ff 75 ec             	push   -0x14(%ebp)
   173b8:	e8 2c 9f ff ff       	call   112e9 <task_alloc_fd>
   173bd:	83 c4 10             	add    $0x10,%esp
   173c0:	89 45 e8             	mov    %eax,-0x18(%ebp)
  if (fd < 0) {  // 放入失败
   173c3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   173c7:	0f 88 09 01 00 00    	js     174d6 <sys_open+0x16b>
    goto sys_open_failed;
  }

  // 遍历文件系统挂载链表mounted_list,寻找需要打开的文件对应的文件系统
  fs_t *fs = (fs_t *)0;
   173cd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  list_node_t *node = list_get_first(&mounted_list);
   173d4:	83 ec 0c             	sub    $0xc,%esp
   173d7:	68 e0 58 07 00       	push   $0x758e0
   173dc:	e8 d3 fd ff ff       	call   171b4 <list_get_first>
   173e1:	83 c4 10             	add    $0x10,%esp
   173e4:	89 45 f0             	mov    %eax,-0x10(%ebp)
  while (node) {
   173e7:	eb 47                	jmp    17430 <sys_open+0xc5>
    fs_t *curr = list_node_parent(node, fs_t, node);
   173e9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   173ed:	74 0a                	je     173f9 <sys_open+0x8e>
   173ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
   173f2:	2d 0c 02 00 00       	sub    $0x20c,%eax
   173f7:	eb 05                	jmp    173fe <sys_open+0x93>
   173f9:	b8 00 00 00 00       	mov    $0x0,%eax
   173fe:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (path_begin_with(name,
                        curr->mount_point)) {  // 该文件属于curr这个文件系统
   17401:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    if (path_begin_with(name,
   17404:	83 ec 08             	sub    $0x8,%esp
   17407:	50                   	push   %eax
   17408:	ff 75 08             	push   0x8(%ebp)
   1740b:	e8 b5 fe ff ff       	call   172c5 <path_begin_with>
   17410:	83 c4 10             	add    $0x10,%esp
   17413:	85 c0                	test   %eax,%eax
   17415:	74 08                	je     1741f <sys_open+0xb4>
      fs = curr;
   17417:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1741a:	89 45 f4             	mov    %eax,-0xc(%ebp)
      break;
   1741d:	eb 17                	jmp    17436 <sys_open+0xcb>
    }

    node = list_node_next(node);
   1741f:	83 ec 0c             	sub    $0xc,%esp
   17422:	ff 75 f0             	push   -0x10(%ebp)
   17425:	e8 16 fd ff ff       	call   17140 <list_node_next>
   1742a:	83 c4 10             	add    $0x10,%esp
   1742d:	89 45 f0             	mov    %eax,-0x10(%ebp)
  while (node) {
   17430:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   17434:	75 b3                	jne    173e9 <sys_open+0x7e>
  }

  if (fs) {  // 找到对应的文件系统
   17436:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1743a:	74 13                	je     1744f <sys_open+0xe4>
    // 获取下一级路径
    name = path_next_child(name);
   1743c:	83 ec 0c             	sub    $0xc,%esp
   1743f:	ff 75 08             	push   0x8(%ebp)
   17442:	e8 d7 fd ff ff       	call   1721e <path_next_child>
   17447:	83 c4 10             	add    $0x10,%esp
   1744a:	89 45 08             	mov    %eax,0x8(%ebp)
   1744d:	eb 08                	jmp    17457 <sys_open+0xec>
  } else {  // 未找到对应文件系统，使用默认的根文件系统
    fs = root_fs;
   1744f:	a1 04 70 07 00       	mov    0x77004,%eax
   17454:	89 45 f4             	mov    %eax,-0xc(%ebp)
  }

  // 为文件绑定模式参数和文件系统
  file->mode = flags;
   17457:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1745a:	8b 55 0c             	mov    0xc(%ebp),%edx
   1745d:	89 50 34             	mov    %edx,0x34(%eax)
  file->fs = fs;
   17460:	8b 45 ec             	mov    -0x14(%ebp),%eax
   17463:	8b 55 f4             	mov    -0xc(%ebp),%edx
   17466:	89 50 28             	mov    %edx,0x28(%eax)
  kernel_strncpy(file->file_name, name, FILE_NAME_SIZE);
   17469:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1746c:	83 ec 04             	sub    $0x4,%esp
   1746f:	6a 20                	push   $0x20
   17471:	ff 75 08             	push   0x8(%ebp)
   17474:	50                   	push   %eax
   17475:	e8 c8 16 00 00       	call   18b42 <kernel_strncpy>
   1747a:	83 c4 10             	add    $0x10,%esp

  // 使用该文件系统打开该文件
  fs_protect(fs);
   1747d:	83 ec 0c             	sub    $0xc,%esp
   17480:	ff 75 f4             	push   -0xc(%ebp)
   17483:	e8 8d fe ff ff       	call   17315 <fs_protect>
   17488:	83 c4 10             	add    $0x10,%esp
  int err = fs->op->open(fs, name, file);
   1748b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1748e:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   17494:	8b 40 08             	mov    0x8(%eax),%eax
   17497:	83 ec 04             	sub    $0x4,%esp
   1749a:	ff 75 ec             	push   -0x14(%ebp)
   1749d:	ff 75 08             	push   0x8(%ebp)
   174a0:	ff 75 f4             	push   -0xc(%ebp)
   174a3:	ff d0                	call   *%eax
   174a5:	83 c4 10             	add    $0x10,%esp
   174a8:	89 45 e0             	mov    %eax,-0x20(%ebp)
  fs_unprotect(fs);
   174ab:	83 ec 0c             	sub    $0xc,%esp
   174ae:	ff 75 f4             	push   -0xc(%ebp)
   174b1:	e8 8a fe ff ff       	call   17340 <fs_unprotect>
   174b6:	83 c4 10             	add    $0x10,%esp

  if (err < 0) {
   174b9:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   174bd:	79 12                	jns    174d1 <sys_open+0x166>
    log_printf("open failed!");
   174bf:	83 ec 0c             	sub    $0xc,%esp
   174c2:	68 ac a7 01 00       	push   $0x1a7ac
   174c7:	e8 c9 1f 00 00       	call   19495 <log_printf>
   174cc:	83 c4 10             	add    $0x10,%esp
    goto sys_open_failed;
   174cf:	eb 06                	jmp    174d7 <sys_open+0x16c>
  }

  // 6.返回文件描述符
  return fd;
   174d1:	8b 45 e8             	mov    -0x18(%ebp),%eax
   174d4:	eb 28                	jmp    174fe <sys_open+0x193>
    goto sys_open_failed;
   174d6:	90                   	nop

// 打开失败，回收资源
sys_open_failed:
  // 释放掉已分配的file
  file_free(file);
   174d7:	83 ec 0c             	sub    $0xc,%esp
   174da:	ff 75 ec             	push   -0x14(%ebp)
   174dd:	e8 e4 fb ff ff       	call   170c6 <file_free>
   174e2:	83 c4 10             	add    $0x10,%esp
  if (fd >= 0) {  // 释放掉已分配的打开文件表的资源
   174e5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   174e9:	78 0e                	js     174f9 <sys_open+0x18e>
    task_remove_fd(fd);
   174eb:	83 ec 0c             	sub    $0xc,%esp
   174ee:	ff 75 e8             	push   -0x18(%ebp)
   174f1:	e8 46 9e ff ff       	call   1133c <task_remove_fd>
   174f6:	83 c4 10             	add    $0x10,%esp
  }

  return -1;
   174f9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   174fe:	c9                   	leave  
   174ff:	c3                   	ret    

00017500 <sys_read>:
 * @param fd 文件描述符
 * @param buf 缓冲区地址
 * @param len 读取字节数
 * @return int 成功读取字节数
 */
int sys_read(int fd, char *buf, int len) {
   17500:	55                   	push   %ebp
   17501:	89 e5                	mov    %esp,%ebp
   17503:	83 ec 18             	sub    $0x18,%esp

  if (is_fd_bad(fd) || !buf || !len) {
   17506:	ff 75 08             	push   0x8(%ebp)
   17509:	e8 d2 fc ff ff       	call   171e0 <is_fd_bad>
   1750e:	83 c4 04             	add    $0x4,%esp
   17511:	85 c0                	test   %eax,%eax
   17513:	75 0c                	jne    17521 <sys_read+0x21>
   17515:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   17519:	74 06                	je     17521 <sys_read+0x21>
   1751b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1751f:	75 0a                	jne    1752b <sys_read+0x2b>
    return -1;
   17521:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17526:	e9 98 00 00 00       	jmp    175c3 <sys_read+0xc3>
  }

  //1.根据文件描述符从当前进程的打开文件表中获取文件指针
  file_t *file = task_file(fd);
   1752b:	83 ec 0c             	sub    $0xc,%esp
   1752e:	ff 75 08             	push   0x8(%ebp)
   17531:	e8 83 9d ff ff       	call   112b9 <task_file>
   17536:	83 c4 10             	add    $0x10,%esp
   17539:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (!file) {  // 获取失败
   1753c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   17540:	75 17                	jne    17559 <sys_read+0x59>
    log_printf("file not opened!\n");
   17542:	83 ec 0c             	sub    $0xc,%esp
   17545:	68 b9 a7 01 00       	push   $0x1a7b9
   1754a:	e8 46 1f 00 00       	call   19495 <log_printf>
   1754f:	83 c4 10             	add    $0x10,%esp
    return -1;
   17552:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17557:	eb 6a                	jmp    175c3 <sys_read+0xc3>
  }

  //2.判断文件的读写模式
  if (file->mode == O_WRONLY) { //文件只写，不可读
   17559:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1755c:	8b 40 34             	mov    0x34(%eax),%eax
   1755f:	83 f8 01             	cmp    $0x1,%eax
   17562:	75 17                	jne    1757b <sys_read+0x7b>
    log_printf("file is write only!\n");
   17564:	83 ec 0c             	sub    $0xc,%esp
   17567:	68 cb a7 01 00       	push   $0x1a7cb
   1756c:	e8 24 1f 00 00       	call   19495 <log_printf>
   17571:	83 c4 10             	add    $0x10,%esp
    return -1;
   17574:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17579:	eb 48                	jmp    175c3 <sys_read+0xc3>
  }

  //3.获取文件对应的文件系统，并执行读操作
  fs_t *fs = file->fs;
   1757b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1757e:	8b 40 28             	mov    0x28(%eax),%eax
   17581:	89 45 f0             	mov    %eax,-0x10(%ebp)
  fs_protect(fs);
   17584:	83 ec 0c             	sub    $0xc,%esp
   17587:	ff 75 f0             	push   -0x10(%ebp)
   1758a:	e8 86 fd ff ff       	call   17315 <fs_protect>
   1758f:	83 c4 10             	add    $0x10,%esp
  int err = fs->op->read(buf, len, file);
   17592:	8b 45 f0             	mov    -0x10(%ebp),%eax
   17595:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   1759b:	8b 40 0c             	mov    0xc(%eax),%eax
   1759e:	83 ec 04             	sub    $0x4,%esp
   175a1:	ff 75 f4             	push   -0xc(%ebp)
   175a4:	ff 75 10             	push   0x10(%ebp)
   175a7:	ff 75 0c             	push   0xc(%ebp)
   175aa:	ff d0                	call   *%eax
   175ac:	83 c4 10             	add    $0x10,%esp
   175af:	89 45 ec             	mov    %eax,-0x14(%ebp)
  fs_unprotect(fs);
   175b2:	83 ec 0c             	sub    $0xc,%esp
   175b5:	ff 75 f0             	push   -0x10(%ebp)
   175b8:	e8 83 fd ff ff       	call   17340 <fs_unprotect>
   175bd:	83 c4 10             	add    $0x10,%esp

  return err;
   175c0:	8b 45 ec             	mov    -0x14(%ebp),%eax

}
   175c3:	c9                   	leave  
   175c4:	c3                   	ret    

000175c5 <sys_write>:
 * @param fd 文件描述符
 * @param ptr 缓冲区地址
 * @param len 写入字节数
 * @return int 成功写入字节数
 */
int sys_write(int fd, char *buf, int len) {
   175c5:	55                   	push   %ebp
   175c6:	89 e5                	mov    %esp,%ebp
   175c8:	83 ec 18             	sub    $0x18,%esp
   if (is_fd_bad(fd) || !buf || !len) {
   175cb:	ff 75 08             	push   0x8(%ebp)
   175ce:	e8 0d fc ff ff       	call   171e0 <is_fd_bad>
   175d3:	83 c4 04             	add    $0x4,%esp
   175d6:	85 c0                	test   %eax,%eax
   175d8:	75 0c                	jne    175e6 <sys_write+0x21>
   175da:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   175de:	74 06                	je     175e6 <sys_write+0x21>
   175e0:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   175e4:	75 0a                	jne    175f0 <sys_write+0x2b>
    return -1;
   175e6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   175eb:	e9 97 00 00 00       	jmp    17687 <sys_write+0xc2>
  }

  //1.根据文件描述符从当前进程的打开文件表中获取文件指针
  file_t *file = task_file(fd);
   175f0:	83 ec 0c             	sub    $0xc,%esp
   175f3:	ff 75 08             	push   0x8(%ebp)
   175f6:	e8 be 9c ff ff       	call   112b9 <task_file>
   175fb:	83 c4 10             	add    $0x10,%esp
   175fe:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (!file) {  // 获取失败
   17601:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   17605:	75 17                	jne    1761e <sys_write+0x59>
    log_printf("file not opened!\n");
   17607:	83 ec 0c             	sub    $0xc,%esp
   1760a:	68 b9 a7 01 00       	push   $0x1a7b9
   1760f:	e8 81 1e 00 00       	call   19495 <log_printf>
   17614:	83 c4 10             	add    $0x10,%esp
    return -1;
   17617:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1761c:	eb 69                	jmp    17687 <sys_write+0xc2>
  }

  //2.判断文件的读写模式
  if (file->mode == O_RDONLY) { //文件只读，不可写
   1761e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17621:	8b 40 34             	mov    0x34(%eax),%eax
   17624:	85 c0                	test   %eax,%eax
   17626:	75 17                	jne    1763f <sys_write+0x7a>
    log_printf("file is read only!\n");
   17628:	83 ec 0c             	sub    $0xc,%esp
   1762b:	68 e0 a7 01 00       	push   $0x1a7e0
   17630:	e8 60 1e 00 00       	call   19495 <log_printf>
   17635:	83 c4 10             	add    $0x10,%esp
    return -1;
   17638:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1763d:	eb 48                	jmp    17687 <sys_write+0xc2>
  }

  //3.获取文件对应的文件系统，并执行写操作
  fs_t *fs = file->fs;
   1763f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17642:	8b 40 28             	mov    0x28(%eax),%eax
   17645:	89 45 f0             	mov    %eax,-0x10(%ebp)
  fs_protect(fs);
   17648:	83 ec 0c             	sub    $0xc,%esp
   1764b:	ff 75 f0             	push   -0x10(%ebp)
   1764e:	e8 c2 fc ff ff       	call   17315 <fs_protect>
   17653:	83 c4 10             	add    $0x10,%esp
  int err = fs->op->write(buf, len, file);
   17656:	8b 45 f0             	mov    -0x10(%ebp),%eax
   17659:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   1765f:	8b 40 10             	mov    0x10(%eax),%eax
   17662:	83 ec 04             	sub    $0x4,%esp
   17665:	ff 75 f4             	push   -0xc(%ebp)
   17668:	ff 75 10             	push   0x10(%ebp)
   1766b:	ff 75 0c             	push   0xc(%ebp)
   1766e:	ff d0                	call   *%eax
   17670:	83 c4 10             	add    $0x10,%esp
   17673:	89 45 ec             	mov    %eax,-0x14(%ebp)
  fs_unprotect(fs);
   17676:	83 ec 0c             	sub    $0xc,%esp
   17679:	ff 75 f0             	push   -0x10(%ebp)
   1767c:	e8 bf fc ff ff       	call   17340 <fs_unprotect>
   17681:	83 c4 10             	add    $0x10,%esp
  
  return err;
   17684:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
   17687:	c9                   	leave  
   17688:	c3                   	ret    

00017689 <sys_lseek>:
 * @param fd
 * @param offset
 * @param pos
 * @return int
 */
int sys_lseek(int fd, int offset, int dir) {
   17689:	55                   	push   %ebp
   1768a:	89 e5                	mov    %esp,%ebp
   1768c:	83 ec 18             	sub    $0x18,%esp

  if (is_fd_bad(fd)) {
   1768f:	ff 75 08             	push   0x8(%ebp)
   17692:	e8 49 fb ff ff       	call   171e0 <is_fd_bad>
   17697:	83 c4 04             	add    $0x4,%esp
   1769a:	85 c0                	test   %eax,%eax
   1769c:	74 07                	je     176a5 <sys_lseek+0x1c>
    return -1;
   1769e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   176a3:	eb 77                	jmp    1771c <sys_lseek+0x93>
  }

  //1.根据文件描述符从当前进程的打开文件表中获取文件指针
  file_t *file = task_file(fd);
   176a5:	83 ec 0c             	sub    $0xc,%esp
   176a8:	ff 75 08             	push   0x8(%ebp)
   176ab:	e8 09 9c ff ff       	call   112b9 <task_file>
   176b0:	83 c4 10             	add    $0x10,%esp
   176b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (!file) {  // 获取失败
   176b6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   176ba:	75 17                	jne    176d3 <sys_lseek+0x4a>
    log_printf("file not opened!\n");
   176bc:	83 ec 0c             	sub    $0xc,%esp
   176bf:	68 b9 a7 01 00       	push   $0x1a7b9
   176c4:	e8 cc 1d 00 00       	call   19495 <log_printf>
   176c9:	83 c4 10             	add    $0x10,%esp
    return -1;
   176cc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   176d1:	eb 49                	jmp    1771c <sys_lseek+0x93>
  }


  //2.获取文件对应的文件系统，并执行偏移操作
  fs_t *fs = file->fs;
   176d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   176d6:	8b 40 28             	mov    0x28(%eax),%eax
   176d9:	89 45 f0             	mov    %eax,-0x10(%ebp)
  fs_protect(fs);
   176dc:	83 ec 0c             	sub    $0xc,%esp
   176df:	ff 75 f0             	push   -0x10(%ebp)
   176e2:	e8 2e fc ff ff       	call   17315 <fs_protect>
   176e7:	83 c4 10             	add    $0x10,%esp
  int err = fs->op->seek(file, offset, dir);
   176ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
   176ed:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   176f3:	8b 40 18             	mov    0x18(%eax),%eax
   176f6:	8b 55 0c             	mov    0xc(%ebp),%edx
   176f9:	83 ec 04             	sub    $0x4,%esp
   176fc:	ff 75 10             	push   0x10(%ebp)
   176ff:	52                   	push   %edx
   17700:	ff 75 f4             	push   -0xc(%ebp)
   17703:	ff d0                	call   *%eax
   17705:	83 c4 10             	add    $0x10,%esp
   17708:	89 45 ec             	mov    %eax,-0x14(%ebp)
  fs_unprotect(fs);
   1770b:	83 ec 0c             	sub    $0xc,%esp
   1770e:	ff 75 f0             	push   -0x10(%ebp)
   17711:	e8 2a fc ff ff       	call   17340 <fs_unprotect>
   17716:	83 c4 10             	add    $0x10,%esp
  
  return err;
   17719:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
   1771c:	c9                   	leave  
   1771d:	c3                   	ret    

0001771e <sys_close>:
 * @brief 关闭文件
 *
 * @param fd
 * @return int
 */
int sys_close(int fd) {
   1771e:	55                   	push   %ebp
   1771f:	89 e5                	mov    %esp,%ebp
   17721:	83 ec 18             	sub    $0x18,%esp
  if (is_fd_bad(fd)) {
   17724:	ff 75 08             	push   0x8(%ebp)
   17727:	e8 b4 fa ff ff       	call   171e0 <is_fd_bad>
   1772c:	83 c4 04             	add    $0x4,%esp
   1772f:	85 c0                	test   %eax,%eax
   17731:	74 1a                	je     1774d <sys_close+0x2f>
    log_printf("file error");
   17733:	83 ec 0c             	sub    $0xc,%esp
   17736:	68 f4 a7 01 00       	push   $0x1a7f4
   1773b:	e8 55 1d 00 00       	call   19495 <log_printf>
   17740:	83 c4 10             	add    $0x10,%esp
    return -1;
   17743:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17748:	e9 c8 00 00 00       	jmp    17815 <sys_close+0xf7>
  }

  //1.从打开文件表中获取文件结构
  file_t *file = task_file(fd);
   1774d:	83 ec 0c             	sub    $0xc,%esp
   17750:	ff 75 08             	push   0x8(%ebp)
   17753:	e8 61 9b ff ff       	call   112b9 <task_file>
   17758:	83 c4 10             	add    $0x10,%esp
   1775b:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (!file) {
   1775e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   17762:	75 1a                	jne    1777e <sys_close+0x60>
    log_printf("file not opened!\n");
   17764:	83 ec 0c             	sub    $0xc,%esp
   17767:	68 b9 a7 01 00       	push   $0x1a7b9
   1776c:	e8 24 1d 00 00       	call   19495 <log_printf>
   17771:	83 c4 10             	add    $0x10,%esp
    return -1;
   17774:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17779:	e9 97 00 00 00       	jmp    17815 <sys_close+0xf7>
  }

  ASSERT(file->ref > 0);  //文件必须为打开状态
   1777e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17781:	8b 40 24             	mov    0x24(%eax),%eax
   17784:	85 c0                	test   %eax,%eax
   17786:	7f 1c                	jg     177a4 <sys_close+0x86>
   17788:	68 ff a7 01 00       	push   $0x1a7ff
   1778d:	68 58 a9 01 00       	push   $0x1a958
   17792:	68 55 01 00 00       	push   $0x155
   17797:	68 10 a8 01 00       	push   $0x1a810
   1779c:	e8 d8 0f 00 00       	call   18779 <pannic>
   177a1:	83 c4 10             	add    $0x10,%esp

  //2.若当前文件只被一个进程引用则获取对应文件系统并执行关闭操作
  if (file->ref-- == 1) {
   177a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   177a7:	8b 40 24             	mov    0x24(%eax),%eax
   177aa:	8d 48 ff             	lea    -0x1(%eax),%ecx
   177ad:	8b 55 f4             	mov    -0xc(%ebp),%edx
   177b0:	89 4a 24             	mov    %ecx,0x24(%edx)
   177b3:	83 f8 01             	cmp    $0x1,%eax
   177b6:	75 4a                	jne    17802 <sys_close+0xe4>
    fs_t *fs = file->fs;
   177b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   177bb:	8b 40 28             	mov    0x28(%eax),%eax
   177be:	89 45 f0             	mov    %eax,-0x10(%ebp)
    fs_protect(fs);
   177c1:	83 ec 0c             	sub    $0xc,%esp
   177c4:	ff 75 f0             	push   -0x10(%ebp)
   177c7:	e8 49 fb ff ff       	call   17315 <fs_protect>
   177cc:	83 c4 10             	add    $0x10,%esp
    fs->op->close(file);
   177cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
   177d2:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   177d8:	8b 40 14             	mov    0x14(%eax),%eax
   177db:	83 ec 0c             	sub    $0xc,%esp
   177de:	ff 75 f4             	push   -0xc(%ebp)
   177e1:	ff d0                	call   *%eax
   177e3:	83 c4 10             	add    $0x10,%esp
    fs_protect(fs);
   177e6:	83 ec 0c             	sub    $0xc,%esp
   177e9:	ff 75 f0             	push   -0x10(%ebp)
   177ec:	e8 24 fb ff ff       	call   17315 <fs_protect>
   177f1:	83 c4 10             	add    $0x10,%esp

    //关闭文件后释放文件结构
    file_free(file);
   177f4:	83 ec 0c             	sub    $0xc,%esp
   177f7:	ff 75 f4             	push   -0xc(%ebp)
   177fa:	e8 c7 f8 ff ff       	call   170c6 <file_free>
   177ff:	83 c4 10             	add    $0x10,%esp
  }

  //3.当前文件还被其它进程所引用，只在当前进程的打开文件表中释放该文件即可
  task_remove_fd(fd);
   17802:	83 ec 0c             	sub    $0xc,%esp
   17805:	ff 75 08             	push   0x8(%ebp)
   17808:	e8 2f 9b ff ff       	call   1133c <task_remove_fd>
   1780d:	83 c4 10             	add    $0x10,%esp

  return 0;
   17810:	b8 00 00 00 00       	mov    $0x0,%eax
}
   17815:	c9                   	leave  
   17816:	c3                   	ret    

00017817 <sys_fstat>:
 *
 * @param fd
 * @param st
 * @return int
 */
int sys_fstat(int fd, struct stat *st) { 
   17817:	55                   	push   %ebp
   17818:	89 e5                	mov    %esp,%ebp
   1781a:	83 ec 18             	sub    $0x18,%esp
  
   if (is_fd_bad(fd)) {
   1781d:	ff 75 08             	push   0x8(%ebp)
   17820:	e8 bb f9 ff ff       	call   171e0 <is_fd_bad>
   17825:	83 c4 04             	add    $0x4,%esp
   17828:	85 c0                	test   %eax,%eax
   1782a:	74 1a                	je     17846 <sys_fstat+0x2f>
    log_printf("file error");
   1782c:	83 ec 0c             	sub    $0xc,%esp
   1782f:	68 f4 a7 01 00       	push   $0x1a7f4
   17834:	e8 5c 1c 00 00       	call   19495 <log_printf>
   17839:	83 c4 10             	add    $0x10,%esp
    return -1;
   1783c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17841:	e9 85 00 00 00       	jmp    178cb <sys_fstat+0xb4>
  }

  //1.从打开文件表中获取文件结构
  file_t *file = task_file(fd);
   17846:	83 ec 0c             	sub    $0xc,%esp
   17849:	ff 75 08             	push   0x8(%ebp)
   1784c:	e8 68 9a ff ff       	call   112b9 <task_file>
   17851:	83 c4 10             	add    $0x10,%esp
   17854:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (!file) {
   17857:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1785b:	75 17                	jne    17874 <sys_fstat+0x5d>
    log_printf("file not opened!\n");
   1785d:	83 ec 0c             	sub    $0xc,%esp
   17860:	68 b9 a7 01 00       	push   $0x1a7b9
   17865:	e8 2b 1c 00 00       	call   19495 <log_printf>
   1786a:	83 c4 10             	add    $0x10,%esp
    return -1;
   1786d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17872:	eb 57                	jmp    178cb <sys_fstat+0xb4>
  }

  //2.获取对应文件系统进行状态获取操作
  fs_t *fs = file->fs;
   17874:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17877:	8b 40 28             	mov    0x28(%eax),%eax
   1787a:	89 45 f0             	mov    %eax,-0x10(%ebp)
  kernel_memset(st, 0, sizeof(struct stat));
   1787d:	83 ec 04             	sub    $0x4,%esp
   17880:	6a 48                	push   $0x48
   17882:	6a 00                	push   $0x0
   17884:	ff 75 0c             	push   0xc(%ebp)
   17887:	e8 0c 14 00 00       	call   18c98 <kernel_memset>
   1788c:	83 c4 10             	add    $0x10,%esp
  fs_protect(fs);
   1788f:	83 ec 0c             	sub    $0xc,%esp
   17892:	ff 75 f0             	push   -0x10(%ebp)
   17895:	e8 7b fa ff ff       	call   17315 <fs_protect>
   1789a:	83 c4 10             	add    $0x10,%esp
  int err = fs->op->stat(file, st);
   1789d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   178a0:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   178a6:	8b 40 1c             	mov    0x1c(%eax),%eax
   178a9:	83 ec 08             	sub    $0x8,%esp
   178ac:	ff 75 0c             	push   0xc(%ebp)
   178af:	ff 75 f4             	push   -0xc(%ebp)
   178b2:	ff d0                	call   *%eax
   178b4:	83 c4 10             	add    $0x10,%esp
   178b7:	89 45 ec             	mov    %eax,-0x14(%ebp)
  fs_unprotect(fs);
   178ba:	83 ec 0c             	sub    $0xc,%esp
   178bd:	ff 75 f0             	push   -0x10(%ebp)
   178c0:	e8 7b fa ff ff       	call   17340 <fs_unprotect>
   178c5:	83 c4 10             	add    $0x10,%esp


  return err;
   178c8:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
   178cb:	c9                   	leave  
   178cc:	c3                   	ret    

000178cd <sys_isatty>:
 * @brief
 *
 * @param fd
 * @return int
 */
int sys_isatty(int fd) { 
   178cd:	55                   	push   %ebp
   178ce:	89 e5                	mov    %esp,%ebp
   178d0:	83 ec 18             	sub    $0x18,%esp
   if (is_fd_bad(fd)) {
   178d3:	ff 75 08             	push   0x8(%ebp)
   178d6:	e8 05 f9 ff ff       	call   171e0 <is_fd_bad>
   178db:	83 c4 04             	add    $0x4,%esp
   178de:	85 c0                	test   %eax,%eax
   178e0:	74 17                	je     178f9 <sys_isatty+0x2c>
    log_printf("file error");
   178e2:	83 ec 0c             	sub    $0xc,%esp
   178e5:	68 f4 a7 01 00       	push   $0x1a7f4
   178ea:	e8 a6 1b 00 00       	call   19495 <log_printf>
   178ef:	83 c4 10             	add    $0x10,%esp
    return -1;
   178f2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   178f7:	eb 3d                	jmp    17936 <sys_isatty+0x69>
  }

  //1.从打开文件表中获取文件结构
  file_t *file = task_file(fd);
   178f9:	83 ec 0c             	sub    $0xc,%esp
   178fc:	ff 75 08             	push   0x8(%ebp)
   178ff:	e8 b5 99 ff ff       	call   112b9 <task_file>
   17904:	83 c4 10             	add    $0x10,%esp
   17907:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (!file) {
   1790a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1790e:	75 17                	jne    17927 <sys_isatty+0x5a>
    log_printf("file not opened!\n");
   17910:	83 ec 0c             	sub    $0xc,%esp
   17913:	68 b9 a7 01 00       	push   $0x1a7b9
   17918:	e8 78 1b 00 00       	call   19495 <log_printf>
   1791d:	83 c4 10             	add    $0x10,%esp
    return -1;
   17920:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17925:	eb 0f                	jmp    17936 <sys_isatty+0x69>
  }

  return file->type == FILE_TTY;
   17927:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1792a:	8b 40 20             	mov    0x20(%eax),%eax
   1792d:	83 f8 01             	cmp    $0x1,%eax
   17930:	0f 94 c0             	sete   %al
   17933:	0f b6 c0             	movzbl %al,%eax
}
   17936:	c9                   	leave  
   17937:	c3                   	ret    

00017938 <sys_dup>:
 * @brief 在当前进程的打开文件表中分配新的一项指向该文件描述符对应的文件指针
 *
 * @param fd 需要被多次引用的文件指针的文件描述符
 * @return int 新的文件描述符
 */
int sys_dup(int fd) {
   17938:	55                   	push   %ebp
   17939:	89 e5                	mov    %esp,%ebp
   1793b:	83 ec 18             	sub    $0x18,%esp
  if (is_fd_bad(fd)) {
   1793e:	ff 75 08             	push   0x8(%ebp)
   17941:	e8 9a f8 ff ff       	call   171e0 <is_fd_bad>
   17946:	83 c4 04             	add    $0x4,%esp
   17949:	85 c0                	test   %eax,%eax
   1794b:	74 1a                	je     17967 <sys_dup+0x2f>
    log_printf("fd %d is not valid.", fd);
   1794d:	83 ec 08             	sub    $0x8,%esp
   17950:	ff 75 08             	push   0x8(%ebp)
   17953:	68 41 a8 01 00       	push   $0x1a841
   17958:	e8 38 1b 00 00       	call   19495 <log_printf>
   1795d:	83 c4 10             	add    $0x10,%esp
    return -1;
   17960:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17965:	eb 6d                	jmp    179d4 <sys_dup+0x9c>
  }

  // 1.获取需要重复引用的文件指针
  file_t *file = task_file(fd);
   17967:	83 ec 0c             	sub    $0xc,%esp
   1796a:	ff 75 08             	push   0x8(%ebp)
   1796d:	e8 47 99 ff ff       	call   112b9 <task_file>
   17972:	83 c4 10             	add    $0x10,%esp
   17975:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (!file) {
   17978:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1797c:	75 17                	jne    17995 <sys_dup+0x5d>
    log_printf("file not opend!\n");
   1797e:	83 ec 0c             	sub    $0xc,%esp
   17981:	68 55 a8 01 00       	push   $0x1a855
   17986:	e8 0a 1b 00 00       	call   19495 <log_printf>
   1798b:	83 c4 10             	add    $0x10,%esp
    return -1;
   1798e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17993:	eb 3f                	jmp    179d4 <sys_dup+0x9c>
  }

  // 2.在打开文件表中新分配一项给该文件指针
  int new_fd = task_alloc_fd(file);
   17995:	83 ec 0c             	sub    $0xc,%esp
   17998:	ff 75 f4             	push   -0xc(%ebp)
   1799b:	e8 49 99 ff ff       	call   112e9 <task_alloc_fd>
   179a0:	83 c4 10             	add    $0x10,%esp
   179a3:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (new_fd < 0) {
   179a6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   179aa:	79 17                	jns    179c3 <sys_dup+0x8b>
    log_printf("no task file avaliable\n");
   179ac:	83 ec 0c             	sub    $0xc,%esp
   179af:	68 66 a8 01 00       	push   $0x1a866
   179b4:	e8 dc 1a 00 00       	call   19495 <log_printf>
   179b9:	83 c4 10             	add    $0x10,%esp
    return -1;
   179bc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   179c1:	eb 11                	jmp    179d4 <sys_dup+0x9c>
  }

  file_inc_ref(file);  // 分配成功，该文件引用次数加一
   179c3:	83 ec 0c             	sub    $0xc,%esp
   179c6:	ff 75 f4             	push   -0xc(%ebp)
   179c9:	e8 3a f7 ff ff       	call   17108 <file_inc_ref>
   179ce:	83 c4 10             	add    $0x10,%esp
  return fd;
   179d1:	8b 45 08             	mov    0x8(%ebp),%eax
}
   179d4:	c9                   	leave  
   179d5:	c3                   	ret    

000179d6 <sys_opendir>:
 * 
 * @param path 
 * @param dir 
 * @return int 
 */
int sys_opendir(const char *path, DIR *dir) {
   179d6:	55                   	push   %ebp
   179d7:	89 e5                	mov    %esp,%ebp
   179d9:	83 ec 18             	sub    $0x18,%esp
   // 使用该文件系统打开该目录
  fs_protect(root_fs);
   179dc:	a1 04 70 07 00       	mov    0x77004,%eax
   179e1:	83 ec 0c             	sub    $0xc,%esp
   179e4:	50                   	push   %eax
   179e5:	e8 2b f9 ff ff       	call   17315 <fs_protect>
   179ea:	83 c4 10             	add    $0x10,%esp
  int err = root_fs->op->opendir(root_fs, path, dir);
   179ed:	a1 04 70 07 00       	mov    0x77004,%eax
   179f2:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   179f8:	8b 40 28             	mov    0x28(%eax),%eax
   179fb:	8b 15 04 70 07 00    	mov    0x77004,%edx
   17a01:	83 ec 04             	sub    $0x4,%esp
   17a04:	ff 75 0c             	push   0xc(%ebp)
   17a07:	ff 75 08             	push   0x8(%ebp)
   17a0a:	52                   	push   %edx
   17a0b:	ff d0                	call   *%eax
   17a0d:	83 c4 10             	add    $0x10,%esp
   17a10:	89 45 f4             	mov    %eax,-0xc(%ebp)
  fs_unprotect(root_fs);
   17a13:	a1 04 70 07 00       	mov    0x77004,%eax
   17a18:	83 ec 0c             	sub    $0xc,%esp
   17a1b:	50                   	push   %eax
   17a1c:	e8 1f f9 ff ff       	call   17340 <fs_unprotect>
   17a21:	83 c4 10             	add    $0x10,%esp
  return err;
   17a24:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   17a27:	c9                   	leave  
   17a28:	c3                   	ret    

00017a29 <sys_readdir>:
 * 
 * @param dir 
 * @param dirent 
 * @return int 
 */
int sys_readdir(DIR *dir, struct dirent *dirent) {
   17a29:	55                   	push   %ebp
   17a2a:	89 e5                	mov    %esp,%ebp
   17a2c:	83 ec 18             	sub    $0x18,%esp
   // 使用该文件系统遍历该目录
  fs_protect(root_fs);
   17a2f:	a1 04 70 07 00       	mov    0x77004,%eax
   17a34:	83 ec 0c             	sub    $0xc,%esp
   17a37:	50                   	push   %eax
   17a38:	e8 d8 f8 ff ff       	call   17315 <fs_protect>
   17a3d:	83 c4 10             	add    $0x10,%esp
  int err = root_fs->op->readdir(root_fs, dir, dirent);
   17a40:	a1 04 70 07 00       	mov    0x77004,%eax
   17a45:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   17a4b:	8b 40 2c             	mov    0x2c(%eax),%eax
   17a4e:	8b 15 04 70 07 00    	mov    0x77004,%edx
   17a54:	83 ec 04             	sub    $0x4,%esp
   17a57:	ff 75 0c             	push   0xc(%ebp)
   17a5a:	ff 75 08             	push   0x8(%ebp)
   17a5d:	52                   	push   %edx
   17a5e:	ff d0                	call   *%eax
   17a60:	83 c4 10             	add    $0x10,%esp
   17a63:	89 45 f4             	mov    %eax,-0xc(%ebp)
  fs_unprotect(root_fs);
   17a66:	a1 04 70 07 00       	mov    0x77004,%eax
   17a6b:	83 ec 0c             	sub    $0xc,%esp
   17a6e:	50                   	push   %eax
   17a6f:	e8 cc f8 ff ff       	call   17340 <fs_unprotect>
   17a74:	83 c4 10             	add    $0x10,%esp
  return err;
   17a77:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   17a7a:	c9                   	leave  
   17a7b:	c3                   	ret    

00017a7c <sys_closedir>:
 * @brief 关闭目录
 * 
 * @param dir 
 * @return int 
 */
int sys_closedir(DIR *dir) {
   17a7c:	55                   	push   %ebp
   17a7d:	89 e5                	mov    %esp,%ebp
   17a7f:	83 ec 18             	sub    $0x18,%esp
  // 使用该文件系统关闭该目录
  fs_protect(root_fs);
   17a82:	a1 04 70 07 00       	mov    0x77004,%eax
   17a87:	83 ec 0c             	sub    $0xc,%esp
   17a8a:	50                   	push   %eax
   17a8b:	e8 85 f8 ff ff       	call   17315 <fs_protect>
   17a90:	83 c4 10             	add    $0x10,%esp
  int err = root_fs->op->closedir(root_fs, dir);
   17a93:	a1 04 70 07 00       	mov    0x77004,%eax
   17a98:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   17a9e:	8b 40 30             	mov    0x30(%eax),%eax
   17aa1:	8b 15 04 70 07 00    	mov    0x77004,%edx
   17aa7:	83 ec 08             	sub    $0x8,%esp
   17aaa:	ff 75 08             	push   0x8(%ebp)
   17aad:	52                   	push   %edx
   17aae:	ff d0                	call   *%eax
   17ab0:	83 c4 10             	add    $0x10,%esp
   17ab3:	89 45 f4             	mov    %eax,-0xc(%ebp)
  fs_unprotect(root_fs);
   17ab6:	a1 04 70 07 00       	mov    0x77004,%eax
   17abb:	83 ec 0c             	sub    $0xc,%esp
   17abe:	50                   	push   %eax
   17abf:	e8 7c f8 ff ff       	call   17340 <fs_unprotect>
   17ac4:	83 c4 10             	add    $0x10,%esp
  return err;
   17ac7:	8b 45 f4             	mov    -0xc(%ebp),%eax

}
   17aca:	c9                   	leave  
   17acb:	c3                   	ret    

00017acc <sys_ioctl>:
 * @param cmd 
 * @param arg0 
 * @param arg1 
 * @return int 
 */
int sys_ioctl(int fd, int cmd, int arg0, int arg1) {
   17acc:	55                   	push   %ebp
   17acd:	89 e5                	mov    %esp,%ebp
   17acf:	83 ec 18             	sub    $0x18,%esp
   if (is_fd_bad(fd)) {
   17ad2:	ff 75 08             	push   0x8(%ebp)
   17ad5:	e8 06 f7 ff ff       	call   171e0 <is_fd_bad>
   17ada:	83 c4 04             	add    $0x4,%esp
   17add:	85 c0                	test   %eax,%eax
   17adf:	74 1a                	je     17afb <sys_ioctl+0x2f>
    log_printf("fd %d is not valid.", fd);
   17ae1:	83 ec 08             	sub    $0x8,%esp
   17ae4:	ff 75 08             	push   0x8(%ebp)
   17ae7:	68 41 a8 01 00       	push   $0x1a841
   17aec:	e8 a4 19 00 00       	call   19495 <log_printf>
   17af1:	83 c4 10             	add    $0x10,%esp
    return -1;
   17af4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17af9:	eb 76                	jmp    17b71 <sys_ioctl+0xa5>
  }

  // 1.获取需要重复引用的文件指针
  file_t *file = task_file(fd);
   17afb:	83 ec 0c             	sub    $0xc,%esp
   17afe:	ff 75 08             	push   0x8(%ebp)
   17b01:	e8 b3 97 ff ff       	call   112b9 <task_file>
   17b06:	83 c4 10             	add    $0x10,%esp
   17b09:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (!file) {
   17b0c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   17b10:	75 17                	jne    17b29 <sys_ioctl+0x5d>
    log_printf("file not opend!\n");
   17b12:	83 ec 0c             	sub    $0xc,%esp
   17b15:	68 55 a8 01 00       	push   $0x1a855
   17b1a:	e8 76 19 00 00       	call   19495 <log_printf>
   17b1f:	83 c4 10             	add    $0x10,%esp
    return -1;
   17b22:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17b27:	eb 48                	jmp    17b71 <sys_ioctl+0xa5>
  }

  fs_t *fs = file->fs;
   17b29:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17b2c:	8b 40 28             	mov    0x28(%eax),%eax
   17b2f:	89 45 f0             	mov    %eax,-0x10(%ebp)
  fs_protect(fs);
   17b32:	83 ec 0c             	sub    $0xc,%esp
   17b35:	ff 75 f0             	push   -0x10(%ebp)
   17b38:	e8 d8 f7 ff ff       	call   17315 <fs_protect>
   17b3d:	83 c4 10             	add    $0x10,%esp
  int err = fs->op->ioctl(file, cmd, arg0, arg1);
   17b40:	8b 45 f0             	mov    -0x10(%ebp),%eax
   17b43:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   17b49:	8b 40 20             	mov    0x20(%eax),%eax
   17b4c:	ff 75 14             	push   0x14(%ebp)
   17b4f:	ff 75 10             	push   0x10(%ebp)
   17b52:	ff 75 0c             	push   0xc(%ebp)
   17b55:	ff 75 f4             	push   -0xc(%ebp)
   17b58:	ff d0                	call   *%eax
   17b5a:	83 c4 10             	add    $0x10,%esp
   17b5d:	89 45 ec             	mov    %eax,-0x14(%ebp)
  fs_unprotect(fs);
   17b60:	83 ec 0c             	sub    $0xc,%esp
   17b63:	ff 75 f0             	push   -0x10(%ebp)
   17b66:	e8 d5 f7 ff ff       	call   17340 <fs_unprotect>
   17b6b:	83 c4 10             	add    $0x10,%esp

  return err;
   17b6e:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
   17b71:	c9                   	leave  
   17b72:	c3                   	ret    

00017b73 <sys_unlink>:
 * @brief 根据文件路径删除文件
 * 
 * @param path_name 
 * @return int 
 */
int sys_unlink(const char *path) {
   17b73:	55                   	push   %ebp
   17b74:	89 e5                	mov    %esp,%ebp
   17b76:	83 ec 18             	sub    $0x18,%esp
  fs_protect(root_fs);
   17b79:	a1 04 70 07 00       	mov    0x77004,%eax
   17b7e:	83 ec 0c             	sub    $0xc,%esp
   17b81:	50                   	push   %eax
   17b82:	e8 8e f7 ff ff       	call   17315 <fs_protect>
   17b87:	83 c4 10             	add    $0x10,%esp
  int err = root_fs->op->unlink(root_fs, path);
   17b8a:	a1 04 70 07 00       	mov    0x77004,%eax
   17b8f:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   17b95:	8b 40 24             	mov    0x24(%eax),%eax
   17b98:	8b 15 04 70 07 00    	mov    0x77004,%edx
   17b9e:	83 ec 08             	sub    $0x8,%esp
   17ba1:	ff 75 08             	push   0x8(%ebp)
   17ba4:	52                   	push   %edx
   17ba5:	ff d0                	call   *%eax
   17ba7:	83 c4 10             	add    $0x10,%esp
   17baa:	89 45 f4             	mov    %eax,-0xc(%ebp)
  fs_unprotect(root_fs);
   17bad:	a1 04 70 07 00       	mov    0x77004,%eax
   17bb2:	83 ec 0c             	sub    $0xc,%esp
   17bb5:	50                   	push   %eax
   17bb6:	e8 85 f7 ff ff       	call   17340 <fs_unprotect>
   17bbb:	83 c4 10             	add    $0x10,%esp
}
   17bbe:	90                   	nop
   17bbf:	c9                   	leave  
   17bc0:	c3                   	ret    

00017bc1 <mount_list_init>:

/**
 * @brief 初始化free_list和mount_list
 *
 */
static void mount_list_init(void) {
   17bc1:	55                   	push   %ebp
   17bc2:	89 e5                	mov    %esp,%ebp
   17bc4:	83 ec 18             	sub    $0x18,%esp
  list_init(&free_list);
   17bc7:	83 ec 0c             	sub    $0xc,%esp
   17bca:	68 f8 6f 07 00       	push   $0x76ff8
   17bcf:	e8 99 f5 ff ff       	call   1716d <list_init>
   17bd4:	83 c4 10             	add    $0x10,%esp
  // 将全局文件系统加入到free_list，等待被挂载
  for (int i = 0; i < FS_TABLE_SIZE; ++i) {
   17bd7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   17bde:	eb 2b                	jmp    17c0b <mount_list_init+0x4a>
    list_insert_first(&free_list, &(fs_table[i].node));
   17be0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17be3:	69 c0 4c 02 00 00    	imul   $0x24c,%eax,%eax
   17be9:	05 00 02 00 00       	add    $0x200,%eax
   17bee:	05 00 59 07 00       	add    $0x75900,%eax
   17bf3:	83 c0 0c             	add    $0xc,%eax
   17bf6:	83 ec 08             	sub    $0x8,%esp
   17bf9:	50                   	push   %eax
   17bfa:	68 f8 6f 07 00       	push   $0x76ff8
   17bff:	e8 19 15 00 00       	call   1911d <list_insert_first>
   17c04:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < FS_TABLE_SIZE; ++i) {
   17c07:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   17c0b:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
   17c0f:	7e cf                	jle    17be0 <mount_list_init+0x1f>
  }

  list_init(&mounted_list);
   17c11:	83 ec 0c             	sub    $0xc,%esp
   17c14:	68 e0 58 07 00       	push   $0x758e0
   17c19:	e8 4f f5 ff ff       	call   1716d <list_init>
   17c1e:	83 c4 10             	add    $0x10,%esp
}
   17c21:	90                   	nop
   17c22:	c9                   	leave  
   17c23:	c3                   	ret    

00017c24 <get_fs_op>:
 *
 * @param type
 * @param major
 * @return fs_op_t*
 */
static fs_op_t *get_fs_op(fs_type_t type, int major) {
   17c24:	55                   	push   %ebp
   17c25:	89 e5                	mov    %esp,%ebp
  switch (type) {
   17c27:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   17c2b:	74 08                	je     17c35 <get_fs_op+0x11>
   17c2d:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
   17c31:	74 09                	je     17c3c <get_fs_op+0x18>
   17c33:	eb 0e                	jmp    17c43 <get_fs_op+0x1f>
    case FS_DEVFS:
      return &devfs_op;
   17c35:	b8 00 b1 01 00       	mov    $0x1b100,%eax
   17c3a:	eb 0c                	jmp    17c48 <get_fs_op+0x24>
      break;
    case FS_FAT16:
      return &fatfs_op;
   17c3c:	b8 40 b1 01 00       	mov    $0x1b140,%eax
   17c41:	eb 05                	jmp    17c48 <get_fs_op+0x24>
      break;
    default:
      return 0;
   17c43:	b8 00 00 00 00       	mov    $0x0,%eax
      break;
  }
}
   17c48:	5d                   	pop    %ebp
   17c49:	c3                   	ret    

00017c4a <mount>:
 * @param dev_major 具体文件的主设备号
 * @param dev_minor 具体文件的次设备号
 * @return fs_t*
 */
static fs_t *mount(fs_type_t type, const char *mount_point, int dev_major,
                   int dev_minor) {
   17c4a:	55                   	push   %ebp
   17c4b:	89 e5                	mov    %esp,%ebp
   17c4d:	83 ec 28             	sub    $0x28,%esp
  fs_t *fs = (fs_t *)0;
   17c50:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  log_printf("mount file system, name: %s, dev: %x\n", mount_point, dev_major);
   17c57:	83 ec 04             	sub    $0x4,%esp
   17c5a:	ff 75 10             	push   0x10(%ebp)
   17c5d:	ff 75 0c             	push   0xc(%ebp)
   17c60:	68 80 a8 01 00       	push   $0x1a880
   17c65:	e8 2b 18 00 00       	call   19495 <log_printf>
   17c6a:	83 c4 10             	add    $0x10,%esp

  // 1.检查当前文件系统是否已被挂载
  list_node_t *curr = list_get_first(&mounted_list);
   17c6d:	83 ec 0c             	sub    $0xc,%esp
   17c70:	68 e0 58 07 00       	push   $0x758e0
   17c75:	e8 3a f5 ff ff       	call   171b4 <list_get_first>
   17c7a:	83 c4 10             	add    $0x10,%esp
   17c7d:	89 45 f0             	mov    %eax,-0x10(%ebp)
  while (curr) {
   17c80:	eb 59                	jmp    17cdb <mount+0x91>
    fs_t *fs = list_node_parent(curr, fs_t, node);
   17c82:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   17c86:	74 0a                	je     17c92 <mount+0x48>
   17c88:	8b 45 f0             	mov    -0x10(%ebp),%eax
   17c8b:	2d 0c 02 00 00       	sub    $0x20c,%eax
   17c90:	eb 05                	jmp    17c97 <mount+0x4d>
   17c92:	b8 00 00 00 00       	mov    $0x0,%eax
   17c97:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (kernel_strncmp(fs->mount_point, mount_point, FS_MOUNT_POINT_SIZE) ==
   17c9a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   17c9d:	83 ec 04             	sub    $0x4,%esp
   17ca0:	68 00 02 00 00       	push   $0x200
   17ca5:	ff 75 0c             	push   0xc(%ebp)
   17ca8:	50                   	push   %eax
   17ca9:	e8 e5 0e 00 00       	call   18b93 <kernel_strncmp>
   17cae:	83 c4 10             	add    $0x10,%esp
   17cb1:	85 c0                	test   %eax,%eax
   17cb3:	75 15                	jne    17cca <mount+0x80>
        0) {
      log_printf("fs already mounted!\n");
   17cb5:	83 ec 0c             	sub    $0xc,%esp
   17cb8:	68 a6 a8 01 00       	push   $0x1a8a6
   17cbd:	e8 d3 17 00 00       	call   19495 <log_printf>
   17cc2:	83 c4 10             	add    $0x10,%esp
      goto mount_failed;
   17cc5:	e9 11 01 00 00       	jmp    17ddb <mount+0x191>
    }

    curr = list_node_next(curr);
   17cca:	83 ec 0c             	sub    $0xc,%esp
   17ccd:	ff 75 f0             	push   -0x10(%ebp)
   17cd0:	e8 6b f4 ff ff       	call   17140 <list_node_next>
   17cd5:	83 c4 10             	add    $0x10,%esp
   17cd8:	89 45 f0             	mov    %eax,-0x10(%ebp)
  while (curr) {
   17cdb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   17cdf:	75 a1                	jne    17c82 <mount+0x38>
  }

  // 2.从空闲链表中取下一个待挂载的fs对象进行挂载
  list_node_t *free_node = list_remove_first(&free_list);
   17ce1:	83 ec 0c             	sub    $0xc,%esp
   17ce4:	68 f8 6f 07 00       	push   $0x76ff8
   17ce9:	e8 49 15 00 00       	call   19237 <list_remove_first>
   17cee:	83 c4 10             	add    $0x10,%esp
   17cf1:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if (!free_node) {
   17cf4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   17cf8:	75 15                	jne    17d0f <mount+0xc5>
    log_printf("no free fs, mount failed!\n");
   17cfa:	83 ec 0c             	sub    $0xc,%esp
   17cfd:	68 bb a8 01 00       	push   $0x1a8bb
   17d02:	e8 8e 17 00 00       	call   19495 <log_printf>
   17d07:	83 c4 10             	add    $0x10,%esp
    goto mount_failed;
   17d0a:	e9 cc 00 00 00       	jmp    17ddb <mount+0x191>
  }
  fs = list_node_parent(free_node, fs_t, node);
   17d0f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   17d13:	74 0a                	je     17d1f <mount+0xd5>
   17d15:	8b 45 ec             	mov    -0x14(%ebp),%eax
   17d18:	2d 0c 02 00 00       	sub    $0x20c,%eax
   17d1d:	eb 05                	jmp    17d24 <mount+0xda>
   17d1f:	b8 00 00 00 00       	mov    $0x0,%eax
   17d24:	89 45 f4             	mov    %eax,-0xc(%ebp)
  kernel_memset(fs, 0, sizeof(fs_t));
   17d27:	83 ec 04             	sub    $0x4,%esp
   17d2a:	68 4c 02 00 00       	push   $0x24c
   17d2f:	6a 00                	push   $0x0
   17d31:	ff 75 f4             	push   -0xc(%ebp)
   17d34:	e8 5f 0f 00 00       	call   18c98 <kernel_memset>
   17d39:	83 c4 10             	add    $0x10,%esp
  kernel_strncpy(fs->mount_point, mount_point, FS_MOUNT_POINT_SIZE);
   17d3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17d3f:	83 ec 04             	sub    $0x4,%esp
   17d42:	68 00 02 00 00       	push   $0x200
   17d47:	ff 75 0c             	push   0xc(%ebp)
   17d4a:	50                   	push   %eax
   17d4b:	e8 f2 0d 00 00       	call   18b42 <kernel_strncpy>
   17d50:	83 c4 10             	add    $0x10,%esp

  // 3.获取该fs对象的操作函数表并交给该对象
  fs_op_t *op = get_fs_op(type, dev_major);
   17d53:	83 ec 08             	sub    $0x8,%esp
   17d56:	ff 75 10             	push   0x10(%ebp)
   17d59:	ff 75 08             	push   0x8(%ebp)
   17d5c:	e8 c3 fe ff ff       	call   17c24 <get_fs_op>
   17d61:	83 c4 10             	add    $0x10,%esp
   17d64:	89 45 e8             	mov    %eax,-0x18(%ebp)
  if (!op) {
   17d67:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   17d6b:	75 15                	jne    17d82 <mount+0x138>
    log_printf("unsupported fs type: %du\n", type);
   17d6d:	83 ec 08             	sub    $0x8,%esp
   17d70:	ff 75 08             	push   0x8(%ebp)
   17d73:	68 d6 a8 01 00       	push   $0x1a8d6
   17d78:	e8 18 17 00 00       	call   19495 <log_printf>
   17d7d:	83 c4 10             	add    $0x10,%esp
    goto mount_failed;
   17d80:	eb 59                	jmp    17ddb <mount+0x191>
  }
  fs->op = op;
   17d82:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17d85:	8b 55 e8             	mov    -0x18(%ebp),%edx
   17d88:	89 90 04 02 00 00    	mov    %edx,0x204(%eax)

  // 4.挂载该文件系统类型下具体的设备
  if (op->mount(fs, dev_major, dev_minor) < 0) {
   17d8e:	8b 45 e8             	mov    -0x18(%ebp),%eax
   17d91:	8b 00                	mov    (%eax),%eax
   17d93:	83 ec 04             	sub    $0x4,%esp
   17d96:	ff 75 14             	push   0x14(%ebp)
   17d99:	ff 75 10             	push   0x10(%ebp)
   17d9c:	ff 75 f4             	push   -0xc(%ebp)
   17d9f:	ff d0                	call   *%eax
   17da1:	83 c4 10             	add    $0x10,%esp
   17da4:	85 c0                	test   %eax,%eax
   17da6:	79 15                	jns    17dbd <mount+0x173>
    log_printf("mount fs %s failed!\n", mount_point);
   17da8:	83 ec 08             	sub    $0x8,%esp
   17dab:	ff 75 0c             	push   0xc(%ebp)
   17dae:	68 f0 a8 01 00       	push   $0x1a8f0
   17db3:	e8 dd 16 00 00       	call   19495 <log_printf>
   17db8:	83 c4 10             	add    $0x10,%esp
    goto mount_failed;
   17dbb:	eb 1e                	jmp    17ddb <mount+0x191>
  }

  // 5.将该文件系统挂载到mounted_list上
  list_insert_last(&mounted_list, &fs->node);
   17dbd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17dc0:	05 0c 02 00 00       	add    $0x20c,%eax
   17dc5:	83 ec 08             	sub    $0x8,%esp
   17dc8:	50                   	push   %eax
   17dc9:	68 e0 58 07 00       	push   $0x758e0
   17dce:	e8 d5 13 00 00       	call   191a8 <list_insert_last>
   17dd3:	83 c4 10             	add    $0x10,%esp

  return fs;
   17dd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17dd9:	eb 24                	jmp    17dff <mount+0x1b5>

// 挂载失败的异常处理
mount_failed:
  // fs不为空，证明已从free_list上取下，需要将其插回去
  if (fs) {
   17ddb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   17ddf:	74 19                	je     17dfa <mount+0x1b0>
    list_insert_last(&free_list, &fs->node);
   17de1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17de4:	05 0c 02 00 00       	add    $0x20c,%eax
   17de9:	83 ec 08             	sub    $0x8,%esp
   17dec:	50                   	push   %eax
   17ded:	68 f8 6f 07 00       	push   $0x76ff8
   17df2:	e8 b1 13 00 00       	call   191a8 <list_insert_last>
   17df7:	83 c4 10             	add    $0x10,%esp
  }
  return (fs_t *)0;
   17dfa:	b8 00 00 00 00       	mov    $0x0,%eax
}
   17dff:	c9                   	leave  
   17e00:	c3                   	ret    

00017e01 <fs_init>:

/**
 * @brief 初始化文件系统
 *
 */
void fs_init(void) {
   17e01:	55                   	push   %ebp
   17e02:	89 e5                	mov    %esp,%ebp
   17e04:	83 ec 18             	sub    $0x18,%esp
  mount_list_init();
   17e07:	e8 b5 fd ff ff       	call   17bc1 <mount_list_init>
  file_table_init();
   17e0c:	e8 fa f1 ff ff       	call   1700b <file_table_init>

  disk_init();
   17e11:	e8 37 cb ff ff       	call   1494d <disk_init>

  fs_t *fs = mount(FS_DEVFS, "/dev", 0, 0);
   17e16:	6a 00                	push   $0x0
   17e18:	6a 00                	push   $0x0
   17e1a:	68 05 a9 01 00       	push   $0x1a905
   17e1f:	6a 00                	push   $0x0
   17e21:	e8 24 fe ff ff       	call   17c4a <mount>
   17e26:	83 c4 10             	add    $0x10,%esp
   17e29:	89 45 f4             	mov    %eax,-0xc(%ebp)
  ASSERT(fs != (fs_t *)0);
   17e2c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   17e30:	75 1c                	jne    17e4e <fs_init+0x4d>
   17e32:	68 0a a9 01 00       	push   $0x1a90a
   17e37:	68 70 a9 01 00       	push   $0x1a970
   17e3c:	68 83 02 00 00       	push   $0x283
   17e41:	68 10 a8 01 00       	push   $0x1a810
   17e46:	e8 2e 09 00 00       	call   18779 <pannic>
   17e4b:	83 c4 10             	add    $0x10,%esp

  root_fs = mount(FS_FAT16, "/home", ROOT_DEV);
   17e4e:	68 b1 00 00 00       	push   $0xb1
   17e53:	6a 02                	push   $0x2
   17e55:	68 1a a9 01 00       	push   $0x1a91a
   17e5a:	6a 01                	push   $0x1
   17e5c:	e8 e9 fd ff ff       	call   17c4a <mount>
   17e61:	83 c4 10             	add    $0x10,%esp
   17e64:	a3 04 70 07 00       	mov    %eax,0x77004
  ASSERT(root_fs != (fs_t *)0);
   17e69:	a1 04 70 07 00       	mov    0x77004,%eax
   17e6e:	85 c0                	test   %eax,%eax
   17e70:	75 1c                	jne    17e8e <fs_init+0x8d>
   17e72:	68 20 a9 01 00       	push   $0x1a920
   17e77:	68 70 a9 01 00       	push   $0x1a970
   17e7c:	68 86 02 00 00       	push   $0x286
   17e81:	68 10 a8 01 00       	push   $0x1a810
   17e86:	e8 ee 08 00 00       	call   18779 <pannic>
   17e8b:	83 c4 10             	add    $0x10,%esp
}
   17e8e:	90                   	nop
   17e8f:	c9                   	leave  
   17e90:	c3                   	ret    

00017e91 <kernel_init>:

/**
 * @brief  对内核进行初始化操作
 * 
 */
void kernel_init(boot_info_t* boot_info) {
   17e91:	55                   	push   %ebp
   17e92:	89 e5                	mov    %esp,%ebp
   17e94:	83 ec 08             	sub    $0x8,%esp
    //1.判断是否检测到可用内存
    ASSERT(boot_info->ram_region_count != 0);
   17e97:	8b 45 08             	mov    0x8(%ebp),%eax
   17e9a:	8b 40 50             	mov    0x50(%eax),%eax
   17e9d:	85 c0                	test   %eax,%eax
   17e9f:	75 19                	jne    17eba <kernel_init+0x29>
   17ea1:	68 78 a9 01 00       	push   $0x1a978
   17ea6:	68 14 aa 01 00       	push   $0x1aa14
   17eab:	6a 25                	push   $0x25
   17ead:	68 9c a9 01 00       	push   $0x1a99c
   17eb2:	e8 c2 08 00 00       	call   18779 <pannic>
   17eb7:	83 c4 10             	add    $0x10,%esp
    
    //2.初始化并重新加载GDT表
    gdt_init();
   17eba:	e8 bd a9 ff ff       	call   1287c <gdt_init>

    //3.初始化并加载中断描述符表IDT
    idt_init();
   17ebf:	e8 bc b1 ff ff       	call   13080 <idt_init>
 
    //4.初始化日志程序,便于后期调用
    log_init();
   17ec4:	e8 9d 15 00 00       	call   19466 <log_init>

    //5.初始化内存管理
    memory_init(boot_info);  
   17ec9:	83 ec 0c             	sub    $0xc,%esp
   17ecc:	ff 75 08             	push   0x8(%ebp)
   17ecf:	e8 a2 8d ff ff       	call   10c76 <memory_init>
   17ed4:	83 c4 10             	add    $0x10,%esp
    
    //6.初始化文件系统
    fs_init();
   17ed7:	e8 25 ff ff ff       	call   17e01 <fs_init>

    //6.初始化定时器的中断处理
    time_init();
   17edc:	e8 3a d4 ff ff       	call   1531b <time_init>
    
    //7.初始化任务管理器
    task_manager_init();
   17ee1:	e8 2c 98 ff ff       	call   11712 <task_manager_init>
    
   
    //初始化完成后将在汇编里重新加载内核代码段与数据段的选择子，并为内核程序分配栈空间
}
   17ee6:	90                   	nop
   17ee7:	c9                   	leave  
   17ee8:	c3                   	ret    

00017ee9 <move_to_first_task>:

/**
 * @brief 跳转到第一个任务进程
 * 
 */
void move_to_first_task(void) {
   17ee9:	55                   	push   %ebp
   17eea:	89 e5                	mov    %esp,%ebp
   17eec:	56                   	push   %esi
   17eed:	53                   	push   %ebx
   17eee:	83 ec 10             	sub    $0x10,%esp
    //1.获取当前任务
    task_t *curr = task_current();
   17ef1:	e8 bb 9a ff ff       	call   119b1 <task_current>
   17ef6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT(curr != 0);
   17ef9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   17efd:	75 19                	jne    17f18 <move_to_first_task+0x2f>
   17eff:	68 d1 a9 01 00       	push   $0x1a9d1
   17f04:	68 20 aa 01 00       	push   $0x1aa20
   17f09:	6a 49                	push   $0x49
   17f0b:	68 9c a9 01 00       	push   $0x1a99c
   17f10:	e8 64 08 00 00       	call   18779 <pannic>
   17f15:	83 c4 10             	add    $0x10,%esp

    //2.获取当前任务的tss结构
    tss_t *tss = &(curr->tss);
   17f18:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17f1b:	83 c0 5c             	add    $0x5c,%eax
   17f1e:	89 45 f0             	mov    %eax,-0x10(%ebp)
        "push %[ss]\n\t"
        "push %[esp]\n\t"
        "push %[eflags]\n\t"
        "push %[cs]\n\t"
        "push %[eip]\n\t"
        "iret"::[ss]"r"(tss->ss), [esp]"r"(tss->esp), [eflags]"r"(tss->eflags), [cs]"r"(tss->cs), [eip]"r"(tss->eip)
   17f21:	8b 45 f0             	mov    -0x10(%ebp),%eax
   17f24:	8b 40 50             	mov    0x50(%eax),%eax
   17f27:	8b 55 f0             	mov    -0x10(%ebp),%edx
   17f2a:	8b 52 38             	mov    0x38(%edx),%edx
   17f2d:	8b 4d f0             	mov    -0x10(%ebp),%ecx
   17f30:	8b 49 24             	mov    0x24(%ecx),%ecx
   17f33:	8b 5d f0             	mov    -0x10(%ebp),%ebx
   17f36:	8b 5b 4c             	mov    0x4c(%ebx),%ebx
   17f39:	8b 75 f0             	mov    -0x10(%ebp),%esi
   17f3c:	8b 76 20             	mov    0x20(%esi),%esi
     __asm__ __volatile__(
   17f3f:	50                   	push   %eax
   17f40:	52                   	push   %edx
   17f41:	51                   	push   %ecx
   17f42:	53                   	push   %ebx
   17f43:	56                   	push   %esi
   17f44:	cf                   	iret   

        
    );
}
   17f45:	90                   	nop
   17f46:	8d 65 f8             	lea    -0x8(%ebp),%esp
   17f49:	5b                   	pop    %ebx
   17f4a:	5e                   	pop    %esi
   17f4b:	5d                   	pop    %ebp
   17f4c:	c3                   	ret    

00017f4d <init_main>:


void init_main(void) {
   17f4d:	55                   	push   %ebp
   17f4e:	89 e5                	mov    %esp,%ebp
   17f50:	83 ec 08             	sub    $0x8,%esp
    
    log_printf("Kernel is running......\n");
   17f53:	83 ec 0c             	sub    $0xc,%esp
   17f56:	68 db a9 01 00       	push   $0x1a9db
   17f5b:	e8 35 15 00 00       	call   19495 <log_printf>
   17f60:	83 c4 10             	add    $0x10,%esp
    log_printf("Name: KBOS, Version: %s\n", OS_VERSION);
   17f63:	83 ec 08             	sub    $0x8,%esp
   17f66:	68 f4 a9 01 00       	push   $0x1a9f4
   17f6b:	68 fa a9 01 00       	push   $0x1a9fa
   17f70:	e8 20 15 00 00       	call   19495 <log_printf>
   17f75:	83 c4 10             	add    $0x10,%esp


    //当前任务作为任务管理器启用时的第一个任务
    task_first_init();
   17f78:	e8 72 98 ff ff       	call   117ef <task_first_init>

    //跳转到第一个任务进程去运行
    move_to_first_task();
   17f7d:	e8 67 ff ff ff       	call   17ee9 <move_to_first_task>
   17f82:	90                   	nop
   17f83:	c9                   	leave  
   17f84:	c3                   	ret    

00017f85 <list_init>:
static inline void list_init(list_t *list) {
   17f85:	55                   	push   %ebp
   17f86:	89 e5                	mov    %esp,%ebp
   17f88:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   17f8b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   17f8f:	75 19                	jne    17faa <list_init+0x25>
   17f91:	68 34 aa 01 00       	push   $0x1aa34
   17f96:	68 e0 aa 01 00       	push   $0x1aae0
   17f9b:	6a 31                	push   $0x31
   17f9d:	68 48 aa 01 00       	push   $0x1aa48
   17fa2:	e8 d2 07 00 00       	call   18779 <pannic>
   17fa7:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   17faa:	8b 45 08             	mov    0x8(%ebp),%eax
   17fad:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   17fb4:	8b 45 08             	mov    0x8(%ebp),%eax
   17fb7:	8b 50 04             	mov    0x4(%eax),%edx
   17fba:	8b 45 08             	mov    0x8(%ebp),%eax
   17fbd:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   17fbf:	8b 45 08             	mov    0x8(%ebp),%eax
   17fc2:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   17fc9:	90                   	nop
   17fca:	c9                   	leave  
   17fcb:	c3                   	ret    

00017fcc <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   17fcc:	55                   	push   %ebp
   17fcd:	89 e5                	mov    %esp,%ebp
   17fcf:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   17fd2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   17fd6:	75 19                	jne    17ff1 <list_is_empty+0x25>
   17fd8:	68 34 aa 01 00       	push   $0x1aa34
   17fdd:	68 ec aa 01 00       	push   $0x1aaec
   17fe2:	6a 38                	push   $0x38
   17fe4:	68 48 aa 01 00       	push   $0x1aa48
   17fe9:	e8 8b 07 00 00       	call   18779 <pannic>
   17fee:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   17ff1:	8b 45 08             	mov    0x8(%ebp),%eax
   17ff4:	8b 40 08             	mov    0x8(%eax),%eax
   17ff7:	85 c0                	test   %eax,%eax
   17ff9:	0f 94 c0             	sete   %al
   17ffc:	0f b6 c0             	movzbl %al,%eax
}
   17fff:	c9                   	leave  
   18000:	c3                   	ret    

00018001 <mutex_init>:
/**
 * @brief  初始化互斥锁
 *
 * @param mutex
 */
void mutex_init(mutex_t *mutex) {
   18001:	55                   	push   %ebp
   18002:	89 e5                	mov    %esp,%ebp
   18004:	83 ec 08             	sub    $0x8,%esp
  ASSERT(mutex != (mutex_t *)0);
   18007:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1800b:	75 19                	jne    18026 <mutex_init+0x25>
   1800d:	68 86 aa 01 00       	push   $0x1aa86
   18012:	68 d4 aa 01 00       	push   $0x1aad4
   18017:	6a 15                	push   $0x15
   18019:	68 9c aa 01 00       	push   $0x1aa9c
   1801e:	e8 56 07 00 00       	call   18779 <pannic>
   18023:	83 c4 10             	add    $0x10,%esp

  mutex->locked_count = 0;
   18026:	8b 45 08             	mov    0x8(%ebp),%eax
   18029:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  mutex->owner = (task_t *)0;
   18030:	8b 45 08             	mov    0x8(%ebp),%eax
   18033:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  list_init(&mutex->wait_list);
   18039:	8b 45 08             	mov    0x8(%ebp),%eax
   1803c:	83 c0 08             	add    $0x8,%eax
   1803f:	83 ec 0c             	sub    $0xc,%esp
   18042:	50                   	push   %eax
   18043:	e8 3d ff ff ff       	call   17f85 <list_init>
   18048:	83 c4 10             	add    $0x10,%esp
}
   1804b:	90                   	nop
   1804c:	c9                   	leave  
   1804d:	c3                   	ret    

0001804e <mutex_lock>:
/**
 * @brief  加锁
 *
 * @param mutex
 */
void mutex_lock(mutex_t *mutex) {
   1804e:	55                   	push   %ebp
   1804f:	89 e5                	mov    %esp,%ebp
   18051:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   18054:	e8 57 b3 ff ff       	call   133b0 <idt_enter_protection>
   18059:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 1. 获取当前任务
  task_t *curr = task_current();
   1805c:	e8 50 99 ff ff       	call   119b1 <task_current>
   18061:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (curr == 0) {  //内核单进程模式，不需要互斥
   18064:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   18068:	75 10                	jne    1807a <mutex_lock+0x2c>
    idt_leave_protection(state);  // TODO:解锁
   1806a:	83 ec 0c             	sub    $0xc,%esp
   1806d:	ff 75 f4             	push   -0xc(%ebp)
   18070:	e8 53 b3 ff ff       	call   133c8 <idt_leave_protection>
   18075:	83 c4 10             	add    $0x10,%esp
    return;
   18078:	eb 78                	jmp    180f2 <mutex_lock+0xa4>
  }

  // 2.判断该锁是否已被加锁
  if (mutex->locked_count == 0) {  
   1807a:	8b 45 08             	mov    0x8(%ebp),%eax
   1807d:	8b 40 04             	mov    0x4(%eax),%eax
   18080:	85 c0                	test   %eax,%eax
   18082:	75 19                	jne    1809d <mutex_lock+0x4f>
    //3.还未被加锁，则加锁并记录拥有该锁的任务
    mutex->locked_count++;
   18084:	8b 45 08             	mov    0x8(%ebp),%eax
   18087:	8b 40 04             	mov    0x4(%eax),%eax
   1808a:	8d 50 01             	lea    0x1(%eax),%edx
   1808d:	8b 45 08             	mov    0x8(%ebp),%eax
   18090:	89 50 04             	mov    %edx,0x4(%eax)
    mutex->owner = curr;
   18093:	8b 45 08             	mov    0x8(%ebp),%eax
   18096:	8b 55 f0             	mov    -0x10(%ebp),%edx
   18099:	89 10                	mov    %edx,(%eax)
   1809b:	eb 47                	jmp    180e4 <mutex_lock+0x96>
  } else if (mutex->owner == curr) {
   1809d:	8b 45 08             	mov    0x8(%ebp),%eax
   180a0:	8b 00                	mov    (%eax),%eax
   180a2:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   180a5:	75 11                	jne    180b8 <mutex_lock+0x6a>
    //4.已被加锁，但当前加锁请求的任务为当前锁的拥有者，直接再加锁即可
    mutex->locked_count++;
   180a7:	8b 45 08             	mov    0x8(%ebp),%eax
   180aa:	8b 40 04             	mov    0x4(%eax),%eax
   180ad:	8d 50 01             	lea    0x1(%eax),%edx
   180b0:	8b 45 08             	mov    0x8(%ebp),%eax
   180b3:	89 50 04             	mov    %edx,0x4(%eax)
   180b6:	eb 2c                	jmp    180e4 <mutex_lock+0x96>
  } else {  
    //5.已被加锁，且当前任务不是锁的拥有者，则当前任务进入锁的等待队列，被阻塞住
    task_set_unready(curr);
   180b8:	83 ec 0c             	sub    $0xc,%esp
   180bb:	ff 75 f0             	push   -0x10(%ebp)
   180be:	e8 7e 98 ff ff       	call   11941 <task_set_unready>
   180c3:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&mutex->wait_list, &curr->wait_node);
   180c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   180c9:	8d 50 54             	lea    0x54(%eax),%edx
   180cc:	8b 45 08             	mov    0x8(%ebp),%eax
   180cf:	83 c0 08             	add    $0x8,%eax
   180d2:	83 ec 08             	sub    $0x8,%esp
   180d5:	52                   	push   %edx
   180d6:	50                   	push   %eax
   180d7:	e8 cc 10 00 00       	call   191a8 <list_insert_last>
   180dc:	83 c4 10             	add    $0x10,%esp
    task_switch();
   180df:	e8 d7 98 ff ff       	call   119bb <task_switch>
  }

  idt_leave_protection(state);  // TODO:解锁
   180e4:	83 ec 0c             	sub    $0xc,%esp
   180e7:	ff 75 f4             	push   -0xc(%ebp)
   180ea:	e8 d9 b2 ff ff       	call   133c8 <idt_leave_protection>
   180ef:	83 c4 10             	add    $0x10,%esp
}
   180f2:	c9                   	leave  
   180f3:	c3                   	ret    

000180f4 <mutex_unlock>:
/**
 * @brief  解锁
 *
 * @param mutex
 */
void mutex_unlock(mutex_t *mutex) {
   180f4:	55                   	push   %ebp
   180f5:	89 e5                	mov    %esp,%ebp
   180f7:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   180fa:	e8 b1 b2 ff ff       	call   133b0 <idt_enter_protection>
   180ff:	89 45 f4             	mov    %eax,-0xc(%ebp)

  task_t *curr = task_current();
   18102:	e8 aa 98 ff ff       	call   119b1 <task_current>
   18107:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (curr == 0) {  //内核单进程模式，不需要互斥
   1810a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1810e:	75 13                	jne    18123 <mutex_unlock+0x2f>
    idt_leave_protection(state);  // TODO:解锁
   18110:	83 ec 0c             	sub    $0xc,%esp
   18113:	ff 75 f4             	push   -0xc(%ebp)
   18116:	e8 ad b2 ff ff       	call   133c8 <idt_leave_protection>
   1811b:	83 c4 10             	add    $0x10,%esp
    return;
   1811e:	e9 9f 00 00 00       	jmp    181c2 <mutex_unlock+0xce>
  }

  // 1.判断当前任务是否是锁的拥有者
  if (mutex->owner == curr) {
   18123:	8b 45 08             	mov    0x8(%ebp),%eax
   18126:	8b 00                	mov    (%eax),%eax
   18128:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   1812b:	0f 85 83 00 00 00    	jne    181b4 <mutex_unlock+0xc0>
    //2.当前任务是锁的拥有者,对锁进行一次解锁，并判断是否已完全解锁
    if (--mutex->locked_count == 0) {
   18131:	8b 45 08             	mov    0x8(%ebp),%eax
   18134:	8b 40 04             	mov    0x4(%eax),%eax
   18137:	8d 50 ff             	lea    -0x1(%eax),%edx
   1813a:	8b 45 08             	mov    0x8(%ebp),%eax
   1813d:	89 50 04             	mov    %edx,0x4(%eax)
   18140:	8b 45 08             	mov    0x8(%ebp),%eax
   18143:	8b 40 04             	mov    0x4(%eax),%eax
   18146:	85 c0                	test   %eax,%eax
   18148:	75 6a                	jne    181b4 <mutex_unlock+0xc0>
      //3.锁已被完全解锁,将锁的所有者置空
      mutex->owner = (task_t*)0;
   1814a:	8b 45 08             	mov    0x8(%ebp),%eax
   1814d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      //4.判断当前等待队列是否为空
      if (!list_is_empty(&mutex->wait_list)) { 
   18153:	8b 45 08             	mov    0x8(%ebp),%eax
   18156:	83 c0 08             	add    $0x8,%eax
   18159:	83 ec 0c             	sub    $0xc,%esp
   1815c:	50                   	push   %eax
   1815d:	e8 6a fe ff ff       	call   17fcc <list_is_empty>
   18162:	83 c4 10             	add    $0x10,%esp
   18165:	85 c0                	test   %eax,%eax
   18167:	75 4b                	jne    181b4 <mutex_unlock+0xc0>
        //5.当前等待队列不为空,对锁进行加锁，并交给等待队列的第一个任务
        list_node_t *node = list_remove_first(&mutex->wait_list);
   18169:	8b 45 08             	mov    0x8(%ebp),%eax
   1816c:	83 c0 08             	add    $0x8,%eax
   1816f:	83 ec 0c             	sub    $0xc,%esp
   18172:	50                   	push   %eax
   18173:	e8 bf 10 00 00       	call   19237 <list_remove_first>
   18178:	83 c4 10             	add    $0x10,%esp
   1817b:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t *task_wait = list_node_parent(node, task_t, wait_node);
   1817e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   18182:	74 08                	je     1818c <mutex_unlock+0x98>
   18184:	8b 45 ec             	mov    -0x14(%ebp),%eax
   18187:	83 e8 54             	sub    $0x54,%eax
   1818a:	eb 05                	jmp    18191 <mutex_unlock+0x9d>
   1818c:	b8 00 00 00 00       	mov    $0x0,%eax
   18191:	89 45 e8             	mov    %eax,-0x18(%ebp)
        mutex->locked_count = 1;
   18194:	8b 45 08             	mov    0x8(%ebp),%eax
   18197:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        mutex->owner = task_wait;
   1819e:	8b 45 08             	mov    0x8(%ebp),%eax
   181a1:	8b 55 e8             	mov    -0x18(%ebp),%edx
   181a4:	89 10                	mov    %edx,(%eax)
        //6.让该任务进入就绪队列
        task_set_ready(task_wait);
   181a6:	83 ec 0c             	sub    $0xc,%esp
   181a9:	ff 75 e8             	push   -0x18(%ebp)
   181ac:	e8 4e 97 ff ff       	call   118ff <task_set_ready>
   181b1:	83 c4 10             	add    $0x10,%esp
      }
    }
  }

  idt_leave_protection(state);  // TODO:解锁
   181b4:	83 ec 0c             	sub    $0xc,%esp
   181b7:	ff 75 f4             	push   -0xc(%ebp)
   181ba:	e8 09 b2 ff ff       	call   133c8 <idt_leave_protection>
   181bf:	83 c4 10             	add    $0x10,%esp
}
   181c2:	c9                   	leave  
   181c3:	c3                   	ret    

000181c4 <list_init>:
static inline void list_init(list_t *list) {
   181c4:	55                   	push   %ebp
   181c5:	89 e5                	mov    %esp,%ebp
   181c7:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   181ca:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   181ce:	75 19                	jne    181e9 <list_init+0x25>
   181d0:	68 fc aa 01 00       	push   $0x1aafc
   181d5:	68 a0 ab 01 00       	push   $0x1aba0
   181da:	6a 31                	push   $0x31
   181dc:	68 10 ab 01 00       	push   $0x1ab10
   181e1:	e8 93 05 00 00       	call   18779 <pannic>
   181e6:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   181e9:	8b 45 08             	mov    0x8(%ebp),%eax
   181ec:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   181f3:	8b 45 08             	mov    0x8(%ebp),%eax
   181f6:	8b 50 04             	mov    0x4(%eax),%edx
   181f9:	8b 45 08             	mov    0x8(%ebp),%eax
   181fc:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   181fe:	8b 45 08             	mov    0x8(%ebp),%eax
   18201:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   18208:	90                   	nop
   18209:	c9                   	leave  
   1820a:	c3                   	ret    

0001820b <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   1820b:	55                   	push   %ebp
   1820c:	89 e5                	mov    %esp,%ebp
   1820e:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   18211:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   18215:	75 19                	jne    18230 <list_is_empty+0x25>
   18217:	68 fc aa 01 00       	push   $0x1aafc
   1821c:	68 ac ab 01 00       	push   $0x1abac
   18221:	6a 38                	push   $0x38
   18223:	68 10 ab 01 00       	push   $0x1ab10
   18228:	e8 4c 05 00 00       	call   18779 <pannic>
   1822d:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   18230:	8b 45 08             	mov    0x8(%ebp),%eax
   18233:	8b 40 08             	mov    0x8(%eax),%eax
   18236:	85 c0                	test   %eax,%eax
   18238:	0f 94 c0             	sete   %al
   1823b:	0f b6 c0             	movzbl %al,%eax
}
   1823e:	c9                   	leave  
   1823f:	c3                   	ret    

00018240 <sem_init>:
 * @brief  初始化信号量对象
 * 
 * @param sem 信号量对象
 * @param init_count 初始化信号量数量 
 */
void sem_init(sem_t *sem, int init_count) {
   18240:	55                   	push   %ebp
   18241:	89 e5                	mov    %esp,%ebp
   18243:	83 ec 08             	sub    $0x8,%esp
    ASSERT(sem != (sem_t*)0);
   18246:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1824a:	75 19                	jne    18265 <sem_init+0x25>
   1824c:	68 4e ab 01 00       	push   $0x1ab4e
   18251:	68 94 ab 01 00       	push   $0x1ab94
   18256:	6a 18                	push   $0x18
   18258:	68 60 ab 01 00       	push   $0x1ab60
   1825d:	e8 17 05 00 00       	call   18779 <pannic>
   18262:	83 c4 10             	add    $0x10,%esp
    sem->count = init_count;
   18265:	8b 45 08             	mov    0x8(%ebp),%eax
   18268:	8b 55 0c             	mov    0xc(%ebp),%edx
   1826b:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   1826d:	8b 45 08             	mov    0x8(%ebp),%eax
   18270:	83 c0 04             	add    $0x4,%eax
   18273:	83 ec 0c             	sub    $0xc,%esp
   18276:	50                   	push   %eax
   18277:	e8 48 ff ff ff       	call   181c4 <list_init>
   1827c:	83 c4 10             	add    $0x10,%esp
}
   1827f:	90                   	nop
   18280:	c9                   	leave  
   18281:	c3                   	ret    

00018282 <sem_wait>:
 *         信号量相当于入场券，获取信号量之后才有资格访问信号量保护的资源
 * 
 * @param sem 
 * @param init_count 
 */
void sem_wait(sem_t *sem) {
   18282:	55                   	push   %ebp
   18283:	89 e5                	mov    %esp,%ebp
   18285:	83 ec 18             	sub    $0x18,%esp
    
    idt_state_t state = idt_enter_protection();//TODO:加锁
   18288:	e8 23 b1 ff ff       	call   133b0 <idt_enter_protection>
   1828d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    task_t *curr = task_current();
   18290:	e8 1c 97 ff ff       	call   119b1 <task_current>
   18295:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (curr == 0) {  //内核单进程模式，不等待
   18298:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1829c:	75 10                	jne    182ae <sem_wait+0x2c>
        idt_leave_protection(state);  // TODO:解锁
   1829e:	83 ec 0c             	sub    $0xc,%esp
   182a1:	ff 75 f4             	push   -0xc(%ebp)
   182a4:	e8 1f b1 ff ff       	call   133c8 <idt_leave_protection>
   182a9:	83 c4 10             	add    $0x10,%esp
        return;
   182ac:	eb 52                	jmp    18300 <sem_wait+0x7e>
    }

    //1.判断信号量是否还有剩余
    if(sem->count > 0) {//有剩余，直接使用，任务获取信号量继续执行
   182ae:	8b 45 08             	mov    0x8(%ebp),%eax
   182b1:	8b 00                	mov    (%eax),%eax
   182b3:	85 c0                	test   %eax,%eax
   182b5:	7e 0f                	jle    182c6 <sem_wait+0x44>
        --sem->count;   
   182b7:	8b 45 08             	mov    0x8(%ebp),%eax
   182ba:	8b 00                	mov    (%eax),%eax
   182bc:	8d 50 ff             	lea    -0x1(%eax),%edx
   182bf:	8b 45 08             	mov    0x8(%ebp),%eax
   182c2:	89 10                	mov    %edx,(%eax)
   182c4:	eb 2c                	jmp    182f2 <sem_wait+0x70>
    } else {//没有剩余，任务进入延时队列等待信号量
        //2.将当前任务从就绪队列中取下
        task_set_unready(curr); 
   182c6:	83 ec 0c             	sub    $0xc,%esp
   182c9:	ff 75 f0             	push   -0x10(%ebp)
   182cc:	e8 70 96 ff ff       	call   11941 <task_set_unready>
   182d1:	83 c4 10             	add    $0x10,%esp
        //3.将当前任务加入到信号量等待队列
        list_insert_last(&sem->wait_list, &curr->wait_node); 
   182d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   182d7:	8d 50 54             	lea    0x54(%eax),%edx
   182da:	8b 45 08             	mov    0x8(%ebp),%eax
   182dd:	83 c0 04             	add    $0x4,%eax
   182e0:	83 ec 08             	sub    $0x8,%esp
   182e3:	52                   	push   %edx
   182e4:	50                   	push   %eax
   182e5:	e8 be 0e 00 00       	call   191a8 <list_insert_last>
   182ea:	83 c4 10             	add    $0x10,%esp
        //4.切换任务
        task_switch();
   182ed:	e8 c9 96 ff ff       	call   119bb <task_switch>
    }

    idt_leave_protection(state);//TODO:解锁
   182f2:	83 ec 0c             	sub    $0xc,%esp
   182f5:	ff 75 f4             	push   -0xc(%ebp)
   182f8:	e8 cb b0 ff ff       	call   133c8 <idt_leave_protection>
   182fd:	83 c4 10             	add    $0x10,%esp
}
   18300:	c9                   	leave  
   18301:	c3                   	ret    

00018302 <sem_notify>:
 *        等待队列中若有任务则直接获取该信号量，继续执行即访问资源
 *         若没有任务，则信号量对象记录的信号量数量加1，预留给下一次获取
 * 
 * @param sem 
 */
void sem_notify(sem_t *sem) {
   18302:	55                   	push   %ebp
   18303:	89 e5                	mov    %esp,%ebp
   18305:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   18308:	e8 a3 b0 ff ff       	call   133b0 <idt_enter_protection>
   1830d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    task_t *curr = task_current();
   18310:	e8 9c 96 ff ff       	call   119b1 <task_current>
   18315:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (curr == 0) {  //内核单进程模式，不等待
   18318:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1831c:	75 10                	jne    1832e <sem_notify+0x2c>
        idt_leave_protection(state);  // TODO:解锁
   1831e:	83 ec 0c             	sub    $0xc,%esp
   18321:	ff 75 f4             	push   -0xc(%ebp)
   18324:	e8 9f b0 ff ff       	call   133c8 <idt_leave_protection>
   18329:	83 c4 10             	add    $0x10,%esp
        return;
   1832c:	eb 71                	jmp    1839f <sem_notify+0x9d>
    }

    if (!list_is_empty(&sem->wait_list)) {
   1832e:	8b 45 08             	mov    0x8(%ebp),%eax
   18331:	83 c0 04             	add    $0x4,%eax
   18334:	83 ec 0c             	sub    $0xc,%esp
   18337:	50                   	push   %eax
   18338:	e8 ce fe ff ff       	call   1820b <list_is_empty>
   1833d:	83 c4 10             	add    $0x10,%esp
   18340:	85 c0                	test   %eax,%eax
   18342:	75 40                	jne    18384 <sem_notify+0x82>
        list_node_t *node = list_remove_first(&sem->wait_list);
   18344:	8b 45 08             	mov    0x8(%ebp),%eax
   18347:	83 c0 04             	add    $0x4,%eax
   1834a:	83 ec 0c             	sub    $0xc,%esp
   1834d:	50                   	push   %eax
   1834e:	e8 e4 0e 00 00       	call   19237 <list_remove_first>
   18353:	83 c4 10             	add    $0x10,%esp
   18356:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t *task = list_node_parent(node, task_t, wait_node);
   18359:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1835d:	74 08                	je     18367 <sem_notify+0x65>
   1835f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   18362:	83 e8 54             	sub    $0x54,%eax
   18365:	eb 05                	jmp    1836c <sem_notify+0x6a>
   18367:	b8 00 00 00 00       	mov    $0x0,%eax
   1836c:	89 45 e8             	mov    %eax,-0x18(%ebp)
        task_set_ready(task);
   1836f:	83 ec 0c             	sub    $0xc,%esp
   18372:	ff 75 e8             	push   -0x18(%ebp)
   18375:	e8 85 95 ff ff       	call   118ff <task_set_ready>
   1837a:	83 c4 10             	add    $0x10,%esp
        task_switch();
   1837d:	e8 39 96 ff ff       	call   119bb <task_switch>
   18382:	eb 0d                	jmp    18391 <sem_notify+0x8f>
    } else {
        sem->count++;
   18384:	8b 45 08             	mov    0x8(%ebp),%eax
   18387:	8b 00                	mov    (%eax),%eax
   18389:	8d 50 01             	lea    0x1(%eax),%edx
   1838c:	8b 45 08             	mov    0x8(%ebp),%eax
   1838f:	89 10                	mov    %edx,(%eax)
    }

    idt_leave_protection(state);//TODO:解锁
   18391:	83 ec 0c             	sub    $0xc,%esp
   18394:	ff 75 f4             	push   -0xc(%ebp)
   18397:	e8 2c b0 ff ff       	call   133c8 <idt_leave_protection>
   1839c:	83 c4 10             	add    $0x10,%esp

}
   1839f:	c9                   	leave  
   183a0:	c3                   	ret    

000183a1 <sem_count>:

int sem_count(sem_t *sem) {
   183a1:	55                   	push   %ebp
   183a2:	89 e5                	mov    %esp,%ebp
   183a4:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   183a7:	e8 04 b0 ff ff       	call   133b0 <idt_enter_protection>
   183ac:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   183af:	8b 45 08             	mov    0x8(%ebp),%eax
   183b2:	8b 00                	mov    (%eax),%eax
   183b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    idt_leave_protection(state);//TODO:解锁
   183b7:	83 ec 0c             	sub    $0xc,%esp
   183ba:	ff 75 f4             	push   -0xc(%ebp)
   183bd:	e8 06 b0 ff ff       	call   133c8 <idt_leave_protection>
   183c2:	83 c4 10             	add    $0x10,%esp

    return count;
   183c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   183c8:	c9                   	leave  
   183c9:	c3                   	ret    

000183ca <list_init>:
static inline void list_init(list_t *list) {
   183ca:	55                   	push   %ebp
   183cb:	89 e5                	mov    %esp,%ebp
   183cd:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   183d0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   183d4:	75 19                	jne    183ef <list_init+0x25>
   183d6:	68 bc ab 01 00       	push   $0x1abbc
   183db:	68 c0 ac 01 00       	push   $0x1acc0
   183e0:	6a 31                	push   $0x31
   183e2:	68 d0 ab 01 00       	push   $0x1abd0
   183e7:	e8 8d 03 00 00       	call   18779 <pannic>
   183ec:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   183ef:	8b 45 08             	mov    0x8(%ebp),%eax
   183f2:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   183f9:	8b 45 08             	mov    0x8(%ebp),%eax
   183fc:	8b 50 04             	mov    0x4(%eax),%edx
   183ff:	8b 45 08             	mov    0x8(%ebp),%eax
   18402:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   18404:	8b 45 08             	mov    0x8(%ebp),%eax
   18407:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   1840e:	90                   	nop
   1840f:	c9                   	leave  
   18410:	c3                   	ret    

00018411 <list_get_size>:
static inline int list_get_size(list_t *list) {
   18411:	55                   	push   %ebp
   18412:	89 e5                	mov    %esp,%ebp
   18414:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   18417:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1841b:	75 19                	jne    18436 <list_get_size+0x25>
   1841d:	68 bc ab 01 00       	push   $0x1abbc
   18422:	68 cc ac 01 00       	push   $0x1accc
   18427:	6a 3e                	push   $0x3e
   18429:	68 d0 ab 01 00       	push   $0x1abd0
   1842e:	e8 46 03 00 00       	call   18779 <pannic>
   18433:	83 c4 10             	add    $0x10,%esp
    return list->size;
   18436:	8b 45 08             	mov    0x8(%ebp),%eax
   18439:	8b 40 08             	mov    0x8(%eax),%eax
}
   1843c:	c9                   	leave  
   1843d:	c3                   	ret    

0001843e <list_get_first>:
static inline list_node_t *list_get_first(list_t *list) {
   1843e:	55                   	push   %ebp
   1843f:	89 e5                	mov    %esp,%ebp
   18441:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   18444:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   18448:	75 19                	jne    18463 <list_get_first+0x25>
   1844a:	68 bc ab 01 00       	push   $0x1abbc
   1844f:	68 ec ac 01 00       	push   $0x1acec
   18454:	6a 44                	push   $0x44
   18456:	68 d0 ab 01 00       	push   $0x1abd0
   1845b:	e8 19 03 00 00       	call   18779 <pannic>
   18460:	83 c4 10             	add    $0x10,%esp
    return list->first;
   18463:	8b 45 08             	mov    0x8(%ebp),%eax
   18466:	8b 00                	mov    (%eax),%eax
}
   18468:	c9                   	leave  
   18469:	c3                   	ret    

0001846a <list_get_last>:

static inline list_node_t *list_get_last(list_t *list) {
   1846a:	55                   	push   %ebp
   1846b:	89 e5                	mov    %esp,%ebp
   1846d:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   18470:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   18474:	75 19                	jne    1848f <list_get_last+0x25>
   18476:	68 bc ab 01 00       	push   $0x1abbc
   1847b:	68 dc ac 01 00       	push   $0x1acdc
   18480:	6a 4a                	push   $0x4a
   18482:	68 d0 ab 01 00       	push   $0x1abd0
   18487:	e8 ed 02 00 00       	call   18779 <pannic>
   1848c:	83 c4 10             	add    $0x10,%esp

    return list->last;
   1848f:	8b 45 08             	mov    0x8(%ebp),%eax
   18492:	8b 40 04             	mov    0x4(%eax),%eax
}
   18495:	c9                   	leave  
   18496:	c3                   	ret    

00018497 <list_test>:

#include "tools/list.h"
#include "tools/log.h"
#include "common/types.h"

void list_test(void) {
   18497:	55                   	push   %ebp
   18498:	89 e5                	mov    %esp,%ebp
   1849a:	56                   	push   %esi
   1849b:	53                   	push   %ebx
   1849c:	83 ec 70             	sub    $0x70,%esp
    list_t list;
    list_node_t nodes[5];

    list_init(&list);
   1849f:	83 ec 0c             	sub    $0xc,%esp
   184a2:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   184a5:	50                   	push   %eax
   184a6:	e8 1f ff ff ff       	call   183ca <list_init>
   184ab:	83 c4 10             	add    $0x10,%esp
    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   184ae:	83 ec 0c             	sub    $0xc,%esp
   184b1:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   184b4:	50                   	push   %eax
   184b5:	e8 57 ff ff ff       	call   18411 <list_get_size>
   184ba:	83 c4 10             	add    $0x10,%esp
   184bd:	89 c6                	mov    %eax,%esi
   184bf:	83 ec 0c             	sub    $0xc,%esp
   184c2:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   184c5:	50                   	push   %eax
   184c6:	e8 9f ff ff ff       	call   1846a <list_get_last>
   184cb:	83 c4 10             	add    $0x10,%esp
   184ce:	89 c3                	mov    %eax,%ebx
   184d0:	83 ec 0c             	sub    $0xc,%esp
   184d3:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   184d6:	50                   	push   %eax
   184d7:	e8 62 ff ff ff       	call   1843e <list_get_first>
   184dc:	83 c4 10             	add    $0x10,%esp
   184df:	56                   	push   %esi
   184e0:	53                   	push   %ebx
   184e1:	50                   	push   %eax
   184e2:	68 10 ac 01 00       	push   $0x1ac10
   184e7:	e8 a9 0f 00 00       	call   19495 <log_printf>
   184ec:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_insert_first
    for (int i = 0; i < 5; ++i) {
   184ef:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   184f6:	eb 3f                	jmp    18537 <list_test+0xa0>
        list_node_t *node = nodes + i;
   184f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   184fb:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   18502:	8d 45 9c             	lea    -0x64(%ebp),%eax
   18505:	01 d0                	add    %edx,%eax
   18507:	89 45 d0             	mov    %eax,-0x30(%ebp)

        log_printf("insert first to list: %d, 0x%x", i, (uint32_t)node);
   1850a:	8b 45 d0             	mov    -0x30(%ebp),%eax
   1850d:	83 ec 04             	sub    $0x4,%esp
   18510:	50                   	push   %eax
   18511:	ff 75 f4             	push   -0xc(%ebp)
   18514:	68 38 ac 01 00       	push   $0x1ac38
   18519:	e8 77 0f 00 00       	call   19495 <log_printf>
   1851e:	83 c4 10             	add    $0x10,%esp
        list_insert_first(&list, node);
   18521:	83 ec 08             	sub    $0x8,%esp
   18524:	ff 75 d0             	push   -0x30(%ebp)
   18527:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1852a:	50                   	push   %eax
   1852b:	e8 ed 0b 00 00       	call   1911d <list_insert_first>
   18530:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   18533:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   18537:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   1853b:	7e bb                	jle    184f8 <list_test+0x61>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   1853d:	83 ec 0c             	sub    $0xc,%esp
   18540:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   18543:	50                   	push   %eax
   18544:	e8 c8 fe ff ff       	call   18411 <list_get_size>
   18549:	83 c4 10             	add    $0x10,%esp
   1854c:	89 c6                	mov    %eax,%esi
   1854e:	83 ec 0c             	sub    $0xc,%esp
   18551:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   18554:	50                   	push   %eax
   18555:	e8 10 ff ff ff       	call   1846a <list_get_last>
   1855a:	83 c4 10             	add    $0x10,%esp
   1855d:	89 c3                	mov    %eax,%ebx
   1855f:	83 ec 0c             	sub    $0xc,%esp
   18562:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   18565:	50                   	push   %eax
   18566:	e8 d3 fe ff ff       	call   1843e <list_get_first>
   1856b:	83 c4 10             	add    $0x10,%esp
   1856e:	56                   	push   %esi
   1856f:	53                   	push   %ebx
   18570:	50                   	push   %eax
   18571:	68 10 ac 01 00       	push   $0x1ac10
   18576:	e8 1a 0f 00 00       	call   19495 <log_printf>
   1857b:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

   
    //测试list_remove_first
    for (int i = 0; i < 5; ++i) {
   1857e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   18585:	eb 2d                	jmp    185b4 <list_test+0x11d>
        list_node_t *node = list_remove_first(&list);
   18587:	83 ec 0c             	sub    $0xc,%esp
   1858a:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1858d:	50                   	push   %eax
   1858e:	e8 a4 0c 00 00       	call   19237 <list_remove_first>
   18593:	83 c4 10             	add    $0x10,%esp
   18596:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        log_printf("remove first: %d, 0x%x", i, (uint32_t)node);
   18599:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   1859c:	83 ec 04             	sub    $0x4,%esp
   1859f:	50                   	push   %eax
   185a0:	ff 75 f0             	push   -0x10(%ebp)
   185a3:	68 57 ac 01 00       	push   $0x1ac57
   185a8:	e8 e8 0e 00 00       	call   19495 <log_printf>
   185ad:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   185b0:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   185b4:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   185b8:	7e cd                	jle    18587 <list_test+0xf0>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   185ba:	83 ec 0c             	sub    $0xc,%esp
   185bd:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   185c0:	50                   	push   %eax
   185c1:	e8 4b fe ff ff       	call   18411 <list_get_size>
   185c6:	83 c4 10             	add    $0x10,%esp
   185c9:	89 c6                	mov    %eax,%esi
   185cb:	83 ec 0c             	sub    $0xc,%esp
   185ce:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   185d1:	50                   	push   %eax
   185d2:	e8 93 fe ff ff       	call   1846a <list_get_last>
   185d7:	83 c4 10             	add    $0x10,%esp
   185da:	89 c3                	mov    %eax,%ebx
   185dc:	83 ec 0c             	sub    $0xc,%esp
   185df:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   185e2:	50                   	push   %eax
   185e3:	e8 56 fe ff ff       	call   1843e <list_get_first>
   185e8:	83 c4 10             	add    $0x10,%esp
   185eb:	56                   	push   %esi
   185ec:	53                   	push   %ebx
   185ed:	50                   	push   %eax
   185ee:	68 10 ac 01 00       	push   $0x1ac10
   185f3:	e8 9d 0e 00 00       	call   19495 <log_printf>
   185f8:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    

    //测试list_insert_last
    for (int i = 0; i < 5; ++i) {
   185fb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   18602:	eb 3f                	jmp    18643 <list_test+0x1ac>
        list_node_t *node = nodes + i;
   18604:	8b 45 ec             	mov    -0x14(%ebp),%eax
   18607:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   1860e:	8d 45 9c             	lea    -0x64(%ebp),%eax
   18611:	01 d0                	add    %edx,%eax
   18613:	89 45 d8             	mov    %eax,-0x28(%ebp)

        log_printf("insert last to list: %d, 0x%x", i, (uint32_t)node);
   18616:	8b 45 d8             	mov    -0x28(%ebp),%eax
   18619:	83 ec 04             	sub    $0x4,%esp
   1861c:	50                   	push   %eax
   1861d:	ff 75 ec             	push   -0x14(%ebp)
   18620:	68 6e ac 01 00       	push   $0x1ac6e
   18625:	e8 6b 0e 00 00       	call   19495 <log_printf>
   1862a:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&list, node);
   1862d:	83 ec 08             	sub    $0x8,%esp
   18630:	ff 75 d8             	push   -0x28(%ebp)
   18633:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   18636:	50                   	push   %eax
   18637:	e8 6c 0b 00 00       	call   191a8 <list_insert_last>
   1863c:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   1863f:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   18643:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   18647:	7e bb                	jle    18604 <list_test+0x16d>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   18649:	83 ec 0c             	sub    $0xc,%esp
   1864c:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1864f:	50                   	push   %eax
   18650:	e8 bc fd ff ff       	call   18411 <list_get_size>
   18655:	83 c4 10             	add    $0x10,%esp
   18658:	89 c6                	mov    %eax,%esi
   1865a:	83 ec 0c             	sub    $0xc,%esp
   1865d:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   18660:	50                   	push   %eax
   18661:	e8 04 fe ff ff       	call   1846a <list_get_last>
   18666:	83 c4 10             	add    $0x10,%esp
   18669:	89 c3                	mov    %eax,%ebx
   1866b:	83 ec 0c             	sub    $0xc,%esp
   1866e:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   18671:	50                   	push   %eax
   18672:	e8 c7 fd ff ff       	call   1843e <list_get_first>
   18677:	83 c4 10             	add    $0x10,%esp
   1867a:	56                   	push   %esi
   1867b:	53                   	push   %ebx
   1867c:	50                   	push   %eax
   1867d:	68 10 ac 01 00       	push   $0x1ac10
   18682:	e8 0e 0e 00 00       	call   19495 <log_printf>
   18687:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_remove_last
    for (int i = 0; i < 5; ++i) {
   1868a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   18691:	eb 2d                	jmp    186c0 <list_test+0x229>
        list_node_t *node = list_remove_last(&list);
   18693:	83 ec 0c             	sub    $0xc,%esp
   18696:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   18699:	50                   	push   %eax
   1869a:	e8 49 0c 00 00       	call   192e8 <list_remove_last>
   1869f:	83 c4 10             	add    $0x10,%esp
   186a2:	89 45 dc             	mov    %eax,-0x24(%ebp)
        log_printf("remove last: %d, 0x%x", i, (uint32_t)node);
   186a5:	8b 45 dc             	mov    -0x24(%ebp),%eax
   186a8:	83 ec 04             	sub    $0x4,%esp
   186ab:	50                   	push   %eax
   186ac:	ff 75 e8             	push   -0x18(%ebp)
   186af:	68 8c ac 01 00       	push   $0x1ac8c
   186b4:	e8 dc 0d 00 00       	call   19495 <log_printf>
   186b9:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   186bc:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   186c0:	83 7d e8 04          	cmpl   $0x4,-0x18(%ebp)
   186c4:	7e cd                	jle    18693 <list_test+0x1fc>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   186c6:	83 ec 0c             	sub    $0xc,%esp
   186c9:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   186cc:	50                   	push   %eax
   186cd:	e8 3f fd ff ff       	call   18411 <list_get_size>
   186d2:	83 c4 10             	add    $0x10,%esp
   186d5:	89 c6                	mov    %eax,%esi
   186d7:	83 ec 0c             	sub    $0xc,%esp
   186da:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   186dd:	50                   	push   %eax
   186de:	e8 87 fd ff ff       	call   1846a <list_get_last>
   186e3:	83 c4 10             	add    $0x10,%esp
   186e6:	89 c3                	mov    %eax,%ebx
   186e8:	83 ec 0c             	sub    $0xc,%esp
   186eb:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   186ee:	50                   	push   %eax
   186ef:	e8 4a fd ff ff       	call   1843e <list_get_first>
   186f4:	83 c4 10             	add    $0x10,%esp
   186f7:	56                   	push   %esi
   186f8:	53                   	push   %ebx
   186f9:	50                   	push   %eax
   186fa:	68 10 ac 01 00       	push   $0x1ac10
   186ff:	e8 91 0d 00 00       	call   19495 <log_printf>
   18704:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    
    struct type_t {
        int i;
        list_node_t node;
    }v = {0x123456};
   18707:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
   1870e:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
   18715:	c7 45 98 00 00 00 00 	movl   $0x0,-0x68(%ebp)
   1871c:	c7 45 90 56 34 12 00 	movl   $0x123456,-0x70(%ebp)

    list_node_t *v_node = &v.node;
   18723:	8d 45 90             	lea    -0x70(%ebp),%eax
   18726:	83 c0 04             	add    $0x4,%eax
   18729:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    struct type_t *p = list_node_parent(v_node, struct type_t, node);  
   1872c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   18730:	74 08                	je     1873a <list_test+0x2a3>
   18732:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   18735:	83 e8 04             	sub    $0x4,%eax
   18738:	eb 05                	jmp    1873f <list_test+0x2a8>
   1873a:	b8 00 00 00 00       	mov    $0x0,%eax
   1873f:	89 45 e0             	mov    %eax,-0x20(%ebp)

    log_printf("v addr = 0x%x", (uint32_t)&v);
   18742:	8d 45 90             	lea    -0x70(%ebp),%eax
   18745:	83 ec 08             	sub    $0x8,%esp
   18748:	50                   	push   %eax
   18749:	68 a2 ac 01 00       	push   $0x1aca2
   1874e:	e8 42 0d 00 00       	call   19495 <log_printf>
   18753:	83 c4 10             	add    $0x10,%esp
    log_printf("p addr = 0x%x", (uint32_t)p);  
   18756:	8b 45 e0             	mov    -0x20(%ebp),%eax
   18759:	83 ec 08             	sub    $0x8,%esp
   1875c:	50                   	push   %eax
   1875d:	68 b0 ac 01 00       	push   $0x1acb0
   18762:	e8 2e 0d 00 00       	call   19495 <log_printf>
   18767:	83 c4 10             	add    $0x10,%esp

 }
   1876a:	90                   	nop
   1876b:	8d 65 f8             	lea    -0x8(%ebp),%esp
   1876e:	5b                   	pop    %ebx
   1876f:	5e                   	pop    %esi
   18770:	5d                   	pop    %ebp
   18771:	c3                   	ret    

00018772 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   18772:	55                   	push   %ebp
   18773:	89 e5                	mov    %esp,%ebp
   18775:	f4                   	hlt    
   18776:	90                   	nop
   18777:	5d                   	pop    %ebp
   18778:	c3                   	ret    

00018779 <pannic>:
 * @param file 异常所在文件绝对路径
 * @param line 异常所在行号
 * @param func 异常所在函数名 
 * @param reason 异常的原因
 */
void pannic(const char *file, int line, const char *func, const char *reason) {
   18779:	55                   	push   %ebp
   1877a:	89 e5                	mov    %esp,%ebp
   1877c:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert faild! %s\n", reason);
   1877f:	83 ec 08             	sub    $0x8,%esp
   18782:	ff 75 14             	push   0x14(%ebp)
   18785:	68 fb ac 01 00       	push   $0x1acfb
   1878a:	e8 06 0d 00 00       	call   19495 <log_printf>
   1878f:	83 c4 10             	add    $0x10,%esp
    log_printf("file:\t%s\nline:\t%d\nfunc:\t%s\n", file, line, func);
   18792:	ff 75 10             	push   0x10(%ebp)
   18795:	ff 75 0c             	push   0xc(%ebp)
   18798:	ff 75 08             	push   0x8(%ebp)
   1879b:	68 0d ad 01 00       	push   $0x1ad0d
   187a0:	e8 f0 0c 00 00       	call   19495 <log_printf>
   187a5:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   187a8:	e8 c5 ff ff ff       	call   18772 <hlt>
   187ad:	eb f9                	jmp    187a8 <pannic+0x2f>

000187af <bitmap_byte_count>:
 * @brief  向上取整获取位图数组中有多少字节
 * 
 * @param bit_count  位图数组拥有的bit位数
 * @return int 向上取整得到的字节数
 */
int bitmap_byte_count(int bit_count) {
   187af:	55                   	push   %ebp
   187b0:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8;
   187b2:	8b 45 08             	mov    0x8(%ebp),%eax
   187b5:	83 c0 07             	add    $0x7,%eax
   187b8:	8d 50 07             	lea    0x7(%eax),%edx
   187bb:	85 c0                	test   %eax,%eax
   187bd:	0f 48 c2             	cmovs  %edx,%eax
   187c0:	c1 f8 03             	sar    $0x3,%eax
}
   187c3:	5d                   	pop    %ebp
   187c4:	c3                   	ret    

000187c5 <bitmap_init>:
 * @param bitmap 需要初始化的位图
 * @param bits 位图所包含的位图数组的起始地址
 * @param count 页的数量
 * @param init_bit 将位图数组的每一位设置为init_bit
 */
void bitmap_init(bitmap_t *bitmap, uint8_t *bits, int count, int init_bit) {
   187c5:	55                   	push   %ebp
   187c6:	89 e5                	mov    %esp,%ebp
   187c8:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   187cb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   187cf:	75 19                	jne    187ea <bitmap_init+0x25>
   187d1:	68 2c ad 01 00       	push   $0x1ad2c
   187d6:	68 c0 ad 01 00       	push   $0x1adc0
   187db:	6a 24                	push   $0x24
   187dd:	68 44 ad 01 00       	push   $0x1ad44
   187e2:	e8 92 ff ff ff       	call   18779 <pannic>
   187e7:	83 c4 10             	add    $0x10,%esp
    ASSERT(bits != (uint8_t*)0);
   187ea:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   187ee:	75 19                	jne    18809 <bitmap_init+0x44>
   187f0:	68 7c ad 01 00       	push   $0x1ad7c
   187f5:	68 c0 ad 01 00       	push   $0x1adc0
   187fa:	6a 25                	push   $0x25
   187fc:	68 44 ad 01 00       	push   $0x1ad44
   18801:	e8 73 ff ff ff       	call   18779 <pannic>
   18806:	83 c4 10             	add    $0x10,%esp

    bitmap->bit_count = count;
   18809:	8b 45 08             	mov    0x8(%ebp),%eax
   1880c:	8b 55 10             	mov    0x10(%ebp),%edx
   1880f:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   18811:	8b 45 08             	mov    0x8(%ebp),%eax
   18814:	8b 55 0c             	mov    0xc(%ebp),%edx
   18817:	89 50 04             	mov    %edx,0x4(%eax)

    //计算该位图需要多少字节
    int bytes = bitmap_byte_count(bitmap->bit_count);
   1881a:	8b 45 08             	mov    0x8(%ebp),%eax
   1881d:	8b 00                	mov    (%eax),%eax
   1881f:	83 ec 0c             	sub    $0xc,%esp
   18822:	50                   	push   %eax
   18823:	e8 87 ff ff ff       	call   187af <bitmap_byte_count>
   18828:	83 c4 10             	add    $0x10,%esp
   1882b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    kernel_memset(bitmap->bits, init_bit ? 0xff : 0, bytes);
   1882e:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   18832:	74 07                	je     1883b <bitmap_init+0x76>
   18834:	ba ff 00 00 00       	mov    $0xff,%edx
   18839:	eb 05                	jmp    18840 <bitmap_init+0x7b>
   1883b:	ba 00 00 00 00       	mov    $0x0,%edx
   18840:	8b 45 08             	mov    0x8(%ebp),%eax
   18843:	8b 40 04             	mov    0x4(%eax),%eax
   18846:	83 ec 04             	sub    $0x4,%esp
   18849:	ff 75 f4             	push   -0xc(%ebp)
   1884c:	52                   	push   %edx
   1884d:	50                   	push   %eax
   1884e:	e8 45 04 00 00       	call   18c98 <kernel_memset>
   18853:	83 c4 10             	add    $0x10,%esp

}
   18856:	90                   	nop
   18857:	c9                   	leave  
   18858:	c3                   	ret    

00018859 <bitmap_get_bit>:
 * 
 * @param bitmap 
 * @param index 
 * @return uint8_t 
 */
uint8_t bitmap_get_bit(bitmap_t *bitmap, int index) {
   18859:	55                   	push   %ebp
   1885a:	89 e5                	mov    %esp,%ebp
   1885c:	53                   	push   %ebx
   1885d:	83 ec 04             	sub    $0x4,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   18860:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   18864:	75 19                	jne    1887f <bitmap_get_bit+0x26>
   18866:	68 2c ad 01 00       	push   $0x1ad2c
   1886b:	68 cc ad 01 00       	push   $0x1adcc
   18870:	6a 39                	push   $0x39
   18872:	68 44 ad 01 00       	push   $0x1ad44
   18877:	e8 fd fe ff ff       	call   18779 <pannic>
   1887c:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0);
   1887f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   18883:	79 19                	jns    1889e <bitmap_get_bit+0x45>
   18885:	68 90 ad 01 00       	push   $0x1ad90
   1888a:	68 cc ad 01 00       	push   $0x1adcc
   1888f:	6a 3a                	push   $0x3a
   18891:	68 44 ad 01 00       	push   $0x1ad44
   18896:	e8 de fe ff ff       	call   18779 <pannic>
   1889b:	83 c4 10             	add    $0x10,%esp

    return (bitmap->bits[index / 8] & (1 << (index % 8)));
   1889e:	8b 45 08             	mov    0x8(%ebp),%eax
   188a1:	8b 48 04             	mov    0x4(%eax),%ecx
   188a4:	8b 45 0c             	mov    0xc(%ebp),%eax
   188a7:	8d 50 07             	lea    0x7(%eax),%edx
   188aa:	85 c0                	test   %eax,%eax
   188ac:	0f 48 c2             	cmovs  %edx,%eax
   188af:	c1 f8 03             	sar    $0x3,%eax
   188b2:	01 c8                	add    %ecx,%eax
   188b4:	0f b6 00             	movzbl (%eax),%eax
   188b7:	89 c3                	mov    %eax,%ebx
   188b9:	8b 45 0c             	mov    0xc(%ebp),%eax
   188bc:	83 e0 07             	and    $0x7,%eax
   188bf:	ba 01 00 00 00       	mov    $0x1,%edx
   188c4:	89 c1                	mov    %eax,%ecx
   188c6:	d3 e2                	shl    %cl,%edx
   188c8:	89 d0                	mov    %edx,%eax
   188ca:	21 d8                	and    %ebx,%eax
}
   188cc:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   188cf:	c9                   	leave  
   188d0:	c3                   	ret    

000188d1 <bitmap_set_bit>:
 * @param bitmap 
 * @param index 
 * @param count 
 * @param bit 
 */
void bitmap_set_bit(bitmap_t *bitmap, int index, int count, int bit) {
   188d1:	55                   	push   %ebp
   188d2:	89 e5                	mov    %esp,%ebp
   188d4:	56                   	push   %esi
   188d5:	53                   	push   %ebx
   188d6:	83 ec 10             	sub    $0x10,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   188d9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   188dd:	75 19                	jne    188f8 <bitmap_set_bit+0x27>
   188df:	68 2c ad 01 00       	push   $0x1ad2c
   188e4:	68 dc ad 01 00       	push   $0x1addc
   188e9:	6a 48                	push   $0x48
   188eb:	68 44 ad 01 00       	push   $0x1ad44
   188f0:	e8 84 fe ff ff       	call   18779 <pannic>
   188f5:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0 && count >= 0);
   188f8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   188fc:	78 06                	js     18904 <bitmap_set_bit+0x33>
   188fe:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   18902:	79 19                	jns    1891d <bitmap_set_bit+0x4c>
   18904:	68 9b ad 01 00       	push   $0x1ad9b
   18909:	68 dc ad 01 00       	push   $0x1addc
   1890e:	6a 49                	push   $0x49
   18910:	68 44 ad 01 00       	push   $0x1ad44
   18915:	e8 5f fe ff ff       	call   18779 <pannic>
   1891a:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   1891d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   18924:	e9 92 00 00 00       	jmp    189bb <bitmap_set_bit+0xea>
        if (bit) {
   18929:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   1892d:	74 42                	je     18971 <bitmap_set_bit+0xa0>
            bitmap->bits[index / 8] |= (1 << (index % 8));
   1892f:	8b 45 08             	mov    0x8(%ebp),%eax
   18932:	8b 48 04             	mov    0x4(%eax),%ecx
   18935:	8b 45 0c             	mov    0xc(%ebp),%eax
   18938:	8d 50 07             	lea    0x7(%eax),%edx
   1893b:	85 c0                	test   %eax,%eax
   1893d:	0f 48 c2             	cmovs  %edx,%eax
   18940:	c1 f8 03             	sar    $0x3,%eax
   18943:	89 c2                	mov    %eax,%edx
   18945:	89 d0                	mov    %edx,%eax
   18947:	01 c8                	add    %ecx,%eax
   18949:	0f b6 00             	movzbl (%eax),%eax
   1894c:	89 c6                	mov    %eax,%esi
   1894e:	8b 45 0c             	mov    0xc(%ebp),%eax
   18951:	83 e0 07             	and    $0x7,%eax
   18954:	bb 01 00 00 00       	mov    $0x1,%ebx
   18959:	89 c1                	mov    %eax,%ecx
   1895b:	d3 e3                	shl    %cl,%ebx
   1895d:	89 d8                	mov    %ebx,%eax
   1895f:	89 f1                	mov    %esi,%ecx
   18961:	09 c1                	or     %eax,%ecx
   18963:	8b 45 08             	mov    0x8(%ebp),%eax
   18966:	8b 40 04             	mov    0x4(%eax),%eax
   18969:	01 d0                	add    %edx,%eax
   1896b:	89 ca                	mov    %ecx,%edx
   1896d:	88 10                	mov    %dl,(%eax)
   1896f:	eb 42                	jmp    189b3 <bitmap_set_bit+0xe2>
        } else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   18971:	8b 45 08             	mov    0x8(%ebp),%eax
   18974:	8b 48 04             	mov    0x4(%eax),%ecx
   18977:	8b 45 0c             	mov    0xc(%ebp),%eax
   1897a:	8d 50 07             	lea    0x7(%eax),%edx
   1897d:	85 c0                	test   %eax,%eax
   1897f:	0f 48 c2             	cmovs  %edx,%eax
   18982:	c1 f8 03             	sar    $0x3,%eax
   18985:	89 c2                	mov    %eax,%edx
   18987:	89 d0                	mov    %edx,%eax
   18989:	01 c8                	add    %ecx,%eax
   1898b:	0f b6 00             	movzbl (%eax),%eax
   1898e:	89 c6                	mov    %eax,%esi
   18990:	8b 45 0c             	mov    0xc(%ebp),%eax
   18993:	83 e0 07             	and    $0x7,%eax
   18996:	bb 01 00 00 00       	mov    $0x1,%ebx
   1899b:	89 c1                	mov    %eax,%ecx
   1899d:	d3 e3                	shl    %cl,%ebx
   1899f:	89 d8                	mov    %ebx,%eax
   189a1:	f7 d0                	not    %eax
   189a3:	89 f1                	mov    %esi,%ecx
   189a5:	21 c1                	and    %eax,%ecx
   189a7:	8b 45 08             	mov    0x8(%ebp),%eax
   189aa:	8b 40 04             	mov    0x4(%eax),%eax
   189ad:	01 d0                	add    %edx,%eax
   189af:	89 ca                	mov    %ecx,%edx
   189b1:	88 10                	mov    %dl,(%eax)
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   189b3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   189b7:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   189bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   189be:	3b 45 10             	cmp    0x10(%ebp),%eax
   189c1:	7d 0e                	jge    189d1 <bitmap_set_bit+0x100>
   189c3:	8b 45 08             	mov    0x8(%ebp),%eax
   189c6:	8b 00                	mov    (%eax),%eax
   189c8:	39 45 0c             	cmp    %eax,0xc(%ebp)
   189cb:	0f 8c 58 ff ff ff    	jl     18929 <bitmap_set_bit+0x58>
        }
    }
}
   189d1:	90                   	nop
   189d2:	8d 65 f8             	lea    -0x8(%ebp),%esp
   189d5:	5b                   	pop    %ebx
   189d6:	5e                   	pop    %esi
   189d7:	5d                   	pop    %ebp
   189d8:	c3                   	ret    

000189d9 <bitmap_is_set>:
 * 
 * @param bitmap 
 * @param index 
 * @return int 
 */
int bitmap_is_set(bitmap_t *bitmap, int index) {
   189d9:	55                   	push   %ebp
   189da:	89 e5                	mov    %esp,%ebp
   189dc:	83 ec 08             	sub    $0x8,%esp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   189df:	83 ec 08             	sub    $0x8,%esp
   189e2:	ff 75 0c             	push   0xc(%ebp)
   189e5:	ff 75 08             	push   0x8(%ebp)
   189e8:	e8 6c fe ff ff       	call   18859 <bitmap_get_bit>
   189ed:	83 c4 10             	add    $0x10,%esp
   189f0:	84 c0                	test   %al,%al
   189f2:	0f 95 c0             	setne  %al
   189f5:	0f b6 c0             	movzbl %al,%eax
}
   189f8:	c9                   	leave  
   189f9:	c3                   	ret    

000189fa <bitmap_alloc_nbits>:
 * @param bitmap 
 * @param bit 当某一位的值为bit时表示该位空闲，可供分配
 * @param count 
 * @return int 
 */
int bitmap_alloc_nbits(bitmap_t *bitmap, int bit, int count) {
   189fa:	55                   	push   %ebp
   189fb:	89 e5                	mov    %esp,%ebp
   189fd:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   18a00:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   18a04:	75 19                	jne    18a1f <bitmap_alloc_nbits+0x25>
   18a06:	68 2c ad 01 00       	push   $0x1ad2c
   18a0b:	68 ec ad 01 00       	push   $0x1adec
   18a10:	6a 68                	push   $0x68
   18a12:	68 44 ad 01 00       	push   $0x1ad44
   18a17:	e8 5d fd ff ff       	call   18779 <pannic>
   18a1c:	83 c4 10             	add    $0x10,%esp
    ASSERT(count >= 0);
   18a1f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   18a23:	79 19                	jns    18a3e <bitmap_alloc_nbits+0x44>
   18a25:	68 b4 ad 01 00       	push   $0x1adb4
   18a2a:	68 ec ad 01 00       	push   $0x1adec
   18a2f:	6a 69                	push   $0x69
   18a31:	68 44 ad 01 00       	push   $0x1ad44
   18a36:	e8 3e fd ff ff       	call   18779 <pannic>
   18a3b:	83 c4 10             	add    $0x10,%esp

    int search_index = 0;
   18a3e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    int ok_index = -1;
   18a45:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
    while (search_index < bitmap->bit_count) {
   18a4c:	e9 95 00 00 00       	jmp    18ae6 <bitmap_alloc_nbits+0xec>
        //确定可分配空间的起始索引
        if (bitmap_get_bit(bitmap, search_index) != bit) {
   18a51:	83 ec 08             	sub    $0x8,%esp
   18a54:	ff 75 f4             	push   -0xc(%ebp)
   18a57:	ff 75 08             	push   0x8(%ebp)
   18a5a:	e8 fa fd ff ff       	call   18859 <bitmap_get_bit>
   18a5f:	83 c4 10             	add    $0x10,%esp
   18a62:	0f b6 c0             	movzbl %al,%eax
   18a65:	39 45 0c             	cmp    %eax,0xc(%ebp)
   18a68:	74 06                	je     18a70 <bitmap_alloc_nbits+0x76>
            search_index++;
   18a6a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
            continue;
   18a6e:	eb 76                	jmp    18ae6 <bitmap_alloc_nbits+0xec>
        }

        //记录可分配空间的起始索引
        ok_index = search_index++;
   18a70:	8b 45 f4             	mov    -0xc(%ebp),%eax
   18a73:	8d 50 01             	lea    0x1(%eax),%edx
   18a76:	89 55 f4             	mov    %edx,-0xc(%ebp)
   18a79:	89 45 f0             	mov    %eax,-0x10(%ebp)

        //判断该空间是否大小满足要求
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   18a7c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
   18a83:	eb 2d                	jmp    18ab2 <bitmap_alloc_nbits+0xb8>
            //空间大小不满足要求, 分配失败
            if (bitmap_get_bit(bitmap, search_index++) != bit) {
   18a85:	8b 45 f4             	mov    -0xc(%ebp),%eax
   18a88:	8d 50 01             	lea    0x1(%eax),%edx
   18a8b:	89 55 f4             	mov    %edx,-0xc(%ebp)
   18a8e:	83 ec 08             	sub    $0x8,%esp
   18a91:	50                   	push   %eax
   18a92:	ff 75 08             	push   0x8(%ebp)
   18a95:	e8 bf fd ff ff       	call   18859 <bitmap_get_bit>
   18a9a:	83 c4 10             	add    $0x10,%esp
   18a9d:	0f b6 c0             	movzbl %al,%eax
   18aa0:	39 45 0c             	cmp    %eax,0xc(%ebp)
   18aa3:	74 09                	je     18aae <bitmap_alloc_nbits+0xb4>
                ok_index = -1;
   18aa5:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
                break;
   18aac:	eb 16                	jmp    18ac4 <bitmap_alloc_nbits+0xca>
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   18aae:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   18ab2:	8b 45 ec             	mov    -0x14(%ebp),%eax
   18ab5:	3b 45 10             	cmp    0x10(%ebp),%eax
   18ab8:	7d 0a                	jge    18ac4 <bitmap_alloc_nbits+0xca>
   18aba:	8b 45 08             	mov    0x8(%ebp),%eax
   18abd:	8b 00                	mov    (%eax),%eax
   18abf:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   18ac2:	7c c1                	jl     18a85 <bitmap_alloc_nbits+0x8b>
            }
        }

        if (ok_index != -1) {//分配成功
   18ac4:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
   18ac8:	74 1c                	je     18ae6 <bitmap_alloc_nbits+0xec>
            //将该片空间标记为已分配状态, 并返回起始索引
            bitmap_set_bit(bitmap, ok_index, count, ~bit);
   18aca:	8b 45 0c             	mov    0xc(%ebp),%eax
   18acd:	f7 d0                	not    %eax
   18acf:	50                   	push   %eax
   18ad0:	ff 75 10             	push   0x10(%ebp)
   18ad3:	ff 75 f0             	push   -0x10(%ebp)
   18ad6:	ff 75 08             	push   0x8(%ebp)
   18ad9:	e8 f3 fd ff ff       	call   188d1 <bitmap_set_bit>
   18ade:	83 c4 10             	add    $0x10,%esp
            return ok_index;
   18ae1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   18ae4:	eb 13                	jmp    18af9 <bitmap_alloc_nbits+0xff>
    while (search_index < bitmap->bit_count) {
   18ae6:	8b 45 08             	mov    0x8(%ebp),%eax
   18ae9:	8b 00                	mov    (%eax),%eax
   18aeb:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   18aee:	0f 8c 5d ff ff ff    	jl     18a51 <bitmap_alloc_nbits+0x57>
        }
    }
    
    //遍历完整个位图也没有满足要求的空间则返回-1
    return -1;
   18af4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

   18af9:	c9                   	leave  
   18afa:	c3                   	ret    

00018afb <kernel_strcpy>:
 * @brief  拷贝字符串
 *
 * @param dest 目标字符串
 * @param src  源字符串
 */
void kernel_strcpy(char *dest, const char *src) {
   18afb:	55                   	push   %ebp
   18afc:	89 e5                	mov    %esp,%ebp
  // 1.判断是否为NULL
  if (!dest || !src) return;
   18afe:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   18b02:	74 3b                	je     18b3f <kernel_strcpy+0x44>
   18b04:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   18b08:	74 35                	je     18b3f <kernel_strcpy+0x44>

  // 2.拷贝 src '\0' 以前的部分到 dest中
  // TODO:完成（访问未初始化的内存）的异常中断后就只判断src是否读到'\0'
  while (*dest && *src) {
   18b0a:	eb 17                	jmp    18b23 <kernel_strcpy+0x28>
    *(dest++) = *(src++);
   18b0c:	8b 55 0c             	mov    0xc(%ebp),%edx
   18b0f:	8d 42 01             	lea    0x1(%edx),%eax
   18b12:	89 45 0c             	mov    %eax,0xc(%ebp)
   18b15:	8b 45 08             	mov    0x8(%ebp),%eax
   18b18:	8d 48 01             	lea    0x1(%eax),%ecx
   18b1b:	89 4d 08             	mov    %ecx,0x8(%ebp)
   18b1e:	0f b6 12             	movzbl (%edx),%edx
   18b21:	88 10                	mov    %dl,(%eax)
  while (*dest && *src) {
   18b23:	8b 45 08             	mov    0x8(%ebp),%eax
   18b26:	0f b6 00             	movzbl (%eax),%eax
   18b29:	84 c0                	test   %al,%al
   18b2b:	74 0a                	je     18b37 <kernel_strcpy+0x3c>
   18b2d:	8b 45 0c             	mov    0xc(%ebp),%eax
   18b30:	0f b6 00             	movzbl (%eax),%eax
   18b33:	84 c0                	test   %al,%al
   18b35:	75 d5                	jne    18b0c <kernel_strcpy+0x11>
  }

  // 3.添加结束符
  *dest = '\0';
   18b37:	8b 45 08             	mov    0x8(%ebp),%eax
   18b3a:	c6 00 00             	movb   $0x0,(%eax)
   18b3d:	eb 01                	jmp    18b40 <kernel_strcpy+0x45>
  if (!dest || !src) return;
   18b3f:	90                   	nop
}
   18b40:	5d                   	pop    %ebp
   18b41:	c3                   	ret    

00018b42 <kernel_strncpy>:
 *
 * @param dest 目的字符串
 * @param src 源字符串
 * @param size 拷贝字符串的长度，包含'\0'
 */
void kernel_strncpy(char *dest, const char *src, int size) {
   18b42:	55                   	push   %ebp
   18b43:	89 e5                	mov    %esp,%ebp
  // 1.判断是否需要拷贝
  if (!dest || !src || !size) return;
   18b45:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   18b49:	74 45                	je     18b90 <kernel_strncpy+0x4e>
   18b4b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   18b4f:	74 3f                	je     18b90 <kernel_strncpy+0x4e>
   18b51:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   18b55:	74 39                	je     18b90 <kernel_strncpy+0x4e>

  // 2.size的大小包含了'\0'，所以要预留一个空间给'\0'，只能拷贝 size - 1个字符
  while ((size-- > 1) && (*src)) {
   18b57:	eb 17                	jmp    18b70 <kernel_strncpy+0x2e>
    *(dest++) = *(src++);
   18b59:	8b 55 0c             	mov    0xc(%ebp),%edx
   18b5c:	8d 42 01             	lea    0x1(%edx),%eax
   18b5f:	89 45 0c             	mov    %eax,0xc(%ebp)
   18b62:	8b 45 08             	mov    0x8(%ebp),%eax
   18b65:	8d 48 01             	lea    0x1(%eax),%ecx
   18b68:	89 4d 08             	mov    %ecx,0x8(%ebp)
   18b6b:	0f b6 12             	movzbl (%edx),%edx
   18b6e:	88 10                	mov    %dl,(%eax)
  while ((size-- > 1) && (*src)) {
   18b70:	8b 45 10             	mov    0x10(%ebp),%eax
   18b73:	8d 50 ff             	lea    -0x1(%eax),%edx
   18b76:	89 55 10             	mov    %edx,0x10(%ebp)
   18b79:	83 f8 01             	cmp    $0x1,%eax
   18b7c:	7e 0a                	jle    18b88 <kernel_strncpy+0x46>
   18b7e:	8b 45 0c             	mov    0xc(%ebp),%eax
   18b81:	0f b6 00             	movzbl (%eax),%eax
   18b84:	84 c0                	test   %al,%al
   18b86:	75 d1                	jne    18b59 <kernel_strncpy+0x17>
  }

  // 3.添加结束符
  *dest = '\0';
   18b88:	8b 45 08             	mov    0x8(%ebp),%eax
   18b8b:	c6 00 00             	movb   $0x0,(%eax)
   18b8e:	eb 01                	jmp    18b91 <kernel_strncpy+0x4f>
  if (!dest || !src || !size) return;
   18b90:	90                   	nop
}
   18b91:	5d                   	pop    %ebp
   18b92:	c3                   	ret    

00018b93 <kernel_strncmp>:
 * @param s2 字符串2
 * @param size 比较前比较的子串长度，从下标0开始到(size - 1)
 *
 * @return int ==: 0, > : 1, < : -1
 */
int kernel_strncmp(const char *s1, const char *s2, int size) {
   18b93:	55                   	push   %ebp
   18b94:	89 e5                	mov    %esp,%ebp
  if (!s1 || !s2) return 0;
   18b96:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   18b9a:	74 06                	je     18ba2 <kernel_strncmp+0xf>
   18b9c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   18ba0:	75 0f                	jne    18bb1 <kernel_strncmp+0x1e>
   18ba2:	b8 00 00 00 00       	mov    $0x0,%eax
   18ba7:	eb 69                	jmp    18c12 <kernel_strncmp+0x7f>

  while (*s1 && *s2 && --size && *s1 == *s2) {
    ++s1;
   18ba9:	83 45 08 01          	addl   $0x1,0x8(%ebp)
    ++s2;
   18bad:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
  while (*s1 && *s2 && --size && *s1 == *s2) {
   18bb1:	8b 45 08             	mov    0x8(%ebp),%eax
   18bb4:	0f b6 00             	movzbl (%eax),%eax
   18bb7:	84 c0                	test   %al,%al
   18bb9:	74 24                	je     18bdf <kernel_strncmp+0x4c>
   18bbb:	8b 45 0c             	mov    0xc(%ebp),%eax
   18bbe:	0f b6 00             	movzbl (%eax),%eax
   18bc1:	84 c0                	test   %al,%al
   18bc3:	74 1a                	je     18bdf <kernel_strncmp+0x4c>
   18bc5:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   18bc9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   18bcd:	74 10                	je     18bdf <kernel_strncmp+0x4c>
   18bcf:	8b 45 08             	mov    0x8(%ebp),%eax
   18bd2:	0f b6 10             	movzbl (%eax),%edx
   18bd5:	8b 45 0c             	mov    0xc(%ebp),%eax
   18bd8:	0f b6 00             	movzbl (%eax),%eax
   18bdb:	38 c2                	cmp    %al,%dl
   18bdd:	74 ca                	je     18ba9 <kernel_strncmp+0x16>
  }

  if (*s1 > *s2) {
   18bdf:	8b 45 08             	mov    0x8(%ebp),%eax
   18be2:	0f b6 10             	movzbl (%eax),%edx
   18be5:	8b 45 0c             	mov    0xc(%ebp),%eax
   18be8:	0f b6 00             	movzbl (%eax),%eax
   18beb:	38 c2                	cmp    %al,%dl
   18bed:	7e 07                	jle    18bf6 <kernel_strncmp+0x63>
    return 1;
   18bef:	b8 01 00 00 00       	mov    $0x1,%eax
   18bf4:	eb 1c                	jmp    18c12 <kernel_strncmp+0x7f>
  } else if (*s1 < *s2) {
   18bf6:	8b 45 08             	mov    0x8(%ebp),%eax
   18bf9:	0f b6 10             	movzbl (%eax),%edx
   18bfc:	8b 45 0c             	mov    0xc(%ebp),%eax
   18bff:	0f b6 00             	movzbl (%eax),%eax
   18c02:	38 c2                	cmp    %al,%dl
   18c04:	7d 07                	jge    18c0d <kernel_strncmp+0x7a>
    return -1;
   18c06:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   18c0b:	eb 05                	jmp    18c12 <kernel_strncmp+0x7f>
  } else {
    return 0;
   18c0d:	b8 00 00 00 00       	mov    $0x0,%eax
  }
}
   18c12:	5d                   	pop    %ebp
   18c13:	c3                   	ret    

00018c14 <kernel_strlen>:
 * @brief  获取字符串str的长度, 不含'\0'
 *
 * @param str
 * @return int
 */
int kernel_strlen(const char *str) {
   18c14:	55                   	push   %ebp
   18c15:	89 e5                	mov    %esp,%ebp
   18c17:	83 ec 10             	sub    $0x10,%esp
  if (!str) return 0;
   18c1a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   18c1e:	75 07                	jne    18c27 <kernel_strlen+0x13>
   18c20:	b8 00 00 00 00       	mov    $0x0,%eax
   18c25:	eb 20                	jmp    18c47 <kernel_strlen+0x33>

  int len = 0;
   18c27:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  while (*(str++)) len++;
   18c2e:	eb 04                	jmp    18c34 <kernel_strlen+0x20>
   18c30:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   18c34:	8b 45 08             	mov    0x8(%ebp),%eax
   18c37:	8d 50 01             	lea    0x1(%eax),%edx
   18c3a:	89 55 08             	mov    %edx,0x8(%ebp)
   18c3d:	0f b6 00             	movzbl (%eax),%eax
   18c40:	84 c0                	test   %al,%al
   18c42:	75 ec                	jne    18c30 <kernel_strlen+0x1c>

  return len;
   18c44:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   18c47:	c9                   	leave  
   18c48:	c3                   	ret    

00018c49 <kernel_memcpy>:
 *
 * @param dest 目的内存的起始地址
 * @param src 原内存的起始地址
 * @param size 复制的内存字节大小
 */
void kernel_memcpy(void *dest, const void *src, int size) {
   18c49:	55                   	push   %ebp
   18c4a:	89 e5                	mov    %esp,%ebp
   18c4c:	83 ec 10             	sub    $0x10,%esp
  if (!dest || !src || !size) return;
   18c4f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   18c53:	74 40                	je     18c95 <kernel_memcpy+0x4c>
   18c55:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   18c59:	74 3a                	je     18c95 <kernel_memcpy+0x4c>
   18c5b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   18c5f:	74 34                	je     18c95 <kernel_memcpy+0x4c>

  uint8_t *d = (uint8_t *)dest;
   18c61:	8b 45 08             	mov    0x8(%ebp),%eax
   18c64:	89 45 fc             	mov    %eax,-0x4(%ebp)
  uint8_t *s = (uint8_t *)src;
   18c67:	8b 45 0c             	mov    0xc(%ebp),%eax
   18c6a:	89 45 f8             	mov    %eax,-0x8(%ebp)

  while (size--) {
   18c6d:	eb 17                	jmp    18c86 <kernel_memcpy+0x3d>
    *(d++) = *(s++);
   18c6f:	8b 55 f8             	mov    -0x8(%ebp),%edx
   18c72:	8d 42 01             	lea    0x1(%edx),%eax
   18c75:	89 45 f8             	mov    %eax,-0x8(%ebp)
   18c78:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18c7b:	8d 48 01             	lea    0x1(%eax),%ecx
   18c7e:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   18c81:	0f b6 12             	movzbl (%edx),%edx
   18c84:	88 10                	mov    %dl,(%eax)
  while (size--) {
   18c86:	8b 45 10             	mov    0x10(%ebp),%eax
   18c89:	8d 50 ff             	lea    -0x1(%eax),%edx
   18c8c:	89 55 10             	mov    %edx,0x10(%ebp)
   18c8f:	85 c0                	test   %eax,%eax
   18c91:	75 dc                	jne    18c6f <kernel_memcpy+0x26>
   18c93:	eb 01                	jmp    18c96 <kernel_memcpy+0x4d>
  if (!dest || !src || !size) return;
   18c95:	90                   	nop
  }
}
   18c96:	c9                   	leave  
   18c97:	c3                   	ret    

00018c98 <kernel_memset>:
 *
 * @param dest 区域起始地址
 * @param v 每个字节的值
 * @param size 赋值的内存的大小
 */
void kernel_memset(void *dest, uint8_t v, int size) {
   18c98:	55                   	push   %ebp
   18c99:	89 e5                	mov    %esp,%ebp
   18c9b:	83 ec 14             	sub    $0x14,%esp
   18c9e:	8b 45 0c             	mov    0xc(%ebp),%eax
   18ca1:	88 45 ec             	mov    %al,-0x14(%ebp)
  if (!dest || !size) return;
   18ca4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   18ca8:	74 2c                	je     18cd6 <kernel_memset+0x3e>
   18caa:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   18cae:	74 26                	je     18cd6 <kernel_memset+0x3e>

  uint8_t *d = (uint8_t *)dest;
   18cb0:	8b 45 08             	mov    0x8(%ebp),%eax
   18cb3:	89 45 fc             	mov    %eax,-0x4(%ebp)

  while (size--) {
   18cb6:	eb 0f                	jmp    18cc7 <kernel_memset+0x2f>
    *(d++) = v;
   18cb8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18cbb:	8d 50 01             	lea    0x1(%eax),%edx
   18cbe:	89 55 fc             	mov    %edx,-0x4(%ebp)
   18cc1:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   18cc5:	88 10                	mov    %dl,(%eax)
  while (size--) {
   18cc7:	8b 45 10             	mov    0x10(%ebp),%eax
   18cca:	8d 50 ff             	lea    -0x1(%eax),%edx
   18ccd:	89 55 10             	mov    %edx,0x10(%ebp)
   18cd0:	85 c0                	test   %eax,%eax
   18cd2:	75 e4                	jne    18cb8 <kernel_memset+0x20>
   18cd4:	eb 01                	jmp    18cd7 <kernel_memset+0x3f>
  if (!dest || !size) return;
   18cd6:	90                   	nop
  }
}
   18cd7:	c9                   	leave  
   18cd8:	c3                   	ret    

00018cd9 <kernel_memcmp>:
 * @param d1 区域1的起始地址
 * @param d2 区域2的起始地址
 * @param size 比较的字节数量
 * @return int ==:0, >:1, <:-1
 */
int kernel_memcmp(const void *dest1, const void *dest2, int size) {
   18cd9:	55                   	push   %ebp
   18cda:	89 e5                	mov    %esp,%ebp
   18cdc:	83 ec 10             	sub    $0x10,%esp
  if (!dest1 || !dest2 || !size) return 0;
   18cdf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   18ce3:	74 0c                	je     18cf1 <kernel_memcmp+0x18>
   18ce5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   18ce9:	74 06                	je     18cf1 <kernel_memcmp+0x18>
   18ceb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   18cef:	75 07                	jne    18cf8 <kernel_memcmp+0x1f>
   18cf1:	b8 00 00 00 00       	mov    $0x0,%eax
   18cf6:	eb 63                	jmp    18d5b <kernel_memcmp+0x82>

  uint8_t *d1 = (uint8_t *)dest1;
   18cf8:	8b 45 08             	mov    0x8(%ebp),%eax
   18cfb:	89 45 fc             	mov    %eax,-0x4(%ebp)
  uint8_t *d2 = (uint8_t *)dest2;
   18cfe:	8b 45 0c             	mov    0xc(%ebp),%eax
   18d01:	89 45 f8             	mov    %eax,-0x8(%ebp)

  while (--size && *d1 == *d2) {
   18d04:	eb 08                	jmp    18d0e <kernel_memcmp+0x35>
    d1++;
   18d06:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    d2++;
   18d0a:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  while (--size && *d1 == *d2) {
   18d0e:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   18d12:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   18d16:	74 10                	je     18d28 <kernel_memcmp+0x4f>
   18d18:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18d1b:	0f b6 10             	movzbl (%eax),%edx
   18d1e:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18d21:	0f b6 00             	movzbl (%eax),%eax
   18d24:	38 c2                	cmp    %al,%dl
   18d26:	74 de                	je     18d06 <kernel_memcmp+0x2d>
  }

  if (*d1 > *d2)
   18d28:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18d2b:	0f b6 10             	movzbl (%eax),%edx
   18d2e:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18d31:	0f b6 00             	movzbl (%eax),%eax
   18d34:	38 c2                	cmp    %al,%dl
   18d36:	76 07                	jbe    18d3f <kernel_memcmp+0x66>
    return 1;
   18d38:	b8 01 00 00 00       	mov    $0x1,%eax
   18d3d:	eb 1c                	jmp    18d5b <kernel_memcmp+0x82>
  else if (*d1 < *d2)
   18d3f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18d42:	0f b6 10             	movzbl (%eax),%edx
   18d45:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18d48:	0f b6 00             	movzbl (%eax),%eax
   18d4b:	38 c2                	cmp    %al,%dl
   18d4d:	73 07                	jae    18d56 <kernel_memcmp+0x7d>
    return -1;
   18d4f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   18d54:	eb 05                	jmp    18d5b <kernel_memcmp+0x82>
  else
    return 0;
   18d56:	b8 00 00 00 00       	mov    $0x0,%eax
}
   18d5b:	c9                   	leave  
   18d5c:	c3                   	ret    

00018d5d <kernel_sprintf>:

void kernel_sprintf(char *buf, const char *formate, ...) {
   18d5d:	55                   	push   %ebp
   18d5e:	89 e5                	mov    %esp,%ebp
   18d60:	83 ec 18             	sub    $0x18,%esp
  // 获取可变参数并将其格式化到缓冲区中
  va_list args;
  va_start(args, formate);
   18d63:	8d 45 10             	lea    0x10(%ebp),%eax
   18d66:	89 45 f4             	mov    %eax,-0xc(%ebp)
  kernel_vsprintf(buf, formate, args);
   18d69:	8b 45 f4             	mov    -0xc(%ebp),%eax
   18d6c:	83 ec 04             	sub    $0x4,%esp
   18d6f:	50                   	push   %eax
   18d70:	ff 75 0c             	push   0xc(%ebp)
   18d73:	ff 75 08             	push   0x8(%ebp)
   18d76:	e8 06 00 00 00       	call   18d81 <kernel_vsprintf>
   18d7b:	83 c4 10             	add    $0x10,%esp
  va_end(args);
}
   18d7e:	90                   	nop
   18d7f:	c9                   	leave  
   18d80:	c3                   	ret    

00018d81 <kernel_vsprintf>:
 *
 * @param buf
 * @param formate
 * @param args
 */
void kernel_vsprintf(char *buf, const char *formate, va_list args) {
   18d81:	55                   	push   %ebp
   18d82:	89 e5                	mov    %esp,%ebp
   18d84:	83 ec 28             	sub    $0x28,%esp
  // 定义状态机，包含两种状态
  enum { NORMAL, READ_FMT } state = NORMAL;
   18d87:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  char *curr = buf;
   18d8e:	8b 45 08             	mov    0x8(%ebp),%eax
   18d91:	89 45 f0             	mov    %eax,-0x10(%ebp)

  char ch;

  while ((ch = *(formate++)) != '\0') {
   18d94:	e9 68 01 00 00       	jmp    18f01 <kernel_vsprintf+0x180>
    switch (state) {
   18d99:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   18d9d:	74 0b                	je     18daa <kernel_vsprintf+0x29>
   18d9f:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   18da3:	74 2b                	je     18dd0 <kernel_vsprintf+0x4f>
   18da5:	e9 56 01 00 00       	jmp    18f00 <kernel_vsprintf+0x17f>
      case NORMAL:
        if (ch == '%')
   18daa:	80 7d e7 25          	cmpb   $0x25,-0x19(%ebp)
   18dae:	75 0c                	jne    18dbc <kernel_vsprintf+0x3b>
          state = READ_FMT;
   18db0:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   18db7:	e9 45 01 00 00       	jmp    18f01 <kernel_vsprintf+0x180>
        else
          *(curr++) = ch;
   18dbc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   18dbf:	8d 50 01             	lea    0x1(%eax),%edx
   18dc2:	89 55 f0             	mov    %edx,-0x10(%ebp)
   18dc5:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   18dc9:	88 10                	mov    %dl,(%eax)
        break;
   18dcb:	e9 31 01 00 00       	jmp    18f01 <kernel_vsprintf+0x180>
      case READ_FMT:
        if (ch == 's') {
   18dd0:	80 7d e7 73          	cmpb   $0x73,-0x19(%ebp)
   18dd4:	75 47                	jne    18e1d <kernel_vsprintf+0x9c>
          const char *str = va_arg(args, char *);
   18dd6:	8b 45 10             	mov    0x10(%ebp),%eax
   18dd9:	8d 50 04             	lea    0x4(%eax),%edx
   18ddc:	89 55 10             	mov    %edx,0x10(%ebp)
   18ddf:	8b 00                	mov    (%eax),%eax
   18de1:	89 45 ec             	mov    %eax,-0x14(%ebp)
          int len = kernel_strlen(str);
   18de4:	ff 75 ec             	push   -0x14(%ebp)
   18de7:	e8 28 fe ff ff       	call   18c14 <kernel_strlen>
   18dec:	83 c4 04             	add    $0x4,%esp
   18def:	89 45 e8             	mov    %eax,-0x18(%ebp)
          while (len--) {
   18df2:	eb 17                	jmp    18e0b <kernel_vsprintf+0x8a>
            *(curr++) = *(str++);
   18df4:	8b 55 ec             	mov    -0x14(%ebp),%edx
   18df7:	8d 42 01             	lea    0x1(%edx),%eax
   18dfa:	89 45 ec             	mov    %eax,-0x14(%ebp)
   18dfd:	8b 45 f0             	mov    -0x10(%ebp),%eax
   18e00:	8d 48 01             	lea    0x1(%eax),%ecx
   18e03:	89 4d f0             	mov    %ecx,-0x10(%ebp)
   18e06:	0f b6 12             	movzbl (%edx),%edx
   18e09:	88 10                	mov    %dl,(%eax)
          while (len--) {
   18e0b:	8b 45 e8             	mov    -0x18(%ebp),%eax
   18e0e:	8d 50 ff             	lea    -0x1(%eax),%edx
   18e11:	89 55 e8             	mov    %edx,-0x18(%ebp)
   18e14:	85 c0                	test   %eax,%eax
   18e16:	75 dc                	jne    18df4 <kernel_vsprintf+0x73>
   18e18:	e9 da 00 00 00       	jmp    18ef7 <kernel_vsprintf+0x176>
          }
        } else if (ch == 'd') {
   18e1d:	80 7d e7 64          	cmpb   $0x64,-0x19(%ebp)
   18e21:	75 37                	jne    18e5a <kernel_vsprintf+0xd9>
          const int num = va_arg(args, int);
   18e23:	8b 45 10             	mov    0x10(%ebp),%eax
   18e26:	8d 50 04             	lea    0x4(%eax),%edx
   18e29:	89 55 10             	mov    %edx,0x10(%ebp)
   18e2c:	8b 00                	mov    (%eax),%eax
   18e2e:	89 45 d8             	mov    %eax,-0x28(%ebp)
          kernel_itoa(curr, num, 10);
   18e31:	83 ec 04             	sub    $0x4,%esp
   18e34:	6a 0a                	push   $0xa
   18e36:	ff 75 d8             	push   -0x28(%ebp)
   18e39:	ff 75 f0             	push   -0x10(%ebp)
   18e3c:	e8 dd 00 00 00       	call   18f1e <kernel_itoa>
   18e41:	83 c4 10             	add    $0x10,%esp
          curr += kernel_strlen(curr);
   18e44:	83 ec 0c             	sub    $0xc,%esp
   18e47:	ff 75 f0             	push   -0x10(%ebp)
   18e4a:	e8 c5 fd ff ff       	call   18c14 <kernel_strlen>
   18e4f:	83 c4 10             	add    $0x10,%esp
   18e52:	01 45 f0             	add    %eax,-0x10(%ebp)
   18e55:	e9 9d 00 00 00       	jmp    18ef7 <kernel_vsprintf+0x176>
        } else if (ch == 'x' || ch == 'X') {
   18e5a:	80 7d e7 78          	cmpb   $0x78,-0x19(%ebp)
   18e5e:	74 06                	je     18e66 <kernel_vsprintf+0xe5>
   18e60:	80 7d e7 58          	cmpb   $0x58,-0x19(%ebp)
   18e64:	75 34                	jne    18e9a <kernel_vsprintf+0x119>
          const int num = va_arg(args, int);
   18e66:	8b 45 10             	mov    0x10(%ebp),%eax
   18e69:	8d 50 04             	lea    0x4(%eax),%edx
   18e6c:	89 55 10             	mov    %edx,0x10(%ebp)
   18e6f:	8b 00                	mov    (%eax),%eax
   18e71:	89 45 dc             	mov    %eax,-0x24(%ebp)
          kernel_itoa(curr, num, 16);
   18e74:	83 ec 04             	sub    $0x4,%esp
   18e77:	6a 10                	push   $0x10
   18e79:	ff 75 dc             	push   -0x24(%ebp)
   18e7c:	ff 75 f0             	push   -0x10(%ebp)
   18e7f:	e8 9a 00 00 00       	call   18f1e <kernel_itoa>
   18e84:	83 c4 10             	add    $0x10,%esp
          curr += kernel_strlen(curr);
   18e87:	83 ec 0c             	sub    $0xc,%esp
   18e8a:	ff 75 f0             	push   -0x10(%ebp)
   18e8d:	e8 82 fd ff ff       	call   18c14 <kernel_strlen>
   18e92:	83 c4 10             	add    $0x10,%esp
   18e95:	01 45 f0             	add    %eax,-0x10(%ebp)
        } else if (ch == 'x' || ch == 'X') {
   18e98:	eb 5d                	jmp    18ef7 <kernel_vsprintf+0x176>
        } else if (ch == 'b') {
   18e9a:	80 7d e7 62          	cmpb   $0x62,-0x19(%ebp)
   18e9e:	75 34                	jne    18ed4 <kernel_vsprintf+0x153>
          const int num = va_arg(args, int);
   18ea0:	8b 45 10             	mov    0x10(%ebp),%eax
   18ea3:	8d 50 04             	lea    0x4(%eax),%edx
   18ea6:	89 55 10             	mov    %edx,0x10(%ebp)
   18ea9:	8b 00                	mov    (%eax),%eax
   18eab:	89 45 e0             	mov    %eax,-0x20(%ebp)
          kernel_itoa(curr, num, 2);
   18eae:	83 ec 04             	sub    $0x4,%esp
   18eb1:	6a 02                	push   $0x2
   18eb3:	ff 75 e0             	push   -0x20(%ebp)
   18eb6:	ff 75 f0             	push   -0x10(%ebp)
   18eb9:	e8 60 00 00 00       	call   18f1e <kernel_itoa>
   18ebe:	83 c4 10             	add    $0x10,%esp
          curr += kernel_strlen(curr);
   18ec1:	83 ec 0c             	sub    $0xc,%esp
   18ec4:	ff 75 f0             	push   -0x10(%ebp)
   18ec7:	e8 48 fd ff ff       	call   18c14 <kernel_strlen>
   18ecc:	83 c4 10             	add    $0x10,%esp
   18ecf:	01 45 f0             	add    %eax,-0x10(%ebp)
   18ed2:	eb 23                	jmp    18ef7 <kernel_vsprintf+0x176>
        } else if (ch == 'c') {
   18ed4:	80 7d e7 63          	cmpb   $0x63,-0x19(%ebp)
   18ed8:	75 1d                	jne    18ef7 <kernel_vsprintf+0x176>
          char c = va_arg(args, int);
   18eda:	8b 45 10             	mov    0x10(%ebp),%eax
   18edd:	8d 50 04             	lea    0x4(%eax),%edx
   18ee0:	89 55 10             	mov    %edx,0x10(%ebp)
   18ee3:	8b 00                	mov    (%eax),%eax
   18ee5:	88 45 e6             	mov    %al,-0x1a(%ebp)
          *(curr++) = c;
   18ee8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   18eeb:	8d 50 01             	lea    0x1(%eax),%edx
   18eee:	89 55 f0             	mov    %edx,-0x10(%ebp)
   18ef1:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   18ef5:	88 10                	mov    %dl,(%eax)
        }
        state = NORMAL;
   18ef7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        break;
   18efe:	eb 01                	jmp    18f01 <kernel_vsprintf+0x180>
      default:
        break;
   18f00:	90                   	nop
  while ((ch = *(formate++)) != '\0') {
   18f01:	8b 45 0c             	mov    0xc(%ebp),%eax
   18f04:	8d 50 01             	lea    0x1(%eax),%edx
   18f07:	89 55 0c             	mov    %edx,0xc(%ebp)
   18f0a:	0f b6 00             	movzbl (%eax),%eax
   18f0d:	88 45 e7             	mov    %al,-0x19(%ebp)
   18f10:	80 7d e7 00          	cmpb   $0x0,-0x19(%ebp)
   18f14:	0f 85 7f fe ff ff    	jne    18d99 <kernel_vsprintf+0x18>
    }
  }
}
   18f1a:	90                   	nop
   18f1b:	90                   	nop
   18f1c:	c9                   	leave  
   18f1d:	c3                   	ret    

00018f1e <kernel_itoa>:
 *
 * @param buf 缓冲区
 * @param num 整数
 * @param base 转换的进制规则
 */
void kernel_itoa(char *buf, int num, int base) {
   18f1e:	55                   	push   %ebp
   18f1f:	89 e5                	mov    %esp,%ebp
   18f21:	53                   	push   %ebx
   18f22:	81 ec 90 00 00 00    	sub    $0x90,%esp

  if (base != 2 && base != 8 && base != 10 && base != 16) {
   18f28:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   18f2c:	74 1d                	je     18f4b <kernel_itoa+0x2d>
   18f2e:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   18f32:	74 17                	je     18f4b <kernel_itoa+0x2d>
   18f34:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   18f38:	74 11                	je     18f4b <kernel_itoa+0x2d>
   18f3a:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   18f3e:	74 0b                	je     18f4b <kernel_itoa+0x2d>
    *buf = '\0';
   18f40:	8b 45 08             	mov    0x8(%ebp),%eax
   18f43:	c6 00 00             	movb   $0x0,(%eax)
    return;
   18f46:	e9 f8 00 00 00       	jmp    19043 <kernel_itoa+0x125>
  }

  if (num == 0) {
   18f4b:	8b 45 0c             	mov    0xc(%ebp),%eax
   18f4e:	85 c0                	test   %eax,%eax
   18f50:	75 17                	jne    18f69 <kernel_itoa+0x4b>
    *(buf++) = '0';
   18f52:	8b 45 08             	mov    0x8(%ebp),%eax
   18f55:	8d 50 01             	lea    0x1(%eax),%edx
   18f58:	89 55 08             	mov    %edx,0x8(%ebp)
   18f5b:	c6 00 30             	movb   $0x30,(%eax)
    *buf = '\0';
   18f5e:	8b 45 08             	mov    0x8(%ebp),%eax
   18f61:	c6 00 00             	movb   $0x0,(%eax)
    return;
   18f64:	e9 da 00 00 00       	jmp    19043 <kernel_itoa+0x125>
  }

  char *p = buf;
   18f69:	8b 45 08             	mov    0x8(%ebp),%eax
   18f6c:	89 45 f8             	mov    %eax,-0x8(%ebp)
  uint32_t u_num = 0;
   18f6f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  if (base == 10) {
   18f76:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   18f7a:	75 41                	jne    18fbd <kernel_itoa+0x9f>
    u_num = num;
   18f7c:	8b 45 0c             	mov    0xc(%ebp),%eax
   18f7f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (num < 0) {
   18f82:	8b 45 0c             	mov    0xc(%ebp),%eax
   18f85:	85 c0                	test   %eax,%eax
   18f87:	79 16                	jns    18f9f <kernel_itoa+0x81>
      *(p++) = '-';
   18f89:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18f8c:	8d 50 01             	lea    0x1(%eax),%edx
   18f8f:	89 55 f8             	mov    %edx,-0x8(%ebp)
   18f92:	c6 00 2d             	movb   $0x2d,(%eax)
      u_num = -1 * num;
   18f95:	8b 45 0c             	mov    0xc(%ebp),%eax
   18f98:	f7 d8                	neg    %eax
   18f9a:	89 45 f4             	mov    %eax,-0xc(%ebp)
   18f9d:	eb 26                	jmp    18fc5 <kernel_itoa+0xa7>
    } else if (num == 0) {
   18f9f:	8b 45 0c             	mov    0xc(%ebp),%eax
   18fa2:	85 c0                	test   %eax,%eax
   18fa4:	75 1f                	jne    18fc5 <kernel_itoa+0xa7>
      *(p++) = '0';
   18fa6:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18fa9:	8d 50 01             	lea    0x1(%eax),%edx
   18fac:	89 55 f8             	mov    %edx,-0x8(%ebp)
   18faf:	c6 00 30             	movb   $0x30,(%eax)
      *p = '\0';
   18fb2:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18fb5:	c6 00 00             	movb   $0x0,(%eax)
      return;
   18fb8:	e9 86 00 00 00       	jmp    19043 <kernel_itoa+0x125>
    }
  } else {
    u_num = *((uint32_t *)&num);
   18fbd:	8d 45 0c             	lea    0xc(%ebp),%eax
   18fc0:	8b 00                	mov    (%eax),%eax
   18fc2:	89 45 f4             	mov    %eax,-0xc(%ebp)
  }

  static const char *num_to_char = {"0123456789abcdef"};
  char arr[128];
  int len = 0;
   18fc5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  while (u_num > 0) {
   18fcc:	eb 3b                	jmp    19009 <kernel_itoa+0xeb>
    arr[len++] = num_to_char[u_num % base];
   18fce:	8b 1d 74 b1 01 00    	mov    0x1b174,%ebx
   18fd4:	8b 4d 10             	mov    0x10(%ebp),%ecx
   18fd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   18fda:	ba 00 00 00 00       	mov    $0x0,%edx
   18fdf:	f7 f1                	div    %ecx
   18fe1:	89 d0                	mov    %edx,%eax
   18fe3:	8d 0c 03             	lea    (%ebx,%eax,1),%ecx
   18fe6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   18fe9:	8d 50 01             	lea    0x1(%eax),%edx
   18fec:	89 55 f0             	mov    %edx,-0x10(%ebp)
   18fef:	0f b6 11             	movzbl (%ecx),%edx
   18ff2:	88 94 05 6c ff ff ff 	mov    %dl,-0x94(%ebp,%eax,1)
    u_num /= base;
   18ff9:	8b 5d 10             	mov    0x10(%ebp),%ebx
   18ffc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   18fff:	ba 00 00 00 00       	mov    $0x0,%edx
   19004:	f7 f3                	div    %ebx
   19006:	89 45 f4             	mov    %eax,-0xc(%ebp)
  while (u_num > 0) {
   19009:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1900d:	75 bf                	jne    18fce <kernel_itoa+0xb0>
  }

  for (int i = len - 1; i >= 0; --i) {
   1900f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   19012:	83 e8 01             	sub    $0x1,%eax
   19015:	89 45 ec             	mov    %eax,-0x14(%ebp)
   19018:	eb 1d                	jmp    19037 <kernel_itoa+0x119>
    *(p++) = arr[i];
   1901a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1901d:	8d 50 01             	lea    0x1(%eax),%edx
   19020:	89 55 f8             	mov    %edx,-0x8(%ebp)
   19023:	8d 8d 6c ff ff ff    	lea    -0x94(%ebp),%ecx
   19029:	8b 55 ec             	mov    -0x14(%ebp),%edx
   1902c:	01 ca                	add    %ecx,%edx
   1902e:	0f b6 12             	movzbl (%edx),%edx
   19031:	88 10                	mov    %dl,(%eax)
  for (int i = len - 1; i >= 0; --i) {
   19033:	83 6d ec 01          	subl   $0x1,-0x14(%ebp)
   19037:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1903b:	79 dd                	jns    1901a <kernel_itoa+0xfc>
  }
  *p = '\0';
   1903d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   19040:	c6 00 00             	movb   $0x0,(%eax)
}
   19043:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   19046:	c9                   	leave  
   19047:	c3                   	ret    

00019048 <strings_count>:
 * @brief 计算字符串数组str中字符串的个数
 *
 * @param str
 * @return int
 */
int strings_count(char *const *strs) {
   19048:	55                   	push   %ebp
   19049:	89 e5                	mov    %esp,%ebp
   1904b:	83 ec 10             	sub    $0x10,%esp
  int count = 0;
   1904e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  if (strs) {
   19055:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   19059:	74 15                	je     19070 <strings_count+0x28>
    while (*(strs++)) {
   1905b:	eb 04                	jmp    19061 <strings_count+0x19>
      count++;
   1905d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    while (*(strs++)) {
   19061:	8b 45 08             	mov    0x8(%ebp),%eax
   19064:	8d 50 04             	lea    0x4(%eax),%edx
   19067:	89 55 08             	mov    %edx,0x8(%ebp)
   1906a:	8b 00                	mov    (%eax),%eax
   1906c:	85 c0                	test   %eax,%eax
   1906e:	75 ed                	jne    1905d <strings_count+0x15>
    }
  }

  return count;
   19070:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   19073:	c9                   	leave  
   19074:	c3                   	ret    

00019075 <get_file_name>:
 * @brief 根据文件路径获取文件名
 *
 * @param path
 * @return char*
 */
const char *get_file_name(const char *path) {
   19075:	55                   	push   %ebp
   19076:	89 e5                	mov    %esp,%ebp
   19078:	83 ec 10             	sub    $0x10,%esp
  const char *s = path;
   1907b:	8b 45 08             	mov    0x8(%ebp),%eax
   1907e:	89 45 fc             	mov    %eax,-0x4(%ebp)
  while (*s != '\0') {
   19081:	eb 04                	jmp    19087 <get_file_name+0x12>
    s++;
   19083:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  while (*s != '\0') {
   19087:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1908a:	0f b6 00             	movzbl (%eax),%eax
   1908d:	84 c0                	test   %al,%al
   1908f:	75 f2                	jne    19083 <get_file_name+0xe>
  }

  while ((*s != '/') && (*s != '\\') && (s >= path)) {
   19091:	eb 04                	jmp    19097 <get_file_name+0x22>
    s--;
   19093:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
  while ((*s != '/') && (*s != '\\') && (s >= path)) {
   19097:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1909a:	0f b6 00             	movzbl (%eax),%eax
   1909d:	3c 2f                	cmp    $0x2f,%al
   1909f:	74 12                	je     190b3 <get_file_name+0x3e>
   190a1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   190a4:	0f b6 00             	movzbl (%eax),%eax
   190a7:	3c 5c                	cmp    $0x5c,%al
   190a9:	74 08                	je     190b3 <get_file_name+0x3e>
   190ab:	8b 45 fc             	mov    -0x4(%ebp),%eax
   190ae:	3b 45 08             	cmp    0x8(%ebp),%eax
   190b1:	73 e0                	jae    19093 <get_file_name+0x1e>
  }

  return s + 1;
   190b3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   190b6:	83 c0 01             	add    $0x1,%eax
   190b9:	c9                   	leave  
   190ba:	c3                   	ret    

000190bb <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   190bb:	55                   	push   %ebp
   190bc:	89 e5                	mov    %esp,%ebp
   190be:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   190c1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   190c5:	75 19                	jne    190e0 <list_is_empty+0x25>
   190c7:	68 10 ae 01 00       	push   $0x1ae10
   190cc:	68 f4 ae 01 00       	push   $0x1aef4
   190d1:	6a 38                	push   $0x38
   190d3:	68 24 ae 01 00       	push   $0x1ae24
   190d8:	e8 9c f6 ff ff       	call   18779 <pannic>
   190dd:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   190e0:	8b 45 08             	mov    0x8(%ebp),%eax
   190e3:	8b 40 08             	mov    0x8(%eax),%eax
   190e6:	85 c0                	test   %eax,%eax
   190e8:	0f 94 c0             	sete   %al
   190eb:	0f b6 c0             	movzbl %al,%eax
}
   190ee:	c9                   	leave  
   190ef:	c3                   	ret    

000190f0 <list_get_size>:
static inline int list_get_size(list_t *list) {
   190f0:	55                   	push   %ebp
   190f1:	89 e5                	mov    %esp,%ebp
   190f3:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   190f6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   190fa:	75 19                	jne    19115 <list_get_size+0x25>
   190fc:	68 10 ae 01 00       	push   $0x1ae10
   19101:	68 2c af 01 00       	push   $0x1af2c
   19106:	6a 3e                	push   $0x3e
   19108:	68 24 ae 01 00       	push   $0x1ae24
   1910d:	e8 67 f6 ff ff       	call   18779 <pannic>
   19112:	83 c4 10             	add    $0x10,%esp
    return list->size;
   19115:	8b 45 08             	mov    0x8(%ebp),%eax
   19118:	8b 40 08             	mov    0x8(%eax),%eax
}
   1911b:	c9                   	leave  
   1911c:	c3                   	ret    

0001911d <list_insert_first>:
 * 
 */

#include "tools/list.h"

void list_insert_first(list_t *list, list_node_t *node) {
   1911d:	55                   	push   %ebp
   1911e:	89 e5                	mov    %esp,%ebp
   19120:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   19123:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   19127:	74 06                	je     1912f <list_insert_first+0x12>
   19129:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1912d:	75 19                	jne    19148 <list_insert_first+0x2b>
   1912f:	68 64 ae 01 00       	push   $0x1ae64
   19134:	68 e0 ae 01 00       	push   $0x1aee0
   19139:	6a 0f                	push   $0xf
   1913b:	68 94 ae 01 00       	push   $0x1ae94
   19140:	e8 34 f6 ff ff       	call   18779 <pannic>
   19145:	83 c4 10             	add    $0x10,%esp

    // if (node == (list_node_t*)0) return;

    node->next = list->first;
   19148:	8b 45 08             	mov    0x8(%ebp),%eax
   1914b:	8b 10                	mov    (%eax),%edx
   1914d:	8b 45 0c             	mov    0xc(%ebp),%eax
   19150:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   19153:	8b 45 0c             	mov    0xc(%ebp),%eax
   19156:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   1915c:	83 ec 0c             	sub    $0xc,%esp
   1915f:	ff 75 08             	push   0x8(%ebp)
   19162:	e8 54 ff ff ff       	call   190bb <list_is_empty>
   19167:	83 c4 10             	add    $0x10,%esp
   1916a:	85 c0                	test   %eax,%eax
   1916c:	74 16                	je     19184 <list_insert_first+0x67>
        list->first = list->last = node;
   1916e:	8b 45 08             	mov    0x8(%ebp),%eax
   19171:	8b 55 0c             	mov    0xc(%ebp),%edx
   19174:	89 50 04             	mov    %edx,0x4(%eax)
   19177:	8b 45 08             	mov    0x8(%ebp),%eax
   1917a:	8b 50 04             	mov    0x4(%eax),%edx
   1917d:	8b 45 08             	mov    0x8(%ebp),%eax
   19180:	89 10                	mov    %edx,(%eax)
   19182:	eb 12                	jmp    19196 <list_insert_first+0x79>
    } else {
        list->first->pre = node;
   19184:	8b 45 08             	mov    0x8(%ebp),%eax
   19187:	8b 00                	mov    (%eax),%eax
   19189:	8b 55 0c             	mov    0xc(%ebp),%edx
   1918c:	89 10                	mov    %edx,(%eax)
        list->first = node;
   1918e:	8b 45 08             	mov    0x8(%ebp),%eax
   19191:	8b 55 0c             	mov    0xc(%ebp),%edx
   19194:	89 10                	mov    %edx,(%eax)
    }

    list->size++;
   19196:	8b 45 08             	mov    0x8(%ebp),%eax
   19199:	8b 40 08             	mov    0x8(%eax),%eax
   1919c:	8d 50 01             	lea    0x1(%eax),%edx
   1919f:	8b 45 08             	mov    0x8(%ebp),%eax
   191a2:	89 50 08             	mov    %edx,0x8(%eax)
}
   191a5:	90                   	nop
   191a6:	c9                   	leave  
   191a7:	c3                   	ret    

000191a8 <list_insert_last>:

void list_insert_last(list_t *list, list_node_t *node) {
   191a8:	55                   	push   %ebp
   191a9:	89 e5                	mov    %esp,%ebp
   191ab:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   191ae:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   191b2:	74 06                	je     191ba <list_insert_last+0x12>
   191b4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   191b8:	75 19                	jne    191d3 <list_insert_last+0x2b>
   191ba:	68 64 ae 01 00       	push   $0x1ae64
   191bf:	68 04 af 01 00       	push   $0x1af04
   191c4:	6a 21                	push   $0x21
   191c6:	68 94 ae 01 00       	push   $0x1ae94
   191cb:	e8 a9 f5 ff ff       	call   18779 <pannic>
   191d0:	83 c4 10             	add    $0x10,%esp
    // if (node == (list_node_t*)0) return;

    node->pre = list->last;
   191d3:	8b 45 08             	mov    0x8(%ebp),%eax
   191d6:	8b 50 04             	mov    0x4(%eax),%edx
   191d9:	8b 45 0c             	mov    0xc(%ebp),%eax
   191dc:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   191de:	8b 45 0c             	mov    0xc(%ebp),%eax
   191e1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)


    if (list_is_empty(list)) {
   191e8:	83 ec 0c             	sub    $0xc,%esp
   191eb:	ff 75 08             	push   0x8(%ebp)
   191ee:	e8 c8 fe ff ff       	call   190bb <list_is_empty>
   191f3:	83 c4 10             	add    $0x10,%esp
   191f6:	85 c0                	test   %eax,%eax
   191f8:	74 16                	je     19210 <list_insert_last+0x68>
        list->first = list->last = node;
   191fa:	8b 45 08             	mov    0x8(%ebp),%eax
   191fd:	8b 55 0c             	mov    0xc(%ebp),%edx
   19200:	89 50 04             	mov    %edx,0x4(%eax)
   19203:	8b 45 08             	mov    0x8(%ebp),%eax
   19206:	8b 50 04             	mov    0x4(%eax),%edx
   19209:	8b 45 08             	mov    0x8(%ebp),%eax
   1920c:	89 10                	mov    %edx,(%eax)
   1920e:	eb 15                	jmp    19225 <list_insert_last+0x7d>
    } else {
        list->last->next = node;
   19210:	8b 45 08             	mov    0x8(%ebp),%eax
   19213:	8b 40 04             	mov    0x4(%eax),%eax
   19216:	8b 55 0c             	mov    0xc(%ebp),%edx
   19219:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   1921c:	8b 45 08             	mov    0x8(%ebp),%eax
   1921f:	8b 55 0c             	mov    0xc(%ebp),%edx
   19222:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->size++;
   19225:	8b 45 08             	mov    0x8(%ebp),%eax
   19228:	8b 40 08             	mov    0x8(%eax),%eax
   1922b:	8d 50 01             	lea    0x1(%eax),%edx
   1922e:	8b 45 08             	mov    0x8(%ebp),%eax
   19231:	89 50 08             	mov    %edx,0x8(%eax)

}
   19234:	90                   	nop
   19235:	c9                   	leave  
   19236:	c3                   	ret    

00019237 <list_remove_first>:

list_node_t* list_remove_first(list_t *list){
   19237:	55                   	push   %ebp
   19238:	89 e5                	mov    %esp,%ebp
   1923a:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   1923d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   19241:	75 19                	jne    1925c <list_remove_first+0x25>
   19243:	68 ca ae 01 00       	push   $0x1aeca
   19248:	68 18 af 01 00       	push   $0x1af18
   1924d:	6a 34                	push   $0x34
   1924f:	68 94 ae 01 00       	push   $0x1ae94
   19254:	e8 20 f5 ff ff       	call   18779 <pannic>
   19259:	83 c4 10             	add    $0x10,%esp

    if (list_is_empty(list)) {
   1925c:	83 ec 0c             	sub    $0xc,%esp
   1925f:	ff 75 08             	push   0x8(%ebp)
   19262:	e8 54 fe ff ff       	call   190bb <list_is_empty>
   19267:	83 c4 10             	add    $0x10,%esp
   1926a:	85 c0                	test   %eax,%eax
   1926c:	74 07                	je     19275 <list_remove_first+0x3e>
        return (list_node_t*)0;
   1926e:	b8 00 00 00 00       	mov    $0x0,%eax
   19273:	eb 71                	jmp    192e6 <list_remove_first+0xaf>
    }

    list_node_t *ret = list->first;
   19275:	8b 45 08             	mov    0x8(%ebp),%eax
   19278:	8b 00                	mov    (%eax),%eax
   1927a:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   1927d:	83 ec 0c             	sub    $0xc,%esp
   19280:	ff 75 08             	push   0x8(%ebp)
   19283:	e8 68 fe ff ff       	call   190f0 <list_get_size>
   19288:	83 c4 10             	add    $0x10,%esp
   1928b:	83 f8 01             	cmp    $0x1,%eax
   1928e:	75 17                	jne    192a7 <list_remove_first+0x70>
        list->first = list->last = (list_node_t*)0;
   19290:	8b 45 08             	mov    0x8(%ebp),%eax
   19293:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1929a:	8b 45 08             	mov    0x8(%ebp),%eax
   1929d:	8b 50 04             	mov    0x4(%eax),%edx
   192a0:	8b 45 08             	mov    0x8(%ebp),%eax
   192a3:	89 10                	mov    %edx,(%eax)
   192a5:	eb 18                	jmp    192bf <list_remove_first+0x88>
    } else {
        list->first = list->first->next;
   192a7:	8b 45 08             	mov    0x8(%ebp),%eax
   192aa:	8b 00                	mov    (%eax),%eax
   192ac:	8b 50 04             	mov    0x4(%eax),%edx
   192af:	8b 45 08             	mov    0x8(%ebp),%eax
   192b2:	89 10                	mov    %edx,(%eax)
        list->first->pre = (list_node_t*)0;
   192b4:	8b 45 08             	mov    0x8(%ebp),%eax
   192b7:	8b 00                	mov    (%eax),%eax
   192b9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    list->size--;
   192bf:	8b 45 08             	mov    0x8(%ebp),%eax
   192c2:	8b 40 08             	mov    0x8(%eax),%eax
   192c5:	8d 50 ff             	lea    -0x1(%eax),%edx
   192c8:	8b 45 08             	mov    0x8(%ebp),%eax
   192cb:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   192ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
   192d1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   192d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   192db:	8b 50 04             	mov    0x4(%eax),%edx
   192de:	8b 45 f4             	mov    -0xc(%ebp),%eax
   192e1:	89 10                	mov    %edx,(%eax)
    return ret;
   192e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
 }
   192e6:	c9                   	leave  
   192e7:	c3                   	ret    

000192e8 <list_remove_last>:

list_node_t* list_remove_last(list_t *list) {
   192e8:	55                   	push   %ebp
   192e9:	89 e5                	mov    %esp,%ebp
   192eb:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   192ee:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   192f2:	75 19                	jne    1930d <list_remove_last+0x25>
   192f4:	68 ca ae 01 00       	push   $0x1aeca
   192f9:	68 3c af 01 00       	push   $0x1af3c
   192fe:	6a 4a                	push   $0x4a
   19300:	68 94 ae 01 00       	push   $0x1ae94
   19305:	e8 6f f4 ff ff       	call   18779 <pannic>
   1930a:	83 c4 10             	add    $0x10,%esp

     if (list_is_empty(list)) {
   1930d:	83 ec 0c             	sub    $0xc,%esp
   19310:	ff 75 08             	push   0x8(%ebp)
   19313:	e8 a3 fd ff ff       	call   190bb <list_is_empty>
   19318:	83 c4 10             	add    $0x10,%esp
   1931b:	85 c0                	test   %eax,%eax
   1931d:	74 07                	je     19326 <list_remove_last+0x3e>
        return (list_node_t*)0;
   1931f:	b8 00 00 00 00       	mov    $0x0,%eax
   19324:	eb 75                	jmp    1939b <list_remove_last+0xb3>
    }

    list_node_t *ret = list->last;
   19326:	8b 45 08             	mov    0x8(%ebp),%eax
   19329:	8b 40 04             	mov    0x4(%eax),%eax
   1932c:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   1932f:	83 ec 0c             	sub    $0xc,%esp
   19332:	ff 75 08             	push   0x8(%ebp)
   19335:	e8 b6 fd ff ff       	call   190f0 <list_get_size>
   1933a:	83 c4 10             	add    $0x10,%esp
   1933d:	83 f8 01             	cmp    $0x1,%eax
   19340:	75 17                	jne    19359 <list_remove_last+0x71>
        list->first = list->last = (list_node_t*)0;
   19342:	8b 45 08             	mov    0x8(%ebp),%eax
   19345:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1934c:	8b 45 08             	mov    0x8(%ebp),%eax
   1934f:	8b 50 04             	mov    0x4(%eax),%edx
   19352:	8b 45 08             	mov    0x8(%ebp),%eax
   19355:	89 10                	mov    %edx,(%eax)
   19357:	eb 1b                	jmp    19374 <list_remove_last+0x8c>
    } else {
        list->last = list->last->pre;
   19359:	8b 45 08             	mov    0x8(%ebp),%eax
   1935c:	8b 40 04             	mov    0x4(%eax),%eax
   1935f:	8b 10                	mov    (%eax),%edx
   19361:	8b 45 08             	mov    0x8(%ebp),%eax
   19364:	89 50 04             	mov    %edx,0x4(%eax)
        list->last->next = (list_node_t*)0;
   19367:	8b 45 08             	mov    0x8(%ebp),%eax
   1936a:	8b 40 04             	mov    0x4(%eax),%eax
   1936d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    }

    list->size--;
   19374:	8b 45 08             	mov    0x8(%ebp),%eax
   19377:	8b 40 08             	mov    0x8(%eax),%eax
   1937a:	8d 50 ff             	lea    -0x1(%eax),%edx
   1937d:	8b 45 08             	mov    0x8(%ebp),%eax
   19380:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   19383:	8b 45 f4             	mov    -0xc(%ebp),%eax
   19386:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1938d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   19390:	8b 50 04             	mov    0x4(%eax),%edx
   19393:	8b 45 f4             	mov    -0xc(%ebp),%eax
   19396:	89 10                	mov    %edx,(%eax)
    return ret;
   19398:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   1939b:	c9                   	leave  
   1939c:	c3                   	ret    

0001939d <list_remove>:

list_node_t* list_remove(list_t *list, list_node_t *node) {
   1939d:	55                   	push   %ebp
   1939e:	89 e5                	mov    %esp,%ebp
   193a0:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   193a3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   193a7:	74 06                	je     193af <list_remove+0x12>
   193a9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   193ad:	75 19                	jne    193c8 <list_remove+0x2b>
   193af:	68 64 ae 01 00       	push   $0x1ae64
   193b4:	68 50 af 01 00       	push   $0x1af50
   193b9:	6a 60                	push   $0x60
   193bb:	68 94 ae 01 00       	push   $0x1ae94
   193c0:	e8 b4 f3 ff ff       	call   18779 <pannic>
   193c5:	83 c4 10             	add    $0x10,%esp

    if (list_is_empty(list)) {
   193c8:	83 ec 0c             	sub    $0xc,%esp
   193cb:	ff 75 08             	push   0x8(%ebp)
   193ce:	e8 e8 fc ff ff       	call   190bb <list_is_empty>
   193d3:	83 c4 10             	add    $0x10,%esp
   193d6:	85 c0                	test   %eax,%eax
   193d8:	74 0a                	je     193e4 <list_remove+0x47>
        return (list_node_t*)0;
   193da:	b8 00 00 00 00       	mov    $0x0,%eax
   193df:	e9 80 00 00 00       	jmp    19464 <list_remove+0xc7>
    }

    if (node == list->first) list->first = node->next;
   193e4:	8b 45 08             	mov    0x8(%ebp),%eax
   193e7:	8b 00                	mov    (%eax),%eax
   193e9:	39 45 0c             	cmp    %eax,0xc(%ebp)
   193ec:	75 0b                	jne    193f9 <list_remove+0x5c>
   193ee:	8b 45 0c             	mov    0xc(%ebp),%eax
   193f1:	8b 50 04             	mov    0x4(%eax),%edx
   193f4:	8b 45 08             	mov    0x8(%ebp),%eax
   193f7:	89 10                	mov    %edx,(%eax)
    if (node == list->last) list->last = node->pre;
   193f9:	8b 45 08             	mov    0x8(%ebp),%eax
   193fc:	8b 40 04             	mov    0x4(%eax),%eax
   193ff:	39 45 0c             	cmp    %eax,0xc(%ebp)
   19402:	75 0b                	jne    1940f <list_remove+0x72>
   19404:	8b 45 0c             	mov    0xc(%ebp),%eax
   19407:	8b 10                	mov    (%eax),%edx
   19409:	8b 45 08             	mov    0x8(%ebp),%eax
   1940c:	89 50 04             	mov    %edx,0x4(%eax)

    if (node->pre) node->pre->next = node->next;
   1940f:	8b 45 0c             	mov    0xc(%ebp),%eax
   19412:	8b 00                	mov    (%eax),%eax
   19414:	85 c0                	test   %eax,%eax
   19416:	74 0e                	je     19426 <list_remove+0x89>
   19418:	8b 45 0c             	mov    0xc(%ebp),%eax
   1941b:	8b 00                	mov    (%eax),%eax
   1941d:	8b 55 0c             	mov    0xc(%ebp),%edx
   19420:	8b 52 04             	mov    0x4(%edx),%edx
   19423:	89 50 04             	mov    %edx,0x4(%eax)
    if (node->next) node->next->pre = node->pre;
   19426:	8b 45 0c             	mov    0xc(%ebp),%eax
   19429:	8b 40 04             	mov    0x4(%eax),%eax
   1942c:	85 c0                	test   %eax,%eax
   1942e:	74 0d                	je     1943d <list_remove+0xa0>
   19430:	8b 45 0c             	mov    0xc(%ebp),%eax
   19433:	8b 40 04             	mov    0x4(%eax),%eax
   19436:	8b 55 0c             	mov    0xc(%ebp),%edx
   19439:	8b 12                	mov    (%edx),%edx
   1943b:	89 10                	mov    %edx,(%eax)

    node->pre = node->next = (list_node_t*)0;
   1943d:	8b 45 0c             	mov    0xc(%ebp),%eax
   19440:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   19447:	8b 45 0c             	mov    0xc(%ebp),%eax
   1944a:	8b 50 04             	mov    0x4(%eax),%edx
   1944d:	8b 45 0c             	mov    0xc(%ebp),%eax
   19450:	89 10                	mov    %edx,(%eax)
    list->size--;
   19452:	8b 45 08             	mov    0x8(%ebp),%eax
   19455:	8b 40 08             	mov    0x8(%eax),%eax
   19458:	8d 50 ff             	lea    -0x1(%eax),%edx
   1945b:	8b 45 08             	mov    0x8(%ebp),%eax
   1945e:	89 50 08             	mov    %edx,0x8(%eax)

    return node;
   19461:	8b 45 0c             	mov    0xc(%ebp),%eax
   19464:	c9                   	leave  
   19465:	c3                   	ret    

00019466 <log_init>:

/**
 * @brief  初始化串行端口寄存器COM1
 * 
 */
void log_init(void) {
   19466:	55                   	push   %ebp
   19467:	89 e5                	mov    %esp,%ebp
   19469:	83 ec 08             	sub    $0x8,%esp
    outb(COM1_PORT + 2, 0xc7);
    outb(COM1_PORT + 4, 0x0f);

#endif 
    //初始化互斥锁
    mutex_init(&mutex);
   1946c:	83 ec 0c             	sub    $0xc,%esp
   1946f:	68 08 70 07 00       	push   $0x77008
   19474:	e8 88 eb ff ff       	call   18001 <mutex_init>
   19479:	83 c4 10             	add    $0x10,%esp

    //打开一个tty设备用于日志打印
    log_dev_id = dev_open(DEV_TTY, 0, (void*)0);
   1947c:	83 ec 04             	sub    $0x4,%esp
   1947f:	6a 00                	push   $0x0
   19481:	6a 00                	push   $0x0
   19483:	6a 01                	push   $0x1
   19485:	e8 8e ac ff ff       	call   14118 <dev_open>
   1948a:	83 c4 10             	add    $0x10,%esp
   1948d:	a3 1c 70 07 00       	mov    %eax,0x7701c
}
   19492:	90                   	nop
   19493:	c9                   	leave  
   19494:	c3                   	ret    

00019495 <log_printf>:
 * @brief  格式化输出到串口
 * 
 * @param formate 
 * @param ... 
 */
void log_printf(const char *formate, ...) {
   19495:	55                   	push   %ebp
   19496:	89 e5                	mov    %esp,%ebp
   19498:	81 ec 98 00 00 00    	sub    $0x98,%esp
    //1.设置字符缓冲区
    char str_buf[128];
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   1949e:	83 ec 04             	sub    $0x4,%esp
   194a1:	68 80 00 00 00       	push   $0x80
   194a6:	6a 00                	push   $0x0
   194a8:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   194ae:	50                   	push   %eax
   194af:	e8 e4 f7 ff ff       	call   18c98 <kernel_memset>
   194b4:	83 c4 10             	add    $0x10,%esp
    
    //2.获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   194b7:	8d 45 0c             	lea    0xc(%ebp),%eax
   194ba:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, formate, args);
   194c0:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   194c6:	83 ec 04             	sub    $0x4,%esp
   194c9:	50                   	push   %eax
   194ca:	ff 75 08             	push   0x8(%ebp)
   194cd:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   194d3:	50                   	push   %eax
   194d4:	e8 a8 f8 ff ff       	call   18d81 <kernel_vsprintf>
   194d9:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    const char *p = str_buf;
   194dc:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   194e2:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将以下资源放入临界资源包含区，防止在运行时发生进程切换（cpu关中断）
    mutex_lock(&mutex); //TODO:加锁
   194e5:	83 ec 0c             	sub    $0xc,%esp
   194e8:	68 08 70 07 00       	push   $0x77008
   194ed:	e8 5c eb ff ff       	call   1804e <mutex_lock>
   194f2:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');

#else
    //console_write(0, str_buf, kernel_strlen(str_buf));
    //tty设备在显示器上写入时是根据当前光标位置来的，所以不需要传入addr参数
    dev_write(log_dev_id, 0, str_buf, kernel_strlen(str_buf));
   194f5:	83 ec 0c             	sub    $0xc,%esp
   194f8:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   194fe:	50                   	push   %eax
   194ff:	e8 10 f7 ff ff       	call   18c14 <kernel_strlen>
   19504:	83 c4 10             	add    $0x10,%esp
   19507:	8b 15 1c 70 07 00    	mov    0x7701c,%edx
   1950d:	50                   	push   %eax
   1950e:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   19514:	50                   	push   %eax
   19515:	6a 00                	push   $0x0
   19517:	52                   	push   %edx
   19518:	e8 70 ad ff ff       	call   1428d <dev_write>
   1951d:	83 c4 10             	add    $0x10,%esp
    //console_write(0, &c, 1); 
#endif

    //执行完毕，将资源离开临界资源保护区，(cpu开中断)
    mutex_unlock(&mutex); //TODO:解锁
   19520:	83 ec 0c             	sub    $0xc,%esp
   19523:	68 08 70 07 00       	push   $0x77008
   19528:	e8 c7 eb ff ff       	call   180f4 <mutex_unlock>
   1952d:	83 c4 10             	add    $0x10,%esp
   19530:	90                   	nop
   19531:	c9                   	leave  
   19532:	c3                   	ret    

Disassembly of section .first_task:

80000000 <first_task_entry>:
//第一个任务进程入口函数
first_task_entry:
    //iret指令返回后，将之前压入的 ss,esp,eflags,cs,eip 寄存器值返回给对应寄存器，
	//由于cpu从0特权级切换到了3特权级，而之前其余的段寄存器都是0特权级，不能供3特权级使用，
	//所以cpu将其余寄存器置零，这里直接用ss寄存器再初始化其余段寄存器即可
	mov %ss, %ax
80000000:	66 8c d0             	mov    %ss,%ax
	mov %ax, %ds
80000003:	8e d8                	mov    %eax,%ds
	mov %ax, %es
80000005:	8e c0                	mov    %eax,%es
	mov %ax, %fs
80000007:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
80000009:	8e e8                	mov    %eax,%gs

    //因为cs寄存器已由操作系统分配，所以直接跳转即可
8000000b:	e9 00 00 00 00       	jmp    80000010 <first_main>

80000010 <first_main>:
#include "tools/log.h"
#include "core/task.h"
#include  "applib/lib_syscall.h"
#include "dev/tty.h"

int first_main(void) {
80000010:	55                   	push   %ebp
80000011:	89 e5                	mov    %esp,%ebp
80000013:	83 ec 28             	sub    $0x28,%esp
    // for (;;)
    // {
    // }

    //为每个tty设备创建一个进程
    for (int i = 0; i < 1; ++i) {
80000016:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
8000001d:	eb 7e                	jmp    8000009d <first_main+0x8d>
        int pid = fork();
8000001f:	e8 73 01 00 00       	call   80000197 <fork>
80000024:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pid < 0) {
80000027:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
8000002b:	79 14                	jns    80000041 <first_main+0x31>
            print_msg("create shell failed.", 0);
8000002d:	83 ec 08             	sub    $0x8,%esp
80000030:	6a 00                	push   $0x0
80000032:	68 bf 00 00 80       	push   $0x800000bf
80000037:	e8 33 01 00 00       	call   8000016f <print_msg>
8000003c:	83 c4 10             	add    $0x10,%esp
            break;
8000003f:	eb 66                	jmp    800000a7 <first_main+0x97>
        } else if (pid == 0) {
80000041:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80000045:	75 52                	jne    80000099 <first_main+0x89>
            char tty_num[] = "/dev/tty?";
80000047:	c7 45 e6 2f 64 65 76 	movl   $0x7665642f,-0x1a(%ebp)
8000004e:	c7 45 ea 2f 74 74 79 	movl   $0x7974742f,-0x16(%ebp)
80000055:	66 c7 45 ee 3f 00    	movw   $0x3f,-0x12(%ebp)
            tty_num[sizeof(tty_num) - 2] = i + '0';
8000005b:	8b 45 f4             	mov    -0xc(%ebp),%eax
8000005e:	83 c0 30             	add    $0x30,%eax
80000061:	88 45 ee             	mov    %al,-0x12(%ebp)
            char * const argv[] = {tty_num, 0};
80000064:	8d 45 e6             	lea    -0x1a(%ebp),%eax
80000067:	89 45 dc             	mov    %eax,-0x24(%ebp)
8000006a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
            execve("shell.elf", argv, 0);
80000071:	83 ec 04             	sub    $0x4,%esp
80000074:	6a 00                	push   $0x0
80000076:	8d 45 dc             	lea    -0x24(%ebp),%eax
80000079:	50                   	push   %eax
8000007a:	68 d4 00 00 80       	push   $0x800000d4
8000007f:	e8 2e 01 00 00       	call   800001b2 <execve>
80000084:	83 c4 10             	add    $0x10,%esp
            while (1)   {
                msleep(1000);
80000087:	83 ec 0c             	sub    $0xc,%esp
8000008a:	68 e8 03 00 00       	push   $0x3e8
8000008f:	e8 96 00 00 00       	call   8000012a <msleep>
80000094:	83 c4 10             	add    $0x10,%esp
80000097:	eb ee                	jmp    80000087 <first_main+0x77>
    for (int i = 0; i < 1; ++i) {
80000099:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
8000009d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
800000a1:	0f 8e 78 ff ff ff    	jle    8000001f <first_main+0xf>
        }
    }    

    for (;;) {
        //回收所有孤儿进程
        int status = 0;
800000a7:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
        wait(&status);
800000ae:	83 ec 0c             	sub    $0xc,%esp
800000b1:	8d 45 d8             	lea    -0x28(%ebp),%eax
800000b4:	50                   	push   %eax
800000b5:	e8 bb 02 00 00       	call   80000375 <wait>
800000ba:	83 c4 10             	add    $0x10,%esp
    for (;;) {
800000bd:	eb e8                	jmp    800000a7 <first_main+0x97>
800000bf:	63 72 65             	arpl   %si,0x65(%edx)
800000c2:	61                   	popa   
800000c3:	74 65                	je     8000012a <msleep>
800000c5:	20 73 68             	and    %dh,0x68(%ebx)
800000c8:	65 6c                	gs insb (%dx),%es:(%edi)
800000ca:	6c                   	insb   (%dx),%es:(%edi)
800000cb:	20 66 61             	and    %ah,0x61(%esi)
800000ce:	69 6c 65 64 2e 00 73 	imul   $0x6873002e,0x64(%ebp,%eiz,2),%ebp
800000d5:	68 
800000d6:	65 6c                	gs insb (%dx),%es:(%edi)
800000d8:	6c                   	insb   (%dx),%es:(%edi)
800000d9:	2e 65 6c             	cs gs insb (%dx),%es:(%edi)
800000dc:	66                   	data16
	...

800000de <sys_call>:
#include    "os_cfg.h"
#include    "applib/lib_syscall.h"
#include    <stdlib.h>


int sys_call(syscall_args_t *args) {
800000de:	55                   	push   %ebp
800000df:	89 e5                	mov    %esp,%ebp
800000e1:	57                   	push   %edi
800000e2:	56                   	push   %esi
800000e3:	53                   	push   %ebx
800000e4:	83 ec 10             	sub    $0x10,%esp
    // 传入远跳转需要的参数, 即cs = selector, eip = offset 
    //为调用门选择子赋予0特权级,调用门的 cpl 和 RPL <= 系统调用段描述符的DPL
    //门描述符中目标选择子的 CPL <= 门描述符的 DPL
    uint32_t addr[] = {0, SYSCALL_SELECTOR | 0};  
800000e7:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
800000ee:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%ebp)
        "push %[arg1]\n\t"
        "push %[arg0]\n\t"
        "push %[id]\n\t"
        "lcalll *(%[addr])\n\t"
        :"=a"(ret)
        :[arg3]"r"(args->arg3), 
800000f5:	8b 45 08             	mov    0x8(%ebp),%eax
800000f8:	8b 40 10             	mov    0x10(%eax),%eax
         [arg2]"r"(args->arg2), 
800000fb:	8b 55 08             	mov    0x8(%ebp),%edx
800000fe:	8b 52 0c             	mov    0xc(%edx),%edx
         [arg1]"r"(args->arg1),
80000101:	8b 4d 08             	mov    0x8(%ebp),%ecx
80000104:	8b 49 08             	mov    0x8(%ecx),%ecx
         [arg0]"r"(args->arg0), 
80000107:	8b 5d 08             	mov    0x8(%ebp),%ebx
8000010a:	8b 5b 04             	mov    0x4(%ebx),%ebx
         [id]"r"(args->id), 
8000010d:	8b 75 08             	mov    0x8(%ebp),%esi
80000110:	8b 36                	mov    (%esi),%esi
     __asm__ __volatile__(
80000112:	8d 7d e8             	lea    -0x18(%ebp),%edi
80000115:	50                   	push   %eax
80000116:	52                   	push   %edx
80000117:	51                   	push   %ecx
80000118:	53                   	push   %ebx
80000119:	56                   	push   %esi
8000011a:	ff 1f                	lcall  *(%edi)
8000011c:	89 45 f0             	mov    %eax,-0x10(%ebp)
         [addr]"r"(addr)
    );

    return ret;
8000011f:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
80000122:	83 c4 10             	add    $0x10,%esp
80000125:	5b                   	pop    %ebx
80000126:	5e                   	pop    %esi
80000127:	5f                   	pop    %edi
80000128:	5d                   	pop    %ebp
80000129:	c3                   	ret    

8000012a <msleep>:
/**
 * @brief 以ms为单位进行延时
 * 
 * @param ms 
 */
void msleep(int ms) {
8000012a:	55                   	push   %ebp
8000012b:	89 e5                	mov    %esp,%ebp
8000012d:	83 ec 20             	sub    $0x20,%esp
    if (ms <= 0) return;
80000130:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
80000134:	7e 1b                	jle    80000151 <msleep+0x27>

    syscall_args_t args;
    args.id = SYS_sleep;
80000136:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    args.arg0 = ms;
8000013d:	8b 45 08             	mov    0x8(%ebp),%eax
80000140:	89 45 f0             	mov    %eax,-0x10(%ebp)

    sys_call(&args);
80000143:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000146:	50                   	push   %eax
80000147:	e8 92 ff ff ff       	call   800000de <sys_call>
8000014c:	83 c4 04             	add    $0x4,%esp
8000014f:	eb 01                	jmp    80000152 <msleep+0x28>
    if (ms <= 0) return;
80000151:	90                   	nop

}
80000152:	c9                   	leave  
80000153:	c3                   	ret    

80000154 <getpid>:
/**
 * @brief 获取用户进程id
 * 
 * @return int 
 */
int getpid(void) {
80000154:	55                   	push   %ebp
80000155:	89 e5                	mov    %esp,%ebp
80000157:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_getpid;
8000015a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)

    return sys_call(&args);
80000161:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000164:	50                   	push   %eax
80000165:	e8 74 ff ff ff       	call   800000de <sys_call>
8000016a:	83 c4 04             	add    $0x4,%esp
}
8000016d:	c9                   	leave  
8000016e:	c3                   	ret    

8000016f <print_msg>:

void print_msg(const char *fmt, int arg) {
8000016f:	55                   	push   %ebp
80000170:	89 e5                	mov    %esp,%ebp
80000172:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_printmsg;
80000175:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
    args.arg0 = (int)fmt;
8000017c:	8b 45 08             	mov    0x8(%ebp),%eax
8000017f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = arg;
80000182:	8b 45 0c             	mov    0xc(%ebp),%eax
80000185:	89 45 f4             	mov    %eax,-0xc(%ebp)

    sys_call(&args);
80000188:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000018b:	50                   	push   %eax
8000018c:	e8 4d ff ff ff       	call   800000de <sys_call>
80000191:	83 c4 04             	add    $0x4,%esp
}
80000194:	90                   	nop
80000195:	c9                   	leave  
80000196:	c3                   	ret    

80000197 <fork>:

int fork (void) {
80000197:	55                   	push   %ebp
80000198:	89 e5                	mov    %esp,%ebp
8000019a:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fork;
8000019d:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)

    return sys_call(&args);
800001a4:	8d 45 ec             	lea    -0x14(%ebp),%eax
800001a7:	50                   	push   %eax
800001a8:	e8 31 ff ff ff       	call   800000de <sys_call>
800001ad:	83 c4 04             	add    $0x4,%esp
}
800001b0:	c9                   	leave  
800001b1:	c3                   	ret    

800001b2 <execve>:
 * @param name 外部程序名
 * @param argv 外部程序的参数，字符串常量指针，即字符串数组，数组中的char*值为常量
 * @param env  所加载程序的环境变量
 * @return int 
 */
int execve(const char *name, char * const * argv, char * const * env) {
800001b2:	55                   	push   %ebp
800001b3:	89 e5                	mov    %esp,%ebp
800001b5:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_execve;
800001b8:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
    args.arg0 = (int)name;
800001bf:	8b 45 08             	mov    0x8(%ebp),%eax
800001c2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)argv;
800001c5:	8b 45 0c             	mov    0xc(%ebp),%eax
800001c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = (int)env;
800001cb:	8b 45 10             	mov    0x10(%ebp),%eax
800001ce:	89 45 f8             	mov    %eax,-0x8(%ebp)


    return sys_call(&args);
800001d1:	8d 45 ec             	lea    -0x14(%ebp),%eax
800001d4:	50                   	push   %eax
800001d5:	e8 04 ff ff ff       	call   800000de <sys_call>
800001da:	83 c4 04             	add    $0x4,%esp
}
800001dd:	c9                   	leave  
800001de:	c3                   	ret    

800001df <yield>:
/**
 * @brief 进程主动放弃cpu
 * 
 * @return int 
 */
int yield (void) {
800001df:	55                   	push   %ebp
800001e0:	89 e5                	mov    %esp,%ebp
800001e2:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_yield;
800001e5:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)

    return sys_call(&args);
800001ec:	8d 45 ec             	lea    -0x14(%ebp),%eax
800001ef:	50                   	push   %eax
800001f0:	e8 e9 fe ff ff       	call   800000de <sys_call>
800001f5:	83 c4 04             	add    $0x4,%esp
}
800001f8:	c9                   	leave  
800001f9:	c3                   	ret    

800001fa <open>:
 * @param name 
 * @param flags 
 * @param ... 
 * @return int 
 */
int open(const char *name, int flags, ...) {
800001fa:	55                   	push   %ebp
800001fb:	89 e5                	mov    %esp,%ebp
800001fd:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_open;
80000200:	c7 45 ec 32 00 00 00 	movl   $0x32,-0x14(%ebp)
    args.arg0 = (int)name;
80000207:	8b 45 08             	mov    0x8(%ebp),%eax
8000020a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = flags;
8000020d:	8b 45 0c             	mov    0xc(%ebp),%eax
80000210:	89 45 f4             	mov    %eax,-0xc(%ebp)

    return sys_call(&args);
80000213:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000216:	50                   	push   %eax
80000217:	e8 c2 fe ff ff       	call   800000de <sys_call>
8000021c:	83 c4 04             	add    $0x4,%esp
}
8000021f:	c9                   	leave  
80000220:	c3                   	ret    

80000221 <read>:
 * @param file 
 * @param ptr 
 * @param len 
 * @return int 
 */
int read(int file, char *ptr, int len) {
80000221:	55                   	push   %ebp
80000222:	89 e5                	mov    %esp,%ebp
80000224:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_read;
80000227:	c7 45 ec 33 00 00 00 	movl   $0x33,-0x14(%ebp)
    args.arg0 = file;
8000022e:	8b 45 08             	mov    0x8(%ebp),%eax
80000231:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
80000234:	8b 45 0c             	mov    0xc(%ebp),%eax
80000237:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
8000023a:	8b 45 10             	mov    0x10(%ebp),%eax
8000023d:	89 45 f8             	mov    %eax,-0x8(%ebp)

    return sys_call(&args);
80000240:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000243:	50                   	push   %eax
80000244:	e8 95 fe ff ff       	call   800000de <sys_call>
80000249:	83 c4 04             	add    $0x4,%esp
}
8000024c:	c9                   	leave  
8000024d:	c3                   	ret    

8000024e <write>:
 * @param file 
 * @param ptr 
 * @param len 
 * @return int 
 */
int write(int file, char *ptr, int len) {
8000024e:	55                   	push   %ebp
8000024f:	89 e5                	mov    %esp,%ebp
80000251:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_write;
80000254:	c7 45 ec 34 00 00 00 	movl   $0x34,-0x14(%ebp)
    args.arg0 = file;
8000025b:	8b 45 08             	mov    0x8(%ebp),%eax
8000025e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
80000261:	8b 45 0c             	mov    0xc(%ebp),%eax
80000264:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
80000267:	8b 45 10             	mov    0x10(%ebp),%eax
8000026a:	89 45 f8             	mov    %eax,-0x8(%ebp)

    return sys_call(&args);
8000026d:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000270:	50                   	push   %eax
80000271:	e8 68 fe ff ff       	call   800000de <sys_call>
80000276:	83 c4 04             	add    $0x4,%esp
}
80000279:	c9                   	leave  
8000027a:	c3                   	ret    

8000027b <close>:
 * @brief 关闭文件描述符
 * 
 * @param file 
 * @return int 
 */
int close(int file) {
8000027b:	55                   	push   %ebp
8000027c:	89 e5                	mov    %esp,%ebp
8000027e:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_close;
80000281:	c7 45 ec 35 00 00 00 	movl   $0x35,-0x14(%ebp)
    args.arg0 = file;
80000288:	8b 45 08             	mov    0x8(%ebp),%eax
8000028b:	89 45 f0             	mov    %eax,-0x10(%ebp)

    return sys_call(&args);
8000028e:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000291:	50                   	push   %eax
80000292:	e8 47 fe ff ff       	call   800000de <sys_call>
80000297:	83 c4 04             	add    $0x4,%esp
}
8000029a:	c9                   	leave  
8000029b:	c3                   	ret    

8000029c <lseek>:
 * @param file 
 * @param offset 
 * @param dir 
 * @return int 
 */
int lseek(int file, int offset, int dir) {
8000029c:	55                   	push   %ebp
8000029d:	89 e5                	mov    %esp,%ebp
8000029f:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_lseek;
800002a2:	c7 45 ec 36 00 00 00 	movl   $0x36,-0x14(%ebp)
    args.arg0 = file;
800002a9:	8b 45 08             	mov    0x8(%ebp),%eax
800002ac:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = offset;
800002af:	8b 45 0c             	mov    0xc(%ebp),%eax
800002b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = dir;
800002b5:	8b 45 10             	mov    0x10(%ebp),%eax
800002b8:	89 45 f8             	mov    %eax,-0x8(%ebp)

    return sys_call(&args);
800002bb:	8d 45 ec             	lea    -0x14(%ebp),%eax
800002be:	50                   	push   %eax
800002bf:	e8 1a fe ff ff       	call   800000de <sys_call>
800002c4:	83 c4 04             	add    $0x4,%esp
}
800002c7:	c9                   	leave  
800002c8:	c3                   	ret    

800002c9 <isatty>:
 * @brief 
 * 
 * @param file 
 * @return int 
 */
int isatty(int file) {
800002c9:	55                   	push   %ebp
800002ca:	89 e5                	mov    %esp,%ebp
800002cc:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_isatty;
800002cf:	c7 45 ec 37 00 00 00 	movl   $0x37,-0x14(%ebp)
    args.arg0 = file;
800002d6:	8b 45 08             	mov    0x8(%ebp),%eax
800002d9:	89 45 f0             	mov    %eax,-0x10(%ebp)

    return sys_call(&args);
800002dc:	8d 45 ec             	lea    -0x14(%ebp),%eax
800002df:	50                   	push   %eax
800002e0:	e8 f9 fd ff ff       	call   800000de <sys_call>
800002e5:	83 c4 04             	add    $0x4,%esp
}
800002e8:	c9                   	leave  
800002e9:	c3                   	ret    

800002ea <fstat>:
 * 
 * @param file 
 * @param st 
 * @return int 
 */
int fstat(int file, struct stat *st) {
800002ea:	55                   	push   %ebp
800002eb:	89 e5                	mov    %esp,%ebp
800002ed:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fstat;
800002f0:	c7 45 ec 38 00 00 00 	movl   $0x38,-0x14(%ebp)
    args.arg0 = file;
800002f7:	8b 45 08             	mov    0x8(%ebp),%eax
800002fa:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)st;
800002fd:	8b 45 0c             	mov    0xc(%ebp),%eax
80000300:	89 45 f4             	mov    %eax,-0xc(%ebp)

    return sys_call(&args);
80000303:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000306:	50                   	push   %eax
80000307:	e8 d2 fd ff ff       	call   800000de <sys_call>
8000030c:	83 c4 04             	add    $0x4,%esp
}
8000030f:	c9                   	leave  
80000310:	c3                   	ret    

80000311 <sbrk>:
 * @brief 
 * 
 * @param incr 
 * @return void* 
 */
char *sbrk(ptrdiff_t incr) {
80000311:	55                   	push   %ebp
80000312:	89 e5                	mov    %esp,%ebp
80000314:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_sbrk;
80000317:	c7 45 ec 3f 00 00 00 	movl   $0x3f,-0x14(%ebp)
    args.arg0 = (int)incr;
8000031e:	8b 45 08             	mov    0x8(%ebp),%eax
80000321:	89 45 f0             	mov    %eax,-0x10(%ebp)

    return (char*)sys_call(&args);
80000324:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000327:	50                   	push   %eax
80000328:	e8 b1 fd ff ff       	call   800000de <sys_call>
8000032d:	83 c4 04             	add    $0x4,%esp
}
80000330:	c9                   	leave  
80000331:	c3                   	ret    

80000332 <dup>:
 * @brief 在当前进程的打开文件表中分配新的一项指向该文件描述符对应的文件指针
 * 
 * @param file 需要被多次引用的文件指针的文件描述符
 * @return int 新的文件描述符
 */
int dup(int file) {
80000332:	55                   	push   %ebp
80000333:	89 e5                	mov    %esp,%ebp
80000335:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_dup;
80000338:	c7 45 ec 39 00 00 00 	movl   $0x39,-0x14(%ebp)
    args.arg0 = file;
8000033f:	8b 45 08             	mov    0x8(%ebp),%eax
80000342:	89 45 f0             	mov    %eax,-0x10(%ebp)

    return sys_call(&args);
80000345:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000348:	50                   	push   %eax
80000349:	e8 90 fd ff ff       	call   800000de <sys_call>
8000034e:	83 c4 04             	add    $0x4,%esp
}
80000351:	c9                   	leave  
80000352:	c3                   	ret    

80000353 <_exit>:
/**
 * @brief 进程退出的系统调用
 * 
 * @param status 
 */
void _exit(int status) {
80000353:	55                   	push   %ebp
80000354:	89 e5                	mov    %esp,%ebp
80000356:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_exit;
80000359:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
    args.arg0 = status;
80000360:	8b 45 08             	mov    0x8(%ebp),%eax
80000363:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    sys_call(&args);
80000366:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000369:	50                   	push   %eax
8000036a:	e8 6f fd ff ff       	call   800000de <sys_call>
8000036f:	83 c4 04             	add    $0x4,%esp
}
80000372:	90                   	nop
80000373:	c9                   	leave  
80000374:	c3                   	ret    

80000375 <wait>:
 * @brief 回收进程资源
 * 
 * @param status 
 * @return int 
 */
int wait(int *status) {
80000375:	55                   	push   %ebp
80000376:	89 e5                	mov    %esp,%ebp
80000378:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_wait;
8000037b:	c7 45 ec 06 00 00 00 	movl   $0x6,-0x14(%ebp)
    args.arg0 = (int)status;
80000382:	8b 45 08             	mov    0x8(%ebp),%eax
80000385:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    return sys_call(&args);
80000388:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000038b:	50                   	push   %eax
8000038c:	e8 4d fd ff ff       	call   800000de <sys_call>
80000391:	83 c4 04             	add    $0x4,%esp
}
80000394:	c9                   	leave  
80000395:	c3                   	ret    
