
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf:     file format elf32-i386
/home/kbpoyo/code/cpp/MyOs/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00007e28 memsz 0x00007e28 flags r-x
    LOAD off    0x00009000 vaddr 0x00018000 paddr 0x00018000 align 2**12
         filesz 0x00000090 memsz 0x000543d0 flags rw-
    LOAD off    0x0000a000 vaddr 0x80000000 paddr 0x0006d000 align 2**12
         filesz 0x0000038a memsz 0x0000038a flags rwx
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000068a7  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00001568  000168c0  000168c0  000078c0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000090  00018000  00018000  00009000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000533d0  00019000  00019000  00009090  2**12
                  ALLOC
  4 .first_task   0000038a  80000000  0006d000  0000a000  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  5 .debug_line   0000393a  00000000  00000000  0000a38a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_line_str 00000a62  00000000  00000000  0000dcc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   0000a71b  00000000  00000000  0000e726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00002ce7  00000000  00000000  00018e41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_aranges 00000340  00000000  00000000  0001bb28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    00001f7f  00000000  00000000  0001be68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_rnglists 00000087  00000000  00000000  0001dde7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .comment      00000058  00000000  00000000  0001de6e  2**0
                  CONTENTS, READONLY
 13 .debug_frame  000023f4  00000000  00000000  0001dec8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010012 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
000102e4 l     F .text	0000000d down2
000102f1 l     F .text	00000017 up2
00010308 l     F .text	0000000c write_cr3
00010314 l     F .text	0000000b pde_index
0001031f l     F .text	00000010 pte_index
0001032f l     F .text	00000027 pde_to_pt_addr
00010356 l     F .text	00000027 pte_to_pg_addr
0001037d l     F .text	0000000f get_pte_privilege
0001038c l     F .text	00000011 mmu_set_page_dir
00019000 l     O .bss	00007e88 paddr_alloc
00021000 l     O .bss	00001000 kernel_page_dir
0001039d l     F .text	00000025 page_index
000103c2 l     F .text	00000056 page_ref_add
00010418 l     F .text	00000068 page_ref_sub
00010480 l     F .text	0000004e get_page_ref
000104ce l     F .text	00000051 clear_page_ref
0001051f l     F .text	00000087 addr_alloc_init
000105a6 l     F .text	00000067 addr_alloc_page
0001060d l     F .text	0000009c addr_free_page
000106a9 l     F .text	00000066 show_mem_info
0001070f l     F .text	00000037 total_mem_size
00016a5c l     O .rodata	00000011 __func__.4
00018000 l     O .data	00000050 kernal_map.3
00016a70 l     O .rodata	0000000c __func__.2
00010e2c l     F .text	00000010 curr_page_dir
00016a7c l     O .rodata	00000011 __func__.1
00016a90 l     O .rodata	00000009 __func__.0
00000000 l    df *ABS*	00000000 task.c
000110f1 l     F .text	0000003d list_node_init
00016c58 l     O .rodata	0000000f __func__.11
0001112e l     F .text	0000002d list_node_next
00016cb8 l     O .rodata	0000000f __func__.5
0001115b l     F .text	00000047 list_init
00016c68 l     O .rodata	0000000a __func__.10
000111a2 l     F .text	00000035 list_is_empty
00016cc8 l     O .rodata	0000000e __func__.4
000111d7 l     F .text	0000002d list_get_size
00016cf8 l     O .rodata	0000000e __func__.1
00011204 l     F .text	0000002c list_get_first
00016ca8 l     O .rodata	0000000f __func__.6
00011230 l     F .text	00000007 hlt
00011237 l     F .text	0000000c write_cr3
00011243 l     F .text	0000001a far_jump
0001125d l     F .text	00000017 write_tr
00011274 l     F .text	00000011 mmu_set_page_dir
00011285 l     F .text	00000017 up2
00022000 l     O .bss	000005c0 task_manager
000225c0 l     O .bss	00016400 task_table
000389c0 l     O .bss	00000014 task_table_lock
00011347 l     F .text	0000001f switch_to_tss
00011381 l     F .text	00000175 tss_init
00016c4c l     O .rodata	0000000a __func__.12
00011c20 l     F .text	00000033 free_task
000389e0 l     O .bss	00000200 empty_task_stack
000116eb l     F .text	0000000a empty_task
00016c74 l     O .rodata	00000010 __func__.9
00016c84 l     O .rodata	0000000f __func__.8
00016c94 l     O .rodata	00000011 __func__.7
00016cd8 l     O .rodata	0000000f __func__.3
00016ce8 l     O .rodata	00000010 __func__.2
00011bb8 l     F .text	00000068 alloc_task
00011e9c l     F .text	00000114 load_phdr
00011fb0 l     F .text	00000213 load_elf_file
000121c3 l     F .text	000000f1 copy_args
00016d08 l     O .rodata	0000000a __func__.0
00000000 l    df *ABS*	00000000 gate.c
00000000 l    df *ABS*	00000000 gdt.c
000126db l     F .text	00000028 lgdt
00038be0 l     O .bss	00010000 gdt_table
00048be0 l     O .bss	00002000 is_alloc
0004abe0 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 idt.c
00012911 l     F .text	00000007 cli
00012918 l     F .text	00000007 sti
0001291f l     F .text	00000007 hlt
00012926 l     F .text	0000001d inb
00012943 l     F .text	00000021 outb
00012964 l     F .text	00000028 lidt
0001298c l     F .text	00000011 read_cr2
0001299d l     F .text	00000010 read_eflags
000129ad l     F .text	0000000b write_eflags
0004ac00 l     O .bss	00000800 idt_table
000129b8 l     F .text	0000010f print_exception_fram
00012ac7 l     F .text	0000003e do_default_handler
00012edd l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 mmu.c
00000000 l    df *ABS*	00000000 syscall.c
00017300 l     O .rodata	000000ec sys_table
00000000 l    df *ABS*	00000000 console.c
00013372 l     F .text	0000001d inb
0001338f l     F .text	00000021 outb
0004b400 l     O .bss	000002a0 console_table
0004b6a0 l     O .bss	00000004 curr_console_index
000133b0 l     F .text	00000074 read_cursor_pos
00013424 l     F .text	000000a6 update_cursor_pos
000134ca l     F .text	0000006d erase_rows
00013537 l     F .text	00000094 scroll_up
000135cb l     F .text	00000010 move_to_col0
000135db l     F .text	00000038 move_to_next_line
00013613 l     F .text	00000077 move_forward
0001368a l     F .text	00000095 show_char
0001371f l     F .text	00000078 move_backword
00013797 l     F .text	0000003a erase_backword
000137d1 l     F .text	00000087 clear_display
00013858 l     F .text	00000051 print_table
000139a2 l     F .text	000000b2 write_normal
00013a54 l     F .text	0000001e save_cursor
00013a72 l     F .text	0000001e restore_cursor
00013a90 l     F .text	00000029 clear_esc_param
00013ab9 l     F .text	0000007e write_esc
00013b37 l     F .text	0000009a set_font_style
00017480 l     O .rodata	00000020 color_table.0
00013bd1 l     F .text	0000004f erase_in_display
00013c20 l     F .text	00000022 move_cursor
00013c42 l     F .text	00000039 move_left
00013c7b l     F .text	00000045 move_right
00013cc0 l     F .text	00000104 write_esc_square
00000000 l    df *ABS*	00000000 dev.c
00018050 l     O .data	00000008 dev_des_table
0004b6c0 l     O .bss	00000a00 dev_table
00013f80 l     F .text	00000054 is_dev_exist
00000000 l    df *ABS*	00000000 keyboard.c
00014285 l     F .text	0000001d inb
000174a0 l     O .rodata	00000200 map_table
0004c0c0 l     O .bss	00000004 kbd_state
000142a2 l     F .text	0000001a is_make_code
000142bc l     F .text	00000015 get_key
000142d1 l     F .text	00000043 do_fx_key
00014314 l     F .text	000001e0 do_normal_key
000144f4 l     F .text	0000008e do_e0_key
0004c0c4 l     O .bss	00000001 is_inited.1
0004c0c8 l     O .bss	00000004 recv_state.0
00000000 l    df *ABS*	00000000 time.c
0001469a l     F .text	00000021 outb
0004c0cc l     O .bss	00000004 sys_tick
000146e3 l     F .text	00000062 init_pit
00000000 l    df *ABS*	00000000 tty.c
0004c0e0 l     O .bss	000022a0 tty_table
0004e380 l     O .bss	00000004 curr_tty_index
0001475d l     F .text	0000004f get_tty
000147ac l     F .text	00000037 tty_fifo_init
00000000 l    df *ABS*	00000000 file.c
0004e3a0 l     O .bss	0001c000 file_table
0006a3a0 l     O .bss	00000014 file_alloc_mutex
00000000 l    df *ABS*	00000000 fs.c
00014d92 l     F .text	0000001d inb
00014daf l     F .text	00000021 outb
00014dd0 l     F .text	0000001f inw
0006a3b4 l     O .bss	00000004 temp_pos
00014def l     F .text	0000013d read_disk
00014f2c l     F .text	00000021 is_path_valid
00000000 l    df *ABS*	00000000 init.c
000178e0 l     O .rodata	0000000c __func__.1
000178ec l     O .rodata	00000013 __func__.0
00000000 l    df *ABS*	00000000 mutex.c
0001535e l     F .text	00000047 list_init
000179ac l     O .rodata	0000000a __func__.1
000153a5 l     F .text	00000035 list_is_empty
000179b8 l     O .rodata	0000000e __func__.0
000179a0 l     O .rodata	0000000b __func__.2
00000000 l    df *ABS*	00000000 sem.c
00015570 l     F .text	00000047 list_init
00017a6c l     O .rodata	0000000a __func__.1
000155b7 l     F .text	00000035 list_is_empty
00017a78 l     O .rodata	0000000e __func__.0
00017a60 l     O .rodata	00000009 __func__.2
00000000 l    df *ABS*	00000000 test.c
00015744 l     F .text	00000047 list_init
00017b8c l     O .rodata	0000000a __func__.3
0001578b l     F .text	0000002d list_get_size
00017b98 l     O .rodata	0000000e __func__.2
000157b8 l     F .text	0000002c list_get_first
00017bb8 l     O .rodata	0000000f __func__.0
000157e4 l     F .text	0000002d list_get_last
00017ba8 l     O .rodata	0000000e __func__.1
00000000 l    df *ABS*	00000000 assert.c
00015aec l     F .text	00000007 hlt
00000000 l    df *ABS*	00000000 bitmap.c
00017c8c l     O .rodata	0000000c __func__.3
00017c98 l     O .rodata	0000000f __func__.2
00017ca8 l     O .rodata	0000000f __func__.1
00017cb8 l     O .rodata	00000013 __func__.0
00000000 l    df *ABS*	00000000 klib.c
0001808c l     O .data	00000004 num_to_char.0
00000000 l    df *ABS*	00000000 list.c
0001642f l     F .text	00000035 list_is_empty
00017dc0 l     O .rodata	0000000e __func__.5
00016464 l     F .text	0000002d list_get_size
00017df8 l     O .rodata	0000000e __func__.2
00017dac l     O .rodata	00000012 __func__.6
00017dd0 l     O .rodata	00000011 __func__.4
00017de4 l     O .rodata	00000012 __func__.3
00017e08 l     O .rodata	00000011 __func__.1
00017e1c l     O .rodata	0000000c __func__.0
00000000 l    df *ABS*	00000000 log.c
0006a3b8 l     O .bss	00000014 mutex
0006a3cc l     O .bss	00000004 log_dev_id
00000000 l    df *ABS*	00000000 first_task.c
00000000 l    df *ABS*	00000000 lib_syscall.c
00015bd3 g     F .text	00000078 bitmap_get_bit
00015fbd g     F .text	0000004f kernel_memcpy
000151a2 g     F .text	0000000a sys_close
00013125 g     F .text	00000098 idt_enable
00011994 g     F .text	0000000a task_current
800001d3 g     F .first_task	0000001b yield
0001651c g     F .text	0000008f list_insert_last
0001129c g     F .text	00000030 task_file
00010298 g       .text	00000000 exception_handler_kbd
00010fcb g     F .text	00000126 sys_sbrk
00011e3b g     F .text	00000061 sys_yield
00012c39 g     F .text	0000001c do_handler_segment_not_present
000118e2 g     F .text	00000042 task_set_ready
00015d53 g     F .text	00000021 bitmap_is_set
0001325c g     F .text	0000000b idt_enable_global
0001600c g     F .text	00000041 kernel_memset
0001416a g     F .text	0000004c dev_write
0001517e g     F .text	00000024 sys_lseek
00014582 g     F .text	0000004e kbd_init
00010081 g       .text	00000000 exception_handler_nmi
00010243 g       .text	00000000 exception_handler_virtual_exception
000132e3 g     F .text	0000008f do_handler_syscall
000163bc g     F .text	0000002d strings_count
000167da g     F .text	0000002f log_init
00011cc0 g     F .text	0000017b sys_fork
00015326 g     F .text	00000038 init_main
000101ee g       .text	00000000 exception_handler_alignment_check
000132c9 g     F .text	0000001a sys_print_msg
00015e6f g     F .text	00000047 kernel_strcpy
00013251 g     F .text	0000000b idt_disable_global
00018000 g       .data	00000000 s_data
80000010 g     F .first_task	000000a2 first_main
00012e9a g     F .text	00000043 idt_install
800001a6 g     F .first_task	0000002d execve
80000148 g     F .first_task	0000001b getpid
0001002a g       .text	00000000 exception_handler_unknown
0001009e g       .text	00000000 exception_handler_breakpoint
00012b91 g     F .text	0000001c do_handler_overflow
00012e0e g     F .text	0000001c do_handler_alignment_check
000150b2 g     F .text	0000007f sys_read
00013eb0 g     F .text	000000d0 console_select
0001019b g       .text	00000000 exception_handler_general_protection
00012c71 g     F .text	000000b1 do_handler_general_protection
00012e7e g     F .text	0000001c do_handler_control_exception
0001571b g     F .text	00000029 sem_count
00012b21 g     F .text	0000001c do_handler_divider
00015c4b g     F .text	00000108 bitmap_set_bit
00012c01 g     F .text	0000001c do_handler_double_fault
00012d22 g     F .text	000000d0 do_handler_page_fault
800002bd g     F .first_task	00000021 isatty
0001012f g       .text	00000000 exception_handler_double_fault
00013267 g     F .text	00000039 pic_send_eoi
0001665c g     F .text	000000b5 list_remove_last
000118d8 g     F .text	0000000a task_first_task
00010000 g       .text	00000000 s_text
0001562e g     F .text	0000006b sem_wait
00010e0a g     F .text	00000022 memory_alloc_page_for
00010180 g       .text	00000000 exception_handler_stack_segment_fault
80000000 g       .first_task	00000000 first_task_entry
000151b6 g     F .text	0000000a sys_fstat
0001411e g     F .text	0000004c dev_read
000127c2 g     F .text	000000b3 gdt_init
00012e62 g     F .text	0000001c do_handler_virtual_exception
000100bb g       .text	00000000 exception_handler_overflow
000102b5 g       .text	00000000 simple_switch
80000290 g     F .first_task	0000002d lseek
0001027b g       .text	00000000 exception_handler_time
00012b3d g     F .text	0000001c do_handler_debug
0006a3d0 g     O .bss	00002000 stack
00011c53 g     F .text	00000060 sys_sleep
0001525c g     F .text	0000000e fs_init
00010e5c g     F .text	00000099 memory_free_page
00015811 g     F .text	000002db list_test
00010260 g       .text	00000000 exception_handler_control_exception
0006d000 g       *ABS*	00000000 s_first_task
0001131f g     F .text	00000028 task_remove_fd
00014bfd g     F .text	0000000a tty_control
000138a9 g     F .text	000000f9 console_init
00014ae1 g     F .text	0000011c tty_read
0001165b g     F .text	00000090 task_uninit
00010d52 g     F .text	000000b8 memory_alloc_for_page_dir
0001487b g     F .text	0000008d tty_fifo_get
000100d8 g       .text	00000000 exception_handler_bound_range
00014c0d g     F .text	00000066 tty_in
00012f70 g     F .text	000001b5 idt_init
00015699 g     F .text	00000082 sem_notify
00010f48 g     F .text	00000083 memory_copy_uvm_data
000141b6 g     F .text	0000004c dev_control
000145d0 g     F .text	000000ca do_handler_kbd
000128ea g     F .text	00000027 gdt_free
00012bc9 g     F .text	0000001c do_handler_invalid_opcode
0001014a g       .text	00000000 exception_handler_invalid_tss
00012df2 g     F .text	0000001c do_handler_fpu_error
000117d2 g     F .text	00000106 task_first_init
00012e2a g     F .text	0000001c do_handler_machine_check
80000242 g     F .first_task	0000002d write
00014f4d g     F .text	00000165 sys_open
800002de g     F .first_task	00000027 fstat
000151ac g     F .text	0000000a sys_isatty
00016491 g     F .text	0000008b list_insert_first
00013fd4 g     F .text	0000014a dev_open
00011b6d g     F .text	0000004b task_set_wakeup
00011966 g     F .text	0000002e task_ready_first
00010047 g       .text	00000000 exception_handler_divider
800000d2 g     F .first_task	0000004c sys_call
00010960 g     F .text	00000085 memory_creat_uvm
00015eb6 g     F .text	00000051 kernel_strncpy
00015131 g     F .text	0000004d sys_write
80000369 g     F .first_task	00000021 wait
0006d38a g       *ABS*	00000000 mem_free_start
0001526a g     F .text	00000058 kernel_init
000155ec g     F .text	00000042 sem_init
00010000 g       .text	00000000 _start
000160f5 g     F .text	0000019d kernel_vsprintf
000163e9 g     F .text	00000046 get_file_name
00010112 g       .text	00000000 exception_handler_device_unavailable
000100f5 g       .text	00000000 exception_handler_invalid_opcode
00014202 g     F .text	00000083 dev_close
0006d000 g       .first_task	00000000 e_data
80000215 g     F .first_task	0000002d read
00015427 g     F .text	00000091 mutex_lock
000112cc g     F .text	00000053 task_alloc_fd
00010209 g       .text	00000000 exception_handler_machine_check
000149f1 g     F .text	000000f0 tty_write
00012c1d g     F .text	0000001c do_handler_invalid_tss
000147e3 g     F .text	00000098 tty_fifo_put
000131bd g     F .text	00000094 idt_disable
0006d38a g       *ABS*	00000000 e_first_task
00011b11 g     F .text	0000005c task_set_sleep
000151c0 g     F .text	0000009c sys_dup
000107f6 g     F .text	000000b6 memory_creat_map
00012b59 g     F .text	0000001c do_handler_nmi
00014908 g     F .text	000000e9 tty_open
8000018b g     F .first_task	0000001b fork
000153da g     F .text	0000004d mutex_init
80000305 g     F .first_task	00000021 sbrk
00010226 g       .text	00000000 exception_handler_smd_exception
00010b72 g     F .text	000000e7 memory_destroy_uvm
00015b29 g     F .text	00000016 bitmap_byte_count
00012be5 g     F .text	0000001c do_handler_device_unavailable
000132a0 g     F .text	00000018 idt_enter_protection
000108ac g     F .text	000000b4 create_kernal_table
00011a06 g     F .text	0000010b task_slice_end
000109e5 g     F .text	0000018d memory_copy_uvm
00014c07 g     F .text	00000006 tty_close
000152c2 g     F .text	00000064 move_to_first_task
00013dc4 g     F .text	000000e6 console_write
80000326 g     F .first_task	00000021 dup
0001604d g     F .text	00000084 kernel_memcmp
00012e46 g     F .text	0000001c do_handler_smd_exception
000101b6 g       .text	00000000 exception_handler_page_fault
00012b05 g     F .text	0000001c do_handler_unknown
00010e3c g     F .text	00000020 memory_alloc_page
000101d1 g       .text	00000000 exception_handler_fpu_error
00011366 g     F .text	0000001b task_switch_from_to
000154b8 g     F .text	000000b8 mutex_unlock
00014c9c g     F .text	00000030 file_table_init
00014d50 g     F .text	00000042 file_free
0001199e g     F .text	00000068 task_switch
80000163 g     F .first_task	00000028 print_msg
00015f88 g     F .text	00000035 kernel_strlen
00011924 g     F .text	00000042 task_set_unready
00010064 g       .text	00000000 exception_handler_debug
00012703 g     F .text	000000bf segment_desc_set
00012bad g     F .text	0000001c do_handler_bound_range
000102ca g       .text	00000000 exception_handler_syscall
000165ab g     F .text	000000b1 list_remove_first
00017e28 g       .rodata	00000000 e_text
00015f07 g     F .text	00000081 kernel_strncmp
00015b3f g     F .text	00000094 bitmap_init
00010165 g       .text	00000000 exception_handler_segment_not_present
00015d74 g     F .text	000000fb bitmap_alloc_nbits
00014ccc g     F .text	00000084 file_alloc
000116f5 g     F .text	000000dd task_manager_init
000114f6 g     F .text	00000036 task_start
00010c59 g     F .text	000000f9 memory_init
000122b4 g     F .text	000001af sys_execve
000125b2 g     F .text	000000e2 sys_wait
00012463 g     F .text	0000014f sys_exit
00015af3 g     F .text	00000036 pannic
00014c73 g     F .text	00000029 tty_select
00013eaa g     F .text	00000006 console_close
00010ef5 g     F .text	00000053 memory_get_paddr
00012c55 g     F .text	0000001c do_handler_stack_segment_fault
00012b75 g     F .text	0000001c do_handler_breakpoint
80000347 g     F .first_task	00000022 _exit
00016809 g     F .text	0000009e log_printf
0001152c g     F .text	0000012f task_init
800001ee g     F .first_task	00000027 open
000160d1 g     F .text	00000024 kernel_sprintf
00011cb3 g     F .text	0000000d sys_getpid
00012875 g     F .text	00000075 gdt_alloc_desc
00016292 g     F .text	0000012a kernel_itoa
00016711 g     F .text	000000c9 list_remove
00012694 g     F .text	00000047 gate_desc_set
8000011e g     F .first_task	0000002a msleep
000132b8 g     F .text	00000011 idt_leave_protection
8000026f g     F .first_task	00000021 close
00010746 g     F .text	000000b0 find_pte
000146bb g     F .text	00000028 do_handler_time
00014745 g     F .text	00000018 time_init
00018060 g     O .data	0000002c dev_tty_desc



Disassembly of section .text:

00010000 <_start>:
*            [&boot_info]
*    esp ->  [返回地址]
*   所以要想访问到&boot_info，则只需从当前esp的位置偏移+4字节即可
*/
_start:
    mov %esp, %ebp      //栈空间最好只用ebp来进行偏移访问
   10000:	89 e5                	mov    %esp,%ebp
    mov 0x4(%ebp), %eax //将&boot_info的值存入eax中
   10002:	8b 45 04             	mov    0x4(%ebp),%eax

    push %eax           //外部函数将参数压入栈中，再进行函数调用
   10005:	50                   	push   %eax
    call kernel_init    //调用内核初始化函数
   10006:	e8 5f 52 00 00       	call   1526a <kernel_init>

    //完成内核初始化后，进行直接跳转，以替换cs寄存器中临时的内核代码段的选择子为此时内存中真正的内核代码段选择子
    //cs:KERNEL_SELECTOR_CS, ip:gdt_reload
    jmp $KERNEL_SELECTOR_CS, $gdt_reload    
   1000b:	ea 12 00 01 00 08 00 	ljmp   $0x8,$0x10012

00010012 <gdt_reload>:

gdt_reload:
    //替换其他段寄存器中临时的内核数据段的选择子为此时内存中真正的内核数据段的选择子
    mov $KERNEL_SELECTOR_DS, %ax
   10012:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10016:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10018:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001a:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001c:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001e:	8e e8                	mov    %eax,%gs

    //重新指定栈空间位置，不再使用0~0x7c00这部分空间
    //stack段已在下面预留了KERNEL_STACK_SIZE的空间大小，直接将最高地址赋值给esp，esp便可使用这片空间
    mov $(stack + KERNEL_STACK_SIZE), %esp
   10020:	bc d0 c3 06 00       	mov    $0x6c3d0,%esp

    //继续初始化内核
    //TODO:后序再来说明该函数的作用
    jmp init_main 
   10025:	e9 fc 52 00 00       	jmp    15326 <init_main>

0001002a <exception_handler_unknown>:
//宏结束标志
.endm

//使用定义的异常宏 ,以下都是不可屏蔽中断，cpu必须处理该中断请求。
//                |异常类型|       |IDT索引| |错误码|
exception_handler unknown,              -1, 0    //未知异常
   1002a:	6a 00                	push   $0x0
   1002c:	6a ff                	push   $0xffffffff
   1002e:	60                   	pusha  
   1002f:	1e                   	push   %ds
   10030:	06                   	push   %es
   10031:	0f a0                	push   %fs
   10033:	0f a8                	push   %gs
   10035:	54                   	push   %esp
   10036:	e8 ca 2a 00 00       	call   12b05 <do_handler_unknown>
   1003b:	5c                   	pop    %esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider,              0,  0    //除0异常
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 c9 2a 00 00       	call   12b21 <do_handler_divider>
   10058:	5c                   	pop    %esp
   10059:	0f a9                	pop    %gs
   1005b:	0f a1                	pop    %fs
   1005d:	07                   	pop    %es
   1005e:	1f                   	pop    %ds
   1005f:	61                   	popa   
   10060:	83 c4 08             	add    $0x8,%esp
   10063:	cf                   	iret   

00010064 <exception_handler_debug>:
exception_handler debug,                1,  0    //debug异常
   10064:	6a 00                	push   $0x0
   10066:	6a 01                	push   $0x1
   10068:	60                   	pusha  
   10069:	1e                   	push   %ds
   1006a:	06                   	push   %es
   1006b:	0f a0                	push   %fs
   1006d:	0f a8                	push   %gs
   1006f:	54                   	push   %esp
   10070:	e8 c8 2a 00 00       	call   12b3d <do_handler_debug>
   10075:	5c                   	pop    %esp
   10076:	0f a9                	pop    %gs
   10078:	0f a1                	pop    %fs
   1007a:	07                   	pop    %es
   1007b:	1f                   	pop    %ds
   1007c:	61                   	popa   
   1007d:	83 c4 08             	add    $0x8,%esp
   10080:	cf                   	iret   

00010081 <exception_handler_nmi>:
exception_handler nmi,                  2,  0
   10081:	6a 00                	push   $0x0
   10083:	6a 02                	push   $0x2
   10085:	60                   	pusha  
   10086:	1e                   	push   %ds
   10087:	06                   	push   %es
   10088:	0f a0                	push   %fs
   1008a:	0f a8                	push   %gs
   1008c:	54                   	push   %esp
   1008d:	e8 c7 2a 00 00       	call   12b59 <do_handler_nmi>
   10092:	5c                   	pop    %esp
   10093:	0f a9                	pop    %gs
   10095:	0f a1                	pop    %fs
   10097:	07                   	pop    %es
   10098:	1f                   	pop    %ds
   10099:	61                   	popa   
   1009a:	83 c4 08             	add    $0x8,%esp
   1009d:	cf                   	iret   

0001009e <exception_handler_breakpoint>:
exception_handler breakpoint,           3,  0
   1009e:	6a 00                	push   $0x0
   100a0:	6a 03                	push   $0x3
   100a2:	60                   	pusha  
   100a3:	1e                   	push   %ds
   100a4:	06                   	push   %es
   100a5:	0f a0                	push   %fs
   100a7:	0f a8                	push   %gs
   100a9:	54                   	push   %esp
   100aa:	e8 c6 2a 00 00       	call   12b75 <do_handler_breakpoint>
   100af:	5c                   	pop    %esp
   100b0:	0f a9                	pop    %gs
   100b2:	0f a1                	pop    %fs
   100b4:	07                   	pop    %es
   100b5:	1f                   	pop    %ds
   100b6:	61                   	popa   
   100b7:	83 c4 08             	add    $0x8,%esp
   100ba:	cf                   	iret   

000100bb <exception_handler_overflow>:
exception_handler overflow,             4,  0
   100bb:	6a 00                	push   $0x0
   100bd:	6a 04                	push   $0x4
   100bf:	60                   	pusha  
   100c0:	1e                   	push   %ds
   100c1:	06                   	push   %es
   100c2:	0f a0                	push   %fs
   100c4:	0f a8                	push   %gs
   100c6:	54                   	push   %esp
   100c7:	e8 c5 2a 00 00       	call   12b91 <do_handler_overflow>
   100cc:	5c                   	pop    %esp
   100cd:	0f a9                	pop    %gs
   100cf:	0f a1                	pop    %fs
   100d1:	07                   	pop    %es
   100d2:	1f                   	pop    %ds
   100d3:	61                   	popa   
   100d4:	83 c4 08             	add    $0x8,%esp
   100d7:	cf                   	iret   

000100d8 <exception_handler_bound_range>:
exception_handler bound_range,          5,  0
   100d8:	6a 00                	push   $0x0
   100da:	6a 05                	push   $0x5
   100dc:	60                   	pusha  
   100dd:	1e                   	push   %ds
   100de:	06                   	push   %es
   100df:	0f a0                	push   %fs
   100e1:	0f a8                	push   %gs
   100e3:	54                   	push   %esp
   100e4:	e8 c4 2a 00 00       	call   12bad <do_handler_bound_range>
   100e9:	5c                   	pop    %esp
   100ea:	0f a9                	pop    %gs
   100ec:	0f a1                	pop    %fs
   100ee:	07                   	pop    %es
   100ef:	1f                   	pop    %ds
   100f0:	61                   	popa   
   100f1:	83 c4 08             	add    $0x8,%esp
   100f4:	cf                   	iret   

000100f5 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode,       6,  0
   100f5:	6a 00                	push   $0x0
   100f7:	6a 06                	push   $0x6
   100f9:	60                   	pusha  
   100fa:	1e                   	push   %ds
   100fb:	06                   	push   %es
   100fc:	0f a0                	push   %fs
   100fe:	0f a8                	push   %gs
   10100:	54                   	push   %esp
   10101:	e8 c3 2a 00 00       	call   12bc9 <do_handler_invalid_opcode>
   10106:	5c                   	pop    %esp
   10107:	0f a9                	pop    %gs
   10109:	0f a1                	pop    %fs
   1010b:	07                   	pop    %es
   1010c:	1f                   	pop    %ds
   1010d:	61                   	popa   
   1010e:	83 c4 08             	add    $0x8,%esp
   10111:	cf                   	iret   

00010112 <exception_handler_device_unavailable>:
exception_handler device_unavailable,   7,  0
   10112:	6a 00                	push   $0x0
   10114:	6a 07                	push   $0x7
   10116:	60                   	pusha  
   10117:	1e                   	push   %ds
   10118:	06                   	push   %es
   10119:	0f a0                	push   %fs
   1011b:	0f a8                	push   %gs
   1011d:	54                   	push   %esp
   1011e:	e8 c2 2a 00 00       	call   12be5 <do_handler_device_unavailable>
   10123:	5c                   	pop    %esp
   10124:	0f a9                	pop    %gs
   10126:	0f a1                	pop    %fs
   10128:	07                   	pop    %es
   10129:	1f                   	pop    %ds
   1012a:	61                   	popa   
   1012b:	83 c4 08             	add    $0x8,%esp
   1012e:	cf                   	iret   

0001012f <exception_handler_double_fault>:
exception_handler double_fault,         8,  1
   1012f:	6a 08                	push   $0x8
   10131:	60                   	pusha  
   10132:	1e                   	push   %ds
   10133:	06                   	push   %es
   10134:	0f a0                	push   %fs
   10136:	0f a8                	push   %gs
   10138:	54                   	push   %esp
   10139:	e8 c3 2a 00 00       	call   12c01 <do_handler_double_fault>
   1013e:	5c                   	pop    %esp
   1013f:	0f a9                	pop    %gs
   10141:	0f a1                	pop    %fs
   10143:	07                   	pop    %es
   10144:	1f                   	pop    %ds
   10145:	61                   	popa   
   10146:	83 c4 08             	add    $0x8,%esp
   10149:	cf                   	iret   

0001014a <exception_handler_invalid_tss>:
exception_handler invalid_tss,          10, 1
   1014a:	6a 0a                	push   $0xa
   1014c:	60                   	pusha  
   1014d:	1e                   	push   %ds
   1014e:	06                   	push   %es
   1014f:	0f a0                	push   %fs
   10151:	0f a8                	push   %gs
   10153:	54                   	push   %esp
   10154:	e8 c4 2a 00 00       	call   12c1d <do_handler_invalid_tss>
   10159:	5c                   	pop    %esp
   1015a:	0f a9                	pop    %gs
   1015c:	0f a1                	pop    %fs
   1015e:	07                   	pop    %es
   1015f:	1f                   	pop    %ds
   10160:	61                   	popa   
   10161:	83 c4 08             	add    $0x8,%esp
   10164:	cf                   	iret   

00010165 <exception_handler_segment_not_present>:
exception_handler segment_not_present,  11, 1
   10165:	6a 0b                	push   $0xb
   10167:	60                   	pusha  
   10168:	1e                   	push   %ds
   10169:	06                   	push   %es
   1016a:	0f a0                	push   %fs
   1016c:	0f a8                	push   %gs
   1016e:	54                   	push   %esp
   1016f:	e8 c5 2a 00 00       	call   12c39 <do_handler_segment_not_present>
   10174:	5c                   	pop    %esp
   10175:	0f a9                	pop    %gs
   10177:	0f a1                	pop    %fs
   10179:	07                   	pop    %es
   1017a:	1f                   	pop    %ds
   1017b:	61                   	popa   
   1017c:	83 c4 08             	add    $0x8,%esp
   1017f:	cf                   	iret   

00010180 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,  12, 1
   10180:	6a 0c                	push   $0xc
   10182:	60                   	pusha  
   10183:	1e                   	push   %ds
   10184:	06                   	push   %es
   10185:	0f a0                	push   %fs
   10187:	0f a8                	push   %gs
   10189:	54                   	push   %esp
   1018a:	e8 c6 2a 00 00       	call   12c55 <do_handler_stack_segment_fault>
   1018f:	5c                   	pop    %esp
   10190:	0f a9                	pop    %gs
   10192:	0f a1                	pop    %fs
   10194:	07                   	pop    %es
   10195:	1f                   	pop    %ds
   10196:	61                   	popa   
   10197:	83 c4 08             	add    $0x8,%esp
   1019a:	cf                   	iret   

0001019b <exception_handler_general_protection>:
exception_handler general_protection,   13, 1
   1019b:	6a 0d                	push   $0xd
   1019d:	60                   	pusha  
   1019e:	1e                   	push   %ds
   1019f:	06                   	push   %es
   101a0:	0f a0                	push   %fs
   101a2:	0f a8                	push   %gs
   101a4:	54                   	push   %esp
   101a5:	e8 c7 2a 00 00       	call   12c71 <do_handler_general_protection>
   101aa:	5c                   	pop    %esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa   
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret   

000101b6 <exception_handler_page_fault>:
exception_handler page_fault,           14, 1
   101b6:	6a 0e                	push   $0xe
   101b8:	60                   	pusha  
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 5d 2b 00 00       	call   12d22 <do_handler_page_fault>
   101c5:	5c                   	pop    %esp
   101c6:	0f a9                	pop    %gs
   101c8:	0f a1                	pop    %fs
   101ca:	07                   	pop    %es
   101cb:	1f                   	pop    %ds
   101cc:	61                   	popa   
   101cd:	83 c4 08             	add    $0x8,%esp
   101d0:	cf                   	iret   

000101d1 <exception_handler_fpu_error>:
exception_handler fpu_error,            16, 0
   101d1:	6a 00                	push   $0x0
   101d3:	6a 10                	push   $0x10
   101d5:	60                   	pusha  
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 10 2c 00 00       	call   12df2 <do_handler_fpu_error>
   101e2:	5c                   	pop    %esp
   101e3:	0f a9                	pop    %gs
   101e5:	0f a1                	pop    %fs
   101e7:	07                   	pop    %es
   101e8:	1f                   	pop    %ds
   101e9:	61                   	popa   
   101ea:	83 c4 08             	add    $0x8,%esp
   101ed:	cf                   	iret   

000101ee <exception_handler_alignment_check>:
exception_handler alignment_check,      17, 1
   101ee:	6a 11                	push   $0x11
   101f0:	60                   	pusha  
   101f1:	1e                   	push   %ds
   101f2:	06                   	push   %es
   101f3:	0f a0                	push   %fs
   101f5:	0f a8                	push   %gs
   101f7:	54                   	push   %esp
   101f8:	e8 11 2c 00 00       	call   12e0e <do_handler_alignment_check>
   101fd:	5c                   	pop    %esp
   101fe:	0f a9                	pop    %gs
   10200:	0f a1                	pop    %fs
   10202:	07                   	pop    %es
   10203:	1f                   	pop    %ds
   10204:	61                   	popa   
   10205:	83 c4 08             	add    $0x8,%esp
   10208:	cf                   	iret   

00010209 <exception_handler_machine_check>:
exception_handler machine_check,        18, 0
   10209:	6a 00                	push   $0x0
   1020b:	6a 12                	push   $0x12
   1020d:	60                   	pusha  
   1020e:	1e                   	push   %ds
   1020f:	06                   	push   %es
   10210:	0f a0                	push   %fs
   10212:	0f a8                	push   %gs
   10214:	54                   	push   %esp
   10215:	e8 10 2c 00 00       	call   12e2a <do_handler_machine_check>
   1021a:	5c                   	pop    %esp
   1021b:	0f a9                	pop    %gs
   1021d:	0f a1                	pop    %fs
   1021f:	07                   	pop    %es
   10220:	1f                   	pop    %ds
   10221:	61                   	popa   
   10222:	83 c4 08             	add    $0x8,%esp
   10225:	cf                   	iret   

00010226 <exception_handler_smd_exception>:
exception_handler smd_exception,        19, 0
   10226:	6a 00                	push   $0x0
   10228:	6a 13                	push   $0x13
   1022a:	60                   	pusha  
   1022b:	1e                   	push   %ds
   1022c:	06                   	push   %es
   1022d:	0f a0                	push   %fs
   1022f:	0f a8                	push   %gs
   10231:	54                   	push   %esp
   10232:	e8 0f 2c 00 00       	call   12e46 <do_handler_smd_exception>
   10237:	5c                   	pop    %esp
   10238:	0f a9                	pop    %gs
   1023a:	0f a1                	pop    %fs
   1023c:	07                   	pop    %es
   1023d:	1f                   	pop    %ds
   1023e:	61                   	popa   
   1023f:	83 c4 08             	add    $0x8,%esp
   10242:	cf                   	iret   

00010243 <exception_handler_virtual_exception>:
exception_handler virtual_exception,    20, 0
   10243:	6a 00                	push   $0x0
   10245:	6a 14                	push   $0x14
   10247:	60                   	pusha  
   10248:	1e                   	push   %ds
   10249:	06                   	push   %es
   1024a:	0f a0                	push   %fs
   1024c:	0f a8                	push   %gs
   1024e:	54                   	push   %esp
   1024f:	e8 0e 2c 00 00       	call   12e62 <do_handler_virtual_exception>
   10254:	5c                   	pop    %esp
   10255:	0f a9                	pop    %gs
   10257:	0f a1                	pop    %fs
   10259:	07                   	pop    %es
   1025a:	1f                   	pop    %ds
   1025b:	61                   	popa   
   1025c:	83 c4 08             	add    $0x8,%esp
   1025f:	cf                   	iret   

00010260 <exception_handler_control_exception>:
exception_handler control_exception,    21, 1
   10260:	6a 15                	push   $0x15
   10262:	60                   	pusha  
   10263:	1e                   	push   %ds
   10264:	06                   	push   %es
   10265:	0f a0                	push   %fs
   10267:	0f a8                	push   %gs
   10269:	54                   	push   %esp
   1026a:	e8 0f 2c 00 00       	call   12e7e <do_handler_control_exception>
   1026f:	5c                   	pop    %esp
   10270:	0f a9                	pop    %gs
   10272:	0f a1                	pop    %fs
   10274:	07                   	pop    %es
   10275:	1f                   	pop    %ds
   10276:	61                   	popa   
   10277:	83 c4 08             	add    $0x8,%esp
   1027a:	cf                   	iret   

0001027b <exception_handler_time>:

//定时器的中断处理函数
exception_handler time,                 0x20, 0 
   1027b:	6a 00                	push   $0x0
   1027d:	6a 20                	push   $0x20
   1027f:	60                   	pusha  
   10280:	1e                   	push   %ds
   10281:	06                   	push   %es
   10282:	0f a0                	push   %fs
   10284:	0f a8                	push   %gs
   10286:	54                   	push   %esp
   10287:	e8 2f 44 00 00       	call   146bb <do_handler_time>
   1028c:	5c                   	pop    %esp
   1028d:	0f a9                	pop    %gs
   1028f:	0f a1                	pop    %fs
   10291:	07                   	pop    %es
   10292:	1f                   	pop    %ds
   10293:	61                   	popa   
   10294:	83 c4 08             	add    $0x8,%esp
   10297:	cf                   	iret   

00010298 <exception_handler_kbd>:
//键盘的中断处理函数
exception_handler kbd,                 0x21, 0 
   10298:	6a 00                	push   $0x0
   1029a:	6a 21                	push   $0x21
   1029c:	60                   	pusha  
   1029d:	1e                   	push   %ds
   1029e:	06                   	push   %es
   1029f:	0f a0                	push   %fs
   102a1:	0f a8                	push   %gs
   102a3:	54                   	push   %esp
   102a4:	e8 27 43 00 00       	call   145d0 <do_handler_kbd>
   102a9:	5c                   	pop    %esp
   102aa:	0f a9                	pop    %gs
   102ac:	0f a1                	pop    %fs
   102ae:	07                   	pop    %es
   102af:	1f                   	pop    %ds
   102b0:	61                   	popa   
   102b1:	83 c4 08             	add    $0x8,%esp
   102b4:	cf                   	iret   

000102b5 <simple_switch>:
//TODO:该部分为另一种任务切换时cpu上下文环境的保存方法，并未被调用
    .text
    .global simple_switch
simple_switch:  //simple_switch(from, to)
    //1.获取参数，跳过4字节的 eip
    mov 8(%esp), %edx   //获取 to, 地址(指针) --> 目标任务的栈空间对应的 esp 的值
   102b5:	8b 54 24 08          	mov    0x8(%esp),%edx
    mov 4(%esp), %eax   //获取 from, 地址(指针) --> 当前任务的栈空间对应的 esp 的值
   102b9:	8b 44 24 04          	mov    0x4(%esp),%eax


    //2.被调用者保存当前任务的 ebp, ebx, esi, edi 到当前任务的栈中
    //eax, ecx, edx, eip, eflags 已由调用者压入当前任务的栈中
    push %ebp
   102bd:	55                   	push   %ebp
    push %ebx
   102be:	53                   	push   %ebx
    push %esi
   102bf:	56                   	push   %esi
    push %edi
   102c0:	57                   	push   %edi

    //3.更新当前任务栈空间的 esp
    mov %esp, (%eax)
   102c1:	89 20                	mov    %esp,(%eax)

    //3.进行任务栈的切换
    mov (%edx), %esp
   102c3:	8b 22                	mov    (%edx),%esp


    //4.恢复切换后的任务状态，ebp, ebx, esi, edi 手动恢复
    //eax, ecx, edx, eip, eflags, 是在当前任务(c函数)调用simple_switch时已压入当前任务栈中，
    //调用 ret 后会自行弹出并恢复
    pop %edi
   102c5:	5f                   	pop    %edi
    pop %esi
   102c6:	5e                   	pop    %esi
    pop %ebx
   102c7:	5b                   	pop    %ebx
    pop %ebp
   102c8:	5d                   	pop    %ebp

    //5.恢复切换后的任务执行流，相当于此时 esp ->[eip]， 即 pop %eip
    ret 
   102c9:	c3                   	ret    

000102ca <exception_handler_syscall>:

    //注意：cpu只自动保护了 cs eip ss esp寄存器，其它寄存器没有被维护，可能在调用门处理函数里被修改
    //所以需要手动压入，即保护cpu上下文环境，也为fork系统调用提供cpu上下文环境

    //1.用 pusha 指令压入8个通用寄存器
    pusha
   102ca:	60                   	pusha  

    //2.压入其他段寄存器
    push %ds
   102cb:	1e                   	push   %ds
    push %es
   102cc:	06                   	push   %es
    push %fs
   102cd:	0f a0                	push   %fs
    push %gs
   102cf:	0f a8                	push   %gs

    //3.压入eflags寄存器
    pushf
   102d1:	9c                   	pushf  

    //4.将当前 esp 的值压入栈中，当作调用门栈帧的起始地址
    push %esp
   102d2:	54                   	push   %esp

    //5.调用系统调用处理函数，按id进一步判断需要进行的系统调用并执行
    call do_handler_syscall
   102d3:	e8 0b 30 00 00       	call   132e3 <do_handler_syscall>


    //5.恢复现场
    pop %esp
   102d8:	5c                   	pop    %esp
    popf
   102d9:	9d                   	popf   
    pop %gs
   102da:	0f a9                	pop    %gs
    pop %fs
   102dc:	0f a1                	pop    %fs
    pop %es
   102de:	07                   	pop    %es
    pop %ds
   102df:	1f                   	pop    %ds
    popa
   102e0:	61                   	popa   
    //如果要变换特权级，它会加载被调用者堆栈上的CS和EIP，并增加ESP跳过参数，
    //然后ESP将指向被保存过的调用者SS和ESP¹。
    //它还会对目标代码段特权级和目标栈段特权级做严格的检查，
    //要求代码段可执行特权级CPL (即DPL) == 栈段选择子请求特权级RPL == 栈段目标内存特权级DPL²。
    
    retf $(5*4) 
   102e1:	ca 14 00             	lret   $0x14

000102e4 <down2>:
 * 
 * @param size 
 * @param bound 一般取2的n次方
 * @return uint32_t 
 */
static inline uint32_t down2(uint32_t size, uint32_t bound) {
   102e4:	55                   	push   %ebp
   102e5:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);  
   102e7:	8b 45 0c             	mov    0xc(%ebp),%eax
   102ea:	f7 d8                	neg    %eax
   102ec:	23 45 08             	and    0x8(%ebp),%eax
}
   102ef:	5d                   	pop    %ebp
   102f0:	c3                   	ret    

000102f1 <up2>:
 * 
 * @param size 
 * @param bound 一般取2的n次方
 * @return uint32_t 
 */
static inline uint32_t up2(uint32_t size, uint32_t bound) {
   102f1:	55                   	push   %ebp
   102f2:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   102f4:	8b 55 08             	mov    0x8(%ebp),%edx
   102f7:	8b 45 0c             	mov    0xc(%ebp),%eax
   102fa:	01 d0                	add    %edx,%eax
   102fc:	8d 50 ff             	lea    -0x1(%eax),%edx
   102ff:	8b 45 0c             	mov    0xc(%ebp),%eax
   10302:	f7 d8                	neg    %eax
   10304:	21 d0                	and    %edx,%eax
}
   10306:	5d                   	pop    %ebp
   10307:	c3                   	ret    

00010308 <write_cr3>:
 * 它含有存放页目录表页面的物理地址，
 * 因此 CR3 也被称为 PDBR（Page-Directory Base address Register）。
 *
 * @param data
 */
static inline void write_cr3(uint32_t data) {
   10308:	55                   	push   %ebp
   10309:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("mov %[v], %%cr3" : : [v] "r"(data));
   1030b:	8b 45 08             	mov    0x8(%ebp),%eax
   1030e:	0f 22 d8             	mov    %eax,%cr3
}
   10311:	90                   	nop
   10312:	5d                   	pop    %ebp
   10313:	c3                   	ret    

00010314 <pde_index>:
 * @brief 获取虚拟地址的高10位，及对应的页目录项在页目录表中的索引
 * 
 * @param vstart 
 * @return uint32_t 
 */
static inline uint32_t pde_index(uint32_t vstart) {
   10314:	55                   	push   %ebp
   10315:	89 e5                	mov    %esp,%ebp
    return (vstart >> 22);
   10317:	8b 45 08             	mov    0x8(%ebp),%eax
   1031a:	c1 e8 16             	shr    $0x16,%eax
}
   1031d:	5d                   	pop    %ebp
   1031e:	c3                   	ret    

0001031f <pte_index>:
 * @brief 获取虚拟地址的次10位，及对应的页表项在页表中的索引
 * 
 * @param vstart 
 * @return uint32_t 
 */
static inline uint32_t pte_index(uint32_t vstart) {
   1031f:	55                   	push   %ebp
   10320:	89 e5                	mov    %esp,%ebp
    return (vstart >> 12) & 0x3ff;
   10322:	8b 45 08             	mov    0x8(%ebp),%eax
   10325:	c1 e8 0c             	shr    $0xc,%eax
   10328:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   1032d:	5d                   	pop    %ebp
   1032e:	c3                   	ret    

0001032f <pde_to_pt_addr>:
 * @brief 获取页目录项中对应的页表的起始地址，及该页表第一个页表项的地址
 * 
 * @param pde 页目录项
 * @return uint32_t 返回的页表的地址
 */
static inline uint32_t pde_to_pt_addr(pde_t *pde) {
   1032f:	55                   	push   %ebp
   10330:	89 e5                	mov    %esp,%ebp
    //高20位为页表的物理地址的有效位，将其左移12位，及按4kb对齐后才是该页的物理地址
    return pde->phy_pt_addr << 12;
   10332:	8b 45 08             	mov    0x8(%ebp),%eax
   10335:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   10339:	c0 ea 04             	shr    $0x4,%dl
   1033c:	0f b6 ca             	movzbl %dl,%ecx
   1033f:	0f b6 50 02          	movzbl 0x2(%eax),%edx
   10343:	c1 e2 04             	shl    $0x4,%edx
   10346:	09 ca                	or     %ecx,%edx
   10348:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   1034c:	c1 e0 0c             	shl    $0xc,%eax
   1034f:	09 d0                	or     %edx,%eax
   10351:	c1 e0 0c             	shl    $0xc,%eax
}
   10354:	5d                   	pop    %ebp
   10355:	c3                   	ret    

00010356 <pte_to_pg_addr>:
 * @brief 获取页表项中对应的页的起始地址
 * 
 * @param pte 页表项
 * @return uint32_t 返回的页的地址
 */
static inline uint32_t pte_to_pg_addr(pte_t *pte) {
   10356:	55                   	push   %ebp
   10357:	89 e5                	mov    %esp,%ebp
    //高20位为页的物理地址有效位，将其左移12位，及按4kb对齐后才是该页的物理地址
    return pte->phy_page_addr << 12;
   10359:	8b 45 08             	mov    0x8(%ebp),%eax
   1035c:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   10360:	c0 ea 04             	shr    $0x4,%dl
   10363:	0f b6 ca             	movzbl %dl,%ecx
   10366:	0f b6 50 02          	movzbl 0x2(%eax),%edx
   1036a:	c1 e2 04             	shl    $0x4,%edx
   1036d:	09 ca                	or     %ecx,%edx
   1036f:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   10373:	c1 e0 0c             	shl    $0xc,%eax
   10376:	09 d0                	or     %edx,%eax
   10378:	c1 e0 0c             	shl    $0xc,%eax
}
   1037b:	5d                   	pop    %ebp
   1037c:	c3                   	ret    

0001037d <get_pte_privilege>:
 * @brief 获取页表项的权限
 * 
 * @param pte 
 * @return uint32_t 
 */
static inline uint32_t get_pte_privilege(pte_t *pte) {
   1037d:	55                   	push   %ebp
   1037e:	89 e5                	mov    %esp,%ebp
    return pte->v & 0x1ff;  //直接获取低9位即为所有权限
   10380:	8b 45 08             	mov    0x8(%ebp),%eax
   10383:	8b 00                	mov    (%eax),%eax
   10385:	25 ff 01 00 00       	and    $0x1ff,%eax
}
   1038a:	5d                   	pop    %ebp
   1038b:	c3                   	ret    

0001038c <mmu_set_page_dir>:
/**
 * @brief 设置页目录表的起始地址，将起始地址写入CR3寄存器
 * 
 * @param paddr 页目录表的物理起始地址
 */
static inline void mmu_set_page_dir(uint32_t paddr) {
   1038c:	55                   	push   %ebp
   1038d:	89 e5                	mov    %esp,%ebp

    //设置cr3寄存器的高20位为页目录表的地址，因为按4kb对齐，所以
    //页目录表的起始地址page_dir的高20位才为有效位，低12位为0，将cr3的低12位就设置为0
    write_cr3(paddr);
   1038f:	ff 75 08             	push   0x8(%ebp)
   10392:	e8 71 ff ff ff       	call   10308 <write_cr3>
   10397:	83 c4 04             	add    $0x4,%esp
}
   1039a:	90                   	nop
   1039b:	c9                   	leave  
   1039c:	c3                   	ret    

0001039d <page_index>:
 * @brief 获取页的索引
 * 
 * @param alloc 
 * @param page_addr 
 */
static inline int page_index(addr_alloc_t *alloc, uint32_t page_addr) {
   1039d:	55                   	push   %ebp
   1039e:	89 e5                	mov    %esp,%ebp
   103a0:	53                   	push   %ebx
  return (page_addr - alloc->start) / alloc->page_size;
   103a1:	8b 45 08             	mov    0x8(%ebp),%eax
   103a4:	8b 50 1c             	mov    0x1c(%eax),%edx
   103a7:	8b 45 0c             	mov    0xc(%ebp),%eax
   103aa:	29 d0                	sub    %edx,%eax
   103ac:	89 c1                	mov    %eax,%ecx
   103ae:	8b 45 08             	mov    0x8(%ebp),%eax
   103b1:	8b 58 24             	mov    0x24(%eax),%ebx
   103b4:	89 c8                	mov    %ecx,%eax
   103b6:	ba 00 00 00 00       	mov    $0x0,%edx
   103bb:	f7 f3                	div    %ebx
}
   103bd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   103c0:	c9                   	leave  
   103c1:	c3                   	ret    

000103c2 <page_ref_add>:
 * @brief 为页的引用计数+1
 * 
 * @param alloc 
 * @param page_addr 页起始地址
 */
static inline void page_ref_add(addr_alloc_t *alloc, uint32_t page_addr) {
   103c2:	55                   	push   %ebp
   103c3:	89 e5                	mov    %esp,%ebp
   103c5:	83 ec 18             	sub    $0x18,%esp
  //计算出页的索引
  int index = page_index(alloc, page_addr);
   103c8:	ff 75 0c             	push   0xc(%ebp)
   103cb:	ff 75 08             	push   0x8(%ebp)
   103ce:	e8 ca ff ff ff       	call   1039d <page_index>
   103d3:	83 c4 08             	add    $0x8,%esp
   103d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
  
  mutex_lock(&alloc->mutex);
   103d9:	8b 45 08             	mov    0x8(%ebp),%eax
   103dc:	83 ec 0c             	sub    $0xc,%esp
   103df:	50                   	push   %eax
   103e0:	e8 42 50 00 00       	call   15427 <mutex_lock>
   103e5:	83 c4 10             	add    $0x10,%esp
  //引用计数+1
  alloc->page_ref[index]++;
   103e8:	8b 55 08             	mov    0x8(%ebp),%edx
   103eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   103ee:	01 d0                	add    %edx,%eax
   103f0:	83 c0 28             	add    $0x28,%eax
   103f3:	0f b6 00             	movzbl (%eax),%eax
   103f6:	8d 50 01             	lea    0x1(%eax),%edx
   103f9:	8b 4d 08             	mov    0x8(%ebp),%ecx
   103fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   103ff:	01 c8                	add    %ecx,%eax
   10401:	83 c0 28             	add    $0x28,%eax
   10404:	88 10                	mov    %dl,(%eax)

  mutex_unlock(&alloc->mutex);
   10406:	8b 45 08             	mov    0x8(%ebp),%eax
   10409:	83 ec 0c             	sub    $0xc,%esp
   1040c:	50                   	push   %eax
   1040d:	e8 a6 50 00 00       	call   154b8 <mutex_unlock>
   10412:	83 c4 10             	add    $0x10,%esp
 }
   10415:	90                   	nop
   10416:	c9                   	leave  
   10417:	c3                   	ret    

00010418 <page_ref_sub>:
 * @brief 页的引用计数-1
 * 
 * @param alloc 
 * @param page_addr 
 */
static inline void page_ref_sub(addr_alloc_t *alloc, uint32_t page_addr) {
   10418:	55                   	push   %ebp
   10419:	89 e5                	mov    %esp,%ebp
   1041b:	83 ec 18             	sub    $0x18,%esp
  //计算出页的索引
  int index = page_index(alloc, page_addr);
   1041e:	ff 75 0c             	push   0xc(%ebp)
   10421:	ff 75 08             	push   0x8(%ebp)
   10424:	e8 74 ff ff ff       	call   1039d <page_index>
   10429:	83 c4 08             	add    $0x8,%esp
   1042c:	89 45 f4             	mov    %eax,-0xc(%ebp)

  mutex_lock(&alloc->mutex);
   1042f:	8b 45 08             	mov    0x8(%ebp),%eax
   10432:	83 ec 0c             	sub    $0xc,%esp
   10435:	50                   	push   %eax
   10436:	e8 ec 4f 00 00       	call   15427 <mutex_lock>
   1043b:	83 c4 10             	add    $0x10,%esp
  //引用计数-1
  if (alloc->page_ref[index] > 0) 
   1043e:	8b 55 08             	mov    0x8(%ebp),%edx
   10441:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10444:	01 d0                	add    %edx,%eax
   10446:	83 c0 28             	add    $0x28,%eax
   10449:	0f b6 00             	movzbl (%eax),%eax
   1044c:	84 c0                	test   %al,%al
   1044e:	74 1e                	je     1046e <page_ref_sub+0x56>
      alloc->page_ref[index]--;    
   10450:	8b 55 08             	mov    0x8(%ebp),%edx
   10453:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10456:	01 d0                	add    %edx,%eax
   10458:	83 c0 28             	add    $0x28,%eax
   1045b:	0f b6 00             	movzbl (%eax),%eax
   1045e:	8d 50 ff             	lea    -0x1(%eax),%edx
   10461:	8b 4d 08             	mov    0x8(%ebp),%ecx
   10464:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10467:	01 c8                	add    %ecx,%eax
   10469:	83 c0 28             	add    $0x28,%eax
   1046c:	88 10                	mov    %dl,(%eax)

  mutex_unlock(&alloc->mutex);
   1046e:	8b 45 08             	mov    0x8(%ebp),%eax
   10471:	83 ec 0c             	sub    $0xc,%esp
   10474:	50                   	push   %eax
   10475:	e8 3e 50 00 00       	call   154b8 <mutex_unlock>
   1047a:	83 c4 10             	add    $0x10,%esp
 }
   1047d:	90                   	nop
   1047e:	c9                   	leave  
   1047f:	c3                   	ret    

00010480 <get_page_ref>:
 * @brief 获取页的引用计数
 * 
 * @param alloc 
 * @param page_addr 
 */
static inline int get_page_ref(addr_alloc_t *alloc, uint32_t page_addr) {
   10480:	55                   	push   %ebp
   10481:	89 e5                	mov    %esp,%ebp
   10483:	83 ec 18             	sub    $0x18,%esp
    //计算出页的索引
  int index = page_index(alloc, page_addr);
   10486:	ff 75 0c             	push   0xc(%ebp)
   10489:	ff 75 08             	push   0x8(%ebp)
   1048c:	e8 0c ff ff ff       	call   1039d <page_index>
   10491:	83 c4 08             	add    $0x8,%esp
   10494:	89 45 f4             	mov    %eax,-0xc(%ebp)

  mutex_lock(&alloc->mutex);
   10497:	8b 45 08             	mov    0x8(%ebp),%eax
   1049a:	83 ec 0c             	sub    $0xc,%esp
   1049d:	50                   	push   %eax
   1049e:	e8 84 4f 00 00       	call   15427 <mutex_lock>
   104a3:	83 c4 10             	add    $0x10,%esp

  int ref = alloc->page_ref[index];
   104a6:	8b 55 08             	mov    0x8(%ebp),%edx
   104a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   104ac:	01 d0                	add    %edx,%eax
   104ae:	83 c0 28             	add    $0x28,%eax
   104b1:	0f b6 00             	movzbl (%eax),%eax
   104b4:	0f b6 c0             	movzbl %al,%eax
   104b7:	89 45 f0             	mov    %eax,-0x10(%ebp)

  mutex_unlock(&alloc->mutex);
   104ba:	8b 45 08             	mov    0x8(%ebp),%eax
   104bd:	83 ec 0c             	sub    $0xc,%esp
   104c0:	50                   	push   %eax
   104c1:	e8 f2 4f 00 00       	call   154b8 <mutex_unlock>
   104c6:	83 c4 10             	add    $0x10,%esp

  return ref;
   104c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   104cc:	c9                   	leave  
   104cd:	c3                   	ret    

000104ce <clear_page_ref>:
 * @brief 清除所有页的引用
 * 
 * @param alloc 
 * @return int 
 */
static inline void clear_page_ref(addr_alloc_t *alloc) {
   104ce:	55                   	push   %ebp
   104cf:	89 e5                	mov    %esp,%ebp
   104d1:	83 ec 08             	sub    $0x8,%esp

  mutex_lock(&alloc->mutex);
   104d4:	8b 45 08             	mov    0x8(%ebp),%eax
   104d7:	83 ec 0c             	sub    $0xc,%esp
   104da:	50                   	push   %eax
   104db:	e8 47 4f 00 00       	call   15427 <mutex_lock>
   104e0:	83 c4 10             	add    $0x10,%esp

  kernel_memset(alloc->page_ref, 0, alloc->size / alloc->page_size);
   104e3:	8b 45 08             	mov    0x8(%ebp),%eax
   104e6:	8b 40 20             	mov    0x20(%eax),%eax
   104e9:	8b 55 08             	mov    0x8(%ebp),%edx
   104ec:	8b 4a 24             	mov    0x24(%edx),%ecx
   104ef:	ba 00 00 00 00       	mov    $0x0,%edx
   104f4:	f7 f1                	div    %ecx
   104f6:	89 c2                	mov    %eax,%edx
   104f8:	8b 45 08             	mov    0x8(%ebp),%eax
   104fb:	83 c0 28             	add    $0x28,%eax
   104fe:	83 ec 04             	sub    $0x4,%esp
   10501:	52                   	push   %edx
   10502:	6a 00                	push   $0x0
   10504:	50                   	push   %eax
   10505:	e8 02 5b 00 00       	call   1600c <kernel_memset>
   1050a:	83 c4 10             	add    $0x10,%esp

  mutex_unlock(&alloc->mutex);
   1050d:	8b 45 08             	mov    0x8(%ebp),%eax
   10510:	83 ec 0c             	sub    $0xc,%esp
   10513:	50                   	push   %eax
   10514:	e8 9f 4f 00 00       	call   154b8 <mutex_unlock>
   10519:	83 c4 10             	add    $0x10,%esp
}
   1051c:	90                   	nop
   1051d:	c9                   	leave  
   1051e:	c3                   	ret    

0001051f <addr_alloc_init>:
 * @param start 管理内存的起始地址
 * @param size 管理内存的大小
 * @param page_size 管理的内存页的大小
 */
static void addr_alloc_init(addr_alloc_t *alloc, uint8_t *bits, uint32_t start,
                            uint32_t size, uint32_t page_size) {
   1051f:	55                   	push   %ebp
   10520:	89 e5                	mov    %esp,%ebp
   10522:	83 ec 08             	sub    $0x8,%esp
  mutex_init(&alloc->mutex);
   10525:	8b 45 08             	mov    0x8(%ebp),%eax
   10528:	83 ec 0c             	sub    $0xc,%esp
   1052b:	50                   	push   %eax
   1052c:	e8 a9 4e 00 00       	call   153da <mutex_init>
   10531:	83 c4 10             	add    $0x10,%esp
  alloc->start = start;
   10534:	8b 45 08             	mov    0x8(%ebp),%eax
   10537:	8b 55 10             	mov    0x10(%ebp),%edx
   1053a:	89 50 1c             	mov    %edx,0x1c(%eax)
  alloc->size = size;
   1053d:	8b 45 08             	mov    0x8(%ebp),%eax
   10540:	8b 55 14             	mov    0x14(%ebp),%edx
   10543:	89 50 20             	mov    %edx,0x20(%eax)
  alloc->page_size = page_size;
   10546:	8b 45 08             	mov    0x8(%ebp),%eax
   10549:	8b 55 18             	mov    0x18(%ebp),%edx
   1054c:	89 50 24             	mov    %edx,0x24(%eax)
  bitmap_init(&alloc->bitmap, bits, alloc->size / alloc->page_size, 0);
   1054f:	8b 45 08             	mov    0x8(%ebp),%eax
   10552:	8b 40 20             	mov    0x20(%eax),%eax
   10555:	8b 55 08             	mov    0x8(%ebp),%edx
   10558:	8b 4a 24             	mov    0x24(%edx),%ecx
   1055b:	ba 00 00 00 00       	mov    $0x0,%edx
   10560:	f7 f1                	div    %ecx
   10562:	89 c2                	mov    %eax,%edx
   10564:	8b 45 08             	mov    0x8(%ebp),%eax
   10567:	83 c0 14             	add    $0x14,%eax
   1056a:	6a 00                	push   $0x0
   1056c:	52                   	push   %edx
   1056d:	ff 75 0c             	push   0xc(%ebp)
   10570:	50                   	push   %eax
   10571:	e8 c9 55 00 00       	call   15b3f <bitmap_init>
   10576:	83 c4 10             	add    $0x10,%esp
  //清空页的引用数组
  kernel_memset(alloc->page_ref, 0,  alloc->size / alloc->page_size);
   10579:	8b 45 08             	mov    0x8(%ebp),%eax
   1057c:	8b 40 20             	mov    0x20(%eax),%eax
   1057f:	8b 55 08             	mov    0x8(%ebp),%edx
   10582:	8b 4a 24             	mov    0x24(%edx),%ecx
   10585:	ba 00 00 00 00       	mov    $0x0,%edx
   1058a:	f7 f1                	div    %ecx
   1058c:	89 c2                	mov    %eax,%edx
   1058e:	8b 45 08             	mov    0x8(%ebp),%eax
   10591:	83 c0 28             	add    $0x28,%eax
   10594:	83 ec 04             	sub    $0x4,%esp
   10597:	52                   	push   %edx
   10598:	6a 00                	push   $0x0
   1059a:	50                   	push   %eax
   1059b:	e8 6c 5a 00 00       	call   1600c <kernel_memset>
   105a0:	83 c4 10             	add    $0x10,%esp
}
   105a3:	90                   	nop
   105a4:	c9                   	leave  
   105a5:	c3                   	ret    

000105a6 <addr_alloc_page>:
 *
 * @param alloc
 * @param page_count 申请页的数量
 * @return uint32_t 申请的第一个页的起始地址， 0：分配失败
 */
static uint32_t addr_alloc_page(addr_alloc_t *alloc, int page_count) {
   105a6:	55                   	push   %ebp
   105a7:	89 e5                	mov    %esp,%ebp
   105a9:	83 ec 18             	sub    $0x18,%esp
  uint32_t addr = 0;  // 记录分配的页的起始地址
   105ac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  mutex_lock(&alloc->mutex);
   105b3:	8b 45 08             	mov    0x8(%ebp),%eax
   105b6:	83 ec 0c             	sub    $0xc,%esp
   105b9:	50                   	push   %eax
   105ba:	e8 68 4e 00 00       	call   15427 <mutex_lock>
   105bf:	83 c4 10             	add    $0x10,%esp

  // 在位图中取连续的page_count个页进行分配
  int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   105c2:	8b 45 08             	mov    0x8(%ebp),%eax
   105c5:	83 c0 14             	add    $0x14,%eax
   105c8:	83 ec 04             	sub    $0x4,%esp
   105cb:	ff 75 0c             	push   0xc(%ebp)
   105ce:	6a 00                	push   $0x0
   105d0:	50                   	push   %eax
   105d1:	e8 9e 57 00 00       	call   15d74 <bitmap_alloc_nbits>
   105d6:	83 c4 10             	add    $0x10,%esp
   105d9:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (page_count >= 0) {
   105dc:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   105e0:	78 17                	js     105f9 <addr_alloc_page+0x53>
    // 计算出申请到的第一个页的起始地址
    addr = alloc->start + page_index * alloc->page_size;
   105e2:	8b 45 08             	mov    0x8(%ebp),%eax
   105e5:	8b 48 1c             	mov    0x1c(%eax),%ecx
   105e8:	8b 45 08             	mov    0x8(%ebp),%eax
   105eb:	8b 50 24             	mov    0x24(%eax),%edx
   105ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
   105f1:	0f af c2             	imul   %edx,%eax
   105f4:	01 c8                	add    %ecx,%eax
   105f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
  }

  mutex_unlock(&alloc->mutex);
   105f9:	8b 45 08             	mov    0x8(%ebp),%eax
   105fc:	83 ec 0c             	sub    $0xc,%esp
   105ff:	50                   	push   %eax
   10600:	e8 b3 4e 00 00       	call   154b8 <mutex_unlock>
   10605:	83 c4 10             	add    $0x10,%esp

  return addr;
   10608:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   1060b:	c9                   	leave  
   1060c:	c3                   	ret    

0001060d <addr_free_page>:
 *
 * @param alloc
 * @param addr 第一个内存页的起始地址
 * @param page_count 内存页的数量
 */
static void addr_free_page(addr_alloc_t *alloc, uint32_t addr, int page_count) {
   1060d:	55                   	push   %ebp
   1060e:	89 e5                	mov    %esp,%ebp
   10610:	83 ec 18             	sub    $0x18,%esp
  mutex_lock(&alloc->mutex);
   10613:	8b 45 08             	mov    0x8(%ebp),%eax
   10616:	83 ec 0c             	sub    $0xc,%esp
   10619:	50                   	push   %eax
   1061a:	e8 08 4e 00 00       	call   15427 <mutex_lock>
   1061f:	83 c4 10             	add    $0x10,%esp

  //将所有页引用-1
  for (int i = 0; i < page_count; ++i) {
   10622:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10629:	eb 64                	jmp    1068f <addr_free_page+0x82>
    //获取当前页的地址
    uint32_t page_addr = addr + i * MEM_PAGE_SIZE;
   1062b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1062e:	c1 e0 0c             	shl    $0xc,%eax
   10631:	89 c2                	mov    %eax,%edx
   10633:	8b 45 0c             	mov    0xc(%ebp),%eax
   10636:	01 d0                	add    %edx,%eax
   10638:	89 45 f0             	mov    %eax,-0x10(%ebp)
    //引用-1
    page_ref_sub(alloc, page_addr);
   1063b:	83 ec 08             	sub    $0x8,%esp
   1063e:	ff 75 f0             	push   -0x10(%ebp)
   10641:	ff 75 08             	push   0x8(%ebp)
   10644:	e8 cf fd ff ff       	call   10418 <page_ref_sub>
   10649:	83 c4 10             	add    $0x10,%esp
    //获取当前页引用
    int ref = get_page_ref(alloc, page_addr);
   1064c:	83 ec 08             	sub    $0x8,%esp
   1064f:	ff 75 f0             	push   -0x10(%ebp)
   10652:	ff 75 08             	push   0x8(%ebp)
   10655:	e8 26 fe ff ff       	call   10480 <get_page_ref>
   1065a:	83 c4 10             	add    $0x10,%esp
   1065d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (ref == 0)  {//引用为0，释放该页
   10660:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   10664:	75 25                	jne    1068b <addr_free_page+0x7e>
        bitmap_set_bit(&alloc->bitmap, page_index(alloc, page_addr), 1, 0);
   10666:	83 ec 08             	sub    $0x8,%esp
   10669:	ff 75 f0             	push   -0x10(%ebp)
   1066c:	ff 75 08             	push   0x8(%ebp)
   1066f:	e8 29 fd ff ff       	call   1039d <page_index>
   10674:	83 c4 10             	add    $0x10,%esp
   10677:	8b 55 08             	mov    0x8(%ebp),%edx
   1067a:	83 c2 14             	add    $0x14,%edx
   1067d:	6a 00                	push   $0x0
   1067f:	6a 01                	push   $0x1
   10681:	50                   	push   %eax
   10682:	52                   	push   %edx
   10683:	e8 c3 55 00 00       	call   15c4b <bitmap_set_bit>
   10688:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < page_count; ++i) {
   1068b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1068f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10692:	3b 45 10             	cmp    0x10(%ebp),%eax
   10695:	7c 94                	jl     1062b <addr_free_page+0x1e>
    }

  }

  mutex_unlock(&alloc->mutex);
   10697:	8b 45 08             	mov    0x8(%ebp),%eax
   1069a:	83 ec 0c             	sub    $0xc,%esp
   1069d:	50                   	push   %eax
   1069e:	e8 15 4e 00 00       	call   154b8 <mutex_unlock>
   106a3:	83 c4 10             	add    $0x10,%esp
}
   106a6:	90                   	nop
   106a7:	c9                   	leave  
   106a8:	c3                   	ret    

000106a9 <show_mem_info>:
/**
 * @brief  打印1m以内内存的可用空间
 * 
 * @param boot_info 
 */
static void show_mem_info(boot_info_t *boot_info) {
   106a9:	55                   	push   %ebp
   106aa:	89 e5                	mov    %esp,%ebp
   106ac:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:\n");
   106af:	83 ec 0c             	sub    $0xc,%esp
   106b2:	68 c0 68 01 00       	push   $0x168c0
   106b7:	e8 4d 61 00 00       	call   16809 <log_printf>
   106bc:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   106bf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   106c6:	eb 29                	jmp    106f1 <show_mem_info+0x48>
        log_printf("[%d]: 0x%x - 0x%x\n", i, boot_info->ram_region_cfg[i].start, boot_info->ram_region_cfg[i].size);
   106c8:	8b 45 08             	mov    0x8(%ebp),%eax
   106cb:	8b 55 f4             	mov    -0xc(%ebp),%edx
   106ce:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   106d2:	8b 45 08             	mov    0x8(%ebp),%eax
   106d5:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   106d8:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   106db:	52                   	push   %edx
   106dc:	50                   	push   %eax
   106dd:	ff 75 f4             	push   -0xc(%ebp)
   106e0:	68 cd 68 01 00       	push   $0x168cd
   106e5:	e8 1f 61 00 00       	call   16809 <log_printf>
   106ea:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   106ed:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   106f1:	8b 45 08             	mov    0x8(%ebp),%eax
   106f4:	8b 40 50             	mov    0x50(%eax),%eax
   106f7:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   106fa:	7c cc                	jl     106c8 <show_mem_info+0x1f>
    }

    log_printf("\n");
   106fc:	83 ec 0c             	sub    $0xc,%esp
   106ff:	68 e0 68 01 00       	push   $0x168e0
   10704:	e8 00 61 00 00       	call   16809 <log_printf>
   10709:	83 c4 10             	add    $0x10,%esp
}
   1070c:	90                   	nop
   1070d:	c9                   	leave  
   1070e:	c3                   	ret    

0001070f <total_mem_size>:
 * @brief  计算总的可用内存空间大小
 * 
 * @param boot_info 
 * @return uint32_t 
 */
static uint32_t total_mem_size(boot_info_t *boot_info) {
   1070f:	55                   	push   %ebp
   10710:	89 e5                	mov    %esp,%ebp
   10712:	83 ec 10             	sub    $0x10,%esp
    uint32_t mem_size = 0;
   10715:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   1071c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   10723:	eb 11                	jmp    10736 <total_mem_size+0x27>
        mem_size += boot_info->ram_region_cfg[i].size;
   10725:	8b 45 08             	mov    0x8(%ebp),%eax
   10728:	8b 55 f8             	mov    -0x8(%ebp),%edx
   1072b:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
   1072f:	01 45 fc             	add    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; ++i) {
   10732:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   10736:	8b 45 08             	mov    0x8(%ebp),%eax
   10739:	8b 40 50             	mov    0x50(%eax),%eax
   1073c:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   1073f:	7c e4                	jl     10725 <total_mem_size+0x16>
    }

    return mem_size;
   10741:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10744:	c9                   	leave  
   10745:	c3                   	ret    

00010746 <find_pte>:
 *                 1：表示创建一个新页目录项，并为其分配一个新页作为页表
 *                 0: 返回0
 *                
 * @return pte_t* 索引到的页表项
 */
pte_t* find_pte(pde_t* page_dir, uint32_t vstart, int is_alloc) {
   10746:	55                   	push   %ebp
   10747:	89 e5                	mov    %esp,%ebp
   10749:	83 ec 18             	sub    $0x18,%esp
  pte_t* page_table; //记录被索引的页表
  //1.通过虚拟地址高10位索引到对应的页目录项
  pde_t* pde = page_dir + pde_index(vstart);
   1074c:	ff 75 0c             	push   0xc(%ebp)
   1074f:	e8 c0 fb ff ff       	call   10314 <pde_index>
   10754:	83 c4 04             	add    $0x4,%esp
   10757:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1075e:	8b 45 08             	mov    0x8(%ebp),%eax
   10761:	01 d0                	add    %edx,%eax
   10763:	89 45 f0             	mov    %eax,-0x10(%ebp)

  //2.判断该页目录项是否已存在，及该页目录项是否已指向一个被分配的页表
  if (pde->present) { //该页目录项存在，及存在对应的页表，可以索引到对应的页表
   10766:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10769:	0f b6 00             	movzbl (%eax),%eax
   1076c:	83 e0 01             	and    $0x1,%eax
   1076f:	84 c0                	test   %al,%al
   10771:	74 10                	je     10783 <find_pte+0x3d>
    page_table = (pte_t*)pde_to_pt_addr(pde);
   10773:	ff 75 f0             	push   -0x10(%ebp)
   10776:	e8 b4 fb ff ff       	call   1032f <pde_to_pt_addr>
   1077b:	83 c4 04             	add    $0x4,%esp
   1077e:	89 45 f4             	mov    %eax,-0xc(%ebp)
   10781:	eb 57                	jmp    107da <find_pte+0x94>
  } else {//该目录项不存在内存中，及对应的页表不存在
    if (is_alloc == 0) {  //不为该目录项创建对应的页表
   10783:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10787:	75 07                	jne    10790 <find_pte+0x4a>
      return (pte_t*)0;
   10789:	b8 00 00 00 00       	mov    $0x0,%eax
   1078e:	eb 64                	jmp    107f4 <find_pte+0xae>
    }

    //为该目录项分配一页作为页表
    uint32_t pg_addr = addr_alloc_page(&paddr_alloc, 1);
   10790:	83 ec 08             	sub    $0x8,%esp
   10793:	6a 01                	push   $0x1
   10795:	68 00 90 01 00       	push   $0x19000
   1079a:	e8 07 fe ff ff       	call   105a6 <addr_alloc_page>
   1079f:	83 c4 10             	add    $0x10,%esp
   107a2:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pg_addr == 0) { //分配失败
   107a5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   107a9:	75 07                	jne    107b2 <find_pte+0x6c>
      return (pte_t*)0;
   107ab:	b8 00 00 00 00       	mov    $0x0,%eax
   107b0:	eb 42                	jmp    107f4 <find_pte+0xae>
    }

    //分配成功, 索引对应的页表
    page_table = (pte_t*)pg_addr;
   107b2:	8b 45 ec             	mov    -0x14(%ebp),%eax
   107b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_memset(page_table, 0, MEM_PAGE_SIZE);
   107b8:	83 ec 04             	sub    $0x4,%esp
   107bb:	68 00 10 00 00       	push   $0x1000
   107c0:	6a 00                	push   $0x0
   107c2:	ff 75 f4             	push   -0xc(%ebp)
   107c5:	e8 42 58 00 00       	call   1600c <kernel_memset>
   107ca:	83 c4 10             	add    $0x10,%esp

    //将该页表的起始地址放入对应的页目录项中并放入页目录表中，方便后续索引到该页表
    //且权限都放宽，即普通用户可访问，对应的页表的所有页可读写，将具体的权限交给每一页来进一步限制
    pde->v = pg_addr | PDE_U | PDE_W | PDE_P;
   107cd:	8b 45 ec             	mov    -0x14(%ebp),%eax
   107d0:	83 c8 07             	or     $0x7,%eax
   107d3:	89 c2                	mov    %eax,%edx
   107d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   107d8:	89 10                	mov    %edx,(%eax)

  // log_printf("sizeof(pte_t) = %d", sizeof(pte_t));


  //3.返回在该页表中索引到的页表项
  return page_table + pte_index(vstart);
   107da:	83 ec 0c             	sub    $0xc,%esp
   107dd:	ff 75 0c             	push   0xc(%ebp)
   107e0:	e8 3a fb ff ff       	call   1031f <pte_index>
   107e5:	83 c4 10             	add    $0x10,%esp
   107e8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   107ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107f2:	01 d0                	add    %edx,%eax

}
   107f4:	c9                   	leave  
   107f5:	c3                   	ret    

000107f6 <memory_creat_map>:
 * @param pstart 物理地址的起始地址
 * @param page_count 分页数量
 * @param privilege 该段虚拟地址的特权级
 * @return int -1:分配失败
 */
int  memory_creat_map(pde_t *page_dir, uint32_t vstart, uint32_t pstart, int page_count, uint32_t privilege) {
   107f6:	55                   	push   %ebp
   107f7:	89 e5                	mov    %esp,%ebp
   107f9:	83 ec 18             	sub    $0x18,%esp
  //1.为每一页创建对应的页表项
  for (int i = 0; i < page_count; ++i) {
   107fc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10803:	e9 91 00 00 00       	jmp    10899 <memory_creat_map+0xa3>
    // //打印调试信息
    // log_printf("creat map: v-0x%x, p-0x%x, privilege:0x%x", vstart, pstart, privilege);

    //2.通过虚拟地址在页目录表中获取对应的页目录项指向的页表,
    //且当没有该页目录项时，为其分配一个页作为页表并让一个目录项指向该页表
    pte_t *pte = find_pte(page_dir, vstart, 1);
   10808:	83 ec 04             	sub    $0x4,%esp
   1080b:	6a 01                	push   $0x1
   1080d:	ff 75 0c             	push   0xc(%ebp)
   10810:	ff 75 08             	push   0x8(%ebp)
   10813:	e8 2e ff ff ff       	call   10746 <find_pte>
   10818:	83 c4 10             	add    $0x10,%esp
   1081b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pte == (pte_t*)0) {//没有找到可用的页表项
   1081e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10822:	75 17                	jne    1083b <memory_creat_map+0x45>
    log_printf("creat pte failed pte == 0\n");
   10824:	83 ec 0c             	sub    $0xc,%esp
   10827:	68 e2 68 01 00       	push   $0x168e2
   1082c:	e8 d8 5f 00 00       	call   16809 <log_printf>
   10831:	83 c4 10             	add    $0x10,%esp
      return -1;
   10834:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10839:	eb 6f                	jmp    108aa <memory_creat_map+0xb4>
    }

    // log_printf("pte addr : 0x%x", (uint32_t)pte);
    //3.确保该页并未已存在内存中
    ASSERT(pte->present == 0);
   1083b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1083e:	0f b6 00             	movzbl (%eax),%eax
   10841:	83 e0 01             	and    $0x1,%eax
   10844:	84 c0                	test   %al,%al
   10846:	74 1c                	je     10864 <memory_creat_map+0x6e>
   10848:	68 fd 68 01 00       	push   $0x168fd
   1084d:	68 5c 6a 01 00       	push   $0x16a5c
   10852:	68 1d 01 00 00       	push   $0x11d
   10857:	68 10 69 01 00       	push   $0x16910
   1085c:	e8 92 52 00 00       	call   15af3 <pannic>
   10861:	83 c4 10             	add    $0x10,%esp

    //4.在页表项中创建对应的映射关系，并该页权限，页权限以当前权限为主，因为pde处已放宽权限
    pte->v = pstart | privilege | PTE_P;
   10864:	8b 45 10             	mov    0x10(%ebp),%eax
   10867:	0b 45 18             	or     0x18(%ebp),%eax
   1086a:	83 c8 01             	or     $0x1,%eax
   1086d:	89 c2                	mov    %eax,%edx
   1086f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10872:	89 10                	mov    %edx,(%eax)

    //5.将该页引用计数+1
    page_ref_add(&paddr_alloc, pstart);
   10874:	83 ec 08             	sub    $0x8,%esp
   10877:	ff 75 10             	push   0x10(%ebp)
   1087a:	68 00 90 01 00       	push   $0x19000
   1087f:	e8 3e fb ff ff       	call   103c2 <page_ref_add>
   10884:	83 c4 10             	add    $0x10,%esp

    //6.切换为下一页
    vstart += MEM_PAGE_SIZE;
   10887:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    pstart += MEM_PAGE_SIZE;
   1088e:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
  for (int i = 0; i < page_count; ++i) {
   10895:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10899:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1089c:	3b 45 14             	cmp    0x14(%ebp),%eax
   1089f:	0f 8c 63 ff ff ff    	jl     10808 <memory_creat_map+0x12>

  }

  return 1;
   108a5:	b8 01 00 00 00       	mov    $0x1,%eax
 }
   108aa:	c9                   	leave  
   108ab:	c3                   	ret    

000108ac <create_kernal_table>:

//TODO:编写函数注释
void create_kernal_table(void) {
   108ac:	55                   	push   %ebp
   108ad:	89 e5                	mov    %esp,%ebp
   108af:	83 ec 28             	sub    $0x28,%esp
    {(void*)CONSOLE_DISP_START_ADDR, (void*)CONSOLE_DISP_END_ADDR, (void*)CONSOLE_DISP_START_ADDR, PTE_W},//显存区域的映射关系
    {(void*)MEM_EXT_START, (void*)MEM_EXT_END, (void*)MEM_EXT_START, PTE_W}, //将1mb到127mb都映射给操作系统使用

  };

  for (int i = 0; i < sizeof(kernal_map) / sizeof(kernal_map[0]); ++i) {
   108b2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   108b9:	e9 92 00 00 00       	jmp    10950 <create_kernal_table+0xa4>
    memory_map_t *map = kernal_map + i;
   108be:	8b 45 f4             	mov    -0xc(%ebp),%eax
   108c1:	c1 e0 04             	shl    $0x4,%eax
   108c4:	05 00 80 01 00       	add    $0x18000,%eax
   108c9:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //将虚拟地址的起始地址按页大小4kb对齐，为了不丢失原有的虚拟地址空间，所以向下对齐vstart
    //理论上虚拟地址是不需要上下边缘对齐的，这里主要是为了计算所需页数
    //因为虚拟地址的每一页都和页目录项以及页表项捆绑了，
    //只需用页目录项和页表项为该页映射一个物理页即可，所以物理页才必须上下边缘按4kb对齐
    uint32_t vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   108cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   108cf:	8b 00                	mov    (%eax),%eax
   108d1:	68 00 10 00 00       	push   $0x1000
   108d6:	50                   	push   %eax
   108d7:	e8 08 fa ff ff       	call   102e4 <down2>
   108dc:	83 c4 08             	add    $0x8,%esp
   108df:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32_t pstart = down2((uint32_t)map->pstart, MEM_PAGE_SIZE);
   108e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   108e5:	8b 40 08             	mov    0x8(%eax),%eax
   108e8:	68 00 10 00 00       	push   $0x1000
   108ed:	50                   	push   %eax
   108ee:	e8 f1 f9 ff ff       	call   102e4 <down2>
   108f3:	83 c4 08             	add    $0x8,%esp
   108f6:	89 45 e8             	mov    %eax,-0x18(%ebp)
    //将虚拟地址的结束地址按页大小4kb对齐, 为了不丢失原有的虚拟地址空间，所以向上对齐vend
    uint32_t vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   108f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   108fc:	8b 40 04             	mov    0x4(%eax),%eax
   108ff:	68 00 10 00 00       	push   $0x1000
   10904:	50                   	push   %eax
   10905:	e8 e7 f9 ff ff       	call   102f1 <up2>
   1090a:	83 c4 08             	add    $0x8,%esp
   1090d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    //计算该虚拟空间需要的页数
    int page_count = (vend - vstart) / MEM_PAGE_SIZE;
   10910:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10913:	2b 45 ec             	sub    -0x14(%ebp),%eax
   10916:	c1 e8 0c             	shr    $0xc,%eax
   10919:	89 45 e0             	mov    %eax,-0x20(%ebp)

    //创建内存映射关系
    memory_creat_map(kernel_page_dir, vstart, pstart, page_count, map->privilege);
   1091c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1091f:	8b 40 0c             	mov    0xc(%eax),%eax
   10922:	83 ec 0c             	sub    $0xc,%esp
   10925:	50                   	push   %eax
   10926:	ff 75 e0             	push   -0x20(%ebp)
   10929:	ff 75 e8             	push   -0x18(%ebp)
   1092c:	ff 75 ec             	push   -0x14(%ebp)
   1092f:	68 00 10 02 00       	push   $0x21000
   10934:	e8 bd fe ff ff       	call   107f6 <memory_creat_map>
   10939:	83 c4 20             	add    $0x20,%esp
    //清空内核空间对页的引用
    clear_page_ref(&paddr_alloc);
   1093c:	83 ec 0c             	sub    $0xc,%esp
   1093f:	68 00 90 01 00       	push   $0x19000
   10944:	e8 85 fb ff ff       	call   104ce <clear_page_ref>
   10949:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < sizeof(kernal_map) / sizeof(kernal_map[0]); ++i) {
   1094c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10950:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10953:	83 f8 04             	cmp    $0x4,%eax
   10956:	0f 86 62 ff ff ff    	jbe    108be <create_kernal_table+0x12>

  }
}
   1095c:	90                   	nop
   1095d:	90                   	nop
   1095e:	c9                   	leave  
   1095f:	c3                   	ret    

00010960 <memory_creat_uvm>:
/**
 * @brief 创建用户进程的虚拟内存空间，即页目录表
 * 
 * @return uint32_t 
 */
uint32_t memory_creat_uvm() {
   10960:	55                   	push   %ebp
   10961:	89 e5                	mov    %esp,%ebp
   10963:	83 ec 18             	sub    $0x18,%esp
  //1.分配一页作为页目录表
  pde_t *page_dir = (pde_t *)addr_alloc_page(&paddr_alloc, 1);
   10966:	83 ec 08             	sub    $0x8,%esp
   10969:	6a 01                	push   $0x1
   1096b:	68 00 90 01 00       	push   $0x19000
   10970:	e8 31 fc ff ff       	call   105a6 <addr_alloc_page>
   10975:	83 c4 10             	add    $0x10,%esp
   10978:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (page_dir == 0) return 0;
   1097b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1097f:	75 07                	jne    10988 <memory_creat_uvm+0x28>
   10981:	b8 00 00 00 00       	mov    $0x0,%eax
   10986:	eb 5b                	jmp    109e3 <memory_creat_uvm+0x83>
  //TODO:新分配的页并未做虚拟内存映射，会触发缺页异常，需要处理,这里先将1mb以上的所有空间都映射给内核进程

  //2.将该页的内容清空
  kernel_memset((void*)page_dir, 0, MEM_PAGE_SIZE);
   10988:	83 ec 04             	sub    $0x4,%esp
   1098b:	68 00 10 00 00       	push   $0x1000
   10990:	6a 00                	push   $0x0
   10992:	ff 75 f0             	push   -0x10(%ebp)
   10995:	e8 72 56 00 00       	call   1600c <kernel_memset>
   1099a:	83 c4 10             	add    $0x10,%esp

  //3.获取用户进程空间的第一个页目录项索引, 用户进程空间的起始地址MEM_TASK_BASE = 0x800 00000
  uint32_t user_pde_start = pde_index(MEM_TASK_BASE);
   1099d:	83 ec 0c             	sub    $0xc,%esp
   109a0:	68 00 00 00 80       	push   $0x80000000
   109a5:	e8 6a f9 ff ff       	call   10314 <pde_index>
   109aa:	83 c4 10             	add    $0x10,%esp
   109ad:	89 45 ec             	mov    %eax,-0x14(%ebp)

  //4.将用户进程空间以下的空间映射给操作系统使用，即将0~user_pde_start的pde提供给操作系统作为页目录项
  for (int i = 0; i < user_pde_start; ++i) {
   109b0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   109b7:	eb 1f                	jmp    109d8 <memory_creat_uvm+0x78>
      page_dir[i].v = kernel_page_dir[i].v; //所有进程都共享操作系统的页表
   109b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109bc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   109c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   109c6:	01 c2                	add    %eax,%edx
   109c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109cb:	8b 04 85 00 10 02 00 	mov    0x21000(,%eax,4),%eax
   109d2:	89 02                	mov    %eax,(%edx)
  for (int i = 0; i < user_pde_start; ++i) {
   109d4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   109d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109db:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   109de:	77 d9                	ja     109b9 <memory_creat_uvm+0x59>
  }


  return (uint32_t)page_dir;
   109e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   109e3:	c9                   	leave  
   109e4:	c3                   	ret    

000109e5 <memory_copy_uvm>:
 * 
 * @param to_page_dir 拷贝到的目标页目录表地址
 * @param from_page_dir 被拷贝的源页目录表地址
 * @return uint32_t 
 */
int memory_copy_uvm(uint32_t to_page_dir, uint32_t from_page_dir) {
   109e5:	55                   	push   %ebp
   109e6:	89 e5                	mov    %esp,%ebp
   109e8:	83 ec 38             	sub    $0x38,%esp
  //1.获取用户程序虚拟地址的起始pde索引，即0x8000 0000 的pde索引值
  uint32_t user_pde_start = pde_index(MEM_TASK_BASE);
   109eb:	68 00 00 00 80       	push   $0x80000000
   109f0:	e8 1f f9 ff ff       	call   10314 <pde_index>
   109f5:	83 c4 04             	add    $0x4,%esp
   109f8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  pde_t *pde = (pde_t *)from_page_dir + user_pde_start;
   109fb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   109fe:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10a05:	8b 45 0c             	mov    0xc(%ebp),%eax
   10a08:	01 d0                	add    %edx,%eax
   10a0a:	89 45 f4             	mov    %eax,-0xc(%ebp)

  //2.遍历源页目录表中的每一个页目录项，拷贝给目标目录
  for (int i = user_pde_start; i < PDE_CNT; ++i, ++pde) {
   10a0d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10a10:	89 45 f0             	mov    %eax,-0x10(%ebp)
   10a13:	e9 2a 01 00 00       	jmp    10b42 <memory_copy_uvm+0x15d>
    if (!pde->present)  //当前页目录项不存在
   10a18:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10a1b:	0f b6 00             	movzbl (%eax),%eax
   10a1e:	83 e0 01             	and    $0x1,%eax
   10a21:	84 c0                	test   %al,%al
   10a23:	0f 84 10 01 00 00    	je     10b39 <memory_copy_uvm+0x154>
      continue;

    //3.获取页目录项指向的页表的起始地址
    pte_t *pte = (pte_t*)pde_to_pt_addr(pde);
   10a29:	ff 75 f4             	push   -0xc(%ebp)
   10a2c:	e8 fe f8 ff ff       	call   1032f <pde_to_pt_addr>
   10a31:	83 c4 04             	add    $0x4,%esp
   10a34:	89 45 ec             	mov    %eax,-0x14(%ebp)

    //4.遍历页表的页表项，进行读共享写复制的映射操作
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   10a37:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   10a3e:	e9 e7 00 00 00       	jmp    10b2a <memory_copy_uvm+0x145>
      if (!pte->present)  //当前页表项不存在
   10a43:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10a46:	0f b6 00             	movzbl (%eax),%eax
   10a49:	83 e0 01             	and    $0x1,%eax
   10a4c:	84 c0                	test   %al,%al
   10a4e:	0f 84 cd 00 00 00    	je     10b21 <memory_copy_uvm+0x13c>
        continue;
      
      //5.获取该页表项对应的虚拟地址
      uint32_t vaddr = (i << 22) | (j << 12);
   10a54:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10a57:	c1 e0 16             	shl    $0x16,%eax
   10a5a:	89 c2                	mov    %eax,%edx
   10a5c:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10a5f:	c1 e0 0c             	shl    $0xc,%eax
   10a62:	09 d0                	or     %edx,%eax
   10a64:	89 45 e0             	mov    %eax,-0x20(%ebp)
      
      //6.判断当前页表项指向的页是否支持写操作
      if (pte->v & PTE_W) { //7当前页支持写操作，需进行复制操作
   10a67:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10a6a:	8b 00                	mov    (%eax),%eax
   10a6c:	83 e0 02             	and    $0x2,%eax
   10a6f:	85 c0                	test   %eax,%eax
   10a71:	74 6c                	je     10adf <memory_copy_uvm+0xfa>
        //7.1分配一个新的页，进行拷贝
        uint32_t page = addr_alloc_page(&paddr_alloc, 1);
   10a73:	83 ec 08             	sub    $0x8,%esp
   10a76:	6a 01                	push   $0x1
   10a78:	68 00 90 01 00       	push   $0x19000
   10a7d:	e8 24 fb ff ff       	call   105a6 <addr_alloc_page>
   10a82:	83 c4 10             	add    $0x10,%esp
   10a85:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        if (page == 0)  //分配失败
   10a88:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   10a8c:	0f 84 c4 00 00 00    	je     10b56 <memory_copy_uvm+0x171>
          goto copy_uvm_failed;
        
        //7.2在目标进程空间中记录映射关系
        int err = memory_creat_map((pde_t*)to_page_dir, vaddr, page, 1, get_pte_privilege(pte));
   10a92:	83 ec 0c             	sub    $0xc,%esp
   10a95:	ff 75 ec             	push   -0x14(%ebp)
   10a98:	e8 e0 f8 ff ff       	call   1037d <get_pte_privilege>
   10a9d:	83 c4 10             	add    $0x10,%esp
   10aa0:	8b 55 08             	mov    0x8(%ebp),%edx
   10aa3:	83 ec 0c             	sub    $0xc,%esp
   10aa6:	50                   	push   %eax
   10aa7:	6a 01                	push   $0x1
   10aa9:	ff 75 d4             	push   -0x2c(%ebp)
   10aac:	ff 75 e0             	push   -0x20(%ebp)
   10aaf:	52                   	push   %edx
   10ab0:	e8 41 fd ff ff       	call   107f6 <memory_creat_map>
   10ab5:	83 c4 20             	add    $0x20,%esp
   10ab8:	89 45 d0             	mov    %eax,-0x30(%ebp)
        if (err < 0)
   10abb:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
   10abf:	0f 88 94 00 00 00    	js     10b59 <memory_copy_uvm+0x174>
          goto copy_uvm_failed;
        
        //7.3将该页内容拷贝到目标进程空间中
        kernel_memcpy((void*)page, (void*)vaddr, MEM_PAGE_SIZE);
   10ac5:	8b 55 e0             	mov    -0x20(%ebp),%edx
   10ac8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   10acb:	83 ec 04             	sub    $0x4,%esp
   10ace:	68 00 10 00 00       	push   $0x1000
   10ad3:	52                   	push   %edx
   10ad4:	50                   	push   %eax
   10ad5:	e8 e3 54 00 00       	call   15fbd <kernel_memcpy>
   10ada:	83 c4 10             	add    $0x10,%esp
   10add:	eb 43                	jmp    10b22 <memory_copy_uvm+0x13d>

      } else {  //8.当前页为只读页，直接共享该页即可，即只复制页表项即可
        //8.1获取该页的物理地址
        uint32_t page = pte_to_pg_addr(pte);
   10adf:	83 ec 0c             	sub    $0xc,%esp
   10ae2:	ff 75 ec             	push   -0x14(%ebp)
   10ae5:	e8 6c f8 ff ff       	call   10356 <pte_to_pg_addr>
   10aea:	83 c4 10             	add    $0x10,%esp
   10aed:	89 45 dc             	mov    %eax,-0x24(%ebp)
        //8.2直接在目标进程空间中记录映射关系
        int err = memory_creat_map((pde_t*)to_page_dir, vaddr, page, 1, get_pte_privilege(pte));
   10af0:	83 ec 0c             	sub    $0xc,%esp
   10af3:	ff 75 ec             	push   -0x14(%ebp)
   10af6:	e8 82 f8 ff ff       	call   1037d <get_pte_privilege>
   10afb:	83 c4 10             	add    $0x10,%esp
   10afe:	8b 55 08             	mov    0x8(%ebp),%edx
   10b01:	83 ec 0c             	sub    $0xc,%esp
   10b04:	50                   	push   %eax
   10b05:	6a 01                	push   $0x1
   10b07:	ff 75 dc             	push   -0x24(%ebp)
   10b0a:	ff 75 e0             	push   -0x20(%ebp)
   10b0d:	52                   	push   %edx
   10b0e:	e8 e3 fc ff ff       	call   107f6 <memory_creat_map>
   10b13:	83 c4 20             	add    $0x20,%esp
   10b16:	89 45 d8             	mov    %eax,-0x28(%ebp)
        if (err < 0)
   10b19:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
   10b1d:	78 3d                	js     10b5c <memory_copy_uvm+0x177>
   10b1f:	eb 01                	jmp    10b22 <memory_copy_uvm+0x13d>
        continue;
   10b21:	90                   	nop
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   10b22:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   10b26:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   10b2a:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   10b31:	0f 8e 0c ff ff ff    	jle    10a43 <memory_copy_uvm+0x5e>
   10b37:	eb 01                	jmp    10b3a <memory_copy_uvm+0x155>
      continue;
   10b39:	90                   	nop
  for (int i = user_pde_start; i < PDE_CNT; ++i, ++pde) {
   10b3a:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10b3e:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   10b42:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   10b49:	0f 8e c9 fe ff ff    	jle    10a18 <memory_copy_uvm+0x33>
      }

    }
  }

  return 1;
   10b4f:	b8 01 00 00 00       	mov    $0x1,%eax
   10b54:	eb 1a                	jmp    10b70 <memory_copy_uvm+0x18b>
          goto copy_uvm_failed;
   10b56:	90                   	nop
   10b57:	eb 04                	jmp    10b5d <memory_copy_uvm+0x178>
          goto copy_uvm_failed;
   10b59:	90                   	nop
   10b5a:	eb 01                	jmp    10b5d <memory_copy_uvm+0x178>
          goto copy_uvm_failed;
   10b5c:	90                   	nop


copy_uvm_failed:
  memory_destroy_uvm(to_page_dir);
   10b5d:	83 ec 0c             	sub    $0xc,%esp
   10b60:	ff 75 08             	push   0x8(%ebp)
   10b63:	e8 0a 00 00 00       	call   10b72 <memory_destroy_uvm>
   10b68:	83 c4 10             	add    $0x10,%esp
  return -1;
   10b6b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10b70:	c9                   	leave  
   10b71:	c3                   	ret    

00010b72 <memory_destroy_uvm>:
 * @brief 销毁该页目录表对应的所有虚拟空间资源，包括映射关系与内存空间
 * 
 * @param page_dir 页目录表的地址
 * @param is_read_share 是否开启了读共享策略，1开启，0未开启
 */
void memory_destroy_uvm(uint32_t page_dir) {
   10b72:	55                   	push   %ebp
   10b73:	89 e5                	mov    %esp,%ebp
   10b75:	83 ec 28             	sub    $0x28,%esp
  //1.获取用户进程虚拟地址的起始地址对应的该页目录项
  uint32_t user_task_start  = pde_index(MEM_TASK_BASE);
   10b78:	68 00 00 00 80       	push   $0x80000000
   10b7d:	e8 92 f7 ff ff       	call   10314 <pde_index>
   10b82:	83 c4 04             	add    $0x4,%esp
   10b85:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  pde_t *pde = (pde_t*) page_dir + user_task_start;
   10b88:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10b8b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10b92:	8b 45 08             	mov    0x8(%ebp),%eax
   10b95:	01 d0                	add    %edx,%eax
   10b97:	89 45 f4             	mov    %eax,-0xc(%ebp)

  //2.遍历每一个页目录项，清理对应资源
  for (int i = user_task_start; i < PDE_CNT; ++i, ++pde) {
   10b9a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10b9d:	89 45 f0             	mov    %eax,-0x10(%ebp)
   10ba0:	e9 8f 00 00 00       	jmp    10c34 <memory_destroy_uvm+0xc2>
    if (!pde->present) 
   10ba5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10ba8:	0f b6 00             	movzbl (%eax),%eax
   10bab:	83 e0 01             	and    $0x1,%eax
   10bae:	84 c0                	test   %al,%al
   10bb0:	74 79                	je     10c2b <memory_destroy_uvm+0xb9>
        continue;

    //3.获取页目录项对应的页表的起始地址
    pte_t *pte = (pte_t*)pde_to_pt_addr(pde);
   10bb2:	ff 75 f4             	push   -0xc(%ebp)
   10bb5:	e8 75 f7 ff ff       	call   1032f <pde_to_pt_addr>
   10bba:	83 c4 04             	add    $0x4,%esp
   10bbd:	89 45 ec             	mov    %eax,-0x14(%ebp)
    
    //4.遍历所有页表项，清理对应资源
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   10bc0:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   10bc7:	eb 36                	jmp    10bff <memory_destroy_uvm+0x8d>
      if (!pte->present)
   10bc9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10bcc:	0f b6 00             	movzbl (%eax),%eax
   10bcf:	83 e0 01             	and    $0x1,%eax
   10bd2:	84 c0                	test   %al,%al
   10bd4:	74 20                	je     10bf6 <memory_destroy_uvm+0x84>
        continue;
      
      //5.释放该物理页
      addr_free_page(&paddr_alloc, pte_to_pg_addr(pte), 1);
   10bd6:	ff 75 ec             	push   -0x14(%ebp)
   10bd9:	e8 78 f7 ff ff       	call   10356 <pte_to_pg_addr>
   10bde:	83 c4 04             	add    $0x4,%esp
   10be1:	83 ec 04             	sub    $0x4,%esp
   10be4:	6a 01                	push   $0x1
   10be6:	50                   	push   %eax
   10be7:	68 00 90 01 00       	push   $0x19000
   10bec:	e8 1c fa ff ff       	call   1060d <addr_free_page>
   10bf1:	83 c4 10             	add    $0x10,%esp
   10bf4:	eb 01                	jmp    10bf7 <memory_destroy_uvm+0x85>
        continue;
   10bf6:	90                   	nop
    for (int j = 0; j < PTE_CNT; ++j, ++pte) {
   10bf7:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   10bfb:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   10bff:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   10c06:	7e c1                	jle    10bc9 <memory_destroy_uvm+0x57>
    }

    //6.释放存储该页表的物理页
    addr_free_page(&paddr_alloc, pde_to_pt_addr(pde), 1);
   10c08:	83 ec 0c             	sub    $0xc,%esp
   10c0b:	ff 75 f4             	push   -0xc(%ebp)
   10c0e:	e8 1c f7 ff ff       	call   1032f <pde_to_pt_addr>
   10c13:	83 c4 10             	add    $0x10,%esp
   10c16:	83 ec 04             	sub    $0x4,%esp
   10c19:	6a 01                	push   $0x1
   10c1b:	50                   	push   %eax
   10c1c:	68 00 90 01 00       	push   $0x19000
   10c21:	e8 e7 f9 ff ff       	call   1060d <addr_free_page>
   10c26:	83 c4 10             	add    $0x10,%esp
   10c29:	eb 01                	jmp    10c2c <memory_destroy_uvm+0xba>
        continue;
   10c2b:	90                   	nop
  for (int i = user_task_start; i < PDE_CNT; ++i, ++pde) {
   10c2c:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10c30:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   10c34:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   10c3b:	0f 8e 64 ff ff ff    	jle    10ba5 <memory_destroy_uvm+0x33>
  }


  //7.释放存储该页目录表的物理页
  addr_free_page(&paddr_alloc, page_dir, 1);
   10c41:	83 ec 04             	sub    $0x4,%esp
   10c44:	6a 01                	push   $0x1
   10c46:	ff 75 08             	push   0x8(%ebp)
   10c49:	68 00 90 01 00       	push   $0x19000
   10c4e:	e8 ba f9 ff ff       	call   1060d <addr_free_page>
   10c53:	83 c4 10             	add    $0x10,%esp
}
   10c56:	90                   	nop
   10c57:	c9                   	leave  
   10c58:	c3                   	ret    

00010c59 <memory_init>:
/**
 * @brief  初始化化内存
 *
 * @param boot_info cpu在实模式下检测到的可用内存对象
 */
void memory_init(boot_info_t *boot_info) {
   10c59:	55                   	push   %ebp
   10c5a:	89 e5                	mov    %esp,%ebp
   10c5c:	83 ec 18             	sub    $0x18,%esp

  
    //声明紧邻在内核bss段后面的空间地址，用于存储位图，该变量定义在kernel.lds中
    extern char mem_free_start;

    log_printf("memory init\n");
   10c5f:	83 ec 0c             	sub    $0xc,%esp
   10c62:	68 47 69 01 00       	push   $0x16947
   10c67:	e8 9d 5b 00 00       	call   16809 <log_printf>
   10c6c:	83 c4 10             	add    $0x10,%esp

    log_printf("mem_free_start: 0x%x\n", &mem_free_start);
   10c6f:	83 ec 08             	sub    $0x8,%esp
   10c72:	68 8a d3 06 00       	push   $0x6d38a
   10c77:	68 54 69 01 00       	push   $0x16954
   10c7c:	e8 88 5b 00 00       	call   16809 <log_printf>
   10c81:	83 c4 10             	add    $0x10,%esp

    show_mem_info(boot_info);
   10c84:	83 ec 0c             	sub    $0xc,%esp
   10c87:	ff 75 08             	push   0x8(%ebp)
   10c8a:	e8 1a fa ff ff       	call   106a9 <show_mem_info>
   10c8f:	83 c4 10             	add    $0x10,%esp
    
    //去除保护模式下1mb大小后可用的内存空间大小
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   10c92:	83 ec 0c             	sub    $0xc,%esp
   10c95:	ff 75 08             	push   0x8(%ebp)
   10c98:	e8 72 fa ff ff       	call   1070f <total_mem_size>
   10c9d:	83 c4 10             	add    $0x10,%esp
   10ca0:	2d 00 00 10 00       	sub    $0x100000,%eax
   10ca5:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将可用空间大小下调到页大小的整数倍
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);
   10ca8:	83 ec 08             	sub    $0x8,%esp
   10cab:	68 00 10 00 00       	push   $0x1000
   10cb0:	ff 75 f4             	push   -0xc(%ebp)
   10cb3:	e8 2c f6 ff ff       	call   102e4 <down2>
   10cb8:	83 c4 10             	add    $0x10,%esp
   10cbb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    log_printf("free memory: 0x%x, size: 0x%x\n", MEM_EXT_START, mem_up1MB_free);
   10cbe:	83 ec 04             	sub    $0x4,%esp
   10cc1:	ff 75 f4             	push   -0xc(%ebp)
   10cc4:	68 00 00 10 00       	push   $0x100000
   10cc9:	68 6c 69 01 00       	push   $0x1696c
   10cce:	e8 36 5b 00 00       	call   16809 <log_printf>
   10cd3:	83 c4 10             	add    $0x10,%esp

    //mem_free_start被分配的地址在链接文件中定义，紧邻着first_task段
    uint8_t *mem_free = (uint8_t*)&mem_free_start;
   10cd6:	c7 45 f0 8a d3 06 00 	movl   $0x6d38a,-0x10(%ebp)

    //用paddr_alloc，内存页分配对象管理1mb以上的所有空闲空间，页大小为MEM_PAGE_SIZE=4kb
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   10cdd:	83 ec 0c             	sub    $0xc,%esp
   10ce0:	68 00 10 00 00       	push   $0x1000
   10ce5:	ff 75 f4             	push   -0xc(%ebp)
   10ce8:	68 00 00 10 00       	push   $0x100000
   10ced:	ff 75 f0             	push   -0x10(%ebp)
   10cf0:	68 00 90 01 00       	push   $0x19000
   10cf5:	e8 25 f8 ff ff       	call   1051f <addr_alloc_init>
   10cfa:	83 c4 20             	add    $0x20,%esp

    //跳过存储位图的内存区域, 位图的每一位表示一个页，计算位图所站的字节数即可跳过该区域
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);  
   10cfd:	a1 20 90 01 00       	mov    0x19020,%eax
   10d02:	c1 e8 0c             	shr    $0xc,%eax
   10d05:	83 ec 0c             	sub    $0xc,%esp
   10d08:	50                   	push   %eax
   10d09:	e8 1b 4e 00 00       	call   15b29 <bitmap_byte_count>
   10d0e:	83 c4 10             	add    $0x10,%esp
   10d11:	01 45 f0             	add    %eax,-0x10(%ebp)

    //判断mem_free是否已越过可用数据区
    ASSERT(mem_free < (uint8_t*)MEM_EBDA_START);
   10d14:	81 7d f0 ff fb 09 00 	cmpl   $0x9fbff,-0x10(%ebp)
   10d1b:	76 1c                	jbe    10d39 <memory_init+0xe0>
   10d1d:	68 8c 69 01 00       	push   $0x1698c
   10d22:	68 70 6a 01 00       	push   $0x16a70
   10d27:	68 f8 01 00 00       	push   $0x1f8
   10d2c:	68 10 69 01 00       	push   $0x16910
   10d31:	e8 bd 4d 00 00       	call   15af3 <pannic>
   10d36:	83 c4 10             	add    $0x10,%esp
    
    //创建内核的页表映射
    create_kernal_table();
   10d39:	e8 6e fb ff ff       	call   108ac <create_kernal_table>

    //设置内核的页目录表到CR3寄存器，并开启分页机制
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   10d3e:	b8 00 10 02 00       	mov    $0x21000,%eax
   10d43:	83 ec 0c             	sub    $0xc,%esp
   10d46:	50                   	push   %eax
   10d47:	e8 40 f6 ff ff       	call   1038c <mmu_set_page_dir>
   10d4c:	83 c4 10             	add    $0x10,%esp
}
   10d4f:	90                   	nop
   10d50:	c9                   	leave  
   10d51:	c3                   	ret    

00010d52 <memory_alloc_for_page_dir>:
 * @param vaddr 进程各个代码段的起始虚拟地址
 * @param alloc_size 为进程分配的页空间大小
 * @param priority 进程页空间的权限
 * @return int 
 */
int memory_alloc_for_page_dir(uint32_t page_dir, uint32_t vaddr, uint32_t alloc_size, uint32_t privilege) {
   10d52:	55                   	push   %ebp
   10d53:	89 e5                	mov    %esp,%ebp
   10d55:	83 ec 28             	sub    $0x28,%esp
  //1.记录当前分配的虚拟页的起始地址
  uint32_t curr_vaddr = vaddr;
   10d58:	8b 45 0c             	mov    0xc(%ebp),%eax
   10d5b:	89 45 f4             	mov    %eax,-0xc(%ebp)
  //2.计算需要分配多少页
  int page_count = up2(alloc_size, MEM_PAGE_SIZE) / MEM_PAGE_SIZE;
   10d5e:	68 00 10 00 00       	push   $0x1000
   10d63:	ff 75 10             	push   0x10(%ebp)
   10d66:	e8 86 f5 ff ff       	call   102f1 <up2>
   10d6b:	83 c4 08             	add    $0x8,%esp
   10d6e:	c1 e8 0c             	shr    $0xc,%eax
   10d71:	89 45 ec             	mov    %eax,-0x14(%ebp)

  //3.逐页进行映射
  for (int i = 0; i < page_count; ++i) {
   10d74:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   10d7b:	eb 7a                	jmp    10df7 <memory_alloc_for_page_dir+0xa5>
    uint32_t paddr = addr_alloc_page(&paddr_alloc, 1);
   10d7d:	83 ec 08             	sub    $0x8,%esp
   10d80:	6a 01                	push   $0x1
   10d82:	68 00 90 01 00       	push   $0x19000
   10d87:	e8 1a f8 ff ff       	call   105a6 <addr_alloc_page>
   10d8c:	83 c4 10             	add    $0x10,%esp
   10d8f:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (paddr == 0) {//分配失败
   10d92:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10d96:	75 17                	jne    10daf <memory_alloc_for_page_dir+0x5d>
      log_printf("mem alloc failed. no memory\n");
   10d98:	83 ec 0c             	sub    $0xc,%esp
   10d9b:	68 b0 69 01 00       	push   $0x169b0
   10da0:	e8 64 5a 00 00       	call   16809 <log_printf>
   10da5:	83 c4 10             	add    $0x10,%esp
      //TODO:当分配失败时应该将之前分配的页全部归还，且将映射关系也全部解除
      return 0;
   10da8:	b8 00 00 00 00       	mov    $0x0,%eax
   10dad:	eb 59                	jmp    10e08 <memory_alloc_for_page_dir+0xb6>
    }

    int err = memory_creat_map((pde_t*)page_dir, curr_vaddr, paddr, 1, privilege);
   10daf:	8b 45 08             	mov    0x8(%ebp),%eax
   10db2:	83 ec 0c             	sub    $0xc,%esp
   10db5:	ff 75 14             	push   0x14(%ebp)
   10db8:	6a 01                	push   $0x1
   10dba:	ff 75 e8             	push   -0x18(%ebp)
   10dbd:	ff 75 f4             	push   -0xc(%ebp)
   10dc0:	50                   	push   %eax
   10dc1:	e8 30 fa ff ff       	call   107f6 <memory_creat_map>
   10dc6:	83 c4 20             	add    $0x20,%esp
   10dc9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (err < 0) {//分配失败
   10dcc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10dd0:	79 1a                	jns    10dec <memory_alloc_for_page_dir+0x9a>
      log_printf("create memory failed. err = %d\n", err);
   10dd2:	83 ec 08             	sub    $0x8,%esp
   10dd5:	ff 75 e4             	push   -0x1c(%ebp)
   10dd8:	68 d0 69 01 00       	push   $0x169d0
   10ddd:	e8 27 5a 00 00       	call   16809 <log_printf>
   10de2:	83 c4 10             	add    $0x10,%esp
      //TODO:当分配失败时应该将之前分配的页全部归还，且将映射关系也全部解除
      return 0;
   10de5:	b8 00 00 00 00       	mov    $0x0,%eax
   10dea:	eb 1c                	jmp    10e08 <memory_alloc_for_page_dir+0xb6>
    }

    curr_vaddr += MEM_PAGE_SIZE;
   10dec:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
  for (int i = 0; i < page_count; ++i) {
   10df3:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10df7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10dfa:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   10dfd:	0f 8c 7a ff ff ff    	jl     10d7d <memory_alloc_for_page_dir+0x2b>
  }

  return 0;
   10e03:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10e08:	c9                   	leave  
   10e09:	c3                   	ret    

00010e0a <memory_alloc_page_for>:
 * @param vaddr 待分配空间的起始地址
 * @param alloc_size 为其分配的空间大小
 * @param privilege 对应页空间的权限
 * @return int 错误码
 */
int memory_alloc_page_for(uint32_t vaddr, uint32_t alloc_size, uint32_t privilege) {
   10e0a:	55                   	push   %ebp
   10e0b:	89 e5                	mov    %esp,%ebp
   10e0d:	83 ec 08             	sub    $0x8,%esp
  return memory_alloc_for_page_dir(task_current()->tss.cr3, vaddr, alloc_size, privilege);
   10e10:	e8 7f 0b 00 00       	call   11994 <task_current>
   10e15:	8b 40 78             	mov    0x78(%eax),%eax
   10e18:	ff 75 10             	push   0x10(%ebp)
   10e1b:	ff 75 0c             	push   0xc(%ebp)
   10e1e:	ff 75 08             	push   0x8(%ebp)
   10e21:	50                   	push   %eax
   10e22:	e8 2b ff ff ff       	call   10d52 <memory_alloc_for_page_dir>
   10e27:	83 c4 10             	add    $0x10,%esp
}
   10e2a:	c9                   	leave  
   10e2b:	c3                   	ret    

00010e2c <curr_page_dir>:
/**
 * @brief 返回当前进程的页目录表的地址
 * 
 * @return pde_t* 
 */
static pde_t* curr_page_dir() {
   10e2c:	55                   	push   %ebp
   10e2d:	89 e5                	mov    %esp,%ebp
   10e2f:	83 ec 08             	sub    $0x8,%esp
  return (pde_t*)(task_current()->tss.cr3);
   10e32:	e8 5d 0b 00 00       	call   11994 <task_current>
   10e37:	8b 40 78             	mov    0x78(%eax),%eax
}
   10e3a:	c9                   	leave  
   10e3b:	c3                   	ret    

00010e3c <memory_alloc_page>:
/**
 * @brief 为进程的内核空间分配一页内存，需特权级0访问
 * 
 * @return uint32_t 内存的起始地址
 */
uint32_t memory_alloc_page() {
   10e3c:	55                   	push   %ebp
   10e3d:	89 e5                	mov    %esp,%ebp
   10e3f:	83 ec 18             	sub    $0x18,%esp
  //因为0x100000 ~ 0x8000 0000,即低 1mb~2gb都由操作系统内核使用，
  //操作系统内核已对整个内存空间进行了一一映射，而每个程序的2gb以下空间都使用操作系统的虚拟页表
  //所以直接返回该页物理地址，也就是该页在操作系统虚拟地址空间中的虚拟地址
  //需要注意的是后续访问该页需要0特权级，因为访问的是内核空间
  uint32_t addr = addr_alloc_page(&paddr_alloc, 1);
   10e42:	83 ec 08             	sub    $0x8,%esp
   10e45:	6a 01                	push   $0x1
   10e47:	68 00 90 01 00       	push   $0x19000
   10e4c:	e8 55 f7 ff ff       	call   105a6 <addr_alloc_page>
   10e51:	83 c4 10             	add    $0x10,%esp
   10e54:	89 45 f4             	mov    %eax,-0xc(%ebp)
  return addr;
   10e57:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   10e5a:	c9                   	leave  
   10e5b:	c3                   	ret    

00010e5c <memory_free_page>:
 * @brief 释放一页内存空间
 * 
 * @param addr 
 */

void memory_free_page(uint32_t addr) {
   10e5c:	55                   	push   %ebp
   10e5d:	89 e5                	mov    %esp,%ebp
   10e5f:	83 ec 18             	sub    $0x18,%esp
  if (addr < MEM_TASK_BASE) { //释放内核空间的一页内存
   10e62:	8b 45 08             	mov    0x8(%ebp),%eax
   10e65:	85 c0                	test   %eax,%eax
   10e67:	78 17                	js     10e80 <memory_free_page+0x24>
    addr_free_page(&paddr_alloc, addr, 1);  //因为内核空间为一一映射关系，虚拟地址即为物理地址,且不需要解除映射关系
   10e69:	83 ec 04             	sub    $0x4,%esp
   10e6c:	6a 01                	push   $0x1
   10e6e:	ff 75 08             	push   0x8(%ebp)
   10e71:	68 00 90 01 00       	push   $0x19000
   10e76:	e8 92 f7 ff ff       	call   1060d <addr_free_page>
   10e7b:	83 c4 10             	add    $0x10,%esp

    //3.将页表项清空，解除映射关系
    pte->v = 0;
  }

}
   10e7e:	eb 72                	jmp    10ef2 <memory_free_page+0x96>
    pte_t *pte = find_pte(curr_page_dir(), addr, 0);
   10e80:	e8 a7 ff ff ff       	call   10e2c <curr_page_dir>
   10e85:	83 ec 04             	sub    $0x4,%esp
   10e88:	6a 00                	push   $0x0
   10e8a:	ff 75 08             	push   0x8(%ebp)
   10e8d:	50                   	push   %eax
   10e8e:	e8 b3 f8 ff ff       	call   10746 <find_pte>
   10e93:	83 c4 10             	add    $0x10,%esp
   10e96:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT(pte != (pte_t*)0 && pte->present);
   10e99:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10e9d:	74 0d                	je     10eac <memory_free_page+0x50>
   10e9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10ea2:	0f b6 00             	movzbl (%eax),%eax
   10ea5:	83 e0 01             	and    $0x1,%eax
   10ea8:	84 c0                	test   %al,%al
   10eaa:	75 1c                	jne    10ec8 <memory_free_page+0x6c>
   10eac:	68 f0 69 01 00       	push   $0x169f0
   10eb1:	68 7c 6a 01 00       	push   $0x16a7c
   10eb6:	68 5a 02 00 00       	push   $0x25a
   10ebb:	68 10 69 01 00       	push   $0x16910
   10ec0:	e8 2e 4c 00 00       	call   15af3 <pannic>
   10ec5:	83 c4 10             	add    $0x10,%esp
    addr_free_page(&paddr_alloc, pte_to_pg_addr(pte), 1);
   10ec8:	83 ec 0c             	sub    $0xc,%esp
   10ecb:	ff 75 f4             	push   -0xc(%ebp)
   10ece:	e8 83 f4 ff ff       	call   10356 <pte_to_pg_addr>
   10ed3:	83 c4 10             	add    $0x10,%esp
   10ed6:	83 ec 04             	sub    $0x4,%esp
   10ed9:	6a 01                	push   $0x1
   10edb:	50                   	push   %eax
   10edc:	68 00 90 01 00       	push   $0x19000
   10ee1:	e8 27 f7 ff ff       	call   1060d <addr_free_page>
   10ee6:	83 c4 10             	add    $0x10,%esp
    pte->v = 0;
   10ee9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10eec:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   10ef2:	90                   	nop
   10ef3:	c9                   	leave  
   10ef4:	c3                   	ret    

00010ef5 <memory_get_paddr>:
 * 
 * @param page_dir 
 * @param vaddr 
 * @return uint32_t 
 */
uint32_t memory_get_paddr(uint32_t page_dir, uint32_t vaddr) {
   10ef5:	55                   	push   %ebp
   10ef6:	89 e5                	mov    %esp,%ebp
   10ef8:	83 ec 18             	sub    $0x18,%esp
  //查找vaddr对应的页表项
  pte_t * pte = find_pte((pde_t*)page_dir, vaddr, 0);
   10efb:	8b 45 08             	mov    0x8(%ebp),%eax
   10efe:	83 ec 04             	sub    $0x4,%esp
   10f01:	6a 00                	push   $0x0
   10f03:	ff 75 0c             	push   0xc(%ebp)
   10f06:	50                   	push   %eax
   10f07:	e8 3a f8 ff ff       	call   10746 <find_pte>
   10f0c:	83 c4 10             	add    $0x10,%esp
   10f0f:	89 45 f4             	mov    %eax,-0xc(%ebp)

  //若没有找到该页表项或该页表项还不存在，则返回0
  if (!pte || !pte->present) {
   10f12:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10f16:	74 0d                	je     10f25 <memory_get_paddr+0x30>
   10f18:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f1b:	0f b6 00             	movzbl (%eax),%eax
   10f1e:	83 e0 01             	and    $0x1,%eax
   10f21:	84 c0                	test   %al,%al
   10f23:	75 07                	jne    10f2c <memory_get_paddr+0x37>
    return 0;
   10f25:	b8 00 00 00 00       	mov    $0x0,%eax
   10f2a:	eb 1a                	jmp    10f46 <memory_get_paddr+0x51>
  }

  //找到并存在该页表项，返回绑定的物理地址
  return pte_to_pg_addr(pte) | (vaddr & (MEM_PAGE_SIZE - 1));
   10f2c:	83 ec 0c             	sub    $0xc,%esp
   10f2f:	ff 75 f4             	push   -0xc(%ebp)
   10f32:	e8 1f f4 ff ff       	call   10356 <pte_to_pg_addr>
   10f37:	83 c4 10             	add    $0x10,%esp
   10f3a:	89 c2                	mov    %eax,%edx
   10f3c:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f3f:	25 ff 0f 00 00       	and    $0xfff,%eax
   10f44:	09 d0                	or     %edx,%eax

}
   10f46:	c9                   	leave  
   10f47:	c3                   	ret    

00010f48 <memory_copy_uvm_data>:
 * @param to_addr 目标虚拟空间的起始地址
 * @param to_page_dir 目标虚拟空间的页目录表
 * @param from_addr 当前虚拟空间中的源地址
 * @param size 拷贝的大小
 */
int memory_copy_uvm_data(uint32_t to_vaddr, uint32_t to_page_dir, uint32_t from_vaddr, uint32_t size) {
   10f48:	55                   	push   %ebp
   10f49:	89 e5                	mov    %esp,%ebp
   10f4b:	83 ec 18             	sub    $0x18,%esp

  //由于虚拟地址空间是连续的而物理地址空间不一定，所以需要一页一页的单独拷贝
  while (size > 0) {
   10f4e:	eb 6e                	jmp    10fbe <memory_copy_uvm_data+0x76>
    //1.获取to_vaddr对应的物理地址
    uint32_t to_paddr = memory_get_paddr(to_page_dir, to_vaddr);
   10f50:	83 ec 08             	sub    $0x8,%esp
   10f53:	ff 75 08             	push   0x8(%ebp)
   10f56:	ff 75 0c             	push   0xc(%ebp)
   10f59:	e8 97 ff ff ff       	call   10ef5 <memory_get_paddr>
   10f5e:	83 c4 10             	add    $0x10,%esp
   10f61:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (to_paddr == 0) {
   10f64:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10f68:	75 07                	jne    10f71 <memory_copy_uvm_data+0x29>
      return -1;
   10f6a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10f6f:	eb 58                	jmp    10fc9 <memory_copy_uvm_data+0x81>
    }

    //2.获取to_paddr所在的物理页可以写入的空间大小
    //即从to_paddr到该页的末尾的空间大小
    uint32_t offset = (MEM_PAGE_SIZE - 1) & to_paddr;
   10f71:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10f74:	25 ff 0f 00 00       	and    $0xfff,%eax
   10f79:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32_t curr_size = MEM_PAGE_SIZE - offset;
   10f7c:	b8 00 10 00 00       	mov    $0x1000,%eax
   10f81:	2b 45 ec             	sub    -0x14(%ebp),%eax
   10f84:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //3.判断size是否  < curr_size
    if (size < curr_size) { //size < curr_size则在当前物理页拷贝szie个字节即可
   10f87:	8b 45 14             	mov    0x14(%ebp),%eax
   10f8a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
   10f8d:	73 06                	jae    10f95 <memory_copy_uvm_data+0x4d>
      curr_size = size;
   10f8f:	8b 45 14             	mov    0x14(%ebp),%eax
   10f92:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    //4.拷贝内容并更新到下一个需要拷贝的地方
    kernel_memcpy((void*)to_paddr, (void*)from_vaddr, curr_size);
   10f95:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   10f98:	8b 55 10             	mov    0x10(%ebp),%edx
   10f9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10f9e:	83 ec 04             	sub    $0x4,%esp
   10fa1:	51                   	push   %ecx
   10fa2:	52                   	push   %edx
   10fa3:	50                   	push   %eax
   10fa4:	e8 14 50 00 00       	call   15fbd <kernel_memcpy>
   10fa9:	83 c4 10             	add    $0x10,%esp
    size -= curr_size;
   10fac:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10faf:	29 45 14             	sub    %eax,0x14(%ebp)
    to_vaddr += curr_size;
   10fb2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10fb5:	01 45 08             	add    %eax,0x8(%ebp)
    from_vaddr += curr_size;
   10fb8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10fbb:	01 45 10             	add    %eax,0x10(%ebp)
  while (size > 0) {
   10fbe:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   10fc2:	75 8c                	jne    10f50 <memory_copy_uvm_data+0x8>

  }
  
  return 0;
   10fc4:	b8 00 00 00 00       	mov    $0x0,%eax

}
   10fc9:	c9                   	leave  
   10fca:	c3                   	ret    

00010fcb <sys_sbrk>:
 * @brief 拓展堆区内存
 * 
 * @param incr 增长指定字节
 * @return char* 
 */
char *sys_sbrk(int incr) {
   10fcb:	55                   	push   %ebp
   10fcc:	89 e5                	mov    %esp,%ebp
   10fce:	83 ec 38             	sub    $0x38,%esp
  ASSERT(incr >= 0); //只处理堆区内存增加的情况
   10fd1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10fd5:	79 1c                	jns    10ff3 <sys_sbrk+0x28>
   10fd7:	68 11 6a 01 00       	push   $0x16a11
   10fdc:	68 90 6a 01 00       	push   $0x16a90
   10fe1:	68 a9 02 00 00       	push   $0x2a9
   10fe6:	68 10 69 01 00       	push   $0x16910
   10feb:	e8 03 4b 00 00       	call   15af3 <pannic>
   10ff0:	83 c4 10             	add    $0x10,%esp
  task_t *task = task_current();
   10ff3:	e8 9c 09 00 00       	call   11994 <task_current>
   10ff8:	89 45 f0             	mov    %eax,-0x10(%ebp)
  char * pre_heap_end = (char *)task->heap_end;
   10ffb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10ffe:	8b 40 14             	mov    0x14(%eax),%eax
   11001:	89 45 ec             	mov    %eax,-0x14(%ebp)
  int pre_incr = incr;
   11004:	8b 45 08             	mov    0x8(%ebp),%eax
   11007:	89 45 e8             	mov    %eax,-0x18(%ebp)

  if (incr == 0) {
   1100a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1100e:	75 1b                	jne    1102b <sys_sbrk+0x60>
    log_printf("sbrk(0): end=0x%x\n", pre_heap_end);
   11010:	83 ec 08             	sub    $0x8,%esp
   11013:	ff 75 ec             	push   -0x14(%ebp)
   11016:	68 1b 6a 01 00       	push   $0x16a1b
   1101b:	e8 e9 57 00 00       	call   16809 <log_printf>
   11020:	83 c4 10             	add    $0x10,%esp
    return pre_heap_end;
   11023:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11026:	e9 c4 00 00 00       	jmp    110ef <sys_sbrk+0x124>
  }

  uint32_t start = task->heap_end;  //堆区原始末尾位置
   1102b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1102e:	8b 40 14             	mov    0x14(%eax),%eax
   11031:	89 45 f4             	mov    %eax,-0xc(%ebp)
  uint32_t end = start + incr;  //需要拓展到的末尾位置
   11034:	8b 55 08             	mov    0x8(%ebp),%edx
   11037:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1103a:	01 d0                	add    %edx,%eax
   1103c:	89 45 e4             	mov    %eax,-0x1c(%ebp)

  uint32_t start_offset = start % MEM_PAGE_SIZE;  //获取末尾位置在当前页内的偏移量
   1103f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11042:	25 ff 0f 00 00       	and    $0xfff,%eax
   11047:	89 45 e0             	mov    %eax,-0x20(%ebp)
  if (start_offset) { //先将当前页的剩余空间分配出去
   1104a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   1104e:	74 3b                	je     1108b <sys_sbrk+0xc0>
    if (start_offset + incr <= MEM_PAGE_SIZE) { //当前页剩余内存可供分配
   11050:	8b 55 08             	mov    0x8(%ebp),%edx
   11053:	8b 45 e0             	mov    -0x20(%ebp),%eax
   11056:	01 d0                	add    %edx,%eax
   11058:	3d 00 10 00 00       	cmp    $0x1000,%eax
   1105d:	77 12                	ja     11071 <sys_sbrk+0xa6>
      task->heap_end = end; 
   1105f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11062:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   11065:	89 50 14             	mov    %edx,0x14(%eax)
      incr = 0;
   11068:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
   1106f:	eb 1a                	jmp    1108b <sys_sbrk+0xc0>
    } else {  //当前页剩余内存不够分配
      uint32_t curr_size = MEM_PAGE_SIZE - start_offset;  //获取当前页剩余大小
   11071:	b8 00 10 00 00       	mov    $0x1000,%eax
   11076:	2b 45 e0             	sub    -0x20(%ebp),%eax
   11079:	89 45 dc             	mov    %eax,-0x24(%ebp)
      //将当前页剩余内存全部分配出
      start += curr_size;
   1107c:	8b 45 dc             	mov    -0x24(%ebp),%eax
   1107f:	01 45 f4             	add    %eax,-0xc(%ebp)
      incr -= curr_size;
   11082:	8b 45 08             	mov    0x8(%ebp),%eax
   11085:	2b 45 dc             	sub    -0x24(%ebp),%eax
   11088:	89 45 08             	mov    %eax,0x8(%ebp)
    }
  }

  if (incr) { //还需要继续拓展
   1108b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1108f:	74 3c                	je     110cd <sys_sbrk+0x102>
    uint32_t curr_size = end - start; //还需拓展的大小
   11091:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11094:	2b 45 f4             	sub    -0xc(%ebp),%eax
   11097:	89 45 d8             	mov    %eax,-0x28(%ebp)
    int err = memory_alloc_page_for(start, curr_size, PTE_P | PTE_U |  PTE_W);  //为该部分内存创建映射关系
   1109a:	83 ec 04             	sub    $0x4,%esp
   1109d:	6a 07                	push   $0x7
   1109f:	ff 75 d8             	push   -0x28(%ebp)
   110a2:	ff 75 f4             	push   -0xc(%ebp)
   110a5:	e8 60 fd ff ff       	call   10e0a <memory_alloc_page_for>
   110aa:	83 c4 10             	add    $0x10,%esp
   110ad:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    if (err < 0) {
   110b0:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   110b4:	79 17                	jns    110cd <sys_sbrk+0x102>
      log_printf("sbrk: alloc mem failed.\n");
   110b6:	83 ec 0c             	sub    $0xc,%esp
   110b9:	68 2e 6a 01 00       	push   $0x16a2e
   110be:	e8 46 57 00 00       	call   16809 <log_printf>
   110c3:	83 c4 10             	add    $0x10,%esp
      return (char*)-1;
   110c6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   110cb:	eb 22                	jmp    110ef <sys_sbrk+0x124>
    }

  }

  log_printf("sbrk(%d): end=0x%x\n", pre_incr, end);
   110cd:	83 ec 04             	sub    $0x4,%esp
   110d0:	ff 75 e4             	push   -0x1c(%ebp)
   110d3:	ff 75 e8             	push   -0x18(%ebp)
   110d6:	68 47 6a 01 00       	push   $0x16a47
   110db:	e8 29 57 00 00       	call   16809 <log_printf>
   110e0:	83 c4 10             	add    $0x10,%esp
  task->heap_end = end;
   110e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   110e6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   110e9:	89 50 14             	mov    %edx,0x14(%eax)

  return (char*)end;
   110ec:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   110ef:	c9                   	leave  
   110f0:	c3                   	ret    

000110f1 <list_node_init>:
    list_node_t * first;
    list_node_t * last;
    int size;
}list_t;

static inline void list_node_init(list_node_t *node) {
   110f1:	55                   	push   %ebp
   110f2:	89 e5                	mov    %esp,%ebp
   110f4:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   110f7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   110fb:	75 19                	jne    11116 <list_node_init+0x25>
   110fd:	68 9c 6a 01 00       	push   $0x16a9c
   11102:	68 58 6c 01 00       	push   $0x16c58
   11107:	6a 20                	push   $0x20
   11109:	68 b4 6a 01 00       	push   $0x16ab4
   1110e:	e8 e0 49 00 00       	call   15af3 <pannic>
   11113:	83 c4 10             	add    $0x10,%esp
    node->pre = node->next = (list_node_t*)0;
   11116:	8b 45 08             	mov    0x8(%ebp),%eax
   11119:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11120:	8b 45 08             	mov    0x8(%ebp),%eax
   11123:	8b 50 04             	mov    0x4(%eax),%edx
   11126:	8b 45 08             	mov    0x8(%ebp),%eax
   11129:	89 10                	mov    %edx,(%eax)
}
   1112b:	90                   	nop
   1112c:	c9                   	leave  
   1112d:	c3                   	ret    

0001112e <list_node_next>:
    ASSERT(node != (list_node_t*)0);

    return node->pre;
}

static inline list_node_t *list_node_next(list_node_t *node) {
   1112e:	55                   	push   %ebp
   1112f:	89 e5                	mov    %esp,%ebp
   11131:	83 ec 08             	sub    $0x8,%esp
    ASSERT(node != (list_node_t*)0);
   11134:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11138:	75 19                	jne    11153 <list_node_next+0x25>
   1113a:	68 9c 6a 01 00       	push   $0x16a9c
   1113f:	68 b8 6c 01 00       	push   $0x16cb8
   11144:	6a 2b                	push   $0x2b
   11146:	68 b4 6a 01 00       	push   $0x16ab4
   1114b:	e8 a3 49 00 00       	call   15af3 <pannic>
   11150:	83 c4 10             	add    $0x10,%esp

    return node->next;
   11153:	8b 45 08             	mov    0x8(%ebp),%eax
   11156:	8b 40 04             	mov    0x4(%eax),%eax
}
   11159:	c9                   	leave  
   1115a:	c3                   	ret    

0001115b <list_init>:

static inline void list_init(list_t *list) {
   1115b:	55                   	push   %ebp
   1115c:	89 e5                	mov    %esp,%ebp
   1115e:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   11161:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11165:	75 19                	jne    11180 <list_init+0x25>
   11167:	68 f2 6a 01 00       	push   $0x16af2
   1116c:	68 68 6c 01 00       	push   $0x16c68
   11171:	6a 31                	push   $0x31
   11173:	68 b4 6a 01 00       	push   $0x16ab4
   11178:	e8 76 49 00 00       	call   15af3 <pannic>
   1117d:	83 c4 10             	add    $0x10,%esp

    list->first = list->last = (list_node_t*)0;
   11180:	8b 45 08             	mov    0x8(%ebp),%eax
   11183:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1118a:	8b 45 08             	mov    0x8(%ebp),%eax
   1118d:	8b 50 04             	mov    0x4(%eax),%edx
   11190:	8b 45 08             	mov    0x8(%ebp),%eax
   11193:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   11195:	8b 45 08             	mov    0x8(%ebp),%eax
   11198:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   1119f:	90                   	nop
   111a0:	c9                   	leave  
   111a1:	c3                   	ret    

000111a2 <list_is_empty>:

static inline int list_is_empty(list_t *list) {
   111a2:	55                   	push   %ebp
   111a3:	89 e5                	mov    %esp,%ebp
   111a5:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   111a8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   111ac:	75 19                	jne    111c7 <list_is_empty+0x25>
   111ae:	68 f2 6a 01 00       	push   $0x16af2
   111b3:	68 c8 6c 01 00       	push   $0x16cc8
   111b8:	6a 38                	push   $0x38
   111ba:	68 b4 6a 01 00       	push   $0x16ab4
   111bf:	e8 2f 49 00 00       	call   15af3 <pannic>
   111c4:	83 c4 10             	add    $0x10,%esp

    return list->size == 0;
   111c7:	8b 45 08             	mov    0x8(%ebp),%eax
   111ca:	8b 40 08             	mov    0x8(%eax),%eax
   111cd:	85 c0                	test   %eax,%eax
   111cf:	0f 94 c0             	sete   %al
   111d2:	0f b6 c0             	movzbl %al,%eax
}
   111d5:	c9                   	leave  
   111d6:	c3                   	ret    

000111d7 <list_get_size>:

static inline int list_get_size(list_t *list) {
   111d7:	55                   	push   %ebp
   111d8:	89 e5                	mov    %esp,%ebp
   111da:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   111dd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   111e1:	75 19                	jne    111fc <list_get_size+0x25>
   111e3:	68 f2 6a 01 00       	push   $0x16af2
   111e8:	68 f8 6c 01 00       	push   $0x16cf8
   111ed:	6a 3e                	push   $0x3e
   111ef:	68 b4 6a 01 00       	push   $0x16ab4
   111f4:	e8 fa 48 00 00       	call   15af3 <pannic>
   111f9:	83 c4 10             	add    $0x10,%esp

    return list->size;
   111fc:	8b 45 08             	mov    0x8(%ebp),%eax
   111ff:	8b 40 08             	mov    0x8(%eax),%eax
}
   11202:	c9                   	leave  
   11203:	c3                   	ret    

00011204 <list_get_first>:

static inline list_node_t *list_get_first(list_t *list) {
   11204:	55                   	push   %ebp
   11205:	89 e5                	mov    %esp,%ebp
   11207:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1120a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1120e:	75 19                	jne    11229 <list_get_first+0x25>
   11210:	68 f2 6a 01 00       	push   $0x16af2
   11215:	68 a8 6c 01 00       	push   $0x16ca8
   1121a:	6a 44                	push   $0x44
   1121c:	68 b4 6a 01 00       	push   $0x16ab4
   11221:	e8 cd 48 00 00       	call   15af3 <pannic>
   11226:	83 c4 10             	add    $0x10,%esp

    return list->first;
   11229:	8b 45 08             	mov    0x8(%ebp),%eax
   1122c:	8b 00                	mov    (%eax),%eax
}
   1122e:	c9                   	leave  
   1122f:	c3                   	ret    

00011230 <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   11230:	55                   	push   %ebp
   11231:	89 e5                	mov    %esp,%ebp
   11233:	f4                   	hlt    
   11234:	90                   	nop
   11235:	5d                   	pop    %ebp
   11236:	c3                   	ret    

00011237 <write_cr3>:
static inline void write_cr3(uint32_t data) {
   11237:	55                   	push   %ebp
   11238:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("mov %[v], %%cr3" : : [v] "r"(data));
   1123a:	8b 45 08             	mov    0x8(%ebp),%eax
   1123d:	0f 22 d8             	mov    %eax,%cr3
}
   11240:	90                   	nop
   11241:	5d                   	pop    %ebp
   11242:	c3                   	ret    

00011243 <far_jump>:
 * @brief  远跳转，当跳转发生在TSS段之间时，cpu将会保存状态到当前TR寄存器指向的TSS段
 *
 * @param selector 选择子
 * @param offset 跳转的偏移量
 */
static inline void far_jump(uint32_t selector, uint32_t offset) {
   11243:	55                   	push   %ebp
   11244:	89 e5                	mov    %esp,%ebp
   11246:	83 ec 10             	sub    $0x10,%esp
  // 传入远跳转需要的参数, 即cs = selector, eip = offset 
  uint32_t addr[] = {offset, selector};  
   11249:	8b 45 0c             	mov    0xc(%ebp),%eax
   1124c:	89 45 f8             	mov    %eax,-0x8(%ebp)
   1124f:	8b 45 08             	mov    0x8(%ebp),%eax
   11252:	89 45 fc             	mov    %eax,-0x4(%ebp)

  __asm__ __volatile__("ljmpl *(%[a])" : : [a] "r"(addr));
   11255:	8d 45 f8             	lea    -0x8(%ebp),%eax
   11258:	ff 28                	ljmp   *(%eax)
}
   1125a:	90                   	nop
   1125b:	c9                   	leave  
   1125c:	c3                   	ret    

0001125d <write_tr>:
 * @brief   写入当前任务的TSS段描述符的选择子到TR寄存器中，告诉cpu当前段的TSS位置
 *          以便在进行任务切换时，将状态保存到该TSS段中
 * 
 * @param tss_selector 准备运行的任务的TSS段的选择子
 */
static inline void write_tr(uint16_t tss_selector) {
   1125d:	55                   	push   %ebp
   1125e:	89 e5                	mov    %esp,%ebp
   11260:	83 ec 04             	sub    $0x4,%esp
   11263:	8b 45 08             	mov    0x8(%ebp),%eax
   11266:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  __asm__ __volatile__("ltr %[v]" : : [v]"r"(tss_selector));
   1126a:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   1126e:	0f 00 d8             	ltr    %ax
}
   11271:	90                   	nop
   11272:	c9                   	leave  
   11273:	c3                   	ret    

00011274 <mmu_set_page_dir>:
static inline void mmu_set_page_dir(uint32_t paddr) {
   11274:	55                   	push   %ebp
   11275:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   11277:	ff 75 08             	push   0x8(%ebp)
   1127a:	e8 b8 ff ff ff       	call   11237 <write_cr3>
   1127f:	83 c4 04             	add    $0x4,%esp
}
   11282:	90                   	nop
   11283:	c9                   	leave  
   11284:	c3                   	ret    

00011285 <up2>:
static inline uint32_t up2(uint32_t size, uint32_t bound) {
   11285:	55                   	push   %ebp
   11286:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   11288:	8b 55 08             	mov    0x8(%ebp),%edx
   1128b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1128e:	01 d0                	add    %edx,%eax
   11290:	8d 50 ff             	lea    -0x1(%eax),%edx
   11293:	8b 45 0c             	mov    0xc(%ebp),%eax
   11296:	f7 d8                	neg    %eax
   11298:	21 d0                	and    %edx,%eax
}
   1129a:	5d                   	pop    %ebp
   1129b:	c3                   	ret    

0001129c <task_file>:
 * @brief 根据文件描述符从当前任务进程的打开文件表中返回对应的文件结构指针
 *
 * @param fd 文件描述符
 * @return file_t*
 */
file_t *task_file(int fd) {
   1129c:	55                   	push   %ebp
   1129d:	89 e5                	mov    %esp,%ebp
   1129f:	83 ec 18             	sub    $0x18,%esp
  file_t *file = (file_t *)0;
   112a2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  if (fd >= 0 && fd < TASK_OFILE_SIZE) {
   112a9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   112ad:	78 18                	js     112c7 <task_file+0x2b>
   112af:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   112b3:	7f 12                	jg     112c7 <task_file+0x2b>
    file = task_current()->file_table[fd];
   112b5:	e8 da 06 00 00       	call   11994 <task_current>
   112ba:	8b 55 08             	mov    0x8(%ebp),%edx
   112bd:	83 c2 30             	add    $0x30,%edx
   112c0:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   112c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
  }

  return file;
   112c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   112ca:	c9                   	leave  
   112cb:	c3                   	ret    

000112cc <task_alloc_fd>:
 * @brief 将已分配的文件结构指针放入当前进程的打开文件表中，并返回文件描述符
 *
 * @param file 已从系统file_table中分配的文件结构指针
 * @return int 文件描述符
 */
int task_alloc_fd(file_t *file) {
   112cc:	55                   	push   %ebp
   112cd:	89 e5                	mov    %esp,%ebp
   112cf:	83 ec 18             	sub    $0x18,%esp
  task_t *task = task_current();
   112d2:	e8 bd 06 00 00       	call   11994 <task_current>
   112d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
  for (int i = 0; i < TASK_OFILE_SIZE; ++i) {
   112da:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   112e1:	eb 2f                	jmp    11312 <task_alloc_fd+0x46>
    file_t *p = task->file_table[i];
   112e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   112e6:	8b 55 f4             	mov    -0xc(%ebp),%edx
   112e9:	83 c2 30             	add    $0x30,%edx
   112ec:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   112f0:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (p == (file_t *)0) {  // 打开文件表中的第i项未分配，对其进行分配操作
   112f3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   112f7:	75 15                	jne    1130e <task_alloc_fd+0x42>
      task->file_table[i] = file;
   112f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   112fc:	8b 55 f4             	mov    -0xc(%ebp),%edx
   112ff:	8d 4a 30             	lea    0x30(%edx),%ecx
   11302:	8b 55 08             	mov    0x8(%ebp),%edx
   11305:	89 54 88 08          	mov    %edx,0x8(%eax,%ecx,4)
      return i;
   11309:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1130c:	eb 0f                	jmp    1131d <task_alloc_fd+0x51>
  for (int i = 0; i < TASK_OFILE_SIZE; ++i) {
   1130e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11312:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   11316:	7e cb                	jle    112e3 <task_alloc_fd+0x17>
    }
  }

  return -1;
   11318:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1131d:	c9                   	leave  
   1131e:	c3                   	ret    

0001131f <task_remove_fd>:
/**
 * @brief 从当前进程的打开文件表中移除文件描述符对应的文件结构指针
 *
 * @param fd
 */
void task_remove_fd(int fd) {
   1131f:	55                   	push   %ebp
   11320:	89 e5                	mov    %esp,%ebp
   11322:	83 ec 08             	sub    $0x8,%esp
  // 清空文件描述符对应的内存资源即可
  if (fd >= 0 && fd < TASK_OFILE_SIZE) {
   11325:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11329:	78 19                	js     11344 <task_remove_fd+0x25>
   1132b:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   1132f:	7f 13                	jg     11344 <task_remove_fd+0x25>
    task_current()->file_table[fd] = (file_t *)0;
   11331:	e8 5e 06 00 00       	call   11994 <task_current>
   11336:	8b 55 08             	mov    0x8(%ebp),%edx
   11339:	83 c2 30             	add    $0x30,%edx
   1133c:	c7 44 90 08 00 00 00 	movl   $0x0,0x8(%eax,%edx,4)
   11343:	00 
  }
}
   11344:	90                   	nop
   11345:	c9                   	leave  
   11346:	c3                   	ret    

00011347 <switch_to_tss>:

static void switch_to_tss(uint16_t tss_selector) {
   11347:	55                   	push   %ebp
   11348:	89 e5                	mov    %esp,%ebp
   1134a:	83 ec 04             	sub    $0x4,%esp
   1134d:	8b 45 08             	mov    0x8(%ebp),%eax
   11350:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  // 进行远跳转，让cpu访问该tss段的描述符，cpu将重启到之前运行该tss对应的任务的状态继续运行该任务
  far_jump(tss_selector, 0);
   11354:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   11358:	6a 00                	push   $0x0
   1135a:	50                   	push   %eax
   1135b:	e8 e3 fe ff ff       	call   11243 <far_jump>
   11360:	83 c4 08             	add    $0x8,%esp
}
   11363:	90                   	nop
   11364:	c9                   	leave  
   11365:	c3                   	ret    

00011366 <task_switch_from_to>:
 * @brief  将任务从from切换到to
 *
 * @param from 切换前的任务
 * @param to 切换后的任务
 */
void task_switch_from_to(task_t *from, task_t *to) {
   11366:	55                   	push   %ebp
   11367:	89 e5                	mov    %esp,%ebp
  // 跳转到对应的tss段读取并恢复cpu任务状态
  switch_to_tss(to->tss_selector);
   11369:	8b 45 0c             	mov    0xc(%ebp),%eax
   1136c:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
   11372:	0f b7 c0             	movzwl %ax,%eax
   11375:	50                   	push   %eax
   11376:	e8 cc ff ff ff       	call   11347 <switch_to_tss>
   1137b:	83 c4 04             	add    $0x4,%esp
}
   1137e:	90                   	nop
   1137f:	c9                   	leave  
   11380:	c3                   	ret    

00011381 <tss_init>:
 * @param task 需要初始化的任务对象
 * @param entry 任务入口地址
 * @param esp 任务所用的栈顶指针
 * @param flag 任务属性标志位，如特权级
 */
static int tss_init(task_t *task, uint32_t entry, uint32_t esp, uint32_t flag) {
   11381:	55                   	push   %ebp
   11382:	89 e5                	mov    %esp,%ebp
   11384:	83 ec 28             	sub    $0x28,%esp
  // 1.将该TSS段绑定到GDT中的某个段描述符
  uint32_t tss_selector = gdt_alloc_desc();
   11387:	e8 e9 14 00 00       	call   12875 <gdt_alloc_desc>
   1138c:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if (tss_selector < 0) {
    log_printf("alloc tss failed!\n");
    return -1;
  }
  segment_desc_set(tss_selector, (uint32_t)&task->tss, sizeof(task->tss),
   1138f:	8b 45 08             	mov    0x8(%ebp),%eax
   11392:	83 c0 5c             	add    $0x5c,%eax
   11395:	89 c2                	mov    %eax,%edx
   11397:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1139a:	0f b7 c0             	movzwl %ax,%eax
   1139d:	68 89 00 00 00       	push   $0x89
   113a2:	6a 68                	push   $0x68
   113a4:	52                   	push   %edx
   113a5:	50                   	push   %eax
   113a6:	e8 58 13 00 00       	call   12703 <segment_desc_set>
   113ab:	83 c4 10             	add    $0x10,%esp
                   SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_TYPE_TSS);

  // 2.将tss段的值置空
  kernel_memset(&task->tss, 0, sizeof(task->tss));
   113ae:	8b 45 08             	mov    0x8(%ebp),%eax
   113b1:	83 c0 5c             	add    $0x5c,%eax
   113b4:	83 ec 04             	sub    $0x4,%esp
   113b7:	6a 68                	push   $0x68
   113b9:	6a 00                	push   $0x0
   113bb:	50                   	push   %eax
   113bc:	e8 4b 4c 00 00       	call   1600c <kernel_memset>
   113c1:	83 c4 10             	add    $0x10,%esp

  // 3.记录tss绑定到的描述符的选择子
  task->tss_selector = tss_selector;
   113c4:	8b 45 08             	mov    0x8(%ebp),%eax
   113c7:	8b 55 ec             	mov    -0x14(%ebp),%edx
   113ca:	89 90 c4 00 00 00    	mov    %edx,0xc4(%eax)

  // 4.根据任务的特权级来设置对应选择子的cpl
  uint32_t code_selector, data_selector;
  if (flag & TASK_FLAGS_SYSTEM) {  // 内核特权级
   113d0:	8b 45 14             	mov    0x14(%ebp),%eax
   113d3:	83 e0 01             	and    $0x1,%eax
   113d6:	85 c0                	test   %eax,%eax
   113d8:	74 10                	je     113ea <tss_init+0x69>
    code_selector = KERNEL_SELECTOR_CS;
   113da:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%ebp)
    data_selector = KERNEL_SELECTOR_DS;
   113e1:	c7 45 f0 10 00 00 00 	movl   $0x10,-0x10(%ebp)
   113e8:	eb 16                	jmp    11400 <tss_init+0x7f>
  } else {  // 用户特权级
    // 获取任务的代码段选择子和数据段选择子，并初始化其CPL,因为是平台模型，所以基本不涉及到跨段访问，所以不需要RPL
    code_selector = task_manager.app_code_selector | SEG_CPL3;
   113ea:	a1 b8 25 02 00       	mov    0x225b8,%eax
   113ef:	83 c8 03             	or     $0x3,%eax
   113f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    data_selector = task_manager.app_data_selector | SEG_CPL3;
   113f5:	a1 bc 25 02 00       	mov    0x225bc,%eax
   113fa:	83 c8 03             	or     $0x3,%eax
   113fd:	89 45 f0             	mov    %eax,-0x10(%ebp)
  }

  // 5.设置eip，即任务的起始地址
  task->tss.eip = entry;
   11400:	8b 45 08             	mov    0x8(%ebp),%eax
   11403:	8b 55 0c             	mov    0xc(%ebp),%edx
   11406:	89 50 7c             	mov    %edx,0x7c(%eax)

  // 6.根据任务的特权级设置任务所使用的栈空间
  task->tss.esp = esp;  // 特权级为3的栈空间
   11409:	8b 45 08             	mov    0x8(%ebp),%eax
   1140c:	8b 55 10             	mov    0x10(%ebp),%edx
   1140f:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
  uint32_t kernel_stack =
      memory_alloc_page();  // 分配一页作为内核特权级0的栈空间
   11415:	e8 22 fa ff ff       	call   10e3c <memory_alloc_page>
   1141a:	89 45 e8             	mov    %eax,-0x18(%ebp)
  if (kernel_stack == 0)    // 内核栈空间初始化失败
   1141d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11421:	0f 84 9e 00 00 00    	je     114c5 <tss_init+0x144>
    goto tss_init_failed;
  else
    task->tss.esp0 = kernel_stack + MEM_PAGE_SIZE;  // 特权级为0的栈空间
   11427:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1142a:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edx
   11430:	8b 45 08             	mov    0x8(%ebp),%eax
   11433:	89 50 60             	mov    %edx,0x60(%eax)

  // 7.平坦模型，初始化栈空间段寄存器
  task->tss.ss = data_selector;  // 特权级为3时使用的栈段
   11436:	8b 45 08             	mov    0x8(%ebp),%eax
   11439:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1143c:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
  task->tss.ss0 =
   11442:	8b 45 08             	mov    0x8(%ebp),%eax
   11445:	c7 40 64 10 00 00 00 	movl   $0x10,0x64(%eax)
      KERNEL_SELECTOR_DS;  // 特权级为0时使用的栈段，
                           // 由于平坦模型，其实使用的是同一片空间，只是特权级发生了变化

  // 8. 平坦模型，初始其余化段寄存器
  task->tss.es = task->tss.fs = task->tss.gs = task->tss.ds = data_selector;
   1144c:	8b 45 08             	mov    0x8(%ebp),%eax
   1144f:	8b 55 f0             	mov    -0x10(%ebp),%edx
   11452:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
   11458:	8b 45 08             	mov    0x8(%ebp),%eax
   1145b:	8b 90 b0 00 00 00    	mov    0xb0(%eax),%edx
   11461:	8b 45 08             	mov    0x8(%ebp),%eax
   11464:	89 90 b8 00 00 00    	mov    %edx,0xb8(%eax)
   1146a:	8b 45 08             	mov    0x8(%ebp),%eax
   1146d:	8b 90 b8 00 00 00    	mov    0xb8(%eax),%edx
   11473:	8b 45 08             	mov    0x8(%ebp),%eax
   11476:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)
   1147c:	8b 45 08             	mov    0x8(%ebp),%eax
   1147f:	8b 90 b4 00 00 00    	mov    0xb4(%eax),%edx
   11485:	8b 45 08             	mov    0x8(%ebp),%eax
   11488:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)

  // 9.平坦模型，初始化代码段寄存器
  task->tss.cs = code_selector;
   1148e:	8b 45 08             	mov    0x8(%ebp),%eax
   11491:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11494:	89 90 a8 00 00 00    	mov    %edx,0xa8(%eax)

  // 10.初始化eflags寄存器，使cpu中断保持开启
  task->tss.eflags = EFLAGS_DEFAULT_1 | EFLAGS_IF;
   1149a:	8b 45 08             	mov    0x8(%ebp),%eax
   1149d:	c7 80 80 00 00 00 02 	movl   $0x202,0x80(%eax)
   114a4:	02 00 00 

  // 11.创建当前进程的虚拟页目录表，并设置cr3寄存器
  uint32_t page_dir = memory_creat_uvm();
   114a7:	e8 b4 f4 ff ff       	call   10960 <memory_creat_uvm>
   114ac:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  if (page_dir == 0) goto tss_init_failed;
   114af:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   114b3:	74 13                	je     114c8 <tss_init+0x147>
  task->tss.cr3 = page_dir;
   114b5:	8b 45 08             	mov    0x8(%ebp),%eax
   114b8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   114bb:	89 50 78             	mov    %edx,0x78(%eax)

  return 0;
   114be:	b8 00 00 00 00       	mov    $0x0,%eax
   114c3:	eb 2f                	jmp    114f4 <tss_init+0x173>
    goto tss_init_failed;
   114c5:	90                   	nop
   114c6:	eb 01                	jmp    114c9 <tss_init+0x148>
  if (page_dir == 0) goto tss_init_failed;
   114c8:	90                   	nop

// tss初始化失败
tss_init_failed:
  gdt_free(tss_selector);  // 释放选择子
   114c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   114cc:	0f b7 c0             	movzwl %ax,%eax
   114cf:	83 ec 0c             	sub    $0xc,%esp
   114d2:	50                   	push   %eax
   114d3:	e8 12 14 00 00       	call   128ea <gdt_free>
   114d8:	83 c4 10             	add    $0x10,%esp

  if (kernel_stack) {  // 内核栈空间分配有效，需要释放
   114db:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   114df:	74 0e                	je     114ef <tss_init+0x16e>
    memory_free_page(kernel_stack);
   114e1:	83 ec 0c             	sub    $0xc,%esp
   114e4:	ff 75 e8             	push   -0x18(%ebp)
   114e7:	e8 70 f9 ff ff       	call   10e5c <memory_free_page>
   114ec:	83 c4 10             	add    $0x10,%esp
  }
  return -1;
   114ef:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   114f4:	c9                   	leave  
   114f5:	c3                   	ret    

000114f6 <task_start>:
/**
 * @brief 将任务插入任务链表中并设为就绪态，标志该任务可被调度
 *
 * @param task
 */
void task_start(task_t *task) {
   114f6:	55                   	push   %ebp
   114f7:	89 e5                	mov    %esp,%ebp
   114f9:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   114fc:	e8 9f 1d 00 00       	call   132a0 <idt_enter_protection>
   11501:	89 45 f4             	mov    %eax,-0xc(%ebp)

  //将任务设置为就绪态
  task_set_ready(task);
   11504:	83 ec 0c             	sub    $0xc,%esp
   11507:	ff 75 08             	push   0x8(%ebp)
   1150a:	e8 d3 03 00 00       	call   118e2 <task_set_ready>
   1150f:	83 c4 10             	add    $0x10,%esp
  task->state = TASK_READY;
   11512:	8b 45 08             	mov    0x8(%ebp),%eax
   11515:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

  idt_leave_protection(state);  // TODO:解锁
   1151b:	83 ec 0c             	sub    $0xc,%esp
   1151e:	ff 75 f4             	push   -0xc(%ebp)
   11521:	e8 92 1d 00 00       	call   132b8 <idt_leave_protection>
   11526:	83 c4 10             	add    $0x10,%esp
}
   11529:	90                   	nop
   1152a:	c9                   	leave  
   1152b:	c3                   	ret    

0001152c <task_init>:
 * @param esp 任务指行时所用的栈顶指针
 * @param flag 任务属性标志位，如特权级
 * @return int
 */
int task_init(task_t *task, const char *name, uint32_t entry, uint32_t esp,
              uint32_t flag) {
   1152c:	55                   	push   %ebp
   1152d:	89 e5                	mov    %esp,%ebp
   1152f:	83 ec 18             	sub    $0x18,%esp
  ASSERT(task != (task_t *)0);
   11532:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11536:	75 1c                	jne    11554 <task_init+0x28>
   11538:	68 05 6b 01 00       	push   $0x16b05
   1153d:	68 4c 6c 01 00       	push   $0x16c4c
   11542:	68 ca 00 00 00       	push   $0xca
   11547:	68 1c 6b 01 00       	push   $0x16b1c
   1154c:	e8 a2 45 00 00       	call   15af3 <pannic>
   11551:	83 c4 10             	add    $0x10,%esp
  // 1.初始化任务TSS段
  int err = tss_init(task, entry, esp, flag);
   11554:	ff 75 18             	push   0x18(%ebp)
   11557:	ff 75 14             	push   0x14(%ebp)
   1155a:	ff 75 10             	push   0x10(%ebp)
   1155d:	ff 75 08             	push   0x8(%ebp)
   11560:	e8 1c fe ff ff       	call   11381 <tss_init>
   11565:	83 c4 10             	add    $0x10,%esp
   11568:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (err == -1) return err;
   1156b:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
   1156f:	75 08                	jne    11579 <task_init+0x4d>
   11571:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11574:	e9 e0 00 00 00       	jmp    11659 <task_init+0x12d>

  // 2.初始化任务名称
  kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   11579:	8b 45 08             	mov    0x8(%ebp),%eax
   1157c:	83 c0 24             	add    $0x24,%eax
   1157f:	83 ec 04             	sub    $0x4,%esp
   11582:	6a 20                	push   $0x20
   11584:	ff 75 0c             	push   0xc(%ebp)
   11587:	50                   	push   %eax
   11588:	e8 29 49 00 00       	call   15eb6 <kernel_strncpy>
   1158d:	83 c4 10             	add    $0x10,%esp

  // 3.初始化任务队列节点及就绪队列节点
  list_node_init(&task->ready_node);
   11590:	8b 45 08             	mov    0x8(%ebp),%eax
   11593:	83 c0 44             	add    $0x44,%eax
   11596:	83 ec 0c             	sub    $0xc,%esp
   11599:	50                   	push   %eax
   1159a:	e8 52 fb ff ff       	call   110f1 <list_node_init>
   1159f:	83 c4 10             	add    $0x10,%esp
  list_node_init(&task->task_node);
   115a2:	8b 45 08             	mov    0x8(%ebp),%eax
   115a5:	83 c0 4c             	add    $0x4c,%eax
   115a8:	83 ec 0c             	sub    $0xc,%esp
   115ab:	50                   	push   %eax
   115ac:	e8 40 fb ff ff       	call   110f1 <list_node_init>
   115b1:	83 c4 10             	add    $0x10,%esp
  list_node_init(&task->wait_node);
   115b4:	8b 45 08             	mov    0x8(%ebp),%eax
   115b7:	83 c0 54             	add    $0x54,%eax
   115ba:	83 ec 0c             	sub    $0xc,%esp
   115bd:	50                   	push   %eax
   115be:	e8 2e fb ff ff       	call   110f1 <list_node_init>
   115c3:	83 c4 10             	add    $0x10,%esp

  // 4.初始化最大时间片数与当前拥有时间片数,以及延时时间片数
  task->state = TASK_CREATED;
   115c6:	8b 45 08             	mov    0x8(%ebp),%eax
   115c9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  task->slice_max = task->slice_curr = TASK_TIME_SLICE_DEFAULT;
   115cf:	8b 45 08             	mov    0x8(%ebp),%eax
   115d2:	c7 40 1c 0a 00 00 00 	movl   $0xa,0x1c(%eax)
   115d9:	8b 45 08             	mov    0x8(%ebp),%eax
   115dc:	8b 50 1c             	mov    0x1c(%eax),%edx
   115df:	8b 45 08             	mov    0x8(%ebp),%eax
   115e2:	89 50 18             	mov    %edx,0x18(%eax)
  task->sleep = 0;
   115e5:	8b 45 08             	mov    0x8(%ebp),%eax
   115e8:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
  task->pid = (uint32_t)task;
   115ef:	8b 55 08             	mov    0x8(%ebp),%edx
   115f2:	8b 45 08             	mov    0x8(%ebp),%eax
   115f5:	89 50 08             	mov    %edx,0x8(%eax)
  task->parent = (task_t *)0;
   115f8:	8b 45 08             	mov    0x8(%ebp),%eax
   115fb:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  task->heap_start = task->heap_end = 0;
   11602:	8b 45 08             	mov    0x8(%ebp),%eax
   11605:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
   1160c:	8b 45 08             	mov    0x8(%ebp),%eax
   1160f:	8b 50 14             	mov    0x14(%eax),%edx
   11612:	8b 45 08             	mov    0x8(%ebp),%eax
   11615:	89 50 10             	mov    %edx,0x10(%eax)
  task->status = 0;
   11618:	8b 45 08             	mov    0x8(%ebp),%eax
   1161b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)

  // 5.初始化文件表
  kernel_memset(&task->file_table, 0, sizeof(task->file_table));
   11622:	8b 45 08             	mov    0x8(%ebp),%eax
   11625:	05 c8 00 00 00       	add    $0xc8,%eax
   1162a:	83 ec 04             	sub    $0x4,%esp
   1162d:	68 00 02 00 00       	push   $0x200
   11632:	6a 00                	push   $0x0
   11634:	50                   	push   %eax
   11635:	e8 d2 49 00 00       	call   1600c <kernel_memset>
   1163a:	83 c4 10             	add    $0x10,%esp

  // 6.将任务加入任务队列
  list_insert_last(&task_manager.task_list, &task->task_node);
   1163d:	8b 45 08             	mov    0x8(%ebp),%eax
   11640:	83 c0 4c             	add    $0x4c,%eax
   11643:	83 ec 08             	sub    $0x8,%esp
   11646:	50                   	push   %eax
   11647:	68 10 20 02 00       	push   $0x22010
   1164c:	e8 cb 4e 00 00       	call   1651c <list_insert_last>
   11651:	83 c4 10             	add    $0x10,%esp

  return 1;
   11654:	b8 01 00 00 00       	mov    $0x1,%eax
}
   11659:	c9                   	leave  
   1165a:	c3                   	ret    

0001165b <task_uninit>:
/**
 * @brief 反初始化任务对象，释放对应的资源
 *
 * @param task
 */
void task_uninit(task_t *task) {
   1165b:	55                   	push   %ebp
   1165c:	89 e5                	mov    %esp,%ebp
   1165e:	83 ec 08             	sub    $0x8,%esp
  //释放已分配的选择子
  if (task->tss_selector) {  
   11661:	8b 45 08             	mov    0x8(%ebp),%eax
   11664:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
   1166a:	85 c0                	test   %eax,%eax
   1166c:	74 18                	je     11686 <task_uninit+0x2b>
    gdt_free(task->tss_selector);
   1166e:	8b 45 08             	mov    0x8(%ebp),%eax
   11671:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
   11677:	0f b7 c0             	movzwl %ax,%eax
   1167a:	83 ec 0c             	sub    $0xc,%esp
   1167d:	50                   	push   %eax
   1167e:	e8 67 12 00 00       	call   128ea <gdt_free>
   11683:	83 c4 10             	add    $0x10,%esp
  }

  //释放已分配的内核栈空间
  if (task->tss.esp0) {  
   11686:	8b 45 08             	mov    0x8(%ebp),%eax
   11689:	8b 40 60             	mov    0x60(%eax),%eax
   1168c:	85 c0                	test   %eax,%eax
   1168e:	74 17                	je     116a7 <task_uninit+0x4c>
    memory_free_page((uint32_t)(task->tss.esp0 - MEM_PAGE_SIZE));
   11690:	8b 45 08             	mov    0x8(%ebp),%eax
   11693:	8b 40 60             	mov    0x60(%eax),%eax
   11696:	2d 00 10 00 00       	sub    $0x1000,%eax
   1169b:	83 ec 0c             	sub    $0xc,%esp
   1169e:	50                   	push   %eax
   1169f:	e8 b8 f7 ff ff       	call   10e5c <memory_free_page>
   116a4:	83 c4 10             	add    $0x10,%esp
  }
  
  //释放为页目录分配的页空间及其映射关系
  if (task->tss.cr3) {  
   116a7:	8b 45 08             	mov    0x8(%ebp),%eax
   116aa:	8b 40 78             	mov    0x78(%eax),%eax
   116ad:	85 c0                	test   %eax,%eax
   116af:	74 12                	je     116c3 <task_uninit+0x68>
    memory_destroy_uvm(task->tss.cr3);
   116b1:	8b 45 08             	mov    0x8(%ebp),%eax
   116b4:	8b 40 78             	mov    0x78(%eax),%eax
   116b7:	83 ec 0c             	sub    $0xc,%esp
   116ba:	50                   	push   %eax
   116bb:	e8 b2 f4 ff ff       	call   10b72 <memory_destroy_uvm>
   116c0:	83 c4 10             	add    $0x10,%esp
  }


  //将任务结构从任务管理器的任务队列中取下
  list_remove(&task_manager.task_list, &task->task_node);
   116c3:	8b 45 08             	mov    0x8(%ebp),%eax
   116c6:	83 c0 4c             	add    $0x4c,%eax
   116c9:	83 ec 08             	sub    $0x8,%esp
   116cc:	50                   	push   %eax
   116cd:	68 10 20 02 00       	push   $0x22010
   116d2:	e8 3a 50 00 00       	call   16711 <list_remove>
   116d7:	83 c4 10             	add    $0x10,%esp
  
  //释放全局任务表中的task结构资源
  free_task(task);
   116da:	83 ec 0c             	sub    $0xc,%esp
   116dd:	ff 75 08             	push   0x8(%ebp)
   116e0:	e8 3b 05 00 00       	call   11c20 <free_task>
   116e5:	83 c4 10             	add    $0x10,%esp
}
   116e8:	90                   	nop
   116e9:	c9                   	leave  
   116ea:	c3                   	ret    

000116eb <empty_task>:
static uint32_t empty_task_stack[EMPTY_TASK_STACK_SIZE];
/**
 * @brief  空闲进程，当所有进程都延时运行时，让cpu运行空闲进程
 *
 */
static void empty_task(void) {
   116eb:	55                   	push   %ebp
   116ec:	89 e5                	mov    %esp,%ebp
  while (1) {
    // 停止cpu运行，让cpu等待时间中断
    hlt();
   116ee:	e8 3d fb ff ff       	call   11230 <hlt>
   116f3:	eb f9                	jmp    116ee <empty_task+0x3>

000116f5 <task_manager_init>:

/**
 * @brief  初始化任务管理器
 *
 */
void task_manager_init(void) {
   116f5:	55                   	push   %ebp
   116f6:	89 e5                	mov    %esp,%ebp
   116f8:	83 ec 18             	sub    $0x18,%esp
  // 1.初始化应用程序及所有任务的代码段选择子和数据段选择子，以区分和内核选择子的特权级
  // 应用程序运行在 DPL_3 下，
  // 内核运行在DPL_0下，配合分页机制中的us位，0为内核特权级，1为用户特权级
  // 就可做到特权级保护
  uint32_t data_selector = gdt_alloc_desc();
   116fb:	e8 75 11 00 00       	call   12875 <gdt_alloc_desc>
   11700:	89 45 f4             	mov    %eax,-0xc(%ebp)
  uint32_t code_selector = gdt_alloc_desc();
   11703:	e8 6d 11 00 00       	call   12875 <gdt_alloc_desc>
   11708:	89 45 f0             	mov    %eax,-0x10(%ebp)
  segment_desc_set(data_selector, 0, 0xffffffff,
   1170b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1170e:	0f b7 c0             	movzwl %ax,%eax
   11711:	68 f2 40 00 00       	push   $0x40f2
   11716:	6a ff                	push   $0xffffffff
   11718:	6a 00                	push   $0x0
   1171a:	50                   	push   %eax
   1171b:	e8 e3 0f 00 00       	call   12703 <segment_desc_set>
   11720:	83 c4 10             	add    $0x10,%esp
                   SEG_ATTR_P | SEG_ATTR_DPL_3 | SEG_ATTR_S_NORMAL |
                       SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);
  segment_desc_set(code_selector, 0, 0xffffffff,
   11723:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11726:	0f b7 c0             	movzwl %ax,%eax
   11729:	68 fa 40 00 00       	push   $0x40fa
   1172e:	6a ff                	push   $0xffffffff
   11730:	6a 00                	push   $0x0
   11732:	50                   	push   %eax
   11733:	e8 cb 0f 00 00       	call   12703 <segment_desc_set>
   11738:	83 c4 10             	add    $0x10,%esp
                   SEG_ATTR_P | SEG_ATTR_DPL_3 | SEG_ATTR_S_NORMAL |
                       SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);
  task_manager.app_code_selector = code_selector;
   1173b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1173e:	a3 b8 25 02 00       	mov    %eax,0x225b8
  task_manager.app_data_selector = data_selector;
   11743:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11746:	a3 bc 25 02 00       	mov    %eax,0x225bc

  // 2.初始化所有任务队列
  list_init(&task_manager.ready_list);
   1174b:	83 ec 0c             	sub    $0xc,%esp
   1174e:	68 04 20 02 00       	push   $0x22004
   11753:	e8 03 fa ff ff       	call   1115b <list_init>
   11758:	83 c4 10             	add    $0x10,%esp
  list_init(&task_manager.task_list);
   1175b:	83 ec 0c             	sub    $0xc,%esp
   1175e:	68 10 20 02 00       	push   $0x22010
   11763:	e8 f3 f9 ff ff       	call   1115b <list_init>
   11768:	83 c4 10             	add    $0x10,%esp
  list_init(&task_manager.sleep_list);
   1176b:	83 ec 0c             	sub    $0xc,%esp
   1176e:	68 1c 20 02 00       	push   $0x2201c
   11773:	e8 e3 f9 ff ff       	call   1115b <list_init>
   11778:	83 c4 10             	add    $0x10,%esp

  // 3.将当前任务置零
  task_manager.curr_task = (task_t *)0;
   1177b:	c7 05 00 20 02 00 00 	movl   $0x0,0x22000
   11782:	00 00 00 

  // 4.初始化空闲进程
  task_init(&task_manager.empty_task, "empty_task", (uint32_t)empty_task,
   11785:	ba e0 8b 03 00       	mov    $0x38be0,%edx
   1178a:	b8 eb 16 01 00       	mov    $0x116eb,%eax
   1178f:	83 ec 0c             	sub    $0xc,%esp
   11792:	6a 01                	push   $0x1
   11794:	52                   	push   %edx
   11795:	50                   	push   %eax
   11796:	68 51 6b 01 00       	push   $0x16b51
   1179b:	68 f0 22 02 00       	push   $0x222f0
   117a0:	e8 87 fd ff ff       	call   1152c <task_init>
   117a5:	83 c4 20             	add    $0x20,%esp
            (uint32_t)&empty_task_stack[EMPTY_TASK_STACK_SIZE],
            TASK_FLAGS_SYSTEM);

  // 5.初始化静态任务表,及其互斥锁
  kernel_memset(task_table, 0, sizeof(task_table));
   117a8:	83 ec 04             	sub    $0x4,%esp
   117ab:	68 00 64 01 00       	push   $0x16400
   117b0:	6a 00                	push   $0x0
   117b2:	68 c0 25 02 00       	push   $0x225c0
   117b7:	e8 50 48 00 00       	call   1600c <kernel_memset>
   117bc:	83 c4 10             	add    $0x10,%esp
  mutex_init(&task_table_lock);
   117bf:	83 ec 0c             	sub    $0xc,%esp
   117c2:	68 c0 89 03 00       	push   $0x389c0
   117c7:	e8 0e 3c 00 00       	call   153da <mutex_init>
   117cc:	83 c4 10             	add    $0x10,%esp
}
   117cf:	90                   	nop
   117d0:	c9                   	leave  
   117d1:	c3                   	ret    

000117d2 <task_first_init>:
 *     页目录表 = 1页
 * ------------------
 * 内核0特权级栈 = 1页
 * ------------------
 */
void task_first_init(void) {
   117d2:	55                   	push   %ebp
   117d3:	89 e5                	mov    %esp,%ebp
   117d5:	83 ec 18             	sub    $0x18,%esp
  void first_task_entry(void);

  // 2.确定第一个任务进程需要的空间大小
  extern char s_first_task[], e_first_task[];
  uint32_t copy_size =
      (uint32_t)(e_first_task - s_first_task);  // 进程所需空间大小
   117d8:	b8 8a d3 06 00       	mov    $0x6d38a,%eax
   117dd:	2d 00 d0 06 00       	sub    $0x6d000,%eax
  uint32_t copy_size =
   117e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
  uint32_t alloc_size =
      up2(copy_size, MEM_PAGE_SIZE) +
   117e5:	68 00 10 00 00       	push   $0x1000
   117ea:	ff 75 f4             	push   -0xc(%ebp)
   117ed:	e8 93 fa ff ff       	call   11285 <up2>
   117f2:	83 c4 08             	add    $0x8,%esp
  uint32_t alloc_size =
   117f5:	05 00 a0 00 00       	add    $0xa000,%eax
   117fa:	89 45 f0             	mov    %eax,-0x10(%ebp)
      10 *
          MEM_PAGE_SIZE;  // 需要为进程分配的内存大小，按4kb对齐,并多拿五页当作栈空间
  ASSERT(copy_size < alloc_size);
   117fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11800:	3b 45 f0             	cmp    -0x10(%ebp),%eax
   11803:	72 1c                	jb     11821 <task_first_init+0x4f>
   11805:	68 5c 6b 01 00       	push   $0x16b5c
   1180a:	68 74 6c 01 00       	push   $0x16c74
   1180f:	68 6e 01 00 00       	push   $0x16e
   11814:	68 1c 6b 01 00       	push   $0x16b1c
   11819:	e8 d5 42 00 00       	call   15af3 <pannic>
   1181e:	83 c4 10             	add    $0x10,%esp

  uint32_t task_start_addr =
   11821:	c7 45 ec 00 00 00 80 	movl   $0x80000000,-0x14(%ebp)
      (uint32_t)first_task_entry;  // 获取第一个任务的入口地址

  // 3.初始化第一个任务,因为当前为操作系统进程，esp初始值随意赋值都可，
  //  因为当前进程已开启，cpu会在切换的时候保留真实的状态，即真实的esp值
  task_init(&task_manager.first_task, "first task", task_start_addr,
   11828:	8b 55 ec             	mov    -0x14(%ebp),%edx
   1182b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1182e:	01 d0                	add    %edx,%eax
   11830:	83 ec 0c             	sub    $0xc,%esp
   11833:	6a 00                	push   $0x0
   11835:	50                   	push   %eax
   11836:	ff 75 ec             	push   -0x14(%ebp)
   11839:	68 73 6b 01 00       	push   $0x16b73
   1183e:	68 28 20 02 00       	push   $0x22028
   11843:	e8 e4 fc ff ff       	call   1152c <task_init>
   11848:	83 c4 20             	add    $0x20,%esp
            task_start_addr + alloc_size, TASK_FLAGS_USER);

  // 4.初始化进程的起始堆空间 TODO:不对，此处堆区还在低2gb的内核空间中
  task_manager.first_task.heap_start =
      (uint32_t)e_first_task;  // 堆起始地址紧靠程序bss段之后
   1184b:	b8 8a d3 06 00       	mov    $0x6d38a,%eax
  task_manager.first_task.heap_start =
   11850:	a3 38 20 02 00       	mov    %eax,0x22038
  task_manager.first_task.heap_end = (uint32_t)e_first_task;  // 堆大小初始为0
   11855:	b8 8a d3 06 00       	mov    $0x6d38a,%eax
   1185a:	a3 3c 20 02 00       	mov    %eax,0x2203c

  // 5.将当前任务的TSS选择子告诉cpu，用来切换任务时保存状态
  write_tr(task_manager.first_task.tss_selector);
   1185f:	a1 ec 20 02 00       	mov    0x220ec,%eax
   11864:	0f b7 c0             	movzwl %ax,%eax
   11867:	83 ec 0c             	sub    $0xc,%esp
   1186a:	50                   	push   %eax
   1186b:	e8 ed f9 ff ff       	call   1125d <write_tr>
   11870:	83 c4 10             	add    $0x10,%esp

  // 6.将当前任务执行第一个任务
  task_manager.curr_task = &task_manager.first_task;
   11873:	c7 05 00 20 02 00 28 	movl   $0x22028,0x22000
   1187a:	20 02 00 

  // 7.将当前页表设置为第一个任务的页表
  mmu_set_page_dir(task_manager.first_task.tss.cr3);
   1187d:	a1 a0 20 02 00       	mov    0x220a0,%eax
   11882:	83 ec 0c             	sub    $0xc,%esp
   11885:	50                   	push   %eax
   11886:	e8 e9 f9 ff ff       	call   11274 <mmu_set_page_dir>
   1188b:	83 c4 10             	add    $0x10,%esp

  // 8.将当前任务状态设置为运行态
  task_manager.curr_task->state = TASK_RUNNING;
   1188e:	a1 00 20 02 00       	mov    0x22000,%eax
   11893:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

  // 9.进程的各个段还只是在虚拟地址中，所以要为各个段分配物理地址页空间，并进行映射
  memory_alloc_page_for(task_start_addr, alloc_size, PTE_P | PTE_W | PTE_U);
   11899:	83 ec 04             	sub    $0x4,%esp
   1189c:	6a 07                	push   $0x7
   1189e:	ff 75 f0             	push   -0x10(%ebp)
   118a1:	ff 75 ec             	push   -0x14(%ebp)
   118a4:	e8 61 f5 ff ff       	call   10e0a <memory_alloc_page_for>
   118a9:	83 c4 10             	add    $0x10,%esp

  // 10.将任务进程各个段从内核四个段之后的紧邻位置，拷贝到已分配好的且与虚拟地址对应的物理地址空间，实现代码隔离
  kernel_memcpy(first_task_entry, s_first_task, alloc_size);
   118ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
   118af:	83 ec 04             	sub    $0x4,%esp
   118b2:	50                   	push   %eax
   118b3:	68 00 d0 06 00       	push   $0x6d000
   118b8:	68 00 00 00 80       	push   $0x80000000
   118bd:	e8 fb 46 00 00       	call   15fbd <kernel_memcpy>
   118c2:	83 c4 10             	add    $0x10,%esp

  // 11.将任务设为可被调度
  task_start(&task_manager.first_task);
   118c5:	83 ec 0c             	sub    $0xc,%esp
   118c8:	68 28 20 02 00       	push   $0x22028
   118cd:	e8 24 fc ff ff       	call   114f6 <task_start>
   118d2:	83 c4 10             	add    $0x10,%esp
}
   118d5:	90                   	nop
   118d6:	c9                   	leave  
   118d7:	c3                   	ret    

000118d8 <task_first_task>:
/**
 * @brief  获取当前任务管理器的第一个任务
 *
 * @return task_t*
 */
task_t *task_first_task(void) { return &task_manager.first_task; }
   118d8:	55                   	push   %ebp
   118d9:	89 e5                	mov    %esp,%ebp
   118db:	b8 28 20 02 00       	mov    $0x22028,%eax
   118e0:	5d                   	pop    %ebp
   118e1:	c3                   	ret    

000118e2 <task_set_ready>:
/**
 * @brief  将任务task加入就绪队列
 *
 * @param task 需要加入就绪队列的任务
 */
void task_set_ready(task_t *task) {
   118e2:	55                   	push   %ebp
   118e3:	89 e5                	mov    %esp,%ebp
   118e5:	83 ec 08             	sub    $0x8,%esp
  ASSERT(task != (task_t *)0);
   118e8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   118ec:	75 1c                	jne    1190a <task_set_ready+0x28>
   118ee:	68 05 6b 01 00       	push   $0x16b05
   118f3:	68 84 6c 01 00       	push   $0x16c84
   118f8:	68 a0 01 00 00       	push   $0x1a0
   118fd:	68 1c 6b 01 00       	push   $0x16b1c
   11902:	e8 ec 41 00 00       	call   15af3 <pannic>
   11907:	83 c4 10             	add    $0x10,%esp
  // if (task == (task_t*)0) return;
  // 1.将任务插入到就绪队列的尾部
  list_insert_last(&task_manager.ready_list, &task->ready_node);
   1190a:	8b 45 08             	mov    0x8(%ebp),%eax
   1190d:	83 c0 44             	add    $0x44,%eax
   11910:	83 ec 08             	sub    $0x8,%esp
   11913:	50                   	push   %eax
   11914:	68 04 20 02 00       	push   $0x22004
   11919:	e8 fe 4b 00 00       	call   1651c <list_insert_last>
   1191e:	83 c4 10             	add    $0x10,%esp

  // 2.将任务状态设置为就绪态
  // task->state = TASK_READY;
}
   11921:	90                   	nop
   11922:	c9                   	leave  
   11923:	c3                   	ret    

00011924 <task_set_unready>:
/**
 * @brief  将任务task从就绪队列中取下
 *
 * @param task
 */
void task_set_unready(task_t *task) {
   11924:	55                   	push   %ebp
   11925:	89 e5                	mov    %esp,%ebp
   11927:	83 ec 08             	sub    $0x8,%esp
  ASSERT(task != (task_t *)0);
   1192a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1192e:	75 1c                	jne    1194c <task_set_unready+0x28>
   11930:	68 05 6b 01 00       	push   $0x16b05
   11935:	68 94 6c 01 00       	push   $0x16c94
   1193a:	68 af 01 00 00       	push   $0x1af
   1193f:	68 1c 6b 01 00       	push   $0x16b1c
   11944:	e8 aa 41 00 00       	call   15af3 <pannic>
   11949:	83 c4 10             	add    $0x10,%esp
  // if (task == (task_t*)0) return;
  list_remove(&task_manager.ready_list, &task->ready_node);
   1194c:	8b 45 08             	mov    0x8(%ebp),%eax
   1194f:	83 c0 44             	add    $0x44,%eax
   11952:	83 ec 08             	sub    $0x8,%esp
   11955:	50                   	push   %eax
   11956:	68 04 20 02 00       	push   $0x22004
   1195b:	e8 b1 4d 00 00       	call   16711 <list_remove>
   11960:	83 c4 10             	add    $0x10,%esp
}
   11963:	90                   	nop
   11964:	c9                   	leave  
   11965:	c3                   	ret    

00011966 <task_ready_first>:

/**
 * @brief  获取就绪队列中的第一个任务
 *
 */
task_t *task_ready_first(void) {
   11966:	55                   	push   %ebp
   11967:	89 e5                	mov    %esp,%ebp
   11969:	83 ec 18             	sub    $0x18,%esp
  list_node_t *ready_node = list_get_first(&task_manager.ready_list);
   1196c:	83 ec 0c             	sub    $0xc,%esp
   1196f:	68 04 20 02 00       	push   $0x22004
   11974:	e8 8b f8 ff ff       	call   11204 <list_get_first>
   11979:	83 c4 10             	add    $0x10,%esp
   1197c:	89 45 f4             	mov    %eax,-0xc(%ebp)

  return list_node_parent(ready_node, task_t, ready_node);
   1197f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11983:	74 08                	je     1198d <task_ready_first+0x27>
   11985:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11988:	83 e8 44             	sub    $0x44,%eax
   1198b:	eb 05                	jmp    11992 <task_ready_first+0x2c>
   1198d:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11992:	c9                   	leave  
   11993:	c3                   	ret    

00011994 <task_current>:
/**
 * @brief  获取当前正在运行的任务
 *
 * @return task_t*
 */
task_t *task_current(void) { return task_manager.curr_task; }
   11994:	55                   	push   %ebp
   11995:	89 e5                	mov    %esp,%ebp
   11997:	a1 00 20 02 00       	mov    0x22000,%eax
   1199c:	5d                   	pop    %ebp
   1199d:	c3                   	ret    

0001199e <task_switch>:

/**
 * @brief  任务管理器进行任务切换
 *
 */
void task_switch(void) {
   1199e:	55                   	push   %ebp
   1199f:	89 e5                	mov    %esp,%ebp
   119a1:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   119a4:	e8 f7 18 00 00       	call   132a0 <idt_enter_protection>
   119a9:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 1.获取就绪队列中的第一个任务
  task_t *to = task_ready_first();
   119ac:	e8 b5 ff ff ff       	call   11966 <task_ready_first>
   119b1:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 2.若获取到的任务不是当前任务就进行切换
  if (to != task_manager.curr_task) {
   119b4:	a1 00 20 02 00       	mov    0x22000,%eax
   119b9:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   119bc:	74 37                	je     119f5 <task_switch+0x57>
    // 3.获取当前任务
    task_t *from = task_manager.curr_task;
   119be:	a1 00 20 02 00       	mov    0x22000,%eax
   119c3:	89 45 ec             	mov    %eax,-0x14(%ebp)

    // 4.目标任务若为空，则所有任务都在延时，让cpu运行空闲任务
    if (to == (task_t *)0) {
   119c6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   119ca:	75 07                	jne    119d3 <task_switch+0x35>
      to = &task_manager.empty_task;
   119cc:	c7 45 f4 f0 22 02 00 	movl   $0x222f0,-0xc(%ebp)
    }
    // 5.切换当前任务, 并将当前任务置为运行态
    to->state = TASK_RUNNING;
   119d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   119d6:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    task_manager.curr_task = to;
   119dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   119df:	a3 00 20 02 00       	mov    %eax,0x22000

    // 6.进行任务切换
    task_switch_from_to(from, to);
   119e4:	83 ec 08             	sub    $0x8,%esp
   119e7:	ff 75 f4             	push   -0xc(%ebp)
   119ea:	ff 75 ec             	push   -0x14(%ebp)
   119ed:	e8 74 f9 ff ff       	call   11366 <task_switch_from_to>
   119f2:	83 c4 10             	add    $0x10,%esp
  }

  idt_leave_protection(state);  // TODO:解锁
   119f5:	83 ec 0c             	sub    $0xc,%esp
   119f8:	ff 75 f0             	push   -0x10(%ebp)
   119fb:	e8 b8 18 00 00       	call   132b8 <idt_leave_protection>
   11a00:	83 c4 10             	add    $0x10,%esp
}
   11a03:	90                   	nop
   11a04:	c9                   	leave  
   11a05:	c3                   	ret    

00011a06 <task_slice_end>:
/**
 * @brief  提供给时钟中断使用，每中断一次，当前任务的时间片使用完一次
 *         减少当前任务的时间片数，并判断是否还有剩余时间片，若没有就进行任务切换
 *
 */
void task_slice_end(void) {
   11a06:	55                   	push   %ebp
   11a07:	89 e5                	mov    %esp,%ebp
   11a09:	83 ec 18             	sub    $0x18,%esp
  // 1.遍历当前延时队列，判断是否有可唤醒的任务
  list_node_t *curr_sleep_node = list_get_first(&task_manager.sleep_list);
   11a0c:	83 ec 0c             	sub    $0xc,%esp
   11a0f:	68 1c 20 02 00       	push   $0x2201c
   11a14:	e8 eb f7 ff ff       	call   11204 <list_get_first>
   11a19:	83 c4 10             	add    $0x10,%esp
   11a1c:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 2.遍历并判断每一个任务执行完当前时间片是否可被唤醒，若可以则唤醒
  while (curr_sleep_node) {
   11a1f:	eb 62                	jmp    11a83 <task_slice_end+0x7d>
    list_node_t *next_sleep_node = list_node_next(curr_sleep_node);
   11a21:	83 ec 0c             	sub    $0xc,%esp
   11a24:	ff 75 f4             	push   -0xc(%ebp)
   11a27:	e8 02 f7 ff ff       	call   1112e <list_node_next>
   11a2c:	83 c4 10             	add    $0x10,%esp
   11a2f:	89 45 ec             	mov    %eax,-0x14(%ebp)

    task_t *curr_sleep_task =
        list_node_parent(curr_sleep_node, task_t, ready_node);
   11a32:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11a36:	74 08                	je     11a40 <task_slice_end+0x3a>
   11a38:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11a3b:	83 e8 44             	sub    $0x44,%eax
   11a3e:	eb 05                	jmp    11a45 <task_slice_end+0x3f>
   11a40:	b8 00 00 00 00       	mov    $0x0,%eax
    task_t *curr_sleep_task =
   11a45:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (--curr_sleep_task->sleep == 0) {
   11a48:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11a4b:	8b 40 20             	mov    0x20(%eax),%eax
   11a4e:	8d 50 ff             	lea    -0x1(%eax),%edx
   11a51:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11a54:	89 50 20             	mov    %edx,0x20(%eax)
   11a57:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11a5a:	8b 40 20             	mov    0x20(%eax),%eax
   11a5d:	85 c0                	test   %eax,%eax
   11a5f:	75 1c                	jne    11a7d <task_slice_end+0x77>
      task_set_wakeup(curr_sleep_task);  // 从延时队列中取下
   11a61:	83 ec 0c             	sub    $0xc,%esp
   11a64:	ff 75 e8             	push   -0x18(%ebp)
   11a67:	e8 01 01 00 00       	call   11b6d <task_set_wakeup>
   11a6c:	83 c4 10             	add    $0x10,%esp
      task_set_ready(curr_sleep_task);   // 加入就绪队列
   11a6f:	83 ec 0c             	sub    $0xc,%esp
   11a72:	ff 75 e8             	push   -0x18(%ebp)
   11a75:	e8 68 fe ff ff       	call   118e2 <task_set_ready>
   11a7a:	83 c4 10             	add    $0x10,%esp
    }

    curr_sleep_node = next_sleep_node;
   11a7d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a80:	89 45 f4             	mov    %eax,-0xc(%ebp)
  while (curr_sleep_node) {
   11a83:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11a87:	75 98                	jne    11a21 <task_slice_end+0x1b>
  }

  // task_switch(); 没有必要立马进行任务切换，当前任务时间片用完后会自动切换
  // 3.获取当前任务
  task_t *curr_task = task_current();
   11a89:	e8 06 ff ff ff       	call   11994 <task_current>
   11a8e:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 4.若当前任务为空闲任务，则判断就绪队列是否为空
  if (curr_task == &task_manager.empty_task) {
   11a91:	81 7d f0 f0 22 02 00 	cmpl   $0x222f0,-0x10(%ebp)
   11a98:	75 23                	jne    11abd <task_slice_end+0xb7>
    if (list_is_empty(&task_manager.ready_list)) return;
   11a9a:	83 ec 0c             	sub    $0xc,%esp
   11a9d:	68 04 20 02 00       	push   $0x22004
   11aa2:	e8 fb f6 ff ff       	call   111a2 <list_is_empty>
   11aa7:	83 c4 10             	add    $0x10,%esp
   11aaa:	85 c0                	test   %eax,%eax
   11aac:	75 60                	jne    11b0e <task_slice_end+0x108>

    task_manager.empty_task.state = TASK_CREATED;
   11aae:	c7 05 f0 22 02 00 00 	movl   $0x0,0x222f0
   11ab5:	00 00 00 

    task_switch();  // 就绪队列有任务，则直接切换任务
   11ab8:	e8 e1 fe ff ff       	call   1199e <task_switch>
  }

  // 5.若当前任务为普通任务则，减小当前时间片数
  if (curr_task != &task_manager.empty_task && --curr_task->slice_curr == 0) {
   11abd:	81 7d f0 f0 22 02 00 	cmpl   $0x222f0,-0x10(%ebp)
   11ac4:	74 49                	je     11b0f <task_slice_end+0x109>
   11ac6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ac9:	8b 40 1c             	mov    0x1c(%eax),%eax
   11acc:	8d 50 ff             	lea    -0x1(%eax),%edx
   11acf:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ad2:	89 50 1c             	mov    %edx,0x1c(%eax)
   11ad5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ad8:	8b 40 1c             	mov    0x1c(%eax),%eax
   11adb:	85 c0                	test   %eax,%eax
   11add:	75 30                	jne    11b0f <task_slice_end+0x109>
    // 6.时间片数用完了，重置时间片并进行任务切换
    curr_task->slice_curr = curr_task->slice_max;
   11adf:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ae2:	8b 50 18             	mov    0x18(%eax),%edx
   11ae5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ae8:	89 50 1c             	mov    %edx,0x1c(%eax)
    task_set_unready(curr_task);
   11aeb:	83 ec 0c             	sub    $0xc,%esp
   11aee:	ff 75 f0             	push   -0x10(%ebp)
   11af1:	e8 2e fe ff ff       	call   11924 <task_set_unready>
   11af6:	83 c4 10             	add    $0x10,%esp
    task_set_ready(curr_task);
   11af9:	83 ec 0c             	sub    $0xc,%esp
   11afc:	ff 75 f0             	push   -0x10(%ebp)
   11aff:	e8 de fd ff ff       	call   118e2 <task_set_ready>
   11b04:	83 c4 10             	add    $0x10,%esp
    task_switch();
   11b07:	e8 92 fe ff ff       	call   1199e <task_switch>
   11b0c:	eb 01                	jmp    11b0f <task_slice_end+0x109>
    if (list_is_empty(&task_manager.ready_list)) return;
   11b0e:	90                   	nop
  }
}
   11b0f:	c9                   	leave  
   11b10:	c3                   	ret    

00011b11 <task_set_sleep>:
 * @brief  设置进程延时的时间片数
 *
 * @param task 需要延时的进程
 * @param slice 延时的时间片数
 */
void task_set_sleep(task_t *task, uint32_t slice) {
   11b11:	55                   	push   %ebp
   11b12:	89 e5                	mov    %esp,%ebp
   11b14:	83 ec 08             	sub    $0x8,%esp
  ASSERT(task != (task_t *)0);
   11b17:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11b1b:	75 1c                	jne    11b39 <task_set_sleep+0x28>
   11b1d:	68 05 6b 01 00       	push   $0x16b05
   11b22:	68 d8 6c 01 00       	push   $0x16cd8
   11b27:	68 18 02 00 00       	push   $0x218
   11b2c:	68 1c 6b 01 00       	push   $0x16b1c
   11b31:	e8 bd 3f 00 00       	call   15af3 <pannic>
   11b36:	83 c4 10             	add    $0x10,%esp
  if (slice == 0) return;
   11b39:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11b3d:	74 2b                	je     11b6a <task_set_sleep+0x59>

  task->sleep = slice;
   11b3f:	8b 55 0c             	mov    0xc(%ebp),%edx
   11b42:	8b 45 08             	mov    0x8(%ebp),%eax
   11b45:	89 50 20             	mov    %edx,0x20(%eax)
  task->state = TASK_SLEEP;
   11b48:	8b 45 08             	mov    0x8(%ebp),%eax
   11b4b:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
  list_insert_last(&task_manager.sleep_list, &task->ready_node);
   11b51:	8b 45 08             	mov    0x8(%ebp),%eax
   11b54:	83 c0 44             	add    $0x44,%eax
   11b57:	83 ec 08             	sub    $0x8,%esp
   11b5a:	50                   	push   %eax
   11b5b:	68 1c 20 02 00       	push   $0x2201c
   11b60:	e8 b7 49 00 00       	call   1651c <list_insert_last>
   11b65:	83 c4 10             	add    $0x10,%esp
   11b68:	eb 01                	jmp    11b6b <task_set_sleep+0x5a>
  if (slice == 0) return;
   11b6a:	90                   	nop
}
   11b6b:	c9                   	leave  
   11b6c:	c3                   	ret    

00011b6d <task_set_wakeup>:
/**
 * @brief  唤醒正在延时的进程
 *
 * @param task
 */
void task_set_wakeup(task_t *task) {
   11b6d:	55                   	push   %ebp
   11b6e:	89 e5                	mov    %esp,%ebp
   11b70:	83 ec 08             	sub    $0x8,%esp
  ASSERT(task != (task_t *)0);
   11b73:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11b77:	75 1c                	jne    11b95 <task_set_wakeup+0x28>
   11b79:	68 05 6b 01 00       	push   $0x16b05
   11b7e:	68 e8 6c 01 00       	push   $0x16ce8
   11b83:	68 26 02 00 00       	push   $0x226
   11b88:	68 1c 6b 01 00       	push   $0x16b1c
   11b8d:	e8 61 3f 00 00       	call   15af3 <pannic>
   11b92:	83 c4 10             	add    $0x10,%esp
  list_remove(&task_manager.sleep_list, &task->ready_node);
   11b95:	8b 45 08             	mov    0x8(%ebp),%eax
   11b98:	83 c0 44             	add    $0x44,%eax
   11b9b:	83 ec 08             	sub    $0x8,%esp
   11b9e:	50                   	push   %eax
   11b9f:	68 1c 20 02 00       	push   $0x2201c
   11ba4:	e8 68 4b 00 00       	call   16711 <list_remove>
   11ba9:	83 c4 10             	add    $0x10,%esp
  task->state = TASK_CREATED;
   11bac:	8b 45 08             	mov    0x8(%ebp),%eax
   11baf:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   11bb5:	90                   	nop
   11bb6:	c9                   	leave  
   11bb7:	c3                   	ret    

00011bb8 <alloc_task>:
/**
 * @brief 从静态任务表中分配一个任务对象
 *
 * @return task_t*
 */
static task_t *alloc_task(void) {
   11bb8:	55                   	push   %ebp
   11bb9:	89 e5                	mov    %esp,%ebp
   11bbb:	83 ec 18             	sub    $0x18,%esp
  task_t *task = 0;
   11bbe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  //TODO:加锁
  mutex_lock(&task_table_lock);
   11bc5:	83 ec 0c             	sub    $0xc,%esp
   11bc8:	68 c0 89 03 00       	push   $0x389c0
   11bcd:	e8 55 38 00 00       	call   15427 <mutex_lock>
   11bd2:	83 c4 10             	add    $0x10,%esp

  // 遍历静态任务表，取出未被分配的任务对象空间
  for (int i = 0; i < TASK_COUNT; ++i) {
   11bd5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11bdc:	eb 27                	jmp    11c05 <alloc_task+0x4d>
    task_t *curr = task_table + i;
   11bde:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11be1:	69 c0 c8 02 00 00    	imul   $0x2c8,%eax,%eax
   11be7:	05 c0 25 02 00       	add    $0x225c0,%eax
   11bec:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (curr->pid == 0) {
   11bef:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11bf2:	8b 40 08             	mov    0x8(%eax),%eax
   11bf5:	85 c0                	test   %eax,%eax
   11bf7:	75 08                	jne    11c01 <alloc_task+0x49>
      task = curr;
   11bf9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11bfc:	89 45 f4             	mov    %eax,-0xc(%ebp)
      break;
   11bff:	eb 0a                	jmp    11c0b <alloc_task+0x53>
  for (int i = 0; i < TASK_COUNT; ++i) {
   11c01:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   11c05:	83 7d f0 7f          	cmpl   $0x7f,-0x10(%ebp)
   11c09:	7e d3                	jle    11bde <alloc_task+0x26>
    }
  }

  //TODO:解锁
  mutex_unlock(&task_table_lock);
   11c0b:	83 ec 0c             	sub    $0xc,%esp
   11c0e:	68 c0 89 03 00       	push   $0x389c0
   11c13:	e8 a0 38 00 00       	call   154b8 <mutex_unlock>
   11c18:	83 c4 10             	add    $0x10,%esp

  return task;
   11c1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   11c1e:	c9                   	leave  
   11c1f:	c3                   	ret    

00011c20 <free_task>:
/**
 * @brief 释放静态任务表的任务对象
 *
 * @param task
 */
static void free_task(task_t *task) {
   11c20:	55                   	push   %ebp
   11c21:	89 e5                	mov    %esp,%ebp
   11c23:	83 ec 08             	sub    $0x8,%esp
  //TODO:加锁
  mutex_lock(&task_table_lock);
   11c26:	83 ec 0c             	sub    $0xc,%esp
   11c29:	68 c0 89 03 00       	push   $0x389c0
   11c2e:	e8 f4 37 00 00       	call   15427 <mutex_lock>
   11c33:	83 c4 10             	add    $0x10,%esp

  task->pid = 0;
   11c36:	8b 45 08             	mov    0x8(%ebp),%eax
   11c39:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)

  //TODO:解锁
  mutex_unlock(&task_table_lock);
   11c40:	83 ec 0c             	sub    $0xc,%esp
   11c43:	68 c0 89 03 00       	push   $0x389c0
   11c48:	e8 6b 38 00 00       	call   154b8 <mutex_unlock>
   11c4d:	83 c4 10             	add    $0x10,%esp
}
   11c50:	90                   	nop
   11c51:	c9                   	leave  
   11c52:	c3                   	ret    

00011c53 <sys_sleep>:
/**
 * @brief  使进程进入延时状态
 *
 * @param ms 延时的时间，以ms为单位
 */
void sys_sleep(uint32_t ms) {
   11c53:	55                   	push   %ebp
   11c54:	89 e5                	mov    %esp,%ebp
   11c56:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   11c59:	e8 42 16 00 00       	call   132a0 <idt_enter_protection>
   11c5e:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 1.获取当前任务
  task_t *curr_task = task_current();
   11c61:	e8 2e fd ff ff       	call   11994 <task_current>
   11c66:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 2.将当前任务离开就绪队列
  task_set_unready(curr_task);
   11c69:	83 ec 0c             	sub    $0xc,%esp
   11c6c:	ff 75 f0             	push   -0x10(%ebp)
   11c6f:	e8 b0 fc ff ff       	call   11924 <task_set_unready>
   11c74:	83 c4 10             	add    $0x10,%esp

  // 3.计算出需要延时的时间片数，对时间片数向上取整，保证进程至少能延时指定时间
  uint32_t slice = (ms + (OS_TICKS_MS - 1)) / OS_TICKS_MS;
   11c77:	8b 45 08             	mov    0x8(%ebp),%eax
   11c7a:	83 c0 09             	add    $0x9,%eax
   11c7d:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   11c82:	f7 e2                	mul    %edx
   11c84:	89 d0                	mov    %edx,%eax
   11c86:	c1 e8 03             	shr    $0x3,%eax
   11c89:	89 45 ec             	mov    %eax,-0x14(%ebp)

  // 4.将当前任务放入延时队列，并设置延时时间片数
  task_set_sleep(curr_task, slice);
   11c8c:	83 ec 08             	sub    $0x8,%esp
   11c8f:	ff 75 ec             	push   -0x14(%ebp)
   11c92:	ff 75 f0             	push   -0x10(%ebp)
   11c95:	e8 77 fe ff ff       	call   11b11 <task_set_sleep>
   11c9a:	83 c4 10             	add    $0x10,%esp

  // 5.切换任务
  task_switch();
   11c9d:	e8 fc fc ff ff       	call   1199e <task_switch>

  idt_leave_protection(state);  // TODO:解锁
   11ca2:	83 ec 0c             	sub    $0xc,%esp
   11ca5:	ff 75 f4             	push   -0xc(%ebp)
   11ca8:	e8 0b 16 00 00       	call   132b8 <idt_leave_protection>
   11cad:	83 c4 10             	add    $0x10,%esp
}
   11cb0:	90                   	nop
   11cb1:	c9                   	leave  
   11cb2:	c3                   	ret    

00011cb3 <sys_getpid>:
/**
 * @brief 获取任务pid
 *
 * @return int pid
 */
int sys_getpid(void) { return task_current()->pid; }
   11cb3:	55                   	push   %ebp
   11cb4:	89 e5                	mov    %esp,%ebp
   11cb6:	e8 d9 fc ff ff       	call   11994 <task_current>
   11cbb:	8b 40 08             	mov    0x8(%eax),%eax
   11cbe:	5d                   	pop    %ebp
   11cbf:	c3                   	ret    

00011cc0 <sys_fork>:
/**
 * @brief 创建子进程
 *
 * @return int 子进程的pid
 */
int sys_fork(void) {
   11cc0:	55                   	push   %ebp
   11cc1:	89 e5                	mov    %esp,%ebp
   11cc3:	83 ec 28             	sub    $0x28,%esp
  // 1.获取当前进程为fork进程的父进程
  task_t *parent_task = task_current();
   11cc6:	e8 c9 fc ff ff       	call   11994 <task_current>
   11ccb:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 2.分配子进程控制块
  task_t *child_task = alloc_task();
   11cce:	e8 e5 fe ff ff       	call   11bb8 <alloc_task>
   11cd3:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if (child_task == (task_t *)0) goto fork_failed;
   11cd6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11cda:	0f 84 2b 01 00 00    	je     11e0b <sys_fork+0x14b>

  // 3.获取系统调用的栈帧,因为每次通过调用门进入内核栈中都只会一帧该结构体的数据，
  // 所以用最高地址减去大小即可获得该帧的起始地址
  syscall_frame_t *frame =
      (syscall_frame_t *)(parent_task->tss.esp0 - sizeof(syscall_frame_t));
   11ce0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11ce3:	8b 40 60             	mov    0x60(%eax),%eax
   11ce6:	83 e8 58             	sub    $0x58,%eax
  syscall_frame_t *frame =
   11ce9:	89 45 ec             	mov    %eax,-0x14(%ebp)

  // 4.初始子进程控制块，直接用父进程进入调用门的下一条指令地址作为子进程的入口地址
  int err = task_init(child_task, parent_task->name, frame->eip,
                      frame->esp + sizeof(uint32_t) * SYSCALL_PARAM_COUNT,
   11cec:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11cef:	8b 40 50             	mov    0x50(%eax),%eax
  int err = task_init(child_task, parent_task->name, frame->eip,
   11cf2:	8d 48 14             	lea    0x14(%eax),%ecx
   11cf5:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11cf8:	8b 40 34             	mov    0x34(%eax),%eax
   11cfb:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11cfe:	83 c2 24             	add    $0x24,%edx
   11d01:	83 ec 0c             	sub    $0xc,%esp
   11d04:	6a 00                	push   $0x0
   11d06:	51                   	push   %ecx
   11d07:	50                   	push   %eax
   11d08:	52                   	push   %edx
   11d09:	ff 75 f0             	push   -0x10(%ebp)
   11d0c:	e8 1b f8 ff ff       	call   1152c <task_init>
   11d11:	83 c4 20             	add    $0x20,%esp
   11d14:	89 45 e8             	mov    %eax,-0x18(%ebp)
                      TASK_FLAGS_USER);
  if (err < 0) goto fork_failed;
   11d17:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11d1b:	0f 88 ed 00 00 00    	js     11e0e <sys_fork+0x14e>

  // 5.恢复到父进程的上下文环境
  tss_t *tss = &(child_task->tss);
   11d21:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11d24:	83 c0 5c             	add    $0x5c,%eax
   11d27:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  // 子进程执行的第一条指令就是从eax中取出系统用的返回值，即进程id，子进程固定获取0
  tss->eax = 0;
   11d2a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11d2d:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
  tss->ebx = frame->ebx;
   11d34:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11d37:	8b 50 24             	mov    0x24(%eax),%edx
   11d3a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11d3d:	89 50 34             	mov    %edx,0x34(%eax)
  tss->ecx = frame->ecx;
   11d40:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11d43:	8b 50 2c             	mov    0x2c(%eax),%edx
   11d46:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11d49:	89 50 2c             	mov    %edx,0x2c(%eax)
  tss->edx = frame->edx;
   11d4c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11d4f:	8b 50 28             	mov    0x28(%eax),%edx
   11d52:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11d55:	89 50 30             	mov    %edx,0x30(%eax)
  tss->edi = frame->edi;
   11d58:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11d5b:	8b 50 14             	mov    0x14(%eax),%edx
   11d5e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11d61:	89 50 44             	mov    %edx,0x44(%eax)
  tss->esi = frame->esi;
   11d64:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11d67:	8b 50 18             	mov    0x18(%eax),%edx
   11d6a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11d6d:	89 50 40             	mov    %edx,0x40(%eax)
  tss->eflags = frame->eflags;
   11d70:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11d73:	8b 10                	mov    (%eax),%edx
   11d75:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11d78:	89 50 24             	mov    %edx,0x24(%eax)
  tss->ebp = frame->ebp;
   11d7b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11d7e:	8b 50 1c             	mov    0x1c(%eax),%edx
   11d81:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11d84:	89 50 3c             	mov    %edx,0x3c(%eax)

  // 复用父进程的段寄存器
  tss->cs = frame->cs;
   11d87:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11d8a:	8b 50 38             	mov    0x38(%eax),%edx
   11d8d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11d90:	89 50 4c             	mov    %edx,0x4c(%eax)
  tss->ds = frame->ds;
   11d93:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11d96:	8b 50 10             	mov    0x10(%eax),%edx
   11d99:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11d9c:	89 50 54             	mov    %edx,0x54(%eax)
  tss->es = frame->es;
   11d9f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11da2:	8b 50 0c             	mov    0xc(%eax),%edx
   11da5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11da8:	89 50 48             	mov    %edx,0x48(%eax)
  tss->fs = frame->fs;
   11dab:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11dae:	8b 50 08             	mov    0x8(%eax),%edx
   11db1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11db4:	89 50 58             	mov    %edx,0x58(%eax)
  tss->gs = frame->gs;
   11db7:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11dba:	8b 50 04             	mov    0x4(%eax),%edx
   11dbd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11dc0:	89 50 5c             	mov    %edx,0x5c(%eax)
  tss->ss = frame->ss;
   11dc3:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11dc6:	8b 50 54             	mov    0x54(%eax),%edx
   11dc9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11dcc:	89 50 50             	mov    %edx,0x50(%eax)

  // 记录父进程地址
  child_task->parent = parent_task;
   11dcf:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11dd2:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11dd5:	89 50 04             	mov    %edx,0x4(%eax)

  // 7.拷贝进程虚拟页目录表和页表，即拷贝其映射关系
  if (memory_copy_uvm(tss->cr3, parent_task->tss.cr3) < 0) goto fork_failed;
   11dd8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11ddb:	8b 50 78             	mov    0x78(%eax),%edx
   11dde:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11de1:	8b 40 1c             	mov    0x1c(%eax),%eax
   11de4:	83 ec 08             	sub    $0x8,%esp
   11de7:	52                   	push   %edx
   11de8:	50                   	push   %eax
   11de9:	e8 f7 eb ff ff       	call   109e5 <memory_copy_uvm>
   11dee:	83 c4 10             	add    $0x10,%esp
   11df1:	85 c0                	test   %eax,%eax
   11df3:	78 1c                	js     11e11 <sys_fork+0x151>

  // 8.子进程控制块初始化完毕，设为可被调度态
  task_start(child_task);
   11df5:	83 ec 0c             	sub    $0xc,%esp
   11df8:	ff 75 f0             	push   -0x10(%ebp)
   11dfb:	e8 f6 f6 ff ff       	call   114f6 <task_start>
   11e00:	83 c4 10             	add    $0x10,%esp
  // 反回子进程id
  return child_task->pid;
   11e03:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11e06:	8b 40 08             	mov    0x8(%eax),%eax
   11e09:	eb 2e                	jmp    11e39 <sys_fork+0x179>
  if (child_task == (task_t *)0) goto fork_failed;
   11e0b:	90                   	nop
   11e0c:	eb 04                	jmp    11e12 <sys_fork+0x152>
  if (err < 0) goto fork_failed;
   11e0e:	90                   	nop
   11e0f:	eb 01                	jmp    11e12 <sys_fork+0x152>
  if (memory_copy_uvm(tss->cr3, parent_task->tss.cr3) < 0) goto fork_failed;
   11e11:	90                   	nop

// fork失败，清理资源
fork_failed:
  if (child_task) {  // 初始化失败，释放对应资源
   11e12:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11e16:	74 1c                	je     11e34 <sys_fork+0x174>
    task_uninit(child_task);
   11e18:	83 ec 0c             	sub    $0xc,%esp
   11e1b:	ff 75 f0             	push   -0x10(%ebp)
   11e1e:	e8 38 f8 ff ff       	call   1165b <task_uninit>
   11e23:	83 c4 10             	add    $0x10,%esp
    free_task(child_task);
   11e26:	83 ec 0c             	sub    $0xc,%esp
   11e29:	ff 75 f0             	push   -0x10(%ebp)
   11e2c:	e8 ef fd ff ff       	call   11c20 <free_task>
   11e31:	83 c4 10             	add    $0x10,%esp
  }

  return -1;
   11e34:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11e39:	c9                   	leave  
   11e3a:	c3                   	ret    

00011e3b <sys_yield>:
/**
 * @brief  使当前正在运行的任务主动让出cpu
 *
 * @return int
 */
int sys_yield(void) {
   11e3b:	55                   	push   %ebp
   11e3c:	89 e5                	mov    %esp,%ebp
   11e3e:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   11e41:	e8 5a 14 00 00       	call   132a0 <idt_enter_protection>
   11e46:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 1.判断当前就绪队列中是否有多个任务
  if (list_get_size(&task_manager.ready_list) > 1) {
   11e49:	83 ec 0c             	sub    $0xc,%esp
   11e4c:	68 04 20 02 00       	push   $0x22004
   11e51:	e8 81 f3 ff ff       	call   111d7 <list_get_size>
   11e56:	83 c4 10             	add    $0x10,%esp
   11e59:	83 f8 01             	cmp    $0x1,%eax
   11e5c:	7e 29                	jle    11e87 <sys_yield+0x4c>
    // 2.获取当前任务
    task_t *curr_task = task_current();
   11e5e:	e8 31 fb ff ff       	call   11994 <task_current>
   11e63:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // 3.将当前任务从就绪队列中取下
    task_set_unready(curr_task);
   11e66:	83 ec 0c             	sub    $0xc,%esp
   11e69:	ff 75 f0             	push   -0x10(%ebp)
   11e6c:	e8 b3 fa ff ff       	call   11924 <task_set_unready>
   11e71:	83 c4 10             	add    $0x10,%esp

    // 4.将当前任务重新加入到就绪队列的队尾
    task_set_ready(curr_task);
   11e74:	83 ec 0c             	sub    $0xc,%esp
   11e77:	ff 75 f0             	push   -0x10(%ebp)
   11e7a:	e8 63 fa ff ff       	call   118e2 <task_set_ready>
   11e7f:	83 c4 10             	add    $0x10,%esp

    // 5.任务管理器运行下一个任务，从而释放cpu使用权
    task_switch();
   11e82:	e8 17 fb ff ff       	call   1199e <task_switch>
  }

  idt_leave_protection(state);  // TODO:解锁
   11e87:	83 ec 0c             	sub    $0xc,%esp
   11e8a:	ff 75 f4             	push   -0xc(%ebp)
   11e8d:	e8 26 14 00 00       	call   132b8 <idt_leave_protection>
   11e92:	83 c4 10             	add    $0x10,%esp
  return 0;
   11e95:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11e9a:	c9                   	leave  
   11e9b:	c3                   	ret    

00011e9c <load_phdr>:
 * @param file elf文件描述符
 * @param elf_phdr  程序段表项
 * @param page_dir 需要加载到的目标空间的页目录表地址
 * @return int
 */
static int load_phdr(int file, Elf32_Phdr *elf_phdr, uint32_t page_dir) {
   11e9c:	55                   	push   %ebp
   11e9d:	89 e5                	mov    %esp,%ebp
   11e9f:	83 ec 28             	sub    $0x28,%esp
  // 获取该段的权限
  uint32_t privilege = PTE_P | PTE_U;
   11ea2:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
  if (elf_phdr->p_flags & PT_W) {  // 该段具有写权限
   11ea9:	8b 45 0c             	mov    0xc(%ebp),%eax
   11eac:	8b 40 18             	mov    0x18(%eax),%eax
   11eaf:	83 e0 02             	and    $0x2,%eax
   11eb2:	85 c0                	test   %eax,%eax
   11eb4:	74 04                	je     11eba <load_phdr+0x1e>
    privilege |= PTE_W;
   11eb6:	83 4d f4 02          	orl    $0x2,-0xc(%ebp)
  }

  // 为该段分配页空间并创建映射关系
  int err = memory_alloc_for_page_dir(page_dir, elf_phdr->p_vaddr,
   11eba:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ebd:	8b 50 14             	mov    0x14(%eax),%edx
   11ec0:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ec3:	8b 40 08             	mov    0x8(%eax),%eax
   11ec6:	ff 75 f4             	push   -0xc(%ebp)
   11ec9:	52                   	push   %edx
   11eca:	50                   	push   %eax
   11ecb:	ff 75 10             	push   0x10(%ebp)
   11ece:	e8 7f ee ff ff       	call   10d52 <memory_alloc_for_page_dir>
   11ed3:	83 c4 10             	add    $0x10,%esp
   11ed6:	89 45 e8             	mov    %eax,-0x18(%ebp)
                                      elf_phdr->p_memsz, privilege);
  if (err < 0) {
   11ed9:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11edd:	79 1a                	jns    11ef9 <load_phdr+0x5d>
    log_printf("no memory\n");
   11edf:	83 ec 0c             	sub    $0xc,%esp
   11ee2:	68 7e 6b 01 00       	push   $0x16b7e
   11ee7:	e8 1d 49 00 00       	call   16809 <log_printf>
   11eec:	83 c4 10             	add    $0x10,%esp
    return -1;
   11eef:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11ef4:	e9 b5 00 00 00       	jmp    11fae <load_phdr+0x112>
  }

  // 使文件的读取位置偏移到该程序段的起始位置
  if (sys_lseek(file, elf_phdr->p_offset, 0) < 0) {
   11ef9:	8b 45 0c             	mov    0xc(%ebp),%eax
   11efc:	8b 40 04             	mov    0x4(%eax),%eax
   11eff:	83 ec 04             	sub    $0x4,%esp
   11f02:	6a 00                	push   $0x0
   11f04:	50                   	push   %eax
   11f05:	ff 75 08             	push   0x8(%ebp)
   11f08:	e8 71 32 00 00       	call   1517e <sys_lseek>
   11f0d:	83 c4 10             	add    $0x10,%esp
   11f10:	85 c0                	test   %eax,%eax
   11f12:	79 1a                	jns    11f2e <load_phdr+0x92>
    log_printf("lseek file failed\n");
   11f14:	83 ec 0c             	sub    $0xc,%esp
   11f17:	68 89 6b 01 00       	push   $0x16b89
   11f1c:	e8 e8 48 00 00       	call   16809 <log_printf>
   11f21:	83 c4 10             	add    $0x10,%esp
    return -1;
   11f24:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11f29:	e9 80 00 00 00       	jmp    11fae <load_phdr+0x112>
  }

  // 获取该程序段的起始虚拟地址和段在文件中的大小
  uint32_t vaddr = elf_phdr->p_vaddr;
   11f2e:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f31:	8b 40 08             	mov    0x8(%eax),%eax
   11f34:	89 45 f0             	mov    %eax,-0x10(%ebp)
  uint32_t size = elf_phdr->p_filesz;
   11f37:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f3a:	8b 40 10             	mov    0x10(%eax),%eax
   11f3d:	89 45 ec             	mov    %eax,-0x14(%ebp)

  while (size > 0) {  // 按页读取并拷贝
   11f40:	eb 61                	jmp    11fa3 <load_phdr+0x107>
    // 获取需要拷贝的空间大小
    int curr_size = (size > MEM_PAGE_SIZE) ? MEM_PAGE_SIZE : size;
   11f42:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11f45:	ba 00 10 00 00       	mov    $0x1000,%edx
   11f4a:	39 d0                	cmp    %edx,%eax
   11f4c:	0f 47 c2             	cmova  %edx,%eax
   11f4f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    // 获取vaddr在page_dir中关联的物理页的物理地址
    uint32_t paddr = memory_get_paddr(page_dir, vaddr);
   11f52:	83 ec 08             	sub    $0x8,%esp
   11f55:	ff 75 f0             	push   -0x10(%ebp)
   11f58:	ff 75 10             	push   0x10(%ebp)
   11f5b:	e8 95 ef ff ff       	call   10ef5 <memory_get_paddr>
   11f60:	83 c4 10             	add    $0x10,%esp
   11f63:	89 45 e0             	mov    %eax,-0x20(%ebp)

    // 拷贝curr_size大小的内容到paddr对应的页中
    if (sys_read(file, (char *)paddr, curr_size) < curr_size) {
   11f66:	8b 45 e0             	mov    -0x20(%ebp),%eax
   11f69:	83 ec 04             	sub    $0x4,%esp
   11f6c:	ff 75 e4             	push   -0x1c(%ebp)
   11f6f:	50                   	push   %eax
   11f70:	ff 75 08             	push   0x8(%ebp)
   11f73:	e8 3a 31 00 00       	call   150b2 <sys_read>
   11f78:	83 c4 10             	add    $0x10,%esp
   11f7b:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
   11f7e:	7e 17                	jle    11f97 <load_phdr+0xfb>
      log_printf("read file failed\n");
   11f80:	83 ec 0c             	sub    $0xc,%esp
   11f83:	68 9c 6b 01 00       	push   $0x16b9c
   11f88:	e8 7c 48 00 00       	call   16809 <log_printf>
   11f8d:	83 c4 10             	add    $0x10,%esp
      return -1;
   11f90:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11f95:	eb 17                	jmp    11fae <load_phdr+0x112>
    }

    size -= curr_size;
   11f97:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11f9a:	29 45 ec             	sub    %eax,-0x14(%ebp)
    vaddr += curr_size;
   11f9d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11fa0:	01 45 f0             	add    %eax,-0x10(%ebp)
  while (size > 0) {  // 按页读取并拷贝
   11fa3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11fa7:	75 99                	jne    11f42 <load_phdr+0xa6>
  }

  return 0;
   11fa9:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11fae:	c9                   	leave  
   11faf:	c3                   	ret    

00011fb0 <load_elf_file>:
 * @param name
 * @param page_dir
 * @return uint32_t
 */
static uint32_t load_elf_file(task_t *task, const char *name,
                              uint32_t page_dir) {
   11fb0:	55                   	push   %ebp
   11fb1:	89 e5                	mov    %esp,%ebp
   11fb3:	83 ec 78             	sub    $0x78,%esp
  // 1.定义elf文件头对象,和程序段表项对象
  Elf32_Ehdr elf_hdr;
  Elf32_Phdr elf_phdr;

  // 2.打开文件
  int file = sys_open(name, 0);
   11fb6:	83 ec 08             	sub    $0x8,%esp
   11fb9:	6a 00                	push   $0x0
   11fbb:	ff 75 0c             	push   0xc(%ebp)
   11fbe:	e8 8a 2f 00 00       	call   14f4d <sys_open>
   11fc3:	83 c4 10             	add    $0x10,%esp
   11fc6:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if (file < 0) {
   11fc9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11fcd:	79 18                	jns    11fe7 <load_elf_file+0x37>
    log_printf("open failed %s\n", name);
   11fcf:	83 ec 08             	sub    $0x8,%esp
   11fd2:	ff 75 0c             	push   0xc(%ebp)
   11fd5:	68 ae 6b 01 00       	push   $0x16bae
   11fda:	e8 2a 48 00 00       	call   16809 <log_printf>
   11fdf:	83 c4 10             	add    $0x10,%esp
    goto load_failed;
   11fe2:	e9 c1 01 00 00       	jmp    121a8 <load_elf_file+0x1f8>
  }

  // 3.读取elf文件的elf头部分
  int cnt = sys_read(file, (char *)&elf_hdr, sizeof(Elf32_Ehdr));
   11fe7:	83 ec 04             	sub    $0x4,%esp
   11fea:	6a 34                	push   $0x34
   11fec:	8d 45 b0             	lea    -0x50(%ebp),%eax
   11fef:	50                   	push   %eax
   11ff0:	ff 75 ec             	push   -0x14(%ebp)
   11ff3:	e8 ba 30 00 00       	call   150b2 <sys_read>
   11ff8:	83 c4 10             	add    $0x10,%esp
   11ffb:	89 45 e8             	mov    %eax,-0x18(%ebp)
  if (cnt < sizeof(Elf32_Ehdr)) {
   11ffe:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12001:	83 f8 33             	cmp    $0x33,%eax
   12004:	77 18                	ja     1201e <load_elf_file+0x6e>
    log_printf("elf hdr too small. size=%d\n", cnt);
   12006:	83 ec 08             	sub    $0x8,%esp
   12009:	ff 75 e8             	push   -0x18(%ebp)
   1200c:	68 be 6b 01 00       	push   $0x16bbe
   12011:	e8 f3 47 00 00       	call   16809 <log_printf>
   12016:	83 c4 10             	add    $0x10,%esp
    goto load_failed;
   12019:	e9 8a 01 00 00       	jmp    121a8 <load_elf_file+0x1f8>
  }

  // 4.判断是否为ELF文件
  if (elf_hdr.e_ident[0] != 0x7F || elf_hdr.e_ident[1] != 'E' ||
   1201e:	0f b6 45 b0          	movzbl -0x50(%ebp),%eax
   12022:	3c 7f                	cmp    $0x7f,%al
   12024:	75 18                	jne    1203e <load_elf_file+0x8e>
   12026:	0f b6 45 b1          	movzbl -0x4f(%ebp),%eax
   1202a:	3c 45                	cmp    $0x45,%al
   1202c:	75 10                	jne    1203e <load_elf_file+0x8e>
      elf_hdr.e_ident[2] != 'L' || elf_hdr.e_ident[3] != 'F') {
   1202e:	0f b6 45 b2          	movzbl -0x4e(%ebp),%eax
  if (elf_hdr.e_ident[0] != 0x7F || elf_hdr.e_ident[1] != 'E' ||
   12032:	3c 4c                	cmp    $0x4c,%al
   12034:	75 08                	jne    1203e <load_elf_file+0x8e>
      elf_hdr.e_ident[2] != 'L' || elf_hdr.e_ident[3] != 'F') {
   12036:	0f b6 45 b3          	movzbl -0x4d(%ebp),%eax
   1203a:	3c 46                	cmp    $0x46,%al
   1203c:	74 15                	je     12053 <load_elf_file+0xa3>
    log_printf("check elf ident failed.\n");
   1203e:	83 ec 0c             	sub    $0xc,%esp
   12041:	68 da 6b 01 00       	push   $0x16bda
   12046:	e8 be 47 00 00       	call   16809 <log_printf>
   1204b:	83 c4 10             	add    $0x10,%esp
    goto load_failed;
   1204e:	e9 55 01 00 00       	jmp    121a8 <load_elf_file+0x1f8>
  }

  // 5.必须是可执行文件和针对386处理器的类型，且有入口
  if ((elf_hdr.e_type != ET_EXEC) || (elf_hdr.e_machine != EM_386) ||
   12053:	0f b7 45 c0          	movzwl -0x40(%ebp),%eax
   12057:	66 83 f8 02          	cmp    $0x2,%ax
   1205b:	75 11                	jne    1206e <load_elf_file+0xbe>
   1205d:	0f b7 45 c2          	movzwl -0x3e(%ebp),%eax
   12061:	66 83 f8 03          	cmp    $0x3,%ax
   12065:	75 07                	jne    1206e <load_elf_file+0xbe>
      (elf_hdr.e_entry == 0)) {
   12067:	8b 45 c8             	mov    -0x38(%ebp),%eax
  if ((elf_hdr.e_type != ET_EXEC) || (elf_hdr.e_machine != EM_386) ||
   1206a:	85 c0                	test   %eax,%eax
   1206c:	75 15                	jne    12083 <load_elf_file+0xd3>
    log_printf("check elf type or entry failed.\n");
   1206e:	83 ec 0c             	sub    $0xc,%esp
   12071:	68 f4 6b 01 00       	push   $0x16bf4
   12076:	e8 8e 47 00 00       	call   16809 <log_printf>
   1207b:	83 c4 10             	add    $0x10,%esp
    goto load_failed;
   1207e:	e9 25 01 00 00       	jmp    121a8 <load_elf_file+0x1f8>
  }

  // 6.必须有程序头部
  if ((elf_hdr.e_phentsize == 0) || (elf_hdr.e_phoff == 0)) {
   12083:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
   12087:	66 85 c0             	test   %ax,%ax
   1208a:	74 07                	je     12093 <load_elf_file+0xe3>
   1208c:	8b 45 cc             	mov    -0x34(%ebp),%eax
   1208f:	85 c0                	test   %eax,%eax
   12091:	75 15                	jne    120a8 <load_elf_file+0xf8>
    log_printf("none programe header\n");
   12093:	83 ec 0c             	sub    $0xc,%esp
   12096:	68 15 6c 01 00       	push   $0x16c15
   1209b:	e8 69 47 00 00       	call   16809 <log_printf>
   120a0:	83 c4 10             	add    $0x10,%esp
    goto load_failed;
   120a3:	e9 00 01 00 00       	jmp    121a8 <load_elf_file+0x1f8>
  }

  // 7.遍历elf文件的程序段，加载可加载段到内存中对应位置
  uint32_t e_phoff = elf_hdr.e_phoff;  // 获取程序段表的偏移地址
   120a8:	8b 45 cc             	mov    -0x34(%ebp),%eax
   120ab:	89 45 f4             	mov    %eax,-0xc(%ebp)
  for (int i = 0; i < elf_hdr.e_phnum; ++i, e_phoff += elf_hdr.e_phentsize) {
   120ae:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   120b5:	e9 cb 00 00 00       	jmp    12185 <load_elf_file+0x1d5>
    if (sys_lseek(file, e_phoff, 0) < 0) {
   120ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
   120bd:	83 ec 04             	sub    $0x4,%esp
   120c0:	6a 00                	push   $0x0
   120c2:	50                   	push   %eax
   120c3:	ff 75 ec             	push   -0x14(%ebp)
   120c6:	e8 b3 30 00 00       	call   1517e <sys_lseek>
   120cb:	83 c4 10             	add    $0x10,%esp
   120ce:	85 c0                	test   %eax,%eax
   120d0:	79 15                	jns    120e7 <load_elf_file+0x137>
      log_printf("read file failed\n");
   120d2:	83 ec 0c             	sub    $0xc,%esp
   120d5:	68 9c 6b 01 00       	push   $0x16b9c
   120da:	e8 2a 47 00 00       	call   16809 <log_printf>
   120df:	83 c4 10             	add    $0x10,%esp
      goto load_failed;
   120e2:	e9 c1 00 00 00       	jmp    121a8 <load_elf_file+0x1f8>
    }

    cnt = sys_read(file, (char *)&elf_phdr, sizeof(Elf32_Phdr));
   120e7:	83 ec 04             	sub    $0x4,%esp
   120ea:	6a 20                	push   $0x20
   120ec:	8d 45 90             	lea    -0x70(%ebp),%eax
   120ef:	50                   	push   %eax
   120f0:	ff 75 ec             	push   -0x14(%ebp)
   120f3:	e8 ba 2f 00 00       	call   150b2 <sys_read>
   120f8:	83 c4 10             	add    $0x10,%esp
   120fb:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (cnt < sizeof(Elf32_Phdr)) {
   120fe:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12101:	83 f8 1f             	cmp    $0x1f,%eax
   12104:	77 15                	ja     1211b <load_elf_file+0x16b>
      log_printf("read file failed\n");
   12106:	83 ec 0c             	sub    $0xc,%esp
   12109:	68 9c 6b 01 00       	push   $0x16b9c
   1210e:	e8 f6 46 00 00       	call   16809 <log_printf>
   12113:	83 c4 10             	add    $0x10,%esp
      goto load_failed;
   12116:	e9 8d 00 00 00       	jmp    121a8 <load_elf_file+0x1f8>
    }

    // 若程序段不是可加载的或虚拟地址 < 用户程序的起始地址，则不可用
    if (elf_phdr.p_type != 1 || elf_phdr.p_vaddr < MEM_TASK_BASE) {
   1211b:	8b 45 90             	mov    -0x70(%ebp),%eax
   1211e:	83 f8 01             	cmp    $0x1,%eax
   12121:	75 53                	jne    12176 <load_elf_file+0x1c6>
   12123:	8b 45 98             	mov    -0x68(%ebp),%eax
   12126:	85 c0                	test   %eax,%eax
   12128:	79 4c                	jns    12176 <load_elf_file+0x1c6>
      continue;
    }

    // 加载该程序段
    int err = load_phdr(file, &elf_phdr, page_dir);
   1212a:	83 ec 04             	sub    $0x4,%esp
   1212d:	ff 75 10             	push   0x10(%ebp)
   12130:	8d 45 90             	lea    -0x70(%ebp),%eax
   12133:	50                   	push   %eax
   12134:	ff 75 ec             	push   -0x14(%ebp)
   12137:	e8 60 fd ff ff       	call   11e9c <load_phdr>
   1213c:	83 c4 10             	add    $0x10,%esp
   1213f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (err < 0) {
   12142:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   12146:	79 12                	jns    1215a <load_elf_file+0x1aa>
      log_printf("load program failed\n");
   12148:	83 ec 0c             	sub    $0xc,%esp
   1214b:	68 2b 6c 01 00       	push   $0x16c2b
   12150:	e8 b4 46 00 00       	call   16809 <log_printf>
   12155:	83 c4 10             	add    $0x10,%esp
      goto load_failed;
   12158:	eb 4e                	jmp    121a8 <load_elf_file+0x1f8>
    }

    // 更新堆空间的位置，紧靠最后一个可加载段
    task->heap_start = elf_phdr.p_vaddr + elf_phdr.p_memsz;
   1215a:	8b 55 98             	mov    -0x68(%ebp),%edx
   1215d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
   12160:	01 c2                	add    %eax,%edx
   12162:	8b 45 08             	mov    0x8(%ebp),%eax
   12165:	89 50 10             	mov    %edx,0x10(%eax)
    task->heap_end = task->heap_start;
   12168:	8b 45 08             	mov    0x8(%ebp),%eax
   1216b:	8b 50 10             	mov    0x10(%eax),%edx
   1216e:	8b 45 08             	mov    0x8(%ebp),%eax
   12171:	89 50 14             	mov    %edx,0x14(%eax)
   12174:	eb 01                	jmp    12177 <load_elf_file+0x1c7>
      continue;
   12176:	90                   	nop
  for (int i = 0; i < elf_hdr.e_phnum; ++i, e_phoff += elf_hdr.e_phentsize) {
   12177:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   1217b:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
   1217f:	0f b7 c0             	movzwl %ax,%eax
   12182:	01 45 f4             	add    %eax,-0xc(%ebp)
   12185:	0f b7 45 dc          	movzwl -0x24(%ebp),%eax
   12189:	0f b7 c0             	movzwl %ax,%eax
   1218c:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   1218f:	0f 8c 25 ff ff ff    	jl     120ba <load_elf_file+0x10a>
  }

  // 成功解析并加载完整个elf文件后关闭文件，并返回程序入口地址
  sys_close(file);
   12195:	83 ec 0c             	sub    $0xc,%esp
   12198:	ff 75 ec             	push   -0x14(%ebp)
   1219b:	e8 02 30 00 00       	call   151a2 <sys_close>
   121a0:	83 c4 10             	add    $0x10,%esp
  return elf_hdr.e_entry;
   121a3:	8b 45 c8             	mov    -0x38(%ebp),%eax
   121a6:	eb 19                	jmp    121c1 <load_elf_file+0x211>

// 错误处理
load_failed:
  if (file >= 0) {  // 文件已被打开，则关闭该文件
   121a8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   121ac:	78 0e                	js     121bc <load_elf_file+0x20c>
    sys_close(file);
   121ae:	83 ec 0c             	sub    $0xc,%esp
   121b1:	ff 75 ec             	push   -0x14(%ebp)
   121b4:	e8 e9 2f 00 00       	call   151a2 <sys_close>
   121b9:	83 c4 10             	add    $0x10,%esp
  }
  return 0;
   121bc:	b8 00 00 00 00       	mov    $0x0,%eax
}
   121c1:	c9                   	leave  
   121c2:	c3                   	ret    

000121c3 <copy_args>:
 * @param argv 参数的字符串数组
 * @param argc 参数的个数
 * @return int
 */
static int copy_args(uint32_t to_page_dir, char *stack_top, char *const *argv,
                     int argc) {
   121c3:	55                   	push   %ebp
   121c4:	89 e5                	mov    %esp,%ebp
   121c6:	83 ec 38             	sub    $0x38,%esp
  task_args_t task_args;
  task_args.argc = argc;
   121c9:	8b 45 14             	mov    0x14(%ebp),%eax
   121cc:	89 45 d8             	mov    %eax,-0x28(%ebp)

  // 1.获取char*数组在目标虚拟空间中的的虚拟地址
  // char*数组将被拷贝到task_args的上方,所以直接让argv指向栈顶偏移task_args的大小个字节的空间即可
  // 即指向了该字符串数组第一个char*的地址
  task_args.argv = (char **)(stack_top + sizeof(task_args_t));
   121cf:	8b 45 0c             	mov    0xc(%ebp),%eax
   121d2:	83 c0 0c             	add    $0xc,%eax
   121d5:	89 45 dc             	mov    %eax,-0x24(%ebp)

  // 2.获取char*数组对应的虚拟空间关联的物理地址
  char **to_argv_paddr =
      (char **)memory_get_paddr(to_page_dir, (uint32_t)task_args.argv);
   121d8:	8b 45 dc             	mov    -0x24(%ebp),%eax
   121db:	83 ec 08             	sub    $0x8,%esp
   121de:	50                   	push   %eax
   121df:	ff 75 08             	push   0x8(%ebp)
   121e2:	e8 0e ed ff ff       	call   10ef5 <memory_get_paddr>
   121e7:	83 c4 10             	add    $0x10,%esp
  char **to_argv_paddr =
   121ea:	89 45 ec             	mov    %eax,-0x14(%ebp)

  // 3.获取参数的存储地址, 偏移量为 task_args 加上
  // argc个参数的字符串指针的大小，
  char *dest_arg = stack_top + sizeof(task_args_t) + sizeof(char *) * argc;
   121ed:	8b 45 14             	mov    0x14(%ebp),%eax
   121f0:	83 c0 03             	add    $0x3,%eax
   121f3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   121fa:	8b 45 0c             	mov    0xc(%ebp),%eax
   121fd:	01 d0                	add    %edx,%eax
   121ff:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 3.将参数拷贝到dest_arg处，并将每个参数的地址记录到task.argv指向的char*数组中
  for (int i = 0; i < argc; ++i) {
   12202:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   12209:	e9 82 00 00 00       	jmp    12290 <copy_args+0xcd>
    char *from = argv[i];
   1220e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12211:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   12218:	8b 45 10             	mov    0x10(%ebp),%eax
   1221b:	01 d0                	add    %edx,%eax
   1221d:	8b 00                	mov    (%eax),%eax
   1221f:	89 45 e8             	mov    %eax,-0x18(%ebp)
    int len = kernel_strlen(from) + 1;
   12222:	83 ec 0c             	sub    $0xc,%esp
   12225:	ff 75 e8             	push   -0x18(%ebp)
   12228:	e8 5b 3d 00 00       	call   15f88 <kernel_strlen>
   1222d:	83 c4 10             	add    $0x10,%esp
   12230:	83 c0 01             	add    $0x1,%eax
   12233:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    int err = memory_copy_uvm_data((uint32_t)dest_arg, to_page_dir,
   12236:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
   12239:	8b 55 e8             	mov    -0x18(%ebp),%edx
   1223c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1223f:	51                   	push   %ecx
   12240:	52                   	push   %edx
   12241:	ff 75 08             	push   0x8(%ebp)
   12244:	50                   	push   %eax
   12245:	e8 fe ec ff ff       	call   10f48 <memory_copy_uvm_data>
   1224a:	83 c4 10             	add    $0x10,%esp
   1224d:	89 45 e0             	mov    %eax,-0x20(%ebp)
                                   (uint32_t)from, len);
    ASSERT(err >= 0);
   12250:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   12254:	79 1c                	jns    12272 <copy_args+0xaf>
   12256:	68 40 6c 01 00       	push   $0x16c40
   1225b:	68 08 6d 01 00       	push   $0x16d08
   12260:	68 81 03 00 00       	push   $0x381
   12265:	68 1c 6b 01 00       	push   $0x16b1c
   1226a:	e8 84 38 00 00       	call   15af3 <pannic>
   1226f:	83 c4 10             	add    $0x10,%esp
    to_argv_paddr[i] = dest_arg;
   12272:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12275:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1227c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1227f:	01 c2                	add    %eax,%edx
   12281:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12284:	89 02                	mov    %eax,(%edx)
    dest_arg += len;
   12286:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12289:	01 45 f4             	add    %eax,-0xc(%ebp)
  for (int i = 0; i < argc; ++i) {
   1228c:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   12290:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12293:	3b 45 14             	cmp    0x14(%ebp),%eax
   12296:	0f 8c 72 ff ff ff    	jl     1220e <copy_args+0x4b>
  }

  // 4.将task_args拷贝到用户虚拟空间中,紧邻栈顶上方，作为入口函数的参数
  memory_copy_uvm_data((uint32_t)stack_top, to_page_dir, (uint32_t)&task_args,
   1229c:	8d 55 d4             	lea    -0x2c(%ebp),%edx
   1229f:	8b 45 0c             	mov    0xc(%ebp),%eax
   122a2:	6a 0c                	push   $0xc
   122a4:	52                   	push   %edx
   122a5:	ff 75 08             	push   0x8(%ebp)
   122a8:	50                   	push   %eax
   122a9:	e8 9a ec ff ff       	call   10f48 <memory_copy_uvm_data>
   122ae:	83 c4 10             	add    $0x10,%esp
                       sizeof(task_args_t));
}
   122b1:	90                   	nop
   122b2:	c9                   	leave  
   122b3:	c3                   	ret    

000122b4 <sys_execve>:
 * @param name 程序名
 * @param argv 命令行参数数组
 * @param env 程序继承的环境变量数组
 * @return int
 */
int sys_execve(char *name, char *const *argv, char *const *env) {
   122b4:	55                   	push   %ebp
   122b5:	89 e5                	mov    %esp,%ebp
   122b7:	83 ec 28             	sub    $0x28,%esp
  // 1.获取当前任务进程
  task_t *task = task_current();
   122ba:	e8 d5 f6 ff ff       	call   11994 <task_current>
   122bf:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 2.获取当前任务的页目录表
  uint32_t old_page_dir = task->tss.cr3;
   122c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   122c5:	8b 40 78             	mov    0x78(%eax),%eax
   122c8:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 3.创建一个新的页目录表
  uint32_t new_page_dir = memory_creat_uvm();
   122cb:	e8 90 e6 ff ff       	call   10960 <memory_creat_uvm>
   122d0:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if (new_page_dir == 0)  // 创建失败
   122d3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   122d7:	0f 84 4a 01 00 00    	je     12427 <sys_execve+0x173>
    goto exec_failed;

  // 4.加载elf文件，替换当前任务
  uint32_t entry = load_elf_file(task, name, new_page_dir);
   122dd:	83 ec 04             	sub    $0x4,%esp
   122e0:	ff 75 ec             	push   -0x14(%ebp)
   122e3:	ff 75 08             	push   0x8(%ebp)
   122e6:	ff 75 f4             	push   -0xc(%ebp)
   122e9:	e8 c2 fc ff ff       	call   11fb0 <load_elf_file>
   122ee:	83 c4 10             	add    $0x10,%esp
   122f1:	89 45 e8             	mov    %eax,-0x18(%ebp)
  if (entry == 0) goto exec_failed;
   122f4:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   122f8:	0f 84 2c 01 00 00    	je     1242a <sys_execve+0x176>

  // 5.为新进程分配用户栈空间
  uint32_t stack_top = MEM_TASK_STACK_TOP - MEM_TASK_ARG_SIZE;
   122fe:	c7 45 e4 00 c0 ff df 	movl   $0xdfffc000,-0x1c(%ebp)
  int err = memory_alloc_for_page_dir(
   12305:	6a 07                	push   $0x7
   12307:	68 00 20 03 00       	push   $0x32000
   1230c:	68 00 e0 fc df       	push   $0xdffce000
   12311:	ff 75 ec             	push   -0x14(%ebp)
   12314:	e8 39 ea ff ff       	call   10d52 <memory_alloc_for_page_dir>
   12319:	83 c4 10             	add    $0x10,%esp
   1231c:	89 45 e0             	mov    %eax,-0x20(%ebp)
      new_page_dir, MEM_TASK_STACK_TOP - MEM_TASK_STACK_SIZE,
      MEM_TASK_STACK_SIZE, PTE_P | PTE_U | PTE_W);

  if (err < 0) goto exec_failed;
   1231f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   12323:	0f 88 04 01 00 00    	js     1242d <sys_execve+0x179>

  // 6.将被执行任务的入口参数拷贝到栈上方对应内存空间
  int argc = strings_count(argv);
   12329:	83 ec 0c             	sub    $0xc,%esp
   1232c:	ff 75 0c             	push   0xc(%ebp)
   1232f:	e8 88 40 00 00       	call   163bc <strings_count>
   12334:	83 c4 10             	add    $0x10,%esp
   12337:	89 45 dc             	mov    %eax,-0x24(%ebp)
  err = copy_args(new_page_dir, (char *)stack_top, argv, argc);
   1233a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1233d:	ff 75 dc             	push   -0x24(%ebp)
   12340:	ff 75 0c             	push   0xc(%ebp)
   12343:	50                   	push   %eax
   12344:	ff 75 ec             	push   -0x14(%ebp)
   12347:	e8 77 fe ff ff       	call   121c3 <copy_args>
   1234c:	83 c4 10             	add    $0x10,%esp
   1234f:	89 45 e0             	mov    %eax,-0x20(%ebp)
  if (err < 0) goto exec_failed;
   12352:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   12356:	0f 88 d4 00 00 00    	js     12430 <sys_execve+0x17c>

  // 7.获取系统调用的栈帧,因为每次通过调用门进入内核栈中都只会一帧该结构体的数据，
  // 所以用最高地址减去大小即可获得该帧的起始地址
  syscall_frame_t *frame =
      (syscall_frame_t *)(task_current()->tss.esp0 - sizeof(syscall_frame_t));
   1235c:	e8 33 f6 ff ff       	call   11994 <task_current>
   12361:	8b 40 60             	mov    0x60(%eax),%eax
   12364:	83 e8 58             	sub    $0x58,%eax
  syscall_frame_t *frame =
   12367:	89 45 d8             	mov    %eax,-0x28(%ebp)

  // 8.更改进程用户栈的位置，并更改调用门返回后执行的指令地址为程序入口地址
  frame->esp = stack_top - 5 * 4;
   1236a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1236d:	8d 50 ec             	lea    -0x14(%eax),%edx
   12370:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12373:	89 50 50             	mov    %edx,0x50(%eax)
  frame->eip = entry;
   12376:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12379:	8b 55 e8             	mov    -0x18(%ebp),%edx
   1237c:	89 50 34             	mov    %edx,0x34(%eax)

  // 9.让进程更清爽的运行，清空通用寄存器的值
  frame->eax = frame->ebx = frame->ecx = frame->edx = 0;
   1237f:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12382:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
   12389:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1238c:	8b 50 28             	mov    0x28(%eax),%edx
   1238f:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12392:	89 50 2c             	mov    %edx,0x2c(%eax)
   12395:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12398:	8b 50 2c             	mov    0x2c(%eax),%edx
   1239b:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1239e:	89 50 24             	mov    %edx,0x24(%eax)
   123a1:	8b 45 d8             	mov    -0x28(%ebp),%eax
   123a4:	8b 50 24             	mov    0x24(%eax),%edx
   123a7:	8b 45 d8             	mov    -0x28(%ebp),%eax
   123aa:	89 50 30             	mov    %edx,0x30(%eax)
  frame->esi = frame->edi = frame->ebp = 0;
   123ad:	8b 45 d8             	mov    -0x28(%ebp),%eax
   123b0:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
   123b7:	8b 45 d8             	mov    -0x28(%ebp),%eax
   123ba:	8b 50 1c             	mov    0x1c(%eax),%edx
   123bd:	8b 45 d8             	mov    -0x28(%ebp),%eax
   123c0:	89 50 14             	mov    %edx,0x14(%eax)
   123c3:	8b 45 d8             	mov    -0x28(%ebp),%eax
   123c6:	8b 50 14             	mov    0x14(%eax),%edx
   123c9:	8b 45 d8             	mov    -0x28(%ebp),%eax
   123cc:	89 50 18             	mov    %edx,0x18(%eax)
  frame->eflags = EFLAGS_IF | EFLAGS_DEFAULT_1;
   123cf:	8b 45 d8             	mov    -0x28(%ebp),%eax
   123d2:	c7 00 02 02 00 00    	movl   $0x202,(%eax)

  // 10.修改当前任务名为被执行任务名
  kernel_strncpy(task->name, get_file_name(name), TASK_NAME_SIZE);
   123d8:	83 ec 0c             	sub    $0xc,%esp
   123db:	ff 75 08             	push   0x8(%ebp)
   123de:	e8 06 40 00 00       	call   163e9 <get_file_name>
   123e3:	83 c4 10             	add    $0x10,%esp
   123e6:	8b 55 f4             	mov    -0xc(%ebp),%edx
   123e9:	83 c2 24             	add    $0x24,%edx
   123ec:	83 ec 04             	sub    $0x4,%esp
   123ef:	6a 20                	push   $0x20
   123f1:	50                   	push   %eax
   123f2:	52                   	push   %edx
   123f3:	e8 be 3a 00 00       	call   15eb6 <kernel_strncpy>
   123f8:	83 c4 10             	add    $0x10,%esp

  // 11.记录并设置新页目录表，并销毁原页目录表的虚拟映射关系
  task->tss.cr3 = new_page_dir;
   123fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   123fe:	8b 55 ec             	mov    -0x14(%ebp),%edx
   12401:	89 50 78             	mov    %edx,0x78(%eax)
  mmu_set_page_dir(new_page_dir);
   12404:	83 ec 0c             	sub    $0xc,%esp
   12407:	ff 75 ec             	push   -0x14(%ebp)
   1240a:	e8 65 ee ff ff       	call   11274 <mmu_set_page_dir>
   1240f:	83 c4 10             	add    $0x10,%esp
  memory_destroy_uvm(old_page_dir);
   12412:	83 ec 0c             	sub    $0xc,%esp
   12415:	ff 75 f0             	push   -0x10(%ebp)
   12418:	e8 55 e7 ff ff       	call   10b72 <memory_destroy_uvm>
   1241d:	83 c4 10             	add    $0x10,%esp
  return 0;
   12420:	b8 00 00 00 00       	mov    $0x0,%eax
   12425:	eb 3a                	jmp    12461 <sys_execve+0x1ad>
    goto exec_failed;
   12427:	90                   	nop
   12428:	eb 07                	jmp    12431 <sys_execve+0x17d>
  if (entry == 0) goto exec_failed;
   1242a:	90                   	nop
   1242b:	eb 04                	jmp    12431 <sys_execve+0x17d>
  if (err < 0) goto exec_failed;
   1242d:	90                   	nop
   1242e:	eb 01                	jmp    12431 <sys_execve+0x17d>
  if (err < 0) goto exec_failed;
   12430:	90                   	nop

exec_failed:
  // 执行失败，释放资源并恢复到原进程状态
  if (new_page_dir) {
   12431:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   12435:	74 25                	je     1245c <sys_execve+0x1a8>
    task->tss.cr3 = old_page_dir;
   12437:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1243a:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1243d:	89 50 78             	mov    %edx,0x78(%eax)
    mmu_set_page_dir(old_page_dir);
   12440:	83 ec 0c             	sub    $0xc,%esp
   12443:	ff 75 f0             	push   -0x10(%ebp)
   12446:	e8 29 ee ff ff       	call   11274 <mmu_set_page_dir>
   1244b:	83 c4 10             	add    $0x10,%esp
    memory_destroy_uvm(new_page_dir);
   1244e:	83 ec 0c             	sub    $0xc,%esp
   12451:	ff 75 ec             	push   -0x14(%ebp)
   12454:	e8 19 e7 ff ff       	call   10b72 <memory_destroy_uvm>
   12459:	83 c4 10             	add    $0x10,%esp
  }
  return -1;
   1245c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   12461:	c9                   	leave  
   12462:	c3                   	ret    

00012463 <sys_exit>:

/**
 * @brief 任务进程主动退出
 *
 */
void sys_exit(int status) {
   12463:	55                   	push   %ebp
   12464:	89 e5                	mov    %esp,%ebp
   12466:	83 ec 28             	sub    $0x28,%esp
  // 1.获取当前任务
  task_t *curr_task = task_current();
   12469:	e8 26 f5 ff ff       	call   11994 <task_current>
   1246e:	89 45 e8             	mov    %eax,-0x18(%ebp)

  // 2.关闭当前任务打开的文件
  for (int fd = 0; fd < TASK_OFILE_SIZE; ++fd) {
   12471:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12478:	eb 39                	jmp    124b3 <sys_exit+0x50>
    file_t *file = curr_task->file_table[fd];
   1247a:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1247d:	8b 55 f4             	mov    -0xc(%ebp),%edx
   12480:	83 c2 30             	add    $0x30,%edx
   12483:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   12487:	89 45 d8             	mov    %eax,-0x28(%ebp)
    if (file) {
   1248a:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
   1248e:	74 1f                	je     124af <sys_exit+0x4c>
      sys_close(fd);
   12490:	83 ec 0c             	sub    $0xc,%esp
   12493:	ff 75 f4             	push   -0xc(%ebp)
   12496:	e8 07 2d 00 00       	call   151a2 <sys_close>
   1249b:	83 c4 10             	add    $0x10,%esp
      curr_task->file_table[fd] = (file_t *)0;
   1249e:	8b 45 e8             	mov    -0x18(%ebp),%eax
   124a1:	8b 55 f4             	mov    -0xc(%ebp),%edx
   124a4:	83 c2 30             	add    $0x30,%edx
   124a7:	c7 44 90 08 00 00 00 	movl   $0x0,0x8(%eax,%edx,4)
   124ae:	00 
  for (int fd = 0; fd < TASK_OFILE_SIZE; ++fd) {
   124af:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   124b3:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   124b7:	7e c1                	jle    1247a <sys_exit+0x17>
    }
  }

  //3.将该进程的子进程的父进程设为first_task，由其进行统一回收
  int move_child = 0; //标志位，判断是否当前进程已有子进程进入僵尸态
   124b9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  //TODO:加锁
  mutex_lock(&task_table_lock);
   124c0:	83 ec 0c             	sub    $0xc,%esp
   124c3:	68 c0 89 03 00       	push   $0x389c0
   124c8:	e8 5a 2f 00 00       	call   15427 <mutex_lock>
   124cd:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < TASK_COUNT; ++i) {
   124d0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   124d7:	eb 3b                	jmp    12514 <sys_exit+0xb1>
    task_t *task = task_table + i;
   124d9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   124dc:	69 c0 c8 02 00 00    	imul   $0x2c8,%eax,%eax
   124e2:	05 c0 25 02 00       	add    $0x225c0,%eax
   124e7:	89 45 dc             	mov    %eax,-0x24(%ebp)
    if (task->parent == curr_task) {
   124ea:	8b 45 dc             	mov    -0x24(%ebp),%eax
   124ed:	8b 40 04             	mov    0x4(%eax),%eax
   124f0:	39 45 e8             	cmp    %eax,-0x18(%ebp)
   124f3:	75 1b                	jne    12510 <sys_exit+0xad>
      task->parent = &task_manager.first_task;
   124f5:	8b 45 dc             	mov    -0x24(%ebp),%eax
   124f8:	c7 40 04 28 20 02 00 	movl   $0x22028,0x4(%eax)
      if (task->state == TASK_ZOMBIE) { //已有子进程提前退出进入僵尸态，则设置标志位
   124ff:	8b 45 dc             	mov    -0x24(%ebp),%eax
   12502:	8b 00                	mov    (%eax),%eax
   12504:	83 f8 06             	cmp    $0x6,%eax
   12507:	75 07                	jne    12510 <sys_exit+0xad>
        move_child = 1;
   12509:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
  for (int i = 0; i < TASK_COUNT; ++i) {
   12510:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   12514:	83 7d ec 7f          	cmpl   $0x7f,-0x14(%ebp)
   12518:	7e bf                	jle    124d9 <sys_exit+0x76>
      }
    }
  }
  //TODO:解锁
  mutex_unlock(&task_table_lock);
   1251a:	83 ec 0c             	sub    $0xc,%esp
   1251d:	68 c0 89 03 00       	push   $0x389c0
   12522:	e8 91 2f 00 00       	call   154b8 <mutex_unlock>
   12527:	83 c4 10             	add    $0x10,%esp
 

  // TODO:加锁
  idt_state_t state = idt_enter_protection();
   1252a:	e8 71 0d 00 00       	call   132a0 <idt_enter_protection>
   1252f:	89 45 e4             	mov    %eax,-0x1c(%ebp)


  // 4.获取父进程，判断父进程是否在等待回收子进程资源
  task_t *parent = (task_t *)curr_task->parent;
   12532:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12535:	8b 40 04             	mov    0x4(%eax),%eax
   12538:	89 45 e0             	mov    %eax,-0x20(%ebp)
  
  if (move_child && (parent != &task_manager.first_task)) {  
   1253b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1253f:	74 23                	je     12564 <sys_exit+0x101>
   12541:	81 7d e0 28 20 02 00 	cmpl   $0x22028,-0x20(%ebp)
   12548:	74 1a                	je     12564 <sys_exit+0x101>
    //当前进程的父进程不是first_task,
    //需要对first_task进行唤醒，以使first_task
    //对当前进程的提前死亡的子进程进行资源回收
    if (task_manager.first_task.state == TASK_WAITTING) {
   1254a:	a1 28 20 02 00       	mov    0x22028,%eax
   1254f:	83 f8 04             	cmp    $0x4,%eax
   12552:	75 10                	jne    12564 <sys_exit+0x101>
      task_set_ready(&task_manager.first_task);
   12554:	83 ec 0c             	sub    $0xc,%esp
   12557:	68 28 20 02 00       	push   $0x22028
   1255c:	e8 81 f3 ff ff       	call   118e2 <task_set_ready>
   12561:	83 c4 10             	add    $0x10,%esp
    }

  }
  

  if (parent->state ==
   12564:	8b 45 e0             	mov    -0x20(%ebp),%eax
   12567:	8b 00                	mov    (%eax),%eax
   12569:	83 f8 04             	cmp    $0x4,%eax
   1256c:	75 0e                	jne    1257c <sys_exit+0x119>
      TASK_WAITTING) {  // 父进程处于阻塞并等待回收子进程资源的状态，需要唤醒父进程
    task_set_ready(parent);
   1256e:	83 ec 0c             	sub    $0xc,%esp
   12571:	ff 75 e0             	push   -0x20(%ebp)
   12574:	e8 69 f3 ff ff       	call   118e2 <task_set_ready>
   12579:	83 c4 10             	add    $0x10,%esp
  }

  // 3.设置进程状态标志为僵尸态并保存状态值
  curr_task->state = TASK_ZOMBIE;
   1257c:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1257f:	c7 00 06 00 00 00    	movl   $0x6,(%eax)
  curr_task->status = status;
   12585:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12588:	8b 55 08             	mov    0x8(%ebp),%edx
   1258b:	89 50 0c             	mov    %edx,0xc(%eax)

  // 5.将任务进程从就绪队列中取下
  task_set_unready(curr_task);
   1258e:	83 ec 0c             	sub    $0xc,%esp
   12591:	ff 75 e8             	push   -0x18(%ebp)
   12594:	e8 8b f3 ff ff       	call   11924 <task_set_unready>
   12599:	83 c4 10             	add    $0x10,%esp

  // 6.切换任务进程
  task_switch();
   1259c:	e8 fd f3 ff ff       	call   1199e <task_switch>

  // TODO:解锁
  idt_leave_protection(state);
   125a1:	83 ec 0c             	sub    $0xc,%esp
   125a4:	ff 75 e4             	push   -0x1c(%ebp)
   125a7:	e8 0c 0d 00 00       	call   132b8 <idt_leave_protection>
   125ac:	83 c4 10             	add    $0x10,%esp
}
   125af:	90                   	nop
   125b0:	c9                   	leave  
   125b1:	c3                   	ret    

000125b2 <sys_wait>:
 * @brief 回收进程资源
 *
 * @param status 传入参数，记录被回收的进程状态值
 * @return int  被回收的进程的pid
 */
int sys_wait(int *status) {
   125b2:	55                   	push   %ebp
   125b3:	89 e5                	mov    %esp,%ebp
   125b5:	83 ec 28             	sub    $0x28,%esp
  // 1.获取当前进程
  task_t *curr_task = task_current();
   125b8:	e8 d7 f3 ff ff       	call   11994 <task_current>
   125bd:	89 45 f0             	mov    %eax,-0x10(%ebp)

  for (;;) {
    // TODO:加锁
    mutex_lock(&task_table_lock);
   125c0:	83 ec 0c             	sub    $0xc,%esp
   125c3:	68 c0 89 03 00       	push   $0x389c0
   125c8:	e8 5a 2e 00 00       	call   15427 <mutex_lock>
   125cd:	83 c4 10             	add    $0x10,%esp

    // 2.遍历任务表,寻找子进程
    for (int i = 0; i < TASK_COUNT; ++i) {
   125d0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   125d7:	eb 6c                	jmp    12645 <sys_wait+0x93>
      task_t *task = task_table + i;
   125d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   125dc:	69 c0 c8 02 00 00    	imul   $0x2c8,%eax,%eax
   125e2:	05 c0 25 02 00       	add    $0x225c0,%eax
   125e7:	89 45 e8             	mov    %eax,-0x18(%ebp)
      if (task->pid != 0 && task->parent != curr_task) {
   125ea:	8b 45 e8             	mov    -0x18(%ebp),%eax
   125ed:	8b 40 08             	mov    0x8(%eax),%eax
   125f0:	85 c0                	test   %eax,%eax
   125f2:	74 0b                	je     125ff <sys_wait+0x4d>
   125f4:	8b 45 e8             	mov    -0x18(%ebp),%eax
   125f7:	8b 40 04             	mov    0x4(%eax),%eax
   125fa:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   125fd:	75 41                	jne    12640 <sys_wait+0x8e>
        continue;
      }
      // 3.找到一个子进程，判断是否为僵尸态
      if (task->state == TASK_ZOMBIE) {  // 僵尸态，进行资源回收
   125ff:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12602:	8b 00                	mov    (%eax),%eax
   12604:	83 f8 06             	cmp    $0x6,%eax
   12607:	75 38                	jne    12641 <sys_wait+0x8f>
        int pid = task->pid;
   12609:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1260c:	8b 40 08             	mov    0x8(%eax),%eax
   1260f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        *status = task->status;
   12612:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12615:	8b 50 0c             	mov    0xc(%eax),%edx
   12618:	8b 45 08             	mov    0x8(%ebp),%eax
   1261b:	89 10                	mov    %edx,(%eax)

        //释放任务
        task_uninit(task);
   1261d:	83 ec 0c             	sub    $0xc,%esp
   12620:	ff 75 e8             	push   -0x18(%ebp)
   12623:	e8 33 f0 ff ff       	call   1165b <task_uninit>
   12628:	83 c4 10             	add    $0x10,%esp

        // TODO:解锁
        mutex_unlock(&task_table_lock);
   1262b:	83 ec 0c             	sub    $0xc,%esp
   1262e:	68 c0 89 03 00       	push   $0x389c0
   12633:	e8 80 2e 00 00       	call   154b8 <mutex_unlock>
   12638:	83 c4 10             	add    $0x10,%esp

        // 3.4返回该进程的pid
        return pid;
   1263b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1263e:	eb 52                	jmp    12692 <sys_wait+0xe0>
        continue;
   12640:	90                   	nop
    for (int i = 0; i < TASK_COUNT; ++i) {
   12641:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12645:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   12649:	7e 8e                	jle    125d9 <sys_wait+0x27>
      }
    }

    // TODO:解锁
    mutex_unlock(&task_table_lock);
   1264b:	83 ec 0c             	sub    $0xc,%esp
   1264e:	68 c0 89 03 00       	push   $0x389c0
   12653:	e8 60 2e 00 00       	call   154b8 <mutex_unlock>
   12658:	83 c4 10             	add    $0x10,%esp

    // 4.未找到僵尸态的子进程，则当前进程进入阻塞状态
    // TODO:加锁
    idt_state_t state = idt_enter_protection();
   1265b:	e8 40 0c 00 00       	call   132a0 <idt_enter_protection>
   12660:	89 45 ec             	mov    %eax,-0x14(%ebp)

    task_set_unready(curr_task);
   12663:	83 ec 0c             	sub    $0xc,%esp
   12666:	ff 75 f0             	push   -0x10(%ebp)
   12669:	e8 b6 f2 ff ff       	call   11924 <task_set_unready>
   1266e:	83 c4 10             	add    $0x10,%esp
    curr_task->state = TASK_WAITTING;
   12671:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12674:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
    task_switch();
   1267a:	e8 1f f3 ff ff       	call   1199e <task_switch>

    // TODO:解锁
    idt_leave_protection(state);
   1267f:	83 ec 0c             	sub    $0xc,%esp
   12682:	ff 75 ec             	push   -0x14(%ebp)
   12685:	e8 2e 0c 00 00       	call   132b8 <idt_leave_protection>
   1268a:	83 c4 10             	add    $0x10,%esp
  for (;;) {
   1268d:	e9 2e ff ff ff       	jmp    125c0 <sys_wait+0xe>
  }
  return 0;
   12692:	c9                   	leave  
   12693:	c3                   	ret    

00012694 <gate_desc_set>:
 * @param selector 门描述符对应的处理程序所在的段的选择子
 * @param offset 门描述符对应的处理程序相对于所在段的偏移量
 * @param attr 门描述符的属性
 */
void gate_desc_set(gate_desc_t *desc, const uint16_t selector, const uint32_t offset,
                          const uint16_t attr) {
   12694:	55                   	push   %ebp
   12695:	89 e5                	mov    %esp,%ebp
   12697:	83 ec 08             	sub    $0x8,%esp
   1269a:	8b 55 0c             	mov    0xc(%ebp),%edx
   1269d:	8b 45 14             	mov    0x14(%ebp),%eax
   126a0:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   126a4:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
  // 1.初始化偏移量
  desc->offset15_0 = offset & 0xffff;
   126a8:	8b 45 10             	mov    0x10(%ebp),%eax
   126ab:	89 c2                	mov    %eax,%edx
   126ad:	8b 45 08             	mov    0x8(%ebp),%eax
   126b0:	66 89 10             	mov    %dx,(%eax)
  desc->offset31_16 = (offset >> 16) & 0xffff;
   126b3:	8b 45 10             	mov    0x10(%ebp),%eax
   126b6:	c1 e8 10             	shr    $0x10,%eax
   126b9:	89 c2                	mov    %eax,%edx
   126bb:	8b 45 08             	mov    0x8(%ebp),%eax
   126be:	66 89 50 06          	mov    %dx,0x6(%eax)

  // 2.初始化选择子
  desc->selector = selector;
   126c2:	8b 45 08             	mov    0x8(%ebp),%eax
   126c5:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   126c9:	66 89 50 02          	mov    %dx,0x2(%eax)

  // 3.初始化属性位
  desc->attr = attr;
   126cd:	8b 45 08             	mov    0x8(%ebp),%eax
   126d0:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   126d4:	66 89 50 04          	mov    %dx,0x4(%eax)
   126d8:	90                   	nop
   126d9:	c9                   	leave  
   126da:	c3                   	ret    

000126db <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   126db:	55                   	push   %ebp
   126dc:	89 e5                	mov    %esp,%ebp
   126de:	83 ec 10             	sub    $0x10,%esp
  gdt.start31_16 = (start >> 16) & 0xffff;  // 初始化GDT地址的高16位
   126e1:	8b 45 08             	mov    0x8(%ebp),%eax
   126e4:	c1 e8 10             	shr    $0x10,%eax
   126e7:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  gdt.start15_0 = start & 0xffff;           // 初始化GDT地址的低16位
   126eb:	8b 45 08             	mov    0x8(%ebp),%eax
   126ee:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   126f2:	8b 45 0c             	mov    0xc(%ebp),%eax
   126f5:	83 e8 01             	sub    $0x1,%eax
  gdt.limit =
   126f8:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   126fc:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   12700:	90                   	nop
   12701:	c9                   	leave  
   12702:	c3                   	ret    

00012703 <segment_desc_set>:
 *                 即2的13次方个段，也就是8192
 * @param base 该段在内存中的真实段基址
 * @param limit 该段的段界限，是一个偏移量，表示段中最大的偏移界限
 * @param attr 该段的属性位
 */
void segment_desc_set(uint16_t selector,  uint32_t base, uint32_t limit, uint16_t attr) {
   12703:	55                   	push   %ebp
   12704:	89 e5                	mov    %esp,%ebp
   12706:	83 ec 18             	sub    $0x18,%esp
   12709:	8b 55 08             	mov    0x8(%ebp),%edx
   1270c:	8b 45 14             	mov    0x14(%ebp),%eax
   1270f:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
   12713:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    //1. 获取该段描述符在内存中的起始地址，selector >> 3 取出3~15位才是其在全局描述符中的下标
    segment_desc_t *desc = gdt_table + (selector >> 3);
   12717:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1271b:	66 c1 e8 03          	shr    $0x3,%ax
   1271f:	0f b7 c0             	movzwl %ax,%eax
   12722:	c1 e0 03             	shl    $0x3,%eax
   12725:	05 e0 8b 03 00       	add    $0x38be0,%eax
   1272a:	89 45 fc             	mov    %eax,-0x4(%ebp)

    //2. 设置段基地址
    desc->base15_0 = (uint16_t)base;
   1272d:	8b 45 0c             	mov    0xc(%ebp),%eax
   12730:	89 c2                	mov    %eax,%edx
   12732:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12735:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (uint8_t)(base >> 16);
   12739:	8b 45 0c             	mov    0xc(%ebp),%eax
   1273c:	c1 e8 10             	shr    $0x10,%eax
   1273f:	89 c2                	mov    %eax,%edx
   12741:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12744:	88 50 04             	mov    %dl,0x4(%eax)
    desc->base31_24 = (uint8_t)(base >> 24);
   12747:	8b 45 0c             	mov    0xc(%ebp),%eax
   1274a:	c1 e8 18             	shr    $0x18,%eax
   1274d:	89 c2                	mov    %eax,%edx
   1274f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12752:	88 50 07             	mov    %dl,0x7(%eax)

    //3. 设置段界限
    if (limit > 0xfffff) { //limit大于了20位能表示的最大值
   12755:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   1275c:	76 1d                	jbe    1277b <segment_desc_set+0x78>
        //将limit的粒度设置为 4kb，即将属性位G置1
        desc->attr |= 0x8000;
   1275e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12761:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   12765:	66 0d 00 80          	or     $0x8000,%ax
   12769:	89 c2                	mov    %eax,%edx
   1276b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1276e:	66 89 50 05          	mov    %dx,0x5(%eax)

        //将limit改成以 4kb 为单位
        limit /= (4 * 1024);
   12772:	8b 45 10             	mov    0x10(%ebp),%eax
   12775:	c1 e8 0c             	shr    $0xc,%eax
   12778:	89 45 10             	mov    %eax,0x10(%ebp)

    }
    desc->limit15_0 = (uint16_t)limit;
   1277b:	8b 45 10             	mov    0x10(%ebp),%eax
   1277e:	89 c2                	mov    %eax,%edx
   12780:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12783:	66 89 10             	mov    %dx,(%eax)
    desc->attr |= ((uint16_t)(limit >> 8) & 0x0f00); //将limit高4位赋值到attr的8~11位(段界限的高4位)
   12786:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12789:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   1278d:	89 c2                	mov    %eax,%edx
   1278f:	8b 45 10             	mov    0x10(%ebp),%eax
   12792:	c1 e8 08             	shr    $0x8,%eax
   12795:	66 25 00 0f          	and    $0xf00,%ax
   12799:	09 d0                	or     %edx,%eax
   1279b:	89 c2                	mov    %eax,%edx
   1279d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   127a0:	66 89 50 05          	mov    %dx,0x5(%eax)

    //4.设置属性位
    desc->attr |= attr & 0xf0ff;
   127a4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   127a7:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   127ab:	89 c2                	mov    %eax,%edx
   127ad:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   127b1:	80 e4 f0             	and    $0xf0,%ah
   127b4:	09 d0                	or     %edx,%eax
   127b6:	89 c2                	mov    %eax,%edx
   127b8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   127bb:	66 89 50 05          	mov    %dx,0x5(%eax)


}
   127bf:	90                   	nop
   127c0:	c9                   	leave  
   127c1:	c3                   	ret    

000127c2 <gdt_init>:

/**
 * @brief  初始化GDT
 * 
 */
void gdt_init(void) {
   127c2:	55                   	push   %ebp
   127c3:	89 e5                	mov    %esp,%ebp
   127c5:	83 ec 18             	sub    $0x18,%esp
    //TODO:暂时将所有段都初始化为0
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   127c8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   127cf:	eb 1c                	jmp    127ed <gdt_init+0x2b>
        segment_desc_set(i << 3, 0, 0, 0);
   127d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   127d4:	c1 e0 03             	shl    $0x3,%eax
   127d7:	0f b7 c0             	movzwl %ax,%eax
   127da:	6a 00                	push   $0x0
   127dc:	6a 00                	push   $0x0
   127de:	6a 00                	push   $0x0
   127e0:	50                   	push   %eax
   127e1:	e8 1d ff ff ff       	call   12703 <segment_desc_set>
   127e6:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; ++i) {
   127e9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   127ed:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   127f4:	7e db                	jle    127d1 <gdt_init+0xf>
        is_alloc[i] == 0;
    }

    //使用平坦模型，即段基址为0, 段界限直接用最大值，界限粒度为4kb，即段大小为4GB
    //1.设置内核的数据段,并将其标记
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff,
   127f6:	68 92 40 00 00       	push   $0x4092
   127fb:	6a ff                	push   $0xffffffff
   127fd:	6a 00                	push   $0x0
   127ff:	6a 10                	push   $0x10
   12801:	e8 fd fe ff ff       	call   12703 <segment_desc_set>
   12806:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL | 
                    SEG_ATTR_TYPE_DATA | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_DS >> 3] = 1;
   12809:	c6 05 e2 8b 04 00 01 	movb   $0x1,0x48be2

    //2.设置内核的代码段，并将其标记
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff,
   12810:	68 9a 40 00 00       	push   $0x409a
   12815:	6a ff                	push   $0xffffffff
   12817:	6a 00                	push   $0x0
   12819:	6a 08                	push   $0x8
   1281b:	e8 e3 fe ff ff       	call   12703 <segment_desc_set>
   12820:	83 c4 10             	add    $0x10,%esp
                    SEG_ATTR_P | SEG_ATTR_DPL_0 | SEG_ATTR_S_NORMAL |
                    SEG_ATTR_TYPE_CODE | SEG_ATTR_TYPE_RW | SEG_ATTR_D_OR_B);

    is_alloc[KERNEL_SELECTOR_CS >> 3] = 1;
   12823:	c6 05 e1 8b 04 00 01 	movb   $0x1,0x48be1

    //3.初始化调用门描述符，调用门的 DPL >= CPL = 3 && DPL >= RPL = 0, 若目标代码段的特权级更高则发生特权级转换
    gate_desc_set((gate_desc_t*)(gdt_table + (SYSCALL_SELECTOR >> 3)), 
   1282a:	ba ca 02 01 00       	mov    $0x102ca,%edx
   1282f:	b8 f8 8b 03 00       	mov    $0x38bf8,%eax
   12834:	68 05 ec 00 00       	push   $0xec05
   12839:	52                   	push   %edx
   1283a:	6a 08                	push   $0x8
   1283c:	50                   	push   %eax
   1283d:	e8 52 fe ff ff       	call   12694 <gate_desc_set>
   12842:	83 c4 10             	add    $0x10,%esp
        KERNEL_SELECTOR_CS, (uint32_t)exception_handler_syscall, 
        GATE_ATTR_P | GATE_ATTR_DPL_3 | GATE_TYPE_SYSCALL | SYSCALL_PARAM_COUNT);
    
    is_alloc[SYSCALL_SELECTOR >> 3] = 1;
   12845:	c6 05 e3 8b 04 00 01 	movb   $0x1,0x48be3


    //4.加载新的GDT表
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   1284c:	b8 e0 8b 03 00       	mov    $0x38be0,%eax
   12851:	83 ec 08             	sub    $0x8,%esp
   12854:	68 00 00 01 00       	push   $0x10000
   12859:	50                   	push   %eax
   1285a:	e8 7c fe ff ff       	call   126db <lgdt>
   1285f:	83 c4 10             	add    $0x10,%esp

    //4.初始化互斥锁
    mutex_init(&mutex);
   12862:	83 ec 0c             	sub    $0xc,%esp
   12865:	68 e0 ab 04 00       	push   $0x4abe0
   1286a:	e8 6b 2b 00 00       	call   153da <mutex_init>
   1286f:	83 c4 10             	add    $0x10,%esp
}
   12872:	90                   	nop
   12873:	c9                   	leave  
   12874:	c3                   	ret    

00012875 <gdt_alloc_desc>:
/**
 * @brief  寻找gdt中未赋值的段描述符空间
 * 
 * @return int 返回的找到的描述符的选择子
 */
int gdt_alloc_desc() {
   12875:	55                   	push   %ebp
   12876:	89 e5                	mov    %esp,%ebp
   12878:	83 ec 18             	sub    $0x18,%esp

    mutex_lock(&mutex);//TODO:加锁
   1287b:	83 ec 0c             	sub    $0xc,%esp
   1287e:	68 e0 ab 04 00       	push   $0x4abe0
   12883:	e8 9f 2b 00 00       	call   15427 <mutex_lock>
   12888:	83 c4 10             	add    $0x10,%esp

    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   1288b:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   12892:	eb 36                	jmp    128ca <gdt_alloc_desc+0x55>
        if (is_alloc[i] == 0)  {
   12894:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12897:	05 e0 8b 04 00       	add    $0x48be0,%eax
   1289c:	0f b6 00             	movzbl (%eax),%eax
   1289f:	84 c0                	test   %al,%al
   128a1:	75 23                	jne    128c6 <gdt_alloc_desc+0x51>
            is_alloc[i] = 1;
   128a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   128a6:	05 e0 8b 04 00       	add    $0x48be0,%eax
   128ab:	c6 00 01             	movb   $0x1,(%eax)

            mutex_unlock(&mutex);//TODO:解锁
   128ae:	83 ec 0c             	sub    $0xc,%esp
   128b1:	68 e0 ab 04 00       	push   $0x4abe0
   128b6:	e8 fd 2b 00 00       	call   154b8 <mutex_unlock>
   128bb:	83 c4 10             	add    $0x10,%esp
            return (i << 3);
   128be:	8b 45 f4             	mov    -0xc(%ebp),%eax
   128c1:	c1 e0 03             	shl    $0x3,%eax
   128c4:	eb 22                	jmp    128e8 <gdt_alloc_desc+0x73>
    for (int i = 1; i < GDT_TABLE_SIZE; ++i) {
   128c6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   128ca:	81 7d f4 ff 1f 00 00 	cmpl   $0x1fff,-0xc(%ebp)
   128d1:	7e c1                	jle    12894 <gdt_alloc_desc+0x1f>
        }
    }

    mutex_unlock(&mutex);//TODO:解锁
   128d3:	83 ec 0c             	sub    $0xc,%esp
   128d6:	68 e0 ab 04 00       	push   $0x4abe0
   128db:	e8 d8 2b 00 00       	call   154b8 <mutex_unlock>
   128e0:	83 c4 10             	add    $0x10,%esp
    return -1;
   128e3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   128e8:	c9                   	leave  
   128e9:	c3                   	ret    

000128ea <gdt_free>:
/**
 * @brief 释放gdt表项
 * 
 * @param selector 需要释放的表项对应的选择子
 */
void gdt_free(uint16_t selector) {
   128ea:	55                   	push   %ebp
   128eb:	89 e5                	mov    %esp,%ebp
   128ed:	83 ec 14             	sub    $0x14,%esp
   128f0:	8b 45 08             	mov    0x8(%ebp),%eax
   128f3:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    uint16_t index = selector >> 3;
   128f7:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   128fb:	66 c1 e8 03          	shr    $0x3,%ax
   128ff:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    is_alloc[index] = 0;
   12903:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
   12907:	c6 80 e0 8b 04 00 00 	movb   $0x0,0x48be0(%eax)
}
   1290e:	90                   	nop
   1290f:	c9                   	leave  
   12910:	c3                   	ret    

00012911 <cli>:
static inline void cli(void) { __asm__ __volatile__("cli"); }
   12911:	55                   	push   %ebp
   12912:	89 e5                	mov    %esp,%ebp
   12914:	fa                   	cli    
   12915:	90                   	nop
   12916:	5d                   	pop    %ebp
   12917:	c3                   	ret    

00012918 <sti>:
static inline void sti(void) { __asm__ __volatile__("sti"); }
   12918:	55                   	push   %ebp
   12919:	89 e5                	mov    %esp,%ebp
   1291b:	fb                   	sti    
   1291c:	90                   	nop
   1291d:	5d                   	pop    %ebp
   1291e:	c3                   	ret    

0001291f <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   1291f:	55                   	push   %ebp
   12920:	89 e5                	mov    %esp,%ebp
   12922:	f4                   	hlt    
   12923:	90                   	nop
   12924:	5d                   	pop    %ebp
   12925:	c3                   	ret    

00012926 <inb>:
static inline uint8_t inb(uint16_t port) {
   12926:	55                   	push   %ebp
   12927:	89 e5                	mov    %esp,%ebp
   12929:	83 ec 14             	sub    $0x14,%esp
   1292c:	8b 45 08             	mov    0x8(%ebp),%eax
   1292f:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   12933:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   12937:	89 c2                	mov    %eax,%edx
   12939:	ec                   	in     (%dx),%al
   1293a:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   1293d:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   12941:	c9                   	leave  
   12942:	c3                   	ret    

00012943 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   12943:	55                   	push   %ebp
   12944:	89 e5                	mov    %esp,%ebp
   12946:	83 ec 08             	sub    $0x8,%esp
   12949:	8b 45 08             	mov    0x8(%ebp),%eax
   1294c:	8b 55 0c             	mov    0xc(%ebp),%edx
   1294f:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   12953:	89 d0                	mov    %edx,%eax
   12955:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   12958:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1295c:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   12960:	ee                   	out    %al,(%dx)
}
   12961:	90                   	nop
   12962:	c9                   	leave  
   12963:	c3                   	ret    

00012964 <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   12964:	55                   	push   %ebp
   12965:	89 e5                	mov    %esp,%ebp
   12967:	83 ec 10             	sub    $0x10,%esp
  idt.start31_16 = (start >> 16) & 0xffff;  // 初始化IDT地址的高16位
   1296a:	8b 45 08             	mov    0x8(%ebp),%eax
   1296d:	c1 e8 10             	shr    $0x10,%eax
   12970:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  idt.start15_0 = start & 0xffff;           // 初始化IDT地址的低16位
   12974:	8b 45 08             	mov    0x8(%ebp),%eax
   12977:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      size -
   1297b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1297e:	83 e8 01             	sub    $0x1,%eax
  idt.limit =
   12981:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  __asm__ __volatile__(
   12985:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   12989:	90                   	nop
   1298a:	c9                   	leave  
   1298b:	c3                   	ret    

0001298c <read_cr2>:
static inline uint32_t read_cr2(void) {
   1298c:	55                   	push   %ebp
   1298d:	89 e5                	mov    %esp,%ebp
   1298f:	83 ec 10             	sub    $0x10,%esp
  __asm__ __volatile__("mov %%cr2, %[v]" : [v] "=r"(cr2));
   12992:	0f 20 d0             	mov    %cr2,%eax
   12995:	89 45 fc             	mov    %eax,-0x4(%ebp)
  return cr2;
   12998:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1299b:	c9                   	leave  
   1299c:	c3                   	ret    

0001299d <read_eflags>:
/**
 * @brief  读取当前cpu的eflags寄存器
 * 
 * @return uint32_t 放回eflags的值
 */
static inline uint32_t read_eflags(void) {
   1299d:	55                   	push   %ebp
   1299e:	89 e5                	mov    %esp,%ebp
   129a0:	83 ec 10             	sub    $0x10,%esp
  uint32_t eflags;
  //pushf 压入eflags的值到栈中
  __asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   129a3:	9c                   	pushf  
   129a4:	58                   	pop    %eax
   129a5:	89 45 fc             	mov    %eax,-0x4(%ebp)
  
  return eflags;
   129a8:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   129ab:	c9                   	leave  
   129ac:	c3                   	ret    

000129ad <write_eflags>:
/**
 * @brief  将状态state写入eflags寄存器
 * 
 * @param state 
 */
static inline void write_eflags(uint32_t state) {
   129ad:	55                   	push   %ebp
   129ae:	89 e5                	mov    %esp,%ebp
  __asm__ __volatile__("push %%eax\n\tpopf"::"a"(state));
   129b0:	8b 45 08             	mov    0x8(%ebp),%eax
   129b3:	50                   	push   %eax
   129b4:	9d                   	popf   
}
   129b5:	90                   	nop
   129b6:	5d                   	pop    %ebp
   129b7:	c3                   	ret    

000129b8 <print_exception_fram>:
/**
 * @brief  打印异常栈帧信息
 * 
 * @param frame 栈帧
 */
static void print_exception_fram(const exception_frame_t *frame) {
   129b8:	55                   	push   %ebp
   129b9:	89 e5                	mov    %esp,%ebp
   129bb:	57                   	push   %edi
   129bc:	56                   	push   %esi
   129bd:	53                   	push   %ebx
   129be:	83 ec 2c             	sub    $0x2c,%esp
  uint32_t ss, esp;
  if (frame->cs & 0x3) {  //cpl不为0，因为只设置了两种特权级，所以当前cpl为3，即用户程序异常
   129c1:	8b 45 08             	mov    0x8(%ebp),%eax
   129c4:	8b 40 3c             	mov    0x3c(%eax),%eax
   129c7:	83 e0 03             	and    $0x3,%eax
   129ca:	85 c0                	test   %eax,%eax
   129cc:	74 14                	je     129e2 <print_exception_fram+0x2a>
    ss = frame->ss3;
   129ce:	8b 45 08             	mov    0x8(%ebp),%eax
   129d1:	8b 40 48             	mov    0x48(%eax),%eax
   129d4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    esp = frame->esp3;
   129d7:	8b 45 08             	mov    0x8(%ebp),%eax
   129da:	8b 40 44             	mov    0x44(%eax),%eax
   129dd:	89 45 e0             	mov    %eax,-0x20(%ebp)
   129e0:	eb 12                	jmp    129f4 <print_exception_fram+0x3c>
  } else {  //cpl为0，即内核异常
    ss = frame->ds; //内核ss与ds相同
   129e2:	8b 45 08             	mov    0x8(%ebp),%eax
   129e5:	8b 40 0c             	mov    0xc(%eax),%eax
   129e8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    esp = frame->esp;
   129eb:	8b 45 08             	mov    0x8(%ebp),%eax
   129ee:	8b 40 1c             	mov    0x1c(%eax),%eax
   129f1:	89 45 e0             	mov    %eax,-0x20(%ebp)
  }

  log_printf("------------------------stack frame info---------------------\n");
   129f4:	83 ec 0c             	sub    $0xc,%esp
   129f7:	68 14 6d 01 00       	push   $0x16d14
   129fc:	e8 08 3e 00 00       	call   16809 <log_printf>
   12a01:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ:\t\t%d\nerror code:\t%d\n", frame->num, frame->error_code);
   12a04:	8b 45 08             	mov    0x8(%ebp),%eax
   12a07:	8b 50 34             	mov    0x34(%eax),%edx
   12a0a:	8b 45 08             	mov    0x8(%ebp),%eax
   12a0d:	8b 40 30             	mov    0x30(%eax),%eax
   12a10:	83 ec 04             	sub    $0x4,%esp
   12a13:	52                   	push   %edx
   12a14:	50                   	push   %eax
   12a15:	68 53 6d 01 00       	push   $0x16d53
   12a1a:	e8 ea 3d 00 00       	call   16809 <log_printf>
   12a1f:	83 c4 10             	add    $0x10,%esp
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d\n", 
    //TODO:SS暂时没法获取，先用ds替代，之后再进行获取
    frame->cs, frame->ds, ss, frame->es, frame->fs, frame->gs
   12a22:	8b 45 08             	mov    0x8(%ebp),%eax
   12a25:	8b 30                	mov    (%eax),%esi
   12a27:	8b 45 08             	mov    0x8(%ebp),%eax
   12a2a:	8b 58 04             	mov    0x4(%eax),%ebx
   12a2d:	8b 45 08             	mov    0x8(%ebp),%eax
   12a30:	8b 48 08             	mov    0x8(%eax),%ecx
   12a33:	8b 45 08             	mov    0x8(%ebp),%eax
   12a36:	8b 50 0c             	mov    0xc(%eax),%edx
   12a39:	8b 45 08             	mov    0x8(%ebp),%eax
   12a3c:	8b 40 3c             	mov    0x3c(%eax),%eax
  log_printf("CS:\t\t%d\nDS:\t\t%d\nSS:\t\t%d\nES:\t\t%d\nFS:\t\t%d\nGS:\t\t%d\n", 
   12a3f:	83 ec 04             	sub    $0x4,%esp
   12a42:	56                   	push   %esi
   12a43:	53                   	push   %ebx
   12a44:	51                   	push   %ecx
   12a45:	ff 75 e4             	push   -0x1c(%ebp)
   12a48:	52                   	push   %edx
   12a49:	50                   	push   %eax
   12a4a:	68 6c 6d 01 00       	push   $0x16d6c
   12a4f:	e8 b5 3d 00 00       	call   16809 <log_printf>
   12a54:	83 c4 20             	add    $0x20,%esp
              "ESI:\t\t0x%x\n"
              "EDI:\t\t0x%x\n"
              "EBP:\t\t0x%x\n"
              "ESP:\t\t0x%x\n", 
              frame->eax, frame->ebx, frame->ecx, frame->edx,
              frame->esi, frame->edi, frame->ebp, esp 
   12a57:	8b 45 08             	mov    0x8(%ebp),%eax
   12a5a:	8b 40 18             	mov    0x18(%eax),%eax
   12a5d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   12a60:	8b 45 08             	mov    0x8(%ebp),%eax
   12a63:	8b 78 10             	mov    0x10(%eax),%edi
   12a66:	8b 45 08             	mov    0x8(%ebp),%eax
   12a69:	8b 70 14             	mov    0x14(%eax),%esi
              frame->eax, frame->ebx, frame->ecx, frame->edx,
   12a6c:	8b 45 08             	mov    0x8(%ebp),%eax
   12a6f:	8b 58 24             	mov    0x24(%eax),%ebx
   12a72:	8b 45 08             	mov    0x8(%ebp),%eax
   12a75:	8b 48 28             	mov    0x28(%eax),%ecx
   12a78:	8b 45 08             	mov    0x8(%ebp),%eax
   12a7b:	8b 50 20             	mov    0x20(%eax),%edx
   12a7e:	8b 45 08             	mov    0x8(%ebp),%eax
   12a81:	8b 40 2c             	mov    0x2c(%eax),%eax
  log_printf( 
   12a84:	83 ec 0c             	sub    $0xc,%esp
   12a87:	ff 75 e0             	push   -0x20(%ebp)
   12a8a:	ff 75 d4             	push   -0x2c(%ebp)
   12a8d:	57                   	push   %edi
   12a8e:	56                   	push   %esi
   12a8f:	53                   	push   %ebx
   12a90:	51                   	push   %ecx
   12a91:	52                   	push   %edx
   12a92:	50                   	push   %eax
   12a93:	68 a0 6d 01 00       	push   $0x16da0
   12a98:	e8 6c 3d 00 00       	call   16809 <log_printf>
   12a9d:	83 c4 30             	add    $0x30,%esp
              );

  log_printf("EIP:\t\t0x%x\nEFLAGS:\t\t0x%x\n", frame->eip, frame->eflags);
   12aa0:	8b 45 08             	mov    0x8(%ebp),%eax
   12aa3:	8b 50 40             	mov    0x40(%eax),%edx
   12aa6:	8b 45 08             	mov    0x8(%ebp),%eax
   12aa9:	8b 40 38             	mov    0x38(%eax),%eax
   12aac:	83 ec 04             	sub    $0x4,%esp
   12aaf:	52                   	push   %edx
   12ab0:	50                   	push   %eax
   12ab1:	68 f9 6d 01 00       	push   $0x16df9
   12ab6:	e8 4e 3d 00 00       	call   16809 <log_printf>
   12abb:	83 c4 10             	add    $0x10,%esp
}
   12abe:	90                   	nop
   12abf:	8d 65 f4             	lea    -0xc(%ebp),%esp
   12ac2:	5b                   	pop    %ebx
   12ac3:	5e                   	pop    %esi
   12ac4:	5f                   	pop    %edi
   12ac5:	5d                   	pop    %ebp
   12ac6:	c3                   	ret    

00012ac7 <do_default_handler>:
 *
 * @param message 异常信息
 * @param fram  异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
static void do_default_handler(const exception_frame_t *frame,
                               const char *message) {
   12ac7:	55                   	push   %ebp
   12ac8:	89 e5                	mov    %esp,%ebp
   12aca:	83 ec 08             	sub    $0x8,%esp

  log_printf("---------------------------------------------------\n");
   12acd:	83 ec 0c             	sub    $0xc,%esp
   12ad0:	68 14 6e 01 00       	push   $0x16e14
   12ad5:	e8 2f 3d 00 00       	call   16809 <log_printf>
   12ada:	83 c4 10             	add    $0x10,%esp
  log_printf("IRQ/Exception happend: %s\n", message);
   12add:	83 ec 08             	sub    $0x8,%esp
   12ae0:	ff 75 0c             	push   0xc(%ebp)
   12ae3:	68 49 6e 01 00       	push   $0x16e49
   12ae8:	e8 1c 3d 00 00       	call   16809 <log_printf>
   12aed:	83 c4 10             	add    $0x10,%esp
  print_exception_fram(frame);
   12af0:	83 ec 0c             	sub    $0xc,%esp
   12af3:	ff 75 08             	push   0x8(%ebp)
   12af6:	e8 bd fe ff ff       	call   129b8 <print_exception_fram>
   12afb:	83 c4 10             	add    $0x10,%esp
                              
  
  for (;;) {
    hlt();
   12afe:	e8 1c fe ff ff       	call   1291f <hlt>
   12b03:	eb f9                	jmp    12afe <do_default_handler+0x37>

00012b05 <do_handler_unknown>:

/**
 * @brief   对没有针对性处理程序的异常进行处理
 * @param frame 异常发生后压入的寄存器信息以及错误代码所组成的栈帧
 */
void do_handler_unknown(const exception_frame_t *frame) {
   12b05:	55                   	push   %ebp
   12b06:	89 e5                	mov    %esp,%ebp
   12b08:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "unknown exception");
   12b0b:	83 ec 08             	sub    $0x8,%esp
   12b0e:	68 64 6e 01 00       	push   $0x16e64
   12b13:	ff 75 08             	push   0x8(%ebp)
   12b16:	e8 ac ff ff ff       	call   12ac7 <do_default_handler>
   12b1b:	83 c4 10             	add    $0x10,%esp
}
   12b1e:	90                   	nop
   12b1f:	c9                   	leave  
   12b20:	c3                   	ret    

00012b21 <do_handler_divider>:
/**
 * @brief  除0异常
 *
 * @param frame 异常栈帧
 */
void do_handler_divider(const exception_frame_t *frame) {
   12b21:	55                   	push   %ebp
   12b22:	89 e5                	mov    %esp,%ebp
   12b24:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "divider exception");
   12b27:	83 ec 08             	sub    $0x8,%esp
   12b2a:	68 76 6e 01 00       	push   $0x16e76
   12b2f:	ff 75 08             	push   0x8(%ebp)
   12b32:	e8 90 ff ff ff       	call   12ac7 <do_default_handler>
   12b37:	83 c4 10             	add    $0x10,%esp
}
   12b3a:	90                   	nop
   12b3b:	c9                   	leave  
   12b3c:	c3                   	ret    

00012b3d <do_handler_debug>:

void do_handler_debug(const exception_frame_t *frame) {
   12b3d:	55                   	push   %ebp
   12b3e:	89 e5                	mov    %esp,%ebp
   12b40:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "debug exception");
   12b43:	83 ec 08             	sub    $0x8,%esp
   12b46:	68 88 6e 01 00       	push   $0x16e88
   12b4b:	ff 75 08             	push   0x8(%ebp)
   12b4e:	e8 74 ff ff ff       	call   12ac7 <do_default_handler>
   12b53:	83 c4 10             	add    $0x10,%esp
}
   12b56:	90                   	nop
   12b57:	c9                   	leave  
   12b58:	c3                   	ret    

00012b59 <do_handler_nmi>:

void do_handler_nmi(const exception_frame_t *frame) {
   12b59:	55                   	push   %ebp
   12b5a:	89 e5                	mov    %esp,%ebp
   12b5c:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "nmi exception");
   12b5f:	83 ec 08             	sub    $0x8,%esp
   12b62:	68 98 6e 01 00       	push   $0x16e98
   12b67:	ff 75 08             	push   0x8(%ebp)
   12b6a:	e8 58 ff ff ff       	call   12ac7 <do_default_handler>
   12b6f:	83 c4 10             	add    $0x10,%esp
}
   12b72:	90                   	nop
   12b73:	c9                   	leave  
   12b74:	c3                   	ret    

00012b75 <do_handler_breakpoint>:
void do_handler_breakpoint(const exception_frame_t *frame) {
   12b75:	55                   	push   %ebp
   12b76:	89 e5                	mov    %esp,%ebp
   12b78:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "breakpoint exception");
   12b7b:	83 ec 08             	sub    $0x8,%esp
   12b7e:	68 a6 6e 01 00       	push   $0x16ea6
   12b83:	ff 75 08             	push   0x8(%ebp)
   12b86:	e8 3c ff ff ff       	call   12ac7 <do_default_handler>
   12b8b:	83 c4 10             	add    $0x10,%esp
}
   12b8e:	90                   	nop
   12b8f:	c9                   	leave  
   12b90:	c3                   	ret    

00012b91 <do_handler_overflow>:
void do_handler_overflow(const exception_frame_t *frame) {
   12b91:	55                   	push   %ebp
   12b92:	89 e5                	mov    %esp,%ebp
   12b94:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "overflow exception");
   12b97:	83 ec 08             	sub    $0x8,%esp
   12b9a:	68 bb 6e 01 00       	push   $0x16ebb
   12b9f:	ff 75 08             	push   0x8(%ebp)
   12ba2:	e8 20 ff ff ff       	call   12ac7 <do_default_handler>
   12ba7:	83 c4 10             	add    $0x10,%esp
}
   12baa:	90                   	nop
   12bab:	c9                   	leave  
   12bac:	c3                   	ret    

00012bad <do_handler_bound_range>:
void do_handler_bound_range(const exception_frame_t *frame) {
   12bad:	55                   	push   %ebp
   12bae:	89 e5                	mov    %esp,%ebp
   12bb0:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "bound_range exception");
   12bb3:	83 ec 08             	sub    $0x8,%esp
   12bb6:	68 ce 6e 01 00       	push   $0x16ece
   12bbb:	ff 75 08             	push   0x8(%ebp)
   12bbe:	e8 04 ff ff ff       	call   12ac7 <do_default_handler>
   12bc3:	83 c4 10             	add    $0x10,%esp
}
   12bc6:	90                   	nop
   12bc7:	c9                   	leave  
   12bc8:	c3                   	ret    

00012bc9 <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(const exception_frame_t *frame) {
   12bc9:	55                   	push   %ebp
   12bca:	89 e5                	mov    %esp,%ebp
   12bcc:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_opcode exception");
   12bcf:	83 ec 08             	sub    $0x8,%esp
   12bd2:	68 e4 6e 01 00       	push   $0x16ee4
   12bd7:	ff 75 08             	push   0x8(%ebp)
   12bda:	e8 e8 fe ff ff       	call   12ac7 <do_default_handler>
   12bdf:	83 c4 10             	add    $0x10,%esp
}
   12be2:	90                   	nop
   12be3:	c9                   	leave  
   12be4:	c3                   	ret    

00012be5 <do_handler_device_unavailable>:
void do_handler_device_unavailable(const exception_frame_t *frame) {
   12be5:	55                   	push   %ebp
   12be6:	89 e5                	mov    %esp,%ebp
   12be8:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "device_unavailable exception");
   12beb:	83 ec 08             	sub    $0x8,%esp
   12bee:	68 fd 6e 01 00       	push   $0x16efd
   12bf3:	ff 75 08             	push   0x8(%ebp)
   12bf6:	e8 cc fe ff ff       	call   12ac7 <do_default_handler>
   12bfb:	83 c4 10             	add    $0x10,%esp
}
   12bfe:	90                   	nop
   12bff:	c9                   	leave  
   12c00:	c3                   	ret    

00012c01 <do_handler_double_fault>:
void do_handler_double_fault(const exception_frame_t *frame) {
   12c01:	55                   	push   %ebp
   12c02:	89 e5                	mov    %esp,%ebp
   12c04:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "double_fault exception");
   12c07:	83 ec 08             	sub    $0x8,%esp
   12c0a:	68 1a 6f 01 00       	push   $0x16f1a
   12c0f:	ff 75 08             	push   0x8(%ebp)
   12c12:	e8 b0 fe ff ff       	call   12ac7 <do_default_handler>
   12c17:	83 c4 10             	add    $0x10,%esp
}
   12c1a:	90                   	nop
   12c1b:	c9                   	leave  
   12c1c:	c3                   	ret    

00012c1d <do_handler_invalid_tss>:
void do_handler_invalid_tss(const exception_frame_t *frame) {
   12c1d:	55                   	push   %ebp
   12c1e:	89 e5                	mov    %esp,%ebp
   12c20:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "invalid_tss exception");
   12c23:	83 ec 08             	sub    $0x8,%esp
   12c26:	68 31 6f 01 00       	push   $0x16f31
   12c2b:	ff 75 08             	push   0x8(%ebp)
   12c2e:	e8 94 fe ff ff       	call   12ac7 <do_default_handler>
   12c33:	83 c4 10             	add    $0x10,%esp
}
   12c36:	90                   	nop
   12c37:	c9                   	leave  
   12c38:	c3                   	ret    

00012c39 <do_handler_segment_not_present>:
void do_handler_segment_not_present(const exception_frame_t *frame) {
   12c39:	55                   	push   %ebp
   12c3a:	89 e5                	mov    %esp,%ebp
   12c3c:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "segment_not_present exception");
   12c3f:	83 ec 08             	sub    $0x8,%esp
   12c42:	68 47 6f 01 00       	push   $0x16f47
   12c47:	ff 75 08             	push   0x8(%ebp)
   12c4a:	e8 78 fe ff ff       	call   12ac7 <do_default_handler>
   12c4f:	83 c4 10             	add    $0x10,%esp
}
   12c52:	90                   	nop
   12c53:	c9                   	leave  
   12c54:	c3                   	ret    

00012c55 <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(const exception_frame_t *frame) {
   12c55:	55                   	push   %ebp
   12c56:	89 e5                	mov    %esp,%ebp
   12c58:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "stack_segment_fault exception");
   12c5b:	83 ec 08             	sub    $0x8,%esp
   12c5e:	68 65 6f 01 00       	push   $0x16f65
   12c63:	ff 75 08             	push   0x8(%ebp)
   12c66:	e8 5c fe ff ff       	call   12ac7 <do_default_handler>
   12c6b:	83 c4 10             	add    $0x10,%esp
}
   12c6e:	90                   	nop
   12c6f:	c9                   	leave  
   12c70:	c3                   	ret    

00012c71 <do_handler_general_protection>:
void do_handler_general_protection(const exception_frame_t *frame) {
   12c71:	55                   	push   %ebp
   12c72:	89 e5                	mov    %esp,%ebp
   12c74:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------\n");
   12c77:	83 ec 0c             	sub    $0xc,%esp
   12c7a:	68 84 6f 01 00       	push   $0x16f84
   12c7f:	e8 85 3b 00 00       	call   16809 <log_printf>
   12c84:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: General Protection.\n");
   12c87:	83 ec 0c             	sub    $0xc,%esp
   12c8a:	68 a8 6f 01 00       	push   $0x16fa8
   12c8f:	e8 75 3b 00 00       	call   16809 <log_printf>
   12c94:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_EXT) {
   12c97:	8b 45 08             	mov    0x8(%ebp),%eax
   12c9a:	8b 40 34             	mov    0x34(%eax),%eax
   12c9d:	83 e0 01             	and    $0x1,%eax
   12ca0:	85 c0                	test   %eax,%eax
   12ca2:	74 12                	je     12cb6 <do_handler_general_protection+0x45>
        log_printf("the exception occurred during delivery of an "
   12ca4:	83 ec 0c             	sub    $0xc,%esp
   12ca7:	68 d4 6f 01 00       	push   $0x16fd4
   12cac:	e8 58 3b 00 00       	call   16809 <log_printf>
   12cb1:	83 c4 10             	add    $0x10,%esp
   12cb4:	eb 10                	jmp    12cc6 <do_handler_general_protection+0x55>
                "event external to the program, such as an interrupt"
                "or an earlier exception.\n");
    } else {
        log_printf("the exception occurred during delivery of a"
   12cb6:	83 ec 0c             	sub    $0xc,%esp
   12cb9:	68 50 70 01 00       	push   $0x17050
   12cbe:	e8 46 3b 00 00       	call   16809 <log_printf>
   12cc3:	83 c4 10             	add    $0x10,%esp
                    "software interrupt (INT n, INT3, or INTO).\n");
    }
    
    if (frame->error_code & ERR_IDT) {
   12cc6:	8b 45 08             	mov    0x8(%ebp),%eax
   12cc9:	8b 40 34             	mov    0x34(%eax),%eax
   12ccc:	83 e0 02             	and    $0x2,%eax
   12ccf:	85 c0                	test   %eax,%eax
   12cd1:	74 12                	je     12ce5 <do_handler_general_protection+0x74>
        log_printf("the index portion of the error code refers "
   12cd3:	83 ec 0c             	sub    $0xc,%esp
   12cd6:	68 a8 70 01 00       	push   $0x170a8
   12cdb:	e8 29 3b 00 00       	call   16809 <log_printf>
   12ce0:	83 c4 10             	add    $0x10,%esp
   12ce3:	eb 10                	jmp    12cf5 <do_handler_general_protection+0x84>
                    "to a gate descriptor in the IDT\n");
    } else {
        log_printf("the index refers to a descriptor in the GDT\n");
   12ce5:	83 ec 0c             	sub    $0xc,%esp
   12ce8:	68 f4 70 01 00       	push   $0x170f4
   12ced:	e8 17 3b 00 00       	call   16809 <log_printf>
   12cf2:	83 c4 10             	add    $0x10,%esp
    }
    
    log_printf("segment index: %d\n", frame->error_code & 0xFFF8);
   12cf5:	8b 45 08             	mov    0x8(%ebp),%eax
   12cf8:	8b 40 34             	mov    0x34(%eax),%eax
   12cfb:	25 f8 ff 00 00       	and    $0xfff8,%eax
   12d00:	83 ec 08             	sub    $0x8,%esp
   12d03:	50                   	push   %eax
   12d04:	68 21 71 01 00       	push   $0x17121
   12d09:	e8 fb 3a 00 00       	call   16809 <log_printf>
   12d0e:	83 c4 10             	add    $0x10,%esp
    print_exception_fram(frame);
   12d11:	83 ec 0c             	sub    $0xc,%esp
   12d14:	ff 75 08             	push   0x8(%ebp)
   12d17:	e8 9c fc ff ff       	call   129b8 <print_exception_fram>
   12d1c:	83 c4 10             	add    $0x10,%esp
}
   12d1f:	90                   	nop
   12d20:	c9                   	leave  
   12d21:	c3                   	ret    

00012d22 <do_handler_page_fault>:
/**
 * @brief page_fault异常处理函数
 * 
 * @param frame 
 */
void do_handler_page_fault(const exception_frame_t *frame) {
   12d22:	55                   	push   %ebp
   12d23:	89 e5                	mov    %esp,%ebp
   12d25:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------\n");
   12d28:	83 ec 0c             	sub    $0xc,%esp
   12d2b:	68 84 6f 01 00       	push   $0x16f84
   12d30:	e8 d4 3a 00 00       	call   16809 <log_printf>
   12d35:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: Page fault.\n");
   12d38:	83 ec 0c             	sub    $0xc,%esp
   12d3b:	68 34 71 01 00       	push   $0x17134
   12d40:	e8 c4 3a 00 00       	call   16809 <log_printf>
   12d45:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_PAGE_P) {
   12d48:	8b 45 08             	mov    0x8(%ebp),%eax
   12d4b:	8b 40 34             	mov    0x34(%eax),%eax
   12d4e:	83 e0 01             	and    $0x1,%eax
   12d51:	85 c0                	test   %eax,%eax
   12d53:	74 18                	je     12d6d <do_handler_page_fault+0x4b>
        log_printf("page-level protection violation: 0x%x.\n", read_cr2());
   12d55:	e8 32 fc ff ff       	call   1298c <read_cr2>
   12d5a:	83 ec 08             	sub    $0x8,%esp
   12d5d:	50                   	push   %eax
   12d5e:	68 58 71 01 00       	push   $0x17158
   12d63:	e8 a1 3a 00 00       	call   16809 <log_printf>
   12d68:	83 c4 10             	add    $0x10,%esp
   12d6b:	eb 16                	jmp    12d83 <do_handler_page_fault+0x61>
    } else {
        log_printf("Page doesn't present 0x%x\n", read_cr2());
   12d6d:	e8 1a fc ff ff       	call   1298c <read_cr2>
   12d72:	83 ec 08             	sub    $0x8,%esp
   12d75:	50                   	push   %eax
   12d76:	68 80 71 01 00       	push   $0x17180
   12d7b:	e8 89 3a 00 00       	call   16809 <log_printf>
   12d80:	83 c4 10             	add    $0x10,%esp
   }
    
    if (frame->error_code & ERR_PAGE_WR) {
   12d83:	8b 45 08             	mov    0x8(%ebp),%eax
   12d86:	8b 40 34             	mov    0x34(%eax),%eax
   12d89:	83 e0 02             	and    $0x2,%eax
   12d8c:	85 c0                	test   %eax,%eax
   12d8e:	74 12                	je     12da2 <do_handler_page_fault+0x80>
        log_printf("The access causing the fault was a write.\n");
   12d90:	83 ec 0c             	sub    $0xc,%esp
   12d93:	68 9c 71 01 00       	push   $0x1719c
   12d98:	e8 6c 3a 00 00       	call   16809 <log_printf>
   12d9d:	83 c4 10             	add    $0x10,%esp
   12da0:	eb 10                	jmp    12db2 <do_handler_page_fault+0x90>
    } else {
        log_printf("The access causing the fault was a read.\n");
   12da2:	83 ec 0c             	sub    $0xc,%esp
   12da5:	68 c8 71 01 00       	push   $0x171c8
   12daa:	e8 5a 3a 00 00       	call   16809 <log_printf>
   12daf:	83 c4 10             	add    $0x10,%esp
    }
    
    if (frame->error_code & ERR_PAGE_US) {
   12db2:	8b 45 08             	mov    0x8(%ebp),%eax
   12db5:	8b 40 34             	mov    0x34(%eax),%eax
   12db8:	83 e0 04             	and    $0x4,%eax
   12dbb:	85 c0                	test   %eax,%eax
   12dbd:	74 12                	je     12dd1 <do_handler_page_fault+0xaf>
        log_printf("A user-mode access caused the fault.\n");
   12dbf:	83 ec 0c             	sub    $0xc,%esp
   12dc2:	68 f4 71 01 00       	push   $0x171f4
   12dc7:	e8 3d 3a 00 00       	call   16809 <log_printf>
   12dcc:	83 c4 10             	add    $0x10,%esp
   12dcf:	eb 10                	jmp    12de1 <do_handler_page_fault+0xbf>
    } else {
        log_printf("A supervisor-mode access caused the fault.\n");
   12dd1:	83 ec 0c             	sub    $0xc,%esp
   12dd4:	68 1c 72 01 00       	push   $0x1721c
   12dd9:	e8 2b 3a 00 00       	call   16809 <log_printf>
   12dde:	83 c4 10             	add    $0x10,%esp
    }

   print_exception_fram(frame);
   12de1:	83 ec 0c             	sub    $0xc,%esp
   12de4:	ff 75 08             	push   0x8(%ebp)
   12de7:	e8 cc fb ff ff       	call   129b8 <print_exception_fram>
   12dec:	83 c4 10             	add    $0x10,%esp
}
   12def:	90                   	nop
   12df0:	c9                   	leave  
   12df1:	c3                   	ret    

00012df2 <do_handler_fpu_error>:

void do_handler_fpu_error(const exception_frame_t *frame) {
   12df2:	55                   	push   %ebp
   12df3:	89 e5                	mov    %esp,%ebp
   12df5:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "fpu_error exception\n");
   12df8:	83 ec 08             	sub    $0x8,%esp
   12dfb:	68 48 72 01 00       	push   $0x17248
   12e00:	ff 75 08             	push   0x8(%ebp)
   12e03:	e8 bf fc ff ff       	call   12ac7 <do_default_handler>
   12e08:	83 c4 10             	add    $0x10,%esp
}
   12e0b:	90                   	nop
   12e0c:	c9                   	leave  
   12e0d:	c3                   	ret    

00012e0e <do_handler_alignment_check>:
void do_handler_alignment_check(const exception_frame_t *frame) {
   12e0e:	55                   	push   %ebp
   12e0f:	89 e5                	mov    %esp,%ebp
   12e11:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "alignment_check exception\n");
   12e14:	83 ec 08             	sub    $0x8,%esp
   12e17:	68 5d 72 01 00       	push   $0x1725d
   12e1c:	ff 75 08             	push   0x8(%ebp)
   12e1f:	e8 a3 fc ff ff       	call   12ac7 <do_default_handler>
   12e24:	83 c4 10             	add    $0x10,%esp
}
   12e27:	90                   	nop
   12e28:	c9                   	leave  
   12e29:	c3                   	ret    

00012e2a <do_handler_machine_check>:
void do_handler_machine_check(const exception_frame_t *frame) {
   12e2a:	55                   	push   %ebp
   12e2b:	89 e5                	mov    %esp,%ebp
   12e2d:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "machine_check exception\n");
   12e30:	83 ec 08             	sub    $0x8,%esp
   12e33:	68 78 72 01 00       	push   $0x17278
   12e38:	ff 75 08             	push   0x8(%ebp)
   12e3b:	e8 87 fc ff ff       	call   12ac7 <do_default_handler>
   12e40:	83 c4 10             	add    $0x10,%esp
}
   12e43:	90                   	nop
   12e44:	c9                   	leave  
   12e45:	c3                   	ret    

00012e46 <do_handler_smd_exception>:
void do_handler_smd_exception(const exception_frame_t *frame) {
   12e46:	55                   	push   %ebp
   12e47:	89 e5                	mov    %esp,%ebp
   12e49:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "smd_exception exception\n");
   12e4c:	83 ec 08             	sub    $0x8,%esp
   12e4f:	68 91 72 01 00       	push   $0x17291
   12e54:	ff 75 08             	push   0x8(%ebp)
   12e57:	e8 6b fc ff ff       	call   12ac7 <do_default_handler>
   12e5c:	83 c4 10             	add    $0x10,%esp
}
   12e5f:	90                   	nop
   12e60:	c9                   	leave  
   12e61:	c3                   	ret    

00012e62 <do_handler_virtual_exception>:
void do_handler_virtual_exception(const exception_frame_t *frame) {
   12e62:	55                   	push   %ebp
   12e63:	89 e5                	mov    %esp,%ebp
   12e65:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "virtual_exception exception\n");
   12e68:	83 ec 08             	sub    $0x8,%esp
   12e6b:	68 aa 72 01 00       	push   $0x172aa
   12e70:	ff 75 08             	push   0x8(%ebp)
   12e73:	e8 4f fc ff ff       	call   12ac7 <do_default_handler>
   12e78:	83 c4 10             	add    $0x10,%esp
}
   12e7b:	90                   	nop
   12e7c:	c9                   	leave  
   12e7d:	c3                   	ret    

00012e7e <do_handler_control_exception>:
void do_handler_control_exception(const exception_frame_t *frame) {
   12e7e:	55                   	push   %ebp
   12e7f:	89 e5                	mov    %esp,%ebp
   12e81:	83 ec 08             	sub    $0x8,%esp
  do_default_handler(frame, "control_exception exception\n");
   12e84:	83 ec 08             	sub    $0x8,%esp
   12e87:	68 c7 72 01 00       	push   $0x172c7
   12e8c:	ff 75 08             	push   0x8(%ebp)
   12e8f:	e8 33 fc ff ff       	call   12ac7 <do_default_handler>
   12e94:	83 c4 10             	add    $0x10,%esp
}
   12e97:	90                   	nop
   12e98:	c9                   	leave  
   12e99:	c3                   	ret    

00012e9a <idt_install>:
 *
 * @param idt_num 异常的下标
 * @param handler 异常处理程序的偏移地址
 * @return int 成功返回 0 失败放回 -1
 */
int idt_install(const int idt_num, const idt_handler_t handler) {
   12e9a:	55                   	push   %ebp
   12e9b:	89 e5                	mov    %esp,%ebp
   12e9d:	83 ec 08             	sub    $0x8,%esp
  // 1.判断IDT下标是否越界
  if (idt_num >= IDT_TABLE_SIZE || idt_num < 0) return -1;
   12ea0:	81 7d 08 ff 00 00 00 	cmpl   $0xff,0x8(%ebp)
   12ea7:	7f 06                	jg     12eaf <idt_install+0x15>
   12ea9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12ead:	79 07                	jns    12eb6 <idt_install+0x1c>
   12eaf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12eb4:	eb 25                	jmp    12edb <idt_install+0x41>
  // 2.在IDT表中设置下标为 idt_num 的中断门,中断门描述符的 DPL <= CPL, 
  //因为中断门是cpu自己从中断描述符表中索引，也可以用 int $中断号主动触发，
  //int $ 主动触发需要中断门描述符的DPL >= CPL，即只能在内核态触发
  //所以没有请求选择子即RPL不用检查，因为没有
  //若目标代码段的特权级更高则发生特权级转换
  gate_desc_set(idt_table + idt_num, KERNEL_SELECTOR_CS, (uint32_t)handler,
   12eb6:	8b 45 0c             	mov    0xc(%ebp),%eax
   12eb9:	8b 55 08             	mov    0x8(%ebp),%edx
   12ebc:	c1 e2 03             	shl    $0x3,%edx
   12ebf:	81 c2 00 ac 04 00    	add    $0x4ac00,%edx
   12ec5:	68 00 8e 00 00       	push   $0x8e00
   12eca:	50                   	push   %eax
   12ecb:	6a 08                	push   $0x8
   12ecd:	52                   	push   %edx
   12ece:	e8 c1 f7 ff ff       	call   12694 <gate_desc_set>
   12ed3:	83 c4 10             	add    $0x10,%esp
                GATE_TYPE_INT | GATE_ATTR_P | GATE_ATTR_DPL_0);

  return 0;
   12ed6:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12edb:	c9                   	leave  
   12edc:	c3                   	ret    

00012edd <init_pic>:

/**
 * @brief  初始化主从8259芯片
 * 
 */
static void init_pic(void) {
   12edd:	55                   	push   %ebp
   12ede:	89 e5                	mov    %esp,%ebp
  //1.对主片(8259A芯片)进行初始化, 写入时必须按照ICW1~4的顺序写入
  outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);  //ICW1:边缘触发，级联模式，需要ICW4
   12ee0:	6a 11                	push   $0x11
   12ee2:	6a 20                	push   $0x20
   12ee4:	e8 5a fa ff ff       	call   12943 <outb>
   12ee9:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW2, PIC_ICW2_IDT_START);                //ICW2:起始中断向量号为0x20
   12eec:	6a 20                	push   $0x20
   12eee:	6a 21                	push   $0x21
   12ef0:	e8 4e fa ff ff       	call   12943 <outb>
   12ef5:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW3, PIC_ICW3_MASTER_CASCADE);           //ICW3:主片用IR2级联从片
   12ef8:	6a 04                	push   $0x4
   12efa:	6a 21                	push   $0x21
   12efc:	e8 42 fa ff ff       	call   12943 <outb>
   12f01:	83 c4 08             	add    $0x8,%esp
  outb(PIC0_ICW4, PIC_ICW4_8086);                     //ICW4:8086模式，正常EOI
   12f04:	6a 01                	push   $0x1
   12f06:	6a 21                	push   $0x21
   12f08:	e8 36 fa ff ff       	call   12943 <outb>
   12f0d:	83 c4 08             	add    $0x8,%esp

  //2.对从片(8259A芯片)进行初始化
  outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_IC4);
   12f10:	6a 11                	push   $0x11
   12f12:	68 a0 00 00 00       	push   $0xa0
   12f17:	e8 27 fa ff ff       	call   12943 <outb>
   12f1c:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW2, PIC_ICW2_IDT_START + 8); //第一块芯片占用了8个中断，所以第二块芯片从第8个中断的下一个开始
   12f1f:	6a 28                	push   $0x28
   12f21:	68 a1 00 00 00       	push   $0xa1
   12f26:	e8 18 fa ff ff       	call   12943 <outb>
   12f2b:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW3, PIC_ICW3_SLAVE_CASCADE);
   12f2e:	6a 02                	push   $0x2
   12f30:	68 a1 00 00 00       	push   $0xa1
   12f35:	e8 09 fa ff ff       	call   12943 <outb>
   12f3a:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_ICW4, PIC_ICW4_8086);
   12f3d:	6a 01                	push   $0x1
   12f3f:	68 a1 00 00 00       	push   $0xa1
   12f44:	e8 fa f9 ff ff       	call   12943 <outb>
   12f49:	83 c4 08             	add    $0x8,%esp


  //3.初始化完两块8259芯片后，还需要为每一个中断设置处理程序
  //才可以去接收中断，所以现在要屏蔽中断，IMR位置1则屏蔽该中断请求，0则不屏蔽
  outb(PIC0_IMR, 0xfb); //屏蔽主片除 irq2(第3位) 以外的位传来的中断，(1111 1011)
   12f4c:	68 fb 00 00 00       	push   $0xfb
   12f51:	6a 21                	push   $0x21
   12f53:	e8 eb f9 ff ff       	call   12943 <outb>
   12f58:	83 c4 08             	add    $0x8,%esp
  outb(PIC1_IMR, 0xff); //屏蔽从片的所有中断
   12f5b:	68 ff 00 00 00       	push   $0xff
   12f60:	68 a1 00 00 00       	push   $0xa1
   12f65:	e8 d9 f9 ff ff       	call   12943 <outb>
   12f6a:	83 c4 08             	add    $0x8,%esp


}
   12f6d:	90                   	nop
   12f6e:	c9                   	leave  
   12f6f:	c3                   	ret    

00012f70 <idt_init>:

/**
 * @brief  初始化中断向量表
 *
 */
void idt_init(void) {
   12f70:	55                   	push   %ebp
   12f71:	89 e5                	mov    %esp,%ebp
   12f73:	83 ec 18             	sub    $0x18,%esp
  // 1.初始化IDT中的各个中断门(未知异常类型)
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   12f76:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12f7d:	eb 17                	jmp    12f96 <idt_init+0x26>
    idt_install(i, (idt_handler_t)exception_handler_unknown);
   12f7f:	83 ec 08             	sub    $0x8,%esp
   12f82:	68 2a 00 01 00       	push   $0x1002a
   12f87:	ff 75 f4             	push   -0xc(%ebp)
   12f8a:	e8 0b ff ff ff       	call   12e9a <idt_install>
   12f8f:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < IDT_TABLE_SIZE; ++i) {
   12f92:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12f96:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   12f9d:	7e e0                	jle    12f7f <idt_init+0xf>
  }

  // 2.绑定异常中断向量表中对应下标的中断门的处理函数
  idt_install(IDT0_DE, (idt_handler_t)exception_handler_divider);
   12f9f:	83 ec 08             	sub    $0x8,%esp
   12fa2:	68 47 00 01 00       	push   $0x10047
   12fa7:	6a 00                	push   $0x0
   12fa9:	e8 ec fe ff ff       	call   12e9a <idt_install>
   12fae:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT1_DB, (idt_handler_t)exception_handler_debug);
   12fb1:	83 ec 08             	sub    $0x8,%esp
   12fb4:	68 64 00 01 00       	push   $0x10064
   12fb9:	6a 01                	push   $0x1
   12fbb:	e8 da fe ff ff       	call   12e9a <idt_install>
   12fc0:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT2_NMI, (idt_handler_t)exception_handler_nmi);
   12fc3:	83 ec 08             	sub    $0x8,%esp
   12fc6:	68 81 00 01 00       	push   $0x10081
   12fcb:	6a 02                	push   $0x2
   12fcd:	e8 c8 fe ff ff       	call   12e9a <idt_install>
   12fd2:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT3_BP, (idt_handler_t)exception_handler_breakpoint);
   12fd5:	83 ec 08             	sub    $0x8,%esp
   12fd8:	68 9e 00 01 00       	push   $0x1009e
   12fdd:	6a 03                	push   $0x3
   12fdf:	e8 b6 fe ff ff       	call   12e9a <idt_install>
   12fe4:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT4_OF, (idt_handler_t)exception_handler_overflow);
   12fe7:	83 ec 08             	sub    $0x8,%esp
   12fea:	68 bb 00 01 00       	push   $0x100bb
   12fef:	6a 04                	push   $0x4
   12ff1:	e8 a4 fe ff ff       	call   12e9a <idt_install>
   12ff6:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT5_BR, (idt_handler_t)exception_handler_bound_range);
   12ff9:	83 ec 08             	sub    $0x8,%esp
   12ffc:	68 d8 00 01 00       	push   $0x100d8
   13001:	6a 05                	push   $0x5
   13003:	e8 92 fe ff ff       	call   12e9a <idt_install>
   13008:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT6_UD, (idt_handler_t)exception_handler_invalid_opcode);
   1300b:	83 ec 08             	sub    $0x8,%esp
   1300e:	68 f5 00 01 00       	push   $0x100f5
   13013:	6a 06                	push   $0x6
   13015:	e8 80 fe ff ff       	call   12e9a <idt_install>
   1301a:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT7_NM, (idt_handler_t)exception_handler_device_unavailable);
   1301d:	83 ec 08             	sub    $0x8,%esp
   13020:	68 12 01 01 00       	push   $0x10112
   13025:	6a 07                	push   $0x7
   13027:	e8 6e fe ff ff       	call   12e9a <idt_install>
   1302c:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT8_DF, (idt_handler_t)exception_handler_double_fault);
   1302f:	83 ec 08             	sub    $0x8,%esp
   13032:	68 2f 01 01 00       	push   $0x1012f
   13037:	6a 08                	push   $0x8
   13039:	e8 5c fe ff ff       	call   12e9a <idt_install>
   1303e:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT10_TS, (idt_handler_t)exception_handler_invalid_tss);
   13041:	83 ec 08             	sub    $0x8,%esp
   13044:	68 4a 01 01 00       	push   $0x1014a
   13049:	6a 0a                	push   $0xa
   1304b:	e8 4a fe ff ff       	call   12e9a <idt_install>
   13050:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT11_NP, (idt_handler_t)exception_handler_segment_not_present);
   13053:	83 ec 08             	sub    $0x8,%esp
   13056:	68 65 01 01 00       	push   $0x10165
   1305b:	6a 0b                	push   $0xb
   1305d:	e8 38 fe ff ff       	call   12e9a <idt_install>
   13062:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT12_SS, (idt_handler_t)exception_handler_stack_segment_fault);
   13065:	83 ec 08             	sub    $0x8,%esp
   13068:	68 80 01 01 00       	push   $0x10180
   1306d:	6a 0c                	push   $0xc
   1306f:	e8 26 fe ff ff       	call   12e9a <idt_install>
   13074:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT13_GP, (idt_handler_t)exception_handler_general_protection);
   13077:	83 ec 08             	sub    $0x8,%esp
   1307a:	68 9b 01 01 00       	push   $0x1019b
   1307f:	6a 0d                	push   $0xd
   13081:	e8 14 fe ff ff       	call   12e9a <idt_install>
   13086:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT14_PF, (idt_handler_t)exception_handler_page_fault);
   13089:	83 ec 08             	sub    $0x8,%esp
   1308c:	68 b6 01 01 00       	push   $0x101b6
   13091:	6a 0e                	push   $0xe
   13093:	e8 02 fe ff ff       	call   12e9a <idt_install>
   13098:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT16_MF, (idt_handler_t)exception_handler_fpu_error);
   1309b:	83 ec 08             	sub    $0x8,%esp
   1309e:	68 d1 01 01 00       	push   $0x101d1
   130a3:	6a 10                	push   $0x10
   130a5:	e8 f0 fd ff ff       	call   12e9a <idt_install>
   130aa:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT17_AC, (idt_handler_t)exception_handler_alignment_check);
   130ad:	83 ec 08             	sub    $0x8,%esp
   130b0:	68 ee 01 01 00       	push   $0x101ee
   130b5:	6a 11                	push   $0x11
   130b7:	e8 de fd ff ff       	call   12e9a <idt_install>
   130bc:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT18_MC, (idt_handler_t)exception_handler_machine_check);
   130bf:	83 ec 08             	sub    $0x8,%esp
   130c2:	68 09 02 01 00       	push   $0x10209
   130c7:	6a 12                	push   $0x12
   130c9:	e8 cc fd ff ff       	call   12e9a <idt_install>
   130ce:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT19_XM, (idt_handler_t)exception_handler_smd_exception);
   130d1:	83 ec 08             	sub    $0x8,%esp
   130d4:	68 26 02 01 00       	push   $0x10226
   130d9:	6a 13                	push   $0x13
   130db:	e8 ba fd ff ff       	call   12e9a <idt_install>
   130e0:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT20_VE, (idt_handler_t)exception_handler_virtual_exception);
   130e3:	83 ec 08             	sub    $0x8,%esp
   130e6:	68 43 02 01 00       	push   $0x10243
   130eb:	6a 14                	push   $0x14
   130ed:	e8 a8 fd ff ff       	call   12e9a <idt_install>
   130f2:	83 c4 10             	add    $0x10,%esp
  idt_install(IDT21_CP, (idt_handler_t)exception_handler_control_exception);
   130f5:	83 ec 08             	sub    $0x8,%esp
   130f8:	68 60 02 01 00       	push   $0x10260
   130fd:	6a 15                	push   $0x15
   130ff:	e8 96 fd ff ff       	call   12e9a <idt_install>
   13104:	83 c4 10             	add    $0x10,%esp

  //3.加载IDT
  lidt((uint32_t)idt_table, sizeof(idt_table));
   13107:	b8 00 ac 04 00       	mov    $0x4ac00,%eax
   1310c:	83 ec 08             	sub    $0x8,%esp
   1310f:	68 00 08 00 00       	push   $0x800
   13114:	50                   	push   %eax
   13115:	e8 4a f8 ff ff       	call   12964 <lidt>
   1311a:	83 c4 10             	add    $0x10,%esp

  //4.初始化8259设备中断芯片
  init_pic();
   1311d:	e8 bb fd ff ff       	call   12edd <init_pic>
}
   13122:	90                   	nop
   13123:	c9                   	leave  
   13124:	c3                   	ret    

00013125 <idt_enable>:
/**
 * @brief  开启外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号,即IDT中的下标
 */
void idt_enable(uint8_t irq_num) {
   13125:	55                   	push   %ebp
   13126:	89 e5                	mov    %esp,%ebp
   13128:	53                   	push   %ebx
   13129:	83 ec 14             	sub    $0x14,%esp
   1312c:	8b 45 08             	mov    0x8(%ebp),%eax
   1312f:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   13132:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   13136:	76 7f                	jbe    131b7 <idt_enable+0x92>
   13138:	80 7d e8 2e          	cmpb   $0x2e,-0x18(%ebp)
   1313c:	77 79                	ja     131b7 <idt_enable+0x92>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   1313e:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置0，即不屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   13142:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   13146:	77 33                	ja     1317b <idt_enable+0x56>
    uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   13148:	6a 21                	push   $0x21
   1314a:	e8 d7 f7 ff ff       	call   12926 <inb>
   1314f:	83 c4 04             	add    $0x4,%esp
   13152:	89 c3                	mov    %eax,%ebx
   13154:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   13158:	ba 01 00 00 00       	mov    $0x1,%edx
   1315d:	89 c1                	mov    %eax,%ecx
   1315f:	d3 e2                	shl    %cl,%edx
   13161:	89 d0                	mov    %edx,%eax
   13163:	f7 d0                	not    %eax
   13165:	21 d8                	and    %ebx,%eax
   13167:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   1316a:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   1316e:	50                   	push   %eax
   1316f:	6a 21                	push   $0x21
   13171:	e8 cd f7 ff ff       	call   12943 <outb>
   13176:	83 c4 08             	add    $0x8,%esp
   13179:	eb 3d                	jmp    131b8 <idt_enable+0x93>
  } else {
    uint8_t mask = inb(PIC1_IMR) & ~(1 << (irq_num - 8));
   1317b:	68 a1 00 00 00       	push   $0xa1
   13180:	e8 a1 f7 ff ff       	call   12926 <inb>
   13185:	83 c4 04             	add    $0x4,%esp
   13188:	89 c3                	mov    %eax,%ebx
   1318a:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   1318e:	83 e8 08             	sub    $0x8,%eax
   13191:	ba 01 00 00 00       	mov    $0x1,%edx
   13196:	89 c1                	mov    %eax,%ecx
   13198:	d3 e2                	shl    %cl,%edx
   1319a:	89 d0                	mov    %edx,%eax
   1319c:	f7 d0                	not    %eax
   1319e:	21 d8                	and    %ebx,%eax
   131a0:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   131a3:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   131a7:	50                   	push   %eax
   131a8:	68 a1 00 00 00       	push   $0xa1
   131ad:	e8 91 f7 ff ff       	call   12943 <outb>
   131b2:	83 c4 08             	add    $0x8,%esp
   131b5:	eb 01                	jmp    131b8 <idt_enable+0x93>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 14)   return;
   131b7:	90                   	nop
  }
  
}
   131b8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   131bb:	c9                   	leave  
   131bc:	c3                   	ret    

000131bd <idt_disable>:
/**
 * @brief  关闭外部设备的中断
 * 
 * @param irq_num 外部设备对应的中断向量号，即IDT中的下标
 */
void idt_disable(uint8_t irq_num) {
   131bd:	55                   	push   %ebp
   131be:	89 e5                	mov    %esp,%ebp
   131c0:	53                   	push   %ebx
   131c1:	83 ec 14             	sub    $0x14,%esp
   131c4:	8b 45 08             	mov    0x8(%ebp),%eax
   131c7:	88 45 e8             	mov    %al,-0x18(%ebp)
  //1.判断中断请求向量号是否越界
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   131ca:	80 7d e8 1f          	cmpb   $0x1f,-0x18(%ebp)
   131ce:	76 7b                	jbe    1324b <idt_disable+0x8e>
   131d0:	80 7d e8 2f          	cmpb   $0x2f,-0x18(%ebp)
   131d4:	77 75                	ja     1324b <idt_disable+0x8e>

  //2.获取到向量号对应的8259A的IRQ标号 主片为0~7 ，从片为 8~15
  irq_num -= PIC_ICW2_IDT_START;
   131d6:	80 6d e8 20          	subb   $0x20,-0x18(%ebp)

  //3.若在主片上则将主片的IMR寄存器对应位置1，即屏蔽该中断, 若在从片上也同理
  if (irq_num < 8) {
   131da:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
   131de:	77 31                	ja     13211 <idt_disable+0x54>
    uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   131e0:	6a 21                	push   $0x21
   131e2:	e8 3f f7 ff ff       	call   12926 <inb>
   131e7:	83 c4 04             	add    $0x4,%esp
   131ea:	89 c3                	mov    %eax,%ebx
   131ec:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   131f0:	ba 01 00 00 00       	mov    $0x1,%edx
   131f5:	89 c1                	mov    %eax,%ecx
   131f7:	d3 e2                	shl    %cl,%edx
   131f9:	89 d0                	mov    %edx,%eax
   131fb:	09 d8                	or     %ebx,%eax
   131fd:	88 45 fa             	mov    %al,-0x6(%ebp)
    outb(PIC0_IMR, mask);
   13200:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   13204:	50                   	push   %eax
   13205:	6a 21                	push   $0x21
   13207:	e8 37 f7 ff ff       	call   12943 <outb>
   1320c:	83 c4 08             	add    $0x8,%esp
   1320f:	eb 3b                	jmp    1324c <idt_disable+0x8f>
  } else {
    uint8_t mask = inb(PIC1_IMR) | (1 << (irq_num - 8));
   13211:	68 a1 00 00 00       	push   $0xa1
   13216:	e8 0b f7 ff ff       	call   12926 <inb>
   1321b:	83 c4 04             	add    $0x4,%esp
   1321e:	89 c3                	mov    %eax,%ebx
   13220:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
   13224:	83 e8 08             	sub    $0x8,%eax
   13227:	ba 01 00 00 00       	mov    $0x1,%edx
   1322c:	89 c1                	mov    %eax,%ecx
   1322e:	d3 e2                	shl    %cl,%edx
   13230:	89 d0                	mov    %edx,%eax
   13232:	09 d8                	or     %ebx,%eax
   13234:	88 45 fb             	mov    %al,-0x5(%ebp)
    outb(PIC1_IMR, mask);
   13237:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   1323b:	50                   	push   %eax
   1323c:	68 a1 00 00 00       	push   $0xa1
   13241:	e8 fd f6 ff ff       	call   12943 <outb>
   13246:	83 c4 08             	add    $0x8,%esp
   13249:	eb 01                	jmp    1324c <idt_disable+0x8f>
  if (irq_num < PIC_ICW2_IDT_START || irq_num > PIC_ICW2_IDT_START + 15)   return;
   1324b:	90                   	nop
  }
  
}
   1324c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1324f:	c9                   	leave  
   13250:	c3                   	ret    

00013251 <idt_disable_global>:

/**
 * @brief  关闭全局中断
 * 
 */
void idt_disable_global(void) {
   13251:	55                   	push   %ebp
   13252:	89 e5                	mov    %esp,%ebp
  cli();
   13254:	e8 b8 f6 ff ff       	call   12911 <cli>
}
   13259:	90                   	nop
   1325a:	5d                   	pop    %ebp
   1325b:	c3                   	ret    

0001325c <idt_enable_global>:

/**
 * @brief  开启全局中断
 * 
 */
void idt_enable_global(void) {
   1325c:	55                   	push   %ebp
   1325d:	89 e5                	mov    %esp,%ebp
  sti();
   1325f:	e8 b4 f6 ff ff       	call   12918 <sti>
}
   13264:	90                   	nop
   13265:	5d                   	pop    %ebp
   13266:	c3                   	ret    

00013267 <pic_send_eoi>:
 * @brief  将OCW2寄存器的7~5位置为 001，用普通的EOI结束方式
 *         向8259A发送EOI命令，8259A会将ISR中优先级最高的位置0
 *
 * @param irq_num 中断向量号，即IDT下标
 */
void pic_send_eoi(int irq_num) {
   13267:	55                   	push   %ebp
   13268:	89 e5                	mov    %esp,%ebp
  //1.获取该中断对应的IRQ标号
  irq_num -= PIC_ICW2_IDT_START;
   1326a:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
  //2.判断标号是否越界,若不越界则交给对应芯片处理
  if (irq_num < 0 || irq_num > 15) return;
   1326e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13272:	78 29                	js     1329d <pic_send_eoi+0x36>
   13274:	83 7d 08 0f          	cmpl   $0xf,0x8(%ebp)
   13278:	7f 23                	jg     1329d <pic_send_eoi+0x36>

  //3.若中断来自主片则只需向主片发送EOI
  outb(PIC0_OCW2, PIC_OCW2_EOI);
   1327a:	6a 20                	push   $0x20
   1327c:	6a 20                	push   $0x20
   1327e:	e8 c0 f6 ff ff       	call   12943 <outb>
   13283:	83 c4 08             	add    $0x8,%esp

  //4.若中断来自从片则还需向从片发送EOI
  if (irq_num >= 8) { 
   13286:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   1328a:	7e 12                	jle    1329e <pic_send_eoi+0x37>
    outb(PIC1_OCW2, PIC_OCW2_EOI);
   1328c:	6a 20                	push   $0x20
   1328e:	68 a0 00 00 00       	push   $0xa0
   13293:	e8 ab f6 ff ff       	call   12943 <outb>
   13298:	83 c4 08             	add    $0x8,%esp
   1329b:	eb 01                	jmp    1329e <pic_send_eoi+0x37>
  if (irq_num < 0 || irq_num > 15) return;
   1329d:	90                   	nop
  }

}
   1329e:	c9                   	leave  
   1329f:	c3                   	ret    

000132a0 <idt_enter_protection>:

/**
 * @brief  
 * 
 */
idt_state_t idt_enter_protection(void) {
   132a0:	55                   	push   %ebp
   132a1:	89 e5                	mov    %esp,%ebp
   132a3:	83 ec 10             	sub    $0x10,%esp
  idt_state_t state = read_eflags();
   132a6:	e8 f2 f6 ff ff       	call   1299d <read_eflags>
   132ab:	89 45 fc             	mov    %eax,-0x4(%ebp)
  idt_disable_global();
   132ae:	e8 9e ff ff ff       	call   13251 <idt_disable_global>
  return state;;
   132b3:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   132b6:	c9                   	leave  
   132b7:	c3                   	ret    

000132b8 <idt_leave_protection>:
/**
 * @brief  
 * 
 * @return idt_state_t 
 */
void idt_leave_protection(idt_state_t state){
   132b8:	55                   	push   %ebp
   132b9:	89 e5                	mov    %esp,%ebp
  write_eflags(state);
   132bb:	ff 75 08             	push   0x8(%ebp)
   132be:	e8 ea f6 ff ff       	call   129ad <write_eflags>
   132c3:	83 c4 04             	add    $0x4,%esp
}
   132c6:	90                   	nop
   132c7:	c9                   	leave  
   132c8:	c3                   	ret    

000132c9 <sys_print_msg>:
 * @brief 临时的格式化输出系统调用
 * 
 * @param fmt 
 * @param arg 
 */
void sys_print_msg(const char *fmt, int arg) {
   132c9:	55                   	push   %ebp
   132ca:	89 e5                	mov    %esp,%ebp
   132cc:	83 ec 08             	sub    $0x8,%esp
    log_printf(fmt, arg);
   132cf:	83 ec 08             	sub    $0x8,%esp
   132d2:	ff 75 0c             	push   0xc(%ebp)
   132d5:	ff 75 08             	push   0x8(%ebp)
   132d8:	e8 2c 35 00 00       	call   16809 <log_printf>
   132dd:	83 c4 10             	add    $0x10,%esp
}
   132e0:	90                   	nop
   132e1:	c9                   	leave  
   132e2:	c3                   	ret    

000132e3 <do_handler_syscall>:
/**
 * @brief 门调用处理函数，通过定义的系统调用id，将该调用分发到正确的系统调用上
 * 
 * @param frame 
 */
void do_handler_syscall(syscall_frame_t* frame) {
   132e3:	55                   	push   %ebp
   132e4:	89 e5                	mov    %esp,%ebp
   132e6:	53                   	push   %ebx
   132e7:	83 ec 14             	sub    $0x14,%esp
    if (frame->function_id < sizeof(sys_table) / sizeof(sys_table[0])) {    //当前系统调用存在
   132ea:	8b 45 08             	mov    0x8(%ebp),%eax
   132ed:	8b 40 3c             	mov    0x3c(%eax),%eax
   132f0:	83 f8 3a             	cmp    $0x3a,%eax
   132f3:	77 48                	ja     1333d <do_handler_syscall+0x5a>
        sys_handler_t handler = sys_table[frame->function_id];
   132f5:	8b 45 08             	mov    0x8(%ebp),%eax
   132f8:	8b 40 3c             	mov    0x3c(%eax),%eax
   132fb:	8b 04 85 00 73 01 00 	mov    0x17300(,%eax,4),%eax
   13302:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (handler) {
   13305:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   13309:	74 32                	je     1333d <do_handler_syscall+0x5a>
            //直接将4个参数全部传入即可，
            //因为是按从右到左的顺序将参数压栈，所以原始的参数只要是从arg0开始赋值的即可，
            //多余的参数在高地址处，不影响handler对应的真正的系统调用
            int ret = handler(frame->arg0, frame->arg1, frame->arg2, frame->arg3);
   1330b:	8b 45 08             	mov    0x8(%ebp),%eax
   1330e:	8b 58 4c             	mov    0x4c(%eax),%ebx
   13311:	8b 45 08             	mov    0x8(%ebp),%eax
   13314:	8b 48 48             	mov    0x48(%eax),%ecx
   13317:	8b 45 08             	mov    0x8(%ebp),%eax
   1331a:	8b 50 44             	mov    0x44(%eax),%edx
   1331d:	8b 45 08             	mov    0x8(%ebp),%eax
   13320:	8b 40 40             	mov    0x40(%eax),%eax
   13323:	53                   	push   %ebx
   13324:	51                   	push   %ecx
   13325:	52                   	push   %edx
   13326:	50                   	push   %eax
   13327:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1332a:	ff d0                	call   *%eax
   1332c:	83 c4 10             	add    $0x10,%esp
   1332f:	89 45 f0             	mov    %eax,-0x10(%ebp)
            //正常函数返回后会将返回值先存放到eax寄存器中，再eax中的值放入对应接收返回值的内存中
            //此处用eax先接收ret，在调用门返回后再从eax中取处该值
            frame->eax = ret;
   13332:	8b 55 f0             	mov    -0x10(%ebp),%edx
   13335:	8b 45 08             	mov    0x8(%ebp),%eax
   13338:	89 50 30             	mov    %edx,0x30(%eax)
            return;
   1333b:	eb 30                	jmp    1336d <do_handler_syscall+0x8a>
        }
    }
    
    //打印系统调用失败的异常日志
    task_t *task = task_current();
   1333d:	e8 52 e6 ff ff       	call   11994 <task_current>
   13342:	89 45 ec             	mov    %eax,-0x14(%ebp)
    log_printf("task: %s, Unknown syscall_id: %d\n", task->name, frame->function_id);
   13345:	8b 45 08             	mov    0x8(%ebp),%eax
   13348:	8b 40 3c             	mov    0x3c(%eax),%eax
   1334b:	8b 55 ec             	mov    -0x14(%ebp),%edx
   1334e:	83 c2 24             	add    $0x24,%edx
   13351:	83 ec 04             	sub    $0x4,%esp
   13354:	50                   	push   %eax
   13355:	52                   	push   %edx
   13356:	68 ec 73 01 00       	push   $0x173ec
   1335b:	e8 a9 34 00 00       	call   16809 <log_printf>
   13360:	83 c4 10             	add    $0x10,%esp
    frame->eax = -1;
   13363:	8b 45 08             	mov    0x8(%ebp),%eax
   13366:	c7 40 30 ff ff ff ff 	movl   $0xffffffff,0x30(%eax)

   1336d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   13370:	c9                   	leave  
   13371:	c3                   	ret    

00013372 <inb>:
static inline uint8_t inb(uint16_t port) {
   13372:	55                   	push   %ebp
   13373:	89 e5                	mov    %esp,%ebp
   13375:	83 ec 14             	sub    $0x14,%esp
   13378:	8b 45 08             	mov    0x8(%ebp),%eax
   1337b:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   1337f:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   13383:	89 c2                	mov    %eax,%edx
   13385:	ec                   	in     (%dx),%al
   13386:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   13389:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   1338d:	c9                   	leave  
   1338e:	c3                   	ret    

0001338f <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   1338f:	55                   	push   %ebp
   13390:	89 e5                	mov    %esp,%ebp
   13392:	83 ec 08             	sub    $0x8,%esp
   13395:	8b 45 08             	mov    0x8(%ebp),%eax
   13398:	8b 55 0c             	mov    0xc(%ebp),%edx
   1339b:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   1339f:	89 d0                	mov    %edx,%eax
   133a1:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   133a4:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   133a8:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   133ac:	ee                   	out    %al,(%dx)
}
   133ad:	90                   	nop
   133ae:	c9                   	leave  
   133af:	c3                   	ret    

000133b0 <read_cursor_pos>:
/**
 * @brief 获取光标位置
 *
 * @return int
 */
static inline int read_cursor_pos(void) {
   133b0:	55                   	push   %ebp
   133b1:	89 e5                	mov    %esp,%ebp
   133b3:	83 ec 18             	sub    $0x18,%esp
  //TODO:加锁
  idt_state_t state = idt_enter_protection();
   133b6:	e8 e5 fe ff ff       	call   132a0 <idt_enter_protection>
   133bb:	89 45 f4             	mov    %eax,-0xc(%ebp)

  int pos;
  // 光标位置由两个字节组成
  outb(0x3d4, 0xf);  // 访问低8位
   133be:	83 ec 08             	sub    $0x8,%esp
   133c1:	6a 0f                	push   $0xf
   133c3:	68 d4 03 00 00       	push   $0x3d4
   133c8:	e8 c2 ff ff ff       	call   1338f <outb>
   133cd:	83 c4 10             	add    $0x10,%esp
  pos = inb(0x3d5);
   133d0:	83 ec 0c             	sub    $0xc,%esp
   133d3:	68 d5 03 00 00       	push   $0x3d5
   133d8:	e8 95 ff ff ff       	call   13372 <inb>
   133dd:	83 c4 10             	add    $0x10,%esp
   133e0:	0f b6 c0             	movzbl %al,%eax
   133e3:	89 45 f0             	mov    %eax,-0x10(%ebp)

  outb(0x3d4, 0xe);  // 访问高8位
   133e6:	83 ec 08             	sub    $0x8,%esp
   133e9:	6a 0e                	push   $0xe
   133eb:	68 d4 03 00 00       	push   $0x3d4
   133f0:	e8 9a ff ff ff       	call   1338f <outb>
   133f5:	83 c4 10             	add    $0x10,%esp
  pos |= inb(0x3d5) << 8;
   133f8:	83 ec 0c             	sub    $0xc,%esp
   133fb:	68 d5 03 00 00       	push   $0x3d5
   13400:	e8 6d ff ff ff       	call   13372 <inb>
   13405:	83 c4 10             	add    $0x10,%esp
   13408:	0f b6 c0             	movzbl %al,%eax
   1340b:	c1 e0 08             	shl    $0x8,%eax
   1340e:	09 45 f0             	or     %eax,-0x10(%ebp)

  //TODO:解锁
  idt_leave_protection(state);
   13411:	83 ec 0c             	sub    $0xc,%esp
   13414:	ff 75 f4             	push   -0xc(%ebp)
   13417:	e8 9c fe ff ff       	call   132b8 <idt_leave_protection>
   1341c:	83 c4 10             	add    $0x10,%esp
  return pos;
   1341f:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   13422:	c9                   	leave  
   13423:	c3                   	ret    

00013424 <update_cursor_pos>:
 * @brief 更新光标的位置
 *
 * @param console
 * @return int
 */
static inline int update_cursor_pos(console_t *console) {
   13424:	55                   	push   %ebp
   13425:	89 e5                	mov    %esp,%ebp
   13427:	83 ec 18             	sub    $0x18,%esp
  //TODO:加锁
  idt_state_t state = idt_enter_protection();
   1342a:	e8 71 fe ff ff       	call   132a0 <idt_enter_protection>
   1342f:	89 45 f4             	mov    %eax,-0xc(%ebp)

  //计算以当前控制台为屏幕显示区域时的光标位置
  uint16_t pos = console->cursor_row * console->display_cols +
   13432:	8b 45 08             	mov    0x8(%ebp),%eax
   13435:	8b 40 10             	mov    0x10(%eax),%eax
   13438:	89 c2                	mov    %eax,%edx
   1343a:	8b 45 08             	mov    0x8(%ebp),%eax
   1343d:	8b 40 0c             	mov    0xc(%eax),%eax
   13440:	0f af d0             	imul   %eax,%edx
                 console->cursor_col +
   13443:	8b 45 08             	mov    0x8(%ebp),%eax
   13446:	8b 40 14             	mov    0x14(%eax),%eax
  uint16_t pos = console->cursor_row * console->display_cols +
   13449:	01 c2                	add    %eax,%edx
                 ((uint32_t)console->disp_base - CONSOLE_DISP_START_ADDR) /
   1344b:	8b 45 08             	mov    0x8(%ebp),%eax
   1344e:	8b 40 04             	mov    0x4(%eax),%eax
   13451:	2d 00 80 0b 00       	sub    $0xb8000,%eax
   13456:	d1 e8                	shr    %eax
  uint16_t pos = console->cursor_row * console->display_cols +
   13458:	01 d0                	add    %edx,%eax
   1345a:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
                     sizeof(disp_char_t);

  // 光标位置由两个字节组成
  outb(0x3d4, 0xf);  // 访问低8位
   1345e:	83 ec 08             	sub    $0x8,%esp
   13461:	6a 0f                	push   $0xf
   13463:	68 d4 03 00 00       	push   $0x3d4
   13468:	e8 22 ff ff ff       	call   1338f <outb>
   1346d:	83 c4 10             	add    $0x10,%esp
  outb(0x3d5, (uint8_t)(pos & 0xff));
   13470:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   13474:	0f b6 c0             	movzbl %al,%eax
   13477:	83 ec 08             	sub    $0x8,%esp
   1347a:	50                   	push   %eax
   1347b:	68 d5 03 00 00       	push   $0x3d5
   13480:	e8 0a ff ff ff       	call   1338f <outb>
   13485:	83 c4 10             	add    $0x10,%esp

  outb(0x3d4, 0xe);  // 访问高8位
   13488:	83 ec 08             	sub    $0x8,%esp
   1348b:	6a 0e                	push   $0xe
   1348d:	68 d4 03 00 00       	push   $0x3d4
   13492:	e8 f8 fe ff ff       	call   1338f <outb>
   13497:	83 c4 10             	add    $0x10,%esp
  outb(0x3d5, (uint8_t)((pos >> 8) & 0xff));
   1349a:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   1349e:	66 c1 e8 08          	shr    $0x8,%ax
   134a2:	0f b6 c0             	movzbl %al,%eax
   134a5:	83 ec 08             	sub    $0x8,%esp
   134a8:	50                   	push   %eax
   134a9:	68 d5 03 00 00       	push   $0x3d5
   134ae:	e8 dc fe ff ff       	call   1338f <outb>
   134b3:	83 c4 10             	add    $0x10,%esp

  //TODO:解锁
  idt_leave_protection(state);
   134b6:	83 ec 0c             	sub    $0xc,%esp
   134b9:	ff 75 f4             	push   -0xc(%ebp)
   134bc:	e8 f7 fd ff ff       	call   132b8 <idt_leave_protection>
   134c1:	83 c4 10             	add    $0x10,%esp
  return pos;
   134c4:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
}
   134c8:	c9                   	leave  
   134c9:	c3                   	ret    

000134ca <erase_rows>:
 *
 * @param console
 * @param start
 * @param end
 */
static inline void erase_rows(console_t *console, int start, int end) {
   134ca:	55                   	push   %ebp
   134cb:	89 e5                	mov    %esp,%ebp
   134cd:	83 ec 10             	sub    $0x10,%esp
  disp_char_t *disp_start = console->disp_base + console->display_cols * start;
   134d0:	8b 45 08             	mov    0x8(%ebp),%eax
   134d3:	8b 48 04             	mov    0x4(%eax),%ecx
   134d6:	8b 45 08             	mov    0x8(%ebp),%eax
   134d9:	8b 50 0c             	mov    0xc(%eax),%edx
   134dc:	8b 45 0c             	mov    0xc(%ebp),%eax
   134df:	0f af c2             	imul   %edx,%eax
   134e2:	01 c0                	add    %eax,%eax
   134e4:	01 c8                	add    %ecx,%eax
   134e6:	89 45 fc             	mov    %eax,-0x4(%ebp)
  disp_char_t *disp_end =
      console->disp_base + console->display_cols * (end + 1);
   134e9:	8b 45 08             	mov    0x8(%ebp),%eax
   134ec:	8b 48 04             	mov    0x4(%eax),%ecx
   134ef:	8b 45 08             	mov    0x8(%ebp),%eax
   134f2:	8b 40 0c             	mov    0xc(%eax),%eax
   134f5:	8b 55 10             	mov    0x10(%ebp),%edx
   134f8:	83 c2 01             	add    $0x1,%edx
   134fb:	0f af c2             	imul   %edx,%eax
   134fe:	01 c0                	add    %eax,%eax
  disp_char_t *disp_end =
   13500:	01 c8                	add    %ecx,%eax
   13502:	89 45 f8             	mov    %eax,-0x8(%ebp)

  while (disp_start < disp_end) {
   13505:	eb 24                	jmp    1352b <erase_rows+0x61>
    disp_start->c = ' ';
   13507:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1350a:	c6 00 20             	movb   $0x20,(%eax)
    disp_start->foreground = COLOR_White;
   1350d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13510:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   13514:	83 ca 0f             	or     $0xf,%edx
   13517:	88 50 01             	mov    %dl,0x1(%eax)
    disp_start->background = COLOR_Black;
   1351a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1351d:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   13521:	83 e2 8f             	and    $0xffffff8f,%edx
   13524:	88 50 01             	mov    %dl,0x1(%eax)

    disp_start++;
   13527:	83 45 fc 02          	addl   $0x2,-0x4(%ebp)
  while (disp_start < disp_end) {
   1352b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1352e:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   13531:	72 d4                	jb     13507 <erase_rows+0x3d>
  }
}
   13533:	90                   	nop
   13534:	90                   	nop
   13535:	c9                   	leave  
   13536:	c3                   	ret    

00013537 <scroll_up>:
 * @brief 控制台console上滚lines行
 *
 * @param console
 * @param lines
 */
static inline void scroll_up(console_t *console, int lines) {
   13537:	55                   	push   %ebp
   13538:	89 e5                	mov    %esp,%ebp
   1353a:	83 ec 18             	sub    $0x18,%esp
  // 获取拷贝的目标位置
  disp_char_t *dest = console->disp_base;
   1353d:	8b 45 08             	mov    0x8(%ebp),%eax
   13540:	8b 40 04             	mov    0x4(%eax),%eax
   13543:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 获取拷贝的源位置
  disp_char_t *src = console->disp_base + console->display_cols * lines;
   13546:	8b 45 08             	mov    0x8(%ebp),%eax
   13549:	8b 48 04             	mov    0x4(%eax),%ecx
   1354c:	8b 45 08             	mov    0x8(%ebp),%eax
   1354f:	8b 50 0c             	mov    0xc(%eax),%edx
   13552:	8b 45 0c             	mov    0xc(%ebp),%eax
   13555:	0f af c2             	imul   %edx,%eax
   13558:	01 c0                	add    %eax,%eax
   1355a:	01 c8                	add    %ecx,%eax
   1355c:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 获取拷贝的字节量
  uint32_t size = (console->display_rows - lines) * console->display_cols *
   1355f:	8b 45 08             	mov    0x8(%ebp),%eax
   13562:	8b 40 08             	mov    0x8(%eax),%eax
   13565:	8b 4d 0c             	mov    0xc(%ebp),%ecx
   13568:	29 c8                	sub    %ecx,%eax
   1356a:	89 c2                	mov    %eax,%edx
   1356c:	8b 45 08             	mov    0x8(%ebp),%eax
   1356f:	8b 40 0c             	mov    0xc(%eax),%eax
   13572:	0f af c2             	imul   %edx,%eax
   13575:	01 c0                	add    %eax,%eax
   13577:	89 45 ec             	mov    %eax,-0x14(%ebp)
                  sizeof(disp_char_t);

  // 拷贝
  kernel_memcpy(dest, src, size);
   1357a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1357d:	83 ec 04             	sub    $0x4,%esp
   13580:	50                   	push   %eax
   13581:	ff 75 f0             	push   -0x10(%ebp)
   13584:	ff 75 f4             	push   -0xc(%ebp)
   13587:	e8 31 2a 00 00       	call   15fbd <kernel_memcpy>
   1358c:	83 c4 10             	add    $0x10,%esp

  // 清除底部重复行
  erase_rows(console, console->display_rows - lines, console->display_rows - 1);
   1358f:	8b 45 08             	mov    0x8(%ebp),%eax
   13592:	8b 40 08             	mov    0x8(%eax),%eax
   13595:	83 e8 01             	sub    $0x1,%eax
   13598:	89 c2                	mov    %eax,%edx
   1359a:	8b 45 08             	mov    0x8(%ebp),%eax
   1359d:	8b 40 08             	mov    0x8(%eax),%eax
   135a0:	8b 4d 0c             	mov    0xc(%ebp),%ecx
   135a3:	29 c8                	sub    %ecx,%eax
   135a5:	83 ec 04             	sub    $0x4,%esp
   135a8:	52                   	push   %edx
   135a9:	50                   	push   %eax
   135aa:	ff 75 08             	push   0x8(%ebp)
   135ad:	e8 18 ff ff ff       	call   134ca <erase_rows>
   135b2:	83 c4 10             	add    $0x10,%esp

  // 光标回退到之前的最后一行的下一行
  console->cursor_row -= lines;
   135b5:	8b 45 08             	mov    0x8(%ebp),%eax
   135b8:	8b 40 10             	mov    0x10(%eax),%eax
   135bb:	8b 4d 0c             	mov    0xc(%ebp),%ecx
   135be:	29 c8                	sub    %ecx,%eax
   135c0:	89 c2                	mov    %eax,%edx
   135c2:	8b 45 08             	mov    0x8(%ebp),%eax
   135c5:	89 50 10             	mov    %edx,0x10(%eax)
}
   135c8:	90                   	nop
   135c9:	c9                   	leave  
   135ca:	c3                   	ret    

000135cb <move_to_col0>:
/**
 * @brief 将控制台光标移动到第0列
 *
 * @param console
 */
static inline void move_to_col0(console_t *console) { console->cursor_col = 0; }
   135cb:	55                   	push   %ebp
   135cc:	89 e5                	mov    %esp,%ebp
   135ce:	8b 45 08             	mov    0x8(%ebp),%eax
   135d1:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
   135d8:	90                   	nop
   135d9:	5d                   	pop    %ebp
   135da:	c3                   	ret    

000135db <move_to_next_line>:
/**
 * @brief 将控制台光标移动到下一行
 *
 * @param console
 */
static inline void move_to_next_line(console_t *console) {
   135db:	55                   	push   %ebp
   135dc:	89 e5                	mov    %esp,%ebp
   135de:	83 ec 08             	sub    $0x8,%esp
  console->cursor_row++;
   135e1:	8b 45 08             	mov    0x8(%ebp),%eax
   135e4:	8b 40 10             	mov    0x10(%eax),%eax
   135e7:	8d 50 01             	lea    0x1(%eax),%edx
   135ea:	8b 45 08             	mov    0x8(%ebp),%eax
   135ed:	89 50 10             	mov    %edx,0x10(%eax)
  // 当前行已经大于最大显示行数，屏幕需要进行上滚1行
  if (console->cursor_row >= console->display_rows) {
   135f0:	8b 45 08             	mov    0x8(%ebp),%eax
   135f3:	8b 50 10             	mov    0x10(%eax),%edx
   135f6:	8b 45 08             	mov    0x8(%ebp),%eax
   135f9:	8b 40 08             	mov    0x8(%eax),%eax
   135fc:	39 c2                	cmp    %eax,%edx
   135fe:	72 10                	jb     13610 <move_to_next_line+0x35>
    scroll_up(console, 1);
   13600:	83 ec 08             	sub    $0x8,%esp
   13603:	6a 01                	push   $0x1
   13605:	ff 75 08             	push   0x8(%ebp)
   13608:	e8 2a ff ff ff       	call   13537 <scroll_up>
   1360d:	83 c4 10             	add    $0x10,%esp
  }
}
   13610:	90                   	nop
   13611:	c9                   	leave  
   13612:	c3                   	ret    

00013613 <move_forward>:
 * @brief 将控制台console的光标迁移n个位置
 *
 * @param console
 * @param n
 */
static inline void move_forward(console_t *console, int n) {
   13613:	55                   	push   %ebp
   13614:	89 e5                	mov    %esp,%ebp
   13616:	83 ec 18             	sub    $0x18,%esp
  for (int i = 0; i < n; ++i) {
   13619:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   13620:	eb 5c                	jmp    1367e <move_forward+0x6b>
    if (++(console->cursor_col) >=
   13622:	8b 45 08             	mov    0x8(%ebp),%eax
   13625:	8b 40 14             	mov    0x14(%eax),%eax
   13628:	8d 50 01             	lea    0x1(%eax),%edx
   1362b:	8b 45 08             	mov    0x8(%ebp),%eax
   1362e:	89 50 14             	mov    %edx,0x14(%eax)
   13631:	8b 45 08             	mov    0x8(%ebp),%eax
   13634:	8b 50 14             	mov    0x14(%eax),%edx
        console->display_cols) {  // 光标达到最大列数，进行换行
   13637:	8b 45 08             	mov    0x8(%ebp),%eax
   1363a:	8b 40 0c             	mov    0xc(%eax),%eax
    if (++(console->cursor_col) >=
   1363d:	39 c2                	cmp    %eax,%edx
   1363f:	72 39                	jb     1367a <move_forward+0x67>
      console->cursor_row++;
   13641:	8b 45 08             	mov    0x8(%ebp),%eax
   13644:	8b 40 10             	mov    0x10(%eax),%eax
   13647:	8d 50 01             	lea    0x1(%eax),%edx
   1364a:	8b 45 08             	mov    0x8(%ebp),%eax
   1364d:	89 50 10             	mov    %edx,0x10(%eax)
      console->cursor_col = 0;
   13650:	8b 45 08             	mov    0x8(%ebp),%eax
   13653:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
      // 当前行已经大于最大显示行数，屏幕需要进行上滚1行
      if (console->cursor_row >= console->display_rows) {
   1365a:	8b 45 08             	mov    0x8(%ebp),%eax
   1365d:	8b 50 10             	mov    0x10(%eax),%edx
   13660:	8b 45 08             	mov    0x8(%ebp),%eax
   13663:	8b 40 08             	mov    0x8(%eax),%eax
   13666:	39 c2                	cmp    %eax,%edx
   13668:	72 10                	jb     1367a <move_forward+0x67>
        scroll_up(console, 1);
   1366a:	83 ec 08             	sub    $0x8,%esp
   1366d:	6a 01                	push   $0x1
   1366f:	ff 75 08             	push   0x8(%ebp)
   13672:	e8 c0 fe ff ff       	call   13537 <scroll_up>
   13677:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < n; ++i) {
   1367a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1367e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13681:	3b 45 0c             	cmp    0xc(%ebp),%eax
   13684:	7c 9c                	jl     13622 <move_forward+0xf>
      }
    }
  }
}
   13686:	90                   	nop
   13687:	90                   	nop
   13688:	c9                   	leave  
   13689:	c3                   	ret    

0001368a <show_char>:
 * @brief 将字符c显示到控制台console上
 *
 * @param console
 * @param c
 */
static inline void show_char(console_t *console, char c) {
   1368a:	55                   	push   %ebp
   1368b:	89 e5                	mov    %esp,%ebp
   1368d:	83 ec 28             	sub    $0x28,%esp
   13690:	8b 45 0c             	mov    0xc(%ebp),%eax
   13693:	88 45 e4             	mov    %al,-0x1c(%ebp)
  // 计算当前光标对应控制台在现存位置中的偏移量
  int offset =
      console->cursor_col + console->cursor_row * console->display_cols;
   13696:	8b 45 08             	mov    0x8(%ebp),%eax
   13699:	8b 48 14             	mov    0x14(%eax),%ecx
   1369c:	8b 45 08             	mov    0x8(%ebp),%eax
   1369f:	8b 50 10             	mov    0x10(%eax),%edx
   136a2:	8b 45 08             	mov    0x8(%ebp),%eax
   136a5:	8b 40 0c             	mov    0xc(%eax),%eax
   136a8:	0f af c2             	imul   %edx,%eax
   136ab:	01 c8                	add    %ecx,%eax
  int offset =
   136ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
  disp_char_t *p = console->disp_base + offset;
   136b0:	8b 45 08             	mov    0x8(%ebp),%eax
   136b3:	8b 50 04             	mov    0x4(%eax),%edx
   136b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   136b9:	01 c0                	add    %eax,%eax
   136bb:	01 d0                	add    %edx,%eax
   136bd:	89 45 f0             	mov    %eax,-0x10(%ebp)
  p->c = c;
   136c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   136c3:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
   136c7:	88 10                	mov    %dl,(%eax)
  p->foreground = console->foreground;
   136c9:	8b 45 08             	mov    0x8(%ebp),%eax
   136cc:	8b 40 18             	mov    0x18(%eax),%eax
   136cf:	c1 e0 04             	shl    $0x4,%eax
   136d2:	c0 f8 04             	sar    $0x4,%al
   136d5:	8b 55 f0             	mov    -0x10(%ebp),%edx
   136d8:	83 e0 0f             	and    $0xf,%eax
   136db:	89 c1                	mov    %eax,%ecx
   136dd:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   136e1:	83 e0 f0             	and    $0xfffffff0,%eax
   136e4:	09 c8                	or     %ecx,%eax
   136e6:	88 42 01             	mov    %al,0x1(%edx)
  p->background = console->background;
   136e9:	8b 45 08             	mov    0x8(%ebp),%eax
   136ec:	8b 40 1c             	mov    0x1c(%eax),%eax
   136ef:	c1 e0 05             	shl    $0x5,%eax
   136f2:	c0 f8 05             	sar    $0x5,%al
   136f5:	8b 55 f0             	mov    -0x10(%ebp),%edx
   136f8:	83 e0 07             	and    $0x7,%eax
   136fb:	c1 e0 04             	shl    $0x4,%eax
   136fe:	89 c1                	mov    %eax,%ecx
   13700:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   13704:	83 e0 8f             	and    $0xffffff8f,%eax
   13707:	09 c8                	or     %ecx,%eax
   13709:	88 42 01             	mov    %al,0x1(%edx)
  move_forward(console, 1);
   1370c:	83 ec 08             	sub    $0x8,%esp
   1370f:	6a 01                	push   $0x1
   13711:	ff 75 08             	push   0x8(%ebp)
   13714:	e8 fa fe ff ff       	call   13613 <move_forward>
   13719:	83 c4 10             	add    $0x10,%esp
}
   1371c:	90                   	nop
   1371d:	c9                   	leave  
   1371e:	c3                   	ret    

0001371f <move_backword>:
 *
 * @param console
 * @param n
 * @return int
 */
static inline int move_backword(console_t *console, int n) {
   1371f:	55                   	push   %ebp
   13720:	89 e5                	mov    %esp,%ebp
   13722:	83 ec 10             	sub    $0x10,%esp
  int status = -1;
   13725:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%ebp)
  for (int i = 0; i < n; ++i) {
   1372c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   13733:	eb 55                	jmp    1378a <move_backword+0x6b>
    if (console->cursor_col > 0) {  // 当前光标在行中，直接左移
   13735:	8b 45 08             	mov    0x8(%ebp),%eax
   13738:	8b 40 14             	mov    0x14(%eax),%eax
   1373b:	85 c0                	test   %eax,%eax
   1373d:	74 18                	je     13757 <move_backword+0x38>
      console->cursor_col--;
   1373f:	8b 45 08             	mov    0x8(%ebp),%eax
   13742:	8b 40 14             	mov    0x14(%eax),%eax
   13745:	8d 50 ff             	lea    -0x1(%eax),%edx
   13748:	8b 45 08             	mov    0x8(%ebp),%eax
   1374b:	89 50 14             	mov    %edx,0x14(%eax)
      status = 0;
   1374e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   13755:	eb 2f                	jmp    13786 <move_backword+0x67>
    } else if (console->cursor_row >
   13757:	8b 45 08             	mov    0x8(%ebp),%eax
   1375a:	8b 40 10             	mov    0x10(%eax),%eax
   1375d:	85 c0                	test   %eax,%eax
   1375f:	74 25                	je     13786 <move_backword+0x67>
               0) {  // 当前光标在行开头，若当前行不为第一行则可移动到上一行末尾
      console->cursor_row--;
   13761:	8b 45 08             	mov    0x8(%ebp),%eax
   13764:	8b 40 10             	mov    0x10(%eax),%eax
   13767:	8d 50 ff             	lea    -0x1(%eax),%edx
   1376a:	8b 45 08             	mov    0x8(%ebp),%eax
   1376d:	89 50 10             	mov    %edx,0x10(%eax)
      console->cursor_col = console->display_cols - 1;
   13770:	8b 45 08             	mov    0x8(%ebp),%eax
   13773:	8b 40 0c             	mov    0xc(%eax),%eax
   13776:	8d 50 ff             	lea    -0x1(%eax),%edx
   13779:	8b 45 08             	mov    0x8(%ebp),%eax
   1377c:	89 50 14             	mov    %edx,0x14(%eax)
      status = 0;
   1377f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  for (int i = 0; i < n; ++i) {
   13786:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   1378a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1378d:	3b 45 0c             	cmp    0xc(%ebp),%eax
   13790:	7c a3                	jl     13735 <move_backword+0x16>
    }
  }

  return status;
   13792:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   13795:	c9                   	leave  
   13796:	c3                   	ret    

00013797 <erase_backword>:
/**
 * @brief 往左擦除一个字符
 *
 * @param console
 */
static inline void erase_backword(console_t *console) {
   13797:	55                   	push   %ebp
   13798:	89 e5                	mov    %esp,%ebp
   1379a:	83 ec 08             	sub    $0x8,%esp
  if (move_backword(console, 1) == 0) {  // 左移成功
   1379d:	6a 01                	push   $0x1
   1379f:	ff 75 08             	push   0x8(%ebp)
   137a2:	e8 78 ff ff ff       	call   1371f <move_backword>
   137a7:	83 c4 08             	add    $0x8,%esp
   137aa:	85 c0                	test   %eax,%eax
   137ac:	75 20                	jne    137ce <erase_backword+0x37>
    show_char(console, ' ');             // 用空格覆盖需要擦除的字符
   137ae:	83 ec 08             	sub    $0x8,%esp
   137b1:	6a 20                	push   $0x20
   137b3:	ff 75 08             	push   0x8(%ebp)
   137b6:	e8 cf fe ff ff       	call   1368a <show_char>
   137bb:	83 c4 10             	add    $0x10,%esp
    move_backword(console, 1);           // 再左移一位实现擦除
   137be:	83 ec 08             	sub    $0x8,%esp
   137c1:	6a 01                	push   $0x1
   137c3:	ff 75 08             	push   0x8(%ebp)
   137c6:	e8 54 ff ff ff       	call   1371f <move_backword>
   137cb:	83 c4 10             	add    $0x10,%esp
  }
}
   137ce:	90                   	nop
   137cf:	c9                   	leave  
   137d0:	c3                   	ret    

000137d1 <clear_display>:
/**
 * @brief 清空屏幕
 *
 * @param console
 */
static inline void clear_display(console_t *console) {
   137d1:	55                   	push   %ebp
   137d2:	89 e5                	mov    %esp,%ebp
   137d4:	83 ec 10             	sub    $0x10,%esp
  int size = console->display_cols * console->display_rows;
   137d7:	8b 45 08             	mov    0x8(%ebp),%eax
   137da:	8b 50 0c             	mov    0xc(%eax),%edx
   137dd:	8b 45 08             	mov    0x8(%ebp),%eax
   137e0:	8b 40 08             	mov    0x8(%eax),%eax
   137e3:	0f af c2             	imul   %edx,%eax
   137e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
  disp_char_t *start = console->disp_base;
   137e9:	8b 45 08             	mov    0x8(%ebp),%eax
   137ec:	8b 40 04             	mov    0x4(%eax),%eax
   137ef:	89 45 fc             	mov    %eax,-0x4(%ebp)
  for (int i = 0; i < size; ++i, ++start) {
   137f2:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   137f9:	eb 51                	jmp    1384c <clear_display+0x7b>
    start->c = ' ';
   137fb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   137fe:	c6 00 20             	movb   $0x20,(%eax)
    start->foreground = console->foreground;
   13801:	8b 45 08             	mov    0x8(%ebp),%eax
   13804:	8b 40 18             	mov    0x18(%eax),%eax
   13807:	c1 e0 04             	shl    $0x4,%eax
   1380a:	c0 f8 04             	sar    $0x4,%al
   1380d:	8b 55 fc             	mov    -0x4(%ebp),%edx
   13810:	83 e0 0f             	and    $0xf,%eax
   13813:	89 c1                	mov    %eax,%ecx
   13815:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   13819:	83 e0 f0             	and    $0xfffffff0,%eax
   1381c:	09 c8                	or     %ecx,%eax
   1381e:	88 42 01             	mov    %al,0x1(%edx)
    start->background = console->background;
   13821:	8b 45 08             	mov    0x8(%ebp),%eax
   13824:	8b 40 1c             	mov    0x1c(%eax),%eax
   13827:	c1 e0 05             	shl    $0x5,%eax
   1382a:	c0 f8 05             	sar    $0x5,%al
   1382d:	8b 55 fc             	mov    -0x4(%ebp),%edx
   13830:	83 e0 07             	and    $0x7,%eax
   13833:	c1 e0 04             	shl    $0x4,%eax
   13836:	89 c1                	mov    %eax,%ecx
   13838:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   1383c:	83 e0 8f             	and    $0xffffff8f,%eax
   1383f:	09 c8                	or     %ecx,%eax
   13841:	88 42 01             	mov    %al,0x1(%edx)
  for (int i = 0; i < size; ++i, ++start) {
   13844:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   13848:	83 45 fc 02          	addl   $0x2,-0x4(%ebp)
   1384c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1384f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
   13852:	7c a7                	jl     137fb <clear_display+0x2a>
  }
}
   13854:	90                   	nop
   13855:	90                   	nop
   13856:	c9                   	leave  
   13857:	c3                   	ret    

00013858 <print_table>:

/**
 * @brief 打印一个制表符\t
 * 
 */
static void print_table(console_t *console) {
   13858:	55                   	push   %ebp
   13859:	89 e5                	mov    %esp,%ebp
   1385b:	83 ec 18             	sub    $0x18,%esp

  int supplement_col = 4 - console->cursor_col % 4;
   1385e:	8b 45 08             	mov    0x8(%ebp),%eax
   13861:	8b 40 14             	mov    0x14(%eax),%eax
   13864:	83 e0 03             	and    $0x3,%eax
   13867:	89 c2                	mov    %eax,%edx
   13869:	b8 04 00 00 00       	mov    $0x4,%eax
   1386e:	29 d0                	sub    %edx,%eax
   13870:	89 45 f0             	mov    %eax,-0x10(%ebp)

  for (int i = 0; i < supplement_col; ++i) {
   13873:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1387a:	eb 14                	jmp    13890 <print_table+0x38>
    show_char(console, ' ');
   1387c:	83 ec 08             	sub    $0x8,%esp
   1387f:	6a 20                	push   $0x20
   13881:	ff 75 08             	push   0x8(%ebp)
   13884:	e8 01 fe ff ff       	call   1368a <show_char>
   13889:	83 c4 10             	add    $0x10,%esp
  for (int i = 0; i < supplement_col; ++i) {
   1388c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   13890:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13893:	3b 45 f0             	cmp    -0x10(%ebp),%eax
   13896:	7c e4                	jl     1387c <print_table+0x24>
  }

  update_cursor_pos(console);
   13898:	83 ec 0c             	sub    $0xc,%esp
   1389b:	ff 75 08             	push   0x8(%ebp)
   1389e:	e8 81 fb ff ff       	call   13424 <update_cursor_pos>
   138a3:	83 c4 10             	add    $0x10,%esp
}
   138a6:	90                   	nop
   138a7:	c9                   	leave  
   138a8:	c3                   	ret    

000138a9 <console_init>:
/**
 * @brief 初始化控制台
 *
 * @return int
 */
int console_init(int index) {
   138a9:	55                   	push   %ebp
   138aa:	89 e5                	mov    %esp,%ebp
   138ac:	83 ec 18             	sub    $0x18,%esp
  // 获取对应console，并进行初始化
  console_t *console = console_table + index;
   138af:	8b 45 08             	mov    0x8(%ebp),%eax
   138b2:	6b c0 54             	imul   $0x54,%eax,%eax
   138b5:	05 00 b4 04 00       	add    $0x4b400,%eax
   138ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
  console->display_rows = CONSOLE_ROW_MAX;
   138bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   138c0:	c7 40 08 19 00 00 00 	movl   $0x19,0x8(%eax)
  console->display_cols = CONSOLE_CLO_MAX;
   138c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   138ca:	c7 40 0c 50 00 00 00 	movl   $0x50,0xc(%eax)
  console->foreground = COLOR_White;
   138d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   138d4:	c7 40 18 0f 00 00 00 	movl   $0xf,0x18(%eax)
  console->background = COLOR_Black;
   138db:	8b 45 f4             	mov    -0xc(%ebp),%eax
   138de:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)

  // 初始化光标位置
  if (index == 0) {  // 保留bios在第一个console的输出信息
   138e5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   138e9:	75 38                	jne    13923 <console_init+0x7a>
    int cursor_pos = read_cursor_pos();
   138eb:	e8 c0 fa ff ff       	call   133b0 <read_cursor_pos>
   138f0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    console->cursor_row = cursor_pos / console->display_cols;
   138f3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   138f6:	8b 55 f4             	mov    -0xc(%ebp),%edx
   138f9:	8b 4a 0c             	mov    0xc(%edx),%ecx
   138fc:	ba 00 00 00 00       	mov    $0x0,%edx
   13901:	f7 f1                	div    %ecx
   13903:	89 c2                	mov    %eax,%edx
   13905:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13908:	89 50 10             	mov    %edx,0x10(%eax)
    console->cursor_col = cursor_pos % console->display_cols;
   1390b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1390e:	8b 55 f4             	mov    -0xc(%ebp),%edx
   13911:	8b 4a 0c             	mov    0xc(%edx),%ecx
   13914:	ba 00 00 00 00       	mov    $0x0,%edx
   13919:	f7 f1                	div    %ecx
   1391b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1391e:	89 50 14             	mov    %edx,0x14(%eax)
   13921:	eb 22                	jmp    13945 <console_init+0x9c>
  } else {  // 清空其它console，并将光标放在起始位置
    console->cursor_col = 0;
   13923:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13926:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    console->cursor_row = 0;
   1392d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13930:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    clear_display(console);
   13937:	83 ec 0c             	sub    $0xc,%esp
   1393a:	ff 75 f4             	push   -0xc(%ebp)
   1393d:	e8 8f fe ff ff       	call   137d1 <clear_display>
   13942:	83 c4 10             	add    $0x10,%esp
    //update_cursor_pos(console);
  }

  // 初始化上一次光标位置
  console->old_cursor_col = console->cursor_col;
   13945:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13948:	8b 50 14             	mov    0x14(%eax),%edx
   1394b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1394e:	89 50 20             	mov    %edx,0x20(%eax)
  console->old_cursor_row = console->cursor_row;
   13951:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13954:	8b 50 10             	mov    0x10(%eax),%edx
   13957:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1395a:	89 50 24             	mov    %edx,0x24(%eax)

  // 初始化esc序列的参数数组
  kernel_memset(console->esc_param, 0, sizeof(int) * ESC_PARAM_MAX);
   1395d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13960:	83 c0 28             	add    $0x28,%eax
   13963:	83 ec 04             	sub    $0x4,%esp
   13966:	6a 28                	push   $0x28
   13968:	6a 00                	push   $0x0
   1396a:	50                   	push   %eax
   1396b:	e8 9c 26 00 00       	call   1600c <kernel_memset>
   13970:	83 c4 10             	add    $0x10,%esp
  console->curr_param_index = 0;
   13973:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13976:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)

  // 初始化终端写入的状态
  console->write_state = CONSOLE_WRITE_NORMAL;
   1397d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13980:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

  // 计算每个终端在现存中的起始地址
  console->disp_base = (disp_char_t *)CONSOLE_DISP_START_ADDR +
   13986:	8b 45 08             	mov    0x8(%ebp),%eax
   13989:	69 c0 a0 0f 00 00    	imul   $0xfa0,%eax,%eax
   1398f:	8d 90 00 80 0b 00    	lea    0xb8000(%eax),%edx
   13995:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13998:	89 50 04             	mov    %edx,0x4(%eax)
                       (index * CONSOLE_CLO_MAX * CONSOLE_ROW_MAX);

  return 0;
   1399b:	b8 00 00 00 00       	mov    $0x0,%eax
}
   139a0:	c9                   	leave  
   139a1:	c3                   	ret    

000139a2 <write_normal>:
 * @brief 终端写普通字符的策略
 *
 * @param console
 * @param c
 */
static inline void write_normal(console_t *console, char c) {
   139a2:	55                   	push   %ebp
   139a3:	89 e5                	mov    %esp,%ebp
   139a5:	83 ec 18             	sub    $0x18,%esp
   139a8:	8b 45 0c             	mov    0xc(%ebp),%eax
   139ab:	88 45 f4             	mov    %al,-0xc(%ebp)
  switch (c) {
   139ae:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
   139b2:	83 f8 1b             	cmp    $0x1b,%eax
   139b5:	7f 16                	jg     139cd <write_normal+0x2b>
   139b7:	83 f8 08             	cmp    $0x8,%eax
   139ba:	7c 75                	jl     13a31 <write_normal+0x8f>
   139bc:	83 e8 08             	sub    $0x8,%eax
   139bf:	83 f8 13             	cmp    $0x13,%eax
   139c2:	77 6d                	ja     13a31 <write_normal+0x8f>
   139c4:	8b 04 85 20 74 01 00 	mov    0x17420(,%eax,4),%eax
   139cb:	ff e0                	jmp    *%eax
   139cd:	83 f8 7f             	cmp    $0x7f,%eax
   139d0:	74 0d                	je     139df <write_normal+0x3d>
   139d2:	eb 5d                	jmp    13a31 <write_normal+0x8f>
    case ASCII_ESC:
      console->write_state = CONSOLE_WRITE_ESC;
   139d4:	8b 45 08             	mov    0x8(%ebp),%eax
   139d7:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
      break;
   139dd:	eb 72                	jmp    13a51 <write_normal+0xaf>
    case 0x7f:  // 退格
      erase_backword(console);
   139df:	83 ec 0c             	sub    $0xc,%esp
   139e2:	ff 75 08             	push   0x8(%ebp)
   139e5:	e8 ad fd ff ff       	call   13797 <erase_backword>
   139ea:	83 c4 10             	add    $0x10,%esp
      break;
   139ed:	eb 62                	jmp    13a51 <write_normal+0xaf>
    case '\b':  // 光标左移一位
      move_backword(console, 1);
   139ef:	83 ec 08             	sub    $0x8,%esp
   139f2:	6a 01                	push   $0x1
   139f4:	ff 75 08             	push   0x8(%ebp)
   139f7:	e8 23 fd ff ff       	call   1371f <move_backword>
   139fc:	83 c4 10             	add    $0x10,%esp
      break;
   139ff:	eb 50                	jmp    13a51 <write_normal+0xaf>
    case '\t':  //制表符，4个空格大小
      print_table(console);
   13a01:	83 ec 0c             	sub    $0xc,%esp
   13a04:	ff 75 08             	push   0x8(%ebp)
   13a07:	e8 4c fe ff ff       	call   13858 <print_table>
   13a0c:	83 c4 10             	add    $0x10,%esp
      break;
   13a0f:	eb 40                	jmp    13a51 <write_normal+0xaf>
    case '\r':  // 回车
      move_to_col0(console);
   13a11:	83 ec 0c             	sub    $0xc,%esp
   13a14:	ff 75 08             	push   0x8(%ebp)
   13a17:	e8 af fb ff ff       	call   135cb <move_to_col0>
   13a1c:	83 c4 10             	add    $0x10,%esp
      break;
   13a1f:	eb 30                	jmp    13a51 <write_normal+0xaf>
    case '\n':  // 换行
      // move_to_col0(console);
      move_to_next_line(console);
   13a21:	83 ec 0c             	sub    $0xc,%esp
   13a24:	ff 75 08             	push   0x8(%ebp)
   13a27:	e8 af fb ff ff       	call   135db <move_to_next_line>
   13a2c:	83 c4 10             	add    $0x10,%esp
      break;
   13a2f:	eb 20                	jmp    13a51 <write_normal+0xaf>
    default:
      if (c >= ' ' && c <= '~') {  // 可显示字符的范围
   13a31:	80 7d f4 1f          	cmpb   $0x1f,-0xc(%ebp)
   13a35:	7e 19                	jle    13a50 <write_normal+0xae>
   13a37:	80 7d f4 7f          	cmpb   $0x7f,-0xc(%ebp)
   13a3b:	74 13                	je     13a50 <write_normal+0xae>
        show_char(console, c);
   13a3d:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
   13a41:	83 ec 08             	sub    $0x8,%esp
   13a44:	50                   	push   %eax
   13a45:	ff 75 08             	push   0x8(%ebp)
   13a48:	e8 3d fc ff ff       	call   1368a <show_char>
   13a4d:	83 c4 10             	add    $0x10,%esp
      }
      break;
   13a50:	90                   	nop
  }
}
   13a51:	90                   	nop
   13a52:	c9                   	leave  
   13a53:	c3                   	ret    

00013a54 <save_cursor>:
/**
 * @brief 保存光标当前位置
 *
 * @param console
 */
static inline void save_cursor(console_t *console) {
   13a54:	55                   	push   %ebp
   13a55:	89 e5                	mov    %esp,%ebp
  console->old_cursor_col = console->cursor_col;
   13a57:	8b 45 08             	mov    0x8(%ebp),%eax
   13a5a:	8b 50 14             	mov    0x14(%eax),%edx
   13a5d:	8b 45 08             	mov    0x8(%ebp),%eax
   13a60:	89 50 20             	mov    %edx,0x20(%eax)
  console->old_cursor_row = console->cursor_row;
   13a63:	8b 45 08             	mov    0x8(%ebp),%eax
   13a66:	8b 50 10             	mov    0x10(%eax),%edx
   13a69:	8b 45 08             	mov    0x8(%ebp),%eax
   13a6c:	89 50 24             	mov    %edx,0x24(%eax)
}
   13a6f:	90                   	nop
   13a70:	5d                   	pop    %ebp
   13a71:	c3                   	ret    

00013a72 <restore_cursor>:
/**
 * @brief 恢复光标位置
 *
 * @param console
 */
static inline void restore_cursor(console_t *console) {
   13a72:	55                   	push   %ebp
   13a73:	89 e5                	mov    %esp,%ebp
  console->cursor_col = console->old_cursor_col;
   13a75:	8b 45 08             	mov    0x8(%ebp),%eax
   13a78:	8b 50 20             	mov    0x20(%eax),%edx
   13a7b:	8b 45 08             	mov    0x8(%ebp),%eax
   13a7e:	89 50 14             	mov    %edx,0x14(%eax)
  console->cursor_row = console->old_cursor_row;
   13a81:	8b 45 08             	mov    0x8(%ebp),%eax
   13a84:	8b 50 24             	mov    0x24(%eax),%edx
   13a87:	8b 45 08             	mov    0x8(%ebp),%eax
   13a8a:	89 50 10             	mov    %edx,0x10(%eax)
}
   13a8d:	90                   	nop
   13a8e:	5d                   	pop    %ebp
   13a8f:	c3                   	ret    

00013a90 <clear_esc_param>:
/**
 * @brief 清空esc参数缓冲数组
 *
 * @param console
 */
static inline void clear_esc_param(console_t *console) {
   13a90:	55                   	push   %ebp
   13a91:	89 e5                	mov    %esp,%ebp
   13a93:	83 ec 08             	sub    $0x8,%esp
  kernel_memset(console->esc_param, 0, sizeof(int) * ESC_PARAM_MAX);
   13a96:	8b 45 08             	mov    0x8(%ebp),%eax
   13a99:	83 c0 28             	add    $0x28,%eax
   13a9c:	83 ec 04             	sub    $0x4,%esp
   13a9f:	6a 28                	push   $0x28
   13aa1:	6a 00                	push   $0x0
   13aa3:	50                   	push   %eax
   13aa4:	e8 63 25 00 00       	call   1600c <kernel_memset>
   13aa9:	83 c4 10             	add    $0x10,%esp
  console->curr_param_index = 0;
   13aac:	8b 45 08             	mov    0x8(%ebp),%eax
   13aaf:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
}
   13ab6:	90                   	nop
   13ab7:	c9                   	leave  
   13ab8:	c3                   	ret    

00013ab9 <write_esc>:
 * @brief 终端写ESC字符的策略
 *
 * @param console
 * @param c
 */
static inline void write_esc(console_t *console, char c) {
   13ab9:	55                   	push   %ebp
   13aba:	89 e5                	mov    %esp,%ebp
   13abc:	83 ec 18             	sub    $0x18,%esp
   13abf:	8b 45 0c             	mov    0xc(%ebp),%eax
   13ac2:	88 45 f4             	mov    %al,-0xc(%ebp)
  switch (c) {
   13ac5:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
   13ac9:	83 f8 5b             	cmp    $0x5b,%eax
   13acc:	74 11                	je     13adf <write_esc+0x26>
   13ace:	83 f8 5b             	cmp    $0x5b,%eax
   13ad1:	7f 57                	jg     13b2a <write_esc+0x71>
   13ad3:	83 f8 37             	cmp    $0x37,%eax
   13ad6:	74 20                	je     13af8 <write_esc+0x3f>
   13ad8:	83 f8 38             	cmp    $0x38,%eax
   13adb:	74 34                	je     13b11 <write_esc+0x58>
   13add:	eb 4b                	jmp    13b2a <write_esc+0x71>
    case '[':
      clear_esc_param(console);
   13adf:	83 ec 0c             	sub    $0xc,%esp
   13ae2:	ff 75 08             	push   0x8(%ebp)
   13ae5:	e8 a6 ff ff ff       	call   13a90 <clear_esc_param>
   13aea:	83 c4 10             	add    $0x10,%esp
      console->write_state = CONSOLE_WRITE_ESC_SQUARE;
   13aed:	8b 45 08             	mov    0x8(%ebp),%eax
   13af0:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
      break;
   13af6:	eb 3c                	jmp    13b34 <write_esc+0x7b>
    case '7':
      save_cursor(console);
   13af8:	83 ec 0c             	sub    $0xc,%esp
   13afb:	ff 75 08             	push   0x8(%ebp)
   13afe:	e8 51 ff ff ff       	call   13a54 <save_cursor>
   13b03:	83 c4 10             	add    $0x10,%esp
      console->write_state = CONSOLE_WRITE_NORMAL;
   13b06:	8b 45 08             	mov    0x8(%ebp),%eax
   13b09:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      break;
   13b0f:	eb 23                	jmp    13b34 <write_esc+0x7b>
    case '8':
      restore_cursor(console);
   13b11:	83 ec 0c             	sub    $0xc,%esp
   13b14:	ff 75 08             	push   0x8(%ebp)
   13b17:	e8 56 ff ff ff       	call   13a72 <restore_cursor>
   13b1c:	83 c4 10             	add    $0x10,%esp
      console->write_state = CONSOLE_WRITE_NORMAL;
   13b1f:	8b 45 08             	mov    0x8(%ebp),%eax
   13b22:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      break;
   13b28:	eb 0a                	jmp    13b34 <write_esc+0x7b>
    default:
      console->write_state = CONSOLE_WRITE_NORMAL;
   13b2a:	8b 45 08             	mov    0x8(%ebp),%eax
   13b2d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      break;
   13b33:	90                   	nop
  }
}
   13b34:	90                   	nop
   13b35:	c9                   	leave  
   13b36:	c3                   	ret    

00013b37 <set_font_style>:
/**
 * @brief 根据esc参数设置字符的风格
 *
 * @param console
 */
static inline void set_font_style(console_t *console) {
   13b37:	55                   	push   %ebp
   13b38:	89 e5                	mov    %esp,%ebp
   13b3a:	83 ec 10             	sub    $0x10,%esp
  static const color_t color_table[] = {COLOR_Black,  COLOR_Red,  COLOR_Green,
                                        COLOR_Yellow, COLOR_Blue, COLOR_Magenta,
                                        COLOR_Cyan,   COLOR_White};
  for (int i = 0; i <= console->curr_param_index; ++i) {
   13b3d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   13b44:	eb 78                	jmp    13bbe <set_font_style+0x87>
    int param = console->esc_param[i];
   13b46:	8b 45 08             	mov    0x8(%ebp),%eax
   13b49:	8b 55 fc             	mov    -0x4(%ebp),%edx
   13b4c:	83 c2 08             	add    $0x8,%edx
   13b4f:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   13b53:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if (param >= 30 && param <= 37) {
   13b56:	83 7d f8 1d          	cmpl   $0x1d,-0x8(%ebp)
   13b5a:	7e 1b                	jle    13b77 <set_font_style+0x40>
   13b5c:	83 7d f8 25          	cmpl   $0x25,-0x8(%ebp)
   13b60:	7f 15                	jg     13b77 <set_font_style+0x40>
      console->foreground = color_table[param - 30];
   13b62:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13b65:	83 e8 1e             	sub    $0x1e,%eax
   13b68:	8b 14 85 80 74 01 00 	mov    0x17480(,%eax,4),%edx
   13b6f:	8b 45 08             	mov    0x8(%ebp),%eax
   13b72:	89 50 18             	mov    %edx,0x18(%eax)
   13b75:	eb 43                	jmp    13bba <set_font_style+0x83>
    } else if (param >= 40 && param <= 47) {
   13b77:	83 7d f8 27          	cmpl   $0x27,-0x8(%ebp)
   13b7b:	7e 1b                	jle    13b98 <set_font_style+0x61>
   13b7d:	83 7d f8 2f          	cmpl   $0x2f,-0x8(%ebp)
   13b81:	7f 15                	jg     13b98 <set_font_style+0x61>
      console->background = color_table[param - 40];
   13b83:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13b86:	83 e8 28             	sub    $0x28,%eax
   13b89:	8b 14 85 80 74 01 00 	mov    0x17480(,%eax,4),%edx
   13b90:	8b 45 08             	mov    0x8(%ebp),%eax
   13b93:	89 50 1c             	mov    %edx,0x1c(%eax)
   13b96:	eb 22                	jmp    13bba <set_font_style+0x83>
    } else if (param == 39) {
   13b98:	83 7d f8 27          	cmpl   $0x27,-0x8(%ebp)
   13b9c:	75 0c                	jne    13baa <set_font_style+0x73>
      console->foreground = COLOR_White;
   13b9e:	8b 45 08             	mov    0x8(%ebp),%eax
   13ba1:	c7 40 18 0f 00 00 00 	movl   $0xf,0x18(%eax)
   13ba8:	eb 10                	jmp    13bba <set_font_style+0x83>
    } else if (param == 49) {
   13baa:	83 7d f8 31          	cmpl   $0x31,-0x8(%ebp)
   13bae:	75 0a                	jne    13bba <set_font_style+0x83>
      console->background = COLOR_Black;
   13bb0:	8b 45 08             	mov    0x8(%ebp),%eax
   13bb3:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
  for (int i = 0; i <= console->curr_param_index; ++i) {
   13bba:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   13bbe:	8b 45 08             	mov    0x8(%ebp),%eax
   13bc1:	8b 40 50             	mov    0x50(%eax),%eax
   13bc4:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   13bc7:	0f 8e 79 ff ff ff    	jle    13b46 <set_font_style+0xf>
    }
  }
}
   13bcd:	90                   	nop
   13bce:	90                   	nop
   13bcf:	c9                   	leave  
   13bd0:	c3                   	ret    

00013bd1 <erase_in_display>:
/**
 * @brief 擦除屏幕指定区域
 *
 * @param console
 */
static inline void erase_in_display(console_t *console) {
   13bd1:	55                   	push   %ebp
   13bd2:	89 e5                	mov    %esp,%ebp
   13bd4:	83 ec 10             	sub    $0x10,%esp
  if (console->curr_param_index < 0) {
   13bd7:	8b 45 08             	mov    0x8(%ebp),%eax
   13bda:	8b 40 50             	mov    0x50(%eax),%eax
   13bdd:	85 c0                	test   %eax,%eax
   13bdf:	78 3c                	js     13c1d <erase_in_display+0x4c>
    return;
  }

  int param = console->esc_param[0];
   13be1:	8b 45 08             	mov    0x8(%ebp),%eax
   13be4:	8b 40 28             	mov    0x28(%eax),%eax
   13be7:	89 45 fc             	mov    %eax,-0x4(%ebp)
  if (param == 2) {  // 擦除整个屏幕
   13bea:	83 7d fc 02          	cmpl   $0x2,-0x4(%ebp)
   13bee:	75 2e                	jne    13c1e <erase_in_display+0x4d>
    erase_rows(console, 0, console->display_rows - 1);
   13bf0:	8b 45 08             	mov    0x8(%ebp),%eax
   13bf3:	8b 40 08             	mov    0x8(%eax),%eax
   13bf6:	83 e8 01             	sub    $0x1,%eax
   13bf9:	50                   	push   %eax
   13bfa:	6a 00                	push   $0x0
   13bfc:	ff 75 08             	push   0x8(%ebp)
   13bff:	e8 c6 f8 ff ff       	call   134ca <erase_rows>
   13c04:	83 c4 0c             	add    $0xc,%esp
    console->cursor_col = 0;
   13c07:	8b 45 08             	mov    0x8(%ebp),%eax
   13c0a:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    console->cursor_row = 0;
   13c11:	8b 45 08             	mov    0x8(%ebp),%eax
   13c14:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
   13c1b:	eb 01                	jmp    13c1e <erase_in_display+0x4d>
    return;
   13c1d:	90                   	nop
  }
}
   13c1e:	c9                   	leave  
   13c1f:	c3                   	ret    

00013c20 <move_cursor>:
/**
 * @brief 移动光标到指定位置
 *
 * @param console
 */
static inline void move_cursor(console_t *console) {
   13c20:	55                   	push   %ebp
   13c21:	89 e5                	mov    %esp,%ebp
  console->cursor_row = console->esc_param[0];
   13c23:	8b 45 08             	mov    0x8(%ebp),%eax
   13c26:	8b 40 28             	mov    0x28(%eax),%eax
   13c29:	89 c2                	mov    %eax,%edx
   13c2b:	8b 45 08             	mov    0x8(%ebp),%eax
   13c2e:	89 50 10             	mov    %edx,0x10(%eax)
  console->cursor_col = console->esc_param[1];
   13c31:	8b 45 08             	mov    0x8(%ebp),%eax
   13c34:	8b 40 2c             	mov    0x2c(%eax),%eax
   13c37:	89 c2                	mov    %eax,%edx
   13c39:	8b 45 08             	mov    0x8(%ebp),%eax
   13c3c:	89 50 14             	mov    %edx,0x14(%eax)
}
   13c3f:	90                   	nop
   13c40:	5d                   	pop    %ebp
   13c41:	c3                   	ret    

00013c42 <move_left>:
 * @brief 将光标左移n位
 *
 * @param console
 * @param n
 */
static inline void move_left(console_t *console, int n) {
   13c42:	55                   	push   %ebp
   13c43:	89 e5                	mov    %esp,%ebp
   13c45:	83 ec 10             	sub    $0x10,%esp
  if (n == 0) {  // 默认至少移动一位
   13c48:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13c4c:	75 07                	jne    13c55 <move_left+0x13>
    n = 1;
   13c4e:	c7 45 0c 01 00 00 00 	movl   $0x1,0xc(%ebp)
  }

  int col = console->cursor_col - n;
   13c55:	8b 45 08             	mov    0x8(%ebp),%eax
   13c58:	8b 40 14             	mov    0x14(%eax),%eax
   13c5b:	8b 55 0c             	mov    0xc(%ebp),%edx
   13c5e:	29 d0                	sub    %edx,%eax
   13c60:	89 45 fc             	mov    %eax,-0x4(%ebp)
  console->cursor_col = (col > 0) ? col : 0;
   13c63:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13c66:	ba 00 00 00 00       	mov    $0x0,%edx
   13c6b:	85 c0                	test   %eax,%eax
   13c6d:	0f 48 c2             	cmovs  %edx,%eax
   13c70:	89 c2                	mov    %eax,%edx
   13c72:	8b 45 08             	mov    0x8(%ebp),%eax
   13c75:	89 50 14             	mov    %edx,0x14(%eax)
}
   13c78:	90                   	nop
   13c79:	c9                   	leave  
   13c7a:	c3                   	ret    

00013c7b <move_right>:
 * @brief 将光标右移n位
 *
 * @param console
 * @param n
 */
static inline void move_right(console_t *console, int n) {
   13c7b:	55                   	push   %ebp
   13c7c:	89 e5                	mov    %esp,%ebp
   13c7e:	83 ec 10             	sub    $0x10,%esp
  if (n == 0) {  // 默认至少移动一位
   13c81:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13c85:	75 07                	jne    13c8e <move_right+0x13>
    n = 1;
   13c87:	c7 45 0c 01 00 00 00 	movl   $0x1,0xc(%ebp)
  }

  int col = console->cursor_col + n;
   13c8e:	8b 45 08             	mov    0x8(%ebp),%eax
   13c91:	8b 50 14             	mov    0x14(%eax),%edx
   13c94:	8b 45 0c             	mov    0xc(%ebp),%eax
   13c97:	01 d0                	add    %edx,%eax
   13c99:	89 45 fc             	mov    %eax,-0x4(%ebp)
  console->cursor_col =
      (col >= console->display_cols) ? console->display_cols - 1 : col;
   13c9c:	8b 45 08             	mov    0x8(%ebp),%eax
   13c9f:	8b 50 0c             	mov    0xc(%eax),%edx
   13ca2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13ca5:	39 c2                	cmp    %eax,%edx
   13ca7:	77 0b                	ja     13cb4 <move_right+0x39>
   13ca9:	8b 45 08             	mov    0x8(%ebp),%eax
   13cac:	8b 40 0c             	mov    0xc(%eax),%eax
   13caf:	83 e8 01             	sub    $0x1,%eax
   13cb2:	eb 03                	jmp    13cb7 <move_right+0x3c>
   13cb4:	8b 45 fc             	mov    -0x4(%ebp),%eax
  console->cursor_col =
   13cb7:	8b 55 08             	mov    0x8(%ebp),%edx
   13cba:	89 42 14             	mov    %eax,0x14(%edx)
}
   13cbd:	90                   	nop
   13cbe:	c9                   	leave  
   13cbf:	c3                   	ret    

00013cc0 <write_esc_square>:
 * @brief 在终端console中写入esc序列
 *
 * @param console
 * @param c
 */
static inline void write_esc_square(console_t *console, char c) {
   13cc0:	55                   	push   %ebp
   13cc1:	89 e5                	mov    %esp,%ebp
   13cc3:	83 ec 14             	sub    $0x14,%esp
   13cc6:	8b 45 0c             	mov    0xc(%ebp),%eax
   13cc9:	88 45 ec             	mov    %al,-0x14(%ebp)
  if (c >= '0' && c <= '9') {  // 解析出序列的参数
   13ccc:	80 7d ec 2f          	cmpb   $0x2f,-0x14(%ebp)
   13cd0:	7e 44                	jle    13d16 <write_esc_square+0x56>
   13cd2:	80 7d ec 39          	cmpb   $0x39,-0x14(%ebp)
   13cd6:	7f 3e                	jg     13d16 <write_esc_square+0x56>
    int *param = &console->esc_param[console->curr_param_index];
   13cd8:	8b 45 08             	mov    0x8(%ebp),%eax
   13cdb:	8b 40 50             	mov    0x50(%eax),%eax
   13cde:	83 c0 08             	add    $0x8,%eax
   13ce1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   13ce8:	8b 45 08             	mov    0x8(%ebp),%eax
   13ceb:	01 d0                	add    %edx,%eax
   13ced:	83 c0 08             	add    $0x8,%eax
   13cf0:	89 45 fc             	mov    %eax,-0x4(%ebp)
    *param = (*param) * 10 + c - '0';
   13cf3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13cf6:	8b 10                	mov    (%eax),%edx
   13cf8:	89 d0                	mov    %edx,%eax
   13cfa:	c1 e0 02             	shl    $0x2,%eax
   13cfd:	01 d0                	add    %edx,%eax
   13cff:	01 c0                	add    %eax,%eax
   13d01:	89 c2                	mov    %eax,%edx
   13d03:	0f be 45 ec          	movsbl -0x14(%ebp),%eax
   13d07:	01 d0                	add    %edx,%eax
   13d09:	8d 50 d0             	lea    -0x30(%eax),%edx
   13d0c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13d0f:	89 10                	mov    %edx,(%eax)
  if (c >= '0' && c <= '9') {  // 解析出序列的参数
   13d11:	e9 ab 00 00 00       	jmp    13dc1 <write_esc_square+0x101>
  } else if (c == ';' && console->curr_param_index <
   13d16:	80 7d ec 3b          	cmpb   $0x3b,-0x14(%ebp)
   13d1a:	75 1f                	jne    13d3b <write_esc_square+0x7b>
   13d1c:	8b 45 08             	mov    0x8(%ebp),%eax
   13d1f:	8b 40 50             	mov    0x50(%eax),%eax
   13d22:	83 f8 09             	cmp    $0x9,%eax
   13d25:	7f 14                	jg     13d3b <write_esc_square+0x7b>
                             ESC_PARAM_MAX) {  // 解析完一个参数，索引加1
    console->curr_param_index++;
   13d27:	8b 45 08             	mov    0x8(%ebp),%eax
   13d2a:	8b 40 50             	mov    0x50(%eax),%eax
   13d2d:	8d 50 01             	lea    0x1(%eax),%edx
   13d30:	8b 45 08             	mov    0x8(%ebp),%eax
   13d33:	89 50 50             	mov    %edx,0x50(%eax)
   13d36:	e9 86 00 00 00       	jmp    13dc1 <write_esc_square+0x101>
  } else {  // 用序列结束符判断需要进行的操作
    switch (c) {
   13d3b:	0f be 45 ec          	movsbl -0x14(%ebp),%eax
   13d3f:	83 f8 6d             	cmp    $0x6d,%eax
   13d42:	74 25                	je     13d69 <write_esc_square+0xa9>
   13d44:	83 f8 6d             	cmp    $0x6d,%eax
   13d47:	7f 6d                	jg     13db6 <write_esc_square+0xf6>
   13d49:	83 f8 4a             	cmp    $0x4a,%eax
   13d4c:	74 5d                	je     13dab <write_esc_square+0xeb>
   13d4e:	83 f8 4a             	cmp    $0x4a,%eax
   13d51:	7f 63                	jg     13db6 <write_esc_square+0xf6>
   13d53:	83 f8 48             	cmp    $0x48,%eax
   13d56:	74 46                	je     13d9e <write_esc_square+0xde>
   13d58:	83 f8 48             	cmp    $0x48,%eax
   13d5b:	7f 59                	jg     13db6 <write_esc_square+0xf6>
   13d5d:	83 f8 43             	cmp    $0x43,%eax
   13d60:	74 28                	je     13d8a <write_esc_square+0xca>
   13d62:	83 f8 44             	cmp    $0x44,%eax
   13d65:	74 0f                	je     13d76 <write_esc_square+0xb6>
        move_cursor(console);
        break;
      case 'J':  // 擦除屏幕指定区域
        erase_in_display(console);
      default:
        break;
   13d67:	eb 4d                	jmp    13db6 <write_esc_square+0xf6>
        set_font_style(console);
   13d69:	ff 75 08             	push   0x8(%ebp)
   13d6c:	e8 c6 fd ff ff       	call   13b37 <set_font_style>
   13d71:	83 c4 04             	add    $0x4,%esp
        break;
   13d74:	eb 41                	jmp    13db7 <write_esc_square+0xf7>
        move_left(console, console->esc_param[0]);
   13d76:	8b 45 08             	mov    0x8(%ebp),%eax
   13d79:	8b 40 28             	mov    0x28(%eax),%eax
   13d7c:	50                   	push   %eax
   13d7d:	ff 75 08             	push   0x8(%ebp)
   13d80:	e8 bd fe ff ff       	call   13c42 <move_left>
   13d85:	83 c4 08             	add    $0x8,%esp
        break;
   13d88:	eb 2d                	jmp    13db7 <write_esc_square+0xf7>
        move_right(console, console->esc_param[0]);
   13d8a:	8b 45 08             	mov    0x8(%ebp),%eax
   13d8d:	8b 40 28             	mov    0x28(%eax),%eax
   13d90:	50                   	push   %eax
   13d91:	ff 75 08             	push   0x8(%ebp)
   13d94:	e8 e2 fe ff ff       	call   13c7b <move_right>
   13d99:	83 c4 08             	add    $0x8,%esp
        break;
   13d9c:	eb 19                	jmp    13db7 <write_esc_square+0xf7>
        move_cursor(console);
   13d9e:	ff 75 08             	push   0x8(%ebp)
   13da1:	e8 7a fe ff ff       	call   13c20 <move_cursor>
   13da6:	83 c4 04             	add    $0x4,%esp
        break;
   13da9:	eb 0c                	jmp    13db7 <write_esc_square+0xf7>
        erase_in_display(console);
   13dab:	ff 75 08             	push   0x8(%ebp)
   13dae:	e8 1e fe ff ff       	call   13bd1 <erase_in_display>
   13db3:	83 c4 04             	add    $0x4,%esp
        break;
   13db6:	90                   	nop
    }

    // 执行完操作，将状态机切换回写普通字符模式
    console->write_state = CONSOLE_WRITE_NORMAL;
   13db7:	8b 45 08             	mov    0x8(%ebp),%eax
   13dba:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  }
}
   13dc0:	90                   	nop
   13dc1:	90                   	nop
   13dc2:	c9                   	leave  
   13dc3:	c3                   	ret    

00013dc4 <console_write>:
 * @param console 第几个控制台
 * @param data 写入的字符串
 * @param size 字符串大小
 * @return int
 */
int console_write(tty_t *tty) {
   13dc4:	55                   	push   %ebp
   13dc5:	89 e5                	mov    %esp,%ebp
   13dc7:	83 ec 18             	sub    $0x18,%esp
  // 获取需要需要写入的终端
  console_t *console = console_table + tty->console_index;
   13dca:	8b 45 08             	mov    0x8(%ebp),%eax
   13dcd:	8b 40 08             	mov    0x8(%eax),%eax
   13dd0:	6b c0 54             	imul   $0x54,%eax,%eax
   13dd3:	05 00 b4 04 00       	add    $0x4b400,%eax
   13dd8:	89 45 f0             	mov    %eax,-0x10(%ebp)
  int len = 0;
   13ddb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  //在tty的缓冲队列中读取一个字符写入终端
  do {
    char c;
    int err = tty_fifo_get(&tty->out_fifo, &c);
   13de2:	8b 45 08             	mov    0x8(%ebp),%eax
   13de5:	8d 50 0c             	lea    0xc(%eax),%edx
   13de8:	83 ec 08             	sub    $0x8,%esp
   13deb:	8d 45 eb             	lea    -0x15(%ebp),%eax
   13dee:	50                   	push   %eax
   13def:	52                   	push   %edx
   13df0:	e8 86 0a 00 00       	call   1487b <tty_fifo_get>
   13df5:	83 c4 10             	add    $0x10,%esp
   13df8:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (err < 0) {
   13dfb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   13dff:	79 18                	jns    13e19 <console_write+0x55>

    len++;
  } while (1);

  // 更新光标的位置
  if (tty->console_index == curr_console_index) {
   13e01:	8b 45 08             	mov    0x8(%ebp),%eax
   13e04:	8b 50 08             	mov    0x8(%eax),%edx
   13e07:	a1 a0 b6 04 00       	mov    0x4b6a0,%eax
   13e0c:	39 c2                	cmp    %eax,%edx
   13e0e:	0f 84 83 00 00 00    	je     13e97 <console_write+0xd3>
   13e14:	e9 8c 00 00 00       	jmp    13ea5 <console_write+0xe1>
    sem_notify(&tty->out_sem);
   13e19:	8b 45 08             	mov    0x8(%ebp),%eax
   13e1c:	83 c0 34             	add    $0x34,%eax
   13e1f:	83 ec 0c             	sub    $0xc,%esp
   13e22:	50                   	push   %eax
   13e23:	e8 71 18 00 00       	call   15699 <sem_notify>
   13e28:	83 c4 10             	add    $0x10,%esp
    switch (console->write_state) {
   13e2b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13e2e:	8b 00                	mov    (%eax),%eax
   13e30:	83 f8 02             	cmp    $0x2,%eax
   13e33:	74 40                	je     13e75 <console_write+0xb1>
   13e35:	83 f8 02             	cmp    $0x2,%eax
   13e38:	77 53                	ja     13e8d <console_write+0xc9>
   13e3a:	85 c0                	test   %eax,%eax
   13e3c:	74 07                	je     13e45 <console_write+0x81>
   13e3e:	83 f8 01             	cmp    $0x1,%eax
   13e41:	74 1a                	je     13e5d <console_write+0x99>
        break;
   13e43:	eb 48                	jmp    13e8d <console_write+0xc9>
        write_normal(console, c);
   13e45:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   13e49:	0f be c0             	movsbl %al,%eax
   13e4c:	83 ec 08             	sub    $0x8,%esp
   13e4f:	50                   	push   %eax
   13e50:	ff 75 f0             	push   -0x10(%ebp)
   13e53:	e8 4a fb ff ff       	call   139a2 <write_normal>
   13e58:	83 c4 10             	add    $0x10,%esp
        break;
   13e5b:	eb 31                	jmp    13e8e <console_write+0xca>
        write_esc(console, c);
   13e5d:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   13e61:	0f be c0             	movsbl %al,%eax
   13e64:	83 ec 08             	sub    $0x8,%esp
   13e67:	50                   	push   %eax
   13e68:	ff 75 f0             	push   -0x10(%ebp)
   13e6b:	e8 49 fc ff ff       	call   13ab9 <write_esc>
   13e70:	83 c4 10             	add    $0x10,%esp
        break;
   13e73:	eb 19                	jmp    13e8e <console_write+0xca>
        write_esc_square(console, c);
   13e75:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   13e79:	0f be c0             	movsbl %al,%eax
   13e7c:	83 ec 08             	sub    $0x8,%esp
   13e7f:	50                   	push   %eax
   13e80:	ff 75 f0             	push   -0x10(%ebp)
   13e83:	e8 38 fe ff ff       	call   13cc0 <write_esc_square>
   13e88:	83 c4 10             	add    $0x10,%esp
        break;
   13e8b:	eb 01                	jmp    13e8e <console_write+0xca>
        break;
   13e8d:	90                   	nop
    len++;
   13e8e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  do {
   13e92:	e9 4b ff ff ff       	jmp    13de2 <console_write+0x1e>
    //若当前tty设备是正在显示的设备，则更新对应的光标位置
    update_cursor_pos(console);
   13e97:	83 ec 0c             	sub    $0xc,%esp
   13e9a:	ff 75 f0             	push   -0x10(%ebp)
   13e9d:	e8 82 f5 ff ff       	call   13424 <update_cursor_pos>
   13ea2:	83 c4 10             	add    $0x10,%esp
  }
  return len;
   13ea5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   13ea8:	c9                   	leave  
   13ea9:	c3                   	ret    

00013eaa <console_close>:
 * @brief 关闭控制台
 *
 * @param console
 * @return int
 */
void console_close(int console) {}
   13eaa:	55                   	push   %ebp
   13eab:	89 e5                	mov    %esp,%ebp
   13ead:	90                   	nop
   13eae:	5d                   	pop    %ebp
   13eaf:	c3                   	ret    

00013eb0 <console_select>:
/**
 * @brief 通过索引号更改当前系统使用的终端
 * 
 * @param console 
 */
void console_select(int console_index) {
   13eb0:	55                   	push   %ebp
   13eb1:	89 e5                	mov    %esp,%ebp
   13eb3:	83 ec 18             	sub    $0x18,%esp
    console_t *console = console_table + console_index;
   13eb6:	8b 45 08             	mov    0x8(%ebp),%eax
   13eb9:	6b c0 54             	imul   $0x54,%eax,%eax
   13ebc:	05 00 b4 04 00       	add    $0x4b400,%eax
   13ec1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (console->disp_base == 0) {  //当前控制台还未被初始化，进行初始化操作
   13ec4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13ec7:	8b 40 04             	mov    0x4(%eax),%eax
   13eca:	85 c0                	test   %eax,%eax
   13ecc:	75 0e                	jne    13edc <console_select+0x2c>
      console_init(console_index);
   13ece:	83 ec 0c             	sub    $0xc,%esp
   13ed1:	ff 75 08             	push   0x8(%ebp)
   13ed4:	e8 d0 f9 ff ff       	call   138a9 <console_init>
   13ed9:	83 c4 10             	add    $0x10,%esp
    }

    //计算屏幕显示的起始位置
    uint16_t pos = console_index * console->display_rows * console->display_cols;
   13edc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13edf:	8b 40 08             	mov    0x8(%eax),%eax
   13ee2:	89 c2                	mov    %eax,%edx
   13ee4:	8b 45 08             	mov    0x8(%ebp),%eax
   13ee7:	0f af d0             	imul   %eax,%edx
   13eea:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13eed:	8b 40 0c             	mov    0xc(%eax),%eax
   13ef0:	0f af c2             	imul   %edx,%eax
   13ef3:	66 89 45 f2          	mov    %ax,-0xe(%ebp)

    //向端口写入起始位置
    outb(0x3d4, 0xc); //告诉端口要写屏幕起始索引的高8位
   13ef7:	83 ec 08             	sub    $0x8,%esp
   13efa:	6a 0c                	push   $0xc
   13efc:	68 d4 03 00 00       	push   $0x3d4
   13f01:	e8 89 f4 ff ff       	call   1338f <outb>
   13f06:	83 c4 10             	add    $0x10,%esp
    outb(0x3d5, (uint8_t)((pos >> 8) & 0xff));  
   13f09:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   13f0d:	66 c1 e8 08          	shr    $0x8,%ax
   13f11:	0f b6 c0             	movzbl %al,%eax
   13f14:	83 ec 08             	sub    $0x8,%esp
   13f17:	50                   	push   %eax
   13f18:	68 d5 03 00 00       	push   $0x3d5
   13f1d:	e8 6d f4 ff ff       	call   1338f <outb>
   13f22:	83 c4 10             	add    $0x10,%esp
    outb(0x3d4, 0xd);//告诉端口要写屏幕起始索引的低8位
   13f25:	83 ec 08             	sub    $0x8,%esp
   13f28:	6a 0d                	push   $0xd
   13f2a:	68 d4 03 00 00       	push   $0x3d4
   13f2f:	e8 5b f4 ff ff       	call   1338f <outb>
   13f34:	83 c4 10             	add    $0x10,%esp
    outb(0x3d5, (uint8_t)(pos & 0xff));  
   13f37:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   13f3b:	0f b6 c0             	movzbl %al,%eax
   13f3e:	83 ec 08             	sub    $0x8,%esp
   13f41:	50                   	push   %eax
   13f42:	68 d5 03 00 00       	push   $0x3d5
   13f47:	e8 43 f4 ff ff       	call   1338f <outb>
   13f4c:	83 c4 10             	add    $0x10,%esp

    //更新当前使用控制台
    curr_console_index = console_index;
   13f4f:	8b 45 08             	mov    0x8(%ebp),%eax
   13f52:	a3 a0 b6 04 00       	mov    %eax,0x4b6a0

    //在控制台显示终端设备号
    show_char(console, console_index + '0');
   13f57:	8b 45 08             	mov    0x8(%ebp),%eax
   13f5a:	83 c0 30             	add    $0x30,%eax
   13f5d:	0f be c0             	movsbl %al,%eax
   13f60:	83 ec 08             	sub    $0x8,%esp
   13f63:	50                   	push   %eax
   13f64:	ff 75 f4             	push   -0xc(%ebp)
   13f67:	e8 1e f7 ff ff       	call   1368a <show_char>
   13f6c:	83 c4 10             	add    $0x10,%esp

    //更新光标位置
    update_cursor_pos(console);
   13f6f:	83 ec 0c             	sub    $0xc,%esp
   13f72:	ff 75 f4             	push   -0xc(%ebp)
   13f75:	e8 aa f4 ff ff       	call   13424 <update_cursor_pos>
   13f7a:	83 c4 10             	add    $0x10,%esp

   

   13f7d:	90                   	nop
   13f7e:	c9                   	leave  
   13f7f:	c3                   	ret    

00013f80 <is_dev_exist>:
 * @brief 根据设备id判断设备是否存在
 * 
 * @param dev_id 
 * @return int 
 */
static int is_dev_exist(int dev_id) {
   13f80:	55                   	push   %ebp
   13f81:	89 e5                	mov    %esp,%ebp
    //dev_id越界，设备不存在
    if (dev_id < 0 || dev_id >= DEV_TABLE_SIZE) {
   13f83:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13f87:	78 06                	js     13f8f <is_dev_exist+0xf>
   13f89:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   13f8d:	7e 07                	jle    13f96 <is_dev_exist+0x16>
        return 0;
   13f8f:	b8 00 00 00 00       	mov    $0x0,%eax
   13f94:	eb 3c                	jmp    13fd2 <is_dev_exist+0x52>
    }
    
    //设备空间未初始化，设备不存在
    if (dev_table[dev_id].open_count == 0 || dev_table[dev_id].desc == (dev_desc_t*)0) {
   13f96:	8b 55 08             	mov    0x8(%ebp),%edx
   13f99:	89 d0                	mov    %edx,%eax
   13f9b:	c1 e0 02             	shl    $0x2,%eax
   13f9e:	01 d0                	add    %edx,%eax
   13fa0:	c1 e0 02             	shl    $0x2,%eax
   13fa3:	05 d0 b6 04 00       	add    $0x4b6d0,%eax
   13fa8:	8b 00                	mov    (%eax),%eax
   13faa:	85 c0                	test   %eax,%eax
   13fac:	74 18                	je     13fc6 <is_dev_exist+0x46>
   13fae:	8b 55 08             	mov    0x8(%ebp),%edx
   13fb1:	89 d0                	mov    %edx,%eax
   13fb3:	c1 e0 02             	shl    $0x2,%eax
   13fb6:	01 d0                	add    %edx,%eax
   13fb8:	c1 e0 02             	shl    $0x2,%eax
   13fbb:	05 c0 b6 04 00       	add    $0x4b6c0,%eax
   13fc0:	8b 00                	mov    (%eax),%eax
   13fc2:	85 c0                	test   %eax,%eax
   13fc4:	75 07                	jne    13fcd <is_dev_exist+0x4d>
        return 0;
   13fc6:	b8 00 00 00 00       	mov    $0x0,%eax
   13fcb:	eb 05                	jmp    13fd2 <is_dev_exist+0x52>
    }

    return 1;
   13fcd:	b8 01 00 00 00       	mov    $0x1,%eax
}
   13fd2:	5d                   	pop    %ebp
   13fd3:	c3                   	ret    

00013fd4 <dev_open>:
 * @param dev_type 打开的设备类型
 * @param dev_index 打开的对应类型设备中的具体设备号
 * @param data 设备需要的参数数据
 * @return int 返回dev_id，该设备的描述符
 */
int dev_open(int dev_type, int dev_index, void *data) {
   13fd4:	55                   	push   %ebp
   13fd5:	89 e5                	mov    %esp,%ebp
   13fd7:	83 ec 28             	sub    $0x28,%esp
    //1.关中断，确保线程成功获取到设备描述符
    idt_state_t state = idt_enter_protection();
   13fda:	e8 c1 f2 ff ff       	call   132a0 <idt_enter_protection>
   13fdf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    
    //2.遍历dev_table，若该设备打开过则记录打开次数再返回描述符
    //若未打开过则在dev_table分配空间给该设备，并打开该设备
    device_t *free_dev = (device_t*)0;
   13fe2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (int i = 0; i < sizeof(dev_table) / sizeof(dev_table[0]); ++i) {
   13fe9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   13ff0:	eb 68                	jmp    1405a <dev_open+0x86>
        device_t *dev = dev_table + i;
   13ff2:	8b 55 f0             	mov    -0x10(%ebp),%edx
   13ff5:	89 d0                	mov    %edx,%eax
   13ff7:	c1 e0 02             	shl    $0x2,%eax
   13ffa:	01 d0                	add    %edx,%eax
   13ffc:	c1 e0 02             	shl    $0x2,%eax
   13fff:	05 c0 b6 04 00       	add    $0x4b6c0,%eax
   14004:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (dev->open_count == 0) { 
   14007:	8b 45 e0             	mov    -0x20(%ebp),%eax
   1400a:	8b 40 10             	mov    0x10(%eax),%eax
   1400d:	85 c0                	test   %eax,%eax
   1400f:	75 08                	jne    14019 <dev_open+0x45>
            //需要打开的设备未打开过，为该设备分配空间
            free_dev = dev;
   14011:	8b 45 e0             	mov    -0x20(%ebp),%eax
   14014:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   14017:	eb 49                	jmp    14062 <dev_open+0x8e>
        } else if (dev->desc->dev_type == dev_type && dev->dev_index == dev_index) {
   14019:	8b 45 e0             	mov    -0x20(%ebp),%eax
   1401c:	8b 00                	mov    (%eax),%eax
   1401e:	8b 40 14             	mov    0x14(%eax),%eax
   14021:	39 45 08             	cmp    %eax,0x8(%ebp)
   14024:	75 30                	jne    14056 <dev_open+0x82>
   14026:	8b 45 e0             	mov    -0x20(%ebp),%eax
   14029:	8b 40 08             	mov    0x8(%eax),%eax
   1402c:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1402f:	75 25                	jne    14056 <dev_open+0x82>
            //设备已打开过,增加打开次数
            dev->open_count++;
   14031:	8b 45 e0             	mov    -0x20(%ebp),%eax
   14034:	8b 40 10             	mov    0x10(%eax),%eax
   14037:	8d 50 01             	lea    0x1(%eax),%edx
   1403a:	8b 45 e0             	mov    -0x20(%ebp),%eax
   1403d:	89 50 10             	mov    %edx,0x10(%eax)
            idt_leave_protection(state);
   14040:	83 ec 0c             	sub    $0xc,%esp
   14043:	ff 75 e4             	push   -0x1c(%ebp)
   14046:	e8 6d f2 ff ff       	call   132b8 <idt_leave_protection>
   1404b:	83 c4 10             	add    $0x10,%esp
            //返回设备描述符
            return i;
   1404e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14051:	e9 c6 00 00 00       	jmp    1411c <dev_open+0x148>
    for (int i = 0; i < sizeof(dev_table) / sizeof(dev_table[0]); ++i) {
   14056:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   1405a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1405d:	83 f8 7f             	cmp    $0x7f,%eax
   14060:	76 90                	jbe    13ff2 <dev_open+0x1e>
        }
    }

    //3.设备未打开过，遍历设备类型描述表，寻找对应的设备类型用于初始化该设备
    dev_desc_t *desc = (dev_desc_t*)0;
   14062:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    for (int i = 0; i < sizeof(dev_des_table) / sizeof(dev_des_table[0]); ++i) {
   14069:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   14070:	eb 24                	jmp    14096 <dev_open+0xc2>
        dev_desc_t *d = dev_des_table[i];
   14072:	8b 45 e8             	mov    -0x18(%ebp),%eax
   14075:	8b 04 85 50 80 01 00 	mov    0x18050(,%eax,4),%eax
   1407c:	89 45 dc             	mov    %eax,-0x24(%ebp)
        if (d->dev_type == dev_type) {
   1407f:	8b 45 dc             	mov    -0x24(%ebp),%eax
   14082:	8b 40 14             	mov    0x14(%eax),%eax
   14085:	39 45 08             	cmp    %eax,0x8(%ebp)
   14088:	75 08                	jne    14092 <dev_open+0xbe>
            desc = d;
   1408a:	8b 45 dc             	mov    -0x24(%ebp),%eax
   1408d:	89 45 ec             	mov    %eax,-0x14(%ebp)
            break;
   14090:	eb 0c                	jmp    1409e <dev_open+0xca>
    for (int i = 0; i < sizeof(dev_des_table) / sizeof(dev_des_table[0]); ++i) {
   14092:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   14096:	8b 45 e8             	mov    -0x18(%ebp),%eax
   14099:	83 f8 01             	cmp    $0x1,%eax
   1409c:	76 d4                	jbe    14072 <dev_open+0x9e>
        }
    }

    //4.设备描述结构存在，设备空间分配成功，进行设备的初始化
    if (desc && free_dev) {
   1409e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   140a2:	74 65                	je     14109 <dev_open+0x135>
   140a4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   140a8:	74 5f                	je     14109 <dev_open+0x135>
        free_dev->desc = desc;
   140aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
   140ad:	8b 55 ec             	mov    -0x14(%ebp),%edx
   140b0:	89 10                	mov    %edx,(%eax)
        free_dev->data = data;
   140b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   140b5:	8b 55 10             	mov    0x10(%ebp),%edx
   140b8:	89 50 0c             	mov    %edx,0xc(%eax)
        free_dev->dev_index = dev_index;
   140bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   140be:	8b 55 0c             	mov    0xc(%ebp),%edx
   140c1:	89 50 08             	mov    %edx,0x8(%eax)

        //用该设备描述结构打开该设备
        int err = desc->open(free_dev);
   140c4:	8b 45 ec             	mov    -0x14(%ebp),%eax
   140c7:	8b 40 18             	mov    0x18(%eax),%eax
   140ca:	83 ec 0c             	sub    $0xc,%esp
   140cd:	ff 75 f4             	push   -0xc(%ebp)
   140d0:	ff d0                	call   *%eax
   140d2:	83 c4 10             	add    $0x10,%esp
   140d5:	89 45 d8             	mov    %eax,-0x28(%ebp)
        if (err == 0) { //打开成功
   140d8:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
   140dc:	75 2b                	jne    14109 <dev_open+0x135>
            free_dev->open_count = 1;
   140de:	8b 45 f4             	mov    -0xc(%ebp),%eax
   140e1:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
            idt_leave_protection(state);
   140e8:	83 ec 0c             	sub    $0xc,%esp
   140eb:	ff 75 e4             	push   -0x1c(%ebp)
   140ee:	e8 c5 f1 ff ff       	call   132b8 <idt_leave_protection>
   140f3:	83 c4 10             	add    $0x10,%esp
            //返回设备描述符
            return free_dev - dev_table;
   140f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   140f9:	2d c0 b6 04 00       	sub    $0x4b6c0,%eax
   140fe:	c1 f8 02             	sar    $0x2,%eax
   14101:	69 c0 cd cc cc cc    	imul   $0xcccccccd,%eax,%eax
   14107:	eb 13                	jmp    1411c <dev_open+0x148>

        }
    }

    idt_leave_protection(state);
   14109:	83 ec 0c             	sub    $0xc,%esp
   1410c:	ff 75 e4             	push   -0x1c(%ebp)
   1410f:	e8 a4 f1 ff ff       	call   132b8 <idt_leave_protection>
   14114:	83 c4 10             	add    $0x10,%esp
    return -1;
   14117:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1411c:	c9                   	leave  
   1411d:	c3                   	ret    

0001411e <dev_read>:
 * @param addr 读取地址
 * @param buf 读取数据缓冲区
 * @param size 读取字节大小
 * @return int 成功读取大小
 */
int dev_read(int dev_id, int addr, char *buf, int size) {
   1411e:	55                   	push   %ebp
   1411f:	89 e5                	mov    %esp,%ebp
   14121:	83 ec 18             	sub    $0x18,%esp
    //设备不存在，直接返回-1
    if (!is_dev_exist(dev_id)) {
   14124:	ff 75 08             	push   0x8(%ebp)
   14127:	e8 54 fe ff ff       	call   13f80 <is_dev_exist>
   1412c:	83 c4 04             	add    $0x4,%esp
   1412f:	85 c0                	test   %eax,%eax
   14131:	75 07                	jne    1413a <dev_read+0x1c>
        return -1;
   14133:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14138:	eb 2e                	jmp    14168 <dev_read+0x4a>
    }

    //获取设备，并通过其描述结构的操作接口进行真正的读操作
    device_t *dev = dev_table + dev_id;
   1413a:	8b 55 08             	mov    0x8(%ebp),%edx
   1413d:	89 d0                	mov    %edx,%eax
   1413f:	c1 e0 02             	shl    $0x2,%eax
   14142:	01 d0                	add    %edx,%eax
   14144:	c1 e0 02             	shl    $0x2,%eax
   14147:	05 c0 b6 04 00       	add    $0x4b6c0,%eax
   1414c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dev->desc->read(dev, addr, buf, size);
   1414f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14152:	8b 00                	mov    (%eax),%eax
   14154:	8b 40 1c             	mov    0x1c(%eax),%eax
   14157:	ff 75 14             	push   0x14(%ebp)
   1415a:	ff 75 10             	push   0x10(%ebp)
   1415d:	ff 75 0c             	push   0xc(%ebp)
   14160:	ff 75 f4             	push   -0xc(%ebp)
   14163:	ff d0                	call   *%eax
   14165:	83 c4 10             	add    $0x10,%esp
}
   14168:	c9                   	leave  
   14169:	c3                   	ret    

0001416a <dev_write>:
 * @param addr 写入地址
 * @param buf 写入数据缓冲区
 * @param size 写入字节大小
 * @return int 成功写入大小
 */
int dev_write(int dev_id, int addr, char *buf, int size)  {
   1416a:	55                   	push   %ebp
   1416b:	89 e5                	mov    %esp,%ebp
   1416d:	83 ec 18             	sub    $0x18,%esp
    //设备不存在，直接返回-1
    if (!is_dev_exist(dev_id)) {
   14170:	ff 75 08             	push   0x8(%ebp)
   14173:	e8 08 fe ff ff       	call   13f80 <is_dev_exist>
   14178:	83 c4 04             	add    $0x4,%esp
   1417b:	85 c0                	test   %eax,%eax
   1417d:	75 07                	jne    14186 <dev_write+0x1c>
        return -1;
   1417f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14184:	eb 2e                	jmp    141b4 <dev_write+0x4a>
    }

    //获取设备，并通过其描述结构的操作接口进行真正的写操作
    device_t *dev = dev_table + dev_id;
   14186:	8b 55 08             	mov    0x8(%ebp),%edx
   14189:	89 d0                	mov    %edx,%eax
   1418b:	c1 e0 02             	shl    $0x2,%eax
   1418e:	01 d0                	add    %edx,%eax
   14190:	c1 e0 02             	shl    $0x2,%eax
   14193:	05 c0 b6 04 00       	add    $0x4b6c0,%eax
   14198:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dev->desc->write(dev, addr, buf, size);
   1419b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1419e:	8b 00                	mov    (%eax),%eax
   141a0:	8b 40 20             	mov    0x20(%eax),%eax
   141a3:	ff 75 14             	push   0x14(%ebp)
   141a6:	ff 75 10             	push   0x10(%ebp)
   141a9:	ff 75 0c             	push   0xc(%ebp)
   141ac:	ff 75 f4             	push   -0xc(%ebp)
   141af:	ff d0                	call   *%eax
   141b1:	83 c4 10             	add    $0x10,%esp
}
   141b4:	c9                   	leave  
   141b5:	c3                   	ret    

000141b6 <dev_control>:
 * @param cmd 控制指令
 * @param arg0 指令参数
 * @param arg1 指令参数
 * @return int 
 */
int dev_control(int dev_id, int cmd, int arg0, int arg1) {
   141b6:	55                   	push   %ebp
   141b7:	89 e5                	mov    %esp,%ebp
   141b9:	83 ec 18             	sub    $0x18,%esp
    //设备不存在，直接返回-1
    if (!is_dev_exist(dev_id)) {
   141bc:	ff 75 08             	push   0x8(%ebp)
   141bf:	e8 bc fd ff ff       	call   13f80 <is_dev_exist>
   141c4:	83 c4 04             	add    $0x4,%esp
   141c7:	85 c0                	test   %eax,%eax
   141c9:	75 07                	jne    141d2 <dev_control+0x1c>
        return -1;
   141cb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   141d0:	eb 2e                	jmp    14200 <dev_control+0x4a>
    }

    //获取设备，并通过其描述结构的操作接口进行真正的控制操作
    device_t *dev = dev_table + dev_id;
   141d2:	8b 55 08             	mov    0x8(%ebp),%edx
   141d5:	89 d0                	mov    %edx,%eax
   141d7:	c1 e0 02             	shl    $0x2,%eax
   141da:	01 d0                	add    %edx,%eax
   141dc:	c1 e0 02             	shl    $0x2,%eax
   141df:	05 c0 b6 04 00       	add    $0x4b6c0,%eax
   141e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dev->desc->control(dev, cmd, arg0, arg1);
   141e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   141ea:	8b 00                	mov    (%eax),%eax
   141ec:	8b 40 24             	mov    0x24(%eax),%eax
   141ef:	ff 75 14             	push   0x14(%ebp)
   141f2:	ff 75 10             	push   0x10(%ebp)
   141f5:	ff 75 0c             	push   0xc(%ebp)
   141f8:	ff 75 f4             	push   -0xc(%ebp)
   141fb:	ff d0                	call   *%eax
   141fd:	83 c4 10             	add    $0x10,%esp
}
   14200:	c9                   	leave  
   14201:	c3                   	ret    

00014202 <dev_close>:
/**
 * @brief 关闭设备
 * 
 * @param dev_id 设备描述符
 */
void dev_close(int dev_id) {
   14202:	55                   	push   %ebp
   14203:	89 e5                	mov    %esp,%ebp
   14205:	83 ec 18             	sub    $0x18,%esp
    //设备不存在，直接返回-1
    if (!is_dev_exist(dev_id)) {
   14208:	ff 75 08             	push   0x8(%ebp)
   1420b:	e8 70 fd ff ff       	call   13f80 <is_dev_exist>
   14210:	83 c4 04             	add    $0x4,%esp
   14213:	85 c0                	test   %eax,%eax
   14215:	74 6b                	je     14282 <dev_close+0x80>
        return;
    }

    //获取设备，并通过其描述结构的操作接口进行真正的关闭操作
    device_t *dev = dev_table + dev_id;
   14217:	8b 55 08             	mov    0x8(%ebp),%edx
   1421a:	89 d0                	mov    %edx,%eax
   1421c:	c1 e0 02             	shl    $0x2,%eax
   1421f:	01 d0                	add    %edx,%eax
   14221:	c1 e0 02             	shl    $0x2,%eax
   14224:	05 c0 b6 04 00       	add    $0x4b6c0,%eax
   14229:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    //释放资源
    idt_state_t state = idt_enter_protection();
   1422c:	e8 6f f0 ff ff       	call   132a0 <idt_enter_protection>
   14231:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (--dev->open_count == 0) {   //该设备已不被操作系统引用，可以关闭
   14234:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14237:	8b 40 10             	mov    0x10(%eax),%eax
   1423a:	8d 50 ff             	lea    -0x1(%eax),%edx
   1423d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14240:	89 50 10             	mov    %edx,0x10(%eax)
   14243:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14246:	8b 40 10             	mov    0x10(%eax),%eax
   14249:	85 c0                	test   %eax,%eax
   1424b:	75 25                	jne    14272 <dev_close+0x70>
        //关闭设备
        dev->desc->close(dev);
   1424d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14250:	8b 00                	mov    (%eax),%eax
   14252:	8b 40 28             	mov    0x28(%eax),%eax
   14255:	83 ec 0c             	sub    $0xc,%esp
   14258:	ff 75 f4             	push   -0xc(%ebp)
   1425b:	ff d0                	call   *%eax
   1425d:	83 c4 10             	add    $0x10,%esp
        //释放设备空间资源
        kernel_memset(dev, 0, sizeof(device_t));
   14260:	83 ec 04             	sub    $0x4,%esp
   14263:	6a 14                	push   $0x14
   14265:	6a 00                	push   $0x0
   14267:	ff 75 f4             	push   -0xc(%ebp)
   1426a:	e8 9d 1d 00 00       	call   1600c <kernel_memset>
   1426f:	83 c4 10             	add    $0x10,%esp
    }

    idt_leave_protection(state);
   14272:	83 ec 0c             	sub    $0xc,%esp
   14275:	ff 75 f0             	push   -0x10(%ebp)
   14278:	e8 3b f0 ff ff       	call   132b8 <idt_leave_protection>
   1427d:	83 c4 10             	add    $0x10,%esp
   14280:	eb 01                	jmp    14283 <dev_close+0x81>
        return;
   14282:	90                   	nop
   14283:	c9                   	leave  
   14284:	c3                   	ret    

00014285 <inb>:
static inline uint8_t inb(uint16_t port) {
   14285:	55                   	push   %ebp
   14286:	89 e5                	mov    %esp,%ebp
   14288:	83 ec 14             	sub    $0x14,%esp
   1428b:	8b 45 08             	mov    0x8(%ebp),%eax
   1428e:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   14292:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   14296:	89 c2                	mov    %eax,%edx
   14298:	ec                   	in     (%dx),%al
   14299:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   1429c:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   142a0:	c9                   	leave  
   142a1:	c3                   	ret    

000142a2 <is_make_code>:
 * @brief 判断按键是按下还是弹起
 * 
 * @param key_code 
 * @return int 
 */
static inline int is_make_code(uint8_t key_code) {
   142a2:	55                   	push   %ebp
   142a3:	89 e5                	mov    %esp,%ebp
   142a5:	83 ec 04             	sub    $0x4,%esp
   142a8:	8b 45 08             	mov    0x8(%ebp),%eax
   142ab:	88 45 fc             	mov    %al,-0x4(%ebp)
    return !(key_code & 0x80);  //key_code的第7位为1则为按下，为0则为弹起
   142ae:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
   142b2:	f7 d0                	not    %eax
   142b4:	c0 e8 07             	shr    $0x7,%al
   142b7:	0f b6 c0             	movzbl %al,%eax
}
   142ba:	c9                   	leave  
   142bb:	c3                   	ret    

000142bc <get_key>:
 * @brief 获取真正的键值码，用来映射键值
 * 
 * @param key_code 
 * @return int 
 */
static inline int get_key(uint8_t key_code) {
   142bc:	55                   	push   %ebp
   142bd:	89 e5                	mov    %esp,%ebp
   142bf:	83 ec 04             	sub    $0x4,%esp
   142c2:	8b 45 08             	mov    0x8(%ebp),%eax
   142c5:	88 45 fc             	mov    %al,-0x4(%ebp)
    return key_code & 0x7f; //key_code的低7位为键值码
   142c8:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
   142cc:	83 e0 7f             	and    $0x7f,%eax
}
   142cf:	c9                   	leave  
   142d0:	c3                   	ret    

000142d1 <do_fx_key>:
/**
 * @brief 对F1~F8功能键进行处理
 * 
 * @param key 
 */
static void do_fx_key(char key) {
   142d1:	55                   	push   %ebp
   142d2:	89 e5                	mov    %esp,%ebp
   142d4:	83 ec 28             	sub    $0x28,%esp
   142d7:	8b 45 08             	mov    0x8(%ebp),%eax
   142da:	88 45 e4             	mov    %al,-0x1c(%ebp)
    int index = key - KEY_F1;
   142dd:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
   142e1:	83 e8 3b             	sub    $0x3b,%eax
   142e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    //在ctr键按下的情况下才进行处理
    if (kbd_state.lctrl_press || kbd_state.rctrl_press) {
   142e7:	0f b6 05 c0 c0 04 00 	movzbl 0x4c0c0,%eax
   142ee:	83 e0 20             	and    $0x20,%eax
   142f1:	84 c0                	test   %al,%al
   142f3:	75 0e                	jne    14303 <do_fx_key+0x32>
   142f5:	0f b6 05 c0 c0 04 00 	movzbl 0x4c0c0,%eax
   142fc:	83 e0 40             	and    $0x40,%eax
   142ff:	84 c0                	test   %al,%al
   14301:	74 0e                	je     14311 <do_fx_key+0x40>
        tty_select(index);
   14303:	83 ec 0c             	sub    $0xc,%esp
   14306:	ff 75 f4             	push   -0xc(%ebp)
   14309:	e8 65 09 00 00       	call   14c73 <tty_select>
   1430e:	83 c4 10             	add    $0x10,%esp
    }
}
   14311:	90                   	nop
   14312:	c9                   	leave  
   14313:	c3                   	ret    

00014314 <do_normal_key>:
/**
 * @brief 处理键盘按键按下时得到的原码
 *  
 * @param key_code 键按下时得到的原码
 */
static void do_normal_key(uint8_t key_code) {
   14314:	55                   	push   %ebp
   14315:	89 e5                	mov    %esp,%ebp
   14317:	83 ec 28             	sub    $0x28,%esp
   1431a:	8b 45 08             	mov    0x8(%ebp),%eax
   1431d:	88 45 e4             	mov    %al,-0x1c(%ebp)
    char key = get_key(key_code);
   14320:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
   14324:	50                   	push   %eax
   14325:	e8 92 ff ff ff       	call   142bc <get_key>
   1432a:	83 c4 04             	add    $0x4,%esp
   1432d:	88 45 f7             	mov    %al,-0x9(%ebp)
    int is_make = is_make_code(key_code);
   14330:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
   14334:	50                   	push   %eax
   14335:	e8 68 ff ff ff       	call   142a2 <is_make_code>
   1433a:	83 c4 04             	add    $0x4,%esp
   1433d:	89 45 f0             	mov    %eax,-0x10(%ebp)

    //处理对应按键
    switch (key) {
   14340:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14344:	83 e8 1d             	sub    $0x1d,%eax
   14347:	83 f8 3b             	cmp    $0x3b,%eax
   1434a:	0f 87 06 01 00 00    	ja     14456 <do_normal_key+0x142>
   14350:	8b 04 85 a0 76 01 00 	mov    0x176a0(,%eax,4),%eax
   14357:	ff e0                	jmp    *%eax
        case KEY_RSHIFT:
            kbd_state.rshift_press = is_make ? 1 : 0;
   14359:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1435d:	0f 95 c0             	setne  %al
   14360:	c1 e0 07             	shl    $0x7,%eax
   14363:	c0 f8 07             	sar    $0x7,%al
   14366:	83 e0 01             	and    $0x1,%eax
   14369:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   14370:	0f b6 05 c0 c0 04 00 	movzbl 0x4c0c0,%eax
   14377:	83 e0 fb             	and    $0xfffffffb,%eax
   1437a:	09 d0                	or     %edx,%eax
   1437c:	a2 c0 c0 04 00       	mov    %al,0x4c0c0
            break;
   14381:	e9 6b 01 00 00       	jmp    144f1 <do_normal_key+0x1dd>
        
        case KEY_LSHIFT:
            kbd_state.lshift_press = is_make ? 1 : 0;
   14386:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1438a:	0f 95 c0             	setne  %al
   1438d:	c1 e0 07             	shl    $0x7,%eax
   14390:	c0 f8 07             	sar    $0x7,%al
   14393:	83 e0 01             	and    $0x1,%eax
   14396:	8d 14 00             	lea    (%eax,%eax,1),%edx
   14399:	0f b6 05 c0 c0 04 00 	movzbl 0x4c0c0,%eax
   143a0:	83 e0 fd             	and    $0xfffffffd,%eax
   143a3:	09 d0                	or     %edx,%eax
   143a5:	a2 c0 c0 04 00       	mov    %al,0x4c0c0
            break;  
   143aa:	e9 42 01 00 00       	jmp    144f1 <do_normal_key+0x1dd>
        case KEY_CAPS:
            if (is_make) {
   143af:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   143b3:	0f 84 34 01 00 00    	je     144ed <do_normal_key+0x1d9>
                kbd_state.caps_lock = ~kbd_state.caps_lock;
   143b9:	0f b6 05 c0 c0 04 00 	movzbl 0x4c0c0,%eax
   143c0:	c1 e0 07             	shl    $0x7,%eax
   143c3:	c0 f8 07             	sar    $0x7,%al
   143c6:	f7 d0                	not    %eax
   143c8:	c1 e0 07             	shl    $0x7,%eax
   143cb:	c0 f8 07             	sar    $0x7,%al
   143ce:	83 e0 01             	and    $0x1,%eax
   143d1:	89 c2                	mov    %eax,%edx
   143d3:	0f b6 05 c0 c0 04 00 	movzbl 0x4c0c0,%eax
   143da:	83 e0 fe             	and    $0xfffffffe,%eax
   143dd:	09 d0                	or     %edx,%eax
   143df:	a2 c0 c0 04 00       	mov    %al,0x4c0c0
            }
            break;
   143e4:	e9 04 01 00 00       	jmp    144ed <do_normal_key+0x1d9>
        
        case KEY_ALT:
            kbd_state.lalt_press = is_make ? 1 : 0;
   143e9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   143ed:	0f 95 c0             	setne  %al
   143f0:	c1 e0 07             	shl    $0x7,%eax
   143f3:	c0 f8 07             	sar    $0x7,%al
   143f6:	83 e0 01             	and    $0x1,%eax
   143f9:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   14400:	0f b6 05 c0 c0 04 00 	movzbl 0x4c0c0,%eax
   14407:	83 e0 f7             	and    $0xfffffff7,%eax
   1440a:	09 d0                	or     %edx,%eax
   1440c:	a2 c0 c0 04 00       	mov    %al,0x4c0c0
            break;
   14411:	e9 db 00 00 00       	jmp    144f1 <do_normal_key+0x1dd>
        case KEY_CTRL:
            kbd_state.lctrl_press = is_make ? 1 : 0;
   14416:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1441a:	0f 95 c0             	setne  %al
   1441d:	c1 e0 07             	shl    $0x7,%eax
   14420:	c0 f8 07             	sar    $0x7,%al
   14423:	83 e0 01             	and    $0x1,%eax
   14426:	c1 e0 05             	shl    $0x5,%eax
   14429:	89 c2                	mov    %eax,%edx
   1442b:	0f b6 05 c0 c0 04 00 	movzbl 0x4c0c0,%eax
   14432:	83 e0 df             	and    $0xffffffdf,%eax
   14435:	09 d0                	or     %edx,%eax
   14437:	a2 c0 c0 04 00       	mov    %al,0x4c0c0
            break;
   1443c:	e9 b0 00 00 00       	jmp    144f1 <do_normal_key+0x1dd>
        case KEY_F4:
        case KEY_F5:
        case KEY_F6:
        case KEY_F7:
        case KEY_F8:
            do_fx_key(key);
   14441:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14445:	83 ec 0c             	sub    $0xc,%esp
   14448:	50                   	push   %eax
   14449:	e8 83 fe ff ff       	call   142d1 <do_fx_key>
   1444e:	83 c4 10             	add    $0x10,%esp
            break;
   14451:	e9 9b 00 00 00       	jmp    144f1 <do_normal_key+0x1dd>
            break;
        case KEY_F12:
            break;

        default:    //处理可被映射的非功能键
            if (is_make) {
   14456:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1445a:	0f 84 90 00 00 00    	je     144f0 <do_normal_key+0x1dc>
                    if (kbd_state.rshift_press || kbd_state.lshift_press) {
   14460:	0f b6 05 c0 c0 04 00 	movzbl 0x4c0c0,%eax
   14467:	83 e0 04             	and    $0x4,%eax
   1446a:	84 c0                	test   %al,%al
   1446c:	75 0e                	jne    1447c <do_normal_key+0x168>
   1446e:	0f b6 05 c0 c0 04 00 	movzbl 0x4c0c0,%eax
   14475:	83 e0 02             	and    $0x2,%eax
   14478:	84 c0                	test   %al,%al
   1447a:	74 11                	je     1448d <do_normal_key+0x179>
                        //shift功能键已被按下，获取该键的对应值
                        key = map_table[key].func;
   1447c:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14480:	0f b6 84 00 a1 74 01 	movzbl 0x174a1(%eax,%eax,1),%eax
   14487:	00 
   14488:	88 45 f7             	mov    %al,-0x9(%ebp)
   1448b:	eb 0f                	jmp    1449c <do_normal_key+0x188>
                    } else {
                        key = map_table[key].normal;
   1448d:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14491:	0f b6 84 00 a0 74 01 	movzbl 0x174a0(%eax,%eax,1),%eax
   14498:	00 
   14499:	88 45 f7             	mov    %al,-0x9(%ebp)
                    }

                    if (kbd_state.caps_lock) {  //当前状态下大写锁定已开启
   1449c:	0f b6 05 c0 c0 04 00 	movzbl 0x4c0c0,%eax
   144a3:	83 e0 01             	and    $0x1,%eax
   144a6:	84 c0                	test   %al,%al
   144a8:	74 2e                	je     144d8 <do_normal_key+0x1c4>
                        if ((key >= 'A' && key <= 'Z')) {
   144aa:	80 7d f7 40          	cmpb   $0x40,-0x9(%ebp)
   144ae:	7e 12                	jle    144c2 <do_normal_key+0x1ae>
   144b0:	80 7d f7 5a          	cmpb   $0x5a,-0x9(%ebp)
   144b4:	7f 0c                	jg     144c2 <do_normal_key+0x1ae>
                            key = key - 'A' + 'a';
   144b6:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
   144ba:	83 c0 20             	add    $0x20,%eax
   144bd:	88 45 f7             	mov    %al,-0x9(%ebp)
   144c0:	eb 16                	jmp    144d8 <do_normal_key+0x1c4>
                        } else if (key >= 'a' && key <= 'z') {
   144c2:	80 7d f7 60          	cmpb   $0x60,-0x9(%ebp)
   144c6:	7e 10                	jle    144d8 <do_normal_key+0x1c4>
   144c8:	80 7d f7 7a          	cmpb   $0x7a,-0x9(%ebp)
   144cc:	7f 0a                	jg     144d8 <do_normal_key+0x1c4>
                            key = key -'a' + 'A';
   144ce:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
   144d2:	83 e8 20             	sub    $0x20,%eax
   144d5:	88 45 f7             	mov    %al,-0x9(%ebp)
                        }
                    }
                // log_printf("key: %c\n", key);
                // log_printf("sizeof(kbd_state_t) = %d\n", sizeof(kbd_state_t));
                //将读取的键值放入tty设备的输入缓冲区
                tty_in(key);
   144d8:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   144dc:	83 ec 0c             	sub    $0xc,%esp
   144df:	50                   	push   %eax
   144e0:	e8 28 07 00 00       	call   14c0d <tty_in>
   144e5:	83 c4 10             	add    $0x10,%esp
            }
            break;
   144e8:	eb 06                	jmp    144f0 <do_normal_key+0x1dc>
            break;
   144ea:	90                   	nop
   144eb:	eb 04                	jmp    144f1 <do_normal_key+0x1dd>
            break;
   144ed:	90                   	nop
   144ee:	eb 01                	jmp    144f1 <do_normal_key+0x1dd>
            break;
   144f0:	90                   	nop
    }
}
   144f1:	90                   	nop
   144f2:	c9                   	leave  
   144f3:	c3                   	ret    

000144f4 <do_e0_key>:
/**
 * @brief 处理0xE0开头的键值码，即EBGIN_E0状态下接收到的键值码
 * 
 * @param key_code 
 */
static void do_e0_key(uint8_t key_code) {
   144f4:	55                   	push   %ebp
   144f5:	89 e5                	mov    %esp,%ebp
   144f7:	83 ec 14             	sub    $0x14,%esp
   144fa:	8b 45 08             	mov    0x8(%ebp),%eax
   144fd:	88 45 ec             	mov    %al,-0x14(%ebp)
    char key = get_key(key_code);
   14500:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
   14504:	50                   	push   %eax
   14505:	e8 b2 fd ff ff       	call   142bc <get_key>
   1450a:	83 c4 04             	add    $0x4,%esp
   1450d:	88 45 ff             	mov    %al,-0x1(%ebp)
    int is_make = is_make_code(key_code);
   14510:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
   14514:	50                   	push   %eax
   14515:	e8 88 fd ff ff       	call   142a2 <is_make_code>
   1451a:	83 c4 04             	add    $0x4,%esp
   1451d:	89 45 f8             	mov    %eax,-0x8(%ebp)

    switch (key) {
   14520:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
   14524:	83 f8 1d             	cmp    $0x1d,%eax
   14527:	74 07                	je     14530 <do_e0_key+0x3c>
   14529:	83 f8 38             	cmp    $0x38,%eax
   1452c:	74 2a                	je     14558 <do_e0_key+0x64>
        break;
    case KEY_ALT:
        kbd_state.ralt_press = is_make ? 1 : 0;
        break;
    default:
        break;
   1452e:	eb 4f                	jmp    1457f <do_e0_key+0x8b>
        kbd_state.rctrl_press = is_make ? 1 : 0;
   14530:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
   14534:	0f 95 c0             	setne  %al
   14537:	c1 e0 07             	shl    $0x7,%eax
   1453a:	c0 f8 07             	sar    $0x7,%al
   1453d:	83 e0 01             	and    $0x1,%eax
   14540:	c1 e0 06             	shl    $0x6,%eax
   14543:	89 c2                	mov    %eax,%edx
   14545:	0f b6 05 c0 c0 04 00 	movzbl 0x4c0c0,%eax
   1454c:	83 e0 bf             	and    $0xffffffbf,%eax
   1454f:	09 d0                	or     %edx,%eax
   14551:	a2 c0 c0 04 00       	mov    %al,0x4c0c0
        break;
   14556:	eb 27                	jmp    1457f <do_e0_key+0x8b>
        kbd_state.ralt_press = is_make ? 1 : 0;
   14558:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
   1455c:	0f 95 c0             	setne  %al
   1455f:	c1 e0 07             	shl    $0x7,%eax
   14562:	c0 f8 07             	sar    $0x7,%al
   14565:	83 e0 01             	and    $0x1,%eax
   14568:	c1 e0 04             	shl    $0x4,%eax
   1456b:	89 c2                	mov    %eax,%edx
   1456d:	0f b6 05 c0 c0 04 00 	movzbl 0x4c0c0,%eax
   14574:	83 e0 ef             	and    $0xffffffef,%eax
   14577:	09 d0                	or     %edx,%eax
   14579:	a2 c0 c0 04 00       	mov    %al,0x4c0c0
        break;
   1457e:	90                   	nop
    }
}
   1457f:	90                   	nop
   14580:	c9                   	leave  
   14581:	c3                   	ret    

00014582 <kbd_init>:

/**
 * @brief 键盘初始化
 * 
 */
void kbd_init(void) {
   14582:	55                   	push   %ebp
   14583:	89 e5                	mov    %esp,%ebp
   14585:	83 ec 08             	sub    $0x8,%esp
    static uint8_t is_inited = 0;
    if (!is_inited)  {
   14588:	0f b6 05 c4 c0 04 00 	movzbl 0x4c0c4,%eax
   1458f:	84 c0                	test   %al,%al
   14591:	75 3a                	jne    145cd <kbd_init+0x4b>
        idt_install(IRQ1_KEYBOARD, (idt_handler_t)exception_handler_kbd);
   14593:	83 ec 08             	sub    $0x8,%esp
   14596:	68 98 02 01 00       	push   $0x10298
   1459b:	6a 21                	push   $0x21
   1459d:	e8 f8 e8 ff ff       	call   12e9a <idt_install>
   145a2:	83 c4 10             	add    $0x10,%esp
        idt_enable(IRQ1_KEYBOARD);
   145a5:	83 ec 0c             	sub    $0xc,%esp
   145a8:	6a 21                	push   $0x21
   145aa:	e8 76 eb ff ff       	call   13125 <idt_enable>
   145af:	83 c4 10             	add    $0x10,%esp
        kernel_memset(&kbd_state, 0, sizeof(kbd_state));
   145b2:	83 ec 04             	sub    $0x4,%esp
   145b5:	6a 04                	push   $0x4
   145b7:	6a 00                	push   $0x0
   145b9:	68 c0 c0 04 00       	push   $0x4c0c0
   145be:	e8 49 1a 00 00       	call   1600c <kernel_memset>
   145c3:	83 c4 10             	add    $0x10,%esp
        is_inited = 1;
   145c6:	c6 05 c4 c0 04 00 01 	movb   $0x1,0x4c0c4
    }
}
   145cd:	90                   	nop
   145ce:	c9                   	leave  
   145cf:	c3                   	ret    

000145d0 <do_handler_kbd>:

/**
 * @brief 键盘中断处理程序
 * 
 */
void do_handler_kbd(exception_frame_t *frame) {
   145d0:	55                   	push   %ebp
   145d1:	89 e5                	mov    %esp,%ebp
   145d3:	83 ec 18             	sub    $0x18,%esp
        BEGIN_E0, //E0开始的键值码，占2个或4个字节
        BEGIN_E1, //E1开始的键值码，占6个字节
    }recv_state = NORMAL;

    //1.获取键盘的读取状态
    uint32_t status = inb(KBD_PORT_STAT);
   145d6:	6a 64                	push   $0x64
   145d8:	e8 a8 fc ff ff       	call   14285 <inb>
   145dd:	83 c4 04             	add    $0x4,%esp
   145e0:	0f b6 c0             	movzbl %al,%eax
   145e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!(status & KBD_STAT_RECV_READY)) {  //端口没有准备好的数据，直接结束中断
   145e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   145e9:	83 e0 01             	and    $0x1,%eax
   145ec:	85 c0                	test   %eax,%eax
   145ee:	75 12                	jne    14602 <do_handler_kbd+0x32>
        pic_send_eoi(IRQ1_KEYBOARD);
   145f0:	83 ec 0c             	sub    $0xc,%esp
   145f3:	6a 21                	push   $0x21
   145f5:	e8 6d ec ff ff       	call   13267 <pic_send_eoi>
   145fa:	83 c4 10             	add    $0x10,%esp
        return;
   145fd:	e9 96 00 00 00       	jmp    14698 <do_handler_kbd+0xc8>
    }

    //2.端口数据已准备好，读取数据端口
    uint8_t key_code = inb(KBD_PORT_DATA);
   14602:	83 ec 0c             	sub    $0xc,%esp
   14605:	6a 60                	push   $0x60
   14607:	e8 79 fc ff ff       	call   14285 <inb>
   1460c:	83 c4 10             	add    $0x10,%esp
   1460f:	88 45 f3             	mov    %al,-0xd(%ebp)

    //3.因为ICW4的EOI位为0，所以要手动发送EOI即中断结束信号
    pic_send_eoi(IRQ1_KEYBOARD);
   14612:	83 ec 0c             	sub    $0xc,%esp
   14615:	6a 21                	push   $0x21
   14617:	e8 4b ec ff ff       	call   13267 <pic_send_eoi>
   1461c:	83 c4 10             	add    $0x10,%esp

    //4.根据接受的键值原码的第一个字节，判断当前接收的原码的状态
    if (key_code == KEY_E0) {   //第一个字节为0xE0,代表还有后续字节
   1461f:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
   14623:	75 0c                	jne    14631 <do_handler_kbd+0x61>
        recv_state = BEGIN_E0;
   14625:	c7 05 c8 c0 04 00 01 	movl   $0x1,0x4c0c8
   1462c:	00 00 00 
   1462f:	eb 67                	jmp    14698 <do_handler_kbd+0xc8>
    } else if (key_code == KEY_E1) {    //第一个字节为0xE1，代表还有后续字节
   14631:	80 7d f3 e1          	cmpb   $0xe1,-0xd(%ebp)
   14635:	75 0c                	jne    14643 <do_handler_kbd+0x73>
        recv_state = BEGIN_E1;
   14637:	c7 05 c8 c0 04 00 02 	movl   $0x2,0x4c0c8
   1463e:	00 00 00 
   14641:	eb 55                	jmp    14698 <do_handler_kbd+0xc8>
    } else {
        switch (recv_state) {
   14643:	a1 c8 c0 04 00       	mov    0x4c0c8,%eax
   14648:	83 f8 02             	cmp    $0x2,%eax
   1464b:	74 3e                	je     1468b <do_handler_kbd+0xbb>
   1464d:	83 f8 02             	cmp    $0x2,%eax
   14650:	77 45                	ja     14697 <do_handler_kbd+0xc7>
   14652:	85 c0                	test   %eax,%eax
   14654:	74 07                	je     1465d <do_handler_kbd+0x8d>
   14656:	83 f8 01             	cmp    $0x1,%eax
   14659:	74 14                	je     1466f <do_handler_kbd+0x9f>
                break;
            case BEGIN_E1://TODO: 读取的6字节原码, pause 键，暂不处理
                recv_state = NORMAL;
                break;
            default :   
                break;
   1465b:	eb 3a                	jmp    14697 <do_handler_kbd+0xc7>
                do_normal_key(key_code);
   1465d:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
   14661:	83 ec 0c             	sub    $0xc,%esp
   14664:	50                   	push   %eax
   14665:	e8 aa fc ff ff       	call   14314 <do_normal_key>
   1466a:	83 c4 10             	add    $0x10,%esp
                break;
   1466d:	eb 29                	jmp    14698 <do_handler_kbd+0xc8>
                do_e0_key(key_code);
   1466f:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
   14673:	83 ec 0c             	sub    $0xc,%esp
   14676:	50                   	push   %eax
   14677:	e8 78 fe ff ff       	call   144f4 <do_e0_key>
   1467c:	83 c4 10             	add    $0x10,%esp
                recv_state = NORMAL;
   1467f:	c7 05 c8 c0 04 00 00 	movl   $0x0,0x4c0c8
   14686:	00 00 00 
                break;
   14689:	eb 0d                	jmp    14698 <do_handler_kbd+0xc8>
                recv_state = NORMAL;
   1468b:	c7 05 c8 c0 04 00 00 	movl   $0x0,0x4c0c8
   14692:	00 00 00 
                break;
   14695:	eb 01                	jmp    14698 <do_handler_kbd+0xc8>
                break;
   14697:	90                   	nop
        }
    }

   14698:	c9                   	leave  
   14699:	c3                   	ret    

0001469a <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   1469a:	55                   	push   %ebp
   1469b:	89 e5                	mov    %esp,%ebp
   1469d:	83 ec 08             	sub    $0x8,%esp
   146a0:	8b 45 08             	mov    0x8(%ebp),%eax
   146a3:	8b 55 0c             	mov    0xc(%ebp),%edx
   146a6:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   146aa:	89 d0                	mov    %edx,%eax
   146ac:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   146af:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   146b3:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   146b7:	ee                   	out    %al,(%dx)
}
   146b8:	90                   	nop
   146b9:	c9                   	leave  
   146ba:	c3                   	ret    

000146bb <do_handler_time>:
/**
 * @brief  处理定时器中断的c函数
 * 
 * @param frame 异常栈帧
 */
void do_handler_time(const exception_frame_t *frame) {
   146bb:	55                   	push   %ebp
   146bc:	89 e5                	mov    %esp,%ebp
   146be:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   146c1:	a1 cc c0 04 00       	mov    0x4c0cc,%eax
   146c6:	83 c0 01             	add    $0x1,%eax
   146c9:	a3 cc c0 04 00       	mov    %eax,0x4c0cc

    //因为ICW4的EOI位为0，所以要手动发送EOI即中断结束信号
    pic_send_eoi(IRQ0_TIMER);
   146ce:	83 ec 0c             	sub    $0xc,%esp
   146d1:	6a 20                	push   $0x20
   146d3:	e8 8f eb ff ff       	call   13267 <pic_send_eoi>
   146d8:	83 c4 10             	add    $0x10,%esp

    //运行完一个时间片，判断是否需要执行任务切换，若需要则执行
    //必须写在发送eoi之后，防止发生任务切换导致eoi没有发送，从而无法进行下一次中断
    task_slice_end();   
   146db:	e8 26 d3 ff ff       	call   11a06 <task_slice_end>
}
   146e0:	90                   	nop
   146e1:	c9                   	leave  
   146e2:	c3                   	ret    

000146e3 <init_pit>:

/**
 * @brief  初始化可编程定时器
 * 
 */
static void init_pit(void) {
   146e3:	55                   	push   %ebp
   146e4:	89 e5                	mov    %esp,%ebp
   146e6:	83 ec 18             	sub    $0x18,%esp
    //1.选择定时器的计算器，读取与加载初始值模式，以及工作模式
    outb(PIT_COMMAND_MODE_PORT, PIT_SELECT_COUNTER | PIT_READ_LOAD | PIT_MODE);
   146e9:	6a 36                	push   $0x36
   146eb:	6a 43                	push   $0x43
   146ed:	e8 a8 ff ff ff       	call   1469a <outb>
   146f2:	83 c4 08             	add    $0x8,%esp

    //2.写入16位初始值,即一个中断后期晶体的振荡次数，由确定的加载方式知，先写入低8位，再写入高8位
    uint16_t reload_count = (PIT_OSC_FREQ / 1000) * OS_TICKS_MS;   //确定晶体一个中断周期的震荡次数
   146f5:	66 c7 45 f6 9a 2e    	movw   $0x2e9a,-0xa(%ebp)
    outb(PIT_CHANNEL_DATA_PORT, reload_count & 0xff);
   146fb:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   146ff:	0f b6 c0             	movzbl %al,%eax
   14702:	50                   	push   %eax
   14703:	6a 40                	push   $0x40
   14705:	e8 90 ff ff ff       	call   1469a <outb>
   1470a:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL_DATA_PORT, (reload_count >> 8) & 0xff);
   1470d:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   14711:	66 c1 e8 08          	shr    $0x8,%ax
   14715:	0f b6 c0             	movzbl %al,%eax
   14718:	50                   	push   %eax
   14719:	6a 40                	push   $0x40
   1471b:	e8 7a ff ff ff       	call   1469a <outb>
   14720:	83 c4 08             	add    $0x8,%esp

    //3.绑定定时器中断的异常处理程序,并开启该中断
    idt_install(IRQ0_TIMER, (idt_handler_t)exception_handler_time);
   14723:	83 ec 08             	sub    $0x8,%esp
   14726:	68 7b 02 01 00       	push   $0x1027b
   1472b:	6a 20                	push   $0x20
   1472d:	e8 68 e7 ff ff       	call   12e9a <idt_install>
   14732:	83 c4 10             	add    $0x10,%esp
    idt_enable(IRQ0_TIMER);
   14735:	83 ec 0c             	sub    $0xc,%esp
   14738:	6a 20                	push   $0x20
   1473a:	e8 e6 e9 ff ff       	call   13125 <idt_enable>
   1473f:	83 c4 10             	add    $0x10,%esp

}
   14742:	90                   	nop
   14743:	c9                   	leave  
   14744:	c3                   	ret    

00014745 <time_init>:

/**
 * @brief  初始化定时器
 * 
 */
void time_init(void) {
   14745:	55                   	push   %ebp
   14746:	89 e5                	mov    %esp,%ebp
   14748:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   1474b:	c7 05 cc c0 04 00 00 	movl   $0x0,0x4c0cc
   14752:	00 00 00 
    init_pit();
   14755:	e8 89 ff ff ff       	call   146e3 <init_pit>
   1475a:	90                   	nop
   1475b:	c9                   	leave  
   1475c:	c3                   	ret    

0001475d <get_tty>:
 * @brief 根据dev结构获取到对应的tty设备结构
 * 
 * @param dev 
 * @return tty_t* 
 */
static tty_t* get_tty(device_t *dev) {
   1475d:	55                   	push   %ebp
   1475e:	89 e5                	mov    %esp,%ebp
   14760:	83 ec 18             	sub    $0x18,%esp
    int tty_index = dev->dev_index;
   14763:	8b 45 08             	mov    0x8(%ebp),%eax
   14766:	8b 40 08             	mov    0x8(%eax),%eax
   14769:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (tty_index < 0 || tty_index >= TTY_TABLE_SIZE || !dev->open_count) {
   1476c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   14770:	78 10                	js     14782 <get_tty+0x25>
   14772:	83 7d f4 07          	cmpl   $0x7,-0xc(%ebp)
   14776:	7f 0a                	jg     14782 <get_tty+0x25>
   14778:	8b 45 08             	mov    0x8(%ebp),%eax
   1477b:	8b 40 10             	mov    0x10(%eax),%eax
   1477e:	85 c0                	test   %eax,%eax
   14780:	75 1a                	jne    1479c <get_tty+0x3f>
        log_printf("tty is not opened. tty = %d\n", tty_index);
   14782:	83 ec 08             	sub    $0x8,%esp
   14785:	ff 75 f4             	push   -0xc(%ebp)
   14788:	68 90 77 01 00       	push   $0x17790
   1478d:	e8 77 20 00 00       	call   16809 <log_printf>
   14792:	83 c4 10             	add    $0x10,%esp
        return (tty_t*)0;
   14795:	b8 00 00 00 00       	mov    $0x0,%eax
   1479a:	eb 0e                	jmp    147aa <get_tty+0x4d>
    }

    return tty_table + tty_index;
   1479c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1479f:	69 c0 54 04 00 00    	imul   $0x454,%eax,%eax
   147a5:	05 e0 c0 04 00       	add    $0x4c0e0,%eax
}
   147aa:	c9                   	leave  
   147ab:	c3                   	ret    

000147ac <tty_fifo_init>:
 * 
 * @param fifo 
 * @param buf 
 * @param size 
 */
static void tty_fifo_init(tty_fifo_t *fifo, char *buf, int size) {
   147ac:	55                   	push   %ebp
   147ad:	89 e5                	mov    %esp,%ebp
    fifo->buf = buf;
   147af:	8b 45 08             	mov    0x8(%ebp),%eax
   147b2:	8b 55 0c             	mov    0xc(%ebp),%edx
   147b5:	89 10                	mov    %edx,(%eax)
    fifo->count = 0;
   147b7:	8b 45 08             	mov    0x8(%ebp),%eax
   147ba:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    fifo->size = size;
   147c1:	8b 45 08             	mov    0x8(%ebp),%eax
   147c4:	8b 55 10             	mov    0x10(%ebp),%edx
   147c7:	89 50 04             	mov    %edx,0x4(%eax)
    fifo->read = fifo->write = 0;
   147ca:	8b 45 08             	mov    0x8(%ebp),%eax
   147cd:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
   147d4:	8b 45 08             	mov    0x8(%ebp),%eax
   147d7:	8b 50 0c             	mov    0xc(%eax),%edx
   147da:	8b 45 08             	mov    0x8(%ebp),%eax
   147dd:	89 50 08             	mov    %edx,0x8(%eax)
}
   147e0:	90                   	nop
   147e1:	5d                   	pop    %ebp
   147e2:	c3                   	ret    

000147e3 <tty_fifo_put>:
 * 
 * @param fifo 
 * @param c 
 * @return int 
 */
int tty_fifo_put(tty_fifo_t *fifo, char c) {
   147e3:	55                   	push   %ebp
   147e4:	89 e5                	mov    %esp,%ebp
   147e6:	53                   	push   %ebx
   147e7:	83 ec 24             	sub    $0x24,%esp
   147ea:	8b 45 0c             	mov    0xc(%ebp),%eax
   147ed:	88 45 e4             	mov    %al,-0x1c(%ebp)
    //TODO:加锁
    idt_state_t state = idt_enter_protection();
   147f0:	e8 ab ea ff ff       	call   132a0 <idt_enter_protection>
   147f5:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //fifo已满，不能再写入
    if (fifo->count >= fifo->size) {
   147f8:	8b 45 08             	mov    0x8(%ebp),%eax
   147fb:	8b 50 10             	mov    0x10(%eax),%edx
   147fe:	8b 45 08             	mov    0x8(%ebp),%eax
   14801:	8b 40 04             	mov    0x4(%eax),%eax
   14804:	39 c2                	cmp    %eax,%edx
   14806:	7c 15                	jl     1481d <tty_fifo_put+0x3a>
    //TODO:解锁
        idt_leave_protection(state);
   14808:	83 ec 0c             	sub    $0xc,%esp
   1480b:	ff 75 f4             	push   -0xc(%ebp)
   1480e:	e8 a5 ea ff ff       	call   132b8 <idt_leave_protection>
   14813:	83 c4 10             	add    $0x10,%esp
        return -1;
   14816:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1481b:	eb 59                	jmp    14876 <tty_fifo_put+0x93>
    }

    fifo->buf[fifo->write++] = c;   //写入一个字符
   1481d:	8b 45 08             	mov    0x8(%ebp),%eax
   14820:	8b 18                	mov    (%eax),%ebx
   14822:	8b 45 08             	mov    0x8(%ebp),%eax
   14825:	8b 40 0c             	mov    0xc(%eax),%eax
   14828:	8d 48 01             	lea    0x1(%eax),%ecx
   1482b:	8b 55 08             	mov    0x8(%ebp),%edx
   1482e:	89 4a 0c             	mov    %ecx,0xc(%edx)
   14831:	8d 14 03             	lea    (%ebx,%eax,1),%edx
   14834:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
   14838:	88 02                	mov    %al,(%edx)
    if (fifo->write >= fifo->size) { //循环队列的方式写入
   1483a:	8b 45 08             	mov    0x8(%ebp),%eax
   1483d:	8b 50 0c             	mov    0xc(%eax),%edx
   14840:	8b 45 08             	mov    0x8(%ebp),%eax
   14843:	8b 40 04             	mov    0x4(%eax),%eax
   14846:	39 c2                	cmp    %eax,%edx
   14848:	7c 0a                	jl     14854 <tty_fifo_put+0x71>
        fifo->write = 0;
   1484a:	8b 45 08             	mov    0x8(%ebp),%eax
   1484d:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    }

    fifo->count++;
   14854:	8b 45 08             	mov    0x8(%ebp),%eax
   14857:	8b 40 10             	mov    0x10(%eax),%eax
   1485a:	8d 50 01             	lea    0x1(%eax),%edx
   1485d:	8b 45 08             	mov    0x8(%ebp),%eax
   14860:	89 50 10             	mov    %edx,0x10(%eax)
    
    //开中断取消资源保护
    //TODO:解锁
    idt_leave_protection(state);
   14863:	83 ec 0c             	sub    $0xc,%esp
   14866:	ff 75 f4             	push   -0xc(%ebp)
   14869:	e8 4a ea ff ff       	call   132b8 <idt_leave_protection>
   1486e:	83 c4 10             	add    $0x10,%esp
    return 0;
   14871:	b8 00 00 00 00       	mov    $0x0,%eax
}
   14876:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   14879:	c9                   	leave  
   1487a:	c3                   	ret    

0001487b <tty_fifo_get>:
 * 
 * @param fifo 
 * @param c 
 * @return int 
 */
int tty_fifo_get(tty_fifo_t *fifo, char *c) {
   1487b:	55                   	push   %ebp
   1487c:	89 e5                	mov    %esp,%ebp
   1487e:	53                   	push   %ebx
   1487f:	83 ec 14             	sub    $0x14,%esp
    //TODO:加锁关中断进行资源保护
    idt_state_t state = idt_enter_protection();
   14882:	e8 19 ea ff ff       	call   132a0 <idt_enter_protection>
   14887:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if (fifo->count <= 0) {
   1488a:	8b 45 08             	mov    0x8(%ebp),%eax
   1488d:	8b 40 10             	mov    0x10(%eax),%eax
   14890:	85 c0                	test   %eax,%eax
   14892:	7f 15                	jg     148a9 <tty_fifo_get+0x2e>
    //TODO:解锁
        idt_leave_protection(state);
   14894:	83 ec 0c             	sub    $0xc,%esp
   14897:	ff 75 f4             	push   -0xc(%ebp)
   1489a:	e8 19 ea ff ff       	call   132b8 <idt_leave_protection>
   1489f:	83 c4 10             	add    $0x10,%esp
        return -1;
   148a2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   148a7:	eb 5a                	jmp    14903 <tty_fifo_get+0x88>
    }

    *c = fifo->buf[fifo->read++];   //读取一个字符
   148a9:	8b 45 08             	mov    0x8(%ebp),%eax
   148ac:	8b 18                	mov    (%eax),%ebx
   148ae:	8b 45 08             	mov    0x8(%ebp),%eax
   148b1:	8b 40 08             	mov    0x8(%eax),%eax
   148b4:	8d 48 01             	lea    0x1(%eax),%ecx
   148b7:	8b 55 08             	mov    0x8(%ebp),%edx
   148ba:	89 4a 08             	mov    %ecx,0x8(%edx)
   148bd:	01 d8                	add    %ebx,%eax
   148bf:	0f b6 10             	movzbl (%eax),%edx
   148c2:	8b 45 0c             	mov    0xc(%ebp),%eax
   148c5:	88 10                	mov    %dl,(%eax)
    if (fifo->read >= fifo->size) { //循环队列的方式读取
   148c7:	8b 45 08             	mov    0x8(%ebp),%eax
   148ca:	8b 50 08             	mov    0x8(%eax),%edx
   148cd:	8b 45 08             	mov    0x8(%ebp),%eax
   148d0:	8b 40 04             	mov    0x4(%eax),%eax
   148d3:	39 c2                	cmp    %eax,%edx
   148d5:	7c 0a                	jl     148e1 <tty_fifo_get+0x66>
        fifo->read = 0;
   148d7:	8b 45 08             	mov    0x8(%ebp),%eax
   148da:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    }

    fifo->count--;
   148e1:	8b 45 08             	mov    0x8(%ebp),%eax
   148e4:	8b 40 10             	mov    0x10(%eax),%eax
   148e7:	8d 50 ff             	lea    -0x1(%eax),%edx
   148ea:	8b 45 08             	mov    0x8(%ebp),%eax
   148ed:	89 50 10             	mov    %edx,0x10(%eax)

    //TODO:解锁
    idt_leave_protection(state);
   148f0:	83 ec 0c             	sub    $0xc,%esp
   148f3:	ff 75 f4             	push   -0xc(%ebp)
   148f6:	e8 bd e9 ff ff       	call   132b8 <idt_leave_protection>
   148fb:	83 c4 10             	add    $0x10,%esp
    return 0;
   148fe:	b8 00 00 00 00       	mov    $0x0,%eax
}
   14903:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   14906:	c9                   	leave  
   14907:	c3                   	ret    

00014908 <tty_open>:

/**
 * @brief 打开tty设备
 * 
 */
int tty_open(device_t *dev) {
   14908:	55                   	push   %ebp
   14909:	89 e5                	mov    %esp,%ebp
   1490b:	83 ec 18             	sub    $0x18,%esp
    int index = dev->dev_index;
   1490e:	8b 45 08             	mov    0x8(%ebp),%eax
   14911:	8b 40 08             	mov    0x8(%eax),%eax
   14914:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (index < 0 || index >= TTY_TABLE_SIZE) {
   14917:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1491b:	78 06                	js     14923 <tty_open+0x1b>
   1491d:	83 7d f4 07          	cmpl   $0x7,-0xc(%ebp)
   14921:	7e 1d                	jle    14940 <tty_open+0x38>
        log_printf("open tty failed. incorrect tty num = %d\n", index);
   14923:	83 ec 08             	sub    $0x8,%esp
   14926:	ff 75 f4             	push   -0xc(%ebp)
   14929:	68 b0 77 01 00       	push   $0x177b0
   1492e:	e8 d6 1e 00 00       	call   16809 <log_printf>
   14933:	83 c4 10             	add    $0x10,%esp
        return -1;
   14936:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1493b:	e9 af 00 00 00       	jmp    149ef <tty_open+0xe7>
    }

    tty_t *tty = tty_table + index;
   14940:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14943:	69 c0 54 04 00 00    	imul   $0x454,%eax,%eax
   14949:	05 e0 c0 04 00       	add    $0x4c0e0,%eax
   1494e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    //初始化输入输出缓冲队列
    tty_fifo_init(&tty->out_fifo, tty->out_buf, TTY_OBUF_SIZE);
   14951:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14954:	8d 50 54             	lea    0x54(%eax),%edx
   14957:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1495a:	83 c0 0c             	add    $0xc,%eax
   1495d:	83 ec 04             	sub    $0x4,%esp
   14960:	68 00 02 00 00       	push   $0x200
   14965:	52                   	push   %edx
   14966:	50                   	push   %eax
   14967:	e8 40 fe ff ff       	call   147ac <tty_fifo_init>
   1496c:	83 c4 10             	add    $0x10,%esp
    tty_fifo_init(&tty->in_fifo, tty->in_buf, TTY_IBUF_SIZE);
   1496f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14972:	8d 90 54 02 00 00    	lea    0x254(%eax),%edx
   14978:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1497b:	83 c0 20             	add    $0x20,%eax
   1497e:	83 ec 04             	sub    $0x4,%esp
   14981:	68 00 02 00 00       	push   $0x200
   14986:	52                   	push   %edx
   14987:	50                   	push   %eax
   14988:	e8 1f fe ff ff       	call   147ac <tty_fifo_init>
   1498d:	83 c4 10             	add    $0x10,%esp

    //初始化缓冲区的信号量, 缓冲区的每一个字节都视为资源
    sem_init(&tty->out_sem, TTY_OBUF_SIZE); //输出缓冲区一开始有TTY_OBUF_SIZE大小的资源可写
   14990:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14993:	83 c0 34             	add    $0x34,%eax
   14996:	83 ec 08             	sub    $0x8,%esp
   14999:	68 00 02 00 00       	push   $0x200
   1499e:	50                   	push   %eax
   1499f:	e8 48 0c 00 00       	call   155ec <sem_init>
   149a4:	83 c4 10             	add    $0x10,%esp
    sem_init(&tty->in_sem, 0);  //输入缓冲区一开始无资源可读
   149a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   149aa:	83 c0 44             	add    $0x44,%eax
   149ad:	83 ec 08             	sub    $0x8,%esp
   149b0:	6a 00                	push   $0x0
   149b2:	50                   	push   %eax
   149b3:	e8 34 0c 00 00       	call   155ec <sem_init>
   149b8:	83 c4 10             	add    $0x10,%esp

    //为tty设备绑定输出终端
    tty->console_index = index;
   149bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   149be:	8b 55 f4             	mov    -0xc(%ebp),%edx
   149c1:	89 50 08             	mov    %edx,0x8(%eax)
    tty->oflags = TTY_OCRLF;    //默认开启输出模式下'\n'转换为'\r\n'的模式
   149c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   149c7:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    tty->iflags = TTY_INCLR | TTY_IECHO; //默认开启输入模式下的换行转换和字符回显
   149cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
   149d0:	c7 40 04 03 00 00 00 	movl   $0x3,0x4(%eax)

    //初始化tty设备需要的键盘与终端
    kbd_init();
   149d7:	e8 a6 fb ff ff       	call   14582 <kbd_init>
    console_init(index);
   149dc:	83 ec 0c             	sub    $0xc,%esp
   149df:	ff 75 f4             	push   -0xc(%ebp)
   149e2:	e8 c2 ee ff ff       	call   138a9 <console_init>
   149e7:	83 c4 10             	add    $0x10,%esp
    
    
    return 0;
   149ea:	b8 00 00 00 00       	mov    $0x0,%eax
}
   149ef:	c9                   	leave  
   149f0:	c3                   	ret    

000149f1 <tty_write>:

/**
 * @brief 写入tty设备
 * 
 */
int tty_write(device_t *dev, int addr, char *buf, int size) {
   149f1:	55                   	push   %ebp
   149f2:	89 e5                	mov    %esp,%ebp
   149f4:	83 ec 28             	sub    $0x28,%esp
    if (size < 0) {
   149f7:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   149fb:	79 0a                	jns    14a07 <tty_write+0x16>
        return -1;
   149fd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14a02:	e9 d8 00 00 00       	jmp    14adf <tty_write+0xee>
    }

    //根据dev结构获取到对应的tty设备结构
    tty_t *tty = get_tty(dev);
   14a07:	83 ec 0c             	sub    $0xc,%esp
   14a0a:	ff 75 08             	push   0x8(%ebp)
   14a0d:	e8 4b fd ff ff       	call   1475d <get_tty>
   14a12:	83 c4 10             	add    $0x10,%esp
   14a15:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!tty) {
   14a18:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14a1c:	75 0a                	jne    14a28 <tty_write+0x37>
        return -1;
   14a1e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14a23:	e9 b7 00 00 00       	jmp    14adf <tty_write+0xee>
    }

    int len = 0;
   14a28:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (size) {
   14a2f:	e9 98 00 00 00       	jmp    14acc <tty_write+0xdb>

        //获取待写入字符
        char c = *(buf++);
   14a34:	8b 45 10             	mov    0x10(%ebp),%eax
   14a37:	8d 50 01             	lea    0x1(%eax),%edx
   14a3a:	89 55 10             	mov    %edx,0x10(%ebp)
   14a3d:	0f b6 00             	movzbl (%eax),%eax
   14a40:	88 45 ef             	mov    %al,-0x11(%ebp)

        //当前输出为"\r\n"换行模式，
        if (c == '\n' && (tty->oflags & TTY_OCRLF)) {
   14a43:	80 7d ef 0a          	cmpb   $0xa,-0x11(%ebp)
   14a47:	75 3b                	jne    14a84 <tty_write+0x93>
   14a49:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14a4c:	8b 00                	mov    (%eax),%eax
   14a4e:	83 e0 01             	and    $0x1,%eax
   14a51:	85 c0                	test   %eax,%eax
   14a53:	74 2f                	je     14a84 <tty_write+0x93>
            sem_wait(&tty->out_sem);
   14a55:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14a58:	83 c0 34             	add    $0x34,%eax
   14a5b:	83 ec 0c             	sub    $0xc,%esp
   14a5e:	50                   	push   %eax
   14a5f:	e8 ca 0b 00 00       	call   1562e <sem_wait>
   14a64:	83 c4 10             	add    $0x10,%esp
            int err = tty_fifo_put(&tty->out_fifo, '\r');
   14a67:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14a6a:	83 c0 0c             	add    $0xc,%eax
   14a6d:	83 ec 08             	sub    $0x8,%esp
   14a70:	6a 0d                	push   $0xd
   14a72:	50                   	push   %eax
   14a73:	e8 6b fd ff ff       	call   147e3 <tty_fifo_put>
   14a78:	83 c4 10             	add    $0x10,%esp
   14a7b:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (err < 0) {
   14a7e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   14a82:	78 54                	js     14ad8 <tty_write+0xe7>
            }
        }

        //先获取到访问缓冲区一个字节资源的资格
        //若缓冲区写满就阻塞住，等待中断程序将缓冲区消耗掉再写
        sem_wait(&tty->out_sem);
   14a84:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14a87:	83 c0 34             	add    $0x34,%eax
   14a8a:	83 ec 0c             	sub    $0xc,%esp
   14a8d:	50                   	push   %eax
   14a8e:	e8 9b 0b 00 00       	call   1562e <sem_wait>
   14a93:	83 c4 10             	add    $0x10,%esp

        int err = tty_fifo_put(&tty->out_fifo, c);
   14a96:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
   14a9a:	8b 55 f0             	mov    -0x10(%ebp),%edx
   14a9d:	83 c2 0c             	add    $0xc,%edx
   14aa0:	83 ec 08             	sub    $0x8,%esp
   14aa3:	50                   	push   %eax
   14aa4:	52                   	push   %edx
   14aa5:	e8 39 fd ff ff       	call   147e3 <tty_fifo_put>
   14aaa:	83 c4 10             	add    $0x10,%esp
   14aad:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0) {
   14ab0:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   14ab4:	78 25                	js     14adb <tty_write+0xea>
            break;
        }

        len++;
   14ab6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
        size--;
   14aba:	83 6d 14 01          	subl   $0x1,0x14(%ebp)

        //显示器直接写显存，不需要写io端口
        //所以不需要交给中断处理程序，即当前进程自己往缓冲区写入并读取
        //此处是为了模仿当前进程对缓冲区写入的同时中断处理程序读取缓冲区
        //此处肯定不会阻塞在信号量中，但利用中断处理程序就会阻塞
        console_write(tty);
   14abe:	83 ec 0c             	sub    $0xc,%esp
   14ac1:	ff 75 f0             	push   -0x10(%ebp)
   14ac4:	e8 fb f2 ff ff       	call   13dc4 <console_write>
   14ac9:	83 c4 10             	add    $0x10,%esp
    while (size) {
   14acc:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   14ad0:	0f 85 5e ff ff ff    	jne    14a34 <tty_write+0x43>
   14ad6:	eb 04                	jmp    14adc <tty_write+0xeb>
                break;
   14ad8:	90                   	nop
   14ad9:	eb 01                	jmp    14adc <tty_write+0xeb>
            break;
   14adb:	90                   	nop
    }
    


    return len;
   14adc:	8b 45 f4             	mov    -0xc(%ebp),%eax
} 
   14adf:	c9                   	leave  
   14ae0:	c3                   	ret    

00014ae1 <tty_read>:

/**
 * @brief 读取读取设备
 * 
 */
int tty_read(device_t *dev, int addr, char *buf, int size) {
   14ae1:	55                   	push   %ebp
   14ae2:	89 e5                	mov    %esp,%ebp
   14ae4:	83 ec 18             	sub    $0x18,%esp
    if (size < 0) {
   14ae7:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   14aeb:	79 0a                	jns    14af7 <tty_read+0x16>
        return -1;
   14aed:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14af2:	e9 04 01 00 00       	jmp    14bfb <tty_read+0x11a>
    }

    //1.获取操作的tty设备
    tty_t *tty = get_tty(dev);
   14af7:	83 ec 0c             	sub    $0xc,%esp
   14afa:	ff 75 08             	push   0x8(%ebp)
   14afd:	e8 5b fc ff ff       	call   1475d <get_tty>
   14b02:	83 c4 10             	add    $0x10,%esp
   14b05:	89 45 ec             	mov    %eax,-0x14(%ebp)
    
    char *pbuf = buf;
   14b08:	8b 45 10             	mov    0x10(%ebp),%eax
   14b0b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int len = 0;
   14b0e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    
    //2.从输入缓冲队列中读取字符到缓冲区buf中
    while (len < size) {
   14b15:	e9 d2 00 00 00       	jmp    14bec <tty_read+0x10b>
        //2.1等待资源就绪
        sem_wait(&tty->in_sem);
   14b1a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14b1d:	83 c0 44             	add    $0x44,%eax
   14b20:	83 ec 0c             	sub    $0xc,%esp
   14b23:	50                   	push   %eax
   14b24:	e8 05 0b 00 00       	call   1562e <sem_wait>
   14b29:	83 c4 10             	add    $0x10,%esp

        //2.2资源已就绪，读取一个字符
        char ch;
        tty_fifo_get(&tty->in_fifo, &ch);
   14b2c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14b2f:	8d 50 20             	lea    0x20(%eax),%edx
   14b32:	83 ec 08             	sub    $0x8,%esp
   14b35:	8d 45 eb             	lea    -0x15(%ebp),%eax
   14b38:	50                   	push   %eax
   14b39:	52                   	push   %edx
   14b3a:	e8 3c fd ff ff       	call   1487b <tty_fifo_get>
   14b3f:	83 c4 10             	add    $0x10,%esp
        switch (ch) {
   14b42:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   14b46:	0f be c0             	movsbl %al,%eax
   14b49:	83 f8 0a             	cmp    $0xa,%eax
   14b4c:	74 20                	je     14b6e <tty_read+0x8d>
   14b4e:	83 f8 7f             	cmp    $0x7f,%eax
   14b51:	75 55                	jne    14ba8 <tty_read+0xc7>
        case 0x7f:  //退格键不读取并删除buf中上一个读取到的字符
            if (len == 0) {
   14b53:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14b57:	75 05                	jne    14b5e <tty_read+0x7d>
   14b59:	e9 8e 00 00 00       	jmp    14bec <tty_read+0x10b>
                continue;
            } else {
                len--;
   14b5e:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
                *(--pbuf) = '\0';
   14b62:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
   14b66:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14b69:	c6 00 00             	movb   $0x0,(%eax)
            }
            break;
   14b6c:	eb 4e                	jmp    14bbc <tty_read+0xdb>
        case '\n':
            if ((tty->iflags & TTY_INCLR) && len < size - 1) {
   14b6e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14b71:	8b 40 04             	mov    0x4(%eax),%eax
   14b74:	83 e0 01             	and    $0x1,%eax
   14b77:	85 c0                	test   %eax,%eax
   14b79:	74 1b                	je     14b96 <tty_read+0xb5>
   14b7b:	8b 45 14             	mov    0x14(%ebp),%eax
   14b7e:	83 e8 01             	sub    $0x1,%eax
   14b81:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   14b84:	7d 10                	jge    14b96 <tty_read+0xb5>
                //开启了换行转换
                *(pbuf++) = '\r';
   14b86:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14b89:	8d 50 01             	lea    0x1(%eax),%edx
   14b8c:	89 55 f4             	mov    %edx,-0xc(%ebp)
   14b8f:	c6 00 0d             	movb   $0xd,(%eax)
                len++;
   14b92:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
            }
            *(pbuf++) = '\n';
   14b96:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14b99:	8d 50 01             	lea    0x1(%eax),%edx
   14b9c:	89 55 f4             	mov    %edx,-0xc(%ebp)
   14b9f:	c6 00 0a             	movb   $0xa,(%eax)
            len++;
   14ba2:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
            break;
   14ba6:	eb 14                	jmp    14bbc <tty_read+0xdb>
        default:
            *(pbuf++) = ch;
   14ba8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14bab:	8d 50 01             	lea    0x1(%eax),%edx
   14bae:	89 55 f4             	mov    %edx,-0xc(%ebp)
   14bb1:	0f b6 55 eb          	movzbl -0x15(%ebp),%edx
   14bb5:	88 10                	mov    %dl,(%eax)
            len++;
   14bb7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
            break;
   14bbb:	90                   	nop
        }

        //若tty设备开启了回显模式，则将输入回显到设备上
        if (tty->iflags & TTY_IECHO) {
   14bbc:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14bbf:	8b 40 04             	mov    0x4(%eax),%eax
   14bc2:	83 e0 02             	and    $0x2,%eax
   14bc5:	85 c0                	test   %eax,%eax
   14bc7:	74 13                	je     14bdc <tty_read+0xfb>
            tty_write(dev, 0, &ch, 1);
   14bc9:	6a 01                	push   $0x1
   14bcb:	8d 45 eb             	lea    -0x15(%ebp),%eax
   14bce:	50                   	push   %eax
   14bcf:	6a 00                	push   $0x0
   14bd1:	ff 75 08             	push   0x8(%ebp)
   14bd4:	e8 18 fe ff ff       	call   149f1 <tty_write>
   14bd9:	83 c4 10             	add    $0x10,%esp
        }

        //若输入回车或者换行则直接停止读取
        if (ch == '\n' || ch == '\r') {
   14bdc:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   14be0:	3c 0a                	cmp    $0xa,%al
   14be2:	74 14                	je     14bf8 <tty_read+0x117>
   14be4:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   14be8:	3c 0d                	cmp    $0xd,%al
   14bea:	74 0c                	je     14bf8 <tty_read+0x117>
    while (len < size) {
   14bec:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14bef:	3b 45 14             	cmp    0x14(%ebp),%eax
   14bf2:	0f 8c 22 ff ff ff    	jl     14b1a <tty_read+0x39>
            break;
        }

    }

    return len;
   14bf8:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   14bfb:	c9                   	leave  
   14bfc:	c3                   	ret    

00014bfd <tty_control>:

/**
 * @brief 向tty设备发送控制指令
 * 
 */
int tty_control(device_t *dev, int cmd, int arg0, int arg1) {
   14bfd:	55                   	push   %ebp
   14bfe:	89 e5                	mov    %esp,%ebp

    return 0;
   14c00:	b8 00 00 00 00       	mov    $0x0,%eax
}
   14c05:	5d                   	pop    %ebp
   14c06:	c3                   	ret    

00014c07 <tty_close>:

/**
 * @brief 关闭tty设备
 * 
 */
void tty_close(device_t *dev) {
   14c07:	55                   	push   %ebp
   14c08:	89 e5                	mov    %esp,%ebp

}
   14c0a:	90                   	nop
   14c0b:	5d                   	pop    %ebp
   14c0c:	c3                   	ret    

00014c0d <tty_in>:
 * @brief 将字符放入对应索引的tty设备的输入缓冲队列中
 * 
 * @param dev_index 
 * @param ch 
 */
void tty_in(char ch) {
   14c0d:	55                   	push   %ebp
   14c0e:	89 e5                	mov    %esp,%ebp
   14c10:	83 ec 28             	sub    $0x28,%esp
   14c13:	8b 45 08             	mov    0x8(%ebp),%eax
   14c16:	88 45 e4             	mov    %al,-0x1c(%ebp)
    //1.获取tty设备
    tty_t *tty = tty_table + curr_tty_index;
   14c19:	a1 80 e3 04 00       	mov    0x4e380,%eax
   14c1e:	69 c0 54 04 00 00    	imul   $0x454,%eax,%eax
   14c24:	05 e0 c0 04 00       	add    $0x4c0e0,%eax
   14c29:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //2.判断输入缓冲区资源是否已准备满
    if (sem_count(&tty->in_sem) >= TTY_IBUF_SIZE) {
   14c2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14c2f:	83 c0 44             	add    $0x44,%eax
   14c32:	83 ec 0c             	sub    $0xc,%esp
   14c35:	50                   	push   %eax
   14c36:	e8 e0 0a 00 00       	call   1571b <sem_count>
   14c3b:	83 c4 10             	add    $0x10,%esp
   14c3e:	3d ff 01 00 00       	cmp    $0x1ff,%eax
   14c43:	7f 2b                	jg     14c70 <tty_in+0x63>
        //输入缓冲区已写满，放弃写入
        return;
    }

    //3.将字符写入输入缓冲队列
    tty_fifo_put(&tty->in_fifo, ch);
   14c45:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
   14c49:	8b 55 f4             	mov    -0xc(%ebp),%edx
   14c4c:	83 c2 20             	add    $0x20,%edx
   14c4f:	83 ec 08             	sub    $0x8,%esp
   14c52:	50                   	push   %eax
   14c53:	52                   	push   %edx
   14c54:	e8 8a fb ff ff       	call   147e3 <tty_fifo_put>
   14c59:	83 c4 10             	add    $0x10,%esp
    
    //4.准备好一份可读资源，唤醒等待的进程或添加可获取资源
    sem_notify(&tty->in_sem);
   14c5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14c5f:	83 c0 44             	add    $0x44,%eax
   14c62:	83 ec 0c             	sub    $0xc,%esp
   14c65:	50                   	push   %eax
   14c66:	e8 2e 0a 00 00       	call   15699 <sem_notify>
   14c6b:	83 c4 10             	add    $0x10,%esp
   14c6e:	eb 01                	jmp    14c71 <tty_in+0x64>
        return;
   14c70:	90                   	nop
}
   14c71:	c9                   	leave  
   14c72:	c3                   	ret    

00014c73 <tty_select>:
/**
 * @brief 通过索引号更改当前系统使用的tty设备
 * 
 * @param tty_index 
 */
void tty_select(int tty_index) {
   14c73:	55                   	push   %ebp
   14c74:	89 e5                	mov    %esp,%ebp
   14c76:	83 ec 08             	sub    $0x8,%esp
    if (tty_index != curr_tty_index) {
   14c79:	a1 80 e3 04 00       	mov    0x4e380,%eax
   14c7e:	39 45 08             	cmp    %eax,0x8(%ebp)
   14c81:	74 16                	je     14c99 <tty_select+0x26>
        //选择对应的终端设备
       console_select(tty_index);
   14c83:	83 ec 0c             	sub    $0xc,%esp
   14c86:	ff 75 08             	push   0x8(%ebp)
   14c89:	e8 22 f2 ff ff       	call   13eb0 <console_select>
   14c8e:	83 c4 10             	add    $0x10,%esp
       curr_tty_index = tty_index; 
   14c91:	8b 45 08             	mov    0x8(%ebp),%eax
   14c94:	a3 80 e3 04 00       	mov    %eax,0x4e380
    }
}
   14c99:	90                   	nop
   14c9a:	c9                   	leave  
   14c9b:	c3                   	ret    

00014c9c <file_table_init>:

/**
 * @brief 初始化file_table
 * 
 */
void file_table_init(void) {
   14c9c:	55                   	push   %ebp
   14c9d:	89 e5                	mov    %esp,%ebp
   14c9f:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&file_alloc_mutex);
   14ca2:	83 ec 0c             	sub    $0xc,%esp
   14ca5:	68 a0 a3 06 00       	push   $0x6a3a0
   14caa:	e8 2b 07 00 00       	call   153da <mutex_init>
   14caf:	83 c4 10             	add    $0x10,%esp
    kernel_memset(file_table, 0, sizeof(file_table));
   14cb2:	83 ec 04             	sub    $0x4,%esp
   14cb5:	68 00 c0 01 00       	push   $0x1c000
   14cba:	6a 00                	push   $0x0
   14cbc:	68 a0 e3 04 00       	push   $0x4e3a0
   14cc1:	e8 46 13 00 00       	call   1600c <kernel_memset>
   14cc6:	83 c4 10             	add    $0x10,%esp
}
   14cc9:	90                   	nop
   14cca:	c9                   	leave  
   14ccb:	c3                   	ret    

00014ccc <file_alloc>:
/**
 * @brief 从file_table中分配一个file结构
 * 
 * @return file_t* 
 */
file_t *file_alloc(void) {
   14ccc:	55                   	push   %ebp
   14ccd:	89 e5                	mov    %esp,%ebp
   14ccf:	83 ec 18             	sub    $0x18,%esp
    file_t *file = (file_t*)0;
   14cd2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    //TODO:加锁
    mutex_lock(&file_alloc_mutex);
   14cd9:	83 ec 0c             	sub    $0xc,%esp
   14cdc:	68 a0 a3 06 00       	push   $0x6a3a0
   14ce1:	e8 41 07 00 00       	call   15427 <mutex_lock>
   14ce6:	83 c4 10             	add    $0x10,%esp

    //在file_table中获取分配一个资源
    for (int i = 0; i < FILE_TABLE_SIZE; ++i) {
   14ce9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   14cf0:	eb 40                	jmp    14d32 <file_alloc+0x66>
        file_t * p_file = file_table + i;
   14cf2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14cf5:	6b c0 38             	imul   $0x38,%eax,%eax
   14cf8:	05 a0 e3 04 00       	add    $0x4e3a0,%eax
   14cfd:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (p_file->ref == 0) { //当前资源未被分配
   14d00:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14d03:	8b 40 28             	mov    0x28(%eax),%eax
   14d06:	85 c0                	test   %eax,%eax
   14d08:	75 24                	jne    14d2e <file_alloc+0x62>
            kernel_memset(p_file, 0, sizeof(file_t));
   14d0a:	83 ec 04             	sub    $0x4,%esp
   14d0d:	6a 38                	push   $0x38
   14d0f:	6a 00                	push   $0x0
   14d11:	ff 75 ec             	push   -0x14(%ebp)
   14d14:	e8 f3 12 00 00       	call   1600c <kernel_memset>
   14d19:	83 c4 10             	add    $0x10,%esp
            p_file->ref = 1;    //记录被外部引用
   14d1c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14d1f:	c7 40 28 01 00 00 00 	movl   $0x1,0x28(%eax)
            file = p_file;
   14d26:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14d29:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   14d2c:	eb 0d                	jmp    14d3b <file_alloc+0x6f>
    for (int i = 0; i < FILE_TABLE_SIZE; ++i) {
   14d2e:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   14d32:	81 7d f0 ff 07 00 00 	cmpl   $0x7ff,-0x10(%ebp)
   14d39:	7e b7                	jle    14cf2 <file_alloc+0x26>
        }
    }

    //TODO:解锁
    mutex_unlock(&file_alloc_mutex);
   14d3b:	83 ec 0c             	sub    $0xc,%esp
   14d3e:	68 a0 a3 06 00       	push   $0x6a3a0
   14d43:	e8 70 07 00 00       	call   154b8 <mutex_unlock>
   14d48:	83 c4 10             	add    $0x10,%esp
    return file;
   14d4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   14d4e:	c9                   	leave  
   14d4f:	c3                   	ret    

00014d50 <file_free>:
/**
 * @brief 释放一个文件结构资源
 * 
 * @param file 
 */
void file_free(file_t *file) {
   14d50:	55                   	push   %ebp
   14d51:	89 e5                	mov    %esp,%ebp
   14d53:	83 ec 08             	sub    $0x8,%esp

    //TODO:加锁
    mutex_lock(&file_alloc_mutex);
   14d56:	83 ec 0c             	sub    $0xc,%esp
   14d59:	68 a0 a3 06 00       	push   $0x6a3a0
   14d5e:	e8 c4 06 00 00       	call   15427 <mutex_lock>
   14d63:	83 c4 10             	add    $0x10,%esp
    
    if (file->ref > 0) {    //引用计数减1
   14d66:	8b 45 08             	mov    0x8(%ebp),%eax
   14d69:	8b 40 28             	mov    0x28(%eax),%eax
   14d6c:	85 c0                	test   %eax,%eax
   14d6e:	7e 0f                	jle    14d7f <file_free+0x2f>
        file->ref--;
   14d70:	8b 45 08             	mov    0x8(%ebp),%eax
   14d73:	8b 40 28             	mov    0x28(%eax),%eax
   14d76:	8d 50 ff             	lea    -0x1(%eax),%edx
   14d79:	8b 45 08             	mov    0x8(%ebp),%eax
   14d7c:	89 50 28             	mov    %edx,0x28(%eax)
    }

    //TODO:解锁
    mutex_unlock(&file_alloc_mutex);
   14d7f:	83 ec 0c             	sub    $0xc,%esp
   14d82:	68 a0 a3 06 00       	push   $0x6a3a0
   14d87:	e8 2c 07 00 00       	call   154b8 <mutex_unlock>
   14d8c:	83 c4 10             	add    $0x10,%esp
   14d8f:	90                   	nop
   14d90:	c9                   	leave  
   14d91:	c3                   	ret    

00014d92 <inb>:
static inline uint8_t inb(uint16_t port) {
   14d92:	55                   	push   %ebp
   14d93:	89 e5                	mov    %esp,%ebp
   14d95:	83 ec 14             	sub    $0x14,%esp
   14d98:	8b 45 08             	mov    0x8(%ebp),%eax
   14d9b:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__(
   14d9f:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   14da3:	89 c2                	mov    %eax,%edx
   14da5:	ec                   	in     (%dx),%al
   14da6:	88 45 ff             	mov    %al,-0x1(%ebp)
  return rv;
   14da9:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   14dad:	c9                   	leave  
   14dae:	c3                   	ret    

00014daf <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   14daf:	55                   	push   %ebp
   14db0:	89 e5                	mov    %esp,%ebp
   14db2:	83 ec 08             	sub    $0x8,%esp
   14db5:	8b 45 08             	mov    0x8(%ebp),%eax
   14db8:	8b 55 0c             	mov    0xc(%ebp),%edx
   14dbb:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   14dbf:	89 d0                	mov    %edx,%eax
   14dc1:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ __volatile__(
   14dc4:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   14dc8:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   14dcc:	ee                   	out    %al,(%dx)
}
   14dcd:	90                   	nop
   14dce:	c9                   	leave  
   14dcf:	c3                   	ret    

00014dd0 <inw>:
static inline uint16_t inw(uint16_t port) {
   14dd0:	55                   	push   %ebp
   14dd1:	89 e5                	mov    %esp,%ebp
   14dd3:	83 ec 14             	sub    $0x14,%esp
   14dd6:	8b 45 08             	mov    0x8(%ebp),%eax
   14dd9:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ __volatile__("in %[p], %[v]"  // in默认就是inw, 读取一个字即16位
   14ddd:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   14de1:	89 c2                	mov    %eax,%edx
   14de3:	66 ed                	in     (%dx),%ax
   14de5:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  return rv;
   14de9:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
}
   14ded:	c9                   	leave  
   14dee:	c3                   	ret    

00014def <read_disk>:
 * 
 * @param sector 读取的分区号
 * @param sector_count 读取的分区数量
 * @param buf 缓冲区第一个字节的地址
 */
static void read_disk(uint32_t sector, uint16_t sector_count, uint8_t *buf) {
   14def:	55                   	push   %ebp
   14df0:	89 e5                	mov    %esp,%ebp
   14df2:	53                   	push   %ebx
   14df3:	83 ec 14             	sub    $0x14,%esp
   14df6:	8b 45 0c             	mov    0xc(%ebp),%eax
   14df9:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    
    //1.设置以LBA模式进行读取，即将磁盘看作一片连续的扇区
    outb(0x1F6, 0xE0 | (0x0 << 4));              //0xE0 将寄存器第6位置1进入LBA模式，0x0将第4位置0指定驱动器号为主盘
   14dfd:	68 e0 00 00 00       	push   $0xe0
   14e02:	68 f6 01 00 00       	push   $0x1f6
   14e07:	e8 a3 ff ff ff       	call   14daf <outb>
   14e0c:	83 c4 08             	add    $0x8,%esp
                                                            //现在一个通道上只有一个盘，默认当作主盘
                    
    //2.初始化各个端口寄存器的高8位
    outb(0x1F2, (uint8_t)(sector_count >> 8));  //读取扇区数的高8位
   14e0f:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   14e13:	66 c1 e8 08          	shr    $0x8,%ax
   14e17:	0f b6 c0             	movzbl %al,%eax
   14e1a:	50                   	push   %eax
   14e1b:	68 f2 01 00 00       	push   $0x1f2
   14e20:	e8 8a ff ff ff       	call   14daf <outb>
   14e25:	83 c4 08             	add    $0x8,%esp
                                                //6字节LBA值，先初始化第456个字节
                                                //我暂时只用到了4个字节的LBA值, 所以第56个字节置0即可
    outb(0x1F3, (uint8_t)(sector >> 24));       //LBA4 
   14e28:	8b 45 08             	mov    0x8(%ebp),%eax
   14e2b:	c1 e8 18             	shr    $0x18,%eax
   14e2e:	0f b6 c0             	movzbl %al,%eax
   14e31:	50                   	push   %eax
   14e32:	68 f3 01 00 00       	push   $0x1f3
   14e37:	e8 73 ff ff ff       	call   14daf <outb>
   14e3c:	83 c4 08             	add    $0x8,%esp
    outb(0x1F4, 0x00);                          //LBA5
   14e3f:	6a 00                	push   $0x0
   14e41:	68 f4 01 00 00       	push   $0x1f4
   14e46:	e8 64 ff ff ff       	call   14daf <outb>
   14e4b:	83 c4 08             	add    $0x8,%esp
    outb(0x1F5, 0x00);                          //LBA6
   14e4e:	6a 00                	push   $0x0
   14e50:	68 f5 01 00 00       	push   $0x1f5
   14e55:	e8 55 ff ff ff       	call   14daf <outb>
   14e5a:	83 c4 08             	add    $0x8,%esp

    //3.初始化各个端口寄存器的低8位
    outb(0x1F2, (uint8_t)sector_count);         //读取扇区数的低8位
   14e5d:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   14e61:	0f b6 c0             	movzbl %al,%eax
   14e64:	50                   	push   %eax
   14e65:	68 f2 01 00 00       	push   $0x1f2
   14e6a:	e8 40 ff ff ff       	call   14daf <outb>
   14e6f:	83 c4 08             	add    $0x8,%esp
    outb(0x1F3, (uint8_t)sector);               //LBA1
   14e72:	8b 45 08             	mov    0x8(%ebp),%eax
   14e75:	0f b6 c0             	movzbl %al,%eax
   14e78:	50                   	push   %eax
   14e79:	68 f3 01 00 00       	push   $0x1f3
   14e7e:	e8 2c ff ff ff       	call   14daf <outb>
   14e83:	83 c4 08             	add    $0x8,%esp
    outb(0x1F4, (uint8_t)(sector >> 8));        //LBA2
   14e86:	8b 45 08             	mov    0x8(%ebp),%eax
   14e89:	c1 e8 08             	shr    $0x8,%eax
   14e8c:	0f b6 c0             	movzbl %al,%eax
   14e8f:	50                   	push   %eax
   14e90:	68 f4 01 00 00       	push   $0x1f4
   14e95:	e8 15 ff ff ff       	call   14daf <outb>
   14e9a:	83 c4 08             	add    $0x8,%esp
    outb(0x1F5, (uint8_t)(sector >> 16));       //LBA3
   14e9d:	8b 45 08             	mov    0x8(%ebp),%eax
   14ea0:	c1 e8 10             	shr    $0x10,%eax
   14ea3:	0f b6 c0             	movzbl %al,%eax
   14ea6:	50                   	push   %eax
   14ea7:	68 f5 01 00 00       	push   $0x1f5
   14eac:	e8 fe fe ff ff       	call   14daf <outb>
   14eb1:	83 c4 08             	add    $0x8,%esp

    //4.将读取扇区命令 （0x24） 发送到端口 0x1F7
    outb(0x1F7, 0x24);
   14eb4:	6a 24                	push   $0x24
   14eb6:	68 f7 01 00 00       	push   $0x1f7
   14ebb:	e8 ef fe ff ff       	call   14daf <outb>
   14ec0:	83 c4 08             	add    $0x8,%esp

    //5.读取状态端口寄存器，判断是否可读取,若可以则读取，否则阻塞等待
    uint16_t *data_buf = (uint16_t*) buf;       //数据缓冲区，以后每次会读取16位数据
   14ec3:	8b 45 10             	mov    0x10(%ebp),%eax
   14ec6:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (sector_count--) {
   14ec9:	eb 4a                	jmp    14f15 <read_disk+0x126>
        while ((inb(0x1F7) & 0x88) != 0x8) {};  //取出状态寄存器3位和7位
   14ecb:	90                   	nop
   14ecc:	68 f7 01 00 00       	push   $0x1f7
   14ed1:	e8 bc fe ff ff       	call   14d92 <inb>
   14ed6:	83 c4 04             	add    $0x4,%esp
   14ed9:	0f b6 c0             	movzbl %al,%eax
   14edc:	25 88 00 00 00       	and    $0x88,%eax
   14ee1:	83 f8 08             	cmp    $0x8,%eax
   14ee4:	75 e6                	jne    14ecc <read_disk+0xdd>
                                                //若!=0x8即DRQ位(3位)为0，即非就绪状态
                                                //或者BSY(7位)为1，即忙碌状态，都不可读取

        for (int i = 0; i < SECTOR_SIZE / 2; ++i) {
   14ee6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   14eed:	eb 1d                	jmp    14f0c <read_disk+0x11d>
            *(data_buf++) = inw(0x1F0);          //从数据端口寄存器中读取16位数据，即2个字节
   14eef:	8b 5d f8             	mov    -0x8(%ebp),%ebx
   14ef2:	8d 43 02             	lea    0x2(%ebx),%eax
   14ef5:	89 45 f8             	mov    %eax,-0x8(%ebp)
   14ef8:	68 f0 01 00 00       	push   $0x1f0
   14efd:	e8 ce fe ff ff       	call   14dd0 <inw>
   14f02:	83 c4 04             	add    $0x4,%esp
   14f05:	66 89 03             	mov    %ax,(%ebx)
        for (int i = 0; i < SECTOR_SIZE / 2; ++i) {
   14f08:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   14f0c:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   14f13:	7e da                	jle    14eef <read_disk+0x100>
    while (sector_count--) {
   14f15:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
   14f19:	8d 50 ff             	lea    -0x1(%eax),%edx
   14f1c:	66 89 55 e8          	mov    %dx,-0x18(%ebp)
   14f20:	66 85 c0             	test   %ax,%ax
   14f23:	75 a6                	jne    14ecb <read_disk+0xdc>
        }
        
    }
    
}
   14f25:	90                   	nop
   14f26:	90                   	nop
   14f27:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   14f2a:	c9                   	leave  
   14f2b:	c3                   	ret    

00014f2c <is_path_valid>:
 * @brief 判断文件路径是否有效
 * 
 * @param path 
 * @return int 
 */
static int is_path_valid(const char *path) {
   14f2c:	55                   	push   %ebp
   14f2d:	89 e5                	mov    %esp,%ebp
    if (path == (const char*)0 || path[0] == '\0') {//路径无效
   14f2f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   14f33:	74 0a                	je     14f3f <is_path_valid+0x13>
   14f35:	8b 45 08             	mov    0x8(%ebp),%eax
   14f38:	0f b6 00             	movzbl (%eax),%eax
   14f3b:	84 c0                	test   %al,%al
   14f3d:	75 07                	jne    14f46 <is_path_valid+0x1a>
        return 0;
   14f3f:	b8 00 00 00 00       	mov    $0x0,%eax
   14f44:	eb 05                	jmp    14f4b <is_path_valid+0x1f>
    }

    return 1;
   14f46:	b8 01 00 00 00       	mov    $0x1,%eax
}
   14f4b:	5d                   	pop    %ebp
   14f4c:	c3                   	ret    

00014f4d <sys_open>:
 * @param name 文件路径
 * @param flags 打开方式的标志
 * @param ... 
 * @return int 文件描述符 
 */
int sys_open(const char *name, int flags, ...) {
   14f4d:	55                   	push   %ebp
   14f4e:	89 e5                	mov    %esp,%ebp
   14f50:	83 ec 18             	sub    $0x18,%esp
    if (kernel_strncmp(name, "tty", 3) == 0) {  //打开tty设备文件
   14f53:	83 ec 04             	sub    $0x4,%esp
   14f56:	6a 03                	push   $0x3
   14f58:	68 d9 77 01 00       	push   $0x177d9
   14f5d:	ff 75 08             	push   0x8(%ebp)
   14f60:	e8 a2 0f 00 00       	call   15f07 <kernel_strncmp>
   14f65:	83 c4 10             	add    $0x10,%esp
   14f68:	85 c0                	test   %eax,%eax
   14f6a:	0f 85 09 01 00 00    	jne    15079 <sys_open+0x12c>
        
        //1.判断路径是否有效
        if(!is_path_valid(name)) {//文件路径无效
   14f70:	83 ec 0c             	sub    $0xc,%esp
   14f73:	ff 75 08             	push   0x8(%ebp)
   14f76:	e8 b1 ff ff ff       	call   14f2c <is_path_valid>
   14f7b:	83 c4 10             	add    $0x10,%esp
   14f7e:	85 c0                	test   %eax,%eax
   14f80:	75 1a                	jne    14f9c <sys_open+0x4f>
            log_printf("path is not valid\n");
   14f82:	83 ec 0c             	sub    $0xc,%esp
   14f85:	68 dd 77 01 00       	push   $0x177dd
   14f8a:	e8 7a 18 00 00       	call   16809 <log_printf>
   14f8f:	83 c4 10             	add    $0x10,%esp
            return -1;
   14f92:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14f97:	e9 14 01 00 00       	jmp    150b0 <sys_open+0x163>
        }

        //2.从系统file_table中分配一个文件结构
        file_t *file = file_alloc();
   14f9c:	e8 2b fd ff ff       	call   14ccc <file_alloc>
   14fa1:	89 45 f0             	mov    %eax,-0x10(%ebp)

        //3.将文件结构放入当前进程的打开文件表中并得到文件描述符
        int fd = -1;
   14fa4:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
        if (file) {//分配成功，放入调用该系统调用的任务进程的打开文件表中
   14fab:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14faf:	0f 84 8e 00 00 00    	je     15043 <sys_open+0xf6>
            fd = task_alloc_fd(file);
   14fb5:	83 ec 0c             	sub    $0xc,%esp
   14fb8:	ff 75 f0             	push   -0x10(%ebp)
   14fbb:	e8 0c c3 ff ff       	call   112cc <task_alloc_fd>
   14fc0:	83 c4 10             	add    $0x10,%esp
   14fc3:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (fd < 0) {//放入失败
   14fc6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   14fca:	78 7a                	js     15046 <sys_open+0xf9>
            goto sys_open_failed;
        }

        //4.打开对应具体设备号的tty设备
        //name的开头为"tty:0(设备号)"
        int num = name[4] - '0';    //获取设备号
   14fcc:	8b 45 08             	mov    0x8(%ebp),%eax
   14fcf:	83 c0 04             	add    $0x4,%eax
   14fd2:	0f b6 00             	movzbl (%eax),%eax
   14fd5:	0f be c0             	movsbl %al,%eax
   14fd8:	83 e8 30             	sub    $0x30,%eax
   14fdb:	89 45 ec             	mov    %eax,-0x14(%ebp)
        int dev_id = dev_open(DEV_TTY, num, 0); //打开设备并获取设备描述符
   14fde:	83 ec 04             	sub    $0x4,%esp
   14fe1:	6a 00                	push   $0x0
   14fe3:	ff 75 ec             	push   -0x14(%ebp)
   14fe6:	6a 01                	push   $0x1
   14fe8:	e8 e7 ef ff ff       	call   13fd4 <dev_open>
   14fed:	83 c4 10             	add    $0x10,%esp
   14ff0:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (dev_id < 0) {
   14ff3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   14ff7:	78 50                	js     15049 <sys_open+0xfc>
            goto sys_open_failed;
        }

        //5.将打开的tty设备与分配的文件结构绑定
        file->dev_id = dev_id;
   14ff9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14ffc:	8b 55 e8             	mov    -0x18(%ebp),%edx
   14fff:	89 50 2c             	mov    %edx,0x2c(%eax)
        file->mode = 0;
   15002:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15005:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
        file->pos = 0;
   1500c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1500f:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
        file->ref = 1;
   15016:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15019:	c7 40 28 01 00 00 00 	movl   $0x1,0x28(%eax)
        file->type = FILE_TTY;
   15020:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15023:	c7 40 20 01 00 00 00 	movl   $0x1,0x20(%eax)
        kernel_strncpy(file->file_name, name, FILE_NAME_SIZE);
   1502a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1502d:	83 ec 04             	sub    $0x4,%esp
   15030:	6a 20                	push   $0x20
   15032:	ff 75 08             	push   0x8(%ebp)
   15035:	50                   	push   %eax
   15036:	e8 7b 0e 00 00       	call   15eb6 <kernel_strncpy>
   1503b:	83 c4 10             	add    $0x10,%esp


        //6.返回文件描述符
        return fd;
   1503e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15041:	eb 6d                	jmp    150b0 <sys_open+0x163>
            goto sys_open_failed;
   15043:	90                   	nop
   15044:	eb 04                	jmp    1504a <sys_open+0xfd>
                goto sys_open_failed;
   15046:	90                   	nop
   15047:	eb 01                	jmp    1504a <sys_open+0xfd>
            goto sys_open_failed;
   15049:	90                   	nop

    //打开失败，回收资源
    sys_open_failed:
        if (file) { //释放掉已分配的file
   1504a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1504e:	74 0e                	je     1505e <sys_open+0x111>
            file_free(file);
   15050:	83 ec 0c             	sub    $0xc,%esp
   15053:	ff 75 f0             	push   -0x10(%ebp)
   15056:	e8 f5 fc ff ff       	call   14d50 <file_free>
   1505b:	83 c4 10             	add    $0x10,%esp
        }
        if (fd >= 0) {  //释放掉已分配的打开文件表的资源
   1505e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   15062:	78 0e                	js     15072 <sys_open+0x125>
            task_remove_fd(fd);
   15064:	83 ec 0c             	sub    $0xc,%esp
   15067:	ff 75 f4             	push   -0xc(%ebp)
   1506a:	e8 b0 c2 ff ff       	call   1131f <task_remove_fd>
   1506f:	83 c4 10             	add    $0x10,%esp
        }

        return -1;
   15072:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15077:	eb 37                	jmp    150b0 <sys_open+0x163>

    } else if (name[0] == '/') {  //打开外部程序
   15079:	8b 45 08             	mov    0x8(%ebp),%eax
   1507c:	0f b6 00             	movzbl (%eax),%eax
   1507f:	3c 2f                	cmp    $0x2f,%al
   15081:	75 28                	jne    150ab <sys_open+0x15e>
        read_disk(5000, 80, (uint8_t*)TEMP_ADDR);
   15083:	83 ec 04             	sub    $0x4,%esp
   15086:	68 00 00 80 07       	push   $0x7800000
   1508b:	6a 50                	push   $0x50
   1508d:	68 88 13 00 00       	push   $0x1388
   15092:	e8 58 fd ff ff       	call   14def <read_disk>
   15097:	83 c4 10             	add    $0x10,%esp
        temp_pos = (uint8_t*)TEMP_ADDR;
   1509a:	c7 05 b4 a3 06 00 00 	movl   $0x7800000,0x6a3b4
   150a1:	00 80 07 
        return TEMP_FILE_ID;
   150a4:	b8 64 00 00 00       	mov    $0x64,%eax
   150a9:	eb 05                	jmp    150b0 <sys_open+0x163>
    }

    return -1;
   150ab:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   150b0:	c9                   	leave  
   150b1:	c3                   	ret    

000150b2 <sys_read>:
 * @param file 文件描述符
 * @param ptr 缓冲区地址
 * @param len 读取字节数
 * @return int 成功读取字节数
 */
int sys_read(int file, char *ptr, int len) {
   150b2:	55                   	push   %ebp
   150b3:	89 e5                	mov    %esp,%ebp
   150b5:	83 ec 18             	sub    $0x18,%esp
    if (file == TEMP_FILE_ID) {
   150b8:	83 7d 08 64          	cmpl   $0x64,0x8(%ebp)
   150bc:	75 2c                	jne    150ea <sys_read+0x38>
        kernel_memcpy(ptr, temp_pos, len);
   150be:	a1 b4 a3 06 00       	mov    0x6a3b4,%eax
   150c3:	83 ec 04             	sub    $0x4,%esp
   150c6:	ff 75 10             	push   0x10(%ebp)
   150c9:	50                   	push   %eax
   150ca:	ff 75 0c             	push   0xc(%ebp)
   150cd:	e8 eb 0e 00 00       	call   15fbd <kernel_memcpy>
   150d2:	83 c4 10             	add    $0x10,%esp
        temp_pos += len;
   150d5:	8b 15 b4 a3 06 00    	mov    0x6a3b4,%edx
   150db:	8b 45 10             	mov    0x10(%ebp),%eax
   150de:	01 d0                	add    %edx,%eax
   150e0:	a3 b4 a3 06 00       	mov    %eax,0x6a3b4
        return len;
   150e5:	8b 45 10             	mov    0x10(%ebp),%eax
   150e8:	eb 45                	jmp    1512f <sys_read+0x7d>
    } else {
        //根据文件描述符从当前进程的打开文件表中获取文件指针
        file_t *p_file = task_file(file);
   150ea:	83 ec 0c             	sub    $0xc,%esp
   150ed:	ff 75 08             	push   0x8(%ebp)
   150f0:	e8 a7 c1 ff ff       	call   1129c <task_file>
   150f5:	83 c4 10             	add    $0x10,%esp
   150f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (!p_file) {//获取失败
   150fb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   150ff:	75 17                	jne    15118 <sys_read+0x66>
            log_printf("file not opened!\n");
   15101:	83 ec 0c             	sub    $0xc,%esp
   15104:	68 f0 77 01 00       	push   $0x177f0
   15109:	e8 fb 16 00 00       	call   16809 <log_printf>
   1510e:	83 c4 10             	add    $0x10,%esp
            return -1;
   15111:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15116:	eb 17                	jmp    1512f <sys_read+0x7d>
        }
        //2.对文件结构所对应的设备进行真实的读操作
        return dev_read(p_file->dev_id, 0, ptr, len);
   15118:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1511b:	8b 40 2c             	mov    0x2c(%eax),%eax
   1511e:	ff 75 10             	push   0x10(%ebp)
   15121:	ff 75 0c             	push   0xc(%ebp)
   15124:	6a 00                	push   $0x0
   15126:	50                   	push   %eax
   15127:	e8 f2 ef ff ff       	call   1411e <dev_read>
   1512c:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
}
   1512f:	c9                   	leave  
   15130:	c3                   	ret    

00015131 <sys_write>:
 * @param file 文件描述符
 * @param ptr 缓冲区地址
 * @param len 写入字节数
 * @return int 成功写入字节数
 */
int sys_write(int file, char *ptr, int len) {
   15131:	55                   	push   %ebp
   15132:	89 e5                	mov    %esp,%ebp
   15134:	83 ec 18             	sub    $0x18,%esp
    //1.根据文件描述符从当前进程的打开文件表中获取文件结构指针
     file_t *p_file = task_file(file);
   15137:	83 ec 0c             	sub    $0xc,%esp
   1513a:	ff 75 08             	push   0x8(%ebp)
   1513d:	e8 5a c1 ff ff       	call   1129c <task_file>
   15142:	83 c4 10             	add    $0x10,%esp
   15145:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (!p_file) {//获取失败
   15148:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1514c:	75 17                	jne    15165 <sys_write+0x34>
        log_printf("file not opened!\n");
   1514e:	83 ec 0c             	sub    $0xc,%esp
   15151:	68 f0 77 01 00       	push   $0x177f0
   15156:	e8 ae 16 00 00       	call   16809 <log_printf>
   1515b:	83 c4 10             	add    $0x10,%esp
        return -1;
   1515e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15163:	eb 17                	jmp    1517c <sys_write+0x4b>
    }

    //2.对文件结构所对应的设备进行真实的写操作
    return dev_write(p_file->dev_id, 0, ptr, len);
   15165:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15168:	8b 40 2c             	mov    0x2c(%eax),%eax
   1516b:	ff 75 10             	push   0x10(%ebp)
   1516e:	ff 75 0c             	push   0xc(%ebp)
   15171:	6a 00                	push   $0x0
   15173:	50                   	push   %eax
   15174:	e8 f1 ef ff ff       	call   1416a <dev_write>
   15179:	83 c4 10             	add    $0x10,%esp
    //     // dev_write(dev_id, 0, ptr, len);
    //     // dev_close(dev_id);

    // }
    // return -1;
}
   1517c:	c9                   	leave  
   1517d:	c3                   	ret    

0001517e <sys_lseek>:
 * @param file 
 * @param offset 
 * @param pos 
 * @return int 
 */
int sys_lseek(int file, int offset, int pos) {
   1517e:	55                   	push   %ebp
   1517f:	89 e5                	mov    %esp,%ebp
    if (file == TEMP_FILE_ID) {
   15181:	83 7d 08 64          	cmpl   $0x64,0x8(%ebp)
   15185:	75 14                	jne    1519b <sys_lseek+0x1d>
        temp_pos = (uint8_t*)(TEMP_ADDR + offset);
   15187:	8b 45 0c             	mov    0xc(%ebp),%eax
   1518a:	05 00 00 80 07       	add    $0x7800000,%eax
   1518f:	a3 b4 a3 06 00       	mov    %eax,0x6a3b4
        return 0;
   15194:	b8 00 00 00 00       	mov    $0x0,%eax
   15199:	eb 05                	jmp    151a0 <sys_lseek+0x22>
    }

    return -1;
   1519b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

}
   151a0:	5d                   	pop    %ebp
   151a1:	c3                   	ret    

000151a2 <sys_close>:
 * @brief 关闭文件
 * 
 * @param file 
 * @return int 
 */
int sys_close(int file) {
   151a2:	55                   	push   %ebp
   151a3:	89 e5                	mov    %esp,%ebp
    return 0;
   151a5:	b8 00 00 00 00       	mov    $0x0,%eax
}
   151aa:	5d                   	pop    %ebp
   151ab:	c3                   	ret    

000151ac <sys_isatty>:
 * @brief 
 * 
 * @param file 
 * @return int 
 */
int sys_isatty(int file) {
   151ac:	55                   	push   %ebp
   151ad:	89 e5                	mov    %esp,%ebp
    return -1;
   151af:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   151b4:	5d                   	pop    %ebp
   151b5:	c3                   	ret    

000151b6 <sys_fstat>:
 * 
 * @param file 
 * @param st 
 * @return int 
 */
int sys_fstat(int file, struct stat *st) {
   151b6:	55                   	push   %ebp
   151b7:	89 e5                	mov    %esp,%ebp
    return -1;
   151b9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   151be:	5d                   	pop    %ebp
   151bf:	c3                   	ret    

000151c0 <sys_dup>:
 * @brief 在当前进程的打开文件表中分配新的一项指向该文件描述符对应的文件指针
 * 
 * @param file 需要被多次引用的文件指针的文件描述符
 * @return int 新的文件描述符
 */
int sys_dup(int file) {
   151c0:	55                   	push   %ebp
   151c1:	89 e5                	mov    %esp,%ebp
   151c3:	83 ec 18             	sub    $0x18,%esp
    if (file < 0 || file >= TASK_OFILE_SIZE) {
   151c6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   151ca:	78 06                	js     151d2 <sys_dup+0x12>
   151cc:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   151d0:	7e 1a                	jle    151ec <sys_dup+0x2c>
        log_printf("file %d is not valid.", file);
   151d2:	83 ec 08             	sub    $0x8,%esp
   151d5:	ff 75 08             	push   0x8(%ebp)
   151d8:	68 02 78 01 00       	push   $0x17802
   151dd:	e8 27 16 00 00       	call   16809 <log_printf>
   151e2:	83 c4 10             	add    $0x10,%esp
        return -1;
   151e5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   151ea:	eb 6e                	jmp    1525a <sys_dup+0x9a>
    }

    //1.获取需要重复引用的文件指针
    file_t *p_file = task_file(file);
   151ec:	83 ec 0c             	sub    $0xc,%esp
   151ef:	ff 75 08             	push   0x8(%ebp)
   151f2:	e8 a5 c0 ff ff       	call   1129c <task_file>
   151f7:	83 c4 10             	add    $0x10,%esp
   151fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!p_file) {
   151fd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   15201:	75 17                	jne    1521a <sys_dup+0x5a>
        log_printf("file not opend!\n");
   15203:	83 ec 0c             	sub    $0xc,%esp
   15206:	68 18 78 01 00       	push   $0x17818
   1520b:	e8 f9 15 00 00       	call   16809 <log_printf>
   15210:	83 c4 10             	add    $0x10,%esp
        return -1;
   15213:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15218:	eb 40                	jmp    1525a <sys_dup+0x9a>
    }

    //2.在打开文件表中新分配一项给该文件指针
    int fd = task_alloc_fd(p_file);
   1521a:	83 ec 0c             	sub    $0xc,%esp
   1521d:	ff 75 f4             	push   -0xc(%ebp)
   15220:	e8 a7 c0 ff ff       	call   112cc <task_alloc_fd>
   15225:	83 c4 10             	add    $0x10,%esp
   15228:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (fd < 0) {
   1522b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1522f:	79 17                	jns    15248 <sys_dup+0x88>
        log_printf("no task file avaliable\n");
   15231:	83 ec 0c             	sub    $0xc,%esp
   15234:	68 29 78 01 00       	push   $0x17829
   15239:	e8 cb 15 00 00       	call   16809 <log_printf>
   1523e:	83 c4 10             	add    $0x10,%esp
        return -1;
   15241:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15246:	eb 12                	jmp    1525a <sys_dup+0x9a>
    }

    p_file->ref++;  //分配成功，该文件引用次数加一
   15248:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1524b:	8b 40 28             	mov    0x28(%eax),%eax
   1524e:	8d 50 01             	lea    0x1(%eax),%edx
   15251:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15254:	89 50 28             	mov    %edx,0x28(%eax)
    return fd;
   15257:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   1525a:	c9                   	leave  
   1525b:	c3                   	ret    

0001525c <fs_init>:

/**
 * @brief 初始化文件系统
 * 
 */
void fs_init(void) {
   1525c:	55                   	push   %ebp
   1525d:	89 e5                	mov    %esp,%ebp
   1525f:	83 ec 08             	sub    $0x8,%esp
    file_table_init();
   15262:	e8 35 fa ff ff       	call   14c9c <file_table_init>
   15267:	90                   	nop
   15268:	c9                   	leave  
   15269:	c3                   	ret    

0001526a <kernel_init>:

/**
 * @brief  对内核进行初始化操作
 * 
 */
void kernel_init(boot_info_t* boot_info) {
   1526a:	55                   	push   %ebp
   1526b:	89 e5                	mov    %esp,%ebp
   1526d:	83 ec 08             	sub    $0x8,%esp
    //1.判断是否检测到可用内存
    ASSERT(boot_info->ram_region_count != 0);
   15270:	8b 45 08             	mov    0x8(%ebp),%eax
   15273:	8b 40 50             	mov    0x50(%eax),%eax
   15276:	85 c0                	test   %eax,%eax
   15278:	75 19                	jne    15293 <kernel_init+0x29>
   1527a:	68 44 78 01 00       	push   $0x17844
   1527f:	68 e0 78 01 00       	push   $0x178e0
   15284:	6a 25                	push   $0x25
   15286:	68 68 78 01 00       	push   $0x17868
   1528b:	e8 63 08 00 00       	call   15af3 <pannic>
   15290:	83 c4 10             	add    $0x10,%esp
    
    //2.初始化并重新加载GDT表
    gdt_init();
   15293:	e8 2a d5 ff ff       	call   127c2 <gdt_init>

    //3.初始化并加载中断描述符表IDT
    idt_init();
   15298:	e8 d3 dc ff ff       	call   12f70 <idt_init>
 
    //4.初始化日志程序,便于后期调用
    log_init();
   1529d:	e8 38 15 00 00       	call   167da <log_init>

    //5.初始化内存管理
    memory_init(boot_info);  
   152a2:	83 ec 0c             	sub    $0xc,%esp
   152a5:	ff 75 08             	push   0x8(%ebp)
   152a8:	e8 ac b9 ff ff       	call   10c59 <memory_init>
   152ad:	83 c4 10             	add    $0x10,%esp

    //6.初始化文件系统
    fs_init();
   152b0:	e8 a7 ff ff ff       	call   1525c <fs_init>

    //6.初始化定时器的中断处理
    time_init();
   152b5:	e8 8b f4 ff ff       	call   14745 <time_init>
    
    //7.初始化任务管理器
    task_manager_init();
   152ba:	e8 36 c4 ff ff       	call   116f5 <task_manager_init>
   
    //初始化完成后将在汇编里重新加载内核代码段与数据段的选择子，并为内核程序分配栈空间
}
   152bf:	90                   	nop
   152c0:	c9                   	leave  
   152c1:	c3                   	ret    

000152c2 <move_to_first_task>:

/**
 * @brief 跳转到第一个任务进程
 * 
 */
void move_to_first_task(void) {
   152c2:	55                   	push   %ebp
   152c3:	89 e5                	mov    %esp,%ebp
   152c5:	56                   	push   %esi
   152c6:	53                   	push   %ebx
   152c7:	83 ec 10             	sub    $0x10,%esp
    //1.获取当前任务
    task_t *curr = task_current();
   152ca:	e8 c5 c6 ff ff       	call   11994 <task_current>
   152cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT(curr != 0);
   152d2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   152d6:	75 19                	jne    152f1 <move_to_first_task+0x2f>
   152d8:	68 9d 78 01 00       	push   $0x1789d
   152dd:	68 ec 78 01 00       	push   $0x178ec
   152e2:	6a 48                	push   $0x48
   152e4:	68 68 78 01 00       	push   $0x17868
   152e9:	e8 05 08 00 00       	call   15af3 <pannic>
   152ee:	83 c4 10             	add    $0x10,%esp

    //2.获取当前任务的tss结构
    tss_t *tss = &(curr->tss);
   152f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   152f4:	83 c0 5c             	add    $0x5c,%eax
   152f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
        "push %[ss]\n\t"
        "push %[esp]\n\t"
        "push %[eflags]\n\t"
        "push %[cs]\n\t"
        "push %[eip]\n\t"
        "iret"::[ss]"r"(tss->ss), [esp]"r"(tss->esp), [eflags]"r"(tss->eflags), [cs]"r"(tss->cs), [eip]"r"(tss->eip)
   152fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
   152fd:	8b 40 50             	mov    0x50(%eax),%eax
   15300:	8b 55 f0             	mov    -0x10(%ebp),%edx
   15303:	8b 52 38             	mov    0x38(%edx),%edx
   15306:	8b 4d f0             	mov    -0x10(%ebp),%ecx
   15309:	8b 49 24             	mov    0x24(%ecx),%ecx
   1530c:	8b 5d f0             	mov    -0x10(%ebp),%ebx
   1530f:	8b 5b 4c             	mov    0x4c(%ebx),%ebx
   15312:	8b 75 f0             	mov    -0x10(%ebp),%esi
   15315:	8b 76 20             	mov    0x20(%esi),%esi
     __asm__ __volatile__(
   15318:	50                   	push   %eax
   15319:	52                   	push   %edx
   1531a:	51                   	push   %ecx
   1531b:	53                   	push   %ebx
   1531c:	56                   	push   %esi
   1531d:	cf                   	iret   

        
    );
}
   1531e:	90                   	nop
   1531f:	8d 65 f8             	lea    -0x8(%ebp),%esp
   15322:	5b                   	pop    %ebx
   15323:	5e                   	pop    %esi
   15324:	5d                   	pop    %ebp
   15325:	c3                   	ret    

00015326 <init_main>:


void init_main(void) {
   15326:	55                   	push   %ebp
   15327:	89 e5                	mov    %esp,%ebp
   15329:	83 ec 08             	sub    $0x8,%esp
    
    log_printf("Kernel is running......\n");
   1532c:	83 ec 0c             	sub    $0xc,%esp
   1532f:	68 a7 78 01 00       	push   $0x178a7
   15334:	e8 d0 14 00 00       	call   16809 <log_printf>
   15339:	83 c4 10             	add    $0x10,%esp
    log_printf("Name: kbOS, Version: %s\n", OS_VERSION);
   1533c:	83 ec 08             	sub    $0x8,%esp
   1533f:	68 c0 78 01 00       	push   $0x178c0
   15344:	68 c6 78 01 00       	push   $0x178c6
   15349:	e8 bb 14 00 00       	call   16809 <log_printf>
   1534e:	83 c4 10             	add    $0x10,%esp


    //当前任务作为任务管理器启用时的第一个任务
    task_first_init();
   15351:	e8 7c c4 ff ff       	call   117d2 <task_first_init>

    //跳转到第一个任务进程去运行
    move_to_first_task();
   15356:	e8 67 ff ff ff       	call   152c2 <move_to_first_task>
   1535b:	90                   	nop
   1535c:	c9                   	leave  
   1535d:	c3                   	ret    

0001535e <list_init>:
static inline void list_init(list_t *list) {
   1535e:	55                   	push   %ebp
   1535f:	89 e5                	mov    %esp,%ebp
   15361:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   15364:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15368:	75 19                	jne    15383 <list_init+0x25>
   1536a:	68 00 79 01 00       	push   $0x17900
   1536f:	68 ac 79 01 00       	push   $0x179ac
   15374:	6a 31                	push   $0x31
   15376:	68 14 79 01 00       	push   $0x17914
   1537b:	e8 73 07 00 00       	call   15af3 <pannic>
   15380:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   15383:	8b 45 08             	mov    0x8(%ebp),%eax
   15386:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1538d:	8b 45 08             	mov    0x8(%ebp),%eax
   15390:	8b 50 04             	mov    0x4(%eax),%edx
   15393:	8b 45 08             	mov    0x8(%ebp),%eax
   15396:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   15398:	8b 45 08             	mov    0x8(%ebp),%eax
   1539b:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   153a2:	90                   	nop
   153a3:	c9                   	leave  
   153a4:	c3                   	ret    

000153a5 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   153a5:	55                   	push   %ebp
   153a6:	89 e5                	mov    %esp,%ebp
   153a8:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   153ab:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   153af:	75 19                	jne    153ca <list_is_empty+0x25>
   153b1:	68 00 79 01 00       	push   $0x17900
   153b6:	68 b8 79 01 00       	push   $0x179b8
   153bb:	6a 38                	push   $0x38
   153bd:	68 14 79 01 00       	push   $0x17914
   153c2:	e8 2c 07 00 00       	call   15af3 <pannic>
   153c7:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   153ca:	8b 45 08             	mov    0x8(%ebp),%eax
   153cd:	8b 40 08             	mov    0x8(%eax),%eax
   153d0:	85 c0                	test   %eax,%eax
   153d2:	0f 94 c0             	sete   %al
   153d5:	0f b6 c0             	movzbl %al,%eax
}
   153d8:	c9                   	leave  
   153d9:	c3                   	ret    

000153da <mutex_init>:
/**
 * @brief  初始化互斥锁
 *
 * @param mutex
 */
void mutex_init(mutex_t *mutex) {
   153da:	55                   	push   %ebp
   153db:	89 e5                	mov    %esp,%ebp
   153dd:	83 ec 08             	sub    $0x8,%esp
  ASSERT(mutex != (mutex_t *)0);
   153e0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   153e4:	75 19                	jne    153ff <mutex_init+0x25>
   153e6:	68 52 79 01 00       	push   $0x17952
   153eb:	68 a0 79 01 00       	push   $0x179a0
   153f0:	6a 15                	push   $0x15
   153f2:	68 68 79 01 00       	push   $0x17968
   153f7:	e8 f7 06 00 00       	call   15af3 <pannic>
   153fc:	83 c4 10             	add    $0x10,%esp

  mutex->locked_count = 0;
   153ff:	8b 45 08             	mov    0x8(%ebp),%eax
   15402:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  mutex->owner = (task_t *)0;
   15409:	8b 45 08             	mov    0x8(%ebp),%eax
   1540c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  list_init(&mutex->wait_list);
   15412:	8b 45 08             	mov    0x8(%ebp),%eax
   15415:	83 c0 08             	add    $0x8,%eax
   15418:	83 ec 0c             	sub    $0xc,%esp
   1541b:	50                   	push   %eax
   1541c:	e8 3d ff ff ff       	call   1535e <list_init>
   15421:	83 c4 10             	add    $0x10,%esp
}
   15424:	90                   	nop
   15425:	c9                   	leave  
   15426:	c3                   	ret    

00015427 <mutex_lock>:
/**
 * @brief  加锁
 *
 * @param mutex
 */
void mutex_lock(mutex_t *mutex) {
   15427:	55                   	push   %ebp
   15428:	89 e5                	mov    %esp,%ebp
   1542a:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   1542d:	e8 6e de ff ff       	call   132a0 <idt_enter_protection>
   15432:	89 45 f4             	mov    %eax,-0xc(%ebp)

  // 1. 获取当前任务
  task_t *curr = task_current();
   15435:	e8 5a c5 ff ff       	call   11994 <task_current>
   1543a:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 2.判断该锁是否已被加锁
  if (mutex->locked_count == 0) {  
   1543d:	8b 45 08             	mov    0x8(%ebp),%eax
   15440:	8b 40 04             	mov    0x4(%eax),%eax
   15443:	85 c0                	test   %eax,%eax
   15445:	75 19                	jne    15460 <mutex_lock+0x39>
    //3.还未被加锁，则加锁并记录拥有该锁的任务
    mutex->locked_count++;
   15447:	8b 45 08             	mov    0x8(%ebp),%eax
   1544a:	8b 40 04             	mov    0x4(%eax),%eax
   1544d:	8d 50 01             	lea    0x1(%eax),%edx
   15450:	8b 45 08             	mov    0x8(%ebp),%eax
   15453:	89 50 04             	mov    %edx,0x4(%eax)
    mutex->owner = curr;
   15456:	8b 45 08             	mov    0x8(%ebp),%eax
   15459:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1545c:	89 10                	mov    %edx,(%eax)
   1545e:	eb 47                	jmp    154a7 <mutex_lock+0x80>
  } else if (mutex->owner == curr) {
   15460:	8b 45 08             	mov    0x8(%ebp),%eax
   15463:	8b 00                	mov    (%eax),%eax
   15465:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   15468:	75 11                	jne    1547b <mutex_lock+0x54>
    //4.已被加锁，但当前加锁请求的任务为当前锁的拥有者，直接再加锁即可
    mutex->locked_count++;
   1546a:	8b 45 08             	mov    0x8(%ebp),%eax
   1546d:	8b 40 04             	mov    0x4(%eax),%eax
   15470:	8d 50 01             	lea    0x1(%eax),%edx
   15473:	8b 45 08             	mov    0x8(%ebp),%eax
   15476:	89 50 04             	mov    %edx,0x4(%eax)
   15479:	eb 2c                	jmp    154a7 <mutex_lock+0x80>
  } else {  
    //5.已被加锁，且当前任务不是锁的拥有者，则当前任务进入锁的等待队列，被阻塞住
    task_set_unready(curr);
   1547b:	83 ec 0c             	sub    $0xc,%esp
   1547e:	ff 75 f0             	push   -0x10(%ebp)
   15481:	e8 9e c4 ff ff       	call   11924 <task_set_unready>
   15486:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&mutex->wait_list, &curr->wait_node);
   15489:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1548c:	8d 50 54             	lea    0x54(%eax),%edx
   1548f:	8b 45 08             	mov    0x8(%ebp),%eax
   15492:	83 c0 08             	add    $0x8,%eax
   15495:	83 ec 08             	sub    $0x8,%esp
   15498:	52                   	push   %edx
   15499:	50                   	push   %eax
   1549a:	e8 7d 10 00 00       	call   1651c <list_insert_last>
   1549f:	83 c4 10             	add    $0x10,%esp
    task_switch();
   154a2:	e8 f7 c4 ff ff       	call   1199e <task_switch>
  }

  idt_leave_protection(state);  // TODO:解锁
   154a7:	83 ec 0c             	sub    $0xc,%esp
   154aa:	ff 75 f4             	push   -0xc(%ebp)
   154ad:	e8 06 de ff ff       	call   132b8 <idt_leave_protection>
   154b2:	83 c4 10             	add    $0x10,%esp
}
   154b5:	90                   	nop
   154b6:	c9                   	leave  
   154b7:	c3                   	ret    

000154b8 <mutex_unlock>:
/**
 * @brief  解锁
 *
 * @param mutex
 */
void mutex_unlock(mutex_t *mutex) {
   154b8:	55                   	push   %ebp
   154b9:	89 e5                	mov    %esp,%ebp
   154bb:	83 ec 18             	sub    $0x18,%esp
  idt_state_t state = idt_enter_protection();  // TODO:加锁
   154be:	e8 dd dd ff ff       	call   132a0 <idt_enter_protection>
   154c3:	89 45 f4             	mov    %eax,-0xc(%ebp)

  task_t *curr = task_current();
   154c6:	e8 c9 c4 ff ff       	call   11994 <task_current>
   154cb:	89 45 f0             	mov    %eax,-0x10(%ebp)

  // 1.判断当前任务是否是锁的拥有者
  if (mutex->owner == curr) {
   154ce:	8b 45 08             	mov    0x8(%ebp),%eax
   154d1:	8b 00                	mov    (%eax),%eax
   154d3:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   154d6:	0f 85 83 00 00 00    	jne    1555f <mutex_unlock+0xa7>
    //2.当前任务是锁的拥有者,对锁进行一次解锁，并判断是否已完全解锁
    if (--mutex->locked_count == 0) {
   154dc:	8b 45 08             	mov    0x8(%ebp),%eax
   154df:	8b 40 04             	mov    0x4(%eax),%eax
   154e2:	8d 50 ff             	lea    -0x1(%eax),%edx
   154e5:	8b 45 08             	mov    0x8(%ebp),%eax
   154e8:	89 50 04             	mov    %edx,0x4(%eax)
   154eb:	8b 45 08             	mov    0x8(%ebp),%eax
   154ee:	8b 40 04             	mov    0x4(%eax),%eax
   154f1:	85 c0                	test   %eax,%eax
   154f3:	75 6a                	jne    1555f <mutex_unlock+0xa7>
      //3.锁已被完全解锁,将锁的所有者置空
      mutex->owner = (task_t*)0;
   154f5:	8b 45 08             	mov    0x8(%ebp),%eax
   154f8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
      //4.判断当前等待队列是否为空
      if (!list_is_empty(&mutex->wait_list)) { 
   154fe:	8b 45 08             	mov    0x8(%ebp),%eax
   15501:	83 c0 08             	add    $0x8,%eax
   15504:	83 ec 0c             	sub    $0xc,%esp
   15507:	50                   	push   %eax
   15508:	e8 98 fe ff ff       	call   153a5 <list_is_empty>
   1550d:	83 c4 10             	add    $0x10,%esp
   15510:	85 c0                	test   %eax,%eax
   15512:	75 4b                	jne    1555f <mutex_unlock+0xa7>
        //5.当前等待队列不为空,对锁进行加锁，并交给等待队列的第一个任务
        list_node_t *node = list_remove_first(&mutex->wait_list);
   15514:	8b 45 08             	mov    0x8(%ebp),%eax
   15517:	83 c0 08             	add    $0x8,%eax
   1551a:	83 ec 0c             	sub    $0xc,%esp
   1551d:	50                   	push   %eax
   1551e:	e8 88 10 00 00       	call   165ab <list_remove_first>
   15523:	83 c4 10             	add    $0x10,%esp
   15526:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t *task_wait = list_node_parent(node, task_t, wait_node);
   15529:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1552d:	74 08                	je     15537 <mutex_unlock+0x7f>
   1552f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15532:	83 e8 54             	sub    $0x54,%eax
   15535:	eb 05                	jmp    1553c <mutex_unlock+0x84>
   15537:	b8 00 00 00 00       	mov    $0x0,%eax
   1553c:	89 45 e8             	mov    %eax,-0x18(%ebp)
        mutex->locked_count = 1;
   1553f:	8b 45 08             	mov    0x8(%ebp),%eax
   15542:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        mutex->owner = task_wait;
   15549:	8b 45 08             	mov    0x8(%ebp),%eax
   1554c:	8b 55 e8             	mov    -0x18(%ebp),%edx
   1554f:	89 10                	mov    %edx,(%eax)
        //6.让该任务进入就绪队列
        task_set_ready(task_wait);
   15551:	83 ec 0c             	sub    $0xc,%esp
   15554:	ff 75 e8             	push   -0x18(%ebp)
   15557:	e8 86 c3 ff ff       	call   118e2 <task_set_ready>
   1555c:	83 c4 10             	add    $0x10,%esp
      }
    }
  }

  idt_leave_protection(state);  // TODO:解锁
   1555f:	83 ec 0c             	sub    $0xc,%esp
   15562:	ff 75 f4             	push   -0xc(%ebp)
   15565:	e8 4e dd ff ff       	call   132b8 <idt_leave_protection>
   1556a:	83 c4 10             	add    $0x10,%esp
}
   1556d:	90                   	nop
   1556e:	c9                   	leave  
   1556f:	c3                   	ret    

00015570 <list_init>:
static inline void list_init(list_t *list) {
   15570:	55                   	push   %ebp
   15571:	89 e5                	mov    %esp,%ebp
   15573:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   15576:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1557a:	75 19                	jne    15595 <list_init+0x25>
   1557c:	68 c8 79 01 00       	push   $0x179c8
   15581:	68 6c 7a 01 00       	push   $0x17a6c
   15586:	6a 31                	push   $0x31
   15588:	68 dc 79 01 00       	push   $0x179dc
   1558d:	e8 61 05 00 00       	call   15af3 <pannic>
   15592:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   15595:	8b 45 08             	mov    0x8(%ebp),%eax
   15598:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1559f:	8b 45 08             	mov    0x8(%ebp),%eax
   155a2:	8b 50 04             	mov    0x4(%eax),%edx
   155a5:	8b 45 08             	mov    0x8(%ebp),%eax
   155a8:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   155aa:	8b 45 08             	mov    0x8(%ebp),%eax
   155ad:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   155b4:	90                   	nop
   155b5:	c9                   	leave  
   155b6:	c3                   	ret    

000155b7 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   155b7:	55                   	push   %ebp
   155b8:	89 e5                	mov    %esp,%ebp
   155ba:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   155bd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   155c1:	75 19                	jne    155dc <list_is_empty+0x25>
   155c3:	68 c8 79 01 00       	push   $0x179c8
   155c8:	68 78 7a 01 00       	push   $0x17a78
   155cd:	6a 38                	push   $0x38
   155cf:	68 dc 79 01 00       	push   $0x179dc
   155d4:	e8 1a 05 00 00       	call   15af3 <pannic>
   155d9:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   155dc:	8b 45 08             	mov    0x8(%ebp),%eax
   155df:	8b 40 08             	mov    0x8(%eax),%eax
   155e2:	85 c0                	test   %eax,%eax
   155e4:	0f 94 c0             	sete   %al
   155e7:	0f b6 c0             	movzbl %al,%eax
}
   155ea:	c9                   	leave  
   155eb:	c3                   	ret    

000155ec <sem_init>:
 * @brief  初始化信号量对象
 * 
 * @param sem 信号量对象
 * @param init_count 初始化信号量数量 
 */
void sem_init(sem_t *sem, int init_count) {
   155ec:	55                   	push   %ebp
   155ed:	89 e5                	mov    %esp,%ebp
   155ef:	83 ec 08             	sub    $0x8,%esp
    ASSERT(sem != (sem_t*)0);
   155f2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   155f6:	75 19                	jne    15611 <sem_init+0x25>
   155f8:	68 1a 7a 01 00       	push   $0x17a1a
   155fd:	68 60 7a 01 00       	push   $0x17a60
   15602:	6a 18                	push   $0x18
   15604:	68 2c 7a 01 00       	push   $0x17a2c
   15609:	e8 e5 04 00 00       	call   15af3 <pannic>
   1560e:	83 c4 10             	add    $0x10,%esp
    sem->count = init_count;
   15611:	8b 45 08             	mov    0x8(%ebp),%eax
   15614:	8b 55 0c             	mov    0xc(%ebp),%edx
   15617:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   15619:	8b 45 08             	mov    0x8(%ebp),%eax
   1561c:	83 c0 04             	add    $0x4,%eax
   1561f:	83 ec 0c             	sub    $0xc,%esp
   15622:	50                   	push   %eax
   15623:	e8 48 ff ff ff       	call   15570 <list_init>
   15628:	83 c4 10             	add    $0x10,%esp
}
   1562b:	90                   	nop
   1562c:	c9                   	leave  
   1562d:	c3                   	ret    

0001562e <sem_wait>:
 *         信号量相当于入场券，获取信号量之后才有资格访问信号量保护的资源
 * 
 * @param sem 
 * @param init_count 
 */
void sem_wait(sem_t *sem) {
   1562e:	55                   	push   %ebp
   1562f:	89 e5                	mov    %esp,%ebp
   15631:	83 ec 18             	sub    $0x18,%esp
    
    idt_state_t state = idt_enter_protection();//TODO:加锁
   15634:	e8 67 dc ff ff       	call   132a0 <idt_enter_protection>
   15639:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //1.判断信号量是否还有剩余
    if(sem->count > 0) {//有剩余，直接使用，任务获取信号量继续执行
   1563c:	8b 45 08             	mov    0x8(%ebp),%eax
   1563f:	8b 00                	mov    (%eax),%eax
   15641:	85 c0                	test   %eax,%eax
   15643:	7e 0f                	jle    15654 <sem_wait+0x26>
        --sem->count;   
   15645:	8b 45 08             	mov    0x8(%ebp),%eax
   15648:	8b 00                	mov    (%eax),%eax
   1564a:	8d 50 ff             	lea    -0x1(%eax),%edx
   1564d:	8b 45 08             	mov    0x8(%ebp),%eax
   15650:	89 10                	mov    %edx,(%eax)
   15652:	eb 34                	jmp    15688 <sem_wait+0x5a>
    } else {//没有剩余，任务进入延时队列等待信号量
        task_t *curr = task_current();
   15654:	e8 3b c3 ff ff       	call   11994 <task_current>
   15659:	89 45 f0             	mov    %eax,-0x10(%ebp)
        //2.将当前任务从就绪队列中取下
        task_set_unready(curr); 
   1565c:	83 ec 0c             	sub    $0xc,%esp
   1565f:	ff 75 f0             	push   -0x10(%ebp)
   15662:	e8 bd c2 ff ff       	call   11924 <task_set_unready>
   15667:	83 c4 10             	add    $0x10,%esp
        //3.将当前任务加入到信号量等待队列
        list_insert_last(&sem->wait_list, &curr->wait_node); 
   1566a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1566d:	8d 50 54             	lea    0x54(%eax),%edx
   15670:	8b 45 08             	mov    0x8(%ebp),%eax
   15673:	83 c0 04             	add    $0x4,%eax
   15676:	83 ec 08             	sub    $0x8,%esp
   15679:	52                   	push   %edx
   1567a:	50                   	push   %eax
   1567b:	e8 9c 0e 00 00       	call   1651c <list_insert_last>
   15680:	83 c4 10             	add    $0x10,%esp
        //4.切换任务
        task_switch();
   15683:	e8 16 c3 ff ff       	call   1199e <task_switch>
    }

    idt_leave_protection(state);//TODO:解锁
   15688:	83 ec 0c             	sub    $0xc,%esp
   1568b:	ff 75 f4             	push   -0xc(%ebp)
   1568e:	e8 25 dc ff ff       	call   132b8 <idt_leave_protection>
   15693:	83 c4 10             	add    $0x10,%esp
}
   15696:	90                   	nop
   15697:	c9                   	leave  
   15698:	c3                   	ret    

00015699 <sem_notify>:
 *        等待队列中若有任务则直接获取该信号量，继续执行即访问资源
 *         若没有任务，则信号量对象记录的信号量数量加1，预留给下一次获取
 * 
 * @param sem 
 */
void sem_notify(sem_t *sem) {
   15699:	55                   	push   %ebp
   1569a:	89 e5                	mov    %esp,%ebp
   1569c:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   1569f:	e8 fc db ff ff       	call   132a0 <idt_enter_protection>
   156a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if (!list_is_empty(&sem->wait_list)) {
   156a7:	8b 45 08             	mov    0x8(%ebp),%eax
   156aa:	83 c0 04             	add    $0x4,%eax
   156ad:	83 ec 0c             	sub    $0xc,%esp
   156b0:	50                   	push   %eax
   156b1:	e8 01 ff ff ff       	call   155b7 <list_is_empty>
   156b6:	83 c4 10             	add    $0x10,%esp
   156b9:	85 c0                	test   %eax,%eax
   156bb:	75 40                	jne    156fd <sem_notify+0x64>
        list_node_t *node = list_remove_first(&sem->wait_list);
   156bd:	8b 45 08             	mov    0x8(%ebp),%eax
   156c0:	83 c0 04             	add    $0x4,%eax
   156c3:	83 ec 0c             	sub    $0xc,%esp
   156c6:	50                   	push   %eax
   156c7:	e8 df 0e 00 00       	call   165ab <list_remove_first>
   156cc:	83 c4 10             	add    $0x10,%esp
   156cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t *task = list_node_parent(node, task_t, wait_node);
   156d2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   156d6:	74 08                	je     156e0 <sem_notify+0x47>
   156d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   156db:	83 e8 54             	sub    $0x54,%eax
   156de:	eb 05                	jmp    156e5 <sem_notify+0x4c>
   156e0:	b8 00 00 00 00       	mov    $0x0,%eax
   156e5:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   156e8:	83 ec 0c             	sub    $0xc,%esp
   156eb:	ff 75 ec             	push   -0x14(%ebp)
   156ee:	e8 ef c1 ff ff       	call   118e2 <task_set_ready>
   156f3:	83 c4 10             	add    $0x10,%esp
        task_switch();
   156f6:	e8 a3 c2 ff ff       	call   1199e <task_switch>
   156fb:	eb 0d                	jmp    1570a <sem_notify+0x71>
    } else {
        sem->count++;
   156fd:	8b 45 08             	mov    0x8(%ebp),%eax
   15700:	8b 00                	mov    (%eax),%eax
   15702:	8d 50 01             	lea    0x1(%eax),%edx
   15705:	8b 45 08             	mov    0x8(%ebp),%eax
   15708:	89 10                	mov    %edx,(%eax)
    }

    idt_leave_protection(state);//TODO:解锁
   1570a:	83 ec 0c             	sub    $0xc,%esp
   1570d:	ff 75 f4             	push   -0xc(%ebp)
   15710:	e8 a3 db ff ff       	call   132b8 <idt_leave_protection>
   15715:	83 c4 10             	add    $0x10,%esp

}
   15718:	90                   	nop
   15719:	c9                   	leave  
   1571a:	c3                   	ret    

0001571b <sem_count>:

int sem_count(sem_t *sem) {
   1571b:	55                   	push   %ebp
   1571c:	89 e5                	mov    %esp,%ebp
   1571e:	83 ec 18             	sub    $0x18,%esp
    idt_state_t state = idt_enter_protection();//TODO:加锁
   15721:	e8 7a db ff ff       	call   132a0 <idt_enter_protection>
   15726:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   15729:	8b 45 08             	mov    0x8(%ebp),%eax
   1572c:	8b 00                	mov    (%eax),%eax
   1572e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    idt_leave_protection(state);//TODO:解锁
   15731:	83 ec 0c             	sub    $0xc,%esp
   15734:	ff 75 f4             	push   -0xc(%ebp)
   15737:	e8 7c db ff ff       	call   132b8 <idt_leave_protection>
   1573c:	83 c4 10             	add    $0x10,%esp

    return count;
   1573f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15742:	c9                   	leave  
   15743:	c3                   	ret    

00015744 <list_init>:
static inline void list_init(list_t *list) {
   15744:	55                   	push   %ebp
   15745:	89 e5                	mov    %esp,%ebp
   15747:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1574a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1574e:	75 19                	jne    15769 <list_init+0x25>
   15750:	68 88 7a 01 00       	push   $0x17a88
   15755:	68 8c 7b 01 00       	push   $0x17b8c
   1575a:	6a 31                	push   $0x31
   1575c:	68 9c 7a 01 00       	push   $0x17a9c
   15761:	e8 8d 03 00 00       	call   15af3 <pannic>
   15766:	83 c4 10             	add    $0x10,%esp
    list->first = list->last = (list_node_t*)0;
   15769:	8b 45 08             	mov    0x8(%ebp),%eax
   1576c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   15773:	8b 45 08             	mov    0x8(%ebp),%eax
   15776:	8b 50 04             	mov    0x4(%eax),%edx
   15779:	8b 45 08             	mov    0x8(%ebp),%eax
   1577c:	89 10                	mov    %edx,(%eax)
    list->size = 0;
   1577e:	8b 45 08             	mov    0x8(%ebp),%eax
   15781:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   15788:	90                   	nop
   15789:	c9                   	leave  
   1578a:	c3                   	ret    

0001578b <list_get_size>:
static inline int list_get_size(list_t *list) {
   1578b:	55                   	push   %ebp
   1578c:	89 e5                	mov    %esp,%ebp
   1578e:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   15791:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15795:	75 19                	jne    157b0 <list_get_size+0x25>
   15797:	68 88 7a 01 00       	push   $0x17a88
   1579c:	68 98 7b 01 00       	push   $0x17b98
   157a1:	6a 3e                	push   $0x3e
   157a3:	68 9c 7a 01 00       	push   $0x17a9c
   157a8:	e8 46 03 00 00       	call   15af3 <pannic>
   157ad:	83 c4 10             	add    $0x10,%esp
    return list->size;
   157b0:	8b 45 08             	mov    0x8(%ebp),%eax
   157b3:	8b 40 08             	mov    0x8(%eax),%eax
}
   157b6:	c9                   	leave  
   157b7:	c3                   	ret    

000157b8 <list_get_first>:
static inline list_node_t *list_get_first(list_t *list) {
   157b8:	55                   	push   %ebp
   157b9:	89 e5                	mov    %esp,%ebp
   157bb:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   157be:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   157c2:	75 19                	jne    157dd <list_get_first+0x25>
   157c4:	68 88 7a 01 00       	push   $0x17a88
   157c9:	68 b8 7b 01 00       	push   $0x17bb8
   157ce:	6a 44                	push   $0x44
   157d0:	68 9c 7a 01 00       	push   $0x17a9c
   157d5:	e8 19 03 00 00       	call   15af3 <pannic>
   157da:	83 c4 10             	add    $0x10,%esp
    return list->first;
   157dd:	8b 45 08             	mov    0x8(%ebp),%eax
   157e0:	8b 00                	mov    (%eax),%eax
}
   157e2:	c9                   	leave  
   157e3:	c3                   	ret    

000157e4 <list_get_last>:

static inline list_node_t *list_get_last(list_t *list) {
   157e4:	55                   	push   %ebp
   157e5:	89 e5                	mov    %esp,%ebp
   157e7:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   157ea:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   157ee:	75 19                	jne    15809 <list_get_last+0x25>
   157f0:	68 88 7a 01 00       	push   $0x17a88
   157f5:	68 a8 7b 01 00       	push   $0x17ba8
   157fa:	6a 4a                	push   $0x4a
   157fc:	68 9c 7a 01 00       	push   $0x17a9c
   15801:	e8 ed 02 00 00       	call   15af3 <pannic>
   15806:	83 c4 10             	add    $0x10,%esp

    return list->last;
   15809:	8b 45 08             	mov    0x8(%ebp),%eax
   1580c:	8b 40 04             	mov    0x4(%eax),%eax
}
   1580f:	c9                   	leave  
   15810:	c3                   	ret    

00015811 <list_test>:

#include "tools/list.h"
#include "tools/log.h"
#include "common/types.h"

void list_test(void) {
   15811:	55                   	push   %ebp
   15812:	89 e5                	mov    %esp,%ebp
   15814:	56                   	push   %esi
   15815:	53                   	push   %ebx
   15816:	83 ec 70             	sub    $0x70,%esp
    list_t list;
    list_node_t nodes[5];

    list_init(&list);
   15819:	83 ec 0c             	sub    $0xc,%esp
   1581c:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1581f:	50                   	push   %eax
   15820:	e8 1f ff ff ff       	call   15744 <list_init>
   15825:	83 c4 10             	add    $0x10,%esp
    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   15828:	83 ec 0c             	sub    $0xc,%esp
   1582b:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1582e:	50                   	push   %eax
   1582f:	e8 57 ff ff ff       	call   1578b <list_get_size>
   15834:	83 c4 10             	add    $0x10,%esp
   15837:	89 c6                	mov    %eax,%esi
   15839:	83 ec 0c             	sub    $0xc,%esp
   1583c:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1583f:	50                   	push   %eax
   15840:	e8 9f ff ff ff       	call   157e4 <list_get_last>
   15845:	83 c4 10             	add    $0x10,%esp
   15848:	89 c3                	mov    %eax,%ebx
   1584a:	83 ec 0c             	sub    $0xc,%esp
   1584d:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   15850:	50                   	push   %eax
   15851:	e8 62 ff ff ff       	call   157b8 <list_get_first>
   15856:	83 c4 10             	add    $0x10,%esp
   15859:	56                   	push   %esi
   1585a:	53                   	push   %ebx
   1585b:	50                   	push   %eax
   1585c:	68 dc 7a 01 00       	push   $0x17adc
   15861:	e8 a3 0f 00 00       	call   16809 <log_printf>
   15866:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_insert_first
    for (int i = 0; i < 5; ++i) {
   15869:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   15870:	eb 3f                	jmp    158b1 <list_test+0xa0>
        list_node_t *node = nodes + i;
   15872:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15875:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   1587c:	8d 45 9c             	lea    -0x64(%ebp),%eax
   1587f:	01 d0                	add    %edx,%eax
   15881:	89 45 d0             	mov    %eax,-0x30(%ebp)

        log_printf("insert first to list: %d, 0x%x", i, (uint32_t)node);
   15884:	8b 45 d0             	mov    -0x30(%ebp),%eax
   15887:	83 ec 04             	sub    $0x4,%esp
   1588a:	50                   	push   %eax
   1588b:	ff 75 f4             	push   -0xc(%ebp)
   1588e:	68 04 7b 01 00       	push   $0x17b04
   15893:	e8 71 0f 00 00       	call   16809 <log_printf>
   15898:	83 c4 10             	add    $0x10,%esp
        list_insert_first(&list, node);
   1589b:	83 ec 08             	sub    $0x8,%esp
   1589e:	ff 75 d0             	push   -0x30(%ebp)
   158a1:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   158a4:	50                   	push   %eax
   158a5:	e8 e7 0b 00 00       	call   16491 <list_insert_first>
   158aa:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   158ad:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   158b1:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   158b5:	7e bb                	jle    15872 <list_test+0x61>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   158b7:	83 ec 0c             	sub    $0xc,%esp
   158ba:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   158bd:	50                   	push   %eax
   158be:	e8 c8 fe ff ff       	call   1578b <list_get_size>
   158c3:	83 c4 10             	add    $0x10,%esp
   158c6:	89 c6                	mov    %eax,%esi
   158c8:	83 ec 0c             	sub    $0xc,%esp
   158cb:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   158ce:	50                   	push   %eax
   158cf:	e8 10 ff ff ff       	call   157e4 <list_get_last>
   158d4:	83 c4 10             	add    $0x10,%esp
   158d7:	89 c3                	mov    %eax,%ebx
   158d9:	83 ec 0c             	sub    $0xc,%esp
   158dc:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   158df:	50                   	push   %eax
   158e0:	e8 d3 fe ff ff       	call   157b8 <list_get_first>
   158e5:	83 c4 10             	add    $0x10,%esp
   158e8:	56                   	push   %esi
   158e9:	53                   	push   %ebx
   158ea:	50                   	push   %eax
   158eb:	68 dc 7a 01 00       	push   $0x17adc
   158f0:	e8 14 0f 00 00       	call   16809 <log_printf>
   158f5:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

   
    //测试list_remove_first
    for (int i = 0; i < 5; ++i) {
   158f8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   158ff:	eb 2d                	jmp    1592e <list_test+0x11d>
        list_node_t *node = list_remove_first(&list);
   15901:	83 ec 0c             	sub    $0xc,%esp
   15904:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   15907:	50                   	push   %eax
   15908:	e8 9e 0c 00 00       	call   165ab <list_remove_first>
   1590d:	83 c4 10             	add    $0x10,%esp
   15910:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        log_printf("remove first: %d, 0x%x", i, (uint32_t)node);
   15913:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   15916:	83 ec 04             	sub    $0x4,%esp
   15919:	50                   	push   %eax
   1591a:	ff 75 f0             	push   -0x10(%ebp)
   1591d:	68 23 7b 01 00       	push   $0x17b23
   15922:	e8 e2 0e 00 00       	call   16809 <log_printf>
   15927:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   1592a:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   1592e:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   15932:	7e cd                	jle    15901 <list_test+0xf0>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   15934:	83 ec 0c             	sub    $0xc,%esp
   15937:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1593a:	50                   	push   %eax
   1593b:	e8 4b fe ff ff       	call   1578b <list_get_size>
   15940:	83 c4 10             	add    $0x10,%esp
   15943:	89 c6                	mov    %eax,%esi
   15945:	83 ec 0c             	sub    $0xc,%esp
   15948:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1594b:	50                   	push   %eax
   1594c:	e8 93 fe ff ff       	call   157e4 <list_get_last>
   15951:	83 c4 10             	add    $0x10,%esp
   15954:	89 c3                	mov    %eax,%ebx
   15956:	83 ec 0c             	sub    $0xc,%esp
   15959:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1595c:	50                   	push   %eax
   1595d:	e8 56 fe ff ff       	call   157b8 <list_get_first>
   15962:	83 c4 10             	add    $0x10,%esp
   15965:	56                   	push   %esi
   15966:	53                   	push   %ebx
   15967:	50                   	push   %eax
   15968:	68 dc 7a 01 00       	push   $0x17adc
   1596d:	e8 97 0e 00 00       	call   16809 <log_printf>
   15972:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    

    //测试list_insert_last
    for (int i = 0; i < 5; ++i) {
   15975:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   1597c:	eb 3f                	jmp    159bd <list_test+0x1ac>
        list_node_t *node = nodes + i;
   1597e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15981:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   15988:	8d 45 9c             	lea    -0x64(%ebp),%eax
   1598b:	01 d0                	add    %edx,%eax
   1598d:	89 45 d8             	mov    %eax,-0x28(%ebp)

        log_printf("insert last to list: %d, 0x%x", i, (uint32_t)node);
   15990:	8b 45 d8             	mov    -0x28(%ebp),%eax
   15993:	83 ec 04             	sub    $0x4,%esp
   15996:	50                   	push   %eax
   15997:	ff 75 ec             	push   -0x14(%ebp)
   1599a:	68 3a 7b 01 00       	push   $0x17b3a
   1599f:	e8 65 0e 00 00       	call   16809 <log_printf>
   159a4:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&list, node);
   159a7:	83 ec 08             	sub    $0x8,%esp
   159aa:	ff 75 d8             	push   -0x28(%ebp)
   159ad:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   159b0:	50                   	push   %eax
   159b1:	e8 66 0b 00 00       	call   1651c <list_insert_last>
   159b6:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   159b9:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   159bd:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   159c1:	7e bb                	jle    1597e <list_test+0x16d>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   159c3:	83 ec 0c             	sub    $0xc,%esp
   159c6:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   159c9:	50                   	push   %eax
   159ca:	e8 bc fd ff ff       	call   1578b <list_get_size>
   159cf:	83 c4 10             	add    $0x10,%esp
   159d2:	89 c6                	mov    %eax,%esi
   159d4:	83 ec 0c             	sub    $0xc,%esp
   159d7:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   159da:	50                   	push   %eax
   159db:	e8 04 fe ff ff       	call   157e4 <list_get_last>
   159e0:	83 c4 10             	add    $0x10,%esp
   159e3:	89 c3                	mov    %eax,%ebx
   159e5:	83 ec 0c             	sub    $0xc,%esp
   159e8:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   159eb:	50                   	push   %eax
   159ec:	e8 c7 fd ff ff       	call   157b8 <list_get_first>
   159f1:	83 c4 10             	add    $0x10,%esp
   159f4:	56                   	push   %esi
   159f5:	53                   	push   %ebx
   159f6:	50                   	push   %eax
   159f7:	68 dc 7a 01 00       	push   $0x17adc
   159fc:	e8 08 0e 00 00       	call   16809 <log_printf>
   15a01:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));

    //测试list_remove_last
    for (int i = 0; i < 5; ++i) {
   15a04:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   15a0b:	eb 2d                	jmp    15a3a <list_test+0x229>
        list_node_t *node = list_remove_last(&list);
   15a0d:	83 ec 0c             	sub    $0xc,%esp
   15a10:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   15a13:	50                   	push   %eax
   15a14:	e8 43 0c 00 00       	call   1665c <list_remove_last>
   15a19:	83 c4 10             	add    $0x10,%esp
   15a1c:	89 45 dc             	mov    %eax,-0x24(%ebp)
        log_printf("remove last: %d, 0x%x", i, (uint32_t)node);
   15a1f:	8b 45 dc             	mov    -0x24(%ebp),%eax
   15a22:	83 ec 04             	sub    $0x4,%esp
   15a25:	50                   	push   %eax
   15a26:	ff 75 e8             	push   -0x18(%ebp)
   15a29:	68 58 7b 01 00       	push   $0x17b58
   15a2e:	e8 d6 0d 00 00       	call   16809 <log_printf>
   15a33:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; ++i) {
   15a36:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   15a3a:	83 7d e8 04          	cmpl   $0x4,-0x18(%ebp)
   15a3e:	7e cd                	jle    15a0d <list_test+0x1fc>
    }

    log_printf("list: first=0x%x, last=0x%x, size=%d", 
   15a40:	83 ec 0c             	sub    $0xc,%esp
   15a43:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   15a46:	50                   	push   %eax
   15a47:	e8 3f fd ff ff       	call   1578b <list_get_size>
   15a4c:	83 c4 10             	add    $0x10,%esp
   15a4f:	89 c6                	mov    %eax,%esi
   15a51:	83 ec 0c             	sub    $0xc,%esp
   15a54:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   15a57:	50                   	push   %eax
   15a58:	e8 87 fd ff ff       	call   157e4 <list_get_last>
   15a5d:	83 c4 10             	add    $0x10,%esp
   15a60:	89 c3                	mov    %eax,%ebx
   15a62:	83 ec 0c             	sub    $0xc,%esp
   15a65:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   15a68:	50                   	push   %eax
   15a69:	e8 4a fd ff ff       	call   157b8 <list_get_first>
   15a6e:	83 c4 10             	add    $0x10,%esp
   15a71:	56                   	push   %esi
   15a72:	53                   	push   %ebx
   15a73:	50                   	push   %eax
   15a74:	68 dc 7a 01 00       	push   $0x17adc
   15a79:	e8 8b 0d 00 00       	call   16809 <log_printf>
   15a7e:	83 c4 10             	add    $0x10,%esp
    list_get_first(&list), list_get_last(&list), list_get_size(&list));
    
    struct type_t {
        int i;
        list_node_t node;
    }v = {0x123456};
   15a81:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
   15a88:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
   15a8f:	c7 45 98 00 00 00 00 	movl   $0x0,-0x68(%ebp)
   15a96:	c7 45 90 56 34 12 00 	movl   $0x123456,-0x70(%ebp)

    list_node_t *v_node = &v.node;
   15a9d:	8d 45 90             	lea    -0x70(%ebp),%eax
   15aa0:	83 c0 04             	add    $0x4,%eax
   15aa3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    struct type_t *p = list_node_parent(v_node, struct type_t, node);  
   15aa6:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   15aaa:	74 08                	je     15ab4 <list_test+0x2a3>
   15aac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   15aaf:	83 e8 04             	sub    $0x4,%eax
   15ab2:	eb 05                	jmp    15ab9 <list_test+0x2a8>
   15ab4:	b8 00 00 00 00       	mov    $0x0,%eax
   15ab9:	89 45 e0             	mov    %eax,-0x20(%ebp)

    log_printf("v addr = 0x%x", (uint32_t)&v);
   15abc:	8d 45 90             	lea    -0x70(%ebp),%eax
   15abf:	83 ec 08             	sub    $0x8,%esp
   15ac2:	50                   	push   %eax
   15ac3:	68 6e 7b 01 00       	push   $0x17b6e
   15ac8:	e8 3c 0d 00 00       	call   16809 <log_printf>
   15acd:	83 c4 10             	add    $0x10,%esp
    log_printf("p addr = 0x%x", (uint32_t)p);  
   15ad0:	8b 45 e0             	mov    -0x20(%ebp),%eax
   15ad3:	83 ec 08             	sub    $0x8,%esp
   15ad6:	50                   	push   %eax
   15ad7:	68 7c 7b 01 00       	push   $0x17b7c
   15adc:	e8 28 0d 00 00       	call   16809 <log_printf>
   15ae1:	83 c4 10             	add    $0x10,%esp

 }
   15ae4:	90                   	nop
   15ae5:	8d 65 f8             	lea    -0x8(%ebp),%esp
   15ae8:	5b                   	pop    %ebx
   15ae9:	5e                   	pop    %esi
   15aea:	5d                   	pop    %ebp
   15aeb:	c3                   	ret    

00015aec <hlt>:
static inline void hlt(void) { __asm__ __volatile__("hlt"); }
   15aec:	55                   	push   %ebp
   15aed:	89 e5                	mov    %esp,%ebp
   15aef:	f4                   	hlt    
   15af0:	90                   	nop
   15af1:	5d                   	pop    %ebp
   15af2:	c3                   	ret    

00015af3 <pannic>:
 * @param file 异常所在文件绝对路径
 * @param line 异常所在行号
 * @param func 异常所在函数名 
 * @param reason 异常的原因
 */
void pannic(const char *file, int line, const char *func, const char *reason) {
   15af3:	55                   	push   %ebp
   15af4:	89 e5                	mov    %esp,%ebp
   15af6:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert faild! %s\n", reason);
   15af9:	83 ec 08             	sub    $0x8,%esp
   15afc:	ff 75 14             	push   0x14(%ebp)
   15aff:	68 c7 7b 01 00       	push   $0x17bc7
   15b04:	e8 00 0d 00 00       	call   16809 <log_printf>
   15b09:	83 c4 10             	add    $0x10,%esp
    log_printf("file:\t%s\nline:\t%d\nfunc:\t%s\n", file, line, func);
   15b0c:	ff 75 10             	push   0x10(%ebp)
   15b0f:	ff 75 0c             	push   0xc(%ebp)
   15b12:	ff 75 08             	push   0x8(%ebp)
   15b15:	68 d9 7b 01 00       	push   $0x17bd9
   15b1a:	e8 ea 0c 00 00       	call   16809 <log_printf>
   15b1f:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   15b22:	e8 c5 ff ff ff       	call   15aec <hlt>
   15b27:	eb f9                	jmp    15b22 <pannic+0x2f>

00015b29 <bitmap_byte_count>:
 * @brief  向上取整获取位图数组中有多少字节
 * 
 * @param bit_count  位图数组拥有的bit位数
 * @return int 向上取整得到的字节数
 */
int bitmap_byte_count(int bit_count) {
   15b29:	55                   	push   %ebp
   15b2a:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8;
   15b2c:	8b 45 08             	mov    0x8(%ebp),%eax
   15b2f:	83 c0 07             	add    $0x7,%eax
   15b32:	8d 50 07             	lea    0x7(%eax),%edx
   15b35:	85 c0                	test   %eax,%eax
   15b37:	0f 48 c2             	cmovs  %edx,%eax
   15b3a:	c1 f8 03             	sar    $0x3,%eax
}
   15b3d:	5d                   	pop    %ebp
   15b3e:	c3                   	ret    

00015b3f <bitmap_init>:
 * @param bitmap 需要初始化的位图
 * @param bits 位图所包含的位图数组的起始地址
 * @param count 页的数量
 * @param init_bit 将位图数组的每一位设置为init_bit
 */
void bitmap_init(bitmap_t *bitmap, uint8_t *bits, int count, int init_bit) {
   15b3f:	55                   	push   %ebp
   15b40:	89 e5                	mov    %esp,%ebp
   15b42:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   15b45:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15b49:	75 19                	jne    15b64 <bitmap_init+0x25>
   15b4b:	68 f8 7b 01 00       	push   $0x17bf8
   15b50:	68 8c 7c 01 00       	push   $0x17c8c
   15b55:	6a 24                	push   $0x24
   15b57:	68 10 7c 01 00       	push   $0x17c10
   15b5c:	e8 92 ff ff ff       	call   15af3 <pannic>
   15b61:	83 c4 10             	add    $0x10,%esp
    ASSERT(bits != (uint8_t*)0);
   15b64:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   15b68:	75 19                	jne    15b83 <bitmap_init+0x44>
   15b6a:	68 48 7c 01 00       	push   $0x17c48
   15b6f:	68 8c 7c 01 00       	push   $0x17c8c
   15b74:	6a 25                	push   $0x25
   15b76:	68 10 7c 01 00       	push   $0x17c10
   15b7b:	e8 73 ff ff ff       	call   15af3 <pannic>
   15b80:	83 c4 10             	add    $0x10,%esp

    bitmap->bit_count = count;
   15b83:	8b 45 08             	mov    0x8(%ebp),%eax
   15b86:	8b 55 10             	mov    0x10(%ebp),%edx
   15b89:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   15b8b:	8b 45 08             	mov    0x8(%ebp),%eax
   15b8e:	8b 55 0c             	mov    0xc(%ebp),%edx
   15b91:	89 50 04             	mov    %edx,0x4(%eax)

    //计算该位图需要多少字节
    int bytes = bitmap_byte_count(bitmap->bit_count);
   15b94:	8b 45 08             	mov    0x8(%ebp),%eax
   15b97:	8b 00                	mov    (%eax),%eax
   15b99:	83 ec 0c             	sub    $0xc,%esp
   15b9c:	50                   	push   %eax
   15b9d:	e8 87 ff ff ff       	call   15b29 <bitmap_byte_count>
   15ba2:	83 c4 10             	add    $0x10,%esp
   15ba5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    kernel_memset(bitmap->bits, init_bit ? 0xff : 0, bytes);
   15ba8:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   15bac:	74 07                	je     15bb5 <bitmap_init+0x76>
   15bae:	ba ff 00 00 00       	mov    $0xff,%edx
   15bb3:	eb 05                	jmp    15bba <bitmap_init+0x7b>
   15bb5:	ba 00 00 00 00       	mov    $0x0,%edx
   15bba:	8b 45 08             	mov    0x8(%ebp),%eax
   15bbd:	8b 40 04             	mov    0x4(%eax),%eax
   15bc0:	83 ec 04             	sub    $0x4,%esp
   15bc3:	ff 75 f4             	push   -0xc(%ebp)
   15bc6:	52                   	push   %edx
   15bc7:	50                   	push   %eax
   15bc8:	e8 3f 04 00 00       	call   1600c <kernel_memset>
   15bcd:	83 c4 10             	add    $0x10,%esp

}
   15bd0:	90                   	nop
   15bd1:	c9                   	leave  
   15bd2:	c3                   	ret    

00015bd3 <bitmap_get_bit>:
 * 
 * @param bitmap 
 * @param index 
 * @return uint8_t 
 */
uint8_t bitmap_get_bit(bitmap_t *bitmap, int index) {
   15bd3:	55                   	push   %ebp
   15bd4:	89 e5                	mov    %esp,%ebp
   15bd6:	53                   	push   %ebx
   15bd7:	83 ec 04             	sub    $0x4,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   15bda:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15bde:	75 19                	jne    15bf9 <bitmap_get_bit+0x26>
   15be0:	68 f8 7b 01 00       	push   $0x17bf8
   15be5:	68 98 7c 01 00       	push   $0x17c98
   15bea:	6a 39                	push   $0x39
   15bec:	68 10 7c 01 00       	push   $0x17c10
   15bf1:	e8 fd fe ff ff       	call   15af3 <pannic>
   15bf6:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0);
   15bf9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   15bfd:	79 19                	jns    15c18 <bitmap_get_bit+0x45>
   15bff:	68 5c 7c 01 00       	push   $0x17c5c
   15c04:	68 98 7c 01 00       	push   $0x17c98
   15c09:	6a 3a                	push   $0x3a
   15c0b:	68 10 7c 01 00       	push   $0x17c10
   15c10:	e8 de fe ff ff       	call   15af3 <pannic>
   15c15:	83 c4 10             	add    $0x10,%esp

    return (bitmap->bits[index / 8] & (1 << (index % 8)));
   15c18:	8b 45 08             	mov    0x8(%ebp),%eax
   15c1b:	8b 48 04             	mov    0x4(%eax),%ecx
   15c1e:	8b 45 0c             	mov    0xc(%ebp),%eax
   15c21:	8d 50 07             	lea    0x7(%eax),%edx
   15c24:	85 c0                	test   %eax,%eax
   15c26:	0f 48 c2             	cmovs  %edx,%eax
   15c29:	c1 f8 03             	sar    $0x3,%eax
   15c2c:	01 c8                	add    %ecx,%eax
   15c2e:	0f b6 00             	movzbl (%eax),%eax
   15c31:	89 c3                	mov    %eax,%ebx
   15c33:	8b 45 0c             	mov    0xc(%ebp),%eax
   15c36:	83 e0 07             	and    $0x7,%eax
   15c39:	ba 01 00 00 00       	mov    $0x1,%edx
   15c3e:	89 c1                	mov    %eax,%ecx
   15c40:	d3 e2                	shl    %cl,%edx
   15c42:	89 d0                	mov    %edx,%eax
   15c44:	21 d8                	and    %ebx,%eax
}
   15c46:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   15c49:	c9                   	leave  
   15c4a:	c3                   	ret    

00015c4b <bitmap_set_bit>:
 * @param bitmap 
 * @param index 
 * @param count 
 * @param bit 
 */
void bitmap_set_bit(bitmap_t *bitmap, int index, int count, int bit) {
   15c4b:	55                   	push   %ebp
   15c4c:	89 e5                	mov    %esp,%ebp
   15c4e:	56                   	push   %esi
   15c4f:	53                   	push   %ebx
   15c50:	83 ec 10             	sub    $0x10,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   15c53:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15c57:	75 19                	jne    15c72 <bitmap_set_bit+0x27>
   15c59:	68 f8 7b 01 00       	push   $0x17bf8
   15c5e:	68 a8 7c 01 00       	push   $0x17ca8
   15c63:	6a 48                	push   $0x48
   15c65:	68 10 7c 01 00       	push   $0x17c10
   15c6a:	e8 84 fe ff ff       	call   15af3 <pannic>
   15c6f:	83 c4 10             	add    $0x10,%esp
    ASSERT(index >= 0 && count >= 0);
   15c72:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   15c76:	78 06                	js     15c7e <bitmap_set_bit+0x33>
   15c78:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   15c7c:	79 19                	jns    15c97 <bitmap_set_bit+0x4c>
   15c7e:	68 67 7c 01 00       	push   $0x17c67
   15c83:	68 a8 7c 01 00       	push   $0x17ca8
   15c88:	6a 49                	push   $0x49
   15c8a:	68 10 7c 01 00       	push   $0x17c10
   15c8f:	e8 5f fe ff ff       	call   15af3 <pannic>
   15c94:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   15c97:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   15c9e:	e9 92 00 00 00       	jmp    15d35 <bitmap_set_bit+0xea>
        if (bit) {
   15ca3:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   15ca7:	74 42                	je     15ceb <bitmap_set_bit+0xa0>
            bitmap->bits[index / 8] |= (1 << (index % 8));
   15ca9:	8b 45 08             	mov    0x8(%ebp),%eax
   15cac:	8b 48 04             	mov    0x4(%eax),%ecx
   15caf:	8b 45 0c             	mov    0xc(%ebp),%eax
   15cb2:	8d 50 07             	lea    0x7(%eax),%edx
   15cb5:	85 c0                	test   %eax,%eax
   15cb7:	0f 48 c2             	cmovs  %edx,%eax
   15cba:	c1 f8 03             	sar    $0x3,%eax
   15cbd:	89 c2                	mov    %eax,%edx
   15cbf:	89 d0                	mov    %edx,%eax
   15cc1:	01 c8                	add    %ecx,%eax
   15cc3:	0f b6 00             	movzbl (%eax),%eax
   15cc6:	89 c6                	mov    %eax,%esi
   15cc8:	8b 45 0c             	mov    0xc(%ebp),%eax
   15ccb:	83 e0 07             	and    $0x7,%eax
   15cce:	bb 01 00 00 00       	mov    $0x1,%ebx
   15cd3:	89 c1                	mov    %eax,%ecx
   15cd5:	d3 e3                	shl    %cl,%ebx
   15cd7:	89 d8                	mov    %ebx,%eax
   15cd9:	89 f1                	mov    %esi,%ecx
   15cdb:	09 c1                	or     %eax,%ecx
   15cdd:	8b 45 08             	mov    0x8(%ebp),%eax
   15ce0:	8b 40 04             	mov    0x4(%eax),%eax
   15ce3:	01 d0                	add    %edx,%eax
   15ce5:	89 ca                	mov    %ecx,%edx
   15ce7:	88 10                	mov    %dl,(%eax)
   15ce9:	eb 42                	jmp    15d2d <bitmap_set_bit+0xe2>
        } else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   15ceb:	8b 45 08             	mov    0x8(%ebp),%eax
   15cee:	8b 48 04             	mov    0x4(%eax),%ecx
   15cf1:	8b 45 0c             	mov    0xc(%ebp),%eax
   15cf4:	8d 50 07             	lea    0x7(%eax),%edx
   15cf7:	85 c0                	test   %eax,%eax
   15cf9:	0f 48 c2             	cmovs  %edx,%eax
   15cfc:	c1 f8 03             	sar    $0x3,%eax
   15cff:	89 c2                	mov    %eax,%edx
   15d01:	89 d0                	mov    %edx,%eax
   15d03:	01 c8                	add    %ecx,%eax
   15d05:	0f b6 00             	movzbl (%eax),%eax
   15d08:	89 c6                	mov    %eax,%esi
   15d0a:	8b 45 0c             	mov    0xc(%ebp),%eax
   15d0d:	83 e0 07             	and    $0x7,%eax
   15d10:	bb 01 00 00 00       	mov    $0x1,%ebx
   15d15:	89 c1                	mov    %eax,%ecx
   15d17:	d3 e3                	shl    %cl,%ebx
   15d19:	89 d8                	mov    %ebx,%eax
   15d1b:	f7 d0                	not    %eax
   15d1d:	89 f1                	mov    %esi,%ecx
   15d1f:	21 c1                	and    %eax,%ecx
   15d21:	8b 45 08             	mov    0x8(%ebp),%eax
   15d24:	8b 40 04             	mov    0x4(%eax),%eax
   15d27:	01 d0                	add    %edx,%eax
   15d29:	89 ca                	mov    %ecx,%edx
   15d2b:	88 10                	mov    %dl,(%eax)
    for (int i = 0; i < count && index < bitmap->bit_count; ++i, ++index) {
   15d2d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   15d31:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   15d35:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15d38:	3b 45 10             	cmp    0x10(%ebp),%eax
   15d3b:	7d 0e                	jge    15d4b <bitmap_set_bit+0x100>
   15d3d:	8b 45 08             	mov    0x8(%ebp),%eax
   15d40:	8b 00                	mov    (%eax),%eax
   15d42:	39 45 0c             	cmp    %eax,0xc(%ebp)
   15d45:	0f 8c 58 ff ff ff    	jl     15ca3 <bitmap_set_bit+0x58>
        }
    }
}
   15d4b:	90                   	nop
   15d4c:	8d 65 f8             	lea    -0x8(%ebp),%esp
   15d4f:	5b                   	pop    %ebx
   15d50:	5e                   	pop    %esi
   15d51:	5d                   	pop    %ebp
   15d52:	c3                   	ret    

00015d53 <bitmap_is_set>:
 * 
 * @param bitmap 
 * @param index 
 * @return int 
 */
int bitmap_is_set(bitmap_t *bitmap, int index) {
   15d53:	55                   	push   %ebp
   15d54:	89 e5                	mov    %esp,%ebp
   15d56:	83 ec 08             	sub    $0x8,%esp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   15d59:	83 ec 08             	sub    $0x8,%esp
   15d5c:	ff 75 0c             	push   0xc(%ebp)
   15d5f:	ff 75 08             	push   0x8(%ebp)
   15d62:	e8 6c fe ff ff       	call   15bd3 <bitmap_get_bit>
   15d67:	83 c4 10             	add    $0x10,%esp
   15d6a:	84 c0                	test   %al,%al
   15d6c:	0f 95 c0             	setne  %al
   15d6f:	0f b6 c0             	movzbl %al,%eax
}
   15d72:	c9                   	leave  
   15d73:	c3                   	ret    

00015d74 <bitmap_alloc_nbits>:
 * @param bitmap 
 * @param bit 当某一位的值为bit时表示该位空闲，可供分配
 * @param count 
 * @return int 
 */
int bitmap_alloc_nbits(bitmap_t *bitmap, int bit, int count) {
   15d74:	55                   	push   %ebp
   15d75:	89 e5                	mov    %esp,%ebp
   15d77:	83 ec 18             	sub    $0x18,%esp
    ASSERT(bitmap != (bitmap_t*)0);
   15d7a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15d7e:	75 19                	jne    15d99 <bitmap_alloc_nbits+0x25>
   15d80:	68 f8 7b 01 00       	push   $0x17bf8
   15d85:	68 b8 7c 01 00       	push   $0x17cb8
   15d8a:	6a 68                	push   $0x68
   15d8c:	68 10 7c 01 00       	push   $0x17c10
   15d91:	e8 5d fd ff ff       	call   15af3 <pannic>
   15d96:	83 c4 10             	add    $0x10,%esp
    ASSERT(count >= 0);
   15d99:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   15d9d:	79 19                	jns    15db8 <bitmap_alloc_nbits+0x44>
   15d9f:	68 80 7c 01 00       	push   $0x17c80
   15da4:	68 b8 7c 01 00       	push   $0x17cb8
   15da9:	6a 69                	push   $0x69
   15dab:	68 10 7c 01 00       	push   $0x17c10
   15db0:	e8 3e fd ff ff       	call   15af3 <pannic>
   15db5:	83 c4 10             	add    $0x10,%esp

    int search_index = 0;
   15db8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    int ok_index = -1;
   15dbf:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
    while (search_index < bitmap->bit_count) {
   15dc6:	e9 8f 00 00 00       	jmp    15e5a <bitmap_alloc_nbits+0xe6>
        //确定可分配空间的起始索引
        if (bitmap_get_bit(bitmap, search_index) != bit) {
   15dcb:	83 ec 08             	sub    $0x8,%esp
   15dce:	ff 75 f4             	push   -0xc(%ebp)
   15dd1:	ff 75 08             	push   0x8(%ebp)
   15dd4:	e8 fa fd ff ff       	call   15bd3 <bitmap_get_bit>
   15dd9:	83 c4 10             	add    $0x10,%esp
   15ddc:	0f b6 c0             	movzbl %al,%eax
   15ddf:	39 45 0c             	cmp    %eax,0xc(%ebp)
   15de2:	74 06                	je     15dea <bitmap_alloc_nbits+0x76>
            search_index++;
   15de4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
            continue;
   15de8:	eb 70                	jmp    15e5a <bitmap_alloc_nbits+0xe6>
        }

        //记录可分配空间的起始索引
        ok_index = search_index;
   15dea:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15ded:	89 45 f0             	mov    %eax,-0x10(%ebp)

        //判断该空间是否大小满足要求
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   15df0:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
   15df7:	eb 2d                	jmp    15e26 <bitmap_alloc_nbits+0xb2>
            //空间大小不满足要求, 分配失败
            if (bitmap_get_bit(bitmap, search_index++) != bit) {
   15df9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15dfc:	8d 50 01             	lea    0x1(%eax),%edx
   15dff:	89 55 f4             	mov    %edx,-0xc(%ebp)
   15e02:	83 ec 08             	sub    $0x8,%esp
   15e05:	50                   	push   %eax
   15e06:	ff 75 08             	push   0x8(%ebp)
   15e09:	e8 c5 fd ff ff       	call   15bd3 <bitmap_get_bit>
   15e0e:	83 c4 10             	add    $0x10,%esp
   15e11:	0f b6 c0             	movzbl %al,%eax
   15e14:	39 45 0c             	cmp    %eax,0xc(%ebp)
   15e17:	74 09                	je     15e22 <bitmap_alloc_nbits+0xae>
                ok_index = -1;
   15e19:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
                break;
   15e20:	eb 16                	jmp    15e38 <bitmap_alloc_nbits+0xc4>
        for (int i = 1; i < count && search_index < bitmap->bit_count; ++i) {
   15e22:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   15e26:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15e29:	3b 45 10             	cmp    0x10(%ebp),%eax
   15e2c:	7d 0a                	jge    15e38 <bitmap_alloc_nbits+0xc4>
   15e2e:	8b 45 08             	mov    0x8(%ebp),%eax
   15e31:	8b 00                	mov    (%eax),%eax
   15e33:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   15e36:	7c c1                	jl     15df9 <bitmap_alloc_nbits+0x85>
            }
        }

        if (ok_index != -1) {//分配成功
   15e38:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
   15e3c:	74 1c                	je     15e5a <bitmap_alloc_nbits+0xe6>
            //将该片空间标记为已分配状态, 并返回起始索引
            bitmap_set_bit(bitmap, ok_index, count, ~bit);
   15e3e:	8b 45 0c             	mov    0xc(%ebp),%eax
   15e41:	f7 d0                	not    %eax
   15e43:	50                   	push   %eax
   15e44:	ff 75 10             	push   0x10(%ebp)
   15e47:	ff 75 f0             	push   -0x10(%ebp)
   15e4a:	ff 75 08             	push   0x8(%ebp)
   15e4d:	e8 f9 fd ff ff       	call   15c4b <bitmap_set_bit>
   15e52:	83 c4 10             	add    $0x10,%esp
            return ok_index;
   15e55:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15e58:	eb 13                	jmp    15e6d <bitmap_alloc_nbits+0xf9>
    while (search_index < bitmap->bit_count) {
   15e5a:	8b 45 08             	mov    0x8(%ebp),%eax
   15e5d:	8b 00                	mov    (%eax),%eax
   15e5f:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   15e62:	0f 8c 63 ff ff ff    	jl     15dcb <bitmap_alloc_nbits+0x57>
        }
    }
    
    //遍历完整个位图也没有满足要求的空间则返回-1
    return -1;
   15e68:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

   15e6d:	c9                   	leave  
   15e6e:	c3                   	ret    

00015e6f <kernel_strcpy>:
 * @brief  拷贝字符串
 *
 * @param dest 目标字符串
 * @param src  源字符串
 */
void kernel_strcpy(char *dest, const char *src) {
   15e6f:	55                   	push   %ebp
   15e70:	89 e5                	mov    %esp,%ebp
  // 1.判断是否为NULL
  if (!dest || !src) return;
   15e72:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15e76:	74 3b                	je     15eb3 <kernel_strcpy+0x44>
   15e78:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   15e7c:	74 35                	je     15eb3 <kernel_strcpy+0x44>

  // 2.拷贝 src '\0' 以前的部分到 dest中
  // TODO:完成（访问未初始化的内存）的异常中断后就只判断src是否读到'\0'
  while (*dest && *src) {
   15e7e:	eb 17                	jmp    15e97 <kernel_strcpy+0x28>
    *(dest++) = *(src++);
   15e80:	8b 55 0c             	mov    0xc(%ebp),%edx
   15e83:	8d 42 01             	lea    0x1(%edx),%eax
   15e86:	89 45 0c             	mov    %eax,0xc(%ebp)
   15e89:	8b 45 08             	mov    0x8(%ebp),%eax
   15e8c:	8d 48 01             	lea    0x1(%eax),%ecx
   15e8f:	89 4d 08             	mov    %ecx,0x8(%ebp)
   15e92:	0f b6 12             	movzbl (%edx),%edx
   15e95:	88 10                	mov    %dl,(%eax)
  while (*dest && *src) {
   15e97:	8b 45 08             	mov    0x8(%ebp),%eax
   15e9a:	0f b6 00             	movzbl (%eax),%eax
   15e9d:	84 c0                	test   %al,%al
   15e9f:	74 0a                	je     15eab <kernel_strcpy+0x3c>
   15ea1:	8b 45 0c             	mov    0xc(%ebp),%eax
   15ea4:	0f b6 00             	movzbl (%eax),%eax
   15ea7:	84 c0                	test   %al,%al
   15ea9:	75 d5                	jne    15e80 <kernel_strcpy+0x11>
  }

  // 3.添加结束符
  *dest = '\0';
   15eab:	8b 45 08             	mov    0x8(%ebp),%eax
   15eae:	c6 00 00             	movb   $0x0,(%eax)
   15eb1:	eb 01                	jmp    15eb4 <kernel_strcpy+0x45>
  if (!dest || !src) return;
   15eb3:	90                   	nop
}
   15eb4:	5d                   	pop    %ebp
   15eb5:	c3                   	ret    

00015eb6 <kernel_strncpy>:
 *
 * @param dest 目的字符串
 * @param src 源字符串
 * @param size 拷贝字符串的长度，包含'\0'
 */
void kernel_strncpy(char *dest, const char *src, int size) {
   15eb6:	55                   	push   %ebp
   15eb7:	89 e5                	mov    %esp,%ebp
  // 1.判断是否需要拷贝
  if (!dest || !src || !size) return;
   15eb9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15ebd:	74 45                	je     15f04 <kernel_strncpy+0x4e>
   15ebf:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   15ec3:	74 3f                	je     15f04 <kernel_strncpy+0x4e>
   15ec5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   15ec9:	74 39                	je     15f04 <kernel_strncpy+0x4e>

  // 2.size的大小包含了'\0'，所以要预留一个空间给'\0'，只能拷贝 size - 1个字符
  while ((size-- > 1) && (*src)) {
   15ecb:	eb 17                	jmp    15ee4 <kernel_strncpy+0x2e>
    *(dest++) = *(src++);
   15ecd:	8b 55 0c             	mov    0xc(%ebp),%edx
   15ed0:	8d 42 01             	lea    0x1(%edx),%eax
   15ed3:	89 45 0c             	mov    %eax,0xc(%ebp)
   15ed6:	8b 45 08             	mov    0x8(%ebp),%eax
   15ed9:	8d 48 01             	lea    0x1(%eax),%ecx
   15edc:	89 4d 08             	mov    %ecx,0x8(%ebp)
   15edf:	0f b6 12             	movzbl (%edx),%edx
   15ee2:	88 10                	mov    %dl,(%eax)
  while ((size-- > 1) && (*src)) {
   15ee4:	8b 45 10             	mov    0x10(%ebp),%eax
   15ee7:	8d 50 ff             	lea    -0x1(%eax),%edx
   15eea:	89 55 10             	mov    %edx,0x10(%ebp)
   15eed:	83 f8 01             	cmp    $0x1,%eax
   15ef0:	7e 0a                	jle    15efc <kernel_strncpy+0x46>
   15ef2:	8b 45 0c             	mov    0xc(%ebp),%eax
   15ef5:	0f b6 00             	movzbl (%eax),%eax
   15ef8:	84 c0                	test   %al,%al
   15efa:	75 d1                	jne    15ecd <kernel_strncpy+0x17>
  }

  // 3.添加结束符
  *dest = '\0';
   15efc:	8b 45 08             	mov    0x8(%ebp),%eax
   15eff:	c6 00 00             	movb   $0x0,(%eax)
   15f02:	eb 01                	jmp    15f05 <kernel_strncpy+0x4f>
  if (!dest || !src || !size) return;
   15f04:	90                   	nop
}
   15f05:	5d                   	pop    %ebp
   15f06:	c3                   	ret    

00015f07 <kernel_strncmp>:
 * @param s2 字符串2
 * @param size 比较前比较的子串长度，从下标0开始到(size - 1)
 *
 * @return int ==: 0, > : 1, < : -1
 */
int kernel_strncmp(const char *s1, const char *s2, int size) {
   15f07:	55                   	push   %ebp
   15f08:	89 e5                	mov    %esp,%ebp
  if (!s1 || !s2) return 0;
   15f0a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15f0e:	74 06                	je     15f16 <kernel_strncmp+0xf>
   15f10:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   15f14:	75 0f                	jne    15f25 <kernel_strncmp+0x1e>
   15f16:	b8 00 00 00 00       	mov    $0x0,%eax
   15f1b:	eb 69                	jmp    15f86 <kernel_strncmp+0x7f>

  while (*s1 && *s2 && --size && *s1 == *s2) {
    ++s1;
   15f1d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
    ++s2;
   15f21:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
  while (*s1 && *s2 && --size && *s1 == *s2) {
   15f25:	8b 45 08             	mov    0x8(%ebp),%eax
   15f28:	0f b6 00             	movzbl (%eax),%eax
   15f2b:	84 c0                	test   %al,%al
   15f2d:	74 24                	je     15f53 <kernel_strncmp+0x4c>
   15f2f:	8b 45 0c             	mov    0xc(%ebp),%eax
   15f32:	0f b6 00             	movzbl (%eax),%eax
   15f35:	84 c0                	test   %al,%al
   15f37:	74 1a                	je     15f53 <kernel_strncmp+0x4c>
   15f39:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   15f3d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   15f41:	74 10                	je     15f53 <kernel_strncmp+0x4c>
   15f43:	8b 45 08             	mov    0x8(%ebp),%eax
   15f46:	0f b6 10             	movzbl (%eax),%edx
   15f49:	8b 45 0c             	mov    0xc(%ebp),%eax
   15f4c:	0f b6 00             	movzbl (%eax),%eax
   15f4f:	38 c2                	cmp    %al,%dl
   15f51:	74 ca                	je     15f1d <kernel_strncmp+0x16>
  }

  if (*s1 > *s2) {
   15f53:	8b 45 08             	mov    0x8(%ebp),%eax
   15f56:	0f b6 10             	movzbl (%eax),%edx
   15f59:	8b 45 0c             	mov    0xc(%ebp),%eax
   15f5c:	0f b6 00             	movzbl (%eax),%eax
   15f5f:	38 c2                	cmp    %al,%dl
   15f61:	7e 07                	jle    15f6a <kernel_strncmp+0x63>
    return 1;
   15f63:	b8 01 00 00 00       	mov    $0x1,%eax
   15f68:	eb 1c                	jmp    15f86 <kernel_strncmp+0x7f>
  } else if (*s1 < *s2) {
   15f6a:	8b 45 08             	mov    0x8(%ebp),%eax
   15f6d:	0f b6 10             	movzbl (%eax),%edx
   15f70:	8b 45 0c             	mov    0xc(%ebp),%eax
   15f73:	0f b6 00             	movzbl (%eax),%eax
   15f76:	38 c2                	cmp    %al,%dl
   15f78:	7d 07                	jge    15f81 <kernel_strncmp+0x7a>
    return -1;
   15f7a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15f7f:	eb 05                	jmp    15f86 <kernel_strncmp+0x7f>
  } else {
    return 0;
   15f81:	b8 00 00 00 00       	mov    $0x0,%eax
  }
}
   15f86:	5d                   	pop    %ebp
   15f87:	c3                   	ret    

00015f88 <kernel_strlen>:
 * @brief  获取字符串str的长度, 不含'\0'
 *
 * @param str
 * @return int
 */
int kernel_strlen(const char *str) {
   15f88:	55                   	push   %ebp
   15f89:	89 e5                	mov    %esp,%ebp
   15f8b:	83 ec 10             	sub    $0x10,%esp
  if (!str) return 0;
   15f8e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15f92:	75 07                	jne    15f9b <kernel_strlen+0x13>
   15f94:	b8 00 00 00 00       	mov    $0x0,%eax
   15f99:	eb 20                	jmp    15fbb <kernel_strlen+0x33>

  int len = 0;
   15f9b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  while (*(str++)) len++;
   15fa2:	eb 04                	jmp    15fa8 <kernel_strlen+0x20>
   15fa4:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   15fa8:	8b 45 08             	mov    0x8(%ebp),%eax
   15fab:	8d 50 01             	lea    0x1(%eax),%edx
   15fae:	89 55 08             	mov    %edx,0x8(%ebp)
   15fb1:	0f b6 00             	movzbl (%eax),%eax
   15fb4:	84 c0                	test   %al,%al
   15fb6:	75 ec                	jne    15fa4 <kernel_strlen+0x1c>

  return len;
   15fb8:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   15fbb:	c9                   	leave  
   15fbc:	c3                   	ret    

00015fbd <kernel_memcpy>:
 *
 * @param dest 目的内存的起始地址
 * @param src 原内存的起始地址
 * @param size 复制的内存字节大小
 */
void kernel_memcpy(void *dest, const void *src, int size) {
   15fbd:	55                   	push   %ebp
   15fbe:	89 e5                	mov    %esp,%ebp
   15fc0:	83 ec 10             	sub    $0x10,%esp
  if (!dest || !src || !size) return;
   15fc3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15fc7:	74 40                	je     16009 <kernel_memcpy+0x4c>
   15fc9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   15fcd:	74 3a                	je     16009 <kernel_memcpy+0x4c>
   15fcf:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   15fd3:	74 34                	je     16009 <kernel_memcpy+0x4c>

  uint8_t *d = (uint8_t *)dest;
   15fd5:	8b 45 08             	mov    0x8(%ebp),%eax
   15fd8:	89 45 fc             	mov    %eax,-0x4(%ebp)
  uint8_t *s = (uint8_t *)src;
   15fdb:	8b 45 0c             	mov    0xc(%ebp),%eax
   15fde:	89 45 f8             	mov    %eax,-0x8(%ebp)

  while (size--) {
   15fe1:	eb 17                	jmp    15ffa <kernel_memcpy+0x3d>
    *(d++) = *(s++);
   15fe3:	8b 55 f8             	mov    -0x8(%ebp),%edx
   15fe6:	8d 42 01             	lea    0x1(%edx),%eax
   15fe9:	89 45 f8             	mov    %eax,-0x8(%ebp)
   15fec:	8b 45 fc             	mov    -0x4(%ebp),%eax
   15fef:	8d 48 01             	lea    0x1(%eax),%ecx
   15ff2:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   15ff5:	0f b6 12             	movzbl (%edx),%edx
   15ff8:	88 10                	mov    %dl,(%eax)
  while (size--) {
   15ffa:	8b 45 10             	mov    0x10(%ebp),%eax
   15ffd:	8d 50 ff             	lea    -0x1(%eax),%edx
   16000:	89 55 10             	mov    %edx,0x10(%ebp)
   16003:	85 c0                	test   %eax,%eax
   16005:	75 dc                	jne    15fe3 <kernel_memcpy+0x26>
   16007:	eb 01                	jmp    1600a <kernel_memcpy+0x4d>
  if (!dest || !src || !size) return;
   16009:	90                   	nop
  }
}
   1600a:	c9                   	leave  
   1600b:	c3                   	ret    

0001600c <kernel_memset>:
 *
 * @param dest 区域起始地址
 * @param v 每个字节的值
 * @param size 赋值的内存的大小
 */
void kernel_memset(void *dest, uint8_t v, int size) {
   1600c:	55                   	push   %ebp
   1600d:	89 e5                	mov    %esp,%ebp
   1600f:	83 ec 14             	sub    $0x14,%esp
   16012:	8b 45 0c             	mov    0xc(%ebp),%eax
   16015:	88 45 ec             	mov    %al,-0x14(%ebp)
  if (!dest || !size) return;
   16018:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1601c:	74 2c                	je     1604a <kernel_memset+0x3e>
   1601e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   16022:	74 26                	je     1604a <kernel_memset+0x3e>

  uint8_t *d = (uint8_t *)dest;
   16024:	8b 45 08             	mov    0x8(%ebp),%eax
   16027:	89 45 fc             	mov    %eax,-0x4(%ebp)

  while (size--) {
   1602a:	eb 0f                	jmp    1603b <kernel_memset+0x2f>
    *(d++) = v;
   1602c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1602f:	8d 50 01             	lea    0x1(%eax),%edx
   16032:	89 55 fc             	mov    %edx,-0x4(%ebp)
   16035:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   16039:	88 10                	mov    %dl,(%eax)
  while (size--) {
   1603b:	8b 45 10             	mov    0x10(%ebp),%eax
   1603e:	8d 50 ff             	lea    -0x1(%eax),%edx
   16041:	89 55 10             	mov    %edx,0x10(%ebp)
   16044:	85 c0                	test   %eax,%eax
   16046:	75 e4                	jne    1602c <kernel_memset+0x20>
   16048:	eb 01                	jmp    1604b <kernel_memset+0x3f>
  if (!dest || !size) return;
   1604a:	90                   	nop
  }
}
   1604b:	c9                   	leave  
   1604c:	c3                   	ret    

0001604d <kernel_memcmp>:
 * @param d1 区域1的起始地址
 * @param d2 区域2的起始地址
 * @param size 比较的字节数量
 * @return int ==:0, >:1, <:-1
 */
int kernel_memcmp(const void *dest1, const void *dest2, int size) {
   1604d:	55                   	push   %ebp
   1604e:	89 e5                	mov    %esp,%ebp
   16050:	83 ec 10             	sub    $0x10,%esp
  if (!dest1 || !dest2 || !size) return 0;
   16053:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   16057:	74 0c                	je     16065 <kernel_memcmp+0x18>
   16059:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1605d:	74 06                	je     16065 <kernel_memcmp+0x18>
   1605f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   16063:	75 07                	jne    1606c <kernel_memcmp+0x1f>
   16065:	b8 00 00 00 00       	mov    $0x0,%eax
   1606a:	eb 63                	jmp    160cf <kernel_memcmp+0x82>

  uint8_t *d1 = (uint8_t *)dest1;
   1606c:	8b 45 08             	mov    0x8(%ebp),%eax
   1606f:	89 45 fc             	mov    %eax,-0x4(%ebp)
  uint8_t *d2 = (uint8_t *)dest2;
   16072:	8b 45 0c             	mov    0xc(%ebp),%eax
   16075:	89 45 f8             	mov    %eax,-0x8(%ebp)

  while (--size && *d1 == *d2) {
   16078:	eb 08                	jmp    16082 <kernel_memcmp+0x35>
    d1++;
   1607a:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    d2++;
   1607e:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  while (--size && *d1 == *d2) {
   16082:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
   16086:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1608a:	74 10                	je     1609c <kernel_memcmp+0x4f>
   1608c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1608f:	0f b6 10             	movzbl (%eax),%edx
   16092:	8b 45 f8             	mov    -0x8(%ebp),%eax
   16095:	0f b6 00             	movzbl (%eax),%eax
   16098:	38 c2                	cmp    %al,%dl
   1609a:	74 de                	je     1607a <kernel_memcmp+0x2d>
  }

  if (*d1 > *d2)
   1609c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1609f:	0f b6 10             	movzbl (%eax),%edx
   160a2:	8b 45 f8             	mov    -0x8(%ebp),%eax
   160a5:	0f b6 00             	movzbl (%eax),%eax
   160a8:	38 c2                	cmp    %al,%dl
   160aa:	76 07                	jbe    160b3 <kernel_memcmp+0x66>
    return 1;
   160ac:	b8 01 00 00 00       	mov    $0x1,%eax
   160b1:	eb 1c                	jmp    160cf <kernel_memcmp+0x82>
  else if (*d1 < *d2)
   160b3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   160b6:	0f b6 10             	movzbl (%eax),%edx
   160b9:	8b 45 f8             	mov    -0x8(%ebp),%eax
   160bc:	0f b6 00             	movzbl (%eax),%eax
   160bf:	38 c2                	cmp    %al,%dl
   160c1:	73 07                	jae    160ca <kernel_memcmp+0x7d>
    return -1;
   160c3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   160c8:	eb 05                	jmp    160cf <kernel_memcmp+0x82>
  else
    return 0;
   160ca:	b8 00 00 00 00       	mov    $0x0,%eax
}
   160cf:	c9                   	leave  
   160d0:	c3                   	ret    

000160d1 <kernel_sprintf>:

void kernel_sprintf(char *buf, const char *formate, ...) {
   160d1:	55                   	push   %ebp
   160d2:	89 e5                	mov    %esp,%ebp
   160d4:	83 ec 18             	sub    $0x18,%esp
  // 获取可变参数并将其格式化到缓冲区中
  va_list args;
  va_start(args, formate);
   160d7:	8d 45 10             	lea    0x10(%ebp),%eax
   160da:	89 45 f4             	mov    %eax,-0xc(%ebp)
  kernel_vsprintf(buf, formate, args);
   160dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   160e0:	83 ec 04             	sub    $0x4,%esp
   160e3:	50                   	push   %eax
   160e4:	ff 75 0c             	push   0xc(%ebp)
   160e7:	ff 75 08             	push   0x8(%ebp)
   160ea:	e8 06 00 00 00       	call   160f5 <kernel_vsprintf>
   160ef:	83 c4 10             	add    $0x10,%esp
  va_end(args);
}
   160f2:	90                   	nop
   160f3:	c9                   	leave  
   160f4:	c3                   	ret    

000160f5 <kernel_vsprintf>:
 *
 * @param buf
 * @param formate
 * @param args
 */
void kernel_vsprintf(char *buf, const char *formate, va_list args) {
   160f5:	55                   	push   %ebp
   160f6:	89 e5                	mov    %esp,%ebp
   160f8:	83 ec 28             	sub    $0x28,%esp
  // 定义状态机，包含两种状态
  enum { NORMAL, READ_FMT } state = NORMAL;
   160fb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  char *curr = buf;
   16102:	8b 45 08             	mov    0x8(%ebp),%eax
   16105:	89 45 f0             	mov    %eax,-0x10(%ebp)

  char ch;

  while ((ch = *(formate++)) != '\0') {
   16108:	e9 68 01 00 00       	jmp    16275 <kernel_vsprintf+0x180>
    switch (state) {
   1610d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   16111:	74 0b                	je     1611e <kernel_vsprintf+0x29>
   16113:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   16117:	74 2b                	je     16144 <kernel_vsprintf+0x4f>
   16119:	e9 56 01 00 00       	jmp    16274 <kernel_vsprintf+0x17f>
      case NORMAL:
        if (ch == '%')
   1611e:	80 7d e7 25          	cmpb   $0x25,-0x19(%ebp)
   16122:	75 0c                	jne    16130 <kernel_vsprintf+0x3b>
          state = READ_FMT;
   16124:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   1612b:	e9 45 01 00 00       	jmp    16275 <kernel_vsprintf+0x180>
        else
          *(curr++) = ch;
   16130:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16133:	8d 50 01             	lea    0x1(%eax),%edx
   16136:	89 55 f0             	mov    %edx,-0x10(%ebp)
   16139:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   1613d:	88 10                	mov    %dl,(%eax)
        break;
   1613f:	e9 31 01 00 00       	jmp    16275 <kernel_vsprintf+0x180>
      case READ_FMT:
        if (ch == 's') {
   16144:	80 7d e7 73          	cmpb   $0x73,-0x19(%ebp)
   16148:	75 47                	jne    16191 <kernel_vsprintf+0x9c>
          const char *str = va_arg(args, char *);
   1614a:	8b 45 10             	mov    0x10(%ebp),%eax
   1614d:	8d 50 04             	lea    0x4(%eax),%edx
   16150:	89 55 10             	mov    %edx,0x10(%ebp)
   16153:	8b 00                	mov    (%eax),%eax
   16155:	89 45 ec             	mov    %eax,-0x14(%ebp)
          int len = kernel_strlen(str);
   16158:	ff 75 ec             	push   -0x14(%ebp)
   1615b:	e8 28 fe ff ff       	call   15f88 <kernel_strlen>
   16160:	83 c4 04             	add    $0x4,%esp
   16163:	89 45 e8             	mov    %eax,-0x18(%ebp)
          while (len--) {
   16166:	eb 17                	jmp    1617f <kernel_vsprintf+0x8a>
            *(curr++) = *(str++);
   16168:	8b 55 ec             	mov    -0x14(%ebp),%edx
   1616b:	8d 42 01             	lea    0x1(%edx),%eax
   1616e:	89 45 ec             	mov    %eax,-0x14(%ebp)
   16171:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16174:	8d 48 01             	lea    0x1(%eax),%ecx
   16177:	89 4d f0             	mov    %ecx,-0x10(%ebp)
   1617a:	0f b6 12             	movzbl (%edx),%edx
   1617d:	88 10                	mov    %dl,(%eax)
          while (len--) {
   1617f:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16182:	8d 50 ff             	lea    -0x1(%eax),%edx
   16185:	89 55 e8             	mov    %edx,-0x18(%ebp)
   16188:	85 c0                	test   %eax,%eax
   1618a:	75 dc                	jne    16168 <kernel_vsprintf+0x73>
   1618c:	e9 da 00 00 00       	jmp    1626b <kernel_vsprintf+0x176>
          }
        } else if (ch == 'd') {
   16191:	80 7d e7 64          	cmpb   $0x64,-0x19(%ebp)
   16195:	75 37                	jne    161ce <kernel_vsprintf+0xd9>
          const int num = va_arg(args, int);
   16197:	8b 45 10             	mov    0x10(%ebp),%eax
   1619a:	8d 50 04             	lea    0x4(%eax),%edx
   1619d:	89 55 10             	mov    %edx,0x10(%ebp)
   161a0:	8b 00                	mov    (%eax),%eax
   161a2:	89 45 d8             	mov    %eax,-0x28(%ebp)
          kernel_itoa(curr, num, 10);
   161a5:	83 ec 04             	sub    $0x4,%esp
   161a8:	6a 0a                	push   $0xa
   161aa:	ff 75 d8             	push   -0x28(%ebp)
   161ad:	ff 75 f0             	push   -0x10(%ebp)
   161b0:	e8 dd 00 00 00       	call   16292 <kernel_itoa>
   161b5:	83 c4 10             	add    $0x10,%esp
          curr += kernel_strlen(curr);
   161b8:	83 ec 0c             	sub    $0xc,%esp
   161bb:	ff 75 f0             	push   -0x10(%ebp)
   161be:	e8 c5 fd ff ff       	call   15f88 <kernel_strlen>
   161c3:	83 c4 10             	add    $0x10,%esp
   161c6:	01 45 f0             	add    %eax,-0x10(%ebp)
   161c9:	e9 9d 00 00 00       	jmp    1626b <kernel_vsprintf+0x176>
        } else if (ch == 'x' || ch == 'X') {
   161ce:	80 7d e7 78          	cmpb   $0x78,-0x19(%ebp)
   161d2:	74 06                	je     161da <kernel_vsprintf+0xe5>
   161d4:	80 7d e7 58          	cmpb   $0x58,-0x19(%ebp)
   161d8:	75 34                	jne    1620e <kernel_vsprintf+0x119>
          const int num = va_arg(args, int);
   161da:	8b 45 10             	mov    0x10(%ebp),%eax
   161dd:	8d 50 04             	lea    0x4(%eax),%edx
   161e0:	89 55 10             	mov    %edx,0x10(%ebp)
   161e3:	8b 00                	mov    (%eax),%eax
   161e5:	89 45 dc             	mov    %eax,-0x24(%ebp)
          kernel_itoa(curr, num, 16);
   161e8:	83 ec 04             	sub    $0x4,%esp
   161eb:	6a 10                	push   $0x10
   161ed:	ff 75 dc             	push   -0x24(%ebp)
   161f0:	ff 75 f0             	push   -0x10(%ebp)
   161f3:	e8 9a 00 00 00       	call   16292 <kernel_itoa>
   161f8:	83 c4 10             	add    $0x10,%esp
          curr += kernel_strlen(curr);
   161fb:	83 ec 0c             	sub    $0xc,%esp
   161fe:	ff 75 f0             	push   -0x10(%ebp)
   16201:	e8 82 fd ff ff       	call   15f88 <kernel_strlen>
   16206:	83 c4 10             	add    $0x10,%esp
   16209:	01 45 f0             	add    %eax,-0x10(%ebp)
        } else if (ch == 'x' || ch == 'X') {
   1620c:	eb 5d                	jmp    1626b <kernel_vsprintf+0x176>
        } else if (ch == 'b') {
   1620e:	80 7d e7 62          	cmpb   $0x62,-0x19(%ebp)
   16212:	75 34                	jne    16248 <kernel_vsprintf+0x153>
          const int num = va_arg(args, int);
   16214:	8b 45 10             	mov    0x10(%ebp),%eax
   16217:	8d 50 04             	lea    0x4(%eax),%edx
   1621a:	89 55 10             	mov    %edx,0x10(%ebp)
   1621d:	8b 00                	mov    (%eax),%eax
   1621f:	89 45 e0             	mov    %eax,-0x20(%ebp)
          kernel_itoa(curr, num, 2);
   16222:	83 ec 04             	sub    $0x4,%esp
   16225:	6a 02                	push   $0x2
   16227:	ff 75 e0             	push   -0x20(%ebp)
   1622a:	ff 75 f0             	push   -0x10(%ebp)
   1622d:	e8 60 00 00 00       	call   16292 <kernel_itoa>
   16232:	83 c4 10             	add    $0x10,%esp
          curr += kernel_strlen(curr);
   16235:	83 ec 0c             	sub    $0xc,%esp
   16238:	ff 75 f0             	push   -0x10(%ebp)
   1623b:	e8 48 fd ff ff       	call   15f88 <kernel_strlen>
   16240:	83 c4 10             	add    $0x10,%esp
   16243:	01 45 f0             	add    %eax,-0x10(%ebp)
   16246:	eb 23                	jmp    1626b <kernel_vsprintf+0x176>
        } else if (ch == 'c') {
   16248:	80 7d e7 63          	cmpb   $0x63,-0x19(%ebp)
   1624c:	75 1d                	jne    1626b <kernel_vsprintf+0x176>
          char c = va_arg(args, int);
   1624e:	8b 45 10             	mov    0x10(%ebp),%eax
   16251:	8d 50 04             	lea    0x4(%eax),%edx
   16254:	89 55 10             	mov    %edx,0x10(%ebp)
   16257:	8b 00                	mov    (%eax),%eax
   16259:	88 45 e6             	mov    %al,-0x1a(%ebp)
          *(curr++) = c;
   1625c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1625f:	8d 50 01             	lea    0x1(%eax),%edx
   16262:	89 55 f0             	mov    %edx,-0x10(%ebp)
   16265:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   16269:	88 10                	mov    %dl,(%eax)
        }
        state = NORMAL;
   1626b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        break;
   16272:	eb 01                	jmp    16275 <kernel_vsprintf+0x180>
      default:
        break;
   16274:	90                   	nop
  while ((ch = *(formate++)) != '\0') {
   16275:	8b 45 0c             	mov    0xc(%ebp),%eax
   16278:	8d 50 01             	lea    0x1(%eax),%edx
   1627b:	89 55 0c             	mov    %edx,0xc(%ebp)
   1627e:	0f b6 00             	movzbl (%eax),%eax
   16281:	88 45 e7             	mov    %al,-0x19(%ebp)
   16284:	80 7d e7 00          	cmpb   $0x0,-0x19(%ebp)
   16288:	0f 85 7f fe ff ff    	jne    1610d <kernel_vsprintf+0x18>
    }
  }
}
   1628e:	90                   	nop
   1628f:	90                   	nop
   16290:	c9                   	leave  
   16291:	c3                   	ret    

00016292 <kernel_itoa>:
 *
 * @param buf 缓冲区
 * @param num 整数
 * @param base 转换的进制规则
 */
void kernel_itoa(char *buf, int num, int base) {
   16292:	55                   	push   %ebp
   16293:	89 e5                	mov    %esp,%ebp
   16295:	53                   	push   %ebx
   16296:	81 ec 90 00 00 00    	sub    $0x90,%esp

  if (base != 2 && base != 8 && base != 10 && base != 16) {
   1629c:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   162a0:	74 1d                	je     162bf <kernel_itoa+0x2d>
   162a2:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   162a6:	74 17                	je     162bf <kernel_itoa+0x2d>
   162a8:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   162ac:	74 11                	je     162bf <kernel_itoa+0x2d>
   162ae:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   162b2:	74 0b                	je     162bf <kernel_itoa+0x2d>
    *buf = '\0';
   162b4:	8b 45 08             	mov    0x8(%ebp),%eax
   162b7:	c6 00 00             	movb   $0x0,(%eax)
    return;
   162ba:	e9 f8 00 00 00       	jmp    163b7 <kernel_itoa+0x125>
  }

  if (num == 0) {
   162bf:	8b 45 0c             	mov    0xc(%ebp),%eax
   162c2:	85 c0                	test   %eax,%eax
   162c4:	75 17                	jne    162dd <kernel_itoa+0x4b>
    *(buf++) = '0';
   162c6:	8b 45 08             	mov    0x8(%ebp),%eax
   162c9:	8d 50 01             	lea    0x1(%eax),%edx
   162cc:	89 55 08             	mov    %edx,0x8(%ebp)
   162cf:	c6 00 30             	movb   $0x30,(%eax)
    *buf = '\0';
   162d2:	8b 45 08             	mov    0x8(%ebp),%eax
   162d5:	c6 00 00             	movb   $0x0,(%eax)
    return;
   162d8:	e9 da 00 00 00       	jmp    163b7 <kernel_itoa+0x125>
  }

  char *p = buf;
   162dd:	8b 45 08             	mov    0x8(%ebp),%eax
   162e0:	89 45 f8             	mov    %eax,-0x8(%ebp)
  uint32_t u_num = 0;
   162e3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  if (base == 10) {
   162ea:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   162ee:	75 41                	jne    16331 <kernel_itoa+0x9f>
    u_num = num;
   162f0:	8b 45 0c             	mov    0xc(%ebp),%eax
   162f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (num < 0) {
   162f6:	8b 45 0c             	mov    0xc(%ebp),%eax
   162f9:	85 c0                	test   %eax,%eax
   162fb:	79 16                	jns    16313 <kernel_itoa+0x81>
      *(p++) = '-';
   162fd:	8b 45 f8             	mov    -0x8(%ebp),%eax
   16300:	8d 50 01             	lea    0x1(%eax),%edx
   16303:	89 55 f8             	mov    %edx,-0x8(%ebp)
   16306:	c6 00 2d             	movb   $0x2d,(%eax)
      u_num = -1 * num;
   16309:	8b 45 0c             	mov    0xc(%ebp),%eax
   1630c:	f7 d8                	neg    %eax
   1630e:	89 45 f4             	mov    %eax,-0xc(%ebp)
   16311:	eb 26                	jmp    16339 <kernel_itoa+0xa7>
    } else if (num == 0) {
   16313:	8b 45 0c             	mov    0xc(%ebp),%eax
   16316:	85 c0                	test   %eax,%eax
   16318:	75 1f                	jne    16339 <kernel_itoa+0xa7>
      *(p++) = '0';
   1631a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1631d:	8d 50 01             	lea    0x1(%eax),%edx
   16320:	89 55 f8             	mov    %edx,-0x8(%ebp)
   16323:	c6 00 30             	movb   $0x30,(%eax)
      *p = '\0';
   16326:	8b 45 f8             	mov    -0x8(%ebp),%eax
   16329:	c6 00 00             	movb   $0x0,(%eax)
      return;
   1632c:	e9 86 00 00 00       	jmp    163b7 <kernel_itoa+0x125>
    }
  } else {
    u_num = *((uint32_t *)&num);
   16331:	8d 45 0c             	lea    0xc(%ebp),%eax
   16334:	8b 00                	mov    (%eax),%eax
   16336:	89 45 f4             	mov    %eax,-0xc(%ebp)
  }

  static const char *num_to_char = {"0123456789abcdef"};
  char arr[128];
  int len = 0;
   16339:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  while (u_num > 0) {
   16340:	eb 3b                	jmp    1637d <kernel_itoa+0xeb>
    arr[len++] = num_to_char[u_num % base];
   16342:	8b 1d 8c 80 01 00    	mov    0x1808c,%ebx
   16348:	8b 4d 10             	mov    0x10(%ebp),%ecx
   1634b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1634e:	ba 00 00 00 00       	mov    $0x0,%edx
   16353:	f7 f1                	div    %ecx
   16355:	89 d0                	mov    %edx,%eax
   16357:	8d 0c 03             	lea    (%ebx,%eax,1),%ecx
   1635a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1635d:	8d 50 01             	lea    0x1(%eax),%edx
   16360:	89 55 f0             	mov    %edx,-0x10(%ebp)
   16363:	0f b6 11             	movzbl (%ecx),%edx
   16366:	88 94 05 6c ff ff ff 	mov    %dl,-0x94(%ebp,%eax,1)
    u_num /= base;
   1636d:	8b 5d 10             	mov    0x10(%ebp),%ebx
   16370:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16373:	ba 00 00 00 00       	mov    $0x0,%edx
   16378:	f7 f3                	div    %ebx
   1637a:	89 45 f4             	mov    %eax,-0xc(%ebp)
  while (u_num > 0) {
   1637d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   16381:	75 bf                	jne    16342 <kernel_itoa+0xb0>
  }

  for (int i = len - 1; i >= 0; --i) {
   16383:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16386:	83 e8 01             	sub    $0x1,%eax
   16389:	89 45 ec             	mov    %eax,-0x14(%ebp)
   1638c:	eb 1d                	jmp    163ab <kernel_itoa+0x119>
    *(p++) = arr[i];
   1638e:	8b 45 f8             	mov    -0x8(%ebp),%eax
   16391:	8d 50 01             	lea    0x1(%eax),%edx
   16394:	89 55 f8             	mov    %edx,-0x8(%ebp)
   16397:	8d 8d 6c ff ff ff    	lea    -0x94(%ebp),%ecx
   1639d:	8b 55 ec             	mov    -0x14(%ebp),%edx
   163a0:	01 ca                	add    %ecx,%edx
   163a2:	0f b6 12             	movzbl (%edx),%edx
   163a5:	88 10                	mov    %dl,(%eax)
  for (int i = len - 1; i >= 0; --i) {
   163a7:	83 6d ec 01          	subl   $0x1,-0x14(%ebp)
   163ab:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   163af:	79 dd                	jns    1638e <kernel_itoa+0xfc>
  }
  *p = '\0';
   163b1:	8b 45 f8             	mov    -0x8(%ebp),%eax
   163b4:	c6 00 00             	movb   $0x0,(%eax)
}
   163b7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   163ba:	c9                   	leave  
   163bb:	c3                   	ret    

000163bc <strings_count>:
 * @brief 计算字符串数组str中字符串的个数
 *
 * @param str
 * @return int
 */
int strings_count(char *const *strs) {
   163bc:	55                   	push   %ebp
   163bd:	89 e5                	mov    %esp,%ebp
   163bf:	83 ec 10             	sub    $0x10,%esp
  int count = 0;
   163c2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  if (strs) {
   163c9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   163cd:	74 15                	je     163e4 <strings_count+0x28>
    while (*(strs++)) {
   163cf:	eb 04                	jmp    163d5 <strings_count+0x19>
      count++;
   163d1:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    while (*(strs++)) {
   163d5:	8b 45 08             	mov    0x8(%ebp),%eax
   163d8:	8d 50 04             	lea    0x4(%eax),%edx
   163db:	89 55 08             	mov    %edx,0x8(%ebp)
   163de:	8b 00                	mov    (%eax),%eax
   163e0:	85 c0                	test   %eax,%eax
   163e2:	75 ed                	jne    163d1 <strings_count+0x15>
    }
  }

  return count;
   163e4:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   163e7:	c9                   	leave  
   163e8:	c3                   	ret    

000163e9 <get_file_name>:
 * @brief 根据文件路径获取文件名
 *
 * @param path
 * @return char*
 */
const char *get_file_name(const char *path) {
   163e9:	55                   	push   %ebp
   163ea:	89 e5                	mov    %esp,%ebp
   163ec:	83 ec 10             	sub    $0x10,%esp
  const char *s = path;
   163ef:	8b 45 08             	mov    0x8(%ebp),%eax
   163f2:	89 45 fc             	mov    %eax,-0x4(%ebp)
  while (*s != '\0') {
   163f5:	eb 04                	jmp    163fb <get_file_name+0x12>
    s++;
   163f7:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  while (*s != '\0') {
   163fb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   163fe:	0f b6 00             	movzbl (%eax),%eax
   16401:	84 c0                	test   %al,%al
   16403:	75 f2                	jne    163f7 <get_file_name+0xe>
  }

  while ((*s != '/') && (*s != '\\') && (s >= path)) {
   16405:	eb 04                	jmp    1640b <get_file_name+0x22>
    s--;
   16407:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
  while ((*s != '/') && (*s != '\\') && (s >= path)) {
   1640b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1640e:	0f b6 00             	movzbl (%eax),%eax
   16411:	3c 2f                	cmp    $0x2f,%al
   16413:	74 12                	je     16427 <get_file_name+0x3e>
   16415:	8b 45 fc             	mov    -0x4(%ebp),%eax
   16418:	0f b6 00             	movzbl (%eax),%eax
   1641b:	3c 5c                	cmp    $0x5c,%al
   1641d:	74 08                	je     16427 <get_file_name+0x3e>
   1641f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   16422:	3b 45 08             	cmp    0x8(%ebp),%eax
   16425:	73 e0                	jae    16407 <get_file_name+0x1e>
  }

  return s + 1;
   16427:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1642a:	83 c0 01             	add    $0x1,%eax
   1642d:	c9                   	leave  
   1642e:	c3                   	ret    

0001642f <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   1642f:	55                   	push   %ebp
   16430:	89 e5                	mov    %esp,%ebp
   16432:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   16435:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   16439:	75 19                	jne    16454 <list_is_empty+0x25>
   1643b:	68 dc 7c 01 00       	push   $0x17cdc
   16440:	68 c0 7d 01 00       	push   $0x17dc0
   16445:	6a 38                	push   $0x38
   16447:	68 f0 7c 01 00       	push   $0x17cf0
   1644c:	e8 a2 f6 ff ff       	call   15af3 <pannic>
   16451:	83 c4 10             	add    $0x10,%esp
    return list->size == 0;
   16454:	8b 45 08             	mov    0x8(%ebp),%eax
   16457:	8b 40 08             	mov    0x8(%eax),%eax
   1645a:	85 c0                	test   %eax,%eax
   1645c:	0f 94 c0             	sete   %al
   1645f:	0f b6 c0             	movzbl %al,%eax
}
   16462:	c9                   	leave  
   16463:	c3                   	ret    

00016464 <list_get_size>:
static inline int list_get_size(list_t *list) {
   16464:	55                   	push   %ebp
   16465:	89 e5                	mov    %esp,%ebp
   16467:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t*)0);
   1646a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1646e:	75 19                	jne    16489 <list_get_size+0x25>
   16470:	68 dc 7c 01 00       	push   $0x17cdc
   16475:	68 f8 7d 01 00       	push   $0x17df8
   1647a:	6a 3e                	push   $0x3e
   1647c:	68 f0 7c 01 00       	push   $0x17cf0
   16481:	e8 6d f6 ff ff       	call   15af3 <pannic>
   16486:	83 c4 10             	add    $0x10,%esp
    return list->size;
   16489:	8b 45 08             	mov    0x8(%ebp),%eax
   1648c:	8b 40 08             	mov    0x8(%eax),%eax
}
   1648f:	c9                   	leave  
   16490:	c3                   	ret    

00016491 <list_insert_first>:
 * 
 */

#include "tools/list.h"

void list_insert_first(list_t *list, list_node_t *node) {
   16491:	55                   	push   %ebp
   16492:	89 e5                	mov    %esp,%ebp
   16494:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   16497:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1649b:	74 06                	je     164a3 <list_insert_first+0x12>
   1649d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   164a1:	75 19                	jne    164bc <list_insert_first+0x2b>
   164a3:	68 30 7d 01 00       	push   $0x17d30
   164a8:	68 ac 7d 01 00       	push   $0x17dac
   164ad:	6a 0f                	push   $0xf
   164af:	68 60 7d 01 00       	push   $0x17d60
   164b4:	e8 3a f6 ff ff       	call   15af3 <pannic>
   164b9:	83 c4 10             	add    $0x10,%esp

    // if (node == (list_node_t*)0) return;

    node->next = list->first;
   164bc:	8b 45 08             	mov    0x8(%ebp),%eax
   164bf:	8b 10                	mov    (%eax),%edx
   164c1:	8b 45 0c             	mov    0xc(%ebp),%eax
   164c4:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   164c7:	8b 45 0c             	mov    0xc(%ebp),%eax
   164ca:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   164d0:	83 ec 0c             	sub    $0xc,%esp
   164d3:	ff 75 08             	push   0x8(%ebp)
   164d6:	e8 54 ff ff ff       	call   1642f <list_is_empty>
   164db:	83 c4 10             	add    $0x10,%esp
   164de:	85 c0                	test   %eax,%eax
   164e0:	74 16                	je     164f8 <list_insert_first+0x67>
        list->first = list->last = node;
   164e2:	8b 45 08             	mov    0x8(%ebp),%eax
   164e5:	8b 55 0c             	mov    0xc(%ebp),%edx
   164e8:	89 50 04             	mov    %edx,0x4(%eax)
   164eb:	8b 45 08             	mov    0x8(%ebp),%eax
   164ee:	8b 50 04             	mov    0x4(%eax),%edx
   164f1:	8b 45 08             	mov    0x8(%ebp),%eax
   164f4:	89 10                	mov    %edx,(%eax)
   164f6:	eb 12                	jmp    1650a <list_insert_first+0x79>
    } else {
        list->first->pre = node;
   164f8:	8b 45 08             	mov    0x8(%ebp),%eax
   164fb:	8b 00                	mov    (%eax),%eax
   164fd:	8b 55 0c             	mov    0xc(%ebp),%edx
   16500:	89 10                	mov    %edx,(%eax)
        list->first = node;
   16502:	8b 45 08             	mov    0x8(%ebp),%eax
   16505:	8b 55 0c             	mov    0xc(%ebp),%edx
   16508:	89 10                	mov    %edx,(%eax)
    }

    list->size++;
   1650a:	8b 45 08             	mov    0x8(%ebp),%eax
   1650d:	8b 40 08             	mov    0x8(%eax),%eax
   16510:	8d 50 01             	lea    0x1(%eax),%edx
   16513:	8b 45 08             	mov    0x8(%ebp),%eax
   16516:	89 50 08             	mov    %edx,0x8(%eax)
}
   16519:	90                   	nop
   1651a:	c9                   	leave  
   1651b:	c3                   	ret    

0001651c <list_insert_last>:

void list_insert_last(list_t *list, list_node_t *node) {
   1651c:	55                   	push   %ebp
   1651d:	89 e5                	mov    %esp,%ebp
   1651f:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   16522:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   16526:	74 06                	je     1652e <list_insert_last+0x12>
   16528:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1652c:	75 19                	jne    16547 <list_insert_last+0x2b>
   1652e:	68 30 7d 01 00       	push   $0x17d30
   16533:	68 d0 7d 01 00       	push   $0x17dd0
   16538:	6a 21                	push   $0x21
   1653a:	68 60 7d 01 00       	push   $0x17d60
   1653f:	e8 af f5 ff ff       	call   15af3 <pannic>
   16544:	83 c4 10             	add    $0x10,%esp
    // if (node == (list_node_t*)0) return;

    node->pre = list->last;
   16547:	8b 45 08             	mov    0x8(%ebp),%eax
   1654a:	8b 50 04             	mov    0x4(%eax),%edx
   1654d:	8b 45 0c             	mov    0xc(%ebp),%eax
   16550:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   16552:	8b 45 0c             	mov    0xc(%ebp),%eax
   16555:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)


    if (list_is_empty(list)) {
   1655c:	83 ec 0c             	sub    $0xc,%esp
   1655f:	ff 75 08             	push   0x8(%ebp)
   16562:	e8 c8 fe ff ff       	call   1642f <list_is_empty>
   16567:	83 c4 10             	add    $0x10,%esp
   1656a:	85 c0                	test   %eax,%eax
   1656c:	74 16                	je     16584 <list_insert_last+0x68>
        list->first = list->last = node;
   1656e:	8b 45 08             	mov    0x8(%ebp),%eax
   16571:	8b 55 0c             	mov    0xc(%ebp),%edx
   16574:	89 50 04             	mov    %edx,0x4(%eax)
   16577:	8b 45 08             	mov    0x8(%ebp),%eax
   1657a:	8b 50 04             	mov    0x4(%eax),%edx
   1657d:	8b 45 08             	mov    0x8(%ebp),%eax
   16580:	89 10                	mov    %edx,(%eax)
   16582:	eb 15                	jmp    16599 <list_insert_last+0x7d>
    } else {
        list->last->next = node;
   16584:	8b 45 08             	mov    0x8(%ebp),%eax
   16587:	8b 40 04             	mov    0x4(%eax),%eax
   1658a:	8b 55 0c             	mov    0xc(%ebp),%edx
   1658d:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   16590:	8b 45 08             	mov    0x8(%ebp),%eax
   16593:	8b 55 0c             	mov    0xc(%ebp),%edx
   16596:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->size++;
   16599:	8b 45 08             	mov    0x8(%ebp),%eax
   1659c:	8b 40 08             	mov    0x8(%eax),%eax
   1659f:	8d 50 01             	lea    0x1(%eax),%edx
   165a2:	8b 45 08             	mov    0x8(%ebp),%eax
   165a5:	89 50 08             	mov    %edx,0x8(%eax)

}
   165a8:	90                   	nop
   165a9:	c9                   	leave  
   165aa:	c3                   	ret    

000165ab <list_remove_first>:

list_node_t* list_remove_first(list_t *list){
   165ab:	55                   	push   %ebp
   165ac:	89 e5                	mov    %esp,%ebp
   165ae:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   165b1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   165b5:	75 19                	jne    165d0 <list_remove_first+0x25>
   165b7:	68 96 7d 01 00       	push   $0x17d96
   165bc:	68 e4 7d 01 00       	push   $0x17de4
   165c1:	6a 34                	push   $0x34
   165c3:	68 60 7d 01 00       	push   $0x17d60
   165c8:	e8 26 f5 ff ff       	call   15af3 <pannic>
   165cd:	83 c4 10             	add    $0x10,%esp

    if (list_is_empty(list)) {
   165d0:	83 ec 0c             	sub    $0xc,%esp
   165d3:	ff 75 08             	push   0x8(%ebp)
   165d6:	e8 54 fe ff ff       	call   1642f <list_is_empty>
   165db:	83 c4 10             	add    $0x10,%esp
   165de:	85 c0                	test   %eax,%eax
   165e0:	74 07                	je     165e9 <list_remove_first+0x3e>
        return (list_node_t*)0;
   165e2:	b8 00 00 00 00       	mov    $0x0,%eax
   165e7:	eb 71                	jmp    1665a <list_remove_first+0xaf>
    }

    list_node_t *ret = list->first;
   165e9:	8b 45 08             	mov    0x8(%ebp),%eax
   165ec:	8b 00                	mov    (%eax),%eax
   165ee:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   165f1:	83 ec 0c             	sub    $0xc,%esp
   165f4:	ff 75 08             	push   0x8(%ebp)
   165f7:	e8 68 fe ff ff       	call   16464 <list_get_size>
   165fc:	83 c4 10             	add    $0x10,%esp
   165ff:	83 f8 01             	cmp    $0x1,%eax
   16602:	75 17                	jne    1661b <list_remove_first+0x70>
        list->first = list->last = (list_node_t*)0;
   16604:	8b 45 08             	mov    0x8(%ebp),%eax
   16607:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1660e:	8b 45 08             	mov    0x8(%ebp),%eax
   16611:	8b 50 04             	mov    0x4(%eax),%edx
   16614:	8b 45 08             	mov    0x8(%ebp),%eax
   16617:	89 10                	mov    %edx,(%eax)
   16619:	eb 18                	jmp    16633 <list_remove_first+0x88>
    } else {
        list->first = list->first->next;
   1661b:	8b 45 08             	mov    0x8(%ebp),%eax
   1661e:	8b 00                	mov    (%eax),%eax
   16620:	8b 50 04             	mov    0x4(%eax),%edx
   16623:	8b 45 08             	mov    0x8(%ebp),%eax
   16626:	89 10                	mov    %edx,(%eax)
        list->first->pre = (list_node_t*)0;
   16628:	8b 45 08             	mov    0x8(%ebp),%eax
   1662b:	8b 00                	mov    (%eax),%eax
   1662d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    list->size--;
   16633:	8b 45 08             	mov    0x8(%ebp),%eax
   16636:	8b 40 08             	mov    0x8(%eax),%eax
   16639:	8d 50 ff             	lea    -0x1(%eax),%edx
   1663c:	8b 45 08             	mov    0x8(%ebp),%eax
   1663f:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   16642:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16645:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1664c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1664f:	8b 50 04             	mov    0x4(%eax),%edx
   16652:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16655:	89 10                	mov    %edx,(%eax)
    return ret;
   16657:	8b 45 f4             	mov    -0xc(%ebp),%eax
 }
   1665a:	c9                   	leave  
   1665b:	c3                   	ret    

0001665c <list_remove_last>:

list_node_t* list_remove_last(list_t *list) {
   1665c:	55                   	push   %ebp
   1665d:	89 e5                	mov    %esp,%ebp
   1665f:	83 ec 18             	sub    $0x18,%esp
    ASSERT(list != (list_t *)0);
   16662:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   16666:	75 19                	jne    16681 <list_remove_last+0x25>
   16668:	68 96 7d 01 00       	push   $0x17d96
   1666d:	68 08 7e 01 00       	push   $0x17e08
   16672:	6a 4a                	push   $0x4a
   16674:	68 60 7d 01 00       	push   $0x17d60
   16679:	e8 75 f4 ff ff       	call   15af3 <pannic>
   1667e:	83 c4 10             	add    $0x10,%esp

     if (list_is_empty(list)) {
   16681:	83 ec 0c             	sub    $0xc,%esp
   16684:	ff 75 08             	push   0x8(%ebp)
   16687:	e8 a3 fd ff ff       	call   1642f <list_is_empty>
   1668c:	83 c4 10             	add    $0x10,%esp
   1668f:	85 c0                	test   %eax,%eax
   16691:	74 07                	je     1669a <list_remove_last+0x3e>
        return (list_node_t*)0;
   16693:	b8 00 00 00 00       	mov    $0x0,%eax
   16698:	eb 75                	jmp    1670f <list_remove_last+0xb3>
    }

    list_node_t *ret = list->last;
   1669a:	8b 45 08             	mov    0x8(%ebp),%eax
   1669d:	8b 40 04             	mov    0x4(%eax),%eax
   166a0:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_get_size(list) == 1) {
   166a3:	83 ec 0c             	sub    $0xc,%esp
   166a6:	ff 75 08             	push   0x8(%ebp)
   166a9:	e8 b6 fd ff ff       	call   16464 <list_get_size>
   166ae:	83 c4 10             	add    $0x10,%esp
   166b1:	83 f8 01             	cmp    $0x1,%eax
   166b4:	75 17                	jne    166cd <list_remove_last+0x71>
        list->first = list->last = (list_node_t*)0;
   166b6:	8b 45 08             	mov    0x8(%ebp),%eax
   166b9:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   166c0:	8b 45 08             	mov    0x8(%ebp),%eax
   166c3:	8b 50 04             	mov    0x4(%eax),%edx
   166c6:	8b 45 08             	mov    0x8(%ebp),%eax
   166c9:	89 10                	mov    %edx,(%eax)
   166cb:	eb 1b                	jmp    166e8 <list_remove_last+0x8c>
    } else {
        list->last = list->last->pre;
   166cd:	8b 45 08             	mov    0x8(%ebp),%eax
   166d0:	8b 40 04             	mov    0x4(%eax),%eax
   166d3:	8b 10                	mov    (%eax),%edx
   166d5:	8b 45 08             	mov    0x8(%ebp),%eax
   166d8:	89 50 04             	mov    %edx,0x4(%eax)
        list->last->next = (list_node_t*)0;
   166db:	8b 45 08             	mov    0x8(%ebp),%eax
   166de:	8b 40 04             	mov    0x4(%eax),%eax
   166e1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    }

    list->size--;
   166e8:	8b 45 08             	mov    0x8(%ebp),%eax
   166eb:	8b 40 08             	mov    0x8(%eax),%eax
   166ee:	8d 50 ff             	lea    -0x1(%eax),%edx
   166f1:	8b 45 08             	mov    0x8(%ebp),%eax
   166f4:	89 50 08             	mov    %edx,0x8(%eax)

    ret->pre = ret->next = (list_node_t*)0;
   166f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   166fa:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   16701:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16704:	8b 50 04             	mov    0x4(%eax),%edx
   16707:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1670a:	89 10                	mov    %edx,(%eax)
    return ret;
   1670c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   1670f:	c9                   	leave  
   16710:	c3                   	ret    

00016711 <list_remove>:

list_node_t* list_remove(list_t *list, list_node_t *node) {
   16711:	55                   	push   %ebp
   16712:	89 e5                	mov    %esp,%ebp
   16714:	83 ec 08             	sub    $0x8,%esp
    ASSERT(list != (list_t *)0 && node != (list_node_t*)0);
   16717:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1671b:	74 06                	je     16723 <list_remove+0x12>
   1671d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   16721:	75 19                	jne    1673c <list_remove+0x2b>
   16723:	68 30 7d 01 00       	push   $0x17d30
   16728:	68 1c 7e 01 00       	push   $0x17e1c
   1672d:	6a 60                	push   $0x60
   1672f:	68 60 7d 01 00       	push   $0x17d60
   16734:	e8 ba f3 ff ff       	call   15af3 <pannic>
   16739:	83 c4 10             	add    $0x10,%esp

    if (list_is_empty(list)) {
   1673c:	83 ec 0c             	sub    $0xc,%esp
   1673f:	ff 75 08             	push   0x8(%ebp)
   16742:	e8 e8 fc ff ff       	call   1642f <list_is_empty>
   16747:	83 c4 10             	add    $0x10,%esp
   1674a:	85 c0                	test   %eax,%eax
   1674c:	74 0a                	je     16758 <list_remove+0x47>
        return (list_node_t*)0;
   1674e:	b8 00 00 00 00       	mov    $0x0,%eax
   16753:	e9 80 00 00 00       	jmp    167d8 <list_remove+0xc7>
    }

    if (node == list->first) list->first = node->next;
   16758:	8b 45 08             	mov    0x8(%ebp),%eax
   1675b:	8b 00                	mov    (%eax),%eax
   1675d:	39 45 0c             	cmp    %eax,0xc(%ebp)
   16760:	75 0b                	jne    1676d <list_remove+0x5c>
   16762:	8b 45 0c             	mov    0xc(%ebp),%eax
   16765:	8b 50 04             	mov    0x4(%eax),%edx
   16768:	8b 45 08             	mov    0x8(%ebp),%eax
   1676b:	89 10                	mov    %edx,(%eax)
    if (node == list->last) list->last = node->pre;
   1676d:	8b 45 08             	mov    0x8(%ebp),%eax
   16770:	8b 40 04             	mov    0x4(%eax),%eax
   16773:	39 45 0c             	cmp    %eax,0xc(%ebp)
   16776:	75 0b                	jne    16783 <list_remove+0x72>
   16778:	8b 45 0c             	mov    0xc(%ebp),%eax
   1677b:	8b 10                	mov    (%eax),%edx
   1677d:	8b 45 08             	mov    0x8(%ebp),%eax
   16780:	89 50 04             	mov    %edx,0x4(%eax)

    if (node->pre) node->pre->next = node->next;
   16783:	8b 45 0c             	mov    0xc(%ebp),%eax
   16786:	8b 00                	mov    (%eax),%eax
   16788:	85 c0                	test   %eax,%eax
   1678a:	74 0e                	je     1679a <list_remove+0x89>
   1678c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1678f:	8b 00                	mov    (%eax),%eax
   16791:	8b 55 0c             	mov    0xc(%ebp),%edx
   16794:	8b 52 04             	mov    0x4(%edx),%edx
   16797:	89 50 04             	mov    %edx,0x4(%eax)
    if (node->next) node->next->pre = node->pre;
   1679a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1679d:	8b 40 04             	mov    0x4(%eax),%eax
   167a0:	85 c0                	test   %eax,%eax
   167a2:	74 0d                	je     167b1 <list_remove+0xa0>
   167a4:	8b 45 0c             	mov    0xc(%ebp),%eax
   167a7:	8b 40 04             	mov    0x4(%eax),%eax
   167aa:	8b 55 0c             	mov    0xc(%ebp),%edx
   167ad:	8b 12                	mov    (%edx),%edx
   167af:	89 10                	mov    %edx,(%eax)

    node->pre = node->next = (list_node_t*)0;
   167b1:	8b 45 0c             	mov    0xc(%ebp),%eax
   167b4:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   167bb:	8b 45 0c             	mov    0xc(%ebp),%eax
   167be:	8b 50 04             	mov    0x4(%eax),%edx
   167c1:	8b 45 0c             	mov    0xc(%ebp),%eax
   167c4:	89 10                	mov    %edx,(%eax)
    list->size--;
   167c6:	8b 45 08             	mov    0x8(%ebp),%eax
   167c9:	8b 40 08             	mov    0x8(%eax),%eax
   167cc:	8d 50 ff             	lea    -0x1(%eax),%edx
   167cf:	8b 45 08             	mov    0x8(%ebp),%eax
   167d2:	89 50 08             	mov    %edx,0x8(%eax)

    return node;
   167d5:	8b 45 0c             	mov    0xc(%ebp),%eax
   167d8:	c9                   	leave  
   167d9:	c3                   	ret    

000167da <log_init>:

/**
 * @brief  初始化串行端口寄存器COM1
 * 
 */
void log_init(void) {
   167da:	55                   	push   %ebp
   167db:	89 e5                	mov    %esp,%ebp
   167dd:	83 ec 08             	sub    $0x8,%esp
    outb(COM1_PORT + 2, 0xc7);
    outb(COM1_PORT + 4, 0x0f);

#endif 
    //初始化互斥锁
    mutex_init(&mutex);
   167e0:	83 ec 0c             	sub    $0xc,%esp
   167e3:	68 b8 a3 06 00       	push   $0x6a3b8
   167e8:	e8 ed eb ff ff       	call   153da <mutex_init>
   167ed:	83 c4 10             	add    $0x10,%esp

    //打开一个tty设备用于日志打印
    log_dev_id = dev_open(DEV_TTY, 0, (void*)0);
   167f0:	83 ec 04             	sub    $0x4,%esp
   167f3:	6a 00                	push   $0x0
   167f5:	6a 00                	push   $0x0
   167f7:	6a 01                	push   $0x1
   167f9:	e8 d6 d7 ff ff       	call   13fd4 <dev_open>
   167fe:	83 c4 10             	add    $0x10,%esp
   16801:	a3 cc a3 06 00       	mov    %eax,0x6a3cc
}
   16806:	90                   	nop
   16807:	c9                   	leave  
   16808:	c3                   	ret    

00016809 <log_printf>:
 * @brief  格式化输出到串口
 * 
 * @param formate 
 * @param ... 
 */
void log_printf(const char *formate, ...) {
   16809:	55                   	push   %ebp
   1680a:	89 e5                	mov    %esp,%ebp
   1680c:	81 ec 98 00 00 00    	sub    $0x98,%esp
    //1.设置字符缓冲区
    char str_buf[128];
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   16812:	83 ec 04             	sub    $0x4,%esp
   16815:	68 80 00 00 00       	push   $0x80
   1681a:	6a 00                	push   $0x0
   1681c:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   16822:	50                   	push   %eax
   16823:	e8 e4 f7 ff ff       	call   1600c <kernel_memset>
   16828:	83 c4 10             	add    $0x10,%esp
    
    //2.获取可变参数并将其格式化到缓冲区中
    va_list args;
    va_start(args, formate);
   1682b:	8d 45 0c             	lea    0xc(%ebp),%eax
   1682e:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, formate, args);
   16834:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   1683a:	83 ec 04             	sub    $0x4,%esp
   1683d:	50                   	push   %eax
   1683e:	ff 75 08             	push   0x8(%ebp)
   16841:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   16847:	50                   	push   %eax
   16848:	e8 a8 f8 ff ff       	call   160f5 <kernel_vsprintf>
   1684d:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    const char *p = str_buf;
   16850:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   16856:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //将以下资源放入临界资源包含区，防止在运行时发生进程切换（cpu关中断）
    mutex_lock(&mutex); //TODO:加锁
   16859:	83 ec 0c             	sub    $0xc,%esp
   1685c:	68 b8 a3 06 00       	push   $0x6a3b8
   16861:	e8 c1 eb ff ff       	call   15427 <mutex_lock>
   16866:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');

#else
    //console_write(0, str_buf, kernel_strlen(str_buf));
    //tty设备在显示器上写入时是根据当前光标位置来的，所以不需要传入addr参数
    dev_write(log_dev_id, 0, str_buf, kernel_strlen(str_buf));
   16869:	83 ec 0c             	sub    $0xc,%esp
   1686c:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   16872:	50                   	push   %eax
   16873:	e8 10 f7 ff ff       	call   15f88 <kernel_strlen>
   16878:	83 c4 10             	add    $0x10,%esp
   1687b:	8b 15 cc a3 06 00    	mov    0x6a3cc,%edx
   16881:	50                   	push   %eax
   16882:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   16888:	50                   	push   %eax
   16889:	6a 00                	push   $0x0
   1688b:	52                   	push   %edx
   1688c:	e8 d9 d8 ff ff       	call   1416a <dev_write>
   16891:	83 c4 10             	add    $0x10,%esp
    //console_write(0, &c, 1); 
#endif

    //执行完毕，将资源离开临界资源保护区，(cpu开中断)
    mutex_unlock(&mutex); //TODO:解锁
   16894:	83 ec 0c             	sub    $0xc,%esp
   16897:	68 b8 a3 06 00       	push   $0x6a3b8
   1689c:	e8 17 ec ff ff       	call   154b8 <mutex_unlock>
   168a1:	83 c4 10             	add    $0x10,%esp
   168a4:	90                   	nop
   168a5:	c9                   	leave  
   168a6:	c3                   	ret    

Disassembly of section .first_task:

80000000 <first_task_entry>:
//第一个任务进程入口函数
first_task_entry:
    //iret指令返回后，将之前压入的 ss,esp,eflags,cs,eip 寄存器值返回给对应寄存器，
	//由于cpu从0特权级切换到了3特权级，而之前其余的段寄存器都是0特权级，不能供3特权级使用，
	//所以cpu将其余寄存器置零，这里直接用ss寄存器再初始化其余段寄存器即可
	mov %ss, %ax
80000000:	66 8c d0             	mov    %ss,%ax
	mov %ax, %ds
80000003:	8e d8                	mov    %eax,%ds
	mov %ax, %es
80000005:	8e c0                	mov    %eax,%es
	mov %ax, %fs
80000007:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
80000009:	8e e8                	mov    %eax,%gs

    //因为cs寄存器已由操作系统分配，所以直接跳转即可
8000000b:	e9 00 00 00 00       	jmp    80000010 <first_main>

80000010 <first_main>:
#include "tools/log.h"
#include "core/task.h"
#include  "applib/lib_syscall.h"
#include "dev/tty.h"

int first_main(void) {
80000010:	55                   	push   %ebp
80000011:	89 e5                	mov    %esp,%ebp
80000013:	83 ec 28             	sub    $0x28,%esp
    // for (;;)
    // {
    // }

    //为每个tty设备创建一个进程
    for (int i = 0; i < TTY_TABLE_SIZE; ++i) {
80000016:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
8000001d:	eb 75                	jmp    80000094 <first_main+0x84>
        int pid = fork();
8000001f:	e8 67 01 00 00       	call   8000018b <fork>
80000024:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pid < 0) {
80000027:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
8000002b:	79 14                	jns    80000041 <first_main+0x31>
            print_msg("create shell failed.", 0);
8000002d:	83 ec 08             	sub    $0x8,%esp
80000030:	6a 00                	push   $0x0
80000032:	68 b2 00 00 80       	push   $0x800000b2
80000037:	e8 27 01 00 00       	call   80000163 <print_msg>
8000003c:	83 c4 10             	add    $0x10,%esp
            break;
8000003f:	eb 59                	jmp    8000009a <first_main+0x8a>
        } else if (pid == 0) {
80000041:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80000045:	75 49                	jne    80000090 <first_main+0x80>
            char tty_num[5] = "tty:?";
80000047:	c7 45 eb 74 74 79 3a 	movl   $0x3a797474,-0x15(%ebp)
8000004e:	c6 45 ef 3f          	movb   $0x3f,-0x11(%ebp)
            tty_num[4] = i + '0';
80000052:	8b 45 f4             	mov    -0xc(%ebp),%eax
80000055:	83 c0 30             	add    $0x30,%eax
80000058:	88 45 ef             	mov    %al,-0x11(%ebp)
            char * const argv[] = {tty_num, 0};
8000005b:	8d 45 eb             	lea    -0x15(%ebp),%eax
8000005e:	89 45 e0             	mov    %eax,-0x20(%ebp)
80000061:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
            execve("/sehll.elf", argv, 0);
80000068:	83 ec 04             	sub    $0x4,%esp
8000006b:	6a 00                	push   $0x0
8000006d:	8d 45 e0             	lea    -0x20(%ebp),%eax
80000070:	50                   	push   %eax
80000071:	68 c7 00 00 80       	push   $0x800000c7
80000076:	e8 2b 01 00 00       	call   800001a6 <execve>
8000007b:	83 c4 10             	add    $0x10,%esp
            while (1)   {
                msleep(1000);
8000007e:	83 ec 0c             	sub    $0xc,%esp
80000081:	68 e8 03 00 00       	push   $0x3e8
80000086:	e8 93 00 00 00       	call   8000011e <msleep>
8000008b:	83 c4 10             	add    $0x10,%esp
8000008e:	eb ee                	jmp    8000007e <first_main+0x6e>
    for (int i = 0; i < TTY_TABLE_SIZE; ++i) {
80000090:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
80000094:	83 7d f4 07          	cmpl   $0x7,-0xc(%ebp)
80000098:	7e 85                	jle    8000001f <first_main+0xf>
        }
    }    

    for (;;) {
        //回收所有孤儿进程
        int status = 0;
8000009a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
        wait(&status);
800000a1:	83 ec 0c             	sub    $0xc,%esp
800000a4:	8d 45 dc             	lea    -0x24(%ebp),%eax
800000a7:	50                   	push   %eax
800000a8:	e8 bc 02 00 00       	call   80000369 <wait>
800000ad:	83 c4 10             	add    $0x10,%esp
    for (;;) {
800000b0:	eb e8                	jmp    8000009a <first_main+0x8a>
800000b2:	63 72 65             	arpl   %si,0x65(%edx)
800000b5:	61                   	popa   
800000b6:	74 65                	je     8000011d <sys_call+0x4b>
800000b8:	20 73 68             	and    %dh,0x68(%ebx)
800000bb:	65 6c                	gs insb (%dx),%es:(%edi)
800000bd:	6c                   	insb   (%dx),%es:(%edi)
800000be:	20 66 61             	and    %ah,0x61(%esi)
800000c1:	69 6c 65 64 2e 00 2f 	imul   $0x732f002e,0x64(%ebp,%eiz,2),%ebp
800000c8:	73 
800000c9:	65 68 6c 6c 2e 65    	gs push $0x652e6c6c
800000cf:	6c                   	insb   (%dx),%es:(%edi)
800000d0:	66                   	data16
	...

800000d2 <sys_call>:
#include    "cpu/syscall.h"
#include    "os_cfg.h"
#include    "lib_syscall.h"


int sys_call(syscall_args_t *args) {
800000d2:	55                   	push   %ebp
800000d3:	89 e5                	mov    %esp,%ebp
800000d5:	57                   	push   %edi
800000d6:	56                   	push   %esi
800000d7:	53                   	push   %ebx
800000d8:	83 ec 10             	sub    $0x10,%esp
    // 传入远跳转需要的参数, 即cs = selector, eip = offset 
    //为调用门选择子赋予0特权级,调用门的 cpl 和 RPL <= 系统调用段描述符的DPL
    //门描述符中目标选择子的 CPL <= 门描述符的 DPL
    uint32_t addr[] = {0, SYSCALL_SELECTOR | 0};  
800000db:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
800000e2:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%ebp)
        "push %[arg1]\n\t"
        "push %[arg0]\n\t"
        "push %[id]\n\t"
        "lcalll *(%[addr])\n\t"
        :"=a"(ret)
        :[arg3]"r"(args->arg3), 
800000e9:	8b 45 08             	mov    0x8(%ebp),%eax
800000ec:	8b 40 10             	mov    0x10(%eax),%eax
         [arg2]"r"(args->arg2), 
800000ef:	8b 55 08             	mov    0x8(%ebp),%edx
800000f2:	8b 52 0c             	mov    0xc(%edx),%edx
         [arg1]"r"(args->arg1),
800000f5:	8b 4d 08             	mov    0x8(%ebp),%ecx
800000f8:	8b 49 08             	mov    0x8(%ecx),%ecx
         [arg0]"r"(args->arg0), 
800000fb:	8b 5d 08             	mov    0x8(%ebp),%ebx
800000fe:	8b 5b 04             	mov    0x4(%ebx),%ebx
         [id]"r"(args->id), 
80000101:	8b 75 08             	mov    0x8(%ebp),%esi
80000104:	8b 36                	mov    (%esi),%esi
     __asm__ __volatile__(
80000106:	8d 7d e8             	lea    -0x18(%ebp),%edi
80000109:	50                   	push   %eax
8000010a:	52                   	push   %edx
8000010b:	51                   	push   %ecx
8000010c:	53                   	push   %ebx
8000010d:	56                   	push   %esi
8000010e:	ff 1f                	lcall  *(%edi)
80000110:	89 45 f0             	mov    %eax,-0x10(%ebp)
         [addr]"r"(addr)
    );

    return ret;
80000113:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
80000116:	83 c4 10             	add    $0x10,%esp
80000119:	5b                   	pop    %ebx
8000011a:	5e                   	pop    %esi
8000011b:	5f                   	pop    %edi
8000011c:	5d                   	pop    %ebp
8000011d:	c3                   	ret    

8000011e <msleep>:
/**
 * @brief 以ms为单位进行延时
 * 
 * @param ms 
 */
void msleep(int ms) {
8000011e:	55                   	push   %ebp
8000011f:	89 e5                	mov    %esp,%ebp
80000121:	83 ec 20             	sub    $0x20,%esp
    if (ms <= 0) return;
80000124:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
80000128:	7e 1b                	jle    80000145 <msleep+0x27>

    syscall_args_t args;
    args.id = SYS_sleep;
8000012a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    args.arg0 = ms;
80000131:	8b 45 08             	mov    0x8(%ebp),%eax
80000134:	89 45 f0             	mov    %eax,-0x10(%ebp)

    sys_call(&args);
80000137:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000013a:	50                   	push   %eax
8000013b:	e8 92 ff ff ff       	call   800000d2 <sys_call>
80000140:	83 c4 04             	add    $0x4,%esp
80000143:	eb 01                	jmp    80000146 <msleep+0x28>
    if (ms <= 0) return;
80000145:	90                   	nop

}
80000146:	c9                   	leave  
80000147:	c3                   	ret    

80000148 <getpid>:
/**
 * @brief 获取用户进程id
 * 
 * @return int 
 */
int getpid(void) {
80000148:	55                   	push   %ebp
80000149:	89 e5                	mov    %esp,%ebp
8000014b:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_getpid;
8000014e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)

    return sys_call(&args);
80000155:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000158:	50                   	push   %eax
80000159:	e8 74 ff ff ff       	call   800000d2 <sys_call>
8000015e:	83 c4 04             	add    $0x4,%esp
}
80000161:	c9                   	leave  
80000162:	c3                   	ret    

80000163 <print_msg>:

void print_msg(const char *fmt, int arg) {
80000163:	55                   	push   %ebp
80000164:	89 e5                	mov    %esp,%ebp
80000166:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_printmsg;
80000169:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
    args.arg0 = (int)fmt;
80000170:	8b 45 08             	mov    0x8(%ebp),%eax
80000173:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = arg;
80000176:	8b 45 0c             	mov    0xc(%ebp),%eax
80000179:	89 45 f4             	mov    %eax,-0xc(%ebp)

    sys_call(&args);
8000017c:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000017f:	50                   	push   %eax
80000180:	e8 4d ff ff ff       	call   800000d2 <sys_call>
80000185:	83 c4 04             	add    $0x4,%esp
}
80000188:	90                   	nop
80000189:	c9                   	leave  
8000018a:	c3                   	ret    

8000018b <fork>:

int fork (void) {
8000018b:	55                   	push   %ebp
8000018c:	89 e5                	mov    %esp,%ebp
8000018e:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fork;
80000191:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)

    return sys_call(&args);
80000198:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000019b:	50                   	push   %eax
8000019c:	e8 31 ff ff ff       	call   800000d2 <sys_call>
800001a1:	83 c4 04             	add    $0x4,%esp
}
800001a4:	c9                   	leave  
800001a5:	c3                   	ret    

800001a6 <execve>:
 * @param name 外部程序名
 * @param argv 外部程序的参数，字符串常量指针，即字符串数组，数组中的char*值为常量
 * @param env  所加载程序的环境变量
 * @return int 
 */
int execve(const char *name, char * const * argv, char * const * env) {
800001a6:	55                   	push   %ebp
800001a7:	89 e5                	mov    %esp,%ebp
800001a9:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_execve;
800001ac:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
    args.arg0 = (int)name;
800001b3:	8b 45 08             	mov    0x8(%ebp),%eax
800001b6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)argv;
800001b9:	8b 45 0c             	mov    0xc(%ebp),%eax
800001bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = (int)env;
800001bf:	8b 45 10             	mov    0x10(%ebp),%eax
800001c2:	89 45 f8             	mov    %eax,-0x8(%ebp)


    return sys_call(&args);
800001c5:	8d 45 ec             	lea    -0x14(%ebp),%eax
800001c8:	50                   	push   %eax
800001c9:	e8 04 ff ff ff       	call   800000d2 <sys_call>
800001ce:	83 c4 04             	add    $0x4,%esp
}
800001d1:	c9                   	leave  
800001d2:	c3                   	ret    

800001d3 <yield>:
/**
 * @brief 进程主动放弃cpu
 * 
 * @return int 
 */
int yield (void) {
800001d3:	55                   	push   %ebp
800001d4:	89 e5                	mov    %esp,%ebp
800001d6:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_yield;
800001d9:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)

    return sys_call(&args);
800001e0:	8d 45 ec             	lea    -0x14(%ebp),%eax
800001e3:	50                   	push   %eax
800001e4:	e8 e9 fe ff ff       	call   800000d2 <sys_call>
800001e9:	83 c4 04             	add    $0x4,%esp
}
800001ec:	c9                   	leave  
800001ed:	c3                   	ret    

800001ee <open>:
 * @param name 
 * @param flags 
 * @param ... 
 * @return int 
 */
int open(const char *name, int flags, ...) {
800001ee:	55                   	push   %ebp
800001ef:	89 e5                	mov    %esp,%ebp
800001f1:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_open;
800001f4:	c7 45 ec 32 00 00 00 	movl   $0x32,-0x14(%ebp)
    args.arg0 = (int)name;
800001fb:	8b 45 08             	mov    0x8(%ebp),%eax
800001fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = flags;
80000201:	8b 45 0c             	mov    0xc(%ebp),%eax
80000204:	89 45 f4             	mov    %eax,-0xc(%ebp)

    return sys_call(&args);
80000207:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000020a:	50                   	push   %eax
8000020b:	e8 c2 fe ff ff       	call   800000d2 <sys_call>
80000210:	83 c4 04             	add    $0x4,%esp
}
80000213:	c9                   	leave  
80000214:	c3                   	ret    

80000215 <read>:
 * @param file 
 * @param ptr 
 * @param len 
 * @return int 
 */
int read(int file, char *ptr, int len) {
80000215:	55                   	push   %ebp
80000216:	89 e5                	mov    %esp,%ebp
80000218:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_read;
8000021b:	c7 45 ec 33 00 00 00 	movl   $0x33,-0x14(%ebp)
    args.arg0 = file;
80000222:	8b 45 08             	mov    0x8(%ebp),%eax
80000225:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
80000228:	8b 45 0c             	mov    0xc(%ebp),%eax
8000022b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
8000022e:	8b 45 10             	mov    0x10(%ebp),%eax
80000231:	89 45 f8             	mov    %eax,-0x8(%ebp)

    return sys_call(&args);
80000234:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000237:	50                   	push   %eax
80000238:	e8 95 fe ff ff       	call   800000d2 <sys_call>
8000023d:	83 c4 04             	add    $0x4,%esp
}
80000240:	c9                   	leave  
80000241:	c3                   	ret    

80000242 <write>:
 * @param file 
 * @param ptr 
 * @param len 
 * @return int 
 */
int write(int file, char *ptr, int len) {
80000242:	55                   	push   %ebp
80000243:	89 e5                	mov    %esp,%ebp
80000245:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_write;
80000248:	c7 45 ec 34 00 00 00 	movl   $0x34,-0x14(%ebp)
    args.arg0 = file;
8000024f:	8b 45 08             	mov    0x8(%ebp),%eax
80000252:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
80000255:	8b 45 0c             	mov    0xc(%ebp),%eax
80000258:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
8000025b:	8b 45 10             	mov    0x10(%ebp),%eax
8000025e:	89 45 f8             	mov    %eax,-0x8(%ebp)

    return sys_call(&args);
80000261:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000264:	50                   	push   %eax
80000265:	e8 68 fe ff ff       	call   800000d2 <sys_call>
8000026a:	83 c4 04             	add    $0x4,%esp
}
8000026d:	c9                   	leave  
8000026e:	c3                   	ret    

8000026f <close>:
 * @brief 关闭文件描述符
 * 
 * @param file 
 * @return int 
 */
int close(int file) {
8000026f:	55                   	push   %ebp
80000270:	89 e5                	mov    %esp,%ebp
80000272:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_close;
80000275:	c7 45 ec 35 00 00 00 	movl   $0x35,-0x14(%ebp)
    args.arg0 = file;
8000027c:	8b 45 08             	mov    0x8(%ebp),%eax
8000027f:	89 45 f0             	mov    %eax,-0x10(%ebp)

    return sys_call(&args);
80000282:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000285:	50                   	push   %eax
80000286:	e8 47 fe ff ff       	call   800000d2 <sys_call>
8000028b:	83 c4 04             	add    $0x4,%esp
}
8000028e:	c9                   	leave  
8000028f:	c3                   	ret    

80000290 <lseek>:
 * @param file 
 * @param offset 
 * @param dir 
 * @return int 
 */
int lseek(int file, int offset, int dir) {
80000290:	55                   	push   %ebp
80000291:	89 e5                	mov    %esp,%ebp
80000293:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_lseek;
80000296:	c7 45 ec 36 00 00 00 	movl   $0x36,-0x14(%ebp)
    args.arg0 = file;
8000029d:	8b 45 08             	mov    0x8(%ebp),%eax
800002a0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = offset;
800002a3:	8b 45 0c             	mov    0xc(%ebp),%eax
800002a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = dir;
800002a9:	8b 45 10             	mov    0x10(%ebp),%eax
800002ac:	89 45 f8             	mov    %eax,-0x8(%ebp)

    return sys_call(&args);
800002af:	8d 45 ec             	lea    -0x14(%ebp),%eax
800002b2:	50                   	push   %eax
800002b3:	e8 1a fe ff ff       	call   800000d2 <sys_call>
800002b8:	83 c4 04             	add    $0x4,%esp
}
800002bb:	c9                   	leave  
800002bc:	c3                   	ret    

800002bd <isatty>:
 * @brief 
 * 
 * @param file 
 * @return int 
 */
int isatty(int file) {
800002bd:	55                   	push   %ebp
800002be:	89 e5                	mov    %esp,%ebp
800002c0:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_isatty;
800002c3:	c7 45 ec 37 00 00 00 	movl   $0x37,-0x14(%ebp)
    args.arg0 = file;
800002ca:	8b 45 08             	mov    0x8(%ebp),%eax
800002cd:	89 45 f0             	mov    %eax,-0x10(%ebp)

    return sys_call(&args);
800002d0:	8d 45 ec             	lea    -0x14(%ebp),%eax
800002d3:	50                   	push   %eax
800002d4:	e8 f9 fd ff ff       	call   800000d2 <sys_call>
800002d9:	83 c4 04             	add    $0x4,%esp
}
800002dc:	c9                   	leave  
800002dd:	c3                   	ret    

800002de <fstat>:
 * 
 * @param file 
 * @param st 
 * @return int 
 */
int fstat(int file, struct stat *st) {
800002de:	55                   	push   %ebp
800002df:	89 e5                	mov    %esp,%ebp
800002e1:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fstat;
800002e4:	c7 45 ec 38 00 00 00 	movl   $0x38,-0x14(%ebp)
    args.arg0 = file;
800002eb:	8b 45 08             	mov    0x8(%ebp),%eax
800002ee:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)st;
800002f1:	8b 45 0c             	mov    0xc(%ebp),%eax
800002f4:	89 45 f4             	mov    %eax,-0xc(%ebp)

    return sys_call(&args);
800002f7:	8d 45 ec             	lea    -0x14(%ebp),%eax
800002fa:	50                   	push   %eax
800002fb:	e8 d2 fd ff ff       	call   800000d2 <sys_call>
80000300:	83 c4 04             	add    $0x4,%esp
}
80000303:	c9                   	leave  
80000304:	c3                   	ret    

80000305 <sbrk>:
 * @brief 
 * 
 * @param incr 
 * @return void* 
 */
char *sbrk(ptrdiff_t incr) {
80000305:	55                   	push   %ebp
80000306:	89 e5                	mov    %esp,%ebp
80000308:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_sbrk;
8000030b:	c7 45 ec 39 00 00 00 	movl   $0x39,-0x14(%ebp)
    args.arg0 = (int)incr;
80000312:	8b 45 08             	mov    0x8(%ebp),%eax
80000315:	89 45 f0             	mov    %eax,-0x10(%ebp)

    return (char*)sys_call(&args);
80000318:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000031b:	50                   	push   %eax
8000031c:	e8 b1 fd ff ff       	call   800000d2 <sys_call>
80000321:	83 c4 04             	add    $0x4,%esp
}
80000324:	c9                   	leave  
80000325:	c3                   	ret    

80000326 <dup>:
 * @brief 在当前进程的打开文件表中分配新的一项指向该文件描述符对应的文件指针
 * 
 * @param file 需要被多次引用的文件指针的文件描述符
 * @return int 新的文件描述符
 */
int dup(int file) {
80000326:	55                   	push   %ebp
80000327:	89 e5                	mov    %esp,%ebp
80000329:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_dup;
8000032c:	c7 45 ec 3a 00 00 00 	movl   $0x3a,-0x14(%ebp)
    args.arg0 = file;
80000333:	8b 45 08             	mov    0x8(%ebp),%eax
80000336:	89 45 f0             	mov    %eax,-0x10(%ebp)

    return sys_call(&args);
80000339:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000033c:	50                   	push   %eax
8000033d:	e8 90 fd ff ff       	call   800000d2 <sys_call>
80000342:	83 c4 04             	add    $0x4,%esp
}
80000345:	c9                   	leave  
80000346:	c3                   	ret    

80000347 <_exit>:
/**
 * @brief 进程退出的系统调用
 * 
 * @param status 
 */
void _exit(int status) {
80000347:	55                   	push   %ebp
80000348:	89 e5                	mov    %esp,%ebp
8000034a:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_exit;
8000034d:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
    args.arg0 = status;
80000354:	8b 45 08             	mov    0x8(%ebp),%eax
80000357:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    sys_call(&args);
8000035a:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000035d:	50                   	push   %eax
8000035e:	e8 6f fd ff ff       	call   800000d2 <sys_call>
80000363:	83 c4 04             	add    $0x4,%esp
}
80000366:	90                   	nop
80000367:	c9                   	leave  
80000368:	c3                   	ret    

80000369 <wait>:
 * @brief 回收进程资源
 * 
 * @param status 
 * @return int 
 */
int wait(int *status) {
80000369:	55                   	push   %ebp
8000036a:	89 e5                	mov    %esp,%ebp
8000036c:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_wait;
8000036f:	c7 45 ec 06 00 00 00 	movl   $0x6,-0x14(%ebp)
    args.arg0 = (int)status;
80000376:	8b 45 08             	mov    0x8(%ebp),%eax
80000379:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    return sys_call(&args);
8000037c:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000037f:	50                   	push   %eax
80000380:	e8 4d fd ff ff       	call   800000d2 <sys_call>
80000385:	83 c4 04             	add    $0x4,%esp
80000388:	c9                   	leave  
80000389:	c3                   	ret    
